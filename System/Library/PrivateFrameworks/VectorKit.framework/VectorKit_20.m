void ggl::ConstantDataTyped<ggl::RouteLineArrow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineArrow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E16A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineArrow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E16A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineArrow::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::RouteLineArrowBatch::~RouteLineArrowBatch(md::RouteLineArrowBatch *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E4297A08;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E428C780;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E4297A08;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E428C780;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

void md::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C780;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::Ribbons::PassRenderItem::~PassRenderItem(md::Ribbons::PassRenderItem *this)
{
  *(_QWORD *)this = &off_1E42B59B0;
  *((_QWORD *)this + 2) = 3131955885;
}

{
  *(_QWORD *)this = &off_1E42B59B0;
  *((_QWORD *)this + 2) = 3131955885;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  unint64_t *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  __int128 v14;
  unsigned __int8 v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  float v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  size_t prime;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD **v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _QWORD *i;
  size_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  _OWORD *v126;
  unint64_t *v127;
  uint64_t v128;
  __int128 v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t *v135;
  std::vector<unsigned int>::pointer begin;
  int64_t v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  char *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  void (***v157)(_QWORD, uint64_t);
  void (***v158)(_QWORD, uint64_t);
  unsigned __int8 v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 v170;
  std::vector<unsigned int>::pointer v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t *v182;
  char *v183;
  char *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  malloc_zone_t *zone;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  geo::read_write_lock *v199;
  const char *v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  void (***v204)(_QWORD, uint64_t);
  void (***v205)(_QWORD, uint64_t);
  unsigned __int8 v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  unint64_t *v227;
  __int128 *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  unint64_t v232;
  _QWORD *v233;
  void (***v234)(_QWORD);
  void (***v235)(_QWORD);
  unsigned __int8 v236;
  uint64_t v237;
  unsigned __int8 v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  uint64_t *v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  _OWORD *v254;
  uint64_t *v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int8x16_t *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  uint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  unint64_t *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  unint64_t *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unsigned __int8 v284;
  uint64_t v285;
  BOOL v286;
  uint64_t v287;
  char *v288;
  __int128 *v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  unint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  void (***v300)(_QWORD, uint64_t);
  void (***v301)(_QWORD, uint64_t);
  unsigned __int8 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  unint64_t v309;
  unsigned __int8 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  unsigned __int8 v316;
  unsigned __int8 v317;
  unsigned __int8 v318;
  int v319;
  char v320;
  int64_t v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  _QWORD *v325;
  char *v326;
  char *v327;
  _QWORD *v328;
  _QWORD **v329;
  _QWORD **v330;
  char *v331;
  _QWORD *v332;
  _QWORD **v333;
  _QWORD **v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  _QWORD *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  float *v343;
  float v344;
  uint64_t v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  uint64_t v353;
  float *v354;
  uint64_t v355;
  uint64_t v356;
  float v357;
  float v358;
  uint64_t v359;
  float *v360;
  float v361;
  float v362;
  float *v363;
  uint64_t v364;
  float v365;
  float v366;
  BOOL v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  double v373;
  double v374;
  float v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  _BYTE *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  _OWORD *v387;
  char *v388;
  uint64_t v389;
  __int128 v390;
  gdc::GlobeTileGrid *v391;
  gdc::GlobeTileGrid *v392;
  gdc::GlobeTileGrid *v393;
  uint64_t v394;
  char *v395;
  uint64_t *v396;
  uint64_t *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  gdc::GlobeTileGrid *v401;
  uint64_t v402;
  float *v403;
  unsigned int v404;
  float v405;
  unsigned int v406;
  unsigned int v407;
  float *v408;
  float v409;
  float v410;
  char *v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  char *v417;
  unint64_t *v418;
  unsigned int *v419;
  __int128 v420;
  unsigned __int8 v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  std::__shared_weak_count *v424;
  std::__shared_count v425;
  unsigned __int8 v426;
  uint64_t v427;
  unsigned int *v428;
  unint64_t v429;
  unint64_t v430;
  unsigned __int8 v431;
  uint64_t v432;
  unsigned __int8 v433;
  uint64_t v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t *v446;
  _QWORD *v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  _BYTE *v454;
  uint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  _OWORD *v459;
  uint64_t *v460;
  uint64_t v461;
  __int128 v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  uint64_t v480;
  _QWORD *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *end;
  unint64_t *v489;
  unint64_t v490;
  _QWORD *v491;
  int v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  int v496;
  unsigned __int8 v497;
  int v498;
  uint64_t v499;
  geo::read_write_lock *v500;
  const char *v501;
  malloc_zone_t *v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  geo::read_write_lock *v506;
  const char *v507;
  malloc_zone_t *v508;
  uint64_t v509;
  unint64_t *v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t *v513;
  unint64_t v514;
  uint64_t v515;
  float v516;
  float32x2_t v517;
  uint64_t **v522;
  uint64_t **v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  __int128 v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int *v538;
  unsigned int *v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int8x16_t v551;
  unint64_t v552;
  float *v553;
  float32x2_t v554;
  unint64_t v555;
  float v556;
  float32x2_t v557;
  uint64_t v558;
  int8x16_t v559;
  int32x4_t *v560;
  float32x4_t v561;
  unint64_t v562;
  float32x4_t v563;
  const float *i32;
  int32x4_t v565;
  int32x4_t v566;
  int32x4_t v567;
  int8x16_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  unint64_t v574;
  _QWORD *v575;
  float32x2_t v576;
  float32x2_t v577;
  double v578;
  float v579;
  float32x2_t *v580;
  float v581;
  uint64_t v582;
  int32x2_t v583;
  float32x2_t v584;
  float32x2_t v585;
  int v586;
  float32x2_t v587;
  float32x2_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float *p_xIdx;
  float *v596;
  unint64_t v597;
  uint64_t v598;
  float32x4_t v599;
  float v600;
  float32x2_t v601;
  float v602;
  float v603;
  float32x4_t v604;
  float32x4_t v605;
  float *v606;
  float v607;
  float v608;
  float *v609;
  unint64_t v610;
  float v611;
  float v612;
  float v614;
  float v615;
  float v616;
  float v617;
  unsigned int v618;
  unint64_t v619;
  float32x2_t v620;
  float v621;
  float v622;
  float v623;
  float v624;
  float v625;
  float v626;
  float v627;
  int v628;
  float v629;
  float v630;
  double v631;
  double v632;
  float v633;
  float v634;
  float v635;
  float v636;
  unint64_t v637;
  float v638;
  float32x2_t v639;
  __float2 v640;
  float32x2_t v641;
  float32x2_t v642;
  uint64_t j;
  __float2 v644;
  float32x4_t v645;
  float32x4_t v646;
  float v647;
  __float2 v648;
  float32x2_t v649;
  float32x2_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float v653;
  uint64_t v654;
  __float2 v655;
  float32x4_t v656;
  float32x4_t v657;
  float v658;
  __float2 v659;
  float32x4_t v660;
  float32x4_t v661;
  double v662;
  float v663;
  float32x2_t v664;
  __float2 v665;
  float32x2_t v666;
  float32x2_t v667;
  float v668;
  __float2 v669;
  float32x2_t v670;
  float32x2_t v671;
  float *v672;
  float *v673;
  float v674;
  float v675;
  float v676;
  int16x8_t v677;
  QuadTile *v678;
  float v679;
  float v680;
  float v681;
  float v682;
  int v683;
  float32x4_t v684;
  float32x4_t v685;
  uint64_t v686;
  float32x4_t v687;
  uint64_t v688;
  float32x4_t v689;
  float32x4_t v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  _WORD *v697;
  uint64_t v698;
  unint64_t v699;
  unint64_t v700;
  _WORD *v701;
  __int16 v702;
  unint64_t v703;
  __int16 v704;
  __int16 v705;
  unint64_t v706;
  uint64_t v707;
  __int16 *v708;
  unint64_t v709;
  int64x2_t v710;
  int64x2_t v711;
  int64x2_t v712;
  __int16 *v713;
  unint64_t v714;
  int64x2_t v715;
  unint64_t v716;
  unint64_t v717;
  char *v718;
  int16x4_t v719;
  int16x4_t v720;
  int16x4_t v721;
  int16x4_t v722;
  unsigned __int8 v723;
  _QWORD *v724;
  _QWORD *v725;
  _QWORD *v726;
  void (***v727)(_QWORD, _QWORD *);
  void (***v728)(_QWORD, _QWORD *);
  unsigned __int8 v729;
  uint64_t v730;
  unsigned int *value;
  unsigned int *v732;
  std::vector<unsigned int>::pointer v733;
  int v734;
  int v735;
  unsigned int *v736;
  unsigned int *v737;
  unint64_t v738;
  unint64_t v739;
  _QWORD *v740;
  int v741;
  int v742;
  unint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t result;
  uint64_t v747;
  uint64_t v748;
  uint64_t **v750;
  _QWORD *v752;
  uint64_t **v753;
  uint64_t *v754;
  float32x2_t v755;
  float32x2_t v756;
  __int16 *v757;
  uint64_t *v758;
  unint64_t v759;
  uint64_t *v760;
  _WORD *v761;
  QuadTile *v762;
  QuadTile *v763;
  void **v764;
  float v765;
  _QWORD *v766;
  float *v768;
  gdc::GlobeTileGrid **v771;
  unint64_t v772;
  unint64_t *v773;
  _QWORD *v774;
  uint64_t v775;
  float32x2_t v776;
  _QWORD *v777;
  _QWORD **v778;
  float v779;
  char *v780;
  unint64_t v781;
  float v782;
  char *v783;
  float v784;
  unint64_t *v785;
  _QWORD *v786;
  float v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t *v790;
  char *v791;
  char *v792;
  unint64_t v793;
  uint64_t v794;
  _QWORD **v795;
  std::__shared_weak_count *v796;
  float v797;
  uint64_t *v798;
  uint64_t v799;
  _QWORD *v800;
  float v801;
  float32x2_t v802;
  unint64_t *v803;
  unint64_t *v804;
  float v805;
  float v806;
  uint64_t v807;
  unsigned int *v808;
  float v809;
  float v810;
  uint64_t *v811;
  unint64_t v812;
  unint64_t v813;
  std::vector<unsigned int> v814;
  void *v815[3];
  std::vector<unsigned int> __p;
  unsigned int *v817;
  __int16 v818;
  uint64_t v819;
  _BYTE v820[32];
  __int128 v821;
  uint64_t v822;
  __int128 v823;
  float v824;
  float v825;
  unint64_t v826;
  __int128 v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unint64_t v831;
  float v832;
  uint64_t v833;
  int16x8x2_t v834;
  float32x4x3_t v835;

  v833 = *MEMORY[0x1E0C80C00];
  v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
  v777 = a3;
  v10 = 0;
  if (!a3)
  {
    v785 = 0;
    goto LABEL_464;
  }
  v773 = 0;
  v785 = 0;
  while (2)
  {
    v827 = 0uLL;
    {
      v312 = operator new();
      *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v312, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v828 = *((_QWORD *)v9 + 299);
    v829 = 0;
    {
      v313 = operator new();
      *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v313, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v830 = *((_QWORD *)v9 + 299);
    v831 = 0;
    v832 = 1.0;
    v6 = v777[4];
    v13 = v777[5];
    if (v6 != v13)
    {
      while (1)
      {
        v53 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*(_QWORD *)v6 + 88), *(_QWORD **)(*(_QWORD *)v6 + 72));
        v54 = v53;
        v55 = v53;
        v56 = *((_QWORD *)&v827 + 1);
        if (*((_QWORD *)&v827 + 1))
        {
          v57 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v827 + 8));
          v57.i16[0] = vaddlv_u8(v57);
          if (v57.u32[0] > 1uLL)
          {
            v7 = v53;
            if (*((_QWORD *)&v827 + 1) <= (unint64_t)v53)
              v7 = (unint64_t)v53 % *((_QWORD *)&v827 + 1);
          }
          else
          {
            v7 = (DWORD2(v827) - 1) & v53;
          }
          v58 = *(uint64_t **)(v827 + 8 * v7);
          if (v58)
          {
            v59 = *v58;
            if (*v58)
            {
              if (v57.u32[0] < 2uLL)
              {
                while (1)
                {
                  v61 = *(_QWORD *)(v59 + 8);
                  if (v61 == v53)
                  {
                    if (*(_DWORD *)(v59 + 16) == v53)
                      goto LABEL_125;
                  }
                  else if ((v61 & (*((_QWORD *)&v827 + 1) - 1)) != v7)
                  {
                    goto LABEL_65;
                  }
                  v59 = *(_QWORD *)v59;
                  if (!v59)
                    goto LABEL_65;
                }
              }
              do
              {
                v60 = *(_QWORD *)(v59 + 8);
                if (v60 == v53)
                {
                  if (*(_DWORD *)(v59 + 16) == v53)
                    goto LABEL_125;
                }
                else
                {
                  if (v60 >= *((_QWORD *)&v827 + 1))
                    v60 %= *((_QWORD *)&v827 + 1);
                  if (v60 != v7)
                    break;
                }
                v59 = *(_QWORD *)v59;
              }
              while (v59);
            }
          }
        }
LABEL_65:
        v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v830 + 16))(v830, 56, 8);
        __p.__begin_ = (std::vector<unsigned int>::pointer)v59;
        __p.__end_ = (std::vector<unsigned int>::pointer)&v830;
        *(_QWORD *)v59 = 0;
        *(_QWORD *)(v59 + 8) = v55;
        *(_DWORD *)(v59 + 16) = v54;
        *(_QWORD *)(v59 + 32) = 0;
        *(_QWORD *)(v59 + 40) = 0;
        *(_QWORD *)(v59 + 24) = 0;
        {
          v117 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v117, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v59 + 48) = mdm::Allocator::instance(void)::alloc;
        LOBYTE(__p.__end_cap_.__value_) = 1;
        v63 = (float)(v831 + 1);
        if (!v56 || (float)(v832 * (float)v56) < v63)
          break;
LABEL_115:
        v84 = *(uint64_t **)(v827 + 8 * v7);
        if (v84)
        {
          *(_QWORD *)v59 = *v84;
LABEL_123:
          *v84 = v59;
          goto LABEL_124;
        }
        *(_QWORD *)v59 = v829;
        v829 = v59;
        *(_QWORD *)(v827 + 8 * v7) = &v829;
        if (*(_QWORD *)v59)
        {
          v85 = *(_QWORD *)(*(_QWORD *)v59 + 8);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v85 >= v56)
              v85 %= v56;
          }
          else
          {
            v85 &= v56 - 1;
          }
          v84 = (uint64_t *)(v827 + 8 * v85);
          goto LABEL_123;
        }
LABEL_124:
        ++v831;
LABEL_125:
        v86 = *(_QWORD **)(v59 + 32);
        v87 = *(_QWORD *)(v59 + 40);
        if ((unint64_t)v86 < v87)
        {
          if (v86)
          {
            v88 = *(_QWORD *)v6;
            *(_QWORD *)v6 = 0;
            *v86 = v88;
          }
          v52 = v86 + 1;
          goto LABEL_44;
        }
        v89 = *(_QWORD *)(v59 + 24);
        v90 = ((uint64_t)v86 - v89) >> 3;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61)
          abort();
        v92 = v87 - v89;
        if (v92 >> 2 > v91)
          v91 = v92 >> 2;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        if (v93)
        {
          v94 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v59 + 48) + 16))(*(_QWORD *)(v59 + 48), 8 * v93, 8);
          v95 = (_QWORD *)(v94 + 8 * v90);
          v96 = v94 + 8 * v93;
          if (v94)
          {
            v97 = *(_QWORD *)v6;
            *(_QWORD *)v6 = 0;
            *v95 = v97;
          }
        }
        else
        {
          v96 = 0;
          v95 = (_QWORD *)(8 * v90);
        }
        v52 = v95 + 1;
        v98 = *(_QWORD **)(v59 + 24);
        v99 = *(_QWORD *)(v59 + 32);
        if ((_QWORD *)v99 != v98)
        {
          v100 = v99 - (_QWORD)v98 - 8;
          if (v100 > 0x47
            && ((v101 = v100 >> 3, v99 - 8 * v101 - 8 >= (unint64_t)v95)
             || (unint64_t)&v95[-v101 - 1] >= v99))
          {
            v109 = v101 + 1;
            v110 = (v101 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v102 = (_QWORD *)(v99 - 8 * v110);
            v111 = v95 - 2;
            v112 = (__int128 *)(v99 - 32);
            v113 = v110;
            do
            {
              v115 = *v112;
              v114 = v112[1];
              *v112 = 0uLL;
              v112[1] = 0uLL;
              v112 -= 2;
              *(v111 - 1) = v115;
              *v111 = v114;
              v111 -= 2;
              v113 -= 4;
            }
            while (v113);
            v95 -= v110;
            if (v109 == v110)
              goto LABEL_144;
          }
          else
          {
            v102 = *(_QWORD **)(v59 + 32);
          }
          do
          {
            v103 = *--v102;
            *v102 = 0;
            *--v95 = v103;
          }
          while (v102 != v98);
LABEL_144:
          v99 = *(_QWORD *)(v59 + 24);
          v104 = *(_QWORD **)(v59 + 32);
          *(_QWORD *)(v59 + 24) = v95;
          *(_QWORD *)(v59 + 32) = v52;
          v105 = *(_QWORD *)(v59 + 40);
          *(_QWORD *)(v59 + 40) = v96;
          while (v104 != (_QWORD *)v99)
          {
            v106 = *--v104;
            v7 = v106;
            *v104 = 0;
            if (v106)
            {
              (**(void (***)(unint64_t))v7)(v7);
              {
                v108 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v108, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
            }
          }
          if (!v99)
            goto LABEL_44;
LABEL_154:
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v59 + 48) + 40))(*(_QWORD *)(v59 + 48), v99, v105 - v99);
          goto LABEL_44;
        }
        *(_QWORD *)(v59 + 24) = v95;
        *(_QWORD *)(v59 + 32) = v52;
        v105 = *(_QWORD *)(v59 + 40);
        *(_QWORD *)(v59 + 40) = v96;
        if (v99)
          goto LABEL_154;
LABEL_44:
        *(_QWORD *)(v59 + 32) = v52;
        v6 += 8;
        v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
        if (v6 == v13)
          goto LABEL_8;
      }
      v64 = (v56 & (v56 - 1)) != 0;
      if (v56 < 3)
        v64 = 1;
      v65 = v64 | (2 * v56);
      v66 = vcvtps_u32_f32(v63 / v832);
      if (v65 <= v66)
        prime = v66;
      else
        prime = v65;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v56 = *((_QWORD *)&v827 + 1);
      if (prime <= *((_QWORD *)&v827 + 1))
      {
        if (prime >= *((_QWORD *)&v827 + 1))
          goto LABEL_102;
        v78 = vcvtps_u32_f32((float)v831 / v832);
        if (*((_QWORD *)&v827 + 1) < 3uLL
          || (v79 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v827 + 8)), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
        {
          v78 = std::__next_prime(v78);
        }
        else
        {
          v80 = 1 << -(char)__clz(v78 - 1);
          if (v78 >= 2)
            v78 = v80;
        }
        if (prime <= v78)
          prime = v78;
        if (prime >= v56)
        {
          v56 = *((_QWORD *)&v827 + 1);
LABEL_102:
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v56 <= v55)
              v7 = v55 % v56;
            else
              v7 = v55;
          }
          else
          {
            v7 = ((_DWORD)v56 - 1) & v55;
          }
          goto LABEL_115;
        }
        if (!prime)
        {
          v116 = v827;
          *(_QWORD *)&v827 = 0;
          if (v116)
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v828 + 40))(v828, v116, 8 * *((_QWORD *)&v827 + 1));
          v56 = 0;
          *((_QWORD *)&v827 + 1) = 0;
          goto LABEL_102;
        }
      }
      v68 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(*(_QWORD *)v828 + 16))(v828, 8 * prime, 8);
      v69 = v827;
      *(_QWORD *)&v827 = v68;
      if (v69)
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v828 + 40))(v828, v69, 8 * *((_QWORD *)&v827 + 1));
      v70 = 0;
      *((_QWORD *)&v827 + 1) = prime;
      do
        *(_QWORD *)(v827 + 8 * v70++) = 0;
      while (prime != v70);
      v71 = (_QWORD **)v829;
      if (!v829)
      {
LABEL_101:
        v56 = prime;
        goto LABEL_102;
      }
      v72 = *(_QWORD *)(v829 + 8);
      v73 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v74 = v72 & v73;
        *(_QWORD *)(v827 + 8 * v74) = &v829;
        for (i = *v71; *v71; i = *v71)
        {
          v76 = i[1] & v73;
          if (v76 == v74)
          {
            v71 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(v827 + 8 * v76))
          {
            *v71 = (_QWORD *)*i;
            v77 = 8 * v76;
            *i = **(_QWORD **)(v827 + v77);
            **(_QWORD **)(v827 + v77) = i;
          }
          else
          {
            *(_QWORD *)(v827 + 8 * v76) = v71;
            v71 = (_QWORD **)i;
            v74 = v76;
          }
        }
        goto LABEL_101;
      }
      if (v72 >= prime)
        v72 %= prime;
      *(_QWORD *)(v827 + 8 * v72) = &v829;
      v81 = *v71;
      if (!*v71)
        goto LABEL_101;
      while (1)
      {
        v83 = v81[1];
        if (v83 >= prime)
          v83 %= prime;
        if (v83 != v72)
        {
          if (!*(_QWORD *)(v827 + 8 * v83))
          {
            *(_QWORD *)(v827 + 8 * v83) = v71;
            goto LABEL_106;
          }
          *v71 = (_QWORD *)*v81;
          v82 = 8 * v83;
          *v81 = **(_QWORD **)(v827 + v82);
          **(_QWORD **)(v827 + v82) = v81;
          v81 = v71;
        }
        v83 = v72;
LABEL_106:
        v71 = (_QWORD **)v81;
        v81 = (_QWORD *)*v81;
        v72 = v83;
        if (!v81)
          goto LABEL_101;
      }
    }
LABEL_8:
    v7 = operator new();
    v14 = 0uLL;
    *(_OWORD *)(v7 + 144) = 0u;
    *(_QWORD *)v7 = &off_1E42AF1C8;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 32) = "";
    *(_DWORD *)(v7 + 56) = 0;
    *(_DWORD *)(v7 + 72) = 1065353216;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(int64x2_t *)(v7 + 112) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 16) = &off_1E42AF548;
    *(_BYTE *)(v7 + 136) = 1;
    *(_OWORD *)(v7 + 160) = 0u;
    *(_OWORD *)(v7 + 176) = 0u;
    if ((v15 & 1) == 0)
    {
      v14 = 0uLL;
      if (v314)
      {
        v315 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v315, "GeoGL", 0xA3D02C1100000005);
        v14 = 0uLL;
      }
    }
    *(_QWORD *)(v7 + 192) = ggl::Allocator::instance(void)::alloc;
    *(_OWORD *)(v7 + 200) = v14;
    *(_OWORD *)(v7 + 216) = v14;
    *(_QWORD *)(v7 + 232) = 0;
    *(_QWORD *)(v7 + 240) = 32;
    v16 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v16 = 0;
    v16[1] = 0;
    *(_QWORD *)(v7 + 224) = v16;
    *(_QWORD *)(v7 + 232) = v16;
    *(_QWORD *)(v7 + 256) = 0;
    *(_QWORD *)(v7 + 264) = 0;
    *(_QWORD *)(v7 + 248) = 0;
    *(_BYTE *)(v7 + 272) = 1;
    *(_QWORD *)v7 = &off_1E428C780;
    *(_QWORD *)(v7 + 280) = v777[2];
    v17 = v777[3];
    *(_QWORD *)(v7 + 288) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_QWORD *)v7 = &off_1E4297A08;
    *(_QWORD *)(v7 + 296) = 0;
    v20 = (_QWORD *)operator new();
    if ((v21 & 1) == 0
    {
      if ((v316 & 1) == 0
      {
        if ((v318 & 1) == 0
        {
          ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLineArrow::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::attributesReflection(void)::r;
        unk_1EE5763A0 = 1;
      }
      ggl::RouteLineArrow::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::typedReflection(void)::r;
      *(_QWORD *)algn_1EE576328 = &ggl::RouteLineArrow::pipelineDataBasePipelineDeviceStructs(void)::ref;
      qword_1EE576330 = 0;
      if ((v317 & 1) == 0
      {
        ggl::RouteLineArrow::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        unk_1EE576360 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1EE576368 = (uint64_t)ggl::RouteLineArrow::Style::reflection(void)::reflection;
      }
      qword_1EE576338 = (uint64_t)&ggl::RouteLineArrow::pipelineDataBasePipelineConstantStructs(void)::ref;
      unk_1EE576340 = xmmword_19FFB35E0;
      v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
    ggl::PipelineSetup::PipelineSetup((uint64_t)v20, (uint64_t)&ggl::RouteLineArrow::BasePipelineSetup::typedReflection(void)::ref);
    *v20 = &off_1E42B6D88;
    v22 = (uint64_t *)v20[8];
    v22[1] = 0;
    v23 = *a4;
    *v22 = *a4;
    v24 = (_QWORD *)v20[20];
    v25 = a4[1];
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = (std::__shared_weak_count *)v24[1];
    *v24 = v23;
    v24[1] = v25;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v20[8];
    *(_QWORD *)(v31 + 24) = 0;
    v32 = *a5;
    *(_QWORD *)(v31 + 16) = *a5;
    v33 = v20[20];
    v34 = a5[1];
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *(std::__shared_weak_count **)(v33 + 24);
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v34;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v40->__shared_owners_ = 0;
    v41 = (unint64_t *)&v40->__shared_owners_;
    v40->__shared_weak_owners_ = 0;
    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E16A8;
    v42 = ggl::BufferData::BufferData((uint64_t)&v40[1], qword_1EE574328, 2, 1, 6, 1);
    v40[9].__shared_owners_ = (uint64_t)ggl::RouteLineArrow::Style::reflection(void)::reflection;
    v40[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B90B0;
    v43 = v20[8];
    *(_QWORD *)(v43 + 32) = v42;
    *(_QWORD *)(v43 + 40) = 0;
    v44 = v20[20];
    do
      v45 = __ldxr(v41);
    while (__stxr(v45 + 1, v41));
    v46 = *(std::__shared_weak_count **)(v44 + 40);
    *(_QWORD *)(v44 + 32) = v42;
    *(_QWORD *)(v44 + 40) = v40;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    do
      v49 = __ldaxr(v41);
    while (__stlxr(v49 - 1, v41));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    v50 = *(_QWORD *)(v7 + 296);
    *(_QWORD *)(v7 + 296) = v20;
    if (v50)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v20 = *(_QWORD **)(v7 + 296);
    }
    *(_QWORD *)(v7 + 48) = v20;
    if (v785 < v773)
    {
      *v785 = v7;
      v51 = v785 + 1;
      goto LABEL_192;
    }
    v6 = v785 - v10;
    v118 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      abort();
    if (((char *)v773 - (char *)v10) >> 2 > v118)
      v118 = ((char *)v773 - (char *)v10) >> 2;
    if ((unint64_t)((char *)v773 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
      v119 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v119 = v118;
    if (v119)
    {
      if (v119 >> 61)
        goto LABEL_849;
      v120 = operator new(8 * v119);
    }
    else
    {
      v120 = 0;
    }
    v121 = (unint64_t *)&v120[8 * v6];
    *v121 = v7;
    v122 = v121 + 1;
    if (v785 != v10)
    {
      v123 = (char *)(v785 - 1) - (char *)v10;
      if (v123 >= 0x58)
      {
        if ((unint64_t)((char *)v10 - v120) >= 0x20)
        {
          v125 = (v123 >> 3) + 1;
          v124 = &v785[-(v125 & 0x3FFFFFFFFFFFFFFCLL)];
          v126 = &v120[8 * v6 - 16];
          v127 = v785 - 2;
          v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v129 = *(_OWORD *)v127;
            *(v126 - 1) = *((_OWORD *)v127 - 1);
            *v126 = v129;
            v126 -= 2;
            v127 -= 4;
            v128 -= 4;
          }
          while (v128);
          v121 -= v125 & 0x3FFFFFFFFFFFFFFCLL;
          if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_189;
        }
        else
        {
          v124 = v785;
        }
      }
      else
      {
        v124 = v785;
      }
      do
      {
        v130 = *--v124;
        *--v121 = v130;
      }
      while (v124 != v10);
    }
LABEL_189:
    v773 = (unint64_t *)&v120[8 * v119];
    if (v10)
      operator delete(v10);
    v10 = v121;
    v51 = v122;
LABEL_192:
    v785 = v51;
    v803 = v10;
    v794 = v829;
    if (v829)
    {
      v131 = 0;
      v811 = 0;
      v132 = 0;
      while (1)
      {
        v133 = operator new();
        *(_QWORD *)(v133 + 96) = 0;
        *(_OWORD *)(v133 + 64) = 0u;
        *(_OWORD *)(v133 + 80) = 0u;
        *(_OWORD *)(v133 + 32) = 0u;
        *(_OWORD *)(v133 + 48) = 0u;
        *(_OWORD *)v133 = 0u;
        *(_OWORD *)(v133 + 16) = 0u;
        *(_BYTE *)(v133 + 48) = 1;
        *(_QWORD *)(v133 + 56) = 0;
        *(_QWORD *)(v133 + 64) = 0;
        *(_QWORD *)(v133 + 72) = 0;
        {
          v259 = operator new();
          *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v259, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v133 + 80) = *((_QWORD *)v9 + 299);
        *(_DWORD *)(v133 + 96) = 0;
        __p.__begin_ = (std::vector<unsigned int>::pointer)v133;
        if (v132 < v811)
        {
          __p.__begin_ = 0;
          *v132 = v133;
          v135 = v132 + 1;
          begin = __p.__begin_;
          if (!__p.__begin_)
            goto LABEL_244;
LABEL_232:
          v161 = (_QWORD *)*((_QWORD *)begin + 7);
          if (v161)
          {
            v162 = (_QWORD *)*((_QWORD *)begin + 8);
            v163 = *((_QWORD *)begin + 7);
            if (v162 != v161)
            {
              do
              {
                v164 = *--v162;
                v7 = v164;
                *v162 = 0;
                if (v164)
                {
                  (**(void (***)(unint64_t, uint64_t))v7)(v7, v163);
                  if ((v165 & 1) == 0
                  {
                    v166 = operator new();
                    *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v7, 104);
                }
              }
              while (v162 != v161);
              v163 = *((_QWORD *)begin + 7);
            }
            *((_QWORD *)begin + 8) = v161;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)begin + 10) + 40))(*((_QWORD *)begin + 10), v163, *((_QWORD *)begin + 9) - v163);
          }
          MEMORY[0x1A1AF4E00](begin, 0x1020C4010FC18DELL);
          goto LABEL_244;
        }
        v137 = (char *)v132 - (char *)v131;
        v138 = v131;
        v139 = v132 - v131;
        v140 = v139 + 1;
        v141 = v138;
        if ((unint64_t)(v139 + 1) >> 61)
          abort();
        v142 = (char *)v811 - (char *)v138;
        v143 = ((char *)v811 - (char *)v138) >> 2;
        if (v143 > v140)
          v140 = v143;
        if (v142 >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v140;
        v812 = v144;
        if (v144)
        {
          if (v144 >> 61)
            goto LABEL_849;
          v7 = (unint64_t)operator new(8 * v144);
        }
        else
        {
          v7 = 0;
        }
        v145 = (uint64_t *)(v7 + 8 * v139);
        __p.__begin_ = 0;
        *v145 = v133;
        v135 = v145 + 1;
        v146 = (char *)((char *)v132 - (char *)v141);
        if (v132 == v141)
        {
          v151 = v141;
          goto LABEL_229;
        }
        v147 = v146 - 8;
        if ((unint64_t)(v146 - 8) < 0x138)
          break;
        v250 = (unint64_t)v147 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v132 - ((unint64_t)v147 & 0xFFFFFFFFFFFFFFF8) - 8) > v132 - 1
          || v7 - 8 + v137 - v250 > v7 - 8 + v137)
        {
          break;
        }
        v251 = (unint64_t)v147 >> 3;
        if (&v132[-v251 - 1] < v145)
        {
          v149 = v141;
          v252 = v7 - 8 + v137 - v250;
          v148 = v132;
          if (v252 < (unint64_t)v132)
            goto LABEL_212;
        }
        v253 = v251 + 1;
        v148 = &v132[-(v253 & 0x3FFFFFFFFFFFFFFCLL)];
        v254 = (_OWORD *)(v7 + 8 * v139 - 16);
        v255 = v132 - 4;
        v256 = v253 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v258 = *(_OWORD *)v255;
          v257 = *((_OWORD *)v255 + 1);
          *(_OWORD *)v255 = 0uLL;
          *((_OWORD *)v255 + 1) = 0uLL;
          v255 -= 4;
          *(v254 - 1) = v258;
          *v254 = v257;
          v254 -= 2;
          v256 -= 4;
        }
        while (v256);
        v145 -= v253 & 0x3FFFFFFFFFFFFFFCLL;
        v149 = v141;
        if (v253 != (v253 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_212;
LABEL_213:
        v151 = v149;
        do
        {
          v154 = *--v132;
          v153 = v154;
          *v132 = 0;
          if (v154)
          {
            v155 = *(_QWORD **)(v153 + 56);
            if (v155)
            {
              v156 = *(_QWORD **)(v153 + 64);
              v152 = *(_QWORD *)(v153 + 56);
              if (v156 != v155)
              {
                do
                {
                  v158 = (void (***)(_QWORD, uint64_t))*--v156;
                  v157 = v158;
                  *v156 = 0;
                  if (v158)
                  {
                    (**v157)(v157, v152);
                    if ((v159 & 1) == 0
                    {
                      v160 = operator new();
                      *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v160, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v157, 104);
                  }
                }
                while (v156 != v155);
                v152 = *(_QWORD *)(v153 + 56);
                v151 = v141;
              }
              *(_QWORD *)(v153 + 64) = v155;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v153 + 80) + 40))(*(_QWORD *)(v153 + 80), v152, *(_QWORD *)(v153 + 72) - v152);
              v10 = v803;
            }
            MEMORY[0x1A1AF4E00](v153, 0x1020C4010FC18DELL);
          }
        }
        while (v132 != v151);
LABEL_229:
        v811 = (uint64_t *)(v7 + 8 * v812);
        if (v151)
          operator delete(v151);
        v131 = v145;
        begin = __p.__begin_;
        if (__p.__begin_)
          goto LABEL_232;
LABEL_244:
        *(_DWORD *)(*(v135 - 1) + 96) = *(_DWORD *)(v794 + 16);
        v6 = *(_QWORD *)(v794 + 24);
        v807 = *(_QWORD *)(v794 + 32);
        if (v6 != v807)
        {
          v167 = 0;
          while (1)
          {
            v7 = *(_QWORD *)v6;
            v168 = *(_QWORD *)(*(_QWORD *)v6 + 88);
            if ((unint64_t)(v168 + v167) <= 0x5999)
            {
              v172 = *(v135 - 1);
              goto LABEL_302;
            }
            v169 = operator new();
            *(_QWORD *)(v169 + 96) = 0;
            *(_OWORD *)(v169 + 64) = 0u;
            *(_OWORD *)(v169 + 80) = 0u;
            *(_OWORD *)(v169 + 32) = 0u;
            *(_OWORD *)(v169 + 48) = 0u;
            *(_OWORD *)v169 = 0u;
            *(_OWORD *)(v169 + 16) = 0u;
            *(_BYTE *)(v169 + 48) = 1;
            *(_QWORD *)(v169 + 56) = 0;
            *(_QWORD *)(v169 + 64) = 0;
            *(_QWORD *)(v169 + 72) = 0;
            {
              v249 = operator new();
              *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v249, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v169 + 80) = *((_QWORD *)v9 + 299);
            *(_DWORD *)(v169 + 96) = 0;
            __p.__begin_ = (std::vector<unsigned int>::pointer)v169;
            if (v135 >= v811)
              break;
            __p.__begin_ = 0;
            *v135++ = v169;
            v171 = __p.__begin_;
            if (__p.__begin_)
              goto LABEL_289;
LABEL_301:
            v167 = 0;
            v172 = *(v135 - 1);
            *(_DWORD *)(v172 + 96) = *(_DWORD *)(v794 + 16);
            v7 = *(_QWORD *)v6;
            v168 = *(_QWORD *)(*(_QWORD *)v6 + 88);
LABEL_302:
            *(_QWORD *)v6 = 0;
            v208 = *(unint64_t **)(v172 + 64);
            v209 = *(_QWORD *)(v172 + 72);
            if ((unint64_t)v208 < v209)
            {
              if (v208)
              {
                *v208 = v7;
                v7 = 0;
              }
              v210 = v208 + 1;
              goto LABEL_339;
            }
            v211 = *(_QWORD *)(v172 + 56);
            v212 = ((uint64_t)v208 - v211) >> 3;
            v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 61)
              abort();
            v214 = v209 - v211;
            if (v214 >> 2 > v213)
              v213 = v214 >> 2;
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
              v215 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v215 = v213;
            if (v215)
            {
              v216 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v172 + 80) + 16))(*(_QWORD *)(v172 + 80), 8 * v215, 8);
              v217 = (unint64_t *)(v216 + 8 * v212);
              v218 = v216 + 8 * v215;
              if (v216)
              {
                *v217 = v7;
                v7 = 0;
              }
            }
            else
            {
              v218 = 0;
              v217 = (unint64_t *)(8 * v212);
            }
            v210 = v217 + 1;
            v219 = *(_QWORD **)(v172 + 56);
            v220 = *(_QWORD *)(v172 + 64);
            if ((_QWORD *)v220 == v219)
            {
              *(_QWORD *)(v172 + 56) = v217;
              *(_QWORD *)(v172 + 64) = v210;
              v799 = *(_QWORD *)(v172 + 72);
              *(_QWORD *)(v172 + 72) = v218;
              if (!v220)
                goto LABEL_339;
              goto LABEL_338;
            }
            v221 = v220 - (_QWORD)v219 - 8;
            if (v221 <= 0x47
              || ((v222 = v221 >> 3, v220 - 8 * v222 - 8 < (unint64_t)v217)
                ? (_CF = (unint64_t)&v217[-v222 - 1] >= v220)
                : (_CF = 1),
                  !_CF))
            {
              v226 = *(_QWORD **)(v172 + 64);
              do
              {
LABEL_328:
                v232 = *--v226;
                *v226 = 0;
                *--v217 = v232;
              }
              while (v226 != v219);
              goto LABEL_329;
            }
            v224 = v222 + 1;
            v225 = (v222 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v226 = (_QWORD *)(v220 - 8 * v225);
            v227 = v217 - 2;
            v228 = (__int128 *)(v220 - 32);
            v229 = v225;
            do
            {
              v231 = *v228;
              v230 = v228[1];
              *v228 = 0uLL;
              v228[1] = 0uLL;
              v228 -= 2;
              *((_OWORD *)v227 - 1) = v231;
              *(_OWORD *)v227 = v230;
              v227 -= 4;
              v229 -= 4;
            }
            while (v229);
            v217 -= v225;
            if (v224 != v225)
              goto LABEL_328;
LABEL_329:
            v220 = *(_QWORD *)(v172 + 56);
            v233 = *(_QWORD **)(v172 + 64);
            *(_QWORD *)(v172 + 56) = v217;
            *(_QWORD *)(v172 + 64) = v210;
            v799 = *(_QWORD *)(v172 + 72);
            *(_QWORD *)(v172 + 72) = v218;
            if (v233 == (_QWORD *)v220)
            {
              v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
              if (!v220)
                goto LABEL_339;
            }
            else
            {
              v789 = v131;
              do
              {
                v235 = (void (***)(_QWORD))*--v233;
                v234 = v235;
                *v233 = 0;
                if (v235)
                {
                  (**v234)(v234);
                  if ((v236 & 1) == 0
                  {
                    v237 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v237, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v234, 104);
                }
              }
              while (v233 != (_QWORD *)v220);
              v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
              v131 = v789;
              if (!v220)
                goto LABEL_339;
            }
LABEL_338:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v172 + 80) + 40))(*(_QWORD *)(v172 + 80), v220, v799 - v220);
LABEL_339:
            *(_QWORD *)(v172 + 64) = v210;
            v10 = v803;
            if (v7)
            {
              (**(void (***)(unint64_t))v7)(v7);
              {
                v239 = operator new();
                *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v239, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v7, 104);
            }
            v167 += v168;
            v6 += 8;
            if (v6 == v807)
              goto LABEL_194;
          }
          v173 = v131;
          v174 = (char *)v135 - (char *)v131;
          v175 = v174 >> 3;
          v176 = (v174 >> 3) + 1;
          v177 = v173;
          if (v176 >> 61)
            abort();
          v178 = (char *)v811 - (char *)v173;
          v179 = ((char *)v811 - (char *)v173) >> 2;
          if (v179 > v176)
            v176 = v179;
          if (v178 >= 0x7FFFFFFFFFFFFFF8)
            v180 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v180 = v176;
          v813 = v180;
          if (v180)
          {
            if (v180 >> 61)
              goto LABEL_849;
            v181 = (char *)operator new(8 * v180);
          }
          else
          {
            v181 = 0;
          }
          v182 = (uint64_t *)&v181[8 * v175];
          __p.__begin_ = 0;
          *v182 = v169;
          v798 = v182 + 1;
          v183 = (char *)((char *)v135 - (char *)v177);
          if (v135 == v177)
          {
            v188 = v177;
          }
          else
          {
            v184 = v183 - 8;
            if ((unint64_t)(v183 - 8) < 0x138
              || (v240 = (unint64_t)v184 & 0xFFFFFFFFFFFFFFF8,
                  (uint64_t *)((char *)v135 - ((unint64_t)v184 & 0xFFFFFFFFFFFFFFF8) - 8) > v135 - 1)
              || &v181[v174 - 8 - v240] > &v181[v174 - 8])
            {
              v185 = v135;
              v186 = v177;
            }
            else
            {
              v241 = (unint64_t)v184 >> 3;
              if (&v135[-v241 - 1] >= v182
                || (v186 = v177,
                    v242 = (unint64_t)&v181[v174 - v240 - 8],
                    v185 = v135,
                    v242 >= (unint64_t)v135))
              {
                v243 = v241 + 1;
                v185 = &v135[-(v243 & 0x3FFFFFFFFFFFFFFCLL)];
                v244 = &v181[8 * v175 - 16];
                v245 = v135 - 4;
                v246 = v243 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v248 = *(_OWORD *)v245;
                  v247 = *((_OWORD *)v245 + 1);
                  *(_OWORD *)v245 = 0uLL;
                  *((_OWORD *)v245 + 1) = 0uLL;
                  v245 -= 4;
                  *((_OWORD *)v244 - 1) = v248;
                  *(_OWORD *)v244 = v247;
                  v244 -= 32;
                  v246 -= 4;
                }
                while (v246);
                v182 -= v243 & 0x3FFFFFFFFFFFFFFCLL;
                v186 = v177;
                if (v243 == (v243 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_268;
              }
            }
            do
            {
              v187 = *--v185;
              *v185 = 0;
              *--v182 = v187;
            }
            while (v185 != v186);
LABEL_268:
            v188 = v186;
            do
            {
              v191 = *--v135;
              v190 = v191;
              *v135 = 0;
              if (v191)
              {
                v192 = *(_QWORD **)(v190 + 56);
                if (v192)
                {
                  v193 = *(_QWORD **)(v190 + 64);
                  v189 = *(_QWORD *)(v190 + 56);
                  if (v193 != v192)
                  {
                    do
                    {
                      v196 = (void (***)(_QWORD, uint64_t))*--v193;
                      v195 = v196;
                      *v193 = 0;
                      if (v196)
                      {
                        (**v195)(v195, v189);
                        if ((v197 & 1) == 0
                        {
                          v198 = operator new();
                          *(_QWORD *)(v198 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v198 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v198 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v198 = &off_1E42B5668;
                          *(_QWORD *)(v198 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v198 + 72) = 0u;
                          *(_OWORD *)(v198 + 88) = 0u;
                          *(_OWORD *)(v198 + 104) = 0u;
                          *(_OWORD *)(v198 + 120) = 0u;
                          *(_OWORD *)(v198 + 136) = 0u;
                          *(_OWORD *)(v198 + 152) = 0u;
                          *(_OWORD *)(v198 + 168) = 0u;
                          *(_OWORD *)(v198 + 184) = 0u;
                          *(_OWORD *)(v198 + 200) = 0u;
                          *(_OWORD *)(v198 + 216) = 0u;
                          *(_OWORD *)(v198 + 232) = 0u;
                          *(_QWORD *)(v198 + 248) = 0;
                          v788 = v198;
                          *(_OWORD *)(v198 + 56) = 0u;
                          v199 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v198 + 56), 0);
                          if ((_DWORD)v199)
                            geo::read_write_lock::logFailure(v199, (uint64_t)"initialization", v200);
                          zone = malloc_create_zone(0, 0);
                          *(_QWORD *)(v788 + 48) = zone;
                          malloc_set_zone_name(zone, "VectorKitLabels");
                          *(_QWORD *)(v788 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          *((_QWORD *)v9 + 299) = v788;
                        }
                        (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v195, 104);
                      }
                    }
                    while (v193 != v192);
                    v189 = *(_QWORD *)(v190 + 56);
                    v188 = v177;
                  }
                  *(_QWORD *)(v190 + 64) = v192;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 80) + 40))(*(_QWORD *)(v190 + 80), v189, *(_QWORD *)(v190 + 72) - v189);
                }
                MEMORY[0x1A1AF4E00](v190, 0x1020C4010FC18DELL);
              }
            }
            while (v135 != v188);
          }
          v811 = (uint64_t *)&v181[8 * v813];
          if (v188)
            operator delete(v188);
          v131 = v182;
          v135 = v798;
          v171 = __p.__begin_;
          if (!__p.__begin_)
            goto LABEL_301;
LABEL_289:
          v201 = (_QWORD *)*((_QWORD *)v171 + 7);
          if (v201)
          {
            v202 = (_QWORD *)*((_QWORD *)v171 + 8);
            v203 = *((_QWORD *)v171 + 7);
            if (v202 != v201)
            {
              do
              {
                v205 = (void (***)(_QWORD, uint64_t))*--v202;
                v204 = v205;
                *v202 = 0;
                if (v205)
                {
                  (**v204)(v204, v203);
                  if ((v206 & 1) == 0
                  {
                    v207 = operator new();
                    *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v207, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(_QWORD, void (***)(_QWORD, uint64_t), uint64_t))(**((_QWORD **)v9 + 299)
                                                                                                  + 40))(*((_QWORD *)v9 + 299), v204, 104);
                }
              }
              while (v202 != v201);
              v203 = *((_QWORD *)v171 + 7);
            }
            *((_QWORD *)v171 + 8) = v201;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v171 + 10) + 40))(*((_QWORD *)v171 + 10), v203, *((_QWORD *)v171 + 9) - v203);
          }
          MEMORY[0x1A1AF4E00](v171, 0x1020C4010FC18DELL);
          goto LABEL_301;
        }
LABEL_194:
        v132 = v135;
        v794 = *(_QWORD *)v794;
        if (!v794)
          goto LABEL_368;
      }
      v148 = v132;
      v149 = v141;
      do
      {
LABEL_212:
        v150 = *--v148;
        *v148 = 0;
        *--v145 = v150;
      }
      while (v148 != v149);
      goto LABEL_213;
    }
    v135 = 0;
    v131 = 0;
LABEL_368:
    v260 = *(v785 - 1);
    v261 = *(_QWORD *)(v260 + 248);
    v262 = *(int8x16_t **)(v260 + 256);
    v263 = 126 - 2 * __clz(((uint64_t)v262->i64 - v261) >> 3);
    if (v262 == (int8x16_t *)v261)
      v264 = 0;
    else
      v264 = v263;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::batch(std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v261, v262, v264, 1);
    v265 = (unint64_t *)v131;
    v790 = v131;
    if (v131 == v135)
    {
      if (!v135)
        goto LABEL_4;
LABEL_3:
      operator delete(v131);
      goto LABEL_4;
    }
    do
    {
      v267 = (_QWORD *)*(v785 - 1);
      v7 = *v265;
      *v265 = 0;
      *(_QWORD *)v820 = v7;
      v269 = (unint64_t *)v267[32];
      v268 = v267[33];
      if ((unint64_t)v269 < v268)
      {
        *(_QWORD *)v820 = 0;
        *v269 = v7;
        v6 = (uint64_t)(v269 + 1);
        goto LABEL_396;
      }
      v270 = v267[31];
      v271 = (char *)v269 - v270;
      v272 = ((uint64_t)v269 - v270) >> 3;
      if ((unint64_t)(v272 + 1) >> 61)
        abort();
      v273 = v268 - v270;
      v274 = v273 >> 2;
      if (v273 >> 2 <= (unint64_t)(v272 + 1))
        v274 = v272 + 1;
      if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF8)
        v275 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v275 = v274;
      if (v275)
      {
        if (v275 >> 61)
          goto LABEL_849;
        v276 = (char *)operator new(8 * v275);
      }
      else
      {
        v276 = 0;
      }
      v277 = (unint64_t *)&v276[8 * v272];
      v278 = &v276[8 * v275];
      *(_QWORD *)v820 = 0;
      *v277 = v7;
      v6 = (uint64_t)(v277 + 1);
      v279 = v267[31];
      v7 = v267[32];
      if (v7 == v279)
      {
        v267[31] = v277;
        v267[32] = v6;
        v267[33] = v278;
        v131 = v790;
        goto LABEL_394;
      }
      v280 = v7 - v279 - 8;
      if (v280 <= 0x77)
      {
        v131 = v790;
        do
        {
LABEL_414:
          v293 = *(_QWORD *)(v7 - 8);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v277 = v293;
        }
        while (v7 != v279);
        goto LABEL_415;
      }
      v286 = v7 - (v280 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)v277
          || &v271[(_QWORD)v276 - (v280 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v7;
      v131 = v790;
      if (!v286)
        goto LABEL_414;
      v287 = (v280 >> 3) + 1;
      v288 = &v276[8 * v272 - 16];
      v289 = (__int128 *)(v7 - 32);
      v290 = v287 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v292 = *v289;
        v291 = v289[1];
        *v289 = 0uLL;
        v289[1] = 0uLL;
        v289 -= 2;
        *((_OWORD *)v288 - 1) = v292;
        *(_OWORD *)v288 = v291;
        v288 -= 32;
        v290 -= 4;
      }
      while (v290);
      v277 -= v287 & 0x3FFFFFFFFFFFFFFCLL;
      v7 -= 8 * (v287 & 0x3FFFFFFFFFFFFFFCLL);
      if (v287 != (v287 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_414;
LABEL_415:
      v7 = v267[31];
      v294 = (_QWORD *)v267[32];
      v267[31] = v277;
      v267[32] = v6;
      v267[33] = v278;
      while (v294 != (_QWORD *)v7)
      {
        v297 = *--v294;
        v296 = v297;
        *v294 = 0;
        if (v297)
        {
          v298 = *(_QWORD **)(v296 + 56);
          if (v298)
          {
            v299 = *(_QWORD **)(v296 + 64);
            v295 = *(_QWORD *)(v296 + 56);
            if (v299 != v298)
            {
              do
              {
                v301 = (void (***)(_QWORD, uint64_t))*--v299;
                v300 = v301;
                *v299 = 0;
                if (v301)
                {
                  (**v300)(v300, v295);
                  if ((v302 & 1) == 0
                  {
                    v303 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v303, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v300, 104);
                }
              }
              while (v299 != v298);
              v295 = *(_QWORD *)(v296 + 56);
              v131 = v790;
            }
            *(_QWORD *)(v296 + 64) = v298;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v296 + 80) + 40))(*(_QWORD *)(v296 + 80), v295, *(_QWORD *)(v296 + 72) - v295);
            v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          }
          MEMORY[0x1A1AF4E00](v296, 0x1020C4010FC18DELL);
          v10 = v803;
        }
      }
LABEL_394:
      if (v7)
        operator delete((void *)v7);
LABEL_396:
      v267[32] = v6;
      v281 = *(_QWORD *)v820;
      *(_QWORD *)v820 = 0;
      if (v281)
      {
        v282 = *(_QWORD *)(v281 + 56);
        if (v282)
        {
          v6 = *(_QWORD *)(v281 + 64);
          v266 = *(_QWORD *)(v281 + 56);
          if (v6 != v282)
          {
            do
            {
              v283 = *(_QWORD *)(v6 - 8);
              v6 -= 8;
              v7 = v283;
              *(_QWORD *)v6 = 0;
              if (v283)
              {
                (**(void (***)(unint64_t, uint64_t))v7)(v7, v266);
                {
                  v285 = operator new();
                  *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v285, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v7, 104);
              }
            }
            while (v6 != v282);
            v266 = *(_QWORD *)(v281 + 56);
          }
          *(_QWORD *)(v281 + 64) = v282;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v281 + 80) + 40))(*(_QWORD *)(v281 + 80), v266, *(_QWORD *)(v281 + 72) - v266);
        }
        MEMORY[0x1A1AF4E00](v281, 0x1020C4010FC18DELL);
      }
      ++v265;
    }
    while (v265 != (unint64_t *)v135);
    if (v131)
    {
      do
      {
        v306 = *--v135;
        v305 = v306;
        *v135 = 0;
        if (v306)
        {
          v307 = *(_QWORD **)(v305 + 56);
          if (v307)
          {
            v308 = *(_QWORD **)(v305 + 64);
            v304 = *(_QWORD *)(v305 + 56);
            if (v308 != v307)
            {
              do
              {
                v309 = *--v308;
                v7 = v309;
                *v308 = 0;
                if (v309)
                {
                  (**(void (***)(unint64_t, uint64_t))v7)(v7, v304);
                  if ((v310 & 1) == 0
                  {
                    v311 = operator new();
                    *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v311, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v7, 104);
                }
              }
              while (v308 != v307);
              v304 = *(_QWORD *)(v305 + 56);
            }
            *(_QWORD *)(v305 + 64) = v307;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v305 + 80) + 40))(*(_QWORD *)(v305 + 80), v304, *(_QWORD *)(v305 + 72) - v304);
          }
          MEMORY[0x1A1AF4E00](v305, 0x1020C4010FC18DELL);
        }
      }
      while (v135 != v131);
      goto LABEL_3;
    }
LABEL_4:
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v827);
    v777 = (_QWORD *)*v777;
    if (v777)
      continue;
    break;
  }
LABEL_464:
  v319 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v320 = *a6;
    v8 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v320 = 0;
  }
  *(_QWORD *)a1 = &off_1E42AF408;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v321 = (char *)v785 - (char *)v10;
  if (v785 == v10)
  {
    v766 = 0;
    v325 = 0;
    v323 = a1;
  }
  else
  {
    if (v321 < 0)
      abort();
    v322 = operator new((char *)v785 - (char *)v10);
    v323 = a1;
    *(_QWORD *)(a1 + 8) = v322;
    *(_QWORD *)(a1 + 16) = v322;
    v324 = (char *)&v322[v321 >> 3];
    *(_QWORD *)(a1 + 24) = v324;
    v325 = v322;
    memcpy(v322, v10, v321);
    v766 = v324;
    *(_QWORD *)(a1 + 16) = v324;
  }
  *(_OWORD *)(v323 + 32) = 0u;
  *(_QWORD *)(v323 + 72) = 0;
  v771 = (gdc::GlobeTileGrid **)(v323 + 72);
  *(_BYTE *)(v323 + 80) = 0;
  *(_BYTE *)(v323 + 104) = 0;
  *(_OWORD *)(v323 + 48) = 0u;
  v764 = (void **)(v323 + 32);
  *(_BYTE *)(v323 + 64) = 0;
  if (v319)
  {
    *(_BYTE *)(v323 + 80) = v320;
    *(_BYTE *)(v323 + 81) = v6;
    *(_QWORD *)(v323 + 84) = v8;
    *(_BYTE *)(v323 + 104) = 1;
  }
  v804 = v10;
  if (v325 == v766)
  {
    v411 = 0;
    v327 = 0;
    goto LABEL_575;
  }
  v762 = (QuadTile *)(v323 + 80);
  v326 = 0;
  v327 = 0;
  v780 = 0;
  while (2)
  {
    v774 = v325;
    v328 = (_QWORD *)*v325;
    v328[1] = a1;
    v330 = (_QWORD **)v328[31];
    v329 = (_QWORD **)v328[32];
    v778 = v329;
LABEL_479:
    if (v330 != v329)
    {
      v783 = v327;
      v786 = v330;
      v791 = v326;
      v332 = *v330;
      v332[1] = **v330;
      v332[3] = v332[2];
      v332[5] = v332[4];
      v827 = 0uLL;
      v828 = 0;
      memset(&__p, 0, sizeof(__p));
      v334 = (_QWORD **)v332[7];
      v333 = (_QWORD **)v332[8];
      if (v334 == v333)
        goto LABEL_520;
      v795 = (_QWORD **)v332[8];
      v800 = v332;
LABEL_486:
      v339 = *v334;
      *(_QWORD *)v820 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v339, (uint64_t)&v827, &__p, (uint64_t *)v820);
      v340 = *(_QWORD *)v820;
      v341 = *(_QWORD *)v820 - 2;
      if (*(_QWORD *)v820 < 2uLL)
        goto LABEL_485;
      v342 = v827;
      v343 = (float *)(v827 + 12);
      v344 = *(float *)v827;
      v345 = 1;
      while (1)
      {
        if (vabds_f32(*v343, v344) >= 1.0e-10)
        {
          v350 = v343[1] - *(float *)(v827 + 4);
          goto LABEL_494;
        }
        v346 = *(float *)(v827 + 4);
        v347 = v343[1];
        if (vabds_f32(v347, v346) >= 1.0e-10)
          break;
        ++v345;
        v343 += 3;
        if (*(_QWORD *)v820 == v345)
        {
          v348 = 0.0;
          v349 = 1.0;
          goto LABEL_495;
        }
      }
      v350 = v347 - v346;
LABEL_494:
      v351 = *v343 - v344;
      v352 = 1.0 / sqrtf((float)(v351 * v351) + (float)(v350 * v350));
      v349 = v352 * v351;
      v348 = v352 * v350;
LABEL_495:
      v353 = *(_QWORD *)v820 - 1;
      if ((unint64_t)(*(_QWORD *)v820 - 1) < 2)
      {
        v335 = 8;
        goto LABEL_483;
      }
      v354 = (float *)(v827 + 28);
      v355 = 1;
      v356 = 2;
      v357 = v349;
      v358 = v348;
      while (1)
      {
        v359 = v355 + 1;
        if (v355 + 1 < v340)
        {
          v360 = (float *)(v342 + 12 * v355);
          v361 = *v360;
          v362 = v360[1];
          v363 = v354;
          v364 = v341;
          do
          {
            v365 = *(v363 - 1);
            v366 = vabds_f32(*v363, v362);
            v367 = vabds_f32(v365, v361) < 1.0e-10 && v366 < 1.0e-10;
            if (!v367)
            {
              v368 = v365 - v361;
              v369 = *v363 - v362;
              v370 = 1.0 / sqrtf((float)(v368 * v368) + (float)(v369 * v369));
              v357 = v370 * v368;
              v358 = v370 * v369;
              goto LABEL_508;
            }
            v363 += 3;
            --v364;
          }
          while (v364);
          v357 = v349;
          v358 = v348;
        }
LABEL_508:
        v371 = atan2f(v358, v357);
        v372 = v371 - atan2f(v348, v349);
        v373 = v372;
        if (v372 > 3.14159265)
          break;
        if (v373 < -3.14159265)
        {
          v374 = 6.28318531;
          goto LABEL_512;
        }
LABEL_513:
        v375 = fabsf(v372);
        v376 = (unint64_t)fmaxf(ceilf(v375 * 5.7296), 1.0);
        if (v376 >= 2)
          v356 += 4 * (v375 < 1.5708) + 2 * v376;
        else
          v356 += 2;
        --v341;
        v354 += 3;
        v355 = v359;
        v348 = v358;
        v349 = v357;
        if (v359 == v353)
        {
          v335 = v356 + 6;
          _CF = (unint64_t)(v356 + 6) >= 0x10000;
          v333 = v795;
          v332 = v800;
          if (_CF)
          {
            v339[2] = v339[1];
            v337 = v339[3];
          }
          else
          {
LABEL_483:
            v336 = 3 * v335 + v339[3];
            v339[2] = v339[1] + v335;
            v337 = v336 - 6;
          }
          v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          v339[4] = v337;
          v339[6] = v339[5];
LABEL_485:
          v338 = *v334++;
          v332[1] = v338[2] + v332[1] - v338[1];
          v332[3] = v338[4] + v332[3] - v338[3];
          v332[5] = v338[6] + v332[5] - v338[5];
          if (v334 != v333)
            goto LABEL_486;
          if (__p.__begin_)
            operator delete(__p.__begin_);
LABEL_520:
          if ((_QWORD)v827)
            operator delete((void *)v827);
          v377 = v786;
          v378 = *v786;
          if (v783 < v780)
          {
            *(_QWORD *)v783 = v378;
            v331 = v783 + 8;
            v326 = v791;
          }
          else
          {
            v379 = (v783 - v791) >> 3;
            v380 = v379 + 1;
            if ((unint64_t)(v379 + 1) >> 61)
              abort();
            if ((v780 - v791) >> 2 > v380)
              v380 = (v780 - v791) >> 2;
            if ((unint64_t)(v780 - v791) >= 0x7FFFFFFFFFFFFFF8)
              v381 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v381 = v380;
            if (v381)
            {
              if (!(v381 >> 61))
              {
                v382 = operator new(8 * v381);
                goto LABEL_533;
              }
LABEL_849:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v382 = 0;
LABEL_533:
            v326 = &v382[8 * v379];
            *(_QWORD *)v326 = v378;
            v331 = v326 + 8;
            if (v783 != v791)
            {
              v383 = v783 - 8 - v791;
              if (v383 < 0x168)
              {
                v384 = v783;
                goto LABEL_536;
              }
              if (&v382[v783 - v791 - 8 - (v383 & 0xFFFFFFFFFFFFFFF8)] > &v382[v783 - v791 - 8])
              {
                v384 = v783;
                goto LABEL_536;
              }
              if (&v783[-(v383 & 0xFFFFFFFFFFFFFFF8) - 8] > v783 - 8)
              {
                v384 = v783;
                goto LABEL_536;
              }
              if ((unint64_t)(v791 - v382) < 0x20)
              {
                v384 = v783;
                goto LABEL_536;
              }
              v386 = (v383 >> 3) + 1;
              v384 = &v783[-8 * (v386 & 0x3FFFFFFFFFFFFFFCLL)];
              v387 = &v382[8 * v379 - 16];
              v388 = v783 - 16;
              v389 = v386 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v390 = *(_OWORD *)v388;
                *(v387 - 1) = *((_OWORD *)v388 - 1);
                *v387 = v390;
                v387 -= 2;
                v388 -= 32;
                v389 -= 4;
              }
              while (v389);
              v326 -= 8 * (v386 & 0x3FFFFFFFFFFFFFFCLL);
              if (v386 != (v386 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_536:
                  v385 = *((_QWORD *)v384 - 1);
                  v384 -= 8;
                  *((_QWORD *)v326 - 1) = v385;
                  v326 -= 8;
                }
                while (v384 != v791);
              }
            }
            v780 = &v382[8 * v381];
            if (v791)
              operator delete(v791);
            v377 = v786;
          }
          v330 = (_QWORD **)(v377 + 1);
          v327 = v331;
          v329 = v778;
          goto LABEL_479;
        }
      }
      v374 = -6.28318531;
LABEL_512:
      v372 = v373 + v374;
      goto LABEL_513;
    }
    v325 = v774 + 1;
    if (v774 + 1 != v766)
      continue;
    break;
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    v10 = v804;
    goto LABEL_574;
  }
  v10 = v804;
  v391 = (gdc::GlobeTileGrid *)operator new();
  v392 = v391;
  if (*(_BYTE *)(a1 + 104))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v391, v762);
    v393 = *v771;
    *v771 = v392;
    if (v393)
    {
      v394 = *((_QWORD *)v393 + 323);
      if (v394)
        MEMORY[0x1A1AF4DE8](v394, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v393, 0x1020C4007FF0C4BLL);
      v392 = *v771;
    }
    *((_QWORD *)v392 + 323) = operator new[]();
    if (v326 != v327)
    {
      v395 = v326;
      do
      {
        v396 = *(uint64_t **)(*(_QWORD *)v395 + 56);
        v397 = *(uint64_t **)(*(_QWORD *)v395 + 64);
        while (v396 != v397)
        {
          v398 = *v396;
          if (!*(_QWORD *)(*v396 + 80))
          {
            v399 = *(_QWORD *)(v398 + 88);
            if (v399)
            {
              v400 = *(_QWORD *)(v398 + 72);
              v401 = *v771;
              v402 = *((_QWORD *)*v771 + 323);
              v403 = (float *)(v400 + 4);
              v404 = 1;
              do
              {
                v405 = *((float *)v401 + 648) * v403[1];
                v406 = vcvts_n_u32_f32(*(v403 - 1), 2uLL);
                if (v406 >= 3)
                  v406 = 3;
                v407 = vcvts_n_u32_f32(*v403, 2uLL);
                if (v407 >= 3)
                  v407 = 3;
                v408 = (float *)(v402 + 8 * (v406 | (4 * v407)));
                v409 = fminf(v405, *v408);
                v410 = fmaxf(v408[1], v405);
                *v408 = v409;
                v408[1] = v410;
                v403 += 3;
                v367 = v399 > v404++;
              }
              while (v367);
            }
          }
          ++v396;
        }
        v395 += 8;
      }
      while (v395 != v327);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v771);
LABEL_574:
    v411 = v326;
LABEL_575:
    v412 = 0;
    v413 = 0;
    v414 = 0;
    v415 = 0;
    v792 = v411;
    v416 = (v327 - v411) >> 3;
    v781 = v416;
    while (2)
    {
      if (v413 == v416
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v792[8 * v413] + 8) + v415 - **(_QWORD **)&v792[8 * v413]) >= 0x10000)
      {
        v417 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v417 + 1) = 0;
        v418 = (unint64_t *)(v417 + 8);
        *((_QWORD *)v417 + 2) = 0;
        *((_QWORD *)v417 + 3) = &off_1E42B5748;
        v419 = (unsigned int *)(v417 + 24);
        *(_QWORD *)v417 = &off_1E42DFE28;
        *((_QWORD *)v417 + 4) = 32;
        *((_DWORD *)v417 + 10) = 1;
        *((_QWORD *)v417 + 6) = 0;
        *((_QWORD *)v417 + 7) = 0;
        *((_QWORD *)v417 + 8) = 0;
        *((_QWORD *)v417 + 9) = 32 * v415;
        v420 = 0uLL;
        *((_OWORD *)v417 + 5) = 0u;
        *((_OWORD *)v417 + 6) = 0u;
        *((_QWORD *)v417 + 14) = 0;
        if ((v421 & 1) == 0)
        {
          v420 = 0uLL;
          v419 = (unsigned int *)(v417 + 24);
          if (v492)
          {
            v493 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v493, "GeoGL", 0xA3D02C1100000005);
            v420 = 0uLL;
            v419 = (unsigned int *)(v417 + 24);
          }
        }
        *((_QWORD *)v417 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v417 + 16) = 0;
        *((_OWORD *)v417 + 11) = v420;
        *((_OWORD *)v417 + 12) = v420;
        *((_QWORD *)v417 + 26) = 0;
        *((_QWORD *)v417 + 27) = -1;
        *((_OWORD *)v417 + 10) = v420;
        *((_OWORD *)v417 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v417 + 34) = 0;
        *((_QWORD *)v417 + 3) = &off_1E42B7AA0;
        *((_QWORD *)v417 + 29) = "BatchType/VData";
        *((_QWORD *)v417 + 30) = &ggl::RouteLineArrow::defaultVboReflection;
        *((_QWORD *)v417 + 28) = &unk_1E42B7AC0;
        v808 = v419;
        __p.__begin_ = v419;
        __p.__end_ = (std::vector<unsigned int>::pointer)v417;
        v422 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v422->__shared_owners_ = 0;
        v423 = (unint64_t *)&v422->__shared_owners_;
        v422->__shared_weak_owners_ = 0;
        v422[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v424 = v422 + 1;
        v422->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v422[1].__shared_owners_ = 2;
        LODWORD(v422[1].__shared_weak_owners_) = 257;
        v422[2].__vftable = 0;
        v422[2].__shared_owners_ = 0;
        v422[2].__shared_weak_owners_ = 0;
        v422[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v414);
        v425 = (std::__shared_count)0;
        *(_OWORD *)&v422[3].__shared_owners_ = 0u;
        v422[4].std::__shared_count = 0u;
        v422[4].__shared_weak_owners_ = 0;
        if ((v426 & 1) == 0)
        {
          v425 = (std::__shared_count)0;
          v424 = v422 + 1;
          if (v494)
          {
            v495 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v495, "GeoGL", 0xA3D02C1100000005);
            v425 = (std::__shared_count)0;
            v424 = v422 + 1;
          }
        }
        v422[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v422[5].__shared_owners_ = 0;
        *((std::__shared_count *)v422 + 11) = v425;
        v422[8].std::__shared_count = v425;
        v422[8].__shared_weak_owners_ = 0;
        v422[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v422 + 10) = v425;
        v422[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v422[5].__shared_weak_owners_) = 0;
        LODWORD(v422[10].__vftable) = 0;
        v422[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v422[1].__shared_owners_ = 2;
        v422[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v422[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v796 = v424;
        *(_QWORD *)v820 = v424;
        *(_QWORD *)&v820[8] = v422;
        v427 = operator new();
        v428 = v808;
        do
          v429 = __ldxr(v418);
        while (__stxr(v429 + 1, v418));
        do
          v430 = __ldxr(v423);
        while (__stxr(v430 + 1, v423));
        if ((v431 & 1) == 0)
        {
          v428 = v808;
          if (v496)
          {
            if ((v497 & 1) == 0
            {
              ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLineArrow::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::attributesReflection(void)::r;
            unk_1EE5763A0 = 1;
            v428 = v808;
          }
        }
        *(_QWORD *)(v427 + 32) = 0;
        *(_QWORD *)(v427 + 40) = 0;
        *(_DWORD *)(v427 + 48) = 0;
        *(_QWORD *)v427 = &off_1E42BBC08;
        *(_QWORD *)(v427 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v427 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v427 + 24) = 0;
        *(_QWORD *)(v427 + 56) = &ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v427 + 64) = 0;
        v432 = v427 + 64;
        *(_QWORD *)(v427 + 72) = 0;
        *(_QWORD *)(v427 + 80) = 0;
        if ((v433 & 1) == 0)
        {
          v432 = v427 + 64;
          v428 = v808;
          if (v498)
          {
            v499 = operator new();
            *(_QWORD *)(v499 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v499 + 24) = "GeoGL";
            *(_OWORD *)(v499 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v499 = &off_1E42B5668;
            *(_QWORD *)(v499 + 8) = "GeoGL";
            *(_OWORD *)(v499 + 72) = 0u;
            *(_OWORD *)(v499 + 88) = 0u;
            *(_OWORD *)(v499 + 104) = 0u;
            *(_OWORD *)(v499 + 120) = 0u;
            *(_OWORD *)(v499 + 136) = 0u;
            *(_OWORD *)(v499 + 152) = 0u;
            *(_OWORD *)(v499 + 168) = 0u;
            *(_OWORD *)(v499 + 184) = 0u;
            *(_OWORD *)(v499 + 200) = 0u;
            *(_OWORD *)(v499 + 216) = 0u;
            *(_OWORD *)(v499 + 232) = 0u;
            *(_QWORD *)(v499 + 248) = 0;
            *(_OWORD *)(v499 + 56) = 0u;
            v500 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v499 + 56), 0);
            if ((_DWORD)v500)
              geo::read_write_lock::logFailure(v500, (uint64_t)"initialization", v501);
            v502 = malloc_create_zone(0, 0);
            *(_QWORD *)(v499 + 48) = v502;
            malloc_set_zone_name(v502, "GeoGL");
            *(_QWORD *)(v499 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v499;
            v428 = v808;
            v432 = v427 + 64;
          }
        }
        v434 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v427 + 120) = 0;
        *(_QWORD *)(v427 + 96) = 0;
        *(_QWORD *)(v427 + 104) = 0;
        *(_QWORD *)(v427 + 88) = v434;
        if ((v434 & 1) == 0)
        {
          v775 = v432;
          v432 = v775;
          v428 = v808;
          if (v503)
          {
            v504 = operator new();
            *(_QWORD *)(v504 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v504 + 24) = "GeoGL";
            *(_OWORD *)(v504 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v504 = &off_1E42B5668;
            *(_QWORD *)(v504 + 8) = "GeoGL";
            *(_OWORD *)(v504 + 72) = 0u;
            *(_OWORD *)(v504 + 88) = 0u;
            *(_OWORD *)(v504 + 104) = 0u;
            *(_OWORD *)(v504 + 120) = 0u;
            *(_OWORD *)(v504 + 136) = 0u;
            *(_OWORD *)(v504 + 152) = 0u;
            *(_OWORD *)(v504 + 168) = 0u;
            *(_OWORD *)(v504 + 184) = 0u;
            *(_OWORD *)(v504 + 200) = 0u;
            *(_OWORD *)(v504 + 216) = 0u;
            *(_OWORD *)(v504 + 232) = 0u;
            *(_QWORD *)(v504 + 248) = 0;
            v505 = v504;
            *(_OWORD *)(v504 + 56) = 0u;
            v506 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v504 + 56), 0);
            if ((_DWORD)v506)
              geo::read_write_lock::logFailure(v506, (uint64_t)"initialization", v507);
            v508 = malloc_create_zone(0, 0);
            *(_QWORD *)(v505 + 48) = v508;
            malloc_set_zone_name(v508, "GeoGL");
            *(_QWORD *)(v505 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v505;
            v428 = v808;
            v432 = v775;
          }
        }
        *(_QWORD *)(v427 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v427 + 136) = 0;
        *(_QWORD *)(v427 + 112) = v427 + 120;
        *(_QWORD *)v427 = &off_1E42BD738;
        *(_QWORD *)(v427 + 16) = &unk_1E42BD758;
        *(_QWORD *)&v827 = v428;
        *((_QWORD *)&v827 + 1) = v417;
        do
          v435 = __ldxr(v418);
        while (__stxr(v435 + 1, v418));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v432, (uint64_t *)&v827, (uint64_t *)&v828, 1uLL);
        v436 = (std::__shared_weak_count *)*((_QWORD *)&v827 + 1);
        v10 = v804;
        if (*((_QWORD *)&v827 + 1))
        {
          v437 = (unint64_t *)(*((_QWORD *)&v827 + 1) + 8);
          do
            v438 = __ldaxr(v437);
          while (__stlxr(v438 - 1, v437));
          if (!v438)
          {
            ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
            std::__shared_weak_count::__release_weak(v436);
          }
        }
        do
          v439 = __ldxr(v423);
        while (__stxr(v439 + 1, v423));
        v440 = *(std::__shared_weak_count **)(v427 + 104);
        *(_QWORD *)(v427 + 96) = v796;
        *(_QWORD *)(v427 + 104) = v422;
        if (v440)
        {
          v441 = (unint64_t *)&v440->__shared_owners_;
          do
            v442 = __ldaxr(v441);
          while (__stlxr(v442 - 1, v441));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
            std::__shared_weak_count::__release_weak(v440);
          }
        }
        *(_QWORD *)v427 = &off_1E42B6DD8;
        *(_QWORD *)(v427 + 16) = &unk_1E42B6DF8;
        do
          v443 = __ldaxr(v423);
        while (__stlxr(v443 - 1, v423));
        if (!v443)
        {
          ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
          std::__shared_weak_count::__release_weak(v422);
        }
        do
          v444 = __ldaxr(v418);
        while (__stlxr(v444 - 1, v418));
        if (!v444)
        {
          (*(void (**)(char *))(*(_QWORD *)v417 + 16))(v417);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v417);
        }
        v446 = *(uint64_t **)(a1 + 40);
        v445 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v446 < v445)
        {
          *v446 = v427;
          v447 = v446 + 1;
          goto LABEL_631;
        }
        v448 = (uint64_t *)*v764;
        v449 = (char *)v446 - (_BYTE *)*v764;
        v450 = v449 >> 3;
        v451 = (v449 >> 3) + 1;
        if (v451 >> 61)
          abort();
        v452 = v445 - (_QWORD)v448;
        if (v452 >> 2 > v451)
          v451 = v452 >> 2;
        if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFF8)
          v453 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v453 = v451;
        if (v453)
        {
          if (v453 >> 61)
            goto LABEL_849;
          v454 = operator new(8 * v453);
        }
        else
        {
          v454 = 0;
        }
        v455 = (uint64_t *)&v454[8 * v450];
        *v455 = v427;
        v447 = v455 + 1;
        if (v446 == v448)
        {
          v448 = v446;
          v10 = v804;
        }
        else
        {
          v456 = (char *)(v446 - 1) - (char *)v448;
          if (v456 >= 0x58)
          {
            v457 = (char *)v446 - &v454[v449];
            v10 = v804;
            if (v457 < 0x20)
              goto LABEL_627;
            v458 = (v456 >> 3) + 1;
            v459 = &v454[8 * v450 - 16];
            v460 = v446 - 2;
            v461 = v458 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v462 = *(_OWORD *)v460;
              *(v459 - 1) = *((_OWORD *)v460 - 1);
              *v459 = v462;
              v459 -= 2;
              v460 -= 4;
              v461 -= 4;
            }
            while (v461);
            v455 -= v458 & 0x3FFFFFFFFFFFFFFCLL;
            v446 -= v458 & 0x3FFFFFFFFFFFFFFCLL;
            if (v458 != (v458 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_627;
          }
          else
          {
            v10 = v804;
            do
            {
LABEL_627:
              v463 = *--v446;
              *--v455 = v463;
            }
            while (v446 != v448);
            v448 = (uint64_t *)*v764;
          }
        }
        *(_QWORD *)(a1 + 32) = v455;
        *(_QWORD *)(a1 + 40) = v447;
        *(_QWORD *)(a1 + 48) = &v454[8 * v453];
        if (v448)
          operator delete(v448);
LABEL_631:
        v416 = v781;
        *(_QWORD *)(a1 + 40) = v447;
        if (v412 < v413)
        {
          v464 = 0;
          v465 = v412;
          do
          {
            v466 = *(_QWORD *)&v792[8 * v465];
            v467 = *(_QWORD *)(v466 + 32);
            v468 = v467 + v464;
            v469 = *(_QWORD *)(v466 + 40) + v464;
            *(_QWORD *)(v466 + 32) = v468;
            *(_QWORD *)(v466 + 40) = v469;
            v464 = v469 - v467;
            ++v465;
          }
          while (v413 != v465);
          v470 = 0;
          do
          {
            v471 = *(uint64_t **)&v792[8 * v412];
            v472 = *v471;
            v473 = *v471 + v470;
            v474 = v471[1] + v470;
            *v471 = v473;
            v471[1] = v474;
            v475 = v471[2];
            v476 = v475 + v464;
            v477 = v471[3] + v464;
            v471[2] = v476;
            v471[3] = v477;
            v471[11] = v427;
            v478 = (_QWORD *)v471[7];
            v479 = (_QWORD *)v471[8];
            if (v478 != v479)
            {
              v480 = v471[4];
              do
              {
                v481 = (_QWORD *)*v478++;
                v482 = v481[2] - v481[1];
                v481[1] = v473;
                v473 += v482;
                v483 = v481[4] - v481[3];
                v481[2] = v473;
                v481[3] = v476;
                v476 += v483;
                v484 = v481[6] - v481[5];
                v481[4] = v476;
                v481[5] = v480;
                v480 += v484;
                v481[6] = v480;
              }
              while (v478 != v479);
            }
            v470 = v474 - v472;
            v464 = v477 - v475;
            ++v412;
          }
          while (v412 != v413);
        }
        v485 = *(std::__shared_weak_count **)&v820[8];
        v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
        if (!*(_QWORD *)&v820[8])
          goto LABEL_644;
        v486 = (unint64_t *)(*(_QWORD *)&v820[8] + 8);
        do
          v487 = __ldaxr(v486);
        while (__stlxr(v487 - 1, v486));
        if (!v487)
        {
          ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
          std::__shared_weak_count::__release_weak(v485);
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
          {
LABEL_645:
            v489 = (unint64_t *)&end->__shared_owners_;
            do
              v490 = __ldaxr(v489);
            while (__stlxr(v490 - 1, v489));
            if (!v490)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
        }
        else
        {
LABEL_644:
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
            goto LABEL_645;
        }
        v415 = 0;
        v414 = 0;
        v412 = v413;
      }
      if (v413 < v416)
      {
        v491 = *(_QWORD **)&v792[8 * v413];
        v415 = v491[1] + v415 - *v491;
        v414 = v491[3] + v414 + v491[5] - (v491[2] + v491[4]);
      }
      if (++v413 <= v416)
        continue;
      break;
    }
    if (v792)
      operator delete(v792);
    if (v10)
      operator delete(v10);
    *(_QWORD *)a1 = &off_1E428C8E0;
    *(_QWORD *)(a1 + 112) = *a4;
    v509 = a4[1];
    *(_QWORD *)(a1 + 120) = v509;
    if (v509)
    {
      v510 = (unint64_t *)(v509 + 8);
      do
        v511 = __ldxr(v510);
      while (__stxr(v511 + 1, v510));
    }
    *(_QWORD *)(a1 + 128) = *a5;
    v512 = a5[1];
    *(_QWORD *)(a1 + 136) = v512;
    if (v512)
    {
      v513 = (unint64_t *)(v512 + 8);
      do
        v514 = __ldxr(v513);
      while (__stxr(v514 + 1, v513));
    }
    *(_QWORD *)(a1 + 144) = 0;
    v515 = *(_QWORD *)(a1 + 8);
    v747 = *(_QWORD *)(a1 + 16);
    if (v515 != v747)
    {
      v516 = 1.0;
      v517 = (float32x2_t)vdup_n_s32(0x2EDBE6FFu);
      __asm { FMOV            V0.2S, #0.9375 }
      v755 = _D0;
      v756 = v517;
      do
      {
        v748 = v515;
        v523 = *(uint64_t ***)(*(_QWORD *)v515 + 248);
        v522 = *(uint64_t ***)(*(_QWORD *)v515 + 256);
        v750 = v522;
        while (v523 != v522)
        {
          v524 = 0;
          v525 = **(_QWORD **)((*v523)[11] + 64);
          v754 = *v523;
          v526 = **v523;
          v527 = (*v523)[1];
          v827 = 0uLL;
          v528 = *(_QWORD *)(v525 + 8);
          v529 = v528 * v526;
          v530 = v528 * v527;
          if (v528 * v527 != v528 * v526)
          {
            if (a2 && *(_BYTE *)(v525 + 17) != 2)
              v524 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v525, v529, v528 * v527, 1, 1);
            else
              v524 = *(_QWORD *)(v525 + 72) + v529;
          }
          v753 = v523;
          *(_QWORD *)&v531 = a2;
          *((_QWORD *)&v531 + 1) = v525;
          v827 = v531;
          v828 = v529;
          v829 = v530;
          v831 = v524;
          LOWORD(v830) = 257;
          v532 = v754[2];
          v534 = v754[4];
          v533 = v754[5];
          if (v533 == v534)
          {
            v533 = v754[3];
          }
          else
          {
            if (v534 < v532)
              v532 = v754[4];
            if (v754[3] > v533)
              v533 = v754[3];
          }
          v535 = 0;
          v536 = *(_QWORD *)(v754[11] + 96);
          __p.__end_ = 0;
          __p.__begin_ = 0;
          v537 = *(_QWORD *)(v536 + 8);
          v538 = (unsigned int *)(v537 * v532);
          v539 = (unsigned int *)(v537 * v533);
          if (v537 * v533 != v537 * v532)
          {
            if (a2 && *(_BYTE *)(v536 + 17) != 2)
              v535 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v536, v537 * v532, v539, 1, 1);
            else
              v535 = (uint64_t)v538 + *(_QWORD *)(v536 + 72);
          }
          *(_QWORD *)&v540 = a2;
          *((_QWORD *)&v540 + 1) = v536;
          *(_OWORD *)&__p.__begin_ = v540;
          __p.__end_cap_.__value_ = v538;
          v817 = v539;
          v819 = v535;
          v818 = 257;
          v541 = v754[2];
          v542 = v754[4];
          memset(v815, 0, sizeof(v815));
          memset(&v814, 0, sizeof(v814));
          v543 = (uint64_t *)v754[7];
          v752 = v754 + 7;
          v544 = (uint64_t *)v754[8];
          if (v543 != v544)
          {
            v545 = 2 * v532;
            v546 = v535 + 2 * v542 - 2 * v532;
            v547 = v535 + 2 * v541 - v545;
            v758 = (uint64_t *)v754[8];
            while (1)
            {
              v549 = *v543;
              *(_OWORD *)v820 = xmmword_19FFB48E0;
              *(_OWORD *)&v820[16] = xmmword_19FFB48F0;
              v550 = *(_QWORD *)(v549 + 16);
              if (v550 != *(_QWORD *)(v549 + 8))
                break;
              v548 = *(_QWORD *)(v549 + 16);
LABEL_706:
              v524 += 32 * (v548 - v550);
              v547 += 2 * (*(_QWORD *)(v549 + 32) - *(_QWORD *)(v549 + 24));
              v546 += 2 * (*(_QWORD *)(v549 + 48) - *(_QWORD *)(v549 + 40));
              if (++v543 == v544)
                goto LABEL_797;
            }
            v761 = (_WORD *)v547;
            v760 = v543;
            v826 = 1;
            md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v549, (uint64_t)v815, &v814, (uint64_t *)&v826);
            v763 = (QuadTile *)v524;
            v552 = v826;
            if (v826 >= 2)
            {
              v759 = v826 - 2;
              v553 = (float *)v815[0];
              v554 = *(float32x2_t *)v815[0];
              if (v826 >= 0xA)
              {
                v558 = (v826 - 1) & 7;
                if (!v558)
                  v558 = 8;
                v555 = v826 - 1 - v558;
                v551.i64[1] = *(_QWORD *)v815[0];
                v559 = (int8x16_t)vdupq_lane_s32((int32x2_t)v554, 0);
                v560 = (int32x4_t *)((char *)v815[0] + 60);
                v561 = 0uLL;
                v562 = v555;
                v563 = 0uLL;
                do
                {
                  i32 = (const float *)v560[-3].i32;
                  v835 = vld3q_f32(i32);
                  v566 = v560[1];
                  v565 = v560[2];
                  v567 = *v560;
                  v560 += 6;
                  v568.i64[0] = __PAIR64__(v567.u32[3], v567.u32[0]);
                  v569 = (float32x4_t)vrev64q_s32(v566);
                  v569.i32[0] = v567.i32[1];
                  v568.i64[1] = __PAIR64__(v565.u32[1], v566.u32[2]);
                  v569.i32[3] = v565.i32[2];
                  v570 = vsubq_f32(v835.val[0], (float32x4_t)vextq_s8(v559, (int8x16_t)v835.val[0], 0xCuLL));
                  v571 = vsubq_f32((float32x4_t)v568, (float32x4_t)vextq_s8((int8x16_t)v835.val[0], v568, 0xCuLL));
                  v572 = vsubq_f32(v835.val[1], (float32x4_t)vextq_s8(v551, (int8x16_t)v835.val[1], 0xCuLL));
                  v835.val[0] = vsubq_f32(v569, (float32x4_t)vextq_s8((int8x16_t)v835.val[1], (int8x16_t)v569, 0xCuLL));
                  v561 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v570, v570), v572, v572)), v561);
                  v563 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v571, v571), v835.val[0], v835.val[0])), v563);
                  v551 = (int8x16_t)v569;
                  v559 = v568;
                  v562 -= 8;
                }
                while (v562);
                v557 = *(float32x2_t *)((char *)v565.i64 + 4);
                v573 = vaddq_f32(v563, v561);
                v556 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v573, v573));
              }
              else
              {
                v555 = 0;
                v556 = 0.0;
                v557 = *(float32x2_t *)v815[0];
              }
              v574 = v555 + 1;
              v575 = (char *)v815[0] + 12 * v555 + 12;
              do
              {
                v576 = *(float32x2_t *)v575;
                v575 = (_QWORD *)((char *)v575 + 12);
                v577 = vsub_f32(v576, v557);
                v556 = sqrtf(vaddv_f32(vmul_f32(v577, v577))) + v556;
                ++v574;
                v557 = v576;
              }
              while (v826 != v574);
              v578 = v556;
              v579 = v516 / v556;
              if (v578 <= 1.0e-10)
                v579 = 0.0;
              v779 = v579;
              v580 = (float32x2_t *)((char *)v815[0] + 12);
              v581 = sqrtf((float)((float)(*((float *)v815[0] + 3) - v554.f32[0])* (float)(*((float *)v815[0] + 3) - v554.f32[0]))+ (float)((float)(*((float *)v815[0] + 4) - v554.f32[1])* (float)(*((float *)v815[0] + 4) - v554.f32[1])));
              v582 = 1;
              v757 = (__int16 *)v546;
              while (1)
              {
                v583 = vcgt_f32(v517, vabd_f32(*v580, v554));
                if ((v583.i32[0] & v583.i32[1] & 1) == 0)
                  break;
                ++v582;
                v580 = (float32x2_t *)((char *)v580 + 12);
                if (v826 == v582)
                {
                  v584 = (float32x2_t)1065353216;
                  goto LABEL_725;
                }
              }
              v585 = vsub_f32(*v580, v554);
              v584 = vmul_n_f32(v585, v516 / sqrtf(vaddv_f32(vmul_f32(v585, v585))));
LABEL_725:
              v586 = *((_DWORD *)v815[0] + 2);
              v824 = -v584.f32[1];
              v825 = v584.f32[0];
              v587 = vmul_f32(v584, v755);
              v588 = (float32x2_t)vdup_lane_s32((int32x2_t)v584, 0);
              v588.f32[0] = -v584.f32[1];
              *(float32x2_t *)&v823 = vsub_f32(v588, v587);
              *((float *)&v823 + 2) = v584.f32[1] - v587.f32[0];
              *((float *)&v823 + 3) = -vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v587, 1), v584).f32[0];
              v821 = xmmword_19FFB4900;
              v822 = 0;
              *(float32x2_t *)&v763->_type = v554;
              v763->_xIdx = v586;
              v589.i64[0] = v823;
              v589.i64[1] = 0x3F800000BF000000;
              v590.i64[0] = 0xBF000000BF000000;
              v590.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)v589.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v590, (float32x4_t)xmmword_19FFB4920, v589)));
              v763->_hash = v589.i64[0];
              v589.i8[0] = *(_BYTE *)(v549 + 96);
              v591 = (float)v589.u32[0];
              *(float *)&v763[1]._type = (float)v589.u32[0];
              *(float32x2_t *)&v763[1]._xIdx = v554;
              LODWORD(v763[1]._hash) = v586;
              v589.i64[0] = *((_QWORD *)&v823 + 1);
              v589.i64[1] = *((_QWORD *)&v821 + 1);
              v590.i64[0] = 0xBF000000BF000000;
              v590.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)&v763[2]._type = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v590, (float32x4_t)xmmword_19FFB4920, v589)));
              *(float *)&v763[2]._xIdx = v591;
              *(float32x2_t *)((char *)&v823 + 4) = v584;
              *(float *)&v823 = -v584.f32[1];
              *((float *)&v823 + 3) = -v584.f32[0];
              v821 = xmmword_19FFB4930;
              v763[2]._hash = (unint64_t)v554;
              *(_DWORD *)&v763[3]._type = v586;
              v589.i64[0] = v823;
              v589.i64[1] = 0x3F440000BF000000;
              v592.i64[0] = 0xBF000000BF000000;
              v592.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)&v763[3]._xIdx = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v592, (float32x4_t)xmmword_19FFB4920, v589)));
              *(float *)&v763[3]._hash = v591;
              *(float32x2_t *)&v763[4]._type = v554;
              v763[4]._xIdx = v586;
              v593.i64[0] = *((_QWORD *)&v823 + 1);
              v593.i64[1] = *((_QWORD *)&v821 + 1);
              v594.i64[0] = 0xBF000000BF000000;
              v594.i64[1] = 0xBF000000BF000000;
              v763[4]._hash = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v594, (float32x4_t)xmmword_19FFB4920, v593)));
              v782 = v591;
              *(float *)&v763[5]._type = v591;
              p_xIdx = (float *)&v763[5]._xIdx;
              v772 = v552 - 1;
              if (v552 - 1 >= 2)
              {
                v596 = v553 + 7;
                v597 = v759;
                v598 = 1;
                v768 = v553;
                while (1)
                {
                  v606 = &v553[3 * v598];
                  v608 = *v606;
                  v607 = v606[1];
                  if (++v598 >= v552)
                  {
LABEL_738:
                    v620 = (float32x2_t)vdup_lane_s32((int32x2_t)v584, 1);
                    v619 = (unint64_t)v584;
                    v617 = v584.f32[0];
                  }
                  else
                  {
                    v609 = v596;
                    v610 = v597;
                    while (1)
                    {
                      v611 = *(v609 - 1);
                      v612 = vabds_f32(*v609, v607);
                      if (vabds_f32(v611, v608) >= 1.0e-10 || v612 >= 1.0e-10)
                        break;
                      v609 += 3;
                      if (!--v610)
                        goto LABEL_738;
                    }
                    v614 = v611 - v608;
                    v615 = *v609 - v607;
                    v616 = v516 / sqrtf((float)(v614 * v614) + (float)(v615 * v615));
                    v617 = v616 * v614;
                    *(float *)&v618 = v616 * v615;
                    v619 = __PAIR64__(v616 * v615, LODWORD(v617));
                    v620 = (float32x2_t)__PAIR64__(v584.u32[1], v618);
                  }
                  v621 = v617 + v584.f32[0];
                  v622 = vaddv_f32(v620);
                  v623 = (float)(v621 * v621) + (float)(v622 * v622);
                  v793 = v619;
                  v801 = v584.f32[0];
                  if (v623 <= 0.0)
                  {
                    v626 = v584.f32[1];
                    v625 = v584.f32[0];
                  }
                  else
                  {
                    v624 = v516 / sqrtf(v623);
                    v625 = -(float)(v622 * v624);
                    v626 = v624 * v621;
                  }
                  v787 = v606[4];
                  v627 = v620.f32[1];
                  v628 = *((_DWORD *)v606 + 2);
                  v784 = v606[3];
                  v797 = v581;
                  *(float *)&v822 = v581;
                  *((float *)&v822 + 1) = v581 * v779;
                  v821 = xmmword_19FFB4930;
                  v824 = v625;
                  v825 = v626;
                  v805 = v620.f32[0];
                  v809 = v617;
                  v629 = atan2f(v620.f32[0], v617);
                  v630 = v629 - atan2f(v627, v801);
                  v631 = v630;
                  if (v630 <= 3.14159265)
                  {
                    if (v631 >= -3.14159265)
                      goto LABEL_747;
                    v632 = 6.28318531;
                  }
                  else
                  {
                    v632 = -6.28318531;
                  }
                  v630 = v631 + v632;
LABEL_747:
                  v633 = sqrtf(fmaxf(-(float)((float)((float)((float)(v625 * v809) + (float)(v626 * v805))* (float)((float)(v625 * v809) + (float)(v626 * v805)))+ -1.0), 0.1));
                  v634 = v625 / v633;
                  v635 = v626 / v633;
                  v636 = fabsf(v630);
                  v637 = (unint64_t)fmaxf(ceilf(v636 * 5.7296), v516);
                  if (v637 < 2)
                  {
                    *(_QWORD *)&v823 = __PAIR64__(LODWORD(v635), LODWORD(v634));
                    *((float *)&v823 + 2) = -v634;
                    *((float *)&v823 + 3) = -v635;
                    *p_xIdx = v608;
                    p_xIdx[1] = v607;
                    *((_DWORD *)p_xIdx + 2) = v628;
                    v599.i64[0] = v823;
                    v599.i64[1] = v821;
                    v553 = v768;
                    goto LABEL_728;
                  }
                  v776 = (float32x2_t)__PAIR64__(LODWORD(v635), LODWORD(v634));
                  v806 = v626 / v633;
                  v810 = v625 / v633;
                  v765 = v636;
                  if (v636 >= 1.5708)
                  {
                    for (j = 0; j != v637; ++j)
                    {
                      v644 = __sincosf_stret((float)((float)((float)(int)j * (float)(v516 / (float)((float)v637 + -1.0))) + -0.5)* v630);
                      v824 = -(float)((float)(v626 * v644.__sinval) - (float)(v625 * v644.__cosval));
                      v825 = (float)(v625 * v644.__sinval) + (float)(v626 * v644.__cosval);
                      *(float *)&v823 = v824;
                      *((float *)&v823 + 1) = v825;
                      *((float *)&v823 + 2) = -(float)((float)(v625 * v644.__cosval) - (float)(v626 * v644.__sinval));
                      *((float *)&v823 + 3) = -v825;
                      *p_xIdx = v608;
                      p_xIdx[1] = v607;
                      *((_DWORD *)p_xIdx + 2) = v628;
                      v645.i64[0] = v823;
                      v645.i64[1] = v821;
                      v646.i64[0] = 0xBF000000BF000000;
                      v646.i64[1] = 0xBF000000BF000000;
                      *((int16x4_t *)p_xIdx + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v646, (float32x4_t)xmmword_19FFB4920, v645)));
                      p_xIdx[6] = v782;
                      p_xIdx[8] = v608;
                      p_xIdx[9] = v607;
                      *((_DWORD *)p_xIdx + 10) = v628;
                      v645.i64[0] = *((_QWORD *)&v823 + 1);
                      v645.i64[1] = *((_QWORD *)&v821 + 1);
                      v646.i64[0] = 0xBF000000BF000000;
                      v646.i64[1] = 0xBF000000BF000000;
                      *((int16x4_t *)p_xIdx + 6) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v646, (float32x4_t)xmmword_19FFB4920, v645)));
                      p_xIdx[14] = v782;
                      p_xIdx += 16;
                    }
                  }
                  else
                  {
                    if (v630 >= 0.0)
                    {
                      *(float *)&v823 = v625 / v633;
                      *((float *)&v823 + 1) = v626 / v633;
                      v647 = 3.14159265 - v630;
                      v648 = __sincosf_stret(v647);
                      v649 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v776, v648.__sinval));
                      v650 = vmul_n_f32(v776, v648.__cosval);
                      v642.i32[0] = vsub_f32(v650, v649).u32[0];
                      v642.i32[1] = vadd_f32(v650, v649).i32[1];
                    }
                    else
                    {
                      v638 = -3.14159265 - v630;
                      v640 = __sincosf_stret(v638);
                      v639.f32[0] = v640.__cosval;
                      v641.f32[0] = -v640.__sinval;
                      v641.i32[1] = LODWORD(v640.__sinval);
                      *(float32x2_t *)&v823 = vmls_lane_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v776, v641)), v776, v639, 0);
                      v642 = vneg_f32(v776);
                    }
                    *((float32x2_t *)&v823 + 1) = v642;
                    *p_xIdx = v608;
                    p_xIdx[1] = v607;
                    *((_DWORD *)p_xIdx + 2) = v628;
                    v651.i64[0] = v823;
                    v651.i64[1] = v821;
                    v652.i64[0] = 0xBF000000BF000000;
                    v652.i64[1] = 0xBF000000BF000000;
                    *((int16x4_t *)p_xIdx + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v652, (float32x4_t)xmmword_19FFB4920, v651)));
                    p_xIdx[6] = v782;
                    p_xIdx[8] = v608;
                    p_xIdx[9] = v607;
                    *((_DWORD *)p_xIdx + 10) = v628;
                    v651.i64[0] = *((_QWORD *)&v823 + 1);
                    v651.i64[1] = *((_QWORD *)&v821 + 1);
                    v652.i64[0] = 0xBF000000BF000000;
                    v652.i64[1] = 0xBF000000BF000000;
                    *((int16x4_t *)p_xIdx + 6) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v652, (float32x4_t)xmmword_19FFB4920, v651)));
                    p_xIdx[14] = v782;
                    p_xIdx += 16;
                    v653 = v516 / (float)((float)v637 + -1.0);
                    v654 = 0;
                    if (v630 >= 0.0)
                    {
                      do
                      {
                        v659 = __sincosf_stret((float)((float)(v653 * (float)(int)v654) + -0.5) * v630);
                        v824 = -(float)((float)(v626 * v659.__sinval) - (float)(v625 * v659.__cosval));
                        v825 = (float)(v625 * v659.__sinval) + (float)(v626 * v659.__cosval);
                        v658 = v810;
                        *(_QWORD *)&v823 = __PAIR64__(LODWORD(v806), LODWORD(v810));
                        *((float *)&v823 + 2) = -(float)((float)(v625 * v659.__cosval) - (float)(v626 * v659.__sinval));
                        *((float *)&v823 + 3) = -v825;
                        *p_xIdx = v608;
                        p_xIdx[1] = v607;
                        *((_DWORD *)p_xIdx + 2) = v628;
                        v660.i64[0] = v823;
                        v660.i64[1] = v821;
                        v661.i64[0] = 0xBF000000BF000000;
                        v661.i64[1] = 0xBF000000BF000000;
                        *((int16x4_t *)p_xIdx + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v661, (float32x4_t)xmmword_19FFB4920, v660)));
                        p_xIdx[6] = v782;
                        p_xIdx[8] = v608;
                        p_xIdx[9] = v607;
                        *((_DWORD *)p_xIdx + 10) = v628;
                        v660.i64[0] = *((_QWORD *)&v823 + 1);
                        v660.i64[1] = *((_QWORD *)&v821 + 1);
                        v661.i64[0] = 0xBF000000BF000000;
                        v661.i64[1] = 0xBF000000BF000000;
                        *((int16x4_t *)p_xIdx + 6) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v661, (float32x4_t)xmmword_19FFB4920, v660)));
                        p_xIdx[14] = v782;
                        p_xIdx += 16;
                        ++v654;
                      }
                      while (v637 != v654);
                      v516 = 1.0;
                      goto LABEL_761;
                    }
                    v802 = vneg_f32(v776);
                    do
                    {
                      v655 = __sincosf_stret((float)((float)(v653 * (float)(int)v654) + -0.5) * v630);
                      v824 = -(float)((float)(v626 * v655.__sinval) - (float)(v625 * v655.__cosval));
                      v825 = (float)(v625 * v655.__sinval) + (float)(v626 * v655.__cosval);
                      *(float *)&v823 = v824;
                      *((float *)&v823 + 1) = v825;
                      *((float32x2_t *)&v823 + 1) = v802;
                      *p_xIdx = v608;
                      p_xIdx[1] = v607;
                      *((_DWORD *)p_xIdx + 2) = v628;
                      v656.i64[0] = v823;
                      v656.i64[1] = v821;
                      v657.i64[0] = 0xBF000000BF000000;
                      v657.i64[1] = 0xBF000000BF000000;
                      *((int16x4_t *)p_xIdx + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v657, (float32x4_t)xmmword_19FFB4920, v656)));
                      p_xIdx[6] = v782;
                      p_xIdx[8] = v608;
                      p_xIdx[9] = v607;
                      *((_DWORD *)p_xIdx + 10) = v628;
                      v656.i64[0] = *((_QWORD *)&v823 + 1);
                      v656.i64[1] = *((_QWORD *)&v821 + 1);
                      v657.i64[0] = 0xBF000000BF000000;
                      v657.i64[1] = 0xBF000000BF000000;
                      *((int16x4_t *)p_xIdx + 6) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v657, (float32x4_t)xmmword_19FFB4920, v656)));
                      p_xIdx[14] = v782;
                      p_xIdx += 16;
                      ++v654;
                    }
                    while (v637 != v654);
                  }
                  v516 = 1.0;
                  v658 = v810;
LABEL_761:
                  v553 = v768;
                  if (v765 >= 1.5708)
                  {
                    v600 = v797;
                    v601 = (float32x2_t)v793;
                    v602 = v787;
                    v603 = v784;
                    goto LABEL_729;
                  }
                  v662 = v630;
                  if (v630 >= 0.0)
                  {
                    *(_QWORD *)&v823 = __PAIR64__(LODWORD(v806), LODWORD(v658));
                    v668 = v662 + -3.14159265;
                    v669 = __sincosf_stret(v668);
                    v670 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v776, v669.__sinval));
                    v671 = vmul_n_f32(v776, v669.__cosval);
                    v667.i32[0] = vsub_f32(v671, v670).u32[0];
                    v667.i32[1] = vadd_f32(v671, v670).i32[1];
                  }
                  else
                  {
                    v663 = v662 + 3.14159265;
                    v665 = __sincosf_stret(v663);
                    v664.f32[0] = v665.__cosval;
                    v666.f32[0] = -v665.__sinval;
                    v666.i32[1] = LODWORD(v665.__sinval);
                    *(float32x2_t *)&v823 = vmls_lane_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v776, v666)), v776, v664, 0);
                    v667 = vneg_f32(v776);
                  }
                  *((float32x2_t *)&v823 + 1) = v667;
                  *p_xIdx = v608;
                  p_xIdx[1] = v607;
                  *((_DWORD *)p_xIdx + 2) = v628;
                  v599.i64[0] = v823;
                  v599.i64[1] = v821;
LABEL_728:
                  v600 = v797;
                  v601 = (float32x2_t)v793;
                  v602 = v787;
                  v603 = v784;
                  v604.i64[0] = 0xBF000000BF000000;
                  v604.i64[1] = 0xBF000000BF000000;
                  *((int16x4_t *)p_xIdx + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v604, (float32x4_t)xmmword_19FFB4920, v599)));
                  p_xIdx[6] = v782;
                  p_xIdx[8] = v608;
                  p_xIdx[9] = v607;
                  *((_DWORD *)p_xIdx + 10) = v628;
                  v605.i64[0] = *((_QWORD *)&v823 + 1);
                  v605.i64[1] = *((_QWORD *)&v821 + 1);
                  v604.i64[0] = 0xBF000000BF000000;
                  v604.i64[1] = 0xBF000000BF000000;
                  *((int16x4_t *)p_xIdx + 6) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v604, (float32x4_t)xmmword_19FFB4920, v605)));
                  p_xIdx[14] = v782;
                  p_xIdx += 16;
LABEL_729:
                  v581 = sqrtf((float)((float)(v603 - v608) * (float)(v603 - v608))+ (float)((float)(v602 - v607) * (float)(v602 - v607)))+ v600;
                  --v597;
                  v596 += 3;
                  v584 = v601;
                  if (v598 == v772)
                    goto LABEL_768;
                }
              }
              v601 = v584;
LABEL_768:
              v672 = &v553[3 * v772];
              v673 = &v553[3 * v759];
              v674 = *v672;
              if (vabds_f32(*v672, *v673) >= 1.0e-10)
              {
                v676 = v672[1];
                v680 = v676 - v673[1];
                v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                v677.i64[0] = 0x1000100010001;
                v677.i64[1] = 0x1000100010001;
                v678 = v763;
              }
              else
              {
                v675 = v673[1];
                v676 = v672[1];
                v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                v677.i64[0] = 0x1000100010001;
                v677.i64[1] = 0x1000100010001;
                v678 = v763;
                if (vabds_f32(v676, v675) < 1.0e-10)
                {
                  v679 = v601.f32[1];
                  goto LABEL_774;
                }
                v680 = v676 - v675;
              }
              v681 = v674 - *v673;
              v682 = v516 / sqrtf((float)(v681 * v681) + (float)(v680 * v680));
              v601.f32[0] = v682 * v681;
              v679 = v682 * v680;
LABEL_774:
              v517 = v756;
              *(float *)&v823 = -v679;
              *(_QWORD *)((char *)&v823 + 4) = __PAIR64__(LODWORD(v679), v601.u32[0]);
              *((float *)&v823 + 3) = -v601.f32[0];
              v683 = *((_DWORD *)v672 + 2);
              v824 = -v679;
              v825 = v601.f32[0];
              *(float *)&v822 = v581;
              *((float *)&v822 + 1) = v581 * v779;
              *p_xIdx = v674;
              p_xIdx[1] = v676;
              *((_DWORD *)p_xIdx + 2) = v683;
              v684.i64[0] = v823;
              v684.i64[1] = v821;
              v685.i64[0] = 0xBF000000BF000000;
              v685.i64[1] = 0xBF000000BF000000;
              *((int16x4_t *)p_xIdx + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v685, (float32x4_t)xmmword_19FFB4920, v684)));
              p_xIdx[6] = v782;
              p_xIdx[8] = v674;
              p_xIdx[9] = v676;
              *((_DWORD *)p_xIdx + 10) = v683;
              v684.i64[0] = *((_QWORD *)&v823 + 1);
              v684.i64[1] = *((_QWORD *)&v821 + 1);
              v685.i64[0] = 0xBF000000BF000000;
              v685.i64[1] = 0xBF000000BF000000;
              *((int16x4_t *)p_xIdx + 6) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v685, (float32x4_t)xmmword_19FFB4920, v684)));
              p_xIdx[14] = v782;
              *(float *)&v823 = (float)(1.5312 * v601.f32[0]) - v679;
              *((float *)&v823 + 1) = (float)(v679 * 1.5312) + v601.f32[0];
              *((float *)&v823 + 2) = (float)(1.5312 * v601.f32[0]) + v679;
              *((float *)&v823 + 3) = (float)(v679 * 1.5312) - v601.f32[0];
              v821 = *(_OWORD *)&v820[8];
              v686 = *(_QWORD *)&v820[8];
              p_xIdx[16] = v674;
              p_xIdx[17] = v676;
              *((_DWORD *)p_xIdx + 18) = v683;
              v684.i64[0] = v823;
              v684.i64[1] = v686;
              v687.i64[0] = 0xBF000000BF000000;
              v687.i64[1] = 0xBF000000BF000000;
              *((int16x4_t *)p_xIdx + 10) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v687, (float32x4_t)xmmword_19FFB4920, v684)));
              p_xIdx[22] = v782;
              p_xIdx[24] = v674;
              p_xIdx[25] = v676;
              v688 = *((_QWORD *)&v823 + 1);
              v690.i64[1] = *((_QWORD *)&v821 + 1);
              *((_DWORD *)p_xIdx + 26) = v683;
              v689.i64[0] = 0xBF000000BF000000;
              v689.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)v690.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v689, (float32x4_t)xmmword_19FFB4920, v690)));
              *((_QWORD *)p_xIdx + 14) = v690.i64[0];
              p_xIdx[30] = v782;
              v691 = *(_QWORD *)(v549 + 8);
              v692 = *(_QWORD *)(v549 + 16) - v691;
              v693 = v692 >> 1;
              v546 = (uint64_t)v757;
              if (v692 >= 4)
              {
                v694 = *(_QWORD *)(v549 + 8);
                v695 = 2;
                if (v693 > 2)
                  v695 = v693;
                if (v695 >= 3)
                {
                  v698 = 0;
                  v699 = v695 - 1;
                  v700 = (v695 - 1) & 0xFFFFFFFFFFFFFFFELL;
                  v701 = v761 + 6;
                  do
                  {
                    v702 = v691 + 2 * v698;
                    *(v701 - 6) = v702;
                    *v701 = v702 + 2;
                    *(v701 - 5) = v702 + 1;
                    v701[1] = v702 + 3;
                    *(v701 - 4) = v702 + 2;
                    v701[2] = v702 + 4;
                    *(v701 - 3) = v702 + 1;
                    v701[3] = v702 + 3;
                    *(v701 - 2) = v702 + 3;
                    v701[4] = v702 + 5;
                    v698 += 2;
                    *(v701 - 1) = v702 + 2;
                    v701[5] = v702 + 4;
                    v701 += 12;
                  }
                  while (v700 != v698);
                  if (v699 != v700)
                  {
                    v696 = v699 | 1;
                    LODWORD(v694) = 2 * v700 + v691;
                    v697 = &v761[6 * v700];
                    goto LABEL_783;
                  }
                }
                else
                {
                  v696 = 1;
                  v697 = v761;
LABEL_783:
                  v703 = v695 - v696;
                  do
                  {
                    *v697 = v694;
                    v704 = v694 + 1;
                    v697[1] = v694 + 1;
                    v705 = v694 + 3;
                    LODWORD(v694) = v694 + 2;
                    v697[2] = v694;
                    v697[3] = v704;
                    v697[4] = v705;
                    v697[5] = v694;
                    v697 += 6;
                    --v703;
                  }
                  while (v703);
                }
              }
              if (*(_QWORD *)(v549 + 48) != *(_QWORD *)(v549 + 40) && v693 - 1 >= 3)
              {
                v706 = v693 - 3;
                if (v693 - 3 >= 8)
                {
                  v709 = v706 & 0xFFFFFFFFFFFFFFF8;
                  v690 = (float32x4_t)xmmword_19FFB2FD0;
                  v710 = (int64x2_t)xmmword_19FFB2FE0;
                  v711 = (int64x2_t)xmmword_19FFB2FF0;
                  v712 = (int64x2_t)xmmword_19FFB3000;
                  v713 = v757;
                  v714 = v706 & 0xFFFFFFFFFFFFFFF8;
                  v715 = vdupq_n_s64(v691);
                  do
                  {
                    v834.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v715, vaddq_s64(v712, v712)), (int32x4_t)vaddq_s64(v715, vaddq_s64(v711, v711))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v715, vaddq_s64(v710, v710)), (int32x4_t)vaddq_s64(v715, vaddq_s64((int64x2_t)v690, (int64x2_t)v690))));
                    v834.val[0] = vaddq_s16(v834.val[1], v677);
                    vst2q_s16(v713, v834);
                    v713 += 16;
                    v834.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v710 = vaddq_s64(v710, (int64x2_t)v834.val[0]);
                    v711 = vaddq_s64(v711, (int64x2_t)v834.val[0]);
                    v712 = vaddq_s64(v712, (int64x2_t)v834.val[0]);
                    v690 = (float32x4_t)vaddq_s64((int64x2_t)v690, (int64x2_t)v834.val[0]);
                    v714 -= 8;
                  }
                  while (v714);
                  if (v706 != v709)
                  {
                    v707 = v709 | 2;
                    v708 = &v757[2 * (v706 & 0xFFFFFFFFFFFFFFF8)];
                    goto LABEL_793;
                  }
                }
                else
                {
                  v707 = 2;
                  v708 = v757;
LABEL_793:
                  v716 = ~v707 + v693;
                  v717 = v691 + 2 * v707;
                  do
                  {
                    *v708 = v717 - 2;
                    v708[1] = v717;
                    v717 += 2;
                    v708 += 2;
                    --v716;
                  }
                  while (v716);
                }
              }
              v718 = (char *)v678 + 32 * (*(_QWORD *)(v549 + 16) - v691);
              v690.i32[0] = *((_DWORD *)v718 - 4);
              v690.i16[2] = *((_WORD *)v718 - 6);
              v719 = vadd_s16(*(int16x4_t *)v690.f32, *(int16x4_t *)v690.f32);
              *((_WORD *)v718 - 6) = v719.i16[2];
              *((_DWORD *)v718 - 4) = v719.i32[0];
              v719.i32[0] = *((_DWORD *)v718 - 12);
              v719.i16[2] = *((_WORD *)v718 - 22);
              v720 = vadd_s16(v719, v719);
              *((_WORD *)v718 - 22) = v720.i16[2];
              *((_DWORD *)v718 - 12) = v720.i32[0];
              v720.i32[0] = *((_DWORD *)v718 - 20);
              v720.i16[2] = *((_WORD *)v718 - 38);
              v721 = vadd_s16(v720, v720);
              *((_WORD *)v718 - 38) = v721.i16[2];
              *((_DWORD *)v718 - 20) = v721.i32[0];
              v721.i32[0] = *((_DWORD *)v718 - 28);
              v721.i16[2] = *((_WORD *)v718 - 54);
              v722 = vadd_s16(v721, v721);
              *((_WORD *)v718 - 54) = v722.i16[2];
              *((_DWORD *)v718 - 28) = v722.i32[0];
            }
            v543 = v760;
            v549 = *v760;
            v550 = *(_QWORD *)(*v760 + 8);
            v548 = *(_QWORD *)(*v760 + 16);
            v547 = (uint64_t)v761;
            v524 = (uint64_t)v763;
            v544 = v758;
            goto LABEL_706;
          }
LABEL_797:
          {
            v745 = operator new();
            *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v745, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v724 = (_QWORD *)*v752;
          if (*v752)
          {
            v725 = (_QWORD *)v754[8];
            v726 = (_QWORD *)*v752;
            if (v725 != v724)
            {
              do
              {
                v728 = (void (***)(_QWORD, _QWORD *))*--v725;
                v727 = v728;
                *v725 = 0;
                if (v728)
                {
                  (**v727)(v727, v726);
                  if ((v729 & 1) == 0
                  {
                    v730 = operator new();
                    *((_QWORD *)v9 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v730, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(_QWORD, void (***)(_QWORD, _QWORD *), uint64_t))(**((_QWORD **)v9 + 299) + 40))(*((_QWORD *)v9 + 299), v727, 104);
                }
              }
              while (v725 != v724);
              v726 = (_QWORD *)*v752;
            }
            v754[8] = (uint64_t)v724;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v754[10] + 40))(v754[10], v726, v754[9] - (_QWORD)v726);
            *v752 = 0;
            v754[8] = 0;
            v754[9] = 0;
          }
          *v752 = 0;
          v754[8] = 0;
          v754[9] = 0;
          if (v814.__begin_)
            operator delete(v814.__begin_);
          if (v815[0])
            operator delete(v815[0]);
          if (v819)
          {
            value = __p.__end_cap_.__value_;
            v732 = v817;
            if (v817 != __p.__end_cap_.__value_)
            {
              v733 = __p.__end_;
              v734 = v818;
              v735 = HIBYTE(v818);
              if (__p.__begin_ && *((_BYTE *)__p.__end_ + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)__p.__begin_ + 64))();
              if (v734 && !v735)
              {
                v736 = (unsigned int *)*((_QWORD *)v733 + 7);
                v737 = (unsigned int *)*((_QWORD *)v733 + 8);
                if (v737 == v736)
                  v736 = (unsigned int *)(*((_QWORD *)v733 + 10) - *((_QWORD *)v733 + 9));
                if (value < v736)
                  v736 = value;
                if (v737 <= v732)
                  v737 = v732;
                if (v737 == v736)
                  v737 = (unsigned int *)((char *)v736 + *((_QWORD *)v733 + 10) - *((_QWORD *)v733 + 9));
                *((_QWORD *)v733 + 7) = v736;
                *((_QWORD *)v733 + 8) = v737;
              }
            }
          }
          if (v831)
          {
            v739 = v828;
            v738 = v829;
            if (v829 != v828)
            {
              v740 = (_QWORD *)*((_QWORD *)&v827 + 1);
              v741 = v830;
              v742 = BYTE1(v830);
              if ((_QWORD)v827 && *(_BYTE *)(*((_QWORD *)&v827 + 1) + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)v827 + 64))();
              if (v741 && !v742)
              {
                v743 = v740[7];
                v744 = v740[8];
                if (v744 == v743)
                  v743 = v740[10] - v740[9];
                if (v739 < v743)
                  v743 = v739;
                if (v744 <= v738)
                  v744 = v738;
                if (v744 == v743)
                  v744 = v743 + v740[10] - v740[9];
                v740[7] = v743;
                v740[8] = v744;
              }
            }
          }
          v523 = v753 + 1;
          v522 = v750;
        }
        v515 = v748 + 8;
      }
      while (v748 + 8 != v747);
    }
    return a1;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19F7D0CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t v67;
  void *v68;
  void *v70;
  void *v71;

  MEMORY[0x1A1AF4E00](v67, 0x1020C4007FF0C4BLL);
  if (v68)
    operator delete(v68);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a52);
  v70 = *a43;
  if (*a43)
  {
    *(_QWORD *)(a14 + 40) = v70;
    operator delete(v70);
  }
  v71 = *a41;
  if (*a41)
  {
    *(_QWORD *)(a14 + 16) = v71;
    operator delete(v71);
    if (!a67)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a67)
  {
    goto LABEL_3;
  }
  operator delete(a67);
  goto LABEL_3;
}

void md::RouteLineArrowLayer::~RouteLineArrowLayer(md::RouteLineArrowLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C8E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C8E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF408;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C8E0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C8E0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::RouteLineArrow::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::RouteLineArrow::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::RouteLineArrow::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLineArrow::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLineArrow::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLineArrow::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::batch(std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 104);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 104);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 104);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 104);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 104);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 104);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 104);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 104);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 104);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 104);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 104);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 104);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 104);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 104);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 104);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 104);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::batch(std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::batch(std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::batch(std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::batch(std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineArrowRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 104);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 104);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t md::RouteLineArrowLayer::layout(md::RouteLineArrowLayer *this, const md::RouteLineArrowContext *a2)
{
  uint64_t v4;
  _QWORD *v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  float *v20;
  double v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  float v48;
  uint64_t v49;
  float *v50;
  float v51;
  unsigned int v53;
  float *v54;
  float v55;
  uint64_t v56;
  float *v57;
  float v58;
  BOOL v59;
  unsigned int v60;
  float *v61;
  float v62;
  uint64_t v63;
  float *v64;
  float v65;
  BOOL v66;
  unsigned int v67;
  float *v68;
  float v69;
  uint64_t v70;
  unsigned int v71;
  float *v72;
  float v73;
  BOOL v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unint64_t v83;
  float *v84;
  float v85;
  _BOOL4 v86;
  unsigned int v87;
  float v88;
  _BOOL4 v89;
  unsigned int v90;
  float v91;
  _BOOL4 v92;
  unsigned int v93;
  float v94;
  _BOOL4 v95;
  unsigned int v96;
  int hasValueForKeyAtEnd;
  float32x4_t v98;
  float v99;
  _QWORD *v100;
  unint64_t v101;
  float32x4_t *v102;
  __int128 v103;
  __int128 v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  char *v109;
  std::__shared_weak_count *v110;
  _QWORD v111[2];
  unsigned __int8 v112;
  char v113;
  uint16x4_t v114[2];

  v4 = 24;
  if (!*((_BYTE *)a2 + 56))
    v4 = 16;
  *((_QWORD *)this + 7) = *(_QWORD *)(*((_QWORD *)this + 20) + v4);
  v5 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v6 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v6)
    goto LABEL_31;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v6 <= 0x1AF456233693CD46uLL)
      v8 = 0x1AF456233693CD46uLL % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0x1AF456233693CD46;
  }
  v9 = *(_QWORD **)(*v5 + 8 * v8);
  if (!v9)
    goto LABEL_31;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_31;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v12 & (*(_QWORD *)&v6 - 1)) != v8)
      {
        goto LABEL_31;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= *(_QWORD *)&v6)
      v11 %= *(_QWORD *)&v6;
    if (v11 != v8)
      goto LABEL_31;
LABEL_13:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_31;
  }
  if (v10[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) != 0x1AF456233693CD46)
  {
LABEL_31:
    v14 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_32;
LABEL_26:
    if ((*(_QWORD *)&v6 & (*(_QWORD *)&v6 - 1)) != 0)
    {
      v22 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v6 <= 0x8BD499FBD96FBB9ELL)
        v22 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v6;
      v15 = *(_QWORD **)(*v5 + 8 * v22);
      do
      {
        do
          v15 = (_QWORD *)*v15;
        while (v15[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v15[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v15 = *(_QWORD **)(*v5 + 8 * ((*(_QWORD *)&v6 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v15 = (_QWORD *)*v15;
        while (v15[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v15[2] != 0x8BD499FBD96FBB9ELL);
    }
    v23 = 0.0;
    if (**(_BYTE **)(v15[5] + 32) && *((_BYTE *)this + 104))
      v23 = *(double *)(v14 + 24) * 0.0000000249532021 * (double)(1 << *((_BYTE *)this + 81));
    v24 = *((_QWORD *)this + 14);
    if ((*(_BYTE *)(v24 + 16) & 2) == 0)
    {
      v25 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v25 != -1)
      {
        v109 = &v113;
        v114[0] = (uint16x4_t)&v109;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v20 = *(float **)(v24 + 72);
    v21 = v23;
    goto LABEL_50;
  }
  v14 = *(_QWORD *)(v13 + 32);
  if (!*(_BYTE *)(v14 + 3776))
    goto LABEL_26;
LABEL_32:
  v16 = *((_QWORD *)this + 9);
  if (!v16)
  {
    v18 = *((_QWORD *)this + 14);
    if ((*(_BYTE *)(v18 + 16) & 2) == 0)
    {
      v19 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v19 != -1)
      {
        v109 = &v113;
        v114[0] = (uint16x4_t)&v109;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v20 = *(float **)(v18 + 72);
    v21 = 0.0;
LABEL_50:
    result = ggl::CullingGrid::intersectedCellsForView(v20, v21);
    goto LABEL_51;
  }
  result = gdc::GlobeTileGrid::intersectWithFrustum(v16, (const double *)(v14 + 984), *(double *)(v14 + 24));
LABEL_51:
  v26 = (uint64_t *)*((_QWORD *)this + 1);
  v27 = (uint64_t *)*((_QWORD *)this + 2);
  if (v26 != v27)
  {
    do
    {
      v29 = *v26;
      v30 = *(uint64_t **)(*v26 + 248);
      v31 = *(uint64_t **)(*v26 + 256);
      if (v30 == v31)
      {
        v28 = 0;
      }
      else
      {
        v28 = 0;
        do
        {
          v32 = *v30++;
          v33 = (*(_DWORD *)(v32 + 96) & result) != 0;
          v28 |= v33;
          *(_BYTE *)(v32 + 48) = v33;
        }
        while (v30 != v31);
      }
      *(_BYTE *)(v29 + 136) = v28 & 1;
      *(_BYTE *)(v29 + 272) = v28 & 1;
      ++v26;
    }
    while (v26 != v27);
    v34 = (uint64_t *)*((_QWORD *)this + 1);
    v35 = (uint64_t *)*((_QWORD *)this + 2);
    if (v34 != v35)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      v108 = (float32x4_t)vdupq_n_s32(0x37800080u);
      while (1)
      {
        v40 = *v34;
        if (!*(_BYTE *)(*v34 + 272))
          goto LABEL_63;
        v41 = *(char **)(v40 + 280);
        v42 = *(std::__shared_weak_count **)(v40 + 288);
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(p_shared_owners);
          while (__stxr(v44 + 1, p_shared_owners));
          v110 = v42;
          do
            v45 = __ldxr(p_shared_owners);
          while (__stxr(v45 + 1, p_shared_owners));
        }
        else
        {
          v110 = 0;
        }
        v109 = v41;
        v111[0] = 0;
        v111[1] = 0;
        v112 = 0;
        if (v41)
          LODWORD(v41) = (*(uint64_t (**)(char *, _QWORD *))(*(_QWORD *)v41 + 48))(v41, v111);
        v112 = v41;
        if (v42)
        {
          v46 = (unint64_t *)&v42->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          LODWORD(v41) = v112;
        }
        if ((_DWORD)v41)
          break;
        *(_BYTE *)(v40 + 136) = 0;
        *(_BYTE *)(v40 + 272) = 0;
LABEL_62:
        result = gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v109);
LABEL_63:
        if (++v34 == v35)
          return result;
      }
      v48 = *((float *)a2 + 2);
      v49 = *((_QWORD *)v109 + 3);
      v50 = *(float **)v49;
      if (*(_QWORD *)v49
        && (v51 = *v50, LODWORD(v50) = *v50 == 1.0, *(_BYTE *)(v49 + 10))
        && (v51 != 0.0 ? (_ZF = v51 == 1.0) : (_ZF = 1), !_ZF)
        || (v53 = *(unsigned __int8 *)(v49 + v50 + 11), v51 = 0.0, v53 == 2))
      {
        v114[0].i8[0] = 1;
        v113 = 1;
        v54 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v49, 0xF3u, 0, v114);
        v55 = *v54
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v49, 0xF3u, 1u, &v113)- *v54)* v51);
      }
      else
      {
        v55 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*((_QWORD *)v109 + 3), 0xF3u, v53, 0);
      }
      v56 = *((_QWORD *)v109 + 3);
      v57 = *(float **)v56;
      if (*(_QWORD *)v56
        && (v58 = *v57, LODWORD(v57) = *v57 == 1.0, *(_BYTE *)(v56 + 10))
        && (v58 != 0.0 ? (v59 = v58 == 1.0) : (v59 = 1), !v59)
        || (v60 = *(unsigned __int8 *)(v56 + v57 + 11), v58 = 0.0, v60 == 2))
      {
        v114[0].i8[0] = 1;
        v113 = 1;
        v61 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v56, 0xF4u, 0, v114);
        v62 = *v61
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v56, 0xF4u, 1u, &v113)- *v61)* v58);
      }
      else
      {
        v62 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*((_QWORD *)v109 + 3), 0xF4u, v60, 0);
      }
      v63 = *((_QWORD *)v109 + 3);
      v64 = *(float **)v63;
      if (*(_QWORD *)v63
        && (v65 = *v64, LODWORD(v64) = *v64 == 1.0, *(_BYTE *)(v63 + 10))
        && (v65 != 0.0 ? (v66 = v65 == 1.0) : (v66 = 1), !v66)
        || (v67 = *(unsigned __int8 *)(v63 + v64 + 11), v65 = 0.0, v67 == 2))
      {
        v114[0].i8[0] = 1;
        v113 = 1;
        v68 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v63, 0xF5u, 0, v114);
        v69 = *v68
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v63, 0xF5u, 1u, &v113)- *v68)* v65);
      }
      else
      {
        v69 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*((_QWORD *)v109 + 3), 0xF5u, v67, 0);
      }
      v70 = *((_QWORD *)v109 + 3);
      if ((int)v48 >= 0x17)
        v71 = 23;
      else
        v71 = (int)v48;
      v72 = *(float **)v70;
      if (*(_QWORD *)v70
        && (v73 = *v72, LODWORD(v72) = *v72 == 1.0, *(_BYTE *)(v70 + 10))
        && (v73 != 0.0 ? (v74 = v73 == 1.0) : (v74 = 1), !v74)
        || (v75 = *(unsigned __int8 *)(v70 + v72 + 11), v73 = 0.0, v75 == 2))
      {
        v114[0].i8[0] = 1;
        v113 = 1;
        v76 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x5Eu, v71, 0, v114);
        v77 = v76
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x5Eu, v71, 1u, &v113)- v76)* v73);
      }
      else
      {
        v77 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v109 + 3), 0x5Eu, v71, v75, 0);
      }
      v78 = *((float *)a2 + 32);
      if ((v79 & 1) == 0
      {
        md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultFillColor = xmmword_19FFB4950;
      }
      if ((v80 & 1) == 0
      {
        md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultStrokeColor = xmmword_19FFB4960;
      }
      if ((v81 & 1) == 0
      {
        md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultHighlightedFillColor = v103;
      }
      if ((v82 & 1) == 0
      {
        md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultHighlightedStrokeColor = xmmword_19FFB4970;
      }
      v106 = (float32x4_t)md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultStrokeColor;
      v107 = (float32x4_t)md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultFillColor;
      v83 = *((_QWORD *)v109 + 3);
      v84 = *(float **)v83;
      v104 = md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultHighlightedStrokeColor;
      v105 = (float32x4_t)md::RouteLineArrowBatch::layout(md::RouteLineArrowContext const&)::defaultHighlightedFillColor;
      if (*(_QWORD *)v83)
      {
        v85 = *v84;
        v86 = *v84 == 1.0;
        if (*(_BYTE *)(v83 + 10) && v85 != 0.0 && v85 != 1.0)
        {
LABEL_135:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x86u, 0) & 1) != 0)
          {
LABEL_138:
            gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)v114, 0x86u, 2, v83);
            v107 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v114[0])), v108);
            v83 = *((_QWORD *)v109 + 3);
            v84 = *(float **)v83;
LABEL_139:
            if (v84)
            {
              v88 = *v84;
              v89 = *v84 == 1.0;
              if (*(_BYTE *)(v83 + 10) && v88 != 0.0 && v88 != 1.0)
              {
LABEL_146:
                if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x87u, 0) & 1) != 0)
                {
LABEL_149:
                  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)v114, 0x87u, 2, v83);
                  v106 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v114[0])), v108);
                  v83 = *((_QWORD *)v109 + 3);
                  v84 = *(float **)v83;
LABEL_150:
                  if (v84)
                  {
                    v91 = *v84;
                    v92 = *v84 == 1.0;
                    if (*(_BYTE *)(v83 + 10) && v91 != 0.0 && v91 != 1.0)
                    {
LABEL_157:
                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x13Du, 0) & 1) != 0)
                      {
LABEL_160:
                        gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)v114, 0x13Du, 2, v83);
                        v105 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v114[0])), v108);
                        v83 = *((_QWORD *)v109 + 3);
                        v84 = *(float **)v83;
LABEL_161:
                        if (v84)
                        {
                          v94 = *v84;
                          v95 = *v84 == 1.0;
                          if (*(_BYTE *)(v83 + 10) && v94 != 0.0 && v94 != 1.0)
                          {
LABEL_168:
                            if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x13Eu, 0) & 1) != 0)
                              goto LABEL_171;
                            v96 = 1;
LABEL_170:
                            hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x13Eu, v96);
                            v98 = (float32x4_t)v104;
                            if (!hasValueForKeyAtEnd)
                            {
LABEL_172:
                              v99 = (float)(v77 + (float)(fminf(fmaxf(v62 * (float)(v48 - v55), 0.0), v69) * v77)) * v78;
                              v100 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v40 + 296) + 64) + 32);
                              v101 = v100[1];
                              v102 = (float32x4_t *)v100[9];
                              v102[5] = v105;
                              v102[6] = v98;
                              v102[7].f32[0] = v99 * 0.6;
                              v102[3] = v107;
                              v102[4] = v106;
                              v102[2].i32[1] = *((_DWORD *)a2 + 55);
                              v102[7].i32[1] = *((_DWORD *)a2 + 54);
                              v102->f32[0] = v99 * 0.475;
                              if (v100[8] > v101)
                                v101 = v100[8];
                              v100[7] = 0;
                              v100[8] = v101;
                              *(_DWORD *)(v40 + 56) = *((unsigned __int8 *)a2 + 57);
                              *(_QWORD *)(v40 + 64) = *((_QWORD *)a2 + 17);
                              goto LABEL_62;
                            }
LABEL_171:
                            gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)v114, 0x13Eu, 2, v83);
                            v98 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v114[0])), v108);
                            goto LABEL_172;
                          }
                        }
                        else
                        {
                          v95 = 0;
                        }
                        v96 = *(unsigned __int8 *)(v83 + v95 + 11);
                        if (v96 != 2)
                          goto LABEL_170;
                        goto LABEL_168;
                      }
                      v93 = 1;
LABEL_159:
                      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x13Du, v93))
                        goto LABEL_161;
                      goto LABEL_160;
                    }
                  }
                  else
                  {
                    v92 = 0;
                  }
                  v93 = *(unsigned __int8 *)(v83 + v92 + 11);
                  if (v93 != 2)
                    goto LABEL_159;
                  goto LABEL_157;
                }
                v90 = 1;
LABEL_148:
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x87u, v90))
                  goto LABEL_150;
                goto LABEL_149;
              }
            }
            else
            {
              v89 = 0;
            }
            v90 = *(unsigned __int8 *)(v83 + v89 + 11);
            if (v90 != 2)
              goto LABEL_148;
            goto LABEL_146;
          }
          v87 = 1;
LABEL_137:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v83, 0x86u, v87))
            goto LABEL_139;
          goto LABEL_138;
        }
      }
      else
      {
        v86 = 0;
      }
      v87 = *(unsigned __int8 *)(v83 + v86 + 11);
      if (v87 != 2)
        goto LABEL_137;
      goto LABEL_135;
    }
  }
  return result;
}

void sub_19F7D4578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t gdc::GlobeTileGrid::intersectWithFrustum(uint64_t a1, const double *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  _OWORD *v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v24;
  __int128 v25;
  __int128 v26;
  double v27[3];
  double v28[49];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  LODWORD(v9) = 0;
  do
  {
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 1688);
    v13 = (_OWORD *)(a1 + v6);
    v14 = *(_OWORD *)(a1 + v6 + 96);
    v25 = *(_OWORD *)(a1 + v6 + 80);
    v26 = v14;
    *(_OWORD *)v27 = *(_OWORD *)(a1 + v6 + 112);
    if (*((double *)&v14 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    v15 = geo::Intersect::encloses<double>(v28, (double *)&v25);
    v16 = 1 << v8;
    if (!v15)
      v16 = 0;
    v24 = v16;
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 1912);
    v17 = v13[32];
    v25 = v13[31];
    v26 = v17;
    *(_OWORD *)v27 = v13[33];
    if (*((double *)&v17 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    if (geo::Intersect::encloses<double>(v28, (double *)&v25))
      v18 = 1 << (v8 + 4);
    else
      v18 = 0;
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 2136);
    v19 = (_OWORD *)(a1 + v6);
    v20 = *(_OWORD *)(a1 + v6 + 928);
    v25 = *(_OWORD *)(a1 + v6 + 912);
    v26 = v20;
    *(_OWORD *)v27 = *(_OWORD *)(a1 + v6 + 944);
    if (*((double *)&v20 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    if (geo::Intersect::encloses<double>(v28, (double *)&v25))
      v21 = 1 << (v8 + 8);
    else
      v21 = 0;
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 2360);
    v22 = v19[84];
    v25 = v19[83];
    v26 = v22;
    *(_OWORD *)v27 = v19[85];
    if (*((double *)&v22 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    v10 = v21 | v18 | v24 | v9;
    v11 = geo::Intersect::encloses<double>(v28, (double *)&v25);
    v12 = 1 << (v8 + 12);
    if (!v11)
      v12 = 0;
    v9 = v12 | v10;
    ++v8;
    v7 += 56;
    v6 += 104;
  }
  while (v8 != 4);
  return v9;
}

float64x2_t geo::Frustum<double>::transformed(double *a1, const double *a2, uint64_t a3)
{
  const double *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double v7;
  const double *v8;
  const double *v9;
  const double *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  const double *v28;
  float64x2_t v29;
  double *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double *v46;
  float64x2_t v47;
  double *v48;
  double *v49;
  double *v50;
  float64x2_t result;
  double *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2x3_t v56;
  float64x2x3_t v57;
  float64x2x4_t v58;
  float64x2x3_t v59;
  float64x2x3_t v60;
  float64x2x3_t v61;
  float64x2x3_t v62;
  float64x2x4_t v63;
  float64x2x4_t v64;
  float64x2x4_t v65;

  v3 = a2 + 16;
  v63 = vld4q_f64(v3);
  v58 = v63;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 40);
  v6 = *(_OWORD *)(a3 + 24);
  v7 = *(double *)(a3 + 48);
  v8 = a2 + 24;
  v55 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)a3, 0);
  v9 = a2 + 30;
  v64 = vld4q_f64(a2);
  v10 = a2 + 8;
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[1], *(double *)&v5)), v64.val[2], *(double *)&v4);
  v11 = vaddq_f64(v63.val[0], v63.val[0]);
  v12 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[0], *(double *)&v4)), v64.val[1], *(double *)&v6);
  v13 = vaddq_f64(v12, v12);
  v14 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[2], *(double *)&v6)), v64.val[0], *(double *)&v5);
  v15 = vaddq_f64(v14, v14);
  v63.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v64.val[0], v11, v7), v13, *(double *)&v4), v15, *(double *)&v5, 0);
  v16 = vnegq_f64(v64.val[1]);
  v64.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v64.val[1], v11, *(double *)&v5), v15, v7), v13, *(double *)&v6, 0);
  v63.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(v64.val[2], v11, *(double *)&v4, 0), v15, *(double *)&v6), v13, v7);
  v17 = vmulq_f64(v64.val[3], v16);
  v53 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(a3 + 8), 0);
  v18 = vmulq_f64(v64.val[3], vnegq_f64(v64.val[0]));
  v19 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v18, *(double *)&v4)), v17, *(double *)&v6);
  v20 = vaddq_f64(v19, v19);
  v21 = vmlsq_lane_f64(vaddq_f64(v53, v17), v20, *(double *)&v6, 0);
  v22 = vmulq_f64(v64.val[3], vnegq_f64(v64.val[2]));
  v23 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v17, *(double *)&v5)), v22, *(double *)&v4);
  v24 = vaddq_f64(v23, v23);
  v25 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v22, *(double *)&v6)), v18, *(double *)&v5);
  v26 = vaddq_f64(v25, v25);
  v61 = vld3q_f64(v8);
  v59 = vld3q_f64(v9);
  v57 = v59;
  v27 = v24;
  v63.val[3] = vmlaq_f64(vnegq_f64(vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(v21, v24, *(double *)&v5), v26, v7), v64.val[1])), v63.val[0], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v18), v20, *(double *)&v4), v24, v7)), v26, *(double *)&v5));
  v28 = v8 + 12;
  v60 = vld3q_f64(v28);
  v56 = v60;
  v54 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(a3 + 16), 0);
  v29 = vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v22, v20, v7), v54), v26, *(double *)&v6);
  v8 += 18;
  v62 = vld3q_f64(v8);
  v65 = vld4q_f64(v10);
  v63.val[3] = vmlaq_f64(v63.val[3], v63.val[2], vmlaq_n_f64(vnegq_f64(v29), v27, *(double *)&v4));
  v63.val[1] = v64.val[1];
  v30 = a1;
  vst4q_f64(v30, v63);
  v30 += 8;
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v58.val[1], *(double *)&v5)), v58.val[2], *(double *)&v4);
  v31 = vaddq_f64(v63.val[0], v63.val[0]);
  v64.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v58.val[0], *(double *)&v4)), v58.val[1], *(double *)&v6);
  v64.val[0] = vaddq_f64(v64.val[0], v64.val[0]);
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v58.val[2], *(double *)&v6)), v58.val[0], *(double *)&v5);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v63.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v58.val[0], v31, v7), v64.val[0], *(double *)&v4), v60.val[0], *(double *)&v5, 0);
  v32 = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v58.val[1], v31, *(double *)&v5), v60.val[0], v7), v64.val[0], *(double *)&v6, 0);
  v63.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(v58.val[2], v31, *(double *)&v4, 0), v60.val[0], *(double *)&v6), v64.val[0], v7);
  v33 = vmulq_f64(v58.val[3], vnegq_f64(v58.val[1]));
  v64.val[0] = vmulq_f64(v58.val[3], vnegq_f64(v58.val[0]));
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[0], *(double *)&v4)), v33, *(double *)&v6);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v60.val[1] = vmlsq_lane_f64(vaddq_f64(v53, v33), v60.val[0], *(double *)&v6, 0);
  v60.val[2] = vmulq_f64(v58.val[3], vnegq_f64(v58.val[2]));
  v34 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v33, *(double *)&v5)), v60.val[2], *(double *)&v4);
  v35 = vaddq_f64(v34, v34);
  v64.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v60.val[2], *(double *)&v6)), v64.val[0], *(double *)&v5);
  v64.val[1] = vaddq_f64(v64.val[1], v64.val[1]);
  v63.val[3] = vmlaq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(v60.val[1], v35, *(double *)&v5), v64.val[1], v7), v32)), v63.val[0], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v64.val[0]), v60.val[0], *(double *)&v4), v35, v7)), v64.val[1], *(double *)&v5)), v63.val[2], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v60.val[2], v60.val[0], v7), v54), v64.val[1], *(double *)&v6)), v35, *(double *)&v4));
  v63.val[1] = v32;
  v36 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v65.val[1], *(double *)&v5)), v65.val[2], *(double *)&v4);
  v37 = vaddq_f64(v36, v36);
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v65.val[0], *(double *)&v4)), v65.val[1], *(double *)&v6);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v60.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v65.val[2], *(double *)&v6)), v65.val[0], *(double *)&v5);
  v60.val[1] = vaddq_f64(v60.val[1], v60.val[1]);
  v64.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v65.val[0], v37, v7), v60.val[0], *(double *)&v4), v60.val[1], *(double *)&v5, 0);
  v60.val[2] = vnegq_f64(v65.val[1]);
  v65.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v65.val[1], v37, *(double *)&v5), v60.val[1], v7), v60.val[0], *(double *)&v6, 0);
  v64.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(v65.val[2], v37, *(double *)&v4, 0), v60.val[1], *(double *)&v6), v60.val[0], v7);
  v38 = vmulq_f64(v65.val[3], v60.val[2]);
  v60.val[0] = vmulq_f64(v65.val[3], vnegq_f64(v65.val[0]));
  v60.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v60.val[0], *(double *)&v4)), v38, *(double *)&v6);
  v60.val[1] = vaddq_f64(v60.val[1], v60.val[1]);
  v60.val[2] = vmlsq_lane_f64(vaddq_f64(v53, v38), v60.val[1], *(double *)&v6, 0);
  v39 = vmulq_f64(v65.val[3], vnegq_f64(v65.val[2]));
  v40 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v38, *(double *)&v5)), v39, *(double *)&v4);
  v41 = vaddq_f64(v40, v40);
  v42 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v39, *(double *)&v6)), v60.val[0], *(double *)&v5);
  v43 = vaddq_f64(v42, v42);
  v64.val[3] = vmlaq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(v60.val[2], v41, *(double *)&v5), v43, v7), v65.val[1])), v64.val[0], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v60.val[0]), v60.val[1], *(double *)&v4), v41, v7)), v43, *(double *)&v5)), v64.val[2], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v39, v60.val[1], v7), v54), v43, *(double *)&v6)), v41, *(double *)&v4));
  v64.val[1] = v65.val[1];
  v44 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v61.val[1], *(double *)&v5)), v61.val[2], *(double *)&v4);
  vst4q_f64(v30, v64);
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v61.val[2], *(double *)&v6)), v61.val[0], *(double *)&v5);
  v64.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v61.val[0], *(double *)&v4)), v61.val[1], *(double *)&v6);
  v45 = vaddq_f64(v44, v44);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v64.val[0] = vaddq_f64(v64.val[0], v64.val[0]);
  v60.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v61.val[0]), v45, v7), v64.val[0], *(double *)&v4), v60.val[0], *(double *)&v5, 0);
  v60.val[2] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v61.val[1]), v45, *(double *)&v5), v60.val[0], v7), v64.val[0], *(double *)&v6, 0);
  v46 = a1 + 16;
  vst4q_f64(v46, v63);
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v57.val[1], *(double *)&v5)), v57.val[2], *(double *)&v4);
  v63.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v57.val[2], *(double *)&v6)), v57.val[0], *(double *)&v5);
  v63.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v57.val[0], *(double *)&v4)), v57.val[1], *(double *)&v6);
  v63.val[0] = vaddq_f64(v63.val[0], v63.val[0]);
  v63.val[1] = vaddq_f64(v63.val[1], v63.val[1]);
  v63.val[2] = vaddq_f64(v63.val[2], v63.val[2]);
  v61.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v57.val[0]), v63.val[0], v7), v63.val[2], *(double *)&v4), v63.val[1], *(double *)&v5, 0);
  v61.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v57.val[1]), v63.val[0], *(double *)&v5), v63.val[1], v7), v63.val[2], *(double *)&v6, 0);
  v47 = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v61.val[2]), v45, *(double *)&v4, 0), v60.val[0], *(double *)&v6), v64.val[0], v7);
  v48 = a1 + 24;
  vst3q_f64(v48, *(float64x2x3_t *)((char *)&v60 + 16));
  v49 = a1 + 30;
  v61.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v57.val[2]), v63.val[0], *(double *)&v4, 0), v63.val[1], *(double *)&v6), v63.val[2], v7);
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v56.val[1], *(double *)&v5)), v56.val[2], *(double *)&v4);
  v63.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v56.val[2], *(double *)&v6)), v56.val[0], *(double *)&v5);
  vst3q_f64(v49, v61);
  v63.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v56.val[0], *(double *)&v4)), v56.val[1], *(double *)&v6);
  v63.val[0] = vaddq_f64(v63.val[0], v63.val[0]);
  v63.val[1] = vaddq_f64(v63.val[1], v63.val[1]);
  v63.val[2] = vaddq_f64(v63.val[2], v63.val[2]);
  v60.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v56.val[0]), v63.val[0], v7), v63.val[2], *(double *)&v4), v63.val[1], *(double *)&v5, 0);
  v60.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v56.val[1]), v63.val[0], *(double *)&v5), v63.val[1], v7), v63.val[2], *(double *)&v6, 0);
  v60.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v56.val[2]), v63.val[0], *(double *)&v4, 0), v63.val[1], *(double *)&v6), v63.val[2], v7);
  v50 = a1 + 36;
  vst3q_f64(v50, v60);
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v62.val[1], *(double *)&v5)), v62.val[2], *(double *)&v4);
  v63.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v62.val[2], *(double *)&v6)), v62.val[0], *(double *)&v5);
  v63.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v62.val[0], *(double *)&v4)), v62.val[1], *(double *)&v6);
  result = vaddq_f64(v63.val[0], v63.val[0]);
  v63.val[1] = vaddq_f64(v63.val[1], v63.val[1]);
  v63.val[2] = vaddq_f64(v63.val[2], v63.val[2]);
  v60.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v62.val[0]), result, v7), v63.val[2], *(double *)&v4), v63.val[1], *(double *)&v5, 0);
  v60.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v62.val[1]), result, *(double *)&v5), v63.val[1], v7), v63.val[2], *(double *)&v6, 0);
  v60.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v62.val[2]), result, *(double *)&v4, 0), v63.val[1], *(double *)&v6), v63.val[2], v7);
  v52 = a1 + 42;
  vst3q_f64(v52, v60);
  return result;
}

BOOL md::OBBIntersectsXYAABB(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v3 = a2[1];
  v4 = a2[2];
  v5 = (float)(a2[3] - *a2) * 0.5;
  v6 = (float)(a2[4] - v3) * 0.5;
  v7 = (float)(a2[5] - v4) * 0.5;
  v8 = v5 + *a2;
  v9 = v6 + v3;
  v10 = v7 + v4;
  v11 = a1[3];
  v12 = a1[6];
  v13 = (float)((float)(a1[9] + (float)(*a1 * v8)) + (float)(v11 * v9)) + (float)(v12 * v10);
  v14 = (float)(fabsf(v5 * *a1) + fabsf(v6 * v11)) + fabsf(v7 * v12);
  if ((float)(v14 + v13) < *a3 || (float)(v13 - v14) > a3[2])
    return 0;
  v17 = a1[1];
  v18 = a1[4];
  v19 = a1[7];
  v20 = (float)((float)(a1[10] + (float)(v17 * v8)) + (float)(v18 * v9)) + (float)(v19 * v10);
  v21 = (float)(fabsf(v6 * v18) + fabsf(v5 * v17)) + fabsf(v7 * v19);
  return (float)(v21 + v20) >= a3[1] && (float)(v20 - v21) <= a3[3];
}

void md::MuninLabeler::~MuninLabeler(md::MuninLabeler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E428CF30;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E4291880;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E428CF30;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E4291880;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninLabeler::startFrameLayout(uint64_t this, const md::LayoutContext *a2, float a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  _BYTE *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  int v25;
  BOOL v26;
  unsigned __int16 *v27;
  int v28;
  uint64_t *v29;
  uint64_t *j;
  uint64_t v31;

  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v6 = v5[1];
  if ((v6 & (v6 - 1)) != 0)
  {
    v8 = 0xC83717EF586624DCLL;
    if (v6 <= 0xC83717EF586624DCLL)
      v8 = 0xC83717EF586624DCLL % v6;
    v7 = *(_QWORD **)(*v5 + 8 * v8);
    do
    {
      do
        v7 = (_QWORD *)*v7;
      while (v7[1] != 0xC83717EF586624DCLL);
    }
    while (v7[2] != 0xC83717EF586624DCLL);
  }
  else
  {
    v7 = *(_QWORD **)(*v5 + 8 * ((v6 - 1) & 0xC83717EF586624DCLL));
    do
    {
      do
        v7 = (_QWORD *)*v7;
      while (v7[1] != 0xC83717EF586624DCLL);
    }
    while (v7[2] != 0xC83717EF586624DCLL);
  }
  v9 = *(_QWORD **)(v7[5] + 32);
  v10 = (_BYTE *)v9[5];
  for (i = (_BYTE *)v9[6]; v10 != i; v10 += 272)
  {
    switch(*v10)
    {
      case 2:
        v12 = *(_QWORD *)(this + 48);
        v13 = *(_QWORD *)(this + 56);
        *(_BYTE *)(v12 + 3571) = 1;
        *(_BYTE *)(v12 + 462) = 0;
        *(_OWORD *)(v12 + 552) = *(_OWORD *)(v12 + 576);
        *(_QWORD *)(v12 + 568) = *(_QWORD *)(v12 + 592);
        *(_BYTE *)(v13 + 442) = 1;
        break;
      case 5:
        *(_BYTE *)(*(_QWORD *)(this + 48) + 3571) = 0;
        break;
      case 6:
        v15 = *(_QWORD *)(this + 48);
        v14 = *(_QWORD *)(this + 56);
        *(_BYTE *)(v14 + 440) = 1;
        *(_BYTE *)(v15 + 462) = 1;
        *(_OWORD *)(v15 + 552) = *(_OWORD *)(v15 + 576);
        *(_QWORD *)(v15 + 568) = *(_QWORD *)(v15 + 592);
        *(_BYTE *)(v14 + 442) = 1;
        break;
      case 7:
        *(_WORD *)(this + 74) = 257;
        break;
      case 8:
        *(_WORD *)(this + 74) = 1;
        break;
      default:
        continue;
    }
  }
  v16 = (_QWORD *)v9[1];
  v17 = (unsigned __int16 *)v16[23];
  v18 = (unsigned __int16 *)v16[24];
  if (v17 == v18)
  {
LABEL_29:
    v21 = (unsigned __int16 *)v16[26];
    v22 = (unsigned __int16 *)v16[27];
    if (v21 == v22)
    {
      if (*(_BYTE *)(this + 73) == 1)
        goto LABEL_48;
      *(_BYTE *)(this + 73) = 1;
      *(_BYTE *)(*(_QWORD *)(this + 48) + 3572) = 1;
    }
    else
    {
      v24 = (unsigned __int16 *)v16[14];
      v23 = (unsigned __int16 *)v16[15];
      do
      {
        v27 = v24;
        if (v24 != v23)
        {
          v27 = v24;
          while (*v27 != *v21)
          {
            v27 += 56;
            if (v27 == v23)
            {
              v27 = v23;
              break;
            }
          }
        }
        v25 = *((unsigned __int8 *)v27 + 9);
        ++v21;
        if (v25)
          v26 = v21 == v22;
        else
          v26 = 1;
      }
      while (!v26);
      v28 = v25 != 0;
      if (*(unsigned __int8 *)(this + 73) == v28)
        goto LABEL_48;
      *(_BYTE *)(this + 73) = v28;
      *(_BYTE *)(*(_QWORD *)(this + 48) + 3572) = v28;
      if (!v25)
        goto LABEL_48;
    }
    *(_BYTE *)(*(_QWORD *)(this + 56) + 440) = 1;
    goto LABEL_48;
  }
  v19 = (unsigned __int16 *)v16[15];
  while (1)
  {
    v20 = (unsigned __int16 *)v16[14];
    if (v20 != v19)
    {
      v20 = (unsigned __int16 *)v16[14];
      while (*v20 != *v17)
      {
        v20 += 56;
        if (v20 == v19)
        {
          v20 = (unsigned __int16 *)v16[15];
          break;
        }
      }
    }
    if (!*((_BYTE *)v20 + 9))
      break;
    if (++v17 == v18)
      goto LABEL_29;
  }
  if (*(_BYTE *)(this + 73))
  {
    *(_BYTE *)(this + 73) = 0;
    *(_BYTE *)(*(_QWORD *)(this + 48) + 3572) = 0;
  }
LABEL_48:
  v29 = *(uint64_t **)(this + 8);
  for (j = *(uint64_t **)(this + 16);
        v29 != j;
        this = (*(uint64_t (**)(uint64_t, const md::LayoutContext *, float))(*(_QWORD *)v31 + 24))(v31, a2, a3))
  {
    v31 = *v29++;
  }
  return this;
}

uint64_t md::MuninLabeler::synchronizedUpdate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v13;

  v7 = *(unsigned __int8 *)(result + 72);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(result + 48) + 3034) ^ 1;
  if (v7 != v8)
  {
    *(_BYTE *)(result + 72) = *(_BYTE *)(*(_QWORD *)(result + 48) + 3034) ^ 1;
    *(_BYTE *)(*(_QWORD *)(result + 64) + 78) = v8;
    v7 = v8;
  }
  if (*(_BYTE *)(result + 74))
  {
    *(_BYTE *)(result + 74) = 0;
    v9 = *(unsigned __int8 *)(result + 75);
    v10 = *(_QWORD *)(result + 64);
    *(_BYTE *)(*(_QWORD *)(result + 56) + 441) = v9;
    *(_BYTE *)(v10 + 78) = (v9 | v7) != 0;
  }
  v11 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v11 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, a3, a4))
  {
    v13 = *v11++;
  }
  return result;
}

uint64_t md::MuninLabeler::layoutForStaging(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), a2);
  v5 = *(_QWORD **)(a1 + 56);
  if (v5[52] != v5[53])
  {
    v6 = md::LabelSettingsStyleCache::muninPointStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(v5[3] + 336)
                                                                                      + 200));
    v7 = (uint64_t *)v5[52];
    v8 = (uint64_t *)v5[53];
    v9 = 126 - 2 * __clz(v8 - v7);
    if (v8 == v7)
      v10 = 0;
    else
      v10 = v9;
    std::__introsort<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **,false>(v7, v8, v10, 1);
    return md::MuninStandardLabeler::placeLabels((uint64_t)v5, v5 + 52, *(unsigned int *)(v6 + 24));
  }
  return result;
}

void altitude::DtmCacheNode::~DtmCacheNode(altitude::DtmCacheNode *this)
{
  altitude::GenericCacheNode<altitude::TileKey,karo::media::DigitalTerrainModel>::~GenericCacheNode(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *altitude::DtmCacheNode::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *result;
  void *v14;
  void *__p;
  char v16;
  uint64_t v17[2];
  char v18;
  __int128 v19;
  uint64_t v20;
  pthread_mutexattr_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 152);
  v18 = 15;
  strcpy((char *)v17, "/dtm/cache/job/");
  v16 = 0;
  LOBYTE(__p) = 0;
  altitude::Tile::createTileName(&v19, (unsigned int *)(a2 + 48), v17, (uint64_t *)&__p);
  karo::Job::Job(v6, v7);
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v6 = off_1E42C5768;
  *(_QWORD *)(v6 + 192) = 0;
  pthread_mutexattr_init(&v21);
  pthread_mutexattr_settype(&v21, 2);
  v9 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v9, &v21);
  pthread_mutexattr_destroy(&v21);
  *(_QWORD *)(v6 + 192) = v9;
  v10 = (std::string *)(v6 + 200);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v19;
    *(_QWORD *)(v6 + 216) = v20;
    *(_BYTE *)(v6 + 224) = 0;
    if ((v16 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v14 = (void *)v19;
  std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  *(_BYTE *)(v6 + 224) = 0;
  operator delete(v14);
  if (v16 < 0)
LABEL_3:
    operator delete(__p);
LABEL_4:
  if (v18 < 0)
    operator delete((void *)v17[0]);
  *(_QWORD *)v6 = off_1E42C44E8;
  *(_BYTE *)(v6 + 225) = 0;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 248) = *(_OWORD *)a2;
  *(_QWORD *)(v6 + 232) = v8;
  *(_QWORD *)(v6 + 240) = a1;
  v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 264) = v11;
  *(_OWORD *)(v6 + 280) = v12;
  *(_OWORD *)(v6 + 296) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_QWORD *)(v6 + 344) = 0;
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8750;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void altitude::GenericCacheNode<altitude::TileKey,karo::media::DigitalTerrainModel>::requestCached(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  __int128 v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  std::__shared_weak_count **v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t shared_owners;
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  int *i;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count_vtbl *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *j;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  void *v79;
  int *v80;
  uint64_t v81;
  void (**v82)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *__p[2];
  __int128 v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 144))(__p, a1, a2);
  v10 = a2[1];
  v87[0] = *a2;
  v87[1] = v10;
  v88 = *(_OWORD *)__p;
  v89 = v86;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v11 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v11)
    goto LABEL_45;
  v12 = ((unint64_t)v89 << 58) | ((unint64_t)(DWORD1(v89) & 0x1FFFFFFF) << 29) | DWORD2(v89) & 0x1FFFFFFF;
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = ((unint64_t)v89 << 58) | ((unint64_t)(DWORD1(v89) & 0x1FFFFFFF) << 29) | DWORD2(v89) & 0x1FFFFFFF;
    if (v12 >= *(_QWORD *)&v11)
      v14 = v12 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = v12 & (*(_QWORD *)&v11 - 1);
  }
  v15 = *(std::__shared_weak_count ***)(*(_QWORD *)(a1 + 96) + 8 * v14);
  if (!v15)
    goto LABEL_45;
  v16 = *v15;
  if (!*v15)
  {
LABEL_46:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    goto LABEL_47;
  }
  if (v13.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      shared_owners = v16->__shared_owners_;
      if (shared_owners == v12)
      {
        if (LODWORD(v16[1].__shared_owners_) == (_DWORD)v89
          && *(uint64_t *)((char *)&v16[1].__shared_owners_ + 4) == *(_QWORD *)((char *)&v89 + 4)
          && HIDWORD(v89) == HIDWORD(v16[1].__shared_weak_owners_)
          && LODWORD(v16->__shared_weak_owners_) == (_DWORD)v88
          && *(uint64_t *)((char *)&v16->__shared_weak_owners_ + 4) == *(_QWORD *)((char *)&v88 + 4))
        {
          goto LABEL_31;
        }
      }
      else if ((shared_owners & v17) != v14)
      {
        goto LABEL_45;
      }
      v16 = (std::__shared_weak_count *)v16->__vftable;
      if (!v16)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v18 = v16->__shared_owners_;
    if (v18 == v12)
      break;
    if (v18 >= *(_QWORD *)&v11)
      v18 %= *(_QWORD *)&v11;
    if (v18 != v14)
      goto LABEL_45;
LABEL_13:
    v16 = (std::__shared_weak_count *)v16->__vftable;
    if (!v16)
      goto LABEL_46;
  }
  if (LODWORD(v16[1].__shared_owners_) != (_DWORD)v89
    || *(uint64_t *)((char *)&v16[1].__shared_owners_ + 4) != *(_QWORD *)((char *)&v89 + 4)
    || HIDWORD(v89) != HIDWORD(v16[1].__shared_weak_owners_)
    || LODWORD(v16->__shared_weak_owners_) != (_DWORD)v88
    || *(uint64_t *)((char *)&v16->__shared_weak_owners_ + 4) != *(_QWORD *)((char *)&v88 + 4))
  {
    goto LABEL_13;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v88, &v16->__shared_weak_owners_) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), v16);
    v26 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v86)
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 7);
        if (v27)
          std::__shared_weak_count::__release_weak(v27);
      }
      operator delete(v26);
    }
    goto LABEL_45;
  }
  v20 = (std::__shared_weak_count *)v16[2].__shared_owners_;
  if (!v20)
  {
LABEL_45:
    v16 = 0;
    goto LABEL_46;
  }
  v21 = v16[2].__vftable;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v16 = std::__shared_weak_count::lock(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v16)
    goto LABEL_46;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  if (v21)
  {
    *a5 = v21;
    a5[1] = (std::__shared_weak_count_vtbl *)v16;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
    goto LABEL_95;
  }
LABEL_47:
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(&v82, a1, v87, a3, a4, 300, 1, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v82) != 4)
  {
    *a5 = 0;
    a5[1] = 0;
    v41 = v83;
    v42 = v84;
    a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
    a5[3] = (std::__shared_weak_count_vtbl *)v41;
    a5[4] = (std::__shared_weak_count_vtbl *)v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    if (v41)
    {
      v45 = (unsigned int *)(v41 + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
    goto LABEL_86;
  }
  v79 = 0;
  v80 = 0;
  v81 = 0;
  (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t, uint64_t *, _OWORD *, void **))(*(_QWORD *)a1 + 136))(&v77, a1, &v83, v87, &v79);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v28 = std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>((float *)(a1 + 96), (int *)&v88, &v88);
  v30 = v77;
  v29 = v78;
  if (v78)
  {
    v31 = (unint64_t *)&v78->__shared_weak_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (std::__shared_weak_count *)v28[7];
  v28[6] = v30;
  v28[7] = v29;
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  for (i = (int *)v79; i != v80; i += 8)
  {
    v35 = std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>((float *)(a1 + 96), i, i);
    v37 = v77;
    v36 = v78;
    if (v78)
    {
      v38 = (unint64_t *)&v78->__shared_weak_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = (std::__shared_weak_count *)v35[7];
    v35[6] = v37;
    v35[7] = v36;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  v47 = *(_DWORD *)(a1 + 144) + 1;
  *(_DWORD *)(a1 + 144) = v47;
  if (v47 > 0x14)
  {
    *(_DWORD *)(a1 + 144) = 0;
    for (j = *(_QWORD **)(a1 + 112); j; j = (_QWORD *)*j)
    {
      while (1)
      {
        v68 = (std::__shared_weak_count *)j[7];
        if (!v68)
          goto LABEL_111;
        v69 = std::__shared_weak_count::lock(v68);
        if (!v69)
          goto LABEL_111;
        v70 = v69;
        v71 = j[6];
        v72 = (unint64_t *)&v69->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (v73)
          break;
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v70);
        if (v71)
          goto LABEL_108;
LABEL_111:
        v74 = (_QWORD *)*j;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), j);
        v75 = __p[0];
        if (__p[0])
        {
          if ((_BYTE)v86)
          {
            v76 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 7);
            if (v76)
              std::__shared_weak_count::__release_weak(v76);
          }
          operator delete(v75);
        }
        j = v74;
        if (!v74)
          goto LABEL_70;
      }
      if (!v71)
        goto LABEL_111;
LABEL_108:
      ;
    }
  }
LABEL_70:
  v49 = v78;
  *a5 = v77;
  a5[1] = (std::__shared_weak_count_vtbl *)v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = v83;
  v53 = v84;
  a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
  a5[3] = (std::__shared_weak_count_vtbl *)v52;
  a5[4] = (std::__shared_weak_count_vtbl *)v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (v52)
  {
    v56 = (unsigned int *)(v52 + 128);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  v58 = v78;
  if (v78)
  {
    v59 = (unint64_t *)&v78->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v79)
  {
    v80 = (int *)v79;
    operator delete(v79);
  }
LABEL_86:
  v82 = &off_1E42C2D08;
  if (v83)
  {
    v61 = (unsigned int *)(v83 + 128);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
  }
  v63 = v84;
  if (v84)
  {
    v64 = (unint64_t *)&v84->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v16)
  {
LABEL_95:
    v66 = (unint64_t *)&v16->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

BOOL altitude::DtmCacheNode::hasDataAvailable(uint64_t a1)
{
  uint64_t v2;
  int v3;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v2);
  return v3 != 0;
}

uint64_t altitude::GenericCacheNode<altitude::TileKey,karo::media::DigitalTerrainModel>::clear(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v6;
  std::__shared_weak_count *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v2 = *(_QWORD **)(a1 + 112);
    if (v2)
    {
      do
      {
        v6 = (_QWORD *)*v2;
        v7 = (std::__shared_weak_count *)v2[7];
        if (v7)
          std::__shared_weak_count::__release_weak(v7);
        operator delete(v2);
        v2 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
}

uint64_t altitude::GenericCacheNode<altitude::TileKey,karo::media::DigitalTerrainModel>::hasValidKey()
{
  return 1;
}

void altitude::DtmCacheNode::fetchData(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X3>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v8 = *(_QWORD **)a1;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(_QWORD *))(*v8 + 40))(v8) & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_17;
  }
  v11 = v8[39];
  v12 = v8[40];
  *a4 = v11;
  a4[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (!v11
    || (v16 = *(_QWORD *)(v11 + 136), v15 = *(_QWORD *)(v11 + 144), *(_DWORD *)(a2 + 48) == (_DWORD)v16)
    && (*(_DWORD *)(a2 + 52) == HIDWORD(v16) ? (v17 = *(_DWORD *)(a2 + 56) == (_DWORD)v15) : (v17 = 0), v17))
  {
LABEL_17:
    if (!v7)
      return;
    goto LABEL_18;
  }
  v18 = *(_OWORD *)(a2 + 32);
  v20 = a3[1];
  v19 = (unint64_t)a3[2];
  if ((unint64_t)v20 >= v19)
  {
    v24 = *a3;
    v25 = (v20 - *a3) >> 5;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59)
      abort();
    v35 = v18;
    v27 = v19 - (_QWORD)v24;
    if (v27 >> 4 > v26)
      v26 = v27 >> 4;
    v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0;
    v29 = 0x7FFFFFFFFFFFFFFLL;
    if (!v28)
      v29 = v26;
    if (v29 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v30 = 32 * v29;
    v31 = (char *)operator new(32 * v29);
    v32 = &v31[32 * v25];
    *(_OWORD *)v32 = v35;
    v33 = &v31[v30];
    *((_QWORD *)v32 + 2) = v16;
    *((_QWORD *)v32 + 3) = v15;
    v21 = v32 + 32;
    if (v20 != v24)
    {
      do
      {
        v34 = *((_OWORD *)v20 - 2);
        v20 -= 32;
        *((_OWORD *)v32 - 2) = v34;
        v32 -= 32;
        *((_OWORD *)v32 + 1) = *((_OWORD *)v20 + 1);
      }
      while (v20 != v24);
      v20 = *a3;
    }
    *a3 = v32;
    a3[1] = v21;
    a3[2] = v33;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_OWORD *)v20 = v18;
    v21 = v20 + 32;
    *((_QWORD *)v20 + 2) = v16;
    *((_QWORD *)v20 + 3) = v15;
  }
  a3[1] = v21;
  if (v7)
  {
LABEL_18:
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t altitude::DtmCacheNode::getCacheKeyForKey@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  int v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v5;
  if ((_DWORD)v4 != 17 && *(_DWORD *)(a3 + 16) >= 0xEu)
  {
    *(_DWORD *)(a3 + 16) = 14;
    *(uint32x2_t *)(a3 + 20) = vshl_u32(*(uint32x2_t *)(a3 + 20), (uint32x2_t)vneg_s32(vdup_n_s32(*((_DWORD *)a2 + 4) - 14)));
    v7 = 16;
  }
  else
  {
    v7 = 17;
    result = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(result + 160) + 32), (__int128 *)(a3 + 16), 17);
    *(_QWORD *)(a3 + 16) = result;
    *(_QWORD *)(a3 + 24) = v8;
  }
  *(_DWORD *)a3 = v7;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>(float *a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v48;

  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  v9 = (v6 << 58) | ((unint64_t)(v7 & 0x1FFFFFFF) << 29) | v8 & 0x1FFFFFFF;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (v6 << 58) | ((unint64_t)(v7 & 0x1FFFFFFF) << 29) | v8 & 0x1FFFFFFF;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = a2[7];
        v15 = *a2;
        v16 = a2[1];
        v17 = a2[2];
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v13[1];
            if (v19 == v9)
            {
              if (v13[4] == __PAIR64__(v7, v6)
                && *((_DWORD *)v13 + 10) == v8
                && v14 == *((_DWORD *)v13 + 11)
                && *((_DWORD *)v13 + 4) == v15
                && *((_DWORD *)v13 + 5) == v16
                && *((_DWORD *)v13 + 6) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v18 = v13[1];
          if (v18 == v9)
          {
            if (v13[4] == __PAIR64__(v7, v6)
              && *((_DWORD *)v13 + 10) == v8
              && v14 == *((_DWORD *)v13 + 11)
              && *((_DWORD *)v13 + 4) == v15
              && *((_DWORD *)v13 + 5) == v16
              && *((_DWORD *)v13 + 6) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v10)
              v18 %= v10;
            if (v18 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v13 = operator new(0x40uLL);
  *v13 = 0;
  v13[1] = v9;
  v20 = a3[1];
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v20;
  v13[6] = 0;
  v13[7] = 0;
  v21 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v22 = a1[8];
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_70;
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_70:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v48 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v48)
          operator delete(v48);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
    while (prime != v29);
    v31 = (uint64_t *)(a1 + 4);
    v30 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v30)
    {
LABEL_69:
      v10 = prime;
      goto LABEL_70;
    }
    v32 = v30[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v31;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *v30 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v37);
          **(_QWORD **)(*(_QWORD *)a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v30;
          v30 = i;
          v34 = v36;
        }
      }
      goto LABEL_69;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v31;
    v41 = (_QWORD *)*v30;
    if (!*v30)
      goto LABEL_69;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v30;
          goto LABEL_74;
        }
        *v30 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*(_QWORD *)a1 + v42);
        **(_QWORD **)(*(_QWORD *)a1 + v42) = v41;
        v41 = v30;
      }
      v43 = v32;
LABEL_74:
      v30 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_69;
    }
  }
LABEL_83:
  v44 = *(_QWORD **)a1;
  v45 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v45)
  {
    *v13 = *v45;
LABEL_91:
    *v45 = v13;
    goto LABEL_92;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v44[v3] = a1 + 4;
  if (*v13)
  {
    v46 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v46 >= v10)
        v46 %= v10;
    }
    else
    {
      v46 &= v10 - 1;
    }
    v45 = (_QWORD *)(*(_QWORD *)a1 + 8 * v46);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void std::__shared_ptr_pointer<altitude::DtmCacheNodeJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::DtmCacheNodeJob>,std::allocator<altitude::DtmCacheNodeJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::DtmCacheNodeJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::DtmCacheNodeJob>,std::allocator<altitude::DtmCacheNodeJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::DtmCacheNodeJob::~DtmCacheNodeJob(altitude::DtmCacheNodeJob *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42C44E8;
  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {
    *((_QWORD *)this + 42) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v6 = *((_QWORD *)this + 24);
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42C44E8;
  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {
    *((_QWORD *)this + 42) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v6 = *((_QWORD *)this + 24);
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::DtmCacheNodeJob::jobStep(altitude::DtmCacheNodeJob *this)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  void (**v34)(karo::AsyncRequestManager::RequestHandle *__hidden);
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  pthread_mutex_t **v47;
  std::__shared_weak_count *v48;
  void (**v49)(karo::AsyncRequestManager::RequestHandle *__hidden);
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (**v73)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  NSObject *v87;
  NSObject *v88;
  unsigned int *v89;
  unsigned int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  BOOL v97;
  unsigned int *v98;
  unsigned int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD v116[2];
  _QWORD v117[2];
  _QWORD v118[2];
  void (**v119)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v120;
  void (**v121)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  __int128 v125;
  uint8_t v126[4];
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  uint8_t buf[8];
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 284;
  v3 = *((_QWORD *)this + 39);
  if (v3)
    goto LABEL_2;
  v133 = 0;
  v134 = 0;
  *(_QWORD *)buf = &off_1E42C2D08;
  v28 = *((_QWORD *)this + 29);
  v29 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v30 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, char *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v28 + 104))(&v119, v28, (char *)this + 280, v29, v30, 300, 0);
  if (v133)
  {
    v31 = (unsigned int *)(v133 + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
  }
  v33 = v120;
  v34 = v121;
  if (v121)
  {
    v35 = (unint64_t *)(v121 + 1);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = v134;
  v133 = v33;
  v134 = (std::__shared_weak_count *)v34;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    v33 = v133;
  }
  if (v33)
  {
    v40 = (unsigned int *)(v33 + 128);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
  v119 = &off_1E42C2D08;
  if (v120)
  {
    v42 = (unsigned int *)(v120 + 128);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
  }
  v44 = (std::__shared_weak_count *)v121;
  if (v121)
  {
    v45 = (unint64_t *)(v121 + 1);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)buf) == 4)
  {
    v47 = (pthread_mutex_t **)*((_QWORD *)this + 29);
    pthread_mutex_lock(v47[5]);
    (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), pthread_mutex_t **, char *, _QWORD))&(*v47)[1].__opaque[24])(&v119, v47, (char *)this + 280, 0);
    v49 = v119;
    v48 = (std::__shared_weak_count *)v120;
    if (v120)
    {
      v50 = (unint64_t *)(v120 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if (((*((uint64_t (**)(_QWORD))*v49 + 5))(v49) & 1) != 0)
    {
      (*((void (**)(__int128 *__return_ptr, void (**)(karo::AsyncRequestManager::RequestHandle *__hidden)))*v49
       + 6))(&v124, v49);
      if (!v48)
      {
LABEL_68:
        v58 = (std::__shared_weak_count *)v120;
        if (v120)
        {
          v59 = (unint64_t *)(v120 + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        pthread_mutex_unlock(v47[5]);
        v61 = v124;
        v124 = 0uLL;
        v62 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
        *(_OWORD *)(v2 + 28) = v61;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
        if (*((_QWORD *)&v124 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        goto LABEL_157;
      }
    }
    else
    {
      v124 = 0uLL;
      if (!v48)
        goto LABEL_68;
    }
    v56 = (unint64_t *)&v48->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    goto LABEL_68;
  }
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)buf))
  {
    v52 = v134;
    v117[0] = v133;
    v117[1] = v134;
    if (v134)
    {
      v53 = (unint64_t *)&v134->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      karo::Job::addBlockingSubJob((uint64_t *)this, v117, -1, 0);
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v117, -1, 0);
    }
LABEL_166:
    *(_QWORD *)buf = &off_1E42C2D08;
    if (v133)
    {
      v111 = (unsigned int *)(v133 + 128);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
    }
    v113 = v134;
    if (v134)
    {
      v114 = (unint64_t *)&v134->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    return;
  }
  v68 = (char *)this + 248;
  if (*((_DWORD *)this + 70) != 16)
    v68 = (char *)this + 280;
  v69 = *((_OWORD *)v68 + 1);
  v124 = *(_OWORD *)v68;
  v125 = v69;
  LODWORD(v124) = 17;
  v70 = *((_QWORD *)this + 30);
  v71 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v72 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v70 + 104))(&v119, v70, &v124, v71, v72);
  v73 = v119;
  if (v119)
  {
    v74 = v120;
    if (v120)
    {
      v75 = (unint64_t *)(v120 + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    v77 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 39) = v73;
    *((_QWORD *)this + 40) = v74;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
        goto LABEL_112;
    }
  }
  else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v121))
  {
    v77 = v123;
    v118[0] = v122;
    v118[1] = v123;
    if (v123)
    {
      v84 = (unint64_t *)&v123->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
      karo::Job::addBlockingSubJob((uint64_t *)this, v118, -1, 0);
      do
        v86 = __ldaxr(v84);
      while (__stlxr(v86 - 1, v84));
      if (!v86)
      {
LABEL_112:
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v118, -1, 0);
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v88 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v126 = 67109632;
      v127 = DWORD1(v125);
      v128 = 1024;
      v129 = DWORD2(v125);
      v130 = 1024;
      v131 = v125;
      _os_log_impl(&dword_19F029000, v88, OS_LOG_TYPE_ERROR, "Failed to get fallback dtm with key %u %u %u", v126, 0x14u);
    }
    (*(void (**)(altitude::DtmCacheNodeJob *))(*(_QWORD *)this + 16))(this);
  }
  v121 = &off_1E42C2D08;
  if (v122)
  {
    v98 = (unsigned int *)(v122 + 128);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
  }
  v100 = v123;
  if (v123)
  {
    v101 = (unint64_t *)&v123->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = (std::__shared_weak_count *)v120;
  if (v120)
  {
    v104 = (unint64_t *)(v120 + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (!v73)
    goto LABEL_166;
LABEL_157:
  *(_QWORD *)buf = &off_1E42C2D08;
  if (v133)
  {
    v106 = (unsigned int *)(v133 + 128);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
  }
  v108 = v134;
  if (!v134)
    goto LABEL_164;
  v109 = (unint64_t *)&v134->__shared_owners_;
  do
    v110 = __ldaxr(v109);
  while (__stlxr(v110 - 1, v109));
  if (!v110)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
    v3 = *(_QWORD *)(v2 + 28);
    if (!v3)
      return;
  }
  else
  {
LABEL_164:
    v3 = *(_QWORD *)(v2 + 28);
    if (!v3)
      return;
  }
LABEL_2:
  if (*((_DWORD *)this + 70) == 17 || !*(_BYTE *)(v3 + 156))
    goto LABEL_140;
  v5 = *(_QWORD *)(v3 + 160);
  v4 = *(std::__shared_weak_count **)(v3 + 168);
  if (!v4)
    goto LABEL_9;
  v6 = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (v8)
  {
LABEL_9:
    if (!v5)
      goto LABEL_10;
LABEL_140:
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v97 = (*((_DWORD *)this + 40) & 2) == 0;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    *((_BYTE *)this + 225) = v97;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v5)
    goto LABEL_140;
LABEL_10:
  v9 = *((_DWORD *)v2 + 2);
  *(_QWORD *)((char *)&v124 + 4) = *(_QWORD *)v2;
  v125 = *(_OWORD *)((char *)this + 296);
  v10 = *((_QWORD *)this + 39);
  v12 = *(_QWORD *)(v10 + 136);
  v11 = *(_QWORD *)(v10 + 144);
  HIDWORD(v124) = v9;
  *(_QWORD *)&v125 = v12;
  DWORD2(v125) = v11;
  LODWORD(v124) = 17;
  v13 = *((_QWORD *)this + 30);
  v14 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v15 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(&v119, v13, &v124, v14, v15);
  v16 = v119;
  if (v119)
  {
    v17 = *(_QWORD *)(v2 + 28);
    v18 = (std::__shared_weak_count *)v120;
    if (v120)
    {
      v19 = (unint64_t *)(v120 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldxr(v19);
      while (__stxr(v21 + 1, v19));
    }
    v22 = *(std::__shared_weak_count **)(v17 + 168);
    *(_QWORD *)(v17 + 160) = v16;
    *(_QWORD *)(v17 + 168) = v18;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (!v18)
      goto LABEL_24;
    v25 = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v27 = 1;
    }
    else
    {
LABEL_24:
      v27 = 1;
    }
  }
  else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v121))
  {
    v80 = v123;
    v116[0] = v122;
    v116[1] = v123;
    if (v123)
    {
      v81 = (unint64_t *)&v123->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
      karo::Job::addBlockingSubJob((uint64_t *)this, v116, -1, 0);
      do
        v83 = __ldaxr(v81);
      while (__stlxr(v83 - 1, v81));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v116, -1, 0);
    }
    v27 = 0;
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v87 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = DWORD1(v125);
      LOWORD(v133) = 1024;
      *(_DWORD *)((char *)&v133 + 2) = DWORD2(v125);
      HIWORD(v133) = 1024;
      LODWORD(v134) = v125;
      _os_log_impl(&dword_19F029000, v87, OS_LOG_TYPE_ERROR, "Failed to get invalide value fallback dtm with key %u %u %u", buf, 0x14u);
    }
    (*(void (**)(altitude::DtmCacheNodeJob *))(*(_QWORD *)this + 16))(this);
    v27 = 1;
  }
  v121 = &off_1E42C2D08;
  if (v122)
  {
    v89 = (unsigned int *)(v122 + 128);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
  }
  v91 = v123;
  if (v123)
  {
    v92 = (unint64_t *)&v123->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)v120;
  if (v120)
  {
    v95 = (unint64_t *)(v120 + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v27)
    goto LABEL_140;
}

uint64_t altitude::DtmCacheNodeJob::succeeded(altitude::DtmCacheNodeJob *this)
{
  return *((unsigned __int8 *)this + 225);
}

void altitude::GenericCacheNode<altitude::TileKey,karo::media::DigitalTerrainModel>::~GenericCacheNode(karo::AsyncRequestManager *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = off_1E42C4818;
  pthread_mutex_destroy(*((pthread_mutex_t **)a1 + 17));
  v2 = *((_QWORD *)a1 + 17);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)a1 + 17) = 0;
  v3 = (_QWORD *)*((_QWORD *)a1 + 14);
  if (v3)
  {
    do
    {
      v5 = (_QWORD *)*v3;
      v6 = (std::__shared_weak_count *)v3[7];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)*((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E42C30D8;
  while (*((_QWORD *)a1 + 10))
    (*(void (**)(karo::AsyncRequestManager *, uint64_t))(*(_QWORD *)a1 + 48))(a1, *((_QWORD *)a1 + 8) + 32);
  std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)a1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(a1);
}

__n128 altitude::GenericCacheNode<altitude::TileKey,karo::media::DigitalTerrainModel>::getCacheKeyForKey@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void md::BuildingTileDataRenderable::~BuildingTileDataRenderable(id *this)
{
  md::BuildingTileDataRenderable::~BuildingTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *this = &off_1E426F898;
  objc_msgSend(this[53], "stop");
  objc_msgSend(this[56], "stop");
  v2 = (std::__shared_weak_count *)this[63];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)this[61];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)this[59];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  this[55] = &off_1E42B49F0;

  this[52] = &off_1E42B49F0;
  *this = &off_1E426F380;
  v11 = (std::__shared_weak_count *)this[49];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable((md::BaseMapTileDataRenderable *)this);
}

void sub_19F7D7404(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 496);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 480);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 464);
  *(_QWORD *)(v1 + 440) = &off_1E42B49F0;

  *(_QWORD *)(v1 + 416) = &off_1E42B49F0;
  md::MapTileDataRenderable<md::BuildingTileData>::~MapTileDataRenderable((md::BaseMapTileDataRenderable *)v1);
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::BuildingTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F380;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F380;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F380;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

md::LabelTransitRoute *md::LabelTransitRoute::LabelTransitRoute(md::LabelTransitRoute *this, GEOComposedRoute *a2, int a3)
{
  GEOComposedRoute *v5;
  GEOComposedRoute *v6;
  _DWORD *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  id v14;
  double v15;
  double v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  long double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t i;
  void *v58;
  char *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  md::LabelTransitRoute *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  void *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t k;
  void *v110;
  id v111;
  _BOOL4 v112;
  uint64_t v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t j;
  void *v119;
  _BOOL4 v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v139;
  int v140;
  unsigned __int8 v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v194;
  id v195;
  double v196;
  double v197;
  double v198;
  long double v199;
  long double v200;
  uint64_t v201;
  float64x2_t v202;
  uint64_t v203;
  uint64_t v204;
  int64x2_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t *v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  unint64_t v222;
  _DWORD *v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _DWORD *v233;
  uint64_t v234;
  _DWORD *v235;
  _DWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _OWORD *v243;
  __int128 *v244;
  uint64_t v245;
  __int128 v246;
  int v247;
  uint64_t v248;
  unsigned __int8 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t *v254;
  uint64_t *v255;
  uint64_t *v256;
  void **v257;
  void **v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  char *v263;
  void **v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  BOOL v268;
  uint64_t v269;
  uint64_t v270;
  _OWORD *v271;
  void **v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  void **v276;
  unsigned __int8 v277;
  id v278;
  void *v279;
  id v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t m;
  void *v289;
  void *v290;
  BOOL v291;
  char v292;
  void *v293;
  void *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t **v298;
  uint64_t **v299;
  unint64_t v300;
  uint64_t *v301;
  id v302;
  id v303;
  md::LabelTransitRoute *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  void *v317;
  void *v318;
  uint64_t v319;
  void *v320;
  void *v321;
  id v322;
  double v323;
  double v324;
  double v325;
  double v326;
  long double v327;
  double v328;
  double v329;
  double v330;
  id *v331;
  int v332;
  char *v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  double *v341;
  uint64_t v342;
  int v343;
  double v344;
  double v345;
  uint64_t v346;
  void **v347;
  _QWORD *v348;
  _QWORD *v349;
  md::LabelTransitRoute *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  void *v355;
  unint64_t v356;
  _QWORD *v357;
  id v358;
  double v359;
  double v360;
  double v361;
  double v362;
  long double v363;
  double v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t *v367;
  uint64_t **v368;
  unint64_t v369;
  uint64_t **v370;
  unint64_t v371;
  uint64_t *v372;
  id *v373;
  int v374;
  char *v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void **v381;
  _QWORD *v382;
  _QWORD *v383;
  char *v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  double *v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  double v403;
  unint64_t v404;
  uint64_t v405;
  double *v406;
  double v407;
  char v408;
  uint64_t v409;
  void *v410;
  int v411;
  int16x8_t v412;
  uint64_t v413;
  void *v414;
  float v415;
  unsigned int v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float32x4_t v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  void *v432;
  BOOL v433;
  char v434;
  void *v435;
  char *v436;
  std::__shared_weak_count *v437;
  unint64_t *p_shared_owners;
  unint64_t v439;
  int v440;
  char *v441;
  uint64_t v442;
  char *v443;
  void *v444;
  char *v445;
  char v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  char *v453;
  uint64_t v454;
  _QWORD *v455;
  char v456;
  void **v457;
  unint64_t v458;
  _QWORD *v459;
  _QWORD *v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void **v466;
  uint64_t v467;
  _QWORD *v468;
  _QWORD *v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  _QWORD *v473;
  void *v474;
  void **v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  char *v482;
  void *v483;
  id v484;
  id v485;
  int v486;
  _BOOL4 v487;
  char v488;
  char *v489;
  unint64_t v490;
  uint64_t v491;
  void **v492;
  _OWORD *v493;
  uint64_t v494;
  __int128 v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  double v502;
  _QWORD *v503;
  _QWORD *v504;
  double v505;
  _QWORD *v506;
  _QWORD *v507;
  _QWORD *v508;
  char *v509;
  int v510;
  char *v511;
  uint64_t v512;
  void **v513;
  _QWORD *v514;
  _QWORD *v515;
  char *v516;
  int v517;
  int v518;
  uint64_t v519;
  int v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  char v530;
  unint64_t v531;
  void **v532;
  _QWORD *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  unint64_t v538;
  unint64_t v539;
  _QWORD *v540;
  BOOL v541;
  uint64_t v542;
  _OWORD *v543;
  void **v544;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  void **v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  GEOComposedRoute *v572;
  uint64_t **v573;
  char *v574;
  float32x4_t v575;
  void *v576;
  _QWORD *v577;
  uint64_t *v578;
  id v579;
  id v580;
  void *v581;
  uint64_t v582;
  _QWORD *v583;
  void *v584;
  void ***v585;
  uint64_t v586;
  _QWORD *v587;
  float v588;
  void *v589;
  float64x2_t v590;
  id v591;
  float v592;
  uint64_t v593;
  void *obj;
  void *obja;
  _QWORD *objb;
  uint64_t v597;
  float64_t v598;
  void *v599;
  void *v600;
  unsigned int v601;
  void *v602;
  md::LabelTransitRoute *v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  char *v616;
  void *__p;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  _QWORD v626[18];

  v626[16] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *(_QWORD *)this = &off_1E42B4B90;
  *((_QWORD *)this + 1) = 0;
  v6 = v5;
  *(_QWORD *)((char *)this + 52) = 0;
  v7 = (_DWORD *)((char *)this + 52);
  *((_QWORD *)this + 3) = &off_1E42B4C30;
  v572 = v6;
  *((_QWORD *)this + 4) = v6;
  *((_DWORD *)this + 12) = a3;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *((_DWORD *)this + 19) = 0;
  {
    v563 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v563, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v9 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = v9;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v585 = (void ***)((char *)this + 88);
  {
    v564 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v564, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v10 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 32) = -1;
  *((_QWORD *)this + 14) = v10;
  *((_QWORD *)this + 15) = -1;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = -1;
  {
    v565 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v565, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v11 = mdm::Allocator::instance(void)::alloc;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 21) = v11;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *(_OWORD *)((char *)this + 184) = xmmword_19FFB33A0;
  *((_QWORD *)this + 25) = 0x3EB0C6F7A0B5ED8DLL;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  v578 = (uint64_t *)((char *)this + 240);
  *((_QWORD *)this + 32) = 0;
  {
    v566 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v566, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 33) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  {
    v567 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v567, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 37) = mdm::Allocator::instance(void)::alloc;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  {
    v568 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v568, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v573 = (uint64_t **)((char *)this + 304);
  v574 = (char *)this + 272;
  *((_QWORD *)this + 42) = mdm::Allocator::instance(void)::alloc;
  v14 = *((id *)this + 4);
  *v7 = objc_msgSend(v14, "pointCount");

  if (*v7)
  {
    objc_msgSend(*((id *)this + 4), "pointAt:", 0);
    v16 = v15;
    v17 = cos(v15 * 0.034906585) * -559.82 + 111132.92;
    v18 = v17 + cos(v16 * 0.0698131701) * 1.175;
    v19 = v18 + cos(v16 * 0.104719755) * -0.0023;
    v20 = v16 * 0.00872664626;
    v21 = tan(v16 * 0.00872664626 + 0.78103484);
    v22 = log(v21);
    v23 = tan(v20 + 0.789761487);
    v24 = fabs((log(v23) - v22) * 0.159154943) / v19;
    v25 = vmulq_n_f64((float64x2_t)xmmword_19FFB4980, v24);
    *(float64x2_t *)((char *)this + 184) = vmulq_f64(v25, v25);
    v26 = vmulq_n_f64((float64x2_t)xmmword_19FFB4990, v24);
    *((float64x2_t *)this + 14) = vmulq_f64(v26, v26);
    v27 = vmulq_n_f64((float64x2_t)xmmword_19FFB49A0, v24);
    *((_QWORD *)this + 27) = *(_OWORD *)&vmulq_f64(v27, v27);
    *(float64x2_t *)((char *)this + 200) = v27;
  }
  v28 = *((id *)this + 4);
  v603 = this;
  objc_msgSend(v28, "segments", (char *)this + 160);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "count");
  v31 = v30;
  v32 = *((_QWORD *)this + 7);
  if (v30 <= (*((_QWORD *)this + 9) - v32) >> 3)
    goto LABEL_30;
  if (v30 >> 61)
    abort();
  v33 = *((_QWORD *)this + 8);
  v34 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), 8 * v30, 8);
  v35 = v33 - v32;
  v36 = v34 + ((v33 - v32) & 0xFFFFFFFFFFFFFFF8);
  v37 = v34 + 8 * v31;
  v38 = (char *)*((_QWORD *)this + 7);
  v39 = (char *)*((_QWORD *)this + 8);
  if (v39 != v38)
  {
    v40 = v39 - v38 - 8;
    if (v40 > 0x67)
    {
      if ((v35 & 0xFFFFFFFFFFFFFFF8) - (v40 & 0xFFFFFFFFFFFFFFF8) + v34 - 8 >= (unint64_t)v39
        || (v41 = (_QWORD *)v36, (unint64_t)&v39[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] >= v36))
      {
        v43 = v35 >> 3;
        v44 = (v40 >> 3) + 1;
        v45 = (_OWORD *)(v34 + 8 * v43 - 32);
        v46 = v39 - 32;
        v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *v45 = 0uLL;
          v45[1] = 0uLL;
          v48 = *((_OWORD *)v46 + 1);
          *v45 = *(_OWORD *)v46;
          v45[1] = v48;
          v45 -= 2;
          *(_OWORD *)v46 = 0uLL;
          *((_OWORD *)v46 + 1) = 0uLL;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        v41 = (_QWORD *)(v36 - 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL));
        v39 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_21:
          v39 = (char *)*((_QWORD *)this + 7);
          v50 = (char *)*((_QWORD *)this + 8);
          *((_QWORD *)this + 7) = v41;
          *((_QWORD *)this + 8) = v36;
          v42 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v37;
          if (v50 != v39)
          {
            v51 = v50;
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              v52 = v53;
              if (v53)
              {
                _ZF = (*(_QWORD *)v52)-- == 1;
                if (_ZF)
                {
                  *(_QWORD *)(v52 + 8) = &off_1E42B4FF0;

                  operator delete(*((void **)v50 - 1));
                  *((_QWORD *)v50 - 1) = 0;
                }
              }
              v50 = v51;
            }
            while (v51 != v39);
          }
          goto LABEL_28;
        }
      }
    }
    else
    {
      v41 = (_QWORD *)v36;
    }
    do
    {
      *--v41 = 0;
      v49 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *v41 = v49;
      *(_QWORD *)v39 = 0;
    }
    while (v39 != v38);
    goto LABEL_21;
  }
  *((_QWORD *)this + 7) = v36;
  *((_QWORD *)this + 8) = v36;
  v42 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v37;
LABEL_28:
  if (v39)
    (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v39, v42 - (_QWORD)v39);
LABEL_30:

  v614 = 0u;
  v615 = 0u;
  v612 = 0u;
  v613 = 0u;
  objc_msgSend(*((id *)this + 4), "segments");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v612, v626, 16);
  if (!v55)
    goto LABEL_80;
  v56 = 0;
  v597 = *(_QWORD *)v613;
  obj = v54;
  do
  {
    for (i = 0; i != v55; ++i)
    {
      if (*(_QWORD *)v613 != v597)
        objc_enumerationMutation(obj);
      v58 = *(void **)(*((_QWORD *)&v612 + 1) + 8 * i);
      v59 = (char *)operator new(0x50uLL);
      *(_OWORD *)(v59 + 40) = 0u;
      *(_OWORD *)(v59 + 56) = 0u;
      *(_OWORD *)(v59 + 24) = 0u;
      *((_QWORD *)v59 + 9) = 0;
      *(_QWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = &off_1E42B4FF0;
      *((_QWORD *)v59 + 2) = 0;
      *(_QWORD *)(v59 + 44) = 0;
      *(_QWORD *)(v59 + 52) = 0;
      *(_QWORD *)(v59 + 60) = 0;
      *(_QWORD *)&v622 = v59;
      v60 = v58;
      v61 = v60;
      if (v60)
        v62 = v60;
      v63 = (void *)*((_QWORD *)v59 + 2);
      *((_QWORD *)v59 + 2) = v61;

      *((_DWORD *)v59 + 8) = v56;
      v64 = (_QWORD *)*((_QWORD *)v603 + 8);
      v65 = *((_QWORD *)v603 + 9);
      if ((unint64_t)v64 < v65)
      {
        if (v64)
        {
          *v64 = v59;
          ++*(_QWORD *)v59;
        }
        v66 = v64 + 1;
        goto LABEL_68;
      }
      v67 = *((_QWORD *)v603 + 7);
      v68 = ((uint64_t)v64 - v67) >> 3;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 61)
        abort();
      v70 = v65 - v67;
      if (v70 >> 2 > v69)
        v69 = v70 >> 2;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
        v71 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71)
      {
        v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v603 + 10) + 16))(*((_QWORD *)v603 + 10), 8 * v71, 8);
        v73 = (_QWORD *)(v72 + 8 * v68);
        v74 = v72 + 8 * v71;
        if (v72)
        {
          *v73 = v59;
          ++*(_QWORD *)v59;
        }
      }
      else
      {
        v74 = 0;
        v73 = (_QWORD *)(8 * v68);
      }
      v66 = v73 + 1;
      v75 = (char *)*((_QWORD *)v603 + 7);
      v76 = (char *)*((_QWORD *)v603 + 8);
      if (v76 != v75)
      {
        v77 = v76 - v75 - 8;
        if (v77 <= 0x47
          || (v78 = (v75 - v76 + 7) & 0xFFFFFFFFFFFFFFF8, (char *)v73 + v78 < v76) && &v76[v78] < (char *)v73)
        {
          v79 = (char *)*((_QWORD *)v603 + 8);
          v80 = v603;
          goto LABEL_57;
        }
        v91 = (v77 >> 3) + 1;
        v79 = &v76[-8 * (v91 & 0x3FFFFFFFFFFFFFFCLL)];
        v92 = v73 - 4;
        v93 = v76 - 32;
        v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *v92 = 0uLL;
          v92[1] = 0uLL;
          v95 = *((_OWORD *)v93 + 1);
          *v92 = *(_OWORD *)v93;
          v92[1] = v95;
          v92 -= 2;
          *(_OWORD *)v93 = 0uLL;
          *((_OWORD *)v93 + 1) = 0uLL;
          v93 -= 32;
          v94 -= 4;
        }
        while (v94);
        v73 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
        v80 = v603;
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_57:
            *--v73 = 0;
            v81 = *((_QWORD *)v79 - 1);
            v79 -= 8;
            *v73 = v81;
            *(_QWORD *)v79 = 0;
          }
          while (v79 != v75);
        }
        v76 = (char *)*((_QWORD *)v80 + 7);
        v82 = (char *)*((_QWORD *)v80 + 8);
        *((_QWORD *)v80 + 7) = v73;
        *((_QWORD *)v80 + 8) = v66;
        v83 = *((_QWORD *)v80 + 9);
        *((_QWORD *)v80 + 9) = v74;
        if (v82 != v76)
        {
          v84 = v82;
          do
          {
            v86 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            v85 = v86;
            if (v86)
            {
              _ZF = (*(_QWORD *)v85)-- == 1;
              if (_ZF)
              {
                *(_QWORD *)(v85 + 8) = &off_1E42B4FF0;

                operator delete(*((void **)v82 - 1));
                *((_QWORD *)v82 - 1) = 0;
              }
            }
            v82 = v84;
          }
          while (v84 != v76);
        }
        goto LABEL_66;
      }
      *((_QWORD *)v603 + 7) = v73;
      *((_QWORD *)v603 + 8) = v66;
      v83 = *((_QWORD *)v603 + 9);
      *((_QWORD *)v603 + 9) = v74;
LABEL_66:
      if (v76)
        (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)v603 + 10) + 40))(*((_QWORD *)v603 + 10), v76, v83 - (_QWORD)v76);
LABEL_68:
      *((_QWORD *)v603 + 8) = v66;
      v87 = objc_msgSend(v61, "pointRange");
      v88 = (void *)v622;
      if ((_QWORD)v622)
        v89 = v622 + 8;
      else
        v89 = 0;
      *(_DWORD *)(v89 + 44) = v87;
      objc_msgSend(v61, "pointRange");
      *(_DWORD *)(v89 + 48) = v90;
      if (v88)
      {
        _ZF = (*(_QWORD *)v88)-- == 1;
        if (_ZF)
        {
          *((_QWORD *)v88 + 1) = &off_1E42B4FF0;

          operator delete(v88);
        }
      }
      ++v56;
    }
    v54 = obj;
    v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v612, v626, 16);
  }
  while (v55);
LABEL_80:

  v96 = (uint64_t *)*((_QWORD *)v603 + 7);
  v97 = (uint64_t *)*((_QWORD *)v603 + 8);
  while (v96 != v97)
  {
    if (*v96)
      v99 = *v96 + 8;
    else
      v99 = 0;
    v100 = *(id *)(v99 + 8);
    v101 = objc_msgSend(v100, "type") == 5;

    v102 = *v96;
    v103 = *v96 + 8;
    if (!*v96)
      v103 = 0;
    if (!v101)
    {
      v111 = *(id *)(v103 + 8);
      v112 = objc_msgSend(v111, "type") == 6;

      if (v112)
      {
        v606 = 0u;
        v607 = 0u;
        v604 = 0u;
        v605 = 0u;
        if (*v96)
          v113 = *v96 + 8;
        else
          v113 = 0;
        v114 = *(id *)(v113 + 8);
        objc_msgSend(v114, "steps");
        v115 = (void *)objc_claimAutoreleasedReturnValue();

        v116 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v604, &v618, 16);
        if (v116)
        {
          v117 = *(_QWORD *)v605;
          while (2)
          {
            for (j = 0; j != v116; ++j)
            {
              if (*(_QWORD *)v605 != v117)
                objc_enumerationMutation(v115);
              objc_msgSend(*(id *)(*((_QWORD *)&v604 + 1) + 8 * j), "transitStep");
              v119 = (void *)objc_claimAutoreleasedReturnValue();
              v120 = objc_msgSend(v119, "maneuverType") == 3;

              if (v120)
              {
                if (*v96)
                  v98 = *v96 + 8;
                else
                  v98 = 0;
                *(_BYTE *)(v98 + 70) = 1;

                goto LABEL_86;
              }
            }
            v116 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v604, &v618, 16);
            if (v116)
              continue;
            break;
          }
        }

      }
      goto LABEL_86;
    }
    if (*(int *)(v103 + 48) >= 2)
    {
      v610 = 0u;
      v611 = 0u;
      v608 = 0u;
      v609 = 0u;
      if (*v96)
        v104 = *v96 + 8;
      else
        v104 = 0;
      v105 = *(id *)(v104 + 8);
      objc_msgSend(v105, "steps");
      v106 = (void *)objc_claimAutoreleasedReturnValue();

      v107 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v608, &v622, 16);
      if (v107)
      {
        v108 = *(_QWORD *)v609;
        while (2)
        {
          for (k = 0; k != v107; ++k)
          {
            if (*(_QWORD *)v609 != v108)
              objc_enumerationMutation(v106);
            objc_msgSend(*(id *)(*((_QWORD *)&v608 + 1) + 8 * k), "transitStep");
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v110, "maneuverType") == 7)
            {
              if (*v96)
                v121 = *v96 + 8;
              else
                v121 = 0;
              *(_BYTE *)(v121 + 69) = 1;

              goto LABEL_123;
            }

          }
          v107 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v608, &v622, 16);
          if (v107)
            continue;
          break;
        }
      }
LABEL_123:

      v102 = *v96;
    }
    if (v102)
      v122 = v102 + 8;
    else
      v122 = 0;
    if (*(_BYTE *)(v122 + 69))
    {
      v123 = *(_DWORD *)(v122 + 48);
      _CF = v123 != 0;
      v124 = v123 - 1;
      if (!_CF)
        v124 = 0;
      v125 = *(_DWORD *)(v122 + 44) + v124;
      v126 = *(_DWORD *)(v122 + 24);
    }
    else
    {
      v126 = *(_DWORD *)(v122 + 24);
      if (v126)
      {
        v127 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * (v126 - 1));
        if (v127)
          v128 = v127 + 8;
        else
          v128 = 0;
        v131 = v128 + 44;
        v129 = *(_DWORD *)(v128 + 44);
        v130 = *(_DWORD *)(v131 + 4);
        _CF = v130 != 0;
        v132 = v130 - 1;
        if (!_CF)
          v132 = 0;
        v125 = v129 + v132;
      }
      else
      {
        v125 = -1;
      }
      v133 = v122;
      if (*(int *)(v122 + 48) >= 2)
        goto LABEL_143;
    }
    v134 = v126 + 1;
    v135 = *((_QWORD *)v603 + 7);
    if (v134 < (*((_QWORD *)v603 + 8) - v135) >> 3)
    {
      v136 = *(_QWORD *)(v135 + 8 * v134);
      v133 = v136 + 8;
      if (!v136)
        v133 = 0;
LABEL_143:
      v137 = *(_DWORD *)(v133 + 44);
      goto LABEL_145;
    }
    v137 = -1;
LABEL_145:
    _ZF = v125 == -1 && v137 == -1;
    if (!_ZF)
    {
      if (v125 == v137)
        v139 = 2;
      else
        v139 = 1;
      *(_DWORD *)(v122 + 56) = v139;
      if (v125 == -1)
      {
        *(_DWORD *)(v122 + 52) = v137;
        v140 = v137 - v139;
      }
      else
      {
        *(_DWORD *)(v122 + 52) = v125;
        v140 = v125 - v139 + 1;
      }
      *(_DWORD *)(v122 + 64) = v140;
    }
LABEL_86:
    ++v96;
  }
  {
    v569 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v569, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v586 = mdm::Allocator::instance(void)::alloc;
  v142 = (_QWORD *)*((_QWORD *)v603 + 7);
  v143 = (_QWORD *)*((_QWORD *)v603 + 8);
  if (v142 == v143)
  {
    LODWORD(v148) = 0;
    v145 = 0;
    v146 = 0;
    v147 = 0;
    goto LABEL_204;
  }
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  while (2)
  {
    v150 = *v142 + 8;
    if (*v142)
      v151 = *v142 + 8;
    else
      v151 = 0;
    if (*(_DWORD *)(v151 + 56))
    {
      if ((unint64_t)v146 < v147)
      {
        if (v146)
          *(_QWORD *)v146 = *(_QWORD *)(v151 + 52);
        v146 += 8;
        goto LABEL_189;
      }
      v152 = (v146 - v145) >> 3;
      v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 61)
        abort();
      v154 = v147 - (_QWORD)v145;
      if ((uint64_t)(v147 - (_QWORD)v145) >> 2 > v153)
        v153 = (uint64_t)(v147 - (_QWORD)v145) >> 2;
      if (v154 >= 0x7FFFFFFFFFFFFFF8)
        v155 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v155 = v153;
      if (v155)
      {
        v156 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v586 + 16))(v586, 8 * v155, 4);
        v157 = (char *)(v156 + 8 * v152);
        v147 = v156 + 8 * v155;
        if (v156)
          *(_QWORD *)v157 = *(_QWORD *)(v151 + 52);
      }
      else
      {
        v147 = 0;
        v157 = (char *)(8 * v152);
      }
      v158 = v157;
      if (v146 != v145)
      {
        v159 = v146 - v145 - 8;
        if (v159 < 0x138
          || &v157[-(v159 & 0xFFFFFFFFFFFFFFF8) - 8] > v157 - 8
          || &v146[-(v159 & 0xFFFFFFFFFFFFFFF8) - 8] > v146 - 8
          || (unint64_t)(v146 - v157) < 0x20)
        {
          v160 = v146;
          v158 = v157;
        }
        else
        {
          v163 = (v159 >> 3) + 1;
          v160 = &v146[-8 * (v163 & 0x3FFFFFFFFFFFFFFCLL)];
          v164 = v157 - 16;
          v165 = v146 - 16;
          v166 = v163 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v167 = *(_OWORD *)v165;
            *((_OWORD *)v164 - 1) = *((_OWORD *)v165 - 1);
            *(_OWORD *)v164 = v167;
            v164 -= 32;
            v165 -= 32;
            v166 -= 4;
          }
          while (v166);
          v158 = &v157[-8 * (v163 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_186;
        }
        do
        {
          v161 = *((_QWORD *)v160 - 1);
          v160 -= 8;
          *((_QWORD *)v158 - 1) = v161;
          v158 -= 8;
        }
        while (v160 != v145);
      }
LABEL_186:
      v146 = v157 + 8;
      if (v145)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v586 + 40))(v586, v145, v154);
      v145 = v158;
LABEL_189:
      v150 = *v142 + 8;
      if (*v142)
        v162 = *v142 + 8;
      else
        v162 = 0;
      v148 = (*(_DWORD *)(v162 + 56) + v144);
    }
    else
    {
      v148 = v144;
    }
    if (*(_BYTE *)(v150 + 69))
      v149 = v144;
    else
      v149 = v148;
    *(_DWORD *)(v150 + 60) = v149;
    ++v142;
    v144 = v148;
    if (v142 != v143)
      continue;
    break;
  }
  if ((unint64_t)v146 < v147)
  {
    if (v146)
      *(_QWORD *)v146 = 0x7FFFFFFFLL;
    goto LABEL_228;
  }
LABEL_204:
  v168 = (v146 - v145) >> 3;
  v169 = v168 + 1;
  if ((unint64_t)(v168 + 1) >> 61)
    abort();
  v170 = v147 - (_QWORD)v145;
  if ((uint64_t)(v147 - (_QWORD)v145) >> 2 > v169)
    v169 = (uint64_t)(v147 - (_QWORD)v145) >> 2;
  if (v170 >= 0x7FFFFFFFFFFFFFF8)
    v171 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v171 = v169;
  if (v171)
  {
    v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v586 + 16))(v586, 8 * v171, 4);
    v173 = (char *)(v172 + 8 * v168);
    v147 = v172 + 8 * v171;
    if (v172)
      *(_QWORD *)v173 = 0x7FFFFFFFLL;
    v174 = (char *)(v146 - v145);
    if (v146 == v145)
      goto LABEL_225;
LABEL_216:
    v175 = (unint64_t)(v174 - 8);
    if (v175 < 0x38)
    {
      v177 = v146;
    }
    else if ((unint64_t)(v146 - v173) < 0x20)
    {
      v177 = v146;
    }
    else
    {
      v176 = (v175 >> 3) + 1;
      v177 = &v146[-8 * (v176 & 0x3FFFFFFFFFFFFFFCLL)];
      v178 = v173 - 16;
      v179 = v146 - 16;
      v180 = v176 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v181 = *(_OWORD *)v179;
        *((_OWORD *)v178 - 1) = *((_OWORD *)v179 - 1);
        *(_OWORD *)v178 = v181;
        v178 -= 32;
        v179 -= 32;
        v180 -= 4;
      }
      while (v180);
      v173 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
      if (v176 == (v176 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_225;
    }
    do
    {
      v182 = *((_QWORD *)v177 - 1);
      v177 -= 8;
      *((_QWORD *)v173 - 1) = v182;
      v173 -= 8;
    }
    while (v177 != v145);
  }
  else
  {
    v147 = 0;
    v173 = (char *)(8 * v168);
    v174 = (char *)(v146 - v145);
    if (v146 != v145)
      goto LABEL_216;
  }
LABEL_225:
  if (v145)
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v586 + 40))(v586, v145, v170);
  v145 = v173;
LABEL_228:
  v183 = objc_msgSend(*((id *)v603 + 4), "pointCount");
  v184 = v183;
  v185 = v183 + (uint64_t)(int)v148;
  v186 = *((_QWORD *)v603 + 30);
  v187 = (*((_QWORD *)v603 + 31) - v186) >> 4;
  if (v185 <= v187)
  {
    if (v185 < v187)
      *((_QWORD *)v603 + 31) = v186 + 16 * v185;
  }
  else
  {
    std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append((uint64_t)v578, v185 - v187);
  }
  if (v183)
  {
    v188 = 0;
    v189 = 0;
    v190 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    v590 = _Q0;
    do
    {
      v195 = *((id *)v603 + 4);
      objc_msgSend(v195, "pointAt:", v188);
      v598 = v196;
      v198 = v197;

      v199 = tan(v198 * 0.00872664626 + 0.785398163);
      v200 = log(v199);
      v201 = *v578;
      v202.f64[0] = v598;
      v202.f64[1] = v200;
      *(float64x2_t *)(*v578 + 16 * v190) = vmlaq_f64(v590, (float64x2_t)xmmword_19FFB32D0, v202);
      if (v188 == *(_DWORD *)&v145[8 * v189])
      {
        v203 = v201 + 16;
        do
        {
          v204 = *(unsigned int *)&v145[8 * v189 + 4];
          if ((int)v204 < 1)
          {
            v194 = v190;
          }
          else
          {
            v205 = *(int64x2_t *)(v201 + 16 * v190);
            v206 = v190;
            if (v204 <= 0x19)
              goto LABEL_250;
            v207 = v203 + 16 * v190;
            v208 = 16 * (v204 - 1);
            v209 = v207 + v208;
            v210 = v201 + 24 + 16 * v190;
            v211 = v210 + v208;
            _CF = v209 >= v207 && v211 >= v210;
            v206 = v190;
            if (!_CF)
              goto LABEL_250;
            v213 = v204 & 0x7FFFFFFC;
            v214 = vdupq_lane_s64(v205.i64[0], 0);
            v215 = vdupq_laneq_s64(v205, 1);
            v216 = vzip2q_s64(v214, v215);
            v217 = vzip1q_s64(v214, v215);
            v218 = (int64x2_t *)(v201 + 48 + 16 * v190);
            v219 = v204 & 0xFFFFFFFC;
            do
            {
              v218[-2] = v217;
              v218[-1] = v216;
              *v218 = v217;
              v218[1] = v216;
              v218 += 4;
              v219 -= 4;
            }
            while (v219);
            v206 = v190 + v213;
            v194 = v190 + v213;
            if (v213 != v204)
            {
LABEL_250:
              v220 = v204 + v190 - v206;
              do
              {
                v194 = v206 + 1;
                *(int64x2_t *)(v203 + 16 * v206++) = v205;
                --v220;
              }
              while (v220);
            }
          }
          ++v189;
          v190 = v194;
        }
        while (v188 == *(_DWORD *)&v145[8 * v189]);
      }
      else
      {
        v194 = v190;
      }
      ++v188;
      v190 = v194 + 1;
    }
    while (v188 != v184);
  }
  else
  {
    v201 = *v578;
  }
  v221 = *((_QWORD *)v603 + 31) - v201;
  v222 = v221 >> 4;
  v224 = *((_QWORD *)v603 + 34);
  v223 = (_DWORD *)*((_QWORD *)v603 + 35);
  v225 = (char *)v223 - v224;
  v226 = ((uint64_t)v223 - v224) >> 2;
  v227 = (v221 >> 4) - v226;
  if (v221 >> 4 <= v226)
  {
    if (v221 >> 4 < v226)
      *((_QWORD *)v603 + 35) = v224 + 4 * v222;
  }
  else
  {
    v228 = *((_QWORD *)v603 + 36);
    if (v227 <= (v228 - (uint64_t)v223) >> 2)
    {
      v236 = &v223[v227];
      v237 = 4 * v222 - 4 * v226;
      do
      {
        if (v223)
          *v223 = 0;
        ++v223;
        v237 -= 4;
      }
      while (v237);
      *((_QWORD *)v603 + 35) = v236;
    }
    else
    {
      if (v221 < 0)
        abort();
      v229 = v228 - v224;
      v230 = (v228 - v224) >> 1;
      if (v230 <= v222)
        v230 = v221 >> 4;
      if (v229 >= 0x7FFFFFFFFFFFFFFCLL)
        v231 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v231 = v230;
      v232 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v603 + 37) + 16))(*((_QWORD *)v603 + 37), 4 * v231, 4);
      v233 = (_DWORD *)(v232 + 4 * v226);
      v234 = 4 * v222 - 4 * v226;
      v235 = v233;
      do
      {
        if (v235)
          *v235 = 0;
        ++v235;
        v234 -= 4;
      }
      while (v234);
      v238 = *((_QWORD *)v603 + 34);
      v239 = *((_QWORD *)v603 + 35);
      if (v239 != v238)
      {
        v240 = v239 - v238 - 4;
        if (v240 < 0x2C)
          goto LABEL_748;
        if ((unint64_t)(v239 - (_QWORD)&v225[v232]) < 0x20)
          goto LABEL_748;
        v241 = (v240 >> 2) + 1;
        v242 = v239 - 4 * (v241 & 0x7FFFFFFFFFFFFFF8);
        v243 = (_OWORD *)(v232 + 4 * v226 - 16);
        v244 = (__int128 *)(v239 - 16);
        v245 = v241 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v246 = *v244;
          *(v243 - 1) = *(v244 - 1);
          *v243 = v246;
          v243 -= 2;
          v244 -= 2;
          v245 -= 8;
        }
        while (v245);
        v233 -= v241 & 0x7FFFFFFFFFFFFFF8;
        v239 = v242;
        if (v241 != (v241 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_748:
          do
          {
            v247 = *(_DWORD *)(v239 - 4);
            v239 -= 4;
            *--v233 = v247;
          }
          while (v239 != v238);
        }
      }
      *((_QWORD *)v603 + 34) = v233;
      *((_QWORD *)v603 + 35) = v232 + 4 * v222;
      v248 = *((_QWORD *)v603 + 36);
      *((_QWORD *)v603 + 36) = v232 + 4 * v231;
      if (v238)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v603 + 37) + 40))(*((_QWORD *)v603 + 37), v238, v248 - v238);
    }
  }
  {
    v570 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v570, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v250 = mdm::Allocator::instance(void)::alloc;
  v626[3] = mdm::Allocator::instance(void)::alloc;
  v252 = *((_QWORD *)v603 + 30);
  v251 = *((_QWORD *)v603 + 31);
  v253 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  v254 = v253;
  if (v253)
    *v253 = ((v251 - v252) << 28) & 0xFFFFFFFF00000000;
  v626[2] = v253 + 1;
  v626[0] = v253;
  v626[1] = v253 + 1;
  v255 = (uint64_t *)operator new();
  md::LabelRouteCollisionInfo::LabelRouteCollisionInfo(v255, (uint64_t)v578, (uint64_t)v574, (uint64_t)v626);
  v256 = *v573;
  *v573 = v255;
  if (v256)
    std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v256);
  if (v254)
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v250 + 40))(v250, v254, 8);
  if (v145)
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v586 + 40))(v586, v145, v147 - (_QWORD)v145);
  v257 = (void **)*((_QWORD *)v603 + 11);
  v258 = (void **)*((_QWORD *)v603 + 12);
  if (v258 != v257)
  {
    do
      geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(--v258);
    while (v258 != v257);
    v258 = *v585;
  }
  *((_QWORD *)v603 + 12) = v257;
  if (*((_QWORD *)v603 + 13) - (_QWORD)v258 <= 0x31FuLL)
  {
    v259 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v603 + 14) + 16))(*((_QWORD *)v603 + 14), 800, 8);
    v260 = (char *)v257 - (char *)v258;
    v261 = v259 + (((char *)v257 - (char *)v258) & 0xFFFFFFFFFFFFFFF8);
    v262 = v259 + 800;
    v263 = (char *)*((_QWORD *)v603 + 11);
    v264 = (void **)*((_QWORD *)v603 + 12);
    if (v264 == (void **)v263)
    {
      *((_QWORD *)v603 + 11) = v261;
      *((_QWORD *)v603 + 12) = v261;
      v267 = *((_QWORD *)v603 + 13);
      *((_QWORD *)v603 + 13) = v262;
    }
    else
    {
      v265 = (char *)v264 - v263 - 8;
      if (v265 <= 0x67)
      {
        v266 = (_QWORD *)v261;
        goto LABEL_307;
      }
      v268 = (v260 & 0xFFFFFFFFFFFFFFF8) - (v265 & 0xFFFFFFFFFFFFFFF8) + v259 - 8 >= (unint64_t)v264
          || (unint64_t)v264 - (v265 & 0xFFFFFFFFFFFFFFF8) - 8 >= v261;
      v266 = (_QWORD *)v261;
      if (!v268)
        goto LABEL_749;
      v269 = v260 >> 3;
      v270 = (v265 >> 3) + 1;
      v271 = (_OWORD *)(v259 + 8 * v269 - 32);
      v272 = v264 - 4;
      v273 = v270 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *v271 = 0uLL;
        v271[1] = 0uLL;
        v274 = *((_OWORD *)v272 + 1);
        *v271 = *(_OWORD *)v272;
        v271[1] = v274;
        v271 -= 2;
        *(_OWORD *)v272 = 0uLL;
        *((_OWORD *)v272 + 1) = 0uLL;
        v272 -= 4;
        v273 -= 4;
      }
      while (v273);
      v266 = (_QWORD *)(v261 - 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL));
      v264 -= v270 & 0x3FFFFFFFFFFFFFFCLL;
      if (v270 != (v270 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_749:
        do
        {
LABEL_307:
          *--v266 = 0;
          v275 = (uint64_t)*--v264;
          *v266 = v275;
          *v264 = 0;
        }
        while (v264 != (void **)v263);
      }
      v264 = (void **)*((_QWORD *)v603 + 11);
      v276 = (void **)*((_QWORD *)v603 + 12);
      *((_QWORD *)v603 + 11) = v266;
      *((_QWORD *)v603 + 12) = v261;
      v267 = *((_QWORD *)v603 + 13);
      for (*((_QWORD *)v603 + 13) = v262;
            v276 != v264;
    }
    if (v264)
      (*(void (**)(_QWORD, void **, uint64_t))(**((_QWORD **)v603 + 14) + 40))(*((_QWORD *)v603 + 14), v264, v267 - (_QWORD)v264);
  }
  *((_QWORD *)&v608 + 1) = 0;
  {
    v571 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v571, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v609 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v608 = (char *)&v608 + 8;
  v278 = *((id *)v603 + 4);
  objc_msgSend(v278, "halls");
  v279 = (void *)objc_claimAutoreleasedReturnValue();

  v280 = *((id *)v603 + 4);
  objc_msgSend(v280, "stations");
  obja = (void *)objc_claimAutoreleasedReturnValue();

  v281 = (_QWORD *)*((_QWORD *)v603 + 7);
  v583 = (_QWORD *)*((_QWORD *)v603 + 8);
  if (v281 != v583)
  {
    do
    {
      v587 = v281;
      v282 = *v281;
      v283 = *v281 + 8;
      if (v282)
        v284 = v283;
      else
        v284 = 0;
      v591 = *(id *)(v284 + 8);
      if (objc_msgSend(v591, "type") == 6)
      {
        v624 = 0u;
        v625 = 0u;
        v622 = 0u;
        v623 = 0u;
        objc_msgSend(v591, "steps");
        v285 = (void *)objc_claimAutoreleasedReturnValue();
        v286 = objc_msgSend(v285, "countByEnumeratingWithState:objects:count:", &v622, v626, 16);
        if (v286)
        {
          v287 = *(_QWORD *)v623;
          v599 = v285;
          do
          {
            for (m = 0; m != v286; ++m)
            {
              if (*(_QWORD *)v623 != v287)
                objc_enumerationMutation(v285);
              v289 = *(void **)(*((_QWORD *)&v622 + 1) + 8 * m);
              objc_msgSend(v289, "originStop");
              v290 = (void *)objc_claimAutoreleasedReturnValue();
              v291 = isOriginStopSkippedForStep(v289);
              if (v290)
                v292 = v291;
              else
                v292 = 1;
              if ((v292 & 1) == 0 && objc_msgSend(v290, "hasHallIndex"))
              {
                objc_msgSend(v279, "objectAtIndexedSubscript:", objc_msgSend(v290, "hallIndex"));
                v293 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v293, "hasStationIndex"))
                {
                  objc_msgSend(obja, "objectAtIndexedSubscript:", objc_msgSend(v293, "stationIndex"));
                  v294 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v294, "hasMuid"))
                  {
                    v295 = objc_msgSend(v294, "muid");
                    v296 = v295;
                    v297 = (uint64_t *)*((_QWORD *)&v608 + 1);
                    v298 = (uint64_t **)&v608 + 1;
LABEL_332:
                    v299 = v298;
                    if (v297)
                    {
                      do
                      {
                        v298 = (uint64_t **)v297;
                        v300 = v297[4];
                        if (v295 < v300)
                        {
                          v297 = *v298;
                          goto LABEL_332;
                        }
                        if (v300 >= v295)
                          goto LABEL_340;
                        v297 = v298[1];
                      }
                      while (v297);
                      v299 = v298 + 1;
                    }
                    v301 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v609 + 16))(v609, 40, 8);
                    v301[4] = v296;
                    *v301 = 0;
                    v301[1] = 0;
                    v301[2] = (uint64_t)v298;
                    *v299 = v301;
                    if (*(_QWORD *)v608)
                    {
                      *(_QWORD *)&v608 = *(_QWORD *)v608;
                      v301 = *v299;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v608 + 1), v301);
                    ++*((_QWORD *)&v609 + 1);
                  }
LABEL_340:

                  v285 = v599;
                }

              }
            }
            v286 = objc_msgSend(v285, "countByEnumeratingWithState:objects:count:", &v622, v626, 16);
          }
          while (v286);
        }

      }
      v281 = v587 + 1;
    }
    while (v587 + 1 != v583);
  }

  *(_QWORD *)&v604 = 0;
  v302 = *((id *)v603 + 4);
  objc_msgSend(v302, "halls");
  v584 = (void *)objc_claimAutoreleasedReturnValue();

  v303 = *((id *)v603 + 4);
  objc_msgSend(v303, "stations");
  v581 = (void *)objc_claimAutoreleasedReturnValue();

  v304 = v603;
  v305 = (_QWORD *)*((_QWORD *)v603 + 7);
  v577 = (_QWORD *)*((_QWORD *)v603 + 8);
  if (v305 != v577)
  {
    v575 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    while (1)
    {
      objb = v305;
      v306 = *v305;
      v307 = *v305 + 8;
      if (v306)
        v308 = v307;
      else
        v308 = 0;
      v580 = *(id *)(v308 + 8);
      if (objc_msgSend(v580, "type") == 6)
      {
        __p = 0;
        if ((_QWORD)v604)
        {
          v309 = (_QWORD *)*((_QWORD *)v304 + 12);
          if ((unint64_t)v309 >= *((_QWORD *)v304 + 13))
          {
            v311 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&v604);
          }
          else
          {
            if (v309)
            {
              *v309 = 0;
              v310 = (_QWORD *)v604;
              *v309 = v604;
              if (v310)
                ++*v310;
            }
            v311 = v309 + 1;
          }
          *((_QWORD *)v304 + 12) = v311;
          geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=((void **)&v604);
        }
        v579 = v580;
        objc_msgSend(v579, "transitLine");
        v410 = (void *)objc_claimAutoreleasedReturnValue();
        v576 = v410;
        v411 = objc_msgSend(v410, "hasLineColorString");
        if (*objb)
          v413 = *objb + 8;
        else
          v413 = 0;
        v412.i64[0] = 0xFF000000000000;
        if (v411)
        {
          *(_BYTE *)(v413 + 28) = 1;
          objc_msgSend(v410, "lineColorString", 7.06327446e-304);
          v414 = (void *)objc_claimAutoreleasedReturnValue();
          v415 = VKShieldColorsFromHexString(v414);
          v601 = v416;
          v417 = v415;
          v419 = v418;
          v421 = v420;

          if (v417 >= 0.04045)
            v422 = powf((float)(v417 * 0.94787) + 0.052133, 2.4);
          else
            v422 = v417 * 0.077399;
          v592 = v422;
          if (v419 >= 0.04045)
            v423 = powf((float)(v419 * 0.94787) + 0.052133, 2.4);
          else
            v423 = v419 * 0.077399;
          if (v421 >= 0.04045)
          {
            v588 = v423;
            v424 = powf((float)(v421 * 0.94787) + 0.052133, 2.4);
            v423 = v588;
          }
          else
          {
            v424 = v421 * 0.077399;
          }
          v425.i64[0] = __PAIR64__(LODWORD(v423), LODWORD(v592));
          v425.i64[1] = __PAIR64__(v601, LODWORD(v424));
          v412 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v425, v575));
          *(int16x4_t *)v412.i8 = vmovn_s32((int32x4_t)v412);
          if (*objb)
            v413 = *objb + 8;
          else
            v413 = 0;
        }
        *(_DWORD *)(v413 + 29) = vmovn_s16(v412).u32[0];
        v620 = 0u;
        v621 = 0u;
        v618 = 0u;
        v619 = 0u;
        objc_msgSend(v579, "steps");
        v426 = (void *)objc_claimAutoreleasedReturnValue();
        v427 = objc_msgSend(v426, "countByEnumeratingWithState:objects:count:", &v618, v626, 16);
        if (v427)
        {
          v428 = 0;
          v593 = *(_QWORD *)v619;
          v589 = v426;
          do
          {
            v429 = 0;
            v430 = v428;
            do
            {
              if (*(_QWORD *)v619 != v593)
                objc_enumerationMutation(v426);
              v431 = *(void **)(*((_QWORD *)&v618 + 1) + 8 * v429);
              objc_msgSend(v431, "transitStep");
              v602 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v431, "originStop");
              v432 = (void *)objc_claimAutoreleasedReturnValue();
              v433 = isOriginStopSkippedForStep(v431);
              if (v432)
                v434 = v433;
              else
                v434 = 1;
              if ((v434 & 1) != 0)
              {
                v428 = v430;
                goto LABEL_595;
              }
              v435 = __p;
              if (!__p || v432 != *((void **)__p + 1))
              {
                v616 = 0;
                v436 = (char *)operator new(0x70uLL);
                *(_QWORD *)v436 = 1;
                *(_OWORD *)(v436 + 8) = 0u;
                *(_OWORD *)(v436 + 24) = 0u;
                *(_OWORD *)(v436 + 40) = 0u;
                *(_OWORD *)(v436 + 56) = 0u;
                *(_OWORD *)(v436 + 72) = 0u;
                *(_OWORD *)(v436 + 88) = 0u;
                *((_QWORD *)v436 + 13) = 0;
                v616 = v436;
                if (v435)
                {
                  _ZF = (*(_QWORD *)v435)-- == 1;
                  if (_ZF)
                  {
                    v437 = (std::__shared_weak_count *)*((_QWORD *)v435 + 11);
                    if (v437)
                    {
                      p_shared_owners = (unint64_t *)&v437->__shared_owners_;
                      do
                        v439 = __ldaxr(p_shared_owners);
                      while (__stlxr(v439 - 1, p_shared_owners));
                      if (!v439)
                      {
                        ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
                        std::__shared_weak_count::__release_weak(v437);
                      }
                    }

                    operator delete(__p);
                    v436 = v616;
                  }
                }
                __p = v436;
                v440 = objc_msgSend(v431, "stepIndex");
                if (__p)
                  v441 = (char *)__p + 8;
                else
                  v441 = 0;
                *((_DWORD *)v441 + 13) = v440;
                objc_storeStrong((id *)v441, v432);
                if (objc_msgSend(v432, "hasHallIndex"))
                {
                  objc_msgSend(v584, "objectAtIndexedSubscript:", objc_msgSend(v432, "hallIndex"));
                  v442 = objc_claimAutoreleasedReturnValue();
                  if (__p)
                    v443 = (char *)__p + 8;
                  else
                    v443 = 0;
                  v444 = (void *)*((_QWORD *)v443 + 1);
                  *((_QWORD *)v443 + 1) = v442;

                }
                if (__p)
                  v445 = (char *)__p + 8;
                else
                  v445 = 0;
                if (*((_QWORD *)v445 + 1))
                  v446 = 2;
                else
                  v446 = 1;
                v445[101] = v446;
                v447 = objc_msgSend(v431, "startRouteCoordinate");
                if (*objb)
                  v448 = *objb + 8;
                else
                  v448 = 0;
                v449 = *(int *)(v448 + 24);
                v450 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * v449);
                if (v450)
                  v451 = v450 + 8;
                else
                  v451 = 0;
                v452 = (*(_DWORD *)(v451 + 60) + v447);
                if (__p)
                  v453 = (char *)__p + 8;
                else
                  v453 = 0;
                *((_DWORD *)v453 + 14) = v452;
                *((_DWORD *)v453 + 12) = v449;
                if ((v452 & 0x80000000) != 0
                  || (v454 = *((_QWORD *)v603 + 30), v452 >= (*((_QWORD *)v603 + 31) - v454) >> 4))
                {
                  v456 = 0;
                }
                else
                {
                  v455 = (_QWORD *)(v454 + 16 * v452);
                  *((_QWORD *)v453 + 4) = *v455;
                  *((_QWORD *)v453 + 5) = v455[1];
                  v456 = 1;
                }
                v453[91] = v456;
                v457 = (void **)*((_QWORD *)v603 + 12);
                v458 = *((_QWORD *)v603 + 13);
                if ((unint64_t)v457 < v458)
                {
                  if (v457)
                  {
                    *v457 = 0;
                    v459 = __p;
                    *v457 = __p;
                    if (v459)
                      ++*v459;
                  }
                  v460 = v457 + 1;
                  goto LABEL_589;
                }
                v461 = v457 - *v585;
                v462 = v461 + 1;
                if ((unint64_t)(v461 + 1) >> 61)
                  abort();
                v463 = v458 - (_QWORD)*v585;
                if (v463 >> 2 > v462)
                  v462 = v463 >> 2;
                if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFF8)
                  v464 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v464 = v462;
                if (v464)
                {
                  v465 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v603 + 14) + 16))(*((_QWORD *)v603 + 14), 8 * v464, 8);
                  v466 = (void **)(v465 + 8 * v461);
                  v467 = v465 + 8 * v464;
                  if (v465)
                  {
                    *v466 = 0;
                    v468 = __p;
                    *v466 = __p;
                    if (v468)
                      ++*v468;
                  }
                }
                else
                {
                  v467 = 0;
                  v466 = (void **)(8 * v461);
                }
                v460 = v466 + 1;
                v469 = (_QWORD *)*((_QWORD *)v603 + 11);
                v470 = *((_QWORD *)v603 + 12);
                if ((_QWORD *)v470 == v469)
                {
                  *((_QWORD *)v603 + 11) = v466;
                  *((_QWORD *)v603 + 12) = v460;
                  v476 = *((_QWORD *)v603 + 13);
                  *((_QWORD *)v603 + 13) = v467;
                  if (v470)
                    goto LABEL_588;
                }
                else
                {
                  v471 = v470 - (_QWORD)v469 - 8;
                  if (v471 <= 0x37
                    || (v472 = v471 >> 3, (unint64_t)&v466[-v472 - 1] < v470)
                    && v470 - 8 * v472 - 8 < (unint64_t)v466)
                  {
                    v473 = (_QWORD *)*((_QWORD *)v603 + 12);
                    goto LABEL_573;
                  }
                  v490 = v472 + 1;
                  v491 = (v472 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                  v473 = (_QWORD *)(v470 - 8 * v491);
                  v492 = v466 - 4;
                  v493 = (_OWORD *)(v470 - 32);
                  v494 = v491;
                  do
                  {
                    *(_OWORD *)v492 = 0uLL;
                    *((_OWORD *)v492 + 1) = 0uLL;
                    v495 = v493[1];
                    *(_OWORD *)v492 = *v493;
                    *((_OWORD *)v492 + 1) = v495;
                    v492 -= 4;
                    *v493 = 0uLL;
                    v493[1] = 0uLL;
                    v493 -= 2;
                    v494 -= 4;
                  }
                  while (v494);
                  v466 -= v491;
                  if (v490 != v491)
                  {
                    do
                    {
LABEL_573:
                      *--v466 = 0;
                      v474 = (void *)*--v473;
                      *v466 = v474;
                      *v473 = 0;
                    }
                    while (v473 != v469);
                  }
                  v470 = *((_QWORD *)v603 + 11);
                  v475 = (void **)*((_QWORD *)v603 + 12);
                  *((_QWORD *)v603 + 11) = v466;
                  *((_QWORD *)v603 + 12) = v460;
                  v476 = *((_QWORD *)v603 + 13);
                  *((_QWORD *)v603 + 13) = v467;
                  if (v475 != (void **)v470)
                  {
                    v582 = v476;
                    do
                    {
                      v478 = (uint64_t)*--v475;
                      v477 = v478;
                      if (v478)
                      {
                        _ZF = (*(_QWORD *)v477)-- == 1;
                        if (_ZF)
                        {
                          v479 = *(std::__shared_weak_count **)(v477 + 88);
                          if (v479)
                          {
                            v480 = (unint64_t *)&v479->__shared_owners_;
                            do
                              v481 = __ldaxr(v480);
                            while (__stlxr(v481 - 1, v480));
                            if (!v481)
                            {
                              ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
                              std::__shared_weak_count::__release_weak(v479);
                            }
                          }

                          operator delete(*v475);
                          *v475 = 0;
                        }
                      }
                    }
                    while (v475 != (void **)v470);
                    v476 = v582;
                  }
                  if (!v470)
                    goto LABEL_589;
LABEL_588:
                  (*(void (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)v603 + 14) + 40))(*((_QWORD *)v603 + 14), v470, v476 - v470);
                }
LABEL_589:
                *((_QWORD *)v603 + 12) = v460;
              }
              v428 = 1;
              if ((v430 & 1) == 0)
              {
                if (__p)
                  v482 = (char *)__p + 8;
                else
                  v482 = 0;
                v482[88] = 1;
              }
LABEL_595:
              objc_msgSend(v431, "destinationStop");
              v483 = (void *)objc_claimAutoreleasedReturnValue();
              if (v483 && __p)
              {
                v484 = *((id *)__p + 1);
                v485 = v483;
                if (objc_msgSend(v484, "hasStopIndex")
                  && objc_msgSend(v485, "hasStopIndex"))
                {
                  v486 = objc_msgSend(v484, "stopIndex");
                  v487 = v486 == objc_msgSend(v485, "stopIndex");

                  if (v487)
                  {
                    v488 = objc_msgSend(v602, "significanceForEndNode");
                    if (__p)
                      v489 = (char *)__p + 8;
                    else
                      v489 = 0;
                    v489[60] = v488;
                  }
                }
                else
                {

                }
              }

              ++v429;
              v430 = v428;
              v426 = v589;
            }
            while (v429 != v427);
            v496 = objc_msgSend(v589, "countByEnumeratingWithState:objects:count:", &v618, v626, 16);
            v427 = v496;
          }
          while (v496);
        }

        geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&__p);
        goto LABEL_615;
      }
      if (objc_msgSend(v580, "type") == 5)
        break;
      if (objc_msgSend(v580, "type") == 2)
      {
        objc_msgSend(v580, "pointRange");
        if (v397 >= 2)
        {
          v398 = objc_msgSend(v580, "pointRange");
          if (*objb)
            v399 = *objb + 8;
          else
            v399 = 0;
          v400 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * *(int *)(v399 + 24));
          if (v400)
            v401 = v400 + 8;
          else
            v401 = 0;
          v402 = *(_DWORD *)(v401 + 60);
          v403 = 0.0;
          v404 = (v402 + v398);
          if (v402 + v398 < 0 || (v405 = *((_QWORD *)v603 + 30), v404 >= (*((_QWORD *)v603 + 31) - v405) >> 4))
          {
            v408 = 0;
            v407 = 0.0;
            v409 = v604;
            if (!(_QWORD)v604)
              goto LABEL_644;
          }
          else
          {
            v406 = (double *)(v405 + 16 * v404);
            v407 = *v406;
            v403 = v406[1];
            v408 = 1;
            v409 = v604;
            if (!(_QWORD)v604)
              goto LABEL_644;
          }
          v497 = *(unsigned __int8 *)(v409 + 109);
          if (v497 == 4)
          {
            v505 = *((double *)v603 + 25);
            if (vabdd_f64(v407, *(double *)(v409 + 40)) < v505 && vabdd_f64(v403, *(double *)(v409 + 48)) < v505)
            {
LABEL_657:
              __p = 0;
              v516 = (char *)operator new(0x70uLL);
              *(_QWORD *)v516 = 1;
              *(_OWORD *)(v516 + 8) = 0u;
              *(_OWORD *)(v516 + 24) = 0u;
              *(_OWORD *)(v516 + 40) = 0u;
              *(_OWORD *)(v516 + 56) = 0u;
              *(_OWORD *)(v516 + 72) = 0u;
              *(_OWORD *)(v516 + 88) = 0u;
              *((_QWORD *)v516 + 13) = 0;
              __p = v516;
              geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=((void **)&v604, &__p);
              geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&__p);
              v517 = objc_msgSend(v580, "stepRange");
              objc_msgSend(v580, "stepRange");
              if ((_QWORD)v604)
                v519 = v604 + 8;
              else
                v519 = 0;
              *(_DWORD *)(v519 + 52) = v518 + v517 - 1;
              v520 = objc_msgSend(v580, "pointRange");
              objc_msgSend(v580, "pointRange");
              if (*objb)
                v522 = *objb + 8;
              else
                v522 = 0;
              v523 = *(int *)(v522 + 24);
              v524 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * v523);
              if (v524)
                v525 = v524 + 8;
              else
                v525 = 0;
              v526 = (v521 + v520 + *(_DWORD *)(v525 + 60) - 1);
              if ((_QWORD)v604)
                v527 = v604 + 8;
              else
                v527 = 0;
              *(_DWORD *)(v527 + 56) = v526;
              *(_DWORD *)(v527 + 48) = v523;
              *(_BYTE *)(v527 + 101) = 4;
              *(_BYTE *)(v527 + 60) = 2;
              if ((v526 & 0x80000000) != 0
                || (v528 = *((_QWORD *)v603 + 30), v526 >= (*((_QWORD *)v603 + 31) - v528) >> 4))
              {
                v530 = 0;
              }
              else
              {
                v529 = (_QWORD *)(v528 + 16 * v526);
                *(_QWORD *)(v527 + 32) = *v529;
                *(_QWORD *)(v527 + 40) = v529[1];
                v530 = 1;
              }
              *(_BYTE *)(v527 + 91) = v530;
              goto LABEL_615;
            }
          }
          else if (v497 == 8 || v497 == 6)
          {
            v498 = objc_msgSend(v580, "stepRange");
            v499 = v604;
            v500 = v604 + 8;
            if (!(_QWORD)v604)
              v500 = 0;
            *(_DWORD *)(v500 + 52) = v498;
            if (*objb)
              v501 = *objb + 8;
            else
              v501 = 0;
            *(_DWORD *)(v500 + 48) = *(_DWORD *)(v501 + 24);
            v502 = *((double *)v603 + 25);
            if (vabdd_f64(v407, *(double *)(v500 + 32)) < v502 && vabdd_f64(v403, *(double *)(v500 + 40)) < v502)
            {
              *(_DWORD *)(v500 + 56) = v404;
              v503 = (_QWORD *)*((_QWORD *)v603 + 12);
              if ((unint64_t)v503 >= *((_QWORD *)v603 + 13))
              {
                *((_QWORD *)v603 + 12) = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&v604);
              }
              else
              {
                if (v503)
                {
                  *v503 = 0;
                  v504 = (_QWORD *)v604;
                  *v503 = v604;
                  if (v504)
                    ++*v504;
                }
                *((_QWORD *)v603 + 12) = v503 + 1;
              }
              goto LABEL_657;
            }
            if (!v499)
            {
LABEL_644:
              __p = 0;
              v509 = (char *)operator new(0x70uLL);
              *(_QWORD *)v509 = 1;
              *(_OWORD *)(v509 + 8) = 0u;
              *(_OWORD *)(v509 + 24) = 0u;
              *(_OWORD *)(v509 + 40) = 0u;
              *(_OWORD *)(v509 + 56) = 0u;
              *(_OWORD *)(v509 + 72) = 0u;
              *(_OWORD *)(v509 + 88) = 0u;
              *((_QWORD *)v509 + 13) = 0;
              __p = v509;
              v510 = objc_msgSend(v580, "stepRange");
              if (__p)
                v511 = (char *)__p + 8;
              else
                v511 = 0;
              *((_DWORD *)v511 + 13) = v510;
              *((_DWORD *)v511 + 14) = v404;
              if (*objb)
                v512 = *objb + 8;
              else
                v512 = 0;
              *((_DWORD *)v511 + 12) = *(_DWORD *)(v512 + 24);
              v511[101] = 4;
              v511[60] = 3;
              *((double *)v511 + 4) = v407;
              *((double *)v511 + 5) = v403;
              v511[91] = v408;
              v513 = (void **)*((_QWORD *)v603 + 12);
              if ((unint64_t)v513 >= *((_QWORD *)v603 + 13))
              {
                v515 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&__p);
              }
              else
              {
                if (v513)
                {
                  *v513 = 0;
                  v514 = __p;
                  *v513 = __p;
                  if (v514)
                    ++*v514;
                }
                v515 = v513 + 1;
              }
              *((_QWORD *)v603 + 12) = v515;
              geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&__p);
              goto LABEL_657;
            }
          }
          v506 = (_QWORD *)*((_QWORD *)v603 + 12);
          if ((unint64_t)v506 >= *((_QWORD *)v603 + 13))
          {
            v508 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&v604);
          }
          else
          {
            if (v506)
            {
              *v506 = 0;
              v507 = (_QWORD *)v604;
              *v506 = v604;
              if (v507)
                ++*v507;
            }
            v508 = v506 + 1;
          }
          *((_QWORD *)v603 + 12) = v508;
          goto LABEL_644;
        }
      }
LABEL_615:

      v305 = objb + 1;
      v304 = v603;
      if (objb + 1 == v577)
        goto LABEL_675;
    }
    v614 = 0u;
    v615 = 0u;
    v612 = 0u;
    v613 = 0u;
    objc_msgSend(v580, "steps");
    v312 = (void *)objc_claimAutoreleasedReturnValue();
    v313 = objc_msgSend(v312, "countByEnumeratingWithState:objects:count:", &v612, &v622, 16);
    if (!v313)
      goto LABEL_473;
    v314 = *(_QWORD *)v613;
    v600 = v312;
    while (2)
    {
      v315 = 0;
LABEL_362:
      if (*(_QWORD *)v613 != v314)
        objc_enumerationMutation(v312);
      v316 = *(void **)(*((_QWORD *)&v612 + 1) + 8 * v315);
      objc_msgSend(v316, "transitStep");
      v317 = (void *)objc_claimAutoreleasedReturnValue();
      v318 = v317;
      if (*objb)
        v319 = *objb + 8;
      else
        v319 = 0;
      if (*(int *)(v319 + 48) >= 2 && objc_msgSend(v317, "maneuverType") == 7)
        md::LabelTransitRoute::insertStationWalkingPathNodes((uint64_t)v603, objc_msgSend(v316, "stepIndex"), objb, (void **)&v604);
      objc_msgSend(v316, "accessPoint");
      v320 = (void *)objc_claimAutoreleasedReturnValue();
      v321 = v320;
      if (!v320 || !objc_msgSend(v320, "hasLocation"))
        goto LABEL_465;
      objc_msgSend(v321, "location");
      v322 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v322, "lat");
      v324 = v323;
      objc_msgSend(v322, "lng");
      v326 = v325;
      v327 = tan(v324 * 0.00872664626 + 0.785398163);
      v328 = log(v327);

      v329 = v326 * 0.00277777778 + 0.5;
      v330 = v328 * 0.159154943 + 0.5;
      if (objc_msgSend(v318, "maneuverType") != 7)
        goto LABEL_413;
      __p = 0;
      v331 = (id *)operator new(0x70uLL);
      *v331 = (id)1;
      *(_OWORD *)(v331 + 1) = 0u;
      *(_OWORD *)(v331 + 3) = 0u;
      *(_OWORD *)(v331 + 5) = 0u;
      *(_OWORD *)(v331 + 7) = 0u;
      *(_OWORD *)(v331 + 9) = 0u;
      *(_OWORD *)(v331 + 11) = 0u;
      v331[13] = 0;
      __p = v331;
      objc_storeStrong(v331 + 4, v321);
      v332 = objc_msgSend(v316, "stepIndex");
      if (__p)
        v333 = (char *)__p + 8;
      else
        v333 = 0;
      *((_DWORD *)v333 + 13) = v332;
      if (*objb)
        v334 = *objb + 8;
      else
        v334 = 0;
      v335 = *(_DWORD *)(v334 + 64);
      v336 = *(int *)(v334 + 24);
      v337 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * v336);
      if (v337)
        v338 = v337 + 8;
      else
        v338 = 0;
      v339 = (*(_DWORD *)(v338 + 60) + v335);
      *((_DWORD *)v333 + 14) = v339;
      if ((v339 & 0x80000000) == 0)
      {
        v340 = *((_QWORD *)v603 + 30);
        if (v339 < (*((_QWORD *)v603 + 31) - v340) >> 4)
        {
          v341 = (double *)(v340 + 16 * v339);
          *v341 = v329;
          v341[1] = v330;
        }
      }
      *((_DWORD *)v333 + 12) = v336;
      v333[101] = 5;
      v333[60] = 2;
      *((double *)v333 + 4) = v329;
      *((double *)v333 + 5) = v330;
      v333[91] = 1;
      v342 = v604;
      if ((_QWORD)v604)
      {
        v343 = *(unsigned __int8 *)(v604 + 109);
        if (v343 == 8 || v343 == 6)
        {
          v352 = (_QWORD *)*((_QWORD *)v603 + 12);
          if ((unint64_t)v352 < *((_QWORD *)v603 + 13))
            goto LABEL_400;
          goto LABEL_404;
        }
        if (v343 == 4)
        {
          v344 = *((double *)v603 + 25);
          v345 = *(double *)(v604 + 40);
          if (vabdd_f64(v329, v345) < v344 && vabdd_f64(v330, *(double *)(v604 + 48)) < v344)
          {
            v346 = *(_QWORD *)(v604 + 56);
            *((_DWORD *)v333 + 14) = *(_DWORD *)(v604 + 64);
            *((_QWORD *)v333 + 6) = v346;
            *((double *)v333 + 4) = v345;
            *((_QWORD *)v333 + 5) = *(_QWORD *)(v342 + 48);
            v347 = (void **)*((_QWORD *)v603 + 12);
            if ((unint64_t)v347 < *((_QWORD *)v603 + 13))
            {
              if (v347)
              {
                *v347 = 0;
                v348 = __p;
                *v347 = __p;
                if (v348)
                  ++*v348;
              }
              v349 = v347 + 1;
              goto LABEL_412;
            }
LABEL_411:
            v349 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&__p);
            goto LABEL_412;
          }
          v352 = (_QWORD *)*((_QWORD *)v603 + 12);
          if ((unint64_t)v352 < *((_QWORD *)v603 + 13))
          {
LABEL_400:
            if (v352)
            {
              *v352 = 0;
              v353 = (_QWORD *)v604;
              *v352 = v604;
              if (v353)
                ++*v353;
            }
            v351 = v352 + 1;
LABEL_405:
            v350 = v603;
            *((_QWORD *)v603 + 12) = v351;
LABEL_406:
            if ((unint64_t)v351 >= *((_QWORD *)v350 + 13))
              goto LABEL_411;
            if (v351)
            {
              *v351 = 0;
              v354 = __p;
              *v351 = __p;
              if (v354)
                ++*v354;
            }
            v349 = v351 + 1;
LABEL_412:
            *((_QWORD *)v603 + 12) = v349;
            geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=((void **)&v604);
            geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&__p);
LABEL_413:
            if (objc_msgSend(v321, "hasStationIndex"))
            {
              objc_msgSend(v581, "objectAtIndexedSubscript:", objc_msgSend(v321, "stationIndex"));
              v355 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v355, "hasMuid"))
              {
                v356 = objc_msgSend(v355, "muid");
                v357 = (_QWORD *)*((_QWORD *)&v608 + 1);
                if (*((_QWORD *)&v608 + 1))
                {
                  do
                  {
                    v369 = v357[4];
                    if (v356 >= v369)
                    {
                      if (v369 >= v356)
                        goto LABEL_447;
                      ++v357;
                    }
                    v357 = (_QWORD *)*v357;
                  }
                  while (v357);
                }
                if (objc_msgSend(v355, "hasLocation"))
                {
                  objc_msgSend(v355, "location");
                  v358 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v358, "lat");
                  v360 = v359;
                  objc_msgSend(v358, "lng");
                  v362 = v361;
                  v363 = tan(v360 * 0.00872664626 + 0.785398163);
                  v364 = log(v363);

                  v365 = objc_msgSend(v355, "muid");
                  v366 = v365;
                  v367 = (uint64_t *)*((_QWORD *)&v608 + 1);
                  v368 = (uint64_t **)&v608 + 1;
LABEL_423:
                  v370 = v368;
                  if (v367)
                  {
                    do
                    {
                      v368 = (uint64_t **)v367;
                      v371 = v367[4];
                      if (v365 < v371)
                      {
                        v367 = *v368;
                        goto LABEL_423;
                      }
                      if (v371 >= v365)
                        goto LABEL_431;
                      v367 = v368[1];
                    }
                    while (v367);
                    v370 = v368 + 1;
                  }
                  v372 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v609 + 16))(v609, 40, 8);
                  v372[4] = v366;
                  *v372 = 0;
                  v372[1] = 0;
                  v372[2] = (uint64_t)v368;
                  *v370 = v372;
                  if (*(_QWORD *)v608)
                  {
                    *(_QWORD *)&v608 = *(_QWORD *)v608;
                    v372 = *v370;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v608 + 1), v372);
                  ++*((_QWORD *)&v609 + 1);
LABEL_431:
                  __p = 0;
                  v373 = (id *)operator new(0x70uLL);
                  *v373 = (id)1;
                  *(_OWORD *)(v373 + 1) = 0u;
                  *(_OWORD *)(v373 + 5) = 0u;
                  *(_OWORD *)(v373 + 7) = 0u;
                  *(_OWORD *)(v373 + 9) = 0u;
                  *(_OWORD *)(v373 + 11) = 0u;
                  v373[13] = 0;
                  *(_OWORD *)(v373 + 3) = 0u;
                  __p = v373;
                  objc_storeStrong(v373 + 3, v355);
                  v312 = v600;
                  v374 = objc_msgSend(v316, "stepIndex");
                  if (__p)
                    v375 = (char *)__p + 8;
                  else
                    v375 = 0;
                  *((_DWORD *)v375 + 13) = v374;
                  if (*objb)
                    v376 = *objb + 8;
                  else
                    v376 = 0;
                  v377 = *(_DWORD *)(v376 + 64);
                  v378 = *(int *)(v376 + 24);
                  v379 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * v378);
                  if (v379)
                    v380 = v379 + 8;
                  else
                    v380 = 0;
                  *((_DWORD *)v375 + 14) = *(_DWORD *)(v380 + 60) + v377;
                  *((_DWORD *)v375 + 12) = v378;
                  *(_WORD *)(v375 + 101) = 259;
                  v375[60] = 0;
                  *((double *)v375 + 4) = v362 * 0.00277777778 + 0.5;
                  *((double *)v375 + 5) = v364 * 0.159154943 + 0.5;
                  v375[91] = 1;
                  v381 = (void **)*((_QWORD *)v603 + 12);
                  if ((unint64_t)v381 >= *((_QWORD *)v603 + 13))
                  {
                    v383 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&__p);
                  }
                  else
                  {
                    if (v381)
                    {
                      *v381 = 0;
                      v382 = __p;
                      *v381 = __p;
                      if (v382)
                        ++*v382;
                    }
                    v383 = v381 + 1;
                  }
                  *((_QWORD *)v603 + 12) = v383;
                  geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&__p);
                }
              }
LABEL_447:

            }
            if (objc_msgSend(v318, "maneuverType") == 8)
            {
              __p = 0;
              v384 = (char *)operator new(0x70uLL);
              *(_QWORD *)v384 = 1;
              *(_OWORD *)(v384 + 8) = 0u;
              *(_OWORD *)(v384 + 24) = 0u;
              *(_OWORD *)(v384 + 40) = 0u;
              *(_OWORD *)(v384 + 56) = 0u;
              *(_OWORD *)(v384 + 72) = 0u;
              *(_OWORD *)(v384 + 88) = 0u;
              *((_QWORD *)v384 + 13) = 0;
              __p = v384;
              geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=((void **)&v604, &__p);
              geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&__p);
              if ((_QWORD)v604)
                v385 = v604 + 8;
              else
                v385 = 0;
              objc_storeStrong((id *)(v385 + 24), v321);
              v386 = objc_msgSend(v316, "stepIndex");
              if ((_QWORD)v604)
                v387 = v604 + 8;
              else
                v387 = 0;
              *(_DWORD *)(v387 + 52) = v386;
              if (*objb)
                v388 = *objb + 8;
              else
                v388 = 0;
              v389 = *(_DWORD *)(v388 + 64);
              v390 = *(int *)(v388 + 24);
              v391 = *(_QWORD *)(*((_QWORD *)v603 + 7) + 8 * v390);
              if (v391)
                v392 = v391 + 8;
              else
                v392 = 0;
              v393 = (*(_DWORD *)(v392 + 60) + v389);
              *(_DWORD *)(v387 + 56) = v393;
              if ((v393 & 0x80000000) == 0)
              {
                v394 = *((_QWORD *)v603 + 30);
                if (v393 < (*((_QWORD *)v603 + 31) - v394) >> 4)
                {
                  v395 = (double *)(v394 + 16 * v393);
                  *v395 = v329;
                  v395[1] = v330;
                }
              }
              *(_DWORD *)(v387 + 48) = v390;
              *(_BYTE *)(v387 + 101) = 6;
              *(_BYTE *)(v387 + 60) = 3;
              *(double *)(v387 + 32) = v329;
              *(double *)(v387 + 40) = v330;
              *(_BYTE *)(v387 + 91) = 1;
            }
LABEL_465:
            if (*objb)
              v396 = *objb + 8;
            else
              v396 = 0;
            if (*(int *)(v396 + 48) >= 2 && objc_msgSend(v318, "maneuverType") == 8)
              md::LabelTransitRoute::insertStationWalkingPathNodes((uint64_t)v603, objc_msgSend(v316, "stepIndex"), objb, (void **)&v604);

            if (++v315 == v313)
            {
              v313 = objc_msgSend(v312, "countByEnumeratingWithState:objects:count:", &v612, &v622, 16);
              if (!v313)
              {
LABEL_473:

                goto LABEL_615;
              }
              continue;
            }
            goto LABEL_362;
          }
LABEL_404:
          v351 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&v604);
          goto LABEL_405;
        }
      }
      break;
    }
    v350 = v603;
    v351 = (_QWORD *)*((_QWORD *)v603 + 12);
    goto LABEL_406;
  }
LABEL_675:
  v532 = (void **)*((_QWORD *)v304 + 12);
  v531 = *((_QWORD *)v304 + 13);
  if ((_QWORD)v604)
  {
    if ((unint64_t)v532 >= v531)
    {
      v532 = (void **)std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>((uint64_t)v585, (_QWORD **)&v604);
    }
    else
    {
      if (v532)
      {
        *v532 = 0;
        v533 = (_QWORD *)v604;
        *v532 = (void *)v604;
        if (v533)
          ++*v533;
      }
      ++v532;
    }
    *((_QWORD *)v304 + 12) = v532;
    v531 = *((_QWORD *)v304 + 13);
  }
  v534 = (char *)v532 - (char *)*v585;
  v535 = v534 >> 3;
  if (v534 >> 3 >= (unint64_t)((uint64_t)(v531 - (_QWORD)*v585) >> 3))
    goto LABEL_704;
  if (v532 == *v585)
  {
    v538 = 8 * v535;
LABEL_690:
    *((_QWORD *)v304 + 11) = v538;
    *((_QWORD *)v304 + 12) = v538;
    *((_QWORD *)v304 + 13) = v538;
    goto LABEL_702;
  }
  v536 = (*(uint64_t (**)(_QWORD, int64_t, uint64_t))(**((_QWORD **)v304 + 14) + 16))(*((_QWORD *)v304 + 14), (char *)v532 - (char *)*v585, 8);
  v537 = (char *)*((_QWORD *)v304 + 11);
  v532 = (void **)*((_QWORD *)v304 + 12);
  v538 = v536 + 8 * v535;
  if (v532 == (void **)v537)
  {
    v531 = *((_QWORD *)v304 + 13);
    goto LABEL_690;
  }
  v539 = (char *)v532 - v537 - 8;
  if (v539 < 0x68)
  {
    v540 = (_QWORD *)(v536 + 8 * v535);
    goto LABEL_699;
  }
  v541 = v534 - (v539 & 0xFFFFFFFFFFFFFFF8) + v536 - 8 >= (unint64_t)v532
      || (unint64_t)v532 - (v539 & 0xFFFFFFFFFFFFFFF8) - 8 >= v538;
  v540 = (_QWORD *)(v536 + 8 * v535);
  if (!v541)
    goto LABEL_750;
  v542 = (v539 >> 3) + 1;
  v543 = (_OWORD *)(v536 + 8 * v535 - 32);
  v544 = v532 - 4;
  v545 = v542 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    *v543 = 0uLL;
    v543[1] = 0uLL;
    v546 = *((_OWORD *)v544 + 1);
    *v543 = *(_OWORD *)v544;
    v543[1] = v546;
    v543 -= 2;
    *(_OWORD *)v544 = 0uLL;
    *((_OWORD *)v544 + 1) = 0uLL;
    v544 -= 4;
    v545 -= 4;
  }
  while (v545);
  v540 = (_QWORD *)(v538 - 8 * (v542 & 0x3FFFFFFFFFFFFFFCLL));
  v532 -= v542 & 0x3FFFFFFFFFFFFFFCLL;
  if (v542 != (v542 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_750:
    do
    {
LABEL_699:
      *--v540 = 0;
      v547 = (uint64_t)*--v532;
      *v540 = v547;
      *v532 = 0;
    }
    while (v532 != (void **)v537);
  }
  v532 = (void **)*((_QWORD *)v304 + 11);
  v548 = (void **)*((_QWORD *)v304 + 12);
  *((_QWORD *)v304 + 11) = v540;
  *((_QWORD *)v304 + 12) = v538;
  v531 = *((_QWORD *)v304 + 13);
  for (*((_QWORD *)v304 + 13) = v538;
        v548 != v532;
LABEL_702:
  if (v532)
    (*(void (**)(_QWORD, void **, unint64_t))(**((_QWORD **)v304 + 14) + 40))(*((_QWORD *)v304 + 14), v532, v531 - (_QWORD)v532);
LABEL_704:
  v550 = *((_QWORD *)v304 + 11);
  v549 = *((_QWORD *)v304 + 12);
  if ((int)((unint64_t)(v549 - v550) >> 3) >= 1)
  {
    v551 = 0;
    v552 = 0;
    v553 = 0;
    v554 = -1;
    v555 = 1;
    do
    {
      v556 = (int)((v549 - v550) >> 3);
      while (1)
      {
        v557 = *(_QWORD *)(v550 + 8 * v551);
        if (*(_DWORD *)(v557 + 56) != v554)
          break;
        ++v553;
        if (++v551 >= v556)
        {
          v555 = v553;
          goto LABEL_717;
        }
      }
      if (v553)
      {
        v558 = *(_QWORD *)(*((_QWORD *)v304 + 7) + 8 * v554);
        if (v558)
          v559 = v558 + 8;
        else
          v559 = 0;
        *(_QWORD *)(v559 + 36) = v552 | (v553 << 32);
        v554 = *(_DWORD *)(v557 + 56);
        v550 = *((_QWORD *)v304 + 11);
        v549 = *((_QWORD *)v304 + 12);
        v556 = (int)((v549 - v550) >> 3);
      }
      else
      {
        v554 = *(_DWORD *)(v557 + 56);
      }
      v552 = v551++;
      v553 = 1;
    }
    while (v551 < v556);
LABEL_717:
    v560 = *(_QWORD *)(*((_QWORD *)v304 + 7) + 8 * v554);
    if (v560)
      v561 = v560 + 8;
    else
      v561 = 0;
    *(_QWORD *)(v561 + 36) = v552 | (v555 << 32);
  }

  geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr((void **)&v604);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v608, *((_QWORD **)&v608 + 1));

  return v603;
}

void sub_19F7DA6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t **a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,_QWORD *a46)
{
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(&a37);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a45, a46);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(a36 + 312));
  v46 = *a11;
  *a11 = 0;
  if (v46)
    std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v46);
  v47 = *a12;
  if (*a12)
  {
    *(_QWORD *)(a36 + 280) = v47;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a36 + 296) + 40))(*(_QWORD *)(a36 + 296), v47, *(_QWORD *)(a36 + 288) - v47);
  }
  v48 = *a18;
  if (*a18)
  {
    *(_QWORD *)(a36 + 248) = v48;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a36 + 264) + 40))(*(_QWORD *)(a36 + 264), v48, *(_QWORD *)(a36 + 256) - v48);
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(a9 - 8, *(_QWORD **)(a36 + 160));
  std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::~vector[abi:nn180100](a26);
  std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::LegInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::LegInfo,std::allocator>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(a36 + 56));
  *(_QWORD *)(a36 + 24) = &off_1E42B4C30;

  *(_QWORD *)a36 = &off_1E42B4B90;
  _Unwind_Resume(a1);
}

void std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[6];
  if (v2)
  {
    a1[7] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 40))(a1[9], v2, a1[8] - v2);
  }
  v3 = *a1;
  if (*a1)
  {
    v4 = a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      v6 = a1[1];
      do
      {
        v8 = *(_QWORD **)(v6 - 8);
        v6 -= 8;
        v7 = v8;
        if (v8)
        {
          if ((*v7)-- == 1)
          {
            md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo((md::LabelRouteZoomCollisionInfo *)(v7 + 1));
            operator delete(*(void **)(v4 - 8));
            *(_QWORD *)(v4 - 8) = 0;
          }
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v5, a1[2] - v5);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v2 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(void ***)(a1 + 8);
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(v3 - 1);
      while (v3 != v2);
      v4 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v2;
    (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 16) - (_QWORD)v4);
  }
  return a1;
}

uint64_t *std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::LegInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::LegInfo,std::allocator>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v6 = v7;
        if (v7)
        {
          if ((*(_QWORD *)v6)-- == 1)
          {
            *(_QWORD *)(v6 + 8) = &off_1E42B4FF0;

            operator delete(*(void **)(v3 - 8));
            *(_QWORD *)(v3 - 8) = 0;
          }
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t geo::_retain_ptr<GEOComposedRouteSegment * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4FF0;

  return a1;
}

void geo::_retain_ptr<GEOComposedRouteSegment * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4FF0;

  JUMPOUT(0x1A1AF4E00);
}

void **geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr(void **a1)
{
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_QWORD *)v2)-- == 1)
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 11);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      operator delete(*a1);
      *a1 = 0;
    }
  }
  return a1;
}

void md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo(md::LabelRouteZoomCollisionInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), v2, *((_QWORD *)this + 16) - v2);
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v3, *((_QWORD *)this + 12) - v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  while (v4)
  {
    v6 = v4;
    v4 = (_QWORD *)*v4;
    v7 = (_QWORD *)v6[3];
    if (v7)
    {
      if ((*v7)-- == 1)
      {
        v9 = v7[6];
        if (v9)
        {
          v7[7] = v9;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v7[9] + 40))(v7[9], v9, v7[8] - v9);
          v7 = (_QWORD *)v6[3];
        }
        operator delete(v7);
        v6[3] = 0;
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v6, 32);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v5, 8 * *((_QWORD *)this + 4));
}

_QWORD *std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  void **v21;
  _OWORD *v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      *v10 = 0;
      v11 = *a2;
      *v10 = *a2;
      if (v11)
        ++*v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(void ***)(a1 + 8);
  if (v14 == *(void ***)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (!v14)
      return v12;
    goto LABEL_27;
  }
  v15 = (unint64_t)v14 - *(_QWORD *)a1 - 8;
  if (v15 <= 0x47
    || ((v16 = (v13 - (char *)v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (char *)v10 + v16,
         v18 = (unint64_t)v14 + v16,
         v17 < (char *)v14)
      ? (v19 = v18 >= (unint64_t)v10)
      : (v19 = 1),
        !v19))
  {
    v21 = *(void ***)(a1 + 8);
    do
    {
LABEL_23:
      *--v10 = 0;
      v26 = (uint64_t)*--v21;
      *v10 = v26;
      *v21 = 0;
    }
    while (v21 != (void **)v13);
    goto LABEL_24;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 4;
  v23 = v14 - 4;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    *v22 = 0uLL;
    v22[1] = 0uLL;
    v25 = *((_OWORD *)v23 + 1);
    *v22 = *(_OWORD *)v23;
    v22[1] = v25;
    v22 -= 2;
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 4;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_23;
LABEL_24:
  v14 = *(void ***)a1;
  v27 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v28 = *(_QWORD *)(a1 + 16);
  for (*(_QWORD *)(a1 + 16) = v6;
        v27 != v14;
  if (v14)
LABEL_27:
    (*(void (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v28 - (_QWORD)v14);
  return v12;
}

void **geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=(void **a1)
{
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_QWORD *)v2)-- == 1)
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 11);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      operator delete(*a1);
    }
  }
  *a1 = 0;
  return a1;
}

BOOL isOriginStopSkippedForStep(void *a1)
{
  id v1;
  void *v2;
  int v3;
  _BOOL8 v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = a1;
  objc_msgSend(v1, "transitVehicle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "pickupDropoffType");

  if (v3 == 100)
  {
    v4 = 1;
  }
  else
  {
    if (objc_msgSend(v1, "maneuver") != 9)
      goto LABEL_7;
    objc_msgSend(v1, "originStop");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "muid");
    objc_msgSend(v1, "destinationStop");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "muid");

    if (v6 != v8)
      goto LABEL_7;
    objc_msgSend(v1, "getNextStep");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      objc_msgSend(v9, "transitVehicle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v11, "pickupDropoffType") == 100;

    }
    else
    {
LABEL_7:
      v4 = 0;
    }
  }

  return v4;
}

void sub_19F7DB334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void **md::LabelTransitRoute::insertStationWalkingPathNodes(uint64_t a1, int a2, _QWORD *a3, void **a4)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  double *v20;
  double v21;
  void **v22;
  _QWORD *v23;
  void **v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  _QWORD *v44;

  v8 = *a3;
  v9 = (int *)(*a3 + 8);
  if (!*a3)
    v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9[6]);
  if (v10)
    v11 = v10 + 8;
  else
    v11 = 0;
  v13 = v9[11];
  v12 = v9[12];
  v14 = (*(_DWORD *)(v11 + 60) + v13);
  v15 = v12 != 0;
  v16 = v12 - 1;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  v18 = *a4;
  if (*a4)
  {
    if ((v14 & 0x80000000) == 0)
    {
      v19 = *(_QWORD *)(a1 + 240);
      if (v14 < (*(_QWORD *)(a1 + 248) - v19) >> 4)
      {
        v20 = (double *)(v19 + 16 * v14);
        v21 = *(double *)(a1 + 200);
        if (vabdd_f64(*v20, *((double *)v18 + 5)) < v21 && vabdd_f64(v20[1], *((double *)v18 + 6)) < v21)
        {
          if (*((_BYTE *)v18 + 109) != 4)
          {
            v22 = *(void ***)(a1 + 96);
            if ((unint64_t)v22 >= *(_QWORD *)(a1 + 104))
            {
              *(_QWORD *)(a1 + 96) = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>(a1 + 88, (_QWORD **)a4);
            }
            else
            {
              if (v22)
              {
                *v22 = 0;
                v23 = *a4;
                *v22 = *a4;
                if (v23)
                  ++*v23;
              }
              *(_QWORD *)(a1 + 96) = v22 + 1;
            }
          }
          geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=(a4);
          goto LABEL_40;
        }
      }
    }
    v24 = *(void ***)(a1 + 96);
    if ((unint64_t)v24 >= *(_QWORD *)(a1 + 104))
    {
      v26 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>(a1 + 88, (_QWORD **)a4);
    }
    else
    {
      if (v24)
      {
        *v24 = 0;
        v25 = *a4;
        *v24 = *a4;
        if (v25)
          ++*v25;
      }
      v26 = v24 + 1;
    }
    *(_QWORD *)(a1 + 96) = v26;
    geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=(a4);
    v8 = *a3;
  }
  v27 = v8 + 8;
  if (!v8)
    v27 = 0;
  v28 = *(_DWORD *)(v27 + 24);
  v29 = (char *)operator new(0x70uLL);
  *(_QWORD *)v29 = 1;
  *((_QWORD *)v29 + 13) = 0;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  *(_OWORD *)(v29 + 40) = 0u;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_OWORD *)(v29 + 88) = 0u;
  v44 = v29;
  v29[109] = 4;
  *((_DWORD *)v29 + 15) = a2;
  *((_DWORD *)v29 + 16) = v14;
  if ((v14 & 0x80000000) != 0 || (v30 = *(_QWORD *)(a1 + 240), v14 >= (*(_QWORD *)(a1 + 248) - v30) >> 4))
  {
    v32 = 0;
  }
  else
  {
    v31 = (_QWORD *)(v30 + 16 * v14);
    *((_QWORD *)v29 + 5) = *v31;
    *((_QWORD *)v29 + 6) = v31[1];
    v32 = 1;
  }
  v29[99] = v32;
  *((_DWORD *)v29 + 14) = v28;
  v29[68] = 3;
  v33 = *(_QWORD **)(a1 + 96);
  if ((unint64_t)v33 >= *(_QWORD *)(a1 + 104))
  {
    v35 = std::vector<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>,mdm::Allocator>>::__emplace_back_slow_path<geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>&>(a1 + 88, &v44);
  }
  else
  {
    if (v33)
    {
      *v33 = 0;
      v34 = v44;
      *v33 = v44;
      if (v34)
        ++*v34;
    }
    v35 = v33 + 1;
  }
  *(_QWORD *)(a1 + 96) = v35;
  geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr((void **)&v44);
LABEL_40:
  if (*a3)
    v36 = *a3 + 8;
  else
    v36 = 0;
  v37 = *(_DWORD *)(v36 + 24);
  v44 = 0;
  v38 = (char *)operator new(0x70uLL);
  *(_QWORD *)v38 = 1;
  v39 = (v14 + v17);
  *((_QWORD *)v38 + 13) = 0;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  v44 = v38;
  v38[109] = 4;
  *((_DWORD *)v38 + 15) = a2;
  *((_DWORD *)v38 + 16) = v39;
  if ((v39 & 0x80000000) != 0 || (v40 = *(_QWORD *)(a1 + 240), v39 >= (*(_QWORD *)(a1 + 248) - v40) >> 4))
  {
    v42 = 0;
  }
  else
  {
    v41 = (_QWORD *)(v40 + 16 * v39);
    *((_QWORD *)v38 + 5) = *v41;
    *((_QWORD *)v38 + 6) = v41[1];
    v42 = 1;
  }
  v38[99] = v42;
  *((_DWORD *)v38 + 14) = v37;
  v38[68] = 2;
  geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=(a4, (void **)&v44);
  return geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr((void **)&v44);
}

void sub_19F7DB688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::~fast_shared_ptr((void **)va);
  _Unwind_Resume(a1);
}

void **geo::fast_shared_ptr<md::LabelTransitRoute::NodeInfo,std::allocator>::operator=(void **a1, void **a2)
{
  void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = *a1;
  if (*a1)
  {
    if ((*(_QWORD *)v4)-- == 1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 + 11);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      operator delete(*a1);
      *a1 = 0;
    }
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 4)
  {
    if (a2)
    {
      v10 = 16 * a2;
      v11 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *v4 = 0;
          v4[1] = 0;
        }
        v4 += 2;
        v10 -= 16;
      }
      while (v10);
      v4 = v11;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 4;
    v7 = v6 + a2;
    if ((v6 + a2) >> 60)
      abort();
    v8 = v5 - *(_QWORD *)result;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v9, 8);
    else
      result = 0;
    v12 = (_QWORD *)(result + 16 * v6);
    v13 = 16 * a2;
    v14 = &v12[2 * a2];
    v15 = v12;
    do
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
      }
      v15 += 2;
      v13 -= 16;
    }
    while (v13);
    v17 = *(_QWORD *)v3;
    v16 = *(_QWORD *)(v3 + 8);
    if (v16 != *(_QWORD *)v3)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *(_OWORD *)(v16 - 16);
        v12 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v14;
    v18 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 16 * v9;
    if (v16)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v16, v18 - v16);
  }
  return result;
}

void **geo::fast_shared_ptr<md::LabelTransitRoute::LegInfo,std::allocator>::~fast_shared_ptr(void **a1)
{
  void *v2;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_QWORD *)v2)-- == 1)
    {
      *((_QWORD *)v2 + 1) = &off_1E42B4FF0;

      operator delete(*a1);
      *a1 = 0;
    }
  }
  return a1;
}

void md::LabelTransitRoute::buildFeatureForWaypoint(md::LabelTransitRoute *this, md::LabelManager *a2, VKRouteWaypointInfo *a3, int a4)
{
  VKRouteWaypointInfo *v7;
  std::__shared_weak_count *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  std::__shared_weak_count_vtbl *v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  __double2 v18;
  long double v19;
  long double v20;
  float64x2_t v21;
  float v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _OWORD *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unsigned __int8 v140;
  size_t v141;
  _QWORD *v142;
  uint64_t v143;
  int *v144;
  int v145;
  uint64_t v146;
  int *v147;
  int v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  int64x2_t *v161;
  id v162;
  void *v163;
  int64x2_t *v164;
  id v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  md::LabelTransitRoute *v176;
  md::LabelManager *v177;
  float64_t v178;
  int v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  md::LabelExternalPointFeature *v182;
  std::__shared_weak_count *v183;
  uint64_t *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  std::string __p;
  _BYTE v189[24];
  _BYTE *v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = (std::__shared_weak_count *)operator new(0x1D8uLL);
  v176 = this;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD188;
  v182 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v8[1]);
  v183 = v8;
  -[VKRouteWaypointInfo waypoint](v7, "waypoint");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1].__shared_weak_owners_ = objc_msgSend(v9, "muid");
  objc_msgSend(v9, "coordinate");
  v13 = v8[9].__vftable;
  if ((std::__shared_weak_count_vtbl *)v8[9].__shared_owners_ != v13)
  {
    v14 = v12;
    if (fabs(v10) <= 85.0511169)
    {
      v178 = v11;
      v19 = tan(v10 * 0.00872664626 + 0.785398163);
      v20 = log(v19);
      v21.f64[0] = v178;
      v21.f64[1] = v20;
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)&v13->__get_deleter = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v21);
      *(_WORD *)((char *)&v13[1].~__shared_weak_count + 5) = 257;
    }
    else
    {
      v15 = v11 * 0.0174532925;
      v16 = __sincos_stret(v10 * 0.0174532925);
      v17 = 6378137.0 / sqrt(v16.__sinval * v16.__sinval * -0.00669437999 + 1.0);
      v18 = __sincos_stret(v15);
      *(double *)&v13->~__shared_weak_count = v17 * v16.__cosval * v18.__cosval;
      *(double *)&v13->~__shared_weak_count_0 = v17 * v16.__cosval * v18.__sinval;
      *(double *)&v13->__on_zero_shared = v16.__sinval * 0.99330562 * v17;
      BYTE4(v13[1].~__shared_weak_count) = 1;
    }
    if (v14 != 1.79769313e308)
    {
      v27 = v14;
      *(float *)&v13[1].~__shared_weak_count = v27;
    }
  }
  v179 = a4;
  v28 = v9;
  objc_msgSend(v28, "artwork");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    v30 = objc_alloc(MEMORY[0x1E0D270A8]);
    objc_msgSend(v28, "artwork");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "iconDataSource");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "styleAttributes");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v30, "initWithGEOStyleAttributes:", v33);

  }
  else
  {
    objc_msgSend(v28, "styleAttributes");
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      objc_msgSend(v28, "styleAttributes");
      v36 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v36 = objc_msgSend(objc_alloc(MEMORY[0x1E0D270A8]), "initWithAttributes:", 5, 3, 6, 348, 0);
    }
    v34 = (void *)v36;
  }

  v184 = 0;
  v185 = 0;
  v186 = 0;
  {
    v175 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v175, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v177 = a2;
  v187 = mdm::Allocator::instance(void)::alloc;
  v38 = (char *)objc_msgSend(v34, "v");
  v39 = objc_msgSend(v34, "v");
  v40 = objc_msgSend(v34, "countAttrs");
  std::vector<GeoCodecsFeatureStylePair,geo::StdAllocator<GeoCodecsFeatureStylePair,mdm::Allocator>>::__insert_with_size[abi:nn180100]<GeoCodecsFeatureStylePair*,GeoCodecsFeatureStylePair*>((uint64_t *)&v184, 0, v38, (char *)(v39 + 8 * v40), (v39 + 8 * v40 - (uint64_t)v38) >> 3);
  v41 = v185;
  v42 = v186;
  if ((unint64_t)v185 < v186)
  {
    if (v185)
      *v185 = 0x300000005;
    v43 = v41 + 1;
    goto LABEL_43;
  }
  v44 = (uint64_t)v184;
  v45 = v185 - v184;
  v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 61)
    abort();
  if ((uint64_t)(v186 - (_QWORD)v184) >> 2 > v46)
    v46 = (uint64_t)(v186 - (_QWORD)v184) >> 2;
  if (v186 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
    v47 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v47 = v46;
  if (v47)
  {
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v47, 4);
    v49 = (_QWORD *)(v48 + 8 * v45);
    v47 = v48 + 8 * v47;
    if (v48)
      *v49 = 0x300000005;
  }
  else
  {
    v49 = (_QWORD *)(8 * v45);
  }
  v43 = v49 + 1;
  if (v41 != (_QWORD *)v44)
  {
    v50 = (unint64_t)v41 - v44 - 8;
    if (v50 < 0x38)
    {
      v52 = v41;
    }
    else if ((unint64_t)((char *)v41 - (char *)v49) < 0x20)
    {
      v52 = v41;
    }
    else
    {
      v51 = (v50 >> 3) + 1;
      v52 = &v41[-(v51 & 0x3FFFFFFFFFFFFFFCLL)];
      v53 = v49 - 2;
      v54 = (__int128 *)(v41 - 2);
      v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v56 = *v54;
        *(v53 - 1) = *(v54 - 1);
        *v53 = v56;
        v53 -= 2;
        v54 -= 2;
        v55 -= 4;
      }
      while (v55);
      v49 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
      if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_40;
    }
    do
    {
      v57 = *--v52;
      *--v49 = v57;
    }
    while (v52 != (_QWORD *)v44);
    v44 = (uint64_t)v184;
    v42 = v186;
    goto LABEL_40;
  }
  v44 = (uint64_t)v41;
LABEL_40:
  v184 = v49;
  v186 = v47;
  if (v44)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v187 + 40))(v187, v44, v42 - v44);
  v42 = v47;
LABEL_43:
  v185 = v43;
  if ((unint64_t)v43 < v42)
  {
    *v43 = 0x400010023;
    v58 = v42;
    v59 = v43 + 1;
    goto LABEL_69;
  }
  v60 = (uint64_t)v184;
  v61 = v43 - v184;
  v62 = v61 + 1;
  if ((unint64_t)(v61 + 1) >> 61)
    abort();
  if ((uint64_t)(v42 - (_QWORD)v184) >> 2 > v62)
    v62 = (uint64_t)(v42 - (_QWORD)v184) >> 2;
  if (v42 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v62;
  if (v58)
  {
    v63 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v58, 4);
    v64 = (_QWORD *)(v63 + 8 * v61);
    v58 = v63 + 8 * v58;
    if (v63)
      *v64 = 0x400010023;
  }
  else
  {
    v64 = (_QWORD *)(8 * v61);
  }
  v59 = v64 + 1;
  if (v43 != (_QWORD *)v60)
  {
    v65 = (unint64_t)v43 - v60 - 8;
    if (v65 < 0x38)
    {
      v67 = v43;
    }
    else if ((unint64_t)((char *)v43 - (char *)v64) < 0x20)
    {
      v67 = v43;
    }
    else
    {
      v66 = (v65 >> 3) + 1;
      v67 = &v43[-(v66 & 0x3FFFFFFFFFFFFFFCLL)];
      v68 = v64 - 2;
      v69 = (__int128 *)(v43 - 2);
      v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v71 = *v69;
        *(v68 - 1) = *(v69 - 1);
        *v68 = v71;
        v68 -= 2;
        v69 -= 2;
        v70 -= 4;
      }
      while (v70);
      v64 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
      if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_67;
    }
    do
    {
      v72 = *--v67;
      *--v64 = v72;
    }
    while (v67 != (_QWORD *)v60);
    v60 = (uint64_t)v184;
    v42 = v186;
LABEL_67:
    v184 = v64;
    v186 = v58;
    v43 = (_QWORD *)v60;
    if (!v60)
      goto LABEL_69;
    goto LABEL_68;
  }
  v184 = v64;
  v186 = v58;
LABEL_68:
  (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v43, v42 - (_QWORD)v43);
LABEL_69:
  v185 = v59;
  if ((unint64_t)v59 < v58)
  {
    *v59 = 0x100010002;
    v73 = v186;
    v74 = v59 + 1;
    goto LABEL_95;
  }
  v75 = (uint64_t)v184;
  v76 = v59 - v184;
  v77 = v76 + 1;
  if ((unint64_t)(v76 + 1) >> 61)
    abort();
  if ((uint64_t)(v58 - (_QWORD)v184) >> 2 > v77)
    v77 = (uint64_t)(v58 - (_QWORD)v184) >> 2;
  if (v58 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
    v73 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v73 = v77;
  if (v73)
  {
    v78 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v73, 4);
    v79 = (_QWORD *)(v78 + 8 * v76);
    v73 = v78 + 8 * v73;
    if (v78)
      *v79 = 0x100010002;
  }
  else
  {
    v79 = (_QWORD *)(8 * v76);
  }
  v74 = v79 + 1;
  if (v59 != (_QWORD *)v75)
  {
    v80 = (unint64_t)v59 - v75 - 8;
    if (v80 < 0x38)
    {
      v82 = v59;
    }
    else if ((unint64_t)((char *)v59 - (char *)v79) < 0x20)
    {
      v82 = v59;
    }
    else
    {
      v81 = (v80 >> 3) + 1;
      v82 = &v59[-(v81 & 0x3FFFFFFFFFFFFFFCLL)];
      v83 = v79 - 2;
      v84 = (__int128 *)(v59 - 2);
      v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v86 = *v84;
        *(v83 - 1) = *(v84 - 1);
        *v83 = v86;
        v83 -= 2;
        v84 -= 2;
        v85 -= 4;
      }
      while (v85);
      v79 -= v81 & 0x3FFFFFFFFFFFFFFCLL;
      if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_93;
    }
    do
    {
      v87 = *--v82;
      *--v79 = v87;
    }
    while (v82 != (_QWORD *)v75);
    v75 = (uint64_t)v184;
    v58 = v186;
LABEL_93:
    v184 = v79;
    v186 = v73;
    v59 = (_QWORD *)v75;
    if (!v75)
      goto LABEL_95;
    goto LABEL_94;
  }
  v184 = v79;
  v186 = v73;
LABEL_94:
  (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v59, v58 - (_QWORD)v59);
LABEL_95:
  v185 = v74;
  if ((unint64_t)v74 < v73)
  {
    *v74 = 0x100010024;
    v88 = v186;
    v89 = v74 + 1;
    goto LABEL_121;
  }
  v90 = (uint64_t)v184;
  v91 = v74 - v184;
  v92 = v91 + 1;
  if ((unint64_t)(v91 + 1) >> 61)
    abort();
  if ((uint64_t)(v73 - (_QWORD)v184) >> 2 > v92)
    v92 = (uint64_t)(v73 - (_QWORD)v184) >> 2;
  if (v73 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v92;
  if (v88)
  {
    v93 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v88, 4);
    v94 = (_QWORD *)(v93 + 8 * v91);
    v88 = v93 + 8 * v88;
    if (v93)
      *v94 = 0x100010024;
  }
  else
  {
    v94 = (_QWORD *)(8 * v91);
  }
  v89 = v94 + 1;
  if (v74 != (_QWORD *)v90)
  {
    v95 = (unint64_t)v74 - v90 - 8;
    if (v95 < 0x38)
    {
      v97 = v74;
    }
    else if ((unint64_t)((char *)v74 - (char *)v94) < 0x20)
    {
      v97 = v74;
    }
    else
    {
      v96 = (v95 >> 3) + 1;
      v97 = &v74[-(v96 & 0x3FFFFFFFFFFFFFFCLL)];
      v98 = v94 - 2;
      v99 = (__int128 *)(v74 - 2);
      v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *v99;
        *(v98 - 1) = *(v99 - 1);
        *v98 = v101;
        v98 -= 2;
        v99 -= 2;
        v100 -= 4;
      }
      while (v100);
      v94 -= v96 & 0x3FFFFFFFFFFFFFFCLL;
      if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_119;
    }
    do
    {
      v102 = *--v97;
      *--v94 = v102;
    }
    while (v97 != (_QWORD *)v90);
    v90 = (uint64_t)v184;
    v73 = v186;
LABEL_119:
    v184 = v94;
    v186 = v88;
    v74 = (_QWORD *)v90;
    if (!v90)
      goto LABEL_121;
    goto LABEL_120;
  }
  v184 = v94;
  v186 = v88;
LABEL_120:
  (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v74, v73 - (_QWORD)v74);
LABEL_121:
  v185 = v89;
  if ((unint64_t)v89 < v88)
  {
    *v89 = 0x20001001FLL;
    v103 = v186;
    v104 = v89 + 1;
    goto LABEL_147;
  }
  v105 = (uint64_t)v184;
  v106 = v89 - v184;
  v107 = v106 + 1;
  if ((unint64_t)(v106 + 1) >> 61)
    abort();
  if ((uint64_t)(v88 - (_QWORD)v184) >> 2 > v107)
    v107 = (uint64_t)(v88 - (_QWORD)v184) >> 2;
  if (v88 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
    v103 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v103 = v107;
  if (v103)
  {
    v108 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v103, 4);
    v109 = (_QWORD *)(v108 + 8 * v106);
    v103 = v108 + 8 * v103;
    if (v108)
      *v109 = 0x20001001FLL;
  }
  else
  {
    v109 = (_QWORD *)(8 * v106);
  }
  v104 = v109 + 1;
  if (v89 != (_QWORD *)v105)
  {
    v110 = (unint64_t)v89 - v105 - 8;
    if (v110 < 0x38)
    {
      v112 = v89;
    }
    else if ((unint64_t)((char *)v89 - (char *)v109) < 0x20)
    {
      v112 = v89;
    }
    else
    {
      v111 = (v110 >> 3) + 1;
      v112 = &v89[-(v111 & 0x3FFFFFFFFFFFFFFCLL)];
      v113 = v109 - 2;
      v114 = (__int128 *)(v89 - 2);
      v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v116 = *v114;
        *(v113 - 1) = *(v114 - 1);
        *v113 = v116;
        v113 -= 2;
        v114 -= 2;
        v115 -= 4;
      }
      while (v115);
      v109 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
      if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_145;
    }
    do
    {
      v117 = *--v112;
      *--v109 = v117;
    }
    while (v112 != (_QWORD *)v105);
    v105 = (uint64_t)v184;
    v88 = v186;
LABEL_145:
    v184 = v109;
    v186 = v103;
    v89 = (_QWORD *)v105;
    if (!v105)
      goto LABEL_147;
    goto LABEL_146;
  }
  v184 = v109;
  v186 = v103;
LABEL_146:
  (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v89, v88 - (_QWORD)v89);
LABEL_147:
  v185 = v104;
  if (v179)
    v118 = 3;
  else
    v118 = 4;
  if ((unint64_t)v104 < v103)
  {
    *v104 = (v118 << 32) | 0x2C;
    v119 = (char *)(v104 + 1);
    goto LABEL_176;
  }
  v120 = (uint64_t)v184;
  v121 = v104 - v184;
  v122 = v121 + 1;
  if ((unint64_t)(v121 + 1) >> 61)
    abort();
  if ((uint64_t)(v103 - (_QWORD)v184) >> 2 > v122)
    v122 = (uint64_t)(v103 - (_QWORD)v184) >> 2;
  if (v103 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
    v123 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v123 = v122;
  if (v123)
  {
    v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v123, 4);
    v125 = (uint64_t *)(v124 + 8 * v121);
    v126 = v124 + 8 * v123;
    if (v124)
      *v125 = (v118 << 32) | 0x2C;
  }
  else
  {
    v126 = 0;
    v125 = (uint64_t *)(8 * v121);
  }
  v119 = (char *)(v125 + 1);
  if (v104 != (_QWORD *)v120)
  {
    v127 = (unint64_t)v104 - v120 - 8;
    if (v127 < 0x38)
    {
      v129 = v104;
    }
    else if ((unint64_t)((char *)v104 - (char *)v125) < 0x20)
    {
      v129 = v104;
    }
    else
    {
      v128 = (v127 >> 3) + 1;
      v129 = &v104[-(v128 & 0x3FFFFFFFFFFFFFFCLL)];
      v130 = v125 - 2;
      v131 = (__int128 *)(v104 - 2);
      v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v133 = *v131;
        *((_OWORD *)v130 - 1) = *(v131 - 1);
        *(_OWORD *)v130 = v133;
        v130 -= 4;
        v131 -= 2;
        v132 -= 4;
      }
      while (v132);
      v125 -= v128 & 0x3FFFFFFFFFFFFFFCLL;
      if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_174;
    }
    do
    {
      v134 = *--v129;
      *--v125 = v134;
    }
    while (v129 != (_QWORD *)v120);
    v120 = (uint64_t)v184;
    v103 = v186;
LABEL_174:
    v184 = v125;
    v186 = v126;
    v104 = (_QWORD *)v120;
    if (!v120)
      goto LABEL_176;
    goto LABEL_175;
  }
  v184 = v125;
  v186 = v126;
LABEL_175:
  (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v104, v103 - (_QWORD)v104);
LABEL_176:
  _ZNSt3__111make_sharedB8nn180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&v180);
  v135 = v180;
  v136 = (uint64_t)v184;
  if (((v119 - (char *)v184) & 0x7FFFFFFF8) != 0)
  {
    v137 = 0;
    v138 = 0;
    v139 = ((unint64_t)(v119 - (char *)v184) >> 3);
    v140 = *(_BYTE *)(v180 + 33);
    while (1)
    {
      v141 = v140;
      v142 = *(_QWORD **)v135;
      if (v140)
        break;
LABEL_178:
      v142[v141] = *(_QWORD *)(v136 + 8 * v137);
      v140 = *(_BYTE *)(v135 + 33) + 1;
      *(_BYTE *)(v135 + 33) = v140;
      ++v137;
      v138 = 1;
      if (v137 == v139)
      {
        v142 = *(_QWORD **)v135;
        v141 = v140;
LABEL_195:
        qsort(v142, v141, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_196;
      }
    }
    if (v140 > 0x1Fu)
    {
      do
      {
        v146 = 0;
        v147 = (int *)v142;
        while (1)
        {
          v148 = *v147;
          v147 += 2;
          if (v148 == *(_DWORD *)(v136 + 8 * v137))
            break;
          if (v141 == ++v146)
            goto LABEL_189;
        }
        HIDWORD(v142[v146]) = *(_DWORD *)(v136 + 8 * v137 + 4);
LABEL_189:
        ++v137;
      }
      while (v137 != v139);
    }
    else
    {
      do
      {
        v143 = 0;
        v144 = (int *)v142;
        while (1)
        {
          v145 = *v144;
          v144 += 2;
          if (v145 == *(_DWORD *)(v136 + 8 * v137))
            break;
          if (v141 == ++v143)
            goto LABEL_178;
        }
        HIDWORD(v142[v143]) = *(_DWORD *)(v136 + 8 * v137++ + 4);
      }
      while (v137 != v139);
    }
    if ((v138 & 1) != 0)
      goto LABEL_195;
  }
LABEL_196:
  if (v136)
  {
    v185 = (_QWORD *)v136;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v187 + 40))(v187, v136, v186 - v136);
  }

  v149 = v181;
  v180 = 0;
  v181 = 0;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v151 = __ldxr(p_shared_owners);
    while (__stxr(v151 + 1, p_shared_owners));
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[2].__shared_weak_owners_;
  v8[2].__shared_owners_ = v135;
  v8[2].__shared_weak_owners_ = (uint64_t)v149;
  if (shared_weak_owners)
  {
    v153 = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  if (v149)
  {
    v155 = (unint64_t *)&v149->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v157 = v181;
  if (v181)
  {
    v158 = (unint64_t *)&v181->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  objc_msgSend(v28, "name");
  v160 = (void *)objc_claimAutoreleasedReturnValue();

  if (v160)
  {
    v161 = (int64x2_t *)v182;
    objc_msgSend(v28, "name");
    v162 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    md::LabelExternalFeature::addTextForZoom(v161, 0, 0, (const char *)objc_msgSend(v162, "UTF8String"), 0);

  }
  -[VKRouteWaypointInfo annotationText](v7, "annotationText");
  v163 = (void *)objc_claimAutoreleasedReturnValue();

  v164 = (int64x2_t *)v182;
  if (v163)
  {
    -[VKRouteWaypointInfo annotationText](v7, "annotationText");
    v165 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    md::LabelExternalFeature::addTextForZoom(v164, 0, 2, (const char *)objc_msgSend(v165, "UTF8String"), 0);

  }
  extractCustomImageData(&__p, v7);
  md::LabelExternalFeature::setCustomImageData((uint64_t)v164, &__p);
  v166 = v190;
  if (v190 == v189)
  {
    v167 = 4;
    v166 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_225;
    v167 = 5;
  }
  (*(void (**)(void))(*v166 + 8 * v167))();
LABEL_225:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v168 = operator new(0x308uLL);
  v168[1] = 0;
  v168[2] = 0;
  *v168 = &off_1E42DD268;
  *(_QWORD *)v176 = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v168 + 3), v7, 1, 1, (uint64_t *)&v182, (uint64_t)v177);
  *((_QWORD *)v176 + 1) = v168;
  v169 = (unint64_t *)(*((_QWORD *)v177 + 36) + 680);
  do
  {
    v170 = __ldaxr(v169);
    v171 = v170 + 1;
  }
  while (__stlxr(v171, v169));
  v168[12] = v171;

  v172 = v183;
  if (v183)
  {
    v173 = (unint64_t *)&v183->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }

}

void sub_19F7DC890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v29;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a24)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a27 + 40))(a27, a24, a26 - a24);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t md::LabelExternalFeature::addTextForZoom(int64x2_t *a1, char a2, char a3, const char *a4, const char *a5)
{
  char *v6;
  uint64_t result;

  v6 = (char *)a1[3].i64[1];
  if ((unint64_t)v6 >= a1[4].i64[0])
  {
    result = std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>(a1 + 3, a2, a4, a5, 0, 0, a3);
  }
  else
  {
    *v6 = a2;
    v6[1] = a3;
    md::StringWithLocaleImp<std::string>::StringWithLocaleImp((uint64_t)(v6 + 8), a4, a5);
    md::StringWithLocaleImp<std::string>::StringWithLocaleImp((uint64_t)(v6 + 56), 0, 0);
    result = (uint64_t)(v6 + 104);
    a1[3].i64[1] = (uint64_t)(v6 + 104);
  }
  a1[3].i64[1] = result;
  return result;
}

void sub_19F7DCA34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  if (*(char *)(v3 + 55) < 0)
    operator delete(*(void **)(v3 + 32));
  if (*(char *)(v3 + 31) < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 56) = v3;
  _Unwind_Resume(exception_object);
}

_QWORD *md::LabelExternalFeature::setCustomImageData(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  __int128 v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v2 = a2;
  v13 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 120;
  if ((_QWORD *)v4 != a2)
  {
    if (*(char *)(a1 + 143) < 0)
    {
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (_QWORD *)*a2;
        v6 = v2[1];
      }
      std::string::__assign_no_alias<false>((void **)v4, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)v4, (void *)*a2, a2[1]);
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 16) = a2[2];
      *(_OWORD *)v4 = v5;
    }
  }
  v7 = (_QWORD *)(a1 + 144);
  v8 = (_QWORD *)v2[6];
  if (v8)
  {
    if (v8 == v2 + 3)
    {
      v12 = v11;
      (*(void (**)(_QWORD *, _QWORD *))(v2[3] + 24))(v2 + 3, v11);
    }
    else
    {
      v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v12 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v11, v7);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void std::__shared_ptr_emplace<md::RouteWaypointLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteWaypointLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RouteWaypointLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::StringWithLocaleImp<std::string>::StringWithLocaleImp(uint64_t a1, const char *a2, const char *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
    v5 = a2;
  else
    v5 = "";
  v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_11;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_11:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  if (a3)
    v11 = a3;
  else
    v11 = "";
  v12 = strlen(v11);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v14;
  }
  else
  {
    v14 = (void *)(a1 + 24);
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_23;
  }
  memmove(v14, v11, v13);
LABEL_23:
  *((_BYTE *)v14 + v13) = 0;
  return a1;
}

void sub_19F7DCD38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>(int64x2_t *a1, char a2, const char *a3, const char *a4, const char *a5, const char *a6, char a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v31;
  int64x2_t v32;
  char *v33;
  int64x2_t *v34;

  v7 = 0x4EC4EC4EC4EC4EC5 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v8)
    v8 = 0x9D89D89D89D89D8ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x13B13B13B13B13BLL)
    v13 = 0x276276276276276;
  else
    v13 = v8;
  v34 = a1 + 1;
  if (v13)
  {
    if (v13 > 0x276276276276276)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = a4;
    v15 = a5;
    v16 = a6;
    v17 = (char *)operator new(104 * v13);
    a4 = v14;
  }
  else
  {
    v15 = a5;
    v16 = a6;
    v17 = 0;
  }
  v18 = &v17[104 * v7];
  v31 = v17;
  v32.i64[0] = (uint64_t)v18;
  v32.i64[1] = (uint64_t)v18;
  v33 = &v17[104 * v13];
  *v18 = a2;
  v18[1] = a7;
  md::StringWithLocaleImp<std::string>::StringWithLocaleImp((uint64_t)(v18 + 8), a3, a4);
  md::StringWithLocaleImp<std::string>::StringWithLocaleImp((uint64_t)(v18 + 56), v15, v16);
  v19 = v32.i64[0];
  v20 = v32.i64[1] + 104;
  v32.i64[1] += 104;
  v22 = a1->i64[0];
  v21 = a1->u64[1];
  if (v21 == a1->i64[0])
  {
    v28 = vdupq_n_s64(v21);
  }
  else
  {
    do
    {
      v23 = *(_WORD *)(v21 - 104);
      v21 -= 104;
      *(_WORD *)(v19 - 104) = v23;
      v19 -= 104;
      v24 = *(_OWORD *)(v21 + 8);
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v21 + 24);
      *(_OWORD *)(v19 + 8) = v24;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 8) = 0;
      v25 = *(_OWORD *)(v21 + 32);
      *(_QWORD *)(v19 + 48) = *(_QWORD *)(v21 + 48);
      *(_OWORD *)(v19 + 32) = v25;
      *(_QWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      v26 = *(_OWORD *)(v21 + 56);
      *(_QWORD *)(v19 + 72) = *(_QWORD *)(v21 + 72);
      *(_OWORD *)(v19 + 56) = v26;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      v27 = *(_OWORD *)(v21 + 80);
      *(_QWORD *)(v19 + 96) = *(_QWORD *)(v21 + 96);
      *(_OWORD *)(v19 + 80) = v27;
      *(_QWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 88) = 0;
      *(_QWORD *)(v21 + 96) = 0;
    }
    while (v21 != v22);
    v28 = *a1;
    v20 = v32.i64[1];
  }
  a1->i64[0] = v19;
  a1->i64[1] = v20;
  v32 = v28;
  v29 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v33;
  v33 = v29;
  v31 = (char *)v28.i64[0];
  std::__split_buffer<md::LabelExternalTextElement>::~__split_buffer((uint64_t)&v31);
  return v20;
}

void sub_19F7DCF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 + 55) < 0)
    operator delete(*(void **)(v3 + 104 * v4 + 32));
  if (*(char *)(v5 + 31) < 0)
    operator delete(*v2);
  std::__split_buffer<md::LabelExternalTextElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::LabelExternalTextElement>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 49) < 0)
          goto LABEL_11;
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 48));
    if (*(char *)(i - 49) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 72));
      if ((*(char *)(i - 73) & 0x80000000) == 0)
        continue;
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 73) & 0x80000000) == 0)
      continue;
LABEL_12:
    operator delete(*(void **)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<GeoCodecsFeatureStylePair,geo::StdAllocator<GeoCodecsFeatureStylePair,mdm::Allocator>>::__insert_with_size[abi:nn180100]<GeoCodecsFeatureStylePair*,GeoCodecsFeatureStylePair*>(uint64_t *result, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;

  if (a5 < 1)
    return result;
  v6 = __src;
  v7 = (uint64_t)result;
  v9 = *result;
  v8 = result[1];
  v10 = a2 - *result;
  v11 = (uint64_t *)(*result + (v10 & 0xFFFFFFFFFFFFFFF8));
  v12 = result[2];
  if (a5 > (uint64_t)(v12 - v8) >> 3)
  {
    v13 = a5 + ((uint64_t)(v8 - v9) >> 3);
    if (v13 >> 61)
      abort();
    v14 = v10 >> 3;
    v15 = v12 - v9;
    if (v15 >> 2 > v13)
      v13 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    if (v16)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result[3] + 16))(result[3], 8 * v16, 4);
    else
      result = 0;
    v21 = &result[v14];
    v22 = a5;
    v23 = &v21[a5];
    v24 = 8 * a5;
    v25 = v21;
    do
    {
      if (v25)
        *v25 = *(_QWORD *)v6;
      ++v25;
      v6 += 8;
      v24 -= 8;
    }
    while (v24);
    v26 = *(uint64_t **)v7;
    if (*(uint64_t **)v7 == v11)
      goto LABEL_31;
    v27 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
    v28 = v27 - (_QWORD)v26 - 8;
    if (v28 >= 0x68)
    {
      v29 = v11;
      if (v27 - ((unint64_t)result + (v10 & 0xFFFFFFFFFFFFFFF8)) >= 0x20)
      {
        v30 = (v28 >> 3) + 1;
        v29 = &v11[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
        v31 = 8 * v14 - 16;
        v32 = (__int128 *)(v9 + v31);
        v33 = (_OWORD *)((char *)result + v31);
        v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *v33 = v35;
          v32 -= 2;
          v33 -= 2;
          v34 -= 4;
        }
        while (v34);
        v21 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
      }
    }
    else
    {
      v29 = v11;
    }
    do
    {
      v36 = *--v29;
      *--v21 = v36;
    }
    while (v29 != v26);
LABEL_31:
    v37 = *(uint64_t **)(v7 + 8);
    if (v37 != v11)
    {
      v38 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
      v39 = (unint64_t)v37 - v38 - 8;
      if (v39 < 0x68)
        goto LABEL_55;
      if ((unint64_t)result + (v10 & 0xFFFFFFFFFFFFFFF8) + v22 * 8 - v38 < 0x20)
        goto LABEL_55;
      v40 = (v39 >> 3) + 1;
      v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v11 = (uint64_t *)((char *)v11 + v41);
      v42 = &result[v14 + 2 + v22];
      v43 = (__int128 *)(8 * v14 + v9 + 16);
      v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = *v43;
        *((_OWORD *)v42 - 1) = *(v43 - 1);
        *(_OWORD *)v42 = v45;
        v42 += 4;
        v43 += 2;
        v44 -= 4;
      }
      while (v44);
      v23 = (uint64_t *)((char *)v23 + v41);
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_55:
        do
        {
          v46 = *v11++;
          *v23++ = v46;
        }
        while (v11 != v37);
      }
    }
    v47 = *(uint64_t **)v7;
    *(_QWORD *)v7 = v21;
    *(_QWORD *)(v7 + 8) = v23;
    v48 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = &result[v16];
    if (v47)
      return (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v47, v48 - (_QWORD)v47);
    return result;
  }
  v17 = (uint64_t)(v8 - (_QWORD)v11) >> 3;
  if (v17 >= a5)
  {
    v18 = &__src[8 * a5];
    v20 = (char *)result[1];
LABEL_42:
    v49 = (char *)&v11[a5];
    v50 = &v20[-8 * a5];
    v51 = v20;
    if ((unint64_t)v50 < v8)
    {
      v51 = v20;
      do
      {
        if (v51)
          *(_QWORD *)v51 = *(_QWORD *)v50;
        v50 += 8;
        v51 += 8;
      }
      while ((unint64_t)v50 < v8);
    }
    result[1] = (uint64_t)v51;
    if (v20 != v49)
      result = (uint64_t *)memmove(&v20[-8 * ((v20 - v49) >> 3)], v11, v20 - v49);
    if (v18 != v6)
      return (uint64_t *)memmove(v11, v6, v18 - v6);
    return result;
  }
  v18 = &__src[8 * v17];
  if (v18 == a4)
  {
    v20 = (char *)result[1];
  }
  else
  {
    v19 = &__src[8 * v17];
    v20 = (char *)result[1];
    do
    {
      if (v20)
        *(_QWORD *)v20 = *(_QWORD *)v19;
      v19 += 8;
      v20 += 8;
    }
    while (v19 != a4);
  }
  result[1] = (uint64_t)v20;
  if ((uint64_t)(v8 - (_QWORD)v11) >= 1)
    goto LABEL_42;
  return result;
}

_OWORD *_ZNSt3__111make_sharedB8nn180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(_QWORD *a1)
{
  char *v2;
  _OWORD *result;
  __int128 v4;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E42DAB40;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_DWORD *)(v2 + 55) = 0;
  result = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v2 + 3) = result;
  if (result)
  {
    *(_QWORD *)&v4 = -1;
    *((_QWORD *)&v4 + 1) = -1;
    result[14] = v4;
    result[15] = v4;
    result[12] = v4;
    result[13] = v4;
    result[10] = v4;
    result[11] = v4;
    result[8] = v4;
    result[9] = v4;
    result[6] = v4;
    result[7] = v4;
    result[4] = v4;
    result[5] = v4;
    result[2] = v4;
    result[3] = v4;
    *result = v4;
    result[1] = v4;
  }
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_19F7DD458(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void **std::vector<md::LabelFeaturePlacementInfo>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::LabelExternalFeature::~LabelExternalFeature(md::LabelExternalFeature *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E4299088;
  v2 = (char *)this + 144;
  v3 = (char *)*((_QWORD *)this + 21);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 143) < 0)
  {
    operator delete(*((void **)this + 15));
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_13;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_13:
    v8 = (void **)*((_QWORD *)this + 6);
    if (!v8)
      goto LABEL_28;
LABEL_14:
    v9 = (void **)*((_QWORD *)this + 7);
    v10 = v8;
    if (v9 == v8)
    {
LABEL_27:
      *((_QWORD *)this + 7) = v8;
      operator delete(v10);
      goto LABEL_28;
    }
    while (1)
    {
      if (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        if ((*((char *)v9 - 25) & 0x80000000) == 0)
        {
LABEL_19:
          if ((*((char *)v9 - 49) & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_24;
        }
      }
      else if ((*((char *)v9 - 25) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(*(v9 - 6));
      if ((*((char *)v9 - 49) & 0x80000000) == 0)
      {
LABEL_20:
        if (*((char *)v9 - 73) < 0)
          goto LABEL_25;
        goto LABEL_16;
      }
LABEL_24:
      operator delete(*(v9 - 9));
      if (*((char *)v9 - 73) < 0)
LABEL_25:
        operator delete(*(v9 - 12));
LABEL_16:
      v9 -= 13;
      if (v9 == v8)
      {
        v10 = (void **)*((_QWORD *)this + 6);
        goto LABEL_27;
      }
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (void **)*((_QWORD *)this + 6);
  if (v8)
    goto LABEL_14;
LABEL_28:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

{
  md::LabelExternalFeature::~LabelExternalFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelExternalFeature::finalize(md::LabelExternalFeature *this)
{
  unsigned __int8 *v2;
  __int16 *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 6);
  v3 = (__int16 *)*((_QWORD *)this + 7);
  v4 = (_QWORD *)((char *)this + 48);
  v5 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == (__int16 *)v2)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*,false>(v2, v3, v6, 1);
  return std::vector<md::LabelExternalTextElement>::shrink_to_fit(v4);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*,false>(unsigned __int8 *a1, __int16 *a2, uint64_t a3, char a4)
{
  __int16 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  __int16 *v15;
  __int16 *v16;
  unsigned int v17;
  __int16 *v18;
  __int16 *v19;
  unsigned int v20;
  __int16 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  __int16 *v27;
  __int16 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  __int16 *v34;
  __int16 *v35;
  unsigned int v36;
  unsigned int v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  __int16 *v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  BOOL v61;
  __int16 v62;
  void **v63;
  void **v64;
  void **v65;
  void **v66;
  unsigned int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  __int16 *v70;
  __int16 *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  __int16 *v80;
  unsigned int v81;
  __int16 *v82;
  unsigned __int8 *v83;
  __int16 *v84;
  __int16 *v85;
  __int16 *v86;
  BOOL v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  __int16 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  __int128 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  void **v103;
  void **v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned __int8 v107;
  unsigned __int8 *v108;
  void **v109;
  void **v110;
  void **v111;
  void **v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  unsigned __int8 *v120;
  __int16 v121;
  unsigned __int8 *v122;
  unsigned int v123;
  unsigned int v124;
  BOOL v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  void **v128;
  __int128 v129;
  void **v130;
  __int128 v131;
  void **v132;
  __int128 v133;
  void **v134;
  __int128 v135;
  int64_t v136;
  unsigned __int8 *v137;
  uint64_t v139;
  unsigned __int8 v140;
  unsigned __int8 *v141;
  __int128 v142;
  unsigned __int8 *v143;
  uint64_t v144;
  void **v145;
  void **v146;
  __int128 v147;
  void **v148;
  __int128 v149;
  void **v150;
  void **v151;
  __int128 v152;
  void **v153;
  void **v154;
  void **v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  __int16 v163;
  unsigned __int8 v164;
  unsigned __int8 *v165;
  _WORD *v166;
  void **v167;
  __int128 v168;
  void **v169;
  __int128 v170;
  void **v171;
  __int128 v172;
  void **v173;
  __int128 v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  __int16 v177;
  unsigned __int8 *v178;
  uint64_t v179;
  unsigned __int8 v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  __int128 v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  void **v188;
  void **v189;
  void **v190;
  unsigned __int8 *v191;
  __int16 *v192;
  __int16 *v193;
  __int16 *v194;
  unsigned __int8 v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  unsigned __int8 v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  void *v209;
  unsigned __int8 v210;
  unsigned __int8 v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  unsigned __int8 v215;
  unsigned __int8 v216;
  unsigned __int8 v217;
  unsigned __int8 v218;
  uint64_t v219;
  unsigned __int8 v220;
  void *v221;
  uint64_t v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  uint64_t v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  unsigned __int8 v229;
  uint64_t v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  void *v233;
  unsigned __int8 v234;
  unsigned __int8 v235;
  unsigned __int8 v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 v239;
  unsigned __int8 v240;
  int64_t v241;
  unsigned __int8 v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  __int16 *v245;
  __int16 *v246;
  unsigned __int8 *v247;
  unsigned __int8 v248;
  _BYTE v249[22];
  _BYTE v250[15];
  _BYTE v251[15];
  _BYTE v252[15];
  _BYTE v253[15];
  _BYTE v254[22];
  _BYTE v255[15];
  _BYTE v256[15];
  _BYTE v257[15];
  _BYTE v258[15];
  _BYTE v259[15];
  _BYTE v260[22];
  _BYTE v261[15];
  _BYTE v262[15];
  _BYTE v263[15];
  _BYTE v264[15];
  _BYTE v265[15];
  _BYTE v266[22];
  _BYTE v267[15];
  _BYTE v268[15];
  _BYTE v269[15];
  _BYTE v270[15];
  _BYTE v271[22];
  _BYTE v272[22];
  _BYTE v273[22];
  _BYTE v274[22];
  _BYTE v275[22];
  _BYTE v276[22];

int64_t std::vector<md::LabelExternalTextElement>::shrink_to_fit(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t result;
  unint64_t v8;
  char *v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int64x2_t v16;
  _QWORD v17[2];
  int64x2_t v18;
  _QWORD *v19;

  v2 = a1 + 2;
  v3 = a1[2];
  v4 = *a1;
  v5 = a1[1];
  v6 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  result = v5 - *a1;
  v8 = 0x4EC4EC4EC4EC4EC5 * (result >> 3);
  if (v6 > v8)
  {
    v19 = v2;
    if (v5 == v4)
    {
      v9 = (char *)(8 * (result >> 3));
      v16 = vdupq_n_s64((unint64_t)v9);
      v15 = v4;
    }
    else
    {
      if (v8 >= 0x276276276276277)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v9 = (char *)operator new(result) + 8 * (result >> 3);
      v18.i64[0] = (uint64_t)v9;
      v18.i64[1] = (uint64_t)v9;
      do
      {
        v10 = *(_WORD *)(v5 - 104);
        v5 -= 104;
        *((_WORD *)v9 - 52) = v10;
        v9 -= 104;
        v11 = *(_OWORD *)(v5 + 8);
        *((_QWORD *)v9 + 3) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v9 + 8) = v11;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v12 = *(_OWORD *)(v5 + 32);
        *((_QWORD *)v9 + 6) = *(_QWORD *)(v5 + 48);
        *((_OWORD *)v9 + 2) = v12;
        *(_QWORD *)(v5 + 40) = 0;
        *(_QWORD *)(v5 + 48) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        v13 = *(_OWORD *)(v5 + 56);
        *((_QWORD *)v9 + 9) = *(_QWORD *)(v5 + 72);
        *(_OWORD *)(v9 + 56) = v13;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 56) = 0;
        v14 = *(_OWORD *)(v5 + 80);
        *((_QWORD *)v9 + 12) = *(_QWORD *)(v5 + 96);
        *((_OWORD *)v9 + 5) = v14;
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
      }
      while (v5 != v4);
      v15 = *a1;
      v4 = a1[1];
      v3 = a1[2];
      v16 = v18;
    }
    *a1 = v9;
    *(int64x2_t *)(a1 + 1) = v16;
    v18.i64[0] = v4;
    v18.i64[1] = v3;
    v17[0] = v15;
    v17[1] = v15;
    return std::__split_buffer<md::LabelExternalTextElement>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void std::swap[abi:nn180100]<md::LabelExternalTextElement>(__int16 *a1, __int16 *a2)
{
  __int16 v4;
  uint64_t v5;
  char v6;
  __int16 *v7;
  uint64_t v8;
  char v9;
  __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE v22[15];
  _BYTE v23[15];
  _BYTE v24[15];
  _BYTE v25[15];

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  *(_QWORD *)v25 = *((_QWORD *)a1 + 2);
  *(_QWORD *)&v25[7] = *(_QWORD *)((char *)a1 + 23);
  v6 = *((_BYTE *)a1 + 31);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 1) = 0;
  v7 = a1 + 16;
  v8 = *((_QWORD *)a1 + 4);
  *(_QWORD *)v24 = *((_QWORD *)a1 + 5);
  *(_QWORD *)&v24[7] = *(_QWORD *)((char *)a1 + 47);
  v9 = *((_BYTE *)a1 + 55);
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v10 = a1 + 28;
  v19 = *((_QWORD *)a1 + 7);
  *(_QWORD *)&v23[7] = *(_QWORD *)((char *)a1 + 71);
  *(_QWORD *)v23 = *((_QWORD *)a1 + 8);
  v18 = *((_BYTE *)a1 + 79);
  *((_QWORD *)a1 + 7) = 0;
  v12 = a1 + 40;
  v11 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = 0;
  *(_QWORD *)&v22[7] = *(_QWORD *)((char *)a1 + 95);
  v21 = v11;
  *(_QWORD *)v22 = *((_QWORD *)a1 + 11);
  v20 = *((_BYTE *)a1 + 103);
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 12) = 0;
  *a1 = *a2;
  v13 = *(_OWORD *)(a2 + 4);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 4) = v13;
  *((_BYTE *)a2 + 31) = 0;
  *((_BYTE *)a2 + 8) = 0;
  if (*((char *)a1 + 55) < 0)
    operator delete(*(void **)v7);
  v14 = *((_OWORD *)a2 + 2);
  *((_QWORD *)v7 + 2) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v7 = v14;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  v15 = (void **)(a2 + 28);
  if (*((char *)a1 + 79) < 0)
    operator delete(*(void **)v10);
  v16 = *(_OWORD *)v15;
  *((_QWORD *)v10 + 2) = *((_QWORD *)a2 + 9);
  *(_OWORD *)v10 = v16;
  *((_BYTE *)a2 + 79) = 0;
  *((_BYTE *)a2 + 56) = 0;
  if (*((char *)a1 + 103) < 0)
    operator delete(*(void **)v12);
  v17 = *((_OWORD *)a2 + 5);
  *((_QWORD *)v12 + 2) = *((_QWORD *)a2 + 12);
  *(_OWORD *)v12 = v17;
  *((_BYTE *)a2 + 103) = 0;
  *((_BYTE *)a2 + 80) = 0;
  *a2 = v4;
  if (*((char *)a2 + 31) < 0)
    operator delete(*((void **)a2 + 1));
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = *(_QWORD *)v25;
  *(_QWORD *)((char *)a2 + 23) = *(_QWORD *)&v25[7];
  *((_BYTE *)a2 + 31) = v6;
  if (*((char *)a2 + 55) < 0)
    operator delete(*((void **)a2 + 4));
  *((_QWORD *)a2 + 4) = v8;
  *((_QWORD *)a2 + 5) = *(_QWORD *)v24;
  *(_QWORD *)((char *)a2 + 47) = *(_QWORD *)&v24[7];
  *((_BYTE *)a2 + 55) = v9;
  if (*((char *)a2 + 79) < 0)
    operator delete(*v15);
  *((_QWORD *)a2 + 7) = v19;
  *((_QWORD *)a2 + 8) = *(_QWORD *)v23;
  *(_QWORD *)((char *)a2 + 71) = *(_QWORD *)&v23[7];
  *((_BYTE *)a2 + 79) = v18;
  if (*((char *)a2 + 103) < 0)
    operator delete(*((void **)a2 + 10));
  *((_QWORD *)a2 + 10) = v21;
  *((_QWORD *)a2 + 11) = *(_QWORD *)v22;
  *(_QWORD *)((char *)a2 + 95) = *(_QWORD *)&v22[7];
  *((_BYTE *)a2 + 103) = v20;
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4)
{
  __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  __int16 *v10;

  v7 = a1;
  v8 = *(unsigned __int8 *)a2;
  v9 = *(unsigned __int8 *)a3;
  if (v8 >= *(unsigned __int8 *)a1)
  {
    if (v9 < v8)
    {
      std::swap[abi:nn180100]<md::LabelExternalTextElement>(a2, a3);
      if (*(unsigned __int8 *)a2 < *(unsigned __int8 *)v7)
      {
        a1 = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1, v10);
      goto LABEL_10;
    }
    std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1, a2);
    if (*(unsigned __int8 *)a3 < *(unsigned __int8 *)a2)
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(unsigned __int8 *)a4 < *(unsigned __int8 *)a3)
  {
    std::swap[abi:nn180100]<md::LabelExternalTextElement>(a3, a4);
    if (*(unsigned __int8 *)a3 < *(unsigned __int8 *)a2)
    {
      std::swap[abi:nn180100]<md::LabelExternalTextElement>(a2, a3);
      if (*(unsigned __int8 *)a2 < *(unsigned __int8 *)v7)
        std::swap[abi:nn180100]<md::LabelExternalTextElement>(v7, a2);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>(__int16 *a1, __int16 *a2)
{
  __int16 *v2;
  uint64_t v4;
  _BOOL8 result;
  __int16 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  __int16 *v10;
  __int16 *v11;
  unsigned int v12;
  __int16 *v13;
  unsigned int v14;
  __int16 *v15;
  __int16 *v16;
  unsigned __int8 *v17;
  __int16 *v18;
  unsigned int v19;
  __int16 *v20;
  __int16 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void **v32;
  void **v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  void **v38;
  void **v39;
  void **v40;
  void **v41;
  unsigned __int8 *v42;
  unsigned __int8 v43;
  void *v44;
  unsigned __int8 v45;
  void *v46;
  unsigned __int8 v47;
  void *v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  _BYTE v51[22];
  _BYTE v52[15];
  _BYTE v53[15];
  _BYTE v54[15];

  v2 = a2;
  v4 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 52;
      if (*((unsigned __int8 *)a2 - 104) < *(unsigned __int8 *)a1)
        goto LABEL_11;
      return result;
    case 3:
      v13 = a1 + 52;
      v12 = *((unsigned __int8 *)a1 + 104);
      v6 = a2 - 52;
      v14 = *((unsigned __int8 *)a2 - 104);
      if (v12 >= *(unsigned __int8 *)a1)
      {
        if (v14 >= v12)
          return result;
        v20 = a1 + 52;
        v21 = a2 - 52;
LABEL_51:
        std::swap[abi:nn180100]<md::LabelExternalTextElement>(v20, v21);
        if (*((unsigned __int8 *)a1 + 104) < *(unsigned __int8 *)a1)
        {
          v15 = a1;
          v16 = v13;
LABEL_13:
          std::swap[abi:nn180100]<md::LabelExternalTextElement>(v15, v16);
        }
      }
      else
      {
        if (v14 < v12)
        {
LABEL_11:
          v15 = a1;
LABEL_12:
          v16 = v6;
          goto LABEL_13;
        }
        std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1, a1 + 52);
        if (*(unsigned __int8 *)v6 < *((unsigned __int8 *)a1 + 104))
        {
          v15 = a1 + 52;
          goto LABEL_12;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>(a1, a1 + 52, a1 + 104, a2 - 52);
      return 1;
    case 5:
      v13 = a1 + 52;
      v17 = (unsigned __int8 *)(a1 + 104);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>(a1, a1 + 52, a1 + 104, a1 + 156);
      v19 = *((unsigned __int8 *)v2 - 104);
      v18 = v2 - 52;
      if (v19 >= *((unsigned __int8 *)a1 + 312))
        return 1;
      std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1 + 156, v18);
      if (*((unsigned __int8 *)a1 + 312) >= *v17)
        return 1;
      std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1 + 104, a1 + 156);
      if (*v17 >= *(unsigned __int8 *)v13)
        return 1;
      v20 = a1 + 52;
      v21 = a1 + 104;
      goto LABEL_51;
    default:
      v8 = (unsigned __int8 *)(a1 + 104);
      v7 = *((unsigned __int8 *)a1 + 208);
      v9 = *((unsigned __int8 *)a1 + 104);
      if (v9 < *(unsigned __int8 *)a1)
      {
        v10 = a1;
        if (v7 >= v9)
        {
          std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1, a1 + 52);
          if (*((unsigned __int8 *)a1 + 208) >= *((unsigned __int8 *)a1 + 104))
            goto LABEL_23;
          v10 = a1 + 52;
        }
        v11 = a1 + 104;
        goto LABEL_22;
      }
      if (v7 < v9)
      {
        std::swap[abi:nn180100]<md::LabelExternalTextElement>(a1 + 52, a1 + 104);
        if (*((unsigned __int8 *)a1 + 104) < *(unsigned __int8 *)a1)
        {
          v10 = a1;
          v11 = a1 + 52;
LABEL_22:
          std::swap[abi:nn180100]<md::LabelExternalTextElement>(v10, v11);
        }
      }
LABEL_23:
      v22 = (unsigned __int8 *)(a1 + 156);
      if (a1 + 156 == v2)
        return 1;
      v23 = 0;
      v24 = 0;
      v42 = (unsigned __int8 *)v2;
      while (1)
      {
        if (*v22 < *v8)
        {
          v25 = *(_WORD *)v22;
          v44 = (void *)*((_QWORD *)v22 + 1);
          *(_QWORD *)v54 = *((_QWORD *)v22 + 2);
          *(_QWORD *)&v54[7] = *(_QWORD *)(v22 + 23);
          v43 = v22[31];
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = 0;
          v46 = (void *)*((_QWORD *)v22 + 4);
          *(_QWORD *)v53 = *((_QWORD *)v22 + 5);
          *(_QWORD *)&v53[7] = *(_QWORD *)(v22 + 47);
          v45 = v22[55];
          *((_QWORD *)v22 + 3) = 0;
          *((_QWORD *)v22 + 4) = 0;
          *((_QWORD *)v22 + 5) = 0;
          *((_QWORD *)v22 + 6) = 0;
          v48 = (void *)*((_QWORD *)v22 + 7);
          *(_QWORD *)&v52[7] = *(_QWORD *)(v22 + 71);
          *(_QWORD *)v52 = *((_QWORD *)v22 + 8);
          v47 = v22[79];
          *((_QWORD *)v22 + 7) = 0;
          *((_QWORD *)v22 + 8) = 0;
          *(_QWORD *)&v51[14] = *(_QWORD *)(v22 + 95);
          *(_OWORD *)v51 = *(_OWORD *)(v22 + 81);
          v49 = v22[103];
          v50 = v22[80];
          *((_QWORD *)v22 + 9) = 0;
          *((_QWORD *)v22 + 10) = 0;
          v26 = v23;
          *((_QWORD *)v22 + 11) = 0;
          *((_QWORD *)v22 + 12) = 0;
          while (1)
          {
            v27 = v26;
            v28 = (char *)a1 + v26;
            *(__int16 *)((char *)a1 + v26 + 312) = *(__int16 *)((char *)a1 + v26 + 208);
            v29 = (uint64_t)a1 + v26 + 320;
            if (*((char *)a1 + v26 + 343) < 0)
              operator delete(*(void **)v29);
            *(_OWORD *)v29 = *(_OWORD *)(v28 + 216);
            *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 + 29);
            v28[239] = 0;
            v28[216] = 0;
            v30 = v28 + 344;
            if (v28[367] < 0)
              operator delete(*(void **)v30);
            v31 = (char *)a1 + v27;
            *(_OWORD *)v30 = *(_OWORD *)((char *)a1 + v27 + 240);
            *((_QWORD *)v30 + 2) = *(_QWORD *)((char *)a1 + v27 + 256);
            v31[263] = 0;
            v31[240] = 0;
            v32 = (void **)((char *)a1 + v27 + 368);
            if (*((char *)a1 + v27 + 391) < 0)
              operator delete(*v32);
            *(_OWORD *)v32 = *(_OWORD *)(v31 + 264);
            *(_QWORD *)((char *)a1 + v27 + 384) = *((_QWORD *)v31 + 35);
            v31[287] = 0;
            v31[264] = 0;
            v33 = (void **)(v31 + 392);
            if (v31[415] < 0)
              operator delete(*v33);
            v34 = (unsigned __int8 *)a1 + v27;
            *(_OWORD *)v33 = *(_OWORD *)((char *)a1 + v27 + 288);
            *((_QWORD *)v31 + 51) = *(_QWORD *)((char *)a1 + v27 + 304);
            v34[311] = 0;
            v34[288] = 0;
            if (v27 == -208)
              break;
            v35 = v34[104];
            v26 = v27 - 104;
            if (v35 <= v25)
            {
              v36 = (uint64_t)a1 + v26 + 312;
              v37 = (char *)a1 + v27;
              v38 = (void **)((char *)a1 + v27 + 216);
              v39 = (void **)((char *)a1 + v27 + 288);
              v40 = (void **)(v37 + 240);
              v41 = (void **)(v37 + 264);
              goto LABEL_41;
            }
          }
          v38 = (void **)(v34 + 216);
          v39 = (void **)(v34 + 288);
          v40 = (void **)(v34 + 240);
          v41 = (void **)(v34 + 264);
          v36 = (uint64_t)a1;
LABEL_41:
          *(_WORD *)v36 = v25;
          if (*(char *)(v36 + 31) < 0)
            operator delete(*v38);
          *v38 = v44;
          *(_QWORD *)(v36 + 16) = *(_QWORD *)v54;
          *(_QWORD *)(v36 + 23) = *(_QWORD *)&v54[7];
          *(_BYTE *)(v36 + 31) = v43;
          if (*(char *)(v36 + 55) < 0)
            operator delete(*v40);
          *v40 = v46;
          *(_QWORD *)(v36 + 40) = *(_QWORD *)v53;
          *(_QWORD *)(v36 + 47) = *(_QWORD *)&v53[7];
          *(_BYTE *)(v36 + 55) = v45;
          v2 = (__int16 *)v42;
          if (*(char *)(v36 + 79) < 0)
            operator delete(*v41);
          *v41 = v48;
          *(_QWORD *)(v36 + 64) = *(_QWORD *)v52;
          *(_QWORD *)(v36 + 71) = *(_QWORD *)&v52[7];
          *(_BYTE *)(v36 + 79) = v47;
          if (*(char *)(v36 + 103) < 0)
            operator delete(*v39);
          *(_BYTE *)v39 = v50;
          *(_OWORD *)(v36 + 81) = *(_OWORD *)v51;
          *(_QWORD *)(v36 + 95) = *(_QWORD *)&v51[14];
          *(_BYTE *)(v36 + 103) = v49;
          if (++v24 == 8)
            return v22 + 104 == v42;
        }
        v8 = v22;
        v23 += 104;
        v22 += 104;
        if (v22 == (unsigned __int8 *)v2)
          return 1;
      }
  }
}

void md::LabelExternalTextElement::~LabelExternalTextElement(void **this)
{
  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if ((*((char *)this + 79) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 55) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[7]);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(this[1]);
    return;
  }
LABEL_8:
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_9;
}

void md::LabelExternalPointFeature::~LabelExternalPointFeature(md::LabelExternalPointFeature *this)
{
  md::LabelExternalPointFeature::~LabelExternalPointFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;

  *(_QWORD *)this = &off_1E42A1F90;
  v2 = *((_QWORD *)this + 53);
  if (v2)
  {
    v3 = *((_QWORD *)this + 54);
    v4 = (void *)*((_QWORD *)this + 53);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 53);
    }
    *((_QWORD *)this + 54) = v2;
    operator delete(v4);
  }
  v8 = (void *)*((_QWORD *)this + 50);
  if (v8)
  {
    *((_QWORD *)this + 51) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 47);
  if (v9)
  {
    v10 = *((_QWORD *)this + 48);
    v11 = (void *)*((_QWORD *)this + 47);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 48);
      do
      {
        v14 = *(void **)(v12 - 32);
        v12 -= 32;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 24) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 47);
    }
    *((_QWORD *)this + 48) = v9;
    operator delete(v11);
  }
  v15 = (void *)*((_QWORD *)this + 44);
  if (v15)
  {
    *((_QWORD *)this + 45) = v15;
    operator delete(v15);
  }
  *((_QWORD *)this + 41) = &off_1E42B5130;

  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v16)
    goto LABEL_28;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_28:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v19)
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v19)
LABEL_29:
    std::__shared_weak_count::__release_weak(v19);
LABEL_30:

  v20 = (void *)*((_QWORD *)this + 24);
  if (v20)
  {
    *((_QWORD *)this + 25) = v20;
    operator delete(v20);
  }
  md::LabelExternalFeature::~LabelExternalFeature(this);
}

void md::LabelExternalPointFeature::finalize(md::LabelExternalPointFeature *this)
{
  unsigned __int8 *v3;
  __int16 *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  char *v13;
  int64x2_t v14;
  int64x2_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _BYTE *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int16 v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  void *v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  char *v40;
  char *v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 6);
  v4 = (__int16 *)*((_QWORD *)this + 7);
  v5 = (_QWORD *)((char *)this + 48);
  v6 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v4 - (char *)v3) >> 3));
  if (v4 == (__int16 *)v3)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*,false>(v3, v4, v7, 1);
  std::vector<md::LabelExternalTextElement>::shrink_to_fit(v5);
  v8 = v5[41];
  v9 = v5[42];
  v10 = 126 - 2 * __clz((uint64_t)(v9 - v8) >> 5);
  v11 = (int64x2_t *)(v5 + 39);
  if (v9 == v8)
    v12 = 0;
  else
    v12 = v10;
  std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*,false>(v8, v9, v12, 1);
  v13 = (char *)v5[38];
  v14 = vsubq_s64(*v11, vdupq_n_s64((unint64_t)v13));
  v15 = vshrq_n_s64(v14, 2uLL);
  v16 = 0xCCCCCCCCCCCCCCCDLL * v15.i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * v15.i64[1] > v16)
  {
    v17 = (char *)v11->i64[0];
    if ((char *)v11->i64[0] == v13)
    {
      v18 = 20 * v16;
      v19 = 20 * v16;
    }
    else
    {
      if (v16 >= 0xCCCCCCCCCCCCCCDLL)
        goto LABEL_55;
      v18 = (uint64_t)operator new(v14.u64[0]) + 20 * v16;
      v19 = v18;
      do
      {
        v20 = *(_OWORD *)(v17 - 20);
        *(_DWORD *)(v19 - 4) = *((_DWORD *)v17 - 1);
        *(_OWORD *)(v19 - 20) = v20;
        v19 -= 20;
        v17 -= 20;
      }
      while (v17 != v13);
    }
    *((_QWORD *)this + 44) = v19;
    *((_QWORD *)this + 45) = v18;
    *((_QWORD *)this + 46) = v18;
    if (v13)
      operator delete(v13);
  }
  v21 = (_BYTE *)*((_QWORD *)this + 48);
  v22 = (char *)*((_QWORD *)this + 47);
  v23 = v21 - v22;
  v24 = (v21 - v22) >> 5;
  if (v24 < (uint64_t)(*((_QWORD *)this + 49) - (_QWORD)v22) >> 5)
  {
    if (v21 == v22)
    {
      *((_QWORD *)this + 47) = 32 * v24;
      *((_QWORD *)this + 48) = 32 * v24;
      *((_QWORD *)this + 49) = 32 * v24;
    }
    else
    {
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v25 = (char *)operator new(v23) + 32 * v24;
      v26 = v25;
      do
      {
        v27 = *((_OWORD *)v21 - 2);
        v21 -= 32;
        *((_OWORD *)v26 - 2) = v27;
        v26 -= 32;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v21 + 2);
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
        v28 = *((_WORD *)v21 + 12);
        v26[26] = v21[26];
        *((_WORD *)v26 + 12) = v28;
      }
      while (v21 != v22);
      v22 = (char *)*((_QWORD *)this + 47);
      v29 = (char *)*((_QWORD *)this + 48);
      *((_QWORD *)this + 47) = v26;
      *((_QWORD *)this + 48) = v25;
      *((_QWORD *)this + 49) = v25;
      if (v29 != v22)
      {
        v30 = v29;
        do
        {
          v32 = (void *)*((_QWORD *)v30 - 4);
          v30 -= 32;
          v31 = v32;
          if (v32)
          {
            *((_QWORD *)v29 - 3) = v31;
            operator delete(v31);
          }
          v29 = v30;
        }
        while (v30 != v22);
      }
    }
    if (v22)
      operator delete(v22);
  }
  v33 = (void *)*((_QWORD *)this + 50);
  v34 = v11[3];
  v35 = vsubq_s64(v34, vdupq_n_s64((unint64_t)v33));
  if (0xCCCCCCCCCCCCCCCDLL * v35.i64[1] > 0xCCCCCCCCCCCCCCCDLL * v35.i64[0])
  {
    v36 = v11[3].i64[0];
    if ((void *)v34.i64[0] == v33)
    {
      v37 = (char *)v35.i64[0];
      v38 = (char *)v35.i64[0];
    }
    else
    {
      if (0xCCCCCCCCCCCCCCCDLL * v35.i64[0] >= 0x3333333333333334)
        goto LABEL_55;
      v37 = (char *)operator new(v35.u64[0]) + v35.i64[0];
      v38 = v37;
      do
      {
        v39 = *(_BYTE *)(v36 - 5);
        v36 -= 5;
        *(v38 - 5) = v39;
        v38 -= 5;
        *(_DWORD *)(v38 + 1) = *(_DWORD *)(v36 + 1);
      }
      while ((void *)v36 != v33);
    }
    *((_QWORD *)this + 50) = v38;
    *((_QWORD *)this + 51) = v37;
    *((_QWORD *)this + 52) = v37;
    if (v33)
      operator delete(v33);
  }
  v40 = (char *)*((_QWORD *)this + 54);
  v41 = (char *)*((_QWORD *)this + 53);
  v42 = v40 - v41;
  v43 = (v40 - v41) >> 4;
  if (v43 >= (uint64_t)(*((_QWORD *)this + 55) - (_QWORD)v41) >> 4)
    return;
  if (v40 == v41)
  {
    *((_QWORD *)this + 53) = 16 * v43;
    *((_QWORD *)this + 54) = 16 * v43;
    *((_QWORD *)this + 55) = 16 * v43;
    goto LABEL_52;
  }
  if ((v42 & 0x8000000000000000) != 0)
LABEL_55:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v44 = (char *)operator new(v42) + 16 * v43;
  v45 = v44;
  do
  {
    v46 = *((_OWORD *)v40 - 1);
    v40 -= 16;
    *((_OWORD *)v45 - 1) = v46;
    v45 -= 16;
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
  }
  while (v40 != v41);
  v41 = (char *)*((_QWORD *)this + 53);
  v47 = (char *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 53) = v45;
  *((_QWORD *)this + 54) = v44;
  *((_QWORD *)this + 55) = v44;
  while (v47 != v41)
  {
    v48 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v47 -= 16;
  }
LABEL_52:
  if (v41)
    operator delete(v41);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int16 v15;
  unsigned int v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int16 v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  void **v32;
  void *v33;
  __int16 v34;
  void *v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  __int16 v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  void **v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  __int16 v58;
  void *v59;
  unint64_t v60;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _WORD *v73;
  void *v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  _WORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  void *v107;
  void *v108;
  __int16 v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  __int16 v115;
  unint64_t v116;
  __int16 v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  __int16 v122;
  unsigned int v123;
  void *v124;
  void *v125;
  void *v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int16 v145;
  char v146;
  __int16 v147;
  char v148;
  __int16 v149;
  char v150;
  __int16 v151;
  char v152;
  __int16 v153;
  char v154;

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v6;
  unsigned int v7;
  __int16 *v8;
  __int128 v9;
  uint64_t v10;
  _WORD *v11;
  char v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  _WORD *v17;
  _WORD *v18;
  char v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;
  __int16 v38;
  char v39;
  __int16 v40;
  char v41;
  __int16 v42;
  char v43;
  __int16 v44;
  char v45;

  v6 = *((unsigned __int8 *)a2 + 26);
  v7 = *((unsigned __int8 *)a3 + 26);
  if (v6 >= *((unsigned __int8 *)a1 + 26))
  {
    if (v7 < v6)
    {
      v14 = *a2;
      v15 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      v17 = (_WORD *)a2 + 12;
      v16 = *((_WORD *)a2 + 12);
      *(_QWORD *)a2 = 0;
      v36 = v16;
      v37 = *((_BYTE *)a2 + 26);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      v18 = (_WORD *)a3 + 12;
      v19 = *((_BYTE *)a3 + 26);
      *((_WORD *)a2 + 12) = *((_WORD *)a3 + 12);
      *((_BYTE *)a2 + 26) = v19;
      v20 = *(void **)a3;
      if (*(_QWORD *)a3)
      {
        *((_QWORD *)a3 + 1) = v20;
        v34 = v14;
        operator delete(v20);
        v14 = v34;
      }
      *a3 = v14;
      *((_QWORD *)a3 + 2) = v15;
      *v18 = v36;
      *((_BYTE *)a3 + 26) = v37;
      if (*((unsigned __int8 *)a2 + 26) < *((unsigned __int8 *)a1 + 26))
      {
        v21 = *a1;
        v22 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *(_QWORD *)a1 = 0;
        v38 = *((_WORD *)a1 + 12);
        v39 = *((_BYTE *)a1 + 26);
        *a1 = *a2;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v23 = *((_BYTE *)a2 + 26);
        *((_WORD *)a1 + 12) = *v17;
        *((_BYTE *)a1 + 26) = v23;
        v24 = *(void **)a2;
        if (*(_QWORD *)a2)
        {
          *((_QWORD *)a2 + 1) = v24;
          v35 = v21;
          operator delete(v24);
          v21 = v35;
        }
        *a2 = v21;
        *((_QWORD *)a2 + 2) = v22;
        *v17 = v38;
        *((_BYTE *)a2 + 26) = v39;
      }
    }
  }
  else
  {
    v8 = (__int16 *)a1 + 12;
    if (v7 >= v6)
    {
      v25 = *(_QWORD *)a1;
      v26 = *((_QWORD *)a1 + 1);
      v27 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      v42 = *v8;
      v43 = *((_BYTE *)a1 + 26);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      v28 = (__int16 *)a2 + 12;
      v29 = *((_BYTE *)a2 + 26);
      *v8 = *((_WORD *)a2 + 12);
      *((_BYTE *)a1 + 26) = v29;
      v30 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *((_QWORD *)a2 + 1) = v30;
        operator delete(v30);
      }
      *(_QWORD *)a2 = v25;
      *((_QWORD *)a2 + 1) = v26;
      *((_QWORD *)a2 + 2) = v27;
      *v28 = v42;
      *((_BYTE *)a2 + 26) = v43;
      if (*((unsigned __int8 *)a3 + 26) < *((unsigned __int8 *)a2 + 26))
      {
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v44 = *v28;
        v45 = *((_BYTE *)a2 + 26);
        *a2 = *a3;
        *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        v31 = *((_BYTE *)a3 + 26);
        *v28 = *((_WORD *)a3 + 12);
        *((_BYTE *)v28 + 2) = v31;
        v32 = *(void **)a3;
        if (*(_QWORD *)a3)
        {
          *((_QWORD *)a3 + 1) = v32;
          operator delete(v32);
        }
        *(_QWORD *)a3 = v25;
        *((_QWORD *)a3 + 1) = v26;
        *((_QWORD *)a3 + 2) = v27;
        *((_WORD *)a3 + 12) = v44;
        *((_BYTE *)a3 + 26) = v45;
      }
    }
    else
    {
      v9 = *a1;
      v10 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      v40 = *v8;
      v41 = *((_BYTE *)a1 + 26);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      v11 = (_WORD *)a3 + 12;
      v12 = *((_BYTE *)a3 + 26);
      *v8 = *((_WORD *)a3 + 12);
      *((_BYTE *)a1 + 26) = v12;
      v13 = *(void **)a3;
      if (*(_QWORD *)a3)
      {
        *((_QWORD *)a3 + 1) = v13;
        v33 = v9;
        operator delete(v13);
        v9 = v33;
      }
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v10;
      *v11 = v40;
      *((_BYTE *)a3 + 26) = v41;
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  __int16 v10;
  _WORD *v11;
  char v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  _WORD *v16;
  char v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  char v27;
  __int16 v28;
  char v29;
  __int16 v30;
  char v31;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(unsigned __int8 *)(a4 + 26) < *(unsigned __int8 *)(a3 + 26))
  {
    v8 = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v11 = (_WORD *)(a3 + 24);
    v10 = *(_WORD *)(a3 + 24);
    *(_QWORD *)a3 = 0;
    v26 = v10;
    v27 = *(_BYTE *)(a3 + 26);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v12 = *(_BYTE *)(a4 + 26);
    *(_WORD *)(a3 + 24) = *(_WORD *)(a4 + 24);
    *(_BYTE *)(a3 + 26) = v12;
    v13 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v13;
      v23 = v8;
      operator delete(v13);
      v8 = v23;
    }
    *(_OWORD *)a4 = v8;
    *(_QWORD *)(a4 + 16) = v9;
    *(_WORD *)(a4 + 24) = v26;
    *(_BYTE *)(a4 + 26) = v27;
    if (*(unsigned __int8 *)(a3 + 26) < *(unsigned __int8 *)(a2 + 26))
    {
      v14 = *(_OWORD *)a2;
      v15 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      v16 = (_WORD *)(a2 + 24);
      v28 = *(_WORD *)(a2 + 24);
      v29 = *(_BYTE *)(a2 + 26);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v17 = *(_BYTE *)(a3 + 26);
      *(_WORD *)(a2 + 24) = *v11;
      *(_BYTE *)(a2 + 26) = v17;
      v18 = *(void **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)(a3 + 8) = v18;
        v24 = v14;
        operator delete(v18);
        v14 = v24;
      }
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v15;
      *v11 = v28;
      *(_BYTE *)(a3 + 26) = v29;
      if (*(unsigned __int8 *)(a2 + 26) < *(unsigned __int8 *)(a1 + 26))
      {
        v19 = *(_OWORD *)a1;
        v20 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v30 = *(_WORD *)(a1 + 24);
        v31 = *(_BYTE *)(a1 + 26);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v21 = *(_BYTE *)(a2 + 26);
        *(_WORD *)(a1 + 24) = *v16;
        *(_BYTE *)(a1 + 26) = v21;
        v22 = *(void **)a2;
        if (*(_QWORD *)a2)
        {
          *(_QWORD *)(a2 + 8) = v22;
          v25 = v19;
          operator delete(v22);
          v19 = v25;
        }
        *(_OWORD *)a2 = v19;
        *(_QWORD *)(a2 + 16) = v20;
        *v16 = v30;
        *(_BYTE *)(a2 + 26) = v31;
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  _WORD *v13;
  char v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  _WORD *v18;
  char v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  _WORD *v23;
  char v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  char v35;
  __int16 v36;
  char v37;
  __int16 v38;
  char v39;
  __int16 v40;
  char v41;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(a1, a2, a3, a4);
  if (*(unsigned __int8 *)(a5 + 26) < *(unsigned __int8 *)(a4 + 26))
  {
    v10 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v13 = (_WORD *)(a4 + 24);
    v12 = *(_WORD *)(a4 + 24);
    *(_QWORD *)a4 = 0;
    v34 = v12;
    v35 = *(_BYTE *)(a4 + 26);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v14 = *(_BYTE *)(a5 + 26);
    *(_WORD *)(a4 + 24) = *(_WORD *)(a5 + 24);
    *(_BYTE *)(a4 + 26) = v14;
    v15 = *(void **)a5;
    if (*(_QWORD *)a5)
    {
      *(_QWORD *)(a5 + 8) = v15;
      v30 = v10;
      operator delete(v15);
      v10 = v30;
    }
    *(_OWORD *)a5 = v10;
    *(_QWORD *)(a5 + 16) = v11;
    *(_WORD *)(a5 + 24) = v34;
    *(_BYTE *)(a5 + 26) = v35;
    if (*(unsigned __int8 *)(a4 + 26) < *(unsigned __int8 *)(a3 + 26))
    {
      v16 = *(_OWORD *)a3;
      v17 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      v18 = (_WORD *)(a3 + 24);
      v36 = *(_WORD *)(a3 + 24);
      v37 = *(_BYTE *)(a3 + 26);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v19 = *(_BYTE *)(a4 + 26);
      *(_WORD *)(a3 + 24) = *v13;
      *(_BYTE *)(a3 + 26) = v19;
      v20 = *(void **)a4;
      if (*(_QWORD *)a4)
      {
        *(_QWORD *)(a4 + 8) = v20;
        v31 = v16;
        operator delete(v20);
        v16 = v31;
      }
      *(_OWORD *)a4 = v16;
      *(_QWORD *)(a4 + 16) = v17;
      *v13 = v36;
      *(_BYTE *)(a4 + 26) = v37;
      if (*(unsigned __int8 *)(a3 + 26) < *(unsigned __int8 *)(a2 + 26))
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        v23 = (_WORD *)(a2 + 24);
        v38 = *(_WORD *)(a2 + 24);
        v39 = *(_BYTE *)(a2 + 26);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        v24 = *(_BYTE *)(a3 + 26);
        *(_WORD *)(a2 + 24) = *v18;
        *(_BYTE *)(a2 + 26) = v24;
        v25 = *(void **)a3;
        if (*(_QWORD *)a3)
        {
          *(_QWORD *)(a3 + 8) = v25;
          v32 = v21;
          operator delete(v25);
          v21 = v32;
        }
        *(_OWORD *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v22;
        *v18 = v38;
        *(_BYTE *)(a3 + 26) = v39;
        if (*(unsigned __int8 *)(a2 + 26) < *(unsigned __int8 *)(a1 + 26))
        {
          v26 = *(_OWORD *)a1;
          v27 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v40 = *(_WORD *)(a1 + 24);
          v41 = *(_BYTE *)(a1 + 26);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          v28 = *(_BYTE *)(a2 + 26);
          *(_WORD *)(a1 + 24) = *v23;
          *(_BYTE *)(a1 + 26) = v28;
          v29 = *(void **)a2;
          if (*(_QWORD *)a2)
          {
            *(_QWORD *)(a2 + 8) = v29;
            v33 = v26;
            operator delete(v29);
            v26 = v33;
          }
          *(_OWORD *)a2 = v26;
          *(_QWORD *)(a2 + 16) = v27;
          *v23 = v40;
          *(_BYTE *)(a2 + 26) = v41;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  _WORD *v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  _WORD *v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int16 v29;
  char v30;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(unsigned __int8 *)(a2 - 6) < *(unsigned __int8 *)(a1 + 26))
      {
        v6 = (_QWORD *)(a2 - 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v29 = *(_WORD *)(a1 + 24);
        v30 = *(_BYTE *)(a1 + 26);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        v9 = (_WORD *)(a2 - 8);
        v10 = *(_BYTE *)(a2 - 6);
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 - 8);
        *(_BYTE *)(a1 + 26) = v10;
        v11 = *(void **)(a2 - 32);
        if (v11)
        {
          *(_QWORD *)(a2 - 24) = v11;
          v27 = v7;
          operator delete(v11);
          v7 = v27;
        }
        *(_OWORD *)(a2 - 32) = v7;
        *(_QWORD *)(a2 - 16) = v8;
        *v9 = v29;
        *(_BYTE *)(a2 - 6) = v30;
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v12 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v13 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(unsigned __int8 *)(v13 + 26);
    if (v16 < *(unsigned __int8 *)(v12 + 26))
    {
      v28 = *(_OWORD *)v13;
      v17 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v18 = v14;
      v19 = *(_WORD *)(v13 + 24);
      v20 = a1 + v14;
      while (1)
      {
        v21 = (void **)(v20 + 64);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(v20 + 64);
        *(_QWORD *)(v20 + 112) = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v20 + 64) = 0;
        *(_QWORD *)(v20 + 72) = 0;
        *(_QWORD *)(v20 + 80) = 0;
        *(_WORD *)(v20 + 120) = *(_WORD *)(v20 + 88);
        *(_BYTE *)(v20 + 122) = *(_BYTE *)(v20 + 90);
        if (v18 == -64)
        {
          v24 = (_WORD *)(a1 + 24);
          v25 = a1;
          v26 = *(void **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_8;
          goto LABEL_20;
        }
        v22 = a1 + v18;
        if (v16 >= *(unsigned __int8 *)(a1 + v18 + 58))
          break;
        v23 = *v21;
        v18 -= 32;
        v20 = a1 + v18;
        if (*v21)
        {
          *(_QWORD *)(v20 + 104) = v23;
          operator delete(v23);
          *(_QWORD *)(v20 + 104) = 0;
          *(_QWORD *)(v20 + 112) = 0;
        }
      }
      v25 = v22 + 64;
      v24 = (_WORD *)(v22 + 88);
      v26 = *(void **)(v22 + 64);
      if (!v26)
        goto LABEL_8;
LABEL_20:
      *(_QWORD *)(v25 + 8) = v26;
      operator delete(v26);
LABEL_8:
      *(_OWORD *)v25 = v28;
      *(_QWORD *)(v25 + 16) = v17;
      *v24 = v19;
      *(_BYTE *)(v25 + 26) = v16;
      if (++v15 == 8)
        return v13 + 32 == a2;
    }
    v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2)
      return 1;
  }
}

void std::__shared_ptr_emplace<md::LabelExternalPointFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalPointFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelExternalPointFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *md::LabelTransitRoute::generateTransitNodeFeatures(uint64_t **a1, md::LabelExternalPointFeature ***a2)
{
  uint64_t **v3;
  _QWORD **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  _WORD *v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  char *v75;
  unint64_t v76;
  char v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  int64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  _BYTE *v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned int v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  size_t v118;
  unsigned __int8 v119;
  _BYTE *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  __int128 v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  void *v156;
  void *v157;
  char v158;
  const char *v159;
  id v160;
  const char *v161;
  unint64_t shared_owners;
  size_t v163;
  size_t v164;
  _BYTE *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  size_t v171;
  _BYTE *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  void *v179;
  void *v180;
  char v181;
  const char *v182;
  id v183;
  const char *v184;
  unint64_t v185;
  size_t v186;
  size_t v187;
  _BYTE *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  uint64_t v192;
  size_t v193;
  size_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  void *v202;
  void *v203;
  char v204;
  const char *v205;
  id v206;
  const char *v207;
  unint64_t v208;
  size_t v209;
  size_t v210;
  void *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  uint64_t v215;
  size_t v216;
  size_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  void *v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  id v226;
  void *v227;
  void *v228;
  char v229;
  const char *v230;
  id v231;
  const char *v232;
  unint64_t v233;
  size_t v234;
  size_t v235;
  _BYTE *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  uint64_t v240;
  size_t v241;
  size_t v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  id v250;
  void *v251;
  void *v252;
  char v253;
  const char *v254;
  id v255;
  const char *v256;
  unint64_t v257;
  size_t v258;
  size_t v259;
  _BYTE *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  uint64_t v264;
  size_t v265;
  size_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  id v270;
  id v271;
  const char *v272;
  id v273;
  id v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  std::__shared_weak_count_vtbl *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  unint64_t v281;
  unint64_t v282;
  BOOL v283;
  unint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t i;
  char v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  __int16 v296;
  void *v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  unint64_t j;
  __int16 v304;
  unint64_t v305;
  char *v306;
  void *v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  char *v311;
  char *v312;
  unint64_t k;
  __int16 v314;
  unint64_t v315;
  char *v316;
  void *v317;
  unint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  unint64_t m;
  __int16 v323;
  unint64_t v324;
  char *v325;
  void *v326;
  unint64_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  unint64_t n;
  __int16 v332;
  unint64_t v333;
  void *v334;
  unint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  unint64_t ii;
  __int16 v340;
  char *v341;
  std::__shared_weak_count_vtbl *v342;
  _WORD *v343;
  size_t v344;
  unint64_t v345;
  char *v346;
  _WORD *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  id v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  id v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  id v360;
  void *v361;
  void *v362;
  id v363;
  char *v364;
  unsigned __int8 v365;
  uint64_t v366;
  _QWORD *v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  char *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _BOOL4 v381;
  __n128 *v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  __n128 *v387;
  unint64_t *v388;
  unint64_t v389;
  __n128 *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  __n128 *v395;
  __n128 *v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t *v399;
  unint64_t v400;
  __n128 *v401;
  _BOOL4 v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  char *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  __n128 *v434;
  unint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  __n128 *v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  uint64_t v442;
  __n128 *v443;
  unint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  __n128 *v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t v463;
  md::LabelExternalPointFeature **v464;
  unint64_t v465;
  md::LabelExternalPointFeature **v466;
  md::LabelExternalPointFeature ***v467;
  unint64_t *v468;
  md::LabelExternalPointFeature **v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  char *v474;
  char *v475;
  md::LabelExternalPointFeature **v476;
  unint64_t v477;
  __int128 v478;
  md::LabelExternalPointFeature **v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  __int128 v486;
  uint64_t *v487;
  uint64_t v488;
  id v489;
  void *v490;
  id *v491;
  void *v492;
  md::LabelExternalPointFeature *v493;
  uint64_t *v494;
  int v495;
  md::LabelTransitRoute *v497;
  uint64_t v498;
  id v499;
  void *v500;
  id v501;
  id v502;
  uint64_t v503;
  uint64_t v504;
  void *v505;
  void *v506;
  uint64_t v507;
  id v508;
  id v509;
  id v510;
  id v511;
  uint64_t v512;
  id obj;
  id obja;
  id objb;
  id objc;
  id objd;
  id obje;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  unint64_t *p_shared_owners;
  void *v526;
  uint64_t *v527;
  std::__shared_weak_count *v528;
  __n128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __n128 v533;
  __n128 v534;
  char *v535;
  std::__shared_weak_count *v536;
  __n128 v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  void *v542;
  _QWORD v543[3];
  int8x16x2_t v544;
  int8x16x2_t v545;
  int8x16x2_t v546;

  v543[1] = *MEMORY[0x1E0C80C00];
  v3 = a1 + 20;
  v4 = a1 + 19;
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)(a1 + 19), a1[20]);
  v3[2] = 0;
  *(v3 - 1) = (uint64_t *)v3;
  *v3 = 0;
  v5 = *(v3 - 16);
  objc_msgSend(v5, "stations");
  v526 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = a1[11];
  v7 = a1[12];
  v497 = (md::LabelTransitRoute *)a1;
  if (v6 == v7)
    goto LABEL_51;
  v8 = 0;
  v9 = 1;
  do
  {
    v10 = *v6;
    v11 = *(id *)(*v6 + 16);
    v12 = v11;
    if (v11 && objc_msgSend(v11, "hasStationIndex"))
    {
      objc_msgSend(v526, "objectAtIndexedSubscript:", objc_msgSend(v12, "stationIndex"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v13, "hasMuid"))
      {
        v14 = objc_msgSend(v13, "muid");

        if ((v9 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        v14 = 0;

        if ((v9 & 1) != 0)
        {
LABEL_12:
          if (!v14)
            goto LABEL_4;
          v15 = *v3;
          v16 = v3;
          v17 = v3;
          if (*v3)
          {
            while (1)
            {
              while (1)
              {
                v17 = (uint64_t **)v15;
                v18 = v15[4];
                if (v14 >= v18)
                  break;
                v15 = *v17;
                v16 = v17;
                if (!*v17)
                  goto LABEL_20;
              }
              if (v18 >= v14)
                break;
              v15 = v17[1];
              if (!v15)
              {
                v16 = v17 + 1;
                goto LABEL_20;
              }
            }
            v9 = 0;
          }
          else
          {
LABEL_20:
            v19 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v497 + 21) + 16))(*((_QWORD *)v497 + 21), 40, 8);
            v19[4] = v14;
            *v19 = 0;
            v19[1] = 0;
            v19[2] = (uint64_t)v17;
            *v16 = v19;
            v20 = (_QWORD *)**v4;
            if (v20)
            {
              *v4 = v20;
              v19 = *v16;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v497 + 20), v19);
            v9 = 0;
            ++*((_QWORD *)v497 + 22);
          }
          goto LABEL_5;
        }
      }
    }
    else
    {
      v14 = 0;
      if ((v9 & 1) != 0)
        goto LABEL_12;
    }
    if ((*(unsigned __int8 *)(v10 + 109) | 2) == 6)
    {
      if (v8)
      {
        v21 = *v3;
        v22 = v3;
        v23 = v3;
        if (*v3)
        {
          while (1)
          {
            while (1)
            {
              v23 = (uint64_t **)v21;
              v24 = v21[4];
              if (v8 >= v24)
                break;
              v21 = *v23;
              v22 = v23;
              if (!*v23)
                goto LABEL_33;
            }
            if (v24 >= v8)
              break;
            v21 = v23[1];
            if (!v21)
            {
              v22 = v23 + 1;
              goto LABEL_33;
            }
          }
          v8 = 0;
        }
        else
        {
LABEL_33:
          v25 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v497 + 21) + 16))(*((_QWORD *)v497 + 21), 40, 8);
          v25[4] = v8;
          *v25 = 0;
          v25[1] = 0;
          v25[2] = (uint64_t)v23;
          *v22 = v25;
          v26 = (_QWORD *)**v4;
          if (v26)
          {
            *v4 = v26;
            v25 = *v22;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v497 + 20), v25);
          v8 = 0;
          ++*((_QWORD *)v497 + 22);
        }
      }
LABEL_4:
      v9 = 1;
      goto LABEL_5;
    }
    v9 = 0;
    if (v14)
      v8 = v14;
LABEL_5:

    ++v6;
  }
  while (v6 != v7);
  if (v8)
  {
    v27 = *v3;
    v28 = v3;
    if (*v3)
    {
      while (1)
      {
        while (1)
        {
          v28 = (uint64_t **)v27;
          v29 = v27[4];
          if (v8 >= v29)
            break;
          v27 = *v28;
          v3 = v28;
          if (!*v28)
            goto LABEL_48;
        }
        if (v29 >= v8)
          break;
        v27 = v28[1];
        if (!v27)
        {
          v3 = v28 + 1;
          goto LABEL_48;
        }
      }
    }
    else
    {
LABEL_48:
      v30 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v497 + 21) + 16))(*((_QWORD *)v497 + 21), 40, 8);
      v30[4] = v8;
      *v30 = 0;
      v30[1] = 0;
      v30[2] = (uint64_t)v28;
      *v3 = v30;
      v31 = (_QWORD *)**v4;
      if (v31)
      {
        *v4 = v31;
        v30 = *v3;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v497 + 20), v30);
      ++*((_QWORD *)v497 + 22);
    }
  }
LABEL_51:

  v32 = (uint64_t *)*((_QWORD *)v497 + 11);
  v33 = (uint64_t *)*((_QWORD *)v497 + 12);
  if (v32 == v33)
    return md::LabelTransitRoute::updateTransitNodesRouteState(v497);
  v34 = 0;
  v35 = 0xFFFFFFFFLL;
  v36 = -1;
  while (2)
  {
    v38 = *v32;
    v37 = *(unsigned int *)(*v32 + 56);
    v39 = *((_QWORD *)v497 + 7);
    v40 = *(_QWORD *)(v39 + 8 * (int)v37);
    if (v40)
      v41 = v40 + 8;
    else
      v41 = 0;
    v42 = *(id *)(v41 + 8);
    v43 = objc_msgSend(v42, "type");

    if (v43 != 6)
      goto LABEL_54;
    if ((_DWORD)v37 == (_DWORD)v35)
    {
      v36 = v34;
LABEL_54:
      v37 = v35;
      goto LABEL_55;
    }
    *(_BYTE *)(v38 + 69) = 1;
    if ((_DWORD)v35 != -1)
    {
      v44 = *(_QWORD *)(v39 + 8 * (int)v37);
      v45 = v44 ? v44 + 8 : 0;
      if (*(_BYTE *)(v45 + 70))
      {
        v46 = *((_QWORD *)v497 + 11);
        if ((_DWORD)v35 == (_DWORD)v37 - 1)
        {
          v47 = *(_QWORD *)(v46 + 8 * v36);
          goto LABEL_68;
        }
        v47 = *(_QWORD *)(v46 + 8 * v36);
        v50 = v47 + 8;
        if (!v47)
          v50 = 0;
        v51 = *((double *)v497 + 26);
        if (vabdd_f64(*(double *)(v38 + 40), *(double *)(v50 + 32)) < v51
          && vabdd_f64(*(double *)(v38 + 48), *(double *)(v50 + 40)) < v51)
        {
LABEL_68:
          if (v47)
            v48 = v47 + 8;
          else
            v48 = 0;
          *(_BYTE *)(v48 + 90) = 1;
          *(_DWORD *)(v48 + 92) = v35;
          *(_DWORD *)(v48 + 96) = v37;
          if (*v32)
            v49 = *v32 + 8;
          else
            v49 = 0;
          *(_BYTE *)(v49 + 90) = 1;
          *(_DWORD *)(v49 + 92) = v35;
          *(_DWORD *)(v49 + 96) = v37;
        }
      }
    }
    v36 = v34;
LABEL_55:
    ++v32;
    ++v34;
    v35 = v37;
    if (v32 != v33)
      continue;
    break;
  }
  v53 = (uint64_t *)*((_QWORD *)v497 + 11);
  v52 = (uint64_t *)*((_QWORD *)v497 + 12);
  if (v53 == v52)
    return md::LabelTransitRoute::updateTransitNodesRouteState(v497);
  v527 = (uint64_t *)*((_QWORD *)v497 + 12);
  while (2)
  {
    v54 = *v53;
    if (*(_BYTE *)(*v53 + 110))
      v55 = 1;
    else
      v55 = *(_BYTE *)(*v53 + 99) == 0;
    if (v55)
      goto LABEL_83;
    v56 = *(_DWORD *)(v54 + 64);
    LODWORD(v535) = v56 + 1;
    v534.n128_u32[0] = v56 - 1;
    v533.n128_u16[0] = 0;
    {
      v140 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v140, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v57 = mdm::Allocator::instance(void)::alloc;
    if (md::LabelTransitRoute::findStopHeadingRange((uint64_t)v497, (double *)(v54 + 40), &v535, 1, (char *)&v533))
    {
      v58 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, 2, 1);
      v59 = v58;
      v60 = (unint64_t)(v58 + 2);
      if (v58)
        *(_WORD *)v58 = v533.n128_u16[0];
    }
    else
    {
      v60 = 0;
      v59 = 0;
    }
    if (md::LabelTransitRoute::findStopHeadingRange((uint64_t)v497, (double *)(v54 + 40), &v534, -1, (char *)&v533))
    {
      v61 = v60 - (_QWORD)v59;
      if ((uint64_t)(v60 - (_QWORD)v59) <= -3)
        abort();
      v62 = v61 >> 1;
      if (v61 <= (unint64_t)((v61 >> 1) + 1))
        v63 = v62 + 1;
      else
        v63 = v60 - (_QWORD)v59;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFELL)
        v64 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
      {
        v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, 2 * v64, 1);
        v66 = (_WORD *)(v65 + 2 * v62);
        v64 = v65 + 2 * v64;
        if (v65)
          *v66 = v533.n128_u16[0];
      }
      else
      {
        v66 = (_WORD *)(2 * v62);
      }
      v68 = (unsigned __int8 *)v60;
      v69 = v66;
      if ((unsigned __int8 *)v60 != v59)
      {
        v70 = v60 - (_QWORD)v59 - 2;
        v71 = (unsigned __int8 *)v60;
        v69 = v66;
        if (v70 < 0x1E)
          goto LABEL_728;
        v72 = v70 >> 1;
        if ((unint64_t)&v66[-v72 - 1] < v60)
        {
          v71 = (unsigned __int8 *)v60;
          v69 = v66;
          if (v60 - 2 * v72 - 2 < (unint64_t)v66)
            goto LABEL_728;
        }
        v73 = v72 + 1;
        v71 = (unsigned __int8 *)(v60 - 2 * (v73 & 0xFFFFFFFFFFFFFFF0));
        v74 = (const char *)(v60 - 32);
        v75 = (char *)(v66 - 16);
        v76 = v73 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v544 = vld2q_s8(v74);
          v74 -= 32;
          vst2q_s8(v75, v544);
          v75 -= 32;
          v76 -= 16;
        }
        while (v76);
        v69 = &v66[-(v73 & 0xFFFFFFFFFFFFFFF0)];
        if (v73 != (v73 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_728:
          do
          {
            v77 = *(v71 - 2);
            v71 -= 2;
            *((_BYTE *)v69-- - 2) = v77;
            *((_BYTE *)v69 + 1) = v71[1];
          }
          while (v71 != v59);
        }
        v68 = v59;
      }
      v67 = (unsigned __int8 *)(v66 + 1);
      if (v68)
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(_QWORD *)v57 + 40))(v57, v68, v60 - (_QWORD)v68);
      v60 = v64;
      v59 = (unsigned __int8 *)v69;
    }
    else
    {
      v67 = (unsigned __int8 *)v60;
    }
    if (!md::LabelTransitRoute::findRouteHeadingRange((uint64_t)v497, (double *)(v54 + 40), (int)v535, 1, (char *)&v533))
    {
      v78 = v67;
      goto LABEL_143;
    }
    if ((unint64_t)v67 >= v60)
    {
      v79 = v67 - v59;
      if (v67 - v59 <= -3)
        abort();
      v80 = v79 >> 1;
      if (v60 - (unint64_t)v59 <= (v79 >> 1) + 1)
        v81 = v80 + 1;
      else
        v81 = v60 - (_QWORD)v59;
      if (v60 - (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFELL)
        v82 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v82 = v81;
      if (v82)
      {
        v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, 2 * v82, 1);
        v84 = (unsigned __int8 *)(v83 + 2 * v80);
        v82 = v83 + 2 * v82;
        if (v83)
          *(_WORD *)v84 = v533.n128_u16[0];
        v85 = v67 - v59;
        if (v67 != v59)
        {
LABEL_135:
          v86 = v85 - 2;
          if (v86 >= 0x1E && ((v87 = v86 >> 1, &v84[-2 * v87 - 2] >= v67) || &v67[-2 * v87 - 2] >= v84))
          {
            v130 = v87 + 1;
            v131 = (v87 + 1) & 0xFFFFFFFFFFFFFFF0;
            v88 = &v67[-2 * v131];
            v132 = (const char *)(v67 - 32);
            v133 = (char *)(v84 - 32);
            v134 = v131;
            do
            {
              v545 = vld2q_s8(v132);
              v132 -= 32;
              vst2q_s8(v133, v545);
              v133 -= 32;
              v134 -= 16;
            }
            while (v134);
            v89 = &v84[-2 * v131];
            if (v130 == v131)
            {
LABEL_140:
              v67 = v59;
              v59 = v89;
              v78 = v84 + 2;
              if (!v67)
              {
LABEL_142:
                v60 = v82;
                goto LABEL_143;
              }
LABEL_141:
              (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(_QWORD *)v57 + 40))(v57, v67, v60 - (_QWORD)v67);
              goto LABEL_142;
            }
          }
          else
          {
            v88 = v67;
            v89 = v84;
          }
          do
          {
            v90 = *(v88 - 2);
            v88 -= 2;
            *(v89 - 2) = v90;
            v89 -= 2;
            v89[1] = v88[1];
          }
          while (v88 != v59);
          goto LABEL_140;
        }
      }
      else
      {
        v84 = (unsigned __int8 *)(2 * v80);
        v85 = v67 - v59;
        if (v67 != v59)
          goto LABEL_135;
      }
      v59 = v84;
      v78 = v84 + 2;
      if (!v67)
        goto LABEL_142;
      goto LABEL_141;
    }
    if (v67)
      *(_WORD *)v67 = v533.n128_u16[0];
    v78 = v67 + 2;
LABEL_143:
    if (!md::LabelTransitRoute::findRouteHeadingRange((uint64_t)v497, (double *)(v54 + 40), v534.n128_i32[0], -1, (char *)&v533))
    {
      v91 = v78;
      goto LABEL_168;
    }
    if ((unint64_t)v78 >= v60)
    {
      v92 = v78 - v59;
      if (v78 - v59 <= -3)
        abort();
      v93 = v92 >> 1;
      if (v60 - (unint64_t)v59 <= (v92 >> 1) + 1)
        v94 = v93 + 1;
      else
        v94 = v60 - (_QWORD)v59;
      if (v60 - (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFELL)
        v95 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v95 = v94;
      if (v95)
      {
        v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, 2 * v95, 1);
        v97 = (unsigned __int8 *)(v96 + 2 * v93);
        v95 = v96 + 2 * v95;
        if (v96)
          *(_WORD *)v97 = v533.n128_u16[0];
        v98 = v78 - v59;
        if (v78 != v59)
        {
LABEL_160:
          v99 = v98 - 2;
          if (v99 >= 0x1E && ((v100 = v99 >> 1, &v97[-2 * v100 - 2] >= v78) || &v78[-2 * v100 - 2] >= v97))
          {
            v135 = v100 + 1;
            v136 = (v100 + 1) & 0xFFFFFFFFFFFFFFF0;
            v101 = &v78[-2 * v136];
            v137 = (const char *)(v78 - 32);
            v138 = (char *)(v97 - 32);
            v139 = v136;
            do
            {
              v546 = vld2q_s8(v137);
              v137 -= 32;
              vst2q_s8(v138, v546);
              v138 -= 32;
              v139 -= 16;
            }
            while (v139);
            v102 = &v97[-2 * v136];
            if (v135 == v136)
            {
LABEL_165:
              v78 = v59;
              v59 = v102;
              v91 = v97 + 2;
              if (!v78)
              {
LABEL_167:
                v60 = v95;
                goto LABEL_168;
              }
LABEL_166:
              (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(_QWORD *)v57 + 40))(v57, v78, v60 - (_QWORD)v78);
              goto LABEL_167;
            }
          }
          else
          {
            v101 = v78;
            v102 = v97;
          }
          do
          {
            v103 = *(v101 - 2);
            v101 -= 2;
            *(v102 - 2) = v103;
            v102 -= 2;
            v102[1] = v101[1];
          }
          while (v101 != v59);
          goto LABEL_165;
        }
      }
      else
      {
        v97 = (unsigned __int8 *)(2 * v93);
        v98 = v78 - v59;
        if (v78 != v59)
          goto LABEL_160;
      }
      v59 = v97;
      v91 = v97 + 2;
      if (!v78)
        goto LABEL_167;
      goto LABEL_166;
    }
    if (v78)
      *(_WORD *)v78 = v533.n128_u16[0];
    v91 = v78 + 2;
LABEL_168:
    v104 = (v91 - v59) >> 1;
    v105 = 126 - 2 * __clz(v104);
    if (v91 == v59)
      v106 = 0;
    else
      v106 = v105;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *,false>((unint64_t)v59, v91, v106, 1);
    if (v91 != v59)
    {
      v107 = 0;
      while (1)
      {
        if (v107 + 1 == v104)
          v109 = 0;
        else
          v109 = v107 + 1;
        if (v107 != v109)
        {
          v110 = &v59[2 * v107];
          v111 = &v59[2 * v109];
          v112 = v110 + 1;
          v113 = *v110;
          v114 = *v111;
          v115 = (*v111 - *v110);
          if (v115 > (v111[1] - *v110))
          {
            v116 = v111[1] - *v110;
            if ((v110[1] - *v110) > v116)
              v116 = v110[1] - *v110;
            *v112 = v116 + v113;
            *v110 = v114;
LABEL_187:
            if (v111 + 2 == v91)
            {
              v91 = &v59[2 * v109];
            }
            else
            {
              v118 = ((v91 - v111 - 4) & 0xFFFFFFFFFFFFFFFELL) + 2;
              memmove(v111, v111 + 2, v118);
              v91 = &v59[2 * v109 + v118];
            }
            goto LABEL_174;
          }
          if (v115 <= (v110[1] - *v110))
          {
            v117 = v111[1] - *v110;
            if ((v110[1] - *v110) > v117)
              v117 = v110[1] - *v110;
            *v112 = v117 + v113;
            goto LABEL_187;
          }
        }
        ++v107;
LABEL_174:
        v108 = v91 - v59;
        v104 = (v91 - v59) >> 1;
        if (v107 >= v104)
          goto LABEL_191;
      }
    }
    v108 = 0;
LABEL_191:
    if (v59 != v91)
    {
      v537 = 0uLL;
      v538 = 0;
      {
        v141 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v141, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v539 = mdm::Allocator::instance(void)::alloc;
      if (v108 == 2)
      {
        populatePlacementsInArc(v59[1], (uint64_t *)&v537, (float)((float)(v59[1] - *v59) * -1.4118) + 360.0);
      }
      else
      {
        v125 = 0;
        v126 = v59 + 1;
        while (v104 != v125)
        {
          v127 = v125 + 1;
          if (v104 - 1 == v125)
            v128 = 0;
          else
            v128 = v125 + 1;
          v129 = *v126;
          v126 += 2;
          populatePlacementsInArc(v129, (uint64_t *)&v537, (float)(v59[2 * v128] - v129) * 1.4118);
          v125 = v127;
        }
      }
      v120 = (_BYTE *)v537.n128_u64[0];
      if (v537.n128_u64[0] != v537.n128_u64[1])
      {
        LOBYTE(v540) = -32;
        v529.n128_u64[0] = (unint64_t)&v540;
        v121 = (uint64_t)(v537.n128_u64[1] - v537.n128_u64[0]) >> 3;
        std::__introsort<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *,false>((float *)v537.n128_u64[0], (float *)v537.n128_u64[1], (char **)&v529, 126 - 2 * __clz(v121), 1);
        v122 = 4;
        if (v121 < 4)
          v122 = v121;
        if (v122)
        {
          *(_BYTE *)(v54 + 71) = *v120;
          if (v122 != 1)
          {
            v123 = 0;
            v124 = (float *)(v120 + 12);
            while (*v124 >= 35.0)
            {
              *(_BYTE *)(v54 + 72 + v123++) = *((_BYTE *)v124 - 4);
              v124 += 2;
              if (v122 - 1 == v123)
                goto LABEL_217;
            }
            LOBYTE(v122) = v123 + 1;
          }
        }
LABEL_217:
        *(_BYTE *)(v54 + 70) = v122;
      }
      if (v120)
        (*(void (**)(uint64_t, _BYTE *, int64_t))(*(_QWORD *)v539 + 40))(v539, v120, v538 - v120);
    }
    if (v59)
      (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(_QWORD *)v57 + 40))(v57, v59, v60 - (_QWORD)v59);
    v52 = v527;
LABEL_83:
    if (++v53 != v52)
      continue;
    break;
  }
  v142 = (uint64_t *)*((_QWORD *)v497 + 11);
  v487 = (uint64_t *)*((_QWORD *)v497 + 12);
  if (v142 == v487)
    return md::LabelTransitRoute::updateTransitNodesRouteState(v497);
  v495 = 0;
  while (2)
  {
    ++v495;
    v494 = v142;
    v498 = *v142;
    if (!*(_BYTE *)(*v142 + 99))
      goto LABEL_236;
    v528 = (std::__shared_weak_count *)operator new(0x1D8uLL);
    v528->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v528->__shared_owners_;
    v528->__shared_weak_owners_ = 0;
    v528->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD188;
    v491 = (id *)(v498 + 8);
    v493 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v528[1]);
    *(_QWORD *)&v143 = v493;
    *((_QWORD *)&v143 + 1) = v528;
    v486 = v143;
    v144 = (unint64_t *)&v528->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
    v146 = *(std::__shared_weak_count **)(v498 + 88);
    *(_QWORD *)(v498 + 80) = v493;
    *(_QWORD *)(v498 + 88) = v528;
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    LOBYTE(v528[8].__shared_owners_) = 1;
    v149 = v528[9].__vftable;
    if ((std::__shared_weak_count_vtbl *)v528[9].__shared_owners_ != v149)
    {
      v149->__get_deleter = *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(v498 + 40);
      v149->__on_zero_shared_weak = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v498 + 48);
      *(_WORD *)((char *)&v149[1].~__shared_weak_count + 5) = 257;
    }
    HIDWORD(v528[4].__shared_owners_) = v495;
    v150 = *(void **)(v498 + 16);
    if (v150)
    {
      v489 = v150;
      v488 = objc_msgSend(v489, "muid");
      v529 = 0u;
      v530 = 0u;
      v531 = 0u;
      v532 = 0u;
      objc_msgSend(v489, "zoomNames");
      v151 = (id)objc_claimAutoreleasedReturnValue();
      v152 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
      if (!v152)
        goto LABEL_425;
      v153 = *(_QWORD *)v530;
      obj = v151;
      v504 = *(_QWORD *)v530;
      while (1)
      {
        v154 = 0;
        v519 = v152;
        do
        {
          if (*(_QWORD *)v530 != v153)
            objc_enumerationMutation(obj);
          v155 = *(id *)(v529.n128_u64[1] + 8 * v154);
          objc_msgSend(v155, "labelText");
          v156 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v156, "length"))
          {
            objc_msgSend(v155, "labelLanguage");
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            v158 = objc_msgSend(v155, "minZoom");
            v159 = (const char *)objc_msgSend(objc_retainAutorelease(v156), "UTF8String");
            v160 = objc_retainAutorelease(v157);
            v161 = (const char *)objc_msgSend(v160, "UTF8String");
            shared_owners = v528[3].__shared_owners_;
            if (shared_owners < v528[3].__shared_weak_owners_)
            {
              *(_BYTE *)shared_owners = v158;
              *(_BYTE *)(shared_owners + 1) = 0;
              if (!v159)
                v159 = "";
              v163 = strlen(v159);
              if (v163 > 0x7FFFFFFFFFFFFFF7)
                abort();
              v164 = v163;
              v165 = (_BYTE *)(shared_owners + 8);
              if (v163 >= 0x17)
              {
                v499 = v155;
                v168 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v163 | 7) != 0x17)
                  v168 = v163 | 7;
                v169 = v168 + 1;
                v165 = operator new(v168 + 1);
                *(_QWORD *)(shared_owners + 16) = v164;
                *(_QWORD *)(shared_owners + 24) = v169 | 0x8000000000000000;
                *(_QWORD *)(shared_owners + 8) = v165;
                v155 = v499;
              }
              else
              {
                *(_BYTE *)(shared_owners + 31) = v163;
                if (!v163)
                {
LABEL_266:
                  v165[v164] = 0;
                  if (!v161)
                    v161 = "";
                  v170 = strlen(v161);
                  if (v170 > 0x7FFFFFFFFFFFFFF7)
                    abort();
                  v171 = v170;
                  if (v170 >= 0x17)
                  {
                    v173 = v155;
                    v174 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17)
                      v174 = v170 | 7;
                    v175 = v174 + 1;
                    v172 = operator new(v174 + 1);
                    *(_QWORD *)(shared_owners + 40) = v171;
                    *(_QWORD *)(shared_owners + 48) = v175 | 0x8000000000000000;
                    *(_QWORD *)(shared_owners + 32) = v172;
                    v155 = v173;
                  }
                  else
                  {
                    v172 = (_BYTE *)(shared_owners + 32);
                    *(_BYTE *)(shared_owners + 55) = v170;
                    if (!v170)
                    {
LABEL_276:
                      v172[v171] = 0;
                      *(_WORD *)(shared_owners + 79) = 0;
                      *(_BYTE *)(shared_owners + 56) = 0;
                      *(_BYTE *)(shared_owners + 103) = 0;
                      v166 = shared_owners + 104;
                      v167 = v528;
                      v528[3].__shared_owners_ = shared_owners + 104;
                      v153 = v504;
                      v152 = v519;
                      goto LABEL_277;
                    }
                  }
                  memmove(v172, v161, v171);
                  goto LABEL_276;
                }
              }
              memmove(v165, v159, v164);
              goto LABEL_266;
            }
            v166 = std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>((int64x2_t *)&v528[3], v158, v159, v161, 0, 0, 0);
            v152 = v519;
            v167 = v528;
LABEL_277:
            v167[3].__shared_owners_ = v166;

          }
          ++v154;
        }
        while (v152 != v154);
        v151 = obj;
        v152 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
        if (!v152)
          goto LABEL_425;
      }
    }
    if (*v491)
    {
      v489 = *v491;
      v488 = objc_msgSend(v489, "muid");
      v529 = 0u;
      v530 = 0u;
      v531 = 0u;
      v532 = 0u;
      objc_msgSend(v489, "zoomNames");
      v151 = (id)objc_claimAutoreleasedReturnValue();
      v176 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
      if (!v176)
        goto LABEL_425;
      v520 = *(_QWORD *)v530;
      v501 = v151;
      while (1)
      {
        v177 = 0;
        obja = (id)v176;
        do
        {
          if (*(_QWORD *)v530 != v520)
            objc_enumerationMutation(v151);
          v178 = *(id *)(v529.n128_u64[1] + 8 * v177);
          objc_msgSend(v178, "labelText");
          v179 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v179, "length"))
          {
            objc_msgSend(v178, "labelLanguage");
            v180 = (void *)objc_claimAutoreleasedReturnValue();
            v181 = objc_msgSend(v178, "minZoom");
            v182 = (const char *)objc_msgSend(objc_retainAutorelease(v179), "UTF8String");
            v183 = objc_retainAutorelease(v180);
            v184 = (const char *)objc_msgSend(v183, "UTF8String");
            v185 = v528[3].__shared_owners_;
            if (v185 < v528[3].__shared_weak_owners_)
            {
              *(_BYTE *)v185 = v181;
              *(_BYTE *)(v185 + 1) = 0;
              if (!v182)
                v182 = "";
              v186 = strlen(v182);
              if (v186 > 0x7FFFFFFFFFFFFFF7)
                abort();
              v187 = v186;
              v508 = v178;
              v188 = (_BYTE *)(v185 + 8);
              if (v186 >= 0x17)
              {
                v191 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v186 | 7) != 0x17)
                  v191 = v186 | 7;
                v192 = v191 + 1;
                v188 = operator new(v191 + 1);
                *(_QWORD *)(v185 + 16) = v187;
                *(_QWORD *)(v185 + 24) = v192 | 0x8000000000000000;
                *(_QWORD *)(v185 + 8) = v188;
                v151 = v501;
              }
              else
              {
                *(_BYTE *)(v185 + 31) = v186;
                if (!v186)
                {
LABEL_300:
                  v188[v187] = 0;
                  if (!v184)
                    v184 = "";
                  v193 = strlen(v184);
                  if (v193 > 0x7FFFFFFFFFFFFFF7)
                    abort();
                  v194 = v193;
                  v178 = v508;
                  if (v193 >= 0x17)
                  {
                    v196 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v193 | 7) != 0x17)
                      v196 = v193 | 7;
                    v197 = v196 + 1;
                    v195 = operator new(v196 + 1);
                    *(_QWORD *)(v185 + 40) = v194;
                    *(_QWORD *)(v185 + 48) = v197 | 0x8000000000000000;
                    *(_QWORD *)(v185 + 32) = v195;
                    v151 = v501;
                  }
                  else
                  {
                    v195 = (_BYTE *)(v185 + 32);
                    *(_BYTE *)(v185 + 55) = v193;
                    if (!v193)
                    {
LABEL_310:
                      v195[v194] = 0;
                      *(_WORD *)(v185 + 79) = 0;
                      *(_BYTE *)(v185 + 56) = 0;
                      *(_BYTE *)(v185 + 103) = 0;
                      v189 = v185 + 104;
                      v190 = v528;
                      v528[3].__shared_owners_ = v185 + 104;
                      v176 = (uint64_t)obja;
                      goto LABEL_311;
                    }
                  }
                  memmove(v195, v184, v194);
                  goto LABEL_310;
                }
              }
              memmove(v188, v182, v187);
              goto LABEL_300;
            }
            v189 = std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>((int64x2_t *)&v528[3], v181, v182, v184, 0, 0, 0);
            v176 = (uint64_t)obja;
            v190 = v528;
LABEL_311:
            v190[3].__shared_owners_ = v189;

          }
          ++v177;
        }
        while (v176 != v177);
        v176 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
        if (!v176)
          goto LABEL_425;
      }
    }
    v198 = *(void **)(v498 + 24);
    if (!v198)
    {
      v221 = *(void **)(v498 + 32);
      if (!v221)
        goto LABEL_428;
      v489 = v221;
      v488 = objc_msgSend(v489, "muid");
      if (*(_BYTE *)(v498 + 109) == 5)
      {
        v529 = 0uLL;
        v530 = 0uLL;
        v531 = 0uLL;
        v532 = 0uLL;
        objc_msgSend(v489, "entranceZoomNames");
        v222 = (void *)objc_claimAutoreleasedReturnValue();
        v223 = objc_msgSend(v222, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
        if (!v223)
        {

          goto LABEL_420;
        }
        v224 = 0;
        v522 = *(_QWORD *)v530;
        v505 = v222;
        while (1)
        {
          v225 = 0;
          objc = (id)v223;
          do
          {
            if (*(_QWORD *)v530 != v522)
              objc_enumerationMutation(v222);
            v226 = *(id *)(v529.n128_u64[1] + 8 * v225);
            objc_msgSend(v226, "labelText");
            v227 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v227, "length"))
            {
              objc_msgSend(v226, "labelLanguage");
              v228 = (void *)objc_claimAutoreleasedReturnValue();
              v229 = objc_msgSend(v226, "minZoom");
              v230 = (const char *)objc_msgSend(objc_retainAutorelease(v227), "UTF8String");
              v231 = objc_retainAutorelease(v228);
              v232 = (const char *)objc_msgSend(v231, "UTF8String");
              v233 = v528[3].__shared_owners_;
              if (v233 < v528[3].__shared_weak_owners_)
              {
                *(_BYTE *)v233 = v229;
                *(_BYTE *)(v233 + 1) = 0;
                if (!v230)
                  v230 = "";
                v234 = strlen(v230);
                v510 = v226;
                if (v234 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                v235 = v234;
                v236 = (_BYTE *)(v233 + 8);
                if (v234 >= 0x17)
                {
                  v239 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v234 | 7) != 0x17)
                    v239 = v234 | 7;
                  v240 = v239 + 1;
                  v236 = operator new(v239 + 1);
                  *(_QWORD *)(v233 + 16) = v235;
                  *(_QWORD *)(v233 + 24) = v240 | 0x8000000000000000;
                  *(_QWORD *)(v233 + 8) = v236;
                  v222 = v505;
                }
                else
                {
                  *(_BYTE *)(v233 + 31) = v234;
                  if (!v234)
                  {
LABEL_369:
                    v236[v235] = 0;
                    if (!v232)
                      v232 = "";
                    v241 = strlen(v232);
                    if (v241 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    v242 = v241;
                    v226 = v510;
                    if (v241 >= 0x17)
                    {
                      v244 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v241 | 7) != 0x17)
                        v244 = v241 | 7;
                      v245 = v244 + 1;
                      v243 = operator new(v244 + 1);
                      *(_QWORD *)(v233 + 40) = v242;
                      *(_QWORD *)(v233 + 48) = v245 | 0x8000000000000000;
                      *(_QWORD *)(v233 + 32) = v243;
                      v222 = v505;
                    }
                    else
                    {
                      v243 = (_BYTE *)(v233 + 32);
                      *(_BYTE *)(v233 + 55) = v241;
                      if (!v241)
                      {
LABEL_379:
                        v243[v242] = 0;
                        *(_WORD *)(v233 + 79) = 0;
                        *(_BYTE *)(v233 + 56) = 0;
                        *(_BYTE *)(v233 + 103) = 0;
                        v237 = v233 + 104;
                        v238 = v528;
                        v528[3].__shared_owners_ = v233 + 104;
                        v223 = (uint64_t)objc;
                        goto LABEL_380;
                      }
                    }
                    memmove(v243, v232, v242);
                    goto LABEL_379;
                  }
                }
                memmove(v236, v230, v235);
                goto LABEL_369;
              }
              v237 = std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>((int64x2_t *)&v528[3], v229, v230, v232, 0, 0, 0);
              v223 = (uint64_t)objc;
              v238 = v528;
LABEL_380:
              v238[3].__shared_owners_ = v237;

              v224 = 1;
            }

            ++v225;
          }
          while (v223 != v225);
          v223 = objc_msgSend(v222, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
          if (!v223)
          {

            if ((v224 & 1) != 0)
              goto LABEL_426;
LABEL_420:
            v270 = *((id *)v497 + 1);
            objc_msgSend(v270, "accessPointEntryName");
            v151 = (id)objc_claimAutoreleasedReturnValue();

            if (!objc_msgSend(v151, "length"))
              goto LABEL_425;
LABEL_424:
            v151 = objc_retainAutorelease(v151);
            v272 = (const char *)objc_msgSend(v151, "UTF8String");
            v273 = *((id *)v497 + 1);
            objc_msgSend(v273, "locale");
            v274 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            md::LabelExternalFeature::addTextForZoom((int64x2_t *)v493, 0, 0, v272, (const char *)objc_msgSend(v274, "UTF8String"));

            goto LABEL_425;
          }
        }
      }
      v529 = 0uLL;
      v530 = 0uLL;
      v531 = 0uLL;
      v532 = 0uLL;
      objc_msgSend(v489, "exitZoomNames");
      v246 = (void *)objc_claimAutoreleasedReturnValue();
      v247 = objc_msgSend(v246, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
      if (!v247)
      {

LABEL_423:
        v271 = *((id *)v497 + 1);
        objc_msgSend(v271, "accessPointExitName");
        v151 = (id)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend(v151, "length"))
          goto LABEL_425;
        goto LABEL_424;
      }
      v248 = 0;
      v523 = *(_QWORD *)v530;
      v506 = v246;
LABEL_387:
      v249 = 0;
      objd = (id)v247;
      while (1)
      {
        if (*(_QWORD *)v530 != v523)
          objc_enumerationMutation(v246);
        v250 = *(id *)(v529.n128_u64[1] + 8 * v249);
        objc_msgSend(v250, "labelText");
        v251 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v251, "length"))
          goto LABEL_415;
        objc_msgSend(v250, "labelLanguage");
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        v253 = objc_msgSend(v250, "minZoom");
        v254 = (const char *)objc_msgSend(objc_retainAutorelease(v251), "UTF8String");
        v255 = objc_retainAutorelease(v252);
        v256 = (const char *)objc_msgSend(v255, "UTF8String");
        v257 = v528[3].__shared_owners_;
        if (v257 < v528[3].__shared_weak_owners_)
          break;
        v261 = std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>((int64x2_t *)&v528[3], v253, v254, v256, 0, 0, 0);
        v247 = (uint64_t)objd;
        v262 = v528;
LABEL_414:
        v262[3].__shared_owners_ = v261;

        v248 = 1;
LABEL_415:

        if (v247 == ++v249)
        {
          v247 = objc_msgSend(v246, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
          if (!v247)
          {

            if ((v248 & 1) != 0)
              goto LABEL_426;
            goto LABEL_423;
          }
          goto LABEL_387;
        }
      }
      *(_BYTE *)v257 = v253;
      *(_BYTE *)(v257 + 1) = 0;
      if (!v254)
        v254 = "";
      v258 = strlen(v254);
      v511 = v250;
      if (v258 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v259 = v258;
      v260 = (_BYTE *)(v257 + 8);
      if (v258 >= 0x17)
      {
        v263 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v258 | 7) != 0x17)
          v263 = v258 | 7;
        v264 = v263 + 1;
        v260 = operator new(v263 + 1);
        *(_QWORD *)(v257 + 16) = v259;
        *(_QWORD *)(v257 + 24) = v264 | 0x8000000000000000;
        *(_QWORD *)(v257 + 8) = v260;
        v246 = v506;
      }
      else
      {
        *(_BYTE *)(v257 + 31) = v258;
        if (!v258)
        {
LABEL_403:
          v260[v259] = 0;
          if (!v256)
            v256 = "";
          v265 = strlen(v256);
          if (v265 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v266 = v265;
          v250 = v511;
          if (v265 >= 0x17)
          {
            v268 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v265 | 7) != 0x17)
              v268 = v265 | 7;
            v269 = v268 + 1;
            v267 = operator new(v268 + 1);
            *(_QWORD *)(v257 + 40) = v266;
            *(_QWORD *)(v257 + 48) = v269 | 0x8000000000000000;
            *(_QWORD *)(v257 + 32) = v267;
            v246 = v506;
          }
          else
          {
            v267 = (void *)(v257 + 32);
            *(_BYTE *)(v257 + 55) = v265;
            if (!v265)
              goto LABEL_413;
          }
          memmove(v267, v256, v266);
LABEL_413:
          *((_BYTE *)v267 + v266) = 0;
          *(_WORD *)(v257 + 79) = 0;
          *(_BYTE *)(v257 + 56) = 0;
          *(_BYTE *)(v257 + 103) = 0;
          v261 = v257 + 104;
          v262 = v528;
          v528[3].__shared_owners_ = v257 + 104;
          v247 = (uint64_t)objd;
          goto LABEL_414;
        }
      }
      memmove(v260, v254, v259);
      goto LABEL_403;
    }
    v489 = v198;
    v488 = objc_msgSend(v489, "muid");
    v529 = 0u;
    v530 = 0u;
    v531 = 0u;
    v532 = 0u;
    objc_msgSend(v489, "zoomNames");
    v151 = (id)objc_claimAutoreleasedReturnValue();
    v199 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
    if (!v199)
      goto LABEL_425;
    v521 = *(_QWORD *)v530;
    v502 = v151;
    while (2)
    {
      v200 = 0;
      objb = (id)v199;
      while (2)
      {
        if (*(_QWORD *)v530 != v521)
          objc_enumerationMutation(v151);
        v201 = *(id *)(v529.n128_u64[1] + 8 * v200);
        objc_msgSend(v201, "labelText");
        v202 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v202, "length"))
          goto LABEL_346;
        objc_msgSend(v201, "labelLanguage");
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        v204 = objc_msgSend(v201, "minZoom");
        v205 = (const char *)objc_msgSend(objc_retainAutorelease(v202), "UTF8String");
        v206 = objc_retainAutorelease(v203);
        v207 = (const char *)objc_msgSend(v206, "UTF8String");
        v208 = v528[3].__shared_owners_;
        if (v208 >= v528[3].__shared_weak_owners_)
        {
          v212 = std::vector<md::LabelExternalTextElement>::__emplace_back_slow_path<unsigned char &,char const*&,char const*&,char const*&,char const*&,md::LabelExternalTextType &>((int64x2_t *)&v528[3], v204, v205, v207, 0, 0, 0);
          v199 = (uint64_t)objb;
          v213 = v528;
          goto LABEL_345;
        }
        *(_BYTE *)v208 = v204;
        *(_BYTE *)(v208 + 1) = 0;
        if (!v205)
          v205 = "";
        v209 = strlen(v205);
        if (v209 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v210 = v209;
        v509 = v201;
        v211 = (void *)(v208 + 8);
        if (v209 >= 0x17)
        {
          v214 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v209 | 7) != 0x17)
            v214 = v209 | 7;
          v215 = v214 + 1;
          v211 = operator new(v214 + 1);
          *(_QWORD *)(v208 + 16) = v210;
          *(_QWORD *)(v208 + 24) = v215 | 0x8000000000000000;
          *(_QWORD *)(v208 + 8) = v211;
          v151 = v502;
          goto LABEL_333;
        }
        *(_BYTE *)(v208 + 31) = v209;
        if (v209)
LABEL_333:
          memmove(v211, v205, v210);
        *((_BYTE *)v211 + v210) = 0;
        if (!v207)
          v207 = "";
        v216 = strlen(v207);
        if (v216 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v217 = v216;
        v201 = v509;
        if (v216 >= 0x17)
        {
          v219 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17)
            v219 = v216 | 7;
          v220 = v219 + 1;
          v218 = operator new(v219 + 1);
          *(_QWORD *)(v208 + 40) = v217;
          *(_QWORD *)(v208 + 48) = v220 | 0x8000000000000000;
          *(_QWORD *)(v208 + 32) = v218;
          v151 = v502;
          goto LABEL_343;
        }
        v218 = (void *)(v208 + 32);
        *(_BYTE *)(v208 + 55) = v216;
        if (v216)
LABEL_343:
          memmove(v218, v207, v217);
        *((_BYTE *)v218 + v217) = 0;
        *(_WORD *)(v208 + 79) = 0;
        *(_BYTE *)(v208 + 56) = 0;
        *(_BYTE *)(v208 + 103) = 0;
        v212 = v208 + 104;
        v213 = v528;
        v528[3].__shared_owners_ = v208 + 104;
        v199 = (uint64_t)objb;
LABEL_345:
        v213[3].__shared_owners_ = v212;

LABEL_346:
        if (v199 != ++v200)
          continue;
        break;
      }
      v199 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v529, &v537, 16);
      if (v199)
        continue;
      break;
    }
LABEL_425:

LABEL_426:
    if (v488)
    {
      v528[1].__shared_weak_owners_ = v488;
      v528[8].__shared_weak_owners_ = v488;
    }
LABEL_428:
    v275 = *(_QWORD *)(*((_QWORD *)v497 + 7) + 8 * *(unsigned int *)(v498 + 56));
    if (v275)
      v276 = v275 + 8;
    else
      v276 = 0;
    if (!*(_BYTE *)(v276 + 28))
      goto LABEL_445;
    v278 = v528[18].__vftable;
    v277 = v528[18].__shared_owners_;
    if ((unint64_t)v278 < v277)
    {
      LOBYTE(v278->~__shared_weak_count) = 1;
      *(_DWORD *)((char *)&v278->~__shared_weak_count + 1) = *(_DWORD *)(v276 + 29);
      v279 = (std::__shared_weak_count_vtbl *)((char *)&v278->~__shared_weak_count + 5);
      goto LABEL_444;
    }
    shared_weak_owners = (std::__shared_weak_count_vtbl *)v528[17].__shared_weak_owners_;
    v281 = 0xCCCCCCCCCCCCCCCDLL * ((char *)v278 - (char *)shared_weak_owners) + 1;
    if (v281 >= 0x3333333333333334)
      goto LABEL_720;
    v282 = 0xCCCCCCCCCCCCCCCDLL * (v277 - (_QWORD)shared_weak_owners);
    if (2 * v282 > v281)
      v281 = 2 * v282;
    v283 = v282 >= 0x1999999999999999;
    v284 = 0x3333333333333333;
    if (!v283)
      v284 = v281;
    if (v284 >= 0x3333333333333334)
      goto LABEL_714;
    v285 = 5 * v284;
    v286 = (char *)operator new(5 * v284);
    v287 = &v286[(char *)v278 - (char *)shared_weak_owners];
    *v287 = 1;
    *(_DWORD *)(v287 + 1) = *(_DWORD *)(v276 + 29);
    for (i = (uint64_t)v287;
          v278 != shared_weak_owners;
          *(_DWORD *)(i + 1) = *(_DWORD *)((char *)&v278->~__shared_weak_count + 1))
    {
      v289 = BYTE3(v278[-1].__on_zero_shared_weak);
      v278 = (std::__shared_weak_count_vtbl *)((char *)v278 - 5);
      *(_BYTE *)(i - 5) = v289;
      i -= 5;
    }
    v290 = &v286[v285];
    v279 = (std::__shared_weak_count_vtbl *)(v287 + 5);
    v528[17].__shared_weak_owners_ = i;
    v528[18].__vftable = (std::__shared_weak_count_vtbl *)(v287 + 5);
    v528[18].__shared_owners_ = (uint64_t)v290;
    if (shared_weak_owners)
      operator delete(shared_weak_owners);
LABEL_444:
    v528[18].__vftable = v279;
LABEL_445:
    md::LabelTransitRoute::refreshNodePositionState((uint64_t)v497, (uint64_t)v491);
    if (v528[3].__vftable == (std::__shared_weak_count_vtbl *)v528[3].__shared_owners_)
      goto LABEL_674;
    if (*(_BYTE *)(v498 + 70))
    {
      v291 = 0;
      v292 = 0;
      v538 = 0;
      v537 = 0uLL;
      LOBYTE(v539) = 0;
      *(_WORD *)((char *)&v539 + 1) = 1;
      v293 = v498;
      do
      {
        v294 = *(unsigned __int8 *)(v293 + v292 + 71);
        v295 = (v294 + 16) >> 5;
        if ((v294 & 0x1F) != 0)
          LOWORD(v295) = 10;
        v296 = v295 | ((_WORD)v294 << 8);
        if (v291 < (unint64_t)v538)
        {
          *(_WORD *)v291 = 259;
          *(_BYTE *)(v291 + 2) = 0;
          *(_WORD *)(v291 + 3) = v296;
          v291 += 5;
        }
        else
        {
          v297 = (void *)v537.n128_u64[0];
          v298 = 0xCCCCCCCCCCCCCCCDLL * (v291 - v537.n128_u64[0]) + 1;
          if (v298 >= 0x3333333333333334)
            abort();
          if (0x999999999999999ALL * (unint64_t)&v538[-v537.n128_u64[0]] > v298)
            v298 = 0x999999999999999ALL * (_QWORD)&v538[-v537.n128_u64[0]];
          v299 = 0x3333333333333333;
          if (0xCCCCCCCCCCCCCCCDLL * (unint64_t)&v538[-v537.n128_u64[0]] < 0x1999999999999999)
            v299 = v298;
          if (v299 >= 0x3333333333333334)
            goto LABEL_714;
          v300 = 5 * v299;
          v301 = (char *)operator new(5 * v299);
          v302 = &v301[v291 - (_QWORD)v297];
          *(_WORD *)v302 = 259;
          v302[2] = 0;
          *(_WORD *)(v302 + 3) = v296;
          for (j = (unint64_t)v302; (void *)v291 != v297; *(_WORD *)(j + 3) = *(_WORD *)(v291 + 3))
          {
            v304 = *(_WORD *)(v291 - 5);
            v291 -= 5;
            *(_WORD *)(j - 5) = v304;
            j -= 5;
            *(_BYTE *)(j + 2) = 0;
          }
          v291 = (unint64_t)(v302 + 5);
          v537.n128_u64[0] = j;
          v538 = &v301[v300];
          if (v297)
            operator delete(v297);
        }
        v537.n128_u64[1] = v291;
        ++v292;
        v293 = v498;
      }
      while (v292 < *(unsigned __int8 *)(v498 + 70));
      if (v291 < (unint64_t)v538)
      {
        *(_WORD *)v291 = 257;
        *(_BYTE *)(v291 + 2) = 0;
        *(_WORD *)(v291 + 3) = 0;
        v305 = v291 + 5;
        v306 = v538;
        goto LABEL_475;
      }
      v307 = (void *)v537.n128_u64[0];
      v308 = 0xCCCCCCCCCCCCCCCDLL * (v291 - v537.n128_u64[0]) + 1;
      if (v308 >= 0x3333333333333334)
        goto LABEL_721;
      if (0x999999999999999ALL * (unint64_t)&v538[-v537.n128_u64[0]] > v308)
        v308 = 0x999999999999999ALL * (_QWORD)&v538[-v537.n128_u64[0]];
      v309 = 0x3333333333333333;
      if (0xCCCCCCCCCCCCCCCDLL * (unint64_t)&v538[-v537.n128_u64[0]] < 0x1999999999999999)
        v309 = v308;
      if (v309 >= 0x3333333333333334)
        goto LABEL_714;
      v310 = 5 * v309;
      v311 = (char *)operator new(5 * v309);
      v312 = &v311[v291 - (_QWORD)v307];
      *(_WORD *)v312 = 257;
      v312[2] = 0;
      *(_WORD *)(v312 + 3) = 0;
      for (k = (unint64_t)v312; (void *)v291 != v307; *(_WORD *)(k + 3) = *(_WORD *)(v291 + 3))
      {
        v314 = *(_WORD *)(v291 - 5);
        v291 -= 5;
        *(_WORD *)(k - 5) = v314;
        k -= 5;
        *(_BYTE *)(k + 2) = 0;
      }
      v306 = &v311[v310];
      v305 = (unint64_t)(v312 + 5);
      v537.n128_u64[0] = k;
      v538 = v306;
      if (v307)
        operator delete(v307);
LABEL_475:
      v537.n128_u64[1] = v305;
      if (v305 < (unint64_t)v306)
      {
        *(_WORD *)v305 = 257;
        *(_BYTE *)(v305 + 2) = 0;
        *(_WORD *)(v305 + 3) = -32764;
        v315 = v305 + 5;
        v316 = v538;
        goto LABEL_487;
      }
      v317 = (void *)v537.n128_u64[0];
      v318 = 0xCCCCCCCCCCCCCCCDLL * (v305 - v537.n128_u64[0]) + 1;
      if (v318 > 0x3333333333333333)
        goto LABEL_721;
      if (0x999999999999999ALL * (unint64_t)&v306[-v537.n128_u64[0]] > v318)
        v318 = 0x999999999999999ALL * (_QWORD)&v306[-v537.n128_u64[0]];
      if (0xCCCCCCCCCCCCCCCDLL * (unint64_t)&v306[-v537.n128_u64[0]] >= 0x1999999999999999)
        v318 = 0x3333333333333333;
      if (v318 > 0x3333333333333333)
        goto LABEL_714;
      v319 = 5 * v318;
      v320 = (char *)operator new(5 * v318);
      v321 = &v320[v305 - (_QWORD)v317];
      *(_WORD *)v321 = 257;
      v321[2] = 0;
      *(_WORD *)(v321 + 3) = -32764;
      for (m = (unint64_t)v321; (void *)v305 != v317; *(_WORD *)(m + 3) = *(_WORD *)(v305 + 3))
      {
        v323 = *(_WORD *)(v305 - 5);
        v305 -= 5;
        *(_WORD *)(m - 5) = v323;
        m -= 5;
        *(_BYTE *)(m + 2) = 0;
      }
      v316 = &v320[v319];
      v315 = (unint64_t)(v321 + 5);
      v537.n128_u64[0] = m;
      v538 = v316;
      if (v317)
        operator delete(v317);
LABEL_487:
      v537.n128_u64[1] = v315;
      if (v315 < (unint64_t)v316)
      {
        *(_WORD *)v315 = 257;
        *(_BYTE *)(v315 + 2) = 0;
        *(_WORD *)(v315 + 3) = -16378;
        v324 = v315 + 5;
        v325 = v538;
        goto LABEL_499;
      }
      v326 = (void *)v537.n128_u64[0];
      v327 = 0xCCCCCCCCCCCCCCCDLL * (v315 - v537.n128_u64[0]) + 1;
      if (v327 > 0x3333333333333333)
        goto LABEL_721;
      if (0x999999999999999ALL * (unint64_t)&v316[-v537.n128_u64[0]] > v327)
        v327 = 0x999999999999999ALL * (_QWORD)&v316[-v537.n128_u64[0]];
      if (0xCCCCCCCCCCCCCCCDLL * (unint64_t)&v316[-v537.n128_u64[0]] >= 0x1999999999999999)
        v327 = 0x3333333333333333;
      if (v327 > 0x3333333333333333)
        goto LABEL_714;
      v328 = 5 * v327;
      v329 = (char *)operator new(5 * v327);
      v330 = &v329[v315 - (_QWORD)v326];
      *(_WORD *)v330 = 257;
      v330[2] = 0;
      *(_WORD *)(v330 + 3) = -16378;
      for (n = (unint64_t)v330; (void *)v315 != v326; *(_WORD *)(n + 3) = *(_WORD *)(v315 + 3))
      {
        v332 = *(_WORD *)(v315 - 5);
        v315 -= 5;
        *(_WORD *)(n - 5) = v332;
        n -= 5;
        *(_BYTE *)(n + 2) = 0;
      }
      v325 = &v329[v328];
      v324 = (unint64_t)(v330 + 5);
      v537.n128_u64[0] = n;
      v538 = v325;
      if (v326)
        operator delete(v326);
LABEL_499:
      v537.n128_u64[1] = v324;
      if (v324 < (unint64_t)v325)
      {
        *(_WORD *)v324 = 257;
        *(_BYTE *)(v324 + 2) = 0;
        v333 = v324 + 5;
        *(_WORD *)(v324 + 3) = 16386;
        goto LABEL_511;
      }
      v334 = (void *)v537.n128_u64[0];
      v335 = 0xCCCCCCCCCCCCCCCDLL * (v324 - v537.n128_u64[0]) + 1;
      if (v335 > 0x3333333333333333)
LABEL_721:
        abort();
      if (0x999999999999999ALL * (unint64_t)&v325[-v537.n128_u64[0]] > v335)
        v335 = 0x999999999999999ALL * (_QWORD)&v325[-v537.n128_u64[0]];
      if (0xCCCCCCCCCCCCCCCDLL * (unint64_t)&v325[-v537.n128_u64[0]] >= 0x1999999999999999)
        v335 = 0x3333333333333333;
      if (v335 <= 0x3333333333333333)
      {
        v336 = 5 * v335;
        v337 = (char *)operator new(5 * v335);
        v338 = &v337[v324 - (_QWORD)v334];
        *(_WORD *)v338 = 257;
        v338[2] = 0;
        *(_WORD *)(v338 + 3) = 16386;
        for (ii = (unint64_t)v338; (void *)v324 != v334; *(_WORD *)(ii + 3) = *(_WORD *)(v324 + 3))
        {
          v340 = *(_WORD *)(v324 - 5);
          v324 -= 5;
          *(_WORD *)(ii - 5) = v340;
          ii -= 5;
          *(_BYTE *)(ii + 2) = 0;
        }
        v341 = &v337[v336];
        v333 = (unint64_t)(v338 + 5);
        v537.n128_u64[0] = ii;
        v538 = v341;
        if (v334)
          operator delete(v334);
LABEL_511:
        v537.n128_u64[1] = v333;
        v342 = v528[17].__vftable;
        if ((unint64_t)v342 >= v528[17].__shared_owners_)
        {
          v348 = std::vector<md::LabelFeaturePlacementInfo>::__emplace_back_slow_path<md::LabelFeaturePlacementInfo const&>(&v528[16].__shared_weak_owners_, (uint64_t)&v537);
          v343 = (_WORD *)v537.n128_u64[0];
          v528[17].__vftable = (std::__shared_weak_count_vtbl *)v348;
          if (!v343)
            goto LABEL_521;
        }
        else
        {
          v342->~__shared_weak_count = 0;
          v342->~__shared_weak_count_0 = 0;
          v342->__on_zero_shared = 0;
          v343 = (_WORD *)v537.n128_u64[0];
          v344 = v333 - v537.n128_u64[0];
          if (v333 != v537.n128_u64[0])
          {
            v345 = 0xCCCCCCCCCCCCCCCDLL * v344;
            if (0xCCCCCCCCCCCCCCCDLL * v344 >= 0x3333333333333334)
              abort();
            v346 = (char *)operator new(v344);
            v342->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v346;
            v342->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v346;
            v342->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v346[5 * v345];
            v347 = v343;
            do
            {
              *(_WORD *)v346 = *v347;
              v346[2] = 0;
              *(_WORD *)(v346 + 3) = *(_WORD *)((char *)v347 + 3);
              v346 += 5;
              v347 = (_WORD *)((char *)v347 + 5);
            }
            while (v347 != (_WORD *)v333);
            v342->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v346;
          }
          LOWORD(v342->__get_deleter) = v539;
          BYTE2(v342->__get_deleter) = BYTE2(v539);
          v528[17].__vftable = (std::__shared_weak_count_vtbl *)&v342->__on_zero_shared_weak;
          v528[17].__vftable = (std::__shared_weak_count_vtbl *)&v342->__on_zero_shared_weak;
          if (!v343)
            goto LABEL_521;
        }
        operator delete(v343);
        goto LABEL_521;
      }
LABEL_714:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_521:
    if (!*(_BYTE *)(v498 + 98) || !*(_QWORD *)(v498 + 80))
      goto LABEL_674;
    v507 = *((_QWORD *)v497 + 7);
    v512 = *(unsigned int *)(v498 + 100);
    v349 = *(_QWORD *)(v507 + 8 * v512);
    if (v349)
      v350 = v349 + 8;
    else
      v350 = 0;
    v351 = *(id *)(v350 + 8);
    v352 = *((_QWORD *)v497 + 7);
    v503 = *(unsigned int *)(v498 + 104);
    v353 = *(_QWORD *)(v352 + 8 * v503);
    if (v353)
      v354 = v353 + 8;
    else
      v354 = 0;
    v355 = *(id *)(v354 + 8);
    v490 = v351;
    v356 = v355;
    objc_msgSend(v351, "transitSystem");
    v357 = (void *)objc_claimAutoreleasedReturnValue();
    v492 = v357;
    objc_msgSend(v355, "transitSystem");
    v500 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v357, "artwork");
    v358 = (void *)objc_claimAutoreleasedReturnValue();
    if (v358)
    {
      objc_msgSend(v357, "artwork");
      v359 = (void *)objc_claimAutoreleasedReturnValue();
      v543[0] = v359;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v543, 1);
      v360 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v360 = 0;
    }

    objc_msgSend(v500, "artwork");
    v361 = (void *)objc_claimAutoreleasedReturnValue();
    if (v361)
    {
      objc_msgSend(v500, "artwork");
      v362 = (void *)objc_claimAutoreleasedReturnValue();
      v542 = v362;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v542, 1);
      v363 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v363 = 0;
    }

    objc_msgSend(v490, "routeLineArtwork");
    obje = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v355, "routeLineArtwork");
    v524 = (void *)objc_claimAutoreleasedReturnValue();
    v364 = (char *)operator new(0x58uLL);
    *((_QWORD *)v364 + 1) = 0;
    *((_QWORD *)v364 + 2) = 0;
    *(_QWORD *)v364 = &off_1E42DCA18;
    *(_OWORD *)(v364 + 24) = 0u;
    *(_OWORD *)(v364 + 40) = 0u;
    *(_OWORD *)(v364 + 56) = 0u;
    *(_OWORD *)(v364 + 72) = 0u;
    {
      v484 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v484, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v366 = mdm::Allocator::instance(void)::alloc;
    *((_QWORD *)v364 + 8) = 0;
    *((_QWORD *)v364 + 9) = 0;
    *((_QWORD *)v364 + 7) = v366;
    *((_DWORD *)v364 + 20) = 0;
    v537.n128_u64[0] = (unint64_t)(v364 + 24);
    v537.n128_u64[1] = (unint64_t)v364;
    v367 = operator new(0x30uLL);
    v367[1] = 0;
    v367[2] = 0;
    *v367 = &off_1E42DD5B0;
    v367[3] = 0;
    v367[4] = 0;
    v367[5] = 0;
    v529.n128_u64[0] = (unint64_t)(v367 + 3);
    v529.n128_u64[1] = (unint64_t)v367;
    v364[24] = 3;
    *((_QWORD *)v364 + 9) = 210006;
    v367[4] = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)(v367 + 3), v537);
    if (!v492
      || !v500
      || (v368 = objc_msgSend(v492, "muid"), v369 = objc_msgSend(v500, "muid"), v370 = xmmword_19FFB49B0, v368 == v369))
    {
      v370 = xmmword_19FFB35A0;
    }
    v541 = DWORD2(v370);
    v540 = v370;
    v371 = (char *)operator new(0x48uLL);
    *((_QWORD *)v371 + 1) = 0;
    v372 = (unint64_t *)(v371 + 8);
    *((_QWORD *)v371 + 2) = 0;
    *(_QWORD *)v371 = &off_1E42DBD30;
    *(_OWORD *)(v371 + 40) = 0u;
    *(_OWORD *)(v371 + 56) = 0u;
    *(_OWORD *)(v371 + 24) = 0u;
    v535 = v371 + 24;
    v536 = (std::__shared_weak_count *)v371;
    v534.n128_u64[0] = (unint64_t)(v371 + 24);
    v534.n128_u64[1] = (unint64_t)v371;
    do
      v373 = __ldxr(v372);
    while (__stxr(v373 + 1, v372));
    v374 = 0;
    while (2)
    {
      v375 = *((_DWORD *)&v540 + v374);
      v376 = v534.n128_u64[0];
      if (*(_QWORD *)v534.n128_u64[0] == *(_QWORD *)(v534.n128_u64[0] + 8))
      {
        v377 = (char *)v534.n128_u64[1];
        v533 = v534;
        if (v534.n128_u64[1])
        {
          v388 = (unint64_t *)(v534.n128_u64[1] + 8);
          do
            v389 = __ldxr(v388);
          while (__stxr(v389 + 1, v388));
        }
        v378 = v376;
        if (!v375)
          goto LABEL_560;
LABEL_546:
        if (v375 == 1)
        {
          v381 = md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_2::operator()((uint64_t *)&v533, v360);
          v396 = *(__n128 **)(v378 + 8);
          v397 = *(_QWORD *)(v378 + 16);
          *(_BYTE *)(v378 + 24) = ((_DWORD)v396 - *(_DWORD *)v378) >> 4;
          if ((unint64_t)v396 >= v397)
          {
            v401 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v378, v529);
          }
          else
          {
            v396->n128_u64[0] = v529.n128_u64[0];
            v398 = v529.n128_u64[1];
            v396->n128_u64[1] = v529.n128_u64[1];
            if (v398)
            {
              v399 = (unint64_t *)(v398 + 8);
              do
                v400 = __ldxr(v399);
              while (__stxr(v400 + 1, v399));
            }
            v401 = v396 + 1;
          }
          *(_QWORD *)(v378 + 8) = v401;
          v402 = md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_2::operator()((uint64_t *)&v533, v363);
          goto LABEL_579;
        }
        if (v375 == 2)
        {
          v379 = *(_QWORD *)(v507 + 8 * v512);
          if (v379)
            v380 = v379 + 8;
          else
            v380 = 0;
          v381 = md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_3::operator()((uint64_t *)&v533, obje, (_DWORD *)(v380 + 29));
          v382 = *(__n128 **)(v378 + 8);
          v383 = *(_QWORD *)(v378 + 16);
          *(_BYTE *)(v378 + 24) = ((_DWORD)v382 - *(_DWORD *)v378) >> 4;
          if ((unint64_t)v382 >= v383)
          {
            v387 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v378, v529);
          }
          else
          {
            v382->n128_u64[0] = v529.n128_u64[0];
            v384 = v529.n128_u64[1];
            v382->n128_u64[1] = v529.n128_u64[1];
            if (v384)
            {
              v385 = (unint64_t *)(v384 + 8);
              do
                v386 = __ldxr(v385);
              while (__stxr(v386 + 1, v385));
            }
            v387 = v382 + 1;
          }
          *(_QWORD *)(v378 + 8) = v387;
          v403 = *(_QWORD *)(v352 + 8 * v503);
          if (v403)
            v404 = v403 + 8;
          else
            v404 = 0;
          v402 = md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_3::operator()((uint64_t *)&v533, v524, (_DWORD *)(v404 + 29));
          goto LABEL_579;
        }
LABEL_580:
        if (v378 == v376)
        {
          v378 = 0;
          v377 = 0;
        }
        else if (v377)
        {
          v405 = (unint64_t *)(v377 + 8);
          do
            v406 = __ldxr(v405);
          while (__stxr(v406 + 1, v405));
        }
      }
      else
      {
        v377 = (char *)operator new(0x48uLL);
        *((_QWORD *)v377 + 1) = 0;
        *((_QWORD *)v377 + 2) = 0;
        *(_QWORD *)v377 = &off_1E42DBD30;
        *(_OWORD *)(v377 + 24) = 0u;
        v378 = (uint64_t)(v377 + 24);
        *(_OWORD *)(v377 + 40) = 0u;
        *(_OWORD *)(v377 + 56) = 0u;
        v533.n128_u64[0] = (unint64_t)(v377 + 24);
        v533.n128_u64[1] = (unint64_t)v377;
        if (v375)
          goto LABEL_546;
LABEL_560:
        v381 = md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_1::operator()((uint64_t *)&v533, v360);
        v390 = *(__n128 **)(v378 + 8);
        v391 = *(_QWORD *)(v378 + 16);
        *(_BYTE *)(v378 + 24) = ((_DWORD)v390 - *(_DWORD *)v378) >> 4;
        if ((unint64_t)v390 >= v391)
        {
          v395 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v378, v529);
        }
        else
        {
          v390->n128_u64[0] = v529.n128_u64[0];
          v392 = v529.n128_u64[1];
          v390->n128_u64[1] = v529.n128_u64[1];
          if (v392)
          {
            v393 = (unint64_t *)(v392 + 8);
            do
              v394 = __ldxr(v393);
            while (__stxr(v394 + 1, v393));
          }
          v395 = v390 + 1;
        }
        *(_QWORD *)(v378 + 8) = v395;
        v402 = md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_1::operator()((uint64_t *)&v533, v363);
LABEL_579:
        if (v381 && v402)
          goto LABEL_580;
        v407 = *(_QWORD *)v378;
        v408 = *(_QWORD *)(v378 + 8);
        if (v408 != *(_QWORD *)v378)
        {
          do
          {
            v409 = *(std::__shared_weak_count **)(v408 - 8);
            if (v409)
            {
              v410 = (unint64_t *)&v409->__shared_owners_;
              do
                v411 = __ldaxr(v410);
              while (__stlxr(v411 - 1, v410));
              if (!v411)
              {
                ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
                std::__shared_weak_count::__release_weak(v409);
              }
            }
            v408 -= 16;
          }
          while (v408 != v407);
          v376 = v534.n128_u64[0];
        }
        v377 = 0;
        *(_QWORD *)(v378 + 8) = v407;
        v378 = 0;
      }
      v412 = *(std::__shared_weak_count **)(v376 + 40);
      *(_QWORD *)(v376 + 32) = v378;
      *(_QWORD *)(v376 + 40) = v377;
      if (!v412)
        goto LABEL_600;
      v413 = (unint64_t *)&v412->__shared_owners_;
      do
        v414 = __ldaxr(v413);
      while (__stlxr(v414 - 1, v413));
      if (!v414)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
        v415 = v533.n128_u64[1];
        v416 = v533.n128_u64[0];
        if (v533.n128_u64[1])
          goto LABEL_601;
      }
      else
      {
LABEL_600:
        v415 = v533.n128_u64[1];
        v416 = v533.n128_u64[0];
        if (v533.n128_u64[1])
        {
LABEL_601:
          v417 = (unint64_t *)(v415 + 8);
          do
            v418 = __ldxr(v417);
          while (__stxr(v418 + 1, v417));
        }
      }
      v419 = (std::__shared_weak_count *)v534.n128_u64[1];
      v534.n128_u64[0] = v416;
      v534.n128_u64[1] = v415;
      if (!v419)
        goto LABEL_607;
      v420 = (unint64_t *)&v419->__shared_owners_;
      do
        v421 = __ldaxr(v420);
      while (__stlxr(v421 - 1, v420));
      if (!v421)
      {
        ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
        std::__shared_weak_count::__release_weak(v419);
        v422 = (std::__shared_weak_count *)v533.n128_u64[1];
        if (v533.n128_u64[1])
        {
LABEL_608:
          v423 = (unint64_t *)&v422->__shared_owners_;
          do
            v424 = __ldaxr(v423);
          while (__stlxr(v424 - 1, v423));
          if (!v424)
          {
            ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
            std::__shared_weak_count::__release_weak(v422);
          }
        }
      }
      else
      {
LABEL_607:
        v422 = (std::__shared_weak_count *)v533.n128_u64[1];
        if (v533.n128_u64[1])
          goto LABEL_608;
      }
      if (++v374 != 3)
        continue;
      break;
    }
    v425 = *(_QWORD *)(v498 + 80);
    v427 = v535;
    v426 = v536;
    if (v536)
    {
      v428 = (unint64_t *)&v536->__shared_owners_;
      do
        v429 = __ldxr(v428);
      while (__stxr(v429 + 1, v428));
    }
    v430 = *(std::__shared_weak_count **)(v425 + 320);
    *(_QWORD *)(v425 + 312) = v427;
    *(_QWORD *)(v425 + 320) = v426;
    if (!v430)
      goto LABEL_623;
    v431 = (unint64_t *)&v430->__shared_owners_;
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (v432)
    {
LABEL_623:
      if (obje)
        goto LABEL_624;
      goto LABEL_638;
    }
    ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
    std::__shared_weak_count::__release_weak(v430);
    if (!obje)
      goto LABEL_638;
LABEL_624:
    CreateTransitLineDataElementGroup(&v533, 1, obje, v492);
    if (v533.n128_u64[0])
    {
      v433 = *(_QWORD *)(v498 + 80);
      v434 = *(__n128 **)(v433 + 432);
      if ((unint64_t)v434 >= *(_QWORD *)(v433 + 440))
      {
        v438 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v433 + 424, v533);
      }
      else
      {
        v434->n128_u64[0] = v533.n128_u64[0];
        v435 = v533.n128_u64[1];
        v434->n128_u64[1] = v533.n128_u64[1];
        if (v435)
        {
          v436 = (unint64_t *)(v435 + 8);
          do
            v437 = __ldxr(v436);
          while (__stxr(v437 + 1, v436));
        }
        v438 = v434 + 1;
      }
      *(_QWORD *)(v433 + 432) = v438;
    }
    v439 = (std::__shared_weak_count *)v533.n128_u64[1];
    if (!v533.n128_u64[1])
      goto LABEL_638;
    v440 = (unint64_t *)(v533.n128_u64[1] + 8);
    do
      v441 = __ldaxr(v440);
    while (__stlxr(v441 - 1, v440));
    if (!v441)
    {
      ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
      std::__shared_weak_count::__release_weak(v439);
      if (v524)
      {
LABEL_639:
        CreateTransitLineDataElementGroup(&v533, 0, v524, v500);
        if (v533.n128_u64[0])
        {
          v442 = *(_QWORD *)(v498 + 80);
          v443 = *(__n128 **)(v442 + 432);
          if ((unint64_t)v443 >= *(_QWORD *)(v442 + 440))
          {
            v447 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v442 + 424, v533);
          }
          else
          {
            v443->n128_u64[0] = v533.n128_u64[0];
            v444 = v533.n128_u64[1];
            v443->n128_u64[1] = v533.n128_u64[1];
            if (v444)
            {
              v445 = (unint64_t *)(v444 + 8);
              do
                v446 = __ldxr(v445);
              while (__stxr(v446 + 1, v445));
            }
            v447 = v443 + 1;
          }
          *(_QWORD *)(v442 + 432) = v447;
        }
        v448 = (std::__shared_weak_count *)v533.n128_u64[1];
        if (v533.n128_u64[1])
        {
          v449 = (unint64_t *)(v533.n128_u64[1] + 8);
          do
            v450 = __ldaxr(v449);
          while (__stlxr(v450 - 1, v449));
          if (!v450)
          {
            ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
            std::__shared_weak_count::__release_weak(v448);
          }
        }
      }
    }
    else
    {
LABEL_638:
      if (v524)
        goto LABEL_639;
    }
    v451 = (std::__shared_weak_count *)v534.n128_u64[1];
    if (v534.n128_u64[1])
    {
      v452 = (unint64_t *)(v534.n128_u64[1] + 8);
      do
        v453 = __ldaxr(v452);
      while (__stlxr(v453 - 1, v452));
      if (!v453)
      {
        ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
        std::__shared_weak_count::__release_weak(v451);
      }
    }
    v454 = v536;
    if (v536)
    {
      v455 = (unint64_t *)&v536->__shared_owners_;
      do
        v456 = __ldaxr(v455);
      while (__stlxr(v456 - 1, v455));
      if (!v456)
      {
        ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
        std::__shared_weak_count::__release_weak(v454);
      }
    }
    v457 = (std::__shared_weak_count *)v529.n128_u64[1];
    if (v529.n128_u64[1])
    {
      v458 = (unint64_t *)(v529.n128_u64[1] + 8);
      do
        v459 = __ldaxr(v458);
      while (__stlxr(v459 - 1, v458));
      if (!v459)
      {
        ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
        std::__shared_weak_count::__release_weak(v457);
      }
    }
    v460 = (std::__shared_weak_count *)v537.n128_u64[1];
    if (v537.n128_u64[1])
    {
      v461 = (unint64_t *)(v537.n128_u64[1] + 8);
      do
        v462 = __ldaxr(v461);
      while (__stlxr(v462 - 1, v461));
      if (!v462)
      {
        ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
        std::__shared_weak_count::__release_weak(v460);
      }
    }

LABEL_674:
    v464 = a2[1];
    v463 = (unint64_t)a2[2];
    if ((unint64_t)v464 < v463)
    {
      *v464 = v493;
      v464[1] = (md::LabelExternalPointFeature *)v528;
      do
        v465 = __ldxr(p_shared_owners);
      while (__stxr(v465 + 1, p_shared_owners));
      v466 = v464 + 2;
      v467 = a2;
      v468 = (unint64_t *)&v528->__shared_owners_;
      goto LABEL_701;
    }
    v469 = *a2;
    v470 = ((char *)v464 - (char *)*a2) >> 4;
    v471 = v470 + 1;
    if ((unint64_t)(v470 + 1) >> 60)
LABEL_720:
      abort();
    v472 = v463 - (_QWORD)v469;
    if (v472 >> 3 > v471)
      v471 = v472 >> 3;
    if ((unint64_t)v472 >= 0x7FFFFFFFFFFFFFF0)
      v473 = 0xFFFFFFFFFFFFFFFLL;
    else
      v473 = v471;
    if (v473 >> 60)
      goto LABEL_714;
    v474 = (char *)operator new(16 * v473);
    v475 = &v474[16 * v470];
    v476 = (md::LabelExternalPointFeature **)&v474[16 * v473];
    *(_OWORD *)v475 = v486;
    do
      v477 = __ldxr(p_shared_owners);
    while (__stxr(v477 + 1, p_shared_owners));
    v466 = (md::LabelExternalPointFeature **)(v475 + 16);
    if (v464 == v469)
    {
      *a2 = (md::LabelExternalPointFeature **)v475;
      a2[1] = v466;
      a2[2] = v476;
      v467 = a2;
    }
    else
    {
      do
      {
        v478 = *((_OWORD *)v464 - 1);
        v464 -= 2;
        *((_OWORD *)v475 - 1) = v478;
        v475 -= 16;
        *v464 = 0;
        v464[1] = 0;
      }
      while (v464 != v469);
      v464 = *a2;
      v479 = a2[1];
      *a2 = (md::LabelExternalPointFeature **)v475;
      a2[1] = v466;
      a2[2] = v476;
      v467 = a2;
      while (v479 != v464)
      {
        v480 = (std::__shared_weak_count *)*(v479 - 1);
        if (v480)
        {
          v481 = (unint64_t *)&v480->__shared_owners_;
          do
            v482 = __ldaxr(v481);
          while (__stlxr(v482 - 1, v481));
          v467 = a2;
          if (!v482)
          {
            ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
            std::__shared_weak_count::__release_weak(v480);
            v467 = a2;
          }
        }
        v479 -= 2;
      }
    }
    if (v464)
    {
      operator delete(v464);
      v467 = a2;
    }
    v468 = (unint64_t *)&v528->__shared_owners_;
LABEL_701:
    v467[1] = v466;
    do
    {
      v483 = __ldaxr(v468);
      v468 = (unint64_t *)&v528->__shared_owners_;
    }
    while (__stlxr(v483 - 1, p_shared_owners));
    if (!v483)
    {
      ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
      std::__shared_weak_count::__release_weak(v528);
    }
LABEL_236:
    v142 = v494 + 1;
    if (v494 + 1 != v487)
      continue;
    return md::LabelTransitRoute::updateTransitNodesRouteState(v497);
  }
}

void sub_19F7E4920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t *a33,std::__shared_weak_count *a34)
{
  void *v34;
  void *v35;
  unint64_t *v37;
  unint64_t v38;

  v37 = a33;
  do
  {
    v38 = __ldaxr(v37);
    v37 = a33;
  }
  while (__stlxr(v38 - 1, a33));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *md::LabelTransitRoute::updateTransitNodesRouteState(_QWORD *this)
{
  uint64_t v1;
  unsigned __int8 v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int i;
  unsigned int v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t **v48;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  if (this[1])
  {
    v1 = (uint64_t)this;
    if (this[11] != this[12])
    {
      v52 = 0;
      {
        v50 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v50, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v53 = mdm::Allocator::instance(void)::alloc;
      v54 = 0;
      v3 = objc_msgSend(*(id *)(v1 + 8), "inspectedSegmentIndex", &v52);
      v4 = v3;
      if (*(_DWORD *)(v1 + 120) != v3)
      {
        *(_DWORD *)(v1 + 120) = v3;
        v21 = *(uint64_t **)(v1 + 56);
        v22 = *(uint64_t **)(v1 + 64);
        while (v21 != v22)
        {
          v23 = *v21;
          v24 = *(_DWORD *)(*v21 + 32);
          v25 = v24 < v4;
          v26 = v24 == v4;
          if (v25)
            v26 = 2;
          if (*(unsigned __int8 *)(v23 + 76) != v26)
          {
            *(_BYTE *)(v23 + 76) = v26;
            v27 = *(_DWORD *)(v23 + 48);
            if (v27 >= 1)
            {
              for (i = 0; i < v27; ++i)
              {
                v29 = *(_DWORD *)(v23 + 44) + i;
                v30 = v52;
                v31 = &v52;
                v32 = &v52;
                if (v52)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v32 = (uint64_t **)v30;
                      v33 = *((_DWORD *)v30 + 7);
                      if (v29 >= v33)
                        break;
                      v30 = *v32;
                      v31 = v32;
                      if (!*v32)
                        goto LABEL_48;
                    }
                    if (v33 >= v29)
                      break;
                    v30 = v32[1];
                    if (!v30)
                    {
                      v31 = v32 + 1;
                      goto LABEL_48;
                    }
                  }
                }
                else
                {
LABEL_48:
                  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, 32, 8);
                  *(_DWORD *)(v34 + 28) = v29;
                  *(_QWORD *)v34 = 0;
                  *(_QWORD *)(v34 + 8) = 0;
                  *(_QWORD *)(v34 + 16) = v32;
                  *v31 = (uint64_t *)v34;
                  if (*v51)
                  {
                    v51 = (uint64_t *)*v51;
                    v34 = (uint64_t)*v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v52, (uint64_t *)v34);
                  ++v54;
                  v27 = *(_DWORD *)(v23 + 48);
                }
              }
            }
          }
          ++v21;
        }
      }
      v5 = objc_msgSend(*(id *)(v1 + 8), "inspectedStepIndex", v51);
      v6 = v5;
      v7 = *(_DWORD *)(v1 + 124);
      if (v7 != v5)
      {
        v8 = 0;
        if (*(_DWORD *)(v1 + 128) == -1)
          v9 = 0;
        else
          v9 = *(_DWORD *)(v1 + 128);
        if (v7 <= v5)
          v8 = ((*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 3) - 1;
        *(_DWORD *)(v1 + 124) = v5;
        if (v9 != v8)
        {
          v35 = 2 * (v8 >= v9);
          if (v8 < v9)
            v36 = -1;
          else
            v36 = 1;
          v37 = v9;
          do
          {
            if (*(_DWORD *)(v1 + 144) != (_DWORD)v37)
            {
              v38 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v37);
              v39 = *(_DWORD *)(v38 + 60);
              if (v8 >= v9)
              {
                if (v39 >= v6)
                  break;
              }
              else if (v39 < v6)
              {
                break;
              }
              *(_DWORD *)(v1 + 128) = v37;
              if (*(unsigned __int8 *)(v38 + 108) != v35)
              {
                *(_BYTE *)(v38 + 108) = v35;
                v40 = v52;
                v41 = &v52;
                v42 = &v52;
                if (v52)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v42 = (uint64_t **)v40;
                      v43 = *((_DWORD *)v40 + 7);
                      if (v43 <= v37)
                        break;
                      v40 = *v42;
                      v41 = v42;
                      if (!*v42)
                        goto LABEL_69;
                    }
                    if (v43 >= v37)
                      break;
                    v40 = v42[1];
                    if (!v40)
                    {
                      v41 = v42 + 1;
                      goto LABEL_69;
                    }
                  }
                }
                else
                {
LABEL_69:
                  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, 32, 8);
                  *(_DWORD *)(v44 + 28) = v37;
                  *(_QWORD *)v44 = 0;
                  *(_QWORD *)(v44 + 8) = 0;
                  *(_QWORD *)(v44 + 16) = v42;
                  *v41 = (uint64_t *)v44;
                  if (*v51)
                  {
                    v51 = (uint64_t *)*v51;
                    v44 = (uint64_t)*v41;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v52, (uint64_t *)v44);
                  ++v54;
                }
              }
            }
            v37 += v36;
          }
          while (v8 != (_DWORD)v37);
        }
      }
      v10 = objc_msgSend(*(id *)(v1 + 8), "puckSnappedStopID", v51);
      if (v10 != *(_QWORD *)(v1 + 136))
      {
        v11 = *(_DWORD *)(v1 + 144);
        if (v11 != -1)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * (int)v11);
          *(_BYTE *)(v12 + 108) = 2 * (*(_DWORD *)(v12 + 60) < v6);
          *(_QWORD *)(*(_QWORD *)(v12 + 80) + 360) = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 352);
          v13 = v52;
          v14 = &v52;
          v15 = &v52;
          if (v52)
          {
            while (1)
            {
              while (1)
              {
                v15 = (uint64_t **)v13;
                v16 = *((_DWORD *)v13 + 7);
                if (v11 >= v16)
                  break;
                v13 = *v15;
                v14 = v15;
                if (!*v15)
                  goto LABEL_21;
              }
              if (v16 >= v11)
                break;
              v13 = v15[1];
              if (!v13)
              {
                v14 = v15 + 1;
                goto LABEL_21;
              }
            }
          }
          else
          {
LABEL_21:
            v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, 32, 8);
            *(_DWORD *)(v17 + 28) = v11;
            *(_QWORD *)v17 = 0;
            *(_QWORD *)(v17 + 8) = 0;
            *(_QWORD *)(v17 + 16) = v15;
            *v14 = (uint64_t *)v17;
            if (*v51)
            {
              v51 = (uint64_t *)*v51;
              v17 = (uint64_t)*v14;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v52, (uint64_t *)v17);
            ++v54;
          }
          *(_DWORD *)(v1 + 144) = -1;
        }
        *(_QWORD *)(v1 + 136) = v10;
        if (v10)
        {
          v18 = *(_QWORD *)(v1 + 88);
          v19 = *(_QWORD *)(v1 + 96);
          if (v18 != v19)
          {
            v20 = 0;
            while (objc_msgSend(*(id *)(*(_QWORD *)v18 + 8), "muid", v51) != v10)
            {
              ++v20;
              v18 += 8;
              if (v18 == v19)
                goto LABEL_75;
            }
            *(_DWORD *)(v1 + 144) = v20;
            if (*(_QWORD *)v18)
              v45 = *(_QWORD *)v18 + 8;
            else
              v45 = 0;
            *(_BYTE *)(v45 + 100) = 1;
          }
        }
LABEL_75:
        *(_QWORD *)(v1 + 136) = v10;
      }
      v46 = v51;
      if (v51 != (uint64_t *)&v52)
      {
        do
        {
          md::LabelTransitRoute::refreshNodePositionState(v1, *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * *((unsigned int *)v46 + 7)) + 8);
          v47 = (uint64_t *)v46[1];
          if (v47)
          {
            do
            {
              v48 = (uint64_t **)v47;
              v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = (uint64_t **)v46[2];
              v49 = *v48 == v46;
              v46 = (uint64_t *)v48;
            }
            while (!v49);
          }
          v46 = (uint64_t *)v48;
        }
        while (v48 != &v52);
      }
      return (_QWORD *)std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v51, v52);
    }
  }
  return this;
}

void sub_19F7E53EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void md::LabelTransitRoute::refreshNodePositionState(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  geo::codec::Allocator *v16;
  geo::codec::Allocator *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  geo::codec::Allocator *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unsigned __int8 v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  geo::codec::Allocator *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  geo::codec::Allocator *v54;
  geo::codec::Allocator *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  geo::codec::Allocator *v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  geo::codec::Allocator *v79;
  uint64_t *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  unsigned __int8 v139;
  size_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  int v144;
  uint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  int v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  uint64_t *p_shared_owners;
  uint64_t v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;

  v167 = 0;
  v168 = 0;
  {
    v161 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v161, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = mdm::Allocator::instance(void)::alloc;
  v6 = *(unsigned __int8 *)(a2 + 101);
  switch(v6)
  {
    case 1:
      if (objc_msgSend(*(id *)a2, "hasStyleAttributes"))
      {
        v12 = objc_alloc(MEMORY[0x1E0D270A8]);
        objc_msgSend(*(id *)a2, "styleAttributes");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = (void *)objc_msgSend(v12, "initWithGEOStyleAttributes:", v13);

        if (v9)
        {
LABEL_13:
          objc_msgSend(v9, "featureStyleAttributesPtr");
          v15 = v163;
          v14 = (std::__shared_weak_count *)v164;
          goto LABEL_56;
        }
LABEL_55:
        v14 = 0;
        v15 = 0;
LABEL_56:
        v167 = v15;
        v168 = v14;

        v17 = 0;
        v18 = 0;
        if (v15)
          goto LABEL_57;
        goto LABEL_24;
      }
      v19 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
      v11 = v19;
      if (v19)
        *v19 = 42;
      goto LABEL_21;
    case 3:
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
      v11 = v10;
      if (v10)
        *v10 = 0x10000002ALL;
LABEL_21:
      v21 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 16, 4);
      v17 = v21;
      v18 = (unint64_t)v21 + 16;
      if (v21)
        *((_QWORD *)v21 + 1) = 0x2BC00000025;
      *(_QWORD *)v21 = *v11;
      v16 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v11, 8);
      v14 = 0;
      goto LABEL_24;
    case 2:
      if (objc_msgSend(*(id *)(a2 + 8), "hasStyleAttributes"))
      {
        v7 = objc_alloc(MEMORY[0x1E0D270A8]);
        objc_msgSend(*(id *)(a2 + 8), "styleAttributes");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = (void *)objc_msgSend(v7, "initWithGEOStyleAttributes:", v8);

        if (v9)
          goto LABEL_13;
        goto LABEL_55;
      }
      v20 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
      v11 = v20;
      if (v20)
        *v20 = 0x30000002ALL;
      goto LABEL_21;
  }
  v16 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  v17 = v16;
  v18 = (unint64_t)v16 + 8;
  v14 = 0;
  if (v16)
    *(_QWORD *)v16 = 0x200010010;
LABEL_24:
  v166 = geo::codec::Allocator::instance(v16);
  v22 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166 + 16))(v166, 8, 4);
  v163 = v22;
  p_shared_owners = &v22->__shared_owners_;
  if (v22)
    v22->__vftable = (std::__shared_weak_count_vtbl *)0xE100000006;
  v164 = (uint64_t)&v22->__shared_owners_;
  v23 = (std::__shared_weak_count *)operator new(0x40uLL);
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
  v167 = (std::__shared_weak_count *)FeatureStyleAttributes::FeatureStyleAttributes((uint64_t)&v23[1], (uint64_t *)&v163);
  v168 = v23;
  if (v14)
  {
    v24 = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v163)
  {
    v164 = (uint64_t)v163;
    (*(void (**)(uint64_t, std::__shared_weak_count *, int64_t))(*(_QWORD *)v166 + 40))(v166, v163, (char *)p_shared_owners - (char *)v163);
  }
  if (v17 == (geo::codec::Allocator *)v18)
  {
    v18 = (unint64_t)v17;
  }
  else if (((v18 - (_QWORD)v17) & 0x7FFFFFFF8) != 0)
  {
    v26 = 0;
    v27 = 0;
    v28 = v167;
    v29 = ((v18 - (unint64_t)v17) >> 3);
    v30 = BYTE1(v167[1].__shared_owners_);
    while (1)
    {
      v31 = v30;
      v32 = v28->__vftable;
      if (v30)
        break;
LABEL_36:
      *((_QWORD *)&v32->~__shared_weak_count + v31) = *((_QWORD *)v17 + v26);
      v30 = BYTE1(v28[1].__shared_owners_) + 1;
      BYTE1(v28[1].__shared_owners_) = v30;
      ++v26;
      v27 = 1;
      if (v26 == v29)
      {
        v32 = v28->__vftable;
        v31 = v30;
LABEL_54:
        qsort(v32, v31, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_57;
      }
    }
    if (v30 > 0x1Fu)
    {
      do
      {
        v36 = 0;
        v37 = v32;
        while (1)
        {
          v38 = (int)v37->~__shared_weak_count;
          v37 = (std::__shared_weak_count_vtbl *)((char *)v37 + 8);
          if (v38 == *((_DWORD *)v17 + 2 * v26))
            break;
          if (v30 == ++v36)
            goto LABEL_47;
        }
        *((_DWORD *)&v32->~__shared_weak_count + 2 * v36 + 1) = *((_DWORD *)v17 + 2 * v26 + 1);
LABEL_47:
        ++v26;
      }
      while (v26 != v29);
    }
    else
    {
      do
      {
        v33 = 0;
        v34 = v32;
        while (1)
        {
          v35 = (int)v34->~__shared_weak_count;
          v34 = (std::__shared_weak_count_vtbl *)((char *)v34 + 8);
          if (v35 == *((_DWORD *)v17 + 2 * v26))
            break;
          if (v31 == ++v33)
            goto LABEL_36;
        }
        *((_DWORD *)&v32->~__shared_weak_count + 2 * v33 + 1) = *((_DWORD *)v17 + 2 * v26++ + 1);
      }
      while (v26 != v29);
    }
    if ((v27 & 1) != 0)
      goto LABEL_54;
  }
LABEL_57:
  v39 = *(unsigned int *)(a2 + 48);
  v40 = *(_QWORD *)(a1 + 56);
  v41 = *(_QWORD *)(v40 + 8 * v39);
  if (v41)
    v42 = v41 + 8;
  else
    v42 = 0;
  v43 = *(id *)(v42 + 8);
  v44 = objc_msgSend(v43, "type");

  if (v44 == 6)
  {
    v45 = *(_QWORD *)(v40 + 8 * v39);
    if (v45)
      v46 = v45 + 8;
    else
      v46 = 0;
    v47 = *(id *)(v46 + 8);
    objc_msgSend(v47, "transitSystem");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    MergeTransitSystemStylesWithStyle(v48, &v167);

  }
  v162 = a1;
  if ((unint64_t)v17 >= v18)
  {
    v50 = v18 - (_QWORD)v17;
    v51 = (uint64_t)(v18 - (_QWORD)v17) >> 2;
    if (v51 <= 1)
      v51 = 1;
    if (v50 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    v53 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v52, 4);
    v54 = (geo::codec::Allocator *)v53;
    v18 = (unint64_t)&v53[v52];
    if (v53)
      *v53 = 0x300000005;
    v49 = (geo::codec::Allocator *)(v53 + 1);
    if (v17)
      (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v50);
    v17 = v54;
  }
  else
  {
    if (v17)
      *(_QWORD *)v17 = 0x300000005;
    v49 = (geo::codec::Allocator *)((char *)v17 + 8);
  }
  if ((unint64_t)v49 >= v18)
  {
    v57 = (v49 - v17) >> 3;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 61)
      abort();
    v59 = v18 - (_QWORD)v17;
    if ((uint64_t)(v18 - (_QWORD)v17) >> 2 > v58)
      v58 = (uint64_t)(v18 - (_QWORD)v17) >> 2;
    if (v59 >= 0x7FFFFFFFFFFFFFF8)
      v60 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v60, 4);
      v62 = (_QWORD *)(v61 + 8 * v57);
      v18 = v61 + 8 * v60;
      if (v61)
        *v62 = 0x100010007;
    }
    else
    {
      v18 = 0;
      v62 = (_QWORD *)(8 * v57);
    }
    v55 = (geo::codec::Allocator *)(v62 + 1);
    if (v49 == v17)
    {
LABEL_103:
      (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v59);
LABEL_104:
      v17 = (geo::codec::Allocator *)v62;
      if ((unint64_t)v55 < v18)
        goto LABEL_81;
      goto LABEL_105;
    }
    v63 = v49 - v17 - 8;
    if (v63 < 0x38)
    {
      v65 = v49;
    }
    else if ((unint64_t)(v49 - (geo::codec::Allocator *)v62) < 0x20)
    {
      v65 = v49;
    }
    else
    {
      v64 = (v63 >> 3) + 1;
      v65 = (geo::codec::Allocator *)((char *)v49 - 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL));
      v66 = v62 - 2;
      v67 = (__int128 *)((char *)v49 - 16);
      v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v69 = *v67;
        *(v66 - 1) = *(v67 - 1);
        *v66 = v69;
        v66 -= 2;
        v67 -= 2;
        v68 -= 4;
      }
      while (v68);
      v62 -= v64 & 0x3FFFFFFFFFFFFFFCLL;
      if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        if (!v17)
          goto LABEL_104;
        goto LABEL_103;
      }
    }
    do
    {
      v70 = *((_QWORD *)v65 - 1);
      v65 = (geo::codec::Allocator *)((char *)v65 - 8);
      *--v62 = v70;
    }
    while (v65 != v17);
    goto LABEL_102;
  }
  *(_QWORD *)v49 = 0x100010007;
  v55 = (geo::codec::Allocator *)((char *)v49 + 8);
  if ((unint64_t)v49 + 8 < v18)
  {
LABEL_81:
    *(_QWORD *)v55 = 0x100010002;
    v56 = (uint64_t *)((char *)v55 + 8);
    goto LABEL_128;
  }
LABEL_105:
  v71 = (v55 - v17) >> 3;
  v72 = v71 + 1;
  if ((unint64_t)(v71 + 1) >> 61)
    abort();
  v73 = v18 - (_QWORD)v17;
  if ((uint64_t)(v18 - (_QWORD)v17) >> 2 > v72)
    v72 = (uint64_t)(v18 - (_QWORD)v17) >> 2;
  if (v73 >= 0x7FFFFFFFFFFFFFF8)
    v74 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v74 = v72;
  if (v74)
  {
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v74, 4);
    v76 = (uint64_t *)(v75 + 8 * v71);
    v18 = v75 + 8 * v74;
    if (v75)
      *v76 = 0x100010002;
  }
  else
  {
    v18 = 0;
    v76 = (uint64_t *)(8 * v71);
  }
  v56 = v76 + 1;
  if (v55 == v17)
    goto LABEL_126;
  v77 = v55 - v17 - 8;
  if (v77 < 0x38)
  {
    v79 = v55;
    do
    {
LABEL_124:
      v84 = *((_QWORD *)v79 - 1);
      v79 = (geo::codec::Allocator *)((char *)v79 - 8);
      *--v76 = v84;
    }
    while (v79 != v17);
    goto LABEL_125;
  }
  if ((unint64_t)(v55 - (geo::codec::Allocator *)v76) < 0x20)
  {
    v79 = v55;
    goto LABEL_124;
  }
  v78 = (v77 >> 3) + 1;
  v79 = (geo::codec::Allocator *)((char *)v55 - 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL));
  v80 = v76 - 2;
  v81 = (__int128 *)((char *)v55 - 16);
  v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v83 = *v81;
    *((_OWORD *)v80 - 1) = *(v81 - 1);
    *(_OWORD *)v80 = v83;
    v80 -= 4;
    v81 -= 2;
    v82 -= 4;
  }
  while (v82);
  v76 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
  if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_124;
LABEL_125:
  if (v17)
LABEL_126:
    (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v73);
  v17 = (geo::codec::Allocator *)v76;
LABEL_128:
  v85 = *(unsigned __int8 *)(a2 + 60);
  if ((unint64_t)v56 < v18)
  {
    *v56 = (v85 << 32) | 0x2C;
    v86 = v56 + 1;
    goto LABEL_153;
  }
  v87 = ((char *)v56 - (char *)v17) >> 3;
  v88 = v87 + 1;
  if ((unint64_t)(v87 + 1) >> 61)
    abort();
  v89 = v18 - (_QWORD)v17;
  if ((uint64_t)(v18 - (_QWORD)v17) >> 2 > v88)
    v88 = (uint64_t)(v18 - (_QWORD)v17) >> 2;
  if (v89 >= 0x7FFFFFFFFFFFFFF8)
    v90 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v90 = v88;
  if (v90)
  {
    v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v90, 4);
    v92 = (uint64_t *)(v91 + 8 * v87);
    v18 = v91 + 8 * v90;
    if (v91)
      *v92 = (v85 << 32) | 0x2C;
  }
  else
  {
    v18 = 0;
    v92 = (uint64_t *)(8 * v87);
  }
  v86 = v92 + 1;
  if (v56 == (uint64_t *)v17)
    goto LABEL_151;
  v93 = (char *)v56 - (char *)v17 - 8;
  if (v93 < 0x38)
  {
    v95 = v56;
    do
    {
LABEL_149:
      v100 = *--v95;
      *--v92 = v100;
    }
    while (v95 != (uint64_t *)v17);
    goto LABEL_150;
  }
  if ((unint64_t)((char *)v56 - (char *)v92) < 0x20)
  {
    v95 = v56;
    goto LABEL_149;
  }
  v94 = (v93 >> 3) + 1;
  v95 = &v56[-(v94 & 0x3FFFFFFFFFFFFFFCLL)];
  v96 = v92 - 2;
  v97 = v56 - 2;
  v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v99 = *(_OWORD *)v97;
    *((_OWORD *)v96 - 1) = *((_OWORD *)v97 - 1);
    *(_OWORD *)v96 = v99;
    v96 -= 4;
    v97 -= 4;
    v98 -= 4;
  }
  while (v98);
  v92 -= v94 & 0x3FFFFFFFFFFFFFFCLL;
  if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_149;
LABEL_150:
  if (v17)
LABEL_151:
    (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v89);
  v17 = (geo::codec::Allocator *)v92;
LABEL_153:
  v101 = *(unsigned __int8 *)(a2 + 100);
  if ((unint64_t)v86 < v18)
  {
    *v86 = (v101 << 32) | 0x10009;
    v102 = (char *)(v86 + 1);
    goto LABEL_178;
  }
  v103 = ((char *)v86 - (char *)v17) >> 3;
  v104 = v103 + 1;
  if ((unint64_t)(v103 + 1) >> 61)
    abort();
  v105 = v18 - (_QWORD)v17;
  if ((uint64_t)(v18 - (_QWORD)v17) >> 2 > v104)
    v104 = (uint64_t)(v18 - (_QWORD)v17) >> 2;
  if (v105 >= 0x7FFFFFFFFFFFFFF8)
    v106 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v106 = v104;
  if (v106)
  {
    v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v106, 4);
    v108 = (uint64_t *)(v107 + 8 * v103);
    v18 = v107 + 8 * v106;
    if (v107)
      *v108 = (v101 << 32) | 0x10009;
  }
  else
  {
    v18 = 0;
    v108 = (uint64_t *)(8 * v103);
  }
  v102 = (char *)(v108 + 1);
  if (v86 == (uint64_t *)v17)
    goto LABEL_176;
  v109 = (char *)v86 - (char *)v17 - 8;
  if (v109 < 0x38)
  {
    v111 = v86;
    do
    {
LABEL_174:
      v116 = *--v111;
      *--v108 = v116;
    }
    while (v111 != (uint64_t *)v17);
    goto LABEL_175;
  }
  if ((unint64_t)((char *)v86 - (char *)v108) < 0x20)
  {
    v111 = v86;
    goto LABEL_174;
  }
  v110 = (v109 >> 3) + 1;
  v111 = &v86[-(v110 & 0x3FFFFFFFFFFFFFFCLL)];
  v112 = v108 - 2;
  v113 = v86 - 2;
  v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v115 = *(_OWORD *)v113;
    *((_OWORD *)v112 - 1) = *((_OWORD *)v113 - 1);
    *(_OWORD *)v112 = v115;
    v112 -= 4;
    v113 -= 4;
    v114 -= 4;
  }
  while (v114);
  v108 -= v110 & 0x3FFFFFFFFFFFFFFCLL;
  if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_174;
LABEL_175:
  if (v17)
LABEL_176:
    (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v105);
  v17 = (geo::codec::Allocator *)v108;
LABEL_178:
  v117 = *(_QWORD *)(*(_QWORD *)(v162 + 56) + 8 * *(unsigned int *)(a2 + 48));
  if (v117)
    v118 = v117 + 8;
  else
    v118 = 0;
  v119 = *(unsigned __int8 *)(v118 + 68);
  if ((unint64_t)v102 < v18)
  {
    *(_QWORD *)v102 = ((v119 << 32) | 0x10009) + 11;
    v120 = v102 + 8;
    goto LABEL_206;
  }
  v121 = (v102 - (char *)v17) >> 3;
  v122 = v121 + 1;
  if ((unint64_t)(v121 + 1) >> 61)
    abort();
  v123 = v18 - (_QWORD)v17;
  if ((uint64_t)(v18 - (_QWORD)v17) >> 2 > v122)
    v122 = (uint64_t)(v18 - (_QWORD)v17) >> 2;
  if (v123 >= 0x7FFFFFFFFFFFFFF8)
    v124 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v124 = v122;
  if (v124)
  {
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * v124, 4);
    v126 = (char *)(v125 + 8 * v121);
    v18 = v125 + 8 * v124;
    if (v125)
      *(_QWORD *)v126 = ((v119 << 32) | 0x10009) + 11;
  }
  else
  {
    v18 = 0;
    v126 = (char *)(8 * v121);
  }
  v120 = v126 + 8;
  if (v102 == (char *)v17)
    goto LABEL_204;
  v127 = v102 - (char *)v17 - 8;
  if (v127 < 0x38)
  {
    v129 = v102;
    do
    {
LABEL_202:
      v134 = *((_QWORD *)v129 - 1);
      v129 -= 8;
      *((_QWORD *)v126 - 1) = v134;
      v126 -= 8;
    }
    while (v129 != (char *)v17);
    goto LABEL_203;
  }
  if ((unint64_t)(v102 - v126) < 0x20)
  {
    v129 = v102;
    goto LABEL_202;
  }
  v128 = (v127 >> 3) + 1;
  v129 = &v102[-8 * (v128 & 0x3FFFFFFFFFFFFFFCLL)];
  v130 = v126 - 16;
  v131 = v102 - 16;
  v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v133 = *(_OWORD *)v131;
    *((_OWORD *)v130 - 1) = *((_OWORD *)v131 - 1);
    *(_OWORD *)v130 = v133;
    v130 -= 32;
    v131 -= 32;
    v132 -= 4;
  }
  while (v132);
  v126 -= 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
  if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_202;
LABEL_203:
  if (v17)
LABEL_204:
    (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v123);
  v17 = (geo::codec::Allocator *)v126;
LABEL_206:
  v135 = v167;
  if (((v120 - (char *)v17) & 0x7FFFFFFF8) != 0)
  {
    v136 = 0;
    v137 = 0;
    v138 = ((unint64_t)(v120 - (char *)v17) >> 3);
    v139 = BYTE1(v167[1].__shared_owners_);
    while (1)
    {
      v140 = v139;
      v141 = v135->__vftable;
      if (v139)
        break;
LABEL_208:
      *((_QWORD *)&v141->~__shared_weak_count + v140) = *((_QWORD *)v17 + v136);
      v139 = BYTE1(v135[1].__shared_owners_) + 1;
      BYTE1(v135[1].__shared_owners_) = v139;
      ++v136;
      v137 = 1;
      if (v136 == v138)
      {
        v141 = v135->__vftable;
        v140 = v139;
LABEL_225:
        qsort(v141, v140, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_226;
      }
    }
    if (v139 > 0x1Fu)
    {
      do
      {
        v145 = 0;
        v146 = v141;
        while (1)
        {
          v147 = (int)v146->~__shared_weak_count;
          v146 = (std::__shared_weak_count_vtbl *)((char *)v146 + 8);
          if (v147 == *((_DWORD *)v17 + 2 * v136))
            break;
          if (v140 == ++v145)
            goto LABEL_219;
        }
        *((_DWORD *)&v141->~__shared_weak_count + 2 * v145 + 1) = *((_DWORD *)v17 + 2 * v136 + 1);
LABEL_219:
        ++v136;
      }
      while (v136 != v138);
    }
    else
    {
      do
      {
        v142 = 0;
        v143 = v141;
        while (1)
        {
          v144 = (int)v143->~__shared_weak_count;
          v143 = (std::__shared_weak_count_vtbl *)((char *)v143 + 8);
          if (v144 == *((_DWORD *)v17 + 2 * v136))
            break;
          if (v140 == ++v142)
            goto LABEL_208;
        }
        *((_DWORD *)&v141->~__shared_weak_count + 2 * v142 + 1) = *((_DWORD *)v17 + 2 * v136++ + 1);
      }
      while (v136 != v138);
    }
    if ((v137 & 1) != 0)
      goto LABEL_225;
  }
LABEL_226:
  v148 = *(_QWORD *)(a2 + 72);
  v149 = v168;
  if (v168)
  {
    v150 = (unint64_t *)&v168->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    do
      v152 = __ldxr(v150);
    while (__stxr(v152 + 1, v150));
  }
  v153 = *(std::__shared_weak_count **)(v148 + 40);
  *(_QWORD *)(v148 + 32) = v135;
  *(_QWORD *)(v148 + 40) = v149;
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  if (v149)
  {
    v156 = (unint64_t *)&v149->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v17)
    (*(void (**)(uint64_t, geo::codec::Allocator *, unint64_t))(*(_QWORD *)v5 + 40))(v5, v17, v18 - (_QWORD)v17);
  v158 = v168;
  if (v168)
  {
    v159 = (unint64_t *)&v168->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
}

void sub_19F7E6288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<md::LabelFeaturePlacementInfo>::__emplace_back_slow_path<md::LabelFeaturePlacementInfo const&>(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _WORD *v13;
  _WORD *v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  __int128 v26;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (uint64_t)&v2[-*a1] >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v12 = &v10[32 * v9];
  *((_QWORD *)&v26 + 1) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  v13 = *(_WORD **)a2;
  v14 = *(_WORD **)(a2 + 8);
  v15 = (size_t)v14 - *(_QWORD *)a2;
  if (v14 != *(_WORD **)a2)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * v15;
    if (0xCCCCCCCCCCCCCCCDLL * v15 >= 0x3333333333333334)
      abort();
    v17 = (char *)operator new(v15);
    *(_QWORD *)v11 = v17;
    *((_QWORD *)v11 + 1) = v17;
    *((_QWORD *)v11 + 2) = &v17[5 * v16];
    do
    {
      *(_WORD *)v17 = *v13;
      v17[2] = 0;
      *(_WORD *)(v17 + 3) = *(_WORD *)((char *)v13 + 3);
      v17 += 5;
      v13 = (_WORD *)((char *)v13 + 5);
    }
    while (v13 != v14);
    *((_QWORD *)v11 + 1) = v17;
  }
  *((_WORD *)v11 + 12) = *(_WORD *)(a2 + 24);
  v11[26] = *(_BYTE *)(a2 + 26);
  v18 = v11 + 32;
  *(_QWORD *)&v26 = v11 + 32;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v19 = v11;
      *((_QWORD *)v11 - 3) = 0;
      *((_QWORD *)v11 - 2) = 0;
      v20 = *((_OWORD *)v2 - 2);
      v2 -= 32;
      *((_OWORD *)v11 - 2) = v20;
      v11 -= 32;
      *((_QWORD *)v19 - 2) = *((_QWORD *)v2 + 2);
      *(_QWORD *)v2 = 0;
      *((_QWORD *)v2 + 1) = 0;
      *((_QWORD *)v2 + 2) = 0;
      LOWORD(v19) = *((_WORD *)v2 + 12);
      v11[26] = v2[26];
      *((_WORD *)v11 + 12) = (_WORD)v19;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = v11;
    *(_OWORD *)(a1 + 1) = v26;
    v18 = (char *)v26;
    if (v21 != v2)
    {
      v22 = v21;
      do
      {
        v24 = (void *)*((_QWORD *)v22 - 4);
        v22 -= 32;
        v23 = v24;
        if (v24)
        {
          *((_QWORD *)v21 - 3) = v23;
          operator delete(v23);
        }
        v21 = v22;
      }
      while (v22 != v2);
    }
  }
  if (v2)
    operator delete(v2);
  return v18;
}

void sub_19F7E658C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::LabelFeaturePlacementInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_1::operator()(uint64_t *a1, void *a2)
{
  id v2;
  _QWORD *v3;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unsigned __int8 v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E42DD5B0;
  v3[3] = 0;
  v4 = v3 + 3;
  v3[4] = 0;
  v3[5] = 0;
  v36.n128_u64[0] = (unint64_t)(v3 + 3);
  v36.n128_u64[1] = (unint64_t)v3;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v33;
    while (1)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v33 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        if (objc_msgSend(v9, "artworkSourceType") == 2)
        {
          objc_msgSend(v9, "iconDataSource");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = (std::__shared_weak_count *)operator new(0x58uLL);
          v11->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          v11->__shared_weak_owners_ = 0;
          v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA18;
          v11[1].std::__shared_count = 0u;
          *(_OWORD *)&v11[1].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v11[2].__shared_owners_ = 0u;
          v11[3].std::__shared_count = 0u;
          {
            v19 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v19, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v11[2].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
          v11[2].__shared_weak_owners_ = 0;
          v11[3].__vftable = 0;
          LODWORD(v11[3].__shared_owners_) = 0;
          v31.n128_u64[0] = (unint64_t)&v11[1];
          v31.n128_u64[1] = (unint64_t)v11;
          LOBYTE(v11[1].__vftable) = 2;
          LODWORD(v11[2].__shared_weak_owners_) = 49;
          HIDWORD(v11[2].__shared_weak_owners_) = objc_msgSend(v10, "cartoID");
          v14 = v36.n128_u64[0];
          v15 = *(_QWORD **)(v36.n128_u64[0] + 8);
          if ((unint64_t)v15 < *(_QWORD *)(v36.n128_u64[0] + 16))
          {
            *v15 = v11 + 1;
            v15[1] = v11;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            *(_QWORD *)(v14 + 8) = v15 + 2;
            goto LABEL_15;
          }
          *(_QWORD *)(v14 + 8) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v36.n128_i64[0], v31);
          if (v11)
          {
LABEL_15:
            v17 = (unint64_t *)&v11->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }

          continue;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
      if (!v6)
      {
        v4 = (uint64_t *)v36.n128_u64[0];
        break;
      }
    }
  }

  v20 = *v4;
  v21 = v4[1];
  if (*v4 == v21)
  {
    v24 = (std::__shared_weak_count *)v36.n128_u64[1];
    if (!v36.n128_u64[1])
      goto LABEL_37;
    goto LABEL_33;
  }
  v22 = *a1;
  v23 = *(uint64_t ***)(*a1 + 8);
  if ((unint64_t)v23 >= *(_QWORD *)(*a1 + 16))
  {
    v24 = (std::__shared_weak_count *)v36.n128_u64[1];
    *(_QWORD *)(v22 + 8) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(*a1, v36);
    if (!v24)
      goto LABEL_37;
    goto LABEL_33;
  }
  *v23 = v4;
  v24 = (std::__shared_weak_count *)v36.n128_u64[1];
  v23[1] = (uint64_t *)v36.n128_u64[1];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)(v22 + 8) = v23 + 2;
  if (v24)
  {
LABEL_33:
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_37:

  return v20 != v21;
}

void sub_19F7E690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

BOOL md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_2::operator()(uint64_t *a1, void *a2)
{
  id v2;
  _QWORD *v3;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unsigned __int8 v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E42DD5B0;
  v3[3] = 0;
  v4 = v3 + 3;
  v3[4] = 0;
  v3[5] = 0;
  v36.n128_u64[0] = (unint64_t)(v3 + 3);
  v36.n128_u64[1] = (unint64_t)v3;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v33;
    while (1)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v33 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        if (objc_msgSend(v9, "artworkSourceType") == 2)
        {
          objc_msgSend(v9, "iconDataSource");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = (std::__shared_weak_count *)operator new(0x58uLL);
          v11->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          v11->__shared_weak_owners_ = 0;
          v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA18;
          v11[1].std::__shared_count = 0u;
          *(_OWORD *)&v11[1].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v11[2].__shared_owners_ = 0u;
          v11[3].std::__shared_count = 0u;
          {
            v19 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v19, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v11[2].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
          v11[2].__shared_weak_owners_ = 0;
          v11[3].__vftable = 0;
          LODWORD(v11[3].__shared_owners_) = 0;
          v31.n128_u64[0] = (unint64_t)&v11[1];
          v31.n128_u64[1] = (unint64_t)v11;
          LOBYTE(v11[1].__vftable) = 2;
          LODWORD(v11[2].__shared_weak_owners_) = 37;
          HIDWORD(v11[2].__shared_weak_owners_) = objc_msgSend(v10, "defaultTransitType");
          v14 = v36.n128_u64[0];
          v15 = *(_QWORD **)(v36.n128_u64[0] + 8);
          if ((unint64_t)v15 < *(_QWORD *)(v36.n128_u64[0] + 16))
          {
            *v15 = v11 + 1;
            v15[1] = v11;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            *(_QWORD *)(v14 + 8) = v15 + 2;
            goto LABEL_15;
          }
          *(_QWORD *)(v14 + 8) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v36.n128_i64[0], v31);
          if (v11)
          {
LABEL_15:
            v17 = (unint64_t *)&v11->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }

          continue;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
      if (!v6)
      {
        v4 = (uint64_t *)v36.n128_u64[0];
        break;
      }
    }
  }

  v20 = *v4;
  v21 = v4[1];
  if (*v4 == v21)
  {
    v24 = (std::__shared_weak_count *)v36.n128_u64[1];
    if (!v36.n128_u64[1])
      goto LABEL_37;
    goto LABEL_33;
  }
  v22 = *a1;
  v23 = *(uint64_t ***)(*a1 + 8);
  if ((unint64_t)v23 >= *(_QWORD *)(*a1 + 16))
  {
    v24 = (std::__shared_weak_count *)v36.n128_u64[1];
    *(_QWORD *)(v22 + 8) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(*a1, v36);
    if (!v24)
      goto LABEL_37;
    goto LABEL_33;
  }
  *v23 = v4;
  v24 = (std::__shared_weak_count *)v36.n128_u64[1];
  v23[1] = (uint64_t *)v36.n128_u64[1];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)(v22 + 8) = v23 + 2;
  if (v24)
  {
LABEL_33:
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_37:

  return v20 != v21;
}

void sub_19F7E6CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

BOOL md::LabelTransitRoute::addTransferSubtitleToNode(md::LabelTransitRoute::NodeInfo &)::$_3::operator()(uint64_t *a1, void *a2, _DWORD *a3)
{
  id v3;
  _QWORD *v4;
  uint64_t *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  void *v16;
  void *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float32x4_t v27;
  int16x8_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  id v50;
  float v53;
  float32x4_t v54;
  float v55;
  unsigned int v56;
  __n128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __n128 v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E42DD5B0;
  v4[3] = 0;
  v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  v62.n128_u64[0] = (unint64_t)(v4 + 3);
  v62.n128_u64[1] = (unint64_t)v4;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v6 = v50;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v58, v63, 16);
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)v59;
    v54 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    for (i = *(_QWORD *)v59; ; i = *(_QWORD *)v59)
    {
      if (i != v9)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * v8);
      if (objc_msgSend(v11, "artworkSourceType") == 1)
        break;
LABEL_37:
      if (++v8 >= v7)
      {
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v58, v63, 16);
        if (!v7)
        {
          v5 = (uint64_t *)v62.n128_u64[0];
          goto LABEL_43;
        }
        v8 = 0;
      }
    }
    objc_msgSend(v11, "shieldDataSource");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (char *)operator new(0x58uLL);
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = &off_1E42DCA18;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    {
      v39 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v15 = mdm::Allocator::instance(void)::alloc;
    *((_QWORD *)v13 + 8) = 0;
    *((_QWORD *)v13 + 9) = 0;
    *((_QWORD *)v13 + 7) = v15;
    *((_DWORD *)v13 + 20) = 0;
    v57.n128_u64[0] = (unint64_t)(v13 + 24);
    v57.n128_u64[1] = (unint64_t)v13;
    v13[24] = 1;
    *((_QWORD *)v13 + 9) = objc_msgSend(v12, "shieldType");
    objc_msgSend(v12, "shieldColorString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "length"))
    {
      objc_msgSend(v12, "shieldColorString");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = VKShieldColorsFromHexString(v17);
      v20 = v19;
      v22 = v21;
      v56 = v23;
      if (v18 >= 0.04045)
        v24 = powf((float)(v18 * 0.94787) + 0.052133, 2.4);
      else
        v24 = v18 * 0.077399;
      v55 = v24;
      if (v20 >= 0.04045)
        v25 = powf((float)(v20 * 0.94787) + 0.052133, 2.4);
      else
        v25 = v20 * 0.077399;
      if (v22 >= 0.04045)
      {
        v53 = v25;
        v26 = powf((float)(v22 * 0.94787) + 0.052133, 2.4);
        v25 = v53;
      }
      else
      {
        v26 = v22 * 0.077399;
      }
      v27.i64[0] = __PAIR64__(LODWORD(v25), LODWORD(v55));
      v27.i64[1] = __PAIR64__(v56, LODWORD(v26));
      v28 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v27, v54));
      *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)v28);
      *((_DWORD *)v13 + 20) = vmovn_s16(v28).u32[0];

    }
    else
    {
      *((_DWORD *)v13 + 20) = *a3;
    }

    objc_msgSend(v12, "shieldText");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "length");
    if (v30)
    {
      objc_msgSend(v12, "shieldText");
      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v31 = (char *)objc_msgSend(v3, "UTF8String");
    }
    else
    {
      v31 = "";
    }
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)v13 + 4, v31);
    if (v30)

    v32 = v62.n128_u64[0];
    v33 = *(_QWORD **)(v62.n128_u64[0] + 8);
    if ((unint64_t)v33 >= *(_QWORD *)(v62.n128_u64[0] + 16))
    {
      v34 = (std::__shared_weak_count *)v13;
      *(_QWORD *)(v32 + 8) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v62.n128_i64[0], v57);
      if (!v13)
      {
LABEL_36:

        goto LABEL_37;
      }
    }
    else
    {
      *v33 = v57.n128_u64[0];
      v34 = (std::__shared_weak_count *)v13;
      v33[1] = v13;
      if (v13)
      {
        v35 = (unint64_t *)(v13 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      *(_QWORD *)(v32 + 8) = v33 + 2;
      if (!v13)
        goto LABEL_36;
    }
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    goto LABEL_36;
  }
LABEL_43:

  v40 = *v5;
  v41 = v5[1];
  if (*v5 == v41)
  {
    v44 = (std::__shared_weak_count *)v62.n128_u64[1];
    if (!v62.n128_u64[1])
      goto LABEL_57;
    goto LABEL_53;
  }
  v42 = *a1;
  v43 = *(uint64_t ***)(*a1 + 8);
  if ((unint64_t)v43 >= *(_QWORD *)(*a1 + 16))
  {
    v44 = (std::__shared_weak_count *)v62.n128_u64[1];
    *(_QWORD *)(v42 + 8) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(*a1, v62);
    if (!v44)
      goto LABEL_57;
    goto LABEL_53;
  }
  *v43 = v5;
  v44 = (std::__shared_weak_count *)v62.n128_u64[1];
  v43[1] = (uint64_t *)v62.n128_u64[1];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  *(_QWORD *)(v42 + 8) = v43 + 2;
  if (v44)
  {
LABEL_53:
    v47 = (unint64_t *)&v44->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_57:

  return v40 != v41;
}

void sub_19F7E7290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  _Unwind_Resume(a1);
}

void CreateTransitLineDataElementGroup(_QWORD *a1, int a2, void *a3, void *a4)
{
  id v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  char v40;
  uint64_t v42;
  id obj;
  id v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v44 = a4;
  v39 = v6;
  if (objc_msgSend(v6, "count"))
  {
    v7 = operator new(0x30uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E42DD9A0;
    v7[4] = 0;
    v7[5] = 0;
    v7[3] = 0;
    *a1 = v7 + 3;
    a1[1] = v7;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    obj = v6;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
    if (v8)
    {
      v45 = 0;
      if (a2)
        v9 = 1;
      else
        v9 = 2;
      v40 = v9;
      v42 = *(_QWORD *)v48;
      for (i = *(_QWORD *)v48; ; i = *(_QWORD *)v48)
      {
        if (i != v42)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * v45);
        objc_msgSend(v44, "name");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v11, "artworkSourceType") == 1)
        {
          objc_msgSend(v11, "shieldDataSource");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "shieldText");
          v14 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v14 = 0;
        }
        if (objc_msgSend(v14, "length") || objc_msgSend(v12, "length"))
        {
          v15 = (char *)operator new(0x50uLL);
          *((_QWORD *)v15 + 1) = 0;
          v16 = (unint64_t *)(v15 + 8);
          *((_QWORD *)v15 + 2) = 0;
          *(_QWORD *)v15 = &off_1E42DCF20;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 56) = 0u;
          *((_QWORD *)v15 + 9) = 0;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_QWORD *)&v46 = v15 + 24;
          *((_QWORD *)&v46 + 1) = v15;
          v15[24] = v40;
          if (objc_msgSend(v14, "length"))
            std::string::__assign_external((std::string *)(v15 + 32), (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
          if (objc_msgSend(v12, "length"))
            std::string::__assign_external((std::string *)(v15 + 56), (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String"));
          v17 = *a1;
          v19 = *(_QWORD **)(*a1 + 8);
          v18 = *(_QWORD *)(*a1 + 16);
          if ((unint64_t)v19 >= v18)
          {
            v22 = *(_QWORD **)v17;
            v23 = ((uint64_t)v19 - *(_QWORD *)v17) >> 4;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 60)
              abort();
            v25 = v18 - (_QWORD)v22;
            if (v25 >> 3 > v24)
              v24 = v25 >> 3;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
              v26 = 0xFFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v27 = (char *)operator new(16 * v26);
            v28 = &v27[16 * v23];
            *(_OWORD *)v28 = v46;
            if (*((_QWORD *)&v46 + 1))
            {
              v29 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
              v22 = *(_QWORD **)v17;
              v19 = *(_QWORD **)(v17 + 8);
            }
            v31 = &v27[16 * v26];
            v21 = v28 + 16;
            if (v19 == v22)
            {
              *(_QWORD *)v17 = v28;
              *(_QWORD *)(v17 + 8) = v21;
              *(_QWORD *)(v17 + 16) = v31;
            }
            else
            {
              do
              {
                v32 = *((_OWORD *)v19 - 1);
                v19 -= 2;
                *((_OWORD *)v28 - 1) = v32;
                v28 -= 16;
                *v19 = 0;
                v19[1] = 0;
              }
              while (v19 != v22);
              v22 = *(_QWORD **)v17;
              v33 = *(_QWORD **)(v17 + 8);
              *(_QWORD *)v17 = v28;
              *(_QWORD *)(v17 + 8) = v21;
              *(_QWORD *)(v17 + 16) = v31;
              while (v33 != v22)
              {
                v34 = (std::__shared_weak_count *)*(v33 - 1);
                if (v34)
                {
                  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
                  do
                    v36 = __ldaxr(p_shared_owners);
                  while (__stlxr(v36 - 1, p_shared_owners));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                    std::__shared_weak_count::__release_weak(v34);
                  }
                }
                v33 -= 2;
              }
            }
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v19 = v46;
            v19[1] = v15;
            do
              v20 = __ldxr(v16);
            while (__stxr(v20 + 1, v16));
            v21 = v19 + 2;
          }
          *(_QWORD *)(v17 + 8) = v21;
          if (*((_QWORD *)&v46 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
            }
          }
        }

        if (++v45 >= v8)
        {
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
          if (!v8)
            break;
          v45 = 0;
        }
      }
    }

  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

}

void sub_19F7E7778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelExternalDataElement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalDataElement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelExternalDataElement>::__on_zero_shared(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void std::__shared_ptr_emplace<md::LabelExternalDataElementGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalDataElementGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelExternalDataElementGroup>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::LabelTransferGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBD30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTransferGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBD30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelTransferGroup>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[3];
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[3];
    if (!v5)
      return;
  }
  v6 = (char *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
}

void std::__shared_ptr_emplace<md::LabelAnnotationElementGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelAnnotationElementGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelAnnotationElementGroup>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::LabelAnnotationElement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelAnnotationElement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelAnnotationElement>::__on_zero_shared(uint64_t result)
{
  if (*(char *)(result + 55) < 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 56) + 40))(*(_QWORD *)(result + 56), *(_QWORD *)(result + 32), *(_QWORD *)(result + 48) & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t std::__split_buffer<md::LabelFeaturePlacementInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 32;
        v4 = *(void **)(v2 - 32);
        *(_QWORD *)(a1 + 16) = v2 - 32;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 24) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t FeatureStyleAttributes::FeatureStyleAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 31) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = *a2;
  v4 = a2[1];
  v6 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(_QWORD *)a1 = v6;
  if (v6)
  {
    v7 = (v4 - v5) >> 3;
    if (v7 >= 0x20)
      v7 = 32;
    if (v7)
    {
      v8 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)a1 + v8) = *(_QWORD *)(*a2 + v8);
        v8 += 8;
      }
      while (8 * v7 != v8);
      v6 = *(void **)a1;
    }
    *(_BYTE *)(a1 + 33) = v7;
  }
  else
  {
    LOBYTE(v7) = *(_BYTE *)(a1 + 33);
  }
  qsort(v6, v7, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  return a1;
}

void sub_19F7E7D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void MergeTransitSystemStylesWithStyle(void *a1, std::__shared_weak_count **a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::__shared_weak_count_vtbl *v12;
  unsigned __int8 v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v3 = a1;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D275B0], "attributesForTransitSystem:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D270A8]), "initWithGEOStyleAttributes:", v4);
      v6 = v5;
      if (v5)
      {
        objc_msgSend(v5, "featureStyleAttributesPtr");
        v8 = v29;
        v7 = v30;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v9 = BYTE1((*a2)[1].__shared_owners_);
      if (BYTE1((*a2)[1].__shared_owners_))
      {
        v10 = 0;
        v11 = 0;
        v12 = (*a2)->__vftable;
        v13 = *(_BYTE *)(v8 + 33);
        while (1)
        {
          v14 = v13;
          v15 = *(_QWORD **)v8;
          if (v13)
            break;
LABEL_8:
          v15[v14] = *((_QWORD *)&v12->~__shared_weak_count + v10);
          v13 = *(_BYTE *)(v8 + 33) + 1;
          *(_BYTE *)(v8 + 33) = v13;
          ++v10;
          v11 = 1;
          if (v10 == v9)
          {
            v15 = *(_QWORD **)v8;
            v14 = v13;
LABEL_25:
            qsort(v15, v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_26;
          }
        }
        if (v13 > 0x1Fu)
        {
          do
          {
            v19 = 0;
            v20 = (int *)v15;
            while (1)
            {
              v21 = *v20;
              v20 += 2;
              if (v21 == *((_DWORD *)&v12->~__shared_weak_count + 2 * v10))
                break;
              if (v14 == ++v19)
                goto LABEL_19;
            }
            HIDWORD(v15[v19]) = *((_DWORD *)&v12->~__shared_weak_count + 2 * v10 + 1);
LABEL_19:
            ++v10;
          }
          while (v10 != v9);
        }
        else
        {
          do
          {
            v16 = 0;
            v17 = (int *)v15;
            while (1)
            {
              v18 = *v17;
              v17 += 2;
              if (v18 == *((_DWORD *)&v12->~__shared_weak_count + 2 * v10))
                break;
              if (v14 == ++v16)
                goto LABEL_8;
            }
            HIDWORD(v15[v16]) = *((_DWORD *)&v12->~__shared_weak_count + 2 * v10++ + 1);
          }
          while (v10 != v9);
        }
        if ((v11 & 1) != 0)
          goto LABEL_25;
      }
LABEL_26:
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = a2[1];
      *a2 = (std::__shared_weak_count *)v8;
      a2[1] = v7;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      if (v7)
      {
        v27 = (unint64_t *)&v7->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }

  }
}

void sub_19F7E7FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelTransitRoute::findStopHeadingRange(uint64_t a1, double *a2, _DWORD *a3, int a4, char *a5)
{
  int v8;
  int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  __int16 v25;
  int v26;
  BOOL v27;
  __int16 v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  int v38;
  int v40;
  _DWORD *v41;
  int v42;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0xFFFFFFFFLL;
  v15 = 4;
  v41 = a3;
  v40 = a4;
  while (1)
  {
    v16 = (v8 + *a3);
    if (v8 + *a3 < 0)
      break;
    v17 = *(_QWORD *)(a1 + 240);
    if (v16 >= (*(_QWORD *)(a1 + 248) - v17) >> 4)
      break;
    v18 = (double *)(v17 + 16 * v16);
    v19 = *v18 - *a2;
    v20 = v18[1] - a2[1];
    v21 = v19 * v19 + v20 * v20;
    if (v21 <= *(double *)(a1 + 232))
    {
      if (v13)
      {
        if ((v9 & 1) != 0)
        {
          v33 = *a5;
          v34 = (v11 - *a5);
          if (v34 <= (v12 - *a5))
          {
            if (v34 <= (a5[1] - *a5))
            {
              v13 = 0;
              v37 = (a5[1] - *a5);
              if (v37 <= (v12 - *a5))
                LOBYTE(v37) = v12 - *a5;
              a5[1] = v37 + v33;
              v9 = 1;
            }
            else
            {
              v13 = 0;
              v9 = 1;
            }
          }
          else
          {
            v13 = 0;
            v35 = (a5[1] - *a5);
            if (v35 <= (v12 - *a5))
              LOBYTE(v35) = v12 - *a5;
            a5[1] = v35 + v33;
            *a5 = v11;
            v9 = 1;
          }
        }
        else
        {
          v13 = 0;
          *(_WORD *)a5 = v11 | (unsigned __int16)(v12 << 8);
          v9 = 1;
        }
      }
    }
    else
    {
      if (v21 > *(double *)(a1 + 224))
      {
        LODWORD(v16) = v14;
        if ((_DWORD)v14 == -1)
          goto LABEL_44;
LABEL_42:
        *a3 = v16 + a4;
        return v9 & 1;
      }
      if (v21 <= *(double *)(a1 + 216))
      {
        v16 = v14;
      }
      else
      {
        v42 = v9;
        v22 = v20;
        v23 = v19;
        v24 = atan2f(v22, v23) * 0.159154943;
        v25 = vcvts_n_s32_f32(v24 - floorf(v24), 8uLL);
        if (v13)
        {
          v26 = (char)(v10 - v25);
          v27 = v26 <= 0;
          if (v26 <= 0)
            v28 = v10;
          else
            v28 = v25;
          if (v27)
            v29 = v25;
          else
            v29 = v10;
          v30 = (v28 - v11);
          v31 = v29 - v11;
          if (v30 <= v31)
          {
            if (v30 <= (v12 - v11))
            {
              v36 = v31;
              if ((v12 - v11) > v31)
                v36 = (v12 - v11);
              v12 = v36 + v11;
            }
            v13 = 1;
          }
          else
          {
            v32 = (v12 - v11);
            if (v32 <= v31)
              LOWORD(v32) = v31;
            v12 = v32 + v11;
            v13 = 1;
            v11 = v28;
          }
        }
        else
        {
          v13 = 1;
          v12 = v25;
          v11 = v25;
        }
        v10 = v25;
        v16 = v14;
        v9 = v42;
        a4 = v40;
        a3 = v41;
      }
    }
    v8 += a4;
    v14 = v16;
    if (!--v15)
      goto LABEL_41;
  }
  v38 = v8 + *a3;
  LODWORD(v16) = v14;
  if (!((v13 == 0) | v9 & 1))
  {
    *(_WORD *)a5 = v11 | (unsigned __int16)(v12 << 8);
    LOBYTE(v9) = 1;
    LODWORD(v16) = v38;
  }
LABEL_41:
  if ((_DWORD)v16 != -1)
    goto LABEL_42;
LABEL_44:
  LOBYTE(v9) = 0;
  return v9 & 1;
}

BOOL md::LabelTransitRoute::findRouteHeadingRange(uint64_t a1, double *a2, int a3, int a4, char *a5)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  float v20;
  __int16 v21;
  int v22;
  char v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned __int8 v29;

  LODWORD(v8) = 0;
  v9 = 0;
  v10 = a4;
  v11 = a3;
  v12 = 10;
  do
  {
    if (v11 < 0)
      break;
    v13 = *(_QWORD *)(a1 + 240);
    if (v11 >= (unint64_t)((*(_QWORD *)(a1 + 248) - v13) >> 4))
      break;
    v14 = (double *)(v13 + 16 * v11);
    v15 = *v14 - *a2;
    v16 = v14[1] - a2[1];
    v17 = v15 * v15 + v16 * v16;
    if (v17 > *(double *)(a1 + 184))
    {
      v18 = v16;
      v19 = v15;
      v20 = atan2f(v18, v19) * 0.159154943;
      v21 = vcvts_n_s32_f32(v20 - floorf(v20), 8uLL);
      if ((_DWORD)v8)
      {
        v22 = (char)(v9 - v21);
        if (v22 <= 0)
          v23 = v9;
        else
          v23 = v21;
        if (v22 <= 0)
          v24 = v21;
        else
          v24 = v9;
        v25 = *a5;
        v26 = (v23 - *a5);
        v27 = v24 - *a5;
        if (v26 <= v27)
        {
          if (v26 <= (a5[1] - *a5))
          {
            v29 = v27;
            if ((a5[1] - *a5) > v27)
              v29 = a5[1] - *a5;
            a5[1] = v29 + v25;
          }
        }
        else
        {
          v28 = (a5[1] - *a5);
          if (v28 <= v27)
            LOBYTE(v28) = v27;
          a5[1] = v28 + v25;
          *a5 = v23;
        }
      }
      else
      {
        *(_WORD *)a5 = v21 | (v21 << 8);
      }
      v8 = 1;
      if (v17 > *(double *)(a1 + 192))
        return v8;
      v9 = v21;
    }
    v11 += v10;
    --v12;
  }
  while (v12);
  return (_DWORD)v8 != 0;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *,false>(unint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  __int16 v20;
  unsigned __int8 *v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  unsigned __int8 *v27;
  __int16 v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  unsigned __int8 *v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  __int16 v43;
  unsigned __int8 *v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  __int16 v51;
  unsigned __int8 *v52;
  __int16 v53;
  __int16 v54;
  unsigned __int8 *v55;
  __int16 v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  unsigned int v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  __int16 v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned int v76;
  __int16 v77;
  unsigned __int8 v78;
  __int16 v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  __int16 v84;
  __int16 v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __int16 v90;
  unsigned int v91;
  __int16 v92;
  __int16 v93;
  unsigned int v94;
  __int16 v95;
  unsigned int v96;
  __int16 v97;
  __int16 v98;
  unsigned __int8 *v99;
  BOOL v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned int v106;
  __int16 v107;
  uint64_t v108;
  unsigned int v109;
  int64_t v110;
  int64_t v111;
  BOOL v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  unsigned __int8 *v118;
  unsigned int v119;
  __int16 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned __int8 *v124;
  uint64_t v125;
  __int16 v126;
  unsigned int v127;
  __int16 v128;
  unsigned __int8 *v129;
  unsigned int v130;
  __int16 v131;
  unsigned __int8 *v132;
  _WORD *v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  __int16 v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;

  v7 = (unsigned __int8 *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = (a2 - v9) >> 1;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v83 = *v9;
        if (*v8 < v83)
        {
          v84 = v9[1];
          *(_WORD *)v9 = *(_WORD *)v8;
          v85 = v83 | (v84 << 8);
          goto LABEL_178;
        }
        return result;
      case 3:
        v86 = v9[2];
        v87 = *v9;
        v88 = *v8;
        if (v86 >= v87)
        {
          if (v88 < v86)
          {
            v126 = v9[3];
            *((_WORD *)v9 + 1) = *(_WORD *)v8;
            *(_WORD *)v8 = v86 | (v126 << 8);
            v127 = *v9;
            if (v9[2] < v127)
            {
              v128 = v9[1];
              *(_WORD *)v9 = *((_WORD *)v9 + 1);
              v98 = v127 | (v128 << 8);
              goto LABEL_152;
            }
          }
        }
        else
        {
          v85 = v87 | (v9[1] << 8);
          if (v88 >= v86)
          {
            *(_WORD *)v9 = *((_WORD *)v9 + 1);
            *((_WORD *)v9 + 1) = v85;
            if (*v8 >= v87)
              return result;
            *((_WORD *)v9 + 1) = *(_WORD *)v8;
          }
          else
          {
            *(_WORD *)v9 = *(_WORD *)v8;
          }
LABEL_178:
          *(_WORD *)v8 = v85;
        }
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(v9, v9 + 2, v9 + 4, (_WORD *)a2 - 1);
      case 5:
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(v9, v9 + 2, v9 + 4, (_WORD *)v9 + 3);
        v89 = v9[6];
        if (*v8 < v89)
        {
          v90 = v9[7];
          *((_WORD *)v9 + 3) = *(_WORD *)v8;
          *(_WORD *)v8 = v89 | (v90 << 8);
          v91 = v9[4];
          if (v9[6] < v91)
          {
            v92 = *((_WORD *)v9 + 3);
            v93 = v9[5];
            *((_WORD *)v9 + 2) = v92;
            *((_WORD *)v9 + 3) = v91 | (v93 << 8);
            v94 = v9[2];
            if (v94 > v92)
            {
              v95 = v9[3];
              *((_WORD *)v9 + 1) = v92;
              *((_WORD *)v9 + 2) = v94 | (v95 << 8);
              v96 = *v9;
              if (v96 > v92)
              {
                v97 = v9[1];
                *(_WORD *)v9 = v92;
                v98 = v96 | (v97 << 8);
LABEL_152:
                *((_WORD *)v9 + 1) = v98;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 47)
        {
          v99 = v9 + 2;
          v101 = v9 == a2 || v99 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v101)
            {
              v102 = 0;
              v103 = v9;
              do
              {
                v105 = v99;
                v106 = v103[2];
                if (v106 < *v103)
                {
                  v107 = v103[3];
                  v108 = v102;
                  do
                  {
                    *(_WORD *)&v9[v108 + 2] = *(_WORD *)&v9[v108];
                    if (!v108)
                    {
                      v104 = v9;
                      goto LABEL_117;
                    }
                    v109 = v9[v108 - 2];
                    v108 -= 2;
                  }
                  while (v106 < v109);
                  v104 = &v9[v108 + 2];
LABEL_117:
                  *(_WORD *)v104 = v106 | (v107 << 8);
                }
                v99 = v105 + 2;
                v102 += 2;
                v103 = v105;
              }
              while (v105 + 2 != a2);
            }
          }
          else if (!v101)
          {
            do
            {
              v129 = v99;
              v130 = v7[2];
              if (v130 < *v7)
              {
                v131 = v7[3];
                v132 = v129;
                do
                {
                  v133 = v132;
                  v134 = *((_WORD *)v132 - 1);
                  v132 -= 2;
                  *v133 = v134;
                }
                while (v130 < *((unsigned __int8 *)v133 - 4));
                *(_WORD *)v132 = v130 | (v131 << 8);
              }
              v99 = v129 + 2;
              v7 = v129;
            }
            while (v129 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v110 = (unint64_t)(v11 - 2) >> 1;
          v111 = v110;
          do
          {
            if (v110 >= v111)
            {
              v113 = (2 * v111) | 1;
              v114 = &v9[2 * v113];
              if (2 * v111 + 2 >= v11)
              {
                v116 = *v114;
              }
              else
              {
                v115 = *v114;
                v116 = v114[2];
                v117 = v115 >= v116;
                if (v115 > v116)
                  v116 = *v114;
                if (!v117)
                {
                  v114 += 2;
                  v113 = 2 * v111 + 2;
                }
              }
              v118 = &v9[2 * v111];
              v119 = *v118;
              if (v116 >= v119)
              {
                v120 = v9[2 * v111 + 1];
                while (1)
                {
                  v124 = v118;
                  v118 = v114;
                  *(_WORD *)v124 = *(_WORD *)v114;
                  if (v110 < v113)
                    break;
                  v125 = (2 * v113) | 1;
                  v114 = &v9[2 * v125];
                  v113 = 2 * v113 + 2;
                  if (v113 < v11)
                  {
                    v121 = *v114;
                    v122 = v114[2];
                    v123 = v121 >= v122;
                    if (v121 <= v122)
                      result = v114[2];
                    else
                      result = *v114;
                    if (v123)
                      v113 = v125;
                    else
                      v114 += 2;
                    if (result < v119)
                      break;
                  }
                  else
                  {
                    result = *v114;
                    v113 = v125;
                    if (result < v119)
                      break;
                  }
                }
                *(_WORD *)v118 = v119 | (v120 << 8);
              }
            }
            v112 = v111-- <= 0;
          }
          while (!v112);
          v135 = (unint64_t)v10 >> 1;
          while (2)
          {
            v136 = 0;
            LOWORD(v137) = *v9;
            v138 = v9[1];
            v139 = v9;
            do
            {
              v140 = 2 * v136 + 2;
              v141 = &v139[v140];
              v142 = (2 * v136) | 1;
              if (v140 < v135)
              {
                result = v141[2];
                if (*v141 < result)
                {
                  v141 += 2;
                  v142 = 2 * v136 + 2;
                }
              }
              *(_WORD *)v139 = *(_WORD *)v141;
              v139 = v141;
              v136 = v142;
            }
            while (v142 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
            a2 -= 2;
            if (v141 == a2)
            {
LABEL_161:
              *(_WORD *)v141 = v137 | (v138 << 8);
            }
            else
            {
              *(_WORD *)v141 = *(_WORD *)a2;
              *(_WORD *)a2 = v137 | (v138 << 8);
              v143 = v141 - v9 + 2;
              if (v143 >= 3)
              {
                v144 = (((unint64_t)v143 >> 1) - 2) >> 1;
                v145 = &v9[2 * v144];
                v137 = *v141;
                if (*v145 < v137)
                {
                  v138 = v141[1];
                  do
                  {
                    v146 = v141;
                    v141 = v145;
                    *(_WORD *)v146 = *(_WORD *)v145;
                    if (!v144)
                      break;
                    v144 = (v144 - 1) >> 1;
                    v145 = &v9[2 * v144];
                  }
                  while (*v145 < v137);
                  goto LABEL_161;
                }
              }
            }
            v112 = v135-- <= 2;
            if (v112)
              return result;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[2 * ((unint64_t)v11 >> 1)];
        v14 = *v8;
        if ((unint64_t)v10 >= 0x101)
        {
          v15 = *v13;
          v16 = *v9;
          if (v15 >= v16)
          {
            if (v14 < v15)
            {
              v21 = &v9[2 * v12];
              v22 = v21[1];
              *(_WORD *)v21 = *(_WORD *)v8;
              *(_WORD *)v8 = v15 | (v22 << 8);
              v23 = *v9;
              if (*v13 < v23)
              {
                v24 = v9[1];
                *(_WORD *)v9 = *(_WORD *)v13;
                *(_WORD *)v13 = v23 | (v24 << 8);
              }
            }
          }
          else
          {
            v17 = v16 | (v9[1] << 8);
            if (v14 < v15)
            {
              *(_WORD *)v9 = *(_WORD *)v8;
              goto LABEL_21;
            }
            *(_WORD *)v9 = *(_WORD *)v13;
            *(_WORD *)v13 = v17;
            if (*v8 < v16)
            {
              *(_WORD *)v13 = *(_WORD *)v8;
LABEL_21:
              *(_WORD *)v8 = v17;
            }
          }
          v29 = v12 - 1;
          v30 = &v9[2 * v12 - 2];
          v31 = *v30;
          v32 = v9[2];
          v33 = *(a2 - 4);
          if (v31 >= v32)
          {
            if (v33 < v31)
            {
              v35 = &v9[2 * v29];
              v36 = v35[1];
              *(_WORD *)v35 = *((_WORD *)a2 - 2);
              *((_WORD *)a2 - 2) = v31 | (v36 << 8);
              v37 = v9[2];
              if (*v30 < v37)
              {
                v38 = v9[3];
                *((_WORD *)v9 + 1) = *(_WORD *)v30;
                *(_WORD *)v30 = v37 | (v38 << 8);
              }
            }
          }
          else
          {
            v34 = v32 | (v9[3] << 8);
            if (v33 < v31)
            {
              *((_WORD *)v9 + 1) = *((_WORD *)a2 - 2);
              goto LABEL_33;
            }
            *((_WORD *)v9 + 1) = *(_WORD *)v30;
            *(_WORD *)v30 = v34;
            if (*(a2 - 4) < v32)
            {
              *(_WORD *)v30 = *((_WORD *)a2 - 2);
LABEL_33:
              *((_WORD *)a2 - 2) = v34;
            }
          }
          v39 = &v9[2 * v12 + 2];
          v40 = *v39;
          v41 = v9[4];
          v42 = *(a2 - 6);
          if (v40 >= v41)
          {
            if (v42 < v40)
            {
              v44 = &v9[2 * v12 + 2];
              v45 = v44[1];
              *(_WORD *)v44 = *((_WORD *)a2 - 3);
              *((_WORD *)a2 - 3) = v40 | (v45 << 8);
              v46 = v9[4];
              if (*v39 < v46)
              {
                v47 = v9[5];
                *((_WORD *)v9 + 2) = *(_WORD *)v39;
                *(_WORD *)v39 = v46 | (v47 << 8);
              }
            }
          }
          else
          {
            v43 = v41 | (v9[5] << 8);
            if (v42 < v40)
            {
              *((_WORD *)v9 + 2) = *((_WORD *)a2 - 3);
              goto LABEL_42;
            }
            *((_WORD *)v9 + 2) = *(_WORD *)v39;
            *(_WORD *)v39 = v43;
            if (*(a2 - 6) < v41)
            {
              *(_WORD *)v39 = *((_WORD *)a2 - 3);
LABEL_42:
              *((_WORD *)a2 - 3) = v43;
            }
          }
          v48 = *v13;
          v49 = *v30;
          v50 = *v39;
          if (v48 >= v49)
          {
            if (v50 < v48)
            {
              v52 = &v9[2 * v12];
              v53 = *(_WORD *)v39;
              v54 = v52[1];
              *(_WORD *)v52 = *(_WORD *)v39;
              *(_WORD *)v39 = v48 | (v54 << 8);
              if (v49 > v53)
              {
                v55 = &v9[2 * v29];
                v56 = v55[1];
                *(_WORD *)v55 = v53;
                *(_WORD *)v13 = v49 | (v56 << 8);
              }
            }
          }
          else
          {
            v51 = v49 | (v9[2 * v29 + 1] << 8);
            if (v50 < v48)
            {
              *(_WORD *)v30 = *(_WORD *)v39;
              goto LABEL_51;
            }
            *(_WORD *)v30 = *(_WORD *)v13;
            *(_WORD *)v13 = v51;
            if (v50 < v49)
            {
              *(_WORD *)v13 = *(_WORD *)v39;
LABEL_51:
              *(_WORD *)v39 = v51;
            }
          }
          v57 = *(_WORD *)v9;
          *(_WORD *)v9 = *(_WORD *)v13;
          *(_WORD *)v13 = v57;
          goto LABEL_53;
        }
        v18 = *v9;
        v19 = *v13;
        if (v18 >= v19)
        {
          if (v14 < v18)
          {
            v25 = v9[1];
            *(_WORD *)v9 = *(_WORD *)v8;
            *(_WORD *)v8 = v18 | (v25 << 8);
            v26 = *v13;
            if (*v9 < v26)
            {
              v27 = &v9[2 * v12];
              v28 = v27[1];
              *(_WORD *)v27 = *(_WORD *)v9;
              *(_WORD *)v9 = v26 | (v28 << 8);
            }
          }
        }
        else
        {
          v20 = v19 | (v9[2 * v12 + 1] << 8);
          if (v14 >= v18)
          {
            *(_WORD *)v13 = *(_WORD *)v9;
            *(_WORD *)v9 = v20;
            if (*v8 >= v19)
              goto LABEL_53;
            *(_WORD *)v9 = *(_WORD *)v8;
          }
          else
          {
            *(_WORD *)v13 = *(_WORD *)v8;
          }
          *(_WORD *)v8 = v20;
        }
LABEL_53:
        --a3;
        v58 = *v9;
        if ((a4 & 1) == 0 && *(v9 - 2) >= v58)
        {
          if (v58 >= *v8)
          {
            v74 = v9 + 2;
            do
            {
              v9 = v74;
              if (v74 >= a2)
                break;
              v74 += 2;
            }
            while (v58 >= *v9);
          }
          else
          {
            do
            {
              v73 = v9[2];
              v9 += 2;
            }
            while (v58 >= v73);
          }
          v75 = a2;
          if (v9 < a2)
          {
            v75 = a2;
            do
            {
              v76 = *(v75 - 2);
              v75 -= 2;
            }
            while (v58 < v76);
          }
          v77 = v7[1];
          if (v9 < v75)
          {
            v78 = *v9;
            do
            {
              v79 = v9[1];
              *(_WORD *)v9 = *(_WORD *)v75;
              *(_WORD *)v75 = v78 | (unsigned __int16)(v79 << 8);
              do
              {
                v80 = v9[2];
                v9 += 2;
                v78 = v80;
              }
              while (v58 >= v80);
              do
              {
                v81 = *(v75 - 2);
                v75 -= 2;
              }
              while (v58 < v81);
            }
            while (v9 < v75);
          }
          v82 = v9 - 2;
          if (v9 - 2 != v7)
            *(_WORD *)v7 = *(_WORD *)v82;
          a4 = 0;
          *(_WORD *)v82 = v58 | (v77 << 8);
          continue;
        }
        v59 = v9[1];
        v60 = v9;
        do
        {
          v61 = v60;
          v63 = v60[2];
          v60 += 2;
          v62 = v63;
        }
        while (v63 < v58);
        v64 = a2;
        if (v61 == v9)
        {
          v64 = a2;
          do
          {
            if (v60 >= v64)
              break;
            v66 = *(v64 - 2);
            v64 -= 2;
          }
          while (v66 >= v58);
        }
        else
        {
          do
          {
            v65 = *(v64 - 2);
            v64 -= 2;
          }
          while (v65 >= v58);
        }
        if (v60 < v64)
        {
          v67 = v60;
          v68 = v64;
          do
          {
            v69 = v67[1];
            *(_WORD *)v67 = *(_WORD *)v68;
            *(_WORD *)v68 = v62 | (unsigned __int16)(v69 << 8);
            do
            {
              v61 = v67;
              v70 = v67[2];
              v67 += 2;
              v62 = v70;
            }
            while (v70 < v58);
            do
            {
              v71 = *(v68 - 2);
              v68 -= 2;
            }
            while (v71 >= v58);
          }
          while (v67 < v68);
        }
        if (v61 != v9)
          *(_WORD *)v9 = *(_WORD *)v61;
        *(_WORD *)v61 = v58 | (v59 << 8);
        if (v60 < v64)
        {
LABEL_74:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *,false>(v7, v61, a3, a4 & 1);
          a4 = 0;
          v9 = v61 + 2;
          continue;
        }
        v72 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(v9, v61);
        v9 = v61 + 2;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(v61 + 2, a2);
        if (!(_DWORD)result)
        {
          if (v72)
            continue;
          goto LABEL_74;
        }
        a2 = v61;
        if (!v72)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t populatePlacementsInArc(uint64_t result, uint64_t *a2, float a3)
{
  float v3;
  unsigned __int8 v5;
  uint64_t v6;
  float v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a3;
  if (a3 >= 75.0)
  {
    v5 = result;
    while (1)
    {
      v7 = (float)(v3 * 0.0013889) - floorf(v3 * 0.0013889);
      v3 = v3 * 0.5;
      v8 = (vcvts_n_s32_f32(v7, 8uLL) + v5);
      v9 = a2[1];
      v10 = a2[2];
      if (v9 >= v10)
        break;
      if (v9)
      {
        *(_DWORD *)v9 = v8;
        *(float *)(v9 + 4) = v3;
      }
      v6 = v9 + 8;
LABEL_5:
      a2[1] = v6;
      result = populatePlacementsInArc(v5, a2, v3);
      v5 = v8;
      if (v3 < 75.0)
        return result;
    }
    v11 = (uint64_t)(v9 - *a2) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v10 - *a2;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (v12)
    {
      v14 = 8 * v12;
      v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v12, 4);
      v16 = v15 + 8 * v11;
      v12 = v15 + v14;
      if (v15)
      {
        *(_DWORD *)v16 = v8;
        *(float *)(v16 + 4) = v3;
      }
    }
    else
    {
      v16 = 8 * v11;
    }
    v18 = *a2;
    v17 = a2[1];
    v19 = v17 - *a2;
    if (v17 == *a2)
    {
      v21 = v16;
      goto LABEL_29;
    }
    v20 = v19 - 8;
    if ((unint64_t)(v19 - 8) < 0x38)
    {
      v21 = v16;
    }
    else
    {
      v21 = v16;
      if ((unint64_t)(v17 - v16) >= 0x20)
      {
        v22 = (v20 >> 3) + 1;
        v23 = (_OWORD *)(v16 - 16);
        v24 = (__int128 *)(v17 - 16);
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 4;
        }
        while (v25);
        v21 = v16 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v27 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *(_QWORD *)(v21 - 8) = v27;
      v21 -= 8;
    }
    while (v17 != v18);
LABEL_28:
    v17 = *a2;
LABEL_29:
    v6 = v16 + 8;
    *a2 = v21;
    a2[1] = v16 + 8;
    v28 = a2[2];
    a2[2] = v12;
    if (v17)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v17, v28 - v17);
    goto LABEL_5;
  }
  return result;
}

float *std::__introsort<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *,false>(float *result, float *a2, char **a3, uint64_t a4, char a5)
{
  float *v9;
  float *v10;
  float *i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  char *v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float *v23;
  float v24;
  int v25;
  int v26;
  float v27;
  float *j;
  int v29;
  int v30;
  float v31;
  int v32;
  int v33;
  float v35;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  float v42;
  int v43;
  int v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  int v49;
  int v50;
  float v51;
  int v52;
  int v53;
  int v54;
  int v55;
  float v56;
  float *v57;
  float *v58;
  int v59;
  int v60;
  float v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  float v66;
  int v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float *v72;
  BOOL v74;
  uint64_t v75;
  float *v76;
  float *v77;
  float *v78;
  float v79;
  float v80;
  char v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  float v87;
  char v88;
  int v89;
  int v90;
  int64_t v91;
  int64_t v92;
  float *v93;
  int64_t v94;
  uint64_t v95;
  float *v96;
  float v97;
  float v98;
  char v99;
  int v100;
  int v101;
  float *v102;
  float v103;
  float v104;
  char v105;
  int v106;
  int v107;
  int v108;
  char v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  char v116;
  int v117;
  float v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  float *v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  float v128;
  char v129;
  int v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  float *v135;
  float v136;
  float v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  unint64_t v145;
  float *v146;
  float v147;
  char v148;
  int v149;
  int v150;
  uint64_t v151;
  float *v152;
  float v153;
  float v154;
  char v155;
  int v156;
  int v157;
  float v158;
  char v159;
  int v160;
  int v161;
  float *v162;
  float v163;
  float *v164;
  float *v165;
  float *v166;
  float *v167;

  v9 = result;
LABEL_2:
  v10 = a2 - 2;
  v166 = a2 - 6;
  v167 = a2 - 4;
  v164 = a2 - 3;
  v165 = a2;
  i = v9;
  while (2)
  {
    v9 = i;
    v12 = (char *)a2 - (char *)i;
    v13 = ((char *)a2 - (char *)i) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v70 = *(a2 - 1);
        v71 = i[1];
        if (vabds_f32(v70, v71) > 10.0)
        {
          if (v70 <= v71)
            return result;
          goto LABEL_270;
        }
        v148 = **a3;
        v149 = (char)(*(_BYTE *)v10 - v148);
        if (v149 < 0)
          v149 = -v149;
        v150 = (char)(*(_BYTE *)i - v148);
        if (v150 < 0)
          v150 = -v150;
        if (v149 < v150)
        {
LABEL_270:
          v151 = *(_QWORD *)i;
          *(_QWORD *)i = *(_QWORD *)v10;
          *(_QWORD *)v10 = v151;
          return result;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(i, i + 2, v10, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(i, i + 2, i + 4, (uint64_t)v10, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *,0>(i, i + 2, i + 4, (uint64_t)(i + 6), (uint64_t)v10, a3);
      default:
        if (v12 > 191)
        {
          if (!a4)
          {
            if (i != a2)
            {
              v91 = (v13 - 2) >> 1;
              v92 = v91;
              while (1)
              {
                v94 = v92;
                if (v91 < v92)
                  goto LABEL_186;
                v95 = (2 * v92) | 1;
                v96 = &i[2 * v95];
                if (2 * v94 + 2 < (uint64_t)v13)
                {
                  v97 = v96[1];
                  v98 = v96[3];
                  if (vabds_f32(v97, v98) <= 10.0)
                  {
                    v99 = **a3;
                    v100 = (char)(*(_BYTE *)v96 - v99);
                    if (v100 < 0)
                      v100 = -v100;
                    v101 = (char)(*((_BYTE *)v96 + 8) - v99);
                    if (v101 < 0)
                      v101 = -v101;
                    if (v100 < v101)
                    {
LABEL_197:
                      v96 += 2;
                      v95 = 2 * v94 + 2;
                    }
                  }
                  else if (v97 > v98)
                  {
                    goto LABEL_197;
                  }
                }
                v102 = &i[2 * v94];
                v103 = v96[1];
                v104 = v102[1];
                if (vabds_f32(v103, v104) <= 10.0)
                {
                  v105 = **a3;
                  v106 = (char)(*(_BYTE *)v96 - v105);
                  if (v106 < 0)
                    v106 = -v106;
                  v107 = (char)(*(_BYTE *)v102 - v105);
                  if (v107 < 0)
                    v107 = -v107;
                  if (v106 >= v107)
                  {
LABEL_206:
                    v108 = *(_DWORD *)v102;
                    *(_QWORD *)v102 = *(_QWORD *)v96;
                    if (v91 < v95)
                    {
LABEL_184:
                      v93 = v96;
LABEL_185:
                      *(_DWORD *)v93 = v108;
                      v93[1] = v104;
                      goto LABEL_186;
                    }
                    while (2)
                    {
                      v112 = 2 * v95;
                      v95 = (2 * v95) | 1;
                      v93 = &i[2 * v95];
                      v113 = v112 + 2;
                      if (v113 < (uint64_t)v13)
                      {
                        v114 = v93[1];
                        v115 = v93[3];
                        if (vabds_f32(v114, v115) <= 10.0)
                        {
                          v116 = **a3;
                          LODWORD(result) = (char)(*(_BYTE *)v93 - v116);
                          if ((int)result < 0)
                            LODWORD(result) = -(int)result;
                          result = (float *)result;
                          v117 = (char)(*((_BYTE *)v93 + 8) - v116);
                          if (v117 < 0)
                            v117 = -v117;
                          if (result >= v117)
                            goto LABEL_224;
                        }
                        else if (v114 <= v115)
                        {
                          goto LABEL_224;
                        }
                        v93 += 2;
                        v95 = v113;
                      }
LABEL_224:
                      v118 = v93[1];
                      if (vabds_f32(v118, v104) <= 10.0)
                      {
                        v109 = **a3;
                        v110 = (char)(*(_BYTE *)v93 - v109);
                        if (v110 < 0)
                          v110 = -v110;
                        v111 = (char)(v108 - v109);
                        if (v111 < 0)
                          v111 = -v111;
                        if (v110 < v111)
                          goto LABEL_184;
                      }
                      else if (v118 > v104)
                      {
                        goto LABEL_184;
                      }
                      *(_QWORD *)v96 = *(_QWORD *)v93;
                      v96 = v93;
                      if (v91 < v95)
                        goto LABEL_185;
                      continue;
                    }
                  }
                }
                else if (v103 <= v104)
                {
                  goto LABEL_206;
                }
LABEL_186:
                v92 = v94 - 1;
                if (!v94)
                {
                  v119 = (unint64_t)v12 >> 3;
                  while (1)
                  {
                    v121 = 0;
                    v122 = *(_QWORD *)i;
                    v123 = i;
                    do
                    {
                      v124 = v123;
                      v123 += 2 * v121 + 2;
                      v125 = 2 * v121;
                      v121 = (2 * v121) | 1;
                      v126 = v125 + 2;
                      if (v126 < v119)
                      {
                        v127 = v123[1];
                        v128 = v123[3];
                        if (vabds_f32(v127, v128) <= 10.0)
                        {
                          v129 = **a3;
                          v130 = (char)(*(_BYTE *)v123 - v129);
                          if (v130 < 0)
                            v130 = -v130;
                          v131 = (char)(*((_BYTE *)v123 + 8) - v129);
                          if (v131 < 0)
                            v131 = -v131;
                          if (v130 < v131)
                          {
LABEL_231:
                            v123 += 2;
                            v121 = v126;
                          }
                        }
                        else if (v127 > v128)
                        {
                          goto LABEL_231;
                        }
                      }
                      *(_QWORD *)v124 = *(_QWORD *)v123;
                    }
                    while (v121 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
                    a2 -= 2;
                    if (v123 == a2)
                    {
                      *(_QWORD *)v123 = v122;
                    }
                    else
                    {
                      *(_QWORD *)v123 = *(_QWORD *)a2;
                      *(_QWORD *)a2 = v122;
                      v132 = (char *)v123 - (char *)i + 8;
                      if (v132 >= 9)
                      {
                        v133 = ((unint64_t)v132 >> 3) - 2;
                        v134 = v133 >> 1;
                        v135 = &i[2 * (v133 >> 1)];
                        v136 = v135[1];
                        v137 = v123[1];
                        if (vabds_f32(v136, v137) <= 10.0)
                        {
                          v138 = **a3;
                          v139 = (char)(*(_BYTE *)v135 - v138);
                          if (v139 < 0)
                            v139 = -v139;
                          v140 = (char)(*(_BYTE *)v123 - v138);
                          if (v140 < 0)
                            v140 = -v140;
                          if (v139 < v140)
                          {
LABEL_253:
                            v141 = *(_DWORD *)v123;
                            *(_QWORD *)v123 = *(_QWORD *)v135;
                            if (v133 >= 2)
                            {
                              while (1)
                              {
                                v145 = v134 - 1;
                                v134 = (v134 - 1) >> 1;
                                v146 = &i[2 * v134];
                                v147 = v146[1];
                                if (vabds_f32(v147, v137) <= 10.0)
                                {
                                  v142 = **a3;
                                  v143 = (char)(*(_BYTE *)v146 - v142);
                                  if (v143 < 0)
                                    v143 = -v143;
                                  v144 = (char)(v141 - v142);
                                  if (v144 < 0)
                                    v144 = -v144;
                                  if (v143 >= v144)
                                    break;
                                }
                                else if (v147 <= v137)
                                {
                                  break;
                                }
                                *(_QWORD *)v135 = *(_QWORD *)v146;
                                v135 = &i[2 * v134];
                                if (v145 <= 1)
                                  goto LABEL_264;
                              }
                            }
                            v146 = v135;
LABEL_264:
                            *(_DWORD *)v146 = v141;
                            v146[1] = v137;
                          }
                        }
                        else if (v136 > v137)
                        {
                          goto LABEL_253;
                        }
                      }
                    }
                    if (v119-- <= 2)
                      return result;
                  }
                }
              }
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = &i[2 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(v9, &v9[2 * (v13 >> 1)], v10, a3);
            v16 = &v9[2 * v14];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(v9 + 2, v16 - 2, v167, a3);
            a2 = v165;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(v9 + 4, &v9[2 * v14 + 2], v166, a3);
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(v16 - 2, v15, &v9[2 * v14 + 2], a3);
            v17 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v16;
            *(_QWORD *)v16 = v17;
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_12;
LABEL_8:
            v18 = *a3;
            v19 = *(v9 - 1);
            v20 = v9[1];
            if (vabds_f32(v19, v20) <= 10.0)
            {
              v21 = (char)(*((_BYTE *)v9 - 8) - *v18);
              if (v21 < 0)
                v21 = -v21;
              v22 = (char)(*(_BYTE *)v9 - *v18);
              if (v22 < 0)
                v22 = -v22;
              if (v21 < v22)
                goto LABEL_18;
            }
            else if (v19 > v20)
            {
              goto LABEL_18;
            }
            v47 = *v9;
            v48 = *(a2 - 1);
            if (vabds_f32(v20, v48) <= 10.0)
            {
              v52 = (char)(LOBYTE(v47) - *v18);
              if (v52 < 0)
                v52 = -v52;
              v53 = (char)(*(_BYTE *)v10 - *v18);
              if (v53 < 0)
                v53 = -v53;
              if (v52 < v53)
              {
LABEL_99:
                for (i = v9 + 2; ; i += 2)
                {
                  v56 = i[1];
                  if (vabds_f32(v20, v56) <= 10.0)
                  {
                    v54 = (char)(LOBYTE(v47) - *v18);
                    if (v54 < 0)
                      v54 = -v54;
                    v55 = (char)(*(_BYTE *)i - *v18);
                    if (v55 < 0)
                      v55 = -v55;
                    if (v54 < v55)
                      goto LABEL_108;
                  }
                  else if (v56 < v20)
                  {
                    goto LABEL_108;
                  }
                }
              }
            }
            else if (v48 < v20)
            {
              goto LABEL_99;
            }
            for (i = v9 + 2; i < a2; i += 2)
            {
              v51 = i[1];
              if (vabds_f32(v20, v51) <= 10.0)
              {
                v49 = (char)(LOBYTE(v47) - *v18);
                if (v49 < 0)
                  v49 = -v49;
                v50 = (char)(*(_BYTE *)i - *v18);
                if (v50 < 0)
                  v50 = -v50;
                if (v49 < v50)
                  break;
              }
              else if (v51 < v20)
              {
                break;
              }
            }
LABEL_108:
            v57 = a2;
            if (i >= a2)
              goto LABEL_136;
            v58 = v164;
            while (vabds_f32(v20, v48) > 10.0)
            {
              if (v48 >= v20)
                goto LABEL_118;
LABEL_115:
              v61 = *v58;
              v58 -= 2;
              v48 = v61;
            }
            v59 = (char)(LOBYTE(v47) - *v18);
            if (v59 < 0)
              v59 = -v59;
            v60 = (char)(*((_BYTE *)v58 + 4) - *v18);
            if (v60 < 0)
              v60 = -v60;
            if (v59 < v60)
              goto LABEL_115;
LABEL_118:
            v57 = v58 + 1;
LABEL_136:
            if (i < v57)
            {
              v62 = *(_QWORD *)i;
              *(_QWORD *)i = *(_QWORD *)v57;
              i += 2;
              *(_QWORD *)v57 = v62;
              v63 = *a3;
              while (1)
              {
                v66 = i[1];
                if (vabds_f32(v20, v66) <= 10.0)
                {
                  v64 = (char)(LOBYTE(v47) - *v63);
                  if (v64 < 0)
                    v64 = -v64;
                  v65 = (char)(*(_BYTE *)i - *v63);
                  if (v65 < 0)
                    v65 = -v65;
                  if (v64 < v65)
                  {
                    do
                    {
LABEL_134:
                      while (1)
                      {
                        v57 -= 2;
                        v69 = v57[1];
                        if (vabds_f32(v20, v69) <= 10.0)
                          break;
                        if (v69 >= v20)
                          goto LABEL_136;
                      }
                      v67 = (char)(LOBYTE(v47) - *v63);
                      if (v67 < 0)
                        v67 = -v67;
                      v68 = (char)(*(_BYTE *)v57 - *v63);
                      if (v68 < 0)
                        v68 = -v68;
                    }
                    while (v67 < v68);
                    goto LABEL_136;
                  }
                }
                else if (v66 < v20)
                {
                  goto LABEL_134;
                }
                i += 2;
              }
            }
            if (i - 2 != v9)
              *(_QWORD *)v9 = *((_QWORD *)i - 1);
            a5 = 0;
            *(i - 2) = v47;
            *(i - 1) = v20;
            continue;
          }
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(&v9[2 * (v13 >> 1)], v9, v10, a3);
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_8;
LABEL_12:
          v20 = v9[1];
          v18 = *a3;
LABEL_18:
          v23 = v9 + 2;
          v24 = *v9;
          while (1)
          {
            v27 = v23[1];
            if (vabds_f32(v27, v20) <= 10.0)
              break;
            if (v27 <= v20)
              goto LABEL_27;
LABEL_24:
            v23 += 2;
          }
          v25 = (char)(*(_BYTE *)v23 - *v18);
          if (v25 < 0)
            v25 = -v25;
          v26 = (char)(LOBYTE(v24) - *v18);
          if (v26 < 0)
            v26 = -v26;
          if (v25 < v26)
            goto LABEL_24;
LABEL_27:
          j = v10;
          if (v23 - 2 != v9)
          {
            while (1)
            {
              v31 = j[1];
              if (vabds_f32(v31, v20) <= 10.0)
              {
                v29 = (char)(*(_BYTE *)j - *v18);
                if (v29 < 0)
                  v29 = -v29;
                v30 = (char)(LOBYTE(v24) - *v18);
                if (v30 < 0)
                  v30 = -v30;
                if (v29 < v30)
                  goto LABEL_54;
              }
              else if (v31 > v20)
              {
                goto LABEL_54;
              }
              j -= 2;
            }
          }
          j = a2;
          if (v23 < a2)
          {
            for (j = v10; ; j -= 2)
            {
              v35 = j[1];
              if (vabds_f32(v35, v20) <= 10.0)
              {
                v32 = (char)(*(_BYTE *)j - *v18);
                if (v32 < 0)
                  v32 = -v32;
                v33 = (char)(LOBYTE(v24) - *v18);
                if (v33 < 0)
                  v33 = -v33;
                if (v32 < v33 || v23 >= j)
                  break;
              }
              else if (v35 > v20 || v23 >= j)
              {
                break;
              }
            }
          }
LABEL_54:
          i = v23;
          if (v23 < j)
          {
            i = v23;
            v37 = (unint64_t)j;
            do
            {
              v38 = *(_QWORD *)i;
              *(_QWORD *)i = *(_QWORD *)v37;
              i += 2;
              *(_QWORD *)v37 = v38;
              v39 = *a3;
              while (1)
              {
                v42 = i[1];
                if (vabds_f32(v42, v20) <= 10.0)
                  break;
                if (v42 <= v20)
                  goto LABEL_72;
LABEL_63:
                i += 2;
              }
              v40 = (char)(*(_BYTE *)i - *v39);
              if (v40 < 0)
                v40 = -v40;
              v41 = (char)(LOBYTE(v24) - *v39);
              if (v41 < 0)
                v41 = -v41;
              if (v40 < v41)
                goto LABEL_63;
              do
              {
LABEL_72:
                while (1)
                {
                  v37 -= 8;
                  v45 = *(float *)(v37 + 4);
                  if (vabds_f32(v45, v20) <= 10.0)
                    break;
                  if (v45 > v20)
                    goto LABEL_56;
                }
                v43 = (char)(*(_BYTE *)v37 - *v39);
                if (v43 < 0)
                  v43 = -v43;
                v44 = (char)(LOBYTE(v24) - *v39);
                if (v44 < 0)
                  v44 = -v44;
              }
              while (v43 >= v44);
LABEL_56:
              ;
            }
            while ((unint64_t)i < v37);
          }
          if (i - 2 != v9)
            *(_QWORD *)v9 = *((_QWORD *)i - 1);
          *(i - 2) = v24;
          *(i - 1) = v20;
          if (v23 < j)
            goto LABEL_80;
          v46 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(v9, i - 2, a3);
          result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(i, a2, a3);
          if (!(_DWORD)result)
          {
            if (v46)
              continue;
LABEL_80:
            result = (float *)std::__introsort<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *,false>(v9, i - 2, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = i - 2;
          if (v46)
            return result;
          goto LABEL_2;
        }
        v72 = i + 2;
        v74 = i == a2 || v72 == a2;
        if ((a5 & 1) != 0)
        {
          if (v74)
            return result;
          v75 = 0;
          v76 = i;
LABEL_162:
          v78 = v76;
          v76 = v72;
          v79 = v78[3];
          v80 = v78[1];
          if (vabds_f32(v79, v80) <= 10.0)
          {
            v81 = **a3;
            v82 = (char)(*(_BYTE *)v72 - v81);
            if (v82 < 0)
              v82 = -v82;
            v83 = (char)(*(_BYTE *)v78 - v81);
            if (v83 < 0)
              v83 = -v83;
            if (v82 >= v83)
              goto LABEL_161;
          }
          else if (v79 <= v80)
          {
            goto LABEL_161;
          }
          v84 = *((_DWORD *)v78 + 2);
          *((_QWORD *)v78 + 1) = *(_QWORD *)v78;
          v77 = i;
          if (v78 == i)
            goto LABEL_160;
          v85 = v75;
          while (1)
          {
            v86 = (_QWORD *)((char *)i + v85);
            v87 = *(float *)((char *)i + v85 - 4);
            if (vabds_f32(v79, v87) > 10.0)
            {
              if (v87 >= v79)
              {
                v77 = (float *)((char *)i + v85);
LABEL_160:
                *(_DWORD *)v77 = v84;
                v77[1] = v79;
LABEL_161:
                v72 = v76 + 2;
                v75 += 8;
                if (v76 + 2 == a2)
                  return result;
                goto LABEL_162;
              }
            }
            else
            {
              v88 = **a3;
              v89 = (char)(v84 - v88);
              if (v89 < 0)
                v89 = -v89;
              v90 = (char)(*((_BYTE *)v86 - 8) - v88);
              if (v90 < 0)
                v90 = -v90;
              if (v89 >= v90)
              {
                v77 = v78;
                goto LABEL_160;
              }
            }
            v78 -= 2;
            *v86 = *(v86 - 1);
            v85 -= 8;
            if (!v85)
            {
              v77 = i;
              goto LABEL_160;
            }
          }
        }
        if (!v74)
        {
          do
          {
            v152 = v9;
            v9 = v72;
            v153 = v152[3];
            v154 = v152[1];
            if (vabds_f32(v153, v154) <= 10.0)
            {
              v155 = **a3;
              v156 = (char)(*(_BYTE *)v9 - v155);
              if (v156 < 0)
                v156 = -v156;
              v157 = (char)(*(_BYTE *)v152 - v155);
              if (v157 < 0)
                v157 = -v157;
              if (v156 < v157)
              {
LABEL_283:
                v158 = *v9;
                do
                {
                  while (1)
                  {
                    v162 = v152;
                    *((_QWORD *)v152 + 1) = *(_QWORD *)v152;
                    v152 -= 2;
                    v163 = *(v162 - 1);
                    if (vabds_f32(v153, v163) <= 10.0)
                      break;
                    if (v163 >= v153)
                      goto LABEL_273;
                  }
                  v159 = **a3;
                  v160 = (char)(LOBYTE(v158) - v159);
                  if (v160 < 0)
                    v160 = -v160;
                  v161 = (char)(*((_BYTE *)v162 - 8) - v159);
                  if (v161 < 0)
                    v161 = -v161;
                }
                while (v160 < v161);
LABEL_273:
                *v162 = v158;
                v162[1] = v153;
              }
            }
            else if (v153 > v154)
            {
              goto LABEL_283;
            }
            v72 = v9 + 2;
          }
          while (v9 + 2 != a2);
        }
        return result;
    }
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(float *result, float *a2, float *a3, char **a4)
{
  char *v4;
  char v5;
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  float v11;
  uint64_t v12;
  float v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;

  v4 = *a4;
  v5 = *(_BYTE *)a2;
  v6 = a2[1];
  v7 = result[1];
  if (vabds_f32(v6, v7) <= 10.0)
  {
    v9 = (char)(v5 - *v4);
    if (v9 < 0)
      v9 = -v9;
    v10 = (char)(*(_BYTE *)result - *v4);
    if (v10 < 0)
      v10 = -v10;
    if (v9 >= v10)
      goto LABEL_3;
LABEL_11:
    v11 = a3[1];
    if (vabds_f32(v11, v6) <= 10.0)
    {
      v20 = *v4;
      v21 = (char)(*(_BYTE *)a3 - v20);
      if (v21 < 0)
        v21 = -v21;
      v22 = (char)(v5 - v20);
      if (v22 < 0)
        v22 = -v22;
      if (v21 >= v22)
      {
LABEL_13:
        v12 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v12;
        v13 = a3[1];
        if (vabds_f32(v13, *((float *)&v12 + 1)) <= 10.0)
        {
          v24 = **a4;
          v25 = (char)(*(_BYTE *)a3 - v24);
          if (v25 < 0)
            v25 = -v25;
          v26 = (char)(v12 - v24);
          if (v26 < 0)
            v26 = -v26;
          if (v25 >= v26)
            return result;
        }
        else if (v13 <= *((float *)&v12 + 1))
        {
          return result;
        }
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v12;
        return result;
      }
    }
    else if (v11 <= v6)
    {
      goto LABEL_13;
    }
    v23 = *(_QWORD *)result;
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_QWORD *)a3 = v23;
    return result;
  }
  if (v6 > v7)
    goto LABEL_11;
LABEL_3:
  v8 = a3[1];
  if (vabds_f32(v8, v6) <= 10.0)
  {
    v14 = *v4;
    v15 = (char)(*(_BYTE *)a3 - v14);
    if (v15 < 0)
      v15 = -v15;
    v16 = (char)(v5 - v14);
    if (v16 < 0)
      v16 = -v16;
    if (v15 >= v16)
      return result;
  }
  else if (v8 <= v6)
  {
    return result;
  }
  v17 = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v17;
  v18 = a2[1];
  v19 = result[1];
  if (vabds_f32(v18, v19) <= 10.0)
  {
    v27 = **a4;
    v28 = (char)(*(_BYTE *)a2 - v27);
    if (v28 < 0)
      v28 = -v28;
    v29 = (char)(*(_BYTE *)result - v27);
    if (v29 < 0)
      v29 = -v29;
    if (v28 < v29)
      goto LABEL_41;
  }
  else if (v18 > v19)
  {
LABEL_41:
    v30 = *(_QWORD *)result;
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v30;
  }
  return result;
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(float *a1, float *a2, float *a3, uint64_t a4, char **a5)
{
  float *result;
  float v11;
  float v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  float v23;
  float v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(a1, a2, a3, a5);
  v11 = *(float *)(a4 + 4);
  v12 = a3[1];
  if (vabds_f32(v11, v12) <= 10.0)
  {
    v13 = **a5;
    v14 = (char)(*(_BYTE *)a4 - v13);
    if (v14 < 0)
      v14 = -v14;
    v15 = (char)(*(_BYTE *)a3 - v13);
    if (v15 < 0)
      v15 = -v15;
    if (v14 >= v15)
      return result;
  }
  else if (v11 <= v12)
  {
    return result;
  }
  v16 = *(_QWORD *)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v16;
  v17 = a3[1];
  v18 = a2[1];
  if (vabds_f32(v17, v18) <= 10.0)
  {
    v19 = **a5;
    v20 = (char)(*(_BYTE *)a3 - v19);
    if (v20 < 0)
      v20 = -v20;
    v21 = (char)(*(_BYTE *)a2 - v19);
    if (v21 < 0)
      v21 = -v21;
    if (v20 >= v21)
      return result;
  }
  else if (v17 <= v18)
  {
    return result;
  }
  v22 = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v22;
  v23 = a2[1];
  v24 = a1[1];
  if (vabds_f32(v23, v24) > 10.0)
  {
    if (v23 <= v24)
      return result;
LABEL_25:
    v28 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v28;
    return result;
  }
  v25 = **a5;
  v26 = (char)(*(_BYTE *)a2 - v25);
  if (v26 < 0)
    v26 = -v26;
  v27 = (char)(*(_BYTE *)a1 - v25);
  if (v27 < 0)
    v27 = -v27;
  if (v26 < v27)
    goto LABEL_25;
  return result;
}

float *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *,0>(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5, char **a6)
{
  float *result;
  float v13;
  float v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  float v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  float v25;
  float v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  char v33;
  int v34;
  int v35;
  uint64_t v36;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(a1, a2, a3, a4, a6);
  v13 = *(float *)(a5 + 4);
  v14 = *(float *)(a4 + 4);
  if (vabds_f32(v13, v14) <= 10.0)
  {
    v15 = **a6;
    v16 = (char)(*(_BYTE *)a5 - v15);
    if (v16 < 0)
      v16 = -v16;
    v17 = (char)(*(_BYTE *)a4 - v15);
    if (v17 < 0)
      v17 = -v17;
    if (v16 >= v17)
      return result;
  }
  else if (v13 <= v14)
  {
    return result;
  }
  v18 = *(_QWORD *)a4;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)a5 = v18;
  v19 = *(float *)(a4 + 4);
  v20 = a3[1];
  if (vabds_f32(v19, v20) <= 10.0)
  {
    v21 = **a6;
    v22 = (char)(*(_BYTE *)a4 - v21);
    if (v22 < 0)
      v22 = -v22;
    v23 = (char)(*(_BYTE *)a3 - v21);
    if (v23 < 0)
      v23 = -v23;
    if (v22 >= v23)
      return result;
  }
  else if (v19 <= v20)
  {
    return result;
  }
  v24 = *(_QWORD *)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v24;
  v25 = a3[1];
  v26 = a2[1];
  if (vabds_f32(v25, v26) <= 10.0)
  {
    v27 = **a6;
    v28 = (char)(*(_BYTE *)a3 - v27);
    if (v28 < 0)
      v28 = -v28;
    v29 = (char)(*(_BYTE *)a2 - v27);
    if (v29 < 0)
      v29 = -v29;
    if (v28 >= v29)
      return result;
  }
  else if (v25 <= v26)
  {
    return result;
  }
  v30 = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v30;
  v31 = a2[1];
  v32 = a1[1];
  if (vabds_f32(v31, v32) > 10.0)
  {
    if (v31 <= v32)
      return result;
LABEL_33:
    v36 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v36;
    return result;
  }
  v33 = **a6;
  v34 = (char)(*(_BYTE *)a2 - v33);
  if (v34 < 0)
    v34 = -v34;
  v35 = (char)(*(_BYTE *)a1 - v33);
  if (v35 < 0)
    v35 = -v35;
  if (v34 < v35)
    goto LABEL_33;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(float *a1, float *a2, char **a3)
{
  uint64_t v6;
  _BOOL8 result;
  float v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  char v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  char *v25;
  float v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = a1[1];
      if (vabds_f32(v8, v9) > 10.0)
      {
        if (v8 <= v9)
          return result;
        goto LABEL_39;
      }
      v27 = **a3;
      v28 = (char)(*((_BYTE *)a2 - 8) - v27);
      if (v28 < 0)
        v28 = -v28;
      v29 = (char)(*(_BYTE *)a1 - v27);
      if (v29 < 0)
        v29 = -v29;
      if (v28 < v29)
      {
LABEL_39:
        v30 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v30;
        return result;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(a1, a1 + 2, a1 + 4, (uint64_t)(a2 - 2), a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *,0>(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)(a2 - 2), a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelTransitRoute::generateTransitNodeTextPlacements(void)::$_0 &,LabelPlacementRegion *>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      while (2)
      {
        v15 = v11[1];
        v16 = v10[1];
        if (vabds_f32(v15, v16) <= 10.0)
        {
          v17 = **a3;
          v18 = (char)(*(_BYTE *)v11 - v17);
          if (v18 < 0)
            v18 = -v18;
          v19 = (char)(*(_BYTE *)v10 - v17);
          if (v19 < 0)
            v19 = -v19;
          if (v18 >= v19)
            goto LABEL_9;
        }
        else if (v15 <= v16)
        {
          goto LABEL_9;
        }
        v20 = *(_DWORD *)v11;
        *(_QWORD *)v11 = *(_QWORD *)v10;
        v14 = (uint64_t)a1;
        if (v10 == a1)
          goto LABEL_8;
        v21 = v12;
        while (2)
        {
          v25 = (char *)a1 + v21;
          v26 = *(float *)((char *)a1 + v21 + 12);
          if (vabds_f32(v15, v26) > 10.0)
          {
            if (v26 >= v15)
            {
              v14 = (uint64_t)v10;
              goto LABEL_8;
            }
            goto LABEL_25;
          }
          v22 = **a3;
          v23 = (char)(v20 - v22);
          if (v23 < 0)
            v23 = -v23;
          v24 = (char)(v25[8] - v22);
          if (v24 < 0)
            v24 = -v24;
          if (v23 < v24)
          {
LABEL_25:
            v10 -= 2;
            *((_QWORD *)v25 + 2) = *((_QWORD *)v25 + 1);
            v21 -= 8;
            if (v21 == -16)
            {
              v14 = (uint64_t)a1;
              goto LABEL_8;
            }
            continue;
          }
          break;
        }
        v14 = (uint64_t)a1 + v21 + 16;
LABEL_8:
        *(_DWORD *)v14 = v20;
        *(float *)(v14 + 4) = v15;
        if (++v13 == 8)
          return v11 + 2 == a2;
LABEL_9:
        v10 = v11;
        v12 += 8;
        v11 += 2;
        if (v11 != a2)
          continue;
        return 1;
      }
  }
}

unsigned __int8 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, _WORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      v8 = a2[1];
      *(_WORD *)a2 = *(_WORD *)a3;
      *(_WORD *)a3 = v4 | (v8 << 8);
      v9 = *result;
      v6 = v4;
      if (*a2 < v9)
      {
        v10 = result[1];
        *(_WORD *)result = *(_WORD *)a2;
        *(_WORD *)a2 = v9 | (v10 << 8);
        v6 = *a3;
      }
    }
  }
  else
  {
    v7 = v5 | (result[1] << 8);
    if (v6 < v4)
    {
      *(_WORD *)result = *(_WORD *)a3;
LABEL_9:
      *(_WORD *)a3 = v7;
      v6 = v5;
      goto LABEL_10;
    }
    *(_WORD *)result = *(_WORD *)a2;
    *(_WORD *)a2 = v7;
    v6 = *a3;
    if (v6 < v5)
    {
      *(_WORD *)a2 = *(_WORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(unsigned __int8 *)a4 < v6)
  {
    v11 = a3[1];
    *(_WORD *)a3 = *a4;
    *a4 = v6 | (v11 << 8);
    v12 = *a2;
    if (*a3 < v12)
    {
      v13 = a2[1];
      *(_WORD *)a2 = *(_WORD *)a3;
      *(_WORD *)a3 = v12 | (v13 << 8);
      v14 = *result;
      if (*a2 < v14)
      {
        v15 = result[1];
        *(_WORD *)result = *(_WORD *)a2;
        *(_WORD *)a2 = v14 | (v15 << 8);
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  __int16 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  __int16 v37;
  uint64_t v38;
  unsigned int v39;

  v4 = (a2 - a1) >> 1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      if (*(a2 - 2) < v6)
      {
        v7 = a1[1];
        *(_WORD *)a1 = *((_WORD *)a2 - 1);
        *((_WORD *)a2 - 1) = v6 | (v7 << 8);
      }
      return result;
    case 3:
      v8 = a1[2];
      v9 = *a1;
      v10 = *(a2 - 2);
      if (v8 >= v9)
      {
        if (v10 < v8)
        {
          v26 = a1[3];
          *((_WORD *)a1 + 1) = *((_WORD *)a2 - 1);
          *((_WORD *)a2 - 1) = v8 | (v26 << 8);
          v27 = *a1;
          if (a1[2] < v27)
          {
            v28 = a1[1];
            *(_WORD *)a1 = *((_WORD *)a1 + 1);
            *((_WORD *)a1 + 1) = v27 | (v28 << 8);
          }
        }
      }
      else
      {
        v11 = v9 | (a1[1] << 8);
        if (v10 >= v8)
        {
          *(_WORD *)a1 = *((_WORD *)a1 + 1);
          *((_WORD *)a1 + 1) = v11;
          if (*(a2 - 2) < v9)
          {
            *((_WORD *)a1 + 1) = *((_WORD *)a2 - 1);
            *((_WORD *)a2 - 1) = v11;
          }
        }
        else
        {
          *(_WORD *)a1 = *((_WORD *)a2 - 1);
          *((_WORD *)a2 - 1) = v11;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(a1, a1 + 2, a1 + 4, (_WORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::LabelAngleRange *>(a1, a1 + 2, a1 + 4, (_WORD *)a1 + 3);
      v17 = a1[6];
      if (*(a2 - 2) < v17)
      {
        v18 = a1[7];
        *((_WORD *)a1 + 3) = *((_WORD *)a2 - 1);
        *((_WORD *)a2 - 1) = v17 | (v18 << 8);
        v19 = a1[4];
        if (a1[6] < v19)
        {
          v20 = *((_WORD *)a1 + 3);
          v21 = a1[5];
          *((_WORD *)a1 + 2) = v20;
          *((_WORD *)a1 + 3) = v19 | (v21 << 8);
          v22 = a1[2];
          if (v22 > v20)
          {
            v23 = a1[3];
            *((_WORD *)a1 + 1) = v20;
            *((_WORD *)a1 + 2) = v22 | (v23 << 8);
            v24 = *a1;
            if (v24 > v20)
            {
              v25 = a1[1];
              *(_WORD *)a1 = v20;
              *((_WORD *)a1 + 1) = v24 | (v25 << 8);
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *a1;
      if (v14 >= v15)
      {
        if (v13 < v14)
        {
          v29 = *((_WORD *)a1 + 2);
          v30 = a1[3];
          *((_WORD *)a1 + 1) = v29;
          *((_WORD *)a1 + 2) = v14 | (v30 << 8);
          if (v15 > v29)
          {
            v31 = a1[1];
            *(_WORD *)a1 = v29;
            *((_WORD *)a1 + 1) = v15 | (v31 << 8);
          }
        }
      }
      else
      {
        v16 = v15 | (a1[1] << 8);
        if (v13 >= v14)
        {
          *(_WORD *)a1 = *((_WORD *)a1 + 1);
          *((_WORD *)a1 + 1) = v16;
          if (v13 >= v15)
            goto LABEL_27;
          *((_WORD *)a1 + 1) = *((_WORD *)a1 + 2);
        }
        else
        {
          *(_WORD *)a1 = *((_WORD *)a1 + 2);
        }
        *((_WORD *)a1 + 2) = v16;
      }
LABEL_27:
      v32 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      break;
  }
  while (1)
  {
    v36 = *v32;
    if (v36 < *v12)
    {
      v37 = v32[1];
      v38 = v33;
      do
      {
        *(_WORD *)&a1[v38 + 6] = *(_WORD *)&a1[v38 + 4];
        if (v38 == -4)
        {
          v35 = a1;
          goto LABEL_30;
        }
        v39 = a1[v38 + 2];
        v38 -= 2;
      }
      while (v36 < v39);
      v35 = &a1[v38 + 6];
LABEL_30:
      *(_WORD *)v35 = v36 | (v37 << 8);
      if (++v34 == 8)
        return v32 + 2 == a2;
    }
    v12 = v32;
    v33 += 2;
    v32 += 2;
    if (v32 == a2)
      return 1;
  }
}

uint64_t geo::_retain_ptr<VKRouteLine * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A30;

  return a1;
}

void geo::_retain_ptr<VKRouteLine * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A30;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelTransitRouteLine::generateTransitShieldFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7;
  void *v8;
  char *v9;
  _BYTE *v10;
  void *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned __int8 v27;
  uint64_t v28;
  id WeakRetained;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  void *v66;
  __int128 v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  unsigned __int8 v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unsigned __int8 v82;
  size_t v83;
  _QWORD *v84;
  uint64_t v85;
  int *v86;
  int v87;
  uint64_t v88;
  int *v89;
  int v90;
  void *v91;
  id v92;
  char *v93;
  void *v94;
  id v95;
  char *v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  _QWORD *v115;
  unsigned __int8 v116;
  uint64_t v117;
  void *v118;
  char *v119;
  void *v120;
  void *v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  unsigned int v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  unsigned int v133;
  float v134;
  float v135;
  void *v136;
  float32x4_t v137;
  int16x8_t v138;
  _QWORD *v139;
  unint64_t v140;
  char *v141;
  char *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t *v154;
  unint64_t v155;
  char *v156;
  __int128 v157;
  char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  unsigned __int8 v166;
  unsigned __int8 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  _BYTE *v174;
  char *v175;
  _BYTE *v176;
  int64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _BYTE *v182;
  int64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _OWORD *v187;
  char *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  void *v212;
  id v214;
  void *v215;
  void *v216;
  void *v217;
  uint64_t v218;
  id v219;
  float v220;
  void *v221;
  float32x4_t v222;
  uint64_t v223;
  float v224;
  unsigned int v225;
  id v226;
  id obj;
  id v228;
  _QWORD *v229;
  uint64_t v230;
  unsigned int v231;
  void *__p[2];
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  unsigned int v247;
  __int128 v248;
  _BYTE v249[128];
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v248 = 0uLL;
  v247 = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  v246 = _Q0;
  v7 = *(id *)(a1 + 32);
  v8 = v7;
  if (v7)
  {
    v226 = v7;
    objc_msgSend(v7, "sections");
    v9 = (char *)__p[0];
    v10 = __p[1];
    if (__p[0])
    {
      v11 = __p[0];
      if (__p[1] != __p[0])
      {
        v12 = __p[1];
        v13 = (char *)__p[1];
        do
        {
          v15 = (_QWORD *)*((_QWORD *)v13 - 1);
          v13 -= 8;
          v14 = v15;
          if (v15)
          {
            _ZF = (*v14)-- == 1;
            if (_ZF)
            {
              md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v14 + 1));
              {
                v17 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(v12 - 1), 424);
              *(v12 - 1) = 0;
            }
          }
          v12 = v13;
        }
        while (v13 != v9);
        v11 = __p[0];
      }
      __p[1] = v9;
      operator delete(v11);
    }
    if (v10 != v9)
    {
      v218 = 0;
      v18 = (v10 - v9) >> 3;
      if (v18 <= 1)
        v18 = 1;
      v210 = v18;
      v222 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      while (1)
      {
        objc_msgSend(v8, "sections");
        v19 = (char *)__p[0];
        v20 = __p[1];
        v21 = *((_QWORD *)__p[0] + v218);
        if (v21)
          v22 = v21 + 8;
        else
          v22 = 0;
        v223 = v22;
        v23 = __p[0];
        if (__p[1] != __p[0])
        {
          v24 = (char *)__p[1];
          do
          {
            v26 = (_QWORD *)*((_QWORD *)v24 - 1);
            v24 -= 8;
            v25 = v26;
            if (v26)
            {
              _ZF = (*v25)-- == 1;
              if (_ZF)
              {
                md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v25 + 1));
                {
                  v28 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v28, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, *(v20 - 1), 424);
                *(v20 - 1) = 0;
              }
            }
            v20 = v24;
          }
          while (v24 != v19);
          v23 = __p[0];
        }
        __p[1] = v19;
        operator delete(v23);
        WeakRetained = objc_loadWeakRetained((id *)(v223 + 224));
        v214 = WeakRetained;
        objc_msgSend(WeakRetained, "composedRouteSegment");
        v217 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v217, "type") != 6)
          goto LABEL_257;
        v219 = v217;
        objc_msgSend(WeakRetained, "composedRouteStep");
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = *(id *)(a1 + 8);
        objc_msgSend(v30, "stepAtIndex:", objc_msgSend(WeakRetained, "finalStepIndex"));
        v215 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v219, "boardStep");
        v212 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v215, "transitLine");
        v221 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend(v219, "rideOptionsCount") >= 2)
        {
          objc_msgSend(v212, "transitLine");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = objc_msgSend(v31, "muid");
          objc_msgSend(v215, "transitLine");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v32) = v32 == objc_msgSend(v33, "muid");

          if ((_DWORD)v32)
          {
            objc_msgSend(v212, "transitLine");
            v34 = objc_claimAutoreleasedReturnValue();

            v221 = (void *)v34;
          }
        }
        v35 = (char *)operator new(0x150uLL);
        *((_QWORD *)v35 + 1) = 0;
        *((_QWORD *)v35 + 2) = 0;
        *(_QWORD *)v35 = &off_1E42DCF90;
        *((_WORD *)v35 + 16) = 2;
        *(_OWORD *)(v35 + 40) = 0u;
        *(_OWORD *)(v35 + 56) = 0u;
        *(_OWORD *)(v35 + 72) = 0u;
        *(_OWORD *)(v35 + 88) = 0u;
        *((_QWORD *)v35 + 13) = 0x7FFFFFFF437C0000;
        v35[112] = 0;
        *((_QWORD *)v35 + 19) = 0;
        *((_QWORD *)v35 + 20) = 0;
        *((_QWORD *)v35 + 18) = 0;
        *((_QWORD *)v35 + 24) = 0;
        *((_QWORD *)v35 + 15) = 0;
        *((_QWORD *)v35 + 16) = 0;
        *((_QWORD *)v35 + 3) = &off_1E42A0A20;
        v35[136] = 0;
        *((_WORD *)v35 + 100) = 0;
        *((_OWORD *)v35 + 13) = 0u;
        *((_OWORD *)v35 + 14) = 0u;
        *((_OWORD *)v35 + 15) = 0u;
        {
          v198 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *((_QWORD *)v35 + 32) = mdm::Allocator::instance(void)::alloc;
        *((_QWORD *)v35 + 33) = 0;
        *((_QWORD *)v35 + 34) = 0;
        *((_QWORD *)v35 + 35) = 0;
        {
          v199 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v199, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *((_QWORD *)v35 + 36) = mdm::Allocator::instance(void)::alloc;
        *((_QWORD *)v35 + 37) = 0;
        *((_QWORD *)v35 + 38) = 0;
        *((_QWORD *)v35 + 39) = 0;
        {
          v200 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v200, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *((_QWORD *)v35 + 40) = mdm::Allocator::instance(void)::alloc;
        v35[328] = 4;
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
        *(_QWORD *)&v248 = v35 + 24;
        *((_QWORD *)&v248 + 1) = v35;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v43 = *(_QWORD **)(a3 + 8);
        v42 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v43 < v42)
          break;
        v48 = *(_QWORD **)a3;
        v49 = ((uint64_t)v43 - *(_QWORD *)a3) >> 4;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60)
          abort();
        v51 = v42 - (_QWORD)v48;
        if (v51 >> 3 > v50)
          v50 = v51 >> 3;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52 >> 60)
LABEL_277:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v53 = (char *)operator new(16 * v52);
        v54 = &v53[16 * v49];
        v55 = *((_QWORD *)&v248 + 1);
        *(_OWORD *)v54 = v248;
        if (v55)
        {
          v56 = (unint64_t *)(v55 + 8);
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          v48 = *(_QWORD **)a3;
          v43 = *(_QWORD **)(a3 + 8);
        }
        v58 = &v53[16 * v52];
        v47 = v54 + 16;
        if (v43 != v48)
        {
          do
          {
            v59 = *((_OWORD *)v43 - 1);
            v43 -= 2;
            *((_OWORD *)v54 - 1) = v59;
            v54 -= 16;
            *v43 = 0;
            v43[1] = 0;
          }
          while (v43 != v48);
          v48 = *(_QWORD **)a3;
          v60 = *(_QWORD **)(a3 + 8);
          *(_QWORD *)a3 = v54;
          *(_QWORD *)(a3 + 8) = v47;
          *(_QWORD *)(a3 + 16) = v58;
          if (v60 == v48)
          {
            v61 = a3;
            if (!v48)
              goto LABEL_77;
          }
          else
          {
            do
            {
              v62 = (std::__shared_weak_count *)*(v60 - 1);
              if (v62)
              {
                v63 = (unint64_t *)&v62->__shared_owners_;
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              v60 -= 2;
            }
            while (v60 != v48);
            v61 = a3;
            if (!v48)
              goto LABEL_77;
          }
LABEL_75:
          operator delete(v48);
LABEL_76:
          v61 = a3;
          goto LABEL_77;
        }
        *(_QWORD *)a3 = v54;
        *(_QWORD *)(a3 + 8) = v47;
        *(_QWORD *)(a3 + 16) = v58;
        v61 = a3;
        if (v48)
          goto LABEL_75;
LABEL_77:
        *(_QWORD *)(v61 + 8) = v47;
        v245 = 0uLL;
        objc_msgSend(MEMORY[0x1E0D275B0], "attributesForTransitLine:", v221);
        v211 = (void *)objc_claimAutoreleasedReturnValue();
        if (v211)
        {
          v65 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D270A8]), "initWithGEOStyleAttributes:", v211);
          v66 = v65;
          if (v65)
          {
            objc_msgSend(v65, "featureStyleAttributesPtr");
            v67 = *(_OWORD *)__p;
          }
          else
          {
            v67 = 0uLL;
          }
          v245 = v67;

        }
        else
        {
          v68 = geo::codec::Allocator::instance(0);
          v234 = v68;
          v69 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, 8, 4);
          v70 = v69;
          __p[0] = v69;
          v233 = v69 + 1;
          if (v69)
            *v69 = 0x10000000ALL;
          __p[1] = v69 + 1;
          v71 = operator new(0x40uLL);
          v71[2] = 0;
          *v71 = &off_1E42DAB40;
          v71[1] = 0;
          *(_QWORD *)&v245 = FeatureStyleAttributes::FeatureStyleAttributes((uint64_t)(v71 + 3), (uint64_t *)__p);
          *((_QWORD *)&v245 + 1) = v71;
          if (v70)
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v68 + 40))(v68, v70, 8);
        }
        objc_msgSend(v221, "system");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        MergeTransitSystemStylesWithStyle(v72, (std::__shared_weak_count **)&v245);

        {
          v201 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v201, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v74 = mdm::Allocator::instance(void)::alloc;
        v75 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
        v76 = v75;
        if (v75)
          *v75 = 0xB00000005;
        v209 = v74;
        v77 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, 16, 4);
        v78 = v77;
        if (v77)
          v77[1] = 0x100010002;
        *v77 = *v76;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v74 + 40))(v74, v76, 8);
        v79 = 0;
        v80 = 0;
        v81 = v245;
        v82 = *(_BYTE *)(v245 + 33);
        v229 = v78;
        while (1)
        {
          v83 = v82;
          v84 = *(_QWORD **)v81;
          if (v82)
            break;
LABEL_92:
          v84[v83] = v78[v79];
          v82 = *(_BYTE *)(v81 + 33) + 1;
          *(_BYTE *)(v81 + 33) = v82;
          v80 = 1;
          _ZF = v79 == 1;
          v79 = 1;
          if (_ZF)
          {
            v84 = *(_QWORD **)v81;
            v83 = v82;
LABEL_110:
            qsort(v84, v83, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_111;
          }
        }
        if (v82 > 0x1Fu)
        {
          do
          {
            v88 = 0;
            v89 = (int *)v84;
            while (1)
            {
              v90 = *v89;
              v89 += 2;
              if (v90 == LODWORD(v78[v79]))
                break;
              if (v83 == ++v88)
                goto LABEL_104;
            }
            HIDWORD(v84[v88]) = HIDWORD(v78[v79]);
LABEL_104:
            _ZF = v79 == 1;
            v79 = 1;
          }
          while (!_ZF);
        }
        else
        {
          do
          {
            v85 = 0;
            v86 = (int *)v84;
            while (1)
            {
              v87 = *v86;
              v86 += 2;
              if (v87 == LODWORD(v78[v79]))
                break;
              if (v83 == ++v85)
                goto LABEL_92;
            }
            HIDWORD(v84[v85]) = HIDWORD(v78[v79]);
            _ZF = v79 == 1;
            v79 = 1;
          }
          while (!_ZF);
        }
        if ((v80 & 1) != 0)
          goto LABEL_110;
LABEL_111:
        objc_msgSend(v219, "transitLine");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v91, "name");
        v92 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v93 = (char *)objc_msgSend(v92, "UTF8String");

        objc_msgSend(v219, "transitSystem");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "name");
        v95 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v96 = (char *)objc_msgSend(v95, "UTF8String");

        v97 = (_QWORD *)v248;
        v97[2] = objc_msgSend(v221, "muid");
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
        if (*((_QWORD *)&v245 + 1))
        {
          v99 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
          do
            v101 = __ldxr(v99);
          while (__stxr(v101 + 1, v99));
        }
        v102 = (std::__shared_weak_count *)v97[5];
        v97[4] = v81;
        v97[5] = v98;
        if (!v102)
          goto LABEL_119;
        v103 = (unint64_t *)&v102->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
          if (v98)
          {
LABEL_120:
            v105 = (unint64_t *)&v98->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
        }
        else
        {
LABEL_119:
          if (v98)
            goto LABEL_120;
        }
        v107 = v248;
        *(_BYTE *)(v248 + 177) = *(_BYTE *)(a2 + 468);
        *(_BYTE *)(v107 + 176) = 13;
        if (v93)
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v107 + 272), v93);
        if (v96)
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v107 + 240), v96);
        objc_msgSend(v216, "routeLineArtwork");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v108, "count"))
          objc_msgSend(v216, "routeLineArtwork");
        else
          objc_msgSend(v219, "routeLineArtwork");
        v109 = (id)objc_claimAutoreleasedReturnValue();

        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        obj = v109;
        v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v241, v249, 16);
        if (v110)
        {
          v111 = 0;
          v112 = *(_QWORD *)v242;
          v113 = *(_QWORD *)v242;
          while (2)
          {
            if (v113 != v112)
              objc_enumerationMutation(obj);
            objc_msgSend(*(id *)(*((_QWORD *)&v241 + 1) + 8 * v111), "shieldDataSource");
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v114)
              goto LABEL_200;
            v115 = operator new(0x58uLL);
            v115[1] = 0;
            v115[2] = 0;
            *v115 = &off_1E42DCA18;
            *(_OWORD *)(v115 + 3) = 0u;
            *(_OWORD *)(v115 + 5) = 0u;
            *(_OWORD *)(v115 + 7) = 0u;
            *(_OWORD *)(v115 + 9) = 0u;
            {
              v165 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v165, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v117 = mdm::Allocator::instance(void)::alloc;
            v115[8] = 0;
            v115[9] = 0;
            v115[7] = v117;
            *((_DWORD *)v115 + 20) = 0;
            __p[0] = v115 + 3;
            __p[1] = v115;
            v115[9] = objc_msgSend(v114, "shieldType");
            objc_msgSend(v114, "shieldText");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            if (v118)
            {
              v8 = v226;
              objc_msgSend(v114, "shieldText");
              v228 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v119 = (char *)objc_msgSend(v228, "UTF8String");
            }
            else
            {
              v119 = "";
              v8 = v226;
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(v115 + 4, v119);
            if (v118)

            objc_msgSend(v114, "shieldColorString");
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v120, "length"))
            {
              objc_msgSend(v114, "shieldColorString");
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              v122 = VKShieldColorsFromHexString(v121);
              v124 = v123;
              v126 = v125;
              v225 = v127;
              if (v122 >= 0.04045)
                v128 = powf((float)(v122 * 0.94787) + 0.052133, 2.4);
              else
                v128 = v122 * 0.077399;
              v224 = v128;
              if (v124 >= 0.04045)
                v134 = powf((float)(v124 * 0.94787) + 0.052133, 2.4);
              else
                v134 = v124 * 0.077399;
              if (v126 < 0.04045)
              {
                v135 = v126 * 0.077399;
                goto LABEL_165;
              }
LABEL_164:
              v220 = v134;
              v135 = powf((float)(v126 * 0.94787) + 0.052133, 2.4);
              v134 = v220;
              goto LABEL_165;
            }
            if (objc_msgSend(v221, "hasLineColorString"))
            {
              objc_msgSend(v221, "lineColorString");
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              v129 = VKShieldColorsFromHexString(v121);
              v131 = v130;
              v126 = v132;
              v225 = v133;
              if (v129 >= 0.04045)
                v224 = powf((float)(v129 * 0.94787) + 0.052133, 2.4);
              else
                v224 = v129 * 0.077399;
              if (v131 >= 0.04045)
                v134 = powf((float)(v131 * 0.94787) + 0.052133, 2.4);
              else
                v134 = v131 * 0.077399;
              if (v126 >= 0.04045)
                goto LABEL_164;
              v135 = v126 * 0.077399;
LABEL_165:
              v137.i64[0] = __PAIR64__(LODWORD(v134), LODWORD(v224));
              v137.i64[1] = __PAIR64__(v225, LODWORD(v135));
              v136 = __p[0];
              v138 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v137, v222));
              *(int16x4_t *)v138.i8 = vmovn_s32((int32x4_t)v138);
              *((_DWORD *)__p[0] + 14) = vmovn_s16(v138).u32[0];

            }
            else
            {
              v136 = __p[0];
              *((_DWORD *)__p[0] + 14) = -16777216;
            }

            v139 = (_QWORD *)v248;
            v141 = *(char **)(v248 + 192);
            v140 = *(_QWORD *)(v248 + 200);
            if ((unint64_t)v141 >= v140)
            {
              v146 = *(char **)(v248 + 184);
              v147 = (v141 - v146) >> 4;
              v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 60)
                abort();
              v149 = v140 - (_QWORD)v146;
              if (v149 >> 3 > v148)
                v148 = v149 >> 3;
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0)
                v150 = 0xFFFFFFFFFFFFFFFLL;
              else
                v150 = v148;
              if (v150 >> 60)
                goto LABEL_277;
              v151 = (char *)operator new(16 * v150);
              v152 = (char *)__p[1];
              v153 = &v151[16 * v147];
              *(_QWORD *)v153 = v136;
              *((_QWORD *)v153 + 1) = v152;
              if (v152)
              {
                v154 = (unint64_t *)(v152 + 8);
                do
                  v155 = __ldxr(v154);
                while (__stxr(v155 + 1, v154));
                v146 = (char *)v139[23];
                v141 = (char *)v139[24];
              }
              v156 = &v151[16 * v150];
              v145 = v153 + 16;
              if (v141 == v146)
              {
                v139[23] = v153;
                v139[24] = v145;
                v139[25] = v156;
              }
              else
              {
                do
                {
                  v157 = *((_OWORD *)v141 - 1);
                  v141 -= 16;
                  *((_OWORD *)v153 - 1) = v157;
                  v153 -= 16;
                  *(_QWORD *)v141 = 0;
                  *((_QWORD *)v141 + 1) = 0;
                }
                while (v141 != v146);
                v146 = (char *)v139[23];
                v158 = (char *)v139[24];
                v139[23] = v153;
                v139[24] = v145;
                v139[25] = v156;
                while (v158 != v146)
                {
                  v159 = (std::__shared_weak_count *)*((_QWORD *)v158 - 1);
                  if (v159)
                  {
                    v160 = (unint64_t *)&v159->__shared_owners_;
                    do
                      v161 = __ldaxr(v160);
                    while (__stlxr(v161 - 1, v160));
                    if (!v161)
                    {
                      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                      std::__shared_weak_count::__release_weak(v159);
                    }
                  }
                  v158 -= 16;
                }
              }
              v8 = v226;
              if (v146)
                operator delete(v146);
            }
            else
            {
              *(_QWORD *)v141 = v136;
              v142 = (char *)__p[1];
              *((void **)v141 + 1) = __p[1];
              if (v142)
              {
                v143 = (unint64_t *)(v142 + 8);
                do
                  v144 = __ldxr(v143);
                while (__stxr(v144 + 1, v143));
              }
              v145 = v141 + 16;
            }
            v139[24] = v145;
            v162 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v163 = (unint64_t *)((char *)__p[1] + 8);
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
LABEL_200:

            if (++v111 >= v110)
            {
              v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v241, v249, 16);
              if (!v110)
                break;
              v111 = 0;
            }
            v113 = *(_QWORD *)v242;
            continue;
          }
        }

        __p[0] = 0;
        __p[1] = 0;
        v233 = 0;
        {
          v202 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v202, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v234 = mdm::Allocator::instance(void)::alloc;
        v236 = 0;
        v237 = 0;
        v235 = 0;
        {
          v203 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v203, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v238 = mdm::Allocator::instance(void)::alloc;
        v168 = *(_OWORD *)(v223 + 192);
        v239 = *(_OWORD *)(v223 + 168);
        v240 = v168;
        v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 56))(v223);
        if (v169)
        {
          v170 = 0;
          while (2)
          {
            v172 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v223 + 48))(v223, v170);
            v230 = *(_QWORD *)v172;
            v231 = *(_DWORD *)(v172 + 8);
            _ZF = *(_QWORD *)v172 == v246 && *(_DWORD *)(v172 + 8) == (unint64_t)v247;
            if (_ZF)
              goto LABEL_211;
            v175 = (char *)__p[1];
            v174 = v233;
            if (__p[1] < v233)
            {
              if (__p[1])
                *(_QWORD *)__p[1] = v230;
              v171 = v175 + 8;
              goto LABEL_210;
            }
            v176 = __p[0];
            v177 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v178 = v177 + 1;
            if ((unint64_t)(v177 + 1) >> 61)
              abort();
            if ((v233 - (char *)__p[0]) >> 2 > v178)
              v178 = (v233 - (char *)__p[0]) >> 2;
            if ((unint64_t)(v233 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
              v179 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v179 = v178;
            if (v179)
            {
              v180 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v234 + 16))(v234, 8 * v179, 4);
              v181 = (_QWORD *)(v180 + 8 * v177);
              v182 = (_BYTE *)(v180 + 8 * v179);
              if (v180)
                *v181 = v230;
              v183 = v175 - v176;
              if (v175 != v176)
              {
LABEL_229:
                v184 = v183 - 8;
                if ((unint64_t)(v183 - 8) < 0x38)
                {
                  v185 = v181;
                }
                else
                {
                  v185 = v181;
                  if ((unint64_t)(v175 - (char *)v181) >= 0x20)
                  {
                    v186 = (v184 >> 3) + 1;
                    v187 = v181 - 2;
                    v188 = v175 - 16;
                    v189 = v186 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v190 = *(_OWORD *)v188;
                      *(v187 - 1) = *((_OWORD *)v188 - 1);
                      *v187 = v190;
                      v187 -= 2;
                      v188 -= 32;
                      v189 -= 4;
                    }
                    while (v189);
                    v185 = &v181[-(v186 & 0x3FFFFFFFFFFFFFFCLL)];
                    v175 -= 8 * (v186 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v186 == (v186 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_240;
                  }
                }
                do
                {
                  v191 = *((_QWORD *)v175 - 1);
                  v175 -= 8;
                  *--v185 = v191;
                }
                while (v175 != v176);
                v176 = __p[0];
                v174 = v233;
LABEL_240:
                v171 = v181 + 1;
                __p[0] = v185;
                __p[1] = v181 + 1;
                v233 = v182;
                if (v176)
                  (*(void (**)(uint64_t, _BYTE *, int64_t))(*(_QWORD *)v234 + 40))(v234, v176, v174 - v176);
LABEL_210:
                __p[1] = v171;
                v247 = v231;
                v246 = v230;
LABEL_211:
                if (++v170 == v169)
                  goto LABEL_242;
                continue;
              }
            }
            else
            {
              v182 = 0;
              v181 = (_QWORD *)(8 * v177);
              v183 = (char *)__p[1] - (char *)__p[0];
              if (__p[1] != __p[0])
                goto LABEL_229;
            }
            break;
          }
          v176 = v175;
          v185 = v181;
          goto LABEL_240;
        }
LABEL_242:
        v192 = v248;
        v193 = *(_QWORD *)(v248 + 216);
        if (v193 >= *(_QWORD *)(v248 + 224))
        {
          WeakRetained = v214;
          v194 = std::vector<md::LabelExternalRoadFeature::SectionInfo,geo::StdAllocator<md::LabelExternalRoadFeature::SectionInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelExternalRoadFeature::SectionInfo const&>((uint64_t *)(v248 + 208), (uint64_t)__p);
        }
        else
        {
          WeakRetained = v214;
          if (v193)
            md::LabelExternalRoadFeature::SectionInfo::SectionInfo(*(_QWORD *)(v248 + 216), (uint64_t)__p);
          v194 = v193 + 96;
          *(_QWORD *)(v192 + 216) = v193 + 96;
        }
        *(_QWORD *)(v192 + 216) = v194;
        if (v235)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v238 + 40))(v238, v235, v237 - v235);
        if (__p[0])
          (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v234 + 40))(v234, __p[0], v233 - (char *)__p[0]);

        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v209 + 40))(v209, v229, 16);
        v195 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
        if (*((_QWORD *)&v245 + 1))
        {
          v196 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
          do
            v197 = __ldaxr(v196);
          while (__stlxr(v197 - 1, v196));
          if (!v197)
          {
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
          }
        }

LABEL_257:
        if (++v218 == v210)
          goto LABEL_271;
      }
      *v43 = v248;
      v44 = *((_QWORD *)&v248 + 1);
      v43[1] = *((_QWORD *)&v248 + 1);
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = v43 + 2;
      goto LABEL_76;
    }
  }
LABEL_271:

  v204 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
  if (*((_QWORD *)&v248 + 1))
  {
    v205 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
}

void sub_19F7EC12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v37;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v37 - 256);
  _Unwind_Resume(a1);
}

uint64_t md::LabelExternalRoadFeature::SectionInfo::SectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  v7 = (uint64_t)v6 - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      abort();
    v8 = v7 >> 3;
    v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v9[v8];
    do
    {
      if (v9)
        *v9 = *v5;
      ++v5;
      ++v9;
    }
    while (v5 != v6);
    *(_QWORD *)(a1 + 8) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(char **)(a2 + 32);
  v12 = *(char **)(a2 + 40);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      abort();
    v14 = (_DWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12 - v11, 4);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 48) = &v14[v13 >> 2];
    do
    {
      if (v14)
        *v14 = *(_DWORD *)v11;
      v11 += 4;
      ++v14;
    }
    while (v11 != v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_19F7EC524(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<md::LabelExternalRoadFeature::SectionInfo,geo::StdAllocator<md::LabelExternalRoadFeature::SectionInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelExternalRoadFeature::SectionInfo const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v24 = a1 + 3;
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 96 * v6, 8);
  else
    v7 = 0;
  v8 = v7 + 96 * v2;
  v22 = v8;
  *(_QWORD *)&v23 = v8;
  *((_QWORD *)&v23 + 1) = v7 + 96 * v6;
  if (v7)
  {
    md::LabelExternalRoadFeature::SectionInfo::SectionInfo(v8, a2);
    v8 = v22;
    v9 = v23;
  }
  else
  {
    v9 = 96 * v2;
  }
  v10 = v9 + 96;
  *(_QWORD *)&v23 = v9 + 96;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    v18 = a1[2];
    a1[2] = *((_QWORD *)&v23 + 1);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v8 + v13;
      v15 = v12 + v13;
      *(_QWORD *)(v14 - 96) = 0;
      *(_QWORD *)(v14 - 88) = 0;
      *(_QWORD *)(v14 - 80) = 0;
      *(_QWORD *)(v14 - 72) = *(_QWORD *)(v12 + v13 - 72);
      *(_OWORD *)(v14 - 96) = *(_OWORD *)(v12 + v13 - 96);
      *(_QWORD *)(v14 - 80) = *(_QWORD *)(v12 + v13 - 80);
      *(_QWORD *)(v15 - 96) = 0;
      *(_QWORD *)(v15 - 88) = 0;
      *(_QWORD *)(v15 - 80) = 0;
      *(_QWORD *)(v14 - 64) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = *(_QWORD *)(v12 + v13 - 40);
      *(_OWORD *)(v14 - 64) = *(_OWORD *)(v12 + v13 - 64);
      *(_QWORD *)(v14 - 48) = *(_QWORD *)(v12 + v13 - 48);
      *(_QWORD *)(v15 - 64) = 0;
      *(_QWORD *)(v15 - 56) = 0;
      *(_QWORD *)(v15 - 48) = 0;
      v16 = *(_OWORD *)(v12 + v13 - 16);
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v12 + v13 - 32);
      *(_OWORD *)(v14 - 16) = v16;
      v13 -= 96;
    }
    while (v12 + v13 != v11);
    v12 = *a1;
    v17 = a1[1];
    *a1 = v8 + v13;
    v18 = a1[2];
    *(_OWORD *)(a1 + 1) = v23;
    v10 = v23;
    while (v17 != v12)
    {
      v19 = *(_QWORD *)(v17 - 64);
      if (v19)
      {
        *(_QWORD *)(v17 - 56) = v19;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 - 40) + 40))(*(_QWORD *)(v17 - 40), v19, *(_QWORD *)(v17 - 48) - v19);
      }
      v20 = *(_QWORD *)(v17 - 96);
      if (v20)
      {
        *(_QWORD *)(v17 - 88) = v20;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 - 72) + 40))(*(_QWORD *)(v17 - 72), v20, *(_QWORD *)(v17 - 80) - v20);
      }
      v17 -= 96;
    }
  }
  if (v12)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v24 + 40))(*v24, v12, v18 - v12);
  return v10;
}

void sub_19F7EC770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::LabelExternalRoadFeature::SectionInfo,geo::StdAllocator<md::LabelExternalRoadFeature::SectionInfo,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelExternalRoadFeature::SectionInfo::~SectionInfo(md::LabelExternalRoadFeature::SectionInfo *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v2, *((_QWORD *)this + 6) - v2);
  }
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v3, *((_QWORD *)this + 2) - v3);
  }
}

uint64_t std::__split_buffer<md::LabelExternalRoadFeature::SectionInfo,geo::StdAllocator<md::LabelExternalRoadFeature::SectionInfo,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (uint64_t *)(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    v5 = *(_QWORD *)(i - 64);
    if (v5)
    {
      *(_QWORD *)(i - 56) = v5;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), v5, *(_QWORD *)(i - 48) - v5);
    }
    v6 = *v4;
    if (*v4)
    {
      *(_QWORD *)(i - 88) = v6;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 72) + 40))(*(_QWORD *)(i - 72), v6, *(_QWORD *)(i - 80) - v6);
    }
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void md::LabelExternalRoadFeature::~LabelExternalRoadFeature(md::LabelExternalRoadFeature *this)
{
  md::LabelExternalRoadFeature::~LabelExternalRoadFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)this = &off_1E42A0A20;
  if (*((char *)this + 295) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 37) + 40))(*((_QWORD *)this + 37), *((_QWORD *)this + 34), *((_QWORD *)this + 36) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*((char *)this + 263) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 26);
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 263) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 33) + 40))(*((_QWORD *)this + 33), *((_QWORD *)this + 30), *((_QWORD *)this + 32) & 0x7FFFFFFFFFFFFFFFLL);
  v2 = *((_QWORD *)this + 26);
  if (!v2)
  {
LABEL_4:
    v3 = (char *)*((_QWORD *)this + 23);
    if (!v3)
      goto LABEL_27;
    goto LABEL_17;
  }
LABEL_8:
  v4 = *((_QWORD *)this + 27);
  v5 = v2;
  if (v4 != v2)
  {
    do
    {
      v6 = *(_QWORD *)(v4 - 64);
      if (v6)
      {
        *(_QWORD *)(v4 - 56) = v6;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 40) + 40))(*(_QWORD *)(v4 - 40), v6, *(_QWORD *)(v4 - 48) - v6);
      }
      v7 = *(_QWORD *)(v4 - 96);
      if (v7)
      {
        *(_QWORD *)(v4 - 88) = v7;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 72) + 40))(*(_QWORD *)(v4 - 72), v7, *(_QWORD *)(v4 - 80) - v7);
      }
      v4 -= 96;
    }
    while (v4 != v2);
    v5 = *((_QWORD *)this + 26);
  }
  *((_QWORD *)this + 27) = v2;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 29) + 40))(*((_QWORD *)this + 29), v5, *((_QWORD *)this + 28) - v5);
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3)
  {
LABEL_17:
    v8 = (char *)*((_QWORD *)this + 24);
    v9 = v3;
    if (v8 != v3)
    {
      do
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)v8 - 1);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v3);
      v9 = (char *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v3;
    operator delete(v9);
  }
LABEL_27:
  md::LabelExternalFeature::~LabelExternalFeature(this);
}

void std::__shared_ptr_emplace<md::LabelExternalRoadFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalRoadFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelExternalRoadFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::`anonymous namespace'::lookAtTile(uint64_t result, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(double *)(a2 + 8);
  v4 = *a3 - *(double *)a2;
  v5 = a3[1] - v3;
  v6 = *(double *)(a2 + 16);
  v7 = a3[2] - v6;
  v8 = 1.0 / sqrt(v4 * v4 + v5 * v5 + v7 * v7);
  v9 = v8 * v4;
  v10 = v8 * v5;
  v11 = v8 * v7;
  v12 = 1.0 / sqrt(*(double *)a2 * *(double *)a2 + v3 * v3 + v6 * v6);
  v13 = v12 * *(double *)a2;
  v14 = v12 * v3;
  v15 = -(v8 * v7 * (v12 * v3) - v10 * (v12 * v6));
  v16 = -(v9 * (v12 * v6) - v8 * v7 * v13);
  v17 = -(v10 * v13 - v9 * v14);
  v18 = v15 * v15 + v16 * v16 + v17 * v17;
  if (v18 < 2.22044605e-16)
  {
    v20 = *(double *)(a2 + 24);
    v19 = *(double *)(a2 + 32);
    v21 = *(double *)(a2 + 40);
    v22 = *(double *)(a2 + 48);
    v23 = v21 * -2.0;
    v24 = (v20 + v20) * v19 + v22 * (v21 * -2.0);
    v25 = v21 * -2.0 * v21 + 1.0 - (v20 + v20) * v20;
    v26 = -(v23 * v19 - (v20 + v20) * v22);
    v15 = -(v25 * v11 - v26 * v10);
    v16 = -(v26 * v9 - v24 * v11);
    v17 = -(v24 * v10 - v25 * v9);
    v18 = v15 * v15 + v16 * v16 + v17 * v17;
  }
  v27 = 1.0 / sqrt(v18);
  v28 = v27 * v15;
  v29 = v27 * v16;
  v30 = v27 * v17;
  v31 = -(v30 * v10 - v29 * v11);
  v32 = -(v28 * v11 - v30 * v9);
  v33 = -(v29 * v9 - v28 * v10);
  v34 = -v9;
  v35 = v28 - (v28 * v11 - v30 * v9);
  if (v35 - v11 <= 0.0)
  {
    v41 = -(v8 * v7);
    if (v28 <= v32 || v28 <= v41)
    {
      v43 = v32 <= v41;
      v44 = sqrt(1.0 - (v11 + v35));
      v45 = 1.0 / (v44 + v44);
      v46 = (v30 - v9) * v45;
      v47 = v33 - v10;
      v48 = v47 * v45;
      v49 = v44 * 0.5;
      v50 = (v29 - v31) * v45;
      v51 = sqrt(v11 + 1.0 - v28 + v32);
      v52 = 1.0 / (v51 + v51);
      v53 = (v31 + v29) * v52;
      v54 = v51 * 0.5;
      v55 = v47 * v52;
      v56 = (v34 - v30) * v52;
      if (v43)
        v37 = v46;
      else
        v37 = v53;
      if (v43)
        v38 = v48;
      else
        v38 = v54;
      if (v43)
        v39 = v49;
      else
        v39 = v55;
      if (v43)
        v40 = v50;
      else
        v40 = v56;
    }
    else
    {
      v57 = sqrt(v11 + 1.0 + v28 - v32);
      v58 = v57 + v57;
      v37 = v57 * 0.5;
      v59 = 1.0 / v58;
      v38 = (v31 + v29) * v59;
      v39 = (v30 - v9) * v59;
      v40 = (v33 + v10) * v59;
    }
  }
  else
  {
    v36 = 0.5 / sqrt(v35 - v11 + 1.0);
    v37 = v36 * (v10 - (v29 * v9 - v28 * v10));
    v38 = v36 * (v34 - v30);
    v39 = v36 * (v29 - v31);
    v40 = 0.25 / v36;
  }
  *(double *)(result + 24) = v37;
  *(double *)(result + 32) = v38;
  *(double *)(result + 40) = v39;
  *(double *)(result + 48) = v40;
  return result;
}

void md::FlyoverMetaTileData::~FlyoverMetaTileData(md::FlyoverMetaTileData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42970D0;
  *((_QWORD *)this + 79) = &unk_1E4297110;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42970D0;
  *((_QWORD *)this + 79) = &unk_1E4297110;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SingleGEOResourceDataRequester::~SingleGEOResourceDataRequester(md::SingleGEOResourceDataRequester *this)
{
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
}

{
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
  JUMPOUT(0x1A1AF4E00);
}

void md::SingleGEOResourceDataRequester::createDebugNode(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const std::string::value_type *v11;
  _BYTE v12[32];
  std::string v13;
  int v14;
  _BYTE v15[32];
  std::string v16;
  int v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  std::string __p;
  int v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE v33[32];
  std::string v34;
  int v35;
  uint64_t v36[3];
  char v37[32];

  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    (*(void (**)(char *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v37, v4, *(unsigned __int16 *)(a1 + 24));
    if (v37[0])
    {
      v5 = *(_QWORD *)&v37[4];
      v37[23] = 14;
      strcpy(v37, "Download Range");
      v6 = (char *)operator new(0x80uLL);
      v36[1] = (uint64_t)(v6 + 128);
      v36[2] = (uint64_t)(v6 + 128);
      *((_QWORD *)v6 + 1) = v5;
      *((_QWORD *)v6 + 5) = 0;
      *((_QWORD *)v6 + 6) = 0;
      *((_QWORD *)v6 + 4) = 0;
      *((_QWORD *)v6 + 9) = HIDWORD(v5);
      *((_QWORD *)v6 + 12) = 0;
      *((_DWORD *)v6 + 14) = 1;
      *((_QWORD *)v6 + 13) = 0;
      *((_QWORD *)v6 + 14) = 0;
      *((_DWORD *)v6 + 30) = 1;
      v36[0] = (uint64_t)v6;
      gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, v36);
      if (v6[119] < 0)
      {
        operator delete(*((void **)v6 + 12));
        if ((v6[55] & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((v6[55] & 0x80000000) == 0)
      {
LABEL_5:
        v7 = v6;
        goto LABEL_11;
      }
      operator delete(*((void **)v6 + 4));
      goto LABEL_5;
    }
  }
  v37[23] = 14;
  strcpy(v37, "Download Range");
  memset(&v34, 0, sizeof(v34));
  v35 = 4;
  std::string::__assign_external(&v34, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v33);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 28))
      goto LABEL_12;
    goto LABEL_8;
  }
  v7 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_11:
  operator delete(v7);
  if (!*(_BYTE *)(a1 + 28))
  {
LABEL_12:
    v37[23] = 17;
    strcpy(v37, "Visible Range Min");
    memset(&__p, 0, sizeof(__p));
    v26 = 4;
    std::string::__assign_external(&__p, "None");
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 36))
        goto LABEL_14;
    }
    else if (*(_BYTE *)(a1 + 36))
    {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
LABEL_8:
  v37[23] = 17;
  strcpy(v37, "Visible Range Min");
  v8 = *(unsigned int *)(a1 + 32);
  v30 = 0;
  v31 = 0;
  v32 = 1;
  v29 = 0;
  v28 = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v27);
  if (*(_BYTE *)(a1 + 36))
  {
LABEL_14:
    v37[23] = 17;
    strcpy(v37, "Visible Range Max");
    v9 = *(unsigned int *)(a1 + 40);
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v20 = 0;
    v19 = v9;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v18);
    goto LABEL_20;
  }
LABEL_18:
  v37[23] = 17;
  strcpy(v37, "Visible Range Max");
  memset(&v16, 0, sizeof(v16));
  v17 = 4;
  std::string::__assign_external(&v16, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_20:
  v37[23] = 17;
  strcpy(v37, "gdc::ResourceType");
  v10 = *(unsigned __int16 *)(a1 + 24);
  if (v10 > 0x35)
    v11 = "<Invalid>";
  else
    v11 = off_1E42F75C0[v10];
  memset(&v13, 0, sizeof(v13));
  v14 = 4;
  std::string::__assign_external(&v13, v11);
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19F7ED1B4(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void karo::Worker::~Worker(karo::Worker *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E42C3608;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C35E0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x20C4093837F09);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E42C3608;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C35E0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x20C4093837F09);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::Worker::threadMain(karo::Worker *this)
{
  unsigned __int8 v1;
  karo::Job **v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  karo::Job *v7;
  int v8;
  karo::Job *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;

  v1 = atomic_load((unsigned __int8 *)this + 80);
  if ((v1 & 1) == 0)
  {
    v3 = (karo::Job **)((char *)this + 56);
    do
    {
      v5 = *((_QWORD *)this + 9);
      pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 16));
      v6 = *((_QWORD *)this + 7);
      if (v6)
      {
        atomic_store(0, (unint64_t *)(v6 + 168));
        v7 = *v3;
        pthread_mutex_lock(*((pthread_mutex_t **)*v3 + 19));
        v8 = *((_DWORD *)v7 + 40);
        pthread_mutex_unlock(*((pthread_mutex_t **)v7 + 19));
        if ((v8 & 1) != 0)
        {
          v9 = *v3;
          pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 16));
          v10 = *(uint64_t **)(v5 + 112);
          if (!v10)
            goto LABEL_17;
          v11 = *((_DWORD *)v9 + 5);
          v12 = (uint64_t *)(v5 + 112);
          v13 = *(_QWORD **)(v5 + 112);
          do
          {
            v14 = *(_DWORD *)(v13[4] + 20);
            v15 = v14 >= v11;
            if (v14 >= v11)
              v16 = v13;
            else
              v16 = v13 + 1;
            if (v15)
              v12 = v13;
            v13 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v12 != (uint64_t *)(v5 + 112) && v11 >= *(_DWORD *)(v12[4] + 20))
          {
            v19 = (uint64_t *)v12[1];
            v20 = v12;
            if (v19)
            {
              do
              {
                v21 = v19;
                v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v21 = (uint64_t *)v20[2];
                v22 = *v21 == (_QWORD)v20;
                v20 = v21;
              }
              while (!v22);
            }
            if (*(uint64_t **)(v5 + 104) == v12)
              *(_QWORD *)(v5 + 104) = v21;
            --*(_QWORD *)(v5 + 120);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v10, v12);
            v23 = (std::__shared_weak_count *)v12[6];
            if (v23)
            {
              p_shared_owners = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldaxr(p_shared_owners);
              while (__stlxr(v25 - 1, p_shared_owners));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            operator delete(v12);
          }
          else
          {
LABEL_17:
            v17 = *(_QWORD *)(v5 + 72);
            v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 80) - v17) >> 3);
            while (1)
            {
              v18 = (v18 - 1);
              if ((v18 & 0x80000000) != 0)
                break;
              if (*(karo::Job **)(v17 + 24 * v18 + 8) == v9)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 80) - v17) >> 3) - 1 != v18)
                  atomic_store(1u, (unsigned __int8 *)(v5 + 96));
                karo::util::replaceIndexWithLast<karo::JobManager::QueueElement>((uint64_t *)(v5 + 72), v18);
                break;
              }
            }
          }
          atomic_store(0, (unint64_t *)v9 + 3);
          *((_DWORD *)v9 + 5) = 0;
          pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 16));
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
        *v3 = 0;
        v3[1] = 0;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      v29 = atomic_load((unsigned __int8 *)(v5 + 96));
      if ((v29 & 1) != 0)
      {
        do
        {
          atomic_store(0, (unsigned __int8 *)(v5 + 96));
          v45 = *(_QWORD *)(v5 + 72);
          v46 = v45;
          if (v45 != *(_QWORD *)(v5 + 80))
          {
            do
            {
              v47 = atomic_load((unsigned int *)(*(_QWORD *)(v46 + 8) + 16));
              *(_DWORD *)v46 = v47;
              v46 += 24;
            }
            while (v46 != *(_QWORD *)(v5 + 80));
            v45 = *(_QWORD *)(v5 + 72);
          }
          v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v45) >> 3));
          if (v46 == v45)
            v43 = 0;
          else
            v43 = v42;
          std::__introsort<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *,false>(v45, v46, v43, 1);
          v44 = atomic_load((unsigned __int8 *)(v5 + 96));
        }
        while ((v44 & 1) != 0);
      }
      v30 = *(_QWORD *)(v5 + 80);
      while (v30 != *(_QWORD *)(v5 + 72))
      {
        v31 = v30 - 24;
        v32 = atomic_load((unint64_t *)(*(_QWORD *)(v30 - 16) + 168));
        v30 -= 24;
        if (!v32)
        {
          v34 = *(_QWORD *)(v31 + 8);
          v33 = *(_QWORD *)(v31 + 16);
          if (v33)
          {
            v35 = (unint64_t *)(v33 + 8);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v37 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
          *((_QWORD *)this + 7) = v34;
          *((_QWORD *)this + 8) = v33;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          atomic_store((unint64_t)this, (unint64_t *)(*(_QWORD *)(v31 + 8) + 168));
          break;
        }
      }
      if (!*v3)
        pthread_cond_wait(*(pthread_cond_t **)(v5 + 24), *(pthread_mutex_t **)(v5 + 16));
      v40 = pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 16));
      if (*v3)
      {
        v41 = (void *)MEMORY[0x1A1AF555C](v40);
        karo::Job::step(*v3);
        objc_autoreleasePoolPop(v41);
      }
      v4 = atomic_load((unsigned __int8 *)this + 80);
    }
    while ((v4 & 1) == 0);
  }
  return 1;
}

BOOL md::MultiRectSetCompare::operator()(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1)
    && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2)
    && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3))
  {
    return 0;
  }
  v4 = a1[1];
  v5 = a1[2] - *a1;
  v6 = a1[3] - v4;
  v7 = a2[1];
  v8 = a2[2] - *a2;
  v9 = a2[3] - v7;
  v10 = v6 * v5 <= v9 * v8;
  if (v6 * v5 != v9 * v8)
    return !v10;
  v11 = *a1 + v5 * 0.5;
  v12 = *a2 + v8 * 0.5;
  v13 = v11 < v12;
  if (v11 == v12)
  {
    v14 = v4 + v6 * 0.5;
    v15 = v7 + v9 * 0.5;
    v13 = v14 < v15;
    if (v14 == v15)
    {
      v10 = v5 <= v8;
      if (v5 == v8)
        v10 = v6 <= v9;
      return !v10;
    }
  }
  return v13;
}

void md::MultiRectRegion::addRect(double **a1, double *a2)
{
  double v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v17;
  double *v18;
  uint64_t *v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t **v33;
  BOOL v34;
  double v36;
  double v37;
  double v38;
  double v39;
  BOOL v40;
  double v41;
  BOOL v42;
  double v43;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  BOOL v52;
  double v53;
  _OWORD *v54;
  __int128 v55;
  double *v56;
  uint64_t *v57;

  v4 = *a2;
  v6 = (double *)(a1 + 1);
  v5 = *a1;
  if (*a1 != (double *)(a1 + 1))
  {
    v8 = a2[2];
    v7 = a2[3];
    v9 = a2[1];
    while (1)
    {
      v10 = v5[6];
      v11 = v5[7];
      v13 = v5[4];
      v12 = v5[5];
      if ((v11 - v12) * (v10 - v13) < (v7 - v9) * (v8 - v4) + -2.22044605e-16)
        break;
      if (v4 >= v13 && v8 <= v10 && v9 >= v12 && v7 <= v11)
        return;
      v17 = (double *)*((_QWORD *)v5 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(double **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (double *)*((_QWORD *)v5 + 2);
          v34 = *(_QWORD *)v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v34);
      }
      v5 = v18;
      if (v18 == v6)
        goto LABEL_43;
    }
  }
  if (v5 != v6)
  {
    do
    {
      if (v5[4] >= *a2 && v5[6] <= a2[2] && v5[5] >= a2[1] && v5[7] <= a2[3])
      {
        v22 = (double *)*((_QWORD *)v5 + 1);
        v23 = v5;
        if (v22)
        {
          do
          {
            v21 = v22;
            v22 = *(double **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v21 = (double *)*((_QWORD *)v23 + 2);
            v34 = *(_QWORD *)v21 == (_QWORD)v23;
            v23 = v21;
          }
          while (!v34);
        }
        if (*a1 == v5)
          *a1 = v21;
        v19 = (uint64_t *)a1[1];
        a1[2] = (double *)((char *)a1[2] - 1);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v19, (uint64_t *)v5);
        operator delete(v5);
      }
      else
      {
        v20 = (double *)*((_QWORD *)v5 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(double **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (double *)*((_QWORD *)v5 + 2);
            v34 = *(_QWORD *)v21 == (_QWORD)v5;
            v5 = v21;
          }
          while (!v34);
        }
      }
      v5 = v21;
    }
    while (v21 != v6);
    v4 = *a2;
  }
LABEL_43:
  v24 = *((double *)a1 + 4);
  *((double *)a1 + 3) = fmin(v4, *((double *)a1 + 3));
  v25 = *((double *)a1 + 6);
  *((double *)a1 + 5) = fmax(*((double *)a1 + 5), a2[2]);
  *((double *)a1 + 4) = fmin(a2[1], v24);
  *((double *)a1 + 6) = fmax(v25, a2[3]);
  v26 = a1[1];
  if (v26)
  {
    v27 = a2[1];
    v28 = a2[2] - *a2;
    v29 = a2[3] - v27;
    v30 = v29 * v28;
    v31 = *a2 + v28 * 0.5;
    v32 = v27 + v29 * 0.5;
    while (1)
    {
      while (1)
      {
        v6 = v26;
        v34 = *(_QWORD *)a2 == *((_QWORD *)v26 + 4) && *((_QWORD *)a2 + 1) == *((_QWORD *)v26 + 5);
        if (v34 && *((_QWORD *)a2 + 2) == *((_QWORD *)v26 + 6) && *((_QWORD *)a2 + 3) == *((_QWORD *)v26 + 7))
          goto LABEL_64;
        v37 = v26[4];
        v36 = v26[5];
        v38 = v26[6] - v37;
        v39 = v26[7] - v36;
        v40 = v30 <= v39 * v38;
        if (v30 == v39 * v38)
          break;
LABEL_60:
        if (!v40)
          goto LABEL_45;
LABEL_64:
        if (*((_QWORD *)v26 + 4) == *(_QWORD *)a2
          && *((_QWORD *)v26 + 5) == *((_QWORD *)a2 + 1)
          && *((_QWORD *)v26 + 6) == *((_QWORD *)a2 + 2)
          && *((_QWORD *)v26 + 7) == *((_QWORD *)a2 + 3))
        {
          return;
        }
        v47 = v26[4];
        v46 = v26[5];
        v48 = v26[6] - v47;
        v49 = v26[7] - v46;
        v50 = v49 * v48 <= v30;
        if (v49 * v48 == v30)
        {
          v51 = v47 + v48 * 0.5;
          v52 = v51 < v31;
          if (v51 != v31 || (v53 = v46 + v49 * 0.5, v52 = v53 < v32, v53 != v32))
          {
            if (!v52)
              return;
            goto LABEL_83;
          }
          v50 = v48 <= v28;
          if (v48 == v28)
            v50 = v49 <= v29;
        }
        if (v50)
          return;
LABEL_83:
        v33 = (uint64_t **)(v26 + 1);
        v26 = (double *)*((_QWORD *)v26 + 1);
        if (!v26)
          goto LABEL_86;
      }
      v41 = v37 + v38 * 0.5;
      v42 = v31 < v41;
      if (v31 == v41)
      {
        v43 = v36 + v39 * 0.5;
        v42 = v32 < v43;
        if (v32 == v43)
        {
          v40 = v28 <= v38;
          if (v28 == v38)
            v40 = v29 <= v39;
          goto LABEL_60;
        }
      }
      if (!v42)
        goto LABEL_64;
LABEL_45:
      v26 = *(double **)v26;
      v33 = (uint64_t **)v6;
      if (!*(_QWORD *)v6)
        goto LABEL_86;
    }
  }
  v33 = (uint64_t **)v6;
LABEL_86:
  v54 = operator new(0x40uLL);
  v55 = *((_OWORD *)a2 + 1);
  v54[2] = *(_OWORD *)a2;
  v54[3] = v55;
  *(_QWORD *)v54 = 0;
  *((_QWORD *)v54 + 1) = 0;
  *((_QWORD *)v54 + 2) = v6;
  *v33 = (uint64_t *)v54;
  v56 = *(double **)*a1;
  if (v56)
  {
    *a1 = v56;
    v57 = *v33;
  }
  else
  {
    v57 = (uint64_t *)v54;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v57);
  a1[2] = (double *)((char *)a1[2] + 1);
}

uint64_t ggl::LandmarkFlat::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::LandmarkFlatShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DD8 = 1;
          }
          ggl::LandmarkFlat::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57B388 = &ggl::LandmarkFlat::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1EE57B390 = 0;
          if ((v95 & 1) == 0
          {
            ggl::LandmarkFlat::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE57B3C0 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57B3C8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57B3D0 = ggl::Building::Style::reflection(void)::reflection;
          }
          qword_1EE57B398 = (uint64_t)&ggl::LandmarkFlat::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1EE57B3A0 = xmmword_19FFB48D0;
        }
      }
      ggl::LandmarkFlat::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::LandmarkFlat::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::LandmarkFlatShader::typedReflection(v90);
      qword_1ECE30FB0 = (uint64_t)&ggl::LandmarkFlatShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::LandmarkFlat::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57B4A0 = 0;
        qword_1EE57B4A8 = (uint64_t)"";
        dword_1EE57B4B0 = 0;
        qword_1EE57B4B8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1EE57B4C0 = 3;
      }
      qword_1ECE30FB8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1ECE30FC0 = 1;
      qword_1ECE30FC8 = 0;
      unk_1ECE30FD0 = 1;
      qword_1ECE30FD8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1ECE30FE0 = 0;
      if ((v93 & 1) == 0
      {
        ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57B3E0 = 0;
        qword_1EE57B3E8 = (uint64_t)"skyfog";
        dword_1EE57B3F0 = 3;
        qword_1EE57B3F8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57B400 = xmmword_19FFB3720;
        qword_1EE57B410 = 1;
        unk_1EE57B418 = "view";
        dword_1EE57B420 = 3;
        qword_1EE57B428 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1EE57B430 = vdupq_n_s64(2uLL);
        qword_1EE57B440 = 2;
        unk_1EE57B448 = "scale";
        dword_1EE57B450 = 3;
        qword_1EE57B458 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57B460 = xmmword_19FFB3730;
        qword_1EE57B470 = 3;
        unk_1EE57B478 = "style";
        dword_1EE57B480 = 3;
        qword_1EE57B488 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57B490 = 8;
      }
      qword_1ECE30FE8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1ECE30FF0 = 4;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::LandmarkFlat::LandmarkPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B6280;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::LandmarkFlat::LandmarkPipelineSetup::~LandmarkPipelineSetup(ggl::LandmarkFlat::LandmarkPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::LandmarkFlat::LandmarkPipelineSetup::constantDataIsEnabled(ggl::LandmarkFlat::LandmarkPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::LandmarkFlat::LandmarkPipelineSetup::textureIsEnabled(ggl::LandmarkFlat::LandmarkPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

_QWORD *updateFeatureFlag(int a1, float *a2, int a3)
{
  NSObject *v6;
  _QWORD *result;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v6 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a1;
    v9 = 1024;
    v10 = a3;
    _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_INFO, "Updating FeatureFlag:%d - %d", (uint8_t *)v8, 0xEu);
  }

  LOBYTE(v8[0]) = 0;
  result = std::__hash_table<std::__hash_value_type<md::FeatureFlag,BOOL>,std::__unordered_map_hasher<md::FeatureFlag,std::__hash_value_type<md::FeatureFlag,BOOL>,std::hash<md::FeatureFlag>,std::equal_to<md::FeatureFlag>,true>,std::__unordered_map_equal<md::FeatureFlag,std::__hash_value_type<md::FeatureFlag,BOOL>,std::equal_to<md::FeatureFlag>,std::hash<md::FeatureFlag>,true>,std::allocator<std::__hash_value_type<md::FeatureFlag,BOOL>>>::__emplace_unique_key_args<md::FeatureFlag,std::piecewise_construct_t const&,std::tuple<md::FeatureFlag&&>,std::tuple<>>(a2, 0, v8);
  *((_BYTE *)result + 17) = a3;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::FeatureFlag,BOOL>,std::__unordered_map_hasher<md::FeatureFlag,std::__hash_value_type<md::FeatureFlag,BOOL>,std::hash<md::FeatureFlag>,std::equal_to<md::FeatureFlag>,true>,std::__unordered_map_equal<md::FeatureFlag,std::__hash_value_type<md::FeatureFlag,BOOL>,std::equal_to<md::FeatureFlag>,std::hash<md::FeatureFlag>,true>,std::allocator<std::__hash_value_type<md::FeatureFlag,BOOL>>>::__emplace_unique_key_args<md::FeatureFlag,std::piecewise_construct_t const&,std::tuple<md::FeatureFlag&&>,std::tuple<>>(float *a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  *((_BYTE *)v10 + 17) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_63:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19F7EE8A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<objc_object * {__strong}>::__emplace_back_slow_path<objc_object * {__strong}>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  void *v25;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_22;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 <= 0x77 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_30;
  v17 = (v16 >> 3) + 1;
  v18 = &v9[8 * v3 - 16];
  v19 = v15 - 32;
  v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v22 = *(_OWORD *)v19;
    v21 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v19 + 1) = 0uLL;
    v19 -= 32;
    *((_OWORD *)v18 - 1) = v22;
    *(_OWORD *)v18 = v21;
    v18 -= 32;
    v20 -= 4;
  }
  while (v20);
  v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      v23 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v23;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v15 = (char *)*a1;
  v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    v25 = (void *)*((_QWORD *)v24 - 1);
    v24 -= 8;

  }
  if (v15)
LABEL_22:
    operator delete(v15);
  return v13;
}

void std::__shared_ptr_emplace<std::unordered_map<md::FeatureFlag,BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42EEE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<md::FeatureFlag,BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42EEE78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::unordered_map<md::FeatureFlag,BOOL>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

void md::FeatureFlagProvider::~FeatureFlagProvider(md::FeatureFlagProvider *this)
{
  id *v2;
  id *i;
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;

  v2 = (id *)*((_QWORD *)this + 2);
  for (i = (id *)*((_QWORD *)this + 3); v2 != i; ++v2)
  {
    v4 = *v2;
    MapsFeature_RemoveBlockListener();

  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = *((_QWORD *)this + 3);
    v13 = (void *)*((_QWORD *)this + 2);
    if (v12 != v11)
    {
      do
      {
        v14 = *(void **)(v12 - 8);
        v12 -= 8;

      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v11;
    operator delete(v13);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

void sub_19F7EEC44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v4 = (std::__shared_weak_count *)v1[8];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[6];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v1[2];
  if (v10)
  {
    v12 = v1[3];
    v13 = (void *)v1[2];
    if (v12 != v10)
    {
      do
      {
        v14 = *(void **)(v12 - 8);
        v12 -= 8;

      }
      while (v12 != v10);
      v13 = (void *)v1[2];
    }
    v1[3] = v10;
    operator delete(v13);
    v11 = (std::__shared_weak_count *)v1[1];
    if (!v11)
LABEL_13:
      _Unwind_Resume(a1);
  }
  else
  {
    v11 = (std::__shared_weak_count *)v1[1];
    if (!v11)
      goto LABEL_13;
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t md::LabelAnimator::LabelAnimator(uint64_t this, md::LabelManager *a2, md::Label *a3)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;
  int v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  malloc_zone_t *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  if ((v3 & 1) == 0)
  {
    v15 = this;
    this = v15;
    if (v5)
    {
      v6 = operator new();
      *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v6 + 24) = "VectorKitLabels";
      *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v6 = &off_1E42B5668;
      *(_QWORD *)(v6 + 8) = "VectorKitLabels";
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_QWORD *)(v6 + 248) = 0;
      *(_OWORD *)(v6 + 56) = 0u;
      v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
      if ((_DWORD)v7)
        geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v6 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v6;
      this = v15;
    }
  }
  *(_QWORD *)(this + 48) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  if ((v4 & 1) == 0)
  {
    v16 = this;
    this = v16;
    if (v10)
    {
      v11 = operator new();
      *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v11 + 24) = "VectorKitLabels";
      *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v11 = &off_1E42B5668;
      *(_QWORD *)(v11 + 8) = "VectorKitLabels";
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_OWORD *)(v11 + 104) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_OWORD *)(v11 + 184) = 0u;
      *(_OWORD *)(v11 + 200) = 0u;
      *(_OWORD *)(v11 + 216) = 0u;
      *(_OWORD *)(v11 + 232) = 0u;
      *(_QWORD *)(v11 + 248) = 0;
      *(_OWORD *)(v11 + 56) = 0u;
      v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
      if ((_DWORD)v12)
        geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
      v14 = malloc_create_zone(0, 0);
      *(_QWORD *)(v11 + 48) = v14;
      malloc_set_zone_name(v14, "VectorKitLabels");
      *(_QWORD *)(v11 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v11;
      this = v16;
    }
  }
  *(_QWORD *)(this + 80) = mdm::Allocator::instance(void)::alloc;
  *(_WORD *)(this + 88) = 0;
  *(_BYTE *)(this + 90) = 0;
  return this;
}

void md::LabelAnimator::setupAnimations(uint64_t a1, int a2, _BYTE *a3)
{
  __n128 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t *v34;
  _QWORD *v35;
  md::LabelAnimationTrack **v36;
  md::LabelAnimationTrack **v37;
  char v38;
  md::LabelAnimationTrack *v39;
  uint64_t v40;
  geo::read_write_lock *v41;
  const char *v42;
  malloc_zone_t *v43;
  uint64_t v44;
  uint64_t v45;
  geo::read_write_lock *v46;
  const char *v47;
  malloc_zone_t *zone;
  uint64_t v49;
  uint64_t v50;
  geo::read_write_lock *v51;
  const char *v52;
  malloc_zone_t *v53;
  uint64_t v54;

  (*(void (**)(_BYTE *))(*(_QWORD *)a3 + 184))(a3);
  if (a2 == 19)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    if (v13 - v12 == -144)
    {
      while (v13 != v12)
      {
        v15 = *(void **)(v13 - 144);
        v13 -= 144;
        v14 = v15;
        if (v15 != *(void **)(v13 + 16))
          free(v14);
      }
      *(_QWORD *)(a1 + 32) = v12;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(a1 + 24));
      v12 = *(_QWORD *)(a1 + 32);
    }
    v22 = *(_QWORD *)(a1 + 24);
    a3[563] = 57 * ((v12 - v22) >> 4) - 1;
    v23 = (57 * ((v12 - v22) >> 4) - 1);
    v24 = operator new();
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)v24 = 0;
    {
      v44 = v22;
      v45 = operator new();
      *(_QWORD *)(v45 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v45 + 24) = "VectorKitLabels";
      *(_OWORD *)(v45 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v45 = &off_1E42B5668;
      *(_QWORD *)(v45 + 8) = "VectorKitLabels";
      *(_OWORD *)(v45 + 72) = 0u;
      *(_OWORD *)(v45 + 88) = 0u;
      *(_OWORD *)(v45 + 104) = 0u;
      *(_OWORD *)(v45 + 120) = 0u;
      *(_OWORD *)(v45 + 136) = 0u;
      *(_OWORD *)(v45 + 152) = 0u;
      *(_OWORD *)(v45 + 168) = 0u;
      *(_OWORD *)(v45 + 184) = 0u;
      *(_OWORD *)(v45 + 200) = 0u;
      *(_OWORD *)(v45 + 216) = 0u;
      *(_OWORD *)(v45 + 232) = 0u;
      *(_QWORD *)(v45 + 248) = 0;
      *(_OWORD *)(v45 + 56) = 0u;
      v46 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v45 + 56), 0);
      if ((_DWORD)v46)
        geo::read_write_lock::logFailure(v46, (uint64_t)"initialization", v47);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v45 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v45 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v45;
      v22 = v44;
    }
    *(_QWORD *)(v24 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v24 + 32) = 0;
    *(_WORD *)(v24 + 40) = 256;
    v54 = v24;
    v26 = *(uint64_t **)(a1 + 64);
    if ((unint64_t)v26 >= *(_QWORD *)(a1 + 72))
    {
      v27 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 56, &v54);
    }
    else
    {
      if (v26)
        *v26 = v24;
      v27 = v26 + 1;
    }
    *(_QWORD *)(a1 + 64) = v27;
    v30 = *(v27 - 1);
    md::LabelAnimationTrack::addItem(v30, 3u, 1, 0.1, 0.4);
    md::LabelAnimationTrack::addItem(v30, 3u, 0, 0.6, 0.5);
    v31 = v22 + 144 * v23;
    *(_QWORD *)(v31 + 72) = v30;
    *(_QWORD *)(v31 + 80) = 0x3F80000000000000;
    v32 = operator new();
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)v32 = 0;
    {
      v49 = v22;
      v50 = operator new();
      *(_QWORD *)(v50 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v50 + 24) = "VectorKitLabels";
      *(_OWORD *)(v50 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v50 = &off_1E42B5668;
      *(_QWORD *)(v50 + 8) = "VectorKitLabels";
      *(_OWORD *)(v50 + 72) = 0u;
      *(_OWORD *)(v50 + 88) = 0u;
      *(_OWORD *)(v50 + 104) = 0u;
      *(_OWORD *)(v50 + 120) = 0u;
      *(_OWORD *)(v50 + 136) = 0u;
      *(_OWORD *)(v50 + 152) = 0u;
      *(_OWORD *)(v50 + 168) = 0u;
      *(_OWORD *)(v50 + 184) = 0u;
      *(_OWORD *)(v50 + 200) = 0u;
      *(_OWORD *)(v50 + 216) = 0u;
      *(_OWORD *)(v50 + 232) = 0u;
      *(_QWORD *)(v50 + 248) = 0;
      *(_OWORD *)(v50 + 56) = 0u;
      v51 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v50 + 56), 0);
      if ((_DWORD)v51)
        geo::read_write_lock::logFailure(v51, (uint64_t)"initialization", v52);
      v53 = malloc_create_zone(0, 0);
      *(_QWORD *)(v50 + 48) = v53;
      malloc_set_zone_name(v53, "VectorKitLabels");
      *(_QWORD *)(v50 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v50;
      v22 = v49;
    }
    *(_QWORD *)(v32 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v32 + 32) = 0;
    *(_WORD *)(v32 + 40) = 256;
    v54 = v32;
    v34 = *(uint64_t **)(a1 + 64);
    if ((unint64_t)v34 >= *(_QWORD *)(a1 + 72))
    {
      v35 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 56, &v54);
    }
    else
    {
      if (v34)
        *v34 = v32;
      v35 = v34 + 1;
    }
    *(_QWORD *)(a1 + 64) = v35;
    v28 = *(v35 - 1);
    md::LabelAnimationTrack::addItem(v28, 3u, 0, 0.0, 0.1);
    md::LabelAnimationTrack::addItem(v28, 3u, 1, 0.1, 1.0);
    v29 = v22 + 144 * v23;
  }
  else
  {
    if (a2 != 18)
      goto LABEL_36;
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = (uint64_t *)(a1 + 24);
    if (v8 - v9 == -144)
    {
      while (v8 != v9)
      {
        v11 = *(void **)(v8 - 144);
        v8 -= 144;
        v10 = v11;
        if (v11 != *(void **)(v8 + 16))
          free(v10);
      }
      *(_QWORD *)(a1 + 32) = v9;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(a1 + 24));
      v9 = *(_QWORD *)(a1 + 32);
    }
    v16 = *v7;
    v17 = 57 * ((v9 - *v7) >> 4) - 1;
    a3[563] = v17;
    v18 = operator new();
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)v18 = 0;
    {
      v40 = operator new();
      *(_QWORD *)(v40 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v40 + 24) = "VectorKitLabels";
      *(_OWORD *)(v40 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v40 = &off_1E42B5668;
      *(_QWORD *)(v40 + 8) = "VectorKitLabels";
      *(_OWORD *)(v40 + 72) = 0u;
      *(_OWORD *)(v40 + 88) = 0u;
      *(_OWORD *)(v40 + 104) = 0u;
      *(_OWORD *)(v40 + 120) = 0u;
      *(_OWORD *)(v40 + 136) = 0u;
      *(_OWORD *)(v40 + 152) = 0u;
      *(_OWORD *)(v40 + 168) = 0u;
      *(_OWORD *)(v40 + 184) = 0u;
      *(_OWORD *)(v40 + 200) = 0u;
      *(_OWORD *)(v40 + 216) = 0u;
      *(_OWORD *)(v40 + 232) = 0u;
      *(_QWORD *)(v40 + 248) = 0;
      *(_OWORD *)(v40 + 56) = 0u;
      v41 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v40 + 56), 0);
      if ((_DWORD)v41)
        geo::read_write_lock::logFailure(v41, (uint64_t)"initialization", v42);
      v43 = malloc_create_zone(0, 0);
      *(_QWORD *)(v40 + 48) = v43;
      malloc_set_zone_name(v43, "VectorKitLabels");
      *(_QWORD *)(v40 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v40;
    }
    *(_QWORD *)(v18 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v18 + 32) = 0;
    *(_WORD *)(v18 + 40) = 256;
    v54 = v18;
    v20 = *(uint64_t **)(a1 + 64);
    if ((unint64_t)v20 >= *(_QWORD *)(a1 + 72))
    {
      v21 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 56, &v54);
    }
    else
    {
      if (v20)
        *v20 = v18;
      v21 = v20 + 1;
    }
    *(_QWORD *)(a1 + 64) = v21;
    v28 = *(v21 - 1);
    md::LabelAnimationTrack::addItem(v28, 6u, 1, 0.1, 0.6);
    md::LabelAnimationTrack::addItem(v28, 6u, 0, 0.7, 0.4);
    v29 = v16 + 144 * v17;
  }
  *(_QWORD *)(v29 + 88) = v28;
  v6 = (__n128)xmmword_19FFB3480;
  *(_OWORD *)(v29 + 96) = xmmword_19FFB3480;
  *(_BYTE *)(v29 + 112) = 0;
  *(_BYTE *)(v29 + 113) = 1;
LABEL_36:
  if (*(_BYTE *)(a1 + 88))
    return;
  if (*(_BYTE *)(a1 + 90))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1192) + 52) != 2)
      return;
    *(_BYTE *)(a1 + 90) = 0;
  }
  v36 = *(md::LabelAnimationTrack ***)(a1 + 56);
  v37 = *(md::LabelAnimationTrack ***)(a1 + 64);
  if (v36 == v37)
    goto LABEL_44;
  v38 = 0;
  do
  {
    v6.n128_u32[0] = *(_DWORD *)(a1 + 20);
    md::LabelAnimationTrack::runAnimation(*v36, v6);
    v39 = *v36++;
    v38 |= *((_BYTE *)v39 + 40) == 0;
  }
  while (v36 != v37);
  if ((v38 & 1) == 0)
LABEL_44:
    *(_BYTE *)(a1 + 88) = 1;
}

void md::LabelAnimator::setupBalloonAnimation(uint64_t *a1, int a2, int *a3, int *a4)
{
  _BOOL4 v4;
  int *v5;
  int *v6;
  unsigned __int8 *v7;
  float *v12;
  float *v13;
  uint64_t v14;
  __int128 *v15;
  __n128 v16;
  __int128 *v17;
  __n128 v18;
  __int128 *v19;
  __n128 v20;
  __int128 *v21;
  __n128 v22;
  double v23;
  void *v24;
  int v25;
  float RandomNumber;
  float v27;
  __int128 *v28;
  float v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  int v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = a2 != 1;
  if (a2 == 1)
    v5 = a4;
  else
    v5 = a3;
  if (a2 == 1)
    v6 = a3;
  else
    v6 = a4;
  v7 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
  if (v7)
  {
    v12 = (float *)*((_QWORD *)v6 + 2);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 224))(*((_QWORD *)v5 + 2)) == 7)
    {
      (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *))(*(_QWORD *)v7 + 200))(&v43, v7);
      v13 = *(float **)v43;
      v44 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v43, v45 - v43);
      (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *))(*(_QWORD *)v7 + 200))(&v43, v7);
      v14 = *(_QWORD *)(v43 + 8);
      v44 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v43, v45 - v43);
      (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *))(*(_QWORD *)v7 + 200))(&v43, v7);
      v41 = *(_QWORD *)(v43 + 16);
      v44 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v43, v45 - v43);
      (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *))(*(_QWORD *)v7 + 200))(&v43, v7);
      v42 = *(_QWORD *)(v43 + 24);
      v44 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v43, v45 - v43);
      LODWORD(v43) = 0;
      if (v12)
      {
        v15 = md::LabelAnimator::resolveParams(a1, v4, 0xAu, 0, 0);
        md::LabelAnimator::createMorphAnimation(a1, (uint64_t)v12, v13, v4, (uint64_t)v15, (float *)&v43, v16);
      }
      v17 = md::LabelAnimator::resolveParams(a1, a2, 0xBu, 0, 3);
      md::LabelAnimator::createMorphAnimation(a1, (uint64_t)v13, v12, a2, (uint64_t)v17, (float *)&v43, v18);
      v19 = md::LabelAnimator::resolveParams(a1, a2, 0xCu, 0, 4);
      v40 = v14;
      md::LabelAnimator::createMorphAnimation(a1, v14, v12, a2, (uint64_t)v19, (float *)&v43, v20);
      v21 = md::LabelAnimator::resolveParams(a1, a2, 0xEu, 0, 6);
      *(float *)&v23 = md::LabelAnimator::createMorphAnimation(a1, v42, v12, a2, (uint64_t)v21, (float *)&v43, v22);
      +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform", v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v24, "reduceMotionEnabled") & 1) != 0)
      {

      }
      else
      {
        v25 = v7[632];

        if (a2 == 1 && v25)
        {
          RandomNumber = nextRandomNumber();
          if (nextRandomNumber() >= 0.5)
            v27 = (float)(RandomNumber * 0.15708) + 0.15708;
          else
            v27 = -(float)((float)(RandomNumber * 0.15708) + 0.15708);
          md::LabelAnimator::addRotateAnimation((uint64_t)a1, (uint64_t)v13, (uint64_t)v17, (float *)&v43, v27);
          md::LabelAnimator::addRotateAnimation((uint64_t)a1, v40, (uint64_t)v19, (float *)&v43, v27);
          md::LabelAnimator::addRotateAnimation((uint64_t)a1, v42, (uint64_t)v21, (float *)&v43, v27);
        }
      }
      v28 = md::LabelAnimator::resolveParams(a1, a2, 0xDu, 0, 5);
      md::LabelAnimator::createFadeAnimation(a1, v41, a2, (uint64_t)v28, (float *)&v43, 0.0);
      v30 = *a3;
      if (((*a3 | *a4) & 2) != 0)
      {
        v31 = *a4 & 2;
        if ((v30 & 2) != 0 && v31)
        {
          if (a2 == 1)
            v32 = 0x13F000000;
          else
            v32 = 0x13E99999ALL;
          v33 = md::LabelAnimator::setupTextMorphAnimation(a1, *((_QWORD *)a3 + 4), *((_QWORD *)a4 + 4), 1, 1, v32, v29);
          v34 = *((_QWORD *)a3 + 5);
          if (v34)
          {
            v35 = *((_QWORD *)a4 + 5);
            if (v35)
              md::LabelAnimator::setupTextMorphAnimation(a1, v34, v35, 1, 1, v32, v33);
          }
        }
        else
        {
          if ((v30 & 2) != 0)
            v36 = a3;
          else
            v36 = a4;
          v37 = *((_QWORD *)v36 + 4);
          v38 = v31 >> 1;
          v39 = md::LabelAnimator::resolveParams(a1, v31 >> 1, 1u, 0, 1);
          md::LabelAnimator::createFadeAnimation(a1, v37, v38, (uint64_t)v39, (float *)&v43, 0.0);
        }
      }
    }
  }
}

void sub_19F7EFAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelAnimator::setupMKBalloonPickAnimations(md::LabelAnimator *this, int a2, const md::LabelPartContent *a3, const md::LabelPartContent *a4)
{
  char *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unsigned int v55;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (!a2)
  {
    v10 = (char *)a4 + 16;
    if (!*((_QWORD *)a4 + 2))
      return;
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = 0;
    {
      v62 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v62, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v11 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v11 + 32) = 0;
    *(_WORD *)(v11 + 40) = 0;
    v63 = v11;
    v13 = (uint64_t *)*((_QWORD *)this + 8);
    if ((unint64_t)v13 >= *((_QWORD *)this + 9))
    {
      v14 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v63);
    }
    else
    {
      if (v13)
        *v13 = v11;
      v14 = v13 + 1;
    }
    *((_QWORD *)this + 8) = v14;
    v19 = (uint64_t *)*(v14 - 1);
    v20 = v19[1];
    v21 = v19[2];
    if (v20 >= v21)
    {
      v29 = (uint64_t)(v20 - *v19) >> 5;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 59)
        goto LABEL_72;
      v31 = v21 - *v19;
      if (v31 >> 4 > v30)
        v30 = v31 >> 4;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
        v30 = 0x7FFFFFFFFFFFFFFLL;
      if (v30)
      {
        v32 = 32 * v30;
        v33 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v19[3] + 16))(v19[3], 32 * v30, 8);
        v34 = v33 + 32 * v29;
        v30 = v33 + v32;
        if (v33)
        {
          *(_QWORD *)v34 = 0x358637BD00000000;
          *(_QWORD *)(v34 + 8) = 0;
          *(_BYTE *)(v34 + 16) = 1;
          *(_QWORD *)(v34 + 24) = EaseConstantOne;
        }
      }
      else
      {
        v34 = 32 * v29;
      }
      v22 = v34 + 32;
      v47 = *v19;
      v46 = v19[1];
      if (v46 != *v19)
      {
        do
        {
          v48 = *(_OWORD *)(v46 - 16);
          *(_OWORD *)(v34 - 32) = *(_OWORD *)(v46 - 32);
          *(_OWORD *)(v34 - 16) = v48;
          v34 -= 32;
          v46 -= 32;
        }
        while (v46 != v47);
        v46 = *v19;
      }
      *v19 = v34;
      v19[1] = v22;
      v49 = v19[2];
      v19[2] = v30;
      if (v46)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[3] + 40))(v19[3], v46, v49 - v46);
    }
    else
    {
      if (v20)
      {
        *(_OWORD *)v20 = xmmword_19FFB49C0;
        *(_BYTE *)(v20 + 16) = 1;
        *(_QWORD *)(v20 + 24) = EaseConstantOne;
      }
      v22 = v20 + 32;
    }
    v19[1] = v22;
    v51 = *((_QWORD *)this + 3);
    v52 = *((_QWORD *)this + 4);
    v50 = (_QWORD *)((char *)this + 24);
    if (v52 - v51 == -144)
    {
      while (v52 != v51)
      {
        v54 = *(void **)(v52 - 144);
        v52 -= 144;
        v53 = v54;
        if (v54 != *(void **)(v52 + 16))
          free(v53);
      }
      *((_QWORD *)this + 4) = v51;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)this + 3);
      v51 = *((_QWORD *)this + 4);
    }
    v55 = 57 * ((v51 - *v50) >> 4) - 1;
    v44 = *v50 + 144 * (57 * ((v51 - *v50) >> 4) - 1);
    *(_QWORD *)(v44 + 72) = v19;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v44 + 80) = _D0;
    v5 = v10;
    LOBYTE(v44) = v55;
    goto LABEL_66;
  }
  v5 = (char *)a3 + 16;
  if (!*((_QWORD *)a3 + 2))
    return;
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  {
    v61 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v61, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(v6 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 40) = 0;
  v63 = v6;
  v8 = (uint64_t *)*((_QWORD *)this + 8);
  if ((unint64_t)v8 >= *((_QWORD *)this + 9))
  {
    v9 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v63);
  }
  else
  {
    if (v8)
      *v8 = v6;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 8) = v9;
  v15 = (uint64_t *)*(v9 - 1);
  v16 = v15[1];
  v17 = v15[2];
  if (v16 >= v17)
  {
    v23 = (uint64_t)(v16 - *v15) >> 5;
    v24 = v23 + 1;
    if (!((unint64_t)(v23 + 1) >> 59))
    {
      v25 = v17 - *v15;
      if (v25 >> 4 > v24)
        v24 = v25 >> 4;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
        v24 = 0x7FFFFFFFFFFFFFFLL;
      if (v24)
      {
        v26 = 32 * v24;
        v27 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v15[3] + 16))(v15[3], 32 * v24, 8);
        v28 = v27 + 32 * v23;
        v24 = v27 + v26;
        if (v27)
        {
          *(_QWORD *)v28 = 0x358637BD00000000;
          *(_QWORD *)(v28 + 8) = 0;
          *(_BYTE *)(v28 + 16) = 1;
          *(_QWORD *)(v28 + 24) = EaseConstantZero;
        }
      }
      else
      {
        v28 = 32 * v23;
      }
      v18 = v28 + 32;
      v36 = *v15;
      v35 = v15[1];
      if (v35 != *v15)
      {
        do
        {
          v37 = *(_OWORD *)(v35 - 16);
          *(_OWORD *)(v28 - 32) = *(_OWORD *)(v35 - 32);
          *(_OWORD *)(v28 - 16) = v37;
          v28 -= 32;
          v35 -= 32;
        }
        while (v35 != v36);
        v35 = *v15;
      }
      *v15 = v28;
      v15[1] = v18;
      v38 = v15[2];
      v15[2] = v24;
      if (v35)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[3] + 40))(v15[3], v35, v38 - v35);
      goto LABEL_46;
    }
LABEL_72:
    abort();
  }
  if (v16)
  {
    *(_OWORD *)v16 = xmmword_19FFB49C0;
    *(_BYTE *)(v16 + 16) = 1;
    *(_QWORD *)(v16 + 24) = EaseConstantZero;
  }
  v18 = v16 + 32;
LABEL_46:
  v15[1] = v18;
  v40 = *((_QWORD *)this + 3);
  v41 = *((_QWORD *)this + 4);
  v39 = (_QWORD *)((char *)this + 24);
  if (v41 - v40 == -144)
  {
    while (v41 != v40)
    {
      v43 = *(void **)(v41 - 144);
      v41 -= 144;
      v42 = v43;
      if (v43 != *(void **)(v41 + 16))
        free(v42);
    }
    *((_QWORD *)this + 4) = v40;
  }
  else
  {
    std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)this + 3);
    v40 = *((_QWORD *)this + 4);
  }
  LODWORD(v44) = 57 * ((v40 - *v39) >> 4) - 1;
  v45 = *v39 + 144 * (57 * ((v40 - *v39) >> 4) - 1);
  *(_QWORD *)(v45 + 72) = v15;
  *(_QWORD *)(v45 + 80) = 0;
LABEL_66:
  *(_BYTE *)(*(_QWORD *)v5 + 563) = v44;
}

_QWORD *std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v18 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
      *v10 = *a2;
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v11 = v10 + 1;
  v12 = *(char **)a1;
  v13 = *(char **)(a1 + 8);
  if (v13 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_30;
  }
  v14 = (unint64_t)&v13[-*(_QWORD *)a1 - 8];
  if (v14 <= 0x57
    || ((v15 = (v12 - v13 + 7) & 0xFFFFFFFFFFFFFFF8,
         v16 = (unint64_t)&v13[v15],
         v17 = (char *)v10 + v15,
         v16 < (unint64_t)v10)
      ? (v18 = v17 >= v13)
      : (v18 = 1),
        !v18))
  {
    v20 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      v26 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *(_QWORD *)v20 = 0;
      *--v10 = v26;
    }
    while (v20 != v12);
    goto LABEL_23;
  }
  v19 = (v14 >> 3) + 1;
  v20 = &v13[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = v10 - 2;
  v22 = v13 - 32;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v25 = *(_OWORD *)v22;
    v24 = *((_OWORD *)v22 + 1);
    *(_OWORD *)v22 = 0uLL;
    *((_OWORD *)v22 + 1) = 0uLL;
    v22 -= 32;
    *(v21 - 1) = v25;
    *v21 = v24;
    v21 -= 2;
    v23 -= 4;
  }
  while (v23);
  v10 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v13 = *(char **)a1;
  v27 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  v28 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v27 != v13)
  {
    v30 = (uint64_t *)*((_QWORD *)v27 - 1);
    v27 -= 8;
    v29 = v30;
    *(_QWORD *)v27 = 0;
    if (v30)
    {
      v31 = *v29;
      if (*v29)
      {
        v29[1] = v31;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[3] + 40))(v29[3], v31, v29[2] - v31);
      }
      MEMORY[0x1A1AF4E00](v29, 0x1020C4034EA8E73);
    }
  }
LABEL_30:
  if (v13)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13, v28 - (_QWORD)v13);
  return v11;
}

float nextRandomNumber(void)
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  float *v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  int v13;

  {
    std::random_device::random_device[abi:nn180100]();
    __cxa_atexit(MEMORY[0x1E0DE4778], &nextRandomNumber(void)::randomDevice, &dword_19F029000);
  }
  {
    v11 = MEMORY[0x1A1AF4AA0](&nextRandomNumber(void)::randomDevice);
    v12 = v11 + ((v11 / 0x7FFFFFFF) | ((v11 / 0x7FFFFFFF) << 31));
    if (v12 <= 1)
      v12 = 1;
    nextRandomNumber(void)::randomEngine = v12;
  }
  v3 = (float *)&unk_1EE576000;
  if ((v2 & 1) == 0)
  {
    v3 = (float *)&unk_1EE576000;
    if (v13)
    {
      nextRandomNumber(void)::generator = 1065353216;
      v3 = (float *)&unk_1EE576000;
    }
  }
  v4 = v3[492];
  v5 = 48271 * (nextRandomNumber(void)::randomEngine % 0xADC8u);
  v6 = 3399 * (nextRandomNumber(void)::randomEngine / 0xADC8u);
  v7 = v5 >= v6;
  v8 = v5 - v6;
  if (v7)
    v9 = 0;
  else
    v9 = 0x7FFFFFFF;
  nextRandomNumber(void)::randomEngine = v9 + v8;
  return (float)(v4 * 4.6566e-10) * (float)(v9 + v8 - 1);
}

void sub_19F7F0334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::random_device::random_device[abi:nn180100]()
{
  std::string __token;

  *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device((std::random_device *)&nextRandomNumber(void)::randomDevice, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
}

void sub_19F7F03C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ggl::TexturedAnimatedRibbon::BaseMesh::~BaseMesh(ggl::TexturedAnimatedRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TexturedAnimatedRibbon::BaseMesh::~BaseMesh(ggl::TexturedAnimatedRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TexturedAnimatedRibbon::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::TexturedAnimatedRibbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TexturedAnimatedRibbon::BasePipelineSetup::~BasePipelineSetup(ggl::TexturedAnimatedRibbon::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TexturedAnimatedRibbon::BasePipelineSetup::constantDataIsEnabled(ggl::TexturedAnimatedRibbon::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::TexturedAnimatedRibbon::BasePipelineSetup::textureIsEnabled(ggl::TexturedAnimatedRibbon::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E03D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E03D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glyph::DefaultMesh::~DefaultMesh(ggl::Glyph::DefaultMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Glyph::DefaultMesh::~DefaultMesh(ggl::Glyph::DefaultMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Glyph::DefaultMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Glyph::DefaultMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Glyph::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Glyph::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::realistic::RoadRenderLayer::~RoadRenderLayer(md::realistic::RoadRenderLayer *this)
{
  md::realistic::RoadRenderLayer::~RoadRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;

  *(_QWORD *)this = &off_1E42AFE98;
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 23) = 0;
  }
  v3 = *((_QWORD *)this + 7);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 10);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v14)
    std::default_delete<md::DashTextureCache>::operator()[abi:nn180100](v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((md::realistic::RoadRenderLayer *)((char *)this + 88));
  *(_QWORD *)this = off_1E428C468;
  v18 = (void *)*((_QWORD *)this + 1);
  if (v18)
  {
    *((_QWORD *)this + 2) = v18;
    operator delete(v18);
  }
}

void md::realistic::RoadRenderLayer::layout(md::realistic::RoadRenderLayer *this, const md::LayoutContext *a2)
{
  md::PassList *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int64x2_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned __int8 *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  std::__shared_weak_count_vtbl *v138;
  __int128 v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;

  v4 = *(md::PassList **)(*((_QWORD *)this + 5) + 24);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 16);
  v6 = mach_absolute_time();
  v7 = *((_QWORD *)this + 5);
  v8 = *(_QWORD *)(v7 + 144);
  v9 = *(unsigned int *)(*(_QWORD *)(v7 + 136) + 88);
  v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v5 + 376)), *(float64x2_t *)(v5 + 392));
  v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v5 + 408)), *(float64x2_t *)(v5 + 424));
  v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v5 + 440)), *(float64x2_t *)(v5 + 456));
  v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v5 + 472)), *(float64x2_t *)(v5 + 488));
  v14 = (_QWORD *)*((_QWORD *)this + 24);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = v14[1];
  v19 = (float32x4_t *)v14[9];
  *v19 = v10;
  v19[1] = v11;
  v19[2] = v12;
  v19[3] = v13;
  if (v14[8] > v18)
    v18 = v14[8];
  v14[7] = 0;
  v14[8] = v18;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v22 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 27) + 56))(*((_QWORD *)this + 27));
  v23 = *v22;
  v24 = v22[1];
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v23 + 336);
    if (v25)
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v25 + 80))(v25, a2, v5, *(_QWORD *)(*((_QWORD *)a2 + 92) + 24), v9, v8);
    v23 += 8;
  }
  v26 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 27) + 56))(*((_QWORD *)this + 27));
  v29 = *v26;
  v30 = v26[1];
  while (v29 != v30)
  {
    v31 = *(_QWORD **)(*(_QWORD *)v29 + 336);
    if (v31)
      altitude::RoadTileComponent::collectRenderItems(v31, v27, v4, v28, 2, *(md::RealisticCommandBufferSelector **)(*((_QWORD *)this + 5) + 120));
    v29 += 8;
  }
  if (*((_BYTE *)this + 280))
  {
    v32 = (_QWORD *)*((_QWORD *)v4 + 1);
    v33 = v32[3];
    v34 = v32[4];
    v35 = v34 - v33;
    if (v34 == v33)
      goto LABEL_30;
    v36 = 0;
    v37 = v35 >> 3;
    while (1)
    {
      v38 = *(unsigned __int8 **)(v33 + 8 * v36);
      if (*v38 == *((unsigned __int8 *)this + 272))
      {
        v39 = *((_QWORD *)v38 + 1);
        v40 = v32[15];
        if (v39 < (v32[16] - v40) >> 3)
          break;
      }
      if (++v36 >= v37)
        goto LABEL_30;
    }
    v41 = *(_QWORD *)(v40 + 8 * v39);
    if (!v41)
    {
LABEL_30:
      v42 = 0;
      v43 = *((_QWORD *)this + 23);
      if (!v43)
        goto LABEL_31;
    }
    else
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8 * *((unsigned __int8 *)this + 273));
      v43 = *((_QWORD *)this + 23);
      if (!v43)
      {
LABEL_31:
        v44 = operator new();
        *(_BYTE *)(v44 + 31) = 19;
        *(_QWORD *)v44 = &off_1E42C4580;
        strcpy((char *)(v44 + 8), "/road/element/clear");
        *(_QWORD *)(v44 + 32) = 0;
        *(_BYTE *)(v44 + 40) = 1;
        *(_OWORD *)(v44 + 48) = 0u;
        *(_OWORD *)(v44 + 64) = 0u;
        *(_OWORD *)(v44 + 80) = 0u;
        *(_OWORD *)(v44 + 96) = 0u;
        *(_QWORD *)(v44 + 112) = 0;
        *(_BYTE *)(v44 + 120) = 1;
        *(_QWORD *)(v44 + 128) = 0;
        *(_QWORD *)(v44 + 136) = 0;
        *((_QWORD *)this + 23) = v44;
        v45 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v135 = v42;
        v136 = v6;
        v45->__shared_owners_ = 0;
        v46 = (unint64_t *)&v45->__shared_owners_;
        v45->__shared_weak_owners_ = 0;
        v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
        ggl::BufferData::BufferData((uint64_t)&v45[1], 8, 0, 0, 6, 4);
        v45[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B74E0;
        v45[9].__shared_weak_owners_ = (uint64_t)"/road/element/clear/vdata";
        v45[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
        v45[9].__shared_owners_ = (uint64_t)&unk_1E42B7500;
        v142 = v45;
        *(_QWORD *)&v47 = 0;
        *((_QWORD *)&v47 + 1) = v45 + 1;
        v139 = v47;
        v140 = 4 * v45[1].__shared_owners_;
        v141 = v45[4].__vftable;
        *(_OWORD *)&v141->~__shared_weak_count = xmmword_19FFB33E0;
        *(_OWORD *)&v141->__on_zero_shared = xmmword_19FFB33F0;
        v48 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v48->__shared_owners_ = 0;
        v49 = (unint64_t *)&v48->__shared_owners_;
        v48->__shared_weak_owners_ = 0;
        v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        ggl::BufferData::BufferData((uint64_t)&v48[1], 2, 1, 0, 6, 6);
        LODWORD(v48[10].__vftable) = 0;
        v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v48[1].__shared_owners_ = 2;
        v48[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v48[9].__shared_weak_owners_ = (uint64_t)"/road/element/clear/idata";
        *(_QWORD *)&v50 = 0;
        *((_QWORD *)&v50 + 1) = v48 + 1;
        v137 = v50;
        v138 = v48[4].__vftable;
        v138->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
        LODWORD(v138->~__shared_weak_count_0) = 3;
        v51 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v52 = v51;
        v51->__shared_owners_ = 0;
        v53 = (unint64_t *)&v51->__shared_owners_;
        v51->__shared_weak_owners_ = 0;
        v51->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5A8;
        v145 = &v45[1].__vftable;
        v146 = v45;
        do
          v54 = __ldxr(v46);
        while (__stxr(v54 + 1, v46));
        v143 = v48 + 1;
        v144 = v48;
        do
          v55 = __ldxr(v49);
        while (__stxr(v55 + 1, v49));
        v56 = &v51[1].__vftable;
        ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)&v51[1], (uint64_t)"/road/element/clear/mesh", (uint64_t *)&v145, (uint64_t *)&v143);
        do
          v57 = __ldaxr(v49);
        while (__stlxr(v57 - 1, v49));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v58 = v146;
        if (v146)
        {
          v59 = (unint64_t *)&v146->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v62 = *((_QWORD *)this + 21);
        v61 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
        if (v61)
        {
          v63 = (unint64_t *)&v61->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v145 = (_QWORD *)v62;
        v146 = v61;
        v65 = (std::__shared_weak_count *)operator new();
        v66 = v65;
        if (v61)
        {
          v67 = (unint64_t *)&v61->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
          ggl::PipelineSetup::PipelineSetup(v65, v62, (uint64_t)v61);
          v69 = (unint64_t *)&v61->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        else
        {
          ggl::PipelineSetup::PipelineSetup(v65, v62, 0);
        }
        v66->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BAA88;
        v71 = (int64x2_t *)operator new();
        v71->i64[0] = (uint64_t)&off_1E42B59B0;
        v72 = *((_QWORD *)this + 10);
        v71[1].i64[0] = (uint64_t)"";
        v71[1].i64[1] = v72;
        v71[2].i64[0] = (uint64_t)v66;
        v71[2].i32[2] = 0;
        v71[3].i64[0] = 0;
        v71[3].i32[2] = 1065353216;
        v71[4].i64[0] = (uint64_t)v56;
        v71[4].i64[1] = 0;
        v71[5].i64[0] = 0;
        v71[5].i64[1] = 0;
        v71[6] = vdupq_n_s64(1uLL);
        v71[7].i64[0] = 0;
        v73 = *((_QWORD *)this + 23);
        v74 = operator new();
        v143 = v66;
        v75 = (std::__shared_weak_count *)operator new();
        v75->__shared_owners_ = 0;
        v76 = (unint64_t *)&v75->__shared_owners_;
        v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7B48;
        v75->__shared_weak_owners_ = 0;
        v75[1].__vftable = (std::__shared_weak_count_vtbl *)v66;
        v144 = v75;
        do
          v77 = __ldxr(v53);
        while (__stxr(v77 + 1, v53));
        *(_OWORD *)(v74 + 40) = 0u;
        *(_OWORD *)(v74 + 24) = 0u;
        *(_QWORD *)(v74 + 56) = 0x3FF0000000000000;
        *(_OWORD *)(v74 + 8) = 0u;
        *(_QWORD *)v74 = &off_1E42C3938;
        *(_QWORD *)(v74 + 160) = 0xFFFFFFFF00000000;
        *(_WORD *)(v74 + 168) = 0;
        *(_QWORD *)(v74 + 172) = -1;
        *(_BYTE *)(v74 + 180) = 1;
        *(_QWORD *)(v74 + 184) = v71;
        *(_QWORD *)(v74 + 192) = v66;
        *(_QWORD *)(v74 + 200) = v75;
        do
          v78 = __ldxr(v76);
        while (__stxr(v78 + 1, v76));
        *(_QWORD *)(v74 + 208) = 0;
        *(_QWORD *)(v74 + 216) = v56;
        *(_QWORD *)(v74 + 224) = v52;
        do
          v79 = __ldxr(v53);
        while (__stxr(v79 + 1, v53));
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(v74 + 232) = _Q0;
        *(_QWORD *)(v74 + 248) = 0x3FF0000000000000;
        *(_QWORD *)(v74 + 256) = 0;
        *(_QWORD *)(v74 + 264) = 0;
        *(_QWORD *)(v74 + 272) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v74);
        do
          v85 = __ldaxr(v53);
        while (__stlxr(v85 - 1, v53));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
        v86 = v144;
        if (v144)
        {
          v87 = (unint64_t *)&v144->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = v146;
        if (v146)
        {
          v90 = (unint64_t *)&v146->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        if (v52)
        {
          v92 = (unint64_t *)&v52->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        if (v138)
        {
          if ((_QWORD)v137 && *(_BYTE *)(*((_QWORD *)&v137 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v137 + 64))();
          v95 = *(_QWORD *)(*((_QWORD *)&v137 + 1) + 56);
          v94 = *(_QWORD *)(*((_QWORD *)&v137 + 1) + 64);
          if (v94 == v95)
            v95 = *(_QWORD *)(*((_QWORD *)&v137 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v137 + 1) + 72);
          if (v95)
            v95 = 0;
          if (v94 <= 0xC)
            v94 = 12;
          *(_QWORD *)(*((_QWORD *)&v137 + 1) + 56) = v95;
          *(_QWORD *)(*((_QWORD *)&v137 + 1) + 64) = v94;
        }
        if (v48)
        {
          v96 = (unint64_t *)&v48->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v141 && v140)
        {
          if ((_QWORD)v139 && *(_BYTE *)(*((_QWORD *)&v139 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v139 + 64))();
          v99 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 56);
          v98 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 64);
          if (v98 == v99)
            v99 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v139 + 1) + 72);
          if (v99)
            v99 = 0;
          if (v98 <= v140)
            v98 = v140;
          if (v98 == v99)
            v98 = v99 + *(_QWORD *)(*((_QWORD *)&v139 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v139 + 1) + 72);
          *(_QWORD *)(*((_QWORD *)&v139 + 1) + 56) = v99;
          *(_QWORD *)(*((_QWORD *)&v139 + 1) + 64) = v98;
        }
        v6 = v136;
        if (v142)
        {
          v100 = (unint64_t *)&v142->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        v43 = *((_QWORD *)this + 23);
        v42 = v135;
      }
    }
    ggl::CommandBuffer::pushRenderItem(v42, *(ggl::RenderItem **)(**(_QWORD **)(v43 + 48) + 184));
  }
  v102 = 0;
  v103 = (_QWORD *)*((_QWORD *)v4 + 1);
  while (1)
  {
    v104 = *(unsigned __int8 **)(v103[3] + 8 * v102);
    if (*v104 == *((unsigned __int8 *)this + 274))
    {
      v105 = *((_QWORD *)v104 + 1);
      v106 = v103[15];
      if (v105 < (v103[16] - v106) >> 3)
        break;
    }
    ++v102;
  }
  v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 8 * v105) + 24) + 8 * *((unsigned __int8 *)this + 275));
  v108 = *(_QWORD *)(v107 + 72);
  v109 = *(uint64_t **)(v107 + 80);
  v110 = 126 - 2 * __clz((uint64_t)((uint64_t)v109 - v108) >> 3);
  if (v109 == (uint64_t *)v108)
    v111 = 0;
  else
    v111 = v110;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v108, v109, v111, 1);
  v112 = 0;
  v113 = (_QWORD *)*((_QWORD *)v4 + 1);
  while (1)
  {
    v114 = *(unsigned __int8 **)(v113[3] + 8 * v112);
    if (*v114 == *((unsigned __int8 *)this + 276))
    {
      v115 = *((_QWORD *)v114 + 1);
      v116 = v113[15];
      if (v115 < (v113[16] - v116) >> 3)
        break;
    }
    ++v112;
  }
  v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v116 + 8 * v115) + 24) + 8 * *((unsigned __int8 *)this + 277));
  v118 = *(_QWORD *)(v117 + 72);
  v119 = *(uint64_t **)(v117 + 80);
  v120 = 126 - 2 * __clz((uint64_t)((uint64_t)v119 - v118) >> 3);
  if (v119 == (uint64_t *)v118)
    v121 = 0;
  else
    v121 = v120;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v118, v119, v121, 1);
  v122 = 0;
  v123 = (_QWORD *)*((_QWORD *)v4 + 1);
  while (1)
  {
    v124 = *(unsigned __int8 **)(v123[3] + 8 * v122);
    if (*v124 == *((unsigned __int8 *)this + 278))
    {
      v125 = *((_QWORD *)v124 + 1);
      v126 = v123[15];
      if (v125 < (v123[16] - v126) >> 3)
        break;
    }
    ++v122;
  }
  v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 8 * v125) + 24) + 8 * *((unsigned __int8 *)this + 279));
  v128 = *(_QWORD *)(v127 + 72);
  v129 = *(uint64_t **)(v127 + 80);
  v130 = 126 - 2 * __clz((uint64_t)((uint64_t)v129 - v128) >> 3);
  if (v129 == (uint64_t *)v128)
    v131 = 0;
  else
    v131 = v130;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v128, v129, v131, 1);
  v132 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v133 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 104);
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 + v132 - v6, v133));
}

void sub_19F7F13C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va3;
  uint64_t v23;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v21 = va_arg(va4, _QWORD);
  v23 = va_arg(va4, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 120);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 104);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 136);
  v5 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v6 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 104);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + v5 - a3, v6));
  _Unwind_Resume(a1);
}

void md::realistic::RoadRenderLayer::setActive(md::realistic::RoadRenderLayer *this, int a2)
{
  uint64_t v2;

  *((_BYTE *)this + 32) = a2;
  atomic_store(a2, (unsigned __int8 *)(*((_QWORD *)this + 28) + 224));
  v2 = *((_QWORD *)this + 30);
  if (a2)
    *(_BYTE *)(v2 + 136) = 1;
  else
    altitude::RoadRequestManager::disable((pthread_mutex_t **)v2);
}

void std::__shared_ptr_pointer<ggl::StenciledAlphaClear::ClearPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::StenciledAlphaClear::ClearPipelineSetup>,std::allocator<ggl::StenciledAlphaClear::ClearPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::StenciledAlphaClear::ClearPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::StenciledAlphaClear::ClearPipelineSetup>,std::allocator<ggl::StenciledAlphaClear::ClearPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::default_delete<md::DashTextureCache>::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (!v2)
  {
LABEL_2:
    v3 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
      operator delete(v3);
    JUMPOUT(0x1A1AF4E00);
  }
  while (1)
  {
    v4 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v2[9];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
        break;
    }
    v8 = v2[2];
    if (v8)
      goto LABEL_11;
LABEL_5:
    operator delete(v2);
    v2 = v4;
    if (!v4)
      goto LABEL_2;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = v2[2];
  if (!v8)
    goto LABEL_5;
LABEL_11:
  v2[3] = v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v8, v2[4] - v8);
  goto LABEL_5;
}

void md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates(md::realistic::RoadRenderLayer::RoadModelPipelineStates *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v17)
      return;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v17)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void std::__shared_ptr_emplace<ggl::FlyoverBorderRibbon::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E36D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverBorderRibbon::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E36D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverBorderRibbon::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadStrokeTextured::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadStrokeTextured::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverRoadStrokeTextured::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadFillProcedural::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadFillProcedural::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3E08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverRoadFillProcedural::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadFillTextured::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoadFillTextured::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverRoadFillTextured::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::TexturedInnerShadowRibbon::PipelineSetup::~PipelineSetup(ggl::TexturedInnerShadowRibbon::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TexturedInnerShadowRibbon::PipelineSetup::constantDataIsEnabled(ggl::TexturedInnerShadowRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::TexturedInnerShadowRibbon::PipelineSetup::textureIsEnabled(ggl::TexturedInnerShadowRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void sub_19F7F1D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKAnnotationTrackingCameraController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F7F213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19F7F2644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void karo::graphics::CullingNode::~CullingNode(karo::graphics::CullingNode *this)
{
  void *v2;

  *(_QWORD *)this = off_1E42C36B8;
  *((_QWORD *)this + 8) = 0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_1E42C36B8;
  *((_QWORD *)this + 8) = 0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::graphics::CullingNode::cull(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t v7;

  if (!*(_BYTE *)(this + 80))
    return this;
  v1 = (_QWORD *)this;
  v2 = *(_QWORD *)(this + 64);
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v2 + 24))(v2, v1, 0xFFFFFFFFLL);
    this = v1[9];
    if (this)
    {
LABEL_4:
      this = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)this + 24))(this, v1);
      v4 = this;
      goto LABEL_7;
    }
  }
  else
  {
    v3 = 0;
    this = v1[9];
    if (this)
      goto LABEL_4;
  }
  v4 = 0;
LABEL_7:
  v6 = (uint64_t *)v1[5];
  for (i = (uint64_t *)v1[6];
        v6 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v3, v4))
  {
    v7 = *v6++;
  }
  return this;
}

uint64_t karo::graphics::CullingNode::cull(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 80))
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 64) + 24))(*(_QWORD *)(result + 64), result, 0xFFFFFFFFLL);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 24))(*(_QWORD *)(v3 + 72), v3);
    v6 = *(uint64_t **)(v3 + 40);
    v5 = *(uint64_t **)(v3 + 48);
    if (v6 != v5)
    {
      v7 = result;
      do
      {
        v8 = *v6++;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v4, v7, a2);
      }
      while (v6 != v5);
    }
  }
  return result;
}

_QWORD *md::DebugRenderLayer::prune(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD **v13;

  v1 = result;
  v2 = *(_QWORD **)(result[6] + 112);
  v4 = (_QWORD **)*v2;
  v3 = (_QWORD **)v2[1];
  if ((_QWORD **)*v2 != v3)
  {
    do
    {
      result = *v4;
      if (*v4)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v3 = (_QWORD **)v2[1];
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = (_QWORD **)*v2;
  }
  v2[1] = v4;
  v5 = *(_QWORD **)(v1[6] + 136);
  v7 = (_QWORD **)*v5;
  v6 = (_QWORD **)v5[1];
  if ((_QWORD **)*v5 != v6)
  {
    do
    {
      result = *v7;
      if (*v7)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v6 = (_QWORD **)v5[1];
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = (_QWORD **)*v5;
  }
  v5[1] = v7;
  v8 = *(_QWORD **)(v1[6] + 144);
  v10 = (_QWORD **)*v8;
  v9 = (_QWORD **)v8[1];
  if ((_QWORD **)*v8 != v9)
  {
    do
    {
      result = *v10;
      if (*v10)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v9 = (_QWORD **)v8[1];
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = (_QWORD **)*v8;
  }
  v8[1] = v10;
  v11 = *(_QWORD **)(v1[6] + 160);
  v13 = (_QWORD **)*v11;
  v12 = (_QWORD **)v11[1];
  if ((_QWORD **)*v11 != v12)
  {
    do
    {
      result = *v13;
      if (*v13)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v12 = (_QWORD **)v11[1];
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = (_QWORD **)*v11;
  }
  v11[1] = v13;
  return result;
}

void std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DebugLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::DebugRenderLayer::renderTriangulatedLines(uint64_t a1, md::LayoutContext *a2, double *a3, _DWORD *a4, uint64_t *a5, uint64_t a6, uint64_t *a7, float a8)
{
  _QWORD *v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  __int128 v85;
  std::__shared_weak_count_vtbl *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  uint64_t v99;
  unsigned int v100;
  float v101;
  float v102;
  float v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  float32x4_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  float64x2_t *v167;
  uint64_t v168;
  unint64_t v169;
  ggl::RenderItem *v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  int v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  _DWORD *v189;
  md::LayoutContext *v190;
  uint64_t v191;
  float64x2_t v194[8];
  __int128 v195;
  unint64_t v196;
  uint64_t v197;
  __int16 v198;
  std::__shared_weak_count_vtbl *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  unint64_t v203;
  unint64_t v204;
  __int16 v205;
  uint64_t v206;

  v13 = (_QWORD *)*((_QWORD *)a2 + 1);
  v14 = (int8x8_t)v13[1];
  if (!*(_QWORD *)&v14)
    goto LABEL_24;
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v14 <= 0x1AF456233693CD46uLL)
      v16 = 0x1AF456233693CD46uLL % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x1AF456233693CD46;
  }
  v17 = *(_QWORD **)(*v13 + 8 * v16);
  if (!v17)
    goto LABEL_24;
  v18 = (_QWORD *)*v17;
  if (!v18)
    goto LABEL_24;
  if (v15.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v21 = v18[1];
      if (v21 == 0x1AF456233693CD46)
      {
        if (v18[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_24;
      }
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v20 = v18[1];
    if (v20 == 0x1AF456233693CD46)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_24;
LABEL_11:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_24;
  }
  if (v18[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v22 = v18[5];
  if (*(_QWORD *)(v22 + 8) == 0x1AF456233693CD46)
  {
    v191 = *(_QWORD *)(v22 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v191 = 0;
LABEL_25:
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 104);
  v24 = *(_QWORD *)(v23 + 8);
  if (v24 == *(_QWORD *)v23)
  {
    v35 = *(_QWORD *)(v23 + 88);
    if (!v35)
    {
LABEL_214:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_215;
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
    v26 = *(uint64_t **)(v23 + 40);
    v36 = *(_QWORD *)(v23 + 48);
    if ((unint64_t)v26 < v36)
    {
LABEL_37:
      if (v26)
        *v26 = v25;
      v37 = v26 + 1;
      goto LABEL_74;
    }
    v38 = *(_QWORD *)(v23 + 32);
    v39 = ((uint64_t)v26 - v38) >> 3;
    v30 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
LABEL_216:
      abort();
    v40 = v36 - v38;
    if (v40 >> 2 > v30)
      v30 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    if (v30)
    {
      v41 = 8 * v30;
      v42 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v23 + 56) + 16))(*(_QWORD *)(v23 + 56), 8 * v30, 8);
      v34 = (uint64_t *)(v42 + 8 * v39);
      v30 = v42 + v41;
      if (v42)
        *v34 = v25;
    }
    else
    {
      v34 = (uint64_t *)(8 * v39);
    }
    v37 = v34 + 1;
    v52 = *(_QWORD *)(v23 + 32);
    v43 = *(_QWORD *)(v23 + 40);
    if (v43 == v52)
      goto LABEL_72;
    v53 = v43 - v52 - 8;
    if (v53 < 0x38)
    {
      v55 = *(_QWORD *)(v23 + 40);
    }
    else if ((unint64_t)(v43 - (_QWORD)v34) < 0x20)
    {
      v55 = *(_QWORD *)(v23 + 40);
    }
    else
    {
      v54 = (v53 >> 3) + 1;
      v55 = v43 - 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      v56 = v34 - 2;
      v57 = (__int128 *)(v43 - 16);
      v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = *v57;
        *((_OWORD *)v56 - 1) = *(v57 - 1);
        *(_OWORD *)v56 = v59;
        v56 -= 4;
        v57 -= 2;
        v58 -= 4;
      }
      while (v58);
      v34 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
      if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_71;
    }
    do
    {
      v61 = *(_QWORD *)(v55 - 8);
      v55 -= 8;
      *--v34 = v61;
    }
    while (v55 != v52);
LABEL_71:
    v43 = *(_QWORD *)(v23 + 32);
    goto LABEL_72;
  }
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v23 + 8) = v24 - 8;
  v26 = *(uint64_t **)(v23 + 40);
  v27 = *(_QWORD *)(v23 + 48);
  if ((unint64_t)v26 < v27)
    goto LABEL_37;
  v28 = *(_QWORD *)(v23 + 32);
  v29 = ((uint64_t)v26 - v28) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    goto LABEL_216;
  v31 = v27 - v28;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  if (v30)
  {
    v32 = 8 * v30;
    v33 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v23 + 56) + 16))(*(_QWORD *)(v23 + 56), 8 * v30, 8);
    v34 = (uint64_t *)(v33 + 8 * v29);
    v30 = v33 + v32;
    if (v33)
      *v34 = v25;
  }
  else
  {
    v34 = (uint64_t *)(8 * v29);
  }
  v37 = v34 + 1;
  v44 = *(_QWORD *)(v23 + 32);
  v43 = *(_QWORD *)(v23 + 40);
  if (v43 != v44)
  {
    v45 = v43 - v44 - 8;
    if (v45 < 0x38)
    {
      v47 = *(_QWORD *)(v23 + 40);
    }
    else if ((unint64_t)(v43 - (_QWORD)v34) < 0x20)
    {
      v47 = *(_QWORD *)(v23 + 40);
    }
    else
    {
      v46 = (v45 >> 3) + 1;
      v47 = v43 - 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = v34 - 2;
      v49 = (__int128 *)(v43 - 16);
      v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)v48 = v51;
        v48 -= 4;
        v49 -= 2;
        v50 -= 4;
      }
      while (v50);
      v34 -= v46 & 0x3FFFFFFFFFFFFFFCLL;
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_71;
    }
    do
    {
      v60 = *(_QWORD *)(v47 - 8);
      v47 -= 8;
      *--v34 = v60;
    }
    while (v47 != v44);
    goto LABEL_71;
  }
LABEL_72:
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v37;
  v62 = *(_QWORD *)(v23 + 48);
  *(_QWORD *)(v23 + 48) = v30;
  if (v43)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 56) + 40))(*(_QWORD *)(v23 + 56), v43, v62 - v43);
LABEL_74:
  *(_QWORD *)(v23 + 40) = v37;
  v189 = a4;
  v190 = a2;
  *(_QWORD *)&v194[0].f64[0] = v25;
  v63 = *(_QWORD *)(v23 + 120);
  if (!v63)
    goto LABEL_214;
  v64 = a1;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v63 + 48))(v63, v194);
  v65 = *a5;
  v66 = a5[1];
  v67 = v66 - *a5;
  v68 = 0xAAAAAAAAAAAAAAACLL * (v67 >> 3);
  v69 = **(_QWORD **)(v25 + 64);
  v70 = *(_QWORD *)(v69 + 8) * v68;
  v71 = *(_QWORD *)(v69 + 72);
  v72 = *(_QWORD *)(v69 + 80) - v71;
  if (v70 != v72)
  {
    if (v70 <= v72)
    {
      if (v70 < v72)
        *(_QWORD *)(v69 + 80) = v71 + v70;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v69 + 72, v70 - v72);
    }
    v73 = *(std::__shared_weak_count **)(v69 + 32);
    *(_QWORD *)(v69 + 24) = 0;
    *(_QWORD *)(v69 + 32) = 0;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    *(_QWORD *)(v69 + 120) = 0;
    *(_DWORD *)(v69 + 112) = 0;
    v76 = *(_QWORD *)(v69 + 80) - *(_QWORD *)(v69 + 72);
    *(_QWORD *)(v69 + 40) = 0;
    *(_QWORD *)(v69 + 48) = v76;
    *(_QWORD *)(v69 + 56) = 0;
    *(_QWORD *)(v69 + 64) = v76;
    v69 = **(_QWORD **)(v25 + 64);
    v70 = *(_QWORD *)(v69 + 8) * v68;
  }
  v202 = 0uLL;
  *(_QWORD *)&v77 = 0;
  *((_QWORD *)&v77 + 1) = v69;
  if (v70)
    v78 = *(_QWORD *)(v69 + 72);
  else
    v78 = 0;
  v202 = v77;
  v203 = 0;
  v204 = v70;
  v206 = v78;
  v205 = 1;
  v79 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v79->__shared_owners_ = 0;
  v80 = (unint64_t *)&v79->__shared_owners_;
  v79->__shared_weak_owners_ = 0;
  v79->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v81 = ggl::BufferData::BufferData((uint64_t)&v79[1], 2, 1, 0, 6, v67 >> 2);
  LODWORD(v79[10].__vftable) = 0;
  v79[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v79[1].__shared_owners_ = 2;
  v79[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v79[9].__shared_weak_owners_ = (uint64_t)"DebugLineIndexData";
  v200 = v81;
  v201 = v79;
  v195 = 0uLL;
  *(_QWORD *)&v85 = 0;
  *((_QWORD *)&v85 + 1) = v81;
  if (v66 == v65)
    v86 = 0;
  else
    v86 = v79[4].__vftable;
  v195 = v85;
  v196 = 0;
  v197 = 4 * (v67 >> 3);
  v199 = v86;
  v198 = 1;
  do
    v87 = __ldxr(v80);
  while (__stxr(v87 + 1, v80));
  do
    v88 = __ldxr(v80);
  while (__stxr(v88 + 1, v80));
  v89 = *(std::__shared_weak_count **)(v25 + 104);
  *(_QWORD *)(v25 + 96) = v81;
  *(_QWORD *)(v25 + 104) = v79;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  do
    v92 = __ldaxr(v80);
  while (__stlxr(v92 - 1, v80));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  v93 = *a5;
  v94 = a5[1];
  v95 = v94 - *a5;
  if (v94 != *a5)
  {
    v96 = 0;
    v97 = v95 / 24;
    v98 = v199;
    if (v97 <= 1)
      v97 = 1;
    v99 = v206 + 64;
    v100 = 5;
    do
    {
      v83.i32[0] = *(_DWORD *)(v93 + 12);
      v101 = *(float *)(v93 + 16);
      v84.f32[0] = 1.0 / sqrtf((float)(v83.f32[0] * v83.f32[0]) + (float)(v101 * v101));
      v102 = v84.f32[0] * v83.f32[0];
      v103 = v84.f32[0] * v101;
      v104 = -(float)(v84.f32[0] * v101);
      *(_DWORD *)(v99 - 64) = *(_DWORD *)v93;
      *(_DWORD *)(v99 - 60) = *(_DWORD *)(v93 + 4);
      *(_DWORD *)(v99 - 56) = *(_DWORD *)(v93 + 8);
      *(float *)(v99 - 48) = v104;
      *(float *)(v99 - 44) = v84.f32[0] * v83.f32[0];
      *(_DWORD *)(v99 - 40) = 0;
      *(_DWORD *)(v99 - 32) = *(_DWORD *)v93;
      *(_DWORD *)(v99 - 28) = *(_DWORD *)(v93 + 4);
      *(_DWORD *)(v99 - 24) = *(_DWORD *)(v93 + 8);
      v82.f32[0] = -(float)(v84.f32[0] * v83.f32[0]);
      *(float *)(v99 - 16) = v103;
      *(_DWORD *)(v99 - 12) = v82.i32[0];
      *(_DWORD *)(v99 - 8) = 0x80000000;
      v83.i64[0] = *(_QWORD *)v93;
      v83.i32[2] = *(_DWORD *)(v93 + 8);
      v84.i64[0] = *(_QWORD *)(v93 + 12);
      v84.i32[2] = *(_DWORD *)(v93 + 20);
      v83 = vaddq_f32(v84, v83);
      *(_DWORD *)(v99 + 8) = v83.i32[2];
      *(_QWORD *)v99 = v83.i64[0];
      *(float *)(v99 + 16) = v103;
      *(_DWORD *)(v99 + 20) = v82.i32[0];
      *(_DWORD *)(v99 + 24) = 0x80000000;
      v82.i64[0] = *(_QWORD *)v93;
      v82.i32[2] = *(_DWORD *)(v93 + 8);
      v83.i64[0] = *(_QWORD *)(v93 + 12);
      v83.i32[2] = *(_DWORD *)(v93 + 20);
      v82 = vaddq_f32(v83, v82);
      *(_DWORD *)(v99 + 40) = v82.i32[2];
      *(_QWORD *)(v99 + 32) = v82.i64[0];
      *(float *)(v99 + 48) = v104;
      *(float *)(v99 + 52) = v102;
      *(_DWORD *)(v99 + 56) = 0;
      *((_WORD *)v98 + v100 - 5) = v96;
      *((_WORD *)v98 + v100 - 4) = v96 + 1;
      *((_WORD *)v98 + v100 - 3) = v96 + 2;
      *((_WORD *)v98 + v100 - 2) = v96;
      *((_WORD *)v98 + v100 - 1) = v96 + 2;
      *((_WORD *)&v98->~__shared_weak_count + v100) = v96 + 3;
      v100 += 6;
      v96 += 4;
      v93 += 24;
      v99 += 128;
      --v97;
    }
    while (v97);
  }
  v105 = *(_QWORD *)(*(_QWORD *)(v64 + 48) + 120);
  v106 = *(_QWORD *)(v105 + 8);
  if (v106 == *(_QWORD *)v105)
  {
    v118 = *(_QWORD *)(v105 + 88);
    if (v118)
    {
      v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 48))(v118);
      v108 = *(uint64_t **)(v105 + 40);
      v119 = *(_QWORD *)(v105 + 48);
      if ((unint64_t)v108 < v119)
        goto LABEL_121;
      v121 = *(_QWORD *)(v105 + 32);
      v122 = ((uint64_t)v108 - v121) >> 3;
      v123 = v122 + 1;
      if ((unint64_t)(v122 + 1) >> 61)
LABEL_217:
        abort();
      v124 = v119 - v121;
      if (v124 >> 2 > v123)
        v123 = v124 >> 2;
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v123;
      if (v125)
      {
        v126 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 16))(*(_QWORD *)(v105 + 56), 8 * v125, 8);
        v116 = (uint64_t *)(v126 + 8 * v122);
        v117 = v126 + 8 * v125;
        if (v126)
          *v116 = v107;
      }
      else
      {
        v117 = 0;
        v116 = (uint64_t *)(8 * v122);
      }
      v120 = v116 + 1;
      v136 = *(_QWORD *)(v105 + 32);
      v127 = *(_QWORD *)(v105 + 40);
      if (v127 == v136)
        goto LABEL_157;
      v137 = v127 - v136 - 8;
      if (v137 < 0x38)
      {
        v139 = *(_QWORD *)(v105 + 40);
      }
      else if ((unint64_t)(v127 - (_QWORD)v116) < 0x20)
      {
        v139 = *(_QWORD *)(v105 + 40);
      }
      else
      {
        v138 = (v137 >> 3) + 1;
        v139 = v127 - 8 * (v138 & 0x3FFFFFFFFFFFFFFCLL);
        v140 = v116 - 2;
        v141 = (__int128 *)(v127 - 16);
        v142 = v138 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v143 = *v141;
          *((_OWORD *)v140 - 1) = *(v141 - 1);
          *(_OWORD *)v140 = v143;
          v140 -= 4;
          v141 -= 2;
          v142 -= 4;
        }
        while (v142);
        v116 -= v138 & 0x3FFFFFFFFFFFFFFCLL;
        if (v138 == (v138 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_156;
      }
      do
      {
        v145 = *(_QWORD *)(v139 - 8);
        v139 -= 8;
        *--v116 = v145;
      }
      while (v139 != v136);
LABEL_156:
      v127 = *(_QWORD *)(v105 + 32);
      goto LABEL_157;
    }
LABEL_215:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  v107 = *(_QWORD *)(v106 - 8);
  *(_QWORD *)(v105 + 8) = v106 - 8;
  v108 = *(uint64_t **)(v105 + 40);
  v109 = *(_QWORD *)(v105 + 48);
  if ((unint64_t)v108 < v109)
  {
LABEL_121:
    if (v108)
      *v108 = v107;
    v120 = v108 + 1;
    goto LABEL_159;
  }
  v110 = *(_QWORD *)(v105 + 32);
  v111 = ((uint64_t)v108 - v110) >> 3;
  v112 = v111 + 1;
  if ((unint64_t)(v111 + 1) >> 61)
    goto LABEL_217;
  v113 = v109 - v110;
  if (v113 >> 2 > v112)
    v112 = v113 >> 2;
  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
    v114 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v114 = v112;
  if (v114)
  {
    v115 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 16))(*(_QWORD *)(v105 + 56), 8 * v114, 8);
    v116 = (uint64_t *)(v115 + 8 * v111);
    v117 = v115 + 8 * v114;
    if (v115)
      *v116 = v107;
  }
  else
  {
    v117 = 0;
    v116 = (uint64_t *)(8 * v111);
  }
  v120 = v116 + 1;
  v128 = *(_QWORD *)(v105 + 32);
  v127 = *(_QWORD *)(v105 + 40);
  if (v127 != v128)
  {
    v129 = v127 - v128 - 8;
    if (v129 < 0x38)
    {
      v131 = *(_QWORD *)(v105 + 40);
    }
    else if ((unint64_t)(v127 - (_QWORD)v116) < 0x20)
    {
      v131 = *(_QWORD *)(v105 + 40);
    }
    else
    {
      v130 = (v129 >> 3) + 1;
      v131 = v127 - 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      v132 = v116 - 2;
      v133 = (__int128 *)(v127 - 16);
      v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *v133;
        *((_OWORD *)v132 - 1) = *(v133 - 1);
        *(_OWORD *)v132 = v135;
        v132 -= 4;
        v133 -= 2;
        v134 -= 4;
      }
      while (v134);
      v116 -= v130 & 0x3FFFFFFFFFFFFFFCLL;
      if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_156;
    }
    do
    {
      v144 = *(_QWORD *)(v131 - 8);
      v131 -= 8;
      *--v116 = v144;
    }
    while (v131 != v128);
    goto LABEL_156;
  }
LABEL_157:
  *(_QWORD *)(v105 + 32) = v116;
  *(_QWORD *)(v105 + 40) = v120;
  v146 = *(_QWORD *)(v105 + 48);
  *(_QWORD *)(v105 + 48) = v117;
  if (v127)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 40))(*(_QWORD *)(v105 + 56), v127, v146 - v127);
LABEL_159:
  *(_QWORD *)(v105 + 40) = v120;
  *(_QWORD *)&v194[0].f64[0] = v107;
  v147 = *(_QWORD *)(v105 + 120);
  if (!v147)
    goto LABEL_215;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v147 + 48))(v147, v194);
  gm::operator*<double,4,4,4>(v194[0].f64, (double *)(v191 + 808), a3);
  v148 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v194[2]), v194[3]);
  v149 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v194[4]), v194[5]);
  v150 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v194[6]), v194[7]);
  v151 = *(_QWORD **)(v107 + 64);
  v152 = (_QWORD *)v151[2];
  v153 = v152[1];
  v154 = (float32x4_t *)v152[9];
  *v154 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v194[0]), v194[1]);
  v154[1] = v148;
  v154[2] = v149;
  v154[3] = v150;
  if (v152[8] > v153)
    v153 = v152[8];
  v152[7] = 0;
  v152[8] = v153;
  v151[5] = 0;
  v155 = *a7;
  v151[4] = *a7;
  v156 = *(_QWORD *)(v107 + 160);
  v157 = a7[1];
  if (v157)
  {
    v158 = (unint64_t *)(v157 + 8);
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
  }
  v160 = *(std::__shared_weak_count **)(v156 + 40);
  *(_QWORD *)(v156 + 32) = v155;
  *(_QWORD *)(v156 + 40) = v157;
  if (v160)
  {
    v161 = (unint64_t *)&v160->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = **(_QWORD ***)(v107 + 64);
  v164 = v163[1];
  v165 = v163[9];
  *(_DWORD *)v165 = *v189;
  *(_DWORD *)(v165 + 4) = v189[1];
  *(_DWORD *)(v165 + 8) = v189[2];
  *(_DWORD *)(v165 + 12) = v189[3];
  v166 = v163[8];
  if (v166 <= v164)
    v166 = v164;
  v163[7] = 0;
  *(float *)(v165 + 20) = a8;
  if (v166 > v164)
    v164 = v166;
  v163[8] = v164;
  md::LayoutContext::frameState(v190);
  v168 = *(_QWORD *)(*(_QWORD *)(v107 + 64) + 48);
  v169 = *(_QWORD *)(v168 + 8);
  **(float32x2_t **)(v168 + 72) = vcvt_f32_f64(v167[31]);
  if (*(_QWORD *)(v168 + 64) > v169)
    v169 = *(_QWORD *)(v168 + 64);
  *(_QWORD *)(v168 + 56) = 0;
  *(_QWORD *)(v168 + 64) = v169;
  v170 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v64 + 48) + 160));
  *((_QWORD *)v170 + 8) = v25;
  *((_QWORD *)v170 + 4) = v107;
  *((_QWORD *)v170 + 3) = *(_QWORD *)(*(_QWORD *)(v64 + 48) + 176);
  ggl::CommandBuffer::pushRenderItem(a6, v170);
  if (v199)
  {
    v172 = v196;
    v171 = v197;
    if (v197 != v196)
    {
      v173 = (_QWORD *)*((_QWORD *)&v195 + 1);
      v174 = v198;
      v175 = HIBYTE(v198);
      if ((_QWORD)v195 && *(_BYTE *)(*((_QWORD *)&v195 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v195 + 64))();
      if (v174 && !v175)
      {
        v177 = v173[7];
        v176 = v173[8];
        if (v176 == v177)
          v177 = v173[10] - v173[9];
        if (v172 < v177)
          v177 = v172;
        if (v176 <= v171)
          v176 = v171;
        if (v176 == v177)
          v176 = v177 + v173[10] - v173[9];
        v173[7] = v177;
        v173[8] = v176;
      }
    }
  }
  v178 = v201;
  if (v201)
  {
    v179 = (unint64_t *)&v201->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v206)
  {
    v182 = v203;
    v181 = v204;
    if (v204 != v203)
    {
      v183 = (_QWORD *)*((_QWORD *)&v202 + 1);
      v184 = v205;
      v185 = HIBYTE(v205);
      if ((_QWORD)v202 && *(_BYTE *)(*((_QWORD *)&v202 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v202 + 64))();
      if (v184 && !v185)
      {
        v187 = v183[7];
        v186 = v183[8];
        if (v186 == v187)
          v187 = v183[10] - v183[9];
        if (v182 < v187)
          v187 = v182;
        if (v186 <= v181)
          v186 = v181;
        if (v186 == v187)
          v186 = v187 + v183[10] - v183[9];
        v183[7] = v187;
        v183[8] = v186;
      }
    }
  }
}

void sub_19F7F3970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v31 - 176);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v31 - 160));
  _Unwind_Resume(a1);
}

uint64_t md::DebugRenderLayer::renderLines(uint64_t a1, _QWORD *a2, double *a3, _DWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  float32x4_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _DWORD *v64;
  ggl::RenderItem *v65;
  uint64_t result;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  float64x2_t v75[8];
  float32x4_t v76;
  unint64_t v77;
  unint64_t v78;
  __int16 v79;
  uint64_t v80;

  v12 = a1;
  v13 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v13)
    goto LABEL_24;
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v13 <= 0x1AF456233693CD46uLL)
      v15 = 0x1AF456233693CD46uLL % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & 0x1AF456233693CD46;
  }
  v16 = *(_QWORD **)(*a2 + 8 * v15);
  if (!v16)
    goto LABEL_24;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_24;
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v13 - 1;
    while (1)
    {
      v20 = v17[1];
      if (v20 == 0x1AF456233693CD46)
      {
        if (v17[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_24;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v19 = v17[1];
    if (v19 == 0x1AF456233693CD46)
      break;
    if (v19 >= *(_QWORD *)&v13)
      v19 %= *(_QWORD *)&v13;
    if (v19 != v15)
      goto LABEL_24;
LABEL_11:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_24;
  }
  if (v17[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v21 = v17[5];
  if (*(_QWORD *)(v21 + 8) == 0x1AF456233693CD46)
  {
    v22 = *(_QWORD *)(v21 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v22 = 0;
LABEL_25:
  v23 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 96));
  v25 = 0x5555555555555556 * ((a5[1] - *a5) >> 3);
  v26 = **(_QWORD **)(v23 + 64);
  v27 = *(_QWORD *)(v26 + 8) * v25;
  v28 = *(_QWORD *)(v26 + 72);
  v29 = *(_QWORD *)(v26 + 80) - v28;
  if (v27 != v29)
  {
    v74 = a4;
    v30 = v12;
    v31 = v22;
    v32 = a7;
    v33 = a3;
    v34 = a6;
    if (v27 <= v29)
    {
      if (v27 < v29)
        *(_QWORD *)(v26 + 80) = v28 + v27;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v26 + 72, v27 - v29);
    }
    v35 = *(std::__shared_weak_count **)(v26 + 32);
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    *(_QWORD *)(v26 + 120) = 0;
    *(_DWORD *)(v26 + 112) = 0;
    v38 = *(_QWORD *)(v26 + 80) - *(_QWORD *)(v26 + 72);
    *(_QWORD *)(v26 + 40) = 0;
    *(_QWORD *)(v26 + 48) = v38;
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = v38;
    v26 = **(_QWORD **)(v23 + 64);
    v27 = *(_QWORD *)(v26 + 8) * v25;
    a6 = v34;
    a3 = v33;
    a7 = v32;
    v22 = v31;
    v12 = v30;
    a4 = v74;
  }
  v76 = 0uLL;
  v39.i64[0] = 0;
  v39.i64[1] = v26;
  if (v27)
    v40 = *(_QWORD *)(v26 + 72);
  else
    v40 = 0;
  v76 = v39;
  v77 = 0;
  v78 = v27;
  v80 = v40;
  v79 = 1;
  v41 = *a5;
  v42 = a5[1] - *a5;
  if (v42)
  {
    v43 = v42 / 24;
    if (v43 <= 1)
      v43 = 1;
    v44 = v40 + 16;
    do
    {
      v45 = *(_QWORD *)v41;
      *(_DWORD *)(v44 - 8) = *(_DWORD *)(v41 + 8);
      *(_QWORD *)(v44 - 16) = v45;
      *(_DWORD *)(v44 - 4) = 1065353216;
      v39.i64[0] = *(_QWORD *)v41;
      v39.i32[2] = *(_DWORD *)(v41 + 8);
      v24.i64[0] = *(_QWORD *)(v41 + 12);
      v24.i32[2] = *(_DWORD *)(v41 + 20);
      v39 = vaddq_f32(v24, v39);
      *(_DWORD *)(v44 + 8) = v39.i32[2];
      *(_QWORD *)v44 = v39.i64[0];
      *(_DWORD *)(v44 + 12) = 1065353216;
      v44 += 32;
      v41 += 24;
      --v43;
    }
    while (v43);
  }
  v46 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 112));
  gm::operator*<double,4,4,4>(v75[0].f64, (double *)(v22 + 808), a3);
  v47 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v75[2]), v75[3]);
  v48 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v75[4]), v75[5]);
  v49 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v75[6]), v75[7]);
  v50 = *(_QWORD **)(v46 + 64);
  v51 = (_QWORD *)v50[2];
  v52 = v51[1];
  v53 = (float32x4_t *)v51[9];
  *v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v75[0]), v75[1]);
  v53[1] = v47;
  v53[2] = v48;
  v53[3] = v49;
  if (v51[8] > v52)
    v52 = v51[8];
  v51[7] = 0;
  v51[8] = v52;
  v50[5] = 0;
  v54 = *a7;
  v50[4] = *a7;
  v55 = *(_QWORD *)(v46 + 160);
  v56 = a7[1];
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = *(std::__shared_weak_count **)(v55 + 40);
  *(_QWORD *)(v55 + 32) = v54;
  *(_QWORD *)(v55 + 40) = v56;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = **(_QWORD ***)(v46 + 64);
  v63 = v62[1];
  v64 = (_DWORD *)v62[9];
  *v64 = *a4;
  v64[1] = a4[1];
  v64[2] = a4[2];
  v64[3] = a4[3];
  if (v62[8] > v63)
    v63 = v62[8];
  v62[7] = 0;
  v62[8] = v63;
  v65 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 160));
  *((_QWORD *)v65 + 8) = v23;
  *((_QWORD *)v65 + 4) = v46;
  *((_QWORD *)v65 + 3) = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 168);
  result = ggl::CommandBuffer::pushRenderItem(a6, v65);
  if (v80)
  {
    v68 = v77;
    v67 = v78;
    if (v78 != v77)
    {
      v69 = (_QWORD *)v76.i64[1];
      result = v76.i64[0];
      v70 = v79;
      v71 = HIBYTE(v79);
      if (v76.i64[0] && *(_BYTE *)(v76.i64[1] + 17) != 2)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v76.i64[0] + 64))();
      if (v70 && !v71)
      {
        v73 = v69[7];
        v72 = v69[8];
        if (v72 == v73)
          v73 = v69[10] - v69[9];
        if (v68 < v73)
          v73 = v68;
        if (v72 <= v67)
          v72 = v67;
        if (v72 == v73)
          v72 = v73 + v69[10] - v69[9];
        v69[7] = v73;
        v69[8] = v72;
      }
    }
  }
  return result;
}

void sub_19F7F3E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a27);
  _Unwind_Resume(a1);
}

uint64_t md::DebugLayerRenderResources::unitBoxMesh(md::DebugLayerRenderResources *this)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count_vtbl *v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  uint64_t v40[2];
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;

  if (!*((_QWORD *)this + 38))
  {
    v3 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
    ggl::BufferData::BufferData((uint64_t)&v3[1], 16, 0, 0, 6, 8);
    v3[9].__shared_weak_owners_ = (uint64_t)"/Debug/UnitBox/VertexData";
    v3[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4Reflection;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7520;
    v3[9].__shared_owners_ = (uint64_t)&unk_1E42B7540;
    v5 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v5->__shared_owners_ = 0;
    v6 = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    ggl::BufferData::BufferData((uint64_t)&v5[1], 2, 1, 0, 6, 36);
    LODWORD(v5[10].__vftable) = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v5[1].__shared_owners_ = 2;
    v5[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v5[9].__shared_weak_owners_ = (uint64_t)"/Debug/UnitBox/IndexData";
    v39 = v5;
    *(_QWORD *)&v7 = 0;
    *(_QWORD *)&v8 = 0;
    *((_QWORD *)&v8 + 1) = v3 + 1;
    v36 = v8;
    v37 = 8 * v3[1].__shared_owners_;
    v38 = v3[4].__vftable;
    *(_OWORD *)&v38->~__shared_weak_count = xmmword_19FFB34C0;
    *(_OWORD *)&v38->__on_zero_shared = xmmword_19FFB2D90;
    *(_OWORD *)&v38->__on_zero_shared_weak = xmmword_19FFB3970;
    *(_OWORD *)&v38[1].~__shared_weak_count_0 = xmmword_19FFB3950;
    *(_OWORD *)&v38[1].__get_deleter = xmmword_19FFB3480;
    *(_OWORD *)&v38[2].~__shared_weak_count = xmmword_19FFB4810;
    __asm { FMOV            V2.4S, #1.0 }
    *(_OWORD *)&v38[2].__on_zero_shared = xmmword_19FFB3B40;
    *(_OWORD *)&v38[2].__on_zero_shared_weak = _Q2;
    *((_QWORD *)&v7 + 1) = v5 + 1;
    v34 = v7;
    v35 = v5[4].__vftable;
    *(_OWORD *)&v35->~__shared_weak_count = xmmword_19FFB4A40;
    *(_OWORD *)&v35->__on_zero_shared = xmmword_19FFB4A50;
    *(_OWORD *)&v35->__on_zero_shared_weak = xmmword_19FFB4A60;
    *(_OWORD *)&v35[1].~__shared_weak_count_0 = xmmword_19FFB4A70;
    v35[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))0x4000000050005;
    v14 = operator new(0xA8uLL);
    v15 = v14;
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E42DE5E0;
    v16 = v14 + 3;
    v41 = v3 + 1;
    v42 = v3;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v40[0] = (uint64_t)&v5[1];
    v40[1] = (uint64_t)v5;
    do
      v18 = __ldxr(v6);
    while (__stxr(v18 + 1, v6));
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh((uint64_t)(v14 + 3), (uint64_t)"/Debug/UnitBox/Mesh", (uint64_t *)&v41, v40);
    do
      v19 = __ldaxr(v6);
    while (__stlxr(v19 - 1, v6));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v20 = v42;
    if (v42)
    {
      v21 = (unint64_t *)&v42->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 38) = v16;
    *((_QWORD *)this + 39) = v15;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v35)
    {
      if ((_QWORD)v34 && *(_BYTE *)(*((_QWORD *)&v34 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v34 + 64))();
      v27 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 56);
      v26 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 64);
      if (v26 == v27)
        v27 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v34 + 1) + 72);
      if (v27)
        v27 = 0;
      if (v26 <= 0x48)
        v26 = 72;
      *(_QWORD *)(*((_QWORD *)&v34 + 1) + 56) = v27;
      *(_QWORD *)(*((_QWORD *)&v34 + 1) + 64) = v26;
    }
    if (v38 && v37)
    {
      if ((_QWORD)v36 && *(_BYTE *)(*((_QWORD *)&v36 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v36 + 64))();
      v29 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 56);
      v28 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 64);
      if (v28 == v29)
        v29 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v36 + 1) + 72);
      if (v29)
        v29 = 0;
      if (v28 <= v37)
        v28 = v37;
      if (v28 == v29)
        v28 = v29 + *(_QWORD *)(*((_QWORD *)&v36 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v36 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v36 + 1) + 56) = v29;
      *(_QWORD *)(*((_QWORD *)&v36 + 1) + 64) = v28;
    }
    if (v39)
    {
      v30 = (unint64_t *)&v39->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v3)
    {
      v32 = (unint64_t *)&v3->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  return (uint64_t)this + 304;
}

void sub_19F7F434C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void md::DebugRenderLayer::renderInstancedMesh(uint64_t a1, _QWORD *a2, double *a3, _DWORD *a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  const void *v10;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  unint64_t shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t shared_weak_owners;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  _DWORD *v102;
  ggl::RenderItem *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  float64x2_t v111[8];
  uint64_t v112;
  std::__shared_weak_count *v113;

  v10 = *(const void **)a7;
  v9 = *(_QWORD *)(a7 + 8);
  if (*(_QWORD *)a7 == v9)
    return;
  v15 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v15)
    goto LABEL_25;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v15 <= 0x1AF456233693CD46uLL)
      v17 = 0x1AF456233693CD46uLL % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0x1AF456233693CD46;
  }
  v18 = *(_QWORD **)(*a2 + 8 * v17);
  if (!v18)
    goto LABEL_25;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_25;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v22 = v19[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v19[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_25;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v21 == 0x1AF456233693CD46)
      break;
    if (v21 >= *(_QWORD *)&v15)
      v21 %= *(_QWORD *)&v15;
    if (v21 != v17)
      goto LABEL_25;
LABEL_12:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_25;
  }
  if (v19[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v23 = v19[5];
  if (*(_QWORD *)(v23 + 8) == 0x1AF456233693CD46)
  {
    v24 = *(_QWORD *)(v23 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v24 = 0;
LABEL_26:
  v25 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF3E0;
  v26 = ggl::BufferData::BufferData((uint64_t)&v25[1], qword_1EE55CB80, 3, 1, 6, (v9 - (uint64_t)v10) >> 6);
  v27 = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6EC8;
  v112 = v26;
  v113 = v25;
  shared_owners = v25[1].__shared_owners_;
  v29 = (unint64_t)v25[3].__vftable - v25[2].__shared_weak_owners_;
  v30 = v29 / shared_owners * shared_owners;
  v31 = v29 % shared_owners;
  if (v29 != v29 % shared_owners)
    v27 = v25[4].__vftable;
  memcpy(v27, *(const void **)a7, *(_QWORD *)(a7 + 8) - *(_QWORD *)a7);
  if (v27 && v29 != v31)
  {
    shared_weak_owners = v25[3].__shared_weak_owners_;
    if (shared_weak_owners <= v30)
      shared_weak_owners = v30;
    v25[3].__shared_owners_ = 0;
    v25[3].__shared_weak_owners_ = shared_weak_owners;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 128);
  v34 = *(_QWORD *)(v33 + 8);
  if (v34 == *(_QWORD *)v33)
  {
    v46 = *(_QWORD *)(v33 + 88);
    if (!v46)
    {
LABEL_113:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    v35 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
    v36 = *(_QWORD **)(v33 + 40);
    v47 = *(_QWORD *)(v33 + 48);
    if ((unint64_t)v36 < v47)
    {
LABEL_46:
      if (v36)
        *v36 = v35;
      v48 = v36 + 1;
      goto LABEL_84;
    }
    v49 = *(_QWORD *)(v33 + 32);
    v50 = ((uint64_t)v36 - v49) >> 3;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61)
LABEL_114:
      abort();
    v52 = v47 - v49;
    if (v52 >> 2 > v51)
      v51 = v52 >> 2;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v33 + 56) + 16))(*(_QWORD *)(v33 + 56), 8 * v53, 8);
      v44 = (_QWORD *)(v54 + 8 * v50);
      v45 = v54 + 8 * v53;
      if (v54)
        *v44 = v35;
    }
    else
    {
      v45 = 0;
      v44 = (_QWORD *)(8 * v50);
    }
    v48 = v44 + 1;
    v64 = *(_QWORD *)(v33 + 32);
    v55 = *(_QWORD *)(v33 + 40);
    if (v55 == v64)
      goto LABEL_82;
    v65 = v55 - v64 - 8;
    if (v65 < 0x38)
    {
      v67 = *(_QWORD *)(v33 + 40);
    }
    else if ((unint64_t)(v55 - (_QWORD)v44) < 0x20)
    {
      v67 = *(_QWORD *)(v33 + 40);
    }
    else
    {
      v66 = (v65 >> 3) + 1;
      v67 = v55 - 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
      v68 = v44 - 2;
      v69 = (__int128 *)(v55 - 16);
      v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v71 = *v69;
        *(v68 - 1) = *(v69 - 1);
        *v68 = v71;
        v68 -= 2;
        v69 -= 2;
        v70 -= 4;
      }
      while (v70);
      v44 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
      if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_81;
    }
    do
    {
      v73 = *(_QWORD *)(v67 - 8);
      v67 -= 8;
      *--v44 = v73;
    }
    while (v67 != v64);
LABEL_81:
    v55 = *(_QWORD *)(v33 + 32);
    goto LABEL_82;
  }
  v35 = *(_QWORD **)(v34 - 8);
  *(_QWORD *)(v33 + 8) = v34 - 8;
  v36 = *(_QWORD **)(v33 + 40);
  v37 = *(_QWORD *)(v33 + 48);
  if ((unint64_t)v36 < v37)
    goto LABEL_46;
  v38 = *(_QWORD *)(v33 + 32);
  v39 = ((uint64_t)v36 - v38) >> 3;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61)
    goto LABEL_114;
  v41 = v37 - v38;
  if (v41 >> 2 > v40)
    v40 = v41 >> 2;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
    v42 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (v42)
  {
    v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v33 + 56) + 16))(*(_QWORD *)(v33 + 56), 8 * v42, 8);
    v44 = (_QWORD *)(v43 + 8 * v39);
    v45 = v43 + 8 * v42;
    if (v43)
      *v44 = v35;
  }
  else
  {
    v45 = 0;
    v44 = (_QWORD *)(8 * v39);
  }
  v48 = v44 + 1;
  v56 = *(_QWORD *)(v33 + 32);
  v55 = *(_QWORD *)(v33 + 40);
  if (v55 != v56)
  {
    v57 = v55 - v56 - 8;
    if (v57 < 0x38)
    {
      v59 = *(_QWORD *)(v33 + 40);
    }
    else if ((unint64_t)(v55 - (_QWORD)v44) < 0x20)
    {
      v59 = *(_QWORD *)(v33 + 40);
    }
    else
    {
      v58 = (v57 >> 3) + 1;
      v59 = v55 - 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v60 = v44 - 2;
      v61 = (__int128 *)(v55 - 16);
      v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63 = *v61;
        *(v60 - 1) = *(v61 - 1);
        *v60 = v63;
        v60 -= 2;
        v61 -= 2;
        v62 -= 4;
      }
      while (v62);
      v44 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
      if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_81;
    }
    do
    {
      v72 = *(_QWORD *)(v59 - 8);
      v59 -= 8;
      *--v44 = v72;
    }
    while (v59 != v56);
    goto LABEL_81;
  }
LABEL_82:
  *(_QWORD *)(v33 + 32) = v44;
  *(_QWORD *)(v33 + 40) = v48;
  v74 = *(_QWORD *)(v33 + 48);
  *(_QWORD *)(v33 + 48) = v45;
  if (v55)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v33 + 56) + 40))(*(_QWORD *)(v33 + 56), v55, v74 - v55);
LABEL_84:
  *(_QWORD *)(v33 + 40) = v48;
  *(_QWORD *)&v111[0].f64[0] = v35;
  v75 = *(_QWORD *)(v33 + 120);
  if (!v75)
    goto LABEL_113;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v75 + 48))(v75, v111);
  gm::operator*<double,4,4,4>(v111[0].f64, (double *)(v24 + 808), a3);
  v76 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v111[2]), v111[3]);
  v77 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v111[4]), v111[5]);
  v78 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v111[6]), v111[7]);
  v79 = (_QWORD *)v35[8];
  v80 = (_QWORD *)v79[2];
  v81 = v80[1];
  v82 = (float32x4_t *)v80[9];
  *v82 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v111[0]), v111[1]);
  v82[1] = v76;
  v82[2] = v77;
  v82[3] = v78;
  if (v80[8] > v81)
    v81 = v80[8];
  v80[7] = 0;
  v80[8] = v81;
  v79[5] = 0;
  v83 = *a9;
  v79[4] = *a9;
  v84 = v35[20];
  v85 = a9[1];
  if (v85)
  {
    v86 = (unint64_t *)(v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  v88 = *(std::__shared_weak_count **)(v84 + 40);
  *(_QWORD *)(v84 + 32) = v83;
  *(_QWORD *)(v84 + 40) = v85;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (uint64_t *)v35[4];
  v92 = v112;
  *v91 = v112;
  v91[1] = 0;
  v93 = (uint64_t *)v35[16];
  v94 = v113;
  if (v113)
  {
    v95 = (unint64_t *)&v113->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v97 = (std::__shared_weak_count *)v93[1];
  *v93 = v92;
  v93[1] = (uint64_t)v94;
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(_QWORD **)v35[8];
  v101 = v100[1];
  v102 = (_DWORD *)v100[9];
  *v102 = *a4;
  v102[1] = a4[1];
  v102[2] = a4[2];
  v102[3] = a4[3];
  if (v100[8] > v101)
    v101 = v100[8];
  v100[7] = 0;
  v100[8] = v101;
  v103 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160));
  *((_QWORD *)v103 + 8) = *a8;
  *((_QWORD *)v103 + 4) = v35;
  v104 = 208;
  if (a5)
    v104 = 216;
  *((_QWORD *)v103 + 3) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v104);
  *((_QWORD *)v103 + 13) = (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 6;
  ggl::CommandBuffer::pushRenderItem(a6, v103);
  v105 = v113;
  if (v113)
  {
    v106 = (unint64_t *)&v113->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_19F7F4A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

char *md::DebugLayerRenderResources::unitQuadMesh(md::DebugLayerRenderResources *this)
{
  char *v1;
  _QWORD *v3;
  ggl::CommonMesh::Pos4Mesh *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = (char *)this + 288;
  if (!*((_QWORD *)this + 36))
  {
    v3 = operator new(0xA8uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_1E42DE5E0;
    v4 = ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v3 + 3), "/DebugSharedUnitQuadMesh");
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 36) = v4;
    *((_QWORD *)this + 37) = v3;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = **(_QWORD **)(*(_QWORD *)v1 + 64);
    v9 = *(_QWORD *)(v8 + 8);
    v10 = 6 * v9;
    v11 = *(_QWORD *)(v8 + 72);
    v12 = *(_QWORD *)(v8 + 80) - v11;
    if (6 * v9 != v12)
    {
      if (6 * v9 <= v12)
      {
        if (v10 < v12)
          *(_QWORD *)(v8 + 80) = v11 + v10;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v8 + 72, 6 * v9 - v12);
      }
      v13 = *(std::__shared_weak_count **)(v8 + 32);
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *(_QWORD *)(v8 + 120) = 0;
      *(_DWORD *)(v8 + 112) = 0;
      v16 = *(_QWORD *)(v8 + 80) - *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = v16;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = v16;
      v8 = **(_QWORD **)(*(_QWORD *)v1 + 64);
      v9 = *(_QWORD *)(v8 + 8);
    }
    v18 = *(_QWORD *)(v8 + 64);
    v17 = *(_OWORD **)(v8 + 72);
    *v17 = xmmword_19FFB34C0;
    v17[1] = xmmword_19FFB2D90;
    v17[2] = xmmword_19FFB3950;
    v17[3] = xmmword_19FFB3950;
    v17[4] = xmmword_19FFB3970;
    v17[5] = xmmword_19FFB34C0;
    v19 = 5 * v9;
    if (v18 > v19)
      v19 = v18;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = v19;
  }
  return v1;
}

uint64_t md::DebugLayerRenderResources::icoSphere(md::DebugLayerRenderResources *this)
{
  _BYTE *v2;
  _BYTE *v3;
  float *v4;
  float *v5;
  std::__shared_weak_count *v6;
  void *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int16x8_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const float *v26;
  __int16 *v27;
  uint64_t v28;
  const float *v29;
  int16x8_t v30;
  int16x8_t v31;
  uint64_t v32;
  int16x4_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v52;
  float *p_get_deleter;
  float *v59;
  uint64_t v60;
  const float *v61;
  float *v62;
  int16x8_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  std::__shared_weak_count_vtbl *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  void *__p;
  _BYTE *v74;
  uint64_t v75;
  float *v76;
  float *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  int v81;
  float32x4x3_t v82;
  float32x4x3_t v83;
  int16x8x3_t v84;
  float32x4x4_t v85;

  if (*((_QWORD *)this + 44))
    return (uint64_t)this + 352;
  v79 = 0u;
  v80 = 0u;
  v81 = 1065353216;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  __p = 0;
  v74 = 0;
  v75 = 0;
  md::GeometryLogic::createIcoSphere(&v76, &__p, 1);
  v3 = __p;
  v2 = v74;
  v5 = v76;
  v4 = v77;
  v6 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
  ggl::BufferData::BufferData((uint64_t)&v6[1], 16, 0, 0, 6, 0xAAAAAAAAAAAAAAABLL * (v4 - v5));
  v6[9].__shared_weak_owners_ = (uint64_t)"/Debug/IcoSphere/VertexData";
  v6[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4Reflection;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7520;
  v6[9].__shared_owners_ = (uint64_t)&unk_1E42B7540;
  v71 = v6 + 1;
  v72 = v6;
  v7 = operator new(0xF8uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E42DF1E8;
  v8 = ggl::BufferData::BufferData((uint64_t)v7 + 24, 2, 1, 0, 6, (v2 - v3) >> 2);
  *((_DWORD *)v7 + 60) = 0;
  *((_QWORD *)v7 + 3) = &off_1E42B6B88;
  *((_QWORD *)v7 + 4) = 2;
  *((_QWORD *)v7 + 28) = &unk_1E42B6BA8;
  *((_QWORD *)v7 + 29) = "/Debug/IcoSphere/IndexData";
  v69 = v8;
  v70 = (std::__shared_weak_count *)v7;
  v10 = v76;
  v9 = v77;
  *(_QWORD *)&v11 = 0;
  if (0xAAAAAAAAAAAAAAABLL * (v77 - v76) * v6[1].__shared_owners_)
    v12 = v6[4].__vftable;
  else
    v12 = 0;
  *((_QWORD *)&v11 + 1) = v6 + 1;
  v66 = v11;
  v67 = 0xAAAAAAAAAAAAAAABLL * (v77 - v76) * v6[1].__shared_owners_;
  v68 = v12;
  if (v76 != v77)
  {
    v13 = (char *)v77 - (char *)v76 - 12;
    if (v13 <= 0x83
      || (v14 = v13 / 0xC, v12 < (std::__shared_weak_count_vtbl *)&v76[3 * v14 + 3])
      && v76 < (float *)&v12->__on_zero_shared + 4 * v14)
    {
      v15 = 0;
      goto LABEL_10;
    }
    v52 = v14 + 1;
    v15 = (v14 + 1) & 0x3FFFFFFFFFFFFFF8;
    p_get_deleter = (float *)&v12[1].__get_deleter;
    __asm { FMOV            V3.4S, #1.0 }
    v59 = v76;
    v60 = v15;
    do
    {
      v61 = v59;
      v82 = vld3q_f32(v61);
      v61 += 12;
      *(float32x4x3_t *)v85.val[0].f32 = vld3q_f32(v61);
      v85.val[3] = _Q3;
      v62 = p_get_deleter - 16;
      vst4q_f32(v62, *(float32x4x4_t *)(&_Q3 - 3));
      vst4q_f32(p_get_deleter, v85);
      p_get_deleter += 32;
      v59 += 24;
      v60 -= 8;
    }
    while (v60);
    if (v52 != v15)
    {
      v10 += 3 * v15;
LABEL_10:
      v16 = (float *)((char *)v12 + 16 * v15);
      do
      {
        v17 = *(_QWORD *)v10;
        v16[2] = v10[2];
        *(_QWORD *)v16 = v17;
        v16[3] = 1.0;
        v10 += 3;
        v16 += 4;
      }
      while (v10 != v9);
    }
  }
  v19 = __p;
  v18 = v74;
  v20.i64[0] = 0;
  v20.i64[1] = v8;
  if (v74 == __p)
  {
    v63 = v20;
    v64 = (v74 - (_BYTE *)__p) >> 1;
    v65 = 0;
  }
  else
  {
    v21 = *((_QWORD *)v7 + 12);
    v63 = v20;
    v64 = (v74 - (_BYTE *)__p) >> 1;
    v65 = v21;
    v22 = v74 - (_BYTE *)__p - 12;
    if (v22 > 0x53)
    {
      v24 = v22 / 0xC + 1;
      v25 = v24 & 0x3FFFFFFFFFFFFFF8;
      v26 = (const float *)__p;
      v27 = (__int16 *)*((_QWORD *)v7 + 12);
      v28 = v24 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v29 = v26;
        *(float32x4x3_t *)v20.i8 = vld3q_f32(v29);
        v29 += 12;
        v83 = vld3q_f32(v29);
        v84.val[0] = vuzp1q_s16(v20, (int16x8_t)v83.val[0]);
        v84.val[1] = vuzp1q_s16(v30, (int16x8_t)v83.val[1]);
        v84.val[2] = vuzp1q_s16(v31, (int16x8_t)v83.val[2]);
        vst3q_s16(v27, v84);
        v27 += 24;
        v26 += 24;
        v28 -= 8;
      }
      while (v28);
      if (v24 == v25)
        goto LABEL_22;
      v23 = 3 * v25;
      v19 += 3 * (v24 & 0x3FFFFFFFFFFFFFF8);
    }
    else
    {
      v23 = 0;
    }
    v32 = v21 + 2 * v23;
    do
    {
      v20.i64[0] = *(_QWORD *)v19;
      v20.i32[2] = v19[2];
      v33 = vmovn_s32((int32x4_t)v20);
      *(_WORD *)(v32 + 4) = v33.i16[2];
      *(_DWORD *)v32 = v33.i32[0];
      v32 += 6;
      v19 += 3;
    }
    while (v19 != v18);
  }
LABEL_22:
  v34 = operator new(0xA8uLL);
  v34[1] = 0;
  v34[2] = 0;
  *v34 = &off_1E42DE5E0;
  v35 = std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[22],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::CommonMesh::Pos4Mesh*>((uint64_t)(v34 + 3), (uint64_t)"/Debug/IcoSphere/Mesh", (uint64_t)&v6[1], v6, &v69);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 44) = v35;
  *((_QWORD *)this + 45) = v34;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v65 && v64)
  {
    if (v63.i64[0] && *(_BYTE *)(v63.i64[1] + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v63.i64[0] + 64))();
    v40 = *(_QWORD *)(v63.i64[1] + 56);
    v39 = *(_QWORD *)(v63.i64[1] + 64);
    if (v39 == v40)
      v40 = *(_QWORD *)(v63.i64[1] + 80) - *(_QWORD *)(v63.i64[1] + 72);
    if (v40)
      v40 = 0;
    if (v39 <= v64)
      v39 = v64;
    if (v39 == v40)
      v39 = v40 + *(_QWORD *)(v63.i64[1] + 80) - *(_QWORD *)(v63.i64[1] + 72);
    *(_QWORD *)(v63.i64[1] + 56) = v40;
    *(_QWORD *)(v63.i64[1] + 64) = v39;
  }
  if (v68 && v67)
  {
    if ((_QWORD)v66 && *(_BYTE *)(*((_QWORD *)&v66 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v66 + 64))();
    v42 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 56);
    v41 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 64);
    if (v41 == v42)
      v42 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v66 + 1) + 72);
    if (v42)
      v42 = 0;
    if (v41 <= v67)
      v41 = v67;
    if (v41 == v42)
      v41 = v42 + *(_QWORD *)(*((_QWORD *)&v66 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v66 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v66 + 1) + 56) = v42;
    *(_QWORD *)(*((_QWORD *)&v66 + 1) + 64) = v41;
  }
  v43 = v70;
  if (v70)
  {
    v44 = (unint64_t *)&v70->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v72;
  if (v72)
  {
    v47 = (unint64_t *)&v72->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  v49 = (_QWORD *)v80;
  if ((_QWORD)v80)
  {
    do
    {
      v50 = (_QWORD *)*v49;
      operator delete(v49);
      v49 = v50;
    }
    while (v50);
  }
  if ((_QWORD)v79)
    operator delete((void *)v79);
  return (uint64_t)this + 352;
}

void sub_19F7F51B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;
  void *v29;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v29);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  v30 = *(void **)(v27 - 136);
  if (v30)
  {
    *(_QWORD *)(v27 - 128) = v30;
    operator delete(v30);
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v27 - 112);
  _Unwind_Resume(a1);
}

void md::DebugRenderLayer::renderQuadTile(uint64_t a1, md::LayoutContext *a2, QuadTile *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  float32x2_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  float64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _DWORD *v60;
  ggl::RenderItem *v61;
  id v62;
  int8x16_t *v63;
  int32x2_t v64;
  float32x2_t v65;
  float32x2_t v71;
  float64_t v72;
  float64x2_t v73;
  int16x8_t v75;
  size_t v76;
  double v77;
  int32x2_t v78;
  float v79;
  id v80;
  double v81[16];
  float64x2_t v82;
  double v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90;
  double v91;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d.%d.%d\n%s"), a3->_xIdx, a3->_yIdx, a3->_level, a7);
  v80 = (id)objc_claimAutoreleasedReturnValue();
  v13 = (uint64_t *)*((_QWORD *)a2 + 1);
  v14 = (int8x8_t)v13[1];
  if (!*(_QWORD *)&v14)
  {
    v17 = 0;
    goto LABEL_48;
  }
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v14 <= 0x1AF456233693CD46uLL)
      v16 = 0x1AF456233693CD46uLL % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x1AF456233693CD46;
  }
  v18 = *v13;
  v19 = *(_QWORD **)(v18 + 8 * v16);
  if (!v19)
    goto LABEL_25;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_25;
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v22 & (*(_QWORD *)&v14 - 1)) != v16)
      {
        goto LABEL_25;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x1AF456233693CD46)
      break;
    if (v21 >= *(_QWORD *)&v14)
      v21 %= *(_QWORD *)&v14;
    if (v21 != v16)
      goto LABEL_25;
LABEL_12:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_25;
  }
  if (v20[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) == 0x1AF456233693CD46)
  {
    v17 = *(_QWORD *)(v23 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v17 = 0;
LABEL_26:
  if (v15.u32[0] > 1uLL)
  {
    v24 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v14 <= 0x3070CB6B3C7F21D3uLL)
      v24 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v14;
  }
  else
  {
    v24 = (*(_QWORD *)&v14 - 1) & 0x3070CB6B3C7F21D3;
  }
  v25 = *(_QWORD **)(v18 + 8 * v24);
  if (!v25)
    goto LABEL_48;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_48;
  if (v15.u32[0] < 2uLL)
  {
    v27 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v29 = v26[1];
      if (v29 == 0x3070CB6B3C7F21D3)
      {
        if (v26[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v29 & v27) != v24)
      {
        goto LABEL_48;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v28 = v26[1];
    if (v28 != 0x3070CB6B3C7F21D3)
    {
      if (v28 >= *(_QWORD *)&v14)
        v28 %= *(_QWORD *)&v14;
      if (v28 != v24)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v26[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v30 = v26[5];
  if (*(_QWORD *)(v30 + 8) == 0x3070CB6B3C7F21D3)
  {
    v31 = *(uint64_t **)(v30 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v31 = 0;
LABEL_49:
  v32 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 112));
  md::LayoutContext::frameState(a2);
  md::GeometryLogic::tileMatrix((md::GeometryLogic *)v81, *(unsigned __int8 *)(v33 + 128) - 1 < 3, a3, 0.0, v34);
  gm::operator*<double,4,4,4>(v82.f64, (double *)(v17 + 808), v81);
  v35 = vcvt_f32_f64(v82);
  v36 = v83;
  v37 = v84;
  v38 = vcvt_f32_f64(v85);
  v39 = vcvt_f32_f64(v89);
  v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v86), v87);
  v41 = v90;
  v42 = v91;
  v43 = vcvt_f32_f64(v88);
  v44 = *(_QWORD **)(*(_QWORD *)(v32 + 64) + 16);
  v45 = v44[1];
  v46 = v44[9];
  *(float32x2_t *)v46 = v35;
  *(float *)(v46 + 8) = v36;
  *(float *)(v46 + 12) = v37;
  *(float32x2_t *)(v46 + 16) = v38;
  v79 = v40.f32[1];
  *(float32x4_t *)(v46 + 24) = v40;
  *(float32x2_t *)(v46 + 40) = v43;
  *(float32x2_t *)(v46 + 48) = v39;
  *(float *)(v46 + 56) = v41;
  *(float *)(v46 + 60) = v42;
  if (v44[8] > v45)
    v45 = v44[8];
  v44[7] = 0;
  v44[8] = v45;
  md::GeometryContext::transformConstantData(v82.f64, v31, &a3->_type, *(unsigned __int8 *)(v17 + 3776), 0.0, 0.0);
  v47 = *(_QWORD *)(v32 + 64);
  v48 = v82;
  *(float64_t *)(v47 + 32) = v82.f64[0];
  *(_QWORD *)(v47 + 40) = 0;
  v49 = *(_QWORD *)(v32 + 160);
  if (*(_QWORD *)&v48.f64[1])
  {
    v50 = (unint64_t *)(*(_QWORD *)&v48.f64[1] + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(std::__shared_weak_count **)(v49 + 40);
  *(float64x2_t *)(v49 + 32) = v48;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v82.f64[1];
  if (*(_QWORD *)&v82.f64[1])
  {
    v56 = (unint64_t *)(*(_QWORD *)&v82.f64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v55 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v55));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v55);
    }
  }
  v58 = **(_QWORD ***)(v32 + 64);
  v59 = v58[1];
  v60 = (_DWORD *)v58[9];
  *v60 = a4->i32[0];
  v60[1] = a4->i32[1];
  v60[2] = a4->i32[2];
  v60[3] = a4->i32[3];
  if (v58[8] > v59)
    v59 = v58[8];
  v58[7] = 0;
  v58[8] = v59;
  v61 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160));
  *((_QWORD *)v61 + 8) = *(_QWORD *)md::DebugLayerRenderResources::unitRectMesh(*(md::DebugLayerRenderResources **)(a1 + 48));
  *((_QWORD *)v61 + 4) = v32;
  *((_QWORD *)v61 + 3) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 168);
  ggl::CommandBuffer::pushRenderItem(a5, v61);
  v62 = objc_retainAutorelease(v80);
  v63 = (int8x16_t *)objc_msgSend(v62, "UTF8String");
  objc_msgSend(*(id *)a2, "sizeInPixels");
  *(float *)&v64.i32[1] = v79;
  *(float *)v64.i32 = v42 + (float)((float)(v79 + v37) * 0.5);
  v65 = vdiv_f32(vmla_f32(v39, (float32x2_t)0x3F0000003F000000, vadd_f32(v38, v35)), (float32x2_t)vdup_lane_s32(v64, 0));
  __asm { FMOV            V3.2S, #1.0 }
  v71.i32[0] = vadd_f32(v65, _D3).u32[0];
  v71.i32[1] = vsub_f32(_D3, v65).i32[1];
  v73.f64[1] = v72;
  __asm { FMOV            V1.2D, #0.5 }
  *(float32x2_t *)&v73.f64[0] = vcvt_f32_f64(vmulq_f64(vmulq_f64(v73, _Q1), vcvtq_f64_f32(v71)));
  v75 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*a4, (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v75.i8 = vmovn_s32((int32x4_t)v75);
  *(_DWORD *)(a6 + 96) = vmovn_s16(v75).u32[0];
  *(float64_t *)(a6 + 8) = v73.f64[0];
  *(_QWORD *)(a6 + 40) = 0x100000001;
  v76 = strlen(v63->i8);
  ggl::DebugConsole::drawString(a6, v63, v76, v77, v78);

}

void sub_19F7F577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void md::DebugRenderLayer::renderSolidQuadTile(uint64_t a1, md::LayoutContext *a2, QuadTile *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v13;
  uint64_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float32x2_t v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x2_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  float64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _DWORD *v62;
  ggl::RenderItem *v63;
  id v64;
  int8x16_t *v65;
  int32x2_t v66;
  float32x2_t v67;
  float32x2_t v73;
  float64_t v74;
  float64x2_t v75;
  int16x8_t v77;
  size_t v78;
  double v79;
  int32x2_t v80;
  float v81;
  double v82[16];
  float64x2_t v83;
  double v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  double v92;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d.%d.%d\n%s"), a3->_xIdx, a3->_yIdx, a3->_level, a7);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (uint64_t *)*((_QWORD *)a2 + 1);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
  {
    v18 = 0;
    goto LABEL_48;
  }
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v15 <= 0x1AF456233693CD46uLL)
      v17 = 0x1AF456233693CD46uLL % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0x1AF456233693CD46;
  }
  v19 = *v14;
  v20 = *(_QWORD **)(v19 + 8 * v17);
  if (!v20)
    goto LABEL_25;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_25;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v21[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v23 & (*(_QWORD *)&v15 - 1)) != v17)
      {
        goto LABEL_25;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v22 = v21[1];
    if (v22 == 0x1AF456233693CD46)
      break;
    if (v22 >= *(_QWORD *)&v15)
      v22 %= *(_QWORD *)&v15;
    if (v22 != v17)
      goto LABEL_25;
LABEL_12:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_25;
  }
  if (v21[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x1AF456233693CD46)
  {
    v18 = *(_QWORD *)(v24 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v18 = 0;
LABEL_26:
  if (v16.u32[0] > 1uLL)
  {
    v25 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v15 <= 0x3070CB6B3C7F21D3uLL)
      v25 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v15;
  }
  else
  {
    v25 = (*(_QWORD *)&v15 - 1) & 0x3070CB6B3C7F21D3;
  }
  v26 = *(_QWORD **)(v19 + 8 * v25);
  if (!v26)
    goto LABEL_48;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_48;
  if (v16.u32[0] < 2uLL)
  {
    v28 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v30 = v27[1];
      if (v30 == 0x3070CB6B3C7F21D3)
      {
        if (v27[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v30 & v28) != v25)
      {
        goto LABEL_48;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v29 = v27[1];
    if (v29 != 0x3070CB6B3C7F21D3)
    {
      if (v29 >= *(_QWORD *)&v15)
        v29 %= *(_QWORD *)&v15;
      if (v29 != v25)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v27[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v31 = v27[5];
  if (*(_QWORD *)(v31 + 8) == 0x3070CB6B3C7F21D3)
  {
    v32 = *(uint64_t **)(v31 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v32 = 0;
LABEL_49:
  v33 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 112));
  md::LayoutContext::frameState(a2);
  md::GeometryLogic::tileMatrix((md::GeometryLogic *)v82, *(unsigned __int8 *)(v34 + 128) - 1 < 3, a3, 0.0, v35);
  gm::operator*<double,4,4,4>(v83.f64, (double *)(v18 + 808), v82);
  v36 = vcvt_f32_f64(v83);
  v37 = v84;
  v38 = v85;
  v39 = vcvt_f32_f64(v86);
  v40 = vcvt_f32_f64(v90);
  v41 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87), v88);
  v42 = v91;
  v43 = v92;
  v44 = vcvt_f32_f64(v89);
  v45 = *(_QWORD **)(*(_QWORD *)(v33 + 64) + 16);
  v46 = v45[1];
  v47 = v45[9];
  *(float32x2_t *)v47 = v36;
  *(float *)(v47 + 8) = v37;
  *(float *)(v47 + 12) = v38;
  *(float32x2_t *)(v47 + 16) = v39;
  v81 = v41.f32[1];
  *(float32x4_t *)(v47 + 24) = v41;
  *(float32x2_t *)(v47 + 40) = v44;
  *(float32x2_t *)(v47 + 48) = v40;
  *(float *)(v47 + 56) = v42;
  *(float *)(v47 + 60) = v43;
  if (v45[8] > v46)
    v46 = v45[8];
  v45[7] = 0;
  v45[8] = v46;
  md::LayoutContext::frameState(a2);
  md::GeometryContext::transformConstantData(v83.f64, v32, &a3->_type, *(unsigned __int8 *)(v48 + 128), 0.0, 0.0);
  v49 = *(_QWORD *)(v33 + 64);
  v50 = v83;
  *(float64_t *)(v49 + 32) = v83.f64[0];
  *(_QWORD *)(v49 + 40) = 0;
  v51 = *(_QWORD *)(v33 + 160);
  if (*(_QWORD *)&v50.f64[1])
  {
    v52 = (unint64_t *)(*(_QWORD *)&v50.f64[1] + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = *(std::__shared_weak_count **)(v51 + 40);
  *(float64x2_t *)(v51 + 32) = v50;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v83.f64[1];
  if (*(_QWORD *)&v83.f64[1])
  {
    v58 = (unint64_t *)(*(_QWORD *)&v83.f64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v57 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v57));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v57);
    }
  }
  v60 = **(_QWORD ***)(v33 + 64);
  v61 = v60[1];
  v62 = (_DWORD *)v60[9];
  *v62 = a4->i32[0];
  v62[1] = a4->i32[1];
  v62[2] = a4->i32[2];
  v62[3] = a4->i32[3];
  if (v60[8] > v61)
    v61 = v60[8];
  v60[7] = 0;
  v60[8] = v61;
  v63 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160));
  *((_QWORD *)v63 + 8) = *(_QWORD *)md::DebugLayerRenderResources::unitQuadMesh(*(md::DebugLayerRenderResources **)(a1 + 48));
  *((_QWORD *)v63 + 4) = v33;
  *((_QWORD *)v63 + 3) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 192);
  ggl::CommandBuffer::pushRenderItem(a5, v63);
  v64 = objc_retainAutorelease(v13);
  v65 = (int8x16_t *)objc_msgSend(v64, "UTF8String");
  objc_msgSend(*(id *)a2, "sizeInPixels");
  *(float *)&v66.i32[1] = v81;
  *(float *)v66.i32 = v43 + (float)((float)(v81 + v38) * 0.5);
  v67 = vdiv_f32(vmla_f32(v40, (float32x2_t)0x3F0000003F000000, vadd_f32(v39, v36)), (float32x2_t)vdup_lane_s32(v66, 0));
  __asm { FMOV            V3.2S, #1.0 }
  v73.i32[0] = vadd_f32(v67, _D3).u32[0];
  v73.i32[1] = vsub_f32(_D3, v67).i32[1];
  v75.f64[1] = v74;
  __asm { FMOV            V1.2D, #0.5 }
  *(float32x2_t *)&v75.f64[0] = vcvt_f32_f64(vmulq_f64(vmulq_f64(v75, _Q1), vcvtq_f64_f32(v73)));
  v77 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*a4, (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v77.i8 = vmovn_s32((int32x4_t)v77);
  *(_DWORD *)(a6 + 96) = vmovn_s16(v77).u32[0];
  *(float64_t *)(a6 + 8) = v75.f64[0];
  *(_QWORD *)(a6 + 40) = 0x100000001;
  v78 = strlen(v65->i8);
  ggl::DebugConsole::drawString(a6, v65, v78, v79, v80);

}

void sub_19F7F5CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::DebugRenderLayer::renderTexturedQuadTile(md::DebugRenderLayer *this, uint64_t **a2, QuadTile *a3, ggl::Texture2D *a4, ggl::CommandBuffer *a5, float a6)
{
  ggl::CommandBuffer *v7;
  ggl::Texture2D *v8;
  QuadTile *v9;
  md::LayoutContext *v10;
  uint64_t *v12;
  int8x8_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  const md::LayoutContext *v36;
  uint64_t *v37;
  const QuadTile *v38;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  ggl::Texture2D *v51;
  ggl::CommandBuffer *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  _QWORD *v88;
  unint64_t v89;
  float32x2_t *v90;
  uint64_t v91;
  float64x2_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  float64_t v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  ggl::RenderItem *v110;
  uint64_t v112;
  double v113[16];
  float64x2_t v114[9];

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = (md::LayoutContext *)a2;
  v12 = a2[1];
  v13 = (int8x8_t)v12[1];
  if (!*(_QWORD *)&v13)
  {
    v16 = 0;
    goto LABEL_48;
  }
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v13 <= 0x1AF456233693CD46uLL)
      v15 = 0x1AF456233693CD46uLL % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & 0x1AF456233693CD46;
  }
  v17 = *v12;
  v18 = *(_QWORD **)(v17 + 8 * v15);
  if (!v18)
    goto LABEL_25;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_25;
  if (v14.u32[0] < 2uLL)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0x1AF456233693CD46)
      {
        if (v19[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v21 & (*(_QWORD *)&v13 - 1)) != v15)
      {
        goto LABEL_25;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == 0x1AF456233693CD46)
      break;
    if (v20 >= *(_QWORD *)&v13)
      v20 %= *(_QWORD *)&v13;
    if (v20 != v15)
      goto LABEL_25;
LABEL_12:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_25;
  }
  if (v19[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) == 0x1AF456233693CD46)
  {
    v16 = *(_QWORD *)(v22 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v16 = 0;
LABEL_26:
  if (v14.u32[0] > 1uLL)
  {
    v23 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v13 <= 0x3070CB6B3C7F21D3uLL)
      v23 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v13;
  }
  else
  {
    v23 = (*(_QWORD *)&v13 - 1) & 0x3070CB6B3C7F21D3;
  }
  v24 = *(_QWORD **)(v17 + 8 * v23);
  if (!v24)
    goto LABEL_48;
  v25 = (_QWORD *)*v24;
  if (!v25)
    goto LABEL_48;
  if (v14.u32[0] < 2uLL)
  {
    v26 = *(_QWORD *)&v13 - 1;
    while (1)
    {
      v28 = v25[1];
      if (v28 == 0x3070CB6B3C7F21D3)
      {
        if (v25[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v28 & v26) != v23)
      {
        goto LABEL_48;
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v27 = v25[1];
    if (v27 != 0x3070CB6B3C7F21D3)
    {
      if (v27 >= *(_QWORD *)&v13)
        v27 %= *(_QWORD *)&v13;
      if (v27 != v23)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v25[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v29 = v25[5];
  if (*(_QWORD *)(v29 + 8) == 0x3070CB6B3C7F21D3)
  {
    v30 = *(uint64_t **)(v29 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v30 = 0;
LABEL_49:
  v31 = *(_QWORD *)(*((_QWORD *)this + 6) + 144);
  v32 = *(_QWORD *)(v31 + 8);
  if (v32 == *(_QWORD *)v31)
  {
    v48 = *(_QWORD *)(v31 + 88);
    if (!v48)
    {
LABEL_122:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_123:
      abort();
    }
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48);
    v34 = *(uint64_t **)(v31 + 40);
    v49 = *(_QWORD *)(v31 + 48);
    if ((unint64_t)v34 < v49)
    {
LABEL_61:
      if (v34)
        *v34 = v33;
      v50 = v34 + 1;
      goto LABEL_101;
    }
    v112 = v16;
    v36 = v10;
    v37 = v30;
    v38 = v9;
    v51 = v8;
    v52 = v7;
    v53 = *(_QWORD *)(v31 + 32);
    v54 = ((uint64_t)v34 - v53) >> 3;
    v43 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      goto LABEL_123;
    v55 = v49 - v53;
    if (v55 >> 2 > v43)
      v43 = v55 >> 2;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    if (v43)
    {
      v56 = 8 * v43;
      v57 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v31 + 56) + 16))(*(_QWORD *)(v31 + 56), 8 * v43, 8);
      v47 = (uint64_t *)(v57 + 8 * v54);
      v43 = v57 + v56;
      if (v57)
        *v47 = v33;
    }
    else
    {
      v47 = (uint64_t *)(8 * v54);
    }
    v7 = v52;
    v50 = v47 + 1;
    v67 = *(_QWORD *)(v31 + 32);
    v58 = *(_QWORD *)(v31 + 40);
    v8 = v51;
    if (v58 == v67)
      goto LABEL_88;
    v68 = v58 - v67 - 8;
    v9 = (QuadTile *)v38;
    if (v68 < 0x38)
    {
      v70 = *(_QWORD *)(v31 + 40);
      v30 = v37;
    }
    else
    {
      v30 = v37;
      if ((unint64_t)(v58 - (_QWORD)v47) >= 0x20)
      {
        v69 = (v68 >> 3) + 1;
        v70 = v58 - 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
        v71 = v47 - 2;
        v72 = (__int128 *)(v58 - 16);
        v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
        v10 = v36;
        do
        {
          v74 = *v72;
          *((_OWORD *)v71 - 1) = *(v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 4;
          v72 -= 2;
          v73 -= 4;
        }
        while (v73);
        v47 -= v69 & 0x3FFFFFFFFFFFFFFCLL;
        v16 = v112;
        if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_98;
        goto LABEL_97;
      }
      v70 = *(_QWORD *)(v31 + 40);
    }
    v10 = v36;
    v16 = v112;
    do
    {
LABEL_97:
      v76 = *(_QWORD *)(v70 - 8);
      v70 -= 8;
      *--v47 = v76;
    }
    while (v70 != v67);
LABEL_98:
    v58 = *(_QWORD *)(v31 + 32);
    goto LABEL_99;
  }
  v33 = *(_QWORD *)(v32 - 8);
  *(_QWORD *)(v31 + 8) = v32 - 8;
  v34 = *(uint64_t **)(v31 + 40);
  v35 = *(_QWORD *)(v31 + 48);
  if ((unint64_t)v34 < v35)
    goto LABEL_61;
  v112 = v16;
  v36 = (const md::LayoutContext *)a2;
  v37 = v30;
  v38 = a3;
  v41 = *(_QWORD *)(v31 + 32);
  v42 = ((uint64_t)v34 - v41) >> 3;
  v43 = v42 + 1;
  if ((unint64_t)(v42 + 1) >> 61)
    goto LABEL_123;
  v44 = v35 - v41;
  if (v44 >> 2 > v43)
    v43 = v44 >> 2;
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
    v43 = 0x1FFFFFFFFFFFFFFFLL;
  if (v43)
  {
    v45 = 8 * v43;
    v46 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v31 + 56) + 16))(*(_QWORD *)(v31 + 56), 8 * v43, 8);
    v47 = (uint64_t *)(v46 + 8 * v42);
    v43 = v46 + v45;
    if (v46)
      *v47 = v33;
  }
  else
  {
    v47 = (uint64_t *)(8 * v42);
  }
  v7 = a5;
  v50 = v47 + 1;
  v59 = *(_QWORD *)(v31 + 32);
  v58 = *(_QWORD *)(v31 + 40);
  v8 = a4;
  if (v58 != v59)
  {
    v60 = v58 - v59 - 8;
    v9 = (QuadTile *)v38;
    if (v60 < 0x38)
    {
      v62 = *(_QWORD *)(v31 + 40);
      v30 = v37;
    }
    else
    {
      v30 = v37;
      if ((unint64_t)(v58 - (_QWORD)v47) >= 0x20)
      {
        v61 = (v60 >> 3) + 1;
        v62 = v58 - 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
        v63 = v47 - 2;
        v64 = (__int128 *)(v58 - 16);
        v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        v10 = v36;
        do
        {
          v66 = *v64;
          *((_OWORD *)v63 - 1) = *(v64 - 1);
          *(_OWORD *)v63 = v66;
          v63 -= 4;
          v64 -= 2;
          v65 -= 4;
        }
        while (v65);
        v47 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
        v16 = v112;
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_98;
        do
        {
LABEL_92:
          v75 = *(_QWORD *)(v62 - 8);
          v62 -= 8;
          *--v47 = v75;
        }
        while (v62 != v59);
        goto LABEL_98;
      }
      v62 = *(_QWORD *)(v31 + 40);
    }
    v10 = v36;
    v16 = v112;
    goto LABEL_92;
  }
LABEL_88:
  v9 = (QuadTile *)v38;
  v30 = v37;
  v10 = v36;
  v16 = v112;
LABEL_99:
  *(_QWORD *)(v31 + 32) = v47;
  *(_QWORD *)(v31 + 40) = v50;
  v77 = *(_QWORD *)(v31 + 48);
  *(_QWORD *)(v31 + 48) = v43;
  if (v58)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 + 56) + 40))(*(_QWORD *)(v31 + 56), v58, v77 - v58);
LABEL_101:
  *(_QWORD *)(v31 + 40) = v50;
  *(_QWORD *)&v114[0].f64[0] = v33;
  v78 = *(_QWORD *)(v31 + 120);
  if (!v78)
    goto LABEL_122;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v78 + 48))(v78, v114);
  md::LayoutContext::frameState(v10);
  md::GeometryLogic::tileMatrix((md::GeometryLogic *)v113, *(unsigned __int8 *)(v79 + 128) - 1 < 3, v9, 0.0, v80);
  gm::operator*<double,4,4,4>(v114[0].f64, (double *)(v16 + 808), v113);
  v81 = vcvt_f32_f64(v114[1]);
  v82 = vcvt_f32_f64(v114[2]);
  v83 = vcvt_f32_f64(v114[3]);
  v84 = vcvt_f32_f64(v114[4]);
  v85 = vcvt_f32_f64(v114[5]);
  v86 = vcvt_f32_f64(v114[6]);
  v87 = vcvt_f32_f64(v114[7]);
  v88 = **(_QWORD ***)(v33 + 64);
  v89 = v88[1];
  v90 = (float32x2_t *)v88[9];
  *v90 = vcvt_f32_f64(v114[0]);
  v90[1] = v81;
  v90[2] = v82;
  v90[3] = v83;
  v90[4] = v84;
  v90[5] = v85;
  v90[6] = v86;
  v90[7] = v87;
  if (v88[8] > v89)
    v89 = v88[8];
  v88[7] = 0;
  v88[8] = v89;
  md::GeometryContext::transformConstantData(v114[0].f64, v30, &v9->_type, *(unsigned __int8 *)(v16 + 3776), 0.0, 0.0);
  v91 = *(_QWORD *)(v33 + 64);
  v92 = v114[0];
  *(float64_t *)(v91 + 16) = v114[0].f64[0];
  *(_QWORD *)(v91 + 24) = 0;
  v93 = *(_QWORD *)(v33 + 160);
  if (*(_QWORD *)&v92.f64[1])
  {
    v94 = (unint64_t *)(*(_QWORD *)&v92.f64[1] + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  v96 = *(std::__shared_weak_count **)(v93 + 24);
  *(float64x2_t *)(v93 + 16) = v92;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(p_shared_owners);
    while (__stlxr(v98 - 1, p_shared_owners));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v114[0].f64[1];
  if (*(_QWORD *)&v114[0].f64[1])
  {
    v100 = (unint64_t *)(*(_QWORD *)&v114[0].f64[1] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v99 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v99));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v99);
    }
  }
  v102 = *(_QWORD **)(*(_QWORD *)(v33 + 64) + 48);
  v103 = v102[1];
  v104 = v102[9];
  *(_DWORD *)(v104 + 8) = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)v104 = _Q0;
  *(float *)(v104 + 12) = a6;
  if (v102[8] > v103)
    v103 = v102[8];
  v102[7] = 0;
  v102[8] = v103;
  if (!v8)
    v8 = *(ggl::Texture2D **)(*((_QWORD *)this + 6) + 240);
  **(_QWORD **)(v33 + 96) = v8;
  v110 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 160));
  *((_QWORD *)v110 + 8) = *(_QWORD *)md::DebugLayerRenderResources::unitTexturedMesh(*((md::DebugLayerRenderResources **)this
                                                                                     + 6));
  *((_QWORD *)v110 + 4) = v33;
  *((_QWORD *)v110 + 3) = *(_QWORD *)(*((_QWORD *)this + 6) + 192);
  return ggl::CommandBuffer::pushRenderItem((uint64_t)v7, v110);
}

uint64_t md::DebugRenderLayer::renderScreenTexturedQuad(uint64_t a1, md::LayoutContext *this, uint64_t a3, uint64_t a4, double a5, float a6, float a7)
{
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  ggl::RenderItem *v65;
  uint64_t v67;

  md::LayoutContext::frameState(this);
  v14 = *(double *)(v13 + 496);
  v15 = *(double *)(v13 + 504);
  v16 = v15 * v14;
  v17 = v14 / v15;
  if (v16 <= 0.0)
    v18 = 1.0;
  else
    v18 = v17;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 152);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20 == *(_QWORD *)v19)
  {
    v31 = *(_QWORD *)(v19 + 88);
    if (!v31)
    {
LABEL_59:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_60:
      abort();
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31);
    v22 = *(uint64_t **)(v19 + 40);
    v32 = *(_QWORD *)(v19 + 48);
    if ((unint64_t)v22 >= v32)
    {
      v34 = *(_QWORD *)(v19 + 32);
      v35 = ((uint64_t)v22 - v34) >> 3;
      v26 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_60;
      v36 = v32 - v34;
      if (v36 >> 2 > v26)
        v26 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      if (v26)
      {
        v37 = 8 * v26;
        v38 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v19 + 56) + 16))(*(_QWORD *)(v19 + 56), 8 * v26, 8);
        v30 = (uint64_t *)(v38 + 8 * v35);
        v26 = v38 + v37;
        if (v38)
          *v30 = v21;
      }
      else
      {
        v30 = (uint64_t *)(8 * v35);
      }
      v33 = v30 + 1;
      v48 = *(_QWORD *)(v19 + 32);
      v39 = *(_QWORD *)(v19 + 40);
      if (v39 == v48)
        goto LABEL_51;
      v49 = v39 - v48 - 8;
      if (v49 < 0x38)
      {
        v51 = *(_QWORD *)(v19 + 40);
      }
      else if ((unint64_t)(v39 - (_QWORD)v30) < 0x20)
      {
        v51 = *(_QWORD *)(v19 + 40);
      }
      else
      {
        v50 = (v49 >> 3) + 1;
        v51 = v39 - 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        v52 = v30 - 2;
        v53 = (__int128 *)(v39 - 16);
        v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *v53;
          *((_OWORD *)v52 - 1) = *(v53 - 1);
          *(_OWORD *)v52 = v55;
          v52 -= 4;
          v53 -= 2;
          v54 -= 4;
        }
        while (v54);
        v30 -= v50 & 0x3FFFFFFFFFFFFFFCLL;
        if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
      }
      do
      {
        v57 = *(_QWORD *)(v51 - 8);
        v51 -= 8;
        *--v30 = v57;
      }
      while (v51 != v48);
      goto LABEL_50;
    }
  }
  else
  {
    v21 = *(_QWORD *)(v20 - 8);
    *(_QWORD *)(v19 + 8) = v20 - 8;
    v22 = *(uint64_t **)(v19 + 40);
    v23 = *(_QWORD *)(v19 + 48);
    if ((unint64_t)v22 >= v23)
    {
      v24 = *(_QWORD *)(v19 + 32);
      v25 = ((uint64_t)v22 - v24) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        goto LABEL_60;
      v27 = v23 - v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      if (v26)
      {
        v28 = 8 * v26;
        v29 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v19 + 56) + 16))(*(_QWORD *)(v19 + 56), 8 * v26, 8);
        v30 = (uint64_t *)(v29 + 8 * v25);
        v26 = v29 + v28;
        if (v29)
          *v30 = v21;
      }
      else
      {
        v30 = (uint64_t *)(8 * v25);
      }
      v33 = v30 + 1;
      v40 = *(_QWORD *)(v19 + 32);
      v39 = *(_QWORD *)(v19 + 40);
      if (v39 == v40)
        goto LABEL_51;
      v41 = v39 - v40 - 8;
      if (v41 < 0x38)
      {
        v43 = *(_QWORD *)(v19 + 40);
      }
      else if ((unint64_t)(v39 - (_QWORD)v30) < 0x20)
      {
        v43 = *(_QWORD *)(v19 + 40);
      }
      else
      {
        v42 = (v41 >> 3) + 1;
        v43 = v39 - 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v44 = v30 - 2;
        v45 = (__int128 *)(v39 - 16);
        v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v45;
          *((_OWORD *)v44 - 1) = *(v45 - 1);
          *(_OWORD *)v44 = v47;
          v44 -= 4;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v30 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
      }
      do
      {
        v56 = *(_QWORD *)(v43 - 8);
        v43 -= 8;
        *--v30 = v56;
      }
      while (v43 != v40);
LABEL_50:
      v39 = *(_QWORD *)(v19 + 32);
LABEL_51:
      *(_QWORD *)(v19 + 32) = v30;
      *(_QWORD *)(v19 + 40) = v33;
      v58 = *(_QWORD *)(v19 + 48);
      *(_QWORD *)(v19 + 48) = v26;
      if (v39)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 56) + 40))(*(_QWORD *)(v19 + 56), v39, v58 - v39);
      goto LABEL_53;
    }
  }
  if (v22)
    *v22 = v21;
  v33 = v22 + 1;
LABEL_53:
  *(_QWORD *)(v19 + 40) = v33;
  v67 = v21;
  v59 = *(_QWORD *)(v19 + 120);
  if (!v59)
    goto LABEL_59;
  v60 = v18 * a7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v59 + 48))(v59, &v67);
  v61 = **(_QWORD ***)(v21 + 64);
  v62 = v61[1];
  v64 = v61[8];
  v63 = v61[9];
  *(double *)v63 = a5;
  *(float *)(v63 + 8) = a6;
  *(float *)(v63 + 12) = v60;
  if (v64 > v62)
    v62 = v64;
  v61[7] = 0;
  v61[8] = v62;
  if (!a3)
    a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 240);
  **(_QWORD **)(v21 + 96) = a3;
  v65 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160));
  *((_QWORD *)v65 + 8) = *(_QWORD *)md::DebugLayerRenderResources::unitTexturedMesh(*(md::DebugLayerRenderResources **)(a1 + 48));
  *((_QWORD *)v65 + 4) = v21;
  *((_QWORD *)v65 + 3) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 192);
  return ggl::CommandBuffer::pushRenderItem(a4, v65);
}

void md::DebugRenderLayer::paintLayerMeshBounds(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, _DWORD *a8)
{
  __n128 v9;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  float v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  unint64_t v103;
  uint64_t v107;
  uint64_t v110;
  unint64_t v111;
  __int128 *v112;
  __n128 v113;
  unsigned int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  double v125;
  __int128 v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  float v140[16];
  __n128 v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  int v148;
  uint64_t v149;

  v143 = 0;
  v144 = 0;
  v145 = 0;
  md::SceneContext::renderData((md::SceneContext *)&v141, a5, a4);
  v9 = v141;
  v110 = v142;
  __asm { FMOV            V8.2S, #1.0 }
  v107 = a1;
  while (v9.n128_u64[0] != v110)
  {
    v144 = v143;
    v15 = *(_QWORD **)(*(_QWORD *)(v9.n128_u64[0] + 112) + 1320);
    v16 = v15[1];
    v113 = v9;
    v111 = v9.n128_u64[0];
    if ((v16 & (v16 - 1)) != 0)
    {
      v18 = 0x64A448A5CD5D38DBLL;
      if (v16 <= 0x64A448A5CD5D38DBLL)
        v18 = 0x64A448A5CD5D38DBLL % v16;
      v17 = *(_QWORD **)(*v15 + 8 * v18);
      do
      {
        do
          v17 = (_QWORD *)*v17;
        while (v17[1] != 0x64A448A5CD5D38DBLL);
      }
      while (v17[2] != 0x64A448A5CD5D38DBLL);
    }
    else
    {
      v17 = *(_QWORD **)(*v15 + 8 * ((v16 - 1) & 0x64A448A5CD5D38DBLL));
      do
      {
        do
          v17 = (_QWORD *)*v17;
        while (v17[1] != 0x64A448A5CD5D38DBLL);
      }
      while (v17[2] != 0x64A448A5CD5D38DBLL);
    }
    v19 = *(_QWORD *)(v17[5] + 32);
    v114 = *(unsigned __int8 *)(a6 + 3776) - 1;
    if (v114 >= 3)
      v20 = (double *)(v19 + 304);
    else
      v20 = (double *)(v19 + 176);
    v21 = *(_QWORD *)(a6 + 5584);
    if (!v21)
      v21 = a6;
    gm::operator*<double,4,4,4>(&v125, (double *)(v21 + 808), v20);
    v22 = v125;
    v23 = *(double *)&v126;
    v140[0] = v22;
    v140[1] = v23;
    v24 = *((double *)&v126 + 1);
    v25 = v127;
    v140[2] = v24;
    v140[3] = v25;
    v26 = v128;
    v27 = v129;
    v140[4] = v26;
    v140[5] = v27;
    *(float *)&v28 = v130;
    v29 = v131;
    LODWORD(v140[6]) = v28;
    v140[7] = v29;
    v30 = v132;
    v31 = v133;
    v140[8] = v30;
    v140[9] = v31;
    v32 = v134;
    v33 = v135;
    v140[10] = v32;
    v140[11] = v33;
    v34 = v136;
    v35 = v137;
    v140[12] = v34;
    v140[13] = v35;
    v36 = v138;
    v37 = v139;
    v140[14] = v36;
    v140[15] = v37;
    v38 = v25 + v22;
    v39 = v29 + v26;
    v40 = v33 + v30;
    v41 = v37 + v34;
    v42 = v25 - v22;
    v43 = v29 - v26;
    v44 = v33 - v30;
    v45 = v37 - v34;
    v46 = v25 + v23;
    v47 = v29 + v27;
    v48 = v33 + v31;
    v49 = sqrtf((float)((float)(v46 * v46) + (float)(v47 * v47)) + (float)(v48 * v48));
    v50 = v25 - v23;
    v51 = v29 - v27;
    v52 = v33 - v31;
    v53 = v29 - *(float *)&v28;
    v54.f32[0] = v24;
    v54.f32[1] = v25 - v24;
    v55.f32[0] = v32;
    v55.f32[1] = v33 - v32;
    v56 = vdiv_f32(_D8, vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v54, v54), (float32x2_t)__PAIR64__(LODWORD(v53), v28), (float32x2_t)__PAIR64__(LODWORD(v53), v28)), v55, v55)));
    *(float *)&v125 = v24 * v56.f32[0];
    *((float *)&v125 + 1) = *(float *)&v28 * v56.f32[0];
    *(float *)&v126 = v32 * v56.f32[0];
    v54.f32[0] = v36;
    *(float32x2_t *)((char *)&v126 + 4) = vmul_f32(v56, v54);
    HIDWORD(v126) = vmuls_lane_f32(v53, v56, 1);
    v127 = COERCE_DOUBLE(__PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(v37 - v36, v56, 1)), COERCE_UNSIGNED_INT(vmuls_lane_f32(v33 - v32, v56, 1))));
    *(float *)&v128 = (float)(1.0 / v49) * v46;
    *((float *)&v128 + 1) = (float)(1.0 / v49) * v47;
    *(float *)&v129 = (float)(1.0 / v49) * v48;
    v56.f32[0] = 1.0 / sqrtf((float)((float)(v50 * v50) + (float)(v51 * v51)) + (float)(v52 * v52));
    *((float *)&v129 + 1) = (float)(v37 + v35) * (float)(1.0 / v49);
    *(float *)&v130 = v56.f32[0] * v50;
    *((float *)&v130 + 1) = v56.f32[0] * v51;
    *(float *)&v131 = v56.f32[0] * v52;
    v57 = 1.0 / sqrtf((float)((float)(v38 * v38) + (float)(v39 * v39)) + (float)(v40 * v40));
    *((float *)&v131 + 1) = (float)(v37 - v35) * v56.f32[0];
    *(float *)&v132 = v57 * v38;
    *((float *)&v132 + 1) = v57 * v39;
    *(float *)&v133 = v57 * v40;
    v58 = 1.0 / sqrtf((float)((float)(v42 * v42) + (float)(v43 * v43)) + (float)(v44 * v44));
    *((float *)&v133 + 1) = v41 * v57;
    *(float *)&v134 = v58 * v42;
    *((float *)&v134 + 1) = v58 * v43;
    *(float *)&v135 = v58 * v44;
    *((float *)&v135 + 1) = v45 * v58;
    geo::Frustum<float>::calculateCorners((float *)&v125, v140);
    md::GeometryContext::transformConstantData((double *)&v123, a7, (unsigned __int8 *)v19, *(unsigned __int8 *)(a6 + 3776), *(double *)(v19 + 432), *(double *)(v19 + 440));
    v112 = (__int128 *)v20;
    v59 = gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v15);
    v60 = (_QWORD *)v59;
    v61 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v59 + 88) - *(_QWORD *)(v59 + 80)) >> 4);
    v62 = v145;
    v63 = v143;
    if (v61 <= (v145 - v143) >> 6)
    {
      v67 = v143;
    }
    else
    {
      if (v61 >> 58)
LABEL_72:
        abort();
      v64 = v144;
      v65 = (char *)operator new(0x6DB6DB6DB6DB6DC0 * ((uint64_t)(*(_QWORD *)(v59 + 88) - *(_QWORD *)(v59 + 80)) >> 4));
      v66 = &v65[(v64 - v63) & 0xFFFFFFFFFFFFFFC0];
      v67 = v66;
      if (v64 != v63)
      {
        v68 = &v65[(v64 - v63) & 0xFFFFFFFFFFFFFFC0];
        do
        {
          v67 = v68 - 64;
          v69 = *((_OWORD *)v64 - 4);
          v70 = *((_OWORD *)v64 - 3);
          v71 = *((_OWORD *)v64 - 1);
          *((_OWORD *)v68 - 2) = *((_OWORD *)v64 - 2);
          *((_OWORD *)v68 - 1) = v71;
          *((_OWORD *)v68 - 4) = v69;
          *((_OWORD *)v68 - 3) = v70;
          v64 -= 64;
          v68 -= 64;
        }
        while (v64 != v63);
      }
      v62 = &v65[64 * v61];
      v143 = v67;
      v144 = v66;
      v145 = v62;
      if (v63)
        operator delete(v63);
    }
    v73 = v60[7];
    v72 = v60[8];
    if (v73 != v72)
    {
      v74 = v60[10];
      v75 = v144;
      do
      {
        v115 = xmmword_19FFB3470;
        *(_QWORD *)&v116 = 0x80000000800000;
        if (v114 > 2)
        {
          md::GeometryLogic::adjustedMeshBounds((uint64_t)&v146, v74 + 36, v123);
        }
        else
        {
          v149 = 0;
          v148 = 0;
          md::GeometryLogic::calculateGeocentricBounds((float32_t *)(v74 + 36), v123, (uint64_t)&v115, (uint64_t)&v148);
          md::GeometryLogic::scaleGeocentricBoundsWithNormal((float32x4_t *)&v146, (float32x2_t *)(v74 + 36), (uint64_t)&v115, (uint64_t)&v148, v123, v76);
        }
        v77 = (float32x4_t)v146;
        v78 = v147;
        v115 = v146;
        *(_QWORD *)&v116 = v147;
        if (geo::Intersect::encloses<float>((float *)&v125, (float *)&v115))
        {
          v79 = v77.f32[3] - v77.f32[0];
          v80 = *(float *)&v78 - v77.f32[1];
          v81 = *((float *)&v78 + 1) - v77.f32[2];
          if (v75 < v62)
          {
            *(float *)v75 = v79;
            *(_QWORD *)(v75 + 12) = 0;
            *(_QWORD *)(v75 + 4) = 0;
            *((float *)v75 + 5) = v80;
            *((_QWORD *)v75 + 3) = 0;
            *((_QWORD *)v75 + 4) = 0;
            *((float *)v75 + 10) = v81;
            *((_DWORD *)v75 + 11) = 0;
            *((_QWORD *)v75 + 6) = v77.i64[0];
            *((_DWORD *)v75 + 14) = v77.i32[2];
            *((_DWORD *)v75 + 15) = 1065353216;
            v75 += 64;
          }
          else
          {
            v82 = (v75 - v67) >> 6;
            v83 = v82 + 1;
            if ((unint64_t)(v82 + 1) >> 58)
              goto LABEL_72;
            if ((v62 - v67) >> 5 > v83)
              v83 = (v62 - v67) >> 5;
            if ((unint64_t)(v62 - v67) >= 0x7FFFFFFFFFFFFFC0)
              v84 = 0x3FFFFFFFFFFFFFFLL;
            else
              v84 = v83;
            if (v84)
            {
              if (v84 >> 58)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v85 = (char *)operator new(v84 << 6);
            }
            else
            {
              v85 = 0;
            }
            v86 = &v85[64 * v82];
            *(float *)v86 = v79;
            *(_QWORD *)(v86 + 12) = 0;
            *(_QWORD *)(v86 + 4) = 0;
            *((float *)v86 + 5) = v80;
            *((_QWORD *)v86 + 3) = 0;
            *((_QWORD *)v86 + 4) = 0;
            *((float *)v86 + 10) = v81;
            *((_DWORD *)v86 + 11) = 0;
            *((_QWORD *)v86 + 6) = v77.i64[0];
            *((_DWORD *)v86 + 14) = v77.i32[2];
            *((_DWORD *)v86 + 15) = 1065353216;
            if (v75 == v67)
            {
              v88 = &v85[64 * v82];
            }
            else
            {
              v87 = &v85[64 * v82];
              do
              {
                v88 = v87 - 64;
                v89 = *((_OWORD *)v75 - 4);
                v90 = *((_OWORD *)v75 - 3);
                v91 = *((_OWORD *)v75 - 1);
                *((_OWORD *)v87 - 2) = *((_OWORD *)v75 - 2);
                *((_OWORD *)v87 - 1) = v91;
                *((_OWORD *)v87 - 4) = v89;
                *((_OWORD *)v87 - 3) = v90;
                v75 -= 64;
                v87 -= 64;
              }
              while (v75 != v67);
            }
            v62 = &v85[64 * v84];
            v75 = v86 + 64;
            v143 = v88;
            v145 = v62;
            if (v67)
              operator delete(v67);
            v67 = v88;
          }
          v144 = v75;
        }
        v74 += 112;
        v73 += 8;
      }
      while (v73 != v72);
    }
    md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v146);
    v92 = v112[5];
    v119 = v112[4];
    v120 = v92;
    v93 = v112[7];
    v121 = v112[6];
    v122 = v93;
    v94 = v112[1];
    v115 = *v112;
    v116 = v94;
    v95 = v112[3];
    v117 = v112[2];
    v118 = v95;
    v96 = (_QWORD *)md::DebugLayerRenderResources::unitBoxMesh(*(md::DebugLayerRenderResources **)(v107 + 48));
    md::DebugRenderLayer::renderInstancedMesh(v107, *(_QWORD **)(a2 + 8), (double *)&v115, a8, 1, a3, (uint64_t)&v143, v96, (uint64_t *)&v146);
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    v9 = v113;
    if (!*((_QWORD *)&v146 + 1))
      goto LABEL_59;
    v98 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v97->__on_zero_shared)(v97, v113);
      std::__shared_weak_count::__release_weak(v97);
      v9 = v113;
      v100 = v124;
      if (!v124)
        goto LABEL_65;
    }
    else
    {
LABEL_59:
      v100 = v124;
      if (!v124)
        goto LABEL_65;
    }
    p_shared_owners = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(p_shared_owners);
    while (__stlxr(v102 - 1, p_shared_owners));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v100->__on_zero_shared)(v100, v9);
      std::__shared_weak_count::__release_weak(v100);
      v9.n128_u64[1] = v113.n128_u64[1];
    }
LABEL_65:
    v103 = v111 + 144;
    if (v111 + 144 != v9.n128_u64[1])
    {
      while (!*(_QWORD *)(v103 + 112))
      {
        v103 += 144;
        if (v103 == v9.n128_u64[1])
        {
          v103 = v9.n128_u64[1];
          break;
        }
      }
    }
    v9.n128_u64[0] = v103;
  }
  if (v143)
    operator delete(v143);
}

void sub_19F7F7018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v41;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  v41 = *(void **)(v39 - 216);
  if (v41)
    operator delete(v41);
  _Unwind_Resume(a1);
}

void md::DebugRenderLayer::layout(md::LayoutContext const&)::$_14::operator()(uint64_t a1, _DWORD *a2, float *a3)
{
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float **v13;
  unint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float v38[6];

  v6 = *(float **)a1;
  md::GeometryLogic::adjustedMeshBounds((uint64_t)v38, (uint64_t)(a3 + 9), **(_QWORD **)(a1 + 8));
  if (geo::Intersect::encloses<float>(v6, v38))
  {
    v8 = a3[9];
    v7 = a3[10];
    v9 = a3[11];
    v10 = a3[12] - v8;
    v11 = a3[13] - v7;
    v12 = a3[14] - v9;
    if (*a2)
    {
      v13 = *(float ***)(a1 + 16);
      v15 = v13[1];
      v14 = (unint64_t)v13[2];
      if ((unint64_t)v15 >= v14)
      {
        v16 = *v13;
        v17 = ((char *)v15 - (char *)*v13) >> 6;
        v18 = v17 + 1;
        if (!((unint64_t)(v17 + 1) >> 58))
        {
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 5 > v18)
            v18 = v19 >> 5;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
            v20 = 0x3FFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (!v20)
          {
            v21 = 0;
            goto LABEL_25;
          }
          if (!(v20 >> 58))
          {
            v21 = (char *)operator new(v20 << 6);
LABEL_25:
            v30 = &v21[64 * v17];
            *(float *)v30 = v10;
            *(_QWORD *)(v30 + 12) = 0;
            *(_QWORD *)(v30 + 4) = 0;
            *((float *)v30 + 5) = v11;
            v31 = &v21[64 * v20];
            *((_QWORD *)v30 + 3) = 0;
            *((_QWORD *)v30 + 4) = 0;
            *((float *)v30 + 10) = v12;
            *((_DWORD *)v30 + 11) = 0;
            *((float *)v30 + 12) = v8;
            *((float *)v30 + 13) = v7;
            *((_DWORD *)v30 + 15) = 1065353216;
            v23 = (float *)(v30 + 64);
            *((float *)v30 + 14) = v9;
            if (v15 == v16)
              goto LABEL_32;
            do
            {
              v32 = *((_OWORD *)v15 - 4);
              v33 = *((_OWORD *)v15 - 3);
              v34 = *((_OWORD *)v15 - 1);
              *((_OWORD *)v30 - 2) = *((_OWORD *)v15 - 2);
              *((_OWORD *)v30 - 1) = v34;
              *((_OWORD *)v30 - 4) = v32;
              *((_OWORD *)v30 - 3) = v33;
              v30 -= 64;
              v15 -= 16;
            }
            while (v15 != v16);
            goto LABEL_31;
          }
LABEL_37:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        goto LABEL_36;
      }
    }
    else
    {
      v13 = *(float ***)(a1 + 24);
      v15 = v13[1];
      v22 = (unint64_t)v13[2];
      if ((unint64_t)v15 >= v22)
      {
        v24 = *v13;
        v25 = ((char *)v15 - (char *)*v13) >> 6;
        v26 = v25 + 1;
        if (!((unint64_t)(v25 + 1) >> 58))
        {
          v27 = v22 - (_QWORD)v24;
          if (v27 >> 5 > v26)
            v26 = v27 >> 5;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFC0)
            v28 = 0x3FFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 58)
              goto LABEL_37;
            v29 = (char *)operator new(v28 << 6);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[64 * v25];
          *(float *)v30 = v10;
          *(_QWORD *)(v30 + 12) = 0;
          *(_QWORD *)(v30 + 4) = 0;
          *((float *)v30 + 5) = v11;
          v31 = &v29[64 * v28];
          *((_QWORD *)v30 + 3) = 0;
          *((_QWORD *)v30 + 4) = 0;
          *((float *)v30 + 10) = v12;
          *((_DWORD *)v30 + 11) = 0;
          *((float *)v30 + 12) = v8;
          *((float *)v30 + 13) = v7;
          *((_DWORD *)v30 + 15) = 1065353216;
          v23 = (float *)(v30 + 64);
          *((float *)v30 + 14) = v9;
          if (v15 == v24)
            goto LABEL_32;
          do
          {
            v35 = *((_OWORD *)v15 - 4);
            v36 = *((_OWORD *)v15 - 3);
            v37 = *((_OWORD *)v15 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v15 - 2);
            *((_OWORD *)v30 - 1) = v37;
            *((_OWORD *)v30 - 4) = v35;
            *((_OWORD *)v30 - 3) = v36;
            v30 -= 64;
            v15 -= 16;
          }
          while (v15 != v24);
LABEL_31:
          v15 = *v13;
LABEL_32:
          *v13 = (float *)v30;
          v13[1] = v23;
          v13[2] = (float *)v31;
          if (v15)
            operator delete(v15);
          goto LABEL_34;
        }
LABEL_36:
        abort();
      }
    }
    *v15 = v10;
    *(_QWORD *)(v15 + 3) = 0;
    *(_QWORD *)(v15 + 1) = 0;
    v15[5] = v11;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 4) = 0;
    v15[10] = v12;
    v15[11] = 0.0;
    v15[12] = v8;
    v15[13] = v7;
    v15[14] = v9;
    v23 = v15 + 16;
    v15[15] = 1.0;
LABEL_34:
    v13[1] = v23;
  }
}

char *md::DebugLayerRenderResources::unitRectMesh(md::DebugLayerRenderResources *this)
{
  char *v1;
  _QWORD *v3;
  ggl::CommonMesh::Pos4Mesh *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;

  v1 = (char *)this + 272;
  if (!*((_QWORD *)this + 34))
  {
    v3 = operator new(0xA8uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_1E42DE5E0;
    v4 = ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v3 + 3), "/DebugSharedUnitRectMesh");
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 34) = v4;
    *((_QWORD *)this + 35) = v3;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = **(_QWORD **)(*(_QWORD *)v1 + 64);
    v9 = 8 * *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(_QWORD *)(v8 + 80) - v10;
    if (v9 != v11)
    {
      if (v9 <= v11)
      {
        if (v9 < v11)
          *(_QWORD *)(v8 + 80) = v10 + v9;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v8 + 72, v9 - v11);
      }
      v12 = *(std::__shared_weak_count **)(v8 + 32);
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *(_QWORD *)(v8 + 120) = 0;
      *(_DWORD *)(v8 + 112) = 0;
      v15 = *(_QWORD *)(v8 + 80) - *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = v15;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = v15;
      v8 = **(_QWORD **)(*(_QWORD *)v1 + 64);
      v9 = 8 * *(_QWORD *)(v8 + 8);
    }
    v17 = *(_QWORD *)(v8 + 64);
    v16 = *(_OWORD **)(v8 + 72);
    *v16 = xmmword_19FFB34C0;
    v16[1] = xmmword_19FFB2D90;
    v16[2] = xmmword_19FFB2D90;
    v16[3] = xmmword_19FFB3950;
    v16[4] = xmmword_19FFB3950;
    v16[5] = xmmword_19FFB3970;
    v16[6] = xmmword_19FFB3970;
    v16[7] = xmmword_19FFB34C0;
    if (v17 > v9)
      v9 = v17;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = v9;
  }
  return v1;
}

uint64_t md::DebugLayerRenderResources::cameraBoxMesh(md::DebugLayerRenderResources *this)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;

  if (!*((_QWORD *)this + 40))
  {
    v3 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
    ggl::BufferData::BufferData((uint64_t)&v3[1], 16, 0, 0, 6, 8);
    v3[9].__shared_weak_owners_ = (uint64_t)"/Debug/CameraBox/VertexData";
    v3[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4Reflection;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7520;
    v3[9].__shared_owners_ = (uint64_t)&unk_1E42B7540;
    v35 = v3 + 1;
    v36 = v3;
    v4 = operator new(0xF8uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E42DF1E8;
    v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), 2, 1, 0, 6, 24);
    *((_DWORD *)v4 + 60) = 0;
    v4[3] = &off_1E42B6B88;
    v4[4] = 2;
    v4[28] = &unk_1E42B6BA8;
    v4[29] = "/Debug/CameraBox/IndexData";
    v33 = v5;
    v34 = (std::__shared_weak_count *)v4;
    *(_QWORD *)&v6 = 0;
    *(_QWORD *)&v7 = 0;
    *((_QWORD *)&v7 + 1) = v3 + 1;
    v30 = v7;
    v31 = 8 * v3[1].__shared_owners_;
    v32 = v3[4].__vftable;
    *(_OWORD *)&v32->~__shared_weak_count = xmmword_19FFB3990;
    *(_OWORD *)&v32->__on_zero_shared = xmmword_19FFB4A80;
    *(_OWORD *)&v32->__on_zero_shared_weak = xmmword_19FFB4A90;
    *(_OWORD *)&v32[1].~__shared_weak_count_0 = xmmword_19FFB3950;
    *(_OWORD *)&v32[1].__get_deleter = xmmword_19FFB4AA0;
    *(_OWORD *)&v32[2].~__shared_weak_count = xmmword_19FFB2F80;
    __asm { FMOV            V2.4S, #1.0 }
    *(_OWORD *)&v32[2].__on_zero_shared = xmmword_19FFB4AB0;
    *(_OWORD *)&v32[2].__on_zero_shared_weak = _Q2;
    *((_QWORD *)&v6 + 1) = v5;
    v28 = v6;
    v29 = (_OWORD *)v4[12];
    *v29 = xmmword_19FFB4AD0;
    v29[1] = xmmword_19FFB4AE0;
    v29[2] = xmmword_19FFB4AF0;
    v13 = operator new(0xA8uLL);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = &off_1E42DE5E0;
    v14 = std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[22],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::CommonMesh::Pos4Mesh*>((uint64_t)(v13 + 3), (uint64_t)"/Debug/CameraBox/Mesh", (uint64_t)&v3[1], v3, &v33);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 40) = v14;
    *((_QWORD *)this + 41) = v13;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v29)
    {
      if ((_QWORD)v28 && *(_BYTE *)(*((_QWORD *)&v28 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v28 + 64))();
      v19 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 56);
      v18 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 64);
      if (v18 == v19)
        v19 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v28 + 1) + 72);
      if (v19)
        v19 = 0;
      if (v18 <= 0x30)
        v18 = 48;
      *(_QWORD *)(*((_QWORD *)&v28 + 1) + 56) = v19;
      *(_QWORD *)(*((_QWORD *)&v28 + 1) + 64) = v18;
    }
    if (v32 && v31)
    {
      if ((_QWORD)v30 && *(_BYTE *)(*((_QWORD *)&v30 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v30 + 64))();
      v21 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 56);
      v20 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 64);
      if (v20 == v21)
        v21 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v30 + 1) + 72);
      if (v21)
        v21 = 0;
      if (v20 <= v31)
        v20 = v31;
      if (v20 == v21)
        v20 = v21 + *(_QWORD *)(*((_QWORD *)&v30 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v30 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v30 + 1) + 56) = v21;
      *(_QWORD *)(*((_QWORD *)&v30 + 1) + 64) = v20;
    }
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v36;
    if (v36)
    {
      v26 = (unint64_t *)&v36->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  return (uint64_t)this + 320;
}

void sub_19F7F782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v18);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 80);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 64);
  _Unwind_Resume(a1);
}

ggl::CommonMesh::Pos4Mesh *std::make_shared[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[20],void>(ggl::CommonMesh::Pos4Mesh **a1)
{
  _QWORD *v2;
  ggl::CommonMesh::Pos4Mesh *result;

  v2 = operator new(0xA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42DE5E0;
  result = ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v2 + 3), "/DebugFootprintMesh");
  *a1 = result;
  a1[1] = (ggl::CommonMesh::Pos4Mesh *)v2;
  return result;
}

void md::DebugRenderLayer::paintModelTiles(md::DebugRenderLayer *this, const md::LayoutContext *a2, float32x2_t *a3, ggl::CommandBuffer *a4)
{
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  int8x8_t v18;
  uint8x8_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  int v28;
  void *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  int v67;
  uint64_t *v68;
  int v69;
  __int16 *v70;
  int v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[15];

  v8 = (_QWORD *)((char *)this + 96);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear((_QWORD *)this + 12);
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  v10 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v9;
  if (v10)
    operator delete(v10);
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 14) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 13) = v12;
  *((_QWORD *)this + 8) = 0;
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 15) = v13;
  *((_DWORD *)this + 32) = *((_DWORD *)this + 22);
  if (v13)
  {
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      v16 = v14 >= v12;
      v15 = v14 % v12;
      if (!v16)
        v15 = v14;
    }
    else
    {
      v15 = v14 & (v12 - 1);
    }
    *(_QWORD *)(*v8 + 8 * v15) = (char *)this + 112;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear((_QWORD *)this + 7);
  v17 = (_QWORD *)*((_QWORD *)a2 + 1);
  v18 = (int8x8_t)v17[1];
  v65 = v8;
  if (!*(_QWORD *)&v18)
    goto LABEL_32;
  v19 = (uint8x8_t)vcnt_s8(v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    v20 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v18 <= 0x99BED48DEFBBD82BLL)
      v20 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v18;
  }
  else
  {
    v20 = (*(_QWORD *)&v18 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v21 = *(_QWORD **)(*v17 + 8 * v20);
  if (!v21)
    goto LABEL_32;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_32;
  if (v19.u32[0] < 2uLL)
  {
    v23 = *(_QWORD *)&v18 - 1;
    while (1)
    {
      v25 = v22[1];
      if (v25 == 0x99BED48DEFBBD82BLL)
      {
        if (v22[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_30;
      }
      else if ((v25 & v23) != v20)
      {
        goto LABEL_32;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_32;
    }
  }
  while (1)
  {
    v24 = v22[1];
    if (v24 == 0x99BED48DEFBBD82BLL)
      break;
    if (v24 >= *(_QWORD *)&v18)
      v24 %= *(_QWORD *)&v18;
    if (v24 != v20)
      goto LABEL_32;
LABEL_19:
    v22 = (_QWORD *)*v22;
    if (!v22)
      goto LABEL_32;
  }
  if (v22[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_19;
LABEL_30:
  v26 = v22[5];
  if (*(_QWORD *)(v26 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_32:
    v68 = 0;
    goto LABEL_33;
  }
  v68 = *(uint64_t **)(v26 + 32);
LABEL_33:
  v27 = &md::DebugRenderLayer::paintModelTiles(md::LayoutContext const&,md::DebugConsole *,ggl::CommandBuffer *)::debugDataTypes;
  do
  {
    v70 = v27;
    v28 = (unsigned __int16)*v27;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v65);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = objc_msgSend(v29, "paintTiles");
    v71 = objc_msgSend(v29, "paintVertices");
    v69 = objc_msgSend(v29, "paintJunctions");
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    switch(v28)
    {
      case 1:
      case 57:
        v35 = objc_msgSend(v29, "paintPolygonTiles");
        v36 = objc_msgSend(v29, "paintCoastlines");
        v30 = objc_msgSend(v29, "paintLoadReason");
        v32 = 0;
        v33 = 0;
        if (v35)
          v34 = 0x100000000;
        else
          v34 = 0;
        if (v36)
          v31 = 0x1000000;
        else
          v31 = 0;
        goto LABEL_68;
      case 2:
        LODWORD(v38) = objc_msgSend(v29, "paintRoadBoundaries");
        v37 = objc_msgSend(v29, "paintRoadTiles");
        v66 = objc_msgSend(v29, "paintLoadReason");
        v38 = v38;

        if ((v37 & 1) != 0)
        {
          v39 = v70;
          v40 = v66;
LABEL_60:
          v48 = 0;
          v31 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0x10000;
        }
        else
        {
          v48 = 0;
          v31 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
LABEL_58:
          v39 = v70;
          v40 = v66;
        }
        break;
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
      case 17:
      case 18:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        goto LABEL_68;
      case 6:
        v41 = objc_msgSend(v29, "paintVenues");
        v31 = 0;
        v32 = 0;
        v30 = 0;
        v33 = 0;
        if (v41)
          v34 = 0x1000000000000;
        else
          v34 = 0;
        goto LABEL_68;
      case 14:
        v42 = objc_msgSend(v29, "paintBuildings");
        v30 = objc_msgSend(v29, "paintLoadReason");
        v31 = 0;
        v32 = 0;
        v33 = 0;
        if (v42)
          v34 = 0x100000000000000;
        else
          v34 = 0;
        goto LABEL_68;
      case 16:
        v43 = objc_msgSend(v29, "drawDebugTransit");
        v30 = objc_msgSend(v29, "paintLoadReason");
        v31 = 0;
        v33 = 0;
        v34 = 0;
        if (v43)
          v32 = 0x100000000;
        else
          v32 = 0;
        goto LABEL_68;
      case 19:
        v44 = objc_msgSend(v29, "paintPointTiles");
        v66 = 0;
        goto LABEL_55;
      case 20:
        v44 = objc_msgSend(v29, "paintPoiTiles");
        v66 = objc_msgSend(v29, "paintLoadReason");
LABEL_55:

        v38 = 0;
        v31 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        if (v44)
          v48 = 0x1000000;
        else
          v48 = 0;
        goto LABEL_58;
      case 44:
        v67 = objc_msgSend(v29, "paintRoadTiles");
        v49 = objc_msgSend(v29, "paintLoadReason");

        v40 = v49;
        v38 = 0;
        v48 = 0;
        v31 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v39 = v70;
        if (v67)
          goto LABEL_60;
        break;
      case 51:
        v50 = objc_msgSend(v29, "paintDaVinciMetaTiles");
        v31 = 0;
        v32 = 0;
        v30 = 0;
        v34 = 0;
        if (v50)
          v33 = 0x1000000000000;
        else
          v33 = 0;
        goto LABEL_68;
      case 64:
        v51 = objc_msgSend(v29, "paintTopographicTiles");
        v31 = 0;
        v32 = 0;
        v30 = 0;
        v33 = 0;
        if (v51)
          v34 = 0x10000000000;
        else
          v34 = 0;
        goto LABEL_68;
      default:
        v32 = 0;
        v33 = 0;
        v34 = 0;
LABEL_68:
        v52 = v30;
        v53 = v32;
        v54 = v29;
        v48 = v34;

        v46 = v33;
        v45 = v53;
        v40 = v52;
        v38 = 0;
        v47 = 0;
        v39 = v70;
        break;
    }
    v55 = 256;
    if (v72)
      v56 = 256;
    else
      v56 = 0;
    v57 = v38 | v47 | v48 | v56;
    v58 = 0x10000000000;
    if (!v40)
      v58 = 0;
    v59 = 0x10000;
    if (!v69)
      v59 = 0;
    if (!v71)
      v55 = 0;
    v60 = v59 | v55 | v46 | v58 | v45;
    *(_QWORD *)v76 = v57;
    v76[14] = BYTE6(v46);
    *(_WORD *)&v76[12] = WORD2(v60);
    *(_DWORD *)&v76[8] = v60 | v31;
    if (v57 | *(_QWORD *)&v76[7])
    {
      md::SceneContext::renderData((md::SceneContext *)&v74, *v68, v28);
      v61 = v74;
      v62 = v75;
      while (1)
      {
        v63 = v61;
        if ((_QWORD)v61 == v62)
          break;
        v73 = *((_QWORD *)&v61 + 1);
        md::DebugRenderLayer::renderTileData((uint64_t)this, a2, v76, *(_QWORD **)(v61 + 112), v28, a4, a3);
        *((_QWORD *)&v61 + 1) = v73;
        v64 = v63 + 144;
        if (v63 + 144 != v73)
        {
          while (!*(_QWORD *)(v64 + 112))
          {
            v64 += 144;
            if (v64 == v73)
            {
              v64 = v73;
              break;
            }
          }
        }
        *(_QWORD *)&v61 = v64;
      }
    }
    v27 = v39 + 1;
  }
  while (v27 != (__int16 *)&unk_1A001A284);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear(v65);
}

void sub_19F7F7EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::DebugRenderLayer::renderTileData(uint64_t a1, md::LayoutContext *a2, _BYTE *a3, _QWORD *a4, int a5, ggl::CommandBuffer *a6, float32x2_t *a7)
{
  void *v12;
  __int32 v13;
  __int32 v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  std::__shared_weak_count *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t prime;
  uint64_t v51;
  int8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  float v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t **v77;
  uint64_t *v78;
  int8x8_t v79;
  uint8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  float v97;
  md::DebugLayerRenderResources **v98;
  uint64_t v99;
  double v100;
  double v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float32x2_t v112;
  float32x2_t v113;
  float v114;
  float v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  float32x2_t *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  ggl::RenderItem *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  float32x2_t *v141;
  uint64_t v142;
  void *v143;
  char *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  ggl::RenderItem *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  float32x2_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  char *v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  ggl::RenderItem *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  float32x2_t *v182;
  uint64_t v183;
  void *v184;
  char *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  uint64_t v197;
  ggl::RenderItem *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  float32x2_t *v203;
  uint64_t v204;
  void *v205;
  char *v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  ggl::RenderItem *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  float32x2_t *v223;
  uint64_t v224;
  void *v225;
  char *v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  ggl::RenderItem *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  float32x2_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  char *v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  ggl::RenderItem *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  float32x2_t *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  char *v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  ggl::RenderItem *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  float32x2_t *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  char *v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  ggl::RenderItem *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  float32x2_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  char *v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  ggl::RenderItem *v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  float32x2_t *v323;
  uint64_t v324;
  void *v325;
  char *v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  _QWORD *v336;
  unint64_t v337;
  ggl::RenderItem *v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  float32x2_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  char *v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  ggl::RenderItem *v358;
  uint64_t v359;
  uint64_t v362;
  _QWORD *v363;
  unint64_t v364;
  float32x2_t *v365;
  uint64_t v366;
  void *v367;
  char *v368;
  uint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  _QWORD *v378;
  unint64_t v379;
  ggl::RenderItem *v380;
  uint64_t *v381;
  double v382;
  double v383;
  float32x2_t v384;
  float32x2_t v389;
  float64x2_t v390;
  float64x2_t v392;
  id v393;
  _QWORD *v394;
  int8x16_t *v395;
  size_t v396;
  double v397;
  int32x2_t v398;
  _BYTE *v399;
  void *v400;
  int8x16_t *v401;
  size_t v402;
  double v403;
  int32x2_t v404;
  void *v405;
  int8x16_t *v406;
  size_t v407;
  double v408;
  int32x2_t v409;
  void *v410;
  int8x16_t *v411;
  size_t v412;
  double v413;
  int32x2_t v414;
  void *v415;
  int8x16_t *v416;
  size_t v417;
  double v418;
  int32x2_t v419;
  void *v420;
  id v421;
  int8x16_t *v422;
  size_t v423;
  double v424;
  int32x2_t v425;
  void *v426;
  int8x16_t *v427;
  size_t v428;
  double v429;
  int32x2_t v430;
  void *v431;
  int8x16_t *v432;
  size_t v433;
  double v434;
  int32x2_t v435;
  void *v436;
  int8x16_t *v437;
  size_t v438;
  double v439;
  int32x2_t v440;
  uint64_t v441;
  unint64_t v442;
  unsigned int v443;
  id v444;
  void *v445;
  uint64_t v446;
  void *v447;
  int32x2_t *v448;
  __int32 v449;
  void *v450;
  int32x2_t v451;
  int v452;
  void **v453;
  uint64_t v454;
  void *v455;
  void **v456;
  void *v457;
  id v458;
  int8x16_t *v459;
  size_t v460;
  double v461;
  int32x2_t v462;
  void *v463;
  int8x16_t *v464;
  size_t v465;
  double v466;
  int32x2_t v467;
  unint64_t *p_shared_owners;
  unint64_t v469;
  int v470;
  float v471;
  uint64_t **v472;
  float v473;
  _QWORD *v474;
  float v475;
  float v476;
  float v477;
  float v478;
  int32x2_t v479;
  float v480;
  float64_t v481;
  float v482;
  float64_t v483;
  id v484;
  uint64_t v485;
  QuadTile *v486;
  _QWORD *v488;
  _BYTE v490[4];
  int32x2_t v491;
  void *__p[2];
  double v493;
  double v494;
  float64x2_t v495;
  double v496;
  double v497;
  double v498;
  double v499;
  double v500;
  double v501;
  float64x2_t v502;
  double v503;
  double v504;
  float32x4_t v505;
  char v506;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "daVinciMetaTileOpacity");
  v14 = v13;
  v15 = a4 + 80;
  v486 = (QuadTile *)(a4 + 21);

  v16 = a4[80];
  if (a5 == 51)
  {
    if (!v16)
    {
      v505.i32[2] = 0;
      v505.i64[0] = 1065353216;
      v505.i32[3] = v14;
      md::DebugRenderLayer::renderSolidQuadTile(a1, a2, v486, &v505, (uint64_t)a6, (uint64_t)a7, (uint64_t)"");
      return;
    }
  }
  else if (!v16)
  {
    return;
  }
  v470 = a5;
  v472 = (uint64_t **)a2;
  v485 = a1;
  v17 = (uint64_t *)(a1 + 56);
  v488 = a4;
  if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(a1 + 56), v16))
  {
    if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(a1 + 96), v16))
    {
      v18 = std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::__emplace_unique_key_args<std::shared_ptr<geo::codec::VectorTile>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<geo::codec::VectorTile> const&>,std::tuple<>>(a1 + 96, v16, a4 + 80);
      v19 = *v15;
      v20 = HIDWORD(*v15);
      v21 = 0x9DDFEA08EB382D69 * ((8 * *v15 + 8) ^ v20);
      v22 = (0x9DDFEA08EB382D69 * (v20 ^ (v21 >> 47) ^ v21)) ^ ((0x9DDFEA08EB382D69 * (v20 ^ (v21 >> 47) ^ v21)) >> 47);
      v23 = 0x9DDFEA08EB382D69 * v22;
      v24 = *(_QWORD *)(a1 + 64);
      if (v24)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          a1 = 0x9DDFEA08EB382D69 * v22;
          if (v23 >= v24)
            a1 = v23 % v24;
        }
        else
        {
          a1 = v23 & (v24 - 1);
        }
        v32 = *(_QWORD **)(*v17 + 8 * a1);
        if (v32)
        {
          v33 = (_QWORD *)*v32;
          if (v33)
          {
            if (v25.u32[0] < 2uLL)
            {
              while (1)
              {
                v35 = v33[1];
                if (v35 == v23)
                {
                  if (v33[2] == v19)
                    goto LABEL_115;
                }
                else if ((v35 & (v24 - 1)) != a1)
                {
                  goto LABEL_31;
                }
                v33 = (_QWORD *)*v33;
                if (!v33)
                  goto LABEL_31;
              }
            }
            do
            {
              v34 = v33[1];
              if (v34 == v23)
              {
                if (v33[2] == v19)
                  goto LABEL_115;
              }
              else
              {
                if (v34 >= v24)
                  v34 %= v24;
                if (v34 != a1)
                  break;
              }
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
        }
      }
LABEL_31:
      v36 = (_QWORD *)(v485 + 72);
      v37 = operator new(0x30uLL);
      v38 = v37;
      v505.i64[0] = (uint64_t)v37;
      v505.i64[1] = v485 + 72;
      *v37 = 0;
      v37[1] = v23;
      v39 = v488[81];
      v37[2] = v19;
      v37[3] = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v37[4] = v18[4];
      v42 = v18[5];
      v37[5] = v42;
      if (v42)
      {
        v43 = (unint64_t *)(v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v506 = 1;
      v45 = (float)(unint64_t)(*(_QWORD *)(v485 + 80) + 1);
      v46 = *(float *)(v485 + 88);
      if (!v24 || (float)(v46 * (float)v24) < v45)
      {
        v47 = 1;
        if (v24 >= 3)
          v47 = (v24 & (v24 - 1)) != 0;
        v48 = v47 | (2 * v24);
        v49 = vcvtps_u32_f32(v45 / v46);
        if (v48 <= v49)
          prime = v49;
        else
          prime = v48;
        if (prime == 1)
        {
          prime = 2;
          v51 = v485;
        }
        else
        {
          v51 = v485;
          if ((prime & (prime - 1)) != 0)
            prime = std::__next_prime(prime);
        }
        v52 = *(int8x8_t *)(v51 + 64);
        if (prime <= *(_QWORD *)&v52)
        {
          if (prime >= *(_QWORD *)&v52)
            goto LABEL_100;
          v53 = vcvtps_u32_f32((float)*(unint64_t *)(v51 + 80) / *(float *)(v51 + 88));
          if (*(_QWORD *)&v52 < 3uLL || (v54 = (uint8x8_t)vcnt_s8(v52), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
          {
            v53 = std::__next_prime(v53);
          }
          else
          {
            v55 = 1 << -(char)__clz(v53 - 1);
            if (v53 >= 2)
              v53 = v55;
          }
          if (prime <= v53)
            prime = v53;
          if (prime >= *(_QWORD *)&v52)
            goto LABEL_100;
        }
        goto LABEL_99;
      }
    }
    else
    {
      v26 = (std::__shared_weak_count *)operator new(0x100uLL);
      v26->__shared_owners_ = 0;
      v26->__shared_weak_owners_ = 0;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBD68;
      __p[0] = md::ModelTileDebugData::ModelTileDebugData((uint64_t)&v26[1], a4 + 80);
      __p[1] = v26;
      v27 = *v15;
      v28 = HIDWORD(*v15);
      v29 = 0x9DDFEA08EB382D69 * ((8 * *v15 + 8) ^ v28);
      v30 = (0x9DDFEA08EB382D69 * (v28 ^ (v29 >> 47) ^ v29)) ^ ((0x9DDFEA08EB382D69 * (v28 ^ (v29 >> 47) ^ v29)) >> 47);
      v23 = 0x9DDFEA08EB382D69 * v30;
      v24 = *(_QWORD *)(a1 + 64);
      if (v24)
      {
        v31 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          a1 = 0x9DDFEA08EB382D69 * v30;
          if (v23 >= v24)
            a1 = v23 % v24;
        }
        else
        {
          a1 = v23 & (v24 - 1);
        }
        v56 = *(_QWORD **)(*v17 + 8 * a1);
        if (v56)
        {
          v57 = (_QWORD *)*v56;
          if (v57)
          {
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                v59 = v57[1];
                if (v59 == v23)
                {
                  if (v57[2] == v27)
                    goto LABEL_478;
                }
                else if ((v59 & (v24 - 1)) != a1)
                {
                  goto LABEL_73;
                }
                v57 = (_QWORD *)*v57;
                if (!v57)
                  goto LABEL_73;
              }
            }
            do
            {
              v58 = v57[1];
              if (v58 == v23)
              {
                if (v57[2] == v27)
                {
LABEL_478:
                  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                  do
                    v469 = __ldaxr(p_shared_owners);
                  while (__stlxr(v469 - 1, p_shared_owners));
                  if (!v469)
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                  goto LABEL_115;
                }
              }
              else
              {
                if (v58 >= v24)
                  v58 %= v24;
                if (v58 != a1)
                  break;
              }
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
        }
      }
LABEL_73:
      v60 = operator new(0x30uLL);
      v38 = v60;
      v36 = (_QWORD *)(v485 + 72);
      v505.i64[0] = (uint64_t)v60;
      v505.i64[1] = v485 + 72;
      *v60 = 0;
      v60[1] = v23;
      v61 = v488[81];
      v60[2] = v27;
      v60[3] = v61;
      if (v61)
      {
        v62 = (unint64_t *)(v61 + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      *((_OWORD *)v60 + 2) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v506 = 1;
      v64 = (float)(unint64_t)(*(_QWORD *)(v485 + 80) + 1);
      v65 = *(float *)(v485 + 88);
      if (!v24 || (float)(v65 * (float)v24) < v64)
      {
        v66 = 1;
        if (v24 >= 3)
          v66 = (v24 & (v24 - 1)) != 0;
        v67 = v66 | (2 * v24);
        v68 = vcvtps_u32_f32(v64 / v65);
        if (v67 <= v68)
          prime = v68;
        else
          prime = v67;
        if (prime == 1)
        {
          prime = 2;
          v51 = v485;
        }
        else
        {
          v51 = v485;
          if ((prime & (prime - 1)) != 0)
            prime = std::__next_prime(prime);
        }
        v69 = *(int8x8_t *)(v51 + 64);
        if (prime <= *(_QWORD *)&v69)
        {
          if (prime >= *(_QWORD *)&v69)
            goto LABEL_100;
          v70 = vcvtps_u32_f32((float)*(unint64_t *)(v51 + 80) / *(float *)(v51 + 88));
          if (*(_QWORD *)&v69 < 3uLL || (v71 = (uint8x8_t)vcnt_s8(v69), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
          {
            v70 = std::__next_prime(v70);
          }
          else
          {
            v72 = 1 << -(char)__clz(v70 - 1);
            if (v70 >= 2)
              v70 = v72;
          }
          if (prime <= v70)
            prime = v70;
          if (prime >= *(_QWORD *)&v69)
            goto LABEL_100;
        }
LABEL_99:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v17, prime);
LABEL_100:
        v24 = *(_QWORD *)(v51 + 64);
        if ((v24 & (v24 - 1)) != 0)
        {
          if (v23 >= v24)
            a1 = v23 % v24;
          else
            a1 = v23;
        }
        else
        {
          a1 = (v24 - 1) & v23;
        }
      }
    }
    v73 = *v17;
    v74 = *(_QWORD **)(*v17 + 8 * a1);
    if (v74)
    {
      *v38 = *v74;
      a4 = v488;
    }
    else
    {
      *v38 = *v36;
      *v36 = v38;
      *(_QWORD *)(v73 + 8 * a1) = v36;
      a4 = v488;
      if (!*v38)
      {
LABEL_114:
        ++*(_QWORD *)(v485 + 80);
        goto LABEL_115;
      }
      v75 = *(_QWORD *)(*v38 + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v75 >= v24)
          v75 %= v24;
      }
      else
      {
        v75 &= v24 - 1;
      }
      v74 = (_QWORD *)(*v17 + 8 * v75);
    }
    *v74 = v38;
    goto LABEL_114;
  }
LABEL_115:
  v76 = (_QWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::__emplace_unique_key_args<std::shared_ptr<geo::codec::VectorTile>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<geo::codec::VectorTile> const&>,std::tuple<>>((uint64_t)v17, *v15, v15)[4];
  v77 = v472;
  v78 = v472[1];
  v79 = (int8x8_t)v78[1];
  v471 = *(float *)&v14;
  if (!*(_QWORD *)&v79)
  {
    v82 = 0;
    goto LABEL_162;
  }
  v80 = (uint8x8_t)vcnt_s8(v79);
  v80.i16[0] = vaddlv_u8(v80);
  if (v80.u32[0] > 1uLL)
  {
    v81 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v79 <= 0x1AF456233693CD46uLL)
      v81 = 0x1AF456233693CD46uLL % *(_QWORD *)&v79;
  }
  else
  {
    v81 = (*(_QWORD *)&v79 - 1) & 0x1AF456233693CD46;
  }
  v83 = *v78;
  v84 = *(_QWORD **)(v83 + 8 * v81);
  if (!v84)
    goto LABEL_139;
  v85 = (_QWORD *)*v84;
  if (!v85)
    goto LABEL_139;
  if (v80.u32[0] < 2uLL)
  {
    while (1)
    {
      v87 = v85[1];
      if (v87 == 0x1AF456233693CD46)
      {
        if (v85[2] == 0x1AF456233693CD46)
          goto LABEL_137;
      }
      else if ((v87 & (*(_QWORD *)&v79 - 1)) != v81)
      {
        goto LABEL_139;
      }
      v85 = (_QWORD *)*v85;
      if (!v85)
        goto LABEL_139;
    }
  }
  while (1)
  {
    v86 = v85[1];
    if (v86 == 0x1AF456233693CD46)
      break;
    if (v86 >= *(_QWORD *)&v79)
      v86 %= *(_QWORD *)&v79;
    if (v86 != v81)
      goto LABEL_139;
LABEL_126:
    v85 = (_QWORD *)*v85;
    if (!v85)
      goto LABEL_139;
  }
  if (v85[2] != 0x1AF456233693CD46)
    goto LABEL_126;
LABEL_137:
  v88 = v85[5];
  if (*(_QWORD *)(v88 + 8) == 0x1AF456233693CD46)
  {
    v82 = *(_QWORD *)(v88 + 32);
    goto LABEL_140;
  }
LABEL_139:
  v82 = 0;
LABEL_140:
  if (v80.u32[0] > 1uLL)
  {
    v89 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v79 <= 0x3070CB6B3C7F21D3uLL)
      v89 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v79;
  }
  else
  {
    v89 = (*(_QWORD *)&v79 - 1) & 0x3070CB6B3C7F21D3;
  }
  v90 = *(_QWORD **)(v83 + 8 * v89);
  if (!v90)
    goto LABEL_162;
  v91 = (_QWORD *)*v90;
  if (!v91)
    goto LABEL_162;
  if (v80.u32[0] < 2uLL)
  {
    v92 = *(_QWORD *)&v79 - 1;
    while (1)
    {
      v94 = v91[1];
      if (v94 == 0x3070CB6B3C7F21D3)
      {
        if (v91[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_160;
      }
      else if ((v94 & v92) != v89)
      {
        goto LABEL_162;
      }
      v91 = (_QWORD *)*v91;
      if (!v91)
        goto LABEL_162;
    }
  }
  while (2)
  {
    v93 = v91[1];
    if (v93 != 0x3070CB6B3C7F21D3)
    {
      if (v93 >= *(_QWORD *)&v79)
        v93 %= *(_QWORD *)&v79;
      if (v93 != v89)
        goto LABEL_162;
      goto LABEL_149;
    }
    if (v91[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_149:
      v91 = (_QWORD *)*v91;
      if (!v91)
        goto LABEL_162;
      continue;
    }
    break;
  }
LABEL_160:
  v95 = v91[5];
  if (*(_QWORD *)(v95 + 8) == 0x3070CB6B3C7F21D3)
  {
    v96 = *(uint64_t **)(v95 + 32);
    goto LABEL_163;
  }
LABEL_162:
  v96 = 0;
LABEL_163:
  v97 = 0.0;
  if (geo::codec::VectorTile::lineVertices((geo::codec::VectorTile *)*v15))
  {
    v98 = (md::DebugLayerRenderResources **)v485;
    if (*(_QWORD *)(geo::codec::VectorTile::lineVertices((geo::codec::VectorTile *)*v15) + 24))
      v97 = 1.0 / *((float *)a4 + 156);
  }
  else
  {
    v98 = (md::DebugLayerRenderResources **)v485;
  }
  md::LayoutContext::frameState((md::LayoutContext *)v472);
  v100 = v97;
  md::GeometryLogic::tileMatrix((md::GeometryLogic *)&v505, *(unsigned __int8 *)(v99 + 128) - 1 < 3, v486, v97, v101);
  gm::operator*<double,4,4,4>((double *)__p, (double *)(v82 + 808), (double *)v505.i64);
  v102 = *(double *)__p;
  v473 = v102;
  v103 = *(double *)&__p[1];
  v104 = v493;
  v105 = v494;
  v106 = v496;
  v482 = v106;
  v107 = v497;
  v108 = v498;
  v109 = v499;
  v480 = v109;
  v110 = v500;
  v111 = v501;
  v477 = v111;
  v478 = v108;
  v112 = vcvt_f32_f64(v495);
  v113 = vcvt_f32_f64(v502);
  v114 = v503;
  v475 = v114;
  v476 = v110;
  v115 = v504;
  v116 = a3;
  v474 = v76;
  if (a3[2])
  {
    v117 = v76[16];
    if (v117
      && *(_QWORD *)(**(_QWORD **)(v117 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v117 + 64) + 48)
                                                      - *(_QWORD *)(**(_QWORD **)(v117 + 64) + 40))
    {
      v118 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
      v119 = *(_QWORD **)(*(_QWORD *)(v118 + 64) + 16);
      v120 = v119[1];
      v121 = (float32x2_t *)v119[9];
      v121->f32[0] = v473;
      v121->f32[1] = v103;
      v121[1].f32[0] = v104;
      v121[1].f32[1] = v105;
      v121[2] = v112;
      v121[3].f32[0] = v482;
      v121[3].f32[1] = v107;
      v121[4].f32[0] = v478;
      v121[4].f32[1] = v480;
      v121[5].f32[0] = v476;
      v121[5].f32[1] = v477;
      v121[6] = v113;
      v121[7].f32[0] = v475;
      v121[7].f32[1] = v115;
      if (v119[8] > v120)
        v120 = v119[8];
      v119[7] = 0;
      v119[8] = v120;
      md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, v100);
      v122 = *(_QWORD *)(v118 + 64);
      v123 = __p[0];
      v124 = (char *)__p[1];
      *(void **)(v122 + 32) = __p[0];
      *(_QWORD *)(v122 + 40) = 0;
      v125 = *(_QWORD *)(v118 + 160);
      if (v124)
      {
        v126 = (unint64_t *)(v124 + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      v128 = *(std::__shared_weak_count **)(v125 + 40);
      *(_QWORD *)(v125 + 32) = v123;
      *(_QWORD *)(v125 + 40) = v124;
      if (v128)
      {
        v129 = (unint64_t *)&v128->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v131 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v132 = (unint64_t *)((char *)__p[1] + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      v134 = **(_QWORD ***)(v118 + 64);
      v135 = v134[1];
      *(_OWORD *)v134[9] = xmmword_19FFB2D90;
      if (v134[8] > v135)
        v135 = v134[8];
      v134[7] = 0;
      v134[8] = v135;
      v136 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
      *((_QWORD *)v136 + 8) = v117;
      *((_QWORD *)v136 + 4) = v118;
      *((_QWORD *)v136 + 3) = *((_QWORD *)v98[6] + 21);
      ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v136);
      v116 = a3;
      v76 = v474;
    }
    v137 = v76[17];
    if (v137
      && *(_QWORD *)(**(_QWORD **)(v137 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v137 + 64) + 48)
                                                      - *(_QWORD *)(**(_QWORD **)(v137 + 64) + 40))
    {
      v138 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
      v139 = *(_QWORD **)(*(_QWORD *)(v138 + 64) + 16);
      v140 = v139[1];
      v141 = (float32x2_t *)v139[9];
      v141->f32[0] = v473;
      v141->f32[1] = v103;
      v141[1].f32[0] = v104;
      v141[1].f32[1] = v105;
      v141[2] = v112;
      v141[3].f32[0] = v482;
      v141[3].f32[1] = v107;
      v141[4].f32[0] = v478;
      v141[4].f32[1] = v480;
      v141[5].f32[0] = v476;
      v141[5].f32[1] = v477;
      v141[6] = v113;
      v141[7].f32[0] = v475;
      v141[7].f32[1] = v115;
      if (v139[8] > v140)
        v140 = v139[8];
      v139[7] = 0;
      v139[8] = v140;
      md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, v100);
      v142 = *(_QWORD *)(v138 + 64);
      v143 = __p[0];
      v144 = (char *)__p[1];
      *(void **)(v142 + 32) = __p[0];
      *(_QWORD *)(v142 + 40) = 0;
      v145 = *(_QWORD *)(v138 + 160);
      if (v144)
      {
        v146 = (unint64_t *)(v144 + 8);
        do
          v147 = __ldxr(v146);
        while (__stxr(v147 + 1, v146));
      }
      v148 = *(std::__shared_weak_count **)(v145 + 40);
      *(_QWORD *)(v145 + 32) = v143;
      *(_QWORD *)(v145 + 40) = v144;
      if (v148)
      {
        v149 = (unint64_t *)&v148->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v152 = (unint64_t *)((char *)__p[1] + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = **(_QWORD ***)(v138 + 64);
      v155 = v154[1];
      *(_OWORD *)v154[9] = xmmword_19FFB3CB0;
      if (v154[8] > v155)
        v155 = v154[8];
      v154[7] = 0;
      v154[8] = v155;
      v156 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
      *((_QWORD *)v156 + 8) = v137;
      *((_QWORD *)v156 + 4) = v138;
      *((_QWORD *)v156 + 3) = *((_QWORD *)v98[6] + 21);
      ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v156);
      v116 = a3;
      v76 = v474;
    }
  }
  if (v116[3])
  {
    v157 = v76[22];
    if (v157)
    {
      if (*(_QWORD *)(**(_QWORD **)(v157 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v157 + 64) + 48)
                                                        - *(_QWORD *)(**(_QWORD **)(v157 + 64) + 40))
      {
        v158 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 17));
        v159 = **(_QWORD ***)(v158 + 64);
        v160 = v159[1];
        v161 = (float32x2_t *)v159[9];
        v161->f32[0] = v473;
        v161->f32[1] = v103;
        v161[1].f32[0] = v104;
        v161[1].f32[1] = v105;
        v161[2] = v112;
        v161[3].f32[0] = v482;
        v161[3].f32[1] = v107;
        v161[4].f32[0] = v478;
        v161[4].f32[1] = v480;
        v161[5].f32[0] = v476;
        v161[5].f32[1] = v477;
        v161[6] = v113;
        v161[7].f32[0] = v475;
        v161[7].f32[1] = v115;
        v162 = v159[8];
        v163 = v159[9];
        if (v162 <= v160)
          v162 = v160;
        v159[7] = 0;
        *(_OWORD *)(v163 + 80) = xmmword_19FFB4B00;
        if (v162 > v160)
          v160 = v162;
        v159[8] = v160;
        md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
        v164 = *(_QWORD *)(v158 + 64);
        v165 = __p[0];
        v166 = (char *)__p[1];
        *(void **)(v164 + 16) = __p[0];
        *(_QWORD *)(v164 + 24) = 0;
        v167 = *(_QWORD *)(v158 + 160);
        if (v166)
        {
          v168 = (unint64_t *)(v166 + 8);
          do
            v169 = __ldxr(v168);
          while (__stxr(v169 + 1, v168));
        }
        v170 = *(std::__shared_weak_count **)(v167 + 24);
        *(_QWORD *)(v167 + 16) = v165;
        *(_QWORD *)(v167 + 24) = v166;
        if (v170)
        {
          v171 = (unint64_t *)&v170->__shared_owners_;
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        v173 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v174 = (unint64_t *)((char *)__p[1] + 8);
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v176 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
        *((_QWORD *)v176 + 8) = v157;
        *((_QWORD *)v176 + 4) = v158;
        *((_QWORD *)v176 + 3) = *((_QWORD *)v98[6] + 23);
        ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v176);
        v116 = a3;
        v76 = v474;
      }
    }
  }
  v177 = v116[6];
  if (v116[4] || v116[8] || v116[6] || v116[7])
  {
    v178 = v76[18];
    if (v178
      && *(_QWORD *)(**(_QWORD **)(v178 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v178 + 64) + 48)
                                                      - *(_QWORD *)(**(_QWORD **)(v178 + 64) + 40))
    {
      v179 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
      v180 = *(_QWORD **)(*(_QWORD *)(v179 + 64) + 16);
      v181 = v180[1];
      v182 = (float32x2_t *)v180[9];
      v182->f32[0] = v473;
      v182->f32[1] = v103;
      v182[1].f32[0] = v104;
      v182[1].f32[1] = v105;
      v182[2] = v112;
      v182[3].f32[0] = v482;
      v182[3].f32[1] = v107;
      v182[4].f32[0] = v478;
      v182[4].f32[1] = v480;
      v182[5].f32[0] = v476;
      v182[5].f32[1] = v477;
      v182[6] = v113;
      v182[7].f32[0] = v475;
      v182[7].f32[1] = v115;
      if (v180[8] > v181)
        v181 = v180[8];
      v180[7] = 0;
      v180[8] = v181;
      md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
      v183 = *(_QWORD *)(v179 + 64);
      v184 = __p[0];
      v185 = (char *)__p[1];
      *(void **)(v183 + 32) = __p[0];
      *(_QWORD *)(v183 + 40) = 0;
      v186 = *(_QWORD *)(v179 + 160);
      if (v185)
      {
        v187 = (unint64_t *)(v185 + 8);
        do
          v188 = __ldxr(v187);
        while (__stxr(v188 + 1, v187));
      }
      v189 = *(std::__shared_weak_count **)(v186 + 40);
      *(_QWORD *)(v186 + 32) = v184;
      *(_QWORD *)(v186 + 40) = v185;
      if (v189)
      {
        v190 = (unint64_t *)&v189->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      v192 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v193 = (unint64_t *)((char *)__p[1] + 8);
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v195 = **(_QWORD ***)(v179 + 64);
      v196 = v195[1];
      v197 = v195[9];
      *(_DWORD *)v197 = 1065353216;
      *(int8x8_t *)(v197 + 4) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v470 == 57), 0x1FuLL)), (int8x8_t)1056964608, (int8x8_t)0x3F00000000000000);
      *(_DWORD *)(v197 + 12) = 1065353216;
      if (v195[8] > v196)
        v196 = v195[8];
      v195[7] = 0;
      v195[8] = v196;
      v198 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
      *((_QWORD *)v198 + 8) = v178;
      *((_QWORD *)v198 + 4) = v179;
      *((_QWORD *)v198 + 3) = *((_QWORD *)v98[6] + 21);
      ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v198);
      v116 = a3;
      v177 = a3[6];
      v76 = v474;
    }
    if (v177)
    {
      v199 = v76[19];
      if (v199
        && *(_QWORD *)(**(_QWORD **)(v199 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v199 + 64) + 48)
                                                        - *(_QWORD *)(**(_QWORD **)(v199 + 64) + 40))
      {
        v200 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
        v201 = *(_QWORD **)(*(_QWORD *)(v200 + 64) + 16);
        v202 = v201[1];
        v203 = (float32x2_t *)v201[9];
        v203->f32[0] = v473;
        v203->f32[1] = v103;
        v203[1].f32[0] = v104;
        v203[1].f32[1] = v105;
        v203[2] = v112;
        v203[3].f32[0] = v482;
        v203[3].f32[1] = v107;
        v203[4].f32[0] = v478;
        v203[4].f32[1] = v480;
        v203[5].f32[0] = v476;
        v203[5].f32[1] = v477;
        v203[6] = v113;
        v203[7].f32[0] = v475;
        v203[7].f32[1] = v115;
        if (v201[8] > v202)
          v202 = v201[8];
        v201[7] = 0;
        v201[8] = v202;
        md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
        v204 = *(_QWORD *)(v200 + 64);
        v205 = __p[0];
        v206 = (char *)__p[1];
        *(void **)(v204 + 32) = __p[0];
        *(_QWORD *)(v204 + 40) = 0;
        v207 = *(_QWORD *)(v200 + 160);
        if (v206)
        {
          v208 = (unint64_t *)(v206 + 8);
          do
            v209 = __ldxr(v208);
          while (__stxr(v209 + 1, v208));
        }
        v210 = *(std::__shared_weak_count **)(v207 + 40);
        *(_QWORD *)(v207 + 32) = v205;
        *(_QWORD *)(v207 + 40) = v206;
        if (v210)
        {
          v211 = (unint64_t *)&v210->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        v213 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v214 = (unint64_t *)((char *)__p[1] + 8);
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v213);
          }
        }
        v216 = **(_QWORD ***)(v200 + 64);
        v217 = v216[1];
        *(_OWORD *)v216[9] = xmmword_19FFB4B10;
        if (v216[8] > v217)
          v217 = v216[8];
        v216[7] = 0;
        v216[8] = v217;
        v218 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
        *((_QWORD *)v218 + 8) = v199;
        *((_QWORD *)v218 + 4) = v200;
        *((_QWORD *)v218 + 3) = *((_QWORD *)v98[6] + 21);
        ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v218);
        v116 = a3;
        v76 = v474;
      }
      v219 = v76[20];
      if (v219
        && *(_QWORD *)(**(_QWORD **)(v219 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v219 + 64) + 48)
                                                        - *(_QWORD *)(**(_QWORD **)(v219 + 64) + 40))
      {
        v220 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
        v221 = *(_QWORD **)(*(_QWORD *)(v220 + 64) + 16);
        v222 = v221[1];
        v223 = (float32x2_t *)v221[9];
        v223->f32[0] = v473;
        v223->f32[1] = v103;
        v223[1].f32[0] = v104;
        v223[1].f32[1] = v105;
        v223[2] = v112;
        v223[3].f32[0] = v482;
        v223[3].f32[1] = v107;
        v223[4].f32[0] = v478;
        v223[4].f32[1] = v480;
        v223[5].f32[0] = v476;
        v223[5].f32[1] = v477;
        v223[6] = v113;
        v223[7].f32[0] = v475;
        v223[7].f32[1] = v115;
        if (v221[8] > v222)
          v222 = v221[8];
        v221[7] = 0;
        v221[8] = v222;
        md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
        v224 = *(_QWORD *)(v220 + 64);
        v225 = __p[0];
        v226 = (char *)__p[1];
        *(void **)(v224 + 32) = __p[0];
        *(_QWORD *)(v224 + 40) = 0;
        v227 = *(_QWORD *)(v220 + 160);
        if (v226)
        {
          v228 = (unint64_t *)(v226 + 8);
          do
            v229 = __ldxr(v228);
          while (__stxr(v229 + 1, v228));
        }
        v230 = *(std::__shared_weak_count **)(v227 + 40);
        *(_QWORD *)(v227 + 32) = v225;
        *(_QWORD *)(v227 + 40) = v226;
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v233 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v234 = (unint64_t *)((char *)__p[1] + 8);
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        v236 = **(_QWORD ***)(v220 + 64);
        v237 = v236[1];
        *(_OWORD *)v236[9] = xmmword_19FFB4B20;
        if (v236[8] > v237)
          v237 = v236[8];
        v236[7] = 0;
        v236[8] = v237;
        v238 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
        *((_QWORD *)v238 + 8) = v219;
        *((_QWORD *)v238 + 4) = v220;
        *((_QWORD *)v238 + 3) = *((_QWORD *)v98[6] + 21);
        ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v238);
        v116 = a3;
        v76 = v474;
      }
    }
  }
  if (v116[9])
  {
    v239 = v76[23];
    if (v239)
    {
      if (*(_QWORD *)(**(_QWORD **)(v239 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v239 + 64) + 48)
                                                        - *(_QWORD *)(**(_QWORD **)(v239 + 64) + 40))
      {
        v240 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 17));
        v241 = **(_QWORD ***)(v240 + 64);
        v242 = v241[1];
        v243 = (float32x2_t *)v241[9];
        v243->f32[0] = v473;
        v243->f32[1] = v103;
        v243[1].f32[0] = v104;
        v243[1].f32[1] = v105;
        v243[2] = v112;
        v243[3].f32[0] = v482;
        v243[3].f32[1] = v107;
        v243[4].f32[0] = v478;
        v243[4].f32[1] = v480;
        v243[5].f32[0] = v476;
        v243[5].f32[1] = v477;
        v243[6] = v113;
        v243[7].f32[0] = v475;
        v243[7].f32[1] = v115;
        v244 = v241[8];
        v245 = v241[9];
        if (v244 <= v242)
          v244 = v242;
        v241[7] = 0;
        *(_OWORD *)(v245 + 80) = xmmword_19FFB4B00;
        if (v244 > v242)
          v242 = v244;
        v241[8] = v242;
        md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
        v246 = *(_QWORD *)(v240 + 64);
        v247 = __p[0];
        v248 = (char *)__p[1];
        *(void **)(v246 + 16) = __p[0];
        *(_QWORD *)(v246 + 24) = 0;
        v249 = *(_QWORD *)(v240 + 160);
        if (v248)
        {
          v250 = (unint64_t *)(v248 + 8);
          do
            v251 = __ldxr(v250);
          while (__stxr(v251 + 1, v250));
        }
        v252 = *(std::__shared_weak_count **)(v249 + 24);
        *(_QWORD *)(v249 + 16) = v247;
        *(_QWORD *)(v249 + 24) = v248;
        if (v252)
        {
          v253 = (unint64_t *)&v252->__shared_owners_;
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
          }
        }
        v255 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v256 = (unint64_t *)((char *)__p[1] + 8);
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        v258 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
        *((_QWORD *)v258 + 8) = v239;
        *((_QWORD *)v258 + 4) = v240;
        *((_QWORD *)v258 + 3) = *((_QWORD *)v98[6] + 23);
        ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v258);
        v116 = a3;
        v76 = v474;
      }
    }
  }
  if (v116[10])
  {
    v259 = v76[24];
    if (v259
      && *(_QWORD *)(**(_QWORD **)(v259 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v259 + 64) + 48)
                                                      - *(_QWORD *)(**(_QWORD **)(v259 + 64) + 40))
    {
      v260 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 17));
      v261 = **(_QWORD ***)(v260 + 64);
      v262 = v261[1];
      v263 = (float32x2_t *)v261[9];
      v263->f32[0] = v473;
      v263->f32[1] = v103;
      v263[1].f32[0] = v104;
      v263[1].f32[1] = v105;
      v263[2] = v112;
      v263[3].f32[0] = v482;
      v263[3].f32[1] = v107;
      v263[4].f32[0] = v478;
      v263[4].f32[1] = v480;
      v263[5].f32[0] = v476;
      v263[5].f32[1] = v477;
      v263[6] = v113;
      v263[7].f32[0] = v475;
      v263[7].f32[1] = v115;
      v264 = v261[8];
      v265 = v261[9];
      if (v264 <= v262)
        v264 = v262;
      v261[7] = 0;
      *(_OWORD *)(v265 + 80) = xmmword_19FFB3480;
      if (v264 > v262)
        v262 = v264;
      v261[8] = v262;
      md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
      v266 = *(_QWORD *)(v260 + 64);
      v267 = __p[0];
      v268 = (char *)__p[1];
      *(void **)(v266 + 16) = __p[0];
      *(_QWORD *)(v266 + 24) = 0;
      v269 = *(_QWORD *)(v260 + 160);
      if (v268)
      {
        v270 = (unint64_t *)(v268 + 8);
        do
          v271 = __ldxr(v270);
        while (__stxr(v271 + 1, v270));
      }
      v272 = *(std::__shared_weak_count **)(v269 + 24);
      *(_QWORD *)(v269 + 16) = v267;
      *(_QWORD *)(v269 + 24) = v268;
      if (v272)
      {
        v273 = (unint64_t *)&v272->__shared_owners_;
        do
          v274 = __ldaxr(v273);
        while (__stlxr(v274 - 1, v273));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
        }
      }
      v275 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v276 = (unint64_t *)((char *)__p[1] + 8);
        do
          v277 = __ldaxr(v276);
        while (__stlxr(v277 - 1, v276));
        if (!v277)
        {
          ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
          std::__shared_weak_count::__release_weak(v275);
        }
      }
      v278 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
      *((_QWORD *)v278 + 8) = v259;
      *((_QWORD *)v278 + 4) = v260;
      *((_QWORD *)v278 + 3) = *((_QWORD *)v98[6] + 23);
      ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v278);
      v116 = a3;
      v76 = v474;
    }
    v279 = v76[26];
    if (v279
      && *(_QWORD *)(**(_QWORD **)(v279 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v279 + 64) + 48)
                                                      - *(_QWORD *)(**(_QWORD **)(v279 + 64) + 40))
    {
      v280 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 17));
      v281 = **(_QWORD ***)(v280 + 64);
      v282 = v281[1];
      v283 = (float32x2_t *)v281[9];
      v283->f32[0] = v473;
      v283->f32[1] = v103;
      v283[1].f32[0] = v104;
      v283[1].f32[1] = v105;
      v283[2] = v112;
      v283[3].f32[0] = v482;
      v283[3].f32[1] = v107;
      v283[4].f32[0] = v478;
      v283[4].f32[1] = v480;
      v283[5].f32[0] = v476;
      v283[5].f32[1] = v477;
      v283[6] = v113;
      v283[7].f32[0] = v475;
      v283[7].f32[1] = v115;
      v284 = v281[8];
      v285 = v281[9];
      if (v284 <= v282)
        v284 = v282;
      v281[7] = 0;
      *(_OWORD *)(v285 + 80) = xmmword_19FFB2D90;
      if (v284 > v282)
        v282 = v284;
      v281[8] = v282;
      md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
      v286 = *(_QWORD *)(v280 + 64);
      v287 = __p[0];
      v288 = (char *)__p[1];
      *(void **)(v286 + 16) = __p[0];
      *(_QWORD *)(v286 + 24) = 0;
      v289 = *(_QWORD *)(v280 + 160);
      if (v288)
      {
        v290 = (unint64_t *)(v288 + 8);
        do
          v291 = __ldxr(v290);
        while (__stxr(v291 + 1, v290));
      }
      v292 = *(std::__shared_weak_count **)(v289 + 24);
      *(_QWORD *)(v289 + 16) = v287;
      *(_QWORD *)(v289 + 24) = v288;
      if (v292)
      {
        v293 = (unint64_t *)&v292->__shared_owners_;
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
      }
      v295 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v296 = (unint64_t *)((char *)__p[1] + 8);
        do
          v297 = __ldaxr(v296);
        while (__stlxr(v297 - 1, v296));
        if (!v297)
        {
          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
          std::__shared_weak_count::__release_weak(v295);
        }
      }
      v298 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
      *((_QWORD *)v298 + 8) = v279;
      *((_QWORD *)v298 + 4) = v280;
      *((_QWORD *)v298 + 3) = *((_QWORD *)v98[6] + 23);
      ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v298);
      v116 = a3;
      v76 = v474;
    }
    v299 = v76[25];
    if (v299
      && *(_QWORD *)(**(_QWORD **)(v299 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v299 + 64) + 48)
                                                      - *(_QWORD *)(**(_QWORD **)(v299 + 64) + 40))
    {
      v300 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 17));
      v301 = **(_QWORD ***)(v300 + 64);
      v302 = v301[1];
      v303 = (float32x2_t *)v301[9];
      v303->f32[0] = v473;
      v303->f32[1] = v103;
      v303[1].f32[0] = v104;
      v303[1].f32[1] = v105;
      v303[2] = v112;
      v303[3].f32[0] = v482;
      v303[3].f32[1] = v107;
      v303[4].f32[0] = v478;
      v303[4].f32[1] = v480;
      v303[5].f32[0] = v476;
      v303[5].f32[1] = v477;
      v303[6] = v113;
      v303[7].f32[0] = v475;
      v303[7].f32[1] = v115;
      v304 = v301[8];
      v305 = v301[9];
      if (v304 <= v302)
        v304 = v302;
      v301[7] = 0;
      *(_OWORD *)(v305 + 80) = xmmword_19FFB3B40;
      if (v304 > v302)
        v302 = v304;
      v301[8] = v302;
      md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
      v306 = *(_QWORD *)(v300 + 64);
      v307 = __p[0];
      v308 = (char *)__p[1];
      *(void **)(v306 + 16) = __p[0];
      *(_QWORD *)(v306 + 24) = 0;
      v309 = *(_QWORD *)(v300 + 160);
      if (v308)
      {
        v310 = (unint64_t *)(v308 + 8);
        do
          v311 = __ldxr(v310);
        while (__stxr(v311 + 1, v310));
      }
      v312 = *(std::__shared_weak_count **)(v309 + 24);
      *(_QWORD *)(v309 + 16) = v307;
      *(_QWORD *)(v309 + 24) = v308;
      if (v312)
      {
        v313 = (unint64_t *)&v312->__shared_owners_;
        do
          v314 = __ldaxr(v313);
        while (__stlxr(v314 - 1, v313));
        if (!v314)
        {
          ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
          std::__shared_weak_count::__release_weak(v312);
        }
      }
      v315 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v316 = (unint64_t *)((char *)__p[1] + 8);
        do
          v317 = __ldaxr(v316);
        while (__stlxr(v317 - 1, v316));
        if (!v317)
        {
          ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
          std::__shared_weak_count::__release_weak(v315);
        }
      }
      v318 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
      *((_QWORD *)v318 + 8) = v299;
      *((_QWORD *)v318 + 4) = v300;
      *((_QWORD *)v318 + 3) = *((_QWORD *)v98[6] + 23);
      ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v318);
      v116 = a3;
      v76 = v474;
    }
  }
  if (v116[11])
  {
    v319 = v76[21];
    if (v319)
    {
      if (*(_QWORD *)(**(_QWORD **)(v319 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v319 + 64) + 48)
                                                        - *(_QWORD *)(**(_QWORD **)(v319 + 64) + 40))
      {
        v320 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
        v321 = *(_QWORD **)(*(_QWORD *)(v320 + 64) + 16);
        v322 = v321[1];
        v323 = (float32x2_t *)v321[9];
        v323->f32[0] = v473;
        v323->f32[1] = v103;
        v323[1].f32[0] = v104;
        v323[1].f32[1] = v105;
        v323[2] = v112;
        v323[3].f32[0] = v482;
        v323[3].f32[1] = v107;
        v323[4].f32[0] = v478;
        v323[4].f32[1] = v480;
        v323[5].f32[0] = v476;
        v323[5].f32[1] = v477;
        v323[6] = v113;
        v323[7].f32[0] = v475;
        v323[7].f32[1] = v115;
        if (v321[8] > v322)
          v322 = v321[8];
        v321[7] = 0;
        v321[8] = v322;
        md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
        v324 = *(_QWORD *)(v320 + 64);
        v325 = __p[0];
        v326 = (char *)__p[1];
        *(void **)(v324 + 32) = __p[0];
        *(_QWORD *)(v324 + 40) = 0;
        v327 = *(_QWORD *)(v320 + 160);
        if (v326)
        {
          v328 = (unint64_t *)(v326 + 8);
          do
            v329 = __ldxr(v328);
          while (__stxr(v329 + 1, v328));
        }
        v330 = *(std::__shared_weak_count **)(v327 + 40);
        *(_QWORD *)(v327 + 32) = v325;
        *(_QWORD *)(v327 + 40) = v326;
        if (v330)
        {
          v331 = (unint64_t *)&v330->__shared_owners_;
          do
            v332 = __ldaxr(v331);
          while (__stlxr(v332 - 1, v331));
          if (!v332)
          {
            ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
            std::__shared_weak_count::__release_weak(v330);
          }
        }
        v333 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v334 = (unint64_t *)((char *)__p[1] + 8);
          do
            v335 = __ldaxr(v334);
          while (__stlxr(v335 - 1, v334));
          if (!v335)
          {
            ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
            std::__shared_weak_count::__release_weak(v333);
          }
        }
        v336 = **(_QWORD ***)(v320 + 64);
        v337 = v336[1];
        *(_OWORD *)v336[9] = xmmword_19FFB4810;
        if (v336[8] > v337)
          v337 = v336[8];
        v336[7] = 0;
        v336[8] = v337;
        v338 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
        *((_QWORD *)v338 + 8) = v319;
        *((_QWORD *)v338 + 4) = v320;
        *((_QWORD *)v338 + 3) = *((_QWORD *)v98[6] + 21);
        ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v338);
        v116 = a3;
        v76 = v474;
      }
    }
  }
  if (v116[12])
  {
    v339 = v76[27];
    if (v339)
    {
      if (*(_QWORD *)(**(_QWORD **)(v339 + 64) + 8) <= *(_QWORD *)(**(_QWORD **)(v339 + 64) + 48)
                                                        - *(_QWORD *)(**(_QWORD **)(v339 + 64) + 40))
      {
        v340 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 17));
        v341 = **(_QWORD ***)(v340 + 64);
        v342 = v341[1];
        v343 = (float32x2_t *)v341[9];
        v343->f32[0] = v473;
        v343->f32[1] = v103;
        v343[1].f32[0] = v104;
        v343[1].f32[1] = v105;
        v343[2] = v112;
        v343[3].f32[0] = v482;
        v343[3].f32[1] = v107;
        v343[4].f32[0] = v478;
        v343[4].f32[1] = v480;
        v343[5].f32[0] = v476;
        v343[5].f32[1] = v477;
        v343[6] = v113;
        v343[7].f32[0] = v475;
        v343[7].f32[1] = v115;
        v344 = v341[8];
        v345 = v341[9];
        if (v344 <= v342)
          v344 = v342;
        v341[7] = 0;
        *(_OWORD *)(v345 + 80) = xmmword_19FFB3480;
        if (v344 > v342)
          v342 = v344;
        v341[8] = v342;
        md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
        v346 = *(_QWORD *)(v340 + 64);
        v347 = __p[0];
        v348 = (char *)__p[1];
        *(void **)(v346 + 16) = __p[0];
        *(_QWORD *)(v346 + 24) = 0;
        v349 = *(_QWORD *)(v340 + 160);
        if (v348)
        {
          v350 = (unint64_t *)(v348 + 8);
          do
            v351 = __ldxr(v350);
          while (__stxr(v351 + 1, v350));
        }
        v352 = *(std::__shared_weak_count **)(v349 + 24);
        *(_QWORD *)(v349 + 16) = v347;
        *(_QWORD *)(v349 + 24) = v348;
        if (v352)
        {
          v353 = (unint64_t *)&v352->__shared_owners_;
          do
            v354 = __ldaxr(v353);
          while (__stlxr(v354 - 1, v353));
          if (!v354)
          {
            ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
            std::__shared_weak_count::__release_weak(v352);
          }
        }
        v355 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v356 = (unint64_t *)((char *)__p[1] + 8);
          do
            v357 = __ldaxr(v356);
          while (__stlxr(v357 - 1, v356));
          if (!v357)
          {
            ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
            std::__shared_weak_count::__release_weak(v355);
          }
        }
        v358 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
        *((_QWORD *)v358 + 8) = v339;
        *((_QWORD *)v358 + 4) = v340;
        *((_QWORD *)v358 + 3) = *((_QWORD *)v98[6] + 23);
        ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v358);
        v116 = a3;
      }
    }
  }
  v359 = *(_QWORD *)v116;
  BYTE5(v359) = v116[8];
  HIWORD(v359) = *(_QWORD *)(v116 + 6);
  if (v359)
    _ZF = 0;
  else
    _ZF = (BYTE3(*(_QWORD *)(v116 + 6)) | BYTE4(*(_QWORD *)(v116 + 6)) | (((unsigned __int16)WORD2(*(_QWORD *)(v116 + 6)) >> 8) | v116[14])) == 0;
  if (!_ZF || ((unsigned __int16)WORD2(*(_QWORD *)v116) >> 8) != 0)
  {
    v362 = ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 14));
    v363 = *(_QWORD **)(*(_QWORD *)(v362 + 64) + 16);
    v364 = v363[1];
    v365 = (float32x2_t *)v363[9];
    v365->f32[0] = v473;
    v365->f32[1] = v103;
    v365[1].f32[0] = v104;
    v365[1].f32[1] = v105;
    v365[2] = v112;
    v365[3].f32[0] = v482;
    v365[3].f32[1] = v107;
    v365[4].f32[0] = v478;
    v365[4].f32[1] = v480;
    v365[5].f32[0] = v476;
    v365[5].f32[1] = v477;
    v365[6] = v113;
    v365[7].f32[0] = v475;
    v365[7].f32[1] = v115;
    if (v363[8] > v364)
      v364 = v363[8];
    v363[7] = 0;
    v363[8] = v364;
    md::GeometryContext::transformConstantData((double *)__p, v96, &v486->_type, *(unsigned __int8 *)(v82 + 3776), 0.0, 0.0);
    v366 = *(_QWORD *)(v362 + 64);
    v367 = __p[0];
    v368 = (char *)__p[1];
    *(void **)(v366 + 32) = __p[0];
    *(_QWORD *)(v366 + 40) = 0;
    v369 = *(_QWORD *)(v362 + 160);
    if (v368)
    {
      v370 = (unint64_t *)(v368 + 8);
      do
        v371 = __ldxr(v370);
      while (__stxr(v371 + 1, v370));
    }
    v372 = *(std::__shared_weak_count **)(v369 + 40);
    *(_QWORD *)(v369 + 32) = v367;
    *(_QWORD *)(v369 + 40) = v368;
    if (v372)
    {
      v373 = (unint64_t *)&v372->__shared_owners_;
      do
        v374 = __ldaxr(v373);
      while (__stlxr(v374 - 1, v373));
      if (!v374)
      {
        ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
        std::__shared_weak_count::__release_weak(v372);
      }
    }
    v375 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v376 = (unint64_t *)((char *)__p[1] + 8);
      do
        v377 = __ldaxr(v376);
      while (__stlxr(v377 - 1, v376));
      if (!v377)
      {
        ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
        std::__shared_weak_count::__release_weak(v375);
      }
    }
    v378 = **(_QWORD ***)(v362 + 64);
    v379 = v378[1];
    *(_OWORD *)v378[9] = xmmword_19FFB34C0;
    if (v378[8] > v379)
      v379 = v378[8];
    v378[7] = 0;
    v378[8] = v379;
    v380 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*((_QWORD *)v98[6] + 20));
    *((_QWORD *)v380 + 8) = *(_QWORD *)md::DebugLayerRenderResources::unitRectMesh(v98[6]);
    *((_QWORD *)v380 + 4) = v362;
    *((_QWORD *)v380 + 3) = *((_QWORD *)v98[6] + 21);
    ggl::CommandBuffer::pushRenderItem((uint64_t)a6, v380);
    v381 = *v472;
    objc_msgSend(v381, "sizeInPixels");
    v481 = v383;
    v483 = v382;
    *(float *)&v382 = v115 + v107;
    v479 = *(int32x2_t *)&v382;

    a7[12].i32[0] = -16777216;
    v384 = vdiv_f32(vadd_f32(v113, v112), (float32x2_t)vdup_lane_s32(v479, 0));
    __asm { FMOV            V1.2S, #1.0 }
    v389.i32[0] = vadd_f32(v384, _D1).u32[0];
    v389.i32[1] = vsub_f32(_D1, v384).i32[1];
    v390 = vcvtq_f64_f32(v389);
    __asm { FMOV            V1.2D, #0.5 }
    v392.f64[0] = v483;
    v392.f64[1] = v481;
    a7[1] = vcvt_f32_f64(vmulq_f64(v390, vmulq_f64(_Q1, v392)));
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("X:%d Y:%d Z:%d\n"), *((unsigned int *)a4 + 44), *((unsigned int *)a4 + 43), *((unsigned __int8 *)a4 + 169));
    v393 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v394 = v474;
    v395 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
    v396 = strlen(v395->i8);
    ggl::DebugConsole::drawString((uint64_t)a7, v395, v396, v397, v398);
    v399 = a3;
    if (a3[11])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Coast Lines: %tu   Verts: %tu \n"), v474[12], v474[13]);
      v400 = (void *)objc_claimAutoreleasedReturnValue();

      v393 = objc_retainAutorelease(v400);
      v401 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
      v402 = strlen(v401->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v401, v402, v403, v404);
      v399 = a3;
    }
    if (v399[5])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Hillshade Rasters: %u   Verts: %tu \n"), geo::codec::VectorTile::hillshadeRasterCount((geo::codec::VectorTile *)*v15), 0);
      v405 = (void *)objc_claimAutoreleasedReturnValue();

      v393 = objc_retainAutorelease(v405);
      v406 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
      v407 = strlen(v406->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v406, v407, v408, v409);
      v399 = a3;
    }
    if (v399[10])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Junctions:%zu Overpasses:%zu Crossings:%zu\n"), v474[9], v474[11], v474[10]);
      v410 = (void *)objc_claimAutoreleasedReturnValue();

      v393 = objc_retainAutorelease(v410);
      v411 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
      v412 = strlen(v411->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v411, v412, v413, v414);
      v399 = a3;
    }
    if (v399[9])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Vertices: %tu \n"), v474[8]);
      v415 = (void *)objc_claimAutoreleasedReturnValue();

      v393 = objc_retainAutorelease(v415);
      v416 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
      v417 = strlen(v416->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v416, v417, v418, v419);
      v399 = a3;
    }
    if (v399[2])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unnamed Lines: %tu Verts: %tu \n"), v474[2], v474[3]);
      v420 = (void *)objc_claimAutoreleasedReturnValue();

      v421 = objc_retainAutorelease(v420);
      v422 = (int8x16_t *)objc_msgSend(v421, "UTF8String");
      v423 = strlen(v422->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v422, v423, v424, v425);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Named lines: %tu Verts: %tu \n"), *v474, v474[1]);
      v426 = (void *)objc_claimAutoreleasedReturnValue();

      v393 = objc_retainAutorelease(v426);
      v427 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
      v428 = strlen(v427->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v427, v428, v429, v430);
      v399 = a3;
    }
    if (v399[3])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Points: %tu\n"), v474[7]);
      v431 = (void *)objc_claimAutoreleasedReturnValue();

      v393 = objc_retainAutorelease(v431);
      v432 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
      v433 = strlen(v432->i8);
      ggl::DebugConsole::drawString((uint64_t)a7, v432, v433, v434, v435);
      v399 = a3;
    }
    if (!v399[4] && !v399[8] && !v399[6] && !v399[7])
    {
      if (!*v399)
        goto LABEL_459;
LABEL_462:
      v441 = a4[109];
      if (a4[110] == v441)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(no traffic)\n"));
        v463 = (void *)objc_claimAutoreleasedReturnValue();

        v393 = objc_retainAutorelease(v463);
        v464 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
        v465 = strlen(v464->i8);
        ggl::DebugConsole::drawString((uint64_t)a7, v464, v465, v466, v467);
        if (!a3[14])
          goto LABEL_476;
      }
      else
      {
        v484 = v393;
        v442 = 0;
        v443 = 1;
        do
        {
          if (!md::DebugRenderLayer::renderTileData(md::LayoutContext const&,md::PaintFlags const&,md::MapTileData const*,md::MapDataType,ggl::CommandBuffer *,md::DebugConsole *)::dateFormatter)
          {
            v444 = objc_alloc_init(MEMORY[0x1E0CB3578]);
            v445 = (void *)md::DebugRenderLayer::renderTileData(md::LayoutContext const&,md::PaintFlags const&,md::MapTileData const*,md::MapDataType,ggl::CommandBuffer *,md::DebugConsole *)::dateFormatter;
            md::DebugRenderLayer::renderTileData(md::LayoutContext const&,md::PaintFlags const&,md::MapTileData const*,md::MapDataType,ggl::CommandBuffer *,md::DebugConsole *)::dateFormatter = (uint64_t)v444;

            objc_msgSend((id)md::DebugRenderLayer::renderTileData(md::LayoutContext const&,md::PaintFlags const&,md::MapTileData const*,md::MapDataType,ggl::CommandBuffer *,md::DebugConsole *)::dateFormatter, "setDateStyle:", 1);
            objc_msgSend((id)md::DebugRenderLayer::renderTileData(md::LayoutContext const&,md::PaintFlags const&,md::MapTileData const*,md::MapDataType,ggl::CommandBuffer *,md::DebugConsole *)::dateFormatter, "setTimeStyle:", 1);
          }
          v446 = v441 + 16 * v442;
          objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", (double)zilch::TrafficDynamicTile::feedUpdateTimeSeconds(*(zilch::TrafficDynamicTile **)(*(_QWORD *)v446 + 144)));
          v447 = (void *)objc_claimAutoreleasedReturnValue();
          v448 = *(int32x2_t **)(*(_QWORD *)v446 + 8);
          v449 = v448[1].i32[0];
          v450 = (void *)MEMORY[0x1E0CB3940];
          v451 = *v448;
          v490[0] = -1;
          v490[1] = v449;
          v491 = vrev64_s32(v451);
          md::debugString<geo::QuadTile>(__p, v490);
          v452 = SHIBYTE(v493);
          v453 = (void **)__p[0];
          objc_msgSend((id)md::DebugRenderLayer::renderTileData(md::LayoutContext const&,md::PaintFlags const&,md::MapTileData const*,md::MapDataType,ggl::CommandBuffer *,md::DebugConsole *)::dateFormatter, "stringFromDate:", v447);
          v454 = objc_claimAutoreleasedReturnValue();
          v455 = (void *)v454;
          if (v452 >= 0)
            v456 = __p;
          else
            v456 = v453;
          objc_msgSend(v450, "stringWithFormat:", CFSTR("traffic %s : %@\n"), v456, v454);
          v457 = (void *)objc_claimAutoreleasedReturnValue();

          if (SHIBYTE(v493) < 0)
            operator delete(__p[0]);
          v458 = objc_retainAutorelease(v457);
          v459 = (int8x16_t *)objc_msgSend(v458, "UTF8String");
          v460 = strlen(v459->i8);
          ggl::DebugConsole::drawString((uint64_t)a7, v459, v460, v461, v462);

          v442 = v443;
          v441 = v488[109];
          ++v443;
        }
        while (v442 < (v488[110] - v441) >> 4);
        v77 = v472;
        v98 = (md::DebugLayerRenderResources **)v485;
        v394 = v474;
        v393 = v484;
        if (!a3[14])
          goto LABEL_476;
      }
LABEL_475:
      md::DebugRenderLayer::renderTexturedQuadTile((md::DebugRenderLayer *)v98, v77, v486, (ggl::Texture2D *)v394[28], a6, v471);
      goto LABEL_476;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Polygons: %tu  Verts: %tu\n"), v474[4], v474[5]);
    v436 = (void *)objc_claimAutoreleasedReturnValue();

    v393 = objc_retainAutorelease(v436);
    v437 = (int8x16_t *)objc_msgSend(v393, "UTF8String");
    v438 = strlen(v437->i8);
    ggl::DebugConsole::drawString((uint64_t)a7, v437, v438, v439, v440);
    v399 = a3;
    if (*a3)
      goto LABEL_462;
LABEL_459:
    if (v399[14])
      goto LABEL_475;
LABEL_476:

  }
}

void sub_19F7FA490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a49);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_19F7FA4C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19F7FA4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::__emplace_unique_key_args<std::shared_ptr<geo::codec::VectorTile>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<geo::codec::VectorTile> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x30uLL);
  v12 = v16;
  *v16 = 0;
  v16[1] = v8;
  v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v16[4] = 0;
  v16[5] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v26)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v26)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < *(_QWORD *)&v26)
LABEL_37:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v30 = *(_QWORD *)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_61:
    *v31 = v12;
    goto LABEL_62;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v30 + 8 * v3) = v15;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19F7FA898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ModelTileDebugData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBD68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ModelTileDebugData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBD68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ModelTileDebugData>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = a1[31];
  a1[31] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[30];
  a1[30] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[29];
  a1[29] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[28];
  a1[28] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[27];
  a1[27] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[26];
  a1[26] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[25];
  a1[25] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[24];
  a1[24] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[23];
  a1[23] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[22];
  a1[22] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a1[21];
  a1[21] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = a1[20];
  a1[20] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a1[19];
  a1[19] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)a1[18];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

uint64_t std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[22],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::CommonMesh::Pos4Mesh*>(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = a3;
  v18 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a5[1];
  v16[0] = *a5;
  v16[1] = (uint64_t)v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(a1, a2, &v17, v16);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(a1, a2, &v17, v16);
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::Decal>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::Decal>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Decal>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::Decal>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

char *md::DebugLayerRenderResources::unitTexturedMesh(md::DebugLayerRenderResources *this)
{
  char *v1;
  _QWORD *v3;
  ggl::CommonMesh::Pos2UVMesh *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (char *)this + 256;
  if (!*((_QWORD *)this + 32))
  {
    v3 = operator new(0xA8uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_1E42DE538;
    v4 = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v3 + 3), "/DebugSharedUnitTexturedMesh");
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 32) = v4;
    *((_QWORD *)this + 33) = v3;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = **(_QWORD **)(*(_QWORD *)v1 + 64);
    v9 = 6 * *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(_QWORD *)(v8 + 80) - v10;
    if (v9 != v11)
    {
      if (v9 <= v11)
      {
        if (v9 < v11)
          *(_QWORD *)(v8 + 80) = v10 + v9;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v8 + 72, v9 - v11);
      }
      v12 = *(std::__shared_weak_count **)(v8 + 32);
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *(_QWORD *)(v8 + 120) = 0;
      *(_DWORD *)(v8 + 112) = 0;
      v15 = *(_QWORD *)(v8 + 80) - *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = v15;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = v15;
      v8 = **(_QWORD **)(*(_QWORD *)v1 + 64);
      v9 = 6 * *(_QWORD *)(v8 + 8);
    }
    if (v9)
      v16 = *(_QWORD *)(v8 + 72);
    else
      v16 = 0;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    __asm { FMOV            V1.4S, #1.0 }
    *(_OWORD *)(v16 + 16) = xmmword_19FFB3960;
    *(_OWORD *)(v16 + 32) = _Q1;
    *(_OWORD *)(v16 + 48) = _Q1;
    *(_OWORD *)(v16 + 64) = xmmword_19FFB3970;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = 0;
    if (v16 && v9)
    {
      if (*(_QWORD *)(v8 + 64) > v9)
        v9 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = v9;
    }
  }
  return v1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_6,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_7,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_8,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<double,3>,std::__variant_detail::_Trait::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>> const&>(uint64_t **a1, double *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD v17[3];
  float32x4_t v18;
  double v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v23 = 0;
  v25 = 0;
  v20 = 0u;
  v21 = 0u;
  v24 = 0u;
  v27 = 0;
  v31 = 0x3FF0000000000000;
  v19 = v8 - v5;
  v22 = v9 - v6;
  v26 = v10 - v7;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  v11 = v2[3];
  LODWORD(v5) = *(_DWORD *)v2[2];
  v18 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v5))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  v12 = *(unsigned __int8 *)(v11 + 12);
  v13 = *(_QWORD *)v2[4];
  v14 = (char *)operator new(0x40uLL);
  v17[1] = v14 + 64;
  v17[2] = v14 + 64;
  *(_DWORD *)v14 = 1065353216;
  *(_QWORD *)(v14 + 12) = 0;
  *(_QWORD *)(v14 + 4) = 0;
  *((_DWORD *)v14 + 5) = 1065353216;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = 0;
  *((_DWORD *)v14 + 10) = 1065353216;
  *(_QWORD *)(v14 + 52) = 0;
  *(_QWORD *)(v14 + 44) = 0;
  *((_DWORD *)v14 + 15) = 1065353216;
  v17[0] = v14;
  v15 = (uint64_t *)v2[5];
  v16 = (_QWORD *)md::DebugLayerRenderResources::unitBoxMesh(*(md::DebugLayerRenderResources **)(v3 + 48));
  md::DebugRenderLayer::renderInstancedMesh(v3, *(_QWORD **)(v4 + 8), &v19, &v18, v12 != 0, v13, (uint64_t)v17, v16, v15);
  operator delete(v14);
}

void sub_19F7FAFB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_6,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_7,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_8,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<double,3>,std::__variant_detail::_Trait::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  double v15[16];
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *a1;
  v4 = *((_QWORD *)a2 + 2);
  v3 = *((_QWORD *)a2 + 3);
  v5 = *(_QWORD *)(*a1 + 96);
  v6 = *(_QWORD *)(*a1 + 104);
  v7 = *a2;
  v24 = xmmword_19FFB32C0;
  v25 = 0;
  v26 = 0;
  v27 = xmmword_19FFB33A0;
  v28 = 0u;
  v29 = 0u;
  v30 = xmmword_19FFB32C0;
  v31 = v7;
  v32 = v4;
  v33 = 0x3FF0000000000000;
  v17 = 0u;
  v19 = 0;
  v22 = 0u;
  v21 = 0u;
  v18 = 0u;
  memset(&v16.u32[2], 0, 32);
  v23 = 0x3FF0000000000000;
  v16.i64[0] = v3;
  *(_QWORD *)&v17 = v3;
  v20 = v3;
  v8 = gm::operator*<double,4,4,4>(v15, (double *)&v24, (double *)v16.i64);
  v9 = *(_QWORD *)(v2 + 120);
  LODWORD(v8) = **(_DWORD **)(v2 + 112);
  v16 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v8))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  v10 = *(unsigned __int8 *)(v9 + 12);
  v11 = **(_QWORD **)(v2 + 128);
  v12 = (char *)operator new(0x40uLL);
  *((_QWORD *)&v24 + 1) = v12 + 64;
  v25 = v12 + 64;
  *(_DWORD *)v12 = 1065353216;
  *(_QWORD *)(v12 + 12) = 0;
  *(_QWORD *)(v12 + 4) = 0;
  *((_DWORD *)v12 + 5) = 1065353216;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = 0;
  *((_DWORD *)v12 + 10) = 1065353216;
  *(_QWORD *)(v12 + 52) = 0;
  *(_QWORD *)(v12 + 44) = 0;
  *((_DWORD *)v12 + 15) = 1065353216;
  *(_QWORD *)&v24 = v12;
  v13 = *(uint64_t **)(v2 + 136);
  v14 = (_QWORD *)md::DebugLayerRenderResources::icoSphere(*(md::DebugLayerRenderResources **)(v5 + 48));
  md::DebugRenderLayer::renderInstancedMesh(v5, *(_QWORD **)(v6 + 8), v15, &v16, v10 != 0, v11, (uint64_t)&v24, v14, v13);
  operator delete(v12);
}

void sub_19F7FB138(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_6,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_7,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_8,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<double,3>,std::__variant_detail::_Trait::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  _QWORD *v32;
  double v33[16];
  float32x4_t v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 48);
  v4 = *(_QWORD *)(*a1 + 56);
  v51 = 0u;
  v53 = 0u;
  v54 = 0;
  v52 = 0u;
  v50 = 0u;
  v49 = 0u;
  v5 = *((double *)a2 + 6);
  v6 = *((double *)a2 + 10) - *((double *)a2 + 7);
  v7 = *((double *)a2 + 11) - *((double *)a2 + 8);
  v8 = *((double *)a2 + 12) - *((double *)a2 + 9);
  v55 = *(__int128 *)((char *)a2 + 56);
  v56 = *((_QWORD *)a2 + 9);
  v57 = 0x3FF0000000000000;
  v48 = v6;
  *(double *)&v51 = v7;
  *((double *)&v53 + 1) = v8;
  v9 = *((double *)a2 + 4);
  v10 = *((double *)a2 + 5);
  v11 = v9 + v9;
  v12 = (v9 + v9) * v9;
  v13 = (v10 + v10) * v10;
  v15 = *((_QWORD *)a2 + 2);
  v14 = *((double *)a2 + 3);
  v16 = (v14 + v14) * v9;
  v17 = (v10 + v10) * v5;
  v18 = v16 - v17;
  v19 = v10 * (v14 + v14);
  v20 = v5 * v11;
  v21 = v17 + v16;
  v22 = v5 * v11 + v19;
  v23 = 1.0 - (v14 + v14) * v14;
  v24 = v11 * v10;
  v25 = v5 * (v14 + v14);
  *(double *)v34.i64 = 1.0 - (v12 + v13);
  *(double *)&v34.i64[1] = v21;
  v37 = v18;
  v38 = v23 - v13;
  v41 = v22;
  v42 = v24 - v25;
  v35 = v19 - v20;
  v39 = v25 + v24;
  v43 = v23 - v12;
  v36 = 0;
  v40 = 0;
  v44 = 0;
  v45 = *a2;
  v46 = v15;
  v47 = 0x3FF0000000000000;
  v26 = gm::operator*<double,4,4,4>(v33, (double *)v34.i64, &v48);
  v27 = *(_QWORD *)(v2 + 72);
  LODWORD(v26) = **(_DWORD **)(v2 + 64);
  v34 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v26))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  v28 = *(unsigned __int8 *)(v27 + 12);
  v29 = **(_QWORD **)(v2 + 80);
  v30 = (char *)operator new(0x40uLL);
  *(_QWORD *)&v49 = v30 + 64;
  *((_QWORD *)&v49 + 1) = v30 + 64;
  *(_DWORD *)v30 = 1065353216;
  *(_QWORD *)(v30 + 12) = 0;
  *(_QWORD *)(v30 + 4) = 0;
  *((_DWORD *)v30 + 5) = 1065353216;
  *((_QWORD *)v30 + 3) = 0;
  *((_QWORD *)v30 + 4) = 0;
  *((_DWORD *)v30 + 10) = 1065353216;
  *(_QWORD *)(v30 + 52) = 0;
  *(_QWORD *)(v30 + 44) = 0;
  *((_DWORD *)v30 + 15) = 1065353216;
  v48 = *(double *)&v30;
  v31 = *(uint64_t **)(v2 + 88);
  v32 = (_QWORD *)md::DebugLayerRenderResources::unitBoxMesh(*(md::DebugLayerRenderResources **)(v3 + 48));
  md::DebugRenderLayer::renderInstancedMesh(v3, *(_QWORD **)(v4 + 8), v33, &v34, v28 != 0, v29, (uint64_t)&v48, v32, v31);
  operator delete(v30);
}

void sub_19F7FB340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::DeviceDataTyped<ggl::Debug::InstanceTransform>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::DeviceDataTyped<ggl::Debug::InstanceTransform>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::Debug::InstanceTransform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::Debug::InstanceTransform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::Debug::InstanceTransform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_1,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_2,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_3,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_4,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<float,3>,std::__variant_detail::_Trait::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo<float,2u,float,float>> const&>(uint64_t a1, float *a2)
{
  float **v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = *(float ***)(*(_QWORD *)a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = a2[3] - *a2;
  v7 = a2[4] - v3;
  v8 = a2[5] - v5;
  v10 = v2[1];
  v9 = (unint64_t)v2[2];
  if ((unint64_t)v10 >= v9)
  {
    v12 = *v2;
    v13 = ((char *)v10 - (char *)*v2) >> 6;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 58)
      abort();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 5 > v14)
      v14 = v15 >> 5;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
      v16 = 0x3FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = (char *)operator new(v16 << 6);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[64 * v13];
    *(float *)v18 = v6;
    *(_QWORD *)(v18 + 12) = 0;
    *(_QWORD *)(v18 + 4) = 0;
    *((float *)v18 + 5) = v7;
    *((_QWORD *)v18 + 3) = 0;
    *((_QWORD *)v18 + 4) = 0;
    *((float *)v18 + 10) = v8;
    *((_DWORD *)v18 + 11) = 0;
    *((float *)v18 + 12) = v4;
    *((float *)v18 + 13) = v3;
    *((_DWORD *)v18 + 15) = 1065353216;
    v11 = (float *)(v18 + 64);
    *((float *)v18 + 14) = v5;
    if (v10 != v12)
    {
      do
      {
        v19 = *((_OWORD *)v10 - 4);
        v20 = *((_OWORD *)v10 - 3);
        v21 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v18 - 1) = v21;
        *((_OWORD *)v18 - 4) = v19;
        *((_OWORD *)v18 - 3) = v20;
        v18 -= 64;
        v10 -= 16;
      }
      while (v10 != v12);
      v10 = *v2;
    }
    *v2 = (float *)v18;
    v2[1] = v11;
    v2[2] = (float *)&v17[64 * v16];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = v6;
    *(_QWORD *)(v10 + 3) = 0;
    *(_QWORD *)(v10 + 1) = 0;
    v10[5] = v7;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 4) = 0;
    v10[10] = v8;
    v10[11] = 0.0;
    v10[12] = v4;
    v10[13] = v3;
    v10[14] = v5;
    v11 = v10 + 16;
    v10[15] = 1.0;
  }
  v2[1] = v11;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_1,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_2,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_3,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_4,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<float,3>,std::__variant_detail::_Trait::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo<float,2u,float,float>> const&>(uint64_t a1, float32x4_t *a2)
{
  float v2;
  float32x4_t **v3;
  float32x4_t v4;
  unint64_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v4 = *a2;
  v2 = a2->f32[3];
  v3 = *(float32x4_t ***)(*(_QWORD *)a1 + 24);
  v30.i64[0] = 0;
  v30.i64[1] = 0x3F80000000000000;
  v4.i32[3] = 1.0;
  LODWORD(v5) = 0;
  v6 = (float32x4_t)vzip1q_s32((int32x4_t)LODWORD(v2), (int32x4_t)LODWORD(v2));
  v7 = (int8x16_t)vmulq_f32(v6, v30);
  v8 = vmlaq_f32((float32x4_t)vextq_s8(v7, v7, 8uLL), (float32x4_t)xmmword_19FFB3590, v6);
  *((float *)&v5 + 1) = v2;
  v9 = (float32x4_t)vzip1q_s32((int32x4_t)v5, (int32x4_t)v5);
  v10 = (int8x16_t)vmulq_f32(v9, v30);
  v11 = vmlaq_f32((float32x4_t)vextq_s8(v10, v10, 8uLL), (float32x4_t)xmmword_19FFB3590, v9);
  v12 = vmulq_n_f32((float32x4_t)xmmword_19FFB3580, v2);
  v14 = v3[1];
  v13 = (unint64_t)v3[2];
  if ((unint64_t)v14 >= v13)
  {
    v16 = *v3;
    v17 = ((char *)v14 - (char *)*v3) >> 6;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 58)
      abort();
    v19 = v13 - (_QWORD)v16;
    if (v19 >> 5 > v18)
      v18 = v19 >> 5;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
      v20 = 0x3FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      v26 = v12;
      v27 = v11;
      v28 = v8;
      v29 = v4;
      if (v20 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(v20 << 6);
      v8 = v28;
      v4 = v29;
      v12 = v26;
      v11 = v27;
    }
    else
    {
      v21 = 0;
    }
    v22 = (float32x4_t *)&v21[64 * v17];
    *v22 = v8;
    v22[1] = v11;
    v22[2] = v12;
    v22[3] = v4;
    v15 = v22 + 4;
    if (v14 != v16)
    {
      do
      {
        v23 = v14[-4];
        v24 = v14[-3];
        v25 = v14[-1];
        v22[-2] = v14[-2];
        v22[-1] = v25;
        v22[-4] = v23;
        v22[-3] = v24;
        v22 -= 4;
        v14 -= 4;
      }
      while (v14 != v16);
      v14 = *v3;
    }
    *v3 = v22;
    v3[1] = v15;
    v3[2] = (float32x4_t *)&v21[64 * v20];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = v8;
    v14[1] = v11;
    v15 = v14 + 4;
    v14[2] = v12;
    v14[3] = v4;
  }
  v3[1] = v15;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_1,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_2,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_3,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_4,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<float,3>,std::__variant_detail::_Trait::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo<float,2u,float,float>> const&>(uint64_t a1, uint64_t a2, double a3, int32x4_t a4)
{
  float32x4_t **v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float32_t v17;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;
  unsigned int v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  unsigned int v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  unint64_t v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;

  v4 = *(float32x4_t ***)(*(_QWORD *)a1 + 16);
  v5 = *(float *)(a2 + 24);
  v6 = *(float *)(a2 + 36);
  a4.i64[0] = *(_QWORD *)(a2 + 28);
  v7 = *(float *)(a2 + 12);
  v8 = *(float *)(a2 + 16);
  v9 = *(float *)(a2 + 20);
  v10 = v8 + v8;
  v11 = (float)(v8 + v8) * v8;
  v12 = (float)(v9 + v9) * v9;
  *(float *)&v13 = 1.0 - (float)(v11 + v12);
  v14 = v7 + v7;
  v15 = (float)(v7 + v7) * v8;
  v16 = (float)(v9 + v9) * v5;
  v17 = v15 - v16;
  v18 = v9 * (float)(v7 + v7);
  v19 = v5 * v10;
  *(float *)&v20 = (float)(v5 * v10) + v18;
  *(float *)&v21 = v16 + v15;
  v22 = 1.0 - (float)((float)(v7 + v7) * v7);
  v23 = v10 * v9;
  v24 = v5 * v14;
  *(float *)&v25 = v23 - v24;
  *(float *)&v26 = v24 + v23;
  v27.i32[1] = 0;
  v27.f32[0] = v18 - v19;
  v27.f32[2] = v17;
  v27.f32[3] = v22 - v12;
  *(float *)&v28 = v22 - v11;
  v29.i64[0] = __PAIR64__(v25, v20);
  LODWORD(v30) = 0;
  v29.i64[1] = v28;
  v31 = *(float32x4_t *)a2;
  v31.i32[3] = 1.0;
  *(float *)&v32 = *(float *)(a2 + 40) - *(float *)(a2 + 28);
  v33 = (float32x4_t)vzip1q_s32((int32x4_t)v32, (int32x4_t)v32);
  v34 = (int8x16_t)vmulq_f32(v33, v27);
  v35.i64[0] = __PAIR64__(v21, v13);
  v35.i64[1] = v26;
  v36 = vmlaq_f32((float32x4_t)vextq_s8(v34, v34, 8uLL), v35, v33);
  *((float *)&v30 + 1) = *(float *)(a2 + 44) - *(float *)(a2 + 32);
  v37 = (float32x4_t)vzip1q_s32((int32x4_t)v30, (int32x4_t)v30);
  v38 = (int8x16_t)vmulq_f32(v37, v27);
  v39 = vmlaq_f32((float32x4_t)vextq_s8(v38, v38, 8uLL), v35, v37);
  v40 = vmulq_n_f32(v29, *(float *)(a2 + 48) - v6);
  v41 = (float32x4_t)vzip1q_s32(a4, a4);
  v42 = (int8x16_t)vmulq_f32(v41, v27);
  v43 = vaddq_f32(v31, vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v42, v42, 8uLL), v35, v41), v29, v6));
  v45 = v4[1];
  v44 = (unint64_t)v4[2];
  if ((unint64_t)v45 >= v44)
  {
    v47 = *v4;
    v48 = ((char *)v45 - (char *)*v4) >> 6;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 58)
      abort();
    v50 = v44 - (_QWORD)v47;
    if (v50 >> 5 > v49)
      v49 = v50 >> 5;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFC0)
      v51 = 0x3FFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      v57 = v43;
      v58 = v39;
      v59 = v40;
      v60 = v36;
      if (v51 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v52 = (char *)operator new(v51 << 6);
      v40 = v59;
      v36 = v60;
      v43 = v57;
      v39 = v58;
    }
    else
    {
      v52 = 0;
    }
    v53 = (float32x4_t *)&v52[64 * v48];
    *v53 = v36;
    v53[1] = v39;
    v53[2] = v40;
    v53[3] = v43;
    v46 = v53 + 4;
    if (v45 != v47)
    {
      do
      {
        v54 = v45[-4];
        v55 = v45[-3];
        v56 = v45[-1];
        v53[-2] = v45[-2];
        v53[-1] = v56;
        v53[-4] = v54;
        v53[-3] = v55;
        v53 -= 4;
        v45 -= 4;
      }
      while (v45 != v47);
      v45 = *v4;
    }
    *v4 = v53;
    v4[1] = v46;
    v4[2] = (float32x4_t *)&v52[64 * v51];
    if (v45)
      operator delete(v45);
  }
  else
  {
    *v45 = v36;
    v45[1] = v39;
    v46 = v45 + 4;
    v45[2] = v40;
    v45[3] = v43;
  }
  v4[1] = v46;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_1,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_2,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_3,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_4,md::DebugRenderLayer::layout(md::LayoutContext const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gm::Box<float,3>,std::__variant_detail::_Trait::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo<float,2u,float,float>> const&>(float32x4_t ****a1, uint64_t a2, int32x4_t a3)
{
  float32x4_t **v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  float32x4_t v23;
  unsigned int v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unsigned int v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  unint64_t v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;

  v3 = **a1;
  a3.i64[0] = *(_QWORD *)(a2 + 28);
  v4 = *(float *)(a2 + 12);
  v5 = *(float *)(a2 + 16);
  v6 = *(float *)(a2 + 20);
  v7 = *(float *)(a2 + 24);
  v8 = v5 + v5;
  v9 = (float)(v5 + v5) * v5;
  v10 = (float)(v6 + v6) * v6;
  *(float *)&v11 = 1.0 - (float)(v9 + v10);
  v12 = v4 + v4;
  v13 = (float)(v4 + v4) * v5;
  v14 = (float)(v6 + v6) * v7;
  v15 = v6 * (float)(v4 + v4);
  v16 = v7 * v8;
  *(float *)&v17 = (float)(v7 * v8) + v15;
  v18 = 1.0 - (float)((float)(v4 + v4) * v4);
  v19 = v8 * v6;
  v20 = v7 * v12;
  *(float *)&v21 = v19 - v20;
  *(float *)&v22 = v20 + v19;
  v23.i32[1] = 0;
  v23.f32[0] = v15 - v16;
  v23.i64[1] = __PAIR64__(v18 - v10, v13 - v14);
  *(float *)&v24 = v18 - v9;
  v26.i64[0] = __PAIR64__(v21, v17);
  LODWORD(v25) = 0;
  v26.i64[1] = v24;
  v27 = *(float32x4_t *)a2;
  v27.i32[3] = 1.0;
  *(float *)&v28 = *(float *)(a2 + 36) - *(float *)(a2 + 28);
  v29 = (float32x4_t)vzip1q_s32((int32x4_t)v28, (int32x4_t)v28);
  v30 = (int8x16_t)vmulq_f32(v29, v23);
  v31.i64[0] = __PAIR64__(v14 + v13, v11);
  v31.i64[1] = v22;
  v32 = vmlaq_f32((float32x4_t)vextq_s8(v30, v30, 8uLL), v31, v29);
  *((float *)&v25 + 1) = *(float *)(a2 + 40) - *(float *)(a2 + 32);
  v33 = (float32x4_t)vzip1q_s32((int32x4_t)v25, (int32x4_t)v25);
  v34 = (int8x16_t)vmulq_f32(v33, v23);
  v35 = vmlaq_f32((float32x4_t)vextq_s8(v34, v34, 8uLL), v31, v33);
  v36 = (float32x4_t)vzip1q_s32(a3, a3);
  v37 = (int8x16_t)vmulq_f32(v36, v23);
  v38 = vaddq_f32(v27, vmlaq_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), v31, v36));
  v40 = v3[1];
  v39 = (unint64_t)v3[2];
  if ((unint64_t)v40 >= v39)
  {
    v42 = *v3;
    v43 = ((char *)v40 - (char *)*v3) >> 6;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 58)
      abort();
    v45 = v39 - (_QWORD)v42;
    if (v45 >> 5 > v44)
      v44 = v45 >> 5;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0)
      v46 = 0x3FFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      v52 = v38;
      v53 = v35;
      v54 = v32;
      v55 = v26;
      if (v46 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v47 = (char *)operator new(v46 << 6);
      v32 = v54;
      v26 = v55;
      v38 = v52;
      v35 = v53;
    }
    else
    {
      v47 = 0;
    }
    v48 = (float32x4_t *)&v47[64 * v43];
    *v48 = v32;
    v48[1] = v35;
    v48[2] = v26;
    v48[3] = v38;
    v41 = v48 + 4;
    if (v40 != v42)
    {
      do
      {
        v49 = v40[-4];
        v50 = v40[-3];
        v51 = v40[-1];
        v48[-2] = v40[-2];
        v48[-1] = v51;
        v48[-4] = v49;
        v48[-3] = v50;
        v48 -= 4;
        v40 -= 4;
      }
      while (v40 != v42);
      v40 = *v3;
    }
    *v3 = v48;
    v3[1] = v41;
    v3[2] = (float32x4_t *)&v47[64 * v46];
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v40 = v32;
    v40[1] = v35;
    v41 = v40 + 4;
    v40[2] = v26;
    v40[3] = v38;
  }
  v3[1] = v41;
}

void std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD340;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD340;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_11>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DebugLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD2F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD2F8;
  a2[1] = v2;
  return result;
}

void md::DebugLayerRenderResources::~DebugLayerRenderResources(md::DebugLayerRenderResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v29)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v29)
      goto LABEL_51;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_51:
  v32 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v39)
  {
    v40 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v39);
    MEMORY[0x1A1AF4E00](v40, 0x10A0C40D234DDC7);
  }
  v41 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v41)
  {
    v42 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v41);
    MEMORY[0x1A1AF4E00](v42, 0x10A0C40D234DDC7);
  }
  v43 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v43)
  {
    v44 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v43);
    MEMORY[0x1A1AF4E00](v44, 0x10A0C40D234DDC7);
  }
  v45 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v45)
  {
    v46 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v45);
    MEMORY[0x1A1AF4E00](v46, 0x10A0C40D234DDC7);
  }
  v47 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v47)
  {
    v48 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v47);
    MEMORY[0x1A1AF4E00](v48, 0x10A0C40D234DDC7);
  }
  v49 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v49)
  {
    v50 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v49);
    MEMORY[0x1A1AF4E00](v50, 0x10A0C40D234DDC7);
  }
  v51 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v51)
  {
    v52 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v51);
    MEMORY[0x1A1AF4E00](v52, 0x10A0C40D234DDC7);
  }
  v53 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v53)
  {
    v54 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v53);
    MEMORY[0x1A1AF4E00](v54, 0x10A0C40D234DDC7);
  }
  v55 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v55)
  {
    v56 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v55);
    MEMORY[0x1A1AF4E00](v56, 0x10A0C40D234DDC7);
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v57)
    goto LABEL_87;
  v58 = (unint64_t *)&v57->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v60)
      goto LABEL_93;
  }
  else
  {
LABEL_87:
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v60)
      goto LABEL_93;
  }
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
LABEL_93:
  v63 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v63)
    goto LABEL_97;
  v64 = (unint64_t *)&v63->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    v66 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v66)
      goto LABEL_103;
  }
  else
  {
LABEL_97:
    v66 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v66)
      goto LABEL_103;
  }
  v67 = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
LABEL_103:
  v69 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v69)
    goto LABEL_107;
  v70 = (unint64_t *)&v69->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    v72 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v72)
      return;
  }
  else
  {
LABEL_107:
    v72 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v72)
      return;
  }
  v73 = (unint64_t *)&v72->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
}

md::DebugLayerRenderResources *md::DebugLayerRenderResources::DebugLayerRenderResources(md::DebugLayerRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  VKSharedResources *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  unsigned __int8 v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  std::__shared_weak_count *v116;
  VKSharedResources *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  __int128 v129;
  unsigned __int8 v130;
  __int128 v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  int8x16_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int32x4_t v146;
  int8x16_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int16x8_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int8x16_t v163;
  int32x4_t v164;
  int8x16_t v165;
  int32x4_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int16x8_t v181;
  int32x4_t v182;
  int16x8_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int16x8_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int32x4_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  char *v221;
  __int128 v222;
  unsigned __int8 v223;
  __int128 v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  __int128 v228;
  unint64_t *v229;
  unint64_t v230;
  int8x16_t v231;
  int16x8_t v232;
  int32x4_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int16x8_t v236;
  int32x4_t v237;
  int8x16_t v238;
  int32x4_t v239;
  int8x16_t v240;
  int32x4_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int16x8_t v251;
  int32x4_t v252;
  int8x16_t v253;
  int16x8_t v254;
  int32x4_t v255;
  int8x16_t v256;
  int32x4_t v257;
  int8x16_t v258;
  int32x4_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int16x8_t v274;
  int32x4_t v275;
  int16x8_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int16x8_t v283;
  int32x4_t v284;
  int16x8_t v285;
  int32x4_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int32x4_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int32x4_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  __int128 v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t *v326;
  unint64_t v327;
  char *v328;
  __int128 v329;
  unsigned __int8 v330;
  __int128 v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  __int128 v335;
  unint64_t *v336;
  unint64_t v337;
  int8x16_t v338;
  int16x8_t v339;
  int32x4_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int16x8_t v343;
  int32x4_t v344;
  int8x16_t v345;
  int32x4_t v346;
  int8x16_t v347;
  int32x4_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int16x8_t v355;
  int32x4_t v356;
  int8x16_t v357;
  int16x8_t v358;
  int32x4_t v359;
  int8x16_t v360;
  int32x4_t v361;
  int8x16_t v362;
  int32x4_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int8x16_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int16x8_t v377;
  int32x4_t v378;
  int16x8_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int16x8_t v392;
  int32x4_t v393;
  int16x8_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t *v418;
  unsigned __int8 v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _OWORD *v435;
  __int128 *v436;
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _OWORD *v453;
  __int128 *v454;
  uint64_t v455;
  __int128 v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t *v465;
  unsigned __int8 v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _OWORD *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _OWORD *v500;
  __int128 *v501;
  uint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  _QWORD *v510;
  uint64_t v511;
  unint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t *v519;
  unsigned __int8 v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  _OWORD *v536;
  __int128 *v537;
  uint64_t v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  _OWORD *v554;
  __int128 *v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  uint64_t *v566;
  unsigned __int8 v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  _OWORD *v583;
  __int128 *v584;
  uint64_t v585;
  __int128 v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _OWORD *v601;
  __int128 *v602;
  uint64_t v603;
  __int128 v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  _QWORD *v609;
  uint64_t v610;
  _QWORD *v611;
  uint64_t v612;
  uint64_t *v613;
  unsigned __int8 v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _OWORD *v630;
  __int128 *v631;
  uint64_t v632;
  __int128 v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _OWORD *v648;
  __int128 *v649;
  uint64_t v650;
  __int128 v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  _QWORD *v658;
  uint64_t v659;
  uint64_t *v660;
  unsigned __int8 v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  _OWORD *v677;
  __int128 *v678;
  uint64_t v679;
  __int128 v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  _OWORD *v695;
  __int128 *v696;
  uint64_t v697;
  __int128 v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  uint64_t v704;
  _QWORD *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t *v719;
  uint64_t v720;
  uint64_t v721;
  _QWORD *v722;
  uint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  std::__shared_weak_count *v726;
  unint64_t *v727;
  unint64_t v728;
  std::__shared_weak_count *v729;
  unint64_t *v730;
  unint64_t v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  ggl::DebugLineShader *v736;
  unsigned __int8 v737;
  unsigned __int8 v738;
  unsigned __int8 v739;
  ggl::InstancedDebugShader *v740;
  unsigned __int8 v741;
  unsigned __int8 v742;
  unsigned __int8 v743;
  unsigned __int8 v744;
  ggl::PointShader *v745;
  unsigned __int8 v746;
  unsigned __int8 v747;
  unsigned __int8 v748;
  ggl::ScreenTexturedQuadShader *v749;
  unsigned __int8 v750;
  unsigned __int8 v751;
  unsigned __int8 v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  unsigned __int8 v765;
  unsigned __int8 v766;
  unsigned __int8 v767;
  unsigned __int8 v768;
  unsigned __int8 v769;
  unsigned __int8 v770;
  unsigned __int8 v771;
  unsigned __int8 v772;
  unsigned __int8 v773;
  unsigned __int8 v774;
  unsigned __int8 v775;
  unsigned __int8 v776;
  unsigned __int8 v777;
  uint64_t *v778;
  uint64_t *v779;
  uint64_t *v780;
  uint64_t *v781;
  uint64_t *v782;
  uint64_t *v783;
  uint64_t *v784;
  uint64_t *v785;
  uint64_t *v786;
  VKSharedResources *v787;
  _BYTE v788[32];
  uint64_t v789;
  int v790;
  char v791;
  uint64_t v792;
  std::__shared_weak_count *v793;
  __int128 v794;
  __int128 v795;
  _QWORD v796[3];
  _QWORD *v797;
  _QWORD v798[3];
  _QWORD *v799;
  _QWORD v800[3];
  _QWORD *v801;
  _QWORD v802[3];
  _QWORD *v803;
  _QWORD v804[3];
  _QWORD *v805;
  _QWORD v806[3];
  _QWORD *v807;
  _QWORD v808[3];
  _QWORD *v809;
  _QWORD v810[3];
  _QWORD *v811;
  _QWORD v812[3];
  _QWORD *v813;
  _QWORD v814[3];
  _QWORD *v815;
  _QWORD v816[3];
  _QWORD *v817;
  _QWORD v818[3];
  _QWORD *v819;
  _QWORD v820[3];
  _QWORD *v821;
  _QWORD v822[3];
  _QWORD *v823;
  _QWORD v824[3];
  _QWORD *v825;
  _QWORD v826[3];
  _QWORD *v827;
  _QWORD v828[3];
  _QWORD *v829;
  _QWORD v830[3];
  _QWORD *v831;
  uint64_t v832;

  v832 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v783 = (uint64_t *)((char *)this + 96);
  *((_OWORD *)this + 7) = 0u;
  v786 = (uint64_t *)((char *)this + 112);
  *((_OWORD *)this + 8) = 0u;
  v782 = (uint64_t *)((char *)this + 128);
  *((_OWORD *)this + 9) = 0u;
  v780 = (uint64_t *)((char *)this + 144);
  *((_OWORD *)this + 10) = 0u;
  v778 = (uint64_t *)((char *)this + 160);
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)this = 0u;
  v784 = (uint64_t *)((char *)this + 104);
  v785 = (uint64_t *)((char *)this + 120);
  v781 = (uint64_t *)((char *)this + 136);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  v779 = (uint64_t *)((char *)this + 152);
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  v787 = v5;
  v6 = -[VKSharedResources shaderLibrary](v5, "shaderLibrary");
  -[VKSharedResources textureManager](v5, "textureManager");
  v8 = **(_QWORD **)v788;
  v7 = *(_QWORD *)(*(_QWORD *)v788 + 8);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = v8;
  *((_QWORD *)this + 31) = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*(_QWORD *)&v788[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v788[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v788[8] + 16))(*(_QWORD *)&v788[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v788[8]);
    }
  }
  v16 = *(_QWORD *)(v6 + 80);
  v18 = *(_QWORD *)(v16 + 392);
  v17 = *(std::__shared_weak_count **)(v16 + 400);
  v792 = v18;
  v793 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v789 = 0;
  *(_QWORD *)&v788[24] = 0;
  v790 = 0;
  v788[0] = 1;
  *(_OWORD *)&v788[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v788[20] = 7;
  v791 = 15;
  v21 = operator new(0x198uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &off_1E42E4508;
  v22 = *(_OWORD *)&a3->colorFormatsCount;
  v794 = *(_OWORD *)a3->colorFormats;
  v795 = v22;
  v23 = ggl::Debug::BasePipelineState::BasePipelineState((uint64_t)(v21 + 3), &v792, (uint64_t)v788, &v794);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v23;
  *((_QWORD *)this + 1) = v21;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v793;
  if (v793)
  {
    v28 = (unint64_t *)&v793->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_QWORD *)(v6 + 80);
  v32 = *(_QWORD *)(v30 + 440);
  v31 = *(_QWORD *)(v30 + 448);
  *(_QWORD *)&v794 = v32;
  *((_QWORD *)&v794 + 1) = v31;
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (char *)operator new(0x198uLL);
  *((_QWORD *)v35 + 1) = 0;
  *((_QWORD *)v35 + 2) = 0;
  *(_QWORD *)v35 = &off_1E42E4540;
  v36 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v788 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v788[16] = v36;
  if ((v37 & 1) == 0)
  {
    if ((_DWORD)v736)
    {
      if ((v737 & 1) == 0)
      {
        if ((_DWORD)v736)
        {
          if ((v765 & 1) == 0
          {
            if ((v774 & 1) == 0
            {
              ggl::MeshTyped<ggl::Debug::LineVBO>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::lineVBOReflection;
            }
            ggl::MeshTyped<ggl::Debug::LineVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::LineVBO>::attributesReflection(void)::r;
            unk_1ECE36028 = 1;
          }
          ggl::Debug::LinePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Debug::LineVBO>::typedReflection(void)::r;
          unk_1EE581490 = &ggl::Debug::pipelineDataLinePipelineDeviceStructs(void)::ref;
          qword_1EE581498 = 0;
          if ((v766 & 1) == 0
          {
            ggl::Debug::pipelineDataLinePipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            *(_QWORD *)algn_1EE581578 = ggl::Debug::View::reflection(void)::reflection;
            qword_1EE581580 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
            unk_1EE581588 = ggl::Debug::Viewport::reflection(void)::reflection;
          }
          qword_1EE5814A0 = (uint64_t)&ggl::Debug::pipelineDataLinePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE5814A8 = xmmword_19FFB3690;
        }
      }
      ggl::Debug::LinePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::LinePipelineSetup::typedReflection(void)::ref;
      ggl::DebugLineShader::typedReflection(v736);
      qword_1EE5814C8 = (uint64_t)&ggl::DebugLineShader::typedReflection(void)::ref;
      if ((v738 & 1) == 0
      {
        ggl::Debug::pipelineStateLinePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE581728 = 0;
        qword_1EE581730 = (uint64_t)"";
        dword_1EE581738 = 0;
        qword_1EE581740 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineAttributeBinding_0(void)::attr;
        unk_1EE581748 = 2;
      }
      qword_1EE5814D0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE5814D8 = 1;
      qword_1EE5814E0 = 0;
      unk_1EE5814E8 = 0;
      qword_1EE5814F0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineDeviceStructBinding(void)::ref;
      unk_1EE5814F8 = 0;
      if ((v739 & 1) == 0
      {
        ggl::Debug::pipelineStateLinePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE581638 = 0;
        qword_1EE581640 = (uint64_t)"style";
        dword_1EE581648 = 3;
        qword_1EE581650 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantStyleBinding(void)::reflection;
        unk_1EE581658 = xmmword_19FFB35E0;
        qword_1EE581668 = 1;
        unk_1EE581670 = "view";
        dword_1EE581678 = 3;
        qword_1EE581680 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantViewBinding(void)::reflection;
        unk_1EE581688 = xmmword_19FFB2DB0;
        qword_1EE581698 = 2;
        unk_1EE5816A0 = "transform";
        dword_1EE5816A8 = 3;
        qword_1EE5816B0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantTransformBinding(void)::reflection;
        unk_1EE5816B8 = xmmword_19FFB4B30;
        qword_1EE5816C8 = 3;
        unk_1EE5816D0 = "viewport";
        dword_1EE5816D8 = 3;
        qword_1EE5816E0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantViewportBinding(void)::reflection;
        unk_1EE5816E8 = 1;
      }
      qword_1EE581500 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantStructBinding(void)::ref;
      unk_1EE581508 = 4;
    }
  }
  v38 = v794;
  if (*((_QWORD *)&v794 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    *((_DWORD *)v35 + 14) = 0;
    *((_QWORD *)v35 + 5) = 0;
    *((_QWORD *)v35 + 6) = 0;
    *((_QWORD *)v35 + 3) = &off_1E42B6760;
    *((_QWORD *)v35 + 4) = 0;
    *((_QWORD *)v35 + 8) = &ggl::Debug::LinePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v35 + 72) = v38;
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
  }
  else
  {
    *((_DWORD *)v35 + 14) = 0;
    *((_QWORD *)v35 + 5) = 0;
    *((_QWORD *)v35 + 6) = 0;
    *((_QWORD *)v35 + 3) = &off_1E42B6760;
    *((_QWORD *)v35 + 4) = 0;
    *((_QWORD *)v35 + 8) = &ggl::Debug::LinePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v35 + 72) = v38;
  }
  v35[136] = 0;
  *(_OWORD *)(v35 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v35 + 156) = 0;
  *(_QWORD *)(v35 + 172) = 0;
  *(_QWORD *)(v35 + 164) = 0;
  v35[184] = 0;
  *(_OWORD *)(v35 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v35 + 204) = 0;
  *(_QWORD *)(v35 + 220) = 0;
  *(_QWORD *)(v35 + 212) = 0;
  v35[232] = 0;
  *(_OWORD *)(v35 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v35 + 252) = 0;
  *(_QWORD *)(v35 + 268) = 0;
  *(_QWORD *)(v35 + 260) = 0;
  v42 = *(_OWORD *)&v788[16];
  *(_OWORD *)(v35 + 280) = *(_OWORD *)v788;
  *(_OWORD *)(v35 + 296) = v42;
  v35[312] = 0;
  *((_QWORD *)v35 + 48) = 0;
  *((_OWORD *)v35 + 22) = 0u;
  *((_OWORD *)v35 + 23) = 0u;
  *((_OWORD *)v35 + 20) = 0u;
  *((_OWORD *)v35 + 21) = 0u;
  *((_QWORD *)v35 + 49) = 0x100000001;
  v35[400] = 0;
  v35[88] = 1;
  *(_WORD *)(v35 + 89) = v792;
  v35[91] = BYTE2(v792);
  *(_OWORD *)(v35 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v35 + 27) = 7;
  *((_QWORD *)v35 + 14) = 0;
  *((_QWORD *)v35 + 15) = 0;
  *((_DWORD *)v35 + 32) = 0;
  v35[132] = 15;
  if (*((_QWORD *)&v38 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 16))(*((_QWORD *)&v38 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
    }
  }
  v35[329] = 0;
  v45 = vceqzq_s8(*(int8x16_t *)(v35 + 328));
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v48.i64[0] = v47.u32[0];
  v48.i64[1] = v47.u32[1];
  v49 = v48;
  v50 = vmovl_s8(*(int8x8_t *)v45.i8);
  v51 = vmovl_s16(*(int16x4_t *)v50.i8);
  v48.i64[0] = v51.u32[0];
  v48.i64[1] = v51.u32[1];
  v52 = v48;
  v53 = vmovl_high_s16(v46);
  v48.i64[0] = v53.u32[0];
  v48.i64[1] = v53.u32[1];
  v54 = v48;
  v55 = vmovl_high_s16(v50);
  v48.i64[0] = v55.u32[0];
  v48.i64[1] = v55.u32[1];
  v56 = v48;
  v48.i64[0] = v47.u32[2];
  v48.i64[1] = v47.u32[3];
  v57 = v48;
  v48.i64[0] = v51.u32[2];
  v48.i64[1] = v51.u32[3];
  v58 = v48;
  v48.i64[0] = v53.u32[2];
  v48.i64[1] = v53.u32[3];
  v59 = v48;
  v48.i64[0] = v55.u32[2];
  v48.i64[1] = v55.u32[3];
  v60 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v48);
  v61 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v59);
  v62 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v58);
  v63 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v54);
  v64 = vceqzq_s8(*(int8x16_t *)(v35 + 344));
  v65 = vmovl_high_s8(v64);
  v66 = vmovl_s16(*(int16x4_t *)v65.i8);
  v48.i64[0] = v66.u32[0];
  v48.i64[1] = v66.u32[1];
  v67 = v48;
  v68 = vmovl_s8(*(int8x8_t *)v64.i8);
  v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v48.i64[0] = v69.u32[0];
  v48.i64[1] = v69.u32[1];
  v70 = v48;
  v71 = vmovl_high_s16(v65);
  v48.i64[0] = v71.u32[0];
  v48.i64[1] = v71.u32[1];
  v72 = v48;
  v73 = vmovl_high_s16(v68);
  v48.i64[0] = v73.u32[0];
  v48.i64[1] = v73.u32[1];
  v74 = v48;
  v48.i64[0] = v66.u32[2];
  v48.i64[1] = v66.u32[3];
  v75 = v48;
  v48.i64[0] = v69.u32[2];
  v48.i64[1] = v69.u32[3];
  v76 = v48;
  v48.i64[0] = v71.u32[2];
  v48.i64[1] = v71.u32[3];
  v77 = v48;
  v48.i64[0] = v73.u32[2];
  v48.i64[1] = v73.u32[3];
  v78 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v77);
  v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v67), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v49));
  v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v70), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v52));
  v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v72), v63);
  v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v74), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v56));
  v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v75), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v57));
  v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v76), v62);
  v85 = vorrq_s8(v78, v61);
  v86 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v48), v60);
  v87 = vceqzq_s8(*(int8x16_t *)(v35 + 360));
  v88 = vmovl_high_s8(v87);
  v89 = vmovl_s16(*(int16x4_t *)v88.i8);
  v48.i64[0] = v89.i32[0];
  v48.i64[1] = v89.i32[1];
  v90 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v48);
  v91 = vceqzq_s8(*(int8x16_t *)(v35 + 376));
  v92 = vmovl_high_s8(v91);
  v93 = vmovl_s16(*(int16x4_t *)v92.i8);
  v48.i64[0] = v93.i32[0];
  v48.i64[1] = v93.i32[1];
  v94 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v48), v90), v79);
  v95 = vmovl_s8(*(int8x8_t *)v87.i8);
  v96 = vmovl_s16(*(int16x4_t *)v95.i8);
  v48.i64[0] = v96.i32[0];
  v48.i64[1] = v96.i32[1];
  v97 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v48);
  v98 = vmovl_s8(*(int8x8_t *)v91.i8);
  v99 = vmovl_s16(*(int16x4_t *)v98.i8);
  v48.i64[0] = v99.i32[0];
  v48.i64[1] = v99.i32[1];
  v100 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v48), v97), v80);
  v101 = vmovl_high_s16(v88);
  v48.i64[0] = v101.i32[0];
  v48.i64[1] = v101.i32[1];
  v102 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v48);
  v103 = vmovl_high_s16(v92);
  v48.i64[0] = v103.i32[0];
  v48.i64[1] = v103.i32[1];
  v104 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v48), v102), v81);
  v105 = vmovl_high_s16(v95);
  v48.i64[0] = v105.i32[0];
  v48.i64[1] = v105.i32[1];
  v106 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v48);
  v107 = vmovl_high_s16(v98);
  v48.i64[0] = v107.i32[0];
  v48.i64[1] = v107.i32[1];
  v108 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v48), v106), v82);
  v48.i64[0] = v89.i32[2];
  v48.i64[1] = v89.i32[3];
  v109 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v48);
  v48.i64[0] = v93.i32[2];
  v48.i64[1] = v93.i32[3];
  v110 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v48), v109), v83);
  v48.i64[0] = v96.i32[2];
  v48.i64[1] = v96.i32[3];
  v111 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v48);
  v48.i64[0] = v99.i32[2];
  v48.i64[1] = v99.i32[3];
  v112 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v48), v111), v84);
  v48.i64[0] = v101.i32[2];
  v48.i64[1] = v101.i32[3];
  v113 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v48);
  v48.i64[0] = v103.i32[2];
  v48.i64[1] = v103.i32[3];
  v114 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v48), v113), v85);
  v48.i64[0] = v105.i32[2];
  v48.i64[1] = v105.i32[3];
  v115 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v48);
  v48.i64[0] = v107.i32[2];
  v48.i64[1] = v107.i32[3];
  *((_QWORD *)v35 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v100, v94), vorrq_s8(v108, v104)), (int64x2_t)vorrq_s8(vorrq_s8(v112, v110), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v48), v115), v86), v114))));
  *((_QWORD *)v35 + 3) = &off_1E42BBD98;
  v35[312] = 1;
  v116 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = v35 + 24;
  *((_QWORD *)this + 5) = v35;
  v117 = v787;
  if (v116)
  {
    v118 = (unint64_t *)&v116->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v794 + 1);
  if (*((_QWORD *)&v794 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = *(_QWORD *)(v6 + 80);
  v125 = *(_QWORD *)(v123 + 368);
  v124 = *(_QWORD *)(v123 + 376);
  *(_QWORD *)&v794 = v125;
  *((_QWORD *)&v794 + 1) = v124;
  if (v124)
  {
    v126 = (unint64_t *)(v124 + 8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  v128 = (char *)operator new(0x198uLL);
  *((_QWORD *)v128 + 1) = 0;
  *((_QWORD *)v128 + 2) = 0;
  *(_QWORD *)v128 = &off_1E42E45B0;
  v129 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v788 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v788[16] = v129;
  if ((v130 & 1) == 0)
  {
    if ((_DWORD)v740)
    {
      if ((v741 & 1) == 0)
      {
        if ((_DWORD)v740)
        {
          if ((v767 & 1) == 0
          {
            if ((v775 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1ECE43AA8 = 1;
          }
          ggl::Debug::InstancedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          if ((v768 & 1) == 0
          {
            ggl::Debug::pipelineDataInstancedBasePipelineDeviceStructs(void)::ref = (uint64_t)ggl::Debug::InstanceTransform::reflection(void)::reflection;
          }
          qword_1EE581520 = (uint64_t)&ggl::Debug::pipelineDataInstancedBasePipelineDeviceStructs(void)::ref;
          *(_QWORD *)algn_1EE581528 = 1;
          if ((v769 & 1) == 0
          {
            ggl::Debug::pipelineDataInstancedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            unk_1EE581760 = ggl::Debug::View::reflection(void)::reflection;
            qword_1EE581768 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1EE581530 = (uint64_t)&ggl::Debug::pipelineDataInstancedBasePipelineConstantStructs(void)::ref;
          unk_1EE581538 = xmmword_19FFB3410;
        }
      }
      ggl::Debug::InstancedBasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::InstancedBasePipelineSetup::typedReflection(void)::ref;
      ggl::InstancedDebugShader::typedReflection(v740);
      qword_1ECE2F498 = (uint64_t)&ggl::InstancedDebugShader::typedReflection(void)::ref;
      if ((v742 & 1) == 0
      {
        ggl::Debug::pipelineStateInstancedBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE581840 = 0;
        qword_1EE581848 = (uint64_t)"";
        dword_1EE581850 = 0;
        qword_1EE581858 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE581860 = 1;
      }
      qword_1ECE2F4A0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE2F4A8 = 1;
      qword_1ECE2F4B0 = 0;
      unk_1ECE2F4B8 = 0;
      if ((v743 & 1) == 0
      {
        ggl::Debug::pipelineStateInstancedBasePipelineDeviceStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE581778 = 0;
        qword_1EE581780 = (uint64_t)"instanceTransform";
        dword_1EE581788 = 2;
        qword_1EE581790 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1EE581798 = 0;
      }
      qword_1ECE2F4C0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineDeviceStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE2F4C8 = 1;
      if ((v744 & 1) == 0
      {
        ggl::Debug::pipelineStateInstancedBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5817A8 = 0;
        qword_1EE5817B0 = (uint64_t)"style";
        dword_1EE5817B8 = 3;
        qword_1EE5817C0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE5817C8 = xmmword_19FFB35E0;
        qword_1EE5817D8 = 1;
        unk_1EE5817E0 = "view";
        dword_1EE5817E8 = 3;
        qword_1EE5817F0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE5817F8 = xmmword_19FFB2DB0;
        qword_1EE581808 = 2;
        unk_1EE581810 = "transform";
        dword_1EE581818 = 3;
        qword_1EE581820 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantTransformBinding(void)::reflection;
        unk_1EE581828 = 10;
      }
      qword_1ECE2F4D0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE2F4D8 = 3;
      v117 = v787;
    }
  }
  v131 = v794;
  if (*((_QWORD *)&v794 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
    *((_DWORD *)v128 + 14) = 0;
    *((_QWORD *)v128 + 5) = 0;
    *((_QWORD *)v128 + 6) = 0;
    *((_QWORD *)v128 + 3) = &off_1E42B6760;
    *((_QWORD *)v128 + 4) = 0;
    *((_QWORD *)v128 + 8) = &ggl::Debug::InstancedBasePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v128 + 72) = v131;
    do
      v134 = __ldxr(v132);
    while (__stxr(v134 + 1, v132));
  }
  else
  {
    *((_DWORD *)v128 + 14) = 0;
    *((_QWORD *)v128 + 5) = 0;
    *((_QWORD *)v128 + 6) = 0;
    *((_QWORD *)v128 + 3) = &off_1E42B6760;
    *((_QWORD *)v128 + 4) = 0;
    *((_QWORD *)v128 + 8) = &ggl::Debug::InstancedBasePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v128 + 72) = v131;
  }
  v128[136] = 0;
  *(_OWORD *)(v128 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v128 + 156) = 0;
  *(_QWORD *)(v128 + 172) = 0;
  *(_QWORD *)(v128 + 164) = 0;
  v128[184] = 0;
  *(_OWORD *)(v128 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v128 + 204) = 0;
  *(_QWORD *)(v128 + 220) = 0;
  *(_QWORD *)(v128 + 212) = 0;
  v128[232] = 0;
  *(_OWORD *)(v128 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v128 + 252) = 0;
  *(_QWORD *)(v128 + 268) = 0;
  *(_QWORD *)(v128 + 260) = 0;
  v135 = *(_OWORD *)&v788[16];
  *(_OWORD *)(v128 + 280) = *(_OWORD *)v788;
  *(_OWORD *)(v128 + 296) = v135;
  v128[312] = 0;
  *((_QWORD *)v128 + 48) = 0;
  *((_OWORD *)v128 + 22) = 0u;
  *((_OWORD *)v128 + 23) = 0u;
  *((_OWORD *)v128 + 20) = 0u;
  *((_OWORD *)v128 + 21) = 0u;
  *((_QWORD *)v128 + 49) = 0x100000001;
  v128[400] = 0;
  v128[88] = 1;
  *(_WORD *)(v128 + 89) = v792;
  v128[91] = BYTE2(v792);
  *(_OWORD *)(v128 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v128 + 27) = 7;
  *((_QWORD *)v128 + 14) = 0;
  *((_QWORD *)v128 + 15) = 0;
  *((_DWORD *)v128 + 32) = 0;
  v128[132] = 15;
  if (*((_QWORD *)&v131 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v131 + 1) + 16))(*((_QWORD *)&v131 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
    }
  }
  v128[329] = 0;
  v138 = vceqzq_s8(*(int8x16_t *)(v128 + 328));
  v139 = vmovl_high_s8(v138);
  v140 = vmovl_s16(*(int16x4_t *)v139.i8);
  v141.i64[0] = v140.u32[0];
  v141.i64[1] = v140.u32[1];
  v142 = v141;
  v143 = vmovl_s8(*(int8x8_t *)v138.i8);
  v144 = vmovl_s16(*(int16x4_t *)v143.i8);
  v141.i64[0] = v144.u32[0];
  v141.i64[1] = v144.u32[1];
  v145 = v141;
  v146 = vmovl_high_s16(v139);
  v141.i64[0] = v146.u32[0];
  v141.i64[1] = v146.u32[1];
  v147 = v141;
  v148 = vmovl_high_s16(v143);
  v141.i64[0] = v148.u32[0];
  v141.i64[1] = v148.u32[1];
  v149 = v141;
  v141.i64[0] = v140.u32[2];
  v141.i64[1] = v140.u32[3];
  v150 = v141;
  v141.i64[0] = v144.u32[2];
  v141.i64[1] = v144.u32[3];
  v151 = v141;
  v141.i64[0] = v146.u32[2];
  v141.i64[1] = v146.u32[3];
  v152 = v141;
  v141.i64[0] = v148.u32[2];
  v141.i64[1] = v148.u32[3];
  v153 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v141);
  v154 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v152);
  v155 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v151);
  v156 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v147);
  v157 = vceqzq_s8(*(int8x16_t *)(v128 + 344));
  v158 = vmovl_high_s8(v157);
  v159 = vmovl_s16(*(int16x4_t *)v158.i8);
  v141.i64[0] = v159.u32[0];
  v141.i64[1] = v159.u32[1];
  v160 = v141;
  v161 = vmovl_s8(*(int8x8_t *)v157.i8);
  v162 = vmovl_s16(*(int16x4_t *)v161.i8);
  v141.i64[0] = v162.u32[0];
  v141.i64[1] = v162.u32[1];
  v163 = v141;
  v164 = vmovl_high_s16(v158);
  v141.i64[0] = v164.u32[0];
  v141.i64[1] = v164.u32[1];
  v165 = v141;
  v166 = vmovl_high_s16(v161);
  v141.i64[0] = v166.u32[0];
  v141.i64[1] = v166.u32[1];
  v167 = v141;
  v141.i64[0] = v159.u32[2];
  v141.i64[1] = v159.u32[3];
  v168 = v141;
  v141.i64[0] = v162.u32[2];
  v141.i64[1] = v162.u32[3];
  v169 = v141;
  v141.i64[0] = v164.u32[2];
  v141.i64[1] = v164.u32[3];
  v170 = v141;
  v141.i64[0] = v166.u32[2];
  v141.i64[1] = v166.u32[3];
  v171 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v170);
  v172 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v160), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v142));
  v173 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v163), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v145));
  v174 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v165), v156);
  v175 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v167), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v149));
  v176 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v168), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v150));
  v177 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v169), v155);
  v178 = vorrq_s8(v171, v154);
  v179 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v141), v153);
  v180 = vceqzq_s8(*(int8x16_t *)(v128 + 360));
  v181 = vmovl_s8(*(int8x8_t *)v180.i8);
  v182 = vmovl_high_s16(v181);
  v183 = vmovl_high_s8(v180);
  v184 = vmovl_high_s16(v183);
  v185 = vmovl_s16(*(int16x4_t *)v181.i8);
  v186 = vmovl_s16(*(int16x4_t *)v183.i8);
  v141.i64[0] = v185.i32[0];
  v141.i64[1] = v185.i32[1];
  v187 = v141;
  v141.i64[0] = v186.i32[0];
  v141.i64[1] = v186.i32[1];
  v188 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v141);
  v189 = vceqzq_s8(*(int8x16_t *)(v128 + 376));
  v190 = vmovl_high_s8(v189);
  v191 = vmovl_s16(*(int16x4_t *)v190.i8);
  v141.i64[0] = v191.i32[0];
  v141.i64[1] = v191.i32[1];
  v192 = vmovl_s8(*(int8x8_t *)v189.i8);
  v193 = vmovl_s16(*(int16x4_t *)v192.i8);
  v194 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v141), v188), v172);
  v141.i64[0] = v193.i32[0];
  v141.i64[1] = v193.i32[1];
  v195 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v141), vbicq_s8((int8x16_t)xmmword_19FFB3170, v187));
  v141.i64[0] = v184.i32[0];
  v141.i64[1] = v184.i32[1];
  v196 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v141);
  v197 = vmovl_high_s16(v190);
  v198 = vorrq_s8(v195, v173);
  v141.i64[0] = v197.i32[0];
  v141.i64[1] = v197.i32[1];
  v199 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v141), v196);
  v141.i64[0] = v182.i32[0];
  v141.i64[1] = v182.i32[1];
  v200 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v141);
  v201 = vmovl_high_s16(v192);
  v141.i64[0] = v201.i32[0];
  v141.i64[1] = v201.i32[1];
  v202 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v141), v200), v175);
  v141.i64[0] = v186.i32[2];
  v141.i64[1] = v186.i32[3];
  v203 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v141);
  v141.i64[0] = v191.i32[2];
  v141.i64[1] = v191.i32[3];
  v204 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v141), v203), v176);
  v141.i64[0] = v185.i32[2];
  v141.i64[1] = v185.i32[3];
  v205 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v141);
  v141.i64[0] = v193.i32[2];
  v141.i64[1] = v193.i32[3];
  v206 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v141), v205), v177);
  v141.i64[0] = v184.i32[2];
  v141.i64[1] = v184.i32[3];
  v207 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v141);
  v141.i64[0] = v197.i32[2];
  v141.i64[1] = v197.i32[3];
  v208 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v141), v207), v178);
  v141.i64[0] = v182.i32[2];
  v141.i64[1] = v182.i32[3];
  v209 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v141);
  v141.i64[0] = v201.i32[2];
  v141.i64[1] = v201.i32[3];
  *((_QWORD *)v128 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v198, v194), vorrq_s8(v202, vorrq_s8(v199, v174))), (int64x2_t)vorrq_s8(vorrq_s8(v206, v204), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v141), v209), v179), v208))));
  *((_QWORD *)v128 + 3) = &off_1E42BBE38;
  v128[312] = 1;
  v210 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v128 + 24;
  *((_QWORD *)this + 3) = v128;
  if (v210)
  {
    v211 = (unint64_t *)&v210->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = (std::__shared_weak_count *)*((_QWORD *)&v794 + 1);
  if (*((_QWORD *)&v794 + 1))
  {
    v214 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = *(_QWORD *)(v6 + 80);
  v217 = *(_QWORD *)(v216 + 1904);
  v218 = *(_QWORD *)(v216 + 1912);
  *(_QWORD *)&v794 = v217;
  *((_QWORD *)&v794 + 1) = v218;
  if (v218)
  {
    v219 = (unint64_t *)(v218 + 8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = (char *)operator new(0x198uLL);
  *((_QWORD *)v221 + 1) = 0;
  *((_QWORD *)v221 + 2) = 0;
  *(_QWORD *)v221 = &off_1E42E4620;
  v222 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v788 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v788[16] = v222;
  if ((v223 & 1) == 0)
  {
    if ((_DWORD)v745)
    {
      if ((v746 & 1) == 0)
      {
        if ((_DWORD)v745)
        {
          if ((v770 & 1) == 0
          {
            if ((v776 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1ECE43A80 = 1;
          }
          ggl::Point::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE581878 = &ggl::Point::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1EE581880 = 0;
          if ((v771 & 1) == 0
          {
            ggl::Point::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Point::View::reflection(void)::reflection;
            unk_1EE5818B0 = ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1EE581888 = (uint64_t)&ggl::Point::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1EE581890 = xmmword_19FFB35C0;
        }
      }
      ggl::Point::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Point::PipelineSetup::typedReflection(void)::ref;
      ggl::PointShader::typedReflection(v745);
      qword_1ECE32190 = (uint64_t)&ggl::PointShader::typedReflection(void)::ref;
      if ((v747 & 1) == 0
      {
        ggl::Point::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE581920 = 0;
        qword_1EE581928 = (uint64_t)"";
        dword_1EE581930 = 0;
        qword_1EE581938 = (uint64_t)&ggl::Point::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1EE581940 = 1;
      }
      qword_1ECE32198 = (uint64_t)&ggl::Point::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1ECE321A0 = 1;
      qword_1ECE321A8 = 0;
      unk_1ECE321B0 = 0;
      qword_1ECE321B8 = (uint64_t)&ggl::Point::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1ECE321C0 = 0;
      if ((v748 & 1) == 0
      {
        ggl::Point::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE5818C0 = 0;
        qword_1EE5818C8 = (uint64_t)"view";
        dword_1EE5818D0 = 3;
        qword_1EE5818D8 = (uint64_t)&ggl::Point::pipelineStatePipelineConstantViewBinding(void)::reflection;
        unk_1EE5818E0 = xmmword_19FFB48D0;
        qword_1EE5818F0 = 1;
        unk_1EE5818F8 = "transform";
        dword_1EE581900 = 3;
        qword_1EE581908 = (uint64_t)&ggl::Point::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        unk_1EE581910 = 10;
      }
      qword_1ECE321C8 = (uint64_t)&ggl::Point::pipelineStatePipelineConstantStructBinding(void)::ref;
      unk_1ECE321D0 = 2;
      v117 = v787;
    }
  }
  v224 = v794;
  if (*((_QWORD *)&v794 + 1))
  {
    v225 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 1, v225));
    *((_DWORD *)v221 + 14) = 0;
    *((_QWORD *)v221 + 5) = 0;
    *((_QWORD *)v221 + 6) = 0;
    *((_QWORD *)v221 + 3) = &off_1E42B6760;
    *((_QWORD *)v221 + 4) = 0;
    *((_QWORD *)v221 + 8) = &ggl::Point::PipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v221 + 72) = v224;
    do
      v227 = __ldxr(v225);
    while (__stxr(v227 + 1, v225));
  }
  else
  {
    *((_DWORD *)v221 + 14) = 0;
    *((_QWORD *)v221 + 5) = 0;
    *((_QWORD *)v221 + 6) = 0;
    *((_QWORD *)v221 + 3) = &off_1E42B6760;
    *((_QWORD *)v221 + 4) = 0;
    *((_QWORD *)v221 + 8) = &ggl::Point::PipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v221 + 72) = v224;
  }
  v221[136] = 0;
  *(_OWORD *)(v221 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v221 + 156) = 0;
  *(_QWORD *)(v221 + 172) = 0;
  *(_QWORD *)(v221 + 164) = 0;
  v221[184] = 0;
  *(_OWORD *)(v221 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v221 + 204) = 0;
  *(_QWORD *)(v221 + 220) = 0;
  *(_QWORD *)(v221 + 212) = 0;
  v221[232] = 0;
  *(_OWORD *)(v221 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v221 + 252) = 0;
  *(_QWORD *)(v221 + 268) = 0;
  *(_QWORD *)(v221 + 260) = 0;
  v228 = *(_OWORD *)&v788[16];
  *(_OWORD *)(v221 + 280) = *(_OWORD *)v788;
  *(_OWORD *)(v221 + 296) = v228;
  v221[312] = 0;
  *((_QWORD *)v221 + 48) = 0;
  *((_OWORD *)v221 + 22) = 0u;
  *((_OWORD *)v221 + 23) = 0u;
  *((_OWORD *)v221 + 20) = 0u;
  *((_OWORD *)v221 + 21) = 0u;
  *((_QWORD *)v221 + 49) = 0x100000001;
  v221[400] = 0;
  v221[88] = 1;
  *(_WORD *)(v221 + 89) = v792;
  v221[91] = BYTE2(v792);
  *(_OWORD *)(v221 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v221 + 27) = 7;
  *((_QWORD *)v221 + 14) = 0;
  *((_QWORD *)v221 + 15) = 0;
  *((_DWORD *)v221 + 32) = 0;
  v221[132] = 15;
  if (*((_QWORD *)&v224 + 1))
  {
    v229 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v224 + 1) + 16))(*((_QWORD *)&v224 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v224 + 1));
    }
  }
  v221[329] = 0;
  v231 = vceqzq_s8(*(int8x16_t *)(v221 + 328));
  v232 = vmovl_high_s8(v231);
  v233 = vmovl_s16(*(int16x4_t *)v232.i8);
  v234.i64[0] = v233.u32[0];
  v234.i64[1] = v233.u32[1];
  v235 = v234;
  v236 = vmovl_s8(*(int8x8_t *)v231.i8);
  v237 = vmovl_s16(*(int16x4_t *)v236.i8);
  v234.i64[0] = v237.u32[0];
  v234.i64[1] = v237.u32[1];
  v238 = v234;
  v239 = vmovl_high_s16(v232);
  v234.i64[0] = v239.u32[0];
  v234.i64[1] = v239.u32[1];
  v240 = v234;
  v241 = vmovl_high_s16(v236);
  v234.i64[0] = v241.u32[0];
  v234.i64[1] = v241.u32[1];
  v242 = v234;
  v234.i64[0] = v233.u32[2];
  v234.i64[1] = v233.u32[3];
  v243 = v234;
  v234.i64[0] = v237.u32[2];
  v234.i64[1] = v237.u32[3];
  v244 = v234;
  v234.i64[0] = v239.u32[2];
  v234.i64[1] = v239.u32[3];
  v245 = v234;
  v234.i64[0] = v241.u32[2];
  v234.i64[1] = v241.u32[3];
  v246 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v234);
  v247 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v245);
  v248 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v244);
  v249 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v240);
  v250 = vceqzq_s8(*(int8x16_t *)(v221 + 344));
  v251 = vmovl_high_s8(v250);
  v252 = vmovl_s16(*(int16x4_t *)v251.i8);
  v234.i64[0] = v252.u32[0];
  v234.i64[1] = v252.u32[1];
  v253 = v234;
  v254 = vmovl_s8(*(int8x8_t *)v250.i8);
  v255 = vmovl_s16(*(int16x4_t *)v254.i8);
  v234.i64[0] = v255.u32[0];
  v234.i64[1] = v255.u32[1];
  v256 = v234;
  v257 = vmovl_high_s16(v251);
  v234.i64[0] = v257.u32[0];
  v234.i64[1] = v257.u32[1];
  v258 = v234;
  v259 = vmovl_high_s16(v254);
  v234.i64[0] = v259.u32[0];
  v234.i64[1] = v259.u32[1];
  v260 = v234;
  v234.i64[0] = v252.u32[2];
  v234.i64[1] = v252.u32[3];
  v261 = v234;
  v234.i64[0] = v255.u32[2];
  v234.i64[1] = v255.u32[3];
  v262 = v234;
  v234.i64[0] = v257.u32[2];
  v234.i64[1] = v257.u32[3];
  v263 = v234;
  v234.i64[0] = v259.u32[2];
  v234.i64[1] = v259.u32[3];
  v264 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v263);
  v265 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v253), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v235));
  v266 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v256), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v238));
  v267 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v258), v249);
  v268 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v260), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v242));
  v269 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v261), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v243));
  v270 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v262), v248);
  v271 = vorrq_s8(v264, v247);
  v272 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v234), v246);
  v273 = vceqzq_s8(*(int8x16_t *)(v221 + 360));
  v274 = vmovl_s8(*(int8x8_t *)v273.i8);
  v275 = vmovl_high_s16(v274);
  v276 = vmovl_high_s8(v273);
  v277 = vmovl_high_s16(v276);
  v278 = vmovl_s16(*(int16x4_t *)v274.i8);
  v279 = vmovl_s16(*(int16x4_t *)v276.i8);
  v234.i64[0] = v278.i32[0];
  v234.i64[1] = v278.i32[1];
  v280 = v234;
  v234.i64[0] = v279.i32[0];
  v234.i64[1] = v279.i32[1];
  v281 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v234);
  v282 = vceqzq_s8(*(int8x16_t *)(v221 + 376));
  v283 = vmovl_high_s8(v282);
  v284 = vmovl_s16(*(int16x4_t *)v283.i8);
  v234.i64[0] = v284.i32[0];
  v234.i64[1] = v284.i32[1];
  v285 = vmovl_s8(*(int8x8_t *)v282.i8);
  v286 = vmovl_s16(*(int16x4_t *)v285.i8);
  v287 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v234), v281), v265);
  v234.i64[0] = v286.i32[0];
  v234.i64[1] = v286.i32[1];
  v288 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v234), vbicq_s8((int8x16_t)xmmword_19FFB3170, v280));
  v234.i64[0] = v277.i32[0];
  v234.i64[1] = v277.i32[1];
  v289 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v234);
  v290 = vmovl_high_s16(v283);
  v291 = vorrq_s8(v288, v266);
  v234.i64[0] = v290.i32[0];
  v234.i64[1] = v290.i32[1];
  v292 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v234), v289);
  v234.i64[0] = v275.i32[0];
  v234.i64[1] = v275.i32[1];
  v293 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v234);
  v294 = vmovl_high_s16(v285);
  v234.i64[0] = v294.i32[0];
  v234.i64[1] = v294.i32[1];
  v295 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v234), v293), v268);
  v234.i64[0] = v279.i32[2];
  v234.i64[1] = v279.i32[3];
  v296 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v234);
  v234.i64[0] = v284.i32[2];
  v234.i64[1] = v284.i32[3];
  v297 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v234), v296), v269);
  v234.i64[0] = v278.i32[2];
  v234.i64[1] = v278.i32[3];
  v298 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v234);
  v234.i64[0] = v286.i32[2];
  v234.i64[1] = v286.i32[3];
  v299 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v234), v298), v270);
  v234.i64[0] = v277.i32[2];
  v234.i64[1] = v277.i32[3];
  v300 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v234);
  v234.i64[0] = v290.i32[2];
  v234.i64[1] = v290.i32[3];
  v301 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v234), v300), v271);
  v234.i64[0] = v275.i32[2];
  v234.i64[1] = v275.i32[3];
  v302 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v234);
  v234.i64[0] = v294.i32[2];
  v234.i64[1] = v294.i32[3];
  *((_QWORD *)v221 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v291, v287), vorrq_s8(v295, vorrq_s8(v292, v267))), (int64x2_t)vorrq_s8(vorrq_s8(v299, v297), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v234), v302), v272), v301))));
  *((_QWORD *)v221 + 3) = &off_1E42BBF48;
  v221[312] = 1;
  v303 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = v221 + 24;
  *((_QWORD *)this + 7) = v221;
  if (v303)
  {
    v304 = (unint64_t *)&v303->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = (std::__shared_weak_count *)*((_QWORD *)&v794 + 1);
  if (*((_QWORD *)&v794 + 1))
  {
    v307 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = *(_QWORD *)(v6 + 80);
  v310 = *(_QWORD *)(v309 + 2864);
  v311 = *(std::__shared_weak_count **)(v309 + 2872);
  v792 = v310;
  v793 = v311;
  if (v311)
  {
    v312 = (unint64_t *)&v311->__shared_owners_;
    do
      v313 = __ldxr(v312);
    while (__stxr(v313 + 1, v312));
  }
  v789 = 0;
  *(_QWORD *)&v788[24] = 0;
  v790 = 0;
  v788[0] = 1;
  *(_OWORD *)&v788[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v788[20] = 7;
  v791 = 15;
  v314 = operator new(0x198uLL);
  v314[1] = 0;
  v314[2] = 0;
  *v314 = &off_1E42E5030;
  v315 = *(_OWORD *)&a3->colorFormatsCount;
  v794 = *(_OWORD *)a3->colorFormats;
  v795 = v315;
  v316 = ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState((uint64_t)(v314 + 3), &v792, (uint64_t)v788, &v794, 0);
  v317 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = v316;
  *((_QWORD *)this + 9) = v314;
  if (v317)
  {
    v318 = (unint64_t *)&v317->__shared_owners_;
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = v793;
  if (v793)
  {
    v321 = (unint64_t *)&v793->__shared_owners_;
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  v323 = *(_QWORD *)(v6 + 80);
  v324 = *(_QWORD *)(v323 + 2912);
  v325 = *(_QWORD *)(v323 + 2920);
  *(_QWORD *)&v794 = v324;
  *((_QWORD *)&v794 + 1) = v325;
  if (v325)
  {
    v326 = (unint64_t *)(v325 + 8);
    do
      v327 = __ldxr(v326);
    while (__stxr(v327 + 1, v326));
  }
  v328 = (char *)operator new(0x198uLL);
  *((_QWORD *)v328 + 1) = 0;
  *((_QWORD *)v328 + 2) = 0;
  *(_QWORD *)v328 = &off_1E42E50A0;
  v329 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v788 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v788[16] = v329;
  if ((v330 & 1) == 0)
  {
    if ((_DWORD)v749)
    {
      if ((v750 & 1) == 0)
      {
        if ((_DWORD)v749)
        {
          if ((v772 & 1) == 0
          {
            if ((v777 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::Textured::ScreenTexturedQuadPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE584078 = &ggl::Textured::pipelineDataScreenTexturedQuadPipelineDeviceStructs(void)::ref;
          qword_1EE584080 = 0;
          if ((v773 & 1) == 0
          {
            ggl::Textured::pipelineDataScreenTexturedQuadPipelineConstantStructs(void)::ref = (uint64_t)ggl::Textured::ScreenTexturedQuad::reflection(void)::reflection;
          }
          qword_1EE584088 = (uint64_t)&ggl::Textured::pipelineDataScreenTexturedQuadPipelineConstantStructs(void)::ref;
          unk_1EE584090 = vdupq_n_s64(1uLL);
        }
      }
      ggl::Textured::ScreenTexturedQuadPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::ScreenTexturedQuadPipelineSetup::typedReflection(void)::ref;
      ggl::ScreenTexturedQuadShader::typedReflection(v749);
      qword_1EE5840B0 = (uint64_t)&ggl::ScreenTexturedQuadShader::typedReflection(void)::ref;
      if ((v751 & 1) == 0
      {
        ggl::Textured::pipelineStateScreenTexturedQuadPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE584688 = 0;
        qword_1EE584690 = (uint64_t)"";
        dword_1EE584698 = 0;
        qword_1EE5846A0 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineAttributeBinding_0(void)::attr;
        unk_1EE5846A8 = 2;
      }
      qword_1EE5840B8 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineAttributeStructBinding(void)::attr;
      unk_1EE5840C0 = 1;
      qword_1EE5840C8 = 0;
      unk_1EE5840D0 = 1;
      qword_1EE5840D8 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineDeviceStructBinding(void)::ref;
      unk_1EE5840E0 = 0;
      if ((v752 & 1) == 0
      {
        ggl::Textured::pipelineStateScreenTexturedQuadPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE584658 = 0;
        qword_1EE584660 = (uint64_t)"screenTexturedQuad";
        dword_1EE584668 = 3;
        qword_1EE584670 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineConstantScreenTexturedQuadBinding(void)::reflection;
        unk_1EE584678 = 2;
      }
      qword_1EE5840E8 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineConstantStructBinding(void)::ref;
      unk_1EE5840F0 = 1;
      v117 = v787;
    }
  }
  v331 = v794;
  if (*((_QWORD *)&v794 + 1))
  {
    v332 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v333 = __ldxr(v332);
    while (__stxr(v333 + 1, v332));
    *((_DWORD *)v328 + 14) = 0;
    *((_QWORD *)v328 + 5) = 0;
    *((_QWORD *)v328 + 6) = 0;
    *((_QWORD *)v328 + 3) = &off_1E42B6760;
    *((_QWORD *)v328 + 4) = 0;
    *((_QWORD *)v328 + 8) = &ggl::Textured::ScreenTexturedQuadPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v328 + 72) = v331;
    do
      v334 = __ldxr(v332);
    while (__stxr(v334 + 1, v332));
  }
  else
  {
    *((_DWORD *)v328 + 14) = 0;
    *((_QWORD *)v328 + 5) = 0;
    *((_QWORD *)v328 + 6) = 0;
    *((_QWORD *)v328 + 3) = &off_1E42B6760;
    *((_QWORD *)v328 + 4) = 0;
    *((_QWORD *)v328 + 8) = &ggl::Textured::ScreenTexturedQuadPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v328 + 72) = v331;
  }
  v328[136] = 0;
  *(_OWORD *)(v328 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v328 + 156) = 0;
  *(_QWORD *)(v328 + 172) = 0;
  *(_QWORD *)(v328 + 164) = 0;
  v328[184] = 0;
  *(_OWORD *)(v328 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v328 + 204) = 0;
  *(_QWORD *)(v328 + 220) = 0;
  *(_QWORD *)(v328 + 212) = 0;
  v328[232] = 0;
  *(_OWORD *)(v328 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v328 + 252) = 0;
  *(_QWORD *)(v328 + 268) = 0;
  *(_QWORD *)(v328 + 260) = 0;
  v335 = *(_OWORD *)&v788[16];
  *(_OWORD *)(v328 + 280) = *(_OWORD *)v788;
  *(_OWORD *)(v328 + 296) = v335;
  v328[312] = 0;
  *((_QWORD *)v328 + 48) = 0;
  *((_OWORD *)v328 + 22) = 0u;
  *((_OWORD *)v328 + 23) = 0u;
  *((_OWORD *)v328 + 20) = 0u;
  *((_OWORD *)v328 + 21) = 0u;
  *((_QWORD *)v328 + 49) = 0x100000001;
  v328[400] = 0;
  v328[88] = 1;
  *(_WORD *)(v328 + 89) = v792;
  v328[91] = BYTE2(v792);
  *(_OWORD *)(v328 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v328 + 27) = 7;
  *((_QWORD *)v328 + 14) = 0;
  *((_QWORD *)v328 + 15) = 0;
  *((_DWORD *)v328 + 32) = 0;
  v328[132] = 15;
  if (*((_QWORD *)&v331 + 1))
  {
    v336 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v331 + 1) + 16))(*((_QWORD *)&v331 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v331 + 1));
    }
  }
  *((_DWORD *)v328 + 82) = 0;
  v338 = vceqzq_s8(*(int8x16_t *)(v328 + 328));
  v339 = vmovl_s8(*(int8x8_t *)v338.i8);
  v340 = vmovl_high_s16(v339);
  v341.i64[0] = v340.u32[2];
  v341.i64[1] = v340.u32[3];
  v342 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v341);
  v343 = vmovl_high_s8(v338);
  v344 = vmovl_high_s16(v343);
  v341.i64[0] = v344.u32[2];
  v341.i64[1] = v344.u32[3];
  v345 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v341);
  v346 = vmovl_s16(*(int16x4_t *)v339.i8);
  v341.i64[0] = v346.u32[2];
  v341.i64[1] = v346.u32[3];
  v347 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v341);
  v348 = vmovl_s16(*(int16x4_t *)v343.i8);
  v341.i64[0] = v348.u32[2];
  v341.i64[1] = v348.u32[3];
  v349 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v341);
  v341.i64[0] = v340.u32[0];
  v341.i64[1] = v340.u32[1];
  v350 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v341);
  v341.i64[0] = v344.u32[0];
  v341.i64[1] = v344.u32[1];
  v351 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v341);
  v341.i64[0] = v346.u32[0];
  v341.i64[1] = v346.u32[1];
  v352 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v341);
  v341.i64[0] = v348.u32[0];
  v341.i64[1] = v348.u32[1];
  v353 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v341);
  v354 = vceqzq_s8(*(int8x16_t *)(v328 + 344));
  v355 = vmovl_s8(*(int8x8_t *)v354.i8);
  v356 = vmovl_high_s16(v355);
  v341.i64[0] = v356.u32[2];
  v341.i64[1] = v356.u32[3];
  v357 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v341);
  v358 = vmovl_high_s8(v354);
  v359 = vmovl_high_s16(v358);
  v341.i64[0] = v359.u32[2];
  v341.i64[1] = v359.u32[3];
  v360 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v341);
  v361 = vmovl_s16(*(int16x4_t *)v355.i8);
  v341.i64[0] = v361.u32[2];
  v341.i64[1] = v361.u32[3];
  v362 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v341);
  v363 = vmovl_s16(*(int16x4_t *)v358.i8);
  v341.i64[0] = v363.u32[2];
  v341.i64[1] = v363.u32[3];
  v364 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v341);
  v341.i64[0] = v356.u32[0];
  v341.i64[1] = v356.u32[1];
  v365 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v341);
  v341.i64[0] = v359.u32[0];
  v341.i64[1] = v359.u32[1];
  v366 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v341);
  v341.i64[0] = v361.u32[0];
  v341.i64[1] = v361.u32[1];
  v367 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v341);
  v341.i64[0] = v363.u32[0];
  v341.i64[1] = v363.u32[1];
  v368 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v341), v353);
  v369 = vorrq_s8(v367, v352);
  v370 = vorrq_s8(v366, v351);
  v371 = vorrq_s8(v365, v350);
  v372 = vorrq_s8(v364, v349);
  v373 = vorrq_s8(v362, v347);
  v374 = vorrq_s8(v360, v345);
  v375 = vorrq_s8(v357, v342);
  v376 = vceqzq_s8(*(int8x16_t *)(v328 + 360));
  v377 = vmovl_s8(*(int8x8_t *)v376.i8);
  v378 = vmovl_high_s16(v377);
  v379 = vmovl_high_s8(v376);
  v380 = vmovl_high_s16(v379);
  v381 = vmovl_s16(*(int16x4_t *)v377.i8);
  v382 = vmovl_s16(*(int16x4_t *)v379.i8);
  v341.i64[0] = v382.i32[0];
  v341.i64[1] = v382.i32[1];
  v383 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v341);
  v341.i64[0] = v381.i32[0];
  v341.i64[1] = v381.i32[1];
  v384 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v341);
  v341.i64[0] = v380.i32[0];
  v341.i64[1] = v380.i32[1];
  v385 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v341);
  v341.i64[0] = v378.i32[0];
  v341.i64[1] = v378.i32[1];
  v386 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v341);
  v341.i64[0] = v378.i32[2];
  v341.i64[1] = v378.i32[3];
  v387 = v341;
  v341.i64[0] = v380.i32[2];
  v341.i64[1] = v380.i32[3];
  v388 = v341;
  v341.i64[0] = v381.i32[2];
  v341.i64[1] = v381.i32[3];
  v389 = v341;
  v341.i64[0] = v382.i32[2];
  v341.i64[1] = v382.i32[3];
  v390 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v341);
  v391 = vceqzq_s8(*(int8x16_t *)(v328 + 376));
  v392 = vmovl_high_s8(v391);
  v393 = vmovl_s16(*(int16x4_t *)v392.i8);
  v394 = vmovl_s8(*(int8x8_t *)v391.i8);
  v395 = vmovl_s16(*(int16x4_t *)v394.i8);
  v396 = vmovl_high_s16(v392);
  v397 = vmovl_high_s16(v394);
  v341.i64[0] = v397.i32[2];
  v341.i64[1] = v397.i32[3];
  v398 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v341);
  v341.i64[0] = v396.i32[2];
  v341.i64[1] = v396.i32[3];
  v399 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v341);
  v341.i64[0] = v395.i32[2];
  v341.i64[1] = v395.i32[3];
  v400 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v341);
  v341.i64[0] = v393.i32[2];
  v341.i64[1] = v393.i32[3];
  v401 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v341);
  v341.i64[0] = v397.i32[0];
  v341.i64[1] = v397.i32[1];
  v402 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v341);
  v341.i64[0] = v396.i32[0];
  v341.i64[1] = v396.i32[1];
  v403 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v341);
  v341.i64[0] = v395.i32[0];
  v341.i64[1] = v395.i32[1];
  v404 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v341);
  v341.i64[0] = v393.i32[0];
  v341.i64[1] = v393.i32[1];
  *((_QWORD *)v328 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v404, v384), v369), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v341), v383), v368)), vorrq_s8(vorrq_s8(vorrq_s8(v402, v386), v371), vorrq_s8(vorrq_s8(v403, v385), v370))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v400, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v389)), v373), vorrq_s8(vorrq_s8(v401, v390), v372)), vorrq_s8(vorrq_s8(vorrq_s8(v398, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v387)),
                                                v375),
                                              vorrq_s8(vorrq_s8(v399, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v388)), v374)))));
  *((_QWORD *)v328 + 3) = &off_1E42BCF08;
  v328[312] = 1;
  v405 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = v328 + 24;
  *((_QWORD *)this + 11) = v328;
  if (v405)
  {
    v406 = (unint64_t *)&v405->__shared_owners_;
    do
      v407 = __ldaxr(v406);
    while (__stlxr(v407 - 1, v406));
    if (!v407)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
  }
  v408 = (std::__shared_weak_count *)*((_QWORD *)&v794 + 1);
  if (*((_QWORD *)&v794 + 1))
  {
    v409 = (unint64_t *)(*((_QWORD *)&v794 + 1) + 8);
    do
      v410 = __ldaxr(v409);
    while (__stlxr(v410 - 1, v409));
    if (!v410)
    {
      ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
      std::__shared_weak_count::__release_weak(v408);
    }
  }
  v411 = (unint64_t *)operator new();
  v830[0] = &off_1E42D2908;
  v830[1] = this;
  v831 = v830;
  v828[0] = &off_1E42D7550;
  v829 = v828;
  ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>::FragmentedPool(v411, (uint64_t)v830, (uint64_t)v828);
  v412 = *v786;
  *v786 = (uint64_t)v411;
  if (v412)
  {
    v413 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v412);
    MEMORY[0x1A1AF4E00](v413, 0x10A0C40D234DDC7);
  }
  v414 = v829;
  if (v829 == v828)
  {
    v415 = 4;
    v414 = v828;
  }
  else
  {
    if (!v829)
      goto LABEL_151;
    v415 = 5;
  }
  (*(void (**)(void))(*v414 + 8 * v415))();
LABEL_151:
  v416 = v831;
  if (v831 == v830)
  {
    v417 = 4;
    v416 = v830;
    goto LABEL_155;
  }
  if (v831)
  {
    v417 = 5;
LABEL_155:
    (*(void (**)(void))(*v416 + 8 * v417))();
  }
  v418 = (uint64_t *)operator new();
  v826[0] = &off_1E42D2950;
  v826[1] = this;
  v827 = v826;
  v824[0] = &off_1E42D7598;
  v825 = v824;
  v418[1] = 0;
  v418[2] = 0;
  *v418 = 0;
  {
    v753 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v753, "GeoGL", 0xA3D02C1100000005);
  }
  v420 = ggl::Allocator::instance(void)::alloc;
  v418[4] = 0;
  v418[3] = v420;
  v418[5] = 0;
  v418[6] = 0;
  {
    v754 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v754, "GeoGL", 0xA3D02C1100000005);
  }
  v418[7] = ggl::Allocator::instance(void)::alloc;
  v421 = (uint64_t)v827;
  if (!v827)
    goto LABEL_161;
  if (v827 != v826)
  {
    v421 = (*(uint64_t (**)(void))(*v827 + 16))();
LABEL_161:
    v418[11] = v421;
    goto LABEL_163;
  }
  v418[11] = (uint64_t)(v418 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v826[0] + 24))(v826, v418 + 8);
LABEL_163:
  v422 = (uint64_t)v825;
  if (!v825)
  {
LABEL_166:
    v418[15] = v422;
    goto LABEL_168;
  }
  if (v825 != v824)
  {
    v422 = (*(uint64_t (**)(void))(*v825 + 16))();
    goto LABEL_166;
  }
  v418[15] = (uint64_t)(v418 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v824[0] + 24))((uint64_t)v824, v418 + 12);
LABEL_168:
  v418[16] = 2000;
  v423 = *v418;
  if ((unint64_t)(v418[2] - *v418) > 0x31F)
    goto LABEL_181;
  v424 = v418[1];
  v425 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418[3] + 16))(v418[3], 800, 8);
  v426 = v424 - v423;
  v427 = v425 + ((v424 - v423) & 0xFFFFFFFFFFFFFFF8);
  v429 = *v418;
  v428 = v418[1];
  v430 = v428 - *v418;
  if (v428 == *v418)
  {
    v432 = v425 + ((v424 - v423) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_179;
  }
  v431 = v430 - 8;
  if ((unint64_t)(v430 - 8) >= 0x58)
  {
    v432 = v425 + ((v424 - v423) & 0xFFFFFFFFFFFFFFF8);
    if (v428 - ((v426 & 0xFFFFFFFFFFFFFFF8) + v425) >= 0x20)
    {
      v433 = v426 >> 3;
      v434 = (v431 >> 3) + 1;
      v435 = (_OWORD *)(v425 + 8 * v433 - 16);
      v436 = (__int128 *)(v428 - 16);
      v437 = v434 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v438 = *v436;
        *(v435 - 1) = *(v436 - 1);
        *v435 = v438;
        v435 -= 2;
        v436 -= 2;
        v437 -= 4;
      }
      while (v437);
      v432 = v427 - 8 * (v434 & 0x3FFFFFFFFFFFFFFCLL);
      v428 -= 8 * (v434 & 0x3FFFFFFFFFFFFFFCLL);
      if (v434 == (v434 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_178;
    }
  }
  else
  {
    v432 = v425 + ((v424 - v423) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v439 = *(_QWORD *)(v428 - 8);
    v428 -= 8;
    *(_QWORD *)(v432 - 8) = v439;
    v432 -= 8;
  }
  while (v428 != v429);
LABEL_178:
  v428 = *v418;
LABEL_179:
  *v418 = v432;
  v418[1] = v427;
  v440 = v418[2];
  v418[2] = v425 + 800;
  if (v428)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418[3] + 40))(v418[3], v428, v440 - v428);
LABEL_181:
  v441 = v418[4];
  if ((unint64_t)(v418[6] - v441) > 0x31F)
    goto LABEL_194;
  v442 = v418[5];
  v443 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418[7] + 16))(v418[7], 800, 8);
  v444 = v442 - v441;
  v445 = v443 + ((v442 - v441) & 0xFFFFFFFFFFFFFFF8);
  v447 = v418[4];
  v446 = v418[5];
  v448 = v446 - v447;
  if (v446 == v447)
  {
    v450 = v443 + ((v442 - v441) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_192;
  }
  v449 = v448 - 8;
  if ((unint64_t)(v448 - 8) >= 0x58)
  {
    v450 = v443 + ((v442 - v441) & 0xFFFFFFFFFFFFFFF8);
    if (v446 - (v444 & 0xFFFFFFFFFFFFFFF8) - v443 >= 0x20)
    {
      v451 = v444 >> 3;
      v452 = (v449 >> 3) + 1;
      v453 = (_OWORD *)(v443 + 8 * v451 - 16);
      v454 = (__int128 *)(v446 - 16);
      v455 = v452 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v456 = *v454;
        *(v453 - 1) = *(v454 - 1);
        *v453 = v456;
        v453 -= 2;
        v454 -= 2;
        v455 -= 4;
      }
      while (v455);
      v450 = v445 - 8 * (v452 & 0x3FFFFFFFFFFFFFFCLL);
      v446 -= 8 * (v452 & 0x3FFFFFFFFFFFFFFCLL);
      if (v452 == (v452 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_191;
    }
  }
  else
  {
    v450 = v443 + ((v442 - v441) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v457 = *(_QWORD *)(v446 - 8);
    v446 -= 8;
    *(_QWORD *)(v450 - 8) = v457;
    v450 -= 8;
  }
  while (v446 != v447);
LABEL_191:
  v446 = v418[4];
LABEL_192:
  v418[4] = v450;
  v418[5] = v445;
  v458 = v418[6];
  v418[6] = v443 + 800;
  if (v446)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418[7] + 40))(v418[7], v446, v458 - v446);
LABEL_194:
  v459 = *v785;
  *v785 = (uint64_t)v418;
  if (v459)
  {
    v460 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v459);
    MEMORY[0x1A1AF4E00](v460, 0x10A0C40D234DDC7);
  }
  v461 = v825;
  if (v825 == v824)
  {
    v462 = 4;
    v461 = v824;
  }
  else
  {
    if (!v825)
      goto LABEL_201;
    v462 = 5;
  }
  (*(void (**)(void))(*v461 + 8 * v462))();
LABEL_201:
  v463 = v827;
  if (v827 == v826)
  {
    v464 = 4;
    v463 = v826;
    goto LABEL_205;
  }
  if (v827)
  {
    v464 = 5;
LABEL_205:
    (*(void (**)(void))(*v463 + 8 * v464))();
  }
  v465 = (uint64_t *)operator new();
  v822[0] = &off_1E42D2998;
  v823 = v822;
  v820[0] = &off_1E42D7670;
  v821 = v820;
  v465[1] = 0;
  v465[2] = 0;
  *v465 = 0;
  {
    v755 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v755, "GeoGL", 0xA3D02C1100000005);
  }
  v467 = ggl::Allocator::instance(void)::alloc;
  v465[4] = 0;
  v465[3] = v467;
  v465[5] = 0;
  v465[6] = 0;
  {
    v756 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v756, "GeoGL", 0xA3D02C1100000005);
  }
  v465[7] = ggl::Allocator::instance(void)::alloc;
  v468 = (uint64_t)v823;
  if (!v823)
    goto LABEL_211;
  if (v823 != v822)
  {
    v468 = (*(uint64_t (**)(void))(*v823 + 16))();
LABEL_211:
    v465[11] = v468;
    goto LABEL_213;
  }
  v465[11] = (uint64_t)(v465 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v822[0] + 24))((uint64_t)v822, v465 + 8);
LABEL_213:
  v469 = (uint64_t)v821;
  if (!v821)
  {
LABEL_216:
    v465[15] = v469;
    goto LABEL_218;
  }
  if (v821 != v820)
  {
    v469 = (*(uint64_t (**)(void))(*v821 + 16))();
    goto LABEL_216;
  }
  v465[15] = (uint64_t)(v465 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v820[0] + 24))((uint64_t)v820, v465 + 12);
LABEL_218:
  v465[16] = 2000;
  v470 = *v465;
  if ((unint64_t)(v465[2] - *v465) > 0x31F)
    goto LABEL_231;
  v471 = v465[1];
  v472 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v465[3] + 16))(v465[3], 800, 8);
  v473 = v471 - v470;
  v474 = v472 + ((v471 - v470) & 0xFFFFFFFFFFFFFFF8);
  v476 = *v465;
  v475 = v465[1];
  v477 = v475 - *v465;
  if (v475 == *v465)
  {
    v479 = v472 + ((v471 - v470) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_229;
  }
  v478 = v477 - 8;
  if ((unint64_t)(v477 - 8) >= 0x58)
  {
    v479 = v472 + ((v471 - v470) & 0xFFFFFFFFFFFFFFF8);
    if (v475 - (v473 & 0xFFFFFFFFFFFFFFF8) - v472 >= 0x20)
    {
      v480 = v473 >> 3;
      v481 = (v478 >> 3) + 1;
      v482 = (_OWORD *)(v472 + 8 * v480 - 16);
      v483 = (__int128 *)(v475 - 16);
      v484 = v481 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v485 = *v483;
        *(v482 - 1) = *(v483 - 1);
        *v482 = v485;
        v482 -= 2;
        v483 -= 2;
        v484 -= 4;
      }
      while (v484);
      v479 = v474 - 8 * (v481 & 0x3FFFFFFFFFFFFFFCLL);
      v475 -= 8 * (v481 & 0x3FFFFFFFFFFFFFFCLL);
      if (v481 == (v481 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_228;
    }
  }
  else
  {
    v479 = v472 + ((v471 - v470) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v486 = *(_QWORD *)(v475 - 8);
    v475 -= 8;
    *(_QWORD *)(v479 - 8) = v486;
    v479 -= 8;
  }
  while (v475 != v476);
LABEL_228:
  v475 = *v465;
LABEL_229:
  *v465 = v479;
  v465[1] = v474;
  v487 = v465[2];
  v465[2] = v472 + 800;
  if (v475)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v465[3] + 40))(v465[3], v475, v487 - v475);
LABEL_231:
  v488 = v465[4];
  if ((unint64_t)(v465[6] - v488) > 0x31F)
    goto LABEL_244;
  v489 = v465[5];
  v490 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v465[7] + 16))(v465[7], 800, 8);
  v491 = v489 - v488;
  v492 = v490 + ((v489 - v488) & 0xFFFFFFFFFFFFFFF8);
  v494 = v465[4];
  v493 = v465[5];
  v495 = v493 - v494;
  if (v493 == v494)
  {
    v497 = v490 + ((v489 - v488) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_242;
  }
  v496 = v495 - 8;
  if ((unint64_t)(v495 - 8) >= 0x58)
  {
    v497 = v490 + ((v489 - v488) & 0xFFFFFFFFFFFFFFF8);
    if (v493 - (v491 & 0xFFFFFFFFFFFFFFF8) - v490 >= 0x20)
    {
      v498 = v491 >> 3;
      v499 = (v496 >> 3) + 1;
      v500 = (_OWORD *)(v490 + 8 * v498 - 16);
      v501 = (__int128 *)(v493 - 16);
      v502 = v499 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v503 = *v501;
        *(v500 - 1) = *(v501 - 1);
        *v500 = v503;
        v500 -= 2;
        v501 -= 2;
        v502 -= 4;
      }
      while (v502);
      v497 = v492 - 8 * (v499 & 0x3FFFFFFFFFFFFFFCLL);
      v493 -= 8 * (v499 & 0x3FFFFFFFFFFFFFFCLL);
      if (v499 == (v499 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_241;
    }
  }
  else
  {
    v497 = v490 + ((v489 - v488) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v504 = *(_QWORD *)(v493 - 8);
    v493 -= 8;
    *(_QWORD *)(v497 - 8) = v504;
    v497 -= 8;
  }
  while (v493 != v494);
LABEL_241:
  v493 = v465[4];
LABEL_242:
  v465[4] = v497;
  v465[5] = v492;
  v505 = v465[6];
  v465[6] = v490 + 800;
  if (v493)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v465[7] + 40))(v465[7], v493, v505 - v493);
LABEL_244:
  v506 = *v784;
  *v784 = (uint64_t)v465;
  if (v506)
  {
    v507 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v506);
    MEMORY[0x1A1AF4E00](v507, 0x10A0C40D234DDC7);
  }
  v508 = v821;
  if (v821 == v820)
  {
    v509 = 4;
    v508 = v820;
  }
  else
  {
    if (!v821)
      goto LABEL_251;
    v509 = 5;
  }
  (*(void (**)(void))(*v508 + 8 * v509))();
LABEL_251:
  v510 = v823;
  if (v823 == v822)
  {
    v511 = 4;
    v510 = v822;
  }
  else
  {
    if (!v823)
      goto LABEL_256;
    v511 = 5;
  }
  (*(void (**)(void))(*v510 + 8 * v511))();
LABEL_256:
  v512 = (unint64_t *)operator new();
  v818[0] = &off_1E42D29E0;
  v819 = v818;
  v816[0] = &off_1E42D6080;
  v817 = v816;
  ggl::FragmentedPool<ggl::CommonMesh::Pos4Mesh>::FragmentedPool(v512, (uint64_t)v818, (uint64_t)v816);
  v513 = *v783;
  *v783 = (uint64_t)v512;
  if (v513)
  {
    v514 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v513);
    MEMORY[0x1A1AF4E00](v514, 0x10A0C40D234DDC7);
  }
  v515 = v817;
  if (v817 == v816)
  {
    v516 = 4;
    v515 = v816;
  }
  else
  {
    if (!v817)
      goto LABEL_263;
    v516 = 5;
  }
  (*(void (**)(void))(*v515 + 8 * v516))();
LABEL_263:
  v517 = v819;
  if (v819 == v818)
  {
    v518 = 4;
    v517 = v818;
    goto LABEL_267;
  }
  if (v819)
  {
    v518 = 5;
LABEL_267:
    (*(void (**)(void))(*v517 + 8 * v518))();
  }
  v519 = (uint64_t *)operator new();
  v814[0] = &off_1E42D2A28;
  v814[1] = this;
  v815 = v814;
  v812[0] = &off_1E42D7628;
  v813 = v812;
  v519[1] = 0;
  v519[2] = 0;
  *v519 = 0;
  {
    v757 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v757, "GeoGL", 0xA3D02C1100000005);
  }
  v521 = ggl::Allocator::instance(void)::alloc;
  v519[4] = 0;
  v519[3] = v521;
  v519[5] = 0;
  v519[6] = 0;
  {
    v758 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v758, "GeoGL", 0xA3D02C1100000005);
  }
  v519[7] = ggl::Allocator::instance(void)::alloc;
  v522 = (uint64_t)v815;
  if (!v815)
    goto LABEL_273;
  if (v815 != v814)
  {
    v522 = (*(uint64_t (**)(void))(*v815 + 16))();
LABEL_273:
    v519[11] = v522;
    goto LABEL_275;
  }
  v519[11] = (uint64_t)(v519 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v814[0] + 24))((uint64_t)v814, v519 + 8);
LABEL_275:
  v523 = (uint64_t)v813;
  if (!v813)
  {
LABEL_278:
    v519[15] = v523;
    goto LABEL_280;
  }
  if (v813 != v812)
  {
    v523 = (*(uint64_t (**)(void))(*v813 + 16))();
    goto LABEL_278;
  }
  v519[15] = (uint64_t)(v519 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v812[0] + 24))((uint64_t)v812, v519 + 12);
LABEL_280:
  v519[16] = 2000;
  v524 = *v519;
  if ((unint64_t)(v519[2] - *v519) > 0x31F)
    goto LABEL_293;
  v525 = v519[1];
  v526 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v519[3] + 16))(v519[3], 800, 8);
  v527 = v525 - v524;
  v528 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
  v530 = *v519;
  v529 = v519[1];
  v531 = v529 - *v519;
  if (v529 == *v519)
  {
    v533 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_291;
  }
  v532 = v531 - 8;
  if ((unint64_t)(v531 - 8) >= 0x58)
  {
    v533 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
    if (v529 - (v527 & 0xFFFFFFFFFFFFFFF8) - v526 >= 0x20)
    {
      v534 = v527 >> 3;
      v535 = (v532 >> 3) + 1;
      v536 = (_OWORD *)(v526 + 8 * v534 - 16);
      v537 = (__int128 *)(v529 - 16);
      v538 = v535 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v539 = *v537;
        *(v536 - 1) = *(v537 - 1);
        *v536 = v539;
        v536 -= 2;
        v537 -= 2;
        v538 -= 4;
      }
      while (v538);
      v533 = v528 - 8 * (v535 & 0x3FFFFFFFFFFFFFFCLL);
      v529 -= 8 * (v535 & 0x3FFFFFFFFFFFFFFCLL);
      if (v535 == (v535 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_290;
    }
  }
  else
  {
    v533 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v540 = *(_QWORD *)(v529 - 8);
    v529 -= 8;
    *(_QWORD *)(v533 - 8) = v540;
    v533 -= 8;
  }
  while (v529 != v530);
LABEL_290:
  v529 = *v519;
LABEL_291:
  *v519 = v533;
  v519[1] = v528;
  v541 = v519[2];
  v519[2] = v526 + 800;
  if (v529)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v519[3] + 40))(v519[3], v529, v541 - v529);
LABEL_293:
  v542 = v519[4];
  if ((unint64_t)(v519[6] - v542) > 0x31F)
    goto LABEL_306;
  v543 = v519[5];
  v544 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v519[7] + 16))(v519[7], 800, 8);
  v545 = v543 - v542;
  v546 = v544 + ((v543 - v542) & 0xFFFFFFFFFFFFFFF8);
  v548 = v519[4];
  v547 = v519[5];
  v549 = v547 - v548;
  if (v547 == v548)
  {
    v551 = v544 + ((v543 - v542) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_304;
  }
  v550 = v549 - 8;
  if ((unint64_t)(v549 - 8) >= 0x58)
  {
    v551 = v544 + ((v543 - v542) & 0xFFFFFFFFFFFFFFF8);
    if (v547 - (v545 & 0xFFFFFFFFFFFFFFF8) - v544 >= 0x20)
    {
      v552 = v545 >> 3;
      v553 = (v550 >> 3) + 1;
      v554 = (_OWORD *)(v544 + 8 * v552 - 16);
      v555 = (__int128 *)(v547 - 16);
      v556 = v553 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v557 = *v555;
        *(v554 - 1) = *(v555 - 1);
        *v554 = v557;
        v554 -= 2;
        v555 -= 2;
        v556 -= 4;
      }
      while (v556);
      v551 = v546 - 8 * (v553 & 0x3FFFFFFFFFFFFFFCLL);
      v547 -= 8 * (v553 & 0x3FFFFFFFFFFFFFFCLL);
      if (v553 == (v553 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_303;
    }
  }
  else
  {
    v551 = v544 + ((v543 - v542) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v558 = *(_QWORD *)(v547 - 8);
    v547 -= 8;
    *(_QWORD *)(v551 - 8) = v558;
    v551 -= 8;
  }
  while (v547 != v548);
LABEL_303:
  v547 = v519[4];
LABEL_304:
  v519[4] = v551;
  v519[5] = v546;
  v559 = v519[6];
  v519[6] = v544 + 800;
  if (v547)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v519[7] + 40))(v519[7], v547, v559 - v547);
LABEL_306:
  v560 = *v782;
  *v782 = (uint64_t)v519;
  if (v560)
  {
    v561 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v560);
    MEMORY[0x1A1AF4E00](v561, 0x10A0C40D234DDC7);
  }
  v562 = v813;
  if (v813 == v812)
  {
    v563 = 4;
    v562 = v812;
  }
  else
  {
    if (!v813)
      goto LABEL_313;
    v563 = 5;
  }
  (*(void (**)(void))(*v562 + 8 * v563))();
LABEL_313:
  v564 = v815;
  if (v815 == v814)
  {
    v565 = 4;
    v564 = v814;
    goto LABEL_317;
  }
  if (v815)
  {
    v565 = 5;
LABEL_317:
    (*(void (**)(void))(*v564 + 8 * v565))();
  }
  v566 = (uint64_t *)operator new();
  v810[0] = &off_1E42D2A70;
  v810[1] = this;
  v811 = v810;
  v808[0] = &off_1E42D76B8;
  v809 = v808;
  v566[1] = 0;
  v566[2] = 0;
  *v566 = 0;
  {
    v759 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v759, "GeoGL", 0xA3D02C1100000005);
  }
  v568 = ggl::Allocator::instance(void)::alloc;
  v566[4] = 0;
  v566[3] = v568;
  v566[5] = 0;
  v566[6] = 0;
  {
    v760 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v760, "GeoGL", 0xA3D02C1100000005);
  }
  v566[7] = ggl::Allocator::instance(void)::alloc;
  v569 = (uint64_t)v811;
  if (!v811)
    goto LABEL_323;
  if (v811 != v810)
  {
    v569 = (*(uint64_t (**)(void))(*v811 + 16))();
LABEL_323:
    v566[11] = v569;
    goto LABEL_325;
  }
  v566[11] = (uint64_t)(v566 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v810[0] + 24))((uint64_t)v810, v566 + 8);
LABEL_325:
  v570 = (uint64_t)v809;
  if (!v809)
  {
LABEL_328:
    v566[15] = v570;
    goto LABEL_330;
  }
  if (v809 != v808)
  {
    v570 = (*(uint64_t (**)(void))(*v809 + 16))();
    goto LABEL_328;
  }
  v566[15] = (uint64_t)(v566 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v808[0] + 24))((uint64_t)v808, v566 + 12);
LABEL_330:
  v566[16] = 2000;
  v571 = *v566;
  if ((unint64_t)(v566[2] - *v566) > 0x31F)
    goto LABEL_343;
  v572 = v566[1];
  v573 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v566[3] + 16))(v566[3], 800, 8);
  v574 = v572 - v571;
  v575 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
  v577 = *v566;
  v576 = v566[1];
  v578 = v576 - *v566;
  if (v576 == *v566)
  {
    v580 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_341;
  }
  v579 = v578 - 8;
  if ((unint64_t)(v578 - 8) >= 0x58)
  {
    v580 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
    if (v576 - (v574 & 0xFFFFFFFFFFFFFFF8) - v573 >= 0x20)
    {
      v581 = v574 >> 3;
      v582 = (v579 >> 3) + 1;
      v583 = (_OWORD *)(v573 + 8 * v581 - 16);
      v584 = (__int128 *)(v576 - 16);
      v585 = v582 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v586 = *v584;
        *(v583 - 1) = *(v584 - 1);
        *v583 = v586;
        v583 -= 2;
        v584 -= 2;
        v585 -= 4;
      }
      while (v585);
      v580 = v575 - 8 * (v582 & 0x3FFFFFFFFFFFFFFCLL);
      v576 -= 8 * (v582 & 0x3FFFFFFFFFFFFFFCLL);
      if (v582 == (v582 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_340;
    }
  }
  else
  {
    v580 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v587 = *(_QWORD *)(v576 - 8);
    v576 -= 8;
    *(_QWORD *)(v580 - 8) = v587;
    v580 -= 8;
  }
  while (v576 != v577);
LABEL_340:
  v576 = *v566;
LABEL_341:
  *v566 = v580;
  v566[1] = v575;
  v588 = v566[2];
  v566[2] = v573 + 800;
  if (v576)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v566[3] + 40))(v566[3], v576, v588 - v576);
LABEL_343:
  v589 = v566[4];
  if ((unint64_t)(v566[6] - v589) > 0x31F)
    goto LABEL_356;
  v590 = v566[5];
  v591 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v566[7] + 16))(v566[7], 800, 8);
  v592 = v590 - v589;
  v593 = v591 + ((v590 - v589) & 0xFFFFFFFFFFFFFFF8);
  v595 = v566[4];
  v594 = v566[5];
  v596 = v594 - v595;
  if (v594 == v595)
  {
    v598 = v591 + ((v590 - v589) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_354;
  }
  v597 = v596 - 8;
  if ((unint64_t)(v596 - 8) >= 0x58)
  {
    v598 = v591 + ((v590 - v589) & 0xFFFFFFFFFFFFFFF8);
    if (v594 - (v592 & 0xFFFFFFFFFFFFFFF8) - v591 >= 0x20)
    {
      v599 = v592 >> 3;
      v600 = (v597 >> 3) + 1;
      v601 = (_OWORD *)(v591 + 8 * v599 - 16);
      v602 = (__int128 *)(v594 - 16);
      v603 = v600 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v604 = *v602;
        *(v601 - 1) = *(v602 - 1);
        *v601 = v604;
        v601 -= 2;
        v602 -= 2;
        v603 -= 4;
      }
      while (v603);
      v598 = v593 - 8 * (v600 & 0x3FFFFFFFFFFFFFFCLL);
      v594 -= 8 * (v600 & 0x3FFFFFFFFFFFFFFCLL);
      if (v600 == (v600 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_353;
    }
  }
  else
  {
    v598 = v591 + ((v590 - v589) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v605 = *(_QWORD *)(v594 - 8);
    v594 -= 8;
    *(_QWORD *)(v598 - 8) = v605;
    v598 -= 8;
  }
  while (v594 != v595);
LABEL_353:
  v594 = v566[4];
LABEL_354:
  v566[4] = v598;
  v566[5] = v593;
  v606 = v566[6];
  v566[6] = v591 + 800;
  if (v594)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v566[7] + 40))(v566[7], v594, v606 - v594);
LABEL_356:
  v607 = *v781;
  *v781 = (uint64_t)v566;
  if (v607)
  {
    v608 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v607);
    MEMORY[0x1A1AF4E00](v608, 0x10A0C40D234DDC7);
  }
  v609 = v809;
  if (v809 == v808)
  {
    v610 = 4;
    v609 = v808;
  }
  else
  {
    if (!v809)
      goto LABEL_363;
    v610 = 5;
  }
  (*(void (**)(void))(*v609 + 8 * v610))();
LABEL_363:
  v611 = v811;
  if (v811 == v810)
  {
    v612 = 4;
    v611 = v810;
    goto LABEL_367;
  }
  if (v811)
  {
    v612 = 5;
LABEL_367:
    (*(void (**)(void))(*v611 + 8 * v612))();
  }
  v613 = (uint64_t *)operator new();
  v806[0] = &off_1E42D2AB8;
  v806[1] = this;
  v807 = v806;
  v804[0] = &off_1E42D7BC8;
  v805 = v804;
  v613[1] = 0;
  v613[2] = 0;
  *v613 = 0;
  {
    v761 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v761, "GeoGL", 0xA3D02C1100000005);
  }
  v615 = ggl::Allocator::instance(void)::alloc;
  v613[4] = 0;
  v613[3] = v615;
  v613[5] = 0;
  v613[6] = 0;
  {
    v762 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v762, "GeoGL", 0xA3D02C1100000005);
  }
  v613[7] = ggl::Allocator::instance(void)::alloc;
  v616 = (uint64_t)v807;
  if (!v807)
    goto LABEL_373;
  if (v807 != v806)
  {
    v616 = (*(uint64_t (**)(void))(*v807 + 16))();
LABEL_373:
    v613[11] = v616;
    goto LABEL_375;
  }
  v613[11] = (uint64_t)(v613 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v806[0] + 24))((uint64_t)v806, v613 + 8);
LABEL_375:
  v617 = (uint64_t)v805;
  if (!v805)
  {
LABEL_378:
    v613[15] = v617;
    goto LABEL_380;
  }
  if (v805 != v804)
  {
    v617 = (*(uint64_t (**)(void))(*v805 + 16))();
    goto LABEL_378;
  }
  v613[15] = (uint64_t)(v613 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v804[0] + 24))((uint64_t)v804, v613 + 12);
LABEL_380:
  v613[16] = 2000;
  v618 = *v613;
  if ((unint64_t)(v613[2] - *v613) > 0x31F)
    goto LABEL_393;
  v619 = v613[1];
  v620 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v613[3] + 16))(v613[3], 800, 8);
  v621 = v619 - v618;
  v622 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
  v624 = *v613;
  v623 = v613[1];
  v625 = v623 - *v613;
  if (v623 == *v613)
  {
    v627 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_391;
  }
  v626 = v625 - 8;
  if ((unint64_t)(v625 - 8) >= 0x58)
  {
    v627 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
    if (v623 - (v621 & 0xFFFFFFFFFFFFFFF8) - v620 >= 0x20)
    {
      v628 = v621 >> 3;
      v629 = (v626 >> 3) + 1;
      v630 = (_OWORD *)(v620 + 8 * v628 - 16);
      v631 = (__int128 *)(v623 - 16);
      v632 = v629 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v633 = *v631;
        *(v630 - 1) = *(v631 - 1);
        *v630 = v633;
        v630 -= 2;
        v631 -= 2;
        v632 -= 4;
      }
      while (v632);
      v627 = v622 - 8 * (v629 & 0x3FFFFFFFFFFFFFFCLL);
      v623 -= 8 * (v629 & 0x3FFFFFFFFFFFFFFCLL);
      if (v629 == (v629 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_390;
    }
  }
  else
  {
    v627 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v634 = *(_QWORD *)(v623 - 8);
    v623 -= 8;
    *(_QWORD *)(v627 - 8) = v634;
    v627 -= 8;
  }
  while (v623 != v624);
LABEL_390:
  v623 = *v613;
LABEL_391:
  *v613 = v627;
  v613[1] = v622;
  v635 = v613[2];
  v613[2] = v620 + 800;
  if (v623)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v613[3] + 40))(v613[3], v623, v635 - v623);
LABEL_393:
  v636 = v613[4];
  if ((unint64_t)(v613[6] - v636) > 0x31F)
    goto LABEL_406;
  v637 = v613[5];
  v638 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v613[7] + 16))(v613[7], 800, 8);
  v639 = v637 - v636;
  v640 = v638 + ((v637 - v636) & 0xFFFFFFFFFFFFFFF8);
  v642 = v613[4];
  v641 = v613[5];
  v643 = v641 - v642;
  if (v641 == v642)
  {
    v645 = v638 + ((v637 - v636) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_404;
  }
  v644 = v643 - 8;
  if ((unint64_t)(v643 - 8) >= 0x58)
  {
    v645 = v638 + ((v637 - v636) & 0xFFFFFFFFFFFFFFF8);
    if (v641 - (v639 & 0xFFFFFFFFFFFFFFF8) - v638 >= 0x20)
    {
      v646 = v639 >> 3;
      v647 = (v644 >> 3) + 1;
      v648 = (_OWORD *)(v638 + 8 * v646 - 16);
      v649 = (__int128 *)(v641 - 16);
      v650 = v647 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v651 = *v649;
        *(v648 - 1) = *(v649 - 1);
        *v648 = v651;
        v648 -= 2;
        v649 -= 2;
        v650 -= 4;
      }
      while (v650);
      v645 = v640 - 8 * (v647 & 0x3FFFFFFFFFFFFFFCLL);
      v641 -= 8 * (v647 & 0x3FFFFFFFFFFFFFFCLL);
      if (v647 == (v647 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_403;
    }
  }
  else
  {
    v645 = v638 + ((v637 - v636) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v652 = *(_QWORD *)(v641 - 8);
    v641 -= 8;
    *(_QWORD *)(v645 - 8) = v652;
    v645 -= 8;
  }
  while (v641 != v642);
LABEL_403:
  v641 = v613[4];
LABEL_404:
  v613[4] = v645;
  v613[5] = v640;
  v653 = v613[6];
  v613[6] = v638 + 800;
  if (v641)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v613[7] + 40))(v613[7], v641, v653 - v641);
LABEL_406:
  v654 = *v780;
  *v780 = (uint64_t)v613;
  if (v654)
  {
    v655 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v654);
    MEMORY[0x1A1AF4E00](v655, 0x10A0C40D234DDC7);
  }
  v656 = v805;
  if (v805 == v804)
  {
    v657 = 4;
    v656 = v804;
  }
  else
  {
    if (!v805)
      goto LABEL_413;
    v657 = 5;
  }
  (*(void (**)(void))(*v656 + 8 * v657))();
LABEL_413:
  v658 = v807;
  if (v807 == v806)
  {
    v659 = 4;
    v658 = v806;
    goto LABEL_417;
  }
  if (v807)
  {
    v659 = 5;
LABEL_417:
    (*(void (**)(void))(*v658 + 8 * v659))();
  }
  v660 = (uint64_t *)operator new();
  v802[0] = &off_1E42D2B00;
  v802[1] = this;
  v803 = v802;
  v800[0] = &off_1E42D7C58;
  v801 = v800;
  v660[1] = 0;
  v660[2] = 0;
  *v660 = 0;
  {
    v763 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v763, "GeoGL", 0xA3D02C1100000005);
  }
  v662 = ggl::Allocator::instance(void)::alloc;
  v660[4] = 0;
  v660[3] = v662;
  v660[5] = 0;
  v660[6] = 0;
  {
    v764 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v764, "GeoGL", 0xA3D02C1100000005);
  }
  v660[7] = ggl::Allocator::instance(void)::alloc;
  v663 = (uint64_t)v803;
  if (!v803)
    goto LABEL_423;
  if (v803 != v802)
  {
    v663 = (*(uint64_t (**)(void))(*v803 + 16))();
LABEL_423:
    v660[11] = v663;
    goto LABEL_425;
  }
  v660[11] = (uint64_t)(v660 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v802[0] + 24))((uint64_t)v802, v660 + 8);
LABEL_425:
  v664 = (uint64_t)v801;
  if (!v801)
  {
LABEL_428:
    v660[15] = v664;
    goto LABEL_430;
  }
  if (v801 != v800)
  {
    v664 = (*(uint64_t (**)(void))(*v801 + 16))();
    goto LABEL_428;
  }
  v660[15] = (uint64_t)(v660 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v800[0] + 24))((uint64_t)v800, v660 + 12);
LABEL_430:
  v660[16] = 2000;
  v665 = *v660;
  if ((unint64_t)(v660[2] - *v660) > 0x31F)
    goto LABEL_443;
  v666 = v660[1];
  v667 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v660[3] + 16))(v660[3], 800, 8);
  v668 = v666 - v665;
  v669 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
  v671 = *v660;
  v670 = v660[1];
  v672 = v670 - *v660;
  if (v670 == *v660)
  {
    v674 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_441;
  }
  v673 = v672 - 8;
  if ((unint64_t)(v672 - 8) >= 0x58)
  {
    v674 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
    if (v670 - (v668 & 0xFFFFFFFFFFFFFFF8) - v667 >= 0x20)
    {
      v675 = v668 >> 3;
      v676 = (v673 >> 3) + 1;
      v677 = (_OWORD *)(v667 + 8 * v675 - 16);
      v678 = (__int128 *)(v670 - 16);
      v679 = v676 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v680 = *v678;
        *(v677 - 1) = *(v678 - 1);
        *v677 = v680;
        v677 -= 2;
        v678 -= 2;
        v679 -= 4;
      }
      while (v679);
      v674 = v669 - 8 * (v676 & 0x3FFFFFFFFFFFFFFCLL);
      v670 -= 8 * (v676 & 0x3FFFFFFFFFFFFFFCLL);
      if (v676 == (v676 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_440;
    }
  }
  else
  {
    v674 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v681 = *(_QWORD *)(v670 - 8);
    v670 -= 8;
    *(_QWORD *)(v674 - 8) = v681;
    v674 -= 8;
  }
  while (v670 != v671);
LABEL_440:
  v670 = *v660;
LABEL_441:
  *v660 = v674;
  v660[1] = v669;
  v682 = v660[2];
  v660[2] = v667 + 800;
  if (v670)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v660[3] + 40))(v660[3], v670, v682 - v670);
LABEL_443:
  v683 = v660[4];
  if ((unint64_t)(v660[6] - v683) > 0x31F)
    goto LABEL_456;
  v684 = v660[5];
  v685 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v660[7] + 16))(v660[7], 800, 8);
  v686 = v684 - v683;
  v687 = v685 + ((v684 - v683) & 0xFFFFFFFFFFFFFFF8);
  v689 = v660[4];
  v688 = v660[5];
  v690 = v688 - v689;
  if (v688 == v689)
  {
    v692 = v685 + ((v684 - v683) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_454;
  }
  v691 = v690 - 8;
  if ((unint64_t)(v690 - 8) >= 0x58)
  {
    v692 = v685 + ((v684 - v683) & 0xFFFFFFFFFFFFFFF8);
    if (v688 - (v686 & 0xFFFFFFFFFFFFFFF8) - v685 >= 0x20)
    {
      v693 = v686 >> 3;
      v694 = (v691 >> 3) + 1;
      v695 = (_OWORD *)(v685 + 8 * v693 - 16);
      v696 = (__int128 *)(v688 - 16);
      v697 = v694 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v698 = *v696;
        *(v695 - 1) = *(v696 - 1);
        *v695 = v698;
        v695 -= 2;
        v696 -= 2;
        v697 -= 4;
      }
      while (v697);
      v692 = v687 - 8 * (v694 & 0x3FFFFFFFFFFFFFFCLL);
      v688 -= 8 * (v694 & 0x3FFFFFFFFFFFFFFCLL);
      if (v694 == (v694 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_453;
    }
  }
  else
  {
    v692 = v685 + ((v684 - v683) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v699 = *(_QWORD *)(v688 - 8);
    v688 -= 8;
    *(_QWORD *)(v692 - 8) = v699;
    v692 -= 8;
  }
  while (v688 != v689);
LABEL_453:
  v688 = v660[4];
LABEL_454:
  v660[4] = v692;
  v660[5] = v687;
  v700 = v660[6];
  v660[6] = v685 + 800;
  if (v688)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v660[7] + 40))(v660[7], v688, v700 - v688);
LABEL_456:
  v701 = *v779;
  *v779 = (uint64_t)v660;
  if (v701)
  {
    v702 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v701);
    MEMORY[0x1A1AF4E00](v702, 0x10A0C40D234DDC7);
  }
  v703 = v801;
  if (v801 == v800)
  {
    v704 = 4;
    v703 = v800;
  }
  else
  {
    if (!v801)
      goto LABEL_463;
    v704 = 5;
  }
  (*(void (**)(void))(*v703 + 8 * v704))();
LABEL_463:
  v705 = v803;
  if (v803 == v802)
  {
    v706 = 4;
    v705 = v802;
  }
  else
  {
    if (!v803)
      goto LABEL_468;
    v706 = 5;
  }
  (*(void (**)(void))(*v705 + 8 * v706))();
LABEL_468:
  v707 = operator new();
  *(_DWORD *)(v707 + 32) = 0;
  *(_QWORD *)(v707 + 16) = 0;
  *(_QWORD *)(v707 + 24) = 0;
  *(_QWORD *)v707 = &off_1E42B5DE8;
  *(_QWORD *)(v707 + 8) = 0;
  *(_QWORD *)(v707 + 36) = 65537;
  *(_DWORD *)(v707 + 44) = 0;
  *(_QWORD *)(v707 + 48) = 1;
  *(_WORD *)(v707 + 56) = 0;
  *(_BYTE *)(v707 + 58) = 3;
  *(_QWORD *)(v707 + 67) = 0;
  *(_QWORD *)(v707 + 59) = 0;
  *(_BYTE *)(v707 + 75) = 0;
  *(_QWORD *)(v707 + 132) = 0;
  *(_QWORD *)(v707 + 124) = 0;
  *(_WORD *)(v707 + 188) = 257;
  *(_QWORD *)(v707 + 192) = 0;
  *(_QWORD *)(v707 + 200) = 0;
  *(_BYTE *)(v707 + 208) = 0;
  v708 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v707;
  if (v708)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v708 + 8))(v708);
    v707 = *((_QWORD *)this + 21);
  }
  *(_BYTE *)(v707 + 58) = 1;
  *(_BYTE *)(v707 + 56) = 1;
  v709 = operator new();
  *(_DWORD *)(v709 + 32) = 0;
  *(_QWORD *)(v709 + 16) = 0;
  *(_QWORD *)(v709 + 24) = 0;
  *(_QWORD *)v709 = &off_1E42B5DE8;
  *(_QWORD *)(v709 + 8) = 0;
  *(_QWORD *)(v709 + 36) = 65537;
  *(_DWORD *)(v709 + 44) = 0;
  *(_QWORD *)(v709 + 48) = 1;
  *(_WORD *)(v709 + 56) = 0;
  *(_BYTE *)(v709 + 58) = 3;
  *(_QWORD *)(v709 + 67) = 0;
  *(_QWORD *)(v709 + 59) = 0;
  *(_BYTE *)(v709 + 75) = 0;
  *(_QWORD *)(v709 + 132) = 0;
  *(_QWORD *)(v709 + 124) = 0;
  *(_WORD *)(v709 + 188) = 257;
  *(_QWORD *)(v709 + 192) = 0;
  *(_QWORD *)(v709 + 200) = 0;
  *(_BYTE *)(v709 + 208) = 0;
  v710 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v709;
  if (v710)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v710 + 8))(v710);
    v709 = *((_QWORD *)this + 22);
  }
  *(_BYTE *)(v709 + 58) = 3;
  *(_BYTE *)(v709 + 56) = 1;
  v711 = operator new();
  *(_DWORD *)(v711 + 32) = 0;
  *(_QWORD *)(v711 + 16) = 0;
  *(_QWORD *)(v711 + 24) = 0;
  *(_QWORD *)v711 = &off_1E42B5DE8;
  *(_QWORD *)(v711 + 8) = 0;
  *(_QWORD *)(v711 + 36) = 65537;
  *(_DWORD *)(v711 + 44) = 0;
  *(_QWORD *)(v711 + 48) = 1;
  *(_WORD *)(v711 + 56) = 0;
  *(_BYTE *)(v711 + 58) = 3;
  *(_QWORD *)(v711 + 67) = 0;
  *(_QWORD *)(v711 + 59) = 0;
  *(_BYTE *)(v711 + 75) = 0;
  *(_QWORD *)(v711 + 132) = 0;
  *(_QWORD *)(v711 + 124) = 0;
  *(_WORD *)(v711 + 188) = 257;
  *(_QWORD *)(v711 + 192) = 0;
  *(_QWORD *)(v711 + 200) = 0;
  *(_BYTE *)(v711 + 208) = 0;
  v712 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v711;
  if (v712)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v712 + 8))(v712);
    v711 = *((_QWORD *)this + 26);
  }
  *(_BYTE *)(v711 + 58) = 3;
  *(_BYTE *)(v711 + 56) = 1;
  v713 = operator new();
  *(_DWORD *)(v713 + 32) = 0;
  *(_QWORD *)(v713 + 16) = 0;
  *(_QWORD *)(v713 + 24) = 0;
  *(_QWORD *)v713 = &off_1E42B5DE8;
  *(_QWORD *)(v713 + 8) = 0;
  *(_QWORD *)(v713 + 36) = 65537;
  *(_DWORD *)(v713 + 44) = 0;
  *(_QWORD *)(v713 + 48) = 1;
  *(_WORD *)(v713 + 56) = 0;
  *(_BYTE *)(v713 + 58) = 3;
  *(_QWORD *)(v713 + 67) = 0;
  *(_QWORD *)(v713 + 59) = 0;
  *(_BYTE *)(v713 + 75) = 0;
  *(_QWORD *)(v713 + 132) = 0;
  *(_QWORD *)(v713 + 124) = 0;
  *(_WORD *)(v713 + 188) = 257;
  *(_QWORD *)(v713 + 192) = 0;
  *(_QWORD *)(v713 + 200) = 0;
  *(_BYTE *)(v713 + 208) = 0;
  v714 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v713;
  if (v714)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v714 + 8))(v714);
    v713 = *((_QWORD *)this + 27);
  }
  *(_BYTE *)(v713 + 58) = 3;
  *(_WORD *)(v713 + 56) = 258;
  v715 = operator new();
  *(_DWORD *)(v715 + 32) = 0;
  *(_QWORD *)(v715 + 16) = 0;
  *(_QWORD *)(v715 + 24) = 0;
  *(_QWORD *)v715 = &off_1E42B5DE8;
  *(_QWORD *)(v715 + 8) = 0;
  *(_QWORD *)(v715 + 36) = 65537;
  *(_DWORD *)(v715 + 44) = 0;
  *(_QWORD *)(v715 + 48) = 1;
  *(_WORD *)(v715 + 56) = 0;
  *(_BYTE *)(v715 + 58) = 3;
  *(_QWORD *)(v715 + 67) = 0;
  *(_QWORD *)(v715 + 59) = 0;
  *(_BYTE *)(v715 + 75) = 0;
  *(_QWORD *)(v715 + 132) = 0;
  *(_QWORD *)(v715 + 124) = 0;
  *(_WORD *)(v715 + 188) = 257;
  *(_QWORD *)(v715 + 192) = 0;
  *(_QWORD *)(v715 + 200) = 0;
  *(_BYTE *)(v715 + 208) = 0;
  v716 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v715;
  if (v716)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v716 + 8))(v716);
    v715 = *((_QWORD *)this + 23);
  }
  *(_BYTE *)(v715 + 58) = 0;
  *(_BYTE *)(v715 + 56) = 1;
  v717 = operator new();
  *(_DWORD *)(v717 + 32) = 0;
  *(_QWORD *)(v717 + 16) = 0;
  *(_QWORD *)(v717 + 24) = 0;
  *(_QWORD *)v717 = &off_1E42B5DE8;
  *(_QWORD *)(v717 + 8) = 0;
  *(_QWORD *)(v717 + 36) = 65537;
  *(_DWORD *)(v717 + 44) = 0;
  *(_QWORD *)(v717 + 48) = 1;
  *(_WORD *)(v717 + 56) = 0;
  *(_BYTE *)(v717 + 58) = 3;
  *(_QWORD *)(v717 + 67) = 0;
  *(_QWORD *)(v717 + 59) = 0;
  *(_BYTE *)(v717 + 75) = 0;
  *(_QWORD *)(v717 + 132) = 0;
  *(_QWORD *)(v717 + 124) = 0;
  *(_WORD *)(v717 + 188) = 257;
  *(_QWORD *)(v717 + 192) = 0;
  *(_QWORD *)(v717 + 200) = 0;
  *(_BYTE *)(v717 + 208) = 0;
  v718 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v717;
  if (v718)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v718 + 8))(v718);
    v717 = *((_QWORD *)this + 24);
  }
  *(_BYTE *)(v717 + 56) = 1;
  v719 = (unint64_t *)operator new();
  v798[0] = &off_1E42D2B48;
  v799 = v798;
  v796[0] = &off_1E42D60C8;
  v797 = v796;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v719, (uint64_t)v798, (uint64_t)v796);
  v720 = *v778;
  *v778 = (uint64_t)v719;
  if (v720)
  {
    v721 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v720);
    MEMORY[0x1A1AF4E00](v721, 0x10A0C40D234DDC7);
  }
  v722 = v797;
  if (v797 == v796)
  {
    v723 = 4;
    v722 = v796;
  }
  else
  {
    if (!v797)
      goto LABEL_487;
    v723 = 5;
  }
  (*(void (**)(void))(*v722 + 8 * v723))();
LABEL_487:
  v724 = v799;
  if (v799 == v798)
  {
    v725 = 4;
    v724 = v798;
    goto LABEL_491;
  }
  if (v799)
  {
    v725 = 5;
LABEL_491:
    (*(void (**)(void))(*v724 + 8 * v725))();
  }
  v726 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  if (v726)
  {
    v727 = (unint64_t *)&v726->__shared_owners_;
    do
      v728 = __ldaxr(v727);
    while (__stlxr(v728 - 1, v727));
    if (!v728)
    {
      ((void (*)(std::__shared_weak_count *))v726->__on_zero_shared)(v726);
      std::__shared_weak_count::__release_weak(v726);
    }
  }
  v729 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  if (v729)
  {
    v730 = (unint64_t *)&v729->__shared_owners_;
    do
      v731 = __ldaxr(v730);
    while (__stlxr(v731 - 1, v730));
    if (!v731)
    {
      ((void (*)(std::__shared_weak_count *))v729->__on_zero_shared)(v729);
      std::__shared_weak_count::__release_weak(v729);
    }
  }
  v732 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  if (v732)
  {
    v733 = (unint64_t *)&v732->__shared_owners_;
    do
      v734 = __ldaxr(v733);
    while (__stlxr(v734 - 1, v733));
    if (!v734)
    {
      ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
      std::__shared_weak_count::__release_weak(v732);
    }
  }

  return this;
}

void sub_19F8006C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,void *a26)
{
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v31 = (_QWORD *)v28[11];
  if (v31 == v29)
  {
    v32 = 4;
  }
  else
  {
    if (!v31)
    {
      v33 = *v27;
      if (*v27)
        goto LABEL_16;
      goto LABEL_5;
    }
    v32 = 5;
    v29 = (_QWORD *)v28[11];
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v32))(v29);
  v33 = *v27;
  if (*v27)
  {
LABEL_16:
    v28[5] = v33;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[7] + 40))(v28[7], v33, v28[6] - v33);
    v34 = *v28;
    if (!*v28)
    {
LABEL_7:
      v35 = (unint64_t *)STACK[0x368];
      if ((unint64_t *)STACK[0x368] == &STACK[0x350])
      {
        v36 = 4;
        v35 = &STACK[0x350];
      }
      else
      {
        if (!v35)
          goto LABEL_12;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_12:
      v37 = (unint64_t *)STACK[0x388];
      if ((unint64_t *)STACK[0x388] == &STACK[0x370])
      {
        v38 = 4;
        v37 = &STACK[0x370];
      }
      else
      {
        if (!v37)
          goto LABEL_21;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v28, 0x10A0C40D234DDC7);
      md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)(v26 + 42));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 40));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 38));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 36));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 34));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 32));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
      v39 = v26[27];
      v26[27] = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v40 = v26[26];
      v26[26] = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v41 = v26[25];
      v26[25] = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      v42 = v26[24];
      v26[24] = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v26[23];
      v26[23] = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      v44 = v26[22];
      v26[22] = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v45 = v26[21];
      v26[21] = 0;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a17);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a18);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a19);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a20);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a21);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a24);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a25);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a23);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a22);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v26);

      _Unwind_Resume(a1);
    }
LABEL_6:
    v28[1] = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 40))(v28[3], v34, v28[2] - v34);
    goto LABEL_7;
  }
LABEL_5:
  v34 = *v28;
  if (!*v28)
    goto LABEL_7;
  goto LABEL_6;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D2B48;
  return result;
}

int64x2_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "DebugItem";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured31ScreenTexturedQuadPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured31ScreenTexturedQuadPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7C58;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2B00;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(std::__shared_weak_count **)(v1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCED8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D30;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE562CB0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Textured::ScreenTexturedQuad::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F30;
  v13 = (uint64_t *)v3[8];
  *v13 = v12;
  v13[1] = 0;
  v14 = (uint64_t *)v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = (std::__shared_weak_count *)v14[1];
  *v14 = v12;
  v14[1] = (uint64_t)v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::Textured::ScreenTexturedQuad>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Textured::ScreenTexturedQuad>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::ScreenTexturedQuad>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::ScreenTexturedQuad>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::ScreenTexturedQuad>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured28Pos2DUVExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured28Pos2DUVExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7BC8;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::Textured::Pos2DUVExtendedPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::Textured::Pos2DUVExtendedPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2AB8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::Textured::Pos2DUVExtendedPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v17;
  unint64_t v18;
  unint64_t shared_weak_owners;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count **v31;
  std::__shared_weak_count **v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCE38;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D68;
  v12 = v10 + 1;
  ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE562BB0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Textured::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F50;
  v13 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v15 = v13 + 1;
  ggl::BufferData::BufferData((uint64_t)&v13[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v13[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  shared_owners = v13[1].__shared_owners_;
  v17 = v13[4].__vftable;
  LODWORD(v17->~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v17->~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v17->~__shared_weak_count + 4) = 0;
  HIDWORD(v17->__on_zero_shared) = 1065353216;
  v17->__get_deleter = 0;
  v17->__on_zero_shared_weak = 0;
  LODWORD(v17[1].~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v17[1].~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v17[1].~__shared_weak_count + 4) = 0;
  HIDWORD(v17[1].__on_zero_shared) = 1065353216;
  if (v13[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v13[3].__shared_weak_owners_;
  v13[3].__shared_owners_ = 0;
  v13[3].__shared_weak_owners_ = shared_owners;
  v18 = v10[1].__shared_owners_;
  __asm { FMOV            V0.4S, #1.0 }
  shared_weak_owners = v10[3].__shared_weak_owners_;
  *(_OWORD *)&v10[4].~__shared_weak_count = _Q0;
  if (shared_weak_owners > v18)
    v18 = shared_weak_owners;
  v10[3].__shared_owners_ = 0;
  v10[3].__shared_weak_owners_ = v18;
  v25 = v3[8];
  *(_QWORD *)(v25 + 48) = v12;
  *(_QWORD *)(v25 + 56) = 0;
  v26 = v3[20];
  do
    v27 = __ldxr(v11);
  while (__stxr(v27 + 1, v11));
  v28 = *(std::__shared_weak_count **)(v26 + 56);
  *(_QWORD *)(v26 + 48) = v12;
  *(_QWORD *)(v26 + 56) = v10;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count **)v3[8];
  *v31 = v15;
  v31[1] = 0;
  v32 = (std::__shared_weak_count **)v3[20];
  do
    v33 = __ldxr(v14);
  while (__stxr(v33 + 1, v14));
  v34 = v32[1];
  *v32 = v15;
  v32[1] = v13;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  do
    v37 = __ldaxr(v14);
  while (__stlxr(v37 - 1, v14));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  do
    v38 = __ldaxr(v11);
  while (__stlxr(v38 - 1, v11));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19F8018B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ggl::ConstantDataTyped<ggl::Textured::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Point13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Point13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D76B8;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::Point::PipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::Point::PipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2A70;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::Point::PipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBF18;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2550;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54B890, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Point::View::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9950;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  LODWORD(v14->~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v14->~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v14->~__shared_weak_count + 4) = 0;
  HIDWORD(v14->__on_zero_shared) = 1065353216;
  v14->__get_deleter = 0;
  v14->__on_zero_shared_weak = 0;
  LODWORD(v14[1].~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v14[1].~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v14[1].~__shared_weak_count + 4) = 0;
  *(void (__cdecl **)(std::__shared_count *__hidden))((char *)&v14[1].__on_zero_shared + 4) = (void (__cdecl *)(std::__shared_count *__hidden))0x412000003F800000;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v10[3].__shared_weak_owners_ = shared_owners;
  v15 = (uint64_t *)v3[8];
  *v15 = v12;
  v15[1] = 0;
  v16 = (uint64_t *)v3[20];
  do
    v17 = __ldxr(v11);
  while (__stxr(v17 + 1, v11));
  v18 = (std::__shared_weak_count *)v16[1];
  *v16 = v12;
  v16[1] = (uint64_t)v10;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(v11);
  while (__stlxr(v21 - 1, v11));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::Point::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Point::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Point::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Point::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Point::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug26InstancedBasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug26InstancedBasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7628;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Debug::InstancedBasePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Debug::InstancedBasePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2A28;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Debug::InstancedBasePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t shared_weak_owners;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBE08;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CAC0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9850;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v10[3].__shared_weak_owners_ = shared_owners;
  v15 = (uint64_t *)v3[8];
  *v15 = v12;
  v15[1] = 0;
  v16 = (uint64_t *)v3[20];
  do
    v17 = __ldxr(v11);
  while (__stxr(v17 + 1, v11));
  v18 = (std::__shared_weak_count *)v16[1];
  *v16 = v12;
  v16[1] = (uint64_t)v10;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  v23 = ggl::BufferData::BufferData((uint64_t)&v21[1], qword_1EE55CB00, 2, 1, 6, 1);
  v21[9].__shared_owners_ = (uint64_t)ggl::Debug::View::reflection(void)::reflection;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9830;
  shared_weak_owners = v21[1].__shared_owners_;
  v25 = v21[4].__vftable;
  LODWORD(v25->~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25->~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25->~__shared_weak_count + 4) = 0;
  HIDWORD(v25->__on_zero_shared) = 1065353216;
  v25->__get_deleter = 0;
  v25->__on_zero_shared_weak = 0;
  LODWORD(v25[1].~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25[1].~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25[1].~__shared_weak_count + 4) = 0;
  HIDWORD(v25[1].__on_zero_shared) = 1065353216;
  if (v21[3].__shared_weak_owners_ > shared_weak_owners)
    shared_weak_owners = v21[3].__shared_weak_owners_;
  v21[3].__shared_owners_ = 0;
  v21[3].__shared_weak_owners_ = shared_weak_owners;
  v26 = v3[8];
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = 0;
  v27 = v3[20];
  do
    v28 = __ldxr(v22);
  while (__stxr(v28 + 1, v22));
  v29 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v23;
  *(_QWORD *)(v27 + 24) = v21;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v22);
  while (__stlxr(v32 - 1, v22));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  do
    v33 = __ldaxr(v11);
  while (__stlxr(v33 - 1, v11));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19F8020F4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D29E0;
  return result;
}

ggl::CommonMesh::Pos4Mesh *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::operator()()
{
  ggl::CommonMesh::Pos4Mesh *v0;

  v0 = (ggl::CommonMesh::Pos4Mesh *)operator new();
  return ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v0, "Debug Line Mesh");
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug8LineMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug8LineMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7670;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Debug::LineMesh * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Debug::LineMesh * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D2998;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Debug::LineMesh * ()(void)>::operator()()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unsigned __int8 v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 v26;
  uint64_t v27;
  geo::read_write_lock *v28;
  const char *v29;
  malloc_zone_t *zone;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *v34;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  geo::read_write_lock *v43;
  const char *v44;
  malloc_zone_t *v45;
  uint64_t v46;

  v0 = operator new();
  if ((v1 & 1) == 0
  {
    if ((v26 & 1) == 0
    {
      ggl::MeshTyped<ggl::Debug::LineVBO>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::lineVBOReflection;
    }
    ggl::MeshTyped<ggl::Debug::LineVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::LineVBO>::attributesReflection(void)::r;
    unk_1ECE36028 = 1;
  }
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  *(_QWORD *)v0 = &off_1E42BBC08;
  *(_QWORD *)(v0 + 8) = "Debug Triangulated Line Mesh";
  *(_QWORD *)(v0 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 56) = &ggl::MeshTyped<ggl::Debug::LineVBO>::typedReflection(void)::r;
  *(_QWORD *)(v0 + 64) = 0;
  v2 = v0 + 64;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  {
    v27 = operator new();
    *(_QWORD *)(v27 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v27 + 24) = "GeoGL";
    *(_OWORD *)(v27 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v27 = &off_1E42B5668;
    *(_QWORD *)(v27 + 8) = "GeoGL";
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_OWORD *)(v27 + 232) = 0u;
    *(_QWORD *)(v27 + 248) = 0;
    *(_OWORD *)(v27 + 56) = 0u;
    v28 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v27 + 56), 0);
    if ((_DWORD)v28)
      geo::read_write_lock::logFailure(v28, (uint64_t)"initialization", v29);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v27 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v27 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v27;
  }
  v4 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v0 + 120) = 0;
  v5 = v0 + 120;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 88) = v4;
  {
    v31 = operator new();
    *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v31 + 24) = "GeoGL";
    *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v31 = &off_1E42B5668;
    *(_QWORD *)(v31 + 8) = "GeoGL";
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_OWORD *)(v31 + 152) = 0u;
    *(_OWORD *)(v31 + 168) = 0u;
    *(_OWORD *)(v31 + 184) = 0u;
    *(_OWORD *)(v31 + 200) = 0u;
    *(_OWORD *)(v31 + 216) = 0u;
    *(_OWORD *)(v31 + 232) = 0u;
    *(_QWORD *)(v31 + 248) = 0;
    *(_OWORD *)(v31 + 56) = 0u;
    v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
    if ((_DWORD)v32)
      geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
    v34 = malloc_create_zone(0, 0);
    *(_QWORD *)(v31 + 48) = v34;
    malloc_set_zone_name(v34, "GeoGL");
    *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v31;
    v5 = v0 + 120;
  }
  *(_QWORD *)(v0 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 112) = v5;
  *(_QWORD *)v0 = &off_1E42BDD38;
  *(_QWORD *)(v0 + 16) = &unk_1E42BDD58;
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = (v8 - v6) >> 4;
  v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      v11 = v6 + 16 * v7;
      while (v8 != v11)
      {
        v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v8 -= 16;
      }
      *(_QWORD *)(v0 + 72) = v11;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v0 + 64, v10);
  }
  *(_QWORD *)v0 = &off_1E42BBE58;
  *(_QWORD *)(v0 + 16) = &unk_1E42BBE78;
  {
    v35 = operator new();
    *(_QWORD *)(v35 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v35 + 24) = "GeoGL";
    *(_OWORD *)(v35 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v35 = &off_1E42B5668;
    *(_QWORD *)(v35 + 8) = "GeoGL";
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 216) = 0u;
    *(_OWORD *)(v35 + 232) = 0u;
    *(_QWORD *)(v35 + 248) = 0;
    *(_OWORD *)(v35 + 56) = 0u;
    v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
    if ((_DWORD)v36)
      geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
    v38 = malloc_create_zone(0, 0);
    *(_QWORD *)(v35 + 48) = v38;
    malloc_set_zone_name(v38, "GeoGL");
    *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v35;
  }
  v16 = ggl::Allocator::instance(void)::alloc;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v17 = &off_1E42E03A0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 32) = &off_1E42B5748;
  v18 = v17 + 32;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v17 + 40) = 32;
  *(_DWORD *)(v17 + 48) = 6;
  v19 = 0uLL;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_QWORD *)(v17 + 120) = 0;
  if ((v20 & 1) == 0)
  {
    v46 = v17;
    v39 = v17 + 32;
    v19 = 0uLL;
    v18 = v39;
    v41 = v40;
    v17 = v46;
    if (v41)
    {
      v42 = operator new();
      *(_QWORD *)(v42 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v42 + 24) = "GeoGL";
      *(_OWORD *)(v42 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v42 = &off_1E42B5668;
      *(_QWORD *)(v42 + 8) = "GeoGL";
      *(_OWORD *)(v42 + 72) = 0u;
      *(_OWORD *)(v42 + 88) = 0u;
      *(_OWORD *)(v42 + 104) = 0u;
      *(_OWORD *)(v42 + 120) = 0u;
      *(_OWORD *)(v42 + 136) = 0u;
      *(_OWORD *)(v42 + 152) = 0u;
      *(_OWORD *)(v42 + 168) = 0u;
      *(_OWORD *)(v42 + 184) = 0u;
      *(_OWORD *)(v42 + 200) = 0u;
      *(_OWORD *)(v42 + 216) = 0u;
      *(_OWORD *)(v42 + 232) = 0u;
      *(_QWORD *)(v42 + 248) = 0;
      *(_OWORD *)(v42 + 56) = 0u;
      v43 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v42 + 56), 0);
      if ((_DWORD)v43)
        geo::read_write_lock::logFailure(v43, (uint64_t)"initialization", v44);
      v45 = malloc_create_zone(0, 0);
      *(_QWORD *)(v42 + 48) = v45;
      malloc_set_zone_name(v45, "GeoGL");
      *(_QWORD *)(v42 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v42;
      v17 = v46;
      v18 = v39;
      v19 = 0uLL;
    }
  }
  *(_QWORD *)(v17 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 136) = 0;
  *(_OWORD *)(v17 + 200) = v19;
  *(_OWORD *)(v17 + 184) = v19;
  *(_OWORD *)(v17 + 168) = v19;
  *(_QWORD *)(v17 + 216) = 0;
  *(_QWORD *)(v17 + 224) = -1;
  *(_OWORD *)(v17 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v17 + 144) = 0;
  *(_QWORD *)(v17 + 240) = "Debug Triangulated Line Mesh";
  *(_QWORD *)(v17 + 248) = &ggl::Debug::lineVBOReflection;
  *(_QWORD *)(v17 + 32) = &off_1E42B80A0;
  *(_QWORD *)(v17 + 232) = &unk_1E42B80C0;
  v21 = *(uint64_t **)v2;
  v22 = *(std::__shared_weak_count **)(*(_QWORD *)v2 + 8);
  *v21 = v18;
  v21[1] = v17;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v0;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17LinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17LinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7598;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Debug::LinePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Debug::LinePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2950;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Debug::LinePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t shared_weak_owners;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBD68;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CAC0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9850;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v10[3].__shared_weak_owners_ = shared_owners;
  v15 = (uint64_t *)v3[8];
  *v15 = v12;
  v15[1] = 0;
  v16 = (uint64_t *)v3[20];
  do
    v17 = __ldxr(v11);
  while (__stxr(v17 + 1, v11));
  v18 = (std::__shared_weak_count *)v16[1];
  *v16 = v12;
  v16[1] = (uint64_t)v10;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  v23 = ggl::BufferData::BufferData((uint64_t)&v21[1], qword_1EE55CB00, 2, 1, 6, 1);
  v21[9].__shared_owners_ = (uint64_t)ggl::Debug::View::reflection(void)::reflection;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9830;
  shared_weak_owners = v21[1].__shared_owners_;
  v25 = v21[4].__vftable;
  LODWORD(v25->~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25->~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25->~__shared_weak_count + 4) = 0;
  HIDWORD(v25->__on_zero_shared) = 1065353216;
  v25->__get_deleter = 0;
  v25->__on_zero_shared_weak = 0;
  LODWORD(v25[1].~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25[1].~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25[1].~__shared_weak_count + 4) = 0;
  HIDWORD(v25[1].__on_zero_shared) = 1065353216;
  if (v21[3].__shared_weak_owners_ > shared_weak_owners)
    shared_weak_owners = v21[3].__shared_weak_owners_;
  v21[3].__shared_owners_ = 0;
  v21[3].__shared_weak_owners_ = shared_weak_owners;
  v26 = v3[8];
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = 0;
  v27 = v3[20];
  do
    v28 = __ldxr(v22);
  while (__stxr(v28 + 1, v22));
  v29 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v23;
  *(_QWORD *)(v27 + 24) = v21;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v32->__shared_owners_ = 0;
  v33 = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E23C8;
  v34 = ggl::BufferData::BufferData((uint64_t)&v32[1], qword_1EE55CB40, 2, 1, 6, 1);
  v32[9].__shared_owners_ = (uint64_t)ggl::Debug::Viewport::reflection(void)::reflection;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9870;
  v35 = v32[1].__shared_owners_;
  v32[4].~__shared_weak_count = 0;
  if (v32[3].__shared_weak_owners_ > v35)
    v35 = v32[3].__shared_weak_owners_;
  v32[3].__shared_owners_ = 0;
  v32[3].__shared_weak_owners_ = v35;
  v36 = v3[8];
  *(_QWORD *)(v36 + 48) = v34;
  *(_QWORD *)(v36 + 56) = 0;
  v37 = v3[20];
  do
    v38 = __ldxr(v33);
  while (__stxr(v38 + 1, v33));
  v39 = *(std::__shared_weak_count **)(v37 + 56);
  *(_QWORD *)(v37 + 48) = v34;
  *(_QWORD *)(v37 + 56) = v32;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  do
    v42 = __ldaxr(v33);
  while (__stlxr(v42 - 1, v33));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  do
    v43 = __ldaxr(v22);
  while (__stlxr(v43 - 1, v22));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  do
    v44 = __ldaxr(v11);
  while (__stlxr(v44 - 1, v11));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19F802D74(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;

  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  do
    v7 = __ldaxr(v3);
  while (__stlxr(v7 - 1, v3));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::Debug::Viewport>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Debug::Viewport>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::Viewport>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E23C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::Viewport>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E23C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::Viewport>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Debug::BasePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Debug::BasePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2908;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Debug::BasePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t shared_weak_owners;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *v1;
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBD18;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CAC0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9850;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v10[3].__shared_weak_owners_ = shared_owners;
  v15 = (uint64_t *)v3[8];
  *v15 = v12;
  v15[1] = 0;
  v16 = (uint64_t *)v3[20];
  do
    v17 = __ldxr(v11);
  while (__stxr(v17 + 1, v11));
  v18 = (std::__shared_weak_count *)v16[1];
  *v16 = v12;
  v16[1] = (uint64_t)v10;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  v23 = ggl::BufferData::BufferData((uint64_t)&v21[1], qword_1EE55CB00, 2, 1, 6, 1);
  v21[9].__shared_owners_ = (uint64_t)ggl::Debug::View::reflection(void)::reflection;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9830;
  shared_weak_owners = v21[1].__shared_owners_;
  v25 = v21[4].__vftable;
  LODWORD(v25->~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25->~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25->~__shared_weak_count + 4) = 0;
  HIDWORD(v25->__on_zero_shared) = 1065353216;
  v25->__get_deleter = 0;
  v25->__on_zero_shared_weak = 0;
  LODWORD(v25[1].~__shared_weak_count) = 1065353216;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25[1].~__shared_weak_count_0 + 4) = 0;
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v25[1].~__shared_weak_count + 4) = 0;
  HIDWORD(v25[1].__on_zero_shared) = 1065353216;
  if (v21[3].__shared_weak_owners_ > shared_weak_owners)
    shared_weak_owners = v21[3].__shared_weak_owners_;
  v21[3].__shared_owners_ = 0;
  v21[3].__shared_weak_owners_ = shared_weak_owners;
  v26 = v3[8];
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = 0;
  v27 = v3[20];
  do
    v28 = __ldxr(v22);
  while (__stxr(v28 + 1, v22));
  v29 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v23;
  *(_QWORD *)(v27 + 24) = v21;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v22);
  while (__stlxr(v32 - 1, v22));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  do
    v33 = __ldaxr(v11);
  while (__stlxr(v33 - 1, v11));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19F803268(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ggl::Textured::ScreenTexturedQuadPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E50A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::ScreenTexturedQuadPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E50A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Point::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Point::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Debug::InstancedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E45B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Debug::InstancedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E45B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Debug::LinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Debug::LinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::DebugRenderLayer::DebugRenderLayer(uint64_t a1, uint64_t a2, void *a3, __int16 *a4, char a5)
{
  VKSharedResources *v9;
  __int16 v10;
  _WORD *v11;
  _WORD *v12;
  md::DebugLayerRenderResources *v13;
  id v14;
  md::DebugLayerRenderResources *v15;

  v9 = a3;
  v10 = *a4;
  v11 = operator new(2uLL);
  *v11 = v10;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = operator new(2uLL);
  *(_QWORD *)a1 = off_1E429E2A8;
  *(_QWORD *)(a1 + 8) = v12;
  *v12++ = *v11;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v12;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = a5;
  *(_QWORD *)(a1 + 40) = a2;
  operator delete(v11);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &off_1E42919D0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_WORD *)(a1 + 136) = *a4;
  v13 = (md::DebugLayerRenderResources *)operator new();
  v14 = *(id *)(a2 + 104);
  md::DebugLayerRenderResources::DebugLayerRenderResources(v13, v9, (const RenderTargetFormat *)objc_msgSend(v14, "format"));
  v15 = *(md::DebugLayerRenderResources **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  if (v15)
  {
    md::DebugLayerRenderResources::~DebugLayerRenderResources(v15);
    MEMORY[0x1A1AF4E00]();
  }

  return a1;
}

void sub_19F80352C(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  md::DebugLayerRenderResources **v5;
  md::DebugLayerRenderResources *v7;
  void *v8;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)(v2 + 7));
  v7 = *v5;
  *v5 = 0;
  if (v7)
  {
    md::DebugLayerRenderResources::~DebugLayerRenderResources(v7);
    MEMORY[0x1A1AF4E00]();
  }
  *v2 = v4;
  v8 = (void *)v2[1];
  if (v8)
  {
    v2[2] = v8;
    operator delete(v8);
  }

  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh::~HorizontalVenue3DStrokeMesh(ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh::~HorizontalVenue3DStrokeMesh(ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Venue3DStroke::VerticalVenue3DStrokeMesh::~VerticalVenue3DStrokeMesh(ggl::Venue3DStroke::VerticalVenue3DStrokeMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Venue3DStroke::VerticalVenue3DStrokeMesh::~VerticalVenue3DStrokeMesh(ggl::Venue3DStroke::VerticalVenue3DStrokeMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Venue3DStroke::VerticalVenue3DStrokeMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Venue3DStroke::VerticalVenue3DStrokeMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup::~HorizontalVenue3DStrokePipelineSetup(ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup::constantDataIsEnabled(ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup::textureIsEnabled(ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup::~VerticalVenue3DStrokePipelineSetup(ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup::constantDataIsEnabled(ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup::textureIsEnabled(ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::MuninCrossFadeRenderLayer::~MuninCrossFadeRenderLayer(md::MuninCrossFadeRenderLayer *this)
{
  md::MuninCrossFadeRenderLayer::~MuninCrossFadeRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;

  *(_QWORD *)this = &off_1E42A2000;
  v2 = (uint64_t *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = v2[1];
    v2[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *v2;
    *v2 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
  }
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v10)
    goto LABEL_20;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v13)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v13)
      goto LABEL_26;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_26:
  *(_QWORD *)this = off_1E428C468;
  v16 = (void *)*((_QWORD *)this + 1);
  if (v16)
  {
    *((_QWORD *)this + 2) = v16;
    operator delete(v16);
  }
}

uint64_t md::MuninCrossFadeRenderLayer::layout(uint64_t this, const md::LayoutContext *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _DWORD *v26;
  unint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v48;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t shared_weak_owners;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count_vtbl *v122;
  __int128 v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int64x2_t *v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  _QWORD *v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  int v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  _Unwind_Exception *v193;
  _Unwind_Exception *v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  std::__shared_weak_count *v199;
  __int128 v200;
  __int128 v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  __int128 v204;
  __int128 v205;
  __int16 v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  _QWORD *v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  _BYTE v216[24];
  unint64_t v217;
  uint64_t v218;
  std::__shared_weak_count_vtbl *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  uint64_t v222[2];
  _QWORD *v223;
  std::__shared_weak_count *v224;

  v4 = this;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v6 = v5[1];
  if ((v6 & (v6 - 1)) != 0)
  {
    v8 = 0xC83717EF586624DCLL;
    if (v6 <= 0xC83717EF586624DCLL)
      v8 = 0xC83717EF586624DCLL % v6;
    v7 = *(_QWORD **)(*v5 + 8 * v8);
    do
    {
      do
        v7 = (_QWORD *)*v7;
      while (v7[1] != 0xC83717EF586624DCLL);
    }
    while (v7[2] != 0xC83717EF586624DCLL);
  }
  else
  {
    v7 = *(_QWORD **)(*v5 + 8 * ((v6 - 1) & 0xC83717EF586624DCLL));
    do
    {
      do
        v7 = (_QWORD *)*v7;
      while (v7[1] != 0xC83717EF586624DCLL);
    }
    while (v7[2] != 0xC83717EF586624DCLL);
  }
  v9 = *(int **)(*(_QWORD *)(v7[5] + 32) + 32);
  if (v9)
  {
    if (*(int **)(this + 136) != v9)
    {
      v10 = *((_QWORD *)v9 + 4);
      if (!v10)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        v194 = v193;
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v202);
        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v204);
        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v216);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v208);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v210);
        (*(void (**)())(*(_QWORD *)v195 + 8))();
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v212);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v220);

        _Unwind_Resume(v194);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      v11 = *(uint64_t **)(v4 + 128);
      *(_QWORD *)(v4 + 128) = 0;
      if (v11)
      {
        v12 = (std::__shared_weak_count *)v11[3];
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = v11[1];
        v11[1] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = *v11;
        *v11 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        MEMORY[0x1A1AF4E00](v11, 0x20C40DC1BFBCFLL);
      }
    }
    v200 = 0u;
    v201 = 0u;
    v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 24) + 8);
    v18 = v17[3];
    v19 = v17[4];
    if (v19 == v18)
      goto LABEL_214;
    v20 = 0;
    while (1)
    {
      v21 = *(_QWORD *)(v18 + 8 * v20);
      if (*(_BYTE *)v21 == 4)
      {
        v22 = *(_QWORD *)(v21 + 8);
        v23 = v17[18];
        if (v22 < (v17[19] - v23) >> 3)
          break;
      }
      if (++v20 >= (unint64_t)((v19 - v18) >> 3))
        goto LABEL_207;
    }
    v24 = *(_QWORD *)(v23 + 8 * v22);
    if (!v24)
      goto LABEL_207;
    v25 = *(_OWORD *)(v24 + 72);
    v200 = *(_OWORD *)(v24 + 56);
    v201 = v25;
    v26 = (_DWORD *)(v4 + 48);
    if (v25 == *(_OWORD *)(v4 + 64))
    {
      if (!(_QWORD)v25)
        goto LABEL_38;
      if ((_DWORD)v200 == *v26)
      {
        v27 = 0;
        while ((_QWORD)v25 - 1 != v27)
        {
          v28 = *((_DWORD *)&v200 + v27 + 1);
          v29 = *(_DWORD *)(v4 + 52 + 4 * v27++);
          if (v28 != v29)
          {
            if (v27 < (unint64_t)v25)
              goto LABEL_39;
            break;
          }
        }
LABEL_38:
        if (!*(_QWORD *)(v4 + 128))
          goto LABEL_39;
LABEL_207:
        v180 = v19 - v18;
        if (v19 != v18)
        {
          v181 = 0;
          v182 = v180 >> 3;
          while (1)
          {
            v183 = *(_QWORD *)(v18 + 8 * v181);
            if (*(_BYTE *)v183 == 4)
            {
              v184 = *(_QWORD *)(v183 + 8);
              v185 = v17[15];
              if (v184 < (v17[16] - v185) >> 3)
                break;
            }
            if (++v181 >= v182)
              goto LABEL_214;
          }
          v186 = *(_QWORD *)(v185 + 8 * v184);
          if (v186)
          {
            v187 = **(_QWORD **)(v186 + 24);
LABEL_215:
            v188 = *(_QWORD **)(v4 + 80);
            v189 = v188[1];
            v190 = v188[9];
            v191 = *v9;
            *(_DWORD *)(v190 + 8) = 1065353216;
            __asm { FMOV            V1.4S, #1.0 }
            *(_QWORD *)v190 = _Q1;
            *(_DWORD *)(v190 + 12) = v191;
            if (v188[8] > v189)
              v189 = v188[8];
            v188[7] = 0;
            v188[8] = v189;
            this = ggl::CommandBuffer::pushRenderItem(v187, **(ggl::RenderItem ***)(v4 + 128));
            goto LABEL_218;
          }
        }
LABEL_214:
        v187 = 0;
        goto LABEL_215;
      }
    }
LABEL_39:
    v30 = *(_OWORD *)(v24 + 72);
    *(_OWORD *)v26 = *(_OWORD *)(v24 + 56);
    *(_OWORD *)(v4 + 64) = v30;
    v31 = (_QWORD *)*((_QWORD *)a2 + 1);
    v32 = v31[1];
    if ((v32 & (v32 - 1)) != 0)
    {
      v34 = 0xA60DDA5A69582425;
      if (v32 <= 0xA60DDA5A69582425)
        v34 = 0xA60DDA5A69582425 % v32;
      v33 = *(_QWORD **)(*v31 + 8 * v34);
      do
      {
        do
          v33 = (_QWORD *)*v33;
        while (v33[1] != 0xA60DDA5A69582425);
      }
      while (v33[2] != 0xA60DDA5A69582425);
    }
    else
    {
      v33 = *(_QWORD **)(*v31 + 8 * ((v32 - 1) & 0xA60DDA5A69582425));
      do
      {
        do
          v33 = (_QWORD *)*v33;
        while (v33[1] != 0xA60DDA5A69582425);
      }
      while (v33[2] != 0xA60DDA5A69582425);
    }
    v35 = **(id **)(v33[5] + 32);
    v198 = v35;
    v36 = *(_QWORD *)(objc_msgSend(v35, "shaderLibrary") + 80);
    v37 = *(std::__shared_weak_count **)(v36 + 2872);
    v223 = *(_QWORD **)(v36 + 2864);
    v224 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v216[0] = 1;
    *(_OWORD *)&v216[4] = xmmword_19FFB4B40;
    *(_DWORD *)&v216[20] = 1;
    v217 = 0;
    v218 = 0;
    LODWORD(v219) = 0;
    BYTE4(v219) = 15;
    v40 = objc_msgSend(v35, "gglDevice");
    v41 = (std::__shared_weak_count *)operator new(0x198uLL);
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5030;
    v42 = *(_OWORD *)(v4 + 64);
    v204 = *(_OWORD *)v26;
    v205 = v42;
    v220 = ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState((uint64_t)&v41[1], &v223, (uint64_t)v216, &v204, *(_BYTE *)(v40 + 20));
    v221 = v41;
    if (v37)
    {
      v43 = (unint64_t *)&v37->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v45 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v45->__shared_owners_ = 0;
    v45->__shared_weak_owners_ = 0;
    v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
    v46 = ggl::BufferData::BufferData((uint64_t)&v45[1], qword_1EE54ADE0, 2, 1, 6, 1);
    v45[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
    v45[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
    v214 = v46;
    v215 = v45;
    shared_owners = v45[1].__shared_owners_;
    v48 = v45[4].__vftable;
    LODWORD(v48->~__shared_weak_count) = 1065353216;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v48->~__shared_weak_count + 4) = 0;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v48->~__shared_weak_count_0 + 4) = 0;
    HIDWORD(v48->__on_zero_shared) = 1065353216;
    v48->__get_deleter = 0;
    v48->__on_zero_shared_weak = 0;
    LODWORD(v48[1].~__shared_weak_count) = 1065353216;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v48[1].~__shared_weak_count_0 + 4) = 0;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v48[1].~__shared_weak_count + 4) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void (__cdecl **)(std::__shared_count *__hidden))((char *)&v48[1].__on_zero_shared + 4) = _D0;
    if (v45[3].__shared_weak_owners_ > shared_owners)
      shared_owners = v45[3].__shared_weak_owners_;
    v45[3].__shared_owners_ = 0;
    v45[3].__shared_weak_owners_ = shared_owners;
    md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v216);
    v54 = *(_OWORD *)v216;
    *(_OWORD *)v216 = 0uLL;
    v55 = *(std::__shared_weak_count **)(v4 + 104);
    *(_OWORD *)(v4 + 96) = v54;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = *(std::__shared_weak_count **)&v216[8];
    if (*(_QWORD *)&v216[8])
    {
      v59 = (unint64_t *)(*(_QWORD *)&v216[8] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2CF8;
    v62 = ggl::BufferData::BufferData((uint64_t)&v61[1], qword_1EE562C50, 2, 1, 6, 1);
    v61[9].__shared_owners_ = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
    v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F10;
    v212 = v62;
    v213 = v61;
    v63 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 24);
    v64 = *(_QWORD *)(v63 + 128);
    if (v64
      && (v65 = *(_QWORD *)(v63 + 8),
          v66 = *(_QWORD *)(v64 + 32),
          v67 = *(_QWORD *)(v65 + 96),
          v66 < (*(_QWORD *)(v65 + 104) - v67) >> 3))
    {
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 8 * v66) + 16);
    }
    else
    {
      v68 = 0;
    }
    v69 = (_QWORD *)operator new();
    v70 = v69;
    v71 = v220;
    v72 = v221;
    if (v221)
    {
      v73 = (unint64_t *)&v221->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      ggl::PipelineSetup::PipelineSetup(v69, v71, (uint64_t)v72);
      v75 = (unint64_t *)&v72->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v69, v220, 0);
    }
    *v70 = &off_1E42BCE38;
    v77 = (uint64_t *)v70[8];
    v78 = v214;
    *v77 = v214;
    v77[1] = 0;
    v79 = (uint64_t *)v70[20];
    v80 = v215;
    if (v215)
    {
      v81 = (unint64_t *)&v215->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v83 = (std::__shared_weak_count *)v79[1];
    *v79 = v78;
    v79[1] = (uint64_t)v80;
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v70[8];
    *(_QWORD *)(v86 + 24) = 0;
    v87 = *(_QWORD *)(v4 + 96);
    *(_QWORD *)(v86 + 16) = v87;
    v88 = v70[20];
    v89 = *(_QWORD *)(v4 + 104);
    if (v89)
    {
      v90 = (unint64_t *)(v89 + 8);
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    v92 = *(std::__shared_weak_count **)(v88 + 24);
    *(_QWORD *)(v88 + 16) = v87;
    *(_QWORD *)(v88 + 24) = v89;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = v70[8];
    v96 = v212;
    v97 = v213;
    *(_QWORD *)(v95 + 32) = v212;
    *(_QWORD *)(v95 + 40) = 0;
    v98 = v70[20];
    if (v97)
    {
      v99 = (unint64_t *)&v97->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *(std::__shared_weak_count **)(v98 + 40);
    *(_QWORD *)(v98 + 32) = v96;
    *(_QWORD *)(v98 + 40) = v97;
    if (v101)
    {
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = v70[8];
    *(_QWORD *)(v104 + 56) = 0;
    v105 = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v104 + 48) = v105;
    v106 = v70[20];
    v107 = *(_QWORD *)(v4 + 88);
    if (v107)
    {
      v108 = (unint64_t *)(v107 + 8);
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    v110 = *(std::__shared_weak_count **)(v106 + 56);
    *(_QWORD *)(v106 + 48) = v105;
    *(_QWORD *)(v106 + 56) = v107;
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v196 = (uint64_t)v70;
    *(_QWORD *)v70[12] = v68;
    v113 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v113->__shared_owners_ = 0;
    v114 = (unint64_t *)&v113->__shared_owners_;
    v113->__shared_weak_owners_ = 0;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF920;
    ggl::BufferData::BufferData((uint64_t)&v113[1], 16, 0, 0, 7, 4);
    v113[9].__shared_weak_owners_ = (uint64_t)"Screen quad verts";
    v113[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2UVReflection;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7560;
    v113[9].__shared_owners_ = (uint64_t)&unk_1E42B7580;
    v210 = &v113[1].__vftable;
    v211 = v113;
    v115 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v115->__shared_owners_ = 0;
    v116 = (unint64_t *)&v115->__shared_owners_;
    v115->__shared_weak_owners_ = 0;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    ggl::BufferData::BufferData((uint64_t)&v115[1], 2, 1, 0, 7, 6);
    LODWORD(v115[10].__vftable) = 0;
    v115[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v115[1].__shared_owners_ = 2;
    v115[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v115[9].__shared_weak_owners_ = (uint64_t)"Screen quad indices";
    v208 = v115 + 1;
    v209 = v115;
    shared_weak_owners = v113[2].__shared_weak_owners_;
    v117 = v113[3].__vftable;
    v119 = v113[1].__shared_owners_;
    memset(v216, 0, sizeof(v216));
    v120 = (unint64_t)v117 - shared_weak_owners;
    *(_QWORD *)&v121 = 0;
    *((_QWORD *)&v121 + 1) = v113 + 1;
    v122 = v113[4].__vftable;
    *(_OWORD *)v216 = v121;
    v217 = v120 / v119 * v119;
    v219 = v122;
    LOWORD(v218) = 1;
    *(_OWORD *)&v122->~__shared_weak_count = xmmword_19FFB3990;
    *(_OWORD *)&v122->__on_zero_shared = xmmword_19FFB2F80;
    *(_QWORD *)&v123 = 0;
    *(_OWORD *)&v122->__on_zero_shared_weak = xmmword_19FFB39B0;
    *(_OWORD *)&v122[1].~__shared_weak_count_0 = xmmword_19FFB39A0;
    v125 = v115[2].__shared_weak_owners_;
    v124 = v115[3].__vftable;
    v204 = 0uLL;
    *((_QWORD *)&v123 + 1) = v115 + 1;
    v126 = ((unint64_t)v124 - v125) & 0xFFFFFFFFFFFFFFFELL;
    v127 = v115[4].__vftable;
    v204 = v123;
    *(_QWORD *)&v205 = 0;
    *((_QWORD *)&v205 + 1) = v126;
    v207 = v127;
    v206 = 1;
    v127->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
    LODWORD(v127->~__shared_weak_count_0) = 3;
    v128 = (std::__shared_weak_count *)operator new(0xA8uLL);
    v128->__shared_owners_ = 0;
    v129 = (unint64_t *)&v128->__shared_owners_;
    v128->__shared_weak_owners_ = 0;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE538;
    v199 = v128;
    v130 = &v128[1].__vftable;
    v223 = &v113[1].__vftable;
    v224 = v113;
    do
      v131 = __ldxr(v114);
    while (__stxr(v131 + 1, v114));
    v222[0] = (uint64_t)&v115[1];
    v222[1] = (uint64_t)v115;
    do
      v132 = __ldxr(v116);
    while (__stxr(v132 + 1, v116));
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((uint64_t)&v128[1], (uint64_t)"Screen quad mesh", (uint64_t *)&v223, v222);
    do
      v133 = __ldaxr(v116);
    while (__stlxr(v133 - 1, v116));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
    v134 = v224;
    if (v224)
    {
      v135 = (unint64_t *)&v224->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    v202 = v130;
    v203 = v199;
    v137 = (int64x2_t *)operator new();
    v138 = *(_QWORD *)(v4 + 120);
    v137->i64[0] = (uint64_t)&off_1E42B59B0;
    v137[1].i64[0] = (uint64_t)"Post process item";
    v137[1].i64[1] = v138;
    v137[2].i64[0] = v196;
    v137[2].i32[2] = 0;
    v137[3].i64[0] = 0;
    v137[3].i32[2] = 1065353216;
    v137[4].i64[0] = (uint64_t)v130;
    v137[4].i64[1] = 0;
    v137[5].i64[0] = 0;
    v137[5].i64[1] = 0;
    v137[6] = vdupq_n_s64(1uLL);
    v137[7].i64[0] = 0;
    v139 = (_QWORD *)operator new();
    do
      v140 = __ldxr(v129);
    while (__stxr(v140 + 1, v129));
    *v139 = v137;
    v139[1] = v196;
    v139[2] = v130;
    v139[3] = v199;
    do
      v141 = __ldxr(v129);
    while (__stxr(v141 + 1, v129));
    v142 = *(uint64_t **)(v4 + 128);
    *(_QWORD *)(v4 + 128) = v139;
    if (v142)
    {
      v143 = (std::__shared_weak_count *)v142[3];
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v146 = v142[1];
      v142[1] = 0;
      if (v146)
        (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
      v147 = *v142;
      *v142 = 0;
      if (v147)
        (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
      MEMORY[0x1A1AF4E00](v142, 0x20C40DC1BFBCFLL);
    }
    do
      v148 = __ldaxr(v129);
    while (__stlxr(v148 - 1, v129));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
    v149 = v203;
    if (v203)
    {
      v150 = (unint64_t *)&v203->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    if (v207)
    {
      v152 = v205;
      if (*((_QWORD *)&v205 + 1) != (_QWORD)v205)
      {
        v153 = (_QWORD *)*((_QWORD *)&v204 + 1);
        v154 = v206;
        v155 = HIBYTE(v206);
        if ((_QWORD)v204 && *(_BYTE *)(*((_QWORD *)&v204 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v204 + 64))();
        if (v154 && !v155)
        {
          v157 = v153[7];
          v156 = v153[8];
          if (v156 == v157)
            v157 = v153[10] - v153[9];
          if ((unint64_t)v152 < v157)
            v157 = v152;
          if (v156 <= *((_QWORD *)&v152 + 1))
            v156 = *((_QWORD *)&v152 + 1);
          if (v156 == v157)
            v156 = v157 + v153[10] - v153[9];
          v153[7] = v157;
          v153[8] = v156;
        }
      }
    }
    if (v219)
    {
      v159 = *(_QWORD *)&v216[16];
      v158 = v217;
      if (v217 != *(_QWORD *)&v216[16])
      {
        v160 = *(_QWORD **)&v216[8];
        v161 = v218;
        v162 = BYTE1(v218);
        if (*(_QWORD *)v216 && *(_BYTE *)(*(_QWORD *)&v216[8] + 17) != 2)
          (*(void (**)(void))(**(_QWORD **)v216 + 64))();
        if (v161 && !v162)
        {
          v164 = v160[7];
          v163 = v160[8];
          if (v163 == v164)
            v164 = v160[10] - v160[9];
          if (v159 < v164)
            v164 = v159;
          if (v163 <= v158)
            v163 = v158;
          if (v163 == v164)
            v163 = v164 + v160[10] - v160[9];
          v160[7] = v164;
          v160[8] = v163;
        }
      }
    }
    v165 = v209;
    if (v209)
    {
      v166 = (unint64_t *)&v209->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v168 = v211;
    if (v211)
    {
      v169 = (unint64_t *)&v211->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    v171 = v213;
    if (v213)
    {
      v172 = (unint64_t *)&v213->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    v174 = v215;
    if (v215)
    {
      v175 = (unint64_t *)&v215->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v177 = v221;
    if (v221)
    {
      v178 = (unint64_t *)&v221->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }

    v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 24) + 8);
    v18 = v17[3];
    v19 = v17[4];
    goto LABEL_207;
  }
LABEL_218:
  *(_QWORD *)(v4 + 136) = v9;
  return this;
}

void sub_19F804D7C()
{
  JUMPOUT(0x19F804D54);
}

void sub_19F804D84()
{
  JUMPOUT(0x19F804D5CLL);
}

void sub_19F804D8C()
{
  JUMPOUT(0x19F804D5CLL);
}

void sub_19F804D94()
{
  JUMPOUT(0x19F804D64);
}

void sub_19F804D9C()
{
  JUMPOUT(0x19F804D6CLL);
}

void sub_19F804DA4()
{
  uint64_t v0;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v0 - 104);
  JUMPOUT(0x19F804D6CLL);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::Textured::TileScalar>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Textured::TileScalar>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::TileScalar>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::TileScalar>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::TileScalar>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

ggl::Data *std::make_shared[abi:nn180100]<ggl::Data,unsigned long,void>(ggl::Data **a1, uint64_t a2)
{
  _QWORD *v4;
  ggl::Data *result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E42E42D8;
  result = ggl::Data::Data((ggl::Data *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (ggl::Data *)v4;
  return result;
}

void md::SequentialGEOResourceDataRequester::~SequentialGEOResourceDataRequester(md::SequentialGEOResourceDataRequester *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42AA468;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42AA468;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
  JUMPOUT(0x1A1AF4E00);
}

void md::SequentialGEOResourceDataRequester::requestDataKeys(md::SequentialGEOResourceDataRequester *this, gdc::LayerDataCollector **a2, char a3)
{
  uint64_t v4;
  const gdc::SelectionContext *v6;
  gdc::LayerDataCollector *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned int i;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  signed int v31;
  signed int v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  const gdc::SelectionContext *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  void *v42[2];
  void *v43;
  void *v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  void *v48;
  void *v49;
  char v50;
  _QWORD v51[3];
  unsigned __int8 v52[4];
  int v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v6 = (const gdc::SelectionContext *)a2;
    v7 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(&v46, v4, *((unsigned __int16 *)this + 12));
    if ((_BYTE)v46
      || (v16 = (unsigned __int16 *)*((_QWORD *)this + 6), v17 = (unsigned __int16 *)*((_QWORD *)this + 7), v16 == v17))
    {
LABEL_3:
      v8 = *((unsigned __int16 *)this + 12);
    }
    else
    {
      while (1)
      {
        v8 = *v16;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(&v46, *((_QWORD *)this + 1), v8);
        if ((_BYTE)v46)
          break;
        if (++v16 == v17)
          goto LABEL_3;
      }
    }
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(&v60, v9, v8);
      if ((_BYTE)v60)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(&v58, *((_QWORD *)this + 1), v8);
        if ((_BYTE)v58)
        {
          v10 = 0;
          v11 = (char *)&v58 + 4;
          if (*((_BYTE *)this + 28))
            v11 = (char *)this + 32;
          v12 = (unsigned int *)&v59;
          if (*((_BYTE *)this + 36))
            v12 = (unsigned int *)((char *)this + 40);
          v13 = (unsigned int *)*((_QWORD *)v6 + 8);
          v14 = *v13;
          if ((_DWORD)v14)
          {
            v15 = HIDWORD(v60);
            if (HIDWORD(v60))
            {
              if (HIDWORD(v60) >= v14)
              {
                v10 = 0;
              }
              else
              {
                v10 = 0;
                do
                {
                  ++v10;
                  v15 *= 2;
                }
                while (v15 < v14);
              }
              while (v15 > v14)
              {
                --v10;
                v14 *= 2;
              }
            }
          }
          i = *(_DWORD *)v11;
          v39 = *v12;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v19 = (uint64_t *)*((_QWORD *)v13 + 3);
          if (v19)
          {
            v40 = -v10 & ~(-v10 >> 31);
            v41 = v8;
            v38 = v6;
            v37 = i;
            do
            {
              v20 = *((unsigned __int8 *)v19 + 17);
              v21 = (*((_DWORD *)v19 + 5) % (1 << v20) + (1 << v20)) % (1 << v20);
              v22 = *((_DWORD *)v19 + 6) % (1 << v20) + (1 << v20);
              v52[0] = *((_BYTE *)v19 + 16);
              v52[1] = v20;
              v53 = v21;
              v54 = v22 % (1 << v20);
              v23 = v20 - v40;
              if (v20 < v40)
                v23 = 0;
              if (!v20)
                v23 = 0;
              if (i <= v23 && v39 >= v23)
              {
                v56 = v55;
                v24 = **((unsigned int **)v6 + 8);
                (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(v42, *((_QWORD *)this + 1), v8);
                v25 = 0;
                if ((_DWORD)v24)
                {
                  v26 = HIDWORD(v42[0]);
                  if (HIDWORD(v42[0]))
                  {
                    if (HIDWORD(v42[0]) >= v24)
                    {
                      v25 = 0;
                    }
                    else
                    {
                      v25 = 0;
                      do
                      {
                        ++v25;
                        v26 *= 2;
                      }
                      while (v26 < v24);
                    }
                    while (v26 > v24)
                    {
                      --v25;
                      v24 *= 2;
                    }
                  }
                }
                v27 = *((_QWORD *)this + 1);
                v28 = *((unsigned __int8 *)this + 46);
                v29 = *((unsigned __int16 *)this + 22);
                (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v27 + 24))(&v46, v27, v41);
                if ((_BYTE)v46)
                {
                  v30 = v29 | (v28 << 16);
                  if (v30 >= 0x10000)
                  {
                    v31 = v29;
                    if (HIDWORD(v46) < v29)
                      v31 = HIDWORD(v46);
                    v32 = BYTE1(v29);
                    if (BYTE1(v29) <= v47)
                      v32 = v47;
                  }
                  else
                  {
                    v31 = HIDWORD(v46);
                    v32 = v47;
                  }
                  if (v31 <= v25 + (int)v20)
                    v31 = v25 + v20;
                  if (v32 < v31)
                    v31 = v32;
                  md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v20 - v31, v41, v27, v52, v30, (uint64_t *)&v55);
                }
                v33 = v55;
                v34 = v56;
                v6 = v38;
                v8 = v41;
                for (i = v37; v33 != v34; v33 += 24)
                {
                  (*(void (**)(_QWORD *__return_ptr, md::SequentialGEOResourceDataRequester *, char *))(*(_QWORD *)this + 80))(v51, this, v33);
                  if ((a3 & 1) != 0)
                    v35 = 1;
                  else
                    v35 = *((_DWORD *)this + 4);
                  gdc::Tiled::mapDataKeyFromTile((unsigned __int8 *)&v46, 0, (unsigned __int8 *)v51, *((_WORD *)this + 11), v35);
                  gdc::LayerDataCollector::addDataKey(v7, (const gdc::LayerDataRequestKey *)&v46, (const QuadTile *)(v19 + 2));
                  if (*((_BYTE *)this + 20))
                  {
                    if ((a3 & 1) != 0)
                      v36 = 1;
                    else
                      v36 = *((_DWORD *)this + 4);
                    gdc::Tiled::mapDataKeyFromTile((unsigned __int8 *)v42, 1u, (unsigned __int8 *)v51, *((_WORD *)this + 11), v36);
                    gdc::LayerDataCollector::addDataKey(v7, (const gdc::LayerDataRequestKey *)v42, (const QuadTile *)(v19 + 2));
                    if (v45)
                      v45 = 0;
                    if (v43 != v44)
                      free(v43);
                  }
                  if (v50)
                    v50 = 0;
                  if (v48 != v49)
                    free(v48);
                }
              }
              v19 = (uint64_t *)*v19;
            }
            while (v19);
            if (v55)
            {
              v56 = v55;
              operator delete(v55);
            }
          }
        }
      }
    }
  }
}

void sub_19F80562C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::SequentialGEOResourceDataRequester::downloadZoomRange(md::SequentialGEOResourceDataRequester *this)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v3 = (unsigned __int16 *)((char *)this + 24);
LABEL_8:
    v6 = *v3;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v6);
  }
  v3 = (unsigned __int16 *)((char *)this + 24);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v2 + 32))(&v8, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
  if ((_BYTE)v8)
    goto LABEL_8;
  v4 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v5 = (unsigned __int16 *)*((_QWORD *)this + 7);
  if (v4 == v5)
    goto LABEL_8;
  while (1)
  {
    v6 = *v4;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(&v8, *((_QWORD *)this + 1), v6);
    if ((_BYTE)v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v6);
    if (++v4 == v5)
      goto LABEL_8;
  }
}

void md::SequentialGEOResourceDataRequester::createDebugNode(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  const std::string::value_type *v14;
  _BYTE v15[32];
  std::string v16;
  int v17;
  _BYTE v18[32];
  std::string v19;
  int v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[32];
  std::string __p;
  int v29;
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BYTE v36[32];
  std::string v37;
  int v38;
  uint64_t v39[3];
  char v40[32];

  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    (*(void (**)(char *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v40, v4, *(unsigned __int16 *)(a1 + 24));
    if (v40[0] || (v12 = *(unsigned __int16 **)(a1 + 48), v13 = *(unsigned __int16 **)(a1 + 56), v12 == v13))
    {
LABEL_3:
      v5 = *(unsigned __int16 *)(a1 + 24);
    }
    else
    {
      while (1)
      {
        v5 = *v12;
        (*(void (**)(char *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(v40, *(_QWORD *)(a1 + 8), v5);
        if (v40[0])
          break;
        if (++v12 == v13)
          goto LABEL_3;
      }
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v40, v6, v5);
      if (v40[0])
      {
        v7 = *(_QWORD *)&v40[4];
        v40[23] = 14;
        strcpy(v40, "Download Range");
        v8 = (char *)operator new(0x80uLL);
        v39[1] = (uint64_t)(v8 + 128);
        v39[2] = (uint64_t)(v8 + 128);
        *((_QWORD *)v8 + 1) = v7;
        *((_QWORD *)v8 + 5) = 0;
        *((_QWORD *)v8 + 6) = 0;
        *((_QWORD *)v8 + 4) = 0;
        *((_QWORD *)v8 + 9) = HIDWORD(v7);
        *((_QWORD *)v8 + 12) = 0;
        *((_DWORD *)v8 + 14) = 1;
        *((_QWORD *)v8 + 13) = 0;
        *((_QWORD *)v8 + 14) = 0;
        *((_DWORD *)v8 + 30) = 1;
        v39[0] = (uint64_t)v8;
        gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, v39);
        if (v8[119] < 0)
        {
          operator delete(*((void **)v8 + 12));
          if ((v8[55] & 0x80000000) == 0)
            goto LABEL_8;
        }
        else if ((v8[55] & 0x80000000) == 0)
        {
LABEL_8:
          v9 = v8;
          goto LABEL_15;
        }
        operator delete(*((void **)v8 + 4));
        goto LABEL_8;
      }
    }
  }
  else
  {
    LODWORD(v5) = *(unsigned __int16 *)(a1 + 24);
  }
  v40[23] = 14;
  strcpy(v40, "Download Range");
  memset(&v37, 0, sizeof(v37));
  v38 = 4;
  std::string::__assign_external(&v37, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, (uint64_t)v36);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 28))
      goto LABEL_16;
    goto LABEL_12;
  }
  v9 = (void *)v37.__r_.__value_.__r.__words[0];
LABEL_15:
  operator delete(v9);
  if (!*(_BYTE *)(a1 + 28))
  {
LABEL_16:
    v40[23] = 17;
    strcpy(v40, "Visible Range Min");
    memset(&__p, 0, sizeof(__p));
    v29 = 4;
    std::string::__assign_external(&__p, "None");
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, (uint64_t)v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 36))
        goto LABEL_18;
    }
    else if (*(_BYTE *)(a1 + 36))
    {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_12:
  v40[23] = 17;
  strcpy(v40, "Visible Range Min");
  v10 = *(unsigned int *)(a1 + 32);
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v32 = 0;
  v31 = v10;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, (uint64_t)v30);
  if (*(_BYTE *)(a1 + 36))
  {
LABEL_18:
    v40[23] = 17;
    strcpy(v40, "Visible Range Max");
    v11 = *(unsigned int *)(a1 + 40);
    v24 = 0;
    v25 = 0;
    v26 = 1;
    v23 = 0;
    v22 = v11;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, (uint64_t)v21);
    goto LABEL_26;
  }
LABEL_24:
  v40[23] = 17;
  strcpy(v40, "Visible Range Max");
  memset(&v19, 0, sizeof(v19));
  v20 = 4;
  std::string::__assign_external(&v19, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, (uint64_t)v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
LABEL_26:
  v40[23] = 17;
  strcpy(v40, "gdc::ResourceType");
  if (v5 > 0x35)
    v14 = "<Invalid>";
  else
    v14 = off_1E42F75C0[v5];
  memset(&v16, 0, sizeof(v16));
  v17 = 4;
  std::string::__assign_external(&v16, v14);
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v40, (uint64_t)v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_19F805B24(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::SequentialGEOResourceDataRequester::minRequiredTileSizeForTileSet(md::SequentialGEOResourceDataRequester *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v5 = (unsigned __int16 *)((char *)this + 24);
LABEL_8:
    v8 = *v5;
    goto LABEL_9;
  }
  v5 = (unsigned __int16 *)((char *)this + 24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(&v15, v4, *((unsigned __int16 *)this + 12));
  if ((_BYTE)v15)
    goto LABEL_8;
  v6 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 7);
  if (v6 == v7)
    goto LABEL_8;
  while (1)
  {
    v8 = *v6;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(&v15, *((_QWORD *)this + 1), v8);
    if ((_BYTE)v15)
      break;
    if (++v6 == v7)
      goto LABEL_8;
  }
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(&v16, *((_QWORD *)this + 1), v8);
  if ((_BYTE)v16
    && ((*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(&v15, *((_QWORD *)this + 1), v8), (_BYTE)v15))
  {
    if (*((_WORD *)this + 11) == 13)
    {
      v9 = (char *)&v15 + 4;
    }
    else if (*((_BYTE *)this + 28))
    {
      v9 = (char *)this + 32;
    }
    else
    {
      v9 = (char *)&v15 + 4;
    }
    v10 = *(_DWORD *)v9;
    v11 = HIDWORD(v16);
    v12 = HIDWORD(v15) >= v10;
    v13 = HIDWORD(v15) - v10;
    if (v13 != 0 && v12)
    {
      v14 = (double)HIDWORD(v16);
      v11 = (exp2(-(double)v13) * v14);
    }
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = v11;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t md::SequentialGEOResourceDataRequester::downloadTileSize(md::SequentialGEOResourceDataRequester *this)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v3 = (unsigned __int16 *)((char *)this + 24);
LABEL_8:
    v6 = *v3;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v6);
  }
  v3 = (unsigned __int16 *)((char *)this + 24);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v2 + 32))(&v8, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
  if ((_BYTE)v8)
    goto LABEL_8;
  v4 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v5 = (unsigned __int16 *)*((_QWORD *)this + 7);
  if (v4 == v5)
    goto LABEL_8;
  while (1)
  {
    v6 = *v4;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(&v8, *((_QWORD *)this + 1), v6);
    if ((_BYTE)v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v6);
    if (++v4 == v5)
      goto LABEL_8;
  }
}

void generateRoadSignPath(CGContext *a1, const RoadSignMetrics *a2, const RoadSignPartMetrics *a3)
{
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat y;
  CGFloat x;
  CGFloat v15;
  CGFloat v16;
  int type;
  CGContext *v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGPoint *p_arrowWingMax;
  CGFloat *p_y;
  CGPoint *p_arrowWingMin;
  CGFloat *v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  double v43;
  CGContext *v44;
  CGFloat v45;
  CGFloat v46;
  double v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  CGPoint *v52;
  CGFloat *v53;
  CGPoint *v54;
  CGFloat *v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  double v62;
  double v63;
  double v64;
  CGFloat v65;
  CGPoint *v66;
  CGFloat *v67;
  double v68;
  CGPoint *v69;
  CGFloat *v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  double v77;
  double v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  double v85;
  double v86;
  CGFloat v87;
  CGFloat v88;
  double v89;
  double v90;
  double v91;
  double v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  double v96;
  CGPoint *v97;
  CGFloat *v98;
  double v99;
  CGFloat v100;
  CGFloat v101;
  double outsideImagePathExtension;
  double MinX;
  CGFloat v104;
  CGFloat MinY;
  double MaxX;
  CGFloat v107;
  CGFloat MaxY;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  CGFloat v114;
  CGFloat y1a;
  CGFloat y1b;
  CGFloat y1;

  CGContextSaveGState(a1);
  CGContextBeginPath(a1);
  switch(a3->_type)
  {
    case 1u:
      outsideImagePathExtension = a3->_outsideImagePathExtension;
      MinX = CGRectGetMinX(a3->_signBaseRect);
      CGRectGetMinY(a3->_signBaseRect);
      v104 = MinX - outsideImagePathExtension;
      CGRectGetMinX(a3->_signBaseRect);
      MinY = CGRectGetMinY(a3->_signBaseRect);
      MaxX = CGRectGetMaxX(a3->_signBaseRect);
      CGRectGetMaxY(a3->_signBaseRect);
      v107 = MaxX + outsideImagePathExtension;
      CGRectGetMaxX(a3->_signBaseRect);
      MaxY = CGRectGetMaxY(a3->_signBaseRect);
      CGContextMoveToPoint(a1, v104, MinY);
      CGContextAddLineToPoint(a1, v104, MaxY);
      CGContextAddLineToPoint(a1, v107, MaxY);
      v18 = a1;
      v19 = v107;
      v20 = MinY;
      goto LABEL_61;
    case 2u:
    case 3u:
      v6 = a3->_outsideImagePathExtension;
      v7 = CGRectGetMinX(a3->_signBaseRect);
      CGRectGetMinY(a3->_signBaseRect);
      v8 = v7 - v6;
      CGRectGetMinX(a3->_signBaseRect);
      v9 = CGRectGetMinY(a3->_signBaseRect);
      v10 = CGRectGetMaxX(a3->_signBaseRect);
      CGRectGetMaxY(a3->_signBaseRect);
      v11 = v10 + v6;
      CGRectGetMaxX(a3->_signBaseRect);
      v12 = CGRectGetMaxY(a3->_signBaseRect);
      x = a3->_arrowTip.x;
      y = a3->_arrowTip.y;
      v15 = a3->_arrowWingMax.x;
      v109 = a3->_arrowWingMin.x;
      v111 = a3->_arrowWingMin.y;
      v16 = a3->_arrowWingMax.y;
      type = a3->_type;
      CGContextMoveToPoint(a1, v8, v9);
      CGContextAddLineToPoint(a1, v8, v12);
      if (type == 2)
      {
        CGContextAddLineToPoint(a1, v11, v12);
        CGContextAddLineToPoint(a1, v11, v9);
        CGContextAddArcToPoint(a1, v15, v16, x, y, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
        CGContextAddArcToPoint(a1, x, y, v109, v111, round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale));
        CGContextAddArcToPoint(a1, v109, v111, v8, v9, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
        v18 = a1;
        v19 = v8;
      }
      else
      {
        CGContextAddArcToPoint(a1, v109, v111, x, y, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
        CGContextAddArcToPoint(a1, x, y, v15, v16, round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale));
        CGContextAddArcToPoint(a1, v15, v16, v11, v12, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
        CGContextAddLineToPoint(a1, v11, v12);
        v18 = a1;
        v19 = v11;
      }
      v20 = v9;
      goto LABEL_61;
    case 4u:
    case 5u:
      v21 = a3->_outsideImagePathExtension;
      v22 = CGRectGetMinX(a3->_signBaseRect);
      v23 = CGRectGetMinY(a3->_signBaseRect);
      v24 = CGRectGetMaxX(a3->_signBaseRect);
      v25 = CGRectGetMaxY(a3->_signBaseRect);
      v26 = v22 - v21;
      if (a3->_type == 4)
      {
        v27 = v24 + v21;
      }
      else
      {
        v22 = v24;
        v27 = v26;
      }
      CGContextMoveToPoint(a1, v27, v23);
      CGContextAddLineToPoint(a1, v27, v25);
      CGContextAddArcToPoint(a1, v22, v25, v22, v23, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v22, v23, v27, v23, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      break;
    case 6u:
    case 7u:
      v28 = a3->_outsideImagePathExtension;
      v29 = CGRectGetMinX(a3->_signBaseRect);
      v30 = CGRectGetMinY(a3->_signBaseRect);
      v31 = CGRectGetMaxX(a3->_signBaseRect);
      v32 = CGRectGetMaxY(a3->_signBaseRect);
      p_arrowWingMax = &a3->_arrowWingMax;
      p_y = &a3->_arrowWingMax.y;
      if (a3->_type == 6)
        p_arrowWingMin = &a3->_arrowWingMax;
      else
        p_arrowWingMin = &a3->_arrowWingMin;
      if (a3->_type == 6)
        v36 = &a3->_arrowWingMax.y;
      else
        v36 = &a3->_arrowWingMin.y;
      if (a3->_type == 6)
      {
        p_arrowWingMax = &a3->_arrowWingMin;
        p_y = &a3->_arrowWingMin.y;
        v37 = v29;
      }
      else
      {
        v37 = v31;
      }
      if (a3->_type == 6)
        v38 = v31 + v28;
      else
        v38 = v29 - v28;
      v39 = *p_y;
      v40 = p_arrowWingMax->x;
      v42 = a3->_arrowTip.x;
      v41 = a3->_arrowTip.y;
      v112 = p_arrowWingMin->x;
      y1a = *v36;
      CGContextMoveToPoint(a1, v38, v30);
      CGContextAddLineToPoint(a1, v38, v32);
      CGContextAddArcToPoint(a1, v37, v32, v37, v30, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v37, v30, v40, v39, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v40, v39, v42, v41, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v42, v41, v112, y1a, round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale));
      v43 = round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale);
      v44 = a1;
      v45 = v112;
      v46 = y1a;
      goto LABEL_50;
    case 8u:
    case 9u:
      v77 = a3->_outsideImagePathExtension;
      v78 = CGRectGetMinX(a3->_signBaseRect);
      v79 = CGRectGetMinY(a3->_signBaseRect);
      v80 = CGRectGetMaxX(a3->_signBaseRect);
      v81 = CGRectGetMaxY(a3->_signBaseRect);
      v82 = a3->_arrowWingMax.x;
      v83 = a3->_arrowWingMax.y;
      v110 = a3->_arrowTip.y;
      v114 = a3->_arrowTip.x;
      v84 = a3->_arrowWingMin.y;
      v85 = v80 + v77;
      v86 = v78 - v77;
      v87 = a3->_arrowWingMin.x;
      if (a3->_type == 8)
      {
        v80 = v78;
        v88 = v85;
      }
      else
      {
        v88 = v86;
      }
      CGContextMoveToPoint(a1, v88, v79);
      CGContextAddLineToPoint(a1, v88, v81);
      CGContextAddArcToPoint(a1, v80, v81, v82, v83, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      CGContextAddLineToPoint(a1, v82, v83);
      v89 = round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale);
      if (v89 <= 0.0)
        CGContextAddLineToPoint(a1, v114, v110);
      else
        CGContextAddArcToPoint(a1, v114, v110, v87, v84, v89);
      CGContextAddLineToPoint(a1, v87, v84);
      CGContextAddArcToPoint(a1, v80, v79, v88, v79, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      break;
    case 0xAu:
    case 0xBu:
      v90 = a3->_outsideImagePathExtension;
      v91 = CGRectGetMinX(a3->_signBaseRect);
      v30 = CGRectGetMinY(a3->_signBaseRect);
      v92 = CGRectGetMaxX(a3->_signBaseRect);
      v93 = CGRectGetMaxY(a3->_signBaseRect);
      v94 = a3->_arrowTip.x;
      v95 = a3->_arrowTip.y;
      v96 = v91 - v90;
      v97 = &a3->_arrowWingMin;
      v98 = &a3->_arrowWingMin.y;
      if (a3->_type == 10)
      {
        v97 = &a3->_arrowWingMax;
        v98 = &a3->_arrowWingMax.y;
        v99 = v92 + v90;
      }
      else
      {
        v91 = v92;
        v99 = v96;
      }
      v100 = *v98;
      v101 = v97->x;
      CGContextMoveToPoint(a1, v99, v30);
      CGContextAddLineToPoint(a1, v99, v93);
      CGContextAddArcToPoint(a1, v91, v93, v94, v95, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v94, v95, v101, v100, round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v101, v100, v99, v30, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
      v18 = a1;
      v19 = v99;
      goto LABEL_60;
    case 0xCu:
    case 0xDu:
      v47 = a3->_outsideImagePathExtension;
      v48 = CGRectGetMinX(a3->_signBaseRect);
      v49 = CGRectGetMinY(a3->_signBaseRect);
      v50 = CGRectGetMaxX(a3->_signBaseRect);
      v51 = CGRectGetMaxY(a3->_signBaseRect);
      v52 = &a3->_arrowWingMax;
      v53 = &a3->_arrowWingMax.y;
      if (a3->_type == 12)
        v54 = &a3->_arrowWingMax;
      else
        v54 = &a3->_arrowWingMin;
      if (a3->_type == 12)
        v55 = &a3->_arrowWingMax.y;
      else
        v55 = &a3->_arrowWingMin.y;
      if (a3->_type == 12)
      {
        v52 = &a3->_arrowWingMin;
        v53 = &a3->_arrowWingMin.y;
        v56 = v48;
      }
      else
      {
        v56 = v50;
      }
      if (a3->_type == 12)
        v57 = v50 + v47;
      else
        v57 = v48 - v47;
      v58 = *v53;
      v59 = v52->x;
      v61 = a3->_arrowTip.x;
      v60 = a3->_arrowTip.y;
      v113 = v54->x;
      y1b = *v55;
      CGContextMoveToPoint(a1, v57, v49);
      CGContextAddLineToPoint(a1, v57, v51);
      CGContextAddArcToPoint(a1, v56, v51, v59, v58, round(a2->_scale * a2->_cornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v59, v58, v61, v60, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v61, v60, v113, y1b, round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v113, y1b, v57, v49, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
      v18 = a1;
      v19 = v57;
      v20 = v49;
      goto LABEL_61;
    case 0xEu:
    case 0xFu:
      v62 = a3->_outsideImagePathExtension;
      v63 = CGRectGetMinX(a3->_signBaseRect);
      v30 = CGRectGetMinY(a3->_signBaseRect);
      v64 = CGRectGetMaxX(a3->_signBaseRect);
      v65 = CGRectGetMaxY(a3->_signBaseRect);
      v66 = &a3->_arrowWingMin;
      v67 = &a3->_arrowWingMin.y;
      if (a3->_type == 14)
        v38 = v64 + v62;
      else
        v38 = v63 - v62;
      if (a3->_type == 14)
        v68 = v63;
      else
        v68 = v64;
      y1 = v68;
      if (a3->_type == 14)
        v69 = &a3->_arrowWingMin;
      else
        v69 = &a3->_arrowWingMax;
      if (a3->_type == 14)
        v70 = &a3->_arrowWingMin.y;
      else
        v70 = &a3->_arrowWingMax.y;
      if (a3->_type == 14)
      {
        v66 = &a3->_arrowWingMax;
        v67 = &a3->_arrowWingMax.y;
      }
      v71 = *v67;
      v72 = v66->x;
      v74 = a3->_arrowTip.x;
      v73 = a3->_arrowTip.y;
      v75 = *v70;
      v76 = v69->x;
      CGContextMoveToPoint(a1, v38, v65);
      CGContextAddArcToPoint(a1, v72, v71, v74, v73, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v74, v73, v76, v75, round(a2->_scale * a2->_arrowTipCornerRadius * a2->_contentScale));
      CGContextAddArcToPoint(a1, v76, v75, y1, v30, round(a2->_scale * a2->_arrowJoinCornerRadius * a2->_contentScale));
      v43 = round(a2->_scale * a2->_cornerRadius * a2->_contentScale);
      v44 = a1;
      v45 = y1;
      v46 = v30;
LABEL_50:
      CGContextAddArcToPoint(v44, v45, v46, v38, v30, v43);
      v18 = a1;
      v19 = v38;
LABEL_60:
      v20 = v30;
LABEL_61:
      CGContextAddLineToPoint(v18, v19, v20);
      break;
    default:
      break;
  }
  CGContextClosePath(a1);
  CGContextRestoreGState(a1);
}

void md::TransitLogic::~TransitLogic(md::TransitLogic *this)
{
  md::TransitLogic::~TransitLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E428D578;
  md::TransitContext::~TransitContext((md::TransitLogic *)((char *)this + 232));
  *((_QWORD *)this + 24) = &off_1E42B4B90;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 19));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 16));
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::TransitLogic::didBecomeInactive(md::TransitLogic *this)
{
  md::TransitLogic *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = this;
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  v2 = (_QWORD *)((char *)this + 128);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 16));
  v3 = (_QWORD *)*((_QWORD *)v1 + 19);
  v1 = (md::TransitLogic *)((char *)v1 + 152);
  *((_QWORD *)v1 - 4) = v2;
  *v2 = 0;
  *((_QWORD *)v1 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
}

void md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v38, a1);
  v5 = operator new();
  v6 = v38;
  v7 = v39;
  v38 = 0;
  *(_QWORD *)&v39 = 0;
  *(_QWORD *)v5 = v6;
  *(_OWORD *)(v5 + 8) = v7;
  *(_OWORD *)(v5 + 24) = v40;
  v8 = v41;
  *(_QWORD *)(v5 + 40) = v41;
  *(_DWORD *)(v5 + 48) = v42;
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    v10 = *(_QWORD *)(v5 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v9 %= v10;
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(_QWORD *)(v6 + 8 * v9) = v5 + 24;
    *(_QWORD *)&v40 = 0;
    v41 = 0;
  }
  v11 = v43;
  v12 = v44;
  v13 = v45;
  v43 = 0;
  *(_QWORD *)&v44 = 0;
  *(_QWORD *)(v5 + 56) = v11;
  *(_OWORD *)(v5 + 64) = v12;
  *(_OWORD *)(v5 + 80) = v13;
  v14 = v46;
  *(_QWORD *)(v5 + 96) = v46;
  *(_DWORD *)(v5 + 104) = v47;
  if (v14)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
    v16 = *(_QWORD *)(v5 + 64);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 80;
    *(_QWORD *)&v45 = 0;
    v46 = 0;
  }
  v17 = v48;
  v18 = v49;
  v48 = 0;
  *(_QWORD *)&v49 = 0;
  *(_QWORD *)(v5 + 112) = v17;
  *(_OWORD *)(v5 + 120) = v18;
  *(_OWORD *)(v5 + 136) = v50;
  v19 = v51;
  *(_QWORD *)(v5 + 152) = v51;
  *(_DWORD *)(v5 + 160) = v52;
  if (v19)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8);
    v21 = *(_QWORD *)(v5 + 120);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21)
        v20 %= v21;
    }
    else
    {
      v20 &= v21 - 1;
    }
    *(_QWORD *)(v17 + 8 * v20) = v5 + 136;
    *(_QWORD *)&v50 = 0;
    v51 = 0;
  }
  v22 = v53;
  v23 = v54;
  v24 = v55;
  v53 = 0;
  *(_QWORD *)&v54 = 0;
  *(_QWORD *)(v5 + 168) = v22;
  *(_OWORD *)(v5 + 176) = v23;
  *(_OWORD *)(v5 + 192) = v24;
  v25 = v56;
  *(_QWORD *)(v5 + 208) = v56;
  *(_DWORD *)(v5 + 216) = v57;
  if (v25)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 192) + 8);
    v27 = *(_QWORD *)(v5 + 176);
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v26 >= v27)
        v26 %= v27;
    }
    else
    {
      v26 &= v27 - 1;
    }
    *(_QWORD *)(v22 + 8 * v26) = v5 + 192;
    *(_QWORD *)&v55 = 0;
    v56 = 0;
  }
  v29 = v61;
  v28 = v62;
  *(_QWORD *)(v5 + 248) = v61;
  *(_BYTE *)(v5 + 224) = v58;
  v30 = v59;
  v31 = v60;
  v59 = 0;
  v60 = 0;
  *(_QWORD *)(v5 + 232) = v30;
  *(_QWORD *)(v5 + 240) = v31;
  *(_QWORD *)(v5 + 256) = v28;
  *(_DWORD *)(v5 + 264) = v63;
  if (v28)
  {
    v32 = *(_QWORD *)(v29 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v32 >= v31)
        v32 %= v31;
    }
    else
    {
      v32 &= v31 - 1;
    }
    *(_QWORD *)(v30 + 8 * v32) = v5 + 248;
    v61 = 0;
    v62 = 0;
  }
  v33 = v64;
  v34 = v65;
  v64 = 0;
  v65 = 0;
  *(_QWORD *)(v5 + 272) = v33;
  *(_QWORD *)(v5 + 280) = v34;
  v36 = v66;
  v35 = v67;
  *(_QWORD *)(v5 + 288) = v66;
  *(_QWORD *)(v5 + 296) = v35;
  *(_DWORD *)(v5 + 304) = v68;
  if (v35)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v37 >= v34)
        v37 %= v34;
    }
    else
    {
      v37 &= v34 - 1;
    }
    *(_QWORD *)(v33 + 8 * v37) = v5 + 288;
    v66 = 0;
    v67 = 0;
  }
  *(_BYTE *)(v5 + 312) = v69;
  v4[2] = "md::TransitContext]";
  v4[3] = 18;
  v4[4] = v5;
  *v4 = &off_1E42B0C80;
  v4[1] = 0xFD5D5EC7C4E1E43ELL;
  *a2 = v4;
  md::TransitContext::~TransitContext((md::TransitContext *)&v38);
}

void sub_19F806C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::TransitContext::~TransitContext((md::TransitContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0xFD5D5EC7C4E1E43ELL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  double result;
  int v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  malloc_zone_t *zone;
  int v15;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  malloc_zone_t *v19;
  int v20;
  uint64_t v21;
  geo::read_write_lock *v22;
  const char *v23;
  malloc_zone_t *v24;
  int v25;
  uint64_t v26;
  geo::read_write_lock *v27;
  const char *v28;
  malloc_zone_t *v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *v34;
  int v35;
  uint64_t v36;
  geo::read_write_lock *v37;
  const char *v38;
  malloc_zone_t *v39;
  int v40;
  uint64_t v41;
  geo::read_write_lock *v42;
  const char *v43;
  malloc_zone_t *v44;
  int v45;
  uint64_t v46;
  geo::read_write_lock *v47;
  const char *v48;
  malloc_zone_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if ((v1 & 1) == 0)
  {
    v50 = a1;
    a1 = v50;
    if (v10)
    {
      v11 = operator new();
      *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v11 + 24) = "VectorKitLabels";
      *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v11 = &off_1E42B5668;
      *(_QWORD *)(v11 + 8) = "VectorKitLabels";
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_OWORD *)(v11 + 104) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_OWORD *)(v11 + 184) = 0u;
      *(_OWORD *)(v11 + 200) = 0u;
      *(_OWORD *)(v11 + 216) = 0u;
      *(_OWORD *)(v11 + 232) = 0u;
      *(_QWORD *)(v11 + 248) = 0;
      *(_OWORD *)(v11 + 56) = 0u;
      v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
      if ((_DWORD)v12)
        geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v11 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v11 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v11;
      a1 = v50;
    }
  }
  *(_QWORD *)(a1 + 16) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 24) = 0;
  if ((v2 & 1) == 0)
  {
    v51 = a1;
    a1 = v51;
    if (v15)
    {
      v16 = operator new();
      *(_QWORD *)(v16 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v16 + 24) = "VectorKitLabels";
      *(_OWORD *)(v16 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v16 = &off_1E42B5668;
      *(_QWORD *)(v16 + 8) = "VectorKitLabels";
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_OWORD *)(v16 + 104) = 0u;
      *(_OWORD *)(v16 + 120) = 0u;
      *(_OWORD *)(v16 + 136) = 0u;
      *(_OWORD *)(v16 + 152) = 0u;
      *(_OWORD *)(v16 + 168) = 0u;
      *(_OWORD *)(v16 + 184) = 0u;
      *(_OWORD *)(v16 + 200) = 0u;
      *(_OWORD *)(v16 + 216) = 0u;
      *(_OWORD *)(v16 + 232) = 0u;
      *(_QWORD *)(v16 + 248) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v16 + 56), 0);
      if ((_DWORD)v17)
        geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
      v19 = malloc_create_zone(0, 0);
      *(_QWORD *)(v16 + 48) = v19;
      malloc_set_zone_name(v19, "VectorKitLabels");
      *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v16;
      a1 = v51;
    }
  }
  *(_QWORD *)(a1 + 32) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if ((v3 & 1) == 0)
  {
    v52 = a1;
    a1 = v52;
    if (v20)
    {
      v21 = operator new();
      *(_QWORD *)(v21 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v21 + 24) = "VectorKitLabels";
      *(_OWORD *)(v21 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v21 = &off_1E42B5668;
      *(_QWORD *)(v21 + 8) = "VectorKitLabels";
      *(_OWORD *)(v21 + 72) = 0u;
      *(_OWORD *)(v21 + 88) = 0u;
      *(_OWORD *)(v21 + 104) = 0u;
      *(_OWORD *)(v21 + 120) = 0u;
      *(_OWORD *)(v21 + 136) = 0u;
      *(_OWORD *)(v21 + 152) = 0u;
      *(_OWORD *)(v21 + 168) = 0u;
      *(_OWORD *)(v21 + 184) = 0u;
      *(_OWORD *)(v21 + 200) = 0u;
      *(_OWORD *)(v21 + 216) = 0u;
      *(_OWORD *)(v21 + 232) = 0u;
      *(_QWORD *)(v21 + 248) = 0;
      *(_OWORD *)(v21 + 56) = 0u;
      v22 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v21 + 56), 0);
      if ((_DWORD)v22)
        geo::read_write_lock::logFailure(v22, (uint64_t)"initialization", v23);
      v24 = malloc_create_zone(0, 0);
      *(_QWORD *)(v21 + 48) = v24;
      malloc_set_zone_name(v24, "VectorKitLabels");
      *(_QWORD *)(v21 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v21;
      a1 = v52;
    }
  }
  *(_QWORD *)(a1 + 72) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 80) = 0;
  if ((v4 & 1) == 0)
  {
    v53 = a1;
    a1 = v53;
    if (v25)
    {
      v26 = operator new();
      *(_QWORD *)(v26 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v26 + 24) = "VectorKitLabels";
      *(_OWORD *)(v26 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v26 = &off_1E42B5668;
      *(_QWORD *)(v26 + 8) = "VectorKitLabels";
      *(_OWORD *)(v26 + 72) = 0u;
      *(_OWORD *)(v26 + 88) = 0u;
      *(_OWORD *)(v26 + 104) = 0u;
      *(_OWORD *)(v26 + 120) = 0u;
      *(_OWORD *)(v26 + 136) = 0u;
      *(_OWORD *)(v26 + 152) = 0u;
      *(_OWORD *)(v26 + 168) = 0u;
      *(_OWORD *)(v26 + 184) = 0u;
      *(_OWORD *)(v26 + 200) = 0u;
      *(_OWORD *)(v26 + 216) = 0u;
      *(_OWORD *)(v26 + 232) = 0u;
      *(_QWORD *)(v26 + 248) = 0;
      *(_OWORD *)(v26 + 56) = 0u;
      v27 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v26 + 56), 0);
      if ((_DWORD)v27)
        geo::read_write_lock::logFailure(v27, (uint64_t)"initialization", v28);
      v29 = malloc_create_zone(0, 0);
      *(_QWORD *)(v26 + 48) = v29;
      malloc_set_zone_name(v29, "VectorKitLabels");
      *(_QWORD *)(v26 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v26;
      a1 = v53;
    }
  }
  *(_QWORD *)(a1 + 88) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((v5 & 1) == 0)
  {
    v54 = a1;
    a1 = v54;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v31 + 24) = "VectorKitLabels";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "VectorKitLabels";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      v34 = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = v34;
      malloc_set_zone_name(v34, "VectorKitLabels");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v31;
      a1 = v54;
    }
  }
  *(_QWORD *)(a1 + 128) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 136) = 0;
  if ((v6 & 1) == 0)
  {
    v55 = a1;
    a1 = v55;
    if (v35)
    {
      v36 = operator new();
      *(_QWORD *)(v36 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v36 + 24) = "VectorKitLabels";
      *(_OWORD *)(v36 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v36 = &off_1E42B5668;
      *(_QWORD *)(v36 + 8) = "VectorKitLabels";
      *(_OWORD *)(v36 + 72) = 0u;
      *(_OWORD *)(v36 + 88) = 0u;
      *(_OWORD *)(v36 + 104) = 0u;
      *(_OWORD *)(v36 + 120) = 0u;
      *(_OWORD *)(v36 + 136) = 0u;
      *(_OWORD *)(v36 + 152) = 0u;
      *(_OWORD *)(v36 + 168) = 0u;
      *(_OWORD *)(v36 + 184) = 0u;
      *(_OWORD *)(v36 + 200) = 0u;
      *(_OWORD *)(v36 + 216) = 0u;
      *(_OWORD *)(v36 + 232) = 0u;
      *(_QWORD *)(v36 + 248) = 0;
      *(_OWORD *)(v36 + 56) = 0u;
      v37 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v36 + 56), 0);
      if ((_DWORD)v37)
        geo::read_write_lock::logFailure(v37, (uint64_t)"initialization", v38);
      v39 = malloc_create_zone(0, 0);
      *(_QWORD *)(v36 + 48) = v39;
      malloc_set_zone_name(v39, "VectorKitLabels");
      *(_QWORD *)(v36 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v36;
      a1 = v55;
    }
  }
  *(_QWORD *)(a1 + 144) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if ((v7 & 1) == 0)
  {
    v56 = a1;
    a1 = v56;
    if (v40)
    {
      v41 = operator new();
      *(_QWORD *)(v41 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v41 + 24) = "VectorKitLabels";
      *(_OWORD *)(v41 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v41 = &off_1E42B5668;
      *(_QWORD *)(v41 + 8) = "VectorKitLabels";
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *(_OWORD *)(v41 + 120) = 0u;
      *(_OWORD *)(v41 + 136) = 0u;
      *(_OWORD *)(v41 + 152) = 0u;
      *(_OWORD *)(v41 + 168) = 0u;
      *(_OWORD *)(v41 + 184) = 0u;
      *(_OWORD *)(v41 + 200) = 0u;
      *(_OWORD *)(v41 + 216) = 0u;
      *(_OWORD *)(v41 + 232) = 0u;
      *(_QWORD *)(v41 + 248) = 0;
      *(_OWORD *)(v41 + 56) = 0u;
      v42 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v41 + 56), 0);
      if ((_DWORD)v42)
        geo::read_write_lock::logFailure(v42, (uint64_t)"initialization", v43);
      v44 = malloc_create_zone(0, 0);
      *(_QWORD *)(v41 + 48) = v44;
      malloc_set_zone_name(v44, "VectorKitLabels");
      *(_QWORD *)(v41 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v41;
      a1 = v56;
    }
  }
  *(_QWORD *)(a1 + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 192) = 0;
  if ((v8 & 1) == 0)
  {
    v57 = a1;
    a1 = v57;
    if (v45)
    {
      v46 = operator new();
      *(_QWORD *)(v46 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v46 + 24) = "VectorKitLabels";
      *(_OWORD *)(v46 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v46 = &off_1E42B5668;
      *(_QWORD *)(v46 + 8) = "VectorKitLabels";
      *(_OWORD *)(v46 + 72) = 0u;
      *(_OWORD *)(v46 + 88) = 0u;
      *(_OWORD *)(v46 + 104) = 0u;
      *(_OWORD *)(v46 + 120) = 0u;
      *(_OWORD *)(v46 + 136) = 0u;
      *(_OWORD *)(v46 + 152) = 0u;
      *(_OWORD *)(v46 + 168) = 0u;
      *(_OWORD *)(v46 + 184) = 0u;
      *(_OWORD *)(v46 + 200) = 0u;
      *(_OWORD *)(v46 + 216) = 0u;
      *(_OWORD *)(v46 + 232) = 0u;
      *(_QWORD *)(v46 + 248) = 0;
      *(_OWORD *)(v46 + 56) = 0u;
      v47 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v46 + 56), 0);
      if ((_DWORD)v47)
        geo::read_write_lock::logFailure(v47, (uint64_t)"initialization", v48);
      v49 = malloc_create_zone(0, 0);
      *(_QWORD *)(v46 + 48) = v49;
      malloc_set_zone_name(v49, "VectorKitLabels");
      *(_QWORD *)(v46 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v46;
      a1 = v57;
    }
  }
  *(_QWORD *)(a1 + 200) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_BYTE *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_BYTE *)(a1 + 312) = 0;
  return result;
}

uint64_t md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::TransitLogic::runBeforeLayout(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t *v17;
  _WORD *v18;
  uint64_t v19;
  unsigned __int8 v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t *v23;
  _WORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  BOOL v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD **v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  _QWORD **v89;
  uint64_t v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t i;
  id v125;
  void *v126;
  void *v127;
  int v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  BOOL v138;
  _QWORD *v139;
  _QWORD *v140;
  char v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  int v146;
  _BOOL4 v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t k;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  unsigned int v160;
  unsigned int v161;
  _QWORD *v162;
  uint64_t v163;
  id obj;
  uint64_t v165;
  uint64_t v166;
  char *__p;
  uint64_t j;
  int v169;
  int v170;
  void *v171;
  int v172;
  float *v173;
  id v174;
  void *v175;
  uint64_t v176;
  _QWORD **v177;
  _QWORD *v178[2];
  _QWORD **v179;
  _QWORD *v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  _QWORD v195[3];
  _QWORD *v196;
  _QWORD v197[3];
  _QWORD *v198;
  _QWORD v199[3];
  _QWORD *v200;
  _QWORD v201[16];
  _QWORD *v202;
  _QWORD **v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v197[0] = &off_1E42CAB08;
  v197[1] = a2;
  v198 = v197;
  v195[0] = &off_1E42CAB50;
  v195[1] = a2;
  v196 = v195;
  v200 = v199;
  v199[0] = &off_1E42CAB50;
  v199[1] = a2;
  _ZNSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v197);
  v7 = v196;
  if (v196 == v195)
  {
    v8 = 4;
    v7 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v198;
  if (v198 == v197)
  {
    v10 = 4;
    v9 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v12 = (_QWORD *)*a3;
  v11 = (uint64_t *)a3[1];
  if (a1 + 232 == a4)
  {
    *(_BYTE *)(a4 + 224) = *(_BYTE *)(a1 + 456);
  }
  else
  {
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(a1 + 280);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)a4, *(_QWORD **)(a1 + 256));
    *(_DWORD *)(a4 + 104) = *(_DWORD *)(a1 + 336);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(a4 + 56), *(_QWORD **)(a1 + 312));
    *(_DWORD *)(a4 + 160) = *(_DWORD *)(a1 + 392);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(a4 + 112), *(_QWORD **)(a1 + 368));
    *(_DWORD *)(a4 + 216) = *(_DWORD *)(a1 + 448);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(a4 + 168), *(_QWORD **)(a1 + 424));
    *(_BYTE *)(a4 + 224) = *(_BYTE *)(a1 + 456);
    *(_DWORD *)(a4 + 264) = *(_DWORD *)(a1 + 496);
    std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,void *> *>>((_QWORD *)(a4 + 232), *(uint64_t **)(a1 + 480));
    *(_DWORD *)(a4 + 304) = *(_DWORD *)(a1 + 536);
    std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,void *> *>>((_QWORD *)(a4 + 272), *(uint64_t **)(a1 + 520));
  }
  *(_BYTE *)(a4 + 312) = *(_BYTE *)(a1 + 544);
  *(_QWORD *)(a1 + 552) = v12[366];
  *(_QWORD *)(a1 + 560) = v12[367];
  *(_QWORD *)(a1 + 568) = v12[368];
  *(_QWORD *)(a1 + 576) = v12[369];
  v13 = *v11;
  if ((v14 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v15 = *(_WORD **)(v13 + 48);
  v16 = *(_WORD **)(v13 + 56);
  if (v15 == v16)
  {
    v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v18 = *(_WORD **)(v13 + 48);
    while (*v18 != 16)
    {
      v18 += 16;
      if (v18 == v16)
        goto LABEL_27;
    }
    if (v18 == v16)
    {
      v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v15 != 16)
      {
        v15 += 16;
        if (v15 == v16)
        {
          v15 = *(_WORD **)(v13 + 56);
          break;
        }
      }
      v17 = (uint64_t *)(v15 + 4);
    }
  }
LABEL_27:
  v19 = *v11;
  if ((v20 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v21 = *(_WORD **)(v19 + 48);
  v22 = *(_WORD **)(v19 + 56);
  v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    v24 = v21;
    while (*v24 != 17)
    {
      v24 += 16;
      if (v24 == v22)
        goto LABEL_39;
    }
    if (v24 == v22)
    {
      v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 17)
      {
        v21 += 16;
        if (v21 == v22)
        {
          v21 = v22;
          break;
        }
      }
      v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_39:
  v180 = 0;
  v181 = 0;
  v178[1] = 0;
  v179 = &v180;
  v177 = v178;
  v178[0] = 0;
  v25 = v17 + 1;
  v26 = *(_QWORD *)(a1 + 120);
  v201[0] = *v17;
  *(_QWORD *)&v191 = v17 + 1;
  *(_QWORD *)&v187 = v26;
  *(_QWORD *)&v182 = a1 + 128;
  v202 = &v179;
  v203 = &v180;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(&v204, (uint64_t)v201, &v191, (uint64_t)&v187, &v182, &v202);
  v27 = *(_QWORD *)(a1 + 144);
  v201[0] = *v23;
  *(_QWORD *)&v191 = v23 + 1;
  *(_QWORD *)&v187 = v27;
  *(_QWORD *)&v182 = a1 + 152;
  v202 = &v177;
  v203 = v178;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(&v204, (uint64_t)v201, &v191, (uint64_t)&v187, &v182, &v202);
  if ((uint64_t *)(a1 + 120) != v17)
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t **)(a1 + 120), (_QWORD *)*v17, v17 + 1);
  if ((uint64_t *)(a1 + 144) != v23)
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t **)(a1 + 144), (_QWORD *)*v23, v23 + 1);
  v28 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 176) = v28;
  v29 = v17[2];
  if (v29 > (uint64_t)(*(_QWORD *)(a1 + 184) - (_QWORD)v28) >> 3)
  {
    if (v29 >> 61)
      abort();
    v30 = (char *)operator new(8 * v29);
    *(_QWORD *)(a1 + 168) = v30;
    *(_QWORD *)(a1 + 176) = v30;
    *(_QWORD *)(a1 + 184) = &v30[8 * v29];
    if (v28)
      operator delete(v28);
  }
  v31 = (_QWORD *)*v17;
  if ((uint64_t *)*v17 != v25)
  {
    v32 = *(char **)(a1 + 176);
    while (1)
    {
      v33 = v31[4];
      v34 = *(_QWORD *)(a1 + 184);
      if ((unint64_t)v32 >= v34)
        break;
      *(_QWORD *)v32 = v33;
      v32 += 8;
LABEL_71:
      *(_QWORD *)(a1 + 176) = v32;
      v46 = (uint64_t *)v31[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (uint64_t *)v31[2];
          v48 = *v47 == (_QWORD)v31;
          v31 = v47;
        }
        while (!v48);
      }
      v31 = v47;
      if (v47 == v25)
        goto LABEL_87;
    }
    v35 = *(char **)(a1 + 168);
    v36 = (v32 - v35) >> 3;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      abort();
    v38 = v34 - (_QWORD)v35;
    if (v38 >> 2 > v37)
      v37 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 61)
LABEL_279:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v40 = operator new(8 * v39);
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[8 * v36];
    *v41 = v33;
    v42 = (char *)(v41 + 1);
    if (v32 == v35)
    {
      v35 = v32;
    }
    else
    {
      v43 = v32 - 8 - v35;
      if (v43 < 0x168)
      {
        v44 = v32;
        goto LABEL_65;
      }
      if (&v40[v32 - v35 - 8 - (v43 & 0xFFFFFFFFFFFFFFF8)] > &v40[v32 - v35 - 8])
      {
        v44 = v32;
        goto LABEL_65;
      }
      if (&v32[-(v43 & 0xFFFFFFFFFFFFFFF8) - 8] > v32 - 8)
      {
        v44 = v32;
        goto LABEL_65;
      }
      if ((unint64_t)(v35 - v40) < 0x20)
      {
        v44 = v32;
        goto LABEL_65;
      }
      v49 = (v43 >> 3) + 1;
      v44 = &v32[-8 * (v49 & 0x3FFFFFFFFFFFFFFCLL)];
      v50 = &v40[8 * v36 - 16];
      v51 = v32 - 16;
      v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v53 = *(_OWORD *)v51;
        *(v50 - 1) = *((_OWORD *)v51 - 1);
        *v50 = v53;
        v50 -= 2;
        v51 -= 32;
        v52 -= 4;
      }
      while (v52);
      v41 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
      if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_65:
          v45 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *--v41 = v45;
        }
        while (v44 != v35);
        v35 = *(char **)(a1 + 168);
      }
    }
    *(_QWORD *)(a1 + 168) = v41;
    *(_QWORD *)(a1 + 176) = v42;
    *(_QWORD *)(a1 + 184) = &v40[8 * v39];
    if (v35)
      operator delete(v35);
    v32 = v42;
    goto LABEL_71;
  }
LABEL_87:
  v54 = v181;
  if (v181)
  {
    if (v181 >> 61)
      abort();
    __p = (char *)operator new(8 * v181);
    v55 = &__p[8 * v54];
  }
  else
  {
    __p = 0;
    v55 = 0;
  }
  v56 = v179;
  if (v179 != &v180)
  {
    v57 = __p;
    while (1)
    {
      v58 = v56[4];
      if (v57 < v55)
      {
        *(_QWORD *)v57 = v58;
        v57 += 8;
        v59 = (_QWORD *)v56[1];
        if (v59)
          goto LABEL_114;
        goto LABEL_116;
      }
      v60 = (v57 - __p) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        abort();
      if ((v55 - __p) >> 2 > v61)
        v61 = (v55 - __p) >> 2;
      if ((unint64_t)(v55 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
      {
        if (v62 >> 61)
          goto LABEL_279;
        v63 = operator new(8 * v62);
      }
      else
      {
        v63 = 0;
      }
      v64 = &v63[8 * v60];
      *(_QWORD *)v64 = v58;
      v65 = v64 + 8;
      v66 = __p;
      if (v57 != __p)
      {
        v67 = v57 - 8 - __p;
        if (v67 < 0x168
          || &v63[v57 - __p - 8 - (v67 & 0xFFFFFFFFFFFFFFF8)] > &v63[v57 - __p - 8]
          || &v57[-(v67 & 0xFFFFFFFFFFFFFFF8) - 8] > v57 - 8
          || (unint64_t)(__p - v63) < 0x20)
        {
          v68 = v57;
          v66 = __p;
          do
          {
LABEL_110:
            v69 = *((_QWORD *)v68 - 1);
            v68 -= 8;
            *((_QWORD *)v64 - 1) = v69;
            v64 -= 8;
          }
          while (v68 != v66);
          goto LABEL_111;
        }
        v71 = (v67 >> 3) + 1;
        v68 = &v57[-8 * (v71 & 0x3FFFFFFFFFFFFFFCLL)];
        v72 = &v63[8 * v60 - 16];
        v73 = v57 - 16;
        v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        v64 -= 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = __p;
        if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_110;
      }
LABEL_111:
      v55 = &v63[8 * v62];
      if (v66)
        operator delete(v66);
      __p = v64;
      v57 = v65;
      v59 = (_QWORD *)v56[1];
      if (v59)
      {
        do
        {
LABEL_114:
          v70 = (_QWORD **)v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
        goto LABEL_93;
      }
      do
      {
LABEL_116:
        v70 = (_QWORD **)v56[2];
        v48 = *v70 == v56;
        v56 = v70;
      }
      while (!v48);
LABEL_93:
      v56 = v70;
      if (v70 == &v180)
        goto LABEL_127;
    }
  }
  v57 = __p;
LABEL_127:
  v76 = v177;
  if (v177 != v178)
  {
    do
    {
      v77 = v76[4];
      if (v57 < v55)
      {
        *(_QWORD *)v57 = v77;
        v57 += 8;
        v78 = (_QWORD *)v76[1];
        if (v78)
          goto LABEL_150;
        goto LABEL_152;
      }
      v79 = (v57 - __p) >> 3;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61)
        abort();
      if ((v55 - __p) >> 2 > v80)
        v80 = (v55 - __p) >> 2;
      if ((unint64_t)(v55 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v81 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v81 = v80;
      if (v81)
      {
        if (v81 >> 61)
          goto LABEL_279;
        v82 = operator new(8 * v81);
      }
      else
      {
        v82 = 0;
      }
      v83 = &v82[8 * v79];
      *(_QWORD *)v83 = v77;
      v84 = v83 + 8;
      v85 = __p;
      if (v57 != __p)
      {
        v86 = v57 - 8 - __p;
        if (v86 < 0x168
          || &v82[v57 - __p - 8 - (v86 & 0xFFFFFFFFFFFFFFF8)] > &v82[v57 - __p - 8]
          || &v57[-(v86 & 0xFFFFFFFFFFFFFFF8) - 8] > v57 - 8
          || (unint64_t)(__p - v82) < 0x20)
        {
          v87 = v57;
          v85 = __p;
          do
          {
LABEL_146:
            v88 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *((_QWORD *)v83 - 1) = v88;
            v83 -= 8;
          }
          while (v87 != v85);
          goto LABEL_147;
        }
        v90 = (v86 >> 3) + 1;
        v87 = &v57[-8 * (v90 & 0x3FFFFFFFFFFFFFFCLL)];
        v91 = &v82[8 * v79 - 16];
        v92 = v57 - 16;
        v93 = v90 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v94 = *(_OWORD *)v92;
          *(v91 - 1) = *((_OWORD *)v92 - 1);
          *v91 = v94;
          v91 -= 2;
          v92 -= 32;
          v93 -= 4;
        }
        while (v93);
        v83 -= 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
        v85 = __p;
        if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_146;
      }
LABEL_147:
      v55 = &v82[8 * v81];
      if (v85)
        operator delete(v85);
      __p = v83;
      v57 = v84;
      v78 = (_QWORD *)v76[1];
      if (v78)
      {
        do
        {
LABEL_150:
          v89 = (_QWORD **)v78;
          v78 = (_QWORD *)*v78;
        }
        while (v78);
        goto LABEL_129;
      }
      do
      {
LABEL_152:
        v89 = (_QWORD **)v76[2];
        v48 = *v89 == v76;
        v76 = v89;
      }
      while (!v48);
LABEL_129:
      v76 = v89;
    }
    while (v89 != v178);
  }
  *(_BYTE *)(a1 + 456) = 0;
  if (__p != v57)
  {
    v95 = (unint64_t *)__p;
    do
    {
      v96 = *v95;
      if (*(_QWORD *)(a1 + 272))
      {
        v97 = *(_QWORD *)(a1 + 440);
        md::TransitTileData::appendNodesAttachedToLines(*v95, *(_QWORD **)(a1 + 256), a1 + 400);
        md::TransitTileData::setSelectedLines(v96, (_QWORD *)(a1 + 232));
        md::TransitTileData::setSelectedNodes(*(uint64_t **)(v96 + 968), *(uint64_t **)(v96 + 976), *(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408));
        if (*(_QWORD *)(a1 + 440) > v97)
          *(_BYTE *)(a1 + 456) = 1;
      }
      else
      {
        v204 = 0;
        v205 = 0;
        {
          v106 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v106, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v206 = mdm::Allocator::instance(void)::alloc;
        v207 = 0;
        {
          v107 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v107, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v100 = mdm::Allocator::instance(void)::alloc;
        v208 = mdm::Allocator::instance(void)::alloc;
        v209 = 0;
        v210 = 1065353216;
        md::TransitTileData::setSelectedLines(v96, &v204);
        v101 = v207;
        if (v207)
        {
          do
          {
            v102 = (_QWORD *)*v101;
            (*(void (**)(uint64_t))(*(_QWORD *)v100 + 40))(v100);
            v101 = v102;
          }
          while (v102);
        }
        if (v204)
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v206 + 40))(v206, v204, 8 * v205);
        {
          v108 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v108, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        {
          v105 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v105, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        md::TransitTileData::setSelectedNodes(*(uint64_t **)(v96 + 968), *(uint64_t **)(v96 + 976), 0, 0);
      }
      ++v95;
    }
    while (v95 != (unint64_t *)v57);
  }
  if (*(_BYTE *)(a1 + 216))
  {
    v110 = *(_QWORD *)(a1 + 464);
    v109 = *(_QWORD *)(a1 + 472);
    v112 = *(_QWORD *)(a1 + 504);
    v111 = *(_QWORD *)(a1 + 512);
    v113 = (_QWORD **)(a1 + 480);
    v114 = *(_QWORD *)(a1 + 520);
    v116 = *(_QWORD *)(a1 + 480);
    v115 = *(_QWORD *)(a1 + 488);
    v117 = *(_QWORD *)(a1 + 528);
    v118 = *(_DWORD *)(a1 + 496);
    v119 = *(_DWORD *)(a1 + 536);
    *(_QWORD *)(a1 + 464) = v112;
    *(_QWORD *)(a1 + 472) = v111;
    *(_QWORD *)(a1 + 504) = v110;
    *(_QWORD *)(a1 + 512) = v109;
    *(_QWORD *)(a1 + 520) = v116;
    *(_QWORD *)(a1 + 480) = v114;
    *(_QWORD *)(a1 + 488) = v117;
    *(_QWORD *)(a1 + 528) = v115;
    *(_DWORD *)(a1 + 496) = v119;
    *(_DWORD *)(a1 + 536) = v118;
    if (v117)
    {
      v120 = *(_QWORD *)(v114 + 8);
      if ((v111 & (v111 - 1)) != 0)
      {
        if (v120 >= v111)
          v120 %= v111;
      }
      else
      {
        v120 &= v111 - 1;
      }
      *(_QWORD *)(v112 + 8 * v120) = v113;
    }
    if (v115)
    {
      v121 = *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8);
      if ((v109 & (v109 - 1)) != 0)
      {
        if (v121 >= v109)
          v121 %= v109;
      }
      else
      {
        v121 &= v109 - 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * v121) = a1 + 520;
    }
    if (v117)
    {
      v122 = *v113;
      if (*v113)
      {
        do
        {
          v123 = (_QWORD *)*v122;
          operator delete(v122);
          v122 = v123;
        }
        while (v123);
        v111 = *(_QWORD *)(a1 + 472);
      }
      *v113 = 0;
      if (v111)
      {
        for (i = 0; i != v111; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 464) + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 488) = 0;
    }
    v173 = (float *)(a1 + 464);
    *(_BYTE *)(a1 + 544) = 1;
    v125 = *(id *)(a1 + 200);
    objc_msgSend(v125, "routeInfo");
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v126, "route");
    v175 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v175, "stations");
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    objc_msgSend(v175, "segments");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v166 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v191, &v204, 16);
    if (v166)
    {
      v165 = *(_QWORD *)v192;
      do
      {
        for (j = 0; j != v166; ++j)
        {
          if (*(_QWORD *)v192 != v165)
            objc_enumerationMutation(obj);
          v127 = *(void **)(*((_QWORD *)&v191 + 1) + 8 * j);
          if (objc_msgSend(v127, "type") == 6)
          {
            v128 = objc_msgSend(v127, "stepCount");
            v189 = 0u;
            v190 = 0u;
            v187 = 0u;
            v188 = 0u;
            objc_msgSend(v127, "steps");
            v174 = (id)objc_claimAutoreleasedReturnValue();
            v129 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v187, &v202, 16);
            if (!v129)
              goto LABEL_209;
            v176 = *(_QWORD *)v188;
            v130 = 1;
            v169 = v128 - 2;
            v170 = -1;
            while (1)
            {
              v131 = 0;
              v172 = v169 - v170;
              v170 += v129;
              do
              {
                if (*(_QWORD *)v188 != v176)
                  objc_enumerationMutation(v174);
                v132 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * v131);
                objc_msgSend(v132, "transitStep");
                v133 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v132, "originStop");
                v134 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v175, "getStationForStop:", v134);
                v135 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v135, "hasMuid"))
                {
                  if (objc_msgSend(v133, "vehicleInfosCount"))
                  {
                    objc_msgSend(v133, "vehicleInfos");
                    v136 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v136, "objectAtIndexedSubscript:", 0);
                    v137 = (void *)objc_claimAutoreleasedReturnValue();

                    v138 = objc_msgSend(v137, "pickupDropoffType") == 100;
                    if (!v134)
                      goto LABEL_241;
                  }
                  else
                  {
                    v138 = 0;
                    if (!v134)
                      goto LABEL_241;
                  }
                  if (v138)
                    goto LABEL_241;
                  v186 = objc_msgSend(v135, "muid");
                  v139 = std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v173, v186, &v186);
                  v140 = v139;
                  if (v130 & 1 | (v172 == (_DWORD)v131))
                  {
                    v141 = 1;
                    goto LABEL_229;
                  }
                  if (*((_BYTE *)v139 + 28) != 1)
                  {
                    v141 = 2;
LABEL_229:
                    *((_BYTE *)v139 + 28) = v141;
                  }
                  objc_msgSend(v132, "destinationStop");
                  v142 = (void *)objc_claimAutoreleasedReturnValue();
                  v143 = v142;
                  if (v142)
                  {
                    v144 = v142;
                    v145 = v134;
                    if (objc_msgSend(v144, "hasStopIndex")
                      && objc_msgSend(v145, "hasStopIndex"))
                    {
                      v146 = objc_msgSend(v144, "stopIndex");
                      v147 = v146 == objc_msgSend(v145, "stopIndex");

                      if (v147 && objc_msgSend(v133, "hasSignificanceForEndNode"))
                      {
                        if (*((_BYTE *)v140 + 29))
                        {
                          v148 = objc_msgSend(v133, "significanceForEndNode");
                          v149 = *((_DWORD *)v140 + 6);
                          if (v149 <= v148)
                            v149 = v148;
                          *((_DWORD *)v140 + 6) = v149;
                        }
                        else
                        {
                          *((_DWORD *)v140 + 6) = objc_msgSend(v133, "significanceForEndNode");
                          *((_BYTE *)v140 + 29) = 1;
                        }
                      }
                    }
                    else
                    {

                    }
                  }

                  v130 = 0;
                }
LABEL_241:

                ++v131;
              }
              while (v129 != v131);
              v150 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v187, &v202, 16);
              v129 = v150;
              if (!v150)
                goto LABEL_209;
            }
          }
          if (objc_msgSend(v127, "type") == 5)
          {
            v184 = 0u;
            v185 = 0u;
            v182 = 0u;
            v183 = 0u;
            objc_msgSend(v127, "steps");
            v174 = (id)objc_claimAutoreleasedReturnValue();
            v151 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v182, v201, 16);
            if (v151)
            {
              v152 = *(_QWORD *)v183;
              do
              {
                for (k = 0; k != v151; ++k)
                {
                  if (*(_QWORD *)v183 != v152)
                    objc_enumerationMutation(v174);
                  v154 = *(void **)(*((_QWORD *)&v182 + 1) + 8 * k);
                  objc_msgSend(v154, "transitStep");
                  v155 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v155, "maneuverType") == 7
                    || objc_msgSend(v155, "maneuverType") == 8)
                  {
                    objc_msgSend(v154, "accessPoint");
                    v156 = (void *)objc_claimAutoreleasedReturnValue();
                    v157 = v156;
                    if (v156 && objc_msgSend(v156, "hasStationIndex"))
                    {
                      objc_msgSend(v171, "objectAtIndexedSubscript:", objc_msgSend(v157, "stationIndex"));
                      v158 = (void *)objc_claimAutoreleasedReturnValue();
                      if (objc_msgSend(v158, "hasMuid"))
                      {
                        v186 = objc_msgSend(v158, "muid");
                        v159 = std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v173, v186, &v186);
                        *((_BYTE *)v159 + 28) = 1;
                        if (objc_msgSend(v155, "hasSignificanceForEndNode"))
                        {
                          if (*((_BYTE *)v159 + 29))
                          {
                            v160 = objc_msgSend(v155, "significanceForEndNode");
                            v161 = *((_DWORD *)v159 + 6);
                            if (v161 <= v160)
                              v161 = v160;
                            *((_DWORD *)v159 + 6) = v161;
                          }
                          else
                          {
                            *((_DWORD *)v159 + 6) = objc_msgSend(v155, "significanceForEndNode");
                            *((_BYTE *)v159 + 29) = 1;
                          }
                        }
                      }

                    }
                  }

                }
                v151 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v182, v201, 16);
              }
              while (v151);
            }
LABEL_209:

          }
        }
        v166 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v191, &v204, 16);
      }
      while (v166);
    }

  }
  if (__p)
    operator delete(__p);
  std::__tree<gdc::LayerDataWithWorld>::destroy(v178[0]);
  std::__tree<gdc::LayerDataWithWorld>::destroy(v180);
  if (!v200)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v200 + 48))(v200);
  v162 = v200;
  if (v200 == v199)
  {
    v163 = 4;
    v162 = v199;
  }
  else
  {
    if (!v200)
      return;
    v163 = 5;
  }
  (*(void (**)(void))(*v162 + 8 * v163))();
}

void sub_19F808BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{

  if (__p)
    operator delete(__p);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a22);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a25);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a61);
  _Unwind_Resume(a1);
}

void md::Logic<md::TransitLogic,md::TransitContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TransitLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

_QWORD **std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(_QWORD **result, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD **a6)
{
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  _BOOL4 v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;

  v7 = result;
  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
  {
LABEL_44:
    v32 = *(_OWORD *)a6;
    v9 = v8;
    goto LABEL_46;
  }
  for (i = *(_QWORD **)a4; *(_QWORD *)a4 != *a5; i = *(_QWORD **)a4)
  {
    v15 = v8[4];
    v16 = *((unsigned __int8 *)v8 + 48);
    v17 = (char)v16;
    v18 = *((unsigned __int8 *)i + 48);
    v19 = i[4];
    if (v16 == v18 ? v15 < v19 : (char)v16 < (char)v18)
    {
      result = std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100](a6, (uint64_t)(v8 + 4));
      v21 = *(_QWORD **)a2;
      v22 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v21[2];
          v24 = *v23 == (_QWORD)v21;
          v21 = v23;
        }
        while (!v24);
      }
      *(_QWORD *)a2 = v23;
    }
    else
    {
      v25 = v19 < v15;
      if (v17 != (char)v18)
        v25 = (char)v18 < v17;
      if (v25)
      {
        v26 = (_QWORD *)i[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)i[2];
            v24 = *v27 == (_QWORD)i;
            i = v27;
          }
          while (!v24);
        }
      }
      else
      {
        v28 = (_QWORD *)v8[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v8[2];
            v24 = *v29 == (_QWORD)v8;
            v8 = v29;
          }
          while (!v24);
        }
        *(_QWORD *)a2 = v29;
        v30 = *(_QWORD **)a4;
        v31 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v31)
        {
          do
          {
            v27 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v30[2];
            v24 = *v27 == (_QWORD)v30;
            v30 = v27;
          }
          while (!v24);
        }
      }
      *(_QWORD *)a4 = v27;
    }
    v8 = *(_QWORD **)a2;
    v9 = (_QWORD *)*a3;
    if (*(_QWORD *)a2 == *a3)
      goto LABEL_44;
  }
  v32 = *(_OWORD *)a6;
  v35 = *(_OWORD *)a6;
  if (v8 != v9)
  {
    do
    {
      result = std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v35, (uint64_t)(v8 + 4));
      v33 = (_QWORD *)v8[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v8[2];
          v24 = *v34 == (_QWORD)v8;
          v8 = v34;
        }
        while (!v24);
      }
      v8 = v34;
    }
    while (v34 != v9);
    v32 = v35;
  }
LABEL_46:
  *v7 = v9;
  *(_OWORD *)(v7 + 1) = v32;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_59;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19F80962C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(_QWORD *result, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = (unint64_t)result;
  v4 = result[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*result + 8 * i) = 0;
  result[5] = 0;
  v6 = (_QWORD *)result[3];
  result[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      v7 = (_QWORD *)*v6;
      result = (_QWORD *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__node_insert_multi(v3, v6);
      a2 = (_QWORD *)*a2;
      v6 = v7;
      if (!v7)
        goto LABEL_7;
    }
    do
    {
      v10 = (_QWORD *)*v6;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 40))(*(_QWORD *)(v3 + 32));
      v6 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 16))(*(_QWORD *)(v3 + 32), 24, 8);
      *v8 = 0;
      v8[1] = 0;
      v9 = a2[2];
      v8[1] = v9;
      v8[2] = v9;
      result = (_QWORD *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__node_insert_multi(v3, v8);
      a2 = (_QWORD *)*a2;
    }
  }
  return result;
}

void sub_19F809720(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v2, 24);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t *v10;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      v7 = *((_DWORD *)a2 + 6);
      *((_WORD *)v6 + 14) = *((_WORD *)a2 + 14);
      *((_DWORD *)v6 + 6) = v7;
      v8 = (uint64_t *)*v6;
      std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (uint64_t *)*a2;
      v6 = v8;
      if (!v8)
        goto LABEL_7;
    }
    do
    {
      v10 = (uint64_t *)*v6;
      operator delete(v6);
      v6 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v9 = operator new(0x20uLL);
      *(_QWORD *)v9 = 0;
      v9[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v9 + 1) = *((_QWORD *)v9 + 2);
      std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)a1, v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19F80981C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  size_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  _QWORD *j;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *i;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = a2[2];
  a2[1] = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = v10;
    else
      prime = v9;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v5)
      goto LABEL_105;
    if (prime >= v5)
      goto LABEL_40;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = operator new(8 * prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v14 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      v16 = a1 + 16;
      v15 = *(_QWORD **)(a1 + 16);
      if (v15)
      {
        v17 = v15[1];
        v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime)
            v17 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
          for (i = (_QWORD *)*v15; *v15; i = (_QWORD *)*v15)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v17)
            {
              v15 = i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (_QWORD *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *v15 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v15;
                v15 = i;
                v17 = v37;
              }
            }
          }
        }
        else
        {
          v19 = v17 & v18;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
          for (j = (_QWORD *)*v15; *v15; j = (_QWORD *)*v15)
          {
            v21 = j[1] & v18;
            if (v21 == v19)
            {
              v15 = j;
            }
            else
            {
              v22 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
              {
                do
                {
                  v23 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22 && j[2] == v22[2]);
                *v15 = v22;
                v24 = 8 * v21;
                *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
                **(_QWORD **)(*(_QWORD *)a1 + v24) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
                v15 = j;
                v19 = v21;
              }
            }
          }
        }
      }
      v5 = prime;
    }
    else
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    v41 = v4;
    if (v5 <= v4)
      v41 = v4 % v5;
    v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v41);
    if (!v42)
    {
      v35 = 0;
      v48 = a2[1];
      if (v48 < v5)
        goto LABEL_78;
      goto LABEL_77;
    }
    v43 = 0;
    do
    {
      v35 = v42;
      v42 = (_QWORD *)*v42;
      if (!v42)
        break;
      v46 = v42[1];
      v47 = v46;
      if (v46 >= v5)
        v47 = v46 % v5;
      if (v47 != v41)
        break;
      v44 = v46 == v4 && v42[2] == a2[2];
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v30 = (v5 - 1) & v4;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
    if (!v31)
    {
      v35 = 0;
      v48 = a2[1];
      goto LABEL_75;
    }
    v32 = 0;
    do
    {
      v35 = v31;
      v31 = (_QWORD *)*v31;
      if (!v31)
        break;
      v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30)
        break;
      v33 = v36 == v4 && v31[2] == a2[2];
      v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  v48 = a2[1];
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5)
LABEL_77:
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*a2)
      goto LABEL_92;
    v49 = *(_QWORD *)(*a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *a2 = *v35;
  *v35 = a2;
  if (*a2)
  {
    v49 = *(_QWORD *)(*a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

unint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__node_insert_multi(unint64_t result, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  _QWORD *j;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *i;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  _BOOL4 v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  _BOOL4 v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v3 = result;
  v4 = a2[2];
  a2[1] = v4;
  v5 = *(_QWORD *)(result + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(result + 40) + 1);
  v7 = *(float *)(result + 48);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      v11 = v10;
    else
      v11 = v9;
    if (v11 == 1)
    {
      v11 = 2;
    }
    else if ((v11 & (v11 - 1)) != 0)
    {
      result = std::__next_prime(v11);
      v11 = result;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (v11 > v5)
      goto LABEL_13;
    if (v11 >= v5)
      goto LABEL_39;
    result = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 40) / *(float *)(v3 + 48));
    if (v5 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v25 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v25;
    }
    if (v11 <= result)
      v11 = result;
    if (v11 >= v5)
    {
      v5 = *(_QWORD *)(v3 + 8);
      goto LABEL_39;
    }
    if (v11)
    {
LABEL_13:
      result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), 8 * v11, 8);
      v12 = *(_QWORD *)v3;
      *(_QWORD *)v3 = result;
      if (v12)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v12, 8 * *(_QWORD *)(v3 + 8));
      v13 = 0;
      *(_QWORD *)(v3 + 8) = v11;
      do
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v13++) = 0;
      while (v11 != v13);
      v15 = v3 + 24;
      v14 = *(_QWORD **)(v3 + 24);
      if (v14)
      {
        v16 = v14[1];
        v17 = v11 - 1;
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v16 >= v11)
            v16 %= v11;
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v16) = v15;
          for (i = (_QWORD *)*v14; *v14; i = (_QWORD *)*v14)
          {
            v35 = i[1];
            if (v35 >= v11)
              v35 %= v11;
            if (v35 == v16)
            {
              v14 = i;
            }
            else
            {
              v36 = i;
              if (*(_QWORD *)(*(_QWORD *)v3 + 8 * v35))
              {
                do
                {
                  v37 = v36;
                  v36 = (_QWORD *)*v36;
                }
                while (v36 && i[2] == v36[2]);
                *v14 = v36;
                v38 = 8 * v35;
                *v37 = **(_QWORD **)(*(_QWORD *)v3 + v38);
                **(_QWORD **)(*(_QWORD *)v3 + v38) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v3 + 8 * v35) = v14;
                v14 = i;
                v16 = v35;
              }
            }
          }
        }
        else
        {
          v18 = v16 & v17;
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v18) = v15;
          for (j = (_QWORD *)*v14; *v14; j = (_QWORD *)*v14)
          {
            v20 = j[1] & v17;
            if (v20 == v18)
            {
              v14 = j;
            }
            else
            {
              v21 = j;
              if (*(_QWORD *)(*(_QWORD *)v3 + 8 * v20))
              {
                do
                {
                  v22 = v21;
                  v21 = (_QWORD *)*v21;
                }
                while (v21 && j[2] == v21[2]);
                *v14 = v21;
                v23 = 8 * v20;
                *v22 = **(_QWORD **)(*(_QWORD *)v3 + v23);
                **(_QWORD **)(*(_QWORD *)v3 + v23) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v3 + 8 * v20) = v14;
                v14 = j;
                v18 = v20;
              }
            }
          }
        }
      }
      v5 = v11;
    }
    else
    {
      v48 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v48)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v48, 8 * *(_QWORD *)(v3 + 8));
      v5 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
LABEL_39:
  v27 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] >= 2uLL)
  {
    v39 = v4;
    if (v5 <= v4)
      v39 = v4 % v5;
    v40 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v39);
    if (!v40)
    {
      v33 = 0;
      v46 = a2[1];
      if (v46 < v5)
        goto LABEL_77;
      goto LABEL_76;
    }
    v41 = 0;
    do
    {
      v33 = v40;
      v40 = (_QWORD *)*v40;
      if (!v40)
        break;
      v44 = v40[1];
      v45 = v44;
      if (v44 >= v5)
        v45 = v44 % v5;
      if (v45 != v39)
        break;
      v42 = v44 == v4 && v40[2] == a2[2];
      v43 = v41 & !v42;
      v41 |= v42;
    }
    while (v43 != 1);
  }
  else
  {
    v28 = (v5 - 1) & v4;
    v29 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v28);
    if (!v29)
    {
      v33 = 0;
      v46 = a2[1];
      goto LABEL_74;
    }
    v30 = 0;
    do
    {
      v33 = v29;
      v29 = (_QWORD *)*v29;
      if (!v29)
        break;
      v34 = v29[1];
      if ((v34 & (v5 - 1)) != v28)
        break;
      v31 = v34 == v4 && v29[2] == a2[2];
      v32 = v30 & !v31;
      v30 |= v31;
    }
    while ((v32 & 1) == 0);
  }
  v46 = a2[1];
  if (v27.u32[0] <= 1uLL)
  {
LABEL_74:
    v46 &= v5 - 1;
    goto LABEL_77;
  }
  if (v46 >= v5)
LABEL_76:
    v46 %= v5;
LABEL_77:
  if (!v33)
  {
    *a2 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = a2;
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v46) = v3 + 24;
    if (!*a2)
      goto LABEL_91;
    v47 = *(_QWORD *)(*a2 + 8);
    if (v27.u32[0] > 1uLL)
    {
      if (v47 >= v5)
        v47 %= v5;
    }
    else
    {
      v47 &= v5 - 1;
    }
LABEL_90:
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v47) = a2;
    goto LABEL_91;
  }
  *a2 = *v33;
  *v33 = a2;
  if (*a2)
  {
    v47 = *(_QWORD *)(*a2 + 8);
    if (v27.u32[0] > 1uLL)
    {
      if (v47 >= v5)
        v47 %= v5;
    }
    else
    {
      v47 &= v5 - 1;
    }
    if (v47 != v46)
      goto LABEL_90;
  }
LABEL_91:
  ++*(_QWORD *)(v3 + 40);
  return result;
}

void _ZNSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__1NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAB50;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAB50;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TransitLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__0NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAB08;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md12TransitLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14TransitContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAB08;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46)
      v3 = 0x1AF456233693CD46 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x1AF456233693CD46;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x1AF456233693CD46)
      {
        if (v6[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x1AF456233693CD46)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x1AF456233693CD46)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL)
      v11 = 0x99BED48DEFBBD82BLL % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x99BED48DEFBBD82BLL)
      {
        if (v13[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x99BED48DEFBBD82BLL)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x99BED48DEFBBD82BLL)
    return v10;
  return v10;
}

void md::TransitContext::~TransitContext(md::TransitContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = (_QWORD *)*((_QWORD *)this + 36);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 31);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 24);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25));
      v8 = v9;
    }
    while (v9);
  }
  v10 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v10, 8 * *((_QWORD *)this + 22));
  v11 = (_QWORD *)*((_QWORD *)this + 17);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18));
      v11 = v12;
    }
    while (v12);
  }
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v13)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v13, 8 * *((_QWORD *)this + 15));
  v14 = (_QWORD *)*((_QWORD *)this + 10);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11));
      v14 = v15;
    }
    while (v15);
  }
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v16, 8 * *((_QWORD *)this + 8));
  v17 = (_QWORD *)*((_QWORD *)this + 3);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4));
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v19)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v19, 8 * *((_QWORD *)this + 1));
}

_QWORD *gdc::ManagedObjectHolder<md::TransitContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::TransitContext *v2;

  *a1 = &off_1E42B0C80;
  v2 = (md::TransitContext *)a1[4];
  if (v2)
  {
    md::TransitContext::~TransitContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::TransitContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::TransitContext *v1;

  *a1 = &off_1E42B0C80;
  v1 = (md::TransitContext *)a1[4];
  if (v1)
  {
    md::TransitContext::~TransitContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::TransitContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::TransitLogic::setSelectedLines(md::TransitLogic *this, VKTransitLineMarker *a2)
{
  VKTransitLineMarker *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t *v12;
  uint64_t *j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  gdc::LayerDataStore **v18;
  GEOMapItemIdentifier *v19;
  uint64_t v20;
  uint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v3 = a2;
  v45 = 0;
  v46 = 0;
  {
    v42 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v47 = mdm::Allocator::instance(void)::alloc;
  v48 = 0;
  {
    v43 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v49 = mdm::Allocator::instance(void)::alloc;
  v50 = 0;
  v51 = 1065353216;
  if (v3 && -[VKTransitLineMarker featureID](v3, "featureID"))
  {
    v44 = -[VKTransitLineMarker featureID](v3, "featureID");
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,unsigned long long>((unint64_t)&v45, v44, &v44);
  }
  if ((uint64_t *)((char *)this + 232) != &v45)
  {
    *((_DWORD *)this + 70) = v51;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)this + 29, v48);
  }
  if (*((_QWORD *)this + 55))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 53);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 54) + 40))(*((_QWORD *)this + 54));
        v6 = v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 53) = 0;
    v8 = *((_QWORD *)this + 51);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
        *(_QWORD *)(*((_QWORD *)this + 50) + 8 * i) = 0;
    }
    *((_QWORD *)this + 55) = 0;
  }
  v10 = (unint64_t *)*((_QWORD *)this + 21);
  v11 = (unint64_t *)*((_QWORD *)this + 22);
  if (v10 != v11)
  {
    do
      md::TransitTileData::appendNodesAttachedToLines(*v10++, *((_QWORD **)this + 32), (unint64_t)this + 400);
    while (v10 != v11);
    v12 = (uint64_t *)*((_QWORD *)this + 21);
    for (j = (uint64_t *)*((_QWORD *)this + 22); v12 != j; ++v12)
    {
      v14 = *v12;
      md::TransitTileData::setSelectedLines(*v12, (_QWORD *)this + 29);
      md::TransitTileData::setSelectedNodes(*(uint64_t **)(v14 + 968), *(uint64_t **)(v14 + 976), *((_QWORD *)this + 50), *((_QWORD *)this + 51));
    }
  }
  v15 = *((_QWORD *)this + 28);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 40);
  if (v16 != v17)
  {
    while (*(_WORD *)v16 != 17)
    {
      v16 += 16;
      if (v16 == v17)
        goto LABEL_66;
    }
  }
  if (v16 != v17)
  {
    v18 = *(gdc::LayerDataStore ***)(v16 + 8);
    if (v18)
    {
      if (v50)
      {
        -[VKTransitLineMarker identifier](v3, "identifier");
        v19 = (GEOMapItemIdentifier *)objc_claimAutoreleasedReturnValue();
        if (!v50)
          goto LABEL_64;
        v20 = *((_QWORD *)this + 21);
        v21 = *((_QWORD *)this + 22);
        if (v20 == v21)
          goto LABEL_64;
        v22 = (uint8x8_t)vcnt_s8(v46);
        v22.i16[0] = vaddlv_u8(v22);
        v23 = v22.u32[0];
        v24 = *(_QWORD *)&v46 - 1;
        v25 = 3.4028e38;
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)v20 + 888);
          v28 = *(_QWORD *)(*(_QWORD *)v20 + 896);
          if (v27 == v28 || *(_QWORD *)&v46 == 0)
          {
            v26 = 3.4028e38;
          }
          else
          {
            v26 = 3.4028e38;
            do
            {
              for (k = *(_QWORD *)(v27 + 80); k != *(_QWORD *)(v27 + 88); k += 8)
              {
                v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)k + 8) + 16);
                v32 = *(_QWORD *)(v31 + 40);
                if (v23 > 1)
                {
                  v33 = *(_QWORD *)(v31 + 40);
                  if (v32 >= *(_QWORD *)&v46)
                    v33 = v32 % *(_QWORD *)&v46;
                }
                else
                {
                  v33 = v24 & v32;
                }
                v34 = *(_QWORD **)(v45 + 8 * v33);
                if (v34)
                {
                  v35 = (_QWORD *)*v34;
                  if (v35)
                  {
                    if (v23 < 2)
                    {
                      while (1)
                      {
                        v36 = v35[1];
                        if (v32 == v36)
                        {
                          if (v35[2] == v32)
                            goto LABEL_38;
                        }
                        else if ((v36 & v24) != v33)
                        {
                          goto LABEL_39;
                        }
                        v35 = (_QWORD *)*v35;
                        if (!v35)
                          goto LABEL_39;
                      }
                    }
                    do
                    {
                      v37 = v35[1];
                      if (v32 == v37)
                      {
                        if (v35[2] == v32)
                        {
LABEL_38:
                          v26 = fminf(*(float *)(v31 + 88), v26);
                          break;
                        }
                      }
                      else
                      {
                        if (v37 >= *(_QWORD *)&v46)
                          v37 %= *(_QWORD *)&v46;
                        if (v37 != v33)
                          break;
                      }
                      v35 = (_QWORD *)*v35;
                    }
                    while (v35);
                  }
                }
LABEL_39:
                ;
              }
              v27 += 248;
            }
            while (v27 != v28);
          }
          v25 = fminf(v26, v25);
          v20 += 8;
        }
        while (v20 != v21);
        if (v25 >= 4295000000.0)
LABEL_64:
          v38 = -1;
        else
          v38 = vcvtms_u32_f32(v25);
        md::SelectedTransitLayerDataSource::setSelectedLine(v18, v19, v38);

      }
      else
      {
        md::SelectedTransitLayerDataSource::setSelectedLine(v18, 0, -1);
      }
    }
  }
LABEL_66:
  *((_BYTE *)this + 456) = 1;
  v39 = v48;
  if (v48)
  {
    do
    {
      v40 = (_QWORD *)*v39;
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
      v39 = v40;
    }
    while (v40);
  }
  v41 = v45;
  v45 = 0;
  if (v41)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 40))(v47, v41, 8 * *(_QWORD *)&v46);

}

void sub_19F80ACF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(unint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v6 = result;
  v7 = *(_QWORD *)(result + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 24, 8);
  v13 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(v6 + 40) + 1);
  v15 = *(float *)(v6 + 48);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    if (v19 == 1)
    {
      v19 = 2;
    }
    else if ((v19 & (v19 - 1)) != 0)
    {
      result = std::__next_prime(v19);
      v19 = result;
    }
    v20 = *(int8x8_t *)(v6 + 8);
    if (v19 > *(_QWORD *)&v20)
      goto LABEL_34;
    if (v19 < *(_QWORD *)&v20)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 40) / *(float *)(v6 + 48));
      if (*(_QWORD *)&v20 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v20), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v22 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v22;
      }
      if (v19 <= result)
        v19 = result;
      if (v19 < *(_QWORD *)&v20)
LABEL_34:
        result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v6, v19);
    }
    v7 = *(_QWORD *)(v6 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v23 = *(unint64_t **)(*(_QWORD *)v6 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_58:
    *v23 = v13;
    goto LABEL_59;
  }
  *(_QWORD *)v13 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v13;
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v3) = v6 + 24;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (unint64_t *)(*(_QWORD *)v6 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(v6 + 40);
  return result;
}

void sub_19F80AFF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v2, 24);
  _Unwind_Resume(a1);
}

void md::TransitLogic::setRouteContext(md::TransitLogic *this, VKRouteContext *a2)
{
  VKRouteContext *v3;
  VKRouteContext *v4;
  VKRouteContext *v5;
  void *v6;
  VKRouteContext *v7;

  v3 = a2;
  if (*((VKRouteContext **)this + 25) != v3)
    *((_BYTE *)this + 216) = 1;
  v4 = v3;
  v7 = v4;
  if (v4)
  {
    v5 = v4;
    v4 = v7;
  }
  v6 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v4;

}

void std::vector<VKTransitLineMarker * {__strong}>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v4 = *(char **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v5];
    v8 = v4 - v2;
    v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_7:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) > 0x77)
    {
      v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = &v6[8 * v13 - 16];
        v16 = v4 - 32;
        v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *(_OWORD *)v16;
          v18 = *((_OWORD *)v16 + 1);
          *(_OWORD *)v16 = 0uLL;
          *((_OWORD *)v16 + 1) = 0uLL;
          v16 -= 32;
          *((_OWORD *)v15 - 1) = v19;
          *(_OWORD *)v15 = v18;
          v15 -= 32;
          v17 -= 4;
        }
        while (v17);
        v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
        v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_19;
      }
    }
    else
    {
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v20 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v20;
      v11 -= 8;
    }
    while (v4 != v2);
LABEL_19:
    v2 = *(char **)a1;
    v21 = *(char **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    while (v21 != v2)
    {
      v22 = (void *)*((_QWORD *)v21 - 1);
      v21 -= 8;

    }
    goto LABEL_7;
  }
}

void md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(_QWORD *a1, float64x2_t **a2, float64x2_t **a3, float64x2_t *a4)
{
  float *v4;
  float *v5;
  char *v6;
  float v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  float32x4_t v20;
  float32x2_t v21;
  float v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  float32x4_t v26;
  _OWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  const float *v31;
  int8x16_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t v48;
  float32x2_t *v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float32x2_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  float *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  float64x2_t **v75;
  float64x2_t *v76;
  int32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float64x2_t v81;
  float32x2_t v82;
  void *v83;
  unint64_t v84;
  float32x4x2_t v85;

  if (a2 == a3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v77 = vdupq_n_s32(0x7F7FFFFFu);
  __asm { FMOV            V2.4S, #1.0 }
  v80 = _Q2;
  v81 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  do
  {
    v12 = *(float *)&(*a2)[84].f64[1];
    if (v12 != 0.0)
    {
      v13 = 0;
      v14 = (float)(1.0 / v12) * (float)(1.0 / v12);
      v75 = a2;
      v76 = *a2;
      v82 = vcvt_f32_f64(vdivq_f64(vsubq_f64(*a4, (*a2)[81]), vsubq_f64((*a2)[82], (*a2)[81])));
      v78 = (float32x4_t)vdupq_lane_s32((int32x2_t)v82, 1);
      v79 = (float32x4_t)vdupq_lane_s32((int32x2_t)v82, 0);
      while (1)
      {
        if (v13 >= geo::codec::VectorTile::transitLinkCount(*(geo::codec::VectorTile **)&v76[45].f64[0]))
        {
          a2 = v75;
          break;
        }
        v15 = geo::codec::VectorTile::transitLinks(*(geo::codec::VectorTile **)&v76[45].f64[0]);
        v16 = v15 + 184 * v13;
        if (!*(_DWORD *)(v16 + 20))
          goto LABEL_7;
        v17 = 0;
        v18 = (unint64_t *)(v15 + 184 * v13 + 32);
        while (1)
        {
          v84 = 0;
          v19 = (_QWORD *)geo::codec::transitLinkPoints(v16, v17, &v84);
          if (v84 < 2)
          {
            v22 = 3.4028e38;
            goto LABEL_15;
          }
          v21 = *(float32x2_t *)v19;
          if (v84 >= 9)
          {
            v25 = (v84 - 1) & 0xFFFFFFFFFFFFFFF8;
            v20.i64[1] = *v19;
            v26 = (float32x4_t)vdupq_lane_s32((int32x2_t)v21, 0);
            v27 = v19 + 5;
            v28 = v25;
            v29 = (float32x4_t)v77;
            v30 = (float32x4_t)v77;
            do
            {
              v31 = (const float *)(v27 - 2);
              v85 = vld2q_f32(v31);
              v33 = *(int32x4_t *)v27;
              v32 = *((int8x16_t *)v27 + 1);
              v27 += 4;
              v34 = (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v85.val[0], 0xCuLL);
              v26 = (float32x4_t)vuzp1q_s32(v33, (int32x4_t)v32);
              v35 = (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v85.val[1], 0xCuLL);
              v20 = (float32x4_t)vuzp2q_s32(v33, (int32x4_t)v32);
              v36 = (float32x4_t)vextq_s8((int8x16_t)v85.val[0], (int8x16_t)v26, 0xCuLL);
              v37 = (float32x4_t)vextq_s8((int8x16_t)v85.val[1], (int8x16_t)v20, 0xCuLL);
              v38 = vsubq_f32(v85.val[0], v34);
              v39 = vsubq_f32(v26, v36);
              v85.val[0] = vsubq_f32(v85.val[1], v35);
              v85.val[1] = vsubq_f32(v20, v37);
              v40 = vmlaq_f32(vmulq_f32(v38, v38), v85.val[0], v85.val[0]);
              v41 = vmlaq_f32(vmulq_f32(v39, v39), v85.val[1], v85.val[1]);
              v42 = (float32x4_t)vbicq_s8((int8x16_t)vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v79, v34), v38), v85.val[0], vsubq_f32(v78, v35)), v40), (float32x4_t)0), v80), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v81, vcvtq_f64_f32(*(float32x2_t *)v40.f32)), (int32x4_t)vcgeq_f64(v81, vcvt_hight_f64_f32(v40))));
              v43 = (float32x4_t)vbicq_s8((int8x16_t)vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v79, v36), v39), v85.val[1], vsubq_f32(v78, v37)), v41), (float32x4_t)0), v80), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v81, vcvtq_f64_f32(*(float32x2_t *)v41.f32)), (int32x4_t)vcgeq_f64(v81, vcvt_hight_f64_f32(v41))));
              v44 = vsubq_f32(v79, vmlaq_f32(v34, v38, v42));
              v45 = vmlaq_f32(v35, v85.val[0], v42);
              v46 = vmlaq_f32(v37, v85.val[1], v43);
              v85.val[0] = vsubq_f32(v79, vmlaq_f32(v36, v39, v43));
              v85.val[1] = vsubq_f32(v78, v45);
              v47 = vsubq_f32(v78, v46);
              v30 = vminnmq_f32(vmlaq_f32(vmulq_f32(v44, v44), v85.val[1], v85.val[1]), v30);
              v29 = vminnmq_f32(vmlaq_f32(vmulq_f32(v85.val[0], v85.val[0]), v47, v47), v29);
              v28 -= 8;
            }
            while (v28);
            v22 = vminnmvq_f32(vminnmq_f32(v30, v29));
            if (v84 - 1 == v25)
              goto LABEL_15;
            v23 = v25 | 1;
            v21 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
          }
          else
          {
            v22 = 3.4028e38;
            v23 = 1;
          }
          v48 = v84 - v23;
          v49 = (float32x2_t *)&v19[v23];
          do
          {
            v51 = *v49;
            v52 = vsub_f32(*v49, v21);
            v53 = vmul_f32(v52, v52);
            v54 = 0.0;
            if (vaddv_f32(v53) > 1.0e-15)
            {
              v55 = vmul_f32(vsub_f32(v82, v21), v52);
              v54 = fminf(fmaxf(vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), v55), vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v53, 1), v53)).f32[0], 0.0), 1.0);
            }
            v50 = vsub_f32(v82, vmla_n_f32(v21, v52, v54));
            v22 = fminf(vaddv_f32(vmul_f32(v50, v50)), v22);
            ++v49;
            v21 = v51;
            --v48;
          }
          while (v48);
LABEL_15:
          v24 = v14 * v22;
          if ((float)(v14 * v22) < 100.0)
            break;
          if (++v17 >= (unint64_t)*(unsigned int *)(v16 + 20))
            goto LABEL_7;
        }
        if (*v18)
        {
          v56 = 0;
          do
          {
            v57 = geo::codec::vectorTransitLineAlongLink((_QWORD *)v16, v56);
            v58 = v57;
            if (v4 == v5)
            {
LABEL_34:
              if (v5 < (float *)v6)
              {
                *(_QWORD *)v5 = v57;
                *((_QWORD *)v5 + 1) = v16;
                v5[4] = v24;
                v5 += 6;
              }
              else
              {
                v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3) + 1;
                if (v60 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((v6 - (char *)v4) >> 3) > v60)
                  v60 = 0x5555555555555556 * ((v6 - (char *)v4) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v6 - (char *)v4) >> 3) >= 0x555555555555555)
                  v61 = 0xAAAAAAAAAAAAAAALL;
                else
                  v61 = v60;
                if (v61)
                {
                  if (v61 > 0xAAAAAAAAAAAAAAALL)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v62 = (char *)operator new(24 * v61);
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[8 * (((char *)v5 - (char *)v4) >> 3)];
                *(_QWORD *)v63 = v58;
                *((_QWORD *)v63 + 1) = v16;
                *((float *)v63 + 4) = v24;
                if (v4 == v5)
                {
                  v65 = &v62[8 * (((char *)v5 - (char *)v4) >> 3)];
                }
                else
                {
                  v64 = &v62[8 * (((char *)v5 - (char *)v4) >> 3)];
                  do
                  {
                    v65 = v64 - 24;
                    v66 = *(_OWORD *)(v5 - 6);
                    *((_QWORD *)v64 - 1) = *((_QWORD *)v5 - 1);
                    *(_OWORD *)(v64 - 24) = v66;
                    v5 -= 6;
                    v64 -= 24;
                  }
                  while (v5 != v4);
                }
                v6 = &v62[24 * v61];
                v5 = (float *)(v63 + 24);
                if (v4)
                  operator delete(v4);
                v4 = (float *)v65;
              }
            }
            else
            {
              v59 = v4;
              while (*(_QWORD *)(*(_QWORD *)v59 + 40) != *(_QWORD *)(v57 + 40))
              {
                v59 += 6;
                if (v59 == v5)
                  goto LABEL_34;
              }
              v59[4] = fminf(v24, v59[4]);
            }
            ++v56;
          }
          while (v56 < *v18);
        }
LABEL_7:
        ++v13;
      }
    }
    ++a2;
  }
  while (a2 != a3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v4 != v5)
  {
    std::__introsort<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *,false>((uint64_t)v4, v5, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3)), 1, v12);
    std::vector<VKTransitLineMarker * {__strong}>::reserve((uint64_t)a1, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3));
    v67 = v4;
    do
    {
      +[VKTransitLineMarker markerWithFeature:transitLink:](VKTransitLineMarker, "markerWithFeature:transitLink:", *(_QWORD *)v67, *((_QWORD *)v67 + 1));
      v70 = objc_claimAutoreleasedReturnValue();
      v83 = (void *)v70;
      v71 = (uint64_t *)a1[1];
      if ((unint64_t)v71 < a1[2])
      {
        v68 = 0;
        v83 = 0;
        *v71 = v70;
        v69 = v71 + 1;
      }
      else
      {
        v69 = std::vector<objc_object * {__strong}>::__emplace_back_slow_path<objc_object * {__strong}>(a1, (uint64_t *)&v83);
        v68 = v83;
      }
      a1[1] = v69;

      v67 += 6;
    }
    while (v67 != v5);
  }
  if (v4)
    operator delete(v4);
}

void sub_19F80B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void *v10;

  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](a10);
  if (v10)
    operator delete(v10);
  _Unwind_Resume(a1);
}

float std::__introsort<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *,false>(uint64_t a1, float *a2, uint64_t a3, char a4, float result)
{
  float *v9;
  float *v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float *v18;
  float v19;
  float *v20;
  int *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  int v26;
  float v27;
  int v28;
  __int128 *v29;
  unint64_t v30;
  float *v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  __int128 v37;
  float v38;
  __int128 v39;
  float *v40;
  float v41;
  __int128 v42;
  float v43;
  __int128 *v44;
  unint64_t v45;
  float *v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float v51;
  __int128 v52;
  float v53;
  __int128 v54;
  float *v55;
  __int128 v56;
  float v57;
  float v58;
  int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unint64_t v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float v69;
  float *v70;
  float v71;
  unint64_t v72;
  __int128 v73;
  float v74;
  float v75;
  _OWORD *v76;
  BOOL v77;
  unint64_t v78;
  float v79;
  unint64_t v80;
  float v81;
  float *v82;
  float *v83;
  float v84;
  int v85;
  float v86;
  float v87;
  _OWORD *v88;
  float *v89;
  _OWORD *v90;
  float *v91;
  float v92;
  __int128 *v93;
  __int128 *v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  float v98;
  __int128 v99;
  float v100;
  float *v101;
  BOOL v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  int64_t v111;
  BOOL v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  float v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  __int128 v121;
  uint64_t v122;
  float *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;
  unint64_t v133;
  float v134;
  unint64_t v135;
  float *v136;
  float v137;
  __int128 v138;
  float *v139;
  float *v140;
  float *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;

float std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float *v5;
  float *v6;
  float result;
  __int128 v8;
  int *v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  __int128 v13;
  float v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a2[4];
  v5 = a1 + 4;
  v6 = a3 + 4;
  result = a3[4];
  if (v4 >= a1[4])
  {
    if (result < v4)
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      result = a2[4];
      a2[4] = a3[4];
      a3[4] = result;
      if (a2[4] < *v5)
      {
        v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v11;
        v9 = (int *)(a1 + 4);
        v12 = (int *)(a2 + 4);
LABEL_10:
        v16 = *v9;
        *v9 = *v12;
        *v12 = v16;
        result = *v6;
      }
    }
  }
  else
  {
    if (result < v4)
    {
      v8 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v8;
      v9 = (int *)(a1 + 4);
LABEL_9:
      v12 = (int *)(a3 + 4);
      goto LABEL_10;
    }
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v14 = a1[4];
    a1[4] = a2[4];
    a2[4] = v14;
    result = *v6;
    if (*v6 < v14)
    {
      v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v15;
      v9 = (int *)(a2 + 4);
      goto LABEL_9;
    }
  }
  if (a4[4] < result)
  {
    v17 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v17;
    *(float *)&v17 = a3[4];
    a3[4] = a4[4];
    *((_DWORD *)a4 + 4) = v17;
    result = a3[4];
    if (result < a2[4])
    {
      v18 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v18;
      *(float *)&v18 = a2[4];
      a2[4] = a3[4];
      *((_DWORD *)a3 + 4) = v18;
      result = a2[4];
      if (result < *v5)
      {
        v19 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v19;
        result = a1[4];
        a1[4] = a2[4];
        a2[4] = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  float *v7;
  float v8;
  float *v9;
  float v10;
  _OWORD *v11;
  _OWORD *v12;
  _DWORD *v13;
  float v14;
  __int128 v15;
  float *v16;
  float v17;
  uint64_t v18;
  _OWORD *v19;
  float *v20;
  float v21;
  float v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  float v28;
  float v29;
  __int128 v30;
  float v31;
  __int128 v32;
  float v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 16))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)(a2 - 24) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      v7 = (float *)(a1 + 16);
      v8 = *(float *)(a1 + 16);
      v9 = (float *)(a2 - 8);
      v10 = *(float *)(a2 - 8);
      v11 = (_OWORD *)(a1 + 24);
      v12 = (_OWORD *)(a2 - 24);
      v13 = (_DWORD *)(a1 + 40);
      v14 = *(float *)(a1 + 40);
      if (v14 < v8)
      {
        if (v10 >= v14)
        {
          v39 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v11;
          *v11 = v39;
          *(float *)(a1 + 16) = v14;
          *(float *)(a1 + 40) = v8;
          if (*v9 >= v8)
            return result;
          v40 = *v11;
          *v11 = *v12;
          *v12 = v40;
          v7 = (float *)(a1 + 40);
        }
        else
        {
          v15 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v15;
        }
        v13 = (_DWORD *)(a2 - 8);
        goto LABEL_25;
      }
      if (v10 < v14)
      {
        v35 = *v11;
        *v11 = *v12;
        *v12 = v35;
        LODWORD(v35) = *v13;
        *v13 = *(_DWORD *)v9;
        *(_DWORD *)v9 = v35;
        if (*(float *)v13 < *v7)
        {
          v36 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v11;
          *v11 = v36;
LABEL_25:
          v41 = *v7;
          *v7 = *(float *)v13;
          *(float *)v13 = v41;
          return result;
        }
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a2 - 24));
      return 1;
    case 5uLL:
      v24 = (__int128 *)(a1 + 24);
      v25 = (__int128 *)(a1 + 48);
      v26 = (__int128 *)(a1 + 72);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a1 + 72));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 88))
      {
        v27 = *v26;
        *v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)(a2 - 24) = v27;
        LODWORD(v27) = *(_DWORD *)(a1 + 88);
        *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v27;
        v28 = *(float *)(a1 + 88);
        v29 = *(float *)(a1 + 64);
        if (v28 < v29)
        {
          v30 = *v25;
          *v25 = *v26;
          *v26 = v30;
          *(float *)(a1 + 64) = v28;
          *(float *)(a1 + 88) = v29;
          v31 = *(float *)(a1 + 40);
          if (v28 < v31)
          {
            v32 = *v24;
            *v24 = *v25;
            *v25 = v32;
            *(float *)(a1 + 40) = v28;
            *(float *)(a1 + 64) = v31;
            v33 = *(float *)(a1 + 16);
            if (v28 < v33)
            {
              v34 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v24;
              *v24 = v34;
              *(float *)(a1 + 16) = v28;
              *(float *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v16 = (float *)(a1 + 16);
      v17 = *(float *)(a1 + 16);
      v18 = a1 + 48;
      v19 = (_OWORD *)(a1 + 24);
      v20 = (float *)(a1 + 40);
      v21 = *(float *)(a1 + 40);
      v22 = *(float *)(a1 + 64);
      if (v21 < v17)
      {
        if (v22 >= v21)
        {
          v42 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v19;
          *v19 = v42;
          *(float *)(a1 + 16) = v21;
          *(float *)(a1 + 40) = v17;
          if (v22 >= v17)
            goto LABEL_30;
          v43 = *v19;
          *v19 = *(_OWORD *)v18;
          *(_OWORD *)v18 = v43;
          v16 = (float *)(a1 + 40);
        }
        else
        {
          v23 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)v18 = v23;
        }
        v20 = (float *)(a1 + 64);
        goto LABEL_29;
      }
      if (v22 < v21)
      {
        v37 = *v19;
        *v19 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v37;
        *v20 = v22;
        *(float *)(a1 + 64) = v21;
        if (v22 < v17)
        {
          v38 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v19;
          *v19 = v38;
LABEL_29:
          *v16 = v22;
          *v20 = v17;
        }
      }
LABEL_30:
      v44 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v45 = 0;
      v46 = 0;
      while (1)
      {
        v48 = *(float *)(v44 + 16);
        if (v48 < *(float *)(v18 + 16))
        {
          v51 = *(_OWORD *)v44;
          v49 = v45;
          do
          {
            v50 = a1 + v49;
            *(_OWORD *)(v50 + 72) = *(_OWORD *)(a1 + v49 + 48);
            *(_DWORD *)(v50 + 88) = *(_DWORD *)(a1 + v49 + 64);
            if (v49 == -48)
            {
              v47 = a1;
              goto LABEL_33;
            }
            v49 -= 24;
          }
          while (v48 < *(float *)(v50 + 40));
          v47 = a1 + v49 + 72;
LABEL_33:
          *(_OWORD *)v47 = v51;
          *(float *)(v47 + 16) = v48;
          if (++v46 == 8)
            return v44 + 24 == a2;
        }
        v18 = v44;
        v45 += 24;
        v44 += 24;
        if (v44 == a2)
          return 1;
      }
  }
}

void sub_19F80CC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F80D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19F80DB9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F80E538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void std::vector<geo::PolylineCoordinate>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (!a2)
    {
LABEL_19:
      a1[1] = v6;
      return;
    }
    v14 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v14 >= 7)
    {
      v15 = v14 + 1;
      v16 = v5 + 32;
      v17 = v15 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *(v16 - 2) = xmmword_19FFB4B90;
        *(v16 - 1) = xmmword_19FFB4B90;
        *v16 = xmmword_19FFB4B90;
        v16[1] = xmmword_19FFB4B90;
        v16 += 4;
        v17 -= 8;
      }
      while (v17);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_18;
      v6 = &v5[8 * (v15 & 0x3FFFFFFFFFFFFFF8)];
    }
    do
    {
      *(_QWORD *)v6 = 0xBF80000000000000;
      v6 += 8;
    }
    while (v6 != &v5[8 * a2]);
LABEL_18:
    v6 = &v5[8 * a2];
    goto LABEL_19;
  }
  v7 = *a1;
  v8 = v5 - *a1;
  v9 = v8 >> 3;
  v10 = (v8 >> 3) + a2;
  if (v10 >> 61)
    abort();
  v11 = v4 - v7;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v18 = &v13[8 * v9];
  v19 = &v18[8 * a2];
  v20 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v21 = v18;
  if (v20 >= 7)
  {
    v22 = (v20 + 1) & 0x3FFFFFFFFFFFFFF8;
    v23 = v18 + 32;
    v24 = v22;
    do
    {
      *(v23 - 2) = xmmword_19FFB4B90;
      *(v23 - 1) = xmmword_19FFB4B90;
      *v23 = xmmword_19FFB4B90;
      v23[1] = xmmword_19FFB4B90;
      v23 += 4;
      v24 -= 8;
    }
    while (v24);
    if (v20 + 1 == v22)
      goto LABEL_27;
    v21 = &v18[8 * v22];
  }
  do
  {
    *(_QWORD *)v21 = 0xBF80000000000000;
    v21 += 8;
  }
  while (v21 != v19);
LABEL_27:
  v25 = &v13[8 * v12];
  if (v5 != v7)
  {
    v26 = v5 - v7 - 8;
    if (v26 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v5 - &v13[v8]) < 0x20)
      goto LABEL_41;
    v27 = (v26 >> 3) + 1;
    v6 = &v5[-8 * (v27 & 0x3FFFFFFFFFFFFFFCLL)];
    v28 = &v13[8 * v9 - 16];
    v29 = (__int128 *)(v5 - 16);
    v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *v29;
      *((_OWORD *)v28 - 1) = *(v29 - 1);
      *(_OWORD *)v28 = v31;
      v28 -= 32;
      v29 -= 2;
      v30 -= 4;
    }
    while (v30);
    v18 -= 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v32 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v18 - 1) = v32;
        v18 -= 8;
      }
      while (v6 != v7);
    }
  }
  v33 = *a1;
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v25;
  if (v33)
    operator delete(v33);
}

void sub_19F80EA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void md::MuninRoadLabel::~MuninRoadLabel(md::MuninRoadLabel *this)
{
  md::MuninRoadLabel::~MuninRoadLabel(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  *(_QWORD *)this = &off_1E428F868;
  *((_QWORD *)this + 5) = &unk_1E428F8A8;
  if (*((_BYTE *)this + 355))
    *(_BYTE *)(*((_QWORD *)this + 41) + 285) = 1;
  do
    v2 = __ldaxr((unsigned int *)&md::MuninRoadLabel::_totalLabels);
  while (__stlxr(v2 - 1, (unsigned int *)&md::MuninRoadLabel::_totalLabels));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 71);
  if (!v3)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
    if (!v6)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
    if (!v6)
      goto LABEL_14;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  if (!v9)
    goto LABEL_18;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
    if (!v12)
      goto LABEL_24;
  }
  else
  {
LABEL_18:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
    if (!v12)
      goto LABEL_24;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_24:
  v15 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v16)
    goto LABEL_30;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v19)
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v19)
      goto LABEL_36;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_36:
  v22 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)this = off_1E42AF850;
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

uint64_t md::MuninRoadLabel::isCollidable(md::MuninRoadLabel *this)
{
  return *((unsigned __int8 *)this + 299);
}

uint64_t md::MuninRoadLabel::collisionBounds(md::MuninRoadLabel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 248))(*((_QWORD *)this + 9));
}

uint64_t md::MuninRoadLabel::collidesWithObject(md::MuninRoadLabel *this, const md::CollisionObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t, const md::CollisionObject *))(*(_QWORD *)result + 464))(result, a2);
  return result;
}

uint64_t md::MuninRoadLabel::collidesWithItem(md::MuninRoadLabel *this, const md::LabelCollidableItem *a2)
{
  return (*(uint64_t (**)(_QWORD, const md::LabelCollidableItem *, _QWORD))(**((_QWORD **)this + 9) + 456))(*((_QWORD *)this + 9), a2, 0);
}

void `non-virtual thunk to'md::MuninRoadLabel::~MuninRoadLabel(md::MuninRoadLabel *this)
{
  md::MuninRoadLabel::~MuninRoadLabel((md::MuninRoadLabel *)((char *)this - 40));
}

{
  md::MuninRoadLabel::~MuninRoadLabel((md::MuninRoadLabel *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t `non-virtual thunk to'md::MuninRoadLabel::collisionBounds(md::MuninRoadLabel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
}

uint64_t `non-virtual thunk to'md::MuninRoadLabel::collidesWithItem(md::MuninRoadLabel *this, const md::LabelCollidableItem *a2)
{
  return (*(uint64_t (**)(_QWORD, const md::LabelCollidableItem *, _QWORD))(**((_QWORD **)this + 4) + 456))(*((_QWORD *)this + 4), a2, 0);
}

uint64_t `non-virtual thunk to'md::MuninRoadLabel::collidesWithObject(md::MuninRoadLabel *this, const md::CollisionObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const md::CollisionObject *))(*(_QWORD *)result + 464))(result, a2);
  return result;
}

void md::MuninRoadLabelCollisionItem::~MuninRoadLabelCollisionItem(md::MuninRoadLabelCollisionItem *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninRoadLabelCollisionItem::collidesWithObject(md::MuninRoadLabelCollisionItem *this, const md::CollisionObject *a2)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 7) + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, const md::CollisionObject *))(*(_QWORD *)result + 464))(result, a2);
  return result;
}

uint64_t md::MuninRoadLabelCollisionItem::isHighlighted(md::MuninRoadLabelCollisionItem *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 7) + 298));
  return v1 & 1;
}

uint64_t md::MuninRoadLabelCollisionItem::isCollidable(md::MuninRoadLabelCollisionItem *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 7) + 299);
}

uint64_t md::MuninRoadLabelCollisionItem::placementCandidate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(v1 + 72);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 440))(v2);
  return v1 + 40;
}

uint64_t md::LabelCollisionItemBase::nextPlacementCandidate()
{
  return 0;
}

uint64_t md::MuninRoadLabelCollisionItem::setCollisionResult(uint64_t a1, unsigned __int8 *a2)
{
  *(_BYTE *)(a1 + 64) = a2[1];
  return md::MuninRoadLabel::setCollisionResult(*(_QWORD *)(a1 + 56), a2);
}

BOOL md::MuninRoadLabelCollisionItem::outranksItem(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 52) <= *(unsigned __int8 *)(a2 + 52);
}

uint64_t md::MuninRoadLabelCollisionItem::dedupingGroup(md::MuninRoadLabelCollisionItem *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 24);
}

uint64_t md::MuninRoadLabelCollisionItem::dedupingGroupSubID(md::MuninRoadLabelCollisionItem *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 7) + 36);
}

uint64_t md::LabelCollisionItemBase::reserveSpaceItem(md::LabelCollisionItemBase *this)
{
  return 0;
}

uint64_t md::LabelCollisionItemBase::isReserveSpaceItem(md::LabelCollisionItemBase *this)
{
  return 0;
}

uint64_t md::MuninRoadLabelCollisionItem::didCollide(md::MuninRoadLabelCollisionItem *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t md::MuninRoadLabel::setCollisionResult(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  uint64_t result;
  unsigned __int8 *v6;
  int v7;
  char v8;
  int v9;
  unsigned __int8 v10;

  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 1);
  v3 = a2[1];
  v4 = v3 ^ 1;
  result = *(_QWORD *)(a1 + 24);
  if (!result)
    goto LABEL_5;
  if (a2[1])
  {
    if (*a2)
      *(_BYTE *)(a1 + 494) = 21;
LABEL_5:
    if (*(unsigned __int8 *)(a1 + 300) == v4)
      goto LABEL_23;
    v6 = (unsigned __int8 *)(a1 + 300);
    *(_BYTE *)(a1 + 300) = v4;
    if (v3)
    {
      v7 = *a2;
      if (!*a2)
        *(_BYTE *)(a1 + 301) = 1;
      if (*(_BYTE *)(a1 + 493) != 2)
        goto LABEL_22;
      if (v7)
        v8 = 21;
      else
        v8 = 20;
      *(_BYTE *)(a1 + 493) = 1;
      *(_BYTE *)(a1 + 494) = v8;
      goto LABEL_19;
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 299))
    {
LABEL_22:
      v4 = *v6;
LABEL_23:
      if (!v4)
        return result;
      goto LABEL_24;
    }
    v9 = byte_1A007EA28[*(char *)(a1 + 493) + 12];
    if (v9 == 255)
    {
      if (*(_BYTE *)(a1 + 493) == 2)
      {
LABEL_20:
        v10 = atomic_load((unsigned __int8 *)(a1 + 353));
        if ((v10 & 1) == 0)
          *(_BYTE *)(a1 + 356) = 2 * (*(_BYTE *)(a1 + 493) == 2);
        goto LABEL_22;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 493) = v9;
      *(_BYTE *)(a1 + 494) = 37;
      if (v9 == 2)
        goto LABEL_20;
    }
LABEL_19:
    *(_BYTE *)(a1 + 299) = 0;
    goto LABEL_20;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, a1, *(unsigned __int8 *)(a1 + 36));
  if (*(unsigned __int8 *)(a1 + 300) != v4)
  {
    v6 = (unsigned __int8 *)(a1 + 300);
    *(_BYTE *)(a1 + 300) = v4;
    goto LABEL_16;
  }
LABEL_24:
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 448))(result, 1);
  return result;
}

int32x2_t *md::MuninRoadLabel::setActive(int32x2_t *this, int a2)
{
  int32x2_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  if (this[38].u8[0] != a2)
  {
    v2 = this;
    this[38].i8[0] = a2;
    if ((a2 & 1) == 0)
    {
      v3 = (_QWORD *)this[3];
      if (v3)
      {
        v4 = (_QWORD *)v3[2];
        v5 = (_QWORD *)v3[1];
        if (v5 != v4)
        {
          while ((int32x2_t *)*v5 != this)
          {
            if (++v5 == v4)
            {
              v5 = (_QWORD *)v3[2];
              break;
            }
          }
        }
        if (v5 != v4)
        {
          v6 = v5 + 1;
          if (v5 + 1 != v4)
          {
            do
            {
              if ((int32x2_t *)*v6 != this)
                *v5++ = *v6;
              ++v6;
            }
            while (v6 != v4);
            v4 = (_QWORD *)v3[2];
          }
        }
        if (v5 != v4)
          v3[2] = v5;
        this = (int32x2_t *)(*(uint64_t (**)(_QWORD *, int32x2_t *))(*v3 + 48))(v3, this);
        v2[3] = 0;
      }
      v2[43] = vdup_n_s32(0xC2C80000);
      if (v2[44].i8[3])
      {
        *(_BYTE *)(*(_QWORD *)&v2[41] + 285) = 1;
        v2[44].i8[3] = 0;
      }
    }
  }
  return this;
}

void md::MuninRoadLabel::updateStateMachineForDisplay(uint64_t a1, int a2, char a3, uint64_t a4, __n128 a5)
{
  char v6;
  char v7;
  int v8;
  float (**v9)(__n128);
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;

  if (a4)
  {
    v6 = ((0x27u >> (a2 - 3)) & 1) != 0 ? 0x80808050508uLL >> (8 * (a2 - 3)) : a2;
    v7 = (a2 - 3) <= 5 ? v6 : a2;
    if (!*(_BYTE *)(a4 + 3382))
      LOBYTE(a2) = v7;
  }
  v8 = byte_1A007EA46[4 * a2 + *(char *)(a1 + 538)];
  if (v8 == 255)
  {
    v8 = *(unsigned __int8 *)(a1 + 538);
    if (*(_BYTE *)(a1 + 538))
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(a1 + 264) = 0;
    v9 = (float (**)(__n128))(a1 + 288);
    a5.n128_u32[0] = 0;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 538) = v8;
  *(_BYTE *)(a1 + 539) = a3;
  if (!v8)
    goto LABEL_15;
LABEL_12:
  if (v8 != 3)
    goto LABEL_17;
  *(_DWORD *)(a1 + 264) = 1065353216;
  v9 = (float (**)(__n128))(a1 + 280);
  a5.n128_u32[0] = 1.0;
LABEL_16:
  *(float *)(a1 + 268) = (*v9)(a5);
LABEL_17:
  v10 = *(unsigned __int8 *)(a1 + 538);
  if (v10 == 1)
  {
    v14 = *(_QWORD *)(a1 + 560);
    if (!v14 || (v15 = *(float *)(v14 + 8), v15 == 0.0))
      v15 = 0.4;
    *(_QWORD *)(a1 + 280) = EaseQuadOut;
    *(float *)(a1 + 272) = fmaxf(v15, 0.000001);
    v13 = EaseQuadOut(*(float *)(a1 + 264));
  }
  else
  {
    if (v10 != 2)
      return;
    v11 = *(_QWORD *)(a1 + 560);
    if (!v11 || (v12 = *(float *)(v11 + 12), v12 == 0.0))
      v12 = 0.4;
    *(_QWORD *)(a1 + 288) = EaseQuadIn;
    *(float *)(a1 + 276) = fmaxf(v12, 0.000001);
    v13 = EaseQuadIn(*(float *)(a1 + 264));
  }
  *(float *)(a1 + 268) = v13;
}

void std::__shared_ptr_emplace<md::OcclusionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::OcclusionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::OcclusionQuery>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[3];
  v3 = (_QWORD *)a1[4];
  if (v2 != v3)
  {
    do
    {
      v4 = (void *)v2[10];
      if (v4 != (void *)v2[12])
        free(v4);
      v5 = (void *)v2[1];
      if (v5 != (void *)v2[3])
        free(v5);
      v2 += 31;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[3];
  }
  if (v2 != (_QWORD *)a1[5])
    free(v2);
}

uint64_t md::MuninRoadLabel::debugString(md::MuninRoadLabel *this, md::LabelManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  const char *v23;
  size_t v24;
  void *p_p;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  const void **v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  md::MuninRoadLabel *v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *__p;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  _QWORD v62[3];
  uint64_t v63;
  unint64_t v64;
  void *v65[2];
  __int128 v66;
  int v67;
  uint64_t v68[20];

  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v68[0] = MEMORY[0x1E0DE4FE0] + 64;
  v60 = v11;
  *(_QWORD *)((char *)&v61[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v61[-1] + *(_QWORD *)(v60 - 24));
  std::ios_base::init(v13, v61);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v60 = v8 + 24;
  v68[0] = v9;
  std::streambuf::basic_streambuf();
  v61[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  v67 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"RoadLabel:\n", 11);
  if (*((float *)a2 + 120) != 0.0 || *((float *)a2 + 121) != 0.0)
  {
    v14 = v60;
    *(_DWORD *)((char *)v61 + *(_QWORD *)(v60 - 24)) = *(_DWORD *)((_BYTE *)v61 + *(_QWORD *)(v60 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v61[1] + *(_QWORD *)(v14 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  Offset: elev=", 15);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" nrml=", 6);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  }
  *(_QWORD *)((char *)&v61[1] + *(_QWORD *)(v60 - 24)) = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  Zoom: Cur=", 12);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" Min=", 5);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" Max=", 5);
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v61[1] + *(_QWORD *)(v60 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)", Dist=", 7);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  if (*((_BYTE *)a2 + 540))
  {
    *(_QWORD *)((char *)&v61[1] + *(_QWORD *)(v60 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  PerspScale: Mode=", 19);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" Value=", 7);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  Staging: State=", 17);
  v22 = *((unsigned __int8 *)a2 + 493);
  if (v22 > 2)
    v23 = "<NONE>";
  else
    v23 = off_1E42F4048[v22];
  v24 = strlen(v23);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)" Outcome=", 9);
  md::stringFromLabelOutcome((uint64_t)&__p, *((unsigned __int8 *)a2 + 494));
  if (v58 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v58 >= 0)
    v26 = HIBYTE(v58);
  else
    v26 = v57;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)p_p, v26);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
  if (SHIBYTE(v58) < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  Display: State=", 17);
  v27 = *((unsigned __int8 *)a2 + 538);
  if (v27 > 3)
    v28 = "<NONE>";
  else
    v28 = off_1E42F4060[v27];
  v29 = strlen(v28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v28, v29);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)" Outcome=", 9);
  md::stringFromLabelOutcome((uint64_t)&__p, *((unsigned __int8 *)a2 + 539));
  if (v58 >= 0)
    v30 = &__p;
  else
    v30 = __p;
  if (v58 >= 0)
    v31 = HIBYTE(v58);
  else
    v31 = v57;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v30, v31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)" isDisplayLabel=", 16);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" isActiveForDisplay=", 20);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n", 1);
  if (SHIBYTE(v58) < 0)
  {
    operator delete(__p);
    v34 = *((_QWORD *)a2 + 10);
    if (!v34)
    {
LABEL_35:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"No Style\n", 9);
      goto LABEL_36;
    }
  }
  else
  {
    v34 = *((_QWORD *)a2 + 10);
    if (!v34)
      goto LABEL_35;
  }
  if (!*(_BYTE *)(v34 + 125) || *(unsigned __int8 *)(v34 + 136) == 255)
    goto LABEL_35;
  v35 = *(_QWORD *)(v34 + 280);
  if (v35)
  {
    if (vabds_f32(*(float *)(v35 + 8), *(float *)(v34 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v34, v35, 0);
      v35 = *(_QWORD *)(v34 + 280);
    }
  }
  else
  {
    v35 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v34, 0);
    *(_QWORD *)(v34 + 280) = v35;
  }
  v50 = *(_QWORD *)v35;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  Style: ", 9);
  v51 = *(char *)(v50 + 95);
  if (v51 >= 0)
    v52 = v50 + 72;
  else
    v52 = *(_QWORD *)(v50 + 72);
  if (v51 >= 0)
    v53 = *(unsigned __int8 *)(v50 + 95);
  else
    v53 = *(_QWORD *)(v50 + 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, v52, v53);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/", 1);
  *(_QWORD *)((char *)&v61[1] + *(_QWORD *)(v60 - 24)) = 2;
  std::ostream::operator<<();
  if (*(float *)(v50 + 96) != 0.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  if (*(_BYTE *)(v50 + 109))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/up", 3);
  if (*(_BYTE *)(v50 + 110))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/down", 5);
  if (*(_BYTE *)(v50 + 111))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/title", 6);
  if (*(_BYTE *)(v50 + 108))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/ri", 3);
  if (*(_BYTE *)(v50 + 112))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"/sc", 3);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"    font:", 9);
  md::FontOptions::debugString(&__p, (__int128 *)(v50 + 72), *(grl::FontManager **)objc_msgSend(*(id *)(a3 + 96), "grlFontManager"));
  if (v58 >= 0)
    v54 = &__p;
  else
    v54 = __p;
  if (v58 >= 0)
    v55 = HIBYTE(v58);
  else
    v55 = v57;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v54, v55);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
  if (SHIBYTE(v58) < 0)
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v59 + 40))(v59, __p, v58 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_36:
  v36 = *((_QWORD *)a2 + 40);
  if (v36
    && *(_BYTE *)(v36 + 52) == 4
    && ((v37 = *(_QWORD *)(v36 + 56),
         std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"  Collided with '", 17), md::LabelFeature::debugName((md::LabelFeature *)&__p, *(_QWORD **)(v37 + 8)), v58 >= 0)? (v38 = &__p): (v38 = __p), v58 >= 0 ? (v39 = HIBYTE(v58)) : (v39 = v57), std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v38, v39), std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"'\n", 2), SHIBYTE(v58) < 0))
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v59 + 40))(v59, __p, v58 & 0x7FFFFFFFFFFFFFFFLL);
    if (!*((_QWORD *)a2 + 8))
      goto LABEL_54;
  }
  else if (!*((_QWORD *)a2 + 8))
  {
    goto LABEL_54;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)a2 + 8) + 792))(&__p, *((_QWORD *)a2 + 8), a4);
  if (v58 >= 0)
    v40 = &__p;
  else
    v40 = __p;
  if (v58 >= 0)
    v41 = HIBYTE(v58);
  else
    v41 = v57;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v40, v41);
  if (SHIBYTE(v58) < 0)
    operator delete(__p);
LABEL_54:
  if ((v67 & 0x10) != 0)
  {
    v43 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) < v64)
    {
      *((_QWORD *)&v66 + 1) = v64;
      v43 = v64;
    }
    v44 = (const void **)&v63;
  }
  else
  {
    if ((v67 & 8) == 0)
    {
      v42 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_69;
    }
    v44 = (const void **)v62;
    v43 = v62[2];
  }
  v45 = *v44;
  v42 = v43 - (_QWORD)*v44;
  if (v42 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v42 >= 0x17)
  {
    v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v46 = v42 | 7;
    v47 = v46 + 1;
    v48 = (md::MuninRoadLabel *)operator new(v46 + 1);
    *((_QWORD *)this + 1) = v42;
    *((_QWORD *)this + 2) = v47 | 0x8000000000000000;
    *(_QWORD *)this = v48;
    this = v48;
    goto LABEL_68;
  }
  *((_BYTE *)this + 23) = v42;
  if (v42)
LABEL_68:
    memmove(this, v45, v42);
LABEL_69:
  *((_BYTE *)this + v42) = 0;
  v60 = *v10;
  *(_QWORD *)((char *)&v61[-1] + *(_QWORD *)(v60 - 24)) = v10[3];
  v61[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v66) < 0)
    operator delete(v65[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v68);
}

void sub_19F80FC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t md::MuninRoadLabel::debugDraw(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  float *v7;
  int v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;

  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    v5 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
    *(_DWORD *)(a2 + 8) = *v5;
    *(_DWORD *)(a2 + 12) = v5[1];
    v12 = *(_QWORD *)(a2 + 8);
    v6 = v12;
    v7 = (float *)(v5 + 2);
    *(_DWORD *)(a2 + 8) = v5[2];
    *(_DWORD *)(a2 + 12) = v5[3];
    v8 = v5[3];
    v10 = *(float *)&v6;
    v11 = v8;
    ggl::DebugConsole::drawLine(a2, &v10);
    ggl::DebugConsole::drawLine(a2, (float *)&v12);
    v10 = *v7;
    v11 = HIDWORD(v6);
    ggl::DebugConsole::drawLine(a2, &v10);
    v9 = ggl::DebugConsole::drawLine(a2, v7);
    return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 72) + 768))(*(_QWORD *)(a1 + 72), a2, v9);
  }
  return result;
}

void md::ARSceneLogic::~ARSceneLogic(md::ARSceneLogic *this)
{
  md::ARSceneLogic::~ARSceneLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E428CA68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)*((_QWORD *)this + 61);
  if (v5 != *((void **)this + 63))
    free(v5);
  v6 = *((_QWORD *)this + 58);
  if (v6)
  {
    v7 = *((_QWORD *)this + 59);
    v8 = (void *)*((_QWORD *)this + 58);
    if (v7 != v6)
    {
      do
      {
        if (*(_QWORD *)(v7 - 8))
        {
          v9 = *(_QWORD *)(v7 - 24);
          v10 = *(uint64_t **)(v7 - 16);
          v11 = *v10;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
          **(_QWORD **)(v9 + 8) = v11;
          *(_QWORD *)(v7 - 8) = 0;
          if (v10 != (uint64_t *)(v7 - 24))
          {
            do
            {
              v13 = (uint64_t *)v10[1];
              v12 = v10[2];
              v10[2] = 0;
              if (v12)
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
              operator delete(v10);
              v10 = v13;
            }
            while (v13 != (uint64_t *)(v7 - 24));
          }
        }
        v7 -= 32;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 58);
    }
    *((_QWORD *)this + 59) = v6;
    operator delete(v8);
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)this + 384);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 304);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)this + 224);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 144);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

double md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _OWORD *v5;
  double result;
  __int128 v7;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = (_OWORD *)operator new();
  result = *(double *)&v7;
  *v5 = v7;
  v4[2] = "md::ARSceneContext]";
  v4[3] = 18;
  v4[4] = v5;
  *v4 = &off_1E42B0C08;
  v4[1] = 0x29BDA47DB65B52C8;
  *a2 = v4;
  return result;
}

void sub_19F80FEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x29BDA47DB65B52C8 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x29BDA47DB65B52C8 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x29BDA47DB65B52C8 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x29BDA47DB65B52C8 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x29BDA47DB65B52C8 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v7 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x1AF456233693CD46)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

void md::ARSceneLogic::allocateContext(md::ARSceneLogic *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *((_QWORD *)this + 67);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a2 = v2;
    a2[1] = v3;
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *a2 = v2;
    a2[1] = 0;
  }
}

uint64_t md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARSceneLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  double v16;
  long double v17;
  long double v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  __int128 v23;
  int v24;
  signed int v25;
  int v26;
  unsigned int v27;
  signed int v28;
  BOOL v29;
  void **v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  void *v42;
  _QWORD *v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  void **v57;
  double v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  int v68;
  double v69;
  int v70;
  double v71;
  double v72;
  double v73;
  double v74;
  BOOL v75;
  double v76;
  double v77;
  BOOL v78;
  void **v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  char *v84;
  void **v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint8x8_t v94;
  uint64_t **v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  size_t prime;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t *j;
  _QWORD *v117;
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t k;
  uint64_t **m;
  unsigned __int16 *v128;
  unsigned __int16 *v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  char v136;
  char v137;
  uint64_t *v138;
  uint64_t n;
  uint64_t **ii;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  unsigned int v143;
  unint64_t v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  unsigned __int16 *v149;
  unsigned int v150;
  unsigned __int16 *v151;
  unsigned __int16 *v152;
  unsigned int v153;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  unsigned __int16 *v161;
  _QWORD *v162;
  void *v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  signed int v167;
  void **v168;
  void **v169;
  int v170;
  signed int v171;
  unint64_t v172;
  _BOOL4 v174;
  _BOOL4 v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t jj;
  uint64_t **kk;
  unsigned __int16 *v186;
  unsigned __int16 *v187;
  unsigned __int16 *v188;
  unsigned __int16 *mm;
  _BYTE *v190;
  void *v191;
  _BYTE *v192;
  void *v193;
  _QWORD *v194;
  _QWORD *v195;
  void *v196;
  md::LayoutContext *v198;
  unsigned __int8 v199;
  uint64_t *v200;
  unsigned int v201;
  signed int v202;
  __int128 v203;
  __int128 v204;
  void **v205;
  int v206;
  void *v207[2];
  void *v208[2];
  float v209;
  void *__p[2];
  void *v211[2];
  void *v212[2];
  int v213;
  __int128 v214;
  char v215;
  int v216;
  uint64_t v217;
  __int16 v218;
  uint64_t v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unsigned __int16 *v222;
  unsigned __int16 *v223;
  uint64_t v224;

  v6 = *a3;
  md::SceneStateManager::clear(*(md::SceneStateManager **)(a1 + 536));
  v7 = *(double *)(a1 + 320);
  v8 = *(double *)(a1 + 160);
  v9 = *(_DWORD *)(a1 + 400);
  v10 = *(unsigned __int8 *)(a1 + 240);
  v11 = *(double *)(v6 + 8);
  v12 = *(double *)(v6 + 16);
  v13 = v11 * 0.5;
  v14 = tan(v11 * 0.5 + 0.785398163);
  v15 = v12 * 0.159154943 + 0.5;
  v16 = log(v14) * 0.159154943 + 0.5;
  v17 = cos(v11 + v11) * -559.82 + 111132.92;
  v18 = v17 + cos(v11 * 4.0) * 1.175;
  v19 = v18 + cos(v11 * 6.0) * -0.0023;
  v20 = tan(v11 * 0.5 + 0.78103484);
  v21 = log(v20);
  v22 = tan(v13 + 0.789761487);
  *(double *)&v23 = fabs((log(v22) - v21) * 0.159154943) / v19;
  v24 = 1 << v10;
  v25 = vcvtmd_s64_f64((v15 - *(double *)&v23 * v8) * (double)(1 << v10));
  v26 = v24 + ~vcvtmd_s64_f64((*(double *)&v23 * v8 + v16) * (double)v24);
  v27 = vcvtmd_s64_f64((v16 - *(double *)&v23 * v8) * (double)(1 << v10));
  v28 = vcvtmd_s64_f64((*(double *)&v23 * v8 + v15) * (double)(1 << v10));
  *(_OWORD *)v207 = 0u;
  *(_OWORD *)v208 = 0u;
  v209 = 1.0;
  *(_OWORD *)v211 = 0u;
  *(_OWORD *)v212 = 0u;
  *(_OWORD *)__p = 0u;
  v29 = v26 <= (int)((1 << v10) + ~v27) && v25 <= v28;
  v200 = (uint64_t *)a1;
  v198 = a2;
  if (!v29)
  {
    v205 = 0;
    v30 = 0;
    goto LABEL_6;
  }
  v199 = v9;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = *(double *)&v23 * v7;
  v201 = v24 - v27;
  v59 = v28 + 1;
  v205 = 0;
  v202 = v25;
  while (1)
  {
    if (v205 == v57)
      v61 = 0;
    else
      v61 = 170 * (v205 - v57) - 1;
    v62 = (unint64_t)&v55[v56];
    if ((char *)v61 == &v55[v56])
    {
      std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)__p);
      v56 = (unint64_t)v212[0];
      v55 = (char *)v212[1];
      v57 = (void **)__p[1];
      v205 = (void **)v211[0];
      v62 = (unint64_t)v212[0] + (unint64_t)v212[1];
    }
    v60 = (unint64_t)v57[v62 / 0xAA] + 24 * (v62 % 0xAA);
    *(_BYTE *)v60 = -1;
    *(_BYTE *)(v60 + 1) = v10;
    *(_DWORD *)(v60 + 4) = v26;
    *(_DWORD *)(v60 + 8) = v25;
    v212[1] = ++v55;
    if (v59 == ++v25)
    {
      ++v26;
      v25 = v202;
      if (v26 == v201)
        break;
    }
  }
  if (v55)
  {
    v30 = v57;
    while (1)
    {
      v63 = (unsigned __int8 *)v30[v56 / 0xAA] + 24 * (v56 % 0xAA);
      v64 = v63[1];
      v65 = *v63;
      *(_QWORD *)&v23 = *(_QWORD *)(v63 + 4);
      v203 = v23;
      --v55;
      v66 = v56 + 1;
      v212[0] = (void *)(v56 + 1);
      v212[1] = v55;
      if (v56 + 1 >= 0x154)
      {
        v67 = *v30++;
        operator delete(v67);
        v66 = v56 - 169;
        __p[1] = v30;
        v212[0] = (void *)(v56 - 169);
      }
      if (v64 >= v199)
      {
        *((_QWORD *)&v23 + 1) = *((_QWORD *)&v203 + 1);
        v70 = v203;
        v68 = DWORD1(v203);
      }
      else
      {
        v68 = DWORD1(v203);
        v69 = 1.0 / (double)(1 << v64);
        v70 = v203;
        v71 = v69 * (double)SDWORD1(v203);
        v72 = v69 * (double)((1 << v64) + ~(_DWORD)v203);
        v73 = v71 + v69;
        v74 = v72 + v69;
        v75 = v73 < v71 || v74 < v72;
        if (!v75 && v58 != 0.0)
        {
          v76 = fmax(v15 - v73, v71 - v15);
          v77 = fmax(v16 - v74, v72 - v16);
          v78 = v76 < v58 && v77 < v58;
          if (v78 && (v76 <= 0.0 || v77 <= 0.0 || v76 * v76 + v77 * v77 < v58 * v58))
          {
            v79 = v205;
            if (v205 == v30)
              v80 = 0;
            else
              v80 = 170 * (v205 - v30) - 1;
            v81 = (unint64_t)&v55[v66];
            if ((char *)v80 == &v55[v66])
            {
              std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)__p);
              v66 = (unint64_t)v212[0];
              v55 = (char *)v212[1];
              v30 = (void **)__p[1];
              v79 = (void **)v211[0];
              v81 = (unint64_t)v212[0] + (unint64_t)v212[1];
            }
            v10 = (v64 + 1);
            v82 = v203;
            *(int32x2_t *)&v82 = vadd_s32(*(int32x2_t *)&v82, *(int32x2_t *)&v82);
            v83 = (unint64_t)v30[v81 / 0xAA] + 24 * (v81 % 0xAA);
            *(_BYTE *)v83 = v65;
            *(_BYTE *)(v83 + 1) = v64 + 1;
            v204 = v82;
            *(_QWORD *)(v83 + 4) = v82;
            v84 = v55 + 1;
            v212[1] = v55 + 1;
            v85 = v79;
            v86 = &v55[v66 + 1];
            if ((char *)(170 * (v79 - v30) - 1) == v86)
            {
              std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)__p);
              v66 = (unint64_t)v212[0];
              v84 = (char *)v212[1];
              v30 = (void **)__p[1];
              v85 = (void **)v211[0];
              v86 = (char *)v212[0] + (unint64_t)v212[1];
            }
            v87 = (unint64_t)v30[(unint64_t)v86 / 0xAA] + 24 * ((unint64_t)v86 % 0xAA);
            *(_BYTE *)v87 = v65;
            *(_BYTE *)(v87 + 1) = v64 + 1;
            *(_DWORD *)(v87 + 4) = v204;
            *(_DWORD *)(v87 + 8) = DWORD1(v204) | 1;
            v88 = v84 + 1;
            v212[1] = v88;
            v89 = (unint64_t)&v88[v66];
            if ((char *)(170 * (v85 - v30) - 1) == &v88[v66])
            {
              std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)__p);
              v66 = (unint64_t)v212[0];
              v88 = (char *)v212[1];
              v30 = (void **)__p[1];
              v85 = (void **)v211[0];
              v89 = (unint64_t)v212[0] + (unint64_t)v212[1];
            }
            v110 = (unint64_t)v30[v89 / 0xAA] + 24 * (v89 % 0xAA);
            *(_BYTE *)v110 = v65;
            *(_BYTE *)(v110 + 1) = v64 + 1;
            *(_DWORD *)(v110 + 4) = v204 | 1;
            *(_DWORD *)(v110 + 8) = DWORD1(v204);
            v111 = v88 + 1;
            v212[1] = v111;
            v205 = v85;
            v112 = (unint64_t)&v111[v66];
            if ((char *)(170 * (v85 - v30) - 1) == &v111[v66])
            {
              std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)__p);
              v66 = (unint64_t)v212[0];
              v111 = (char *)v212[1];
              v30 = (void **)__p[1];
              v205 = (void **)v211[0];
              v112 = (unint64_t)v212[0] + (unint64_t)v212[1];
            }
            *((_QWORD *)&v23 + 1) = *((_QWORD *)&v204 + 1);
            v113 = (unint64_t)v30[v112 / 0xAA] + 24 * (v112 % 0xAA);
            *(_BYTE *)v113 = v65;
            *(_BYTE *)(v113 + 1) = v64 + 1;
            *(_QWORD *)(v113 + 4) = v204 | 0x100000001;
            v55 = v111 + 1;
            v212[1] = v111 + 1;
            goto LABEL_59;
          }
        }
      }
      v90 = (v64
           - 0x61C8864680B583EBLL
           + ((v65 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v65 - 0x61C8864680B583EBLL) >> 2)) ^ (v65 - 0x61C8864680B583EBLL);
      v91 = (v70 - 0x61C8864680B583EBLL + (v90 << 6) + (v90 >> 2)) ^ v90;
      v92 = (v68 - 0x61C8864680B583EBLL + (v91 << 6) + (v91 >> 2)) ^ v91;
      v93 = (unint64_t)v207[1];
      if (v207[1])
      {
        v94 = (uint8x8_t)vcnt_s8((int8x8_t)v207[1]);
        v94.i16[0] = vaddlv_u8(v94);
        if (v94.u32[0] > 1uLL)
        {
          v10 = (v68 - 0x61C8864680B583EBLL + (v91 << 6) + (v91 >> 2)) ^ v91;
          if ((void *)v92 >= v207[1])
            v10 = v92 % (unint64_t)v207[1];
        }
        else
        {
          v10 = v92 & ((unint64_t)v207[1] - 1);
        }
        v95 = (uint64_t **)*((_QWORD *)v207[0] + v10);
        if (v95)
        {
          v96 = *v95;
          if (v96)
          {
            if (v94.u32[0] < 2uLL)
            {
              while (1)
              {
                v98 = v96[1];
                if (v98 == v92)
                {
                  if (*((unsigned __int8 *)v96 + 16) == (_DWORD)v65
                    && *((unsigned __int8 *)v96 + 17) == (_DWORD)v64
                    && *((_DWORD *)v96 + 5) == v70
                    && *((_DWORD *)v96 + 6) == v68)
                  {
                    goto LABEL_59;
                  }
                }
                else if ((v98 & ((uint64_t)v207[1] - 1)) != v10)
                {
                  goto LABEL_113;
                }
                v96 = (uint64_t *)*v96;
                if (!v96)
                  goto LABEL_113;
              }
            }
            do
            {
              v97 = v96[1];
              if (v97 == v92)
              {
                if (*((unsigned __int8 *)v96 + 16) == (_DWORD)v65
                  && *((unsigned __int8 *)v96 + 17) == (_DWORD)v64
                  && *((_DWORD *)v96 + 5) == v70
                  && *((_DWORD *)v96 + 6) == v68)
                {
                  goto LABEL_59;
                }
              }
              else
              {
                if ((void *)v97 >= v207[1])
                  v97 %= (unint64_t)v207[1];
                if (v97 != v10)
                  break;
              }
              v96 = (uint64_t *)*v96;
            }
            while (v96);
          }
        }
      }
LABEL_113:
      v99 = operator new(0x28uLL);
      *v99 = 0;
      v99[1] = v92;
      *((_BYTE *)v99 + 16) = v65;
      *((_BYTE *)v99 + 17) = v64;
      *((_QWORD *)&v23 + 1) = *((_QWORD *)&v203 + 1);
      *(_QWORD *)((char *)v99 + 20) = v203;
      *(float *)&v23 = (float)((unint64_t)v208[1] + 1);
      if (!v93 || (float)(v209 * (float)v93) < *(float *)&v23)
      {
        v100 = (v93 & (v93 - 1)) != 0;
        if (v93 < 3)
          v100 = 1;
        v101 = v100 | (2 * v93);
        v102 = vcvtps_u32_f32(*(float *)&v23 / v209);
        if (v101 <= v102)
          prime = v102;
        else
          prime = v101;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v93 = (unint64_t)v207[1];
        }
        if (prime > v93)
          goto LABEL_125;
        if (prime < v93)
        {
          v104 = vcvtps_u32_f32((float)(unint64_t)v208[1] / v209);
          if (v93 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v93), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
          {
            v104 = std::__next_prime(v104);
          }
          else
          {
            v106 = 1 << -(char)__clz(v104 - 1);
            if (v104 >= 2)
              v104 = v106;
          }
          if (prime <= v104)
            prime = v104;
          if (prime < v93)
LABEL_125:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v207, prime);
        }
        v93 = (unint64_t)v207[1];
        if (((unint64_t)v207[1] & ((unint64_t)v207[1] - 1)) != 0)
        {
          if ((void *)v92 >= v207[1])
            v10 = v92 % (unint64_t)v207[1];
          else
            v10 = v92;
        }
        else
        {
          v10 = ((unint64_t)v207[1] - 1) & v92;
        }
      }
      v107 = v207[0];
      v108 = (_QWORD *)*((_QWORD *)v207[0] + v10);
      if (v108)
      {
        *v99 = *v108;
      }
      else
      {
        *v99 = v208[0];
        v208[0] = v99;
        v107[v10] = v208;
        if (!*v99)
          goto LABEL_58;
        v109 = *(_QWORD *)(*v99 + 8);
        if ((v93 & (v93 - 1)) != 0)
        {
          if (v109 >= v93)
            v109 %= v93;
        }
        else
        {
          v109 &= v93 - 1;
        }
        v108 = (char *)v207[0] + 8 * v109;
      }
      *v108 = v99;
LABEL_58:
      ++v208[1];
LABEL_59:
      v56 = v66;
      if (!v55)
        goto LABEL_6;
    }
  }
  v30 = v57;
LABEL_6:
  v212[1] = 0;
  v31 = (char *)v205 - (char *)v30;
  if ((unint64_t)((char *)v205 - (char *)v30) >= 0x11)
  {
    do
    {
      v32 = *v30++;
      operator delete(v32);
      __p[1] = v30;
      v31 -= 8;
    }
    while (v31 > 0x10);
  }
  while (v30 != v205)
  {
    v33 = *v30++;
    operator delete(v33);
  }
  if (__p[0])
    operator delete(__p[0]);
  v34 = *(_QWORD *)(a1 + 536);
  v36 = *(_QWORD *)(v34 + 112);
  v35 = *(_QWORD *)(v34 + 120);
  if (v36 != v35)
  {
    while (*(_WORD *)v36)
    {
      v36 += 112;
      if (v36 == v35)
      {
        v36 = v35;
        break;
      }
    }
  }
  LODWORD(__p[0]) = 512;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)&__p[1], (uint64_t)v207);
  *(_DWORD *)(v36 + 56) = __p[0];
  if (*(_QWORD *)(v36 + 88))
  {
    v37 = *(_QWORD **)(v36 + 80);
    if (v37)
    {
      do
      {
        v38 = (_QWORD *)*v37;
        operator delete(v37);
        v37 = v38;
      }
      while (v38);
    }
    *(_QWORD *)(v36 + 80) = 0;
    v39 = *(_QWORD *)(v36 + 72);
    if (v39)
    {
      for (i = 0; i != v39; ++i)
        *(_QWORD *)(*(_QWORD *)(v36 + 64) + 8 * i) = 0;
    }
    *(_QWORD *)(v36 + 88) = 0;
  }
  v41 = __p[1];
  __p[1] = 0;
  v42 = *(void **)(v36 + 64);
  *(_QWORD *)(v36 + 64) = v41;
  if (v42)
    operator delete(v42);
  v44 = (unint64_t)v211[0];
  v43 = v211[1];
  *(void **)(v36 + 80) = v211[1];
  *(_QWORD *)(v36 + 72) = v44;
  v211[0] = 0;
  v45 = v212[0];
  *(void **)(v36 + 88) = v212[0];
  *(_DWORD *)(v36 + 96) = v212[1];
  if (v45)
  {
    v46 = v43[1];
    if ((v44 & (v44 - 1)) != 0)
    {
      if (v46 >= v44)
        v46 %= v44;
    }
    else
    {
      v46 &= v44 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v36 + 64) + 8 * v46) = v36 + 80;
    v211[1] = 0;
    v212[0] = 0;
  }
  else if (v43)
  {
    do
    {
      v47 = (_QWORD *)*v43;
      operator delete(v43);
      v43 = v47;
    }
    while (v47);
  }
  v48 = __p[1];
  __p[1] = 0;
  if (v48)
    operator delete(v48);
  v49 = *(_QWORD *)(a1 + 464);
  v50 = *(_QWORD *)(a1 + 472);
  if (v49 != v50)
  {
    while (*(_WORD *)v49)
    {
      v49 += 32;
      if (v49 == v50)
      {
        v49 = *(_QWORD *)(a1 + 472);
        break;
      }
    }
  }
  v51 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 16);
  if (v51)
  {
    v52 = *(void **)(v36 + 104);
    *(_OWORD *)v211 = 0u;
    *(_OWORD *)v212 = 0u;
    v213 = 1065353216;
    __p[0] = &off_1E42B46D8;
    __p[1] = v52;
    *(_QWORD *)&v214 = v36 + 16;
    *((_QWORD *)&v214 + 1) = v36 + 56;
    *(_QWORD *)(v51 + 8) = v52;
    if ((void **)v51 == __p)
    {
      *(_OWORD *)(v51 + 56) = v214;
      __p[0] = &off_1E42B0978;
    }
    else
    {
      *(_DWORD *)(v51 + 48) = 1065353216;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned short,void *> *>>((_QWORD *)(v51 + 16), 0);
      v53 = v212[0];
      *(_OWORD *)(v51 + 56) = v214;
      __p[0] = &off_1E42B0978;
      if (v53)
      {
        do
        {
          v54 = (_QWORD *)*v53;
          operator delete(v53);
          v53 = v54;
        }
        while (v54);
      }
    }
    v114 = v211[0];
    v211[0] = 0;
    if (v114)
      operator delete(v114);
    v115 = *(_QWORD *)(a1 + 120);
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v211 = 0u;
    LODWORD(v212[0]) = 1065353216;
    for (j = *(uint64_t **)(v115 + 144); j; j = (uint64_t *)*j)
    {
      if (*((_WORD *)j + 10))
        v130 = 1;
      else
        v130 = *((_BYTE *)j + 18) == 2;
      if (!v130)
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)__p, *((_WORD *)j + 8), *((_WORD *)j + 8));
    }
    gdc::SelectionContext::setLayerDataTypes(v51, (uint64_t *)__p);
    v117 = v211[0];
    if (v211[0])
    {
      do
      {
        v118 = (_QWORD *)*v117;
        operator delete(v117);
        v117 = v118;
      }
      while (v118);
    }
    v119 = __p[0];
    __p[0] = 0;
    if (v119)
      operator delete(v119);
  }
  v120 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24);
  v121 = *(_QWORD *)(v36 + 104);
  md::LayoutContext::frameState(v198);
  v123 = (uint64_t)(*(double *)(v122 + 88) * 1000.0);
  v124 = *(_QWORD *)(a1 + 464);
  v125 = *(_QWORD *)(a1 + 472);
  while (v124 != v125)
  {
    for (k = *(_QWORD *)(v124 + 16); k != v124 + 8; k = *(_QWORD *)(k + 8))
    {
      for (m = *(uint64_t ***)(*(_QWORD *)(k + 16) + 32); m; m = (uint64_t **)*m)
      {
        v128 = *(unsigned __int16 **)(v120 + 8);
        v129 = *(unsigned __int16 **)(v120 + 16);
        if (v128 != v129)
        {
          while (*((unsigned __int16 *)m + 8) != *v128)
          {
            v128 += 12;
            if (v128 == v129)
              goto LABEL_167;
          }
        }
        if (v128 != v129)
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v128 + 2) + 24))(*((_QWORD *)v128 + 2), *(_QWORD *)(k + 16), 0);
LABEL_167:
        ;
      }
    }
    v124 += 32;
  }
  v222 = 0;
  v223 = 0;
  v224 = 0;
  gdc::LayerDataManager::createDataRequests(v120, (uint64_t *)(a1 + 464), &v222, v123);
  v131 = *(_QWORD *)(a1 + 464);
  v132 = *(_QWORD *)(a1 + 472);
  if (v131 != v132)
  {
    do
    {
      for (n = *(_QWORD *)(v131 + 16); n != v131 + 8; n = *(_QWORD *)(n + 8))
      {
        for (ii = *(uint64_t ***)(*(_QWORD *)(n + 16) + 32); ii; ii = (uint64_t **)*ii)
        {
          v141 = *(unsigned __int16 **)(v120 + 8);
          v142 = *(unsigned __int16 **)(v120 + 16);
          if (v141 != v142)
          {
            while (*((unsigned __int16 *)ii + 8) != *v141)
            {
              v141 += 12;
              if (v141 == v142)
                goto LABEL_189;
            }
          }
          if (v141 != v142)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v141 + 1) + 40))(*((_QWORD *)v141 + 1), *(_QWORD *)(*(_QWORD *)(n + 16) + 8));
LABEL_189:
          ;
        }
      }
      v131 += 32;
    }
    while (v131 != v132);
    v182 = v200[58];
    v183 = v200[59];
    while (v182 != v183)
    {
      for (jj = *(_QWORD *)(v182 + 16); jj != v182 + 8; jj = *(_QWORD *)(jj + 8))
      {
        for (kk = *(uint64_t ***)(*(_QWORD *)(jj + 16) + 32); kk; kk = (uint64_t **)*kk)
        {
          v186 = *(unsigned __int16 **)(v120 + 8);
          v187 = *(unsigned __int16 **)(v120 + 16);
          if (v186 != v187)
          {
            while (*((unsigned __int16 *)kk + 8) != *v186)
            {
              v186 += 12;
              if (v186 == v187)
                goto LABEL_268;
            }
          }
          if (v186 != v187)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v186 + 1) + 48))(*((_QWORD *)v186 + 1), *(_QWORD *)(jj + 16));
LABEL_268:
          ;
        }
      }
      v182 += 32;
    }
  }
  gdc::LayerDataCollector::sortIndexList((unsigned __int8 **)v121);
  v134 = *(unsigned __int8 **)v121;
  v133 = *(unsigned __int8 **)(v121 + 8);
  if (*(unsigned __int8 **)v121 != v133)
  {
    v135 = 0;
    v136 = 1;
    v137 = 1;
    v138 = v200;
    while (1)
    {
      v143 = *((unsigned __int16 *)v134 + 4);
      v144 = *((_QWORD *)v134 + 17);
      v145 = *(unsigned __int16 **)(v121 + 24);
      v146 = *(unsigned __int16 **)(v121 + 32);
      v147 = v145;
      if (v145 != v146)
      {
        v147 = *(unsigned __int16 **)(v121 + 24);
        while (*v147 != v143)
        {
          v147 += 16;
          if (v147 == v146)
            goto LABEL_208;
        }
      }
      if (v147 == v146)
      {
LABEL_208:
        v151 = (unsigned __int16 *)v138[61];
        v152 = (unsigned __int16 *)v138[62];
        if (v151 != v152)
        {
          while (1)
          {
            v153 = *v151;
            if (v153 == v143)
              break;
            ++v151;
            if (v143 < v153 || v151 == v152)
            {
              v151 = (unsigned __int16 *)v138[62];
              break;
            }
          }
        }
        v137 &= v151 != v152;
        v136 &= v151 == v152;
        goto LABEL_197;
      }
      v149 = v147 + 4;
      v148 = *((_QWORD *)v147 + 1);
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)v149 + 1) - v148) >> 4) <= v144)
        goto LABEL_296;
      v150 = *(_DWORD *)(v148 + 144 * v144 + 128);
      if (v150 != 2)
        break;
      v135 = 1;
LABEL_197:
      v134 += 144;
      if (v134 == v133)
      {
        v188 = v222;
        goto LABEL_277;
      }
    }
    if (v150 <= 1)
      goto LABEL_208;
    if (v145 != v146)
    {
      while (*v145 != v143)
      {
        v145 += 16;
        if (v145 == v146)
        {
          v145 = *(unsigned __int16 **)(v121 + 32);
          break;
        }
      }
    }
    v206 = v135;
    v155 = *((_QWORD *)v145 + 1);
    if (0x8E38E38E38E38E39 * ((*((_QWORD *)v145 + 2) - v155) >> 4) <= v144)
LABEL_296:
      abort();
    v156 = v155 + 144 * v144;
    v157 = *(_QWORD *)(v156 + 112);
    v220 = v157;
    v158 = *(std::__shared_weak_count **)(v156 + 120);
    v221 = v158;
    if (v158)
    {
      p_shared_owners = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldxr(p_shared_owners);
      while (__stxr(v160 + 1, p_shared_owners));
    }
    LOBYTE(__p[0]) = *v134;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&__p[1], (uint64_t)(v134 + 8));
    v215 = 0;
    if (v134[96])
    {
      v216 = *((_DWORD *)v134 + 25);
      v215 = 1;
    }
    v217 = *((_QWORD *)v134 + 13);
    v218 = *((_WORD *)v134 + 56);
    v219 = *(_QWORD *)(v134 + 116);
    v161 = geo::linear_map<unsigned short,std::set<gdc::LayerDataWithWorld>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>,std::vector<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>>::operator[]((char **)(v138[67] + 48), *((_WORD *)v134 + 4));
    v162 = operator new(0x38uLL);
    v163 = v162;
    v162[4] = v157;
    v162[5] = v158;
    if (v158)
    {
      v164 = (unint64_t *)&v158->__shared_owners_;
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }
    v166 = (void **)(v161 + 4);
    v167 = vcvtmd_s64_f64((double)*((int *)v134 + 30) / (double)(1 << v134[113]));
    *((_BYTE *)v162 + 48) = v167;
    v168 = (void **)*((_QWORD *)v161 + 1);
    v169 = (void **)(v161 + 4);
    if (v168)
    {
      while (1)
      {
        while (1)
        {
          v169 = v168;
          v170 = *((unsigned __int8 *)v168 + 48);
          v171 = (char)v170;
          v172 = (unint64_t)v168[4];
          if (!(v170 == v167 ? v157 < v172 : (char)v170 > v167))
            break;
          v168 = (void **)*v169;
          v166 = v169;
          if (!*v169)
            goto LABEL_241;
        }
        v174 = v172 < v157;
        v130 = v171 == v167;
        v175 = v171 < v167;
        if (v130)
          v175 = v174;
        if (!v175)
          break;
        v168 = (void **)v169[1];
        if (!v168)
        {
          v166 = v169 + 1;
          goto LABEL_241;
        }
      }
      v138 = v200;
      v135 = v206;
      if (v158)
      {
        v180 = (unint64_t *)&v158->__shared_owners_;
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      operator delete(v163);
      if (!v215)
        goto LABEL_245;
    }
    else
    {
LABEL_241:
      *v162 = 0;
      v162[1] = 0;
      v162[2] = v169;
      *v166 = v162;
      v176 = **(_QWORD **)v161;
      if (v176)
      {
        *(_QWORD *)v161 = v176;
        v163 = *v166;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v161 + 1), (uint64_t *)v163);
      ++*((_QWORD *)v161 + 2);
      v138 = v200;
      v135 = v206;
      if (!v215)
        goto LABEL_245;
    }
    v215 = 0;
LABEL_245:
    if (v211[0] != v212[0])
      free(v211[0]);
    v177 = v221;
    if (v221)
    {
      v178 = (unint64_t *)&v221->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    goto LABEL_197;
  }
  v188 = 0;
  LOBYTE(v135) = 0;
  v137 = 1;
  v136 = 1;
  v138 = v200;
LABEL_277:
  *(_BYTE *)(v36 + 10) = v135 & 1;
  *(_BYTE *)(v36 + 8) = v136 & 1;
  *(_BYTE *)(v36 + 9) = v136 & 1 & v137;
  if (v188)
  {
    for (mm = v223; mm != v188; mm -= 24)
    {
      v190 = (_BYTE *)*((_QWORD *)mm - 3);
      if (v190)
      {
        do
        {
          if (v190[112])
            v190[112] = 0;
          v192 = *(_BYTE **)v190;
          v193 = (void *)*((_QWORD *)v190 + 4);
          if (v193 != *((void **)v190 + 6))
            free(v193);
          operator delete(v190);
          v190 = v192;
        }
        while (v192);
      }
      v191 = (void *)*((_QWORD *)mm - 5);
      *((_QWORD *)mm - 5) = 0;
      if (v191)
        operator delete(v191);
    }
    operator delete(v188);
  }
  md::RegistryManager::update(v138[16], v138[16] + 696, a4, 0);
  v194 = v208[0];
  if (v208[0])
  {
    do
    {
      v195 = (_QWORD *)*v194;
      operator delete(v194);
      v194 = v195;
    }
    while (v195);
  }
  v196 = v207[0];
  v207[0] = 0;
  if (v196)
    operator delete(v196);
}

void sub_19F8118EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  gdc::TileSetSelectionContext::~TileSetSelectionContext((gdc::TileSetSelectionContext *)&a25);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t md::ARSceneLogic::debugConsoleString@<X0>(md::LayoutContext *a1@<X3>, uint64_t a2@<X0>, md::PendingSceneLogic *a3@<X8>)
{
  return md::PendingSceneLogic::createDebugConsoleString(a3, a1, *(md::SceneContext **)(a2 + 120), a1);
}

uint64_t std::deque<geo::QuadTile>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 170;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<geo::QuadTile *>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v6 = *a1;
  v5 = a1[1];
  if (v5 > *a1)
  {
    v7 = (v5 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v5[-8 * v9];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  v14 = (v4 - v6) >> 2;
  if (v4 == v6)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v5;
  v19 = v4 == v5;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        v30 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = (__int128 *)(v5 + 16);
    v27 = v23 + 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    v4 = a1[2];
  }
LABEL_23:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<geo::QuadTile *>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v7 >= v6)
  {
    v13 = v6 - v4;
    v12 = v13 == 0;
    v14 = v13 >> 2;
    if (v12)
      v14 = 1;
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = (v14 + 3) >> 2;
    v16 = 8 * v14;
    v17 = (char *)operator new(8 * v14);
    v5 = &v17[8 * v15];
    v18 = &v17[v16];
    v19 = v5;
    v20 = v7 - v4;
    if (v7 != v4)
    {
      v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      v21 = v20 - 8;
      v22 = &v17[8 * v15];
      v23 = v4;
      if (v21 > 0x37)
      {
        v24 = &v17[8 * v15];
        v22 = v24;
        v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v5[v26];
          v27 = (__int128 *)(v4 + 16);
          v28 = v24 + 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          v23 = &v4[v26];
        }
      }
      do
      {
        v31 = *(_QWORD *)v23;
        v23 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4)
      goto LABEL_25;
LABEL_24:
    operator delete(v4);
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v8 = (v6 - v7) >> 3;
  if (v8 >= -1)
    v9 = v8 + 1;
  else
    v9 = v8 + 2;
  v10 = v9 >> 1;
  v11 = &v7[8 * (v9 >> 1)];
  v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

_QWORD *gdc::ManagedObjectHolder<md::ARSceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E42B0C08;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::ARSceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42B0C08;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40A4A59CD2);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARSceneContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 24))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 32));
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == (_QWORD *)(a1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 48);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_19F81215C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 72);
  if (v3 == (_QWORD *)(v1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 32);

  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 24))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 32));
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == (_QWORD *)(a1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 48);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_19F812258(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 72);
  if (v3 == (_QWORD *)(v1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 32);

  _Unwind_Resume(a1);
}

void md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::Logic<md::ARSceneLogic,md::ARSceneContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::RouteAnnotationLabelFeature::~RouteAnnotationLabelFeature(md::RouteAnnotationLabelFeature *this)
{
  md::RouteAnnotationLabelFeature::~RouteAnnotationLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD, _QWORD);
  void (***v13)(_QWORD, _QWORD);
  uint64_t v14;
  void (***v15)(_QWORD, _QWORD);
  void (***v16)(_QWORD, _QWORD);
  void (**v17)(_QWORD, uint64_t);
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)this = &off_1E42A4208;
  v2 = *((_QWORD *)this + 41);
  if (v2)
  {
    v3 = *((_QWORD *)this + 42);
    v4 = *((_QWORD *)this + 41);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 41);
    }
    *((_QWORD *)this + 42) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 44) + 40))(*((_QWORD *)this + 44), v4, *((_QWORD *)this + 43) - v4);
  }
  v8 = *((_QWORD *)this + 37);
  if (v8)
  {
    v9 = *((_QWORD *)this + 38);
    v10 = *((_QWORD *)this + 37);
    if (v9 != v8)
    {
      do
      {
        v11 = *(void **)(v9 - 8);
        v9 -= 8;

      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 37);
    }
    *((_QWORD *)this + 38) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40), v10, *((_QWORD *)this + 39) - v10);
  }
  v12 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 33);
  if (v12)
  {
    v13 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 34);
    v14 = *((_QWORD *)this + 33);
    if (v13 != v12)
    {
      v15 = v13 - 3;
      v16 = v13 - 3;
      do
      {
        v17 = *v16;
        v16 -= 3;
        (*v17)(v15, v14);
        v18 = v15 == v12;
        v15 = v16;
      }
      while (!v18);
      v14 = *((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 36) + 40))(*((_QWORD *)this + 36), v14, *((_QWORD *)this + 35) - v14);
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  md::LabelFeature::~LabelFeature(this);
}

uint64_t md::RouteAnnotationLabelFeature::labelTypeAtPosition()
{
  return 13;
}

md::CompositeLabelPart *md::RouteAnnotationLabelFeature::newRootPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  float *v8;
  char v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  md::LabelStyle *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int *v30;
  int v31;
  unsigned __int8 v32;
  __int128 *p_dst;
  size_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  grl *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  size_t v53;
  uint64_t v54;
  void **v55;
  void **v56;
  BOOL v57;
  __int128 v58;
  size_t v59;
  void **v60;
  void **v61;
  size_t v62;
  int *v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned __int8 v75;
  _BYTE *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  char *v81;
  void *v82;
  void *v83;
  char *v84;
  unint64_t v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  char *v112;
  char *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  size_t v124;
  md::LabelPart **v125;
  unint64_t v126;
  md::LabelPart ***v127;
  unsigned __int8 v128;
  uint64_t v129;
  md::LabelPart **v130;
  md::LabelPart **v131;
  uint64_t v132;
  md::LabelPart *v133;
  uint64_t v134;
  uint64_t v135;
  md::CompositeLabelPart *v136;
  unsigned __int8 v137;
  md::LabelPart **v138;
  unsigned __int8 v139;
  char *v140;
  char *v141;
  void *v142;
  void *v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _OWORD *v149;
  int v150;
  __int128 v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  md::LabelImageKey *v161;
  std::__shared_weak_count *v162;
  __int128 __dst;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  md::LabelImageKey *v167;
  std::__shared_weak_count *v168;

  v158 = 0;
  v159 = 0;
  v160 = 0;
  v150 = objc_msgSend(**(id **)(a1 + 296), "groupItemVerticalDisplayOrder");
  if (*(_QWORD *)(a1 + 304) == *(_QWORD *)(a1 + 296))
    return 0;
  v147 = a4;
  v148 = a3;
  v7 = 0;
  v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
  v9 = 1;
  do
  {
    v155 = 0uLL;
    v156 = 0;
    {
      v116 = operator new();
      *((_QWORD *)v8 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v116, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v157 = *((_QWORD *)v8 + 299);
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 8 * v7), "isCamera"))
    {
      v11 = *(id *)(*(_QWORD *)(a1 + 296) + 8 * v7);
      if (objc_msgSend(v11, "isSpeedLimitCamera"))
      {
        objc_msgSend(v11, "speedLimitText");
        v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v155, (char *)objc_msgSend(v12, "UTF8String"));

      }
    }
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 8 * v7), "groupItemVerticalDisplayOrder") != v150)
    {
      v150 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 8 * v7), "groupItemVerticalDisplayOrder");
      v9 = 1;
    }
    v13 = *(md::LabelStyle **)(*(_QWORD *)(a1 + 96) + 16 * v7);
    if (v13)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(a2 + 336) + 176);
      v15 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(a1 + 192));
      v16 = *(_OWORD *)(*(_QWORD *)(a1 + 328) + 16 * v7);
      v152 = v16;
      if (*((_QWORD *)&v16 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_QWORD *)(a2 + 264);
      v20 = (char *)operator new(0x148uLL);
      v149 = (_OWORD *)v15;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      *(_QWORD *)v20 = &off_1E42DB010;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_OWORD *)(v20 + 40) = 0u;
      *((_QWORD *)v20 + 7) = 0;
      {
        v117 = operator new();
        *((_QWORD *)v8 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v117, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v22 = *((_QWORD *)v8 + 299);
      *((_QWORD *)v20 + 18) = 0;
      *((_QWORD *)v20 + 9) = 0;
      *((_QWORD *)v20 + 10) = 0;
      *((_QWORD *)v20 + 8) = v22;
      *((_WORD *)v20 + 44) = 0;
      *((_QWORD *)v20 + 12) = v20 + 128;
      *((_QWORD *)v20 + 13) = v20 + 128;
      *((_QWORD *)v20 + 14) = v20 + 128;
      *((_QWORD *)v20 + 15) = 2;
      v20[136] = 0;
      *(_DWORD *)(v20 + 137) = 16843008;
      v20[141] = 0;
      *((_QWORD *)v20 + 19) = 0;
      *((_QWORD *)v20 + 20) = 0;
      {
        v118 = operator new();
        *((_QWORD *)v8 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v118, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *((_QWORD *)v20 + 21) = *((_QWORD *)v8 + 299);
      *((_QWORD *)v20 + 22) = 0;
      *(_QWORD *)(v20 + 181) = 0;
      v20[192] = 4;
      *(_QWORD *)(v20 + 196) = 0;
      v20[204] = 0;
      *(_QWORD *)(v20 + 212) = 0xFFFF3F800000;
      *((_WORD *)v20 + 110) = 0;
      *((_DWORD *)v20 + 56) = 1065353216;
      *((_QWORD *)v20 + 40) = 0;
      *((_OWORD *)v20 + 15) = 0u;
      *((_OWORD *)v20 + 16) = 0u;
      *((_OWORD *)v20 + 17) = 0u;
      *((_QWORD *)v20 + 36) = 0;
      v167 = (md::LabelImageKey *)(v20 + 24);
      v168 = (std::__shared_weak_count *)v20;
      v20[136] = 6;
      *((float *)v20 + 20) = md::LabelStyle::iconContentScale(v13);
      v24 = *((_QWORD *)v13 + 37);
      if (!v24)
      {
        v23 = md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v13, 0);
        v24 = *(_QWORD *)v23;
        *((_QWORD *)v13 + 37) = *(_QWORD *)v23;
      }
      *(_QWORD *)(v20 + 196) = *(_QWORD *)(v24 + 56);
      if ((_QWORD)v152)
      {
        v25 = *(unsigned __int8 *)(v152 + 33);
        v26 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
        if (*(_BYTE *)(v152 + 33))
        {
          v27 = *(_QWORD *)v152;
          if (**(_DWORD **)v152 == 4)
          {
            v28 = 0;
LABEL_23:
            v29 = *(unsigned __int16 *)(v27 + 8 * v28 + 4);
LABEL_30:
            *((_DWORD *)v20 + 54) = v29;
            __dst = 0uLL;
            v164 = 0;
            if ((v32 & 1) == 0)
            {
              if ((_DWORD)v23)
              {
                v119 = operator new();
                *((_QWORD *)v26 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v119, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
            }
            v165 = *((_QWORD *)v26 + 299);
            memset(v166, 0, 13);
            if (SHIBYTE(v156) < 0)
            {
              v23 = (uint64_t)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&__dst, (void *)v155, *((size_t *)&v155 + 1));
            }
            else
            {
              __dst = v155;
              v164 = v156;
            }
            if (v20[167] < 0)
            {
              if (v164 >= 0)
                p_dst = &__dst;
              else
                p_dst = (__int128 *)__dst;
              if (v164 >= 0)
                v34 = HIBYTE(v164);
              else
                v34 = *((_QWORD *)&__dst + 1);
              v23 = (uint64_t)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)v20 + 18, p_dst, v34);
            }
            else if (v164 < 0)
            {
              v23 = (uint64_t)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v20 + 18, (void *)__dst, *((size_t *)&__dst + 1));
            }
            else
            {
              *((_OWORD *)v20 + 9) = __dst;
              *((_QWORD *)v20 + 20) = v164;
            }
            *((_QWORD *)v20 + 22) = v166[0];
            *((_DWORD *)v20 + 46) = v166[1];
            v20[188] = BYTE4(v166[1]);
            if (!v20[204])
              v20[204] = 1;
            *((_DWORD *)v20 + 52) = 0;
            *((_DWORD *)v20 + 53) = v14;
            v35 = *(unsigned __int8 *)(a2 + 3360);
            v36 = *((_QWORD *)v13 + 37);
            if (!v36)
            {
              v23 = md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v13, 0);
              v36 = *(_QWORD *)v23;
              *((_QWORD *)v13 + 37) = *(_QWORD *)v23;
            }
            v37 = *(unsigned __int8 *)(v36 + 92) - 1;
            if (v37 > 8)
              v38 = 0;
            else
              v38 = dword_19FFB8A88[v37];
            v39 = (grl *)grl::SizeGroupMin((grl *)v23);
            v40 = (int)v39;
            v41 = grl::SizeGroupMax(v39);
            v42 = v38 + v35;
            if (v38 + v35 >= v41)
              v42 = v41;
            if (v42 <= v40)
              LOBYTE(v42) = v40;
            v20[192] = v42;
            *(_OWORD *)(v20 + 24) = *v149;
            v43 = *((_QWORD *)v13 + 37);
            v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            if (v43)
            {
              v44 = *(_DWORD *)(v43 + 64);
              if (!v44)
                goto LABEL_65;
            }
            else
            {
              v45 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v13, 0);
              v46 = *v45;
              *((_QWORD *)v13 + 37) = *v45;
              v44 = *(_DWORD *)(v46 + 64);
              if (!v44)
                goto LABEL_65;
            }
            if ((_QWORD)v152)
            {
              v47 = *(unsigned __int8 *)(v152 + 33);
              if (*(_BYTE *)(v152 + 33))
              {
                v48 = *(_QWORD *)v152;
                if (**(_DWORD **)v152 == v44)
                {
                  v49 = 0;
LABEL_64:
                  v50 = *(_DWORD *)(v48 + 8 * v49 + 4);
                  *((_DWORD *)v20 + 21) = v44;
                  *((_WORD *)v20 + 44) = v50;
                  v20[138] = 1;
                }
                else
                {
                  v49 = 0;
                  v63 = (int *)(v48 + 8);
                  while (v47 - 1 != v49)
                  {
                    v64 = *v63;
                    v63 += 2;
                    ++v49;
                    if (v64 == v44)
                    {
                      if (v49 < v47)
                        goto LABEL_64;
                      break;
                    }
                  }
                }
              }
            }
LABEL_65:
            v51 = *((_QWORD *)v13 + 34);
            if (!v51)
            {
              v52 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)v13);
              v51 = *v52;
              *((_QWORD *)v13 + 34) = *v52;
            }
            v53 = *(unsigned __int8 *)(v51 + 103);
            if (*(char *)(v51 + 103) < 0)
              v54 = *(_QWORD *)(v51 + 88);
            else
              v54 = *(unsigned __int8 *)(v51 + 103);
            v55 = (void **)(v51 + 80);
            v56 = (void **)(v20 + 40);
            if (v54)
              v57 = v56 == v55;
            else
              v57 = 1;
            if (!v57)
            {
              if (v20[63] < 0)
              {
                v60 = *(void ***)(v51 + 80);
                v59 = *(_QWORD *)(v51 + 88);
                if ((v53 & 0x80u) == 0)
                  v61 = v55;
                else
                  v61 = v60;
                if ((v53 & 0x80u) == 0)
                  v62 = v53;
                else
                  v62 = v59;
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v56, v61, v62);
                v20 = (char *)v168;
                v161 = v167;
                v162 = v168;
                if (!v168)
                {
LABEL_94:
                  md::LabelImageLoader::loadImage(&v153, v19, &v161);
                  if (!v20)
                    goto LABEL_98;
                  v67 = (unint64_t *)(v20 + 8);
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
                    if ((SHIBYTE(v164) & 0x80000000) == 0)
                    {
LABEL_99:
                      v69 = v168;
                      if (!v168)
                        goto LABEL_106;
                      goto LABEL_103;
                    }
                  }
                  else
                  {
LABEL_98:
                    if ((SHIBYTE(v164) & 0x80000000) == 0)
                      goto LABEL_99;
                  }
                  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v165 + 40))(v165, __dst, v164 & 0x7FFFFFFFFFFFFFFFLL);
                  v69 = v168;
                  if (!v168)
                    goto LABEL_106;
LABEL_103:
                  p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                  do
                    v71 = __ldaxr(p_shared_owners);
                  while (__stlxr(v71 - 1, p_shared_owners));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                    v72 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
                    if (!*((_QWORD *)&v152 + 1))
                      goto LABEL_112;
                    goto LABEL_107;
                  }
LABEL_106:
                  v72 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
                  if (!*((_QWORD *)&v152 + 1))
                    goto LABEL_112;
LABEL_107:
                  v73 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v74 = __ldaxr(v73);
                  while (__stlxr(v74 - 1, v73));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
LABEL_112:
                  if (!v153)
                  {
LABEL_151:
                    v102 = v154;
                    if (v154)
                    {
                      v103 = (unint64_t *)&v154->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    goto LABEL_156;
                  }
                  {
                    v120 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v120, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  v76 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 824, 8);
                  v77 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v7);
                  md::IconLabelPart::IconLabelPart((uint64_t)v76, &v153);
                  *v78 = off_1E428B408;
                  md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v78 + 96), v77);
                  v76[664] = 0;
                  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v76 + 176))(v76, 1);
                  v79 = v159;
                  if ((v9 & 1) != 0)
                  {
                    v80 = v158;
                    if (v159 - v158 == -24)
                    {
                      v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                      if (v159 != v158)
                      {
                        v81 = v159;
                        do
                        {
                          v83 = (void *)*((_QWORD *)v81 - 3);
                          v81 -= 24;
                          v82 = v83;
                          if (v83)
                          {
                            *((_QWORD *)v79 - 2) = v82;
                            operator delete(v82);
                          }
                          v79 = v81;
                        }
                        while (v81 != v80);
                      }
                      v159 = v80;
                      v84 = v80;
                      goto LABEL_126;
                    }
                    if (v160 == v159)
                    {
                      v105 = 0xAAAAAAAAAAAAAAABLL * ((v159 - v158) >> 3);
                      v106 = v105 + 1;
                      if (v105 + 1 > 0xAAAAAAAAAAAAAAALL)
                        abort();
                      if (0x5555555555555556 * ((v160 - v158) >> 3) > v106)
                        v106 = 0x5555555555555556 * ((v160 - v158) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((v160 - v158) >> 3) >= 0x555555555555555)
                        v107 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v107 = v106;
                      if (v107)
                      {
                        if (v107 > 0xAAAAAAAAAAAAAAALL)
LABEL_218:
                          std::__throw_bad_array_new_length[abi:nn180100]();
                        v108 = (char *)operator new(24 * v107);
                      }
                      else
                      {
                        v108 = 0;
                      }
                      v109 = &v108[24 * v105];
                      *(_QWORD *)v109 = 0;
                      *((_QWORD *)v109 + 1) = 0;
                      *((_QWORD *)v109 + 2) = 0;
                      v84 = v109 + 24;
                      if (v79 == v80)
                      {
                        v158 = v109;
                        v159 = v109 + 24;
                        v160 = &v108[24 * v107];
                        v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                      }
                      else
                      {
                        do
                        {
                          v110 = v109;
                          *((_QWORD *)v109 - 2) = 0;
                          *((_QWORD *)v109 - 1) = 0;
                          v111 = *(_OWORD *)(v79 - 24);
                          v79 -= 24;
                          *(_OWORD *)(v109 - 24) = v111;
                          v109 -= 24;
                          *((_QWORD *)v110 - 1) = *((_QWORD *)v79 + 2);
                          *(_QWORD *)v79 = 0;
                          *((_QWORD *)v79 + 1) = 0;
                          *((_QWORD *)v79 + 2) = 0;
                        }
                        while (v79 != v80);
                        v79 = v158;
                        v112 = v159;
                        v158 = v109;
                        v159 = v84;
                        v160 = &v108[24 * v107];
                        v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                        if (v112 != v79)
                        {
                          v113 = v112;
                          do
                          {
                            v115 = (void *)*((_QWORD *)v113 - 3);
                            v113 -= 24;
                            v114 = v115;
                            if (v115)
                            {
                              *((_QWORD *)v112 - 2) = v114;
                              operator delete(v114);
                            }
                            v112 = v113;
                          }
                          while (v113 != v79);
                        }
                      }
                      if (v79)
                        operator delete(v79);
LABEL_126:
                      v86 = (char *)*((_QWORD *)v84 - 2);
                      v85 = *((_QWORD *)v84 - 1);
                      if ((unint64_t)v86 < v85)
                      {
                        *(_QWORD *)v86 = v76;
                        v87 = v86 + 8;
LABEL_150:
                        v9 = 0;
                        *((_QWORD *)v84 - 2) = v87;
                        goto LABEL_151;
                      }
                      v88 = (char *)*((_QWORD *)v84 - 3);
                      v89 = (v86 - v88) >> 3;
                      v90 = v89 + 1;
                      if ((unint64_t)(v89 + 1) >> 61)
                        abort();
                      v91 = v85 - (_QWORD)v88;
                      if (v91 >> 2 > v90)
                        v90 = v91 >> 2;
                      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
                        v92 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v92 = v90;
                      if (v92)
                      {
                        if (v92 >> 61)
                          goto LABEL_218;
                        v93 = (char *)operator new(8 * v92);
                      }
                      else
                      {
                        v93 = 0;
                      }
                      v94 = &v93[8 * v89];
                      *(_QWORD *)v94 = v76;
                      v87 = v94 + 8;
                      if (v86 == v88)
                      {
                        v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                        goto LABEL_148;
                      }
                      v95 = v86 - 8 - v88;
                      if (v95 >= 0x58)
                      {
                        v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                        if ((unint64_t)(v88 - v93) >= 0x20)
                        {
                          v96 = (v95 >> 3) + 1;
                          v97 = &v93[8 * v89 - 16];
                          v98 = (__int128 *)(v86 - 16);
                          v99 = v96 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v100 = *v98;
                            *((_OWORD *)v97 - 1) = *(v98 - 1);
                            *(_OWORD *)v97 = v100;
                            v97 -= 32;
                            v98 -= 2;
                            v99 -= 4;
                          }
                          while (v99);
                          v94 -= 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
                          v86 -= 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
                            goto LABEL_147;
                        }
                      }
                      else
                      {
                        v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                      }
                      do
                      {
                        v101 = *((_QWORD *)v86 - 1);
                        v86 -= 8;
                        *((_QWORD *)v94 - 1) = v101;
                        v94 -= 8;
                      }
                      while (v86 != v88);
LABEL_147:
                      v86 = (char *)*((_QWORD *)v84 - 3);
LABEL_148:
                      *((_QWORD *)v84 - 3) = v94;
                      *((_QWORD *)v84 - 2) = v87;
                      *((_QWORD *)v84 - 1) = &v93[8 * v92];
                      if (v86)
                        operator delete(v86);
                      goto LABEL_150;
                    }
                    *(_QWORD *)v159 = 0;
                    *((_QWORD *)v79 + 1) = 0;
                    *((_QWORD *)v79 + 2) = 0;
                    v84 = v79 + 24;
                    v159 = v79 + 24;
                  }
                  else
                  {
                    v84 = v159;
                  }
                  v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                  goto LABEL_126;
                }
LABEL_92:
                v65 = (unint64_t *)(v20 + 8);
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
                goto LABEL_94;
              }
              if ((v53 & 0x80) != 0)
              {
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v56, *(void **)(v51 + 80), *(_QWORD *)(v51 + 88));
              }
              else
              {
                v58 = *(_OWORD *)v55;
                *((_QWORD *)v20 + 7) = *(_QWORD *)(v51 + 96);
                *(_OWORD *)v56 = v58;
              }
            }
            v161 = (md::LabelImageKey *)(v20 + 24);
            v162 = (std::__shared_weak_count *)v20;
            goto LABEL_92;
          }
          v28 = 0;
          v30 = (int *)(v27 + 8);
          while (v25 - 1 != v28)
          {
            v31 = *v30;
            v30 += 2;
            ++v28;
            if (v31 == 4)
            {
              if (v28 < v25)
                goto LABEL_23;
              break;
            }
          }
        }
        v29 = 0xFFFF;
        goto LABEL_30;
      }
      v29 = 0xFFFF;
      v26 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      goto LABEL_30;
    }
LABEL_156:
    if (SHIBYTE(v156) < 0)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v157 + 40))(v157, v155, v156 & 0x7FFFFFFFFFFFFFFFLL);
    ++v7;
  }
  while (v7 < (uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 3);
  v122 = v158;
  v121 = v159;
  if (v158 == v159)
  {
    v136 = 0;
    if (v159)
      goto LABEL_210;
  }
  else
  {
    v123 = (char *)(v159 - v158);
    if ((0xAAAAAAAAAAAAAAABLL * ((v159 - v158) >> 3)) >> 61)
      abort();
    v124 = 0x5555555555555558 * ((v159 - v158) >> 3);
    v125 = (md::LabelPart **)operator new(v124);
    bzero(v125, 0x5555555555555558 * ((v121 - v122) >> 3));
    v126 = 0;
    do
    {
      v127 = (md::LabelPart ***)&v122[24 * v126];
      if ((char *)v127[1] - (char *)*v127 == 8)
      {
        v125[v126] = **v127;
      }
      else
      {
        {
          v132 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v132, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
        md::StackLabelPart::StackLabelPart(v129, 1, 0, 0, 1);
        v130 = *v127;
        v131 = v127[1];
        if (*v127 != v131)
        {
          do
            md::CompositeLabelPart::addLabelPart(v129, *v130++);
          while (v130 != v131);
        }
        v125[v126] = (md::LabelPart *)v129;
        v122 = v158;
        v121 = v159;
      }
      ++v126;
    }
    while (v126 < 0xAAAAAAAAAAAAAAABLL * ((v121 - v122) >> 3));
    if (v123 == (char *)24)
    {
      v133 = *v125;
      v135 = v147;
      v134 = v148;
    }
    else
    {
      v135 = v147;
      v134 = v148;
      {
        v146 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v146, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v133 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
      md::StackLabelPart::StackLabelPart((uint64_t)v133, 0, 0, 0, 0);
      v138 = v125;
      do
      {
        md::CompositeLabelPart::addLabelPart((uint64_t)v133, *v138++);
        v124 -= 8;
      }
      while (v124);
    }
    {
      v145 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v145, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v136 = (md::CompositeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 648, 8);
    md::WorldSpaceLabelPart::WorldSpaceLabelPart(v136, v133, v134, *(_BYTE *)(v135 + 253), 0);
    operator delete(v125);
    v121 = v158;
    if (v158)
    {
LABEL_210:
      v140 = v159;
      if (v159 != v121)
      {
        v141 = v159;
        do
        {
          v143 = (void *)*((_QWORD *)v141 - 3);
          v141 -= 24;
          v142 = v143;
          if (v143)
          {
            *((_QWORD *)v140 - 2) = v142;
            operator delete(v142);
          }
          v140 = v141;
        }
        while (v141 != v121);
      }
      v159 = v121;
      operator delete(v121);
    }
  }
  return v136;
}

void sub_19F8133F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;

  operator delete(v36);
  std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](&a33);
  _Unwind_Resume(a1);
}

uint64_t md::RouteAnnotationLabelFeature::updateDynamicStyling(md::RouteAnnotationLabelFeature *this, md::LabelManager *a2, md::Label *a3)
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  id v8;
  char v9;
  _BYTE v11[2];
  char v12;
  unsigned __int8 v13;
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, char *, md::Label *))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 32)
                                                                             + 88))(&v14, *(_QWORD *)(*((_QWORD *)a2 + 21) + 32), (char *)this + 360, a3);
  v5 = *((_QWORD *)this + 37);
  if (*((_QWORD *)this + 38) == v5)
    return 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(id *)(v5 + 8 * v7);
    if (objc_msgSend(v8, "shouldUpdateStyle"))
    {
      v9 = 1;
      v11[0] = 0;
      if (!(_BYTE)v14)
        goto LABEL_6;
      goto LABEL_5;
    }
    if (v8)
    {
      objc_msgSend(v8, "routeLegWhen");
      if (v12 && (_BYTE)v14)
      {
        v9 = v13 != BYTE1(v14);
        v11[0] = 0;
LABEL_5:
        v11[1] = BYTE1(v14);
        v11[0] = 1;
        goto LABEL_6;
      }
      v9 = (v12 != 0) ^ (v14 != 0);
      v11[0] = 0;
      if ((_BYTE)v14)
        goto LABEL_5;
    }
    else
    {
      v9 = (_BYTE)v14 != 0;
      v11[0] = 0;
      if ((_BYTE)v14)
        goto LABEL_5;
    }
LABEL_6:
    objc_msgSend(v8, "setRouteLegWhen:", v11);
    if (v11[0])
      v11[0] = 0;
    objc_msgSend(v8, "setShouldUpdateStyle:", 0);
    v6 |= v9;

    ++v7;
    v5 = *((_QWORD *)this + 37);
  }
  while (v7 < (*((_QWORD *)this + 38) - v5) >> 3);
  if ((v6 & 1) != 0)
    (*(void (**)(md::RouteAnnotationLabelFeature *, md::LabelManager *))(*(_QWORD *)this + 536))(this, a2);
  return 0;
}

void sub_19F8136B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeatureBase::labelPoint(uint64_t a1)
{
  return a1 + 192;
}

uint64_t md::RouteAnnotationLabelFeature::facingVector(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 380))
    return *(_QWORD *)(a1 + 384);
  else
    return 0;
}

uint64_t md::RouteAnnotationLabelFeature::labelFeatureType(md::RouteAnnotationLabelFeature *this)
{
  return 23;
}

uint64_t md::RouteAnnotationLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 256);
  *a2 = *(_QWORD *)(this + 248);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t md::RouteAnnotationLabelFeature::routeCoordinate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 360);
}

uint64_t md::RouteAnnotationLabelFeature::isRouteFeature(md::RouteAnnotationLabelFeature *this)
{
  return 1;
}

uint64_t md::RouteAnnotationLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  id *v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  id v26;
  const char *v27;
  size_t v28;
  std::string::size_type v29;
  std::string *v30;
  const char *v31;
  size_t v32;
  std::string::size_type v33;
  std::string *v34;
  const char *v35;
  size_t v36;
  std::string::size_type v37;
  std::string *p_dst;
  const char *v39;
  size_t v40;
  std::string::size_type v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  std::string::size_type v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  std::string::size_type v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  size_t v67;
  unint64_t v68;
  const void **v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  id *v76;
  std::string __dst;
  void *__p[2];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  uint64_t v83;
  unint64_t v84;
  void *v85[2];
  __int128 v86;
  int v87;
  uint64_t v88[20];

  v9 = MEMORY[0x1E0DE4FE0];
  v10 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v88[0] = MEMORY[0x1E0DE4FE0] + 64;
  v80 = v11;
  *(uint64_t *)((char *)&v80 + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v80 + *(_QWORD *)(v80 - 24));
  std::ios_base::init(v13, &v81);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v80 = v9 + 24;
  v88[0] = v10;
  std::streambuf::basic_streambuf();
  v81 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v85 = 0u;
  v86 = 0u;
  v87 = 16;
  md::LabelFeature::debugString((_BYTE *)a1, a2, a3, a4, __p);
  if (v79 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v79 >= 0)
    v15 = HIBYTE(v79);
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)v14, v15);
  if (SHIBYTE(v79) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"RouteAnnotation:\n", 17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"  CollisionPriority:", 20);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"  RouteOffsetInMeters:", 22);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"  DistanceFromUser:", 19);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a2 + 168)
                                                                                                  + 32));
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"  facingAzimuth:", 16);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  v20 = *(id **)(a1 + 296);
  v76 = *(id **)(a1 + 304);
  if (v20 != v76)
  {
    v21 = 1;
    while (1)
    {
      v22 = *v20;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"  TrafficFeature ", 17);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
      v24 = objc_msgSend(v22, "trafficFeatureType");
      switch(v24)
      {
        case 1:
          v25 = v22;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"    CameraType: ", 16);
          +[VKTrafficCameraFeature stringForTrafficCameraType:](VKTrafficCameraFeature, "stringForTrafficCameraType:", objc_msgSend(v25, "type"));
          v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v35 = (const char *)objc_msgSend(v26, "UTF8String");
          v36 = strlen(v35);
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v37 = v36;
          if (v36 >= 0x17)
          {
            v49 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v49 = v36 | 7;
            v50 = v49 + 1;
            p_dst = (std::string *)operator new(v49 + 1);
            __dst.__r_.__value_.__l.__size_ = v37;
            __dst.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36;
            p_dst = &__dst;
            if (!v36)
              goto LABEL_45;
          }
          memmove(p_dst, v35, v37);
LABEL_45:
          p_dst->__r_.__value_.__s.__data_[v37] = 0;
          v51 = std::string::append(&__dst, "\n", 1uLL);
          v52 = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v79 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v79 >= 0)
            v47 = __p;
          else
            v47 = (void **)__p[0];
          if (v79 >= 0)
            v48 = HIBYTE(v79);
          else
            v48 = (uint64_t)__p[1];
LABEL_61:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)v47, v48);
          if (SHIBYTE(v79) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_63;
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_63:

            goto LABEL_64;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_63;
        case 2:
          v25 = v22;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"    SignalType: ", 16);
          +[VKTrafficSignalFeature stringForTrafficSignalType:](VKTrafficSignalFeature, "stringForTrafficSignalType:", objc_msgSend(v25, "type"));
          v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v31 = (const char *)objc_msgSend(v26, "UTF8String");
          v32 = strlen(v31);
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v33 = v32;
          if (v32 >= 0x17)
          {
            v43 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v43 = v32 | 7;
            v44 = v43 + 1;
            v34 = (std::string *)operator new(v43 + 1);
            __dst.__r_.__value_.__l.__size_ = v33;
            __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32;
            v34 = &__dst;
            if (!v32)
            {
LABEL_35:
              v34->__r_.__value_.__s.__data_[v33] = 0;
              v45 = std::string::append(&__dst, "\n", 1uLL);
              v46 = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v79 = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              if (v79 >= 0)
                v47 = __p;
              else
                v47 = (void **)__p[0];
              if (v79 >= 0)
                v48 = HIBYTE(v79);
              else
                v48 = (uint64_t)__p[1];
              goto LABEL_61;
            }
          }
          memmove(v34, v31, v33);
          goto LABEL_35;
        case 4:
          v25 = v22;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"    UserReportedIncidentType: ", 30);
          +[VKTrafficIncidentFeature stringForIncidentType:](VKTrafficIncidentFeature, "stringForIncidentType:", objc_msgSend(v25, "type"));
          v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v27 = (const char *)objc_msgSend(v26, "UTF8String");
          v28 = strlen(v27);
          if (v28 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v29 = v28;
          if (v28 >= 0x17)
          {
            v53 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v53 = v28 | 7;
            v54 = v53 + 1;
            v30 = (std::string *)operator new(v53 + 1);
            __dst.__r_.__value_.__l.__size_ = v29;
            __dst.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
            v30 = &__dst;
            if (!v28)
            {
LABEL_55:
              v30->__r_.__value_.__s.__data_[v29] = 0;
              v55 = std::string::append(&__dst, "\n", 1uLL);
              v56 = v55->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
              v79 = v56;
              v55->__r_.__value_.__l.__size_ = 0;
              v55->__r_.__value_.__r.__words[2] = 0;
              v55->__r_.__value_.__r.__words[0] = 0;
              if (v79 >= 0)
                v47 = __p;
              else
                v47 = (void **)__p[0];
              if (v79 >= 0)
                v48 = HIBYTE(v79);
              else
                v48 = (uint64_t)__p[1];
              goto LABEL_61;
            }
          }
          memmove(v30, v27, v29);
          goto LABEL_55;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"    Type: ", 10);
      +[VKTrafficFeature stringForFeatureType:](VKTrafficFeature, "stringForFeatureType:", objc_msgSend(v22, "trafficFeatureType"));
      v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v39 = (const char *)objc_msgSend(v25, "UTF8String");
      v40 = strlen(v39);
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v41 = v40;
      if (v40 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v40;
      v42 = &__dst;
      if (v40)
        goto LABEL_71;
LABEL_72:
      v42->__r_.__value_.__s.__data_[v41] = 0;
      v61 = std::string::append(&__dst, "\n", 1uLL);
      v62 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v79 = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if (v79 >= 0)
        v63 = __p;
      else
        v63 = (void **)__p[0];
      if (v79 >= 0)
        v64 = HIBYTE(v79);
      else
        v64 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)v63, v64);
      if (SHIBYTE(v79) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_82:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_82;
      }
LABEL_64:

      if (objc_msgSend(v22, "isGrouped"))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"    GroupItemVerticalDisplayOrder: ", 35);
        objc_msgSend(v22, "groupItemVerticalDisplayOrder");
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v80, (uint64_t)"    GroupItemHorizontalDisplayOrder: ", 37);
        objc_msgSend(v22, "groupItemHorizontalDisplayOrder");
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"\n", 1);
      }

      ++v20;
      ++v21;
      if (v20 == v76)
        goto LABEL_83;
    }
    v59 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v59 = v40 | 7;
    v60 = v59 + 1;
    v42 = (std::string *)operator new(v59 + 1);
    __dst.__r_.__value_.__l.__size_ = v41;
    __dst.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
LABEL_71:
    memmove(v42, v39, v41);
    goto LABEL_72;
  }
LABEL_83:
  if ((v87 & 0x10) != 0)
  {
    v68 = *((_QWORD *)&v86 + 1);
    v65 = a5;
    v66 = MEMORY[0x1E0DE4FB8];
    if (*((_QWORD *)&v86 + 1) < v84)
    {
      *((_QWORD *)&v86 + 1) = v84;
      v68 = v84;
    }
    v69 = (const void **)&v83;
  }
  else
  {
    v65 = a5;
    v66 = MEMORY[0x1E0DE4FB8];
    if ((v87 & 8) == 0)
    {
      v67 = 0;
      a5[23] = 0;
      goto LABEL_98;
    }
    v69 = (const void **)v82;
    v68 = v82[2];
  }
  v70 = *v69;
  v67 = v68 - (_QWORD)*v69;
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v67 >= 0x17)
  {
    v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v71 = v67 | 7;
    v72 = v71 + 1;
    v73 = operator new(v71 + 1);
    v65[1] = v67;
    v65[2] = v72 | 0x8000000000000000;
    *v65 = v73;
    v65 = v73;
    goto LABEL_97;
  }
  *((_BYTE *)v65 + 23) = v67;
  if (v67)
LABEL_97:
    memmove(v65, v70, v67);
LABEL_98:
  *((_BYTE *)v65 + v67) = 0;
  v80 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v80 + *(_QWORD *)(v80 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v81 = v66 + 16;
  if (SBYTE7(v86) < 0)
    operator delete(v85[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v88);
}

void sub_19F814068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a25 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void md::RouteAnnotationLabelFeature::populateDebugNode(id **this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  id v3;
  uint64_t v6;
  double v7;
  char *v8;
  id *v9;
  gdc::DebugTreeNode *v10;
  id *v11;
  uint64_t v12;
  id v13;
  std::ios_base *v14;
  uint64_t v15;
  void *v16;
  const std::string::value_type *v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  size_t v21;
  void **p_dst;
  uint64_t v23;
  uint64_t v24;
  gdc::DebugTreeNode *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  char v33[32];
  std::string v34;
  int v35;
  _QWORD v36[3];
  _QWORD v37[3];
  uint64_t v38;
  unint64_t v39;
  __int128 __p;
  __int128 v41;
  int v42;
  uint64_t v43[20];
  char v44[16];
  id *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void **__dst;
  char *v51;
  unint64_t v52;

  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  HIBYTE(v36[2]) = 11;
  strcpy((char *)v36, "RouteOffset");
  v6 = *((unsigned int *)this + 90);
  v7 = *((float *)this + 91);
  v8 = (char *)operator new(0x80uLL);
  v51 = v8 + 128;
  v52 = (unint64_t)(v8 + 128);
  *((_QWORD *)v8 + 1) = v6;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_DWORD *)v8 + 14) = 1;
  *((double *)v8 + 10) = v7;
  *((_QWORD *)v8 + 12) = 0;
  *((_QWORD *)v8 + 13) = 0;
  *((_QWORD *)v8 + 14) = 0;
  *((_DWORD *)v8 + 30) = 2;
  __dst = (void **)v8;
  v25 = a2;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v36, (uint64_t *)&__dst);
  if (v8[119] < 0)
  {
    operator delete(*((void **)v8 + 12));
    if ((v8[55] & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v8[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)v8 + 4));
LABEL_3:
  operator delete(v8);
  v9 = this[46];
  HIBYTE(v36[2]) = 19;
  strcpy((char *)v36, "RouteOffsetInMeters");
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v49 = 2;
  v45 = v9;
  v10 = a2;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v36, (uint64_t)v44);
  v11 = this[37];
  v32 = this[38];
  if (v11 != v32)
  {
    v31 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v27 = *MEMORY[0x1E0DE4F60];
    v12 = 1;
    v30 = MEMORY[0x1E0DE4FE0] + 64;
    v28 = MEMORY[0x1E0DE4FB8] + 16;
    v29 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    while (1)
    {
      v13 = *v11;
      v43[0] = v30;
      v36[0] = v31;
      *(_QWORD *)((char *)v36 + *(_QWORD *)(v31 - 24)) = v29;
      v14 = (std::ios_base *)((char *)v36 + *(_QWORD *)(v36[0] - 24));
      std::ios_base::init(v14, &v36[1]);
      v14[1].__vftable = 0;
      v14[1].__fmtflags_ = -1;
      v36[0] = MEMORY[0x1E0DE4FE0] + 24;
      v43[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      v36[1] = v28;
      __p = 0u;
      v41 = 0u;
      v42 = 16;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"Feature ", 8);
      std::ostream::operator<<();
      objc_msgSend(v13, "uniqueIdentifier");
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = (void *)v15;
      if ((v42 & 0x10) != 0)
      {
        v18 = *((_QWORD *)&v41 + 1);
        v19 = (const void **)&v38;
        if (*((_QWORD *)&v41 + 1) < v39)
        {
          *((_QWORD *)&v41 + 1) = v39;
          v18 = v39;
          v19 = (const void **)&v38;
        }
      }
      else
      {
        if ((v42 & 8) == 0)
        {
          HIBYTE(v52) = 0;
          LOBYTE(__dst) = 0;
          if (!v15)
            goto LABEL_9;
          goto LABEL_22;
        }
        v18 = v37[2];
        v19 = (const void **)v37;
      }
      v20 = *v19;
      v21 = v18 - (_QWORD)*v19;
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v21 >= 0x17)
        break;
      HIBYTE(v52) = v18 - *(_BYTE *)v19;
      p_dst = (void **)&__dst;
      if (v21)
        goto LABEL_20;
LABEL_21:
      *((_BYTE *)p_dst + v21) = 0;
      if (!v16)
      {
LABEL_9:
        memset(&v34, 0, sizeof(v34));
        v17 = "";
        v35 = 4;
LABEL_23:
        std::string::__assign_external(&v34, v17);
        goto LABEL_25;
      }
LABEL_22:
      objc_msgSend(v13, "uniqueIdentifier");
      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v17 = (const std::string::value_type *)objc_msgSend(v3, "UTF8String");
      memset(&v34, 0, sizeof(v34));
      v35 = 4;
      if (v17)
        goto LABEL_23;
      *((_BYTE *)&v34.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v34, "<null>", 6);
LABEL_25:
      gdc::DebugTreeNode::addProperty((uint64_t)v10, (uint64_t)&__dst, (uint64_t)v33);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v34.__r_.__value_.__l.__data_);
        if (!v16)
          goto LABEL_28;
LABEL_27:

        goto LABEL_28;
      }
      if (v16)
        goto LABEL_27;
LABEL_28:
      if (SHIBYTE(v52) < 0)
        operator delete(__dst);

      v36[0] = v27;
      *(_QWORD *)((char *)v36 + *(_QWORD *)(v27 - 24)) = v26;
      v36[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v41) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AF4D64](v43);

      ++v11;
      ++v12;
      if (v11 == v32)
        return;
    }
    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v23 = v21 | 7;
    v24 = v23 + 1;
    p_dst = (void **)operator new(v23 + 1);
    v51 = (char *)v21;
    v52 = v24 | 0x8000000000000000;
    __dst = p_dst;
    v10 = v25;
LABEL_20:
    memmove(p_dst, v20, v21);
    goto LABEL_21;
  }
}

void sub_19F814654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;

  std::ostringstream::~ostringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void md::RouteAnnotationLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id *v14;
  id *v15;
  id v16;
  void *v17;
  char *v18;
  unint64_t *v19;
  void **v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  size_t v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82[3];
  uint64_t v83;

  v81 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v81 = (_QWORD *)v6;
  }
  v9 = *(_QWORD *)(a1 + 328);
  for (i = *(_QWORD *)(a1 + 336); i != v9; i -= 16)
  {
    v11 = *(std::__shared_weak_count **)(i - 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  *(_QWORD *)(a1 + 336) = v9;
  v14 = *(id **)(a1 + 296);
  v15 = *(id **)(a1 + 304);
  if (v14 != v15)
  {
    v75 = a3;
    do
    {
      v16 = *v14;
      v17 = v16;
      if (v16)
      {
        objc_msgSend(v16, "attributes");
      }
      else
      {
        v79 = 0u;
        v80 = 0u;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 544))(a1, &v79);
      v18 = (char *)operator new(0x40uLL);
      *((_QWORD *)v18 + 1) = 0;
      v19 = (unint64_t *)(v18 + 8);
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_1E42DAB40;
      *(_OWORD *)(v18 + 24) = 0u;
      v20 = (void **)(v18 + 24);
      *(_OWORD *)(v18 + 40) = 0u;
      *(_DWORD *)(v18 + 55) = 0;
      v21 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      *((_QWORD *)v18 + 3) = v21;
      if (v21)
      {
        *(_QWORD *)&v22 = -1;
        *((_QWORD *)&v22 + 1) = -1;
        v21[14] = v22;
        v21[15] = v22;
        v21[12] = v22;
        v21[13] = v22;
        v21[10] = v22;
        v21[11] = v22;
        v21[8] = v22;
        v21[9] = v22;
        v21[6] = v22;
        v21[7] = v22;
        v21[4] = v22;
        v21[5] = v22;
        v21[2] = v22;
        v21[3] = v22;
        *v21 = v22;
        v21[1] = v22;
      }
      *(_QWORD *)&v78 = v18 + 24;
      *((_QWORD *)&v78 + 1) = v18;
      v23 = v79;
      if (((*((_QWORD *)&v79 + 1) - (_QWORD)v79) & 0x7FFFFFFF8) != 0)
      {
        v24 = 0;
        v25 = 0;
        v26 = ((*((_QWORD *)&v79 + 1) - (_QWORD)v79) >> 3);
        v27 = v18[57];
        while (1)
        {
          v28 = v27;
          v29 = *v20;
          if (v27)
            break;
LABEL_25:
          v29[v28] = *(_QWORD *)(v23 + 8 * v24);
          v27 = v18[57] + 1;
          v18[57] = v27;
          ++v24;
          v25 = 1;
          if (v24 == v26)
          {
            v29 = *v20;
            v28 = v27;
LABEL_42:
            qsort(v29, v28, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_43;
          }
        }
        if (v27 > 0x1Fu)
        {
          do
          {
            v33 = 0;
            v34 = (int *)v29;
            while (1)
            {
              v35 = *v34;
              v34 += 2;
              if (v35 == *(_DWORD *)(v23 + 8 * v24))
                break;
              if (v28 == ++v33)
                goto LABEL_36;
            }
            HIDWORD(v29[v33]) = *(_DWORD *)(v23 + 8 * v24 + 4);
LABEL_36:
            ++v24;
          }
          while (v24 != v26);
        }
        else
        {
          do
          {
            v30 = 0;
            v31 = (int *)v29;
            while (1)
            {
              v32 = *v31;
              v31 += 2;
              if (v32 == *(_DWORD *)(v23 + 8 * v24))
                break;
              if (v28 == ++v30)
                goto LABEL_25;
            }
            HIDWORD(v29[v30]) = *(_DWORD *)(v23 + 8 * v24++ + 4);
          }
          while (v24 != v26);
        }
        if ((v25 & 1) != 0)
          goto LABEL_42;
      }
LABEL_43:
      v36 = *(_QWORD **)(a1 + 336);
      v37 = *(_QWORD *)(a1 + 344);
      if ((unint64_t)v36 >= v37)
      {
        v40 = *(_QWORD *)(a1 + 328);
        v41 = ((uint64_t)v36 - v40) >> 4;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 60)
          abort();
        v43 = v37 - v40;
        if (v43 >> 3 > v42)
          v42 = v43 >> 3;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
          v44 = 0xFFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), 16 * v44, 8);
          v46 = (_OWORD *)(v45 + 16 * v41);
          v47 = v45 + 16 * v44;
          if (v45)
          {
            v48 = *((_QWORD *)&v78 + 1);
            *v46 = v78;
            if (v48)
            {
              v49 = (unint64_t *)(v48 + 8);
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }
          }
        }
        else
        {
          v47 = 0;
          v46 = (_OWORD *)(16 * v41);
        }
        v39 = v46 + 1;
        v51 = *(_QWORD **)(a1 + 328);
        v52 = *(_QWORD **)(a1 + 336);
        if (v52 == v51)
        {
          *(_QWORD *)(a1 + 328) = v46;
          *(_QWORD *)(a1 + 336) = v39;
          v55 = *(_QWORD *)(a1 + 344);
          *(_QWORD *)(a1 + 344) = v47;
        }
        else
        {
          do
          {
            v53 = *((_OWORD *)v52 - 1);
            v52 -= 2;
            *--v46 = v53;
            *v52 = 0;
            v52[1] = 0;
          }
          while (v52 != v51);
          v52 = *(_QWORD **)(a1 + 328);
          v54 = *(_QWORD **)(a1 + 336);
          *(_QWORD *)(a1 + 328) = v46;
          *(_QWORD *)(a1 + 336) = v39;
          v55 = *(_QWORD *)(a1 + 344);
          *(_QWORD *)(a1 + 344) = v47;
          while (v54 != v52)
          {
            v56 = (std::__shared_weak_count *)*(v54 - 1);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v54 -= 2;
          }
        }
        if (v52)
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 352) + 40))(*(_QWORD *)(a1 + 352), v52, v55 - (_QWORD)v52);
        a3 = v75;
      }
      else
      {
        if (v36)
        {
          *v36 = v78;
          v36[1] = v18;
          do
            v38 = __ldxr(v19);
          while (__stxr(v38 + 1, v19));
        }
        v39 = v36 + 2;
      }
      *(_QWORD *)(a1 + 336) = v39;
      v76 = v78;
      if (*((_QWORD *)&v78 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v61 = v81;
      md::createFeatureAttributeSet((gss::Allocator *)v82, (uint64_t *)&v76);
      md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v77, a3, v82, v61);
      if (v82[0])
      {
        v82[1] = v82[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83 + 40))(v83, v82[0], v82[2] - v82[0]);
      }
      v62 = *(_OWORD **)(a2 + 8);
      if ((unint64_t)v62 >= *(_QWORD *)(a2 + 16))
      {
        v63 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v77);
      }
      else
      {
        if (v62)
        {
          *v62 = v77;
          v77 = 0uLL;
        }
        v63 = v62 + 1;
      }
      *(_QWORD *)(a2 + 8) = v63;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      if (!*((_QWORD *)&v77 + 1))
        goto LABEL_89;
      v65 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
        if (!*((_QWORD *)&v76 + 1))
          goto LABEL_95;
      }
      else
      {
LABEL_89:
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
        if (!*((_QWORD *)&v76 + 1))
          goto LABEL_95;
      }
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
LABEL_95:
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          v73 = v79;
          if (!(_QWORD)v79)
            goto LABEL_17;
LABEL_100:
          *((_QWORD *)&v79 + 1) = v73;
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v80 + 1) + 40))(*((_QWORD *)&v80 + 1), v73, v80 - v73);
          goto LABEL_17;
        }
      }
      v73 = v79;
      if ((_QWORD)v79)
        goto LABEL_100;
LABEL_17:

      ++v14;
    }
    while (v14 != v15);
  }
  v74 = v81;
  if (v81)
  {
    if (*((char *)v81 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v81[3] + 40))(v81[3], *v81, v81[2] & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v74, 0x1032C402ED93987);
  }
}

void sub_19F814D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  MEMORY[0x1A1AF4E00](v14, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

double md::RouteAnnotationLabelFeature::routeOffsetInMeters(md::RouteAnnotationLabelFeature *this)
{
  return *((double *)this + 46);
}

uint64_t md::RouteAnnotationLabelFeature::collisionPriority(md::RouteAnnotationLabelFeature *this)
{
  return *((unsigned __int8 *)this + 396);
}

void RouteAnnotationIconLabelPart::~RouteAnnotationIconLabelPart(RouteAnnotationIconLabelPart *this)
{
  *(_QWORD *)this = off_1E428B408;
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E428B408;
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, RouteAnnotationIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, this, 824);
}

uint64_t RouteAnnotationIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5)
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;

  if (*(_BYTE *)(a2 + 449))
    v10 = 3;
  else
    v10 = 4;
  v11 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 816))(a1, v10);
  md::IconLabelPart::layoutForDisplay(a1, a2, a3, a4, a5, v11, v12, v13);
  return 37;
}

uint64_t RouteAnnotationIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return 0;
  v5 = (unsigned __int8 *)(a1 + 768);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

uint64_t std::vector<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * {__strong}&,geo::memory_management_mode const&>(uint64_t *a1, id *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void (**v21)(char *);
  BOOL v22;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v10 = v8 + v7;
    if (v8)
    {
      v11 = v8;
      v12 = *a2;
      *(_QWORD *)v9 = &off_1E42B4CB0;
      *(_QWORD *)(v11 + 24 * v3 + 8) = v12;
    }
  }
  else
  {
    v10 = 0;
    v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  v13 = v9 + 24;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v13;
    v18 = (char *)a1[2];
    a1[2] = v10;
    if (!v14)
      return v13;
    goto LABEL_17;
  }
  do
  {
    *(_QWORD *)(v9 - 24) = &off_1E42B4CB0;
    v9 -= 24;
    *(_QWORD *)(v9 + 8) = 0;
    objc_storeStrong((id *)(v9 + 8), *((id *)v14 - 2));
    v16 = (void *)*((_QWORD *)v14 - 2);
    *((_QWORD *)v14 - 2) = 0;

    v14 -= 24;
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v13;
  v18 = (char *)a1[2];
  a1[2] = v10;
  if (v17 != v14)
  {
    v19 = v17 - 24;
    v20 = v17 - 24;
    do
    {
      v21 = *(void (***)(char *))v20;
      v20 -= 24;
      (*v21)(v19);
      v22 = v19 == v14;
      v19 = v20;
    }
    while (!v22);
  }
  if (v14)
LABEL_17:
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v14, v18 - v14);
  return v13;
}

uint64_t geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4CB0;

  return a1;
}

void geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4CB0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  id v27;
  BOOL v28;
  id v29;
  void *v30;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id *v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  uint64_t v85;
  id *v86;
  uint64_t v87;
  void *v88;
  id *v89;
  void *v90;
  BOOL v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (**v100)();
  id obj;

void sub_19F815E40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F815EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  id v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  int v9;
  int v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL8 v14;

  v4 = *(id *)(a1 + 8);
  v5 = objc_msgSend(v4, "groupItemVerticalDisplayOrder");
  v6 = objc_msgSend(*(id *)(a2 + 8), "groupItemVerticalDisplayOrder");

  v7 = *(id *)(a1 + 8);
  v8 = v7;
  if (v5 == v6)
  {
    v9 = objc_msgSend(v7, "groupItemHorizontalDisplayOrder");
    v10 = objc_msgSend(*(id *)(a2 + 8), "groupItemHorizontalDisplayOrder");

    v11 = *(id *)(a1 + 8);
    v8 = v11;
    if (v9 == v10)
    {
      v12 = objc_msgSend(v11, "collisionPriority");
      v13 = objc_msgSend(*(id *)(a2 + 8), "collisionPriority");
    }
    else
    {
      v12 = objc_msgSend(v11, "groupItemHorizontalDisplayOrder");
      v13 = objc_msgSend(*(id *)(a2 + 8), "groupItemHorizontalDisplayOrder");
    }
  }
  else
  {
    v12 = objc_msgSend(v7, "groupItemVerticalDisplayOrder");
    v13 = objc_msgSend(*(id *)(a2 + 8), "groupItemVerticalDisplayOrder");
  }
  v14 = v12 > v13;

  return v14;
}

void sub_19F815FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;

  v6 = md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a2, a1);
  v7 = md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a3, a2);
  if (v6)
  {
    if (v7)
    {
      v8 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a1, a2);
      if (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a3, a2))return;
      v8 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v8, a3);
  }
  else if (v7)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a2, a3);
    if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a2, a1))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a1, a2);
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(a1, a2, a3);
  if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a3, a4);
    if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a2, a3);
      if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a2, a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a1, a2);
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(a1, a2, a3, a4);
  if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a4, a5);
    if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a3, a4);
      if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a2, a3);
        if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a2, a1))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (**v16)();
  id obj;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 24;
      if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a2 - 24, a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(a1, v6);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v7 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(a1, a1 + 24, a1 + 48);
      v8 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v8, v7))
    {
      v16 = &off_1E42B4CB0;
      obj = *(id *)(v8 + 8);
      v12 = *(void **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;

      v13 = v9;
      do
      {
        v14 = a1 + v13;
        objc_storeStrong((id *)(a1 + v13 + 80), *(id *)(a1 + v13 + 56));
        v15 = *(void **)(a1 + v13 + 56);
        *(_QWORD *)(a1 + v13 + 56) = 0;

        if (v13 == -48)
        {
          v11 = a1;
          goto LABEL_7;
        }
        v13 -= 24;
      }
      while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v16, v14 + 24));
      v11 = a1 + v13 + 72;
LABEL_7:
      objc_storeStrong((id *)(v11 + 8), obj);

      if (++v10 == 8)
        return v8 + 24 == a2;
    }
    v7 = v8;
    v9 += 24;
    v8 += 24;
    if (v8 == a2)
      return 1;
  }
}

void sub_19F8163D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void md::RouteElevationSource::~RouteElevationSource(md::RouteElevationSource *this)
{
  *(_QWORD *)this = &off_1E426F1E8;
  *((_QWORD *)this + 12) = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E426F1E8;
  *((_QWORD *)this + 12) = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 8);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RouteElevationSource::elevationForCoordinate()
{
  return 0;
}

uint64_t md::RouteElevationSource::shouldDrapeOnTerrain(md::RouteElevationSource *this)
{
  return 0;
}

void md::FlyoverRouteElevationSource::~FlyoverRouteElevationSource(md::FlyoverRouteElevationSource *this)
{
  md::FlyoverRouteElevationSource::~FlyoverRouteElevationSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E426F8B8;
  v2 = (void *)*((_QWORD *)this + 28);
  if (v2 != *((void **)this + 30))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 25);
  while (v3)
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
    v6 = (std::__shared_weak_count *)v5[6];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
    operator delete(v4);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 104);
  *(_QWORD *)this = &off_1E426F1E8;
  *((_QWORD *)this + 12) = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 8);
}

uint64_t md::FlyoverRouteElevationSource::elevationForCoordinate(uint64_t a1, double *a2, _QWORD *a3)
{
  unint64_t v3;
  float v4;
  _QWORD *v7;
  double v8;
  long double v9;
  double v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  signed int v17;
  signed int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  md::GeoidModel *v29;
  double v30;
  unint64_t Undulation;
  double v32;
  unint64_t v33;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  char v38;
  int v39;
  double v40;
  double v41;
  int v42;
  double v43;
  uint64_t v44;
  long double v45;
  long double v46;
  double v47;
  double v48;
  double v49;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD v56[3];
  unint64_t v57;
  std::__shared_weak_count *v58;

  if (!*(_BYTE *)(a1 + 120))
  {
    v29 = *(md::GeoidModel **)(a1 + 96);
    if (!v29)
      goto LABEL_40;
    v30 = a2[2];
    Undulation = md::GeoidModel::getUndulation(v29, *a2, a2[1]);
    v32 = *(float *)&Undulation;
    if (!HIDWORD(Undulation))
      v32 = 0.0;
    v4 = v32 + v30;
    v33 = 0x100000000;
    return v33 & 0xFF00000000 | (v3 << 40) | LODWORD(v4);
  }
  v57 = 0;
  v58 = 0;
  v7 = (_QWORD *)a3[5];
  v3 = (unint64_t)(a3 + 6);
  if (v7 == a3 + 6)
    goto LABEL_40;
  v8 = a2[1];
  v4 = 3.3703e12;
  v9 = tan(*a2 * 0.00872664626 + 0.785398163);
  v10 = log(v9) * 0.159154943 + 0.5;
  v11 = (int8x8_t)a3[1];
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  v14 = *(_QWORD *)&v11 - 1;
  while (1)
  {
    if (v11)
    {
      v15 = *((unsigned __int8 *)v7 + 25);
      v16 = (double)(1 << v15);
      v17 = vcvtmd_s64_f64((v8 * 0.00277777778 + 0.5) * v16);
      v18 = (1 << v15) + ~vcvtmd_s64_f64(v10 * v16);
      v19 = (v18
           - 0x61C8864680B583EBLL
           + (((v15 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
           + (((v15 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v15 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
      v20 = (v17 - 0x61C8864680B583EBLL + (v19 << 6) + (v19 >> 2)) ^ v19;
      if (v13 > 1)
      {
        v21 = v20;
        if (v20 >= *(_QWORD *)&v11)
          v21 = v20 % *(_QWORD *)&v11;
      }
      else
      {
        v21 = v20 & v14;
      }
      v22 = *(uint64_t ***)(*a3 + 8 * v21);
      if (v22)
      {
        v23 = *v22;
        if (v23)
          break;
      }
    }
LABEL_30:
    v26 = (_QWORD *)v7[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (_QWORD *)v7[2];
        v28 = *v27 == (_QWORD)v7;
        v7 = v27;
      }
      while (!v28);
    }
    v7 = v27;
    if (v27 == (_QWORD *)v3)
      goto LABEL_40;
  }
  if (v13 < 2)
  {
    while (1)
    {
      v24 = v23[1];
      if (v20 == v24)
      {
        if (__PAIR64__(*((unsigned __int8 *)v23 + 17), *((unsigned __int8 *)v23 + 16)) == __PAIR64__(v15, 255)
          && *((_DWORD *)v23 + 5) == v18
          && *((_DWORD *)v23 + 6) == v17)
        {
          goto LABEL_42;
        }
      }
      else if ((v24 & v14) != v21)
      {
        goto LABEL_30;
      }
      v23 = (uint64_t *)*v23;
      if (!v23)
        goto LABEL_30;
    }
  }
  while (1)
  {
    v25 = v23[1];
    if (v20 == v25)
      break;
    if (v25 >= *(_QWORD *)&v11)
      v25 %= *(_QWORD *)&v11;
    if (v25 != v21)
      goto LABEL_30;
LABEL_22:
    v23 = (uint64_t *)*v23;
    if (!v23)
      goto LABEL_30;
  }
  if (__PAIR64__(*((unsigned __int8 *)v23 + 17), *((unsigned __int8 *)v23 + 16)) != __PAIR64__(v15, 255)
    || *((_DWORD *)v23 + 5) != v18
    || *((_DWORD *)v23 + 6) != v17)
  {
    goto LABEL_22;
  }
LABEL_42:
  v3 = v23[5];
  v35 = (std::__shared_weak_count *)v23[6];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v57 = v3;
  v58 = v35;
  v38 = 1;
  if (!v3)
  {
    v33 = 0;
LABEL_58:
    if (!v35)
      goto LABEL_63;
LABEL_59:
    v53 = (unint64_t *)&v35->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    goto LABEL_63;
  }
  v39 = 1 << *(_BYTE *)(v3 + 169);
  v40 = 1.0 / (double)v39;
  v41 = v40 * (double)*(int *)(v3 + 176);
  v42 = *(_DWORD *)(v3 + 172);
  v43 = a2[1];
  v44 = *((_QWORD *)a2 + 2);
  v45 = tan(*a2 * 0.00872664626 + 0.785398163);
  v46 = log(v45);
  v47 = v43 * 0.00277777778 + 0.5;
  v48 = v46 * 0.159154943 + 0.5;
  *(double *)v56 = v47;
  *(double *)&v56[1] = v48;
  v56[2] = v44;
  v49 = v40 * (double)(v39 + ~v42);
  if (v47 < v41 || v47 >= v41 + v40 || v48 < v49 || v48 >= v49 + v40)
  {
    v33 = 0;
    v38 = 1;
    goto LABEL_58;
  }
  v55 = (*(uint64_t (**)(unint64_t, _QWORD *, uint64_t))(*(_QWORD *)v3 + 56))(v3, v56, 1);
  v38 = 0;
  v4 = *(float *)&v55;
  v33 = v55 & 0xFFFFFFFF00000000;
  v3 = v55 >> 40;
  if (v35)
    goto LABEL_59;
LABEL_63:
  if ((v38 & 1) == 0)
    return v33 & 0xFF00000000 | (v3 << 40) | LODWORD(v4);
LABEL_40:
  v33 = 0;
  LODWORD(v4) &= 0xFFFFFF00;
  return v33 & 0xFF00000000 | (v3 << 40) | LODWORD(v4);
}

void sub_19F816890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverRouteElevationSource::shouldDrapeOnTerrain(md::FlyoverRouteElevationSource *this)
{
  return *((unsigned __int8 *)this + 120);
}

void md::StandardRouteElevationSource::~StandardRouteElevationSource(md::StandardRouteElevationSource *this)
{
  *(_QWORD *)this = &off_1E426F1E8;
  *((_QWORD *)this + 12) = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E426F1E8;
  *((_QWORD *)this + 12) = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 8);
  JUMPOUT(0x1A1AF4E00);
}

md::GeoidModel *md::StandardRouteElevationSource::elevationForCoordinate(uint64_t a1, double *a2)
{
  md::GeoidModel *result;
  double v3;
  unint64_t Undulation;
  double v5;
  unsigned int v6;

  result = *(md::GeoidModel **)(a1 + 96);
  if (result)
  {
    v3 = a2[2];
    Undulation = md::GeoidModel::getUndulation(result, *a2, a2[1]);
    v5 = *(float *)&Undulation;
    if (!HIDWORD(Undulation))
      v5 = 0.0;
    *(float *)&v6 = v5 + v3;
    return (md::GeoidModel *)(v6 | 0x100000000);
  }
  return result;
}

uint64_t md::RouteElevationSource::RouteElevationSource(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)a1 = &off_1E426F1E8;
  *(_OWORD *)(a1 + 8) = *MEMORY[0x1E0D26CD8];
  if (*(_QWORD *)(a1 + 8))
    v4 = *(_QWORD *)(a1 + 16) == 0;
  else
    v4 = 1;
  if (!v4)
    *(_BYTE *)(a1 + 24) = GEOConfigGetBOOL();
  *(_QWORD *)(a1 + 32) = 0;
  v5 = operator new(0x20uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E428A338;
  *((_BYTE *)v5 + 24) = 1;
  *(_QWORD *)(a1 + 40) = v5 + 3;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "activeTileGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "activeTileSetForTileType:scale:", 92, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 88) = v8 != 0;

  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 88))
  {
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a1 + 96) = objc_msgSend(v9, "undulationModel");

  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  v13[0] = &off_1E427A260;
  v13[1] = a1;
  v14 = v13;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue((_QWORD *)(a1 + 8), v3, v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_14;
  }
  if (v14)
  {
    v11 = 5;
LABEL_14:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  return a1;
}

void sub_19F816BFC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A260;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A260;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 8);
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeTileGroup");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activeTileSetForTileType:scale:", 92, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(v1 + 88) = v3 != 0;

  if (*(_BYTE *)(v1 + 24) && *(_BYTE *)(v1 + 88))
  {
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(v1 + 96) = objc_msgSend(v5, "undulationModel");

  }
  else
  {
    *(_QWORD *)(v1 + 96) = 0;
  }
}

void sub_19F816D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::DashTexture>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DACC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DashTexture>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DACC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DashTexture>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v3, *(_QWORD *)(a1 + 40) - v3);
  }
  return result;
}

void sub_19F816ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F816EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_19F816F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F817068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::RealisticCommandBufferSelector::~RealisticCommandBufferSelector(md::RealisticCommandBufferSelector *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429A8C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429A8C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::CommandBufferSelector::~CommandBufferSelector(md::CommandBufferSelector *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429A8C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429A8C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CommandBufferSelector::_getPassID(md::CommandBufferSelector *this)
{
  return 0;
}

uint64_t md::CommandBufferSelector::_getCommandBufferID(md::CommandBufferSelector *this)
{
  return 0;
}

void md::mun::MeshResourceFetcher::~MeshResourceFetcher(md::mun::MeshResourceFetcher *this)
{
  md::mun::MeshResourceFetcher::~MeshResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42ABB58;
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cancelAllForClient:", *((_QWORD *)this + 56));

  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "closeForClient:", *((_QWORD *)this + 56));

  *((_QWORD *)this + 58) = &off_1E42B5090;
  *((_QWORD *)this + 55) = &off_1E42B5490;

  gdc::ResourceFetcher::~ResourceFetcher(this);
}

void md::mun::MeshResourceFetcher::fetchResources(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  const gdc::ResourceKey *v6;
  uint64_t *v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_signpost_id_t v43;
  NSObject *v44;
  NSObject *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  char *v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  size_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _BYTE *v73;
  __int128 *v74;
  _OWORD *v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  id v86;
  uint64_t v87;
  id v88;
  _QWORD v89[4];
  id v90;
  uint64_t v91;
  os_signpost_id_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD v99[5];
  __int128 v100;
  uint64_t v101;
  void *v102;
  char *v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE v106[32];
  uint64_t v107;
  __int128 v108;
  uint8_t buf[4];
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  unsigned int v118;
  __int16 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v86 = a4;
  v7 = *(uint64_t **)(a2 + 16);
  if (v7)
  {
    v84 = a1;
    while (1)
    {
      v8 = v106;
      v101 = v7[2];
      v102 = v106;
      v103 = v106;
      v104 = v106;
      v105 = 32;
      v9 = (char *)v7[3];
      v10 = (char *)v7[4];
      v11 = v10 - v9;
      if ((unint64_t)(v10 - v9) < 0x21)
        goto LABEL_25;
      v12 = v11 <= 0x40 ? 64 : v10 - v9;
      v8 = malloc_type_malloc(v12, 0x100004077774924uLL);
      v13 = (char *)v102;
      v14 = v103;
      if (v102 != v103)
        break;
LABEL_24:
      v102 = v8;
      v103 = v8;
      v105 = v12;
LABEL_25:
      if (v9 == v10)
        goto LABEL_43;
      if (v11 < 8)
      {
        v29 = v8;
        goto LABEL_41;
      }
      if ((unint64_t)(v8 - v9) < 0x20)
      {
        v29 = v8;
        goto LABEL_41;
      }
      if (v11 >= 0x20)
      {
        v28 = v11 & 0xFFFFFFFFFFFFFFE0;
        v30 = (__int128 *)(v9 + 16);
        v31 = v8 + 16;
        v32 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 32;
        }
        while (v32);
        if (v11 == v28)
          goto LABEL_42;
        if ((v11 & 0x18) == 0)
        {
          v9 += v28;
          v29 = &v8[v28];
          goto LABEL_41;
        }
      }
      else
      {
        v28 = 0;
      }
      v34 = v11 & 0xFFFFFFFFFFFFFFF8;
      v29 = &v8[v11 & 0xFFFFFFFFFFFFFFF8];
      v35 = v28 - (v11 & 0xFFFFFFFFFFFFFFF8);
      v36 = (uint64_t *)&v9[v28];
      v37 = &v8[v28];
      do
      {
        v38 = *v36++;
        *v37++ = v38;
        v35 += 8;
      }
      while (v35);
      if (v11 == v34)
        goto LABEL_42;
      v9 += v34;
      do
      {
LABEL_41:
        v39 = *v9++;
        *v29++ = v39;
      }
      while (v9 != v10);
LABEL_42:
      v8 = v103;
LABEL_43:
      v40 = v7[11];
      v103 = &v8[v11];
      v107 = v40;
      v108 = *((_OWORD *)v7 + 6);
      v41 = v7[14];
      v121 = 0uLL;
      *((_QWORD *)&v121 + 1) = v42;
      v43 = v108;
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v44 = (id)GEOGetVectorKitResourceLoadingLog_log;
      v45 = v44;
      if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v44))
      {
        *(_DWORD *)buf = 134219264;
        v110 = *(_QWORD *)((char *)&v121 + 1);
        v111 = 1024;
        v112 = *(_DWORD *)((char *)&v121 + 9);
        v113 = 1024;
        v114 = *(unsigned __int16 *)((char *)&v121 + 13);
        v115 = 1024;
        v116 = HIBYTE(v121) & 0x1F;
        v117 = 1024;
        v118 = (*(unsigned __int16 *)((char *)&v121 + 13) | (HIBYTE(v121) << 16)) >> 21;
        v119 = 2048;
        v120 = *((_QWORD *)&v108 + 1);
        _os_signpost_emit_with_name_impl(&dword_19F029000, v45, OS_SIGNPOST_INTERVAL_BEGIN, v43, "ResourceFetch", "pointId=%llu buildId=%d bucketId=%d cameraId=%d lod=%d parent_signpost=%llu", buf, 0x2Eu);
      }

      v46 = atomic_load((unint64_t *)(a1 + 104));
      if (v46)
        (*(void (**)(unint64_t))(*(_QWORD *)v46 + 16))(v46);
      objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = HIDWORD(v101);
      v49 = *(id *)(a1 + 448);
      v50 = qos_class_self();
      v87 = v108;
      v88 = *(id *)(a1 + 472);
      v51 = *(id *)(a3 + 16);
      v89[0] = MEMORY[0x1E0C809B0];
      v89[1] = 3321888768;
      v89[2] = ___ZN2md3mun19MeshResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS4_15ResourceKeyHashENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
      v89[3] = &unk_1E42E9488;
      v91 = a1;
      v92 = v43;
      v52 = (char *)v102;
      v93 = v41;
      v94 = v101;
      v95 = v99;
      v96 = (char *)v99;
      v53 = v103;
      v54 = v103 - (_BYTE *)v102;
      v55 = v99;
      v97 = v99;
      v98 = 32;
      if ((unint64_t)(v103 - (_BYTE *)v102) >= 0x21)
      {
        if (v54 <= 0x40)
          v56 = 64;
        else
          v56 = v103 - (_BYTE *)v102;
        v55 = malloc_type_malloc(v56, 0x100004077774924uLL);
        v57 = (char *)v95;
        v58 = v96;
        if (v95 == v96)
          goto LABEL_70;
        v59 = v96 - (_BYTE *)v95;
        if ((unint64_t)(v96 - (_BYTE *)v95) < 8)
        {
          v60 = v55;
        }
        else
        {
          v60 = v55;
          if ((unint64_t)((char *)v55 - (_BYTE *)v95) >= 0x20)
          {
            if (v59 < 0x20)
            {
              v61 = 0;
LABEL_64:
              v66 = v59 & 0xFFFFFFFFFFFFFFF8;
              v60 = (char *)v55 + (v59 & 0xFFFFFFFFFFFFFFF8);
              v67 = v61 - (v59 & 0xFFFFFFFFFFFFFFF8);
              v68 = &v57[v61];
              v69 = (_QWORD *)((char *)v55 + v61);
              do
              {
                v70 = *(_QWORD *)v68;
                v68 += 8;
                *v69++ = v70;
                v67 += 8;
              }
              while (v67);
              if (v59 != v66)
              {
                v57 += v66;
                goto LABEL_69;
              }
LABEL_70:
              v95 = v55;
              v96 = (char *)v55;
              v98 = v56;
              goto LABEL_71;
            }
            v61 = v59 & 0xFFFFFFFFFFFFFFE0;
            v62 = (__int128 *)((char *)v95 + 16);
            v63 = v55 + 2;
            v64 = v59 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v65 = *v62;
              *(v63 - 1) = *(v62 - 1);
              *v63 = v65;
              v62 += 2;
              v63 += 2;
              v64 -= 32;
            }
            while (v64);
            if (v59 == v61)
              goto LABEL_70;
            if ((v59 & 0x18) != 0)
              goto LABEL_64;
            v57 += v61;
            v60 = (char *)v55 + v61;
          }
        }
        do
        {
LABEL_69:
          v71 = *v57++;
          *v60++ = v71;
        }
        while (v57 != v58);
        goto LABEL_70;
      }
LABEL_71:
      if (v52 != v53)
      {
        if (v54 < 8)
        {
          v73 = v55;
        }
        else if ((unint64_t)((char *)v55 - v52) < 0x20)
        {
          v73 = v55;
        }
        else
        {
          if (v54 < 0x20)
          {
            v72 = 0;
LABEL_82:
            v78 = v54 & 0xFFFFFFFFFFFFFFF8;
            v73 = (char *)v55 + (v54 & 0xFFFFFFFFFFFFFFF8);
            v79 = v72 - (v54 & 0xFFFFFFFFFFFFFFF8);
            v80 = (uint64_t *)&v52[v72];
            v81 = (_QWORD *)((char *)v55 + v72);
            do
            {
              v82 = *v80++;
              *v81++ = v82;
              v79 += 8;
            }
            while (v79);
            if (v54 != v78)
            {
              v52 += v78;
              goto LABEL_87;
            }
LABEL_88:
            v55 = v96;
            goto LABEL_89;
          }
          v72 = v54 & 0xFFFFFFFFFFFFFFE0;
          v74 = (__int128 *)(v52 + 16);
          v75 = v55 + 2;
          v76 = v54 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v77 = *v74;
            *(v75 - 1) = *(v74 - 1);
            *v75 = v77;
            v74 += 2;
            v75 += 2;
            v76 -= 32;
          }
          while (v76);
          if (v54 == v72)
            goto LABEL_88;
          if ((v54 & 0x18) != 0)
            goto LABEL_82;
          v52 += v72;
          v73 = (char *)v55 + v72;
        }
        do
        {
LABEL_87:
          v83 = *v52++;
          *v73++ = v83;
        }
        while (v52 != v53);
        goto LABEL_88;
      }
LABEL_89:
      v96 = (char *)v55 + v54;
      v99[4] = v107;
      v100 = v108;
      v90 = v86;
      objc_msgSend(v47, "loadKey:priority:forClient:options:reason:qos:signpostID:auditToken:callbackQ:beginNetwork:callback:", &v121, v48, v49, 3, 1, v50, v87, v88, v51, 0, v89);
      a1 = v84;

      if (v95 != v97)
        free(v95);
      if (v102 != v104)
        free(v102);
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_93;
    }
    v15 = v103 - (_BYTE *)v102;
    if ((unint64_t)(v103 - (_BYTE *)v102) < 8)
    {
      v16 = v8;
    }
    else
    {
      v16 = v8;
      if ((unint64_t)(v8 - (_BYTE *)v102) >= 0x20)
      {
        if (v15 < 0x20)
        {
          v17 = 0;
LABEL_18:
          v22 = v15 & 0xFFFFFFFFFFFFFFF8;
          v16 = &v8[v15 & 0xFFFFFFFFFFFFFFF8];
          v23 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
          v24 = (uint64_t *)&v13[v17];
          v25 = &v8[v17];
          do
          {
            v26 = *v24++;
            *v25++ = v26;
            v23 += 8;
          }
          while (v23);
          if (v15 == v22)
            goto LABEL_24;
          v13 += v22;
          goto LABEL_23;
        }
        v17 = v15 & 0xFFFFFFFFFFFFFFE0;
        v18 = (__int128 *)((char *)v102 + 16);
        v19 = v8 + 16;
        v20 = v15 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 32;
        }
        while (v20);
        if (v15 == v17)
          goto LABEL_24;
        if ((v15 & 0x18) != 0)
          goto LABEL_18;
        v13 += v17;
        v16 = &v8[v17];
      }
    }
    do
    {
LABEL_23:
      v27 = *v13++;
      *v16++ = v27;
    }
    while (v13 != v14);
    goto LABEL_24;
  }
LABEL_93:

}

void sub_19F817914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,void *a50)
{
  void *v50;
  void *v51;
  void *v52;

  if (a48 != a50)
    free(a48);

  _Unwind_Resume(a1);
}

void md::mun::MeshResourceFetcher::cancelResources(uint64_t a1, uint64_t a2)
{
  const gdc::ResourceKey *v4;
  void *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  size_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[5];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(uint64_t **)(a2 + 16);
  if (v6)
  {
    while (1)
    {
      v42 = v6[2];
      v43 = v47;
      v44 = (char *)v47;
      v45 = v47;
      v46 = 32;
      v8 = (char *)v6[3];
      v7 = (char *)v6[4];
      v9 = v7 - v8;
      v10 = v47;
      if ((unint64_t)(v7 - v8) < 0x21)
        goto LABEL_25;
      v11 = v9 <= 0x40 ? 64 : v7 - v8;
      v10 = malloc_type_malloc(v11, 0x100004077774924uLL);
      v12 = (char *)v43;
      v13 = v44;
      if (v43 != v44)
        break;
LABEL_24:
      v43 = v10;
      v44 = (char *)v10;
      v46 = v11;
LABEL_25:
      if (v8 != v7)
      {
        if (v9 < 8)
        {
          v28 = v10;
        }
        else if ((unint64_t)((char *)v10 - v8) < 0x20)
        {
          v28 = v10;
        }
        else
        {
          if (v9 < 0x20)
          {
            v27 = 0;
LABEL_36:
            v33 = v9 & 0xFFFFFFFFFFFFFFF8;
            v28 = (char *)v10 + (v9 & 0xFFFFFFFFFFFFFFF8);
            v34 = v27 - (v9 & 0xFFFFFFFFFFFFFFF8);
            v35 = (uint64_t *)&v8[v27];
            v36 = (_QWORD *)((char *)v10 + v27);
            do
            {
              v37 = *v35++;
              *v36++ = v37;
              v34 += 8;
            }
            while (v34);
            if (v9 != v33)
            {
              v8 += v33;
              goto LABEL_41;
            }
LABEL_42:
            v10 = v44;
            goto LABEL_43;
          }
          v27 = v9 & 0xFFFFFFFFFFFFFFE0;
          v29 = (__int128 *)(v8 + 16);
          v30 = v10 + 2;
          v31 = v9 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v32 = *v29;
            *(v30 - 1) = *(v29 - 1);
            *v30 = v32;
            v29 += 2;
            v30 += 2;
            v31 -= 32;
          }
          while (v31);
          if (v9 == v27)
            goto LABEL_42;
          if ((v9 & 0x18) != 0)
            goto LABEL_36;
          v8 += v27;
          v28 = (char *)v10 + v27;
        }
        do
        {
LABEL_41:
          v38 = *v8++;
          *v28++ = v38;
        }
        while (v8 != v7);
        goto LABEL_42;
      }
LABEL_43:
      v39 = v6[11];
      v44 = (char *)v10 + v9;
      v47[4] = v39;
      v48 = *((_OWORD *)v6 + 6);
      v49 = 0;
      v50 = 0;
      v50 = v40;
      v41 = *(id *)(a1 + 448);
      objc_msgSend(v5, "cancelKey:forClient:", &v49, v41);

      if (v43 != v45)
        free(v43);
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_45;
    }
    v14 = v44 - (_BYTE *)v43;
    if ((unint64_t)(v44 - (_BYTE *)v43) < 8)
    {
      v15 = v10;
    }
    else
    {
      v15 = v10;
      if ((unint64_t)((char *)v10 - (_BYTE *)v43) >= 0x20)
      {
        if (v14 < 0x20)
        {
          v16 = 0;
LABEL_18:
          v21 = v14 & 0xFFFFFFFFFFFFFFF8;
          v15 = (char *)v10 + (v14 & 0xFFFFFFFFFFFFFFF8);
          v22 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
          v23 = (uint64_t *)&v12[v16];
          v24 = (_QWORD *)((char *)v10 + v16);
          do
          {
            v25 = *v23++;
            *v24++ = v25;
            v22 += 8;
          }
          while (v22);
          if (v14 == v21)
            goto LABEL_24;
          v12 += v21;
          goto LABEL_23;
        }
        v16 = v14 & 0xFFFFFFFFFFFFFFE0;
        v17 = (__int128 *)((char *)v43 + 16);
        v18 = v10 + 2;
        v19 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v20 = *v17;
          *(v18 - 1) = *(v17 - 1);
          *v18 = v20;
          v17 += 2;
          v18 += 2;
          v19 -= 32;
        }
        while (v19);
        if (v14 == v16)
          goto LABEL_24;
        if ((v14 & 0x18) != 0)
          goto LABEL_18;
        v12 += v16;
        v15 = (char *)v10 + v16;
      }
    }
    do
    {
LABEL_23:
      v26 = *v12++;
      *v15++ = v26;
    }
    while (v12 != v13);
    goto LABEL_24;
  }
LABEL_45:

}

void sub_19F817C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void md::mun::MeshResourceFetcher::cancelResource(md::mun::MeshResourceFetcher *this, const gdc::ResourceKey *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v5[1] = v3;
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "cancelKey:forClient:", v5, *((_QWORD *)this + 56));

}

void sub_19F817D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::mun::MeshResourceFetcher::cancelAllResources(md::mun::MeshResourceFetcher *this)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cancelAllForClientSynchronous:", *((_QWORD *)this + 56));

}

void sub_19F817D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::mun::MeshResourceFetcher::expireResource(md::mun::MeshResourceFetcher *this, const gdc::ResourceKey *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[7];

  v6[6] = *MEMORY[0x1E0C80C00];
  v4 = v3;
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN2md3mun19MeshResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke;
  v6[3] = &__block_descriptor_48_e723_B24__0r___GEOTileKey_b7b1_____GEOStandardTileKey_b40b6b26b26b14b4b4___GEOGloriaQuadIDTileKey_b6b64b14b4______b10b10b12_I____GEORegionalResourceKey_b32b8b6b8b8b1b57___GEOSputnikMetadataKey_b32b24b14b8b42___GEOFlyoverKey_b6b26b26b8b24b14b8b8___GEOTransitLineSelectionKey_b6b25b25b64___GEOPolygonSelectionKey_b6b25b25b64___GEORoadSelectionKey_b6b25b25b64___GEOContourLinesKey_b6b26b26b4b8b50___GEOTileOverlayKey_b6b26b26b8b32b16b6___GEOIdentifiedResourceKey_QCCb1b39___GEOMuninMeshKey_b64b32b16b5b3___GEOVisualLocalizationTrackKey_SCb16b6b26b26b22___GEOVisualLocalizationMetadataKey_b6b9b25b6b26b26b22___GEOVisualLocalizationDataKey_QCb5b21b21b1___GEOS2TileKey_b6b26b26b3b14b4b4b37___GEOLiveTileKey_b6b26b26b14b4b4b4b36___8d16l;
  v6[4] = v2;
  v6[5] = v4;
  objc_msgSend(v5, "expireTilesWithPredicate:", v6);

}

void sub_19F817E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::tileKeyFromResourceKey(_anonymous_namespace_ *this, const gdc::ResourceKey *a2)
{
  void *v3[9];

  gdc::ResourceKey::keyData((gdc::ResourceKey *)v3, this);
  if (v3[0] != v3[2])
    free(v3[0]);
  return GEOMuninMeshTileKeyMake();
}

uint64_t ___ZN2md3mun19MeshResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke()
{
  return GEOTileKeyEquals();
}

void ___ZN2md3mun19MeshResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS4_15ResourceKeyHashENS2_8equal_toIS5_EENS2_9allocatorINS2_4pairIKS5_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v9;
  unint64_t *v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  void *v14;
  void *v15;
  id v16;
  std::__shared_weak_count *v17;
  id v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  void *v23;
  char v24;
  unsigned __int8 v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unsigned __int8 v29;
  void *v30;
  void *v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  char *v41;
  id v42;
  const char *v43;
  size_t v44;
  size_t v45;
  __int128 *p_dst;
  NSObject *v47;
  NSObject *v48;
  os_signpost_id_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  NSObject *v59;
  os_signpost_id_t v60;
  id v61;
  unint64_t v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  id v67;
  void *v68;
  id v69;
  unint64_t *v70;
  id v71;
  id v72;
  __int128 __dst;
  unint64_t v74;
  uint8_t buf[8];
  std::__shared_weak_count *v76;
  char v77;
  void *v78;
  void *v79;
  id v80;
  uint8_t v81[4];
  _BYTE v82[12];
  char v83;
  void *v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v71 = a3;
  v9 = a5;
  v72 = a6;
  v10 = (unint64_t *)a1[5];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v70 = v10;
  v11 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v12 = v11;
  v13 = a1[6];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v12, OS_SIGNPOST_INTERVAL_END, v13, "ResourceFetch", (const char *)&unk_1A0189141, buf, 2u);
  }

  if (v71)
  {
    objc_msgSend(v71, "decodedRepresentation");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      v69 = v14;
    }
    else
    {
      v80 = v9;
      objc_msgSend(v71, "readDataWithError:", &v80);
      v69 = (id)objc_claimAutoreleasedReturnValue();
      v16 = v80;

      v9 = v16;
    }

  }
  else
  {
    v69 = 0;
  }
  *(_QWORD *)buf = 0;
  v76 = 0;
  v77 = 0;
  v17 = (std::__shared_weak_count *)operator new(0x38uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE110;
  v18 = v69;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B0670;
  v17[1].__shared_owners_ = (uint64_t)&off_1E42B5310;
  v17[1].__shared_weak_owners_ = (uint64_t)v18;
  v67 = v18;
  v19 = v76;
  *(_QWORD *)buf = v17 + 1;
  v76 = v17;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  objc_msgSend(v72, "objectForKey:", *MEMORY[0x1E0D26BF0], v67);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v22)
  {
    v24 = objc_msgSend(v22, "unsignedIntValue");
    if ((v24 + 1) >= 7u)
      v25 = 0;
    else
      v25 = 0x2040302010002uLL >> (8 * (v24 + 1));
  }
  else
  {
    v25 = 0;
  }

  objc_msgSend(v72, "objectForKey:", *MEMORY[0x1E0D26BF8]);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v26)
  {
    v28 = objc_msgSend(v26, "unsignedIntValue");
    if (v28 >= 3)
      v29 = 0;
    else
      v29 = 0x30102u >> (8 * v28);
  }
  else
  {
    v29 = 0;
  }

  if (!v9)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v47 = (id)GEOGetVectorKitResourceLoadingLog_log;
    v48 = v47;
    v49 = a1[6];
    if (v49 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
    {
      v50 = a1[19];
      *(_DWORD *)v81 = 134217984;
      *(_QWORD *)v82 = v50;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v49, "CreateResource", "parent_signpost=%llu", v81, 0xCu);
    }

    if (((*(uint64_t (**)(unint64_t *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint8_t *))(*v70 + 128))(v70, a1[7], a1 + 8, v25, v29, 0, 0, buf) & 1) != 0)
    {
      v51 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.C3mMesh"), -1, 0);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v56 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        v57 = a1[7];
        *(_DWORD *)v81 = 134217984;
        *(_QWORD *)v82 = v57;
        _os_log_impl(&dword_19F029000, v56, OS_LOG_TYPE_ERROR, "MuninMeshResourceFetcher failed to create Resource. %llu", v81, 0xCu);
      }

    }
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v58 = (id)GEOGetVectorKitResourceLoadingLog_log;
    v59 = v58;
    v60 = a1[6];
    if (v60 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v58))
    {
      *(_WORD *)v81 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v59, OS_SIGNPOST_INTERVAL_END, v60, "CreateResource", (const char *)&unk_1A0189141, v81, 2u);
    }

    v61 = v51;
    v62 = atomic_load(v70 + 13);
    if (v62)
      (*(void (**)(unint64_t, id))(*(_QWORD *)v62 + 24))(v62, v61);

    goto LABEL_78;
  }
  if (objc_msgSend(v9, "code") == -2)
  {
    objc_msgSend(v9, "domain");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    GEOErrorDomain();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "isEqualToString:", v31);

    if (v32)
    {
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v33 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        v34 = a1[7];
        *(_DWORD *)v81 = 134217984;
        *(_QWORD *)v82 = v34;
        _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_INFO, "MuninMeshResourceFetcher received cancelled resource. %llu", v81, 0xCu);
      }

      (*(void (**)(unint64_t *, _QWORD, _QWORD *))(*v70 + 120))(v70, a1[7], a1 + 8);
      v35 = atomic_load(v70 + 13);
      if (v35)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v35 + 24))(v35, 0);
      goto LABEL_78;
    }
  }
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v36 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    v37 = a1[7];
    *(_DWORD *)v81 = 134217984;
    *(_QWORD *)v82 = v37;
    _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, "MuninMeshResourceFetcher received failed Resource. %llu", v81, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0D273F0], "sharedReachability");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "reportLoadFailure:", v9);

  v39 = objc_msgSend(v9, "code");
  objc_msgSend(v9, "domain");
  v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v41 = (char *)objc_msgSend(v40, "UTF8String");
  objc_msgSend(v9, "description");
  v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v43 = (const char *)objc_msgSend(v42, "UTF8String");
  v44 = strlen(v43);
  if (v44 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v52 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v52 = v44 | 7;
    v53 = v52 + 1;
    p_dst = (__int128 *)operator new(v52 + 1);
    *((_QWORD *)&__dst + 1) = v45;
    v74 = v53 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v74) = v44;
    p_dst = &__dst;
    if (!v44)
      goto LABEL_56;
  }
  memmove(p_dst, v43, v45);
LABEL_56:
  *((_BYTE *)p_dst + v45) = 0;
  gdc::Error::Error((uint64_t)v81, v39, v41, &__dst);
  if (SHIBYTE(v74) < 0)
    operator delete((void *)__dst);

  (*(void (**)(unint64_t *, _QWORD, _QWORD *, uint8_t *))(*v70 + 112))(v70, a1[7], a1 + 8, v81);
  v54 = v9;
  v55 = atomic_load(v70 + 13);
  if (v55)
    (*(void (**)(unint64_t, id))(*(_QWORD *)v55 + 24))(v55, v54);

  if (v85 < 0)
  {
    operator delete(v84);
    if ((v83 & 0x80000000) == 0)
      goto LABEL_78;
  }
  else if ((v83 & 0x80000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(*(void **)&v82[4]);
LABEL_78:
  v63 = a1[4];
  if (v63)
    dispatch_semaphore_signal(v63);
  if (v77)
  {
    if (v78 != v79)
      free(v78);
    v77 = 0;
  }
  v64 = v76;
  if (v76)
  {
    v65 = (unint64_t *)&v76->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

}

void sub_19F818740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a20);

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_64c23_ZTSN3gdc11ResourceKeyE(__n128 *a1, __n128 *a2)
{
  __int8 *v4;
  __int8 *v5;
  __int8 *v6;
  unint64_t v7;
  size_t v8;
  __int8 *v9;
  __int8 *v10;
  unint64_t v11;
  __int8 *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  __int8 *v21;
  uint64_t v22;
  __int8 v23;
  unint64_t v24;
  __int8 *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  __int8 *v33;
  uint64_t v34;
  __int8 v35;
  __n128 result;

  v4 = &a1[6].n128_i8[8];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[4].n128_u64[1] = (unint64_t)v4;
  a1[5].n128_u64[0] = (unint64_t)v4;
  a1[5].n128_u64[1] = (unint64_t)v4;
  a1[6].n128_u64[0] = 32;
  v5 = (__int8 *)a2[4].n128_u64[1];
  v6 = (__int8 *)a2[5].n128_u64[0];
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    v4 = (__int8 *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = (__int8 *)a1[4].n128_u64[1];
    v10 = (__int8 *)a1[5].n128_u64[0];
    if (v9 == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = v4;
      goto LABEL_20;
    }
    v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = v4 + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &v4[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    a1[4].n128_u64[1] = (unint64_t)v4;
    a1[5].n128_u64[0] = (unint64_t)v4;
    a1[6].n128_u64[0] = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = v4 + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &v4[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    v4 = (__int8 *)a1[5].n128_u64[0];
  }
  a1[5].n128_u64[0] = (unint64_t)&v4[v7];
  a1[8].n128_u64[1] = a2[8].n128_u64[1];
  result = a2[9];
  a1[9] = result;
  return result;
}

void __destroy_helper_block_ea8_64c23_ZTSN3gdc11ResourceKeyE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2 != *(void **)(a1 + 88))
    free(v2);
}

void gdc::Error::~Error(void **this)
{
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

void gdc::RawResourceSourceData::~RawResourceSourceData(gdc::RawResourceSourceData *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*((_BYTE *)this + 16))
  {
    v2 = (void *)*((_QWORD *)this + 4);
    if (v2 != *((void **)this + 6))
      free(v2);
    *((_BYTE *)this + 16) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__shared_ptr_emplace<gdc::DataObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::DataObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F818C28(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  *(_QWORD *)(v1 + 464) = &off_1E42B5090;
  *(_QWORD *)(v1 + 440) = &off_1E42B5490;

  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TextureResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextureResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TextureResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::MCDecoder<md::mun::MuninMCMeshResource>::~MCDecoder(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42AFCF0;
  *(_QWORD *)(a1 + 8) = &off_1E429DEB8;
  *(_QWORD *)(a1 + 16) = &off_1E42B4D50;

  return a1;
}

void md::MCDecoder<md::mun::MuninMCMeshResource>::~MCDecoder(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42AFCF0;
  *(_QWORD *)(a1 + 8) = &off_1E429DEB8;
  *(_QWORD *)(a1 + 16) = &off_1E42B4D50;

  JUMPOUT(0x1A1AF4E00);
}

void md::MCDecoder<md::mun::MuninMCMeshResource>::decode(uint64_t a1@<X0>, const gdc::ResourceKey *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  const gdc::ResourceKey *v5;
  NSObject *v7;
  NSObject *v8;
  const gdc::ResourceKey *v9;
  os_signpost_id_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  void **v19;
  unint64_t v20;
  id *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  id v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  const gdc::ResourceKey *v48;
  char *v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *no_copy;
  unint64_t i;
  char v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  id *v83;
  void **v84;
  char *v86;
  char *v87;
  char *v88;
  _OWORD __src[47];
  __int16 v90[6];
  _OWORD v91[48];
  _QWORD v92[3];
  _QWORD *v93;
  uint64_t (**v94)();
  const gdc::ResourceKey *v95;
  uint64_t (***v96)();
  _QWORD v97[3];
  _QWORD *v98;
  uint8_t buf[768];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v4 = a3;
  v5 = a2;
  v94 = &off_1E42D49A8;
  v95 = a2;
  v96 = &v94;
  v92[0] = &off_1E42D4960;
  v92[1] = a2;
  v93 = v92;
  v98 = v97;
  v97[0] = &off_1E42D4960;
  v97[1] = a2;
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v7 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v8 = v7;
  v9 = v95;
  v10 = *((_QWORD *)v95 + 10);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    v11 = *((_QWORD *)v9 + 11);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v11;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v10, "DecodeMC", "parent_signpost=%llu", buf, 0xCu);
  }

  v12 = v93;
  if (v93 == v92)
  {
    v13 = 4;
    v12 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_13;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
  v14 = v96;
  if (v96 == &v94)
  {
    v15 = 4;
    v14 = &v94;
  }
  else
  {
    if (!v96)
      goto LABEL_18;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_18:
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  v18 = mc_scene_decode(v16, v17);
  v19 = v18;
  if (!v18)
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_113;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  if (v18[5])
  {
    v20 = 0;
    v21 = (id *)(a1 + 8);
    v83 = (id *)(a1 + 8);
    v84 = v18;
    do
    {
      v22 = (unint64_t *)((char *)v19[4] + 24 * v20);
      v23 = v22[2];
      v91[0] = 0uLL;
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          memset(buf, 0, 17);
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v24, *(unsigned int *)(v23 + 4), 0);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (std::__shared_weak_count *)operator new(0x38uLL);
          v26->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          v26->__shared_weak_owners_ = 0;
          v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE110;
          v28 = v25;
          v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B0670;
          v26[1].__shared_owners_ = (uint64_t)&off_1E42B5310;
          v26[1].__shared_weak_owners_ = (uint64_t)v28;
          *(_QWORD *)buf = v26 + 1;
          *(_QWORD *)&buf[8] = v26;
          md::TextureResourceDecoder::decode(v21, v5, (const gdc::RawResourceSourceData *)buf, __src);
          v91[0] = __src[0];

          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      v30 = v87;
      v31 = (v87 - v86) >> 4;
      if (v31 <= *v22)
      {
        v43 = *v22 + 1;
        v44 = v43 - v31;
        if (v43 > v31)
        {
          if (v44 <= (v88 - v87) >> 4)
          {
            bzero(v87, 16 * v44);
            v87 += 16 * v44;
            goto LABEL_29;
          }
          if (v43 >> 60)
            abort();
          v45 = v4;
          v46 = v88 - v86;
          if ((v88 - v86) >> 3 > v43)
            v43 = v46 >> 3;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
            v47 = 0xFFFFFFFFFFFFFFFLL;
          else
            v47 = v43;
          if (v47 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v48 = v5;
          v49 = (char *)operator new(16 * v47);
          v50 = &v49[16 * v31];
          v51 = 16 * v44;
          v52 = &v49[16 * v47];
          bzero(v50, v51);
          v53 = &v50[v51];
          if (v87 == v86)
          {
            v86 = v50;
            v87 = &v50[v51];
            v88 = v52;
            v5 = v48;
          }
          else
          {
            do
            {
              v54 = *((_OWORD *)v30 - 1);
              v30 -= 16;
              *((_OWORD *)v50 - 1) = v54;
              v50 -= 16;
              *(_QWORD *)v30 = 0;
              *((_QWORD *)v30 + 1) = 0;
            }
            while (v30 != v86);
            v30 = v86;
            v55 = v87;
            v86 = v50;
            v87 = v53;
            v88 = v52;
            v5 = v48;
            if (v55 != v30)
            {
              v4 = v45;
              v21 = v83;
              v19 = v84;
              do
              {
                v56 = (std::__shared_weak_count *)*((_QWORD *)v55 - 1);
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v55 -= 16;
              }
              while (v55 != v30);
              goto LABEL_75;
            }
          }
          v4 = v45;
          v21 = v83;
          v19 = v84;
LABEL_75:
          if (v30)
            operator delete(v30);
          goto LABEL_29;
        }
        if (v43 < v31)
        {
          v59 = &v86[16 * v43];
          while (v30 != v59)
          {
            v60 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v30 -= 16;
          }
          v87 = v59;
        }
      }
LABEL_29:
      v32 = *v22;
      v33 = v91[0];
      if (*((_QWORD *)&v91[0] + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v91[0] + 1) + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = &v86[16 * v32];
      v37 = (std::__shared_weak_count *)*((_QWORD *)v36 + 1);
      *(_OWORD *)v36 = v33;
      if (!v37)
        goto LABEL_36;
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v91[0] + 1);
        if (*((_QWORD *)&v91[0] + 1))
        {
LABEL_37:
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      else
      {
LABEL_36:
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v91[0] + 1);
        if (*((_QWORD *)&v91[0] + 1))
          goto LABEL_37;
      }
      ++v20;
    }
    while (v20 < (unint64_t)v19[5]);
  }
  v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v64 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  no_copy = mc_container_create_read_no_copy("MCP4", v63, v64);
  if (no_copy)
  {
    for (i = 0; i < mc_container_chapter_count((uint64_t)no_copy); ++i)
    {
      if (mc_container_get_chapter_info((uint64_t)no_copy, i, (uint64_t)v90)
        && v90[0] == 5
        && mc_container_decode_la_data_chapter((uint64_t)no_copy, i, __src))
      {
        memcpy(&buf[7], __src, 0x2F0uLL);
        mc_container_free((uint64_t)no_copy);
        memcpy((char *)v91 + 7, &buf[7], 0x2F0uLL);
        v67 = 0;
        goto LABEL_88;
      }
    }
    mc_container_free((uint64_t)no_copy);
  }
  v67 = 1;
LABEL_88:
  v68 = operator new(0x3C8uLL);
  v68[1] = 0;
  v68[2] = 0;
  *v68 = &off_1E42DDD90;
  if ((v67 & 1) == 0)
    memcpy(&buf[7], (char *)v91 + 7, 0x2F0uLL);
  v69 = (char *)(v68 + 4);
  gdc::Resource::Resource((uint64_t)(v68 + 4), (uint64_t)v5);
  v68[3] = &off_1E42ABBF0;
  v68[22] = v19;
  *((_BYTE *)v68 + 184) = 0;
  if ((v67 & 1) == 0)
  {
    memcpy(v68 + 24, &buf[7], 0x2F0uLL);
    *((_BYTE *)v68 + 184) = 1;
  }
  v68[120] = 0;
  *((_OWORD *)v68 + 59) = 0u;
  v70 = v86;
  v71 = v87;
  v72 = v87 - v86;
  if (v87 == v86)
  {
    *a4 = v69;
    a4[1] = v68;
    if (v86)
LABEL_112:
      operator delete(v70);
  }
  else
  {
    if (v72 < 0)
      abort();
    v73 = operator new(v87 - v86);
    v68[118] = v73;
    v68[119] = v73;
    v68[120] = &v73[2 * (v72 >> 4)];
    v74 = v86;
    do
    {
      *v73 = *(_QWORD *)v74;
      v75 = *((_QWORD *)v74 + 1);
      v73[1] = v75;
      if (v75)
      {
        v76 = (unint64_t *)(v75 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      v74 += 16;
      v73 += 2;
    }
    while (v74 != v87);
    v68[119] = v73;
    *a4 = v69;
    a4[1] = v68;
    if (v86)
    {
      if (v87 != v86)
      {
        do
        {
          v78 = (std::__shared_weak_count *)*((_QWORD *)v71 - 1);
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v71 -= 16;
        }
        while (v71 != v86);
        v70 = v86;
      }
      goto LABEL_112;
    }
  }
LABEL_113:
  if (!v98)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v98 + 48))(v98);
  v81 = v98;
  if (v98 == v97)
  {
    v82 = 4;
    v81 = v97;
  }
  else
  {
    if (!v98)
      return;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
}

void sub_19F8195B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x670]);
  _Unwind_Resume(a1);
}

void md::mun::MuninMCMeshResource::~MuninMCMeshResource(void ***this)
{
  md::mun::MuninMCMeshResource::~MuninMCMeshResource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void **v2;
  void **v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;

  *this = (void **)&off_1E42ABBF0;
  mc_scene_free(this[19]);
  v2 = this[115];
  if (v2)
  {
    v3 = this[116];
    v4 = this[115];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*(v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 2;
      }
      while (v3 != v2);
      v4 = this[115];
    }
    this[116] = v2;
    operator delete(v4);
  }
  if (*((_BYTE *)this + 160))
    *((_BYTE *)this + 160) = 0;
  v8 = this[2];
  if (v8 != this[4])
    free(v8);
}

void sub_19F819788(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 920));
  if (*(_BYTE *)(v1 + 160))
    *(_BYTE *)(v1 + 160) = 0;
  v3 = *(void **)(v1 + 16);
  if (v3 != *(void **)(v1 + 32))
    free(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::mun::MuninMCMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDD90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::mun::MuninMCMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDD90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninMCMeshResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4960;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "DecodeMC", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D49A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D49A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1},std::allocator<md::MCDecoder<md::mun::MuninMCMeshResource>::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "DecodeMC", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void std::__shared_ptr_emplace<md::MCDecoder<md::mun::MuninMCMeshResource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDFC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MCDecoder<md::mun::MuninMCMeshResource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDFC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MCDecoder<md::mun::MuninMCMeshResource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::C3mResourceDecoder<md::mun::MuninMeshResource>::~C3mResourceDecoder(uint64_t a1)
{
  md::C3mResourceDecoder<md::mun::MuninMeshResource>::~C3mResourceDecoder(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::C3mResourceDecoder<md::mun::MuninMeshResource>::decode(uint64_t a1@<X0>, const gdc::ResourceKey *a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  BOOL v6;
  _BYTE *v9;
  unint64_t v10;
  double v11;
  double v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  id v20;
  char *v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  id v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  _QWORD *v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  geo::c3m::Model *v91;
  id *v92;
  __int128 v93;
  __int128 v94;
  char v95;
  void *v96;
  void *v97;
  void *__p;
  char *v99;
  char *v100;
  char v101[8];
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;

  if (*(_QWORD *)a3)
    v6 = a3[16] == 0;
  else
    v6 = 1;
  if (v6
    || (v9 = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 32))(*(_QWORD *)a3),
        v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3),
        geo::c3m::loadFromChunk((uint64_t *)(a1 + 72), v9, v10, (uint64_t)v101, v11, v12),
        !v101[0]))
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    __p = 0;
    v99 = 0;
    v100 = 0;
    v91 = (geo::c3m::Model *)&v102;
    std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&__p, 0x4EC4EC4EC4EC4EC5 * ((v107 - (_BYTE *)v106) >> 3));
    v13 = (unsigned __int8 *)v106;
    v14 = v107;
    if (v106 != v107)
    {
      v92 = (id *)(a1 + 8);
      do
      {
        v15 = *v13;
        if ((v15 - 4) < 2 || v15 == 2)
        {
          v17 = (_QWORD **)*((_QWORD *)v13 + 1);
          if (*((_QWORD *)v13 + 2) - (_QWORD)v17 == 32)
          {
            v94 = 0uLL;
            v95 = 0;
            objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", **v17, (*v17)[1] - **v17, 0, v91);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = operator new(0x38uLL);
            v19[1] = 0;
            v19[2] = 0;
            *v19 = &off_1E42DE110;
            v20 = v18;
            v19[3] = &off_1E42B0670;
            v19[4] = &off_1E42B5310;
            v19[5] = v20;
            *(_QWORD *)&v94 = v19 + 3;
            *((_QWORD *)&v94 + 1) = v19;
            md::ImageResourceDecoder::decode(a2, (const gdc::RawResourceSourceData *)&v94, (uint64_t *)&v93);
            v21 = v99;
            if (v99 < v100)
            {
              *(_OWORD *)v99 = v93;
              v99 = v21 + 16;
LABEL_72:

              if (v95)
              {
                if (v96 != v97)
                  free(v96);
                v95 = 0;
              }
              v41 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
              if (!*((_QWORD *)&v94 + 1))
                goto LABEL_9;
              v60 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
              do
                v43 = __ldaxr(v60);
              while (__stlxr(v43 - 1, v60));
              goto LABEL_113;
            }
            v44 = (char *)__p;
            v45 = (v99 - (_BYTE *)__p) >> 4;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 60)
              abort();
            v47 = v100 - (_BYTE *)__p;
            if ((v100 - (_BYTE *)__p) >> 3 > v46)
              v46 = v47 >> 3;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
              v48 = 0xFFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48 >> 60)
LABEL_150:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v49 = (char *)operator new(16 * v48);
            v50 = &v49[16 * v45];
            *(_OWORD *)v50 = v93;
            v51 = v50 + 16;
            v93 = 0uLL;
            if (v21 == v44)
            {
              __p = &v49[16 * v45];
              v100 = &v49[16 * v48];
              if (v21)
                goto LABEL_66;
            }
            else
            {
              v52 = v21;
              do
              {
                v53 = *((_OWORD *)v52 - 1);
                v52 -= 16;
                *((_OWORD *)v50 - 1) = v53;
                v50 -= 16;
                *(_QWORD *)v52 = 0;
                *((_QWORD *)v52 + 1) = 0;
              }
              while (v52 != v44);
              __p = v50;
              v99 = v51;
              v100 = &v49[16 * v48];
              do
              {
                v54 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
                if (v54)
                {
                  p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldaxr(p_shared_owners);
                  while (__stlxr(v56 - 1, p_shared_owners));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                v21 -= 16;
              }
              while (v21 != v44);
              v21 = v44;
              if (v44)
LABEL_66:
                operator delete(v21);
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
            v99 = v51;
            if (*((_QWORD *)&v93 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            goto LABEL_72;
          }
        }
        else if (!*v13)
        {
          v22 = (_QWORD **)*((_QWORD *)v13 + 1);
          if (*((_QWORD *)v13 + 2) - (_QWORD)v22 == 32)
          {
            v94 = 0uLL;
            v95 = 0;
            objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", **v22, (*v22)[1] - **v22, 0);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = operator new(0x38uLL);
            v24[1] = 0;
            v24[2] = 0;
            *v24 = &off_1E42DE110;
            v25 = v23;
            v24[3] = &off_1E42B0670;
            v24[4] = &off_1E42B5310;
            v24[5] = v25;
            *(_QWORD *)&v94 = v24 + 3;
            *((_QWORD *)&v94 + 1) = v24;
            md::TextureResourceDecoder::decode(v92, a2, (const gdc::RawResourceSourceData *)&v94, &v93);
            v26 = v99;
            if (v99 < v100)
            {
              *(_OWORD *)v99 = v93;
              v99 = v26 + 16;
              goto LABEL_106;
            }
            v61 = (char *)__p;
            v62 = (v99 - (_BYTE *)__p) >> 4;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 60)
              abort();
            v64 = v100 - (_BYTE *)__p;
            if ((v100 - (_BYTE *)__p) >> 3 > v63)
              v63 = v64 >> 3;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
              v65 = 0xFFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65 >> 60)
              goto LABEL_150;
            v66 = (char *)operator new(16 * v65);
            v67 = &v66[16 * v62];
            *(_OWORD *)v67 = v93;
            v68 = v67 + 16;
            v93 = 0uLL;
            if (v26 == v61)
            {
              __p = &v66[16 * v62];
              v100 = &v66[16 * v65];
              if (v26)
                goto LABEL_100;
            }
            else
            {
              v69 = v26;
              do
              {
                v70 = *((_OWORD *)v69 - 1);
                v69 -= 16;
                *((_OWORD *)v67 - 1) = v70;
                v67 -= 16;
                *(_QWORD *)v69 = 0;
                *((_QWORD *)v69 + 1) = 0;
              }
              while (v69 != v61);
              __p = v67;
              v99 = v68;
              v100 = &v66[16 * v65];
              do
              {
                v71 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v26 -= 16;
              }
              while (v26 != v61);
              v26 = v61;
              if (v61)
LABEL_100:
                operator delete(v26);
            }
            v74 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
            v99 = v68;
            if (*((_QWORD *)&v93 + 1))
            {
              v75 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
LABEL_106:

            if (v95)
            {
              if (v96 != v97)
                free(v96);
              v95 = 0;
            }
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
            if (!*((_QWORD *)&v94 + 1))
              goto LABEL_9;
            v77 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
            do
              v43 = __ldaxr(v77);
            while (__stlxr(v43 - 1, v77));
LABEL_113:
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
            goto LABEL_9;
          }
        }
        v94 = 0uLL;
        v27 = v99;
        if (v99 < v100)
        {
          *(_QWORD *)v99 = 0;
          *((_QWORD *)v27 + 1) = 0;
          v99 = v27 + 16;
          goto LABEL_9;
        }
        v28 = (char *)__p;
        v29 = (v99 - (_BYTE *)__p) >> 4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60)
          abort();
        v31 = v100 - (_BYTE *)__p;
        if ((v100 - (_BYTE *)__p) >> 3 > v30)
          v30 = v31 >> 3;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
          v32 = 0xFFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32 >> 60)
          goto LABEL_150;
        v33 = (char *)operator new(16 * v32);
        v34 = &v33[16 * v29];
        *(_OWORD *)v34 = 0u;
        v35 = v34 + 16;
        v94 = 0u;
        if (v27 == v28)
        {
          __p = &v33[16 * v29];
          v100 = &v33[16 * v32];
          if (v27)
            goto LABEL_41;
        }
        else
        {
          v36 = v27;
          do
          {
            v37 = *((_OWORD *)v36 - 1);
            v36 -= 16;
            *((_OWORD *)v34 - 1) = v37;
            v34 -= 16;
            *(_QWORD *)v36 = 0;
            *((_QWORD *)v36 + 1) = 0;
          }
          while (v36 != v28);
          __p = v34;
          v99 = v35;
          v100 = &v33[16 * v32];
          do
          {
            v38 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v27 -= 16;
          }
          while (v27 != v28);
          v27 = v28;
          if (v28)
LABEL_41:
            operator delete(v27);
        }
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        v99 = v35;
        if (*((_QWORD *)&v94 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          goto LABEL_113;
        }
LABEL_9:
        v13 += 104;
      }
      while (v13 != v14);
    }
    v78 = operator new(0x348uLL);
    v78[1] = 0;
    v78[2] = 0;
    *v78 = &off_1E42DDD58;
    gdc::Resource::Resource((uint64_t)(v78 + 4), (uint64_t)a2);
    v78[3] = &off_1E42ABB38;
    geo::c3m::Model::Model((geo::c3m::Model *)(v78 + 22), v91);
    *a4 = v78 + 4;
    a4[1] = v78;
    v79 = (char *)__p;
    if (__p)
    {
      v80 = v99;
      if (v99 != __p)
      {
        do
        {
          v81 = (std::__shared_weak_count *)*((_QWORD *)v80 - 1);
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v80 -= 16;
        }
        while (v80 != v79);
        v79 = (char *)__p;
      }
      operator delete(v79);
    }
    if (v101[0])
    {
      v84 = (unsigned __int8 *)v106;
      v85 = v107;
      if (v106 != v107)
      {
        do
        {
          v86 = (_QWORD *)*((_QWORD *)v84 + 1);
          v87 = (_QWORD *)*((_QWORD *)v84 + 2);
          if (v86 != v87)
          {
            do
            {
              v88 = (std::__shared_weak_count *)v86[1];
              if (v88)
              {
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              v86 += 4;
            }
            while (v86 != v87);
            v86 = (_QWORD *)*((_QWORD *)v84 + 1);
          }
          if (v86 != *((_QWORD **)v84 + 3))
            free(v86);
          v84 += 104;
        }
        while (v84 != v85);
        v84 = (unsigned __int8 *)v106;
      }
      if (v84 != v108)
        free(v84);
      geo::small_vector_base<geo::c3m::Mesh>::runDestructors((uint64_t)v103, v104);
      if (v103 != v105)
        free(v103);
    }
  }
}

void sub_19F81A3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, geo::c3m::Model *a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a13);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a29);
  if (a32)
    geo::c3m::Model::~Model(a9);
  _Unwind_Resume(a1);
}

geo::c3m::Model *geo::c3m::Model::Model(geo::c3m::Model *this, const geo::c3m::Model *a2)
{
  const geo::c3m::Model *v2;
  geo::c3m::Model *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  __int128 **v9;
  __int128 **v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  __int128 *v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  int64_t v37;
  char *v38;
  size_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  __int128 *v45;
  __int128 *v46;
  int64_t v47;
  char *v48;
  char *v49;
  __int128 *v50;
  __int128 *v51;
  int64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v99;
  unint64_t v100;
  geo::c3m::Model *v101;
  const geo::c3m::Model *v102;
  char *v103;

  v2 = a2;
  v3 = this;
  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v5;
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 72) = v7;
  *(_OWORD *)((char *)this + 56) = v6;
  v8 = (_QWORD *)((char *)this + 136);
  *((_QWORD *)this + 13) = (char *)this + 136;
  *((_QWORD *)this + 14) = (char *)this + 136;
  *((_QWORD *)this + 15) = (char *)this + 136;
  *((_QWORD *)this + 16) = 1;
  v9 = (__int128 **)*((_QWORD *)a2 + 13);
  v10 = (__int128 **)*((_QWORD *)a2 + 14);
  v11 = 0xD37A6F4DE9BD37A7 * (v10 - v9);
  if (v11 >= 2)
  {
    if (v11 <= 4)
      v12 = 4;
    else
      v12 = 0xD37A6F4DE9BD37A7 * (v10 - v9);
    v13 = malloc_type_malloc(184 * v12, 0x1030040E47C81F6uLL);
    v8 = v13;
    v14 = *((_QWORD *)v3 + 13);
    v15 = *((_QWORD *)v3 + 14);
    if (v14 == v15)
    {
      v24 = *((_QWORD *)v3 + 13);
    }
    else
    {
      v16 = v13;
      do
      {
        *v16 = v16 + 4;
        v16[1] = v16 + 4;
        v16[2] = v16 + 4;
        v18 = *(_QWORD *)(v14 + 16);
        v16[3] = *(_QWORD *)(v14 + 24);
        v19 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 == v18)
        {
          v16[1] = (char *)v16 + *(_QWORD *)(v14 + 8) - v19 + 32;
          v20 = *(_QWORD *)(v14 + 8);
          if (v19 != v20)
          {
            v21 = 0;
            do
            {
              v22 = &v16[v21 / 8];
              v23 = *(_OWORD *)(v19 + v21);
              v22[6] = *(_QWORD *)(v19 + v21 + 16);
              *((_OWORD *)v22 + 2) = v23;
              v21 += 24;
            }
            while (v19 + v21 != v20);
          }
        }
        else
        {
          v17 = *(_QWORD *)(v14 + 8);
          *v16 = v19;
          v16[1] = v17;
          *(_OWORD *)v14 = 0uLL;
          *(_OWORD *)(v14 + 16) = 0uLL;
        }
        v16[10] = 0;
        v16[11] = 0;
        v16[12] = 0;
        *((_OWORD *)v16 + 5) = *(_OWORD *)(v14 + 80);
        v16[12] = *(_QWORD *)(v14 + 96);
        *(_QWORD *)(v14 + 80) = 0;
        *(_QWORD *)(v14 + 88) = 0;
        *(_QWORD *)(v14 + 96) = 0;
        v16[13] = 0;
        v16[14] = 0;
        v16[15] = 0;
        *(_OWORD *)(v16 + 13) = *(_OWORD *)(v14 + 104);
        v16[15] = *(_QWORD *)(v14 + 120);
        *(_QWORD *)(v14 + 104) = 0;
        *(_QWORD *)(v14 + 112) = 0;
        *(_QWORD *)(v14 + 120) = 0;
        v16[16] = 0;
        v16[17] = 0;
        v16[18] = 0;
        *((_OWORD *)v16 + 8) = *(_OWORD *)(v14 + 128);
        v16[18] = *(_QWORD *)(v14 + 144);
        *(_QWORD *)(v14 + 128) = 0;
        *(_QWORD *)(v14 + 136) = 0;
        *(_QWORD *)(v14 + 144) = 0;
        v16[19] = 0;
        v16[20] = 0;
        v16[21] = 0;
        *(_OWORD *)(v16 + 19) = *(_OWORD *)(v14 + 152);
        v16[21] = *(_QWORD *)(v14 + 168);
        *(_QWORD *)(v14 + 152) = 0;
        *(_QWORD *)(v14 + 160) = 0;
        *(_QWORD *)(v14 + 168) = 0;
        v16[22] = *(_QWORD *)(v14 + 176);
        v16 += 23;
        v14 += 184;
      }
      while (v14 != v15);
      v24 = *((_QWORD *)v3 + 13);
      v14 = *((_QWORD *)v3 + 14);
    }
    geo::small_vector_base<geo::c3m::Mesh>::runDestructors(v24, v14);
    *((_QWORD *)v3 + 13) = v8;
    *((_QWORD *)v3 + 14) = v8;
    *((_QWORD *)v3 + 16) = v12;
  }
  v101 = v3;
  if (v9 != v10)
  {
    v99 = 0xD37A6F4DE9BD37A7 * (v10 - v9);
    v102 = v2;
    do
    {
      v25 = v8 + 4;
      *v8 = v8 + 4;
      v8[1] = v8 + 4;
      v8[2] = v8 + 4;
      v8[3] = 2;
      v26 = *v9;
      v27 = v9[1];
      v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)*v9) >> 3);
      if (v28 >= 3)
      {
        if (v28 <= 4)
          v29 = 4;
        else
          v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)*v9) >> 3);
        v25 = malloc_type_malloc(24 * v29, 0x1000040504FFAC1uLL);
        v30 = (__int128 *)*v8;
        v31 = (__int128 *)v8[1];
        if ((__int128 *)*v8 != v31)
        {
          v32 = v25;
          do
          {
            v33 = *v30;
            v32[2] = *((_QWORD *)v30 + 2);
            *(_OWORD *)v32 = v33;
            v32 += 3;
            v30 = (__int128 *)((char *)v30 + 24);
          }
          while (v30 != v31);
        }
        *v8 = v25;
        v8[1] = v25;
        v8[3] = v29;
      }
      if (v26 != v27)
      {
        do
        {
          v34 = *v26;
          v25[2] = *((_QWORD *)v26 + 2);
          *(_OWORD *)v25 = v34;
          v25 += 3;
          v26 = (__int128 *)((char *)v26 + 24);
        }
        while (v26 != v27);
        v25 = (_QWORD *)v8[1];
      }
      v8[10] = 0;
      v8[1] = &v25[3 * v28];
      v8[11] = 0;
      v8[12] = 0;
      v36 = v9[10];
      v35 = v9[11];
      v37 = (char *)v35 - (char *)v36;
      if (v35 != v36)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v37 >> 2) >= 0x1555555555555556)
          abort();
        v38 = (char *)operator new(v37);
        v8[10] = v38;
        v8[11] = v38;
        v8[12] = &v38[4 * (v37 >> 2)];
        v39 = 12 * ((v37 - 12) / 0xCuLL) + 12;
        memcpy(v38, v36, v39);
        v8[11] = &v38[v39];
      }
      v8[13] = 0;
      v8[14] = 0;
      v8[15] = 0;
      v41 = v9[13];
      v40 = v9[14];
      v42 = (char *)v40 - (char *)v41;
      if (v40 != v41)
      {
        if (v42 < 0)
          abort();
        v43 = (char *)operator new((char *)v40 - (char *)v41);
        v8[13] = v43;
        v8[14] = v43;
        v8[15] = &v43[8 * (v42 >> 3)];
        v44 = v42 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v43, v41, v44);
        v8[14] = &v43[v44];
      }
      v8[16] = 0;
      v8[17] = 0;
      v8[18] = 0;
      v46 = v9[16];
      v45 = v9[17];
      v47 = (char *)v45 - (char *)v46;
      if (v45 != v46)
      {
        if (v47 < 0)
          abort();
        v48 = (char *)operator new((char *)v45 - (char *)v46);
        v8[16] = v48;
        v8[17] = v48;
        v49 = &v48[2 * (v47 >> 1)];
        v8[18] = v49;
        memcpy(v48, v46, v47);
        v8[17] = v49;
      }
      v8[19] = 0;
      v8[20] = 0;
      v8[21] = 0;
      v51 = v9[19];
      v50 = v9[20];
      v52 = (char *)v50 - (char *)v51;
      if (v50 != v51)
      {
        if (v52 < 0)
          abort();
        v53 = (char *)operator new((char *)v50 - (char *)v51);
        v8[19] = v53;
        v8[20] = v53;
        v54 = &v53[2 * (v52 >> 1)];
        v8[21] = v54;
        memcpy(v53, v51, v52);
        v8[20] = v54;
      }
      v8[22] = v9[22];
      v9 += 23;
      v8 += 23;
    }
    while (v9 != v10);
    v3 = v101;
    v2 = v102;
    v8 = (_QWORD *)*((_QWORD *)v101 + 14);
    v11 = v99;
  }
  *((_QWORD *)v3 + 14) = &v8[23 * v11];
  v55 = (char *)v3 + 352;
  *((_QWORD *)v3 + 40) = (char *)v3 + 352;
  *((_QWORD *)v3 + 41) = (char *)v3 + 352;
  *((_QWORD *)v3 + 42) = (char *)v3 + 352;
  *((_QWORD *)v3 + 43) = 3;
  v57 = (char *)*((_QWORD *)v2 + 40);
  v56 = (char *)*((_QWORD *)v2 + 41);
  v58 = 0x4EC4EC4EC4EC4EC5 * ((v56 - v57) >> 3);
  v103 = v56;
  if (v58 >= 4)
  {
    if (v58 <= 8)
      v59 = 8;
    else
      v59 = 0x4EC4EC4EC4EC4EC5 * ((v56 - v57) >> 3);
    v60 = (char *)malloc_type_malloc(104 * v59, 0x10200409A70330CuLL);
    v55 = v60;
    v61 = *((_QWORD *)v3 + 40);
    v62 = *((_QWORD *)v3 + 41);
    if (v61 != v62)
    {
      v63 = v60;
      do
      {
        *(_BYTE *)v63 = *(_BYTE *)v61;
        v63[1] = v63 + 5;
        v65 = *(_QWORD **)(v61 + 8);
        v63[2] = v63 + 5;
        v63[3] = v63 + 5;
        v66 = *(_QWORD **)(v61 + 24);
        v63[4] = *(_QWORD *)(v61 + 32);
        if (v65 == v66)
        {
          v63[2] = (char *)v63 + *(_QWORD *)(v61 + 16) - (_QWORD)v65 + 40;
          v67 = *(_QWORD **)(v61 + 16);
          if (v65 != v67)
          {
            v68 = 0;
            do
            {
              v69 = (char *)&v63[v68];
              v70 = &v65[v68];
              *(_OWORD *)(v69 + 40) = *(_OWORD *)&v65[v68];
              *v70 = 0;
              v70[1] = 0;
              v71 = v65[v68 + 2];
              v69[64] = v65[v68 + 3];
              *((_QWORD *)v69 + 7) = v71;
              v68 += 4;
            }
            while (v70 + 4 != v67);
          }
        }
        else
        {
          v64 = *(_QWORD *)(v61 + 16);
          v63[1] = v65;
          v63[2] = v64;
          *(_OWORD *)(v61 + 8) = 0uLL;
          *(_OWORD *)(v61 + 24) = 0uLL;
        }
        v63 += 13;
        v61 += 104;
      }
      while (v61 != v62);
      v72 = (_QWORD *)*((_QWORD *)v101 + 40);
      v73 = (_QWORD *)*((_QWORD *)v101 + 41);
      while (v72 != v73)
      {
        v74 = (_QWORD *)v72[1];
        v75 = (_QWORD *)v72[2];
        if (v74 != v75)
        {
          do
          {
            v76 = (std::__shared_weak_count *)v74[1];
            if (v76)
            {
              p_shared_owners = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(p_shared_owners);
              while (__stlxr(v78 - 1, p_shared_owners));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v74 += 4;
          }
          while (v74 != v75);
          v74 = (_QWORD *)v72[1];
        }
        if (v74 != (_QWORD *)v72[3])
          free(v74);
        v72 += 13;
      }
    }
    v3 = v101;
    v56 = v103;
    *((_QWORD *)v101 + 40) = v55;
    *((_QWORD *)v101 + 41) = v55;
    *((_QWORD *)v101 + 43) = v59;
  }
  if (v57 != v56)
  {
    v100 = v58;
    do
    {
      *v55 = *v57;
      v79 = v55 + 40;
      *((_QWORD *)v55 + 1) = v55 + 40;
      *((_QWORD *)v55 + 2) = v55 + 40;
      *((_QWORD *)v55 + 3) = v55 + 40;
      *((_QWORD *)v55 + 4) = 2;
      v81 = *((_QWORD *)v57 + 1);
      v80 = *((_QWORD *)v57 + 2);
      v82 = (v80 - v81) >> 5;
      if ((unint64_t)(v80 - v81) >= 0x41)
      {
        if (v82 <= 4)
          v83 = 4;
        else
          v83 = (v80 - v81) >> 5;
        v84 = malloc_type_malloc(32 * v83, 0x10200402C28E7A6uLL);
        v79 = v84;
        v85 = *((_QWORD *)v55 + 1);
        v86 = *((_QWORD *)v55 + 2);
        if (v85 != v86)
        {
          v87 = (char *)v84;
          do
          {
            *(_OWORD *)v87 = *(_OWORD *)v85;
            *(_QWORD *)v85 = 0;
            *(_QWORD *)(v85 + 8) = 0;
            v88 = *(_QWORD *)(v85 + 16);
            v87[24] = *(_BYTE *)(v85 + 24);
            *((_QWORD *)v87 + 2) = v88;
            v85 += 32;
            v87 += 32;
          }
          while (v85 != v86);
          v89 = *((_QWORD *)v55 + 1);
          v90 = *((_QWORD *)v55 + 2);
          while (v89 != v90)
          {
            v91 = *(std::__shared_weak_count **)(v89 + 8);
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v89 += 32;
          }
        }
        *((_QWORD *)v55 + 1) = v79;
        *((_QWORD *)v55 + 2) = v79;
        *((_QWORD *)v55 + 4) = v83;
        v56 = v103;
      }
      if (v81 != v80)
      {
        do
        {
          v95 = *(_QWORD *)(v81 + 8);
          *v79 = *(_QWORD *)v81;
          v79[1] = v95;
          if (v95)
          {
            v96 = (unint64_t *)(v95 + 8);
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          v94 = *(_QWORD *)(v81 + 16);
          *((_BYTE *)v79 + 24) = *(_BYTE *)(v81 + 24);
          v79[2] = v94;
          v81 += 32;
          v79 += 4;
        }
        while (v81 != v80);
        v79 = (_QWORD *)*((_QWORD *)v55 + 2);
      }
      *((_QWORD *)v55 + 2) = &v79[4 * v82];
      v57 += 104;
      v55 += 104;
    }
    while (v57 != v56);
    v58 = v100;
    v3 = v101;
    v55 = (char *)*((_QWORD *)v101 + 41);
  }
  *((_QWORD *)v3 + 41) = &v55[104 * v58];
  return v3;
}

void sub_19F81AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  void *v12;

  geo::small_vector_base<geo::c3m::Mesh>::runDestructors(a11[13], a11[14]);
  v12 = (void *)a11[13];
  if (v12 != (void *)a11[15])
    free(v12);
  _Unwind_Resume(a1);
}

void geo::c3m::Model::~Model(geo::c3m::Model *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = (_QWORD *)*((_QWORD *)this + 40);
  v3 = (_QWORD *)*((_QWORD *)this + 41);
  if (v2 != v3)
  {
    do
    {
      v4 = (_QWORD *)v2[1];
      v5 = (_QWORD *)v2[2];
      if (v4 != v5)
      {
        do
        {
          v6 = (std::__shared_weak_count *)v4[1];
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 += 4;
        }
        while (v4 != v5);
        v4 = (_QWORD *)v2[1];
      }
      if (v4 != (_QWORD *)v2[3])
        free(v4);
      v2 += 13;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 40);
  }
  if (v2 != *((_QWORD **)this + 42))
    free(v2);
  geo::small_vector_base<geo::c3m::Mesh>::runDestructors(*((_QWORD *)this + 13), *((_QWORD *)this + 14));
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9 != *((void **)this + 15))
    free(v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*((_QWORD *)this + 40);
  v3 = (_QWORD *)*((_QWORD *)this + 41);
  if (v2 == v3)
  {
    if (v2 == *((_QWORD **)this + 42))
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v4 = (_QWORD *)v2[1];
    v5 = (_QWORD *)v2[2];
    if (v4 == v5)
    {
      if (v4 != (_QWORD *)v2[3])
        goto LABEL_18;
    }
    else
    {
      do
      {
        v6 = (std::__shared_weak_count *)v4[1];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 += 4;
      }
      while (v4 != v5);
      v4 = (_QWORD *)v2[1];
      if (v4 != (_QWORD *)v2[3])
LABEL_18:
        free(v4);
    }
    v2 += 13;
  }
  while (v2 != v3);
  v2 = (_QWORD *)*((_QWORD *)this + 40);
  if (v2 != *((_QWORD **)this + 42))
LABEL_3:
    free(v2);
LABEL_4:
  geo::small_vector_base<geo::c3m::Mesh>::runDestructors((uint64_t)this + 104, *((_QWORD *)this + 13), *((_QWORD *)this + 14));
  if (*((_QWORD *)this + 13) != *((_QWORD *)this + 15))
    free(*((void **)this + 13));
}

void geo::small_vector_base<geo::c3m::Mesh>::runDestructors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = *(void **)(v3 + 152);
      if (v4)
      {
        *(_QWORD *)(v3 + 160) = v4;
        operator delete(v4);
      }
      v5 = *(void **)(v3 + 128);
      if (v5)
      {
        *(_QWORD *)(v3 + 136) = v5;
        operator delete(v5);
      }
      v6 = *(void **)(v3 + 104);
      if (v6)
      {
        *(_QWORD *)(v3 + 112) = v6;
        operator delete(v6);
      }
      v7 = *(void **)(v3 + 80);
      if (v7)
      {
        *(_QWORD *)(v3 + 88) = v7;
        operator delete(v7);
      }
      if (*(_QWORD *)v3 != *(_QWORD *)(v3 + 16))
        free(*(void **)v3);
      v3 += 184;
    }
    while (v3 != a2);
  }
}

void md::mun::MuninMeshResource::~MuninMeshResource(md::mun::MuninMeshResource *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42ABB38;
  geo::c3m::Model::~Model((md::mun::MuninMeshResource *)((char *)this + 152));
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2 != *((void **)this + 4))
    free(v2);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42ABB38;
  geo::c3m::Model::~Model((md::mun::MuninMeshResource *)((char *)this + 152));
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2 != *((void **)this + 4))
    free(v2);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::mun::MuninMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::mun::MuninMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninMeshResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::C3mResourceDecoder<md::mun::MuninMeshResource>::~C3mResourceDecoder(uint64_t a1)
{
  void ***v2;
  void **v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E4293FE0;
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  v2 = *(void ****)(a1 + 88);
  if (v2)
  {
    do
    {
      v3 = *v2;
      geo::c3m::EdgebreakerDecodeTable::~EdgebreakerDecodeTable(v2 + 4);
      operator delete(v2);
      v2 = (void ***)v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)(a1 + 40) = &off_1E4299000;
  *(_QWORD *)(a1 + 48) = &off_1E42B4D50;

  *(_QWORD *)(a1 + 8) = &off_1E429DEB8;
  *(_QWORD *)(a1 + 16) = &off_1E42B4D50;

  return a1;
}

void std::__shared_ptr_emplace<md::C3mResourceDecoder<md::mun::MuninMeshResource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBBE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::C3mResourceDecoder<md::mun::MuninMeshResource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBBE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::C3mResourceDecoder<md::mun::MuninMeshResource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *md::LegacyTrafficRenderLayer::layout(md::LegacyTrafficRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  int v49;
  unsigned __int16 *v51;
  int v52;
  int v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  _QWORD *v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  int8x8_t v145;
  uint8x8_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float64_t *v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t **v165;
  uint64_t *v166;
  uint64_t *v167;
  unsigned __int8 *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  int v178;
  double v179;
  uint64_t v180;
  int v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  __int128 v206;
  _DWORD *v207;
  _DWORD *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  md::LegacyTrafficRenderLayer *v221;
  unint64_t *v222;
  unint64_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  uint64_t *v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  float32x4_t *v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  int v244;
  double v245;
  double v246;
  double v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  uint64_t *v261;
  ggl::RenderItem *v262;
  uint64_t v263;
  _QWORD *v264;
  unint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _OWORD *v273;
  __int128 *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  _QWORD *v280;
  int v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  BOOL v292;
  BOOL v293;
  BOOL v294;
  md::LegacyTrafficRenderLayer *v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  unint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  double *v302;
  int v303;
  double v304;
  double v305;
  double v306;
  float32x2_t v307;
  float32x2_t v308;
  float32x2_t v309;
  float32x2_t v310;
  float32x2_t v311;
  float32x2_t v312;
  float32x2_t v313;
  _QWORD *v314;
  unint64_t v315;
  float32x2_t *v316;
  float32_t v317;
  unint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  uint64_t v321;
  gss::Allocator *v322;
  uint64_t v323;
  void *v324;
  int v325;
  float64x2_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  float64_t v335;
  unint64_t *v336;
  unint64_t v337;
  float64x2_t v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  char v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  BOOL v347;
  __n128 v348;
  double *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  BOOL v354;
  __n128 v355;
  double *v356;
  uint64_t v357;
  float64_t v358;
  unint64_t *v359;
  unint64_t v360;
  float64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  float64_t v368;
  unint64_t *v369;
  unint64_t v370;
  _QWORD *result;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  __int128 v376;
  md::LayoutContext *v377;
  int64x2_t v378;
  int64x2_t v379;
  int v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  int v384;
  _QWORD *v385;
  uint64_t v386;
  md::LegacyTrafficRenderLayer *v387;
  _BYTE v388[80];
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  __int128 v392;
  _BYTE v393[22];
  _OWORD v394[8];
  __int128 v395;
  uint64_t v396;
  double v397;
  double v398;
  double v399;
  double v400;
  float64x2_t v401;
  double v402;
  double v403;
  double v404;
  double v405;
  _BYTE v406[48];
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  __int128 v430;
  _BYTE v431[22];
  _QWORD v432[3];
  _QWORD *v433;
  _QWORD v434[3];
  _QWORD *v435;
  _QWORD v436[3];
  _QWORD *v437;
  _QWORD v438[3];
  _QWORD *v439;
  double v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  double v445;
  double v446;
  uint64_t v447;
  __int128 v448;
  __int128 v449;
  uint64_t v450;

  v450 = *MEMORY[0x1E0C80C00];
  v434[0] = &off_1E42D2170;
  v434[1] = a2;
  v435 = v434;
  v432[0] = &off_1E42D21B8;
  v432[1] = a2;
  v433 = v432;
  v437 = v436;
  v436[0] = &off_1E42D21B8;
  v436[1] = a2;
  std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v434);
  v4 = v433;
  if (v433 == v432)
  {
    v5 = 4;
    v4 = v432;
  }
  else
  {
    if (!v433)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v435;
  if (v435 == v434)
  {
    v7 = 4;
    v6 = v434;
  }
  else
  {
    if (!v435)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *((_QWORD *)this + 44);
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  v9 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v10 = v9[3];
  v11 = v9[4];
  v12 = v11 - v10;
  v377 = a2;
  if (v11 == v10)
    goto LABEL_18;
  v13 = 0;
  v14 = v12 >> 3;
  while (1)
  {
    v15 = *(unsigned __int8 **)(v10 + 8 * v13);
    if (*v15 == *((unsigned __int8 *)this + 384))
    {
      v16 = *((_QWORD *)v15 + 1);
      v17 = v9[15];
      if (v16 < (v9[16] - v17) >> 3)
        break;
    }
    if (++v13 >= v14)
      goto LABEL_18;
  }
  v18 = *(_QWORD *)(v17 + 8 * v16);
  if (!v18)
LABEL_18:
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * *((unsigned __int8 *)this + 385));
  v20 = *(_QWORD *)(v19 + 72);
  if (*(_QWORD *)(v19 + 80) != v20)
    *(_QWORD *)(v19 + 80) = v20;
  *(_QWORD *)(v19 + 32) = 0;
  v384 = *((_DWORD *)this + 91);
  LOBYTE(v422.f64[0]) = 0;
  v21 = v438;
  v438[0] = &off_1E42D3DD8;
  v439 = v438;
  v22 = (uint64_t *)*((_QWORD *)v377 + 1);
  v23 = (int8x8_t)v22[1];
  v387 = this;
  if (!*(_QWORD *)&v23)
  {
    v26 = 4;
    goto LABEL_332;
  }
  v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    v25 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v23 <= 0x3070CB6B3C7F21D3uLL)
      v25 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v23;
  }
  else
  {
    v25 = (*(_QWORD *)&v23 - 1) & 0x3070CB6B3C7F21D3;
  }
  v27 = *v22;
  v28 = *(_QWORD **)(v27 + 8 * v25);
  if (!v28)
    goto LABEL_45;
  v29 = (_QWORD *)*v28;
  if (!v29)
    goto LABEL_45;
  if (v24.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v29[1];
      if (v31 == 0x3070CB6B3C7F21D3)
      {
        if (v29[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_43;
      }
      else if ((v31 & (*(_QWORD *)&v23 - 1)) != v25)
      {
        goto LABEL_45;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_45;
    }
  }
  while (1)
  {
    v30 = v29[1];
    if (v30 == 0x3070CB6B3C7F21D3)
      break;
    if (v30 >= *(_QWORD *)&v23)
      v30 %= *(_QWORD *)&v23;
    if (v30 != v25)
      goto LABEL_45;
LABEL_32:
    v29 = (_QWORD *)*v29;
    if (!v29)
      goto LABEL_45;
  }
  if (v29[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_32;
LABEL_43:
  v32 = v29[5];
  if (*(_QWORD *)(v32 + 8) == 0x3070CB6B3C7F21D3)
  {
    v381 = *(_QWORD *)(v32 + 32);
    goto LABEL_46;
  }
LABEL_45:
  v381 = 0;
LABEL_46:
  if (v24.u32[0] > 1uLL)
  {
    v33 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v23 <= 0x99BED48DEFBBD82BLL)
      v33 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v23;
  }
  else
  {
    v33 = (*(_QWORD *)&v23 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v34 = *(_QWORD **)(v27 + 8 * v33);
  if (!v34)
    goto LABEL_69;
  v35 = (_QWORD *)*v34;
  if (!v35)
    goto LABEL_69;
  if (v24.u32[0] < 2uLL)
  {
    v36 = *(_QWORD *)&v23 - 1;
    while (1)
    {
      v38 = v35[1];
      if (v38 == 0x99BED48DEFBBD82BLL)
      {
        if (v35[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_66;
      }
      else if ((v38 & v36) != v33)
      {
        goto LABEL_69;
      }
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_69;
    }
  }
  while (1)
  {
    v37 = v35[1];
    if (v37 == 0x99BED48DEFBBD82BLL)
      break;
    if (v37 >= *(_QWORD *)&v23)
      v37 %= *(_QWORD *)&v23;
    if (v37 != v33)
      goto LABEL_69;
LABEL_55:
    v35 = (_QWORD *)*v35;
    if (!v35)
      goto LABEL_69;
  }
  if (v35[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_55;
LABEL_66:
  v39 = v35[5];
  if (*(_QWORD *)(v39 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_69:
    v374 = 0;
    if (v381)
      goto LABEL_70;
    goto LABEL_92;
  }
  v374 = *(_QWORD *)(v39 + 32);
  if (!v381)
    goto LABEL_92;
LABEL_70:
  v40 = *(_QWORD **)v374;
  v41 = *(unsigned __int16 **)(*(_QWORD *)v374 + 184);
  v42 = *(unsigned __int16 **)(*(_QWORD *)v374 + 192);
  if (v41 != v42)
  {
    v43 = (unsigned __int16 *)v40[15];
    while (1)
    {
      v44 = (unsigned __int16 *)v40[14];
      if (v44 != v43)
      {
        v44 = (unsigned __int16 *)v40[14];
        while (*v44 != *v41)
        {
          v44 += 56;
          if (v44 == v43)
          {
            v44 = (unsigned __int16 *)v40[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v44 + 8))
        break;
      if (++v41 == v42)
        goto LABEL_79;
    }
LABEL_93:
    *((_BYTE *)this + 360) = 1;
    goto LABEL_94;
  }
LABEL_79:
  v45 = (unsigned __int16 *)v40[26];
  v46 = (unsigned __int16 *)v40[27];
  if (v45 != v46)
  {
    v48 = (unsigned __int16 *)v40[14];
    v47 = (unsigned __int16 *)v40[15];
    do
    {
      v51 = v48;
      if (v48 != v47)
      {
        v51 = v48;
        while (*v51 != *v45)
        {
          v51 += 56;
          if (v51 == v47)
          {
            v51 = v47;
            break;
          }
        }
      }
      v49 = *((unsigned __int8 *)v51 + 8);
      ++v45;
      if (v49)
        _ZF = v45 == v46;
      else
        _ZF = 1;
    }
    while (!_ZF);
    if (!v49)
      goto LABEL_93;
  }
  v52 = *((unsigned __int8 *)this + 48);
  v53 = *((unsigned __int8 *)this + 49);
  *((_BYTE *)this + 360) = v52 != v53;
  if (v52 == v53)
  {
LABEL_92:
    v21 = v438;
    v26 = 4;
    goto LABEL_332;
  }
LABEL_94:
  v54 = (_QWORD *)*((_QWORD *)this + 44);
  v55 = v54[14];
  v382 = v54[15];
  v56 = (uint64_t *)*((_QWORD *)this + 34);
  v57 = (uint64_t *)*((_QWORD *)this + 35);
  if (v56 != v57)
  {
    do
    {
      v58 = *v56;
      if (!v439
        || (*(_QWORD *)v388 = *v56, (*(unsigned int (**)(_QWORD *, _BYTE *))(*v439 + 48))(v439, v388)))
      {
        v59 = *(_QWORD *)(v58 + 384);
        v60 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v374 + 8), (unsigned __int8 *)(v59 + 16));
        if (v60)
        {
          v61 = 0xAAAAAAAAAAAAAAABLL * (v60[17] - v60[16]);
          if (*(unsigned __int8 *)(v59 + 168) == 255)
            v55 += v61;
          else
            v382 += v61;
        }
      }
      ++v56;
    }
    while (v56 != v57);
    v54 = (_QWORD *)*((_QWORD *)this + 44);
  }
  v62 = v381 + 144;
  v63 = 128;
  if (*(unsigned __int8 *)(v381 + 320) - 1 >= 3)
    v62 = v381 + 128;
  else
    v63 = 144;
  v64 = *(_QWORD *)(v381 + v63);
  v65 = *(std::__shared_weak_count **)(v62 + 8);
  v420 = v64;
  v421 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(p_shared_owners);
    while (__stxr(v67 + 1, p_shared_owners));
  }
  v385 = v54;
  if (v55 > (uint64_t)(v54[8] - v54[7]) >> 3)
  {
    v378 = vdupq_n_s64(1uLL);
    __asm { FMOV            V0.4S, #1.0 }
    v376 = _Q0;
    do
    {
      v75 = operator new();
      v76 = v75;
      *(_OWORD *)v75 = 0u;
      *(_OWORD *)(v75 + 16) = 0u;
      *(_OWORD *)(v75 + 32) = 0u;
      *(_OWORD *)(v75 + 48) = 0u;
      *(_OWORD *)(v75 + 64) = 0u;
      *(_QWORD *)(v75 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v75 + 24) = "";
      *(_QWORD *)(v75 + 32) = 0;
      *(_DWORD *)(v75 + 48) = 0;
      *(_QWORD *)(v75 + 40) = 0;
      *(_DWORD *)(v75 + 64) = 1065353216;
      *(_OWORD *)(v75 + 88) = 0u;
      *(_OWORD *)(v75 + 72) = 0u;
      *(int64x2_t *)(v75 + 104) = v378;
      *(_QWORD *)(v75 + 120) = 0;
      v54 = v385;
      v78 = (uint64_t *)v385[8];
      v77 = v385[9];
      if ((unint64_t)v78 < v77)
      {
        *v78 = v75;
        v79 = v78 + 1;
        this = v387;
        goto LABEL_139;
      }
      v80 = (char *)v385[7];
      v81 = ((char *)v78 - v80) >> 3;
      v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 61)
        abort();
      v83 = v77 - (_QWORD)v80;
      if (v83 >> 2 > v82)
        v82 = v83 >> 2;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
        v84 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v84 = v82;
      if (v84)
      {
        if (v84 >> 61)
LABEL_445:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v85 = (char *)operator new(8 * v84);
      }
      else
      {
        v85 = 0;
      }
      v86 = (uint64_t *)&v85[8 * v81];
      *v86 = v76;
      v79 = v86 + 1;
      if (v78 == (uint64_t *)v80)
      {
        v54 = v385;
        goto LABEL_137;
      }
      v87 = (char *)(v78 - 1) - v80;
      if (v87 >= 0x58)
      {
        v54 = v385;
        if ((unint64_t)(v80 - v85) >= 0x20)
        {
          v88 = (v87 >> 3) + 1;
          v89 = &v85[8 * v81 - 16];
          v90 = v78 - 2;
          v91 = v88 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v92 = *(_OWORD *)v90;
            *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
            *(_OWORD *)v89 = v92;
            v89 -= 32;
            v90 -= 4;
            v91 -= 4;
          }
          while (v91);
          v86 -= v88 & 0x3FFFFFFFFFFFFFFCLL;
          v78 -= v88 & 0x3FFFFFFFFFFFFFFCLL;
          if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_136;
        }
      }
      else
      {
        v54 = v385;
      }
      do
      {
        v93 = *--v78;
        *--v86 = v93;
      }
      while (v78 != (uint64_t *)v80);
LABEL_136:
      v78 = (uint64_t *)v54[7];
LABEL_137:
      v54[7] = v86;
      v54[8] = v79;
      v54[9] = &v85[8 * v84];
      this = v387;
      if (v78)
        operator delete(v78);
LABEL_139:
      v54[8] = v79;
      v94 = (_QWORD *)*(v79 - 1);
      v95 = (_QWORD *)operator new();
      v96 = *((_QWORD *)this + 44);
      v97 = operator new(0xE8uLL);
      v97[1] = 0;
      v97[2] = 0;
      *v97 = &off_1E42E2278;
      v98 = ggl::BufferData::BufferData((uint64_t)(v97 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v97[28] = ggl::Tile::View::reflection(void)::reflection;
      v97[3] = &off_1E42B97B0;
      *(_QWORD *)v388 = v98;
      *(_QWORD *)&v388[8] = v97;
      v440 = 0.0;
      *(_QWORD *)&v441 = 0;
      v99 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v99->__shared_owners_ = 0;
      v100 = (unint64_t *)&v99->__shared_owners_;
      v99->__shared_weak_owners_ = 0;
      v99->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v101 = ggl::BufferData::BufferData((uint64_t)&v99[1], qword_1EE55CC40, 2, 1, 6, 1);
      v99[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v99[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v412.f64[0] = v101;
      *(_QWORD *)&v412.f64[1] = v99;
      ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v95, *(_QWORD *)(v96 + 24), *(std::__shared_weak_count **)(v96 + 32), (uint64_t *)v388, (uint64_t *)&v440, (uint64_t *)&v412);
      *v94 = v95;
      do
        v102 = __ldaxr(v100);
      while (__stlxr(v102 - 1, v100));
      if (v102)
      {
        v103 = (std::__shared_weak_count *)v441;
        if (!(_QWORD)v441)
          goto LABEL_148;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
        v103 = (std::__shared_weak_count *)v441;
        if (!(_QWORD)v441)
          goto LABEL_148;
      }
      v104 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (v105)
      {
LABEL_148:
        v106 = *(std::__shared_weak_count **)&v388[8];
        if (*(_QWORD *)&v388[8])
          goto LABEL_149;
        goto LABEL_112;
      }
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
      v106 = *(std::__shared_weak_count **)&v388[8];
      if (*(_QWORD *)&v388[8])
      {
LABEL_149:
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
LABEL_112:
      v72 = *(_QWORD **)(*(_QWORD *)(*v94 + 64) + 32);
      v73 = v72[1];
      v74 = (_OWORD *)v72[9];
      *v74 = v376;
      v74[1] = xmmword_19FFB3480;
      v94[9] = v420;
      if (v72[8] > v73)
        v73 = v72[8];
      v72[7] = 0;
      v72[8] = v73;
    }
    while (v55 > (uint64_t)(v54[8] - v54[7]) >> 3);
  }
  if (v382 > (uint64_t)(v54[11] - v54[10]) >> 3)
  {
    v379 = vdupq_n_s64(1uLL);
    do
    {
      v109 = operator new();
      v110 = v109;
      *(_OWORD *)v109 = 0u;
      *(_OWORD *)(v109 + 16) = 0u;
      *(_OWORD *)(v109 + 32) = 0u;
      *(_OWORD *)(v109 + 48) = 0u;
      *(_OWORD *)(v109 + 64) = 0u;
      *(_QWORD *)(v109 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v109 + 24) = "";
      *(_QWORD *)(v109 + 32) = 0;
      *(_DWORD *)(v109 + 48) = 0;
      *(_QWORD *)(v109 + 40) = 0;
      *(_DWORD *)(v109 + 64) = 1065353216;
      *(_OWORD *)(v109 + 88) = 0u;
      *(_OWORD *)(v109 + 72) = 0u;
      *(int64x2_t *)(v109 + 104) = v379;
      *(_QWORD *)(v109 + 120) = 0;
      v112 = (uint64_t *)v385[11];
      v111 = v385[12];
      if ((unint64_t)v112 >= v111)
      {
        v114 = (char *)v385[10];
        v115 = ((char *)v112 - v114) >> 3;
        v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 61)
          abort();
        v117 = v111 - (_QWORD)v114;
        if (v117 >> 2 > v116)
          v116 = v117 >> 2;
        if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v116;
        if (v118)
        {
          if (v118 >> 61)
            goto LABEL_445;
          v119 = (char *)operator new(8 * v118);
        }
        else
        {
          v119 = 0;
        }
        v120 = (uint64_t *)&v119[8 * v115];
        *v120 = v110;
        v113 = v120 + 1;
        if (v112 == (uint64_t *)v114)
        {
          v128 = v385;
        }
        else
        {
          v121 = (char *)(v112 - 1) - v114;
          if (v121 < 0x58)
            goto LABEL_451;
          if ((unint64_t)(v114 - v119) < 0x20)
            goto LABEL_451;
          v122 = (v121 >> 3) + 1;
          v123 = &v119[8 * v115 - 16];
          v124 = v112 - 2;
          v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v126 = *(_OWORD *)v124;
            *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
            *(_OWORD *)v123 = v126;
            v123 -= 32;
            v124 -= 4;
            v125 -= 4;
          }
          while (v125);
          v120 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
          v112 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
          if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_451:
            do
            {
              v127 = *--v112;
              *--v120 = v127;
            }
            while (v112 != (uint64_t *)v114);
          }
          v128 = v385;
          v112 = (uint64_t *)v385[10];
        }
        v128[10] = v120;
        v128[11] = v113;
        v128[12] = &v119[8 * v118];
        this = v387;
        if (v112)
          operator delete(v112);
      }
      else
      {
        *v112 = v109;
        v113 = v112 + 1;
        this = v387;
      }
      v385[11] = v113;
      v129 = (_QWORD *)*(v113 - 1);
      v130 = (_QWORD *)operator new();
      v131 = *((_QWORD *)this + 44);
      v132 = operator new(0xE8uLL);
      v132[1] = 0;
      v132[2] = 0;
      *v132 = &off_1E42E2278;
      v133 = ggl::BufferData::BufferData((uint64_t)(v132 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v132[28] = ggl::Tile::View::reflection(void)::reflection;
      v132[3] = &off_1E42B97B0;
      *(_QWORD *)v388 = v133;
      *(_QWORD *)&v388[8] = v132;
      v440 = 0.0;
      *(_QWORD *)&v441 = 0;
      v134 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v134->__shared_owners_ = 0;
      v135 = (unint64_t *)&v134->__shared_owners_;
      v134->__shared_weak_owners_ = 0;
      v134->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v136 = ggl::BufferData::BufferData((uint64_t)&v134[1], qword_1EE55CC40, 2, 1, 6, 1);
      v134[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v134[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v412.f64[0] = v136;
      *(_QWORD *)&v412.f64[1] = v134;
      ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(v130, *(_QWORD *)(v131 + 40), *(std::__shared_weak_count **)(v131 + 48), (uint64_t *)v388, (uint64_t *)&v440, (uint64_t *)&v412);
      *v129 = v130;
      do
        v137 = __ldaxr(v135);
      while (__stlxr(v137 - 1, v135));
      if (v137)
      {
        v138 = (std::__shared_weak_count *)v441;
        if (!(_QWORD)v441)
          goto LABEL_190;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
        v138 = (std::__shared_weak_count *)v441;
        if (!(_QWORD)v441)
          goto LABEL_190;
      }
      v139 = (unint64_t *)&v138->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (v140)
      {
LABEL_190:
        v141 = *(std::__shared_weak_count **)&v388[8];
        if (*(_QWORD *)&v388[8])
          goto LABEL_191;
        goto LABEL_157;
      }
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
      v141 = *(std::__shared_weak_count **)&v388[8];
      if (*(_QWORD *)&v388[8])
      {
LABEL_191:
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
LABEL_157:
      v129[9] = v420;
    }
    while (v382 > (uint64_t)(v385[11] - v385[10]) >> 3);
  }
  v144 = (_QWORD *)*((_QWORD *)v377 + 1);
  v145 = (int8x8_t)v144[1];
  if (!*(_QWORD *)&v145)
  {
    v149 = 0;
    v147 = v385;
    goto LABEL_222;
  }
  v146 = (uint8x8_t)vcnt_s8(v145);
  v146.i16[0] = vaddlv_u8(v146);
  v147 = v385;
  if (v146.u32[0] > 1uLL)
  {
    v148 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v145 <= 0x1AF456233693CD46uLL)
      v148 = 0x1AF456233693CD46uLL % *(_QWORD *)&v145;
  }
  else
  {
    v148 = (*(_QWORD *)&v145 - 1) & 0x1AF456233693CD46;
  }
  v150 = *(_QWORD **)(*v144 + 8 * v148);
  if (!v150)
    goto LABEL_221;
  v151 = (_QWORD *)*v150;
  if (!v151)
    goto LABEL_221;
  if (v146.u32[0] < 2uLL)
  {
    v152 = *(_QWORD *)&v145 - 1;
    while (1)
    {
      v154 = v151[1];
      if (v154 == 0x1AF456233693CD46)
      {
        if (v151[2] == 0x1AF456233693CD46)
          goto LABEL_219;
      }
      else if ((v154 & v152) != v148)
      {
        goto LABEL_221;
      }
      v151 = (_QWORD *)*v151;
      if (!v151)
        goto LABEL_221;
    }
  }
  while (1)
  {
    v153 = v151[1];
    if (v153 == 0x1AF456233693CD46)
      break;
    if (v153 >= *(_QWORD *)&v145)
      v153 %= *(_QWORD *)&v145;
    if (v153 != v148)
      goto LABEL_221;
LABEL_208:
    v151 = (_QWORD *)*v151;
    if (!v151)
      goto LABEL_221;
  }
  if (v151[2] != 0x1AF456233693CD46)
    goto LABEL_208;
LABEL_219:
  v155 = v151[5];
  if (*(_QWORD *)(v155 + 8) == 0x1AF456233693CD46)
  {
    v149 = *(_QWORD *)(v155 + 32);
    goto LABEL_222;
  }
LABEL_221:
  v149 = 0;
LABEL_222:
  md::LayoutContext::frameState(v377);
  v380 = *(unsigned __int8 *)(v156 + 128);
  v157 = (float64_t *)(v149 + 808);
  if (LOBYTE(v422.f64[0]))
    v157 = &v422.f64[1];
  v158 = *(float64x2_t *)(v157 + 10);
  v416 = *(float64x2_t *)(v157 + 8);
  v417 = v158;
  v159 = *(float64x2_t *)(v157 + 14);
  v418 = *(float64x2_t *)(v157 + 12);
  v419 = v159;
  v160 = *(float64x2_t *)(v157 + 2);
  v412 = *(float64x2_t *)v157;
  v413 = v160;
  v161 = *(float64x2_t *)(v157 + 6);
  v414 = *(float64x2_t *)(v157 + 4);
  v415 = v161;
  v162 = (_QWORD *)*((_QWORD *)this + 34);
  v373 = (_QWORD *)*((_QWORD *)this + 35);
  if (v162 != v373)
  {
    while (1)
    {
      v375 = v162;
      v163 = *v162;
      if (!v439
        || (*(_QWORD *)v388 = *v162, ((*(uint64_t (**)(_QWORD *, _BYTE *))(*v439 + 48))(v439, v388) & 1) != 0))
      {
        v164 = *(_QWORD *)(v163 + 384);
        v165 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v374 + 8), (unsigned __int8 *)(v164 + 16));
        if (v165)
        {
          v166 = v165[16];
          v167 = v165[17];
          if (v167 != v166)
            break;
        }
      }
LABEL_226:
      v162 = v375 + 1;
      if (v375 + 1 == v373)
        goto LABEL_323;
    }
    v383 = (unsigned __int8 *)(v164 + 168);
    while (2)
    {
      v168 = *(unsigned __int8 **)(v163 + 384);
      v169 = (_QWORD *)*((_QWORD *)this + 44);
      if (v168[168] != 255)
      {
        v170 = v169[15];
        v171 = v147[10];
        v172 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v171 + 8 * v170) + 64) + 32);
        *(_OWORD *)v388 = 0uLL;
        v173 = *(_QWORD *)(v172 + 8);
        if (v173)
          v174 = *(_DWORD **)(v172 + 72);
        else
          v174 = 0;
        *(_QWORD *)&v206 = 0;
        *((_QWORD *)&v206 + 1) = v172;
        *(_OWORD *)v388 = v206;
        *(_QWORD *)&v388[16] = 0;
        *(_QWORD *)&v388[24] = v173;
        *(_QWORD *)&v388[40] = v174;
        *(_WORD *)&v388[32] = 1;
        v207 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v168 + 32))(v168);
        v174[8] = *v207;
        v174[9] = v207[1];
        v174[10] = v207[2];
        v208 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v163 + 384) + 32))(*(_QWORD *)(v163 + 384));
        v174[12] = v208[3];
        v174[13] = v208[4];
        v174[14] = v208[5];
        *(_QWORD *)(*(_QWORD *)(v171 + 8 * v170) + 32) = **((_QWORD **)this + 44);
        *(_QWORD *)(*(_QWORD *)(v171 + 8 * v170) + 40) = **(_QWORD **)(v171 + 8 * v170);
        v209 = *(uint64_t **)(v171 + 8 * v170);
        v209[7] = 0;
        *((_DWORD *)v209 + 12) = v384 + *(unsigned __int8 *)(v164 + 169);
        v210 = *v209;
        md::GeometryContext::transformConstantData(&v440, (uint64_t *)v381, v383, v380, 0.0, 0.0);
        v211 = *(_QWORD *)(v210 + 64);
        v212 = v440;
        v213 = v441;
        *(double *)(v211 + 16) = v440;
        *(_QWORD *)(v211 + 24) = 0;
        v214 = *(_QWORD *)(v210 + 160);
        if (v213)
        {
          v215 = (unint64_t *)(v213 + 8);
          do
            v216 = __ldxr(v215);
          while (__stxr(v216 + 1, v215));
        }
        v217 = *(std::__shared_weak_count **)(v214 + 24);
        *(double *)(v214 + 16) = v212;
        *(_QWORD *)(v214 + 24) = v213;
        if (v217)
        {
          v218 = (unint64_t *)&v217->__shared_owners_;
          do
            v219 = __ldaxr(v218);
          while (__stlxr(v219 - 1, v218));
          if (!v219)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
        v220 = (std::__shared_weak_count *)v441;
        v221 = v387;
        if ((_QWORD)v441)
        {
          v222 = (unint64_t *)(v441 + 8);
          do
            v223 = __ldaxr(v222);
          while (__stlxr(v223 - 1, v222));
          if (!v223)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
          }
        }
        v224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v414), v415);
        v225 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v416), v417);
        v226 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v418), v419);
        v227 = *(uint64_t **)(v171 + 8 * v170);
        v229 = *v227;
        v228 = v227 + 1;
        v230 = **(_QWORD ***)(v229 + 64);
        v231 = v230[1];
        v232 = (float32x4_t *)v230[9];
        *v232 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v412), v413);
        v232[1] = v224;
        v232[2] = v225;
        v232[3] = v226;
        if (v230[8] > v231)
          v231 = v230[8];
        v230[7] = 0;
        v230[8] = v231;
        v233 = *(_QWORD **)(v19 + 80);
        v234 = *(_QWORD *)(v19 + 88);
        if ((unint64_t)v233 < v234)
        {
          if (v233)
            *v233 = v228;
          v235 = v233 + 1;
          goto LABEL_306;
        }
        v236 = *(_QWORD *)(v19 + 72);
        v237 = ((uint64_t)v233 - v236) >> 3;
        v238 = v237 + 1;
        if ((unint64_t)(v237 + 1) >> 61)
          abort();
        v239 = v234 - v236;
        if (v239 >> 2 > v238)
          v238 = v239 >> 2;
        if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v238;
        if (v240)
        {
          v241 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 96) + 16))(*(_QWORD *)(v19 + 96), 8 * v240, 8);
          v242 = (_QWORD *)(v241 + 8 * v237);
          v243 = v241 + 8 * v240;
          if (v241)
            *v242 = v228;
        }
        else
        {
          v243 = 0;
          v242 = (_QWORD *)(8 * v237);
        }
        v221 = v387;
        v268 = *(_QWORD *)(v19 + 72);
        v267 = *(_QWORD *)(v19 + 80);
        v269 = v267 - v268;
        if (v267 == v268)
        {
          v271 = v242;
          goto LABEL_304;
        }
        v270 = v269 - 8;
        if ((unint64_t)(v269 - 8) < 0x38)
        {
          v271 = v242;
        }
        else
        {
          v271 = v242;
          if ((unint64_t)(v267 - (_QWORD)v242) >= 0x20)
          {
            v272 = (v270 >> 3) + 1;
            v273 = v242 - 2;
            v274 = (__int128 *)(v267 - 16);
            v275 = v272 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v276 = *v274;
              *(v273 - 1) = *(v274 - 1);
              *v273 = v276;
              v273 -= 2;
              v274 -= 2;
              v275 -= 4;
            }
            while (v275);
            v271 = &v242[-(v272 & 0x3FFFFFFFFFFFFFFCLL)];
            v267 -= 8 * (v272 & 0x3FFFFFFFFFFFFFFCLL);
            if (v272 == (v272 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_303:
              v267 = *(_QWORD *)(v19 + 72);
LABEL_304:
              v235 = v242 + 1;
              *(_QWORD *)(v19 + 72) = v271;
              *(_QWORD *)(v19 + 80) = v242 + 1;
              v278 = *(_QWORD *)(v19 + 88);
              *(_QWORD *)(v19 + 88) = v243;
              if (v267)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 96) + 40))(*(_QWORD *)(v19 + 96), v267, v278 - v267);
LABEL_306:
              *(_QWORD *)(v19 + 80) = v235;
              ++*(_QWORD *)(*((_QWORD *)v221 + 44) + 120);
              if (*(_QWORD *)&v388[40])
              {
                v279 = *(_OWORD *)&v388[16];
                if (*(_QWORD *)&v388[24] != *(_QWORD *)&v388[16])
                {
                  v280 = *(_QWORD **)&v388[8];
                  v281 = v388[32];
                  v282 = v388[33];
                  if (*(_QWORD *)v388 && *(_BYTE *)(*(_QWORD *)&v388[8] + 17) != 2)
                    (*(void (**)(void))(**(_QWORD **)v388 + 64))();
                  if (v281 && !v282)
                  {
                    v283 = v280[7];
                    v284 = v280[8];
                    if (v284 == v283)
                      v283 = v280[10] - v280[9];
                    if ((unint64_t)v279 < v283)
                      v283 = v279;
                    if (v284 <= *((_QWORD *)&v279 + 1))
                      v284 = *((_QWORD *)&v279 + 1);
                    if (v284 == v283)
                      v284 = v283 + v280[10] - v280[9];
                    v280[7] = v283;
                    v280[8] = v284;
                  }
                }
              }
              v147 = v385;
              this = v387;
LABEL_234:
              v166 += 3;
              if (v166 == v167)
                goto LABEL_226;
              continue;
            }
          }
        }
        do
        {
          v277 = *(_QWORD *)(v267 - 8);
          v267 -= 8;
          *--v271 = v277;
        }
        while (v267 != v268);
        goto LABEL_303;
      }
      break;
    }
    v175 = v169[14];
    v176 = v147[7];
    *(_QWORD *)(*(_QWORD *)(v176 + 8 * v175) + 32) = *v169;
    *(_QWORD *)(*(_QWORD *)(v176 + 8 * v175) + 40) = **(_QWORD **)(v176 + 8 * v175);
    v177 = *(uint64_t **)(v176 + 8 * v175);
    v177[7] = 0;
    *((_DWORD *)v177 + 12) = v384 + *(unsigned __int8 *)(v164 + 169);
    if ((v380 - 1) > 2u)
    {
      v244 = 1 << *((_BYTE *)v166 + 1);
      v245 = 1.0 / (double)v244;
      v246 = v245 * (double)*((int *)v166 + 2);
      v247 = v245 * (double)(v244 + ~*((_DWORD *)v166 + 1));
      memset(&v406[8], 0, 32);
      *(double *)v406 = v245;
      *(double *)&v406[40] = v245;
      v407 = 0u;
      v408 = 0u;
      v409 = *(unint64_t *)&v245;
      *(double *)&v410 = v246;
      *((double *)&v410 + 1) = v247;
      v411 = xmmword_19FFB33A0;
      v248 = *v177;
      v249 = *(_QWORD *)(*v177 + 64);
      *(_QWORD *)(v249 + 24) = 0;
      v250 = v169[1];
      *(_QWORD *)(v249 + 16) = v250;
      v251 = *(_QWORD *)(v248 + 160);
      v252 = v169[2];
      if (v252)
      {
        v253 = (unint64_t *)(v252 + 8);
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
      }
      v255 = *(std::__shared_weak_count **)(v251 + 24);
      *(_QWORD *)(v251 + 16) = v250;
      *(_QWORD *)(v251 + 24) = v252;
      if (v255)
      {
        v256 = (unint64_t *)&v255->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
          v205 = v255;
LABEL_288:
          std::__shared_weak_count::__release_weak(v205);
        }
      }
    }
    else
    {
      v178 = 1 << *(_BYTE *)(v164 + 169);
      v179 = 1.0 / (double)v178;
      v180 = *(int *)(v164 + 176);
      v181 = v178 + ~*(_DWORD *)(v164 + 172);
      *(double *)v388 = v179 * (double)v180;
      *(double *)&v388[8] = v179 * (double)v181;
      *(double *)&v388[16] = v179 + (double)v180 * v179;
      *(double *)&v388[24] = v179 + (double)v181 * v179;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v395, (double *)v388, 0.0, 0.0);
      v389.f64[1] = 0.0;
      memset(&v388[8], 0, 72);
      v391.f64[1] = 1.0;
      v390 = v401;
      v391.f64[0] = v402;
      *(double *)v388 = v403 - v401.f64[0];
      *(double *)&v388[40] = v404 - v401.f64[1];
      v389.f64[0] = v405 - v402;
      v182 = v398;
      v183 = v399;
      v184 = v182 + v182;
      v185 = (v182 + v182) * v182;
      v186 = (v183 + v183) * v183;
      v187 = v397;
      v188 = v187 + v187;
      v189 = (v187 + v187) * v398;
      v190 = (v183 + v183) * v400;
      v191 = v399 * (v187 + v187);
      v192 = 1.0 - (v187 + v187) * v187;
      v440 = 1.0 - (v185 + v186);
      *(double *)&v441 = v190 + v189;
      *((double *)&v442 + 1) = v189 - v190;
      *(double *)&v443 = v192 - v186;
      *((double *)&v444 + 1) = v400 * v184 + v191;
      v445 = v184 * v399 - v400 * v188;
      *((double *)&v441 + 1) = v191 - v400 * v184;
      *((double *)&v443 + 1) = v400 * v188 + v184 * v399;
      v446 = v192 - v185;
      *(_QWORD *)&v442 = 0;
      *(_QWORD *)&v444 = 0;
      v447 = 0;
      v448 = v395;
      *(_QWORD *)&v449 = v396;
      *((_QWORD *)&v449 + 1) = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v394, &v440, (double *)v388);
      *(_OWORD *)v406 = v394[0];
      *(_OWORD *)&v406[16] = v394[1];
      *(_OWORD *)&v406[32] = v394[2];
      v407 = v394[3];
      v408 = v394[4];
      v409 = v394[5];
      v410 = v394[6];
      v411 = v394[7];
      v193 = **(_QWORD **)(v176 + 8 * v175);
      md::GeometryContext::transformConstantData((double *)v388, (uint64_t *)v381, v383, v380, 0.0, 0.0);
      v194 = *(_QWORD *)(v193 + 64);
      v195 = *(_OWORD *)v388;
      *(_QWORD *)(v194 + 16) = *(_QWORD *)v388;
      *(_QWORD *)(v194 + 24) = 0;
      v196 = *(_QWORD *)(v193 + 160);
      if (*((_QWORD *)&v195 + 1))
      {
        v197 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v198 = __ldxr(v197);
        while (__stxr(v198 + 1, v197));
      }
      v199 = *(std::__shared_weak_count **)(v196 + 24);
      *(_OWORD *)(v196 + 16) = v195;
      if (!v199)
        goto LABEL_246;
      v200 = (unint64_t *)&v199->__shared_owners_;
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
        v202 = *(std::__shared_weak_count **)&v388[8];
        if (*(_QWORD *)&v388[8])
          goto LABEL_247;
      }
      else
      {
LABEL_246:
        v202 = *(std::__shared_weak_count **)&v388[8];
        if (*(_QWORD *)&v388[8])
        {
LABEL_247:
          v203 = (unint64_t *)&v202->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            v205 = v202;
            goto LABEL_288;
          }
        }
      }
    }
    gm::operator*<double,4,4,4>((double *)v388, v412.f64, (double *)v406);
    v258 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v388[32]), *(float64x2_t *)&v388[48]);
    v259 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v388[64]), v389);
    v260 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v390), v391);
    v261 = *(uint64_t **)(v176 + 8 * v175);
    v263 = *v261;
    v262 = (ggl::RenderItem *)(v261 + 1);
    v264 = **(_QWORD ***)(v263 + 64);
    v265 = v264[1];
    v266 = (float32x4_t *)v264[9];
    *v266 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v388), *(float64x2_t *)&v388[16]);
    v266[1] = v258;
    v266[2] = v259;
    v266[3] = v260;
    if (v264[8] > v265)
      v265 = v264[8];
    v264[7] = 0;
    v264[8] = v265;
    ggl::CommandBuffer::pushRenderItem(v19, v262);
    this = v387;
    ++*(_QWORD *)(*((_QWORD *)v387 + 44) + 112);
    goto LABEL_234;
  }
LABEL_323:
  v285 = v421;
  if (v421)
  {
    v286 = (unint64_t *)&v421->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v21 = v439;
  if (v439 == v438)
  {
    v26 = 4;
    v21 = v438;
LABEL_332:
    (*(void (**)(void))(*v21 + 8 * v26))();
  }
  else if (v439)
  {
    v26 = 5;
    goto LABEL_332;
  }
  *(_QWORD *)(v19 + 32) = *((_QWORD *)this + 46);
  v288 = *((_QWORD *)v377 + 3);
  v289 = *(unsigned __int8 *)(v288 + 1);
  v290 = *(unsigned __int8 *)(v288 + 2);
  v291 = *((unsigned __int8 *)this + 360);
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v388, v377);
  v292 = v291 == 0;
  v391 = 0uLL;
  memset_pattern16(&v392, &unk_19FFB6380, 0x10uLL);
  v293 = v289 < v290;
  v393[21] = 0;
  *(_QWORD *)v393 = 0;
  *(_QWORD *)&v393[8] = 0;
  *(_DWORD *)&v393[15] = 0;
  v294 = v289 < v290 && v292;
  if (*((_BYTE *)this + 360))
    v293 = 1;
  v388[56] = v293;
  v393[16] = **((_BYTE **)v377 + 92);
  v393[17] = 1;
  v393[18] = v294;
  v295 = this;
  v296 = *((_QWORD *)this + 34);
  v386 = *((_QWORD *)v295 + 35);
  if (v296 != v386)
  {
    while (2)
    {
      v297 = *(_QWORD *)(*(_QWORD *)v296 + 384);
      if (v297)
      {
        v298 = (_QWORD *)*((_QWORD *)v377 + 1);
        v299 = v298[1];
        if ((v299 & (v299 - 1)) != 0)
        {
          v301 = 0x1AF456233693CD46;
          if (v299 <= 0x1AF456233693CD46)
            v301 = 0x1AF456233693CD46 % v299;
          v300 = *(_QWORD **)(*v298 + 8 * v301);
          do
          {
            do
              v300 = (_QWORD *)*v300;
            while (v300[1] != 0x1AF456233693CD46);
          }
          while (v300[2] != 0x1AF456233693CD46);
        }
        else
        {
          v300 = *(_QWORD **)(*v298 + 8 * ((v299 - 1) & 0x1AF456233693CD46));
          do
          {
            do
              v300 = (_QWORD *)*v300;
            while (v300[1] != 0x1AF456233693CD46);
          }
          while (v300[2] != 0x1AF456233693CD46);
        }
        v302 = *(double **)(v300[5] + 32);
        v303 = 1 << *(_BYTE *)(v297 + 169);
        v304 = 1.0 / (double)v303;
        v305 = (double)(v303 + ~*(_DWORD *)(v297 + 172));
        v306 = v304 * (double)*(int *)(v297 + 176);
        v447 = 0;
        v444 = 0u;
        v445 = 0.0;
        v442 = 0u;
        v443 = 0u;
        v441 = 0u;
        v440 = v304;
        *(double *)&v443 = v304;
        v446 = v304;
        *(double *)&v448 = v306;
        *((double *)&v448 + 1) = v304 * v305;
        v449 = xmmword_19FFB33A0;
        gm::operator*<double,4,4,4>(v422.f64, v302 + 101, &v440);
        v307 = vcvt_f32_f64(v423);
        v308 = vcvt_f32_f64(v424);
        v309 = vcvt_f32_f64(v425);
        v310 = vcvt_f32_f64(v426);
        v311 = vcvt_f32_f64(v427);
        v312 = vcvt_f32_f64(v428);
        v313 = vcvt_f32_f64(v429);
        v314 = *(_QWORD **)(v297 + 720);
        v315 = v314[1];
        v316 = (float32x2_t *)v314[9];
        *v316 = vcvt_f32_f64(v422);
        v316[1] = v307;
        v316[2] = v308;
        v316[3] = v309;
        v316[4] = v310;
        v316[5] = v311;
        v316[6] = v312;
        v316[7] = v313;
        v317 = v302[471] * v302[173] / (v302[171] * v304);
        v316[8].f32[0] = v317;
        if (v314[8] > v315)
          v315 = v314[8];
        v314[7] = 0;
        v314[8] = v315;
        v318 = v298[1];
        if ((v318 & (v318 - 1)) != 0)
        {
          v320 = 0xE42D19AFCA302E68;
          if (v318 <= 0xE42D19AFCA302E68)
            v320 = 0xE42D19AFCA302E68 % v318;
          v319 = *(_QWORD **)(*v298 + 8 * v320);
          do
          {
            do
              v319 = (_QWORD *)*v319;
            while (v319[1] != 0xE42D19AFCA302E68);
          }
          while (v319[2] != 0xE42D19AFCA302E68);
        }
        else
        {
          v319 = *(_QWORD **)(*v298 + 8 * ((v318 - 1) & 0xE42D19AFCA302E68));
          do
          {
            do
              v319 = (_QWORD *)*v319;
            while (v319[1] != 0xE42D19AFCA302E68);
          }
          while (v319[2] != 0xE42D19AFCA302E68);
        }
        v321 = **(_QWORD **)(v319[5] + 32);
        *(float64_t *)((char *)v422.f64 + 7) = 0.0;
        v422.f64[0] = 0.0;
        HIBYTE(v422.f64[1]) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v412, v321, (gss::FeatureAttributeSet *)(v297 + 752), (gss::QueryOverrides *)&v422);
        if (!BYTE6(v422.f64[1]) && *(_QWORD *)&v422.f64[0])
        {
          v323 = gss::Allocator::instance(v322);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v323 + 40))(v323, *(_QWORD *)&v422.f64[0], WORD2(v422.f64[1]));
        }
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v373);
        v324 = (void *)objc_claimAutoreleasedReturnValue();
        v325 = objc_msgSend(v324, "loadGreenTraffic");

        v326 = v412;
        v394[0] = v412;
        if (*(_QWORD *)&v412.f64[1])
        {
          v327 = (unint64_t *)(*(_QWORD *)&v412.f64[1] + 8);
          do
            v328 = __ldxr(v327);
          while (__stxr(v328 + 1, v327));
          do
            v329 = __ldxr(v327);
          while (__stxr(v329 + 1, v327));
        }
        md::TrafficMeshStyle::setup((int *)v406, *(uint64_t *)&v326.f64[0], *(std::__shared_weak_count **)&v326.f64[1], v325);
        if (!*(_QWORD *)&v326.f64[1])
          goto LABEL_375;
        v330 = (unint64_t *)(*(_QWORD *)&v326.f64[1] + 8);
        do
          v331 = __ldaxr(v330);
        while (__stlxr(v331 - 1, v330));
        if (!v331)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&v326.f64[1] + 16))(*(_QWORD *)&v326.f64[1]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v326.f64[1]);
          v332 = (std::__shared_weak_count *)*((_QWORD *)&v394[0] + 1);
          if (*((_QWORD *)&v394[0] + 1))
          {
LABEL_376:
            v333 = (unint64_t *)&v332->__shared_owners_;
            do
              v334 = __ldaxr(v333);
            while (__stlxr(v334 - 1, v333));
            if (!v334)
            {
              ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
              std::__shared_weak_count::__release_weak(v332);
            }
          }
        }
        else
        {
LABEL_375:
          v332 = (std::__shared_weak_count *)*((_QWORD *)&v394[0] + 1);
          if (*((_QWORD *)&v394[0] + 1))
            goto LABEL_376;
        }
        v426 = *(float64x2_t *)&v388[64];
        v427 = v389;
        v428 = v390;
        v422 = *(float64x2_t *)v388;
        v423 = *(float64x2_t *)&v388[16];
        v424 = *(float64x2_t *)&v388[32];
        v425 = *(float64x2_t *)&v388[48];
        v335 = v391.f64[1];
        if (*(_QWORD *)&v391.f64[1])
        {
          v336 = (unint64_t *)(*(_QWORD *)&v391.f64[1] + 8);
          do
            v337 = __ldxr(v336);
          while (__stxr(v337 + 1, v336));
        }
        v430 = v392;
        *(_OWORD *)v431 = *(_OWORD *)v393;
        *(_QWORD *)&v431[14] = *(_QWORD *)&v393[14];
        v338 = v412;
        if (*(_QWORD *)&v412.f64[1])
        {
          v339 = (unint64_t *)(*(_QWORD *)&v412.f64[1] + 8);
          do
            v340 = __ldxr(v339);
          while (__stxr(v340 + 1, v339));
        }
        v429 = v338;
        if (v335 != 0.0)
        {
          v341 = (unint64_t *)(*(_QWORD *)&v335 + 8);
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v335 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v335));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v335);
          }
        }
        v430 = *(_OWORD *)v406;
        v343 = v388[56];
        if (v388[56])
        {
          if (v393[18])
            v343 = *(_BYTE *)(*((_QWORD *)v377 + 3) + 1);
          else
            v343 = *(_BYTE *)(v297 + 169) + *((_BYTE *)v387 + 364);
        }
        BYTE1(v425.f64[1]) = v343;
        v344 = *(_QWORD *)(v297 + 736);
        if (v344)
        {
          v345 = *(_QWORD *)(v344 + 152);
          v346 = *((_QWORD *)v387 + 47);
          if (v345)
            v347 = v345 == v346;
          else
            v347 = 0;
          if (!v347)
            md::PilledTrafficLayer::setSharedResources(*(_QWORD **)(v297 + 736), v346);
          md::PilledTrafficLayer::layout((md::PilledTrafficLayer *)v344, (const md::TrafficContext *)&v422);
          v440 = COERCE_DOUBLE(&off_1E42D4528);
          *(_QWORD *)&v441 = v19;
          *(_QWORD *)&v442 = &v440;
          md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v344 + 8), *(_QWORD **)(v344 + 16), &v440, v348);
          v349 = (double *)v442;
          if ((double *)v442 == &v440)
          {
            v349 = &v440;
            v350 = 4;
LABEL_406:
            (*(void (**)(void))(*(_QWORD *)v349 + 8 * v350))();
          }
          else if ((_QWORD)v442)
          {
            v350 = 5;
            goto LABEL_406;
          }
        }
        v351 = *(_QWORD *)(v297 + 744);
        if (v351)
        {
          v352 = *(_QWORD *)(v351 + 160);
          v353 = *((_QWORD *)v387 + 47);
          if (v352)
            v354 = v352 == v353;
          else
            v354 = 0;
          if (!v354)
            md::SolidTrafficLayer::setSharedResources(*(_QWORD **)(v297 + 744), v353);
          md::SolidTrafficLayer::layout((md::SolidTrafficLayer *)v351, (const md::TrafficContext *)&v422);
          v440 = COERCE_DOUBLE(&off_1E42D44E0);
          *(_QWORD *)&v441 = v19;
          *(_QWORD *)&v442 = &v440;
          md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v351 + 8), *(_QWORD **)(v351 + 16), &v440, v355);
          v356 = (double *)v442;
          if ((double *)v442 == &v440)
          {
            v356 = &v440;
            v357 = 4;
LABEL_417:
            (*(void (**)(void))(*(_QWORD *)v356 + 8 * v357))();
          }
          else if ((_QWORD)v442)
          {
            v357 = 5;
            goto LABEL_417;
          }
        }
        v358 = v429.f64[1];
        if (!*(_QWORD *)&v429.f64[1])
          goto LABEL_422;
        v359 = (unint64_t *)(*(_QWORD *)&v429.f64[1] + 8);
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v358 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v358));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v358);
          v361 = v412.f64[1];
          if (*(_QWORD *)&v412.f64[1])
          {
LABEL_423:
            v362 = (unint64_t *)(*(_QWORD *)&v361 + 8);
            do
              v363 = __ldaxr(v362);
            while (__stlxr(v363 - 1, v362));
            if (!v363)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v361 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v361));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v361);
            }
          }
        }
        else
        {
LABEL_422:
          v361 = v412.f64[1];
          if (*(_QWORD *)&v412.f64[1])
            goto LABEL_423;
        }
      }
      v296 += 8;
      if (v296 == v386)
        break;
      continue;
    }
  }
  v364 = *(_QWORD *)(v19 + 72);
  v365 = *(uint64_t **)(v19 + 80);
  v366 = 126 - 2 * __clz((uint64_t)((uint64_t)v365 - v364) >> 3);
  if (v365 == (uint64_t *)v364)
    v367 = 0;
  else
    v367 = v366;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v364, v365, v367, 1);
  v368 = v391.f64[1];
  if (*(_QWORD *)&v391.f64[1])
  {
    v369 = (unint64_t *)(*(_QWORD *)&v391.f64[1] + 8);
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v368 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v368));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v368);
    }
  }
  if (!v437)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v437 + 48))(v437);
  result = v437;
  if (v437 == v436)
  {
    v372 = 4;
    result = v436;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v372))();
  }
  else if (v437)
  {
    v372 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v372))();
  }
  return result;
}

void sub_19F81CFC8(_Unwind_Exception *a1)
{
  unint64_t *v2;
  uint64_t v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x370]);
  v2 = (unint64_t *)STACK[0x4A0];
  if ((unint64_t *)STACK[0x4A0] == &STACK[0x488])
  {
    v3 = 4;
    v2 = &STACK[0x488];
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x468]);
  _Unwind_Resume(a1);
}

uint64_t md::LegacyTrafficRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned __int8 *v8;

  v2 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
  v3 = *(unsigned __int8 **)(a2 + 24);
  v4 = *v3;
  v5 = v4 + v2;
  v6 = v3[1];
  v7 = v5 > v6;
  if (v5 <= v6)
    v8 = 0;
  else
    v8 = v3 + 4;
  *(_QWORD *)(result + 368) = v8;
  if (v7)
  {
    v3[1] = v3[2];
    v4 = 1;
  }
  *v3 = v4 + v2;
  *(_DWORD *)(result + 364) = v4 - *(unsigned __int8 *)(result + 48);
  return result;
}

void std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LegacyTrafficLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D21B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D21B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LegacyTrafficLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LegacyTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2170;
  a2[1] = v2;
  return result;
}

void md::RouteLineLayerDataSource::~RouteLineLayerDataSource(md::RouteLineLayerDataSource *this)
{
  md::RouteLineLayerDataSource::~RouteLineLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  void *v14;
  void *v15;

  *(_QWORD *)this = &off_1E42A0F98;
  *((_QWORD *)this + 73) = &unk_1E42A1048;
  v2 = (_QWORD *)*((_QWORD *)this + 74);
  v3 = (uint64_t *)v2[10];
  if (v3)
  {
    v4 = (char *)this + 584;
    v5 = v2 + 10;
    v6 = (_QWORD *)v2[10];
    do
    {
      v7 = v6[4];
      v8 = v7 >= (unint64_t)v4;
      if (v7 >= (unint64_t)v4)
        v9 = v6;
      else
        v9 = v6 + 1;
      if (v8)
        v5 = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v5 != v2 + 10 && v5[4] <= (unint64_t)v4)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)v2[9] == v5)
        v2[9] = v11;
      --v2[11];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
  v14 = (void *)*((_QWORD *)this + 92);
  if (v14)
  {
    *((_QWORD *)this + 93) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 89);
  if (v15)
  {
    *((_QWORD *)this + 90) = v15;
    operator delete(v15);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 664);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 84));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 80));
  if (*((_BYTE *)this + 608))
    *((_BYTE *)this + 608) = 0;
  gdc::LayerDataSource::~LayerDataSource(this);
}

void md::RouteLineLayerDataSource::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[7];
  int v6;
  char v7[24];

  gdc::LayerDataSource::createDebugNode((_QWORD *)a1, a2);
  v7[23] = 15;
  strcpy(v7, "IsTransitActive");
  v4 = *(unsigned __int8 *)(a1 + 600);
  v6 = 0;
  memset(&v5[4], 0, 24);
  v5[0] = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v7, (uint64_t)v5);
}

uint64_t md::RouteLineLayerDataSource::fallbackSettings(md::RouteLineLayerDataSource *this)
{
  return 65537;
}

void md::RouteLineLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int *v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  uint64_t v16;
  double v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  id v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double v34;
  long double v35;
  double v36;
  BOOL v37;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD **v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  id v105;
  void *v106;
  _QWORD *v107;
  id v108;
  char *v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD v125[2];
  _QWORD **v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD **v129;
  _QWORD *v130[4];

  v130[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v8 = *(int **)(a2 + 16);
  v9 = *((_BYTE *)v8 + 8);
  v10 = v8[1];
  v11 = *v8;
  v123 = 0;
  v124 = 0;
  v122 = &v123;
  v12 = *(_QWORD *)(a1 + 592);
  std::mutex::lock((std::mutex *)(v12 + 96));
  v127 = 0;
  v128 = 0;
  v126 = &v127;
  std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&v126, *(_QWORD **)(v12 + 24), (_QWORD *)(v12 + 32));
  std::mutex::unlock((std::mutex *)(v12 + 96));
  v13 = *(_QWORD *)(a1 + 592);
  std::mutex::lock((std::mutex *)(v13 + 96));
  v115 = a2;
  v114 = a4;
  v130[0] = 0;
  v130[1] = 0;
  v129 = v130;
  std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&v129, *(_QWORD **)(v13 + 48), (_QWORD *)(v13 + 56));
  v14 = 1.0 / (double)(1 << v9);
  v117 = v14 * (double)((1 << v9) + ~v10);
  v118 = v14 * (double)v11;
  v119 = v118 + v14;
  v116 = v117 + v14;
  std::mutex::unlock((std::mutex *)(v13 + 96));
  v15 = 0;
  v16 = 0;
  v17 = 0.5;
  do
  {
    v18 = v15;
    v19 = &(&v126)[3 * v16];
    v22 = (_QWORD *)*v19;
    v20 = v19 + 1;
    v21 = v22;
    if (v22 != v20)
    {
      do
      {
        v23 = (id)v21[4];
        objc_msgSend(v23, "boundingMapRegion");
        v24 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "northLat");
        v26 = v25;
        objc_msgSend(v24, "westLng");
        v28 = v27;
        objc_msgSend(v24, "southLat");
        v30 = v29;
        objc_msgSend(v24, "eastLng");
        v32 = v31;

        if (v119 > v17 + v28 * 0.00277777778)
        {
          v33 = tan(v26 * 0.00872664626 + 0.785398163);
          v34 = log(v33) * 0.159154943 + 0.5;
          v35 = tan(v30 * 0.00872664626 + 0.785398163);
          v36 = log(v35) * 0.159154943 + 0.5;
          v17 = 0.5;
          v37 = v118 >= v32 * 0.00277777778 + 0.5 || v116 <= v36;
          if (!v37 && v117 < v34)
          {
            v39 = v123;
            v40 = &v123;
            v41 = &v123;
            if (v123)
            {
              while (1)
              {
                while (1)
                {
                  v41 = (_QWORD **)v39;
                  v42 = v39[4];
                  if ((unint64_t)v23 >= v42)
                    break;
                  v39 = *v41;
                  v40 = v41;
                  if (!*v41)
                    goto LABEL_22;
                }
                if (v42 >= (unint64_t)v23)
                  break;
                v39 = v41[1];
                if (!v39)
                {
                  v40 = v41 + 1;
                  goto LABEL_22;
                }
              }
            }
            else
            {
LABEL_22:
              v43 = operator new(0x28uLL);
              v43[4] = v23;
              *v43 = 0;
              v43[1] = 0;
              v43[2] = v41;
              *v40 = v43;
              if (*v122)
              {
                v122 = (_QWORD *)*v122;
                v43 = (_QWORD *)*v40;
              }
              v44 = v123;
              v45 = v43 == v123;
              *((_BYTE *)v43 + 24) = v43 == v123;
              if (!v45)
              {
                do
                {
                  v46 = v43[2];
                  if (*(_BYTE *)(v46 + 24))
                    break;
                  v47 = *(_QWORD **)(v46 + 16);
                  v48 = *v47;
                  if (*v47 == v46)
                  {
                    v51 = v47[1];
                    if (!v51 || (v52 = *(unsigned __int8 *)(v51 + 24), v49 = (_BYTE *)(v51 + 24), v52))
                    {
                      if (*(_QWORD **)v46 == v43)
                      {
                        v53 = (uint64_t *)v43[2];
                      }
                      else
                      {
                        v53 = *(uint64_t **)(v46 + 8);
                        v54 = *v53;
                        *(_QWORD *)(v46 + 8) = *v53;
                        if (v54)
                        {
                          *(_QWORD *)(v54 + 16) = v46;
                          v47 = *(_QWORD **)(v46 + 16);
                        }
                        v53[2] = (uint64_t)v47;
                        *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * (**(_QWORD **)(v46 + 16) != v46)) = v53;
                        *v53 = v46;
                        *(_QWORD *)(v46 + 16) = v53;
                        v47 = (_QWORD *)v53[2];
                        v46 = *v47;
                      }
                      *((_BYTE *)v53 + 24) = 1;
                      *((_BYTE *)v47 + 24) = 0;
                      v57 = *(_QWORD *)(v46 + 8);
                      *v47 = v57;
                      if (v57)
                        *(_QWORD *)(v57 + 16) = v47;
                      *(_QWORD *)(v46 + 16) = v47[2];
                      *(_QWORD *)(v47[2] + 8 * (*(_QWORD *)v47[2] != (_QWORD)v47)) = v46;
                      *(_QWORD *)(v46 + 8) = v47;
                      goto LABEL_51;
                    }
                  }
                  else if (!v48 || (v50 = *(unsigned __int8 *)(v48 + 24), v49 = (_BYTE *)(v48 + 24), v50))
                  {
                    if (*(_QWORD **)v46 == v43)
                    {
                      v55 = v43[1];
                      *(_QWORD *)v46 = v55;
                      if (v55)
                      {
                        *(_QWORD *)(v55 + 16) = v46;
                        v47 = *(_QWORD **)(v46 + 16);
                      }
                      v43[2] = v47;
                      *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * (**(_QWORD **)(v46 + 16) != v46)) = v43;
                      v43[1] = v46;
                      *(_QWORD *)(v46 + 16) = v43;
                      v47 = (_QWORD *)v43[2];
                    }
                    else
                    {
                      v43 = (_QWORD *)v43[2];
                    }
                    *((_BYTE *)v43 + 24) = 1;
                    *((_BYTE *)v47 + 24) = 0;
                    v46 = v47[1];
                    v56 = *(_QWORD **)v46;
                    v47[1] = *(_QWORD *)v46;
                    if (v56)
                      v56[2] = v47;
                    *(_QWORD *)(v46 + 16) = v47[2];
                    *(_QWORD *)(v47[2] + 8 * (*(_QWORD *)v47[2] != (_QWORD)v47)) = v46;
                    *(_QWORD *)v46 = v47;
LABEL_51:
                    v47[2] = v46;
                    break;
                  }
                  *(_BYTE *)(v46 + 24) = 1;
                  v43 = v47;
                  *((_BYTE *)v47 + 24) = v47 == v44;
                  *v49 = 1;
                }
                while (v47 != v44);
              }
              ++v124;
            }
          }
        }

        v58 = (_QWORD *)v21[1];
        if (v58)
        {
          do
          {
            v59 = v58;
            v58 = (_QWORD *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            v59 = (_QWORD *)v21[2];
            v45 = *v59 == (_QWORD)v21;
            v21 = v59;
          }
          while (!v45);
        }
        v21 = v59;
      }
      while (v59 != v20);
    }
    v15 = 1;
    v16 = 1;
  }
  while ((v18 & 1) == 0);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v130[0]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v127);
  v60 = *a3;
  v61 = a3[1];
  if (*(_WORD *)(*(_QWORD *)(v115 + 16) + 16) == 10)
  {
    if (v60 != v61)
    {
      while (*(_WORD *)v60 != 10)
      {
        v60 += 48;
        if (v60 == v61)
          goto LABEL_84;
      }
    }
    if (v60 == v61 || *(_QWORD *)(v60 + 32) != 1)
    {
LABEL_84:
      v64 = 0;
      v72 = 0;
      v71 = 0;
      v70 = 1;
      goto LABEL_85;
    }
    v62 = *(_QWORD *)(v60 + 24);
    v63 = *(_QWORD *)(v62 + 112);
    v64 = *(std::__shared_weak_count **)(v62 + 120);
    if (v64)
    {
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(p_shared_owners);
      while (__stxr(v66 + 1, p_shared_owners));
      v67 = (unint64_t *)&v64->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      do
        v69 = __ldaxr(v67);
      while (__stlxr(v69 - 1, v67));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      v70 = 0;
      if (v63)
      {
LABEL_79:
        v71 = *(_QWORD *)(v63 + 144);
        v72 = *(std::__shared_weak_count **)(v63 + 152);
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
          do
            v75 = __ldxr(v73);
          while (__stxr(v75 + 1, v73));
          v76 = 0;
LABEL_86:
          v120 = v71;
          v121 = v72;
          if ((v76 & 1) == 0)
          {
            v77 = (unint64_t *)&v72->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if ((v70 & 1) == 0)
          {
            v79 = (unint64_t *)&v64->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            goto LABEL_121;
          }
          goto LABEL_123;
        }
LABEL_85:
        v76 = 1;
        goto LABEL_86;
      }
    }
    else
    {
      v70 = 1;
      if (v63)
        goto LABEL_79;
    }
    v72 = 0;
    v71 = 0;
    goto LABEL_85;
  }
  if (v60 != v61)
  {
    while (*(_WORD *)v60 != 9)
    {
      v60 += 48;
      if (v60 == v61)
        goto LABEL_111;
    }
  }
  if (v60 == v61 || *(_QWORD *)(v60 + 32) != 1)
  {
LABEL_111:
    v64 = 0;
    v90 = 0;
    v89 = 0;
    v88 = 1;
    goto LABEL_112;
  }
  v81 = *(_QWORD *)(v60 + 24);
  v82 = *(_QWORD *)(v81 + 112);
  v64 = *(std::__shared_weak_count **)(v81 + 120);
  if (!v64)
  {
    v88 = 1;
    if (v82)
      goto LABEL_106;
LABEL_150:
    v90 = 0;
    v89 = 0;
    goto LABEL_112;
  }
  v83 = (unint64_t *)&v64->__shared_owners_;
  do
    v84 = __ldxr(v83);
  while (__stxr(v84 + 1, v83));
  v85 = (unint64_t *)&v64->__shared_owners_;
  do
    v86 = __ldxr(v85);
  while (__stxr(v86 + 1, v85));
  do
    v87 = __ldaxr(v85);
  while (__stlxr(v87 - 1, v85));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  v88 = 0;
  if (!v82)
    goto LABEL_150;
LABEL_106:
  v89 = *(_QWORD *)(v82 + 144);
  v90 = *(std::__shared_weak_count **)(v82 + 152);
  if (!v90)
  {
LABEL_112:
    v94 = 1;
    goto LABEL_113;
  }
  v91 = (unint64_t *)&v90->__shared_owners_;
  do
    v92 = __ldxr(v91);
  while (__stxr(v92 + 1, v91));
  do
    v93 = __ldxr(v91);
  while (__stxr(v93 + 1, v91));
  v94 = 0;
LABEL_113:
  v120 = v89;
  v121 = v90;
  if ((v94 & 1) == 0)
  {
    v95 = (unint64_t *)&v90->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((v88 & 1) == 0)
  {
    v97 = (unint64_t *)&v64->__shared_owners_;
    do
      v80 = __ldaxr(v97);
    while (__stlxr(v80 - 1, v97));
LABEL_121:
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_123:
  v98 = (char *)operator new(0x328uLL);
  *((_QWORD *)v98 + 1) = 0;
  *((_QWORD *)v98 + 2) = 0;
  *(_QWORD *)v98 = &off_1E42DB048;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v125[0] = 0;
  v125[1] = 0;
  md::MapTileData::MapTileData((uint64_t)(v98 + 24), v115, (uint64_t)&v126, (uint64_t)v125, 1);
  v99 = v123;
  v100 = v124;
  *((_QWORD *)v98 + 3) = &off_1E428E618;
  *((_QWORD *)v98 + 82) = &unk_1E428E658;
  *((_QWORD *)v98 + 93) = v122;
  v101 = v98 + 752;
  *((_QWORD *)v98 + 94) = v99;
  *((_QWORD *)v98 + 95) = v100;
  if (v100)
  {
    v99[2] = v101;
    v123 = 0;
    v124 = 0;
  }
  else
  {
    *((_QWORD *)v98 + 93) = v101;
  }
  *((_QWORD *)v98 + 98) = 0;
  *((_OWORD *)v98 + 48) = 0u;
  *((_QWORD *)v98 + 99) = v120;
  *((_QWORD *)v98 + 100) = v121;
  if (v121)
  {
    v102 = (unint64_t *)&v121->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = (_QWORD *)*((_QWORD *)v98 + 93);
  if (v104 != v101)
  {
    do
    {
      v105 = (id)v104[4];
      v106 = v105;
      v107 = (_QWORD *)*((_QWORD *)v98 + 97);
      if ((unint64_t)v107 >= *((_QWORD *)v98 + 98))
      {
        v109 = std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<objc_object  {objcproto14VKRouteOverlay}*&,geo::memory_management_mode const&>((void **)v98 + 96, v105);
      }
      else
      {
        v108 = v105;
        *v107 = &off_1E42B5510;
        v107[1] = v108;
        v109 = (char *)(v107 + 3);
      }
      *((_QWORD *)v98 + 97) = v109;

      v110 = (_QWORD *)v104[1];
      if (v110)
      {
        do
        {
          v111 = v110;
          v110 = (_QWORD *)*v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          v111 = (_QWORD *)v104[2];
          v45 = *v111 == (_QWORD)v104;
          v104 = v111;
        }
        while (!v45);
      }
      v104 = v111;
    }
    while (v111 != v101);
  }
  *v114 = v98 + 24;
  v114[1] = v98;
  if (v121)
  {
    v112 = (unint64_t *)&v121->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(v123);
}

void sub_19F81DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v31;
  void *v33;

  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v33);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(a23);
  _Unwind_Resume(a1);
}

uint64_t md::RouteLineLayerDataSource::onOverlayAdded(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(result + 16);
  for (i = *(_QWORD *)(v1 + 8); i != v1; i = *(_QWORD *)(i + 8))
    *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
  return result;
}

uint64_t md::RouteLineLayerDataSource::onOverlayRemoved(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(result + 16);
  for (i = *(_QWORD *)(v1 + 8); i != v1; i = *(_QWORD *)(i + 8))
    *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
  return result;
}

uint64_t `non-virtual thunk to'md::RouteLineLayerDataSource::onOverlayAdded(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(result - 568);
  for (i = *(_QWORD *)(v1 + 8); i != v1; i = *(_QWORD *)(i + 8))
    *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
  return result;
}

uint64_t `non-virtual thunk to'md::RouteLineLayerDataSource::onOverlayRemoved(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(result - 568);
  for (i = *(_QWORD *)(v1 + 8); i != v1; i = *(_QWORD *)(i + 8))
    *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
  return result;
}

void std::__shared_ptr_emplace<md::RouteLineData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteLineData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RouteLineData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>,std::allocator<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>,std::allocator<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C6E70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>,std::allocator<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6E70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>,std::allocator<std::__bind<gdc::LayerDataRequestKey (&)(gdc::RequestType,geo::QuadTile const&,unsigned short),std::placeholders::__ph<1> const&,std::placeholders::__ph<3> const&,unsigned short const&>>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*a2, a4, *(unsigned __int16 *)(a1 + 16));
}

void sub_19F81E334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 672));
  _Unwind_Resume(a1);
}

void md::realistic::RealisticRenderer::~RealisticRenderer(md::realistic::RealisticRenderer *this)
{
  md::realistic::RealisticRenderer::~RealisticRenderer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  karo::JobManager **v2;
  karo::JobManager *v3;
  karo::JobManager *v4;
  karo::JobManager *v5;
  karo::JobManager *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  karo::JobManager **v35;
  karo::JobManager *v36;
  karo::JobManager *v37;
  karo::JobManager *v38;
  karo::JobManager *v39;
  karo::JobManager *v40;
  karo::JobManager *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E42B0018;
  v2 = *(karo::JobManager ***)(*((_QWORD *)this + 17) + 72);
  v3 = *v2;
  v4 = v2[1];
  *((_BYTE *)*v2 + 64) = 1;
  *((_BYTE *)v2[2] + 64) = 1;
  if (v4)
    *((_BYTE *)v4 + 64) = 1;
  karo::JobManager::cancelAll(v3);
  karo::JobManager::cancelAll(v2[2]);
  v5 = v2[1];
  if (!v5)
  {
    *((_BYTE *)*v2 + 64) = 0;
    v6 = v2[2];
    goto LABEL_7;
  }
  karo::JobManager::cancelAll(v5);
  v6 = v2[1];
  *((_BYTE *)*v2 + 64) = 0;
  *((_BYTE *)v2[2] + 64) = 0;
  if (v6)
LABEL_7:
    *((_BYTE *)v6 + 64) = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v48[0] = &off_1E42D5698;
  v49 = v48;
  geo::TaskQueue::barrierSync(v7, v48);
  v8 = v49;
  if (v49 == v48)
  {
    v9 = 4;
    v8 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v11 = *v10;
  *v10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 5);
  v13 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 5);
  v15 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 5);
  v17 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 24) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 5);
  v19 = *(_QWORD *)(v18 + 32);
  *(_QWORD *)(v18 + 32) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 5);
  v21 = *(_QWORD *)(v20 + 40);
  *(_QWORD *)(v20 + 40) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 5);
  v23 = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v22 + 48) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 5);
  v25 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)(v24 + 56) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;

  v27 = *((_QWORD *)this + 16);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 18);
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 17);
  if (v29)
  {

    v30 = *(_QWORD **)(v29 + 160);
    if (v30 == (_QWORD *)(v29 + 136))
    {
      v31 = 4;
      v30 = (_QWORD *)(v29 + 136);
    }
    else
    {
      if (!v30)
        goto LABEL_39;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_39:
    v32 = *(std::__shared_weak_count **)(v29 + 24);
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    MEMORY[0x1A1AF4E00](v29, 0x10A0C40AE0CB074);
  }
  v35 = (karo::JobManager **)*((_QWORD *)this + 19);
  if (v35)
  {
    v36 = *v35;
    v37 = v35[1];
    *((_BYTE *)*v35 + 64) = 1;
    *((_BYTE *)v35[2] + 64) = 1;
    if (v37)
      *((_BYTE *)v37 + 64) = 1;
    karo::JobManager::cancelAll(v36);
    karo::JobManager::cancelAll(v35[2]);
    v38 = v35[1];
    if (v38)
      karo::JobManager::cancelAll(v38);
    if (*v35)
      (*(void (**)(karo::JobManager *))(*(_QWORD *)*v35 + 8))(*v35);
    v39 = v35[2];
    if (v39)
      (*(void (**)(karo::JobManager *))(*(_QWORD *)v39 + 8))(v39);
    v40 = v35[1];
    if (v40)
      (*(void (**)(karo::JobManager *))(*(_QWORD *)v40 + 8))(v40);
    v41 = v35[3];
    if (v41)
      (*(void (**)(karo::JobManager *))(*(_QWORD *)v41 + 8))(v41);
    MEMORY[0x1A1AF4E00](v35, 0x20C40DC1BFBCFLL);
  }

  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  md::Renderer::~Renderer(this);
}

void md::realistic::RealisticRenderer::update(dispatch_semaphore_t *this, md::LayoutContext *a2)
{
  uint64_t isa;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  dispatch_semaphore_t v11;
  float v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  dispatch_semaphore_wait(this[28], 0xFFFFFFFFFFFFFFFFLL);
  **((_WORD **)a2 + 92) = 1;
  *((_DWORD *)this + 54) = this[17][11].isa;
  isa = (uint64_t)this[1][1].isa;
  v16[0] = &unk_1E42D5650;
  v16[1] = this;
  v16[2] = a2;
  v17 = v16;
  geo::TaskQueue::barrierAsync(&v14, isa, v16);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_10;
  }
  if (v17)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = this[5];
  v11 = this[6];
  while (v10 != (_QWORD *)v11)
  {
    if (*v10)
      (*(void (**)(_QWORD, md::LayoutContext *))(*(_QWORD *)*v10 + 72))(*v10, a2);
    ++v10;
  }
  v12 = md::LayoutContext::frameState(a2);
  if (*(_BYTE *)(v13 + 117))
    ((void (*)(dispatch_semaphore_t *, md::LayoutContext *, float))(*this)[10].isa)(this, a2, v12);
}

void sub_19F81E4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  _Unwind_Resume(exception_object);
}

void md::realistic::RealisticRenderer::prune(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  altitude::GlobeCleanupLoader *v5;
  altitude::ObjectTreeLoader *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  altitude::GlobeCleanupLoader *v10;
  altitude::ObjectTreeLoader *v11;
  uint64_t v12;
  _QWORD *v13;
  altitude::GlobeCleanupLoader *v14;
  altitude::ObjectTreeLoader *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  if ((_DWORD)a2 == 2)
  {
    v9 = (_QWORD *)a1[16];
    v10 = (altitude::GlobeCleanupLoader *)v9[56];
    if (v10)
      altitude::GlobeCleanupLoader::pruneNodesAndGeometry(v10);
    v11 = (altitude::ObjectTreeLoader *)v9[87];
    if (v11)
      altitude::ObjectTreeLoader::pruneModels(v11);
    v12 = v9[105];
    if (v12)
      *(_BYTE *)(v12 + 376) = 1;
    if (md::HardwareFigDecoder::instance(void)::once == -1)
      goto LABEL_28;
LABEL_35:
    dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
LABEL_28:
    md::HardwareFigDecoder::discardCaches(*(std::mutex **)md::HardwareFigDecoder::instance(void)::_singleton);
    goto LABEL_29;
  }
  if ((_DWORD)a2)
  {
    v13 = (_QWORD *)a1[16];
    v14 = (altitude::GlobeCleanupLoader *)v13[56];
    if (v14)
      altitude::GlobeCleanupLoader::pruneNodesAndGeometry(v14);
    v15 = (altitude::ObjectTreeLoader *)v13[87];
    if (v15)
      altitude::ObjectTreeLoader::pruneModels(v15);
    v16 = v13[105];
    if (v16)
      *(_BYTE *)(v16 + 376) = 1;
    if (md::HardwareFigDecoder::instance(void)::once == -1)
      goto LABEL_28;
    goto LABEL_35;
  }
  v4 = (_QWORD *)a1[16];
  v5 = (altitude::GlobeCleanupLoader *)v4[56];
  if (v5)
    altitude::GlobeCleanupLoader::pruneNodesAndGeometry(v5);
  v6 = (altitude::ObjectTreeLoader *)v4[87];
  if (v6)
    altitude::ObjectTreeLoader::pruneModels(v6);
  v7 = v4[105];
  if (v7)
    *(_BYTE *)(v7 + 376) = 1;
  if (md::HardwareFigDecoder::instance(void)::once != -1)
    dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
  md::HardwareFigDecoder::discardCaches(*(std::mutex **)md::HardwareFigDecoder::instance(void)::_singleton);
  v8 = v4[56];
  if (v8)
    *(_QWORD *)(v8 + 432) = 0;
LABEL_29:
  v18 = (_QWORD *)a1[5];
  v17 = (_QWORD *)a1[6];
  while (v18 != v17)
  {
    if (*v18)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v18 + 56))(*v18, a2);
    ++v18;
  }
}

uint64_t md::realistic::RealisticRenderer::type(md::realistic::RealisticRenderer *this)
{
  return 1;
}

_QWORD *md::realistic::RealisticRenderer::layoutRenderLayers(_QWORD *this, md::LayoutContext *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **i;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 **)this[5];
  for (i = (unsigned __int8 **)this[6]; v2 != i; ++v2)
  {
    v6 = *v2;
    if (*v2)
    {
      v7 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 24);
      md::RenderLayer::lock(*v2, v7, (uint64_t)a2);
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 8);
      v9 = operator new(0x20uLL);
      *v9 = &off_1E42D5770;
      v9[1] = v6;
      v9[2] = a2;
      v9[3] = v7;
      v16 = v9;
      geo::TaskQueue::async(&v13, v8, v15);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      this = v16;
      if (v16 == v15)
      {
        this = v15;
        v5 = 4;
      }
      else
      {
        if (!v16)
          continue;
        v5 = 5;
      }
      this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v5))();
    }
  }
  return this;
}

void sub_19F81E7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::realistic::RealisticRenderer::onLayoutStart(std::mutex **this, md::LayoutContext *a2)
{
  std::mutex *v3;
  std::mutex *v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CVPixelBufferRef *v14;
  CVPixelBufferRef *v15;
  CVPixelBufferRef *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  CVPixelBufferRef *v54;
  CVPixelBufferRef *v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t PooledTexture;
  uint64_t v61;
  __IOSurface *v62;
  int v63;
  int v64;
  int v65;
  __IOSurface *IOSurface;
  int Width;
  int Height;
  int v69;
  unint64_t v70;
  unsigned int v71;
  __int128 *v72;
  uint64_t v73;
  __int128 *v74;
  __CVBuffer *v75;
  void *BaseAddress;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  __int128 *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  __n128 v98;
  __int128 *v99;
  double *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  unsigned int v105;
  uint64_t v106;
  __CVBuffer *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  unsigned int *v122;
  unsigned int v124;
  char *v125;
  unsigned int *v126;
  unsigned int v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  std::mutex *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *k;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  void **v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  void **m;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *i;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *j;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  void **v200;
  unint64_t v201;
  uint64_t v202;
  std::mutex *v203;
  uint64_t v204;
  unsigned int v205;
  std::mutex *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  char *sig;
  uint64_t v227;
  void *v228;
  void *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  ggl::Texture2D *v234;
  unint64_t v235;
  char *v236;
  void *v237;
  char *v238;
  char *v239;
  unint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  int64_t v246;
  std::mutex *v247;
  char *v248;
  char *v249;
  unint64_t v250;
  char *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  unint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  __int128 *v261;
  char *v262;
  uint64_t v263;
  __int128 v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  BOOL v270;
  int64_t v271;
  unint64_t v272;
  char *v273;
  unint64_t v274;
  void *v275;
  char *v276;
  void *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  unint64_t v285;
  int64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __int128 *v293;
  char *v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int128 *v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  std::mutex *v307;
  char *v308;
  char *v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  int64_t v316;
  unint64_t v317;
  _BYTE *v318;
  unint64_t v319;
  char *v320;
  char *v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int128 *v328;
  _OWORD *v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  char *v343;
  unsigned int v344;
  int64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  unint64_t v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  char *v363;
  unsigned int *v364;
  char *v365;
  unsigned int *v366;
  _QWORD *v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  unsigned int *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  _BOOL4 v376;
  uint64_t v377;
  unsigned int *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  __int128 v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int *v393;
  unint64_t *v394;
  unint64_t v395;
  char *v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  __int128 v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  const void *v410;
  opaqueCMSampleBuffer *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  opaqueCMFormatDescription *v417;
  unsigned int *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  std::mutex *v429;
  std::mutex *v430;
  uint64_t *v431;
  uint64_t *v432;
  uint64_t *v433;
  CVPixelBufferRef *v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int *v437;
  unsigned int v438;
  unsigned int v439;
  unint64_t v441;
  BOOL v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  CVPixelBufferRef *v446;
  uint64_t v447;
  unint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  char *v454;
  unsigned int v455;
  char *v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  _BYTE *v460;
  char *v461;
  unint64_t v462;
  char *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _OWORD *v467;
  char *v468;
  uint64_t v469;
  __int128 v470;
  unsigned int *v471;
  uint64_t v472;
  char *v473;
  unsigned int v474;
  NSObject *v475;
  uint64_t v476;
  std::mutex *v477;
  char *__p;
  uint64_t v479;
  char *v480;
  char *v481;
  char *v482;
  char *v483;
  char *v484;
  unint64_t v485;
  __int128 v486;
  std::mutex *__sz;
  double v488[3];
  double *v489;
  __int128 block;
  void *v491;
  _BYTE v492[24];
  __int128 v493;
  int v494;
  __int128 *v495;
  _QWORD v496[3];
  _QWORD *v497;
  uint64_t v498;

  v498 = *MEMORY[0x1E0C80C00];
  (*(void (**)(std::mutex **, md::LayoutContext *))&(*this)->__m_.__opaque[8])(this, a2);
  v3 = this[22];
  if (!v3)
    return;
  v4 = this[3];
  if (!v4)
    return;
  v479 = *((unsigned int *)this + 54);
  __sz = this[22];
  if (!*(_QWORD *)&v3[1].__m_.__opaque[32])
  {
    v49 = 0;
    goto LABEL_128;
  }
  v5 = 0;
  v6 = 0;
  __p = 0;
  v480 = 0;
  v7 = 0;
  do
  {
    v9 = *(_QWORD *)&v3[1].__m_.__opaque[24] + v5;
    v10 = *(_QWORD *)(*(_QWORD *)v3[1].__m_.__opaque + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8));
    v11 = v9 & 0x1FF;
    LODWORD(v9) = atomic_load((unsigned int *)(*(_QWORD *)(v10 + 8 * v11) + 72));
    if ((_DWORD)v9 != 5)
    {
      v8 = v480;
      goto LABEL_6;
    }
    v12 = *(_QWORD *)(v10 + 8 * v11);
    if (*(int *)(v12 + 76) <= 0)
    {
      v14 = *(CVPixelBufferRef **)(v12 + 16);
      v15 = *(CVPixelBufferRef **)(v12 + 24);
      if (v14 != v15)
      {
        do
        {
          if (*v14)
            CVPixelBufferRelease(*v14);
          ++v14;
        }
        while (v14 != v15);
        goto LABEL_24;
      }
    }
    else
    {
      if (*(_QWORD *)(*(_QWORD *)v12 + 88) == v479)
      {
        v8 = v480;
        v13 = v480 - __p;
        if ((unint64_t)(v480 - __p) <= 0xF)
        {
          atomic_store(6u, (unsigned int *)(v12 + 72));
          if (v480 < v7)
          {
            *(_QWORD *)v480 = *(_QWORD *)(v10 + 8 * v11);
            v8 = v480 + 8;
            goto LABEL_6;
          }
          v22 = v13 >> 3;
          v23 = v7 - __p;
          if ((v7 - __p) >> 2 <= (unint64_t)((v13 >> 3) + 1))
            v24 = v22 + 1;
          else
            v24 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25 >> 61)
            goto LABEL_601;
          v26 = operator new(8 * v25);
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = *(_QWORD *)(v10 + 8 * v11);
          v8 = v27 + 8;
          v28 = __p;
          if (v480 == __p)
          {
            v3 = __sz;
LABEL_47:
            v7 = &v26[8 * v25];
            if (v28)
              operator delete(v28);
            __p = v27;
            goto LABEL_6;
          }
          v29 = v480 - 8 - __p;
          if (v29 >= 0x168)
          {
            if (&v26[(v13 & 0xFFFFFFFFFFFFFFF8) - 8 - (v29 & 0xFFFFFFFFFFFFFFF8)] <= &v26[(v13 & 0xFFFFFFFFFFFFFFF8)
                                                                                             - 8]
              && &v480[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] <= v480 - 8
              && (unint64_t)(v480 - &v26[v13 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
            {
              v32 = (v29 >> 3) + 1;
              v30 = &v480[-8 * (v32 & 0x3FFFFFFFFFFFFFFCLL)];
              v33 = &v26[8 * v22 - 16];
              v34 = v480 - 16;
              v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              v27 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
              v3 = __sz;
              v28 = __p;
              if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_47;
              goto LABEL_46;
            }
            v30 = v480;
          }
          else
          {
            v30 = v480;
          }
          v3 = __sz;
          v28 = __p;
          do
          {
LABEL_46:
            v31 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v27 - 1) = v31;
            v27 -= 8;
          }
          while (v30 != v28);
          goto LABEL_47;
        }
LABEL_6:
        ++v6;
        v480 = v8;
        goto LABEL_7;
      }
      *(_QWORD *)(*(_QWORD *)v12 + 16) = *(_QWORD *)(*(_QWORD *)v12 + 24);
      v12 = *(_QWORD *)(v10 + 8 * v11);
      v14 = *(CVPixelBufferRef **)(v12 + 16);
      v16 = *(CVPixelBufferRef **)(v12 + 24);
      if (v14 != v16)
      {
        do
        {
          if (*v14)
            CVPixelBufferRelease(*v14);
          ++v14;
        }
        while (v14 != v16);
LABEL_24:
        v12 = *(_QWORD *)(v10 + 8 * v11);
        v14 = *(CVPixelBufferRef **)(v12 + 16);
      }
    }
    *(_QWORD *)(v12 + 24) = v14;
    atomic_store(0, (unsigned int *)(*(_QWORD *)(v10 + 8 * v11) + 72));
    v3 = __sz;
    v18 = *(_QWORD *)&__sz[1].__m_.__opaque[24];
    v17 = *(_QWORD *)&__sz[1].__m_.__opaque[32];
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)__sz[1].__m_.__opaque
                          + (((unint64_t)(v18 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v18 + v5) & 0x1FF)) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)__sz[1].__m_.__opaque
                                                                  + (((unint64_t)(v17 - 1 + v18) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                      + 8 * ((v17 - 1 + v18) & 0x1FF));
    v20 = *(_QWORD *)__sz[1].__m_.__opaque;
    v19 = *(_QWORD *)&__sz[1].__m_.__opaque[8];
    *(_QWORD *)&__sz[1].__m_.__opaque[32] = v17 - 1;
    if (v19 == v20)
      v21 = 0;
    else
      v21 = ((v19 - v20) << 6) - 1;
    if ((unint64_t)(v21 - (v17 + v18) + 1) >= 0x400)
    {
      operator delete(*(void **)(v19 - 8));
      *(_QWORD *)&__sz[1].__m_.__opaque[8] -= 8;
    }
LABEL_7:
    v5 = v6;
  }
  while (*(_QWORD *)&v3[1].__m_.__opaque[32] > (unint64_t)v6);
  v37 = __p;
  if (v480 == __p)
  {
    v49 = v480;
    goto LABEL_128;
  }
  v38 = *(_QWORD **)v4->__m_.__opaque;
  v39 = v38[3];
  v40 = v38[4];
  v41 = v40 - v39;
  if (v40 == v39)
    goto LABEL_63;
  v42 = 0;
  v43 = v41 >> 3;
  while (1)
  {
    v44 = *(_QWORD *)(v39 + 8 * v42);
    if (!*(_BYTE *)v44)
    {
      v45 = *(_QWORD *)(v44 + 8);
      v46 = v38[15];
      if (v45 < (v38[16] - v46) >> 3)
        break;
    }
    if (++v42 >= v43)
      goto LABEL_63;
  }
  v47 = *(_QWORD *)(v46 + 8 * v45);
  if (!v47)
LABEL_63:
    v48 = 0;
  else
    v48 = **(_QWORD ***)(v47 + 24);
  v477 = __sz + 6;
  v50 = &v493;
  while (2)
  {
    v53 = *(_QWORD *)v37;
    v54 = *(CVPixelBufferRef **)(*(_QWORD *)v37 + 16);
    v55 = *(CVPixelBufferRef **)(*(_QWORD *)v37 + 24);
    v56 = (char *)v55 - (char *)v54;
    if (v55 == v54)
      goto LABEL_67;
    v57 = *(_DWORD *)(v53 + 44);
    if (v57 == 4)
    {
      if (*(_DWORD *)(v53 + 48))
      {
        v58 = 14;
LABEL_75:
        if (*(_BYTE *)(v53 + 40))
          v59 = 10;
        else
          v59 = 1;
        PooledTexture = altitude::TexturePager::getPooledTexture((uint64_t)__sz, 512, 512, v59, v58, v477);
      }
      else
      {
        IOSurface = CVPixelBufferGetIOSurface(*v54);
        Width = IOSurfaceGetWidth(IOSurface);
        Height = IOSurfaceGetHeight(IOSurface);
        if (*(_BYTE *)(*(_QWORD *)v37 + 40))
          v69 = 10;
        else
          v69 = 1;
        PooledTexture = altitude::TexturePager::getPooledTexture((uint64_t)__sz, Width, Height, v69, 14, v477);
      }
      goto LABEL_88;
    }
    if (v57 == 14)
    {
      if (*(_DWORD *)(v53 + 48))
      {
        v58 = 24;
        goto LABEL_75;
      }
      v62 = CVPixelBufferGetIOSurface(*v54);
      v63 = IOSurfaceGetWidth(v62);
      v64 = IOSurfaceGetHeight(v62);
      if (*(_BYTE *)(*(_QWORD *)v37 + 40))
        v65 = 10;
      else
        v65 = 1;
      PooledTexture = altitude::TexturePager::getPooledTexture((uint64_t)__sz, v63, v64, v65, 24, v477);
LABEL_88:
      v61 = PooledTexture;
    }
    else
    {
      v61 = 0;
    }
    v70 = 0;
    v485 = v56 >> 3;
    atomic_store((unint64_t)v56 >> 3, (unsigned int *)(*(_QWORD *)v37 + 8));
    *(_QWORD *)(**(_QWORD **)v37 + 88) = v479;
    v71 = 1;
    while (2)
    {
      v74 = v50;
      v75 = *(__CVBuffer **)(*(_QWORD *)(*(_QWORD *)v37 + 16) + 8 * v70);
      CVPixelBufferLockBaseAddress(v75, 1uLL);
      BaseAddress = CVPixelBufferGetBaseAddress(v75);
      v77 = CVPixelBufferGetWidth(v75);
      v78 = CVPixelBufferGetHeight(v75);
      v79 = operator new();
      ggl::TextureData2DNoCopy::TextureData2DNoCopy(v79, v77, v78, *(_DWORD *)(v61 + 68), (uint64_t)BaseAddress);
      v80 = *(_QWORD *)v37;
      v497 = 0;
      v81 = operator new(0x28uLL);
      v82 = ((v71 - 1) >> 1) * v77;
      *v81 = &off_1E42D8558;
      v81[1] = __sz;
      v83 = ((int)((v71 - 1) << 31) >> 31) & v78;
      v81[2] = v75;
      v81[3] = v80;
      v81[4] = v61;
      v497 = v81;
      *(_QWORD *)&block = v79;
      *((_QWORD *)&block + 1) = v61;
      LOBYTE(v491) = 0;
      BYTE4(v491) = 0;
      *(_QWORD *)&v492[4] = v82 | (v83 << 32);
      *(_DWORD *)&v492[12] = v82 + v77;
      *(_DWORD *)&v492[16] = v83 + v78;
      v84 = std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v81);
      v495 = v85;
      v86 = v497;
      if (v497 == v496)
      {
        v86 = v496;
        v87 = 4;
        v50 = v74;
LABEL_97:
        (*(void (**)(__n128))(*v86 + 8 * v87))(v84);
      }
      else
      {
        v50 = v74;
        if (v497)
        {
          v87 = 5;
          goto LABEL_97;
        }
      }
      v88 = v48[26];
      if (v88 >= v48[27])
      {
        v90 = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__push_back_slow_path<ggl::Texture2DLoadItem const&>(v48 + 25, (uint64_t)&block);
      }
      else
      {
        if (v88)
        {
          *(_OWORD *)v88 = block;
          *(_BYTE *)(v88 + 16) = 0;
          if ((_BYTE)v491)
          {
            *(_BYTE *)(v88 + 17) = BYTE1(v491);
            *(_BYTE *)(v88 + 16) = 1;
          }
          *(_BYTE *)(v88 + 20) = 0;
          if (BYTE4(v491))
          {
            *(_DWORD *)(v88 + 24) = *(_DWORD *)v492;
            *(_BYTE *)(v88 + 20) = 1;
          }
          *(_OWORD *)(v88 + 28) = *(_OWORD *)&v492[4];
          v89 = (uint64_t)v495;
          if (v495)
          {
            if (v495 != v50)
            {
              v89 = (*(uint64_t (**)(void))(*(_QWORD *)v495 + 16))();
              goto LABEL_107;
            }
            *(_QWORD *)(v88 + 72) = v88 + 48;
            (*(void (**)(__int128 *))(*(_QWORD *)v495 + 24))(v495);
          }
          else
          {
LABEL_107:
            *(_QWORD *)(v88 + 72) = v89;
          }
        }
        v90 = (_OWORD *)(v88 + 80);
        v48[26] = v88 + 80;
      }
      v48[26] = v90;
      v72 = v495;
      if (v495 == v50)
      {
        v72 = v50;
        v73 = 4;
        goto LABEL_91;
      }
      if (v495)
      {
        v73 = 5;
LABEL_91:
        (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
      }
      v70 = v71++;
      if (v485 > v70)
        continue;
      break;
    }
    v91 = *(_QWORD *)v37;
    if (*(_BYTE *)(*(_QWORD *)v37 + 40) && *(_QWORD *)(*(_QWORD *)(v91 + 56) + 64))
    {
      v92 = (unsigned int *)(v91 + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 + 1, v92));
      v94 = *(_QWORD *)v37;
      v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 56) + 64);
      v96 = *(_QWORD *)(v61 + 80);
      v489 = 0;
      v97 = (double *)operator new(0x20uLL);
      *(_QWORD *)v97 = &off_1E42D85A0;
      *((_QWORD *)v97 + 1) = __sz;
      *((_QWORD *)v97 + 2) = v94;
      *((_QWORD *)v97 + 3) = v61;
      v489 = v97;
      *(_QWORD *)&block = v95;
      *((_QWORD *)&block + 1) = v61;
      LOBYTE(v491) = 0;
      BYTE4(v491) = 0;
      *(_QWORD *)&v492[4] = 0;
      *(_QWORD *)&v492[12] = v96;
      v98 = std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v97);
      v495 = v99;
      v100 = v489;
      if (v489 == v488)
      {
        v100 = v488;
        v101 = 4;
LABEL_122:
        (*(void (**)(__n128))(*(_QWORD *)v100 + 8 * v101))(v98);
      }
      else if (v489)
      {
        v101 = 5;
        goto LABEL_122;
      }
      ggl::CommandBuffer::pushLoadItem(v48, (uint64_t)&block);
      v51 = v495;
      if (v495 == v50)
      {
        v51 = v50;
        v52 = 4;
        goto LABEL_66;
      }
      if (v495)
      {
        v52 = 5;
LABEL_66:
        (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
      }
    }
LABEL_67:
    v37 += 8;
    if (v37 != v480)
      continue;
    break;
  }
  v3 = __sz;
  v49 = __p;
LABEL_128:
  std::mutex::lock(v3 + 4);
  v103 = *(char **)&v3[3].__m_.__opaque[32];
  v102 = *(char **)&v3[3].__m_.__opaque[40];
  *(_QWORD *)&v3[3].__m_.__opaque[32] = 0;
  *(_QWORD *)&v3[3].__m_.__opaque[40] = 0;
  *(_QWORD *)&v3[3].__m_.__opaque[48] = 0;
  std::mutex::unlock(v3 + 4);
  if (v103 != v102)
  {
    v104 = v103;
    do
    {
      v106 = *(_QWORD *)v104;
      v107 = (__CVBuffer *)*((_QWORD *)v104 + 2);
      if (v107)
        CVPixelBufferRelease(v107);
      v108 = (unsigned int *)(v106 + 8);
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        *(_QWORD *)(v106 + 24) = *(_QWORD *)(v106 + 16);
        v111 = *(std::__shared_weak_count **)(v106 + 64);
        *(_QWORD *)(v106 + 56) = 0;
        *(_QWORD *)(v106 + 64) = 0;
        if (v111)
        {
          p_shared_owners = (unint64_t *)&v111->__shared_owners_;
          do
            v113 = __ldaxr(p_shared_owners);
          while (__stlxr(v113 - 1, p_shared_owners));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        if (*(int *)(v106 + 76) < 1)
        {
          altitude::TexturePager::addPooledTexture((altitude::TexturePager *)__sz, *((ggl::Texture2D **)v104 + 1));
          v105 = 0;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v106 + 16) = *((_QWORD *)v104 + 1);
          v105 = 7;
        }
        atomic_store(v105, (unsigned int *)(v106 + 72));
      }
      v104 += 24;
    }
    while (v104 != v102);
  }
  if (v103)
    operator delete(v103);
  if (v49)
    operator delete(v49);
  v114 = *(_QWORD *)&__sz[1].__m_.__opaque[24];
  v115 = *(_QWORD *)__sz[1].__m_.__opaque;
  v116 = (_QWORD *)(v115 + 8 * (v114 >> 9));
  if (*(_QWORD *)&__sz[1].__m_.__opaque[8] == v115)
  {
    v118 = 0;
  }
  else
  {
    v117 = (char *)(*v116 + 8 * (*(_QWORD *)&__sz[1].__m_.__opaque[24] & 0x1FFLL));
    v118 = (char *)(*(_QWORD *)(v115 + (((*(_QWORD *)&__sz[1].__m_.__opaque[32] + v114) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*(_QWORD *)&__sz[1].__m_.__opaque[32] + v114) & 0x1FF));
    if (v117 != v118)
    {
      while (1)
      {
        v126 = (unsigned int *)(*(_QWORD *)v117 + 72);
        if (!atomic_load(v126))
          break;
        v128 = atomic_load(v126);
        if (v128 == 7)
          break;
        v117 += 8;
        if (&v117[-*v116] == (char *)4096)
        {
          v129 = (char *)v116[1];
          ++v116;
          v117 = v129;
        }
        if (v117 == v118)
          goto LABEL_167;
      }
    }
    if (v117 != v118)
    {
      v119 = v117;
      v120 = v116;
      while (1)
      {
        v119 += 8;
        if (&v119[-*v120] == (char *)4096)
        {
          v121 = (char *)v120[1];
          ++v120;
          v119 = v121;
        }
        if (v119 == v118)
          break;
        v122 = (unsigned int *)(*(_QWORD *)v119 + 72);
        if (atomic_load(v122))
        {
          v124 = atomic_load(v122);
          if (v124 != 7)
          {
            *(_QWORD *)v117 = *(_QWORD *)v119;
            v117 += 8;
            if (&v117[-*v116] == (char *)4096)
            {
              v125 = (char *)v116[1];
              ++v116;
              v117 = v125;
            }
          }
        }
      }
      v118 = v117;
    }
  }
LABEL_167:
  v131 = *(_QWORD *)&__sz[1].__m_.__opaque[24];
  v130 = *(_QWORD *)&__sz[1].__m_.__opaque[32];
  v132 = v131 + v130;
  v133 = *(_QWORD *)__sz[1].__m_.__opaque;
  v134 = *(_QWORD *)&__sz[1].__m_.__opaque[8];
  v135 = (char *)(v133 + 8 * ((v131 + v130) >> 9));
  if (v134 == v133)
  {
    v136 = 0;
    if (!v118)
      goto LABEL_171;
LABEL_169:
    v137 = ((v136 - *(_QWORD *)v135) >> 3) + ((v135 - (char *)v116) << 6) - ((uint64_t)&v118[-*v116] >> 3);
  }
  else
  {
    v136 = *(_QWORD *)v135 + 8 * (v132 & 0x1FF);
    if (v118 != (char *)v136)
      goto LABEL_169;
LABEL_171:
    v137 = 0;
  }
  v138 = (char *)(v133 + 8 * (v131 >> 9));
  if (v134 == v133)
  {
    v139 = 0;
    if (v118)
      goto LABEL_174;
    goto LABEL_178;
  }
  v139 = *(_QWORD *)v138 + 8 * (*(_QWORD *)&__sz[1].__m_.__opaque[24] & 0x1FFLL);
  if (v118 == (char *)v139)
  {
LABEL_178:
    v141 = 0;
    v142 = (char *)(v133 + 8 * (v131 >> 9));
    goto LABEL_181;
  }
LABEL_174:
  v140 = ((uint64_t)&v118[-*v116] >> 3) + (((char *)v116 - v138) << 6);
  v141 = v140 - ((v139 - *(_QWORD *)v138) >> 3);
  if (v140 == (v139 - *(_QWORD *)v138) >> 3)
  {
    v118 = (char *)v139;
    v142 = v138;
  }
  else if (v140 < 1)
  {
    v143 = 511 - v140;
    v142 = &v138[-8 * (v143 >> 9)];
    v118 = (char *)(*(_QWORD *)v142 + 8 * (~(_WORD)v143 & 0x1FF));
  }
  else
  {
    v142 = &v138[8 * ((unint64_t)v140 >> 9)];
    v118 = (char *)(*(_QWORD *)v142 + 8 * (v140 & 0x1FF));
  }
LABEL_181:
  v144 = __sz;
  if (v137 >= 1)
  {
    v145 = v130 - v137;
    v146 = *(char **)v142;
    v147 = v137 + ((uint64_t)&v118[-*(_QWORD *)v142] >> 3);
    if (v141 <= v145 >> 1)
    {
      if (v147 < 1)
      {
        v149 = &v142[-8 * ((unint64_t)(511 - v147) >> 9)];
        v150 = *(char **)v149;
        v151 = ~(511 - (_WORD)v147) & 0x1FF;
      }
      else
      {
        v149 = &v142[8 * ((unint64_t)v147 >> 9)];
        v150 = *(char **)v149;
        v151 = v147 & 0x1FF;
      }
      v173 = &v150[8 * v151];
      if (v138 == v142)
      {
        if (v118 != (char *)v139)
        {
          for (i = v149 - 8; ; i -= 8)
          {
            v187 = (v173 - v150) >> 3;
            if ((uint64_t)&v118[-v139] >> 3 < v187)
              v187 = (uint64_t)&v118[-v139] >> 3;
            v118 -= 8 * v187;
            if (v187)
              memmove(&v173[-8 * v187], v118, 8 * v187);
            if (v118 == (char *)v139)
              break;
            v188 = *(char **)i;
            v150 = v188;
            v173 = v188 + 4096;
          }
        }
      }
      else
      {
        if (v146 == v118)
          goto LABEL_260;
        while (1)
        {
          v174 = (v173 - v150) >> 3;
          if ((v118 - v146) >> 3 < v174)
            v174 = (v118 - v146) >> 3;
          v118 -= 8 * v174;
          v173 -= 8 * v174;
          if (v174)
            memmove(v173, v118, 8 * v174);
          if (v118 == v146)
            break;
          v175 = (char *)*((_QWORD *)v149 - 1);
          v149 -= 8;
          v150 = v175;
          v173 = v175 + 4096;
        }
        while (1)
        {
          v150 = *(char **)v149;
          if ((char *)(*(_QWORD *)v149 + 4096) == v173)
          {
            v189 = (char *)*((_QWORD *)v149 + 1);
            v149 += 8;
            v150 = v189;
            v173 = v189;
          }
LABEL_260:
          v142 -= 8;
          if (v142 == v138)
            break;
          v190 = *(char **)v142;
          v191 = (char *)(*(_QWORD *)v142 + 4096);
          while (1)
          {
            v192 = (v173 - v150) >> 3;
            if ((v191 - v190) >> 3 < v192)
              v192 = (v191 - v190) >> 3;
            v191 -= 8 * v192;
            v173 -= 8 * v192;
            if (v192)
              memmove(v173, v191, 8 * v192);
            if (v191 == v190)
              break;
            v193 = (char *)*((_QWORD *)v149 - 1);
            v149 -= 8;
            v150 = v193;
            v173 = v193 + 4096;
          }
        }
        v194 = (char *)(*(_QWORD *)v138 + 4096);
        if (v194 != (char *)v139)
        {
          for (j = v149 - 8; ; j -= 8)
          {
            v196 = (v173 - v150) >> 3;
            if ((uint64_t)&v194[-v139] >> 3 < v196)
              v196 = (uint64_t)&v194[-v139] >> 3;
            v194 -= 8 * v196;
            if (v196)
              memmove(&v173[-8 * v196], v194, 8 * v196);
            if (v194 == (char *)v139)
              break;
            v197 = *(char **)j;
            v150 = v197;
            v173 = v197 + 4096;
          }
        }
      }
      v144 = __sz;
      v198 = *(_QWORD *)&__sz[1].__m_.__opaque[32] - v137;
      v199 = *(_QWORD *)&__sz[1].__m_.__opaque[24] + v137;
      *(_QWORD *)&__sz[1].__m_.__opaque[24] = v199;
      *(_QWORD *)&__sz[1].__m_.__opaque[32] = v198;
      if (v199 >= 0x400)
      {
        v200 = *(void ***)__sz[1].__m_.__opaque;
        do
        {
          operator delete(*v200);
          v200 = (void **)(*(_QWORD *)__sz[1].__m_.__opaque + 8);
          *(_QWORD *)__sz[1].__m_.__opaque = v200;
          v201 = *(_QWORD *)&__sz[1].__m_.__opaque[24] - 512;
          *(_QWORD *)&__sz[1].__m_.__opaque[24] = v201;
        }
        while (v201 >= 0x400);
      }
    }
    else
    {
      if (v147 < 1)
      {
        v152 = 511 - v147;
        LOWORD(v147) = ~(511 - v147);
        v148 = &v142[-8 * (v152 >> 9)];
      }
      else
      {
        v148 = &v142[8 * ((unint64_t)v147 >> 9)];
      }
      v153 = *(_QWORD *)v148;
      v154 = (char *)(*(_QWORD *)v148 + 8 * (v147 & 0x1FF));
      if (v134 == v133)
      {
        v155 = 0;
        if (v148 == v135)
          goto LABEL_232;
LABEL_190:
        v156 = (char *)(v153 + 4096);
        if ((char *)(v153 + 4096) != v154)
        {
          while (1)
          {
            if ((v156 - v154) >> 3 >= (v146 - v118 + 4096) >> 3)
              v157 = (v146 - v118 + 4096) >> 3;
            else
              v157 = (v156 - v154) >> 3;
            if (v157)
              memmove(v118, v154, 8 * v157);
            v154 += 8 * v157;
            if (v154 == v156)
              break;
            v158 = (char *)*((_QWORD *)v142 + 1);
            v142 += 8;
            v146 = v158;
            v118 = v158;
          }
          v118 += 8 * v157;
          v146 = *(char **)v142;
          if ((char *)(*(_QWORD *)v142 + 4096) == v118)
          {
            v159 = (char *)*((_QWORD *)v142 + 1);
            v142 += 8;
            v146 = v159;
            v118 = v159;
          }
        }
        for (k = v148 + 8; k != v135; k += 8)
        {
          v161 = 0;
          v162 = *(_QWORD *)k;
          while (1)
          {
            if ((4096 - 8 * v161) >> 3 >= (v146 - v118 + 4096) >> 3)
              v163 = (v146 - v118 + 4096) >> 3;
            else
              v163 = (4096 - 8 * v161) >> 3;
            if (v163)
              memmove(v118, (const void *)(v162 + 8 * v161), 8 * v163);
            v161 += v163;
            if (v161 == 512)
              break;
            v164 = (char *)*((_QWORD *)v142 + 1);
            v142 += 8;
            v146 = v164;
            v118 = v164;
          }
          v118 += 8 * v163;
          v146 = *(char **)v142;
          if ((char *)(*(_QWORD *)v142 + 4096) == v118)
          {
            v165 = (char *)*((_QWORD *)v142 + 1);
            v142 += 8;
            v146 = v165;
            v118 = v165;
          }
        }
        v166 = *(char **)v135;
        if (*(_QWORD *)v135 != v155)
        {
          v169 = *(char **)v142;
          v168 = (void **)(v142 + 8);
          v167 = v169;
          while (1)
          {
            v170 = (v167 - v118 + 4096) >> 3;
            if ((v155 - (uint64_t)v166) >> 3 >= v170)
              v171 = v170;
            else
              v171 = (v155 - (uint64_t)v166) >> 3;
            if (v171)
              memmove(v118, v166, 8 * v171);
            v166 += 8 * v171;
            if (v166 == (char *)v155)
              break;
            v172 = (char *)*v168++;
            v167 = v172;
            v118 = v172;
          }
        }
      }
      else
      {
        v155 = *(_QWORD *)v135 + 8 * (v132 & 0x1FF);
        if (v148 != v135)
          goto LABEL_190;
LABEL_232:
        if (v154 != (char *)v155)
        {
          for (m = (void **)(v142 + 8); ; ++m)
          {
            if ((v155 - (uint64_t)v154) >> 3 >= (v146 - v118 + 4096) >> 3)
              v177 = (v146 - v118 + 4096) >> 3;
            else
              v177 = (v155 - (uint64_t)v154) >> 3;
            if (v177)
              memmove(v118, v154, 8 * v177);
            v154 += 8 * v177;
            if (v154 == (char *)v155)
              break;
            v178 = (char *)*m;
            v146 = v178;
            v118 = v178;
          }
        }
      }
      v144 = __sz;
      v180 = *(_QWORD *)__sz[1].__m_.__opaque;
      v179 = *(_QWORD *)&__sz[1].__m_.__opaque[8];
      if (v179 == v180)
        v181 = 0;
      else
        v181 = ((v179 - v180) << 6) - 1;
      v182 = *(_QWORD *)&__sz[1].__m_.__opaque[24];
      v183 = *(_QWORD *)&__sz[1].__m_.__opaque[32] - v137;
      *(_QWORD *)&__sz[1].__m_.__opaque[32] = v183;
      if ((unint64_t)(v181 - (v183 + v182)) >= 0x400)
      {
        do
        {
          operator delete(*(void **)(v179 - 8));
          v184 = *(_QWORD *)__sz[1].__m_.__opaque;
          v179 = *(_QWORD *)&__sz[1].__m_.__opaque[8] - 8;
          *(_QWORD *)&__sz[1].__m_.__opaque[8] = v179;
          if (v179 == v184)
            v185 = 0;
          else
            v185 = ((v179 - v184) << 6) - 1;
        }
        while ((unint64_t)(v185 - (*(_QWORD *)&__sz[1].__m_.__opaque[32] + *(_QWORD *)&__sz[1].__m_.__opaque[24])) > 0x3FF);
      }
    }
  }
  v202 = *(_QWORD *)&v144->__m_.__opaque[32];
  v203 = v144;
  if (*(_QWORD *)&v144->__m_.__opaque[40] != v202)
  {
    v204 = 0;
    v205 = 0;
    while (2)
    {
      v212 = *(unsigned int **)(v202 + 8 * v204);
      if (atomic_load(v212 + 18))
      {
        v214 = atomic_load(v212 + 18);
        if (v214 != 7)
          goto LABEL_285;
      }
      if ((int)v212[19] <= 0)
      {
        v230 = (std::__shared_weak_count *)*((_QWORD *)v212 + 8);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v233 = (void *)*((_QWORD *)v212 + 2);
        if (v233)
        {
          *((_QWORD *)v212 + 3) = v233;
          operator delete(v233);
        }
        MEMORY[0x1A1AF4E00](v212, 0x10A0C40358E639CLL);
        *(_QWORD *)(*(_QWORD *)&v203->__m_.__opaque[32] + 8 * v204) = *(_QWORD *)(*(_QWORD *)&v203->__m_.__opaque[40]
                                                                                - 8);
        *(_QWORD *)&v203->__m_.__opaque[40] -= 8;
        goto LABEL_286;
      }
      v215 = *(_QWORD *)v212;
      v216 = *(_QWORD *)(*(_QWORD *)v212 + 88);
      v217 = atomic_load(v212 + 18);
      if (v216 != v479)
      {
        if (v217 == 7)
        {
          v234 = *(ggl::Texture2D **)(v215 + 16);
          if (v234)
          {
            if (v234 != *(ggl::Texture2D **)(v215 + 24))
            {
              altitude::TexturePager::addPooledTexture((altitude::TexturePager *)v203, v234);
              *(_QWORD *)(v215 + 16) = *(_QWORD *)(v215 + 24);
              atomic_store(0, v212 + 18);
            }
          }
        }
        goto LABEL_285;
      }
      if (v217)
      {
        v218 = atomic_load(v212 + 18);
        if (v218 != 7)
          goto LABEL_285;
      }
      v219 = *(_QWORD *)(*(_QWORD *)v212 + 16);
      if (v219)
      {
        if (v219 != *(_QWORD *)(*(_QWORD *)v212 + 24))
          goto LABEL_285;
      }
      atomic_store(1u, v212 + 18);
      v220 = *(char **)&v203[1].__m_.__opaque[8];
      v209 = *(char **)v203[1].__m_.__opaque;
      v221 = v220 - v209;
      if (v220 == v209)
        v222 = 0;
      else
        v222 = ((v220 - v209) << 6) - 1;
      v223 = *(_QWORD *)&v203[1].__m_.__opaque[24];
      v210 = *(_QWORD *)&v203[1].__m_.__opaque[32];
      v211 = v210 + v223;
      if (v222 != v210 + v223)
        goto LABEL_284;
      if (v223 < 0x200)
      {
        v224 = v221 >> 3;
        v225 = *(char **)&v203[1].__m_.__opaque[16];
        sig = (char *)v203[1].__m_.__sig;
        v227 = v225 - sig;
        if (v221 >> 3 < (unint64_t)((v225 - sig) >> 3))
        {
          v228 = operator new(0x1000uLL);
          v229 = v228;
          if (v225 != v220)
          {
            *(_QWORD *)v220 = v228;
            v203 = __sz;
            *(_QWORD *)&__sz[1].__m_.__opaque[8] += 8;
            goto LABEL_283;
          }
          v249 = v209;
          if (sig != v209)
            goto LABEL_394;
          if (v220 == v209)
            v250 = 1;
          else
            v250 = v227 >> 2;
          if (!(v250 >> 61))
          {
            v251 = (char *)operator new(8 * v250);
            v252 = (v250 + 3) >> 2;
            v249 = &v251[8 * v252];
            v253 = &v251[8 * v250];
            v254 = v249;
            if (v220 != v209)
            {
              v254 = &v249[(v220 - sig) & 0xFFFFFFFFFFFFFFF8];
              v255 = v220 - sig - 8;
              v256 = &v251[8 * v252];
              v257 = v209;
              if (v255 > 0x37)
              {
                v258 = 8 * v252;
                v256 = &v251[8 * v252];
                v257 = v209;
                if ((unint64_t)(v256 - sig) >= 0x20)
                {
                  v259 = (v255 >> 3) + 1;
                  v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                  v256 = &v249[v260];
                  v261 = (__int128 *)(v209 + 16);
                  v262 = &v251[v258 + 16];
                  v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v264 = *v261;
                    *((_OWORD *)v262 - 1) = *(v261 - 1);
                    *(_OWORD *)v262 = v264;
                    v261 += 2;
                    v262 += 32;
                    v263 -= 4;
                  }
                  while (v263);
                  if (v259 == (v259 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    __sz[1].__m_.__sig = (uint64_t)v251;
                    *(_QWORD *)__sz[1].__m_.__opaque = v249;
                    *(_QWORD *)&__sz[1].__m_.__opaque[8] = v254;
                    *(_QWORD *)&__sz[1].__m_.__opaque[16] = v253;
                    goto LABEL_393;
                  }
                  v257 = &v209[v260];
                }
              }
              do
              {
                v306 = *(_QWORD *)v257;
                v257 += 8;
                *(_QWORD *)v256 = v306;
                v256 += 8;
              }
              while (v256 != v254);
            }
            __sz[1].__m_.__sig = (uint64_t)v251;
            *(_QWORD *)__sz[1].__m_.__opaque = v249;
            *(_QWORD *)&__sz[1].__m_.__opaque[8] = v254;
            *(_QWORD *)&__sz[1].__m_.__opaque[16] = v253;
            if (v209)
            {
LABEL_393:
              operator delete(v209);
              v249 = *(char **)__sz[1].__m_.__opaque;
            }
LABEL_394:
            *((_QWORD *)v249 - 1) = v229;
            v307 = __sz;
            v308 = *(char **)__sz[1].__m_.__opaque;
            v309 = *(char **)&__sz[1].__m_.__opaque[8];
            *(_QWORD *)__sz[1].__m_.__opaque = v308 - 8;
            v310 = *((_QWORD *)v308 - 1);
            *(_QWORD *)__sz[1].__m_.__opaque = v308;
            if (v309 != *(char **)&__sz[1].__m_.__opaque[16])
              goto LABEL_418;
            v311 = (char *)__sz[1].__m_.__sig;
            if (v308 > v311)
            {
              v312 = (v308 - v311) >> 3;
              if (v312 >= -1)
                v313 = v312 + 1;
              else
                v313 = v312 + 2;
              v314 = v313 >> 1;
              v315 = &v308[-8 * (v313 >> 1)];
              v316 = v309 - v308;
              if (v309 == v308)
              {
                v307 = __sz;
              }
              else
              {
                memmove(&v308[-8 * (v313 >> 1)], v308, v309 - v308);
                v307 = __sz;
                v308 = *(char **)__sz[1].__m_.__opaque;
              }
              v309 = &v315[v316];
              *(_QWORD *)v307[1].__m_.__opaque = &v308[-8 * v314];
              *(_QWORD *)&v307[1].__m_.__opaque[8] = &v315[v316];
              goto LABEL_418;
            }
            v317 = v309 == v311 ? 1 : (v309 - v311) >> 2;
            if (!(v317 >> 61))
            {
              v318 = operator new(8 * v317);
              v319 = v317 >> 2;
              v320 = &v318[8 * (v317 >> 2)];
              v321 = v320;
              if (v309 != v308)
              {
                v321 = &v320[(v309 - v308) & 0xFFFFFFFFFFFFFFF8];
                v322 = v309 - v308 - 8;
                if (v322 >= 0x38)
                {
                  v324 = 8 * v319;
                  v325 = &v318[8 * v319] - v308;
                  v323 = &v318[8 * (v317 >> 2)];
                  if (v325 < 0x20)
                    goto LABEL_415;
                  v326 = (v322 >> 3) + 1;
                  v327 = 8 * (v326 & 0x3FFFFFFFFFFFFFFCLL);
                  v323 = &v320[v327];
                  v328 = (__int128 *)(v308 + 16);
                  v329 = &v318[v324 + 16];
                  v330 = v326 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v331 = *v328;
                    *(v329 - 1) = *(v328 - 1);
                    *v329 = v331;
                    v328 += 2;
                    v329 += 2;
                    v330 -= 4;
                  }
                  while (v330);
                  if (v326 != (v326 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v308 += v327;
                    goto LABEL_415;
                  }
                }
                else
                {
                  v323 = &v318[8 * (v317 >> 2)];
                  do
                  {
LABEL_415:
                    v332 = *(_QWORD *)v308;
                    v308 += 8;
                    *(_QWORD *)v323 = v332;
                    v323 += 8;
                  }
                  while (v323 != v321);
                }
              }
              v307 = __sz;
              __sz[1].__m_.__sig = (uint64_t)v318;
              *(_QWORD *)__sz[1].__m_.__opaque = v320;
              *(_QWORD *)&__sz[1].__m_.__opaque[8] = v321;
              *(_QWORD *)&__sz[1].__m_.__opaque[16] = &v318[8 * v317];
              v309 = v321;
              if (v311)
              {
                operator delete(v311);
                v309 = *(char **)&__sz[1].__m_.__opaque[8];
              }
LABEL_418:
              *(_QWORD *)v309 = v310;
              *(_QWORD *)&v307[1].__m_.__opaque[8] += 8;
              v203 = v307;
LABEL_283:
              v209 = *(char **)v203[1].__m_.__opaque;
              v210 = *(_QWORD *)&v203[1].__m_.__opaque[32];
              v211 = *(_QWORD *)&v203[1].__m_.__opaque[24] + v210;
LABEL_284:
              *(_QWORD *)(*(_QWORD *)&v209[(v211 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v211 & 0x1FF)) = v212;
              *(_QWORD *)&v203[1].__m_.__opaque[32] = v210 + 1;
LABEL_285:
              ++v205;
LABEL_286:
              v204 = v205;
              v202 = *(_QWORD *)&v203->__m_.__opaque[32];
              if (v205 >= (unint64_t)((*(_QWORD *)&v203->__m_.__opaque[40] - v202) >> 3))
                goto LABEL_419;
              continue;
            }
          }
LABEL_601:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        if (v225 == sig)
          v235 = 1;
        else
          v235 = v227 >> 2;
        if (v235 >> 61)
          goto LABEL_601;
        v236 = (char *)operator new(8 * v235);
        v237 = operator new(0x1000uLL);
        v238 = &v236[8 * v224];
        v239 = &v236[8 * v235];
        if (v224 == v235)
        {
          if (v221 < 1)
          {
            if (v220 == v209)
              v274 = 1;
            else
              v274 = v221 >> 2;
            if (v274 >> 61)
              goto LABEL_601;
            v275 = v237;
            v238 = (char *)operator new(8 * v274);
            v239 = &v238[8 * v274];
            operator delete(v236);
            v209 = *(char **)__sz[1].__m_.__opaque;
            v220 = *(char **)&__sz[1].__m_.__opaque[8];
            v236 = v238;
            v237 = v275;
          }
          else
          {
            v240 = v224 + 2;
            if (v224 >= -1)
              v240 = v224 + 1;
            v238 -= 8 * (v240 >> 1);
          }
        }
        *(_QWORD *)v238 = v237;
        v276 = v238 + 8;
        if (v220 == v209)
        {
LABEL_355:
          v277 = (void *)__sz[1].__m_.__sig;
          __sz[1].__m_.__sig = (uint64_t)v236;
          *(_QWORD *)__sz[1].__m_.__opaque = v238;
          v203 = __sz;
          *(_QWORD *)&__sz[1].__m_.__opaque[8] = v276;
          *(_QWORD *)&__sz[1].__m_.__opaque[16] = v239;
          if (v277)
            operator delete(v277);
          goto LABEL_283;
        }
        while (2)
        {
          if (v238 != v236)
          {
            v278 = v238;
            v279 = v276;
            goto LABEL_358;
          }
          if (v276 < v239)
          {
            v281 = (v239 - v276) >> 3;
            if (v281 >= -1)
              v282 = v281 + 1;
            else
              v282 = v281 + 2;
            v279 = &v276[8 * (v282 >> 1)];
            v278 = &v238[8 * (v282 >> 1)];
            if (v276 == v238)
            {
              v236 = v276;
            }
            else
            {
              memmove(&v238[8 * (v282 >> 1)], v238, v276 - v238);
              v236 = v238;
            }
LABEL_358:
            v280 = *((_QWORD *)v220 - 1);
            v220 -= 8;
            *((_QWORD *)v278 - 1) = v280;
            v238 = v278 - 8;
            v276 = v279;
            if (v220 == *(char **)__sz[1].__m_.__opaque)
              goto LABEL_355;
            continue;
          }
          break;
        }
        if (v239 == v238)
          v283 = 1;
        else
          v283 = (v239 - v238) >> 2;
        if (v283 >> 61)
          goto LABEL_601;
        v284 = (char *)operator new(8 * v283);
        v236 = v284;
        v285 = (v283 + 3) >> 2;
        v278 = &v284[8 * v285];
        v279 = v278;
        v286 = v276 - v238;
        if (v276 != v238)
        {
          v279 = &v278[v286 & 0xFFFFFFFFFFFFFFF8];
          v287 = v286 - 8;
          v288 = &v284[8 * v285];
          v289 = v238;
          if (v287 < 0x38
            || (v290 = 8 * v285, v288 = &v284[8 * v285], v289 = v238, (unint64_t)(v288 - v238) < 0x20))
          {
            do
            {
LABEL_377:
              v297 = *(_QWORD *)v289;
              v289 += 8;
              *(_QWORD *)v288 = v297;
              v288 += 8;
            }
            while (v288 != v279);
          }
          else
          {
            v291 = (v287 >> 3) + 1;
            v292 = 8 * (v291 & 0x3FFFFFFFFFFFFFFCLL);
            v288 = &v278[v292];
            v293 = (__int128 *)(v238 + 16);
            v294 = &v284[v290 + 16];
            v295 = v291 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v296 = *v293;
              *((_OWORD *)v294 - 1) = *(v293 - 1);
              *(_OWORD *)v294 = v296;
              v293 += 2;
              v294 += 32;
              v295 -= 4;
            }
            while (v295);
            if (v291 != (v291 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v289 = &v238[v292];
              goto LABEL_377;
            }
          }
        }
        v239 = &v284[8 * v283];
        operator delete(v238);
        goto LABEL_358;
      }
      break;
    }
    *(_QWORD *)&v203[1].__m_.__opaque[24] = v223 - 512;
    v206 = v203;
    v207 = v209 + 8;
    v208 = *(_QWORD *)v209;
    *(_QWORD *)v206[1].__m_.__opaque = v209 + 8;
    if (*(char **)&v206[1].__m_.__opaque[16] != v220)
    {
LABEL_282:
      *(_QWORD *)v220 = v208;
      *(_QWORD *)&v206[1].__m_.__opaque[8] += 8;
      v203 = v206;
      goto LABEL_283;
    }
    v241 = (char *)v206[1].__m_.__sig;
    if (v207 > v241)
    {
      v242 = (v207 - v241) >> 3;
      if (v242 >= -1)
        v243 = v242 + 1;
      else
        v243 = v242 + 2;
      v244 = v243 >> 1;
      v245 = &v207[-8 * (v243 >> 1)];
      v246 = v220 - v207;
      if (v220 == v207)
      {
        v248 = v220;
        v247 = __sz;
      }
      else
      {
        memmove(&v207[-8 * (v243 >> 1)], v207, v220 - v207);
        v247 = __sz;
        v248 = *(char **)__sz[1].__m_.__opaque;
      }
      v220 = &v245[v246];
      *(_QWORD *)v247[1].__m_.__opaque = &v248[-8 * v244];
      *(_QWORD *)&v247[1].__m_.__opaque[8] = &v245[v246];
      v206 = v247;
      goto LABEL_282;
    }
    v265 = (v220 - v241) >> 2;
    if (v220 == v241)
      v265 = 1;
    if (v265 >> 61)
      goto LABEL_601;
    v266 = v265 >> 2;
    v267 = 8 * v265;
    v268 = (char *)operator new(8 * v265);
    v269 = &v268[8 * v266];
    v271 = v220 - v207;
    v270 = v220 == v207;
    v220 = v269;
    if (!v270)
    {
      v220 = &v269[v271 & 0xFFFFFFFFFFFFFFF8];
      v272 = v271 - 8;
      if ((unint64_t)(v271 - 8) >= 0x38)
      {
        v273 = &v268[8 * v266];
        if ((unint64_t)(v273 - v207) < 0x20)
          goto LABEL_387;
        v298 = (v272 >> 3) + 1;
        v299 = 8 * (v298 & 0x3FFFFFFFFFFFFFFCLL);
        v273 = &v269[v299];
        v300 = (__int128 *)(v209 + 24);
        v301 = &v268[8 * v266 + 16];
        v302 = v298 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v303 = *v300;
          *((_OWORD *)v301 - 1) = *(v300 - 1);
          *(_OWORD *)v301 = v303;
          v300 += 2;
          v301 += 32;
          v302 -= 4;
        }
        while (v302);
        if (v298 != (v298 & 0x3FFFFFFFFFFFFFFCLL))
        {
          v207 += v299;
          goto LABEL_387;
        }
      }
      else
      {
        v273 = &v268[8 * v266];
        do
        {
LABEL_387:
          v304 = *(_QWORD *)v207;
          v207 += 8;
          *(_QWORD *)v273 = v304;
          v273 += 8;
        }
        while (v273 != v220);
      }
    }
    v305 = &v268[v267];
    v206 = __sz;
    __sz[1].__m_.__sig = (uint64_t)v268;
    *(_QWORD *)__sz[1].__m_.__opaque = v269;
    *(_QWORD *)&__sz[1].__m_.__opaque[8] = v220;
    *(_QWORD *)&__sz[1].__m_.__opaque[16] = v305;
    if (v241)
    {
      operator delete(v241);
      v220 = *(char **)&__sz[1].__m_.__opaque[8];
    }
    goto LABEL_282;
  }
LABEL_419:
  if (v203[5].__m_.__opaque[48])
  {
    v333 = *(_QWORD *)&v203[1].__m_.__opaque[48];
    v334 = v203[2].__m_.__sig;
    if (v333 != v334)
    {
      do
      {
        v335 = *(_QWORD *)(v333 + 8);
        if (v335)
          (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
        v333 += 16;
      }
      while (v333 != v334);
      v333 = *(_QWORD *)&v203[1].__m_.__opaque[48];
    }
    v203[2].__m_.__sig = v333;
    v203[5].__m_.__opaque[48] = 0;
  }
  v336 = *(_QWORD *)v203[1].__m_.__opaque;
  if (*(_QWORD *)&v203[1].__m_.__opaque[8] == v336
    || (v337 = *(_QWORD *)&v203[1].__m_.__opaque[24],
        v338 = (_QWORD *)(v336 + 8 * (v337 >> 9)),
        v339 = *v338 + 8 * (v337 & 0x1FF),
        v340 = *(_QWORD *)(v336 + (((*(_QWORD *)&v203[1].__m_.__opaque[32] + v337) >> 6) & 0x3FFFFFFFFFFFFF8))
             + 8 * ((*(_QWORD *)&v203[1].__m_.__opaque[32] + v337) & 0x1FF),
        v339 == v340))
  {
    v363 = 0;
    goto LABEL_528;
  }
  v341 = 0;
  v342 = 0;
  v343 = 0;
  while (2)
  {
    v344 = atomic_load((unsigned int *)(*(_QWORD *)v339 + 72));
    if (v344 == 1)
    {
      if (v342 < v343)
      {
        *(_QWORD *)v342 = *(_QWORD *)v339;
        v342 += 8;
        goto LABEL_450;
      }
      v345 = v342 - v341;
      v346 = (v342 - v341) >> 3;
      v347 = v346 + 1;
      v481 = v341;
      if ((unint64_t)(v346 + 1) >> 61)
        abort();
      if ((v343 - v341) >> 2 > v347)
        v347 = (v343 - v341) >> 2;
      if ((unint64_t)(v343 - v341) >= 0x7FFFFFFFFFFFFFF8)
        v348 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v348 = v347;
      if (v348)
      {
        if (v348 >> 61)
          goto LABEL_601;
        v349 = (char *)operator new(8 * v348);
        v350 = v342;
      }
      else
      {
        v350 = v342;
        v349 = 0;
      }
      v341 = &v349[8 * v346];
      *(_QWORD *)v341 = *(_QWORD *)v339;
      v342 = v341 + 8;
      v351 = v481;
      if (v350 != v481)
      {
        v352 = v350;
        v353 = v350 - 8;
        v354 = v353 - v481;
        if ((unint64_t)(v353 - v481) < 0x168
          || &v349[v345 - 8 - (v354 & 0xFFFFFFFFFFFFFFF8)] > &v349[v345 - 8]
          || &v353[-(v354 & 0xFFFFFFFFFFFFFFF8)] > v353
          || (unint64_t)(v353 - &v349[v345] + 8) < 0x20)
        {
          v355 = v352;
          v351 = v481;
        }
        else
        {
          v358 = (v354 >> 3) + 1;
          v355 = &v352[-8 * (v358 & 0x3FFFFFFFFFFFFFFCLL)];
          v359 = &v349[8 * v346 - 16];
          v360 = v352 - 16;
          v361 = v358 & 0x3FFFFFFFFFFFFFFCLL;
          v351 = v481;
          do
          {
            v362 = *(_OWORD *)v360;
            *((_OWORD *)v359 - 1) = *((_OWORD *)v360 - 1);
            *(_OWORD *)v359 = v362;
            v359 -= 32;
            v360 -= 32;
            v361 -= 4;
          }
          while (v361);
          v341 -= 8 * (v358 & 0x3FFFFFFFFFFFFFFCLL);
          if (v358 == (v358 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_448;
        }
        do
        {
          v356 = *((_QWORD *)v355 - 1);
          v355 -= 8;
          *((_QWORD *)v341 - 1) = v356;
          v341 -= 8;
        }
        while (v355 != v351);
      }
LABEL_448:
      v343 = &v349[8 * v348];
      if (v351)
        operator delete(v351);
LABEL_450:
      atomic_store(2u, (unsigned int *)(*(_QWORD *)v339 + 72));
    }
    v339 += 8;
    if (v339 - *v338 == 4096)
    {
      v357 = v338[1];
      ++v338;
      v339 = v357;
    }
    if (v339 != v340)
      continue;
    break;
  }
  if (v342 != v341)
  {
    v364 = (unsigned int *)&__sz[5];
    v482 = v341;
    v365 = v341;
    while (1)
    {
      v484 = v342;
      v366 = *(unsigned int **)v365;
      v367 = **(_QWORD ***)v365;
      v368 = v367[5];
      v369 = *(_DWORD *)(v368 + 4);
      if (v369 == 2)
      {
LABEL_467:
        v370 = (uint64_t)(*(_QWORD *)(v368 + 16) - *(_QWORD *)(v368 + 8)) >> 4;
        atomic_store(v370, v366 + 2);
        v371 = *(unsigned int **)v365;
        v372 = (unint64_t *)(*(_QWORD *)v365 + 16);
        v373 = *v372;
        v374 = v370;
        v488[0] = 0.0;
        v375 = (uint64_t)(*((_QWORD *)v371 + 3) - v373) >> 3;
        if (v370 <= v375)
        {
          if (v370 < v375)
            *((_QWORD *)v371 + 3) = v373 + 8 * v370;
        }
        else
        {
          std::vector<__CVBuffer *>::__append(v372, v370 - v375, v488);
        }
        if ((_DWORD)v370)
        {
          v383 = 0;
          while (1)
          {
            do
              v384 = __ldaxr(v364);
            while (__stlxr(v384 + 1, v364));
            v385 = *(_QWORD *)(v367[5] + 8);
            v386 = *(_OWORD *)(v385 + 16 * v383);
            v387 = *(std::__shared_weak_count **)(v385 + 16 * v383 + 8);
            if (v387)
            {
              v388 = (unint64_t *)&v387->__shared_owners_;
              do
                v389 = __ldxr(v388);
              while (__stxr(v389 + 1, v388));
            }
            v486 = v386;
            if (md::HardwareFigDecoder::instance(void)::once != -1)
            {
              dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
              *(_QWORD *)&v386 = v486;
            }
            v390 = (uint64_t *)md::HardwareFigDecoder::instance(void)::_singleton;
            v391 = *(_QWORD *)(v386 + 8);
            v392 = *(_QWORD *)(v386 + 16);
            v393 = *(unsigned int **)v365;
            if (v387)
            {
              v394 = (unint64_t *)&v387->__shared_owners_;
              do
                v395 = __ldxr(v394);
              while (__stxr(v395 + 1, v394));
            }
            v497 = 0;
            v396 = (char *)operator new(0x30uLL);
            *(_QWORD *)v396 = &off_1E42D85E8;
            *((_QWORD *)v396 + 1) = __sz;
            *((_QWORD *)v396 + 2) = v393;
            *(_OWORD *)(v396 + 24) = v486;
            *((_DWORD *)v396 + 10) = v383;
            v497 = v396;
            md::HardwareFigDecoder::decodeAsync(*v390, v391, v392, v496);
            v397 = v497;
            if (v497 == v496)
            {
              v397 = v496;
              v398 = 4;
            }
            else
            {
              if (!v497)
                goto LABEL_490;
              v398 = 5;
            }
            (*(void (**)(void))(*v397 + 8 * v398))();
LABEL_490:
            if (v387)
            {
              v399 = (unint64_t *)&v387->__shared_owners_;
              do
                v400 = __ldaxr(v399);
              while (__stlxr(v400 - 1, v399));
              if (!v400)
              {
                ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                std::__shared_weak_count::__release_weak(v387);
              }
            }
            if (++v383 == v374)
              goto LABEL_463;
          }
        }
        goto LABEL_463;
      }
      if (v369 == 1)
        break;
      if (!v369)
        goto LABEL_467;
LABEL_463:
      v365 += 8;
      v342 = v484;
      if (v365 == v484)
      {
        v203 = __sz;
        v363 = v482;
        goto LABEL_528;
      }
    }
    v376 = v366[11] != 14;
    v377 = (uint64_t)(*(_QWORD *)(v368 + 16) - *(_QWORD *)(v368 + 8)) >> 4;
    atomic_store(v377, v366 + 2);
    v378 = *(unsigned int **)v365;
    v379 = (unint64_t *)(*(_QWORD *)v365 + 16);
    v380 = *v379;
    v381 = v377;
    v488[0] = 0.0;
    v382 = (uint64_t)(*((_QWORD *)v378 + 3) - v380) >> 3;
    if (v377 <= v382)
    {
      if (v377 < v382)
        *((_QWORD *)v378 + 3) = v380 + 8 * v377;
    }
    else
    {
      std::vector<__CVBuffer *>::__append(v379, v377 - v382, v488);
    }
    if (!(_DWORD)v377)
      goto LABEL_463;
    v401 = 0;
    v402 = 2 * v376;
    do
LABEL_500:
      v403 = __ldaxr(v364);
    while (__stlxr(v403 + 1, v364));
    v404 = *(_QWORD *)(v367[5] + 8);
    v405 = *(_OWORD *)(v404 + 16 * v401);
    v406 = *(std::__shared_weak_count **)(v404 + 16 * v401 + 8);
    if (v406)
    {
      v407 = (unint64_t *)&v406->__shared_owners_;
      do
        v408 = __ldxr(v407);
      while (__stxr(v408 + 1, v407));
    }
    v409 = v367[7];
    v410 = *(const void **)(v409 + 8);
    v411 = *(opaqueCMSampleBuffer **)(v409 + 16);
    v412 = v367[9];
    v413 = *(_QWORD *)(v412 + 8);
    v414 = *(_QWORD *)(v412 + 16);
    v415 = *(_QWORD *)&__sz[6].__m_.__opaque[8];
    v416 = *(void **)(v405 + 8);
    v417 = *(opaqueCMFormatDescription **)(v405 + 16);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 3321888768;
    v491 = ___ZN8altitude12TexturePager25processTextureDecodeQueueEv_block_invoke;
    *(_QWORD *)v492 = &__block_descriptor_72_ea8_32c64_ZTSKZN8altitude12TexturePager25processTextureDecodeQueueEvE3__1_e24_v20__0____CVBuffer__8i16l;
    v418 = *(unsigned int **)v365;
    if (v406)
    {
      v419 = (unint64_t *)&v406->__shared_owners_;
      do
        v420 = __ldxr(v419);
      while (__stxr(v420 + 1, v419));
      *(_QWORD *)&v492[8] = __sz;
      *(_QWORD *)&v492[16] = v418;
      v493 = v405;
      do
        v421 = __ldxr(v419);
      while (__stxr(v421 + 1, v419));
    }
    else
    {
      *(_QWORD *)&v492[8] = __sz;
      *(_QWORD *)&v492[16] = v418;
      v493 = v405;
    }
    v494 = v401;
    md::HardwareVideoDecodingSession::decode(v415, v402, v410, v411, v413, v414, v416, v417, 1u, &block);
    if (!v406)
      goto LABEL_515;
    v422 = (unint64_t *)&v406->__shared_owners_;
    do
      v423 = __ldaxr(v422);
    while (__stlxr(v423 - 1, v422));
    if (!v423)
    {
      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
      std::__shared_weak_count::__release_weak(v406);
      v424 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
      {
LABEL_516:
        v425 = (unint64_t *)&v424->__shared_owners_;
        do
          v426 = __ldaxr(v425);
        while (__stlxr(v426 - 1, v425));
        if (!v426)
        {
          ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
          std::__shared_weak_count::__release_weak(v424);
        }
      }
    }
    else
    {
LABEL_515:
      v424 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
        goto LABEL_516;
    }
    if (v406)
    {
      v427 = (unint64_t *)&v406->__shared_owners_;
      do
        v428 = __ldaxr(v427);
      while (__stlxr(v428 - 1, v427));
      if (!v428)
      {
        ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
        std::__shared_weak_count::__release_weak(v406);
      }
    }
    if (++v401 == v381)
      goto LABEL_463;
    goto LABEL_500;
  }
  v363 = v342;
  v203 = __sz;
LABEL_528:
  v483 = v363;
  v429 = v203;
  v430 = (std::mutex *)((char *)v203 + 168);
  std::mutex::lock(v430);
  v432 = *(uint64_t **)&v429[2].__m_.__opaque[8];
  v431 = *(uint64_t **)&v429[2].__m_.__opaque[16];
  *(_QWORD *)&v429[2].__m_.__opaque[8] = 0;
  *(_QWORD *)&v429[2].__m_.__opaque[16] = 0;
  *(_QWORD *)&v429[2].__m_.__opaque[24] = 0;
  std::mutex::unlock(v430);
  if (v432 != v431)
  {
    v433 = v432;
    do
    {
      v435 = *v433;
      v436 = v433[2];
      if (v436)
        *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8 * *((unsigned int *)v433 + 2)) = v436;
      v437 = (unsigned int *)(v435 + 8);
      do
      {
        v438 = __ldaxr(v437);
        v439 = v438 - 1;
      }
      while (__stlxr(v439, v437));
      if (!v439)
      {
        if (atomic_load(v437))
        {
          v441 = 0;
          v442 = 1;
          do
          {
            while (!v442)
            {
              v442 = 0;
              ++v441;
              v443 = atomic_load(v437);
              if (v441 >= v443)
                goto LABEL_547;
            }
            v444 = *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8 * v441);
            v442 = v444 != 0;
            ++v441;
            v445 = atomic_load((unsigned int *)(v435 + 8));
          }
          while (v441 < v445);
          if (!v444)
            goto LABEL_547;
        }
        if (*(int *)(v435 + 76) < 1)
        {
LABEL_547:
          v434 = *(CVPixelBufferRef **)(v435 + 16);
          v446 = *(CVPixelBufferRef **)(v435 + 24);
          if (v434 != v446)
          {
            do
            {
              if (*v434)
                CVPixelBufferRelease(*v434);
              ++v434;
            }
            while (v434 != v446);
            v434 = *(CVPixelBufferRef **)(v435 + 16);
          }
          *(_QWORD *)(v435 + 24) = v434;
          atomic_store(0, (unsigned int *)(v435 + 72));
        }
        else if (*(_BYTE *)(v435 + 40))
        {
          atomic_store(3u, (unsigned int *)(v435 + 72));
        }
        else
        {
          atomic_store(5u, (unsigned int *)(v435 + 72));
        }
      }
      v433 += 3;
    }
    while (v433 != v431);
  }
  if (v432)
    operator delete(v432);
  if (v483)
    operator delete(v483);
  v447 = *(_QWORD *)__sz[1].__m_.__opaque;
  if (*(_QWORD *)&__sz[1].__m_.__opaque[8] != v447)
  {
    v448 = *(_QWORD *)&__sz[1].__m_.__opaque[24];
    v449 = (_QWORD *)(v447 + 8 * (v448 >> 9));
    v450 = *v449 + 8 * (v448 & 0x1FF);
    v451 = *(_QWORD *)(v447 + (((*(_QWORD *)&__sz[1].__m_.__opaque[32] + v448) >> 6) & 0x3FFFFFFFFFFFFF8))
         + 8 * ((*(_QWORD *)&__sz[1].__m_.__opaque[32] + v448) & 0x1FF);
    if (v450 != v451)
    {
      v452 = 0;
      v453 = 0;
      v454 = 0;
      while (1)
      {
        v455 = atomic_load((unsigned int *)(*(_QWORD *)v450 + 72));
        if (v455 == 3)
          break;
LABEL_582:
        v450 += 8;
        if (v450 - *v449 == 4096)
        {
          v465 = v449[1];
          ++v449;
          v450 = v465;
        }
        if (v450 == v451)
        {
          if (v452 != v453)
          {
            v471 = (unsigned int *)&__sz[5];
            v472 = MEMORY[0x1E0C809B0];
            v473 = v452;
            do
            {
              do
                v474 = __ldaxr(v471);
              while (__stlxr(v474 + 1, v471));
              v475 = *(NSObject **)&__sz->__m_.__opaque[24];
              *(_QWORD *)&block = v472;
              *((_QWORD *)&block + 1) = 3321888768;
              v491 = ___ZN8altitude12TexturePager25processTextureMipmapQueueEv_block_invoke;
              *(_QWORD *)v492 = &__block_descriptor_48_ea8_32c64_ZTSKZN8altitude12TexturePager25processTextureMipmapQueueEvE3__0_e5_v8__0l;
              v476 = *(_QWORD *)v473;
              v473 += 8;
              *(_QWORD *)&v492[8] = __sz;
              *(_QWORD *)&v492[16] = v476;
              dispatch_async(v475, &block);
            }
            while (v473 != v453);
          }
          if (v452)
            operator delete(v452);
          return;
        }
      }
      if (v453 < v454)
      {
        *(_QWORD *)v453 = *(_QWORD *)v450;
        v456 = v453 + 8;
LABEL_581:
        atomic_store(4u, (unsigned int *)(*(_QWORD *)v450 + 72));
        v453 = v456;
        goto LABEL_582;
      }
      v457 = (v453 - v452) >> 3;
      v458 = v457 + 1;
      if ((unint64_t)(v457 + 1) >> 61)
        abort();
      if ((v454 - v452) >> 2 > v458)
        v458 = (v454 - v452) >> 2;
      if ((unint64_t)(v454 - v452) >= 0x7FFFFFFFFFFFFFF8)
        v459 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v459 = v458;
      if (v459)
      {
        if (v459 >> 61)
          goto LABEL_601;
        v460 = operator new(8 * v459);
      }
      else
      {
        v460 = 0;
      }
      v461 = &v460[8 * v457];
      *(_QWORD *)v461 = *(_QWORD *)v450;
      v456 = v461 + 8;
      if (v453 != v452)
      {
        v462 = v453 - 8 - v452;
        if (v462 >= 0x168)
        {
          if (&v460[v453 - v452 - 8 - (v462 & 0xFFFFFFFFFFFFFFF8)] > &v460[v453 - v452 - 8])
          {
            v463 = v453;
          }
          else if (&v453[-(v462 & 0xFFFFFFFFFFFFFFF8) - 8] > v453 - 8)
          {
            v463 = v453;
          }
          else if ((unint64_t)(v452 - v460) >= 0x20)
          {
            v466 = (v462 >> 3) + 1;
            v463 = &v453[-8 * (v466 & 0x3FFFFFFFFFFFFFFCLL)];
            v467 = &v460[8 * v457 - 16];
            v468 = v453 - 16;
            v469 = v466 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v470 = *(_OWORD *)v468;
              *(v467 - 1) = *((_OWORD *)v468 - 1);
              *v467 = v470;
              v467 -= 2;
              v468 -= 32;
              v469 -= 4;
            }
            while (v469);
            v461 -= 8 * (v466 & 0x3FFFFFFFFFFFFFFCLL);
            if (v466 == (v466 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_578;
          }
          else
          {
            v463 = v453;
          }
        }
        else
        {
          v463 = v453;
        }
        do
        {
          v464 = *((_QWORD *)v463 - 1);
          v463 -= 8;
          *((_QWORD *)v461 - 1) = v464;
          v461 -= 8;
        }
        while (v463 != v452);
      }
LABEL_578:
      v454 = &v460[8 * v459];
      if (v452)
        operator delete(v452);
      v452 = v461;
      goto LABEL_581;
    }
  }
}

void sub_19F820BE8()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x19F81F7E8);
}

void sub_19F820C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15)
    JUMPOUT(0x19F81F7DCLL);
  JUMPOUT(0x19F81F7E8);
}

_QWORD *md::realistic::RealisticRenderer::onLayoutEnd(md::realistic::RealisticRenderer *this, md::LayoutContext *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v10[0] = &off_1E42D5608;
  v10[1] = this;
  v11 = v10;
  geo::TaskQueue::async(&v8, v2, v10);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  result = v11;
  if (v11 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19F820E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5608;
  a2[1] = v2;
  return result;
}

intptr_t std::__function::__func<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::onLayoutEnd(md::LayoutContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int *v8;
  _QWORD *v9;
  md::realistic::GlobeRenderLayer *v10;
  float **v11;
  float **i;
  int *v13;
  int *v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  altitude::RenderableGroup *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  altitude::RenderableGroup *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;
  unsigned int v54;
  _QWORD *v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  _BYTE *v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t j;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  void **v159;
  int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unsigned int *v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  altitude::QuickSurfaceManager *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  uint64_t **v254;
  char *v255;
  unint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t *v259;
  unsigned int v260;
  double v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  void **v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t *v279;
  int *v280;
  int *v281;
  unsigned int v282;

  v272 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(v272 + 128);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 688) + 56))(*(_QWORD *)(v1 + 688), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 856) + 136) + 88));
  v2 = *(_QWORD *)(v1 + 696);
  v273 = v1;
  v3 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 856) + 136) + 88);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 24))(*(_QWORD *)(v2 + 48), v2, 0xFFFFFFFFLL);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 56) + 24))(*(_QWORD *)(v2 + 56), v2);
  std::mutex::lock((std::mutex *)(v2 + 104));
  v6 = *(int **)(v2 + 80);
  if (v6 != (int *)(v2 + 88))
  {
    do
    {
      v11 = (float **)*((_QWORD *)v6 + 6);
      for (i = (float **)*((_QWORD *)v6 + 7); v11 != i; v11 += 2)
        altitude::ObjectTreeLoader::traverse(v2, v6 + 10, v11, v4, v5, v3);
      v13 = (int *)*((_QWORD *)v6 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (int *)*((_QWORD *)v6 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v6;
          v6 = v14;
        }
        while (!v15);
      }
      v6 = v14;
    }
    while (v14 != (int *)(v2 + 88));
  }
  std::mutex::unlock((std::mutex *)(v2 + 104));
  v7 = *(int **)(v2 + 168);
  v8 = *(int **)(v2 + 176);
  v277 = v2;
  if (v7 != v8)
  {
    v9 = (_QWORD *)(v2 + 200);
    v10 = *(md::realistic::GlobeRenderLayer **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40) + 8);
    v278 = (_QWORD *)(v2 + 200);
    v280 = *(int **)(v2 + 176);
    while (1)
    {
      v17 = v7[10];
      if (v17 == -1)
      {
        if (!(_DWORD)v3)
          goto LABEL_15;
      }
      else if (*(_DWORD *)(*((_QWORD *)v7 + 2) + 48 * v17 + 40) >= v3)
      {
        goto LABEL_15;
      }
      v18 = v7[11];
      if (v18 == -1)
      {
        if (v17 != -1)
        {
          v34 = *(altitude::RenderableGroup **)(*((_QWORD *)v7 + 2) + 48 * v17 + 24);
          v35 = (_QWORD *)*((_QWORD *)v34 + 6);
          v36 = (_QWORD *)*((_QWORD *)v34 + 7);
          if (v35 != v36)
          {
            v37 = (char *)*((_QWORD *)v10 + 28);
            v38 = (char *)*((_QWORD *)v10 + 29);
            do
            {
              v41 = v37;
              if (v38 != v37)
              {
                v43 = 0;
                v44 = (v38 - v37) >> 4;
                if (v44 <= 1)
                  v45 = 1;
                else
                  v45 = (v38 - v37) >> 4;
                v46 = v37;
                do
                {
                  if (*(_QWORD *)v46 == *v35)
                  {
                    v39 = &v37[16 * v43];
                    v40 = &v37[16 * v44];
                    v42 = *((_QWORD *)v40 - 2);
                    v41 = v40 - 16;
                    *(_QWORD *)v39 = v42;
                    v39[8] = v41[8];
                    *((_QWORD *)v10 + 29) = v41;
                    goto LABEL_39;
                  }
                  ++v43;
                  v46 += 16;
                }
                while (v45 != v43);
                v41 = v38;
              }
LABEL_39:
              ++v35;
              v38 = v41;
            }
            while (v35 != v36);
          }
          md::realistic::GlobeRenderLayer::unregisterAnimatedGroup(v10, v34);
          v7[10] = -1;
          v52 = (uint64_t *)*v9;
          if (*v9)
          {
            v54 = *v7;
            v53 = v7[1];
            v55 = v9;
            v56 = v7[2];
            do
            {
              while (*((_DWORD *)v52 + 8) < v54 || *((_DWORD *)v52 + 9) < v53 || *((_DWORD *)v52 + 10) < v56)
              {
                v52 = (uint64_t *)v52[1];
                if (!v52)
                  goto LABEL_67;
              }
              v55 = v52;
              v52 = (uint64_t *)*v52;
            }
            while (v52);
LABEL_67:
            if (v55 != v9 && v54 >= *((_DWORD *)v55 + 8) && v53 >= *((_DWORD *)v55 + 9) && v56 >= *((_DWORD *)v55 + 10))
            {
              v57 = (_QWORD *)v55[6];
              v58 = v55 + 7;
              if (v57 != v58)
              {
                do
                {
                  *(_BYTE *)(v57[4] + 180) = 1;
                  v59 = (_QWORD *)v57[1];
                  if (v59)
                  {
                    do
                    {
                      v60 = v59;
                      v59 = (_QWORD *)*v59;
                    }
                    while (v59);
                  }
                  else
                  {
                    do
                    {
                      v60 = (_QWORD *)v57[2];
                      v15 = *v60 == (_QWORD)v57;
                      v57 = v60;
                    }
                    while (!v15);
                  }
                  v57 = v60;
                }
                while (v60 != v58);
              }
            }
          }
        }
        goto LABEL_15;
      }
      v19 = *((_QWORD *)v7 + 2);
      v20 = *(_QWORD *)(v19 + 48 * v18 + 24);
      if (v20)
      {
        if (v17 == -1)
        {
          v61 = (uint64_t *)*v9;
          if (*v9)
          {
            v63 = *v7;
            v62 = v7[1];
            v64 = v9;
            v65 = v7[2];
            do
            {
              while (*((_DWORD *)v61 + 8) < v63 || *((_DWORD *)v61 + 9) < v62 || *((_DWORD *)v61 + 10) < v65)
              {
                v61 = (uint64_t *)v61[1];
                if (!v61)
                  goto LABEL_87;
              }
              v64 = v61;
              v61 = (uint64_t *)*v61;
            }
            while (v61);
LABEL_87:
            if (v64 != v9 && v63 >= *((_DWORD *)v64 + 8) && v62 >= *((_DWORD *)v64 + 9) && v65 >= *((_DWORD *)v64 + 10))
            {
              v66 = (_QWORD *)v64[6];
              v67 = v64 + 7;
              if (v66 != v67)
              {
                do
                {
                  *(_BYTE *)(v66[4] + 180) = 0;
                  v68 = (_QWORD *)v66[1];
                  if (v68)
                  {
                    do
                    {
                      v69 = v68;
                      v68 = (_QWORD *)*v68;
                    }
                    while (v68);
                  }
                  else
                  {
                    do
                    {
                      v69 = (_QWORD *)v66[2];
                      v15 = *v69 == (_QWORD)v66;
                      v66 = v69;
                    }
                    while (!v15);
                  }
                  v66 = v69;
                }
                while (v69 != v67);
              }
            }
          }
        }
        else
        {
          v21 = *(altitude::RenderableGroup **)(v19 + 48 * v17 + 24);
          v22 = (_QWORD *)*((_QWORD *)v21 + 6);
          v23 = (_QWORD *)*((_QWORD *)v21 + 7);
          if (v22 != v23)
          {
            v24 = (char *)*((_QWORD *)v10 + 28);
            v25 = (char *)*((_QWORD *)v10 + 29);
            do
            {
              v28 = v24;
              if (v25 != v24)
              {
                v30 = 0;
                v31 = (v25 - v24) >> 4;
                if (v31 <= 1)
                  v32 = 1;
                else
                  v32 = (v25 - v24) >> 4;
                v33 = v24;
                do
                {
                  if (*(_QWORD *)v33 == *v22)
                  {
                    v26 = &v24[16 * v30];
                    v27 = &v24[16 * v31];
                    v29 = *((_QWORD *)v27 - 2);
                    v28 = v27 - 16;
                    *(_QWORD *)v26 = v29;
                    v26[8] = v28[8];
                    *((_QWORD *)v10 + 29) = v28;
                    goto LABEL_26;
                  }
                  ++v30;
                  v33 += 16;
                }
                while (v32 != v30);
                v28 = v25;
              }
LABEL_26:
              ++v22;
              v25 = v28;
            }
            while (v22 != v23);
          }
          md::realistic::GlobeRenderLayer::unregisterAnimatedGroup(v10, v21);
          v18 = v7[11];
          v19 = *((_QWORD *)v7 + 2);
          v20 = *(_QWORD *)(v19 + 48 * v18 + 24);
        }
        v47 = *(uint64_t **)(v20 + 48);
        v48 = *(uint64_t **)(v20 + 56);
        if (v47 == v48)
        {
LABEL_59:
          v51 = *(_QWORD *)(v19 + 48 * v18 + 24);
        }
        else
        {
          do
          {
            v50 = *v47;
            if ((*(_DWORD *)(*v47 + 160) - 1) <= 2)
            {
              if (*(_BYTE *)(v50 + 312))
                v49 = 5;
              else
                v49 = 4;
            }
            else
            {
              v49 = 4;
            }
            md::realistic::GlobeRenderLayer::registerNoCullingRenderable(v10, v50, v49);
            ++v47;
          }
          while (v47 != v48);
          v18 = v7[11];
          if (v18 != -1)
          {
            v19 = *((_QWORD *)v7 + 2);
            goto LABEL_59;
          }
          v51 = 0;
        }
        v71 = (char *)*((_QWORD *)v10 + 32);
        v70 = *((_QWORD *)v10 + 33);
        if ((unint64_t)v71 < v70)
        {
          *(_QWORD *)v71 = v51;
          v16 = v71 + 8;
          v2 = v277;
        }
        else
        {
          v72 = (char *)*((_QWORD *)v10 + 31);
          v73 = (v71 - v72) >> 3;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
LABEL_369:
            abort();
          v75 = v70 - (_QWORD)v72;
          if (v75 >> 2 > v74)
            v74 = v75 >> 2;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            if (v76 >> 61)
LABEL_370:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v77 = (char *)operator new(8 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = &v77[8 * v73];
          *(_QWORD *)v78 = v51;
          v16 = v78 + 8;
          if (v71 == v72)
          {
            v2 = v277;
          }
          else
          {
            v79 = v71 - v72 - 8;
            v2 = v277;
            if (v79 < 0x58)
              goto LABEL_373;
            if ((unint64_t)(v72 - v77) < 0x20)
              goto LABEL_373;
            v80 = (v79 >> 3) + 1;
            v81 = &v77[8 * v73 - 16];
            v82 = (__int128 *)(v71 - 16);
            v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v84 = *v82;
              *((_OWORD *)v81 - 1) = *(v82 - 1);
              *(_OWORD *)v81 = v84;
              v81 -= 32;
              v82 -= 2;
              v83 -= 4;
            }
            while (v83);
            v78 -= 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v71 -= 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_373:
              do
              {
                v85 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *((_QWORD *)v78 - 1) = v85;
                v78 -= 8;
              }
              while (v71 != v72);
            }
            v71 = (char *)*((_QWORD *)v10 + 31);
          }
          *((_QWORD *)v10 + 31) = v78;
          *((_QWORD *)v10 + 32) = v16;
          *((_QWORD *)v10 + 33) = &v77[8 * v76];
          v9 = v278;
          v8 = v280;
          if (v71)
            operator delete(v71);
        }
        *((_QWORD *)v10 + 32) = v16;
        v7[10] = v7[11];
        v7[11] = -1;
      }
LABEL_15:
      v7 += 12;
      if (v7 == v8)
      {
        v7 = *(int **)(v2 + 168);
        v86 = *(int **)(v2 + 176);
        goto LABEL_125;
      }
    }
  }
  v86 = *(int **)(v2 + 168);
LABEL_125:
  v87 = v273;
  if ((int)(-1431655765 * ((unint64_t)((char *)v86 - (char *)v7) >> 4) - *(_DWORD *)(v2 + 220)) >= 1)
  {
    v275 = -1431655765 * ((unint64_t)((char *)v86 - (char *)v7) >> 4) - *(_DWORD *)(v2 + 220);
    if (v7 != v86)
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v281 = v86;
      while (1)
      {
        v92 = *((_QWORD *)v7 + 2);
        if (*((_QWORD *)v7 + 3) != v92)
          break;
        v91 = v89;
LABEL_129:
        v7 += 12;
        v89 = v91;
        if (v7 == v281)
          goto LABEL_168;
      }
      v93 = 0;
      v94 = 0;
      while (1)
      {
        if (v7[11] != v94 && v7[10] != v94)
        {
          v95 = v92 + 48 * v93;
          if (*(_QWORD *)(v95 + 24))
          {
            if (v89 >= v90)
            {
              v96 = (char *)v89 - (char *)v88;
              v97 = v89 - v88;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_369;
              if (((char *)v90 - (char *)v88) >> 2 > v98)
                v98 = ((char *)v90 - (char *)v88) >> 2;
              if ((unint64_t)((char *)v90 - (char *)v88) >= 0x7FFFFFFFFFFFFFF8)
                v99 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v99 = v98;
              if (v99)
              {
                if (v99 >> 61)
                  goto LABEL_370;
                v100 = v88;
                v101 = operator new(8 * v99);
                v88 = v100;
              }
              else
              {
                v101 = 0;
              }
              v102 = (uint64_t *)&v101[8 * v97];
              *v102 = v95;
              v91 = v102 + 1;
              if (v89 != v88)
              {
                v103 = (char *)(v89 - 1) - (char *)v88;
                if (v103 < 0x168)
                {
                  v104 = v89;
                  goto LABEL_153;
                }
                if (&v101[v96 - 8 - (v103 & 0xFFFFFFFFFFFFFFF8)] > &v101[v96 - 8])
                {
                  v104 = v89;
                  goto LABEL_153;
                }
                if ((uint64_t *)((char *)v89 - (v103 & 0xFFFFFFFFFFFFFFF8) - 8) > v89 - 1)
                {
                  v104 = v89;
                  goto LABEL_153;
                }
                if ((unint64_t)((char *)v89 - &v101[v96]) < 0x20)
                {
                  v104 = v89;
                  goto LABEL_153;
                }
                v106 = (v103 >> 3) + 1;
                v104 = &v89[-(v106 & 0x3FFFFFFFFFFFFFFCLL)];
                v107 = &v101[8 * v97 - 16];
                v108 = v89 - 2;
                v109 = v106 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v110 = *(_OWORD *)v108;
                  *(v107 - 1) = *((_OWORD *)v108 - 1);
                  *v107 = v110;
                  v107 -= 2;
                  v108 -= 4;
                  v109 -= 4;
                }
                while (v109);
                v102 -= v106 & 0x3FFFFFFFFFFFFFFCLL;
                if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_153:
                    v105 = *--v104;
                    *--v102 = v105;
                  }
                  while (v104 != v88);
                }
              }
              v90 = (uint64_t *)&v101[8 * v99];
              if (v88)
                operator delete(v88);
              v88 = v102;
              goto LABEL_138;
            }
            *v89++ = v95;
          }
        }
        v91 = v89;
LABEL_138:
        v92 = *((_QWORD *)v7 + 2);
        v93 = ++v94;
        v89 = v91;
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v7 + 3) - v92) >> 4) <= v94)
          goto LABEL_129;
      }
    }
    v91 = 0;
    v88 = 0;
LABEL_168:
    v279 = v88;
    v111 = v91 - v88;
    v112 = 126 - 2 * __clz(v111);
    if (v91 == v88)
      v113 = 0;
    else
      v113 = v112;
    std::__introsort<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,false>((unint64_t)v88, v91, v113, 1);
    j = v277;
    v114 = v279;
    if (v91 != v279)
    {
      v116 = 0;
      v117 = v275;
      if (v275 >= v111)
        v117 = v111;
      if (v117 <= 1)
        v118 = 1;
      else
        v118 = v117;
      do
      {
        v120 = v114[v116];
        v121 = *(std::__shared_weak_count **)(v120 + 32);
        *(_QWORD *)(v120 + 24) = 0;
        *(_QWORD *)(v120 + 32) = 0;
        if (v121)
        {
          p_shared_owners = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldaxr(p_shared_owners);
          while (__stlxr(v123 - 1, p_shared_owners));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
            v114 = v279;
          }
        }
        v119 = v114[v116];
        *(_DWORD *)(v119 + 40) = 0;
        *(_BYTE *)(v119 + 44) = 0;
        ++v116;
      }
      while (v116 != v118);
    }
    v125 = *(_QWORD *)(v277 + 168);
    v124 = *(_QWORD *)(v277 + 176);
    if (v124 != v125)
    {
      v126 = 0;
      v127 = 0;
      v128 = 0xAAAAAAAAAAAAAAABLL * ((v124 - v125) >> 4);
      do
      {
        v282 = v127;
        v129 = v125 + 48 * v126;
        if (*(_DWORD *)(v129 + 44) == -1)
        {
          v130 = v125 + 48 * v126;
          v133 = *(char **)(v130 + 16);
          v132 = v130 + 16;
          v131 = v133;
          v134 = *(char **)(v132 + 8);
          v276 = (void **)(v132 + 8);
          v135 = v133;
          if (v133 == v134)
          {
LABEL_191:
            v136 = v128 - 1;
            v137 = (uint64_t *)(v125 + 48 * (v128 - 1));
            v138 = *v137;
            *(_DWORD *)(v129 + 8) = *((_DWORD *)v137 + 2);
            *(_QWORD *)v129 = v138;
            v139 = v136;
            if (v136 != v126)
            {
              v274 = v136;
              v140 = v125 + 48 * v136;
              v141 = *(_QWORD *)(v140 + 16);
              v142 = *(_QWORD *)(v140 + 24);
              v143 = 0xAAAAAAAAAAAAAAABLL * ((v142 - v141) >> 4);
              v144 = v125 + 48 * v126;
              v147 = *(_QWORD *)(v144 + 32);
              v146 = (_QWORD *)(v144 + 32);
              v145 = v147;
              if (0xAAAAAAAAAAAAAAABLL * ((v147 - (uint64_t)v131) >> 4) >= v143)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v134 - v131) >> 4) < v143)
                {
                  v158 = v141 + 16 * ((v134 - v131) >> 4);
                  if (v131 == v134)
                  {
                    v159 = v276;
                  }
                  else
                  {
                    v159 = v276;
                    do
                    {
                      v161 = *((_QWORD *)v131 + 1);
                      if (v161)
                      {
                        v162 = (unsigned int *)(v161 + 128);
                        do
                          v163 = __ldaxr(v162);
                        while (__stlxr(v163 - 1, v162));
                      }
                      v164 = *(_QWORD *)(v141 + 8);
                      v165 = *(_QWORD *)(v141 + 16);
                      if (v165)
                      {
                        v166 = (unint64_t *)(v165 + 8);
                        do
                          v167 = __ldxr(v166);
                        while (__stxr(v167 + 1, v166));
                      }
                      v168 = (std::__shared_weak_count *)*((_QWORD *)v131 + 2);
                      *((_QWORD *)v131 + 1) = v164;
                      *((_QWORD *)v131 + 2) = v165;
                      if (v168)
                      {
                        v169 = (unint64_t *)&v168->__shared_owners_;
                        do
                          v170 = __ldaxr(v169);
                        while (__stlxr(v170 - 1, v169));
                        if (!v170)
                        {
                          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                          std::__shared_weak_count::__release_weak(v168);
                          v114 = v279;
                        }
                        v164 = *((_QWORD *)v131 + 1);
                      }
                      if (v164)
                      {
                        v171 = (unsigned int *)(v164 + 128);
                        do
                          v172 = __ldaxr(v171);
                        while (__stlxr(v172 + 1, v171));
                      }
                      v174 = *(_QWORD *)(v141 + 24);
                      v173 = *(_QWORD *)(v141 + 32);
                      if (v173)
                      {
                        v175 = (unint64_t *)(v173 + 8);
                        do
                          v176 = __ldxr(v175);
                        while (__stxr(v176 + 1, v175));
                      }
                      v177 = (std::__shared_weak_count *)*((_QWORD *)v131 + 4);
                      *((_QWORD *)v131 + 3) = v174;
                      *((_QWORD *)v131 + 4) = v173;
                      if (v177)
                      {
                        v178 = (unint64_t *)&v177->__shared_owners_;
                        do
                          v179 = __ldaxr(v178);
                        while (__stlxr(v179 - 1, v178));
                        if (!v179)
                        {
                          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                          std::__shared_weak_count::__release_weak(v177);
                          v114 = v279;
                        }
                      }
                      v160 = *(_DWORD *)(v141 + 40);
                      v131[44] = *(_BYTE *)(v141 + 44);
                      *((_DWORD *)v131 + 10) = v160;
                      v141 += 48;
                      v131 += 48;
                    }
                    while (v141 != v158);
                    v131 = (char *)*v276;
                  }
                  v224 = v131;
                  if (v158 != v142)
                  {
                    v224 = v131;
                    do
                    {
                      v226 = *(_QWORD *)(v158 + 8);
                      v227 = *(_QWORD *)(v158 + 16);
                      *v224 = &off_1E42C2D08;
                      v224[1] = v226;
                      v224[2] = v227;
                      if (v227)
                      {
                        v228 = (unint64_t *)(v227 + 8);
                        do
                          v229 = __ldxr(v228);
                        while (__stxr(v229 + 1, v228));
                        v226 = v224[1];
                      }
                      if (v226)
                      {
                        v230 = (unsigned int *)(v226 + 128);
                        do
                          v231 = __ldaxr(v230);
                        while (__stlxr(v231 + 1, v230));
                      }
                      v232 = *(_QWORD *)(v158 + 32);
                      v224[3] = *(_QWORD *)(v158 + 24);
                      v224[4] = v232;
                      if (v232)
                      {
                        v233 = (unint64_t *)(v232 + 8);
                        do
                          v234 = __ldxr(v233);
                        while (__stxr(v234 + 1, v233));
                      }
                      v225 = *(_DWORD *)(v158 + 40);
                      *((_BYTE *)v224 + 44) = *(_BYTE *)(v158 + 44);
                      *((_DWORD *)v224 + 10) = v225;
                      v158 += 48;
                      v224 += 6;
                    }
                    while (v158 != v142);
                  }
                  v131 = (char *)v224;
                  goto LABEL_321;
                }
                if (v141 != v142)
                {
                  do
                  {
                    v181 = *((_QWORD *)v131 + 1);
                    if (v181)
                    {
                      v182 = (unsigned int *)(v181 + 128);
                      do
                        v183 = __ldaxr(v182);
                      while (__stlxr(v183 - 1, v182));
                    }
                    v184 = *(_QWORD *)(v141 + 8);
                    v185 = *(_QWORD *)(v141 + 16);
                    if (v185)
                    {
                      v186 = (unint64_t *)(v185 + 8);
                      do
                        v187 = __ldxr(v186);
                      while (__stxr(v187 + 1, v186));
                    }
                    v188 = (std::__shared_weak_count *)*((_QWORD *)v131 + 2);
                    *((_QWORD *)v131 + 1) = v184;
                    *((_QWORD *)v131 + 2) = v185;
                    if (v188)
                    {
                      v189 = (unint64_t *)&v188->__shared_owners_;
                      do
                        v190 = __ldaxr(v189);
                      while (__stlxr(v190 - 1, v189));
                      if (!v190)
                      {
                        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                        std::__shared_weak_count::__release_weak(v188);
                        v114 = v279;
                      }
                      v184 = *((_QWORD *)v131 + 1);
                    }
                    if (v184)
                    {
                      v191 = (unsigned int *)(v184 + 128);
                      do
                        v192 = __ldaxr(v191);
                      while (__stlxr(v192 + 1, v191));
                    }
                    v194 = *(_QWORD *)(v141 + 24);
                    v193 = *(_QWORD *)(v141 + 32);
                    if (v193)
                    {
                      v195 = (unint64_t *)(v193 + 8);
                      do
                        v196 = __ldxr(v195);
                      while (__stxr(v196 + 1, v195));
                    }
                    v197 = (std::__shared_weak_count *)*((_QWORD *)v131 + 4);
                    *((_QWORD *)v131 + 3) = v194;
                    *((_QWORD *)v131 + 4) = v193;
                    if (v197)
                    {
                      v198 = (unint64_t *)&v197->__shared_owners_;
                      do
                        v199 = __ldaxr(v198);
                      while (__stlxr(v199 - 1, v198));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                        std::__shared_weak_count::__release_weak(v197);
                        v114 = v279;
                      }
                    }
                    v180 = *(_DWORD *)(v141 + 40);
                    v131[44] = *(_BYTE *)(v141 + 44);
                    *((_DWORD *)v131 + 10) = v180;
                    v141 += 48;
                    v131 += 48;
                  }
                  while (v141 != v142);
                  v134 = (char *)*v276;
                }
                for (j = v277; v134 != v131; v134 -= 48)
                {
                  v215 = (std::__shared_weak_count *)*((_QWORD *)v134 - 2);
                  if (v215)
                  {
                    v216 = (unint64_t *)&v215->__shared_owners_;
                    do
                      v217 = __ldaxr(v216);
                    while (__stlxr(v217 - 1, v216));
                    if (!v217)
                    {
                      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                      std::__shared_weak_count::__release_weak(v215);
                      v114 = v279;
                    }
                  }
                  *((_QWORD *)v134 - 6) = &off_1E42C2D08;
                  v218 = *((_QWORD *)v134 - 5);
                  if (v218)
                  {
                    v219 = (unsigned int *)(v218 + 128);
                    do
                      v220 = __ldaxr(v219);
                    while (__stlxr(v220 - 1, v219));
                  }
                  v221 = (std::__shared_weak_count *)*((_QWORD *)v134 - 4);
                  if (v221)
                  {
                    v222 = (unint64_t *)&v221->__shared_owners_;
                    do
                      v223 = __ldaxr(v222);
                    while (__stlxr(v223 - 1, v222));
                    if (!v223)
                    {
                      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                      std::__shared_weak_count::__release_weak(v221);
                      v114 = v279;
                    }
                  }
                }
                v159 = (void **)(v132 + 8);
              }
              else
              {
                if (v131)
                {
                  v148 = v131;
                  if (v131 != v134)
                  {
                    v271 = v146;
                    do
                    {
                      v149 = (std::__shared_weak_count *)*((_QWORD *)v134 - 2);
                      if (v149)
                      {
                        v150 = (unint64_t *)&v149->__shared_owners_;
                        do
                          v151 = __ldaxr(v150);
                        while (__stlxr(v151 - 1, v150));
                        if (!v151)
                        {
                          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                          std::__shared_weak_count::__release_weak(v149);
                        }
                      }
                      *((_QWORD *)v134 - 6) = &off_1E42C2D08;
                      v152 = *((_QWORD *)v134 - 5);
                      if (v152)
                      {
                        v153 = (unsigned int *)(v152 + 128);
                        do
                          v154 = __ldaxr(v153);
                        while (__stlxr(v154 - 1, v153));
                      }
                      v155 = (std::__shared_weak_count *)*((_QWORD *)v134 - 4);
                      if (v155)
                      {
                        v156 = (unint64_t *)&v155->__shared_owners_;
                        do
                          v157 = __ldaxr(v156);
                        while (__stlxr(v157 - 1, v156));
                        if (!v157)
                        {
                          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                          std::__shared_weak_count::__release_weak(v155);
                        }
                      }
                      v134 -= 48;
                    }
                    while (v134 != v131);
                    v148 = *(void **)v132;
                    v146 = v271;
                  }
                  *v276 = v131;
                  operator delete(v148);
                  v145 = 0;
                  *(_QWORD *)v132 = 0;
                  *(_QWORD *)(v132 + 8) = 0;
                  *(_QWORD *)(v132 + 16) = 0;
                  v143 = 0xAAAAAAAAAAAAAAABLL * ((v142 - v141) >> 4);
                }
                if (v143 > 0x555555555555555)
                  goto LABEL_369;
                v200 = 0xAAAAAAAAAAAAAAABLL * (v145 >> 4);
                v201 = 2 * v200;
                if (2 * v200 <= v143)
                  v201 = v143;
                v202 = v200 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v201;
                if (v202 > 0x555555555555555)
                  goto LABEL_369;
                v203 = v146;
                v204 = 48 * v202;
                v131 = (char *)operator new(48 * v202);
                *(_QWORD *)v132 = v131;
                v159 = (void **)(v132 + 8);
                *v276 = v131;
                *v203 = &v131[v204];
                if (v141 == v142)
                {
                  v114 = v279;
                }
                else
                {
                  v114 = v279;
                  do
                  {
                    v206 = *(_QWORD *)(v141 + 8);
                    v207 = *(_QWORD *)(v141 + 16);
                    *(_QWORD *)v131 = &off_1E42C2D08;
                    *((_QWORD *)v131 + 1) = v206;
                    *((_QWORD *)v131 + 2) = v207;
                    if (v207)
                    {
                      v208 = (unint64_t *)(v207 + 8);
                      do
                        v209 = __ldxr(v208);
                      while (__stxr(v209 + 1, v208));
                      v206 = *((_QWORD *)v131 + 1);
                    }
                    if (v206)
                    {
                      v210 = (unsigned int *)(v206 + 128);
                      do
                        v211 = __ldaxr(v210);
                      while (__stlxr(v211 + 1, v210));
                    }
                    v212 = *(_QWORD *)(v141 + 32);
                    *((_QWORD *)v131 + 3) = *(_QWORD *)(v141 + 24);
                    *((_QWORD *)v131 + 4) = v212;
                    if (v212)
                    {
                      v213 = (unint64_t *)(v212 + 8);
                      do
                        v214 = __ldxr(v213);
                      while (__stxr(v214 + 1, v213));
                    }
                    v205 = *(_DWORD *)(v141 + 40);
                    v131[44] = *(_BYTE *)(v141 + 44);
                    *((_DWORD *)v131 + 10) = v205;
                    v141 += 48;
                    v131 += 48;
                  }
                  while (v141 != v142);
                }
LABEL_321:
                j = v277;
              }
              *v159 = v131;
              v139 = v274;
            }
            *(_QWORD *)(v125 + 48 * v126 + 40) = *(_QWORD *)(v125 + 48 * v139 + 40);
            v235 = *(_QWORD *)(j + 176);
            v236 = *(_QWORD *)(v235 - 32);
            v127 = v282;
            if (v236)
            {
              v237 = *(_QWORD *)(v235 - 24);
              v238 = *(void **)(v235 - 32);
              if (v237 != v236)
              {
                do
                {
                  v239 = *(std::__shared_weak_count **)(v237 - 16);
                  if (v239)
                  {
                    v240 = (unint64_t *)&v239->__shared_owners_;
                    do
                      v241 = __ldaxr(v240);
                    while (__stlxr(v241 - 1, v240));
                    if (!v241)
                    {
                      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                      std::__shared_weak_count::__release_weak(v239);
                    }
                  }
                  *(_QWORD *)(v237 - 48) = &off_1E42C2D08;
                  v242 = *(_QWORD *)(v237 - 40);
                  if (v242)
                  {
                    v243 = (unsigned int *)(v242 + 128);
                    do
                      v244 = __ldaxr(v243);
                    while (__stlxr(v244 - 1, v243));
                  }
                  v245 = *(std::__shared_weak_count **)(v237 - 32);
                  if (v245)
                  {
                    v246 = (unint64_t *)&v245->__shared_owners_;
                    do
                      v247 = __ldaxr(v246);
                    while (__stlxr(v247 - 1, v246));
                    if (!v247)
                    {
                      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                      std::__shared_weak_count::__release_weak(v245);
                    }
                  }
                  v237 -= 48;
                }
                while (v237 != v236);
                v238 = *(void **)(v235 - 32);
              }
              *(_QWORD *)(v235 - 24) = v236;
              operator delete(v238);
              v114 = v279;
            }
            v124 = v235 - 48;
            *(_QWORD *)(j + 176) = v235 - 48;
            v125 = *(_QWORD *)(j + 168);
            goto LABEL_186;
          }
          while (!*((_QWORD *)v135 + 3))
          {
            v135 += 48;
            if (v135 == v134)
              goto LABEL_191;
          }
        }
        v127 = v282 + 1;
LABEL_186:
        v126 = v127;
        v128 = 0xAAAAAAAAAAAAAAABLL * ((v124 - v125) >> 4);
      }
      while (v128 > v127);
    }
    v87 = v273;
    if (v114)
      operator delete(v114);
  }
  v248 = *(altitude::QuickSurfaceManager **)(v87 + 704);
  if (*((_BYTE *)v248 + 64))
    altitude::QuickSurfaceManager::update(v248, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v87 + 856) + 136) + 88));
  v249 = *(_QWORD *)(v87 + 464);
  if (*(_BYTE *)(v87 + 272) || *(_BYTE *)(v249 + 613))
  {
    v250 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v87 + 528) + 24))(*(_QWORD *)(v87 + 528), 0, 0xFFFFFFFFLL);
    v252 = v250;
    v254 = (uint64_t **)(v249 + 96);
    v253 = *(char **)(v249 + 96);
    if (v253)
    {
      while (1)
      {
        while (1)
        {
          v255 = v253;
          v256 = *((_QWORD *)v253 + 4);
          if (v256 <= v250)
            break;
          v253 = *(char **)v255;
          v254 = (uint64_t **)v255;
          if (!*(_QWORD *)v255)
            goto LABEL_356;
        }
        if (v256 >= v250)
          break;
        v253 = (char *)*((_QWORD *)v255 + 1);
        if (!v253)
        {
          v254 = (uint64_t **)(v255 + 8);
          goto LABEL_356;
        }
      }
    }
    else
    {
      v255 = (char *)(v249 + 96);
LABEL_356:
      v257 = v255;
      v255 = (char *)operator new(0x60uLL);
      *((_QWORD *)v255 + 4) = v252;
      *(_OWORD *)(v255 + 40) = 0u;
      *(_OWORD *)(v255 + 56) = 0u;
      *((_QWORD *)v255 + 9) = 0;
      *((_OWORD *)v255 + 5) = xmmword_19FFB37D0;
      *(_QWORD *)v255 = 0;
      *((_QWORD *)v255 + 1) = 0;
      *((_QWORD *)v255 + 2) = v257;
      *v254 = (uint64_t *)v255;
      v258 = **(_QWORD **)(v249 + 88);
      v259 = (uint64_t *)v255;
      if (v258)
      {
        *(_QWORD *)(v249 + 88) = v258;
        v259 = *v254;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v249 + 96), v259);
      ++*(_QWORD *)(v249 + 104);
    }
    v260 = *((_DWORD *)v255 + 11);
    if (v260)
    {
      LODWORD(v251) = *((_DWORD *)v255 + 15);
      v261 = (double)v251 / (double)v260;
      if (*(_BYTE *)(v87 + 272) && v261 >= 1.0)
      {
        altitude::GlobeView::setCoarseLoading((altitude::GlobeView *)v87);
        v262 = *(_QWORD *)(v87 + 464);
LABEL_365:
        *(_BYTE *)(v262 + 613) = 0;
        goto LABEL_366;
      }
      v262 = *(_QWORD *)(v87 + 464);
      if (*(_BYTE *)(v262 + 613) && v261 >= 0.9)
        goto LABEL_365;
    }
  }
LABEL_366:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v272 + 128) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v272 + 128) + 16));
  v263 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v272 + 136) + 72) + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263);
  v264 = *(_QWORD *)(v272 + 168);
  v265 = *(_QWORD *)(v264 + 72);
  if (v265)
  {
    v266 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v265 + 24))(v265, *(_QWORD *)(v272 + 168), 0xFFFFFFFFLL);
    v267 = *(_QWORD *)(v264 + 80);
    karo::graphics::View::copyView(v267, v266);
    *(_BYTE *)(v267 + 1291) = *(_BYTE *)(v266 + 1291);
    *(_DWORD *)(v267 + 1320) = *(_DWORD *)(v266 + 1320);
    *(_QWORD *)(v267 + 1328) = *(_QWORD *)(v266 + 1328);
    *(_QWORD *)(v267 + 1336) = *(_QWORD *)(v266 + 1336);
    *(_DWORD *)(v267 + 1344) = *(_DWORD *)(v266 + 1344);
    v268 = *(_OWORD *)(v266 + 1352);
    v269 = *(_OWORD *)(v266 + 1368);
    *(_QWORD *)(v267 + 1384) = *(_QWORD *)(v266 + 1384);
    *(_OWORD *)(v267 + 1352) = v268;
    *(_OWORD *)(v267 + 1368) = v269;
    *(_DWORD *)(v267 + 1392) = *(_DWORD *)(v266 + 1392);
    *(_QWORD *)(v267 + 1400) = *(_QWORD *)(v266 + 1400);
    *(_QWORD *)(v267 + 1408) = *(_QWORD *)(v266 + 1408);
    *(_QWORD *)(v267 + 1416) = *(_QWORD *)(v266 + 1416);
    *(_QWORD *)(v267 + 1424) = *(_QWORD *)(v266 + 1424);
    *(_QWORD *)(v267 + 1432) = *(_QWORD *)(v266 + 1432);
    *(_QWORD *)(v267 + 1440) = *(_QWORD *)(v266 + 1440);
    *(_QWORD *)(v267 + 1448) = *(_QWORD *)(v266 + 1448);
    *(_QWORD *)(v267 + 1456) = *(_QWORD *)(v266 + 1456);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v272 + 224));
}

void geo::TaskQueue::barrierAsync(char **a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  unint64_t *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  std::__shared_weak_count *v23;
  _QWORD block[4];
  NSObject *v25;
  char *v26;
  std::__shared_weak_count *v27;

  v6 = operator new(0x40uLL);
  v6[1] = 0;
  v7 = v6 + 1;
  v6[2] = 0;
  *v6 = &off_1E42DE308;
  v8 = (char *)(v6 + 3);
  v9 = a3[3];
  if (!v9)
    goto LABEL_4;
  if ((_QWORD *)v9 != a3)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_4:
    v6[6] = v9;
    goto LABEL_6;
  }
  v6[6] = v8;
  (*(void (**)(_QWORD *, char *))(*a3 + 24))(a3, v8);
LABEL_6:
  *((_WORD *)v6 + 28) = 0;
  *a1 = v8;
  a1[1] = (char *)v6;
  v10 = *(NSObject **)(a2 + 16);
  if (*(_BYTE *)(a2 + 56))
  {
    v11 = v10;
    v12 = *(NSObject **)(a2 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN3geo9TaskQueue12barrierAsyncENSt3__18functionIFvvEEE_block_invoke;
    block[3] = &unk_1E42E9928;
    v13 = v11;
    v25 = v13;
    v26 = (char *)(v6 + 3);
    v27 = (std::__shared_weak_count *)v6;
    do
      v14 = __ldxr(v7);
    while (__stxr(v14 + 1, v7));
    dispatch_async(v12, block);
    v15 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

  }
  else
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3321888768;
    v22[2] = ___ZN3geo9TaskQueue12barrierAsyncENSt3__18functionIFvvEEE_block_invoke_13;
    v22[3] = &__block_descriptor_48_ea8_32c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE_e5_v8__0l;
    v22[4] = v6 + 3;
    v23 = (std::__shared_weak_count *)v6;
    do
      v18 = __ldxr(v7);
    while (__stxr(v18 + 1, v7));
    dispatch_barrier_async(v10, v22);
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_19F8224AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ___ZN3geo9TaskQueue12barrierAsyncENSt3__18functionIFvvEEE_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN3geo9TaskQueue12barrierAsyncENSt3__18functionIFvvEEE_block_invoke_2;
  v10[3] = &__block_descriptor_48_ea8_32c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE_e5_v8__0l;
  v2 = a1[4];
  v4 = a1[5];
  v3 = (std::__shared_weak_count *)a1[6];
  v10[4] = v4;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  dispatch_barrier_async(v2, v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t ___ZN3geo9TaskQueue12barrierAsyncENSt3__18functionIFvvEEE_block_invoke_13(uint64_t result)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 32) + 32));
  if ((v1 & 1) == 0)
  {
    v2 = result;
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
    if (v3)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
      atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v2 + 32) + 33));
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return __copy_helper_block_ea8_32c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(v4, v5);
    }
  }
  return result;
}

uint64_t __copy_helper_block_ea8_32c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __copy_helper_block_ea8_40c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ___ZN3geo9TaskQueue12barrierAsyncENSt3__18functionIFvvEEE_block_invoke_2(uint64_t result)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 32) + 32));
  if ((v1 & 1) == 0)
  {
    v2 = result;
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
    if (!v3)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x19F822720);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v2 + 32) + 33));
  }
  return result;
}

void std::__function::__func<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D5650;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D5650;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderer::update(md::LayoutContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v8;
  int v9;
  double v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  karo::graphics::View *v20;
  double *v21;
  long double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  long double v37;
  long double v38;
  double v39;
  double v40;
  long double v41;
  long double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  float64x2_t *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  _QWORD *v97;
  unint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float32x4_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *i;
  uint64_t v110;
  _QWORD *v111;
  int8x8_t v112;
  uint8x8_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 136);
  md::LayoutContext::frameState(*(md::LayoutContext **)(a1 + 16));
  v5 = *(double *)(v4 + 88);
  v6 = *(double *)(v3 + 168);
  if (v5 - v6 <= 0.0 || v6 <= 0.0)
    v8 = 0.0;
  else
    v8 = v5 - v6;
  *(double *)(v3 + 168) = v5;
  *(double *)(v3 + 176) = v8;
  v9 = *(_DWORD *)(v3 + 88) + 1;
  v10 = *(double *)(v3 + 104) + v8;
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(v3 + 104);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(v3 + 88);
  *(_DWORD *)(v3 + 88) = v9;
  *(double *)(v3 + 96) = v8;
  *(double *)(v3 + 104) = v10;
  v11 = *(_BYTE **)(v2 + 144);
  v11[8] = 1;
  v11[9] = v11[10];
  v11[48] = -1;
  altitude::GlobeView::updateCameraFrame(*(altitude::GlobeView **)(v2 + 128));
  altitude::GlobeView::update(*(altitude::GlobeView **)(v2 + 128));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 128) + 688) + 64))(*(_QWORD *)(*(_QWORD *)(v2 + 128) + 688));
  v12 = *(_QWORD *)(v2 + 128);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(_OWORD *)(v13 + 24);
  v15 = *(_OWORD *)(v13 + 40);
  v16 = *(_OWORD *)(v13 + 8);
  *(_QWORD *)(v12 + 352) = *(_QWORD *)(v13 + 56);
  *(_OWORD *)(v12 + 320) = v14;
  *(_OWORD *)(v12 + 336) = v15;
  *(_OWORD *)(v12 + 304) = v16;
  *(_DWORD *)(v12 + 164) = *(_DWORD *)(*(_QWORD *)(v12 + 688) + 196);
  if (**(_BYTE **)(*(_QWORD *)(a1 + 16) + 72))
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 160) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 160) + 64), 0, 0xFFFFFFFFLL);
    v17 = *(_QWORD **)(v2 + 128);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v17[61] + 64) + 24))(*(_QWORD *)(v17[61] + 64), 0, 0xFFFFFFFFLL);
    if (v19)
    {
      v20 = (karo::graphics::View *)v19;
      v21 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 + 40) + 24))(v19 + 40);
      v22 = v21[2];
      v23 = sqrt(*v21 * *v21 + v21[1] * v21[1]);
      v24 = atan2(v22, v23 * 0.996647189);
      v25 = __sincos_stret(v24);
      v26 = atan2(v22 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v23 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
      v27 = __sincos_stret(v26);
      v28 = 1.0;
      v29 = v23 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
      v30 = fmaxf(v29, 1.0);
      v31 = sqrt((float)(v30 * v30) + v30 * 12742017.5);
      v32 = v31 + 10000.0;
      (*(void (**)(karo::graphics::View *, uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, v18 + 16, 0);
      v33 = (double *)v17[9];
      v35 = v33[46];
      v34 = v33[47];
      if (v34 >= v35)
      {
        v39 = v33[57];
        v36 = v34 * v35;
      }
      else
      {
        v36 = v34 * v35;
        if (v34 * v35 > 0.0)
          v28 = v34 / v35;
        v37 = tan(v33[57] * 0.5);
        v38 = atan(v28 * v37);
        v39 = v38 + v38;
      }
      if (v36 <= 0.0)
        v40 = 1.0;
      else
        v40 = v35 / v34;
      v41 = tan(v39 * 0.5);
      *((double *)v20 + 125) = v39;
      *((double *)v20 + 124) = v40;
      *((double *)v20 + 118) = v32;
      *((_QWORD *)v20 + 119) = 0x3FF0000000000000;
      *((long double *)v20 + 122) = -(v41 * v40);
      *((long double *)v20 + 123) = v41 * v40;
      *((long double *)v20 + 121) = -v41;
      *((long double *)v20 + 120) = v41;
      *((_QWORD *)v20 + 126) = 0;
      *((_BYTE *)v20 + 1016) = 0;
      v42 = v40 * (v41 + v41);
      v43 = -v32 / (v32 + -1.0);
      *((long double *)v20 + 47) = 2.0 / v42;
      *((_OWORD *)v20 + 24) = 0u;
      *((_OWORD *)v20 + 25) = 0u;
      *((long double *)v20 + 52) = 1.0 / v41;
      *(_OWORD *)((char *)v20 + 424) = 0u;
      *(_OWORD *)((char *)v20 + 440) = 0u;
      *((double *)v20 + 57) = v43;
      *((_QWORD *)v20 + 59) = 0;
      *((_QWORD *)v20 + 60) = 0;
      *((_QWORD *)v20 + 58) = 0xBFF0000000000000;
      *((double *)v20 + 61) = v43;
      *((_QWORD *)v20 + 62) = 0;
      *((long double *)v20 + 145) = v42 * 0.5;
      *((_OWORD *)v20 + 73) = 0u;
      *((_OWORD *)v20 + 74) = 0u;
      *((long double *)v20 + 150) = v41;
      *(_OWORD *)((char *)v20 + 1208) = 0u;
      *(_OWORD *)((char *)v20 + 1224) = 0u;
      *((_QWORD *)v20 + 155) = 0;
      *((double *)v20 + 156) = (v32 + -1.0) / -v32;
      *((_QWORD *)v20 + 157) = 0;
      *((_QWORD *)v20 + 158) = 0;
      *((_QWORD *)v20 + 159) = 0xBFF0000000000000;
      *((_QWORD *)v20 + 160) = 0x3FF0000000000000;
      karo::graphics::View::projectionUpdate(v20, 0);
      v44 = v17[65];
      if (v44)
      {
        v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v44 + 24))(v44, 0, 0xFFFFFFFFLL);
        if (*(_DWORD *)(v45 + 1296) == 3)
        {
          v46 = v45;
          v47 = v17[98];
          karo::graphics::View::copyView(v45, v47);
          *(_BYTE *)(v46 + 1291) = *(_BYTE *)(v47 + 1291);
          *(_DWORD *)(v46 + 1320) = *(_DWORD *)(v47 + 1320);
          *(_QWORD *)(v46 + 1328) = *(_QWORD *)(v47 + 1328);
          *(_QWORD *)(v46 + 1336) = *(_QWORD *)(v47 + 1336);
          *(_DWORD *)(v46 + 1344) = *(_DWORD *)(v47 + 1344);
          v48 = *(_OWORD *)(v47 + 1352);
          v49 = *(_OWORD *)(v47 + 1368);
          *(_QWORD *)(v46 + 1384) = *(_QWORD *)(v47 + 1384);
          *(_OWORD *)(v46 + 1352) = v48;
          *(_OWORD *)(v46 + 1368) = v49;
          *(_DWORD *)(v46 + 1392) = *(_DWORD *)(v47 + 1392);
          *(_QWORD *)(v46 + 1400) = *(_QWORD *)(v47 + 1400);
          *(_QWORD *)(v46 + 1408) = *(_QWORD *)(v47 + 1408);
          *(_QWORD *)(v46 + 1416) = *(_QWORD *)(v47 + 1416);
          *(_QWORD *)(v46 + 1424) = *(_QWORD *)(v47 + 1424);
          *(_QWORD *)(v46 + 1432) = *(_QWORD *)(v47 + 1432);
          *(_QWORD *)(v46 + 1440) = *(_QWORD *)(v47 + 1440);
          *(_QWORD *)(v46 + 1448) = *(_QWORD *)(v47 + 1448);
          *(_QWORD *)(v46 + 1456) = *(_QWORD *)(v47 + 1456);
          *(float *)(v46 + 1316) = v32;
        }
      }
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 24))(*(_QWORD *)(v2 + 160));
  altitude::GlobeTileRenderManager::update(*(altitude::GlobeTileRenderManager **)(v2 + 168));
  v50 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(*(_QWORD *)(v50 + 736) + 8) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 128) + 768)
                                                                                                 + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 128) + 768), 0, 0xFFFFFFFFLL);
  v51 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(*(_QWORD *)(v51 + 736) + 16) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 160) + 64)
                                                                                                  + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 160) + 64), 0, 0xFFFFFFFFLL);
  v52 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 736) + 8) + 1024) = *(_QWORD *)(v52 + 736) + 32;
  *(_QWORD *)(*(_QWORD *)(v52 + 736) + 24) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 160) + 72)
                                                                                         + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 160) + 72), 0);
  result = altitude::Context::getDebugRenderUtil(*(altitude::Context **)(v2 + 136));
  v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 736) + 8);
  v55 = (float64x2_t *)(v54 + 376);
  v56 = *(double *)(v54 + 80);
  v57 = *(double *)(v54 + 88);
  v58 = *(double *)(v54 + 96);
  v59 = *(double *)(v54 + 64);
  v60 = *(double *)(v54 + 72);
  v62 = *(double *)(v54 + 48);
  v61 = *(double *)(v54 + 56);
  v63 = -(v59 * v56 - v61 * v57) - (v59 * v56 - v61 * v57);
  v64 = -(v62 * v57 - v59 * v60) - (v62 * v57 - v59 * v60);
  v65 = -(v61 * v60 - v62 * v56) - (v61 * v60 - v62 * v56);
  v66 = -(v61 - v63 * v57 + v64 * v58 + v65 * v60);
  v67 = -(v62 + v63 * v58 + v64 * v57 - v65 * v56);
  v68 = v59 + v63 * v56 + v65 * v58;
  v69 = v56 * -2.0;
  v70 = -(v56 * (v56 * -2.0));
  v71 = 1.0 - (v70 - v57 * (v57 * -2.0));
  v72 = -(v56 * (v60 * -2.0));
  v73 = v57 * -2.0 * v58;
  v74 = v72 - v73;
  v75 = -(v57 * (v60 * -2.0));
  v76 = v58 * v69;
  v77 = v58 * v69 - v57 * (v60 * -2.0);
  v78 = v73 + v72;
  v79 = v60 * -2.0 * v60 + 1.0;
  v80 = v79 - -(v57 * (v57 * -2.0));
  v81 = -(v57 * v69);
  v82 = v58 * (v60 * -2.0);
  v83 = v81 - v82;
  v84 = v75 - v76;
  v85 = v82 + v81;
  v86 = v79 - v70;
  v87.f64[0] = v71;
  v87.f64[1] = v78;
  v88.f64[0] = v74;
  v88.f64[1] = v80;
  v89.f64[0] = v77;
  v89.f64[1] = v83;
  v90.f64[0] = v67;
  v90.f64[1] = v66;
  v91 = -(v68 - v64 * v60);
  __asm { FMOV            V7.2D, #1.0 }
  _Q7.f64[0] = v91;
  *(_QWORD *)(result + 64) = *(_QWORD *)(v54 + 376);
  *(_QWORD *)(result + 72) = *(_QWORD *)(v54 + 384);
  *(_QWORD *)(result + 80) = *(_QWORD *)(v54 + 392);
  *(_QWORD *)(result + 88) = *(_QWORD *)(v54 + 400);
  *(_QWORD *)(result + 96) = *(_QWORD *)(v54 + 408);
  *(_QWORD *)(result + 104) = *(_QWORD *)(v54 + 416);
  *(_QWORD *)(result + 112) = *(_QWORD *)(v54 + 424);
  *(_QWORD *)(result + 120) = *(_QWORD *)(v54 + 432);
  *(_QWORD *)(result + 128) = *(_QWORD *)(v54 + 440);
  *(_QWORD *)(result + 136) = *(_QWORD *)(v54 + 448);
  *(_QWORD *)(result + 144) = *(_QWORD *)(v54 + 456);
  *(_QWORD *)(result + 152) = *(_QWORD *)(v54 + 464);
  *(_QWORD *)(result + 160) = *(_QWORD *)(v54 + 472);
  *(_QWORD *)(result + 168) = *(_QWORD *)(v54 + 480);
  *(_QWORD *)(result + 176) = *(_QWORD *)(v54 + 488);
  *(_QWORD *)(result + 184) = *(_QWORD *)(v54 + 496);
  *(double *)(result + 192) = v71;
  *(double *)(result + 200) = v78;
  *(double *)(result + 208) = v84;
  *(_QWORD *)(result + 216) = 0;
  *(double *)(result + 224) = v74;
  *(double *)(result + 232) = v80;
  *(double *)(result + 240) = v85;
  *(_QWORD *)(result + 248) = 0;
  *(double *)(result + 256) = v77;
  *(double *)(result + 264) = v83;
  *(double *)(result + 272) = v86;
  *(_QWORD *)(result + 280) = 0;
  *(double *)(result + 288) = v67;
  *(double *)(result + 296) = v66;
  *(double *)(result + 304) = v91;
  *(_QWORD *)(result + 312) = 0x3FF0000000000000;
  v97 = *(_QWORD **)(result + 48);
  v98 = v97[1];
  v99 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v55), v55[1]);
  v100 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v55[2]), v55[3]);
  v102 = v55[4];
  v101 = v55[5];
  v104 = v55[6];
  v103 = v55[7];
  v106 = v97[8];
  v105 = (float32x4_t *)v97[9];
  v105[4] = v99;
  v105[5] = v100;
  v105[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v102), v101);
  v105[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104), v103);
  *v105 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87), (float64x2_t)*(unint64_t *)&v84);
  v105[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v88), (float64x2_t)*(unint64_t *)&v85);
  v105[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v89), (float64x2_t)*(unint64_t *)&v86);
  v105[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v90), _Q7);
  if (v106 <= v98)
    v107 = v98;
  else
    v107 = v106;
  v97[7] = 0;
  v97[8] = v107;
  v108 = *(uint64_t **)(v2 + 40);
  for (i = *(uint64_t **)(v2 + 48); v108 != i; ++v108)
  {
    v110 = *v108;
    if (*v108)
    {
      if (*(_BYTE *)(v110 + 34) == 4)
      {
        v111 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
        v112 = (int8x8_t)v111[1];
        if (v112)
        {
          v113 = (uint8x8_t)vcnt_s8(v112);
          v113.i16[0] = vaddlv_u8(v113);
          if (v113.u32[0] > 1uLL)
          {
            v114 = 0x13043386C0978CC2;
            if (*(_QWORD *)&v112 <= 0x13043386C0978CC2uLL)
              v114 = 0x13043386C0978CC2uLL % *(_QWORD *)&v112;
          }
          else
          {
            v114 = (*(_QWORD *)&v112 - 1) & 0x13043386C0978CC2;
          }
          v115 = *(_QWORD **)(*v111 + 8 * v114);
          if (v115)
          {
            v116 = (_QWORD *)*v115;
            if (v116)
            {
              if (v113.u32[0] < 2uLL)
              {
                v117 = *(_QWORD *)&v112 - 1;
                while (1)
                {
                  v119 = v116[1];
                  if (v119 == 0x13043386C0978CC2)
                  {
                    if (v116[2] == 0x13043386C0978CC2)
                      goto LABEL_49;
                  }
                  else if ((v119 & v117) != v114)
                  {
                    goto LABEL_25;
                  }
                  v116 = (_QWORD *)*v116;
                  if (!v116)
                    goto LABEL_25;
                }
              }
              do
              {
                v118 = v116[1];
                if (v118 == 0x13043386C0978CC2)
                {
                  if (v116[2] == 0x13043386C0978CC2)
                  {
LABEL_49:
                    v120 = v116[5];
                    if (*(_QWORD *)(v120 + 8) == 0x13043386C0978CC2)
                    {
                      v121 = *(_QWORD *)(v120 + 32);
                      if (v121)
                      {
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v110 + 320) + 104))(*(_QWORD *)(v110 + 320), v121 + 104, 1);
                        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v110 + 320) + 104))(*(_QWORD *)(v110 + 320), v121, 0);
                        objc_msgSend(*(id *)(*(_QWORD *)(v110 + 320) + 24), "update");
                        result = objc_msgSend(*(id *)(*(_QWORD *)(v110 + 320) + 24), "setRouteLineSplitAnnotation:", *(_QWORD *)(v121 + 184));
                      }
                    }
                    break;
                  }
                }
                else
                {
                  if (v118 >= *(_QWORD *)&v112)
                    v118 %= *(_QWORD *)&v112;
                  if (v118 != v114)
                    break;
                }
                v116 = (_QWORD *)*v116;
              }
              while (v116);
            }
          }
        }
      }
    }
LABEL_25:
    ;
  }
  return result;
}

void sub_19F82341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v13 + 25));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v13 + 23));
  md::Renderer::~Renderer((md::Renderer *)v13);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::realistic::RealisticRenderer::~RealisticRenderer()::$_0,std::allocator<md::realistic::RealisticRenderer::~RealisticRenderer()::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::RealisticRenderer::~RealisticRenderer()::$_0,std::allocator<md::realistic::RealisticRenderer::~RealisticRenderer()::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D5698;
  return result;
}

void std::__function::__func<md::realistic::RealisticRenderer::~RealisticRenderer()::$_0,std::allocator<md::realistic::RealisticRenderer::~RealisticRenderer()::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D5698;
}

uint64_t md::realistic::RealisticRenderer::RealisticRenderer(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  dispatch_semaphore_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  pthread_mutex_t *v37;
  pthread_cond_t *v38;
  uint64_t v39;
  pthread_mutex_t *v40;
  pthread_cond_t *v41;
  uint64_t v42;
  pthread_mutex_t *v43;
  pthread_cond_t *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  altitude::GlobeView *v57;
  uint64_t v58;
  altitude::GlobeView *v59;
  _QWORD *v60;
  id v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int8x16_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  size_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  unsigned __int8 v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  karo::RequestPruner *v149;
  uint64_t v150;
  char *v151;
  karo::AsyncRequestManager *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  altitude::FlyoverShared *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  _QWORD *v363;
  unint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  char *v376;
  unsigned __int8 v377;
  unint64_t *v378;
  unint64_t v379;
  unint64_t v380;
  __int128 v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  char *v394;
  unsigned __int8 v395;
  unint64_t *v396;
  unint64_t v397;
  unint64_t v398;
  __int128 v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  char *v412;
  unsigned __int8 v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  __int128 v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t *v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _OWORD *v454;
  uint64_t v455;
  __int32 v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  char *v463;
  int32x4_t v464;
  int32x4_t v465;
  int8x16_t v466;
  char v467;
  unsigned __int8 v468;
  unint64_t *v469;
  unint64_t v470;
  unint64_t v471;
  __int128 v472;
  unint64_t *v473;
  unint64_t v474;
  int8x16_t v475;
  int16x8_t v476;
  int32x4_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int16x8_t v480;
  int32x4_t v481;
  int8x16_t v482;
  int32x4_t v483;
  int8x16_t v484;
  int32x4_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int16x8_t v495;
  int32x4_t v496;
  int8x16_t v497;
  int16x8_t v498;
  int32x4_t v499;
  int8x16_t v500;
  int32x4_t v501;
  int8x16_t v502;
  int32x4_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int16x8_t v518;
  int32x4_t v519;
  int8x16_t v520;
  int8x16_t v521;
  int16x8_t v522;
  int32x4_t v523;
  int8x16_t v524;
  int16x8_t v525;
  int32x4_t v526;
  int8x16_t v527;
  int16x8_t v528;
  int32x4_t v529;
  int8x16_t v530;
  int32x4_t v531;
  int8x16_t v532;
  int32x4_t v533;
  int8x16_t v534;
  int32x4_t v535;
  int8x16_t v536;
  int32x4_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  unint64_t *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  char *v556;
  char v557;
  unsigned __int8 v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t v561;
  __int128 v562;
  unint64_t *v563;
  unint64_t v564;
  int8x16_t v565;
  int16x8_t v566;
  int32x4_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int16x8_t v570;
  int32x4_t v571;
  int8x16_t v572;
  int32x4_t v573;
  int8x16_t v574;
  int32x4_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  int8x16_t v584;
  int16x8_t v585;
  int32x4_t v586;
  int8x16_t v587;
  int16x8_t v588;
  int32x4_t v589;
  int8x16_t v590;
  int32x4_t v591;
  int8x16_t v592;
  int32x4_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int16x8_t v608;
  int32x4_t v609;
  int16x8_t v610;
  int32x4_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int8x16_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int16x8_t v617;
  int32x4_t v618;
  int16x8_t v619;
  int32x4_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int32x4_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int32x4_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int8x16_t v632;
  int8x16_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  char *v647;
  char v648;
  unsigned __int8 v649;
  unint64_t *v650;
  unint64_t v651;
  unint64_t v652;
  __int128 v653;
  unint64_t *v654;
  unint64_t v655;
  int8x16_t v656;
  int16x8_t v657;
  int32x4_t v658;
  int8x16_t v659;
  int8x16_t v660;
  int16x8_t v661;
  int32x4_t v662;
  int8x16_t v663;
  int32x4_t v664;
  int8x16_t v665;
  int32x4_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int16x8_t v676;
  int32x4_t v677;
  int8x16_t v678;
  int16x8_t v679;
  int32x4_t v680;
  int8x16_t v681;
  int32x4_t v682;
  int8x16_t v683;
  int32x4_t v684;
  int8x16_t v685;
  int8x16_t v686;
  int8x16_t v687;
  int8x16_t v688;
  int8x16_t v689;
  int8x16_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int8x16_t v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int16x8_t v699;
  int32x4_t v700;
  int16x8_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int16x8_t v708;
  int32x4_t v709;
  int16x8_t v710;
  int32x4_t v711;
  int8x16_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int32x4_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int32x4_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  int8x16_t v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  unint64_t *v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  char *v738;
  char v739;
  unsigned __int8 v740;
  unint64_t *v741;
  unint64_t v742;
  unint64_t v743;
  __int128 v744;
  unint64_t *v745;
  unint64_t v746;
  int8x16_t v747;
  int16x8_t v748;
  int32x4_t v749;
  int8x16_t v750;
  int8x16_t v751;
  int16x8_t v752;
  int32x4_t v753;
  int8x16_t v754;
  int32x4_t v755;
  int8x16_t v756;
  int32x4_t v757;
  int8x16_t v758;
  int8x16_t v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  int16x8_t v767;
  int32x4_t v768;
  int8x16_t v769;
  int16x8_t v770;
  int32x4_t v771;
  int8x16_t v772;
  int32x4_t v773;
  int8x16_t v774;
  int32x4_t v775;
  int8x16_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int16x8_t v790;
  int32x4_t v791;
  int16x8_t v792;
  int32x4_t v793;
  int32x4_t v794;
  int32x4_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int8x16_t v798;
  int16x8_t v799;
  int32x4_t v800;
  int16x8_t v801;
  int32x4_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int32x4_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int32x4_t v810;
  int8x16_t v811;
  int8x16_t v812;
  int8x16_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  int8x16_t v817;
  int8x16_t v818;
  std::__shared_weak_count *v819;
  unint64_t *v820;
  unint64_t v821;
  unint64_t *v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  char *v829;
  char v830;
  unsigned __int8 v831;
  unint64_t *v832;
  unint64_t v833;
  unint64_t v834;
  __int128 v835;
  unint64_t *v836;
  unint64_t v837;
  int8x16_t v838;
  int16x8_t v839;
  int32x4_t v840;
  int8x16_t v841;
  int8x16_t v842;
  int16x8_t v843;
  int32x4_t v844;
  int8x16_t v845;
  int32x4_t v846;
  int8x16_t v847;
  int32x4_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int8x16_t v853;
  int8x16_t v854;
  int16x8_t v855;
  int32x4_t v856;
  int8x16_t v857;
  int16x8_t v858;
  int32x4_t v859;
  int8x16_t v860;
  int32x4_t v861;
  int8x16_t v862;
  int32x4_t v863;
  int8x16_t v864;
  int8x16_t v865;
  int8x16_t v866;
  int8x16_t v867;
  int8x16_t v868;
  int8x16_t v869;
  int8x16_t v870;
  int8x16_t v871;
  int8x16_t v872;
  int8x16_t v873;
  int8x16_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int16x8_t v877;
  int32x4_t v878;
  int16x8_t v879;
  int32x4_t v880;
  int32x4_t v881;
  int32x4_t v882;
  int8x16_t v883;
  int8x16_t v884;
  int8x16_t v885;
  int8x16_t v886;
  int8x16_t v887;
  int8x16_t v888;
  int8x16_t v889;
  int8x16_t v890;
  int8x16_t v891;
  int16x8_t v892;
  int32x4_t v893;
  int16x8_t v894;
  int32x4_t v895;
  int32x4_t v896;
  int32x4_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int8x16_t v903;
  int8x16_t v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  unint64_t *v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t *v912;
  unint64_t v913;
  _QWORD *v914;
  uint64_t v915;
  std::__shared_weak_count *v916;
  unint64_t *v917;
  unint64_t v918;
  std::__shared_weak_count *v919;
  unint64_t *v920;
  unint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  _QWORD *v927;
  _QWORD *v928;
  std::__shared_weak_count *v929;
  unint64_t *v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t *v933;
  uint64_t v934;
  _QWORD *v935;
  uint64_t v936;
  uint64_t v937;
  karo::RequestPruner *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  _DWORD *v942;
  uint64_t v943;
  unsigned __int8 v944;
  uint64_t v945;
  _QWORD *v946;
  pthread_mutex_t *v947;
  uint64_t v948;
  uint64_t v949;
  void *v950;
  uint64_t v951;
  char *v952;
  uint64_t v953;
  md::realistic::RealisticRenderLayer *v954;
  pthread_mutexattr_t v955;
  std::__shared_weak_count *v956;
  unint64_t *v957;
  unint64_t v958;
  std::__shared_weak_count *v959;
  unint64_t *v960;
  unint64_t v961;
  uint64_t RibbonTexture;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  std::__shared_weak_count *v966;
  unint64_t *v967;
  unint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  char v975;
  int v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t *v979;
  unint64_t v980;
  _QWORD *v981;
  uint64_t v982;
  std::__shared_weak_count *v983;
  unint64_t *v984;
  unint64_t v985;
  std::__shared_weak_count *v986;
  unint64_t *v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t *v991;
  unint64_t v992;
  _QWORD *v993;
  uint64_t v994;
  std::__shared_weak_count *v995;
  unint64_t *v996;
  unint64_t v997;
  std::__shared_weak_count *v998;
  unint64_t *v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  std::__shared_weak_count *v1006;
  unint64_t *v1007;
  unint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  _QWORD *v1012;
  std::__shared_weak_count *v1013;
  unint64_t *v1014;
  unint64_t v1015;
  uint64_t v1016;
  uint64_t *v1017;
  karo::RequestPruner *v1018;
  uint64_t v1019;
  _QWORD *v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  void *v1025;
  pthread_mutex_t *v1026;
  uint64_t v1027;
  uint64_t v1028;
  void *v1029;
  pthread_mutex_t *v1030;
  uint64_t v1031;
  uint64_t v1032;
  void *v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  _OWORD *v1042;
  uint64_t v1043;
  _QWORD *v1044;
  _QWORD *v1045;
  std::__shared_weak_count *v1046;
  unint64_t *v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  _QWORD *v1052;
  std::__shared_weak_count *v1053;
  unint64_t *v1054;
  unint64_t v1055;
  int v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  int v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  unint64_t *v1066;
  unint64_t v1067;
  _QWORD *v1068;
  uint64_t v1069;
  std::__shared_weak_count *v1070;
  unint64_t *v1071;
  unint64_t v1072;
  std::__shared_weak_count *v1073;
  unint64_t *v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t *v1078;
  unint64_t v1079;
  _QWORD *v1080;
  uint64_t v1081;
  std::__shared_weak_count *v1082;
  unint64_t *v1083;
  unint64_t v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  unint64_t *v1090;
  unint64_t v1091;
  _QWORD *v1092;
  uint64_t v1093;
  std::__shared_weak_count *v1094;
  unint64_t *v1095;
  unint64_t v1096;
  std::__shared_weak_count *v1097;
  unint64_t *v1098;
  unint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t *v1102;
  unint64_t v1103;
  _QWORD *v1104;
  uint64_t v1105;
  std::__shared_weak_count *v1106;
  unint64_t *v1107;
  unint64_t v1108;
  std::__shared_weak_count *v1109;
  unint64_t *v1110;
  unint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unint64_t *v1114;
  unint64_t v1115;
  _QWORD *v1116;
  uint64_t v1117;
  std::__shared_weak_count *v1118;
  unint64_t *v1119;
  unint64_t v1120;
  std::__shared_weak_count *v1121;
  unint64_t *v1122;
  unint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t *v1126;
  unint64_t v1127;
  _QWORD *v1128;
  uint64_t v1129;
  std::__shared_weak_count *v1130;
  unint64_t *v1131;
  unint64_t v1132;
  unint64_t *v1133;
  uint64_t v1134;
  uint64_t v1135;
  unint64_t *v1136;
  unint64_t v1137;
  _QWORD *v1138;
  uint64_t v1139;
  std::__shared_weak_count *v1140;
  unint64_t *v1141;
  unint64_t v1142;
  std::__shared_weak_count *v1143;
  unint64_t *v1144;
  unint64_t v1145;
  uint64_t v1146;
  _QWORD *v1147;
  RouteRenderLayerObserverProxy *v1148;
  void *v1149;
  VKGlobeLineContainer *v1150;
  GlobeLineContainerDelegate *v1151;
  void *v1152;
  GlobeLineContainerDelegate *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t *v1160;
  uint64_t v1161;
  _QWORD *v1162;
  uint64_t v1163;
  uint64_t v1164;
  karo::RequestPruner *v1165;
  uint64_t v1166;
  char *v1167;
  uint64_t v1168;
  uint64_t v1169;
  char *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  _DWORD *v1175;
  uint64_t v1176;
  unsigned __int8 v1177;
  uint64_t v1178;
  char *v1179;
  uint64_t v1180;
  _QWORD *v1181;
  uint64_t v1182;
  uint64_t v1183;
  char *v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  id v1193;
  void *v1194;
  uint64_t v1195;
  _QWORD *v1196;
  uint64_t v1197;
  std::__shared_weak_count *v1198;
  unint64_t *v1199;
  unint64_t v1200;
  _QWORD *v1201;
  uint64_t v1202;
  std::__shared_weak_count *v1203;
  unint64_t *v1204;
  unint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  int v1212;
  uint64_t v1213;
  std::__shared_weak_count *v1214;
  unint64_t *v1215;
  unint64_t v1216;
  _QWORD *v1217;
  uint64_t v1218;
  void **v1219;
  char v1220;
  uint64_t v1221;
  std::__shared_weak_count *v1222;
  unint64_t *v1223;
  unint64_t v1224;
  uint64_t v1225;
  std::__shared_weak_count *v1226;
  unint64_t *v1227;
  unint64_t v1228;
  std::__shared_weak_count *v1229;
  unint64_t *v1230;
  unint64_t v1231;
  unint64_t *v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t *v1235;
  unint64_t v1236;
  std::__shared_weak_count *v1237;
  unint64_t *v1238;
  unint64_t v1239;
  id v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t i;
  char *v1244;
  id v1245;
  id v1246;
  int v1247;
  unint64_t v1248;
  char *v1249;
  char *v1250;
  uint64_t v1251;
  unint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  char *v1255;
  char *v1256;
  char *v1257;
  char *v1258;
  uint64_t v1259;
  void *v1260;
  uint64_t v1261;
  uint64_t *v1262;
  uint64_t v1263;
  uint64_t v1264;
  karo::RequestPruner *v1265;
  uint64_t v1266;
  char *v1267;
  uint64_t v1268;
  uint64_t v1269;
  std::__shared_weak_count *v1270;
  unint64_t *v1271;
  std::__shared_weak_count *v1272;
  unint64_t *v1273;
  __int128 v1274;
  _QWORD *v1275;
  _QWORD *v1276;
  char *v1277;
  unint64_t v1278;
  int shared_owners_high;
  int shared_owners;
  unint64_t v1281;
  unint64_t v1282;
  unint64_t v1283;
  std::__shared_weak_count *v1284;
  unint64_t *v1285;
  unint64_t v1286;
  unint64_t v1287;
  unint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  void *v1292;
  unsigned __int8 *v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  ggl::StarsShader *v1298;
  unsigned __int8 v1299;
  unsigned __int8 v1300;
  unsigned __int8 v1301;
  ggl::TileBaseSurfaceShader *v1302;
  unsigned __int8 v1303;
  unsigned __int8 v1304;
  unsigned __int8 v1305;
  ggl::EndOfWorldShader *v1306;
  unsigned __int8 v1307;
  unsigned __int8 v1308;
  unsigned __int8 v1309;
  ggl::SolidLineShader *v1310;
  unsigned __int8 v1311;
  unsigned __int8 v1312;
  unsigned __int8 v1313;
  ggl::FlyoverRoadFillTexturedShader *v1314;
  unsigned __int8 v1315;
  unsigned __int8 v1316;
  unsigned __int8 v1317;
  unsigned __int8 v1318;
  unsigned __int8 v1319;
  unsigned __int8 v1320;
  unsigned __int8 v1321;
  unsigned __int8 v1322;
  unsigned __int8 v1323;
  unsigned __int8 v1324;
  unsigned __int8 v1325;
  unsigned __int8 v1326;
  unsigned __int8 v1327;
  unsigned __int8 v1328;
  unsigned __int8 v1329;
  ggl::FlyoverBorderRibbonShader *v1330;
  unsigned __int8 v1331;
  unsigned __int8 v1332;
  unsigned __int8 v1333;
  unsigned __int8 v1334;
  unsigned __int8 v1335;
  unsigned __int8 v1336;
  unsigned __int8 v1337;
  unsigned __int8 v1338;
  unsigned __int8 v1339;
  unsigned __int8 v1340;
  unsigned __int8 v1341;
  unsigned __int8 v1342;
  unsigned __int8 v1343;
  unsigned __int8 v1344;
  unsigned __int8 v1345;
  unsigned __int8 v1346;
  unsigned __int8 v1347;
  unsigned __int8 v1348;
  unsigned __int8 v1349;
  unsigned __int8 v1350;
  unsigned __int8 v1351;
  unsigned __int8 v1352;
  unsigned __int8 v1353;
  unsigned __int8 v1354;
  unsigned __int8 v1355;
  unsigned __int8 v1356;
  unsigned __int8 v1357;
  unsigned __int8 v1358;
  unsigned __int8 v1359;
  unsigned __int8 v1360;
  unsigned __int8 v1361;
  unsigned __int8 v1362;
  unsigned __int8 v1363;
  int v1364;
  unsigned __int8 v1365;
  int v1366;
  unsigned __int8 v1367;
  unsigned __int8 v1368;
  id v1369;
  int8x16_t v1370;
  int8x16_t v1371;
  char v1372;
  int v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  void **v1377;
  id obj;
  __int16 v1379;
  char v1380;
  __int16 v1381;
  char v1382;
  uint64_t v1383;
  std::__shared_weak_count *v1384;
  pthread_mutexattr_t v1385;
  __int128 v1386;
  void *__p[6];
  __int128 v1388;
  pthread_mutexattr_t v1389;
  __int128 v1390;
  _BYTE v1391[44];
  char v1392;
  uint64_t v1393;

  v1393 = *MEMORY[0x1E0C80C00];
  v1369 = a3;
  md::Renderer::Renderer(a1, a2, v1369, a4, (uint64_t)a5);
  *(_QWORD *)a1 = &off_1E42B0018;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  v11 = dispatch_semaphore_create(1);
  v12 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v11;

  v13 = a5[3];
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = a6;
  v14 = *(_QWORD *)(v13 + 24);
  v16 = *(_QWORD *)(v14 + 32);
  v15 = *(_QWORD *)(v14 + 40);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v16;
  *(_QWORD *)(a1 + 208) = v15;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v1375 = a1;
  v22 = operator new();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_QWORD *)(v22 + 48) = 0;
  *(_OWORD *)v22 = 0u;
  *(_DWORD *)(v22 + 36) = 1065353216;
  *(_BYTE *)(v22 + 40) = -1;
  *(_DWORD *)(v22 + 44) = 128;
  *(_BYTE *)(v22 + 10) = -1;
  *(_WORD *)(v22 + 8) = -255;
  *(_QWORD *)v22 = &off_1E42C43E0;
  *(_BYTE *)(v22 + 49) = 0;
  *(_QWORD *)(a1 + 144) = v22;
  v23 = operator new();
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_QWORD *)(v23 + 32) = 0x3FF0000000000000;
  *(_WORD *)(v23 + 40) = 257;
  *(_BYTE *)(v23 + 42) = 1;
  *(_DWORD *)(v23 + 44) = 2;
  *(_WORD *)(v23 + 48) = 256;
  *(_DWORD *)(v23 + 60) = 1092616192;
  *(_QWORD *)(v23 + 52) = 0x3F4000003DCCCCCDLL;
  *(_DWORD *)(v23 + 64) = 0x1000000;
  *(_WORD *)(v23 + 68) = 257;
  *(_QWORD *)(v23 + 80) = 0;
  *(_DWORD *)(v23 + 88) = 0;
  *(_QWORD *)(v23 + 96) = 0;
  *(_QWORD *)(v23 + 104) = 0;
  *(_DWORD *)(v23 + 112) = 0;
  *(_QWORD *)(v23 + 120) = 0;
  *(_QWORD *)(v23 + 128) = 0;
  *(_OWORD *)(v23 + 160) = 0u;
  *(_OWORD *)(v23 + 176) = 0u;
  *(_QWORD *)(a1 + 136) = v23;
  *(_QWORD *)(v23 + 8) = a1;
  v24 = objc_msgSend(*(id *)(a1 + 104), "renderer");
  v25 = *(_QWORD *)(v23 + 16);
  v26 = *(std::__shared_weak_count **)(v23 + 24);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    ggl::Renderer::removeDebugRenderer(v24, v25);
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    a1 = v1375;
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  else
  {
    ggl::Renderer::removeDebugRenderer(v24, v25);
  }
  v30 = *(std::__shared_weak_count **)(v23 + 24);
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 136) + 184), *(id *)(a5[112] + 296));
  v33 = operator new();
  v34 = *(_QWORD *)(v1375 + 136);
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  v35 = operator new();
  *(_BYTE *)(v35 + 31) = 22;
  *(_QWORD *)v35 = off_1E42C2BE8;
  strcpy((char *)(v35 + 8), "/loading/requestpruner");
  *(_QWORD *)(v35 + 32) = v34;
  *(_QWORD *)(v35 + 40) = 0;
  *(_QWORD *)(v35 + 48) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_QWORD *)(v33 + 24) = v35;
  v36 = operator new();
  *(_QWORD *)v36 = &off_1E42C2BC8;
  *(_QWORD *)(v36 + 8) = "hardwareJPEGQueue";
  *(_QWORD *)(v36 + 16) = 0;
  pthread_mutexattr_init((pthread_mutexattr_t *)v1391);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v1391, 2);
  v37 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v37, (const pthread_mutexattr_t *)v1391);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v1391);
  *(_QWORD *)(v36 + 16) = v37;
  v38 = (pthread_cond_t *)operator new();
  *(_QWORD *)(v36 + 24) = v38;
  pthread_cond_init(v38, 0);
  *(_QWORD *)(v36 + 120) = 0;
  *(_QWORD *)(v36 + 112) = 0;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_BYTE *)(v36 + 64) = 0;
  *(_QWORD *)(v36 + 80) = 0;
  *(_QWORD *)(v36 + 88) = 0;
  *(_QWORD *)(v36 + 72) = 0;
  *(_BYTE *)(v36 + 96) = 0;
  *(_QWORD *)(v36 + 104) = v36 + 112;
  *(_QWORD *)(v33 + 8) = v36;
  karo::JobManager::setWorkerCount((karo::JobManager *)v36, 2u);
  v39 = operator new();
  *(_QWORD *)v39 = &off_1E42C2BC8;
  *(_QWORD *)(v39 + 8) = "diskQueue";
  *(_QWORD *)(v39 + 16) = 0;
  pthread_mutexattr_init((pthread_mutexattr_t *)v1391);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v1391, 2);
  v40 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v40, (const pthread_mutexattr_t *)v1391);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v1391);
  *(_QWORD *)(v39 + 16) = v40;
  v41 = (pthread_cond_t *)operator new();
  *(_QWORD *)(v39 + 24) = v41;
  pthread_cond_init(v41, 0);
  *(_QWORD *)(v39 + 120) = 0;
  *(_QWORD *)(v39 + 112) = 0;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_BYTE *)(v39 + 64) = 0;
  *(_QWORD *)(v39 + 80) = 0;
  *(_QWORD *)(v39 + 88) = 0;
  *(_QWORD *)(v39 + 72) = 0;
  *(_BYTE *)(v39 + 96) = 0;
  *(_QWORD *)(v39 + 104) = v39 + 112;
  *(_QWORD *)(v33 + 16) = v39;
  karo::JobManager::setWorkerCount((karo::JobManager *)v39, 1u);
  v42 = operator new();
  *(_QWORD *)v42 = &off_1E42C2BC8;
  *(_QWORD *)(v42 + 8) = "processingQueue";
  *(_QWORD *)(v42 + 16) = 0;
  pthread_mutexattr_init((pthread_mutexattr_t *)v1391);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v1391, 2);
  v43 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v43, (const pthread_mutexattr_t *)v1391);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v1391);
  *(_QWORD *)(v42 + 16) = v43;
  v44 = (pthread_cond_t *)operator new();
  *(_QWORD *)(v42 + 24) = v44;
  pthread_cond_init(v44, 0);
  *(_QWORD *)(v42 + 120) = 0;
  *(_QWORD *)(v42 + 112) = 0;
  *(_OWORD *)(v42 + 32) = 0u;
  *(_OWORD *)(v42 + 48) = 0u;
  *(_BYTE *)(v42 + 64) = 0;
  *(_QWORD *)(v42 + 80) = 0;
  *(_QWORD *)(v42 + 88) = 0;
  *(_QWORD *)(v42 + 72) = 0;
  *(_BYTE *)(v42 + 96) = 0;
  *(_QWORD *)(v42 + 104) = v42 + 112;
  *(_QWORD *)v33 = v42;
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  karo::JobManager::setWorkerCount((karo::JobManager *)v42, objc_msgSend(v45, "processingQueueWidth"));

  *(_QWORD *)(v1375 + 152) = v33;
  *(_QWORD *)(*(_QWORD *)(v1375 + 136) + 72) = v33;
  v46 = operator new();
  v47 = v46;
  v48 = a5[133];
  v49 = (std::__shared_weak_count *)a5[134];
  *(_QWORD *)v1391 = v48;
  *(_QWORD *)&v1391[8] = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  altitude::GlobeView::GlobeView(v46, v1375, v1391);
  *(_QWORD *)(v1375 + 128) = v47;
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v54 = *(_QWORD *)(v1375 + 128);
  **(_QWORD **)(v1375 + 136) = v54;
  v55 = *(_QWORD *)(*(_QWORD *)(v54 + 856) + 136);
  *(_BYTE *)(v55 + 40) = 1;
  *(_BYTE *)(v55 + 42) = 1;
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v54 + 856) + 136) + 49) = objc_msgSend(v56, "proceduralRoadAlpha");

  v57 = *(altitude::GlobeView **)(v1375 + 128);
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v57 + 107) + 136) + 41) = 0;
  *(_BYTE *)(*(_QWORD *)(v1375 + 136) + 64) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1375 + 112) + 8) + 16);
  objc_msgSend(*(id *)(v1375 + 104), "contentScale");
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v57 + 107) + 136) + 32) = v58;
  altitude::GlobeView::updateLodScale(v57);
  v59 = *(altitude::GlobeView **)(v1375 + 128);
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v59 + 107) + 136) + 48) = 1;
  altitude::GlobeView::updateNightLightRedrawRequest(v59);
  v60 = operator new(0x70uLL);
  v60[1] = 0;
  v60[2] = 0;
  *v60 = &off_1E42DC708;
  v60[3] = *(_QWORD *)(v1375 + 128);
  v60[4] = 0;
  v60[5] = 850045863;
  *((_OWORD *)v60 + 3) = 0u;
  *((_OWORD *)v60 + 4) = 0u;
  *((_OWORD *)v60 + 5) = 0u;
  v60[12] = 0;
  v60[13] = 0x3FF0000000000000;
  v61 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v62 = (void *)v60[4];
  v60[4] = v61;

  v63 = *(std::__shared_weak_count **)(v1375 + 192);
  *(_QWORD *)(v1375 + 184) = v60 + 3;
  *(_QWORD *)(v1375 + 192) = v60;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(int8x16_t **)(v1375 + 128);
  *(int8x16_t *)(v1375 + 160) = vextq_s8(v66[30], v66[30], 8uLL);
  *(_QWORD *)(v1375 + 176) = v66[52].i64[1];
  v67 = *(_QWORD *)(v1375 + 184);
  objc_msgSend(*(id *)(v1375 + 104), "contentScale");
  *(_QWORD *)(v67 + 80) = v68;
  v69 = *(_QWORD *)(v1375 + 176);
  if (v69)
    *(_QWORD *)(v69 + 8) = v1375;
  v70 = *(char **)(v1375 + 40);
  v71 = *(char **)(v1375 + 48);
  v72 = v71 - v70;
  if ((unint64_t)(v71 - v70) > 0x3F)
  {
    if (v72 != 64)
    {
      v80 = v70 + 64;
      while (v71 != v80)
      {
        v82 = *((_QWORD *)v71 - 1);
        v71 -= 8;
        v81 = v82;
        *(_QWORD *)v71 = 0;
        if (v82)
          (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      }
      *(_QWORD *)(v1375 + 48) = v80;
    }
  }
  else
  {
    v73 = 8 - ((unint64_t)v72 >> 3);
    v74 = *(_QWORD *)(v1375 + 56);
    if (v73 <= (v74 - (uint64_t)v71) >> 3)
    {
      bzero(*(void **)(v1375 + 48), 8 * v73);
      *(_QWORD *)(v1375 + 48) = &v71[8 * v73];
    }
    else
    {
      v75 = v72 >> 3;
      v76 = (v72 >> 3) + v73;
      if (v76 >> 61)
        abort();
      v77 = v74 - (_QWORD)v70;
      if (v77 >> 2 > v76)
        v76 = v77 >> 2;
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v78 = v76;
      if (v78)
      {
        if (v78 >> 61)
LABEL_919:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v79 = (char *)operator new(8 * v78);
      }
      else
      {
        v79 = 0;
      }
      v83 = &v79[8 * v75];
      v84 = 8 * v73;
      v85 = &v79[8 * v78];
      bzero(v83, v84);
      v86 = &v83[v84];
      if (v71 == v70)
      {
        *(_QWORD *)(v1375 + 40) = v83;
        *(_QWORD *)(v1375 + 48) = v86;
        *(_QWORD *)(v1375 + 56) = v85;
      }
      else
      {
        v87 = v71 - v70 - 8;
        if (v87 <= 0x77
          || &v71[-(v87 & 0xFFFFFFFFFFFFFFF8) - 8] < v83 && &v79[v72 - (v87 & 0xFFFFFFFFFFFFFFF8) - 8] < v71)
        {
          goto LABEL_1132;
        }
        v88 = (v87 >> 3) + 1;
        v89 = &v79[8 * v75 - 16];
        v90 = v71 - 32;
        v91 = v88 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v93 = *(_OWORD *)v90;
          v92 = *((_OWORD *)v90 + 1);
          *(_OWORD *)v90 = 0uLL;
          *((_OWORD *)v90 + 1) = 0uLL;
          v90 -= 32;
          *((_OWORD *)v89 - 1) = v93;
          *(_OWORD *)v89 = v92;
          v89 -= 32;
          v91 -= 4;
        }
        while (v91);
        v83 -= 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
        v71 -= 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
        if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1132:
          do
          {
            v94 = *((_QWORD *)v71 - 1);
            v71 -= 8;
            *(_QWORD *)v71 = 0;
            *((_QWORD *)v83 - 1) = v94;
            v83 -= 8;
          }
          while (v71 != v70);
        }
        v71 = *(char **)(v1375 + 40);
        v95 = *(char **)(v1375 + 48);
        *(_QWORD *)(v1375 + 40) = v83;
        *(_QWORD *)(v1375 + 48) = v86;
        *(_QWORD *)(v1375 + 56) = v85;
        while (v95 != v71)
        {
          v97 = *((_QWORD *)v95 - 1);
          v95 -= 8;
          v96 = v97;
          *(_QWORD *)v95 = 0;
          if (v97)
            (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
        }
      }
      if (v71)
        operator delete(v71);
    }
  }
  v98 = operator new();
  v99 = (_QWORD *)v1375;
  *(_DWORD *)v1391 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 2);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer(v98, 0, v1375, v1391, 2);
  *(_QWORD *)v98 = &off_1E42AFE38;
  *(_BYTE *)(v98 + 48) = 0;
  *(_QWORD *)(v98 + 56) = 0;
  *(_WORD *)(v98 + 64) = 257;
  *(_QWORD *)(v98 + 66) = 0;
  *(_QWORD *)(v98 + 73) = 0;
  *(_OWORD *)(v98 + 88) = 0u;
  strcpy((char *)(v98 + 176), "/sky/stars.bin");
  *(_OWORD *)(v98 + 104) = 0u;
  *(_OWORD *)(v98 + 120) = 0u;
  *(_OWORD *)(v98 + 136) = 0u;
  *(_BYTE *)(v98 + 199) = 14;
  *(_OWORD *)(v98 + 200) = 0u;
  *(_OWORD *)(v98 + 216) = 0u;
  *(_OWORD *)(v98 + 232) = 0u;
  *(_OWORD *)(v98 + 248) = 0u;
  *(_QWORD *)(v98 + 264) = 0;
  *(_WORD *)(v98 + 272) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 2);
  v100 = (_OWORD *)objc_msgSend(*(id *)(*(_QWORD *)(v98 + 40) + 104), "format");
  v101 = operator new();
  *(_BYTE *)v101 = 0;
  *(_QWORD *)(v101 + 12) = 0;
  *(_QWORD *)(v101 + 4) = 0;
  *(_BYTE *)(v101 + 20) = 0;
  *(_DWORD *)(v101 + 24) = 1065353216;
  *(_BYTE *)(v101 + 28) = 0;
  *(_DWORD *)(v101 + 32) = 0;
  v102 = *(_QWORD *)(v98 + 232);
  *(_QWORD *)(v98 + 232) = v101;
  if (v102)
  {
    MEMORY[0x1A1AF4E00](v102, 0x1000C4049ECCB0CLL);
    v101 = *(_QWORD *)(v98 + 232);
  }
  *(_BYTE *)v101 = -1;
  *(_BYTE *)(v101 + 28) = -1;
  *(_BYTE *)(v101 + 20) = 1;
  v103 = operator new();
  *(_DWORD *)(v103 + 32) = 0;
  *(_QWORD *)(v103 + 16) = 0;
  *(_QWORD *)(v103 + 24) = 0;
  *(_QWORD *)v103 = &off_1E42B5DE8;
  *(_QWORD *)(v103 + 8) = 0;
  *(_QWORD *)(v103 + 36) = 768;
  *(_DWORD *)(v103 + 44) = 0;
  *(_QWORD *)(v103 + 48) = 1;
  *(_WORD *)(v103 + 56) = 0;
  *(_QWORD *)(v103 + 67) = 0;
  *(_QWORD *)(v103 + 59) = 0;
  *(_BYTE *)(v103 + 75) = 0;
  *(_QWORD *)(v103 + 132) = 0;
  *(_QWORD *)(v103 + 124) = 0;
  *(_WORD *)(v103 + 188) = 257;
  *(_BYTE *)(v103 + 208) = 0;
  *(_QWORD *)(v103 + 192) = 0;
  *(_QWORD *)(v103 + 200) = 0;
  *(_QWORD *)(v98 + 88) = v103;
  *(_BYTE *)(v103 + 58) = 0;
  v104 = operator new();
  *(_DWORD *)(v104 + 32) = 0;
  *(_QWORD *)(v104 + 16) = 0;
  *(_QWORD *)(v104 + 24) = 0;
  *(_QWORD *)v104 = &off_1E42B5DE8;
  *(_QWORD *)(v104 + 8) = 0;
  *(_QWORD *)(v104 + 36) = 65537;
  *(_DWORD *)(v104 + 44) = 0;
  *(_QWORD *)(v104 + 48) = 1;
  *(_WORD *)(v104 + 56) = 0;
  *(_BYTE *)(v104 + 58) = 3;
  *(_QWORD *)(v104 + 67) = 0;
  *(_QWORD *)(v104 + 59) = 0;
  *(_BYTE *)(v104 + 75) = 0;
  *(_QWORD *)(v104 + 132) = 0;
  *(_QWORD *)(v104 + 124) = 0;
  *(_WORD *)(v104 + 188) = 257;
  *(_QWORD *)(v104 + 192) = 0;
  *(_QWORD *)(v104 + 200) = 0;
  *(_BYTE *)(v104 + 208) = 0;
  *(_QWORD *)(v98 + 96) = v104;
  v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v106 = *(_QWORD *)(v105 + 16);
  v1389.__sig = *(_QWORD *)(v105 + 8);
  *(_QWORD *)v1389.__opaque = v106;
  if (v106)
  {
    v107 = (unint64_t *)(v106 + 8);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  memset(&v1391[20], 0, 24);
  v1391[0] = 0;
  *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
  v1392 = 15;
  v109 = operator new(0x198uLL);
  v109[1] = 0;
  v109[2] = 0;
  *v109 = &off_1E42DE848;
  *(_OWORD *)__p = *v100;
  *(_OWORD *)&__p[2] = v100[1];
  v110 = ggl::EarthCorona::BasePipelineState::BasePipelineState((uint64_t)(v109 + 3), &v1389, (uint64_t)v1391, __p);
  v111 = *(std::__shared_weak_count **)(v98 + 128);
  *(_QWORD *)(v98 + 120) = v110;
  *(_QWORD *)(v98 + 128) = v109;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v115 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v118 = *(_QWORD *)(v117 + 16);
  v1389.__sig = *(_QWORD *)(v117 + 8);
  *(_QWORD *)v1389.__opaque = v118;
  if (v118)
  {
    v119 = (unint64_t *)(v118 + 8);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  memset(&v1391[24], 0, 20);
  v1391[0] = 1;
  *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1391[20] = 7;
  v1392 = 15;
  v121 = operator new(0x198uLL);
  v121[1] = 0;
  v121[2] = 0;
  *v121 = &off_1E42DE848;
  *(_OWORD *)__p = *v100;
  *(_OWORD *)&__p[2] = v100[1];
  v122 = ggl::EarthCorona::BasePipelineState::BasePipelineState((uint64_t)(v121 + 3), &v1389, (uint64_t)v1391, __p);
  v123 = *(std::__shared_weak_count **)(v98 + 144);
  *(_QWORD *)(v98 + 136) = v122;
  *(_QWORD *)(v98 + 144) = v121;
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v127 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v130 = *(_QWORD *)(v129 + 680);
  v131 = *(_QWORD *)(v129 + 688);
  if (v131)
  {
    v132 = (unint64_t *)(v131 + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  v134 = (char *)operator new(0x198uLL);
  *((_QWORD *)v134 + 1) = 0;
  *((_QWORD *)v134 + 2) = 0;
  *(_QWORD *)v134 = &off_1E42E4690;
  *(_OWORD *)v1391 = *v100;
  *(_OWORD *)&v1391[16] = v100[1];
  if ((v135 & 1) != 0)
    goto LABEL_103;
  if (!(_DWORD)v1298)
    goto LABEL_103;
  v352 = &ggl::Stars::StarsPipelineSetup::typedReflection(void)::ref;
  if ((v1299 & 1) == 0)
    goto LABEL_971;
  while (1)
  {
    ggl::Stars::StarsPipelineState::typedReflection(void)::ref = (uint64_t)v352;
    ggl::StarsShader::typedReflection(v1298);
    qword_1EE586E68 = (uint64_t)&ggl::StarsShader::typedReflection(void)::ref;
    if ((v1300 & 1) == 0
    {
      ggl::Stars::pipelineStateStarsPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE586F08 = 0;
      qword_1EE586F10 = (uint64_t)"";
      dword_1EE586F18 = 0;
      qword_1EE586F20 = (uint64_t)&ggl::Stars::pipelineStateStarsPipelineAttributeBinding_0(void)::attr;
      unk_1EE586F28 = 2;
    }
    qword_1EE586E70 = (uint64_t)&ggl::Stars::pipelineStateStarsPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE586E78 = 1;
    qword_1EE586E80 = 0;
    unk_1EE586E88 = 0;
    qword_1EE586E90 = (uint64_t)&ggl::Stars::pipelineStateStarsPipelineDeviceStructBinding(void)::ref;
    unk_1EE586E98 = 0;
    if ((v1301 & 1) == 0
    {
      ggl::Stars::pipelineStateStarsPipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE586F48 = 0;
      qword_1EE586F50 = (uint64_t)"view";
      dword_1EE586F58 = 3;
      qword_1EE586F60 = (uint64_t)&ggl::Stars::pipelineStateStarsPipelineConstantViewBinding(void)::reflection;
      unk_1EE586F68 = 4;
    }
    qword_1EE586EA0 = (uint64_t)&ggl::Stars::pipelineStateStarsPipelineConstantStructBinding(void)::ref;
    *(_QWORD *)algn_1EE586EA8 = 1;
    v99 = (_QWORD *)v1375;
LABEL_103:
    if (v131)
    {
      v136 = (unint64_t *)(v131 + 8);
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
      *((_DWORD *)v134 + 14) = 0;
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 3) = &off_1E42B6760;
      *((_QWORD *)v134 + 4) = 0;
      *((_QWORD *)v134 + 8) = &ggl::Stars::StarsPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v134 + 9) = v130;
      *((_QWORD *)v134 + 10) = v131;
      do
        v138 = __ldxr(v136);
      while (__stxr(v138 + 1, v136));
    }
    else
    {
      *((_DWORD *)v134 + 14) = 0;
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 3) = &off_1E42B6760;
      *((_QWORD *)v134 + 4) = 0;
      *((_QWORD *)v134 + 8) = &ggl::Stars::StarsPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v134 + 9) = v130;
      *((_QWORD *)v134 + 10) = 0;
    }
    v134[136] = 0;
    *(_OWORD *)(v134 + 140) = xmmword_19FFB3060;
    *(_QWORD *)(v134 + 156) = 0;
    *(_QWORD *)(v134 + 172) = 0;
    *(_QWORD *)(v134 + 164) = 0;
    v134[184] = 0;
    *(_OWORD *)(v134 + 188) = xmmword_19FFB3060;
    *(_QWORD *)(v134 + 204) = 0;
    *(_QWORD *)(v134 + 220) = 0;
    *(_QWORD *)(v134 + 212) = 0;
    v134[232] = 0;
    *(_OWORD *)(v134 + 236) = xmmword_19FFB3060;
    *(_QWORD *)(v134 + 252) = 0;
    *(_QWORD *)(v134 + 268) = 0;
    *(_QWORD *)(v134 + 260) = 0;
    v139 = *(_OWORD *)&v1391[16];
    *(_OWORD *)(v134 + 280) = *(_OWORD *)v1391;
    *(_OWORD *)(v134 + 296) = v139;
    v134[312] = 0;
    *((_QWORD *)v134 + 48) = 0;
    *((_OWORD *)v134 + 22) = 0u;
    *((_OWORD *)v134 + 23) = 0u;
    *((_OWORD *)v134 + 20) = 0u;
    *((_OWORD *)v134 + 21) = 0u;
    *((_QWORD *)v134 + 49) = 0x100000001;
    v134[400] = 0;
    v134[88] = 1;
    *(_WORD *)(v134 + 89) = __p[0];
    v134[91] = BYTE2(__p[0]);
    *(_OWORD *)(v134 + 92) = xmmword_19FFB35B0;
    *((_DWORD *)v134 + 27) = 7;
    *((_QWORD *)v134 + 14) = 0;
    *((_QWORD *)v134 + 15) = 0;
    *((_DWORD *)v134 + 32) = 0;
    v134[132] = 15;
    if (v131)
    {
      v140 = (unint64_t *)(v131 + 8);
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v131);
      }
    }
    *((_QWORD *)v134 + 3) = &off_1E42BBFE8;
    v142 = *(std::__shared_weak_count **)(v98 + 112);
    *(_QWORD *)(v98 + 104) = v134 + 24;
    *(_QWORD *)(v98 + 112) = v134;
    if (v142)
    {
      v143 = (unint64_t *)&v142->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    if (v131)
    {
      v145 = (unint64_t *)(v131 + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v131);
      }
    }
    v147 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 136) + 72);
    v148 = *v147;
    v149 = (karo::RequestPruner *)v147[3];
    *(_QWORD *)(v98 + 264) = *(_QWORD *)(v99[16] + 24);
    v150 = operator new();
    v151 = (char *)operator new(0x20uLL);
    *(_QWORD *)v1391 = v151;
    *(_OWORD *)&v1391[8] = xmmword_19FFB3620;
    strcpy(v151, "/loading/skyrequestmanager");
    karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v150, (__int128 *)v1391, v99[17]);
    *(_QWORD *)(v150 + 80) = 0;
    *(_QWORD *)(v150 + 72) = 0;
    *(_QWORD *)(v150 + 64) = v150 + 72;
    *(_DWORD *)(v150 + 88) = 0;
    *(_QWORD *)v150 = &off_1E42C51F8;
    *(_QWORD *)(v98 + 248) = v150;
    operator delete(v151);
    v152 = *(karo::AsyncRequestManager **)(v98 + 248);
    *((_QWORD *)v152 + 6) = v148;
    karo::RequestPruner::addRequestManager(v149, v152);
    *(_QWORD *)(v98 + 256) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 128) + 456);
    v153 = v99[5];
    v154 = 8 * *(unsigned __int8 *)(v98 + 34);
    v155 = *(_QWORD *)(v153 + v154);
    *(_QWORD *)(v153 + v154) = v98;
    if (v155)
      (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
    v98 = operator new();
    v156 = *(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8);
    *(_WORD *)v1391 = *(_WORD *)(v156 + 6);
    *(_DWORD *)&v1391[2] = *(_DWORD *)(v156 + 8);
    *(_WORD *)&v1391[6] = *(_WORD *)(v156 + 40);
    md::realistic::RealisticRenderLayer::RealisticRenderLayer(v98, 1, v1375, v1391, 4);
    *(_QWORD *)v98 = &off_1E42AFEF8;
    *(_OWORD *)(v98 + 240) = 0u;
    *(_OWORD *)(v98 + 256) = 0u;
    *(_OWORD *)(v98 + 208) = 0u;
    *(_OWORD *)(v98 + 224) = 0u;
    *(_OWORD *)(v98 + 176) = 0u;
    *(_OWORD *)(v98 + 192) = 0u;
    *(_OWORD *)(v98 + 144) = 0u;
    *(_OWORD *)(v98 + 160) = 0u;
    *(_OWORD *)(v98 + 112) = 0u;
    *(_OWORD *)(v98 + 128) = 0u;
    *(_OWORD *)(v98 + 80) = 0u;
    *(_OWORD *)(v98 + 96) = 0u;
    *(_OWORD *)(v98 + 48) = 0u;
    *(_OWORD *)(v98 + 64) = 0u;
    v157 = *(_QWORD *)(v1375 + 120);
    *(_WORD *)(v98 + 272) = *(_WORD *)(*(_QWORD *)(v157 + 8) + 6);
    *(_WORD *)(v98 + 274) = *(_WORD *)(*(_QWORD *)(v157 + 8) + 8);
    *(_WORD *)(v98 + 276) = *(_WORD *)(*(_QWORD *)(v157 + 8) + 10);
    *(_BYTE *)(v98 + 278) = *(_BYTE *)(v157 + 56);
    v131 = objc_msgSend(*(id *)(*(_QWORD *)(v98 + 40) + 104), "format");
    v158 = operator new();
    v159 = *(_QWORD *)(v98 + 40);
    *(_OWORD *)v158 = 0u;
    *(_OWORD *)(v158 + 16) = 0u;
    *(_OWORD *)(v158 + 32) = 0u;
    *(_OWORD *)(v158 + 48) = 0u;
    *(_OWORD *)(v158 + 64) = 0u;
    *(_OWORD *)(v158 + 80) = 0u;
    *(_OWORD *)(v158 + 96) = 0u;
    *(_OWORD *)(v158 + 112) = 0u;
    *(_OWORD *)(v158 + 128) = 0u;
    *(_OWORD *)(v158 + 144) = 0u;
    *(_OWORD *)(v158 + 160) = 0u;
    *(_OWORD *)(v158 + 176) = 0u;
    *(_OWORD *)(v158 + 192) = 0u;
    *(_OWORD *)(v158 + 208) = 0u;
    *(_OWORD *)(v158 + 224) = 0u;
    *(_OWORD *)(v158 + 240) = 0u;
    v160 = operator new(0xE8uLL);
    v160[1] = 0;
    v160[2] = 0;
    *v160 = &off_1E42E12F0;
    v161 = ggl::BufferData::BufferData((uint64_t)(v160 + 3), qword_1EE550A58, 2, 1, 6, 1);
    v160[28] = ggl::FlyoverCommon::Shared::reflection(void)::reflection;
    v160[3] = &off_1E42B8E50;
    v162 = *(std::__shared_weak_count **)(v158 + 8);
    *(_QWORD *)v158 = v161;
    *(_QWORD *)(v158 + 8) = v160;
    if (v162)
    {
      v163 = (unint64_t *)&v162->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    v165 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v167 = *(_QWORD *)(v165 + 56);
    v166 = *(_QWORD *)(v165 + 64);
    v1389.__sig = v167;
    *(_QWORD *)v1389.__opaque = v166;
    if (v166)
    {
      v168 = (unint64_t *)(v166 + 8);
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 1, v168));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v170 = operator new(0x198uLL);
    v170[1] = 0;
    v170[2] = 0;
    *v170 = &off_1E42E4D90;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v171 = ggl::Flyover::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v170 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v172 = *(std::__shared_weak_count **)(v158 + 24);
    *(_QWORD *)(v158 + 16) = v171;
    *(_QWORD *)(v158 + 24) = v170;
    if (v172)
    {
      v173 = (unint64_t *)&v172->__shared_owners_;
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    v175 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v176 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    v178 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v180 = *(_QWORD *)(v178 + 56);
    v179 = *(_QWORD *)(v178 + 64);
    v1389.__sig = v180;
    *(_QWORD *)v1389.__opaque = v179;
    if (v179)
    {
      v181 = (unint64_t *)(v179 + 8);
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v183 = operator new(0x198uLL);
    v183[1] = 0;
    v183[2] = 0;
    *v183 = &off_1E42E4D90;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v184 = ggl::Flyover::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v183 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v185 = *(std::__shared_weak_count **)(v158 + 40);
    *(_QWORD *)(v158 + 32) = v184;
    *(_QWORD *)(v158 + 40) = v183;
    if (v185)
    {
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v188 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v189 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    v191 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v193 = *(_QWORD *)(v191 + 272);
    v192 = *(_QWORD *)(v191 + 280);
    v1389.__sig = v193;
    *(_QWORD *)v1389.__opaque = v192;
    if (v192)
    {
      v194 = (unint64_t *)(v192 + 8);
      do
        v195 = __ldxr(v194);
      while (__stxr(v195 + 1, v194));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v196 = operator new(0x198uLL);
    v196[1] = 0;
    v196[2] = 0;
    *v196 = &off_1E42DEC38;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v197 = ggl::FlyoverNight::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v196 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v198 = *(std::__shared_weak_count **)(v158 + 56);
    *(_QWORD *)(v158 + 48) = v197;
    *(_QWORD *)(v158 + 56) = v196;
    if (v198)
    {
      v199 = (unint64_t *)&v198->__shared_owners_;
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
    v201 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v202 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
    v204 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v206 = *(_QWORD *)(v204 + 272);
    v205 = *(_QWORD *)(v204 + 280);
    v1389.__sig = v206;
    *(_QWORD *)v1389.__opaque = v205;
    if (v205)
    {
      v207 = (unint64_t *)(v205 + 8);
      do
        v208 = __ldxr(v207);
      while (__stxr(v208 + 1, v207));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v209 = operator new(0x198uLL);
    v209[1] = 0;
    v209[2] = 0;
    *v209 = &off_1E42DEC38;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v210 = ggl::FlyoverNight::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v209 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v211 = *(std::__shared_weak_count **)(v158 + 72);
    *(_QWORD *)(v158 + 64) = v210;
    *(_QWORD *)(v158 + 72) = v209;
    if (v211)
    {
      v212 = (unint64_t *)&v211->__shared_owners_;
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    v214 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v215 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
    v217 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v219 = *(_QWORD *)(v217 + 104);
    v218 = *(_QWORD *)(v217 + 112);
    v1389.__sig = v219;
    *(_QWORD *)v1389.__opaque = v218;
    if (v218)
    {
      v220 = (unint64_t *)(v218 + 8);
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v222 = operator new(0x198uLL);
    v222[1] = 0;
    v222[2] = 0;
    *v222 = &off_1E42DEDF8;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v223 = ggl::FlyoverBorder::FlyoverBorderPipelineState::FlyoverBorderPipelineState((uint64_t)(v222 + 3), &v1389, (uint64_t)v1391, __p);
    v224 = *(std::__shared_weak_count **)(v158 + 88);
    *(_QWORD *)(v158 + 80) = v223;
    *(_QWORD *)(v158 + 88) = v222;
    if (v224)
    {
      v225 = (unint64_t *)&v224->__shared_owners_;
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
      }
    }
    v227 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v228 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    v230 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v232 = *(_QWORD *)(v230 + 104);
    v231 = *(_QWORD *)(v230 + 112);
    v1389.__sig = v232;
    *(_QWORD *)v1389.__opaque = v231;
    if (v231)
    {
      v233 = (unint64_t *)(v231 + 8);
      do
        v234 = __ldxr(v233);
      while (__stxr(v234 + 1, v233));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v235 = operator new(0x198uLL);
    v235[1] = 0;
    v235[2] = 0;
    *v235 = &off_1E42DEDF8;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v236 = ggl::FlyoverBorder::FlyoverBorderPipelineState::FlyoverBorderPipelineState((uint64_t)(v235 + 3), &v1389, (uint64_t)v1391, __p);
    v237 = *(std::__shared_weak_count **)(v158 + 104);
    *(_QWORD *)(v158 + 96) = v236;
    *(_QWORD *)(v158 + 104) = v235;
    if (v237)
    {
      v238 = (unint64_t *)&v237->__shared_owners_;
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
    v240 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v241 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
    }
    v243 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v245 = *(_QWORD *)(v243 + 200);
    v244 = *(_QWORD *)(v243 + 208);
    v1389.__sig = v245;
    *(_QWORD *)v1389.__opaque = v244;
    if (v244)
    {
      v246 = (unint64_t *)(v244 + 8);
      do
        v247 = __ldxr(v246);
      while (__stxr(v247 + 1, v246));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v248 = operator new(0x198uLL);
    v248[1] = 0;
    v248[2] = 0;
    *v248 = &off_1E42DEBC8;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v249 = ggl::FlyoverMorph::MorphPipelineState::MorphPipelineState((uint64_t)(v248 + 3), &v1389, (uint64_t)v1391, __p);
    v250 = *(std::__shared_weak_count **)(v158 + 120);
    *(_QWORD *)(v158 + 112) = v249;
    *(_QWORD *)(v158 + 120) = v248;
    if (v250)
    {
      v251 = (unint64_t *)&v250->__shared_owners_;
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
    v253 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v254 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
    v256 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v258 = *(_QWORD *)(v256 + 200);
    v257 = *(_QWORD *)(v256 + 208);
    v1389.__sig = v258;
    *(_QWORD *)v1389.__opaque = v257;
    if (v257)
    {
      v259 = (unint64_t *)(v257 + 8);
      do
        v260 = __ldxr(v259);
      while (__stxr(v260 + 1, v259));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v261 = operator new(0x198uLL);
    v261[1] = 0;
    v261[2] = 0;
    *v261 = &off_1E42DEBC8;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v262 = ggl::FlyoverMorph::MorphPipelineState::MorphPipelineState((uint64_t)(v261 + 3), &v1389, (uint64_t)v1391, __p);
    v263 = *(std::__shared_weak_count **)(v158 + 136);
    *(_QWORD *)(v158 + 128) = v262;
    *(_QWORD *)(v158 + 136) = v261;
    if (v263)
    {
      v264 = (unint64_t *)&v263->__shared_owners_;
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    v266 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v267 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v269 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v271 = *(_QWORD *)(v269 + 248);
    v270 = *(_QWORD *)(v269 + 256);
    v1389.__sig = v271;
    *(_QWORD *)v1389.__opaque = v270;
    if (v270)
    {
      v272 = (unint64_t *)(v270 + 8);
      do
        v273 = __ldxr(v272);
      while (__stxr(v273 + 1, v272));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v274 = operator new(0x198uLL);
    v274[1] = 0;
    v274[2] = 0;
    *v274 = &off_1E42E2F98;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v275 = ggl::FlyoverMorphNight::MorphPipelineState::MorphPipelineState((uint64_t)(v274 + 3), &v1389, (uint64_t)v1391, __p);
    v276 = *(std::__shared_weak_count **)(v158 + 152);
    *(_QWORD *)(v158 + 144) = v275;
    *(_QWORD *)(v158 + 152) = v274;
    if (v276)
    {
      v277 = (unint64_t *)&v276->__shared_owners_;
      do
        v278 = __ldaxr(v277);
      while (__stlxr(v278 - 1, v277));
      if (!v278)
      {
        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
        std::__shared_weak_count::__release_weak(v276);
      }
    }
    v279 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v280 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v281 = __ldaxr(v280);
      while (__stlxr(v281 - 1, v280));
      if (!v281)
      {
        ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
        std::__shared_weak_count::__release_weak(v279);
      }
    }
    v282 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v284 = *(_QWORD *)(v282 + 248);
    v283 = *(_QWORD *)(v282 + 256);
    v1389.__sig = v284;
    *(_QWORD *)v1389.__opaque = v283;
    if (v283)
    {
      v285 = (unint64_t *)(v283 + 8);
      do
        v286 = __ldxr(v285);
      while (__stxr(v286 + 1, v285));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v287 = operator new(0x198uLL);
    v287[1] = 0;
    v287[2] = 0;
    *v287 = &off_1E42E2F98;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v288 = ggl::FlyoverMorphNight::MorphPipelineState::MorphPipelineState((uint64_t)(v287 + 3), &v1389, (uint64_t)v1391, __p);
    v289 = *(std::__shared_weak_count **)(v158 + 168);
    *(_QWORD *)(v158 + 160) = v288;
    *(_QWORD *)(v158 + 168) = v287;
    if (v289)
    {
      v290 = (unint64_t *)&v289->__shared_owners_;
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    v292 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v293 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v294 = __ldaxr(v293);
      while (__stlxr(v294 - 1, v293));
      if (!v294)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
    }
    v295 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v297 = *(_QWORD *)(v295 + 224);
    v296 = *(_QWORD *)(v295 + 232);
    v1389.__sig = v297;
    *(_QWORD *)v1389.__opaque = v296;
    if (v296)
    {
      v298 = (unint64_t *)(v296 + 8);
      do
        v299 = __ldxr(v298);
      while (__stxr(v299 + 1, v298));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v300 = operator new(0x198uLL);
    v300[1] = 0;
    v300[2] = 0;
    *v300 = &off_1E42E3660;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v301 = ggl::FlyoverMorphBorder::MorphBorderPipelineState::MorphBorderPipelineState((uint64_t)(v300 + 3), &v1389, (uint64_t)v1391, __p);
    v302 = *(std::__shared_weak_count **)(v158 + 184);
    *(_QWORD *)(v158 + 176) = v301;
    *(_QWORD *)(v158 + 184) = v300;
    if (v302)
    {
      v303 = (unint64_t *)&v302->__shared_owners_;
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (!v304)
      {
        ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
        std::__shared_weak_count::__release_weak(v302);
      }
    }
    v305 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v306 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
      }
    }
    v308 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v310 = *(_QWORD *)(v308 + 224);
    v309 = *(_QWORD *)(v308 + 232);
    v1389.__sig = v310;
    *(_QWORD *)v1389.__opaque = v309;
    if (v309)
    {
      v311 = (unint64_t *)(v309 + 8);
      do
        v312 = __ldxr(v311);
      while (__stxr(v312 + 1, v311));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v313 = operator new(0x198uLL);
    v313[1] = 0;
    v313[2] = 0;
    *v313 = &off_1E42E3660;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v314 = ggl::FlyoverMorphBorder::MorphBorderPipelineState::MorphBorderPipelineState((uint64_t)(v313 + 3), &v1389, (uint64_t)v1391, __p);
    v315 = *(std::__shared_weak_count **)(v158 + 200);
    *(_QWORD *)(v158 + 192) = v314;
    *(_QWORD *)(v158 + 200) = v313;
    if (v315)
    {
      v316 = (unint64_t *)&v315->__shared_owners_;
      do
        v317 = __ldaxr(v316);
      while (__stlxr(v317 - 1, v316));
      if (!v317)
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
    }
    v318 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v319 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
        std::__shared_weak_count::__release_weak(v318);
      }
    }
    v321 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v323 = *(_QWORD *)(v321 + 176);
    v322 = *(_QWORD *)(v321 + 184);
    v1389.__sig = v323;
    *(_QWORD *)v1389.__opaque = v322;
    if (v322)
    {
      v324 = (unint64_t *)(v322 + 8);
      do
        v325 = __ldxr(v324);
      while (__stxr(v325 + 1, v324));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v326 = operator new(0x198uLL);
    v326[1] = 0;
    v326[2] = 0;
    *v326 = &off_1E42DEE30;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v327 = ggl::FlyoverMasked::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v326 + 3), &v1389, (uint64_t)v1391, __p);
    v328 = *(std::__shared_weak_count **)(v158 + 216);
    *(_QWORD *)(v158 + 208) = v327;
    *(_QWORD *)(v158 + 216) = v326;
    if (v328)
    {
      v329 = (unint64_t *)&v328->__shared_owners_;
      do
        v330 = __ldaxr(v329);
      while (__stlxr(v330 - 1, v329));
      if (!v330)
      {
        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
        std::__shared_weak_count::__release_weak(v328);
      }
    }
    v331 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v332 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v333 = __ldaxr(v332);
      while (__stlxr(v333 - 1, v332));
      if (!v333)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
    }
    v334 = *(_QWORD *)(*(_QWORD *)(v159 + 200) + 80);
    v336 = *(_QWORD *)(v334 + 176);
    v335 = *(_QWORD *)(v334 + 184);
    v1389.__sig = v336;
    *(_QWORD *)v1389.__opaque = v335;
    if (v335)
    {
      v337 = (unint64_t *)(v335 + 8);
      do
        v338 = __ldxr(v337);
      while (__stxr(v338 + 1, v337));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v339 = operator new(0x198uLL);
    v339[1] = 0;
    v339[2] = 0;
    *v339 = &off_1E42DEE30;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v340 = ggl::FlyoverMasked::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v339 + 3), &v1389, (uint64_t)v1391, __p);
    v341 = *(std::__shared_weak_count **)(v158 + 232);
    *(_QWORD *)(v158 + 224) = v340;
    *(_QWORD *)(v158 + 232) = v339;
    if (v341)
    {
      v342 = (unint64_t *)&v341->__shared_owners_;
      do
        v343 = __ldaxr(v342);
      while (__stlxr(v343 - 1, v342));
      if (!v343)
      {
        ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
        std::__shared_weak_count::__release_weak(v341);
      }
    }
    v344 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v345 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v346 = __ldaxr(v345);
      while (__stlxr(v346 - 1, v345));
      if (!v346)
      {
        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
        std::__shared_weak_count::__release_weak(v344);
      }
    }
    v347 = operator new();
    *(_QWORD *)(v347 + 16) = 0;
    *(_QWORD *)(v347 + 24) = 0;
    *(_DWORD *)(v347 + 32) = 0;
    *(_QWORD *)v347 = &off_1E42B5DE8;
    *(_QWORD *)(v347 + 8) = 0;
    *(_QWORD *)(v347 + 36) = 768;
    *(_DWORD *)(v347 + 44) = 0;
    *(_QWORD *)(v347 + 48) = 1;
    *(_WORD *)(v347 + 56) = 0;
    *(_BYTE *)(v347 + 58) = 3;
    *(_QWORD *)(v347 + 67) = 0;
    *(_QWORD *)(v347 + 59) = 0;
    *(_BYTE *)(v347 + 75) = 0;
    *(_QWORD *)(v347 + 132) = 0;
    *(_QWORD *)(v347 + 124) = 0;
    *(_WORD *)(v347 + 188) = 257;
    *(_BYTE *)(v347 + 208) = 0;
    *(_QWORD *)(v347 + 192) = 0;
    *(_QWORD *)(v347 + 200) = 0;
    v348 = *(_QWORD *)(v158 + 240);
    *(_QWORD *)(v158 + 240) = v347;
    if (v348)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
      v347 = *(_QWORD *)(v158 + 240);
    }
    *(_BYTE *)(v347 + 59) = 6;
    *(_BYTE *)(v347 + 56) = 1;
    v349 = operator new();
    *(_QWORD *)(v349 + 16) = 0;
    *(_QWORD *)(v349 + 24) = 0;
    *(_DWORD *)(v349 + 32) = 0;
    *(_QWORD *)v349 = &off_1E42B5DE8;
    *(_QWORD *)(v349 + 8) = 0;
    *(_QWORD *)(v349 + 36) = 66304;
    *(_DWORD *)(v349 + 44) = 0;
    *(_QWORD *)(v349 + 48) = 1;
    *(_WORD *)(v349 + 56) = 0;
    *(_BYTE *)(v349 + 58) = 3;
    *(_QWORD *)(v349 + 67) = 0;
    *(_QWORD *)(v349 + 59) = 0;
    *(_BYTE *)(v349 + 75) = 0;
    *(_QWORD *)(v349 + 132) = 0;
    *(_QWORD *)(v349 + 124) = 0;
    *(_WORD *)(v349 + 188) = 257;
    *(_BYTE *)(v349 + 208) = 0;
    *(_QWORD *)(v349 + 192) = 0;
    *(_QWORD *)(v349 + 200) = 0;
    v350 = *(_QWORD *)(v158 + 248);
    *(_QWORD *)(v158 + 248) = v349;
    if (v350)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
      v349 = *(_QWORD *)(v158 + 248);
    }
    *(_BYTE *)(v349 + 59) = 6;
    *(_BYTE *)(v349 + 56) = 1;
    v351 = *(altitude::FlyoverShared **)(v98 + 216);
    *(_QWORD *)(v98 + 216) = v158;
    if (v351)
    {
      altitude::FlyoverShared::~FlyoverShared(v351);
      MEMORY[0x1A1AF4E00]();
    }
    v130 = *(_QWORD *)(v1375 + 128);
    v352 = (uint64_t *)atomic_load((unint64_t *)(v130 + 928));
    if (v352)
      break;
    v134 = (char *)(v130 + 864);
    std::mutex::lock((std::mutex *)(v130 + 864));
    v352 = (uint64_t *)atomic_load((unint64_t *)(v130 + 928));
    if (v352)
      goto LABEL_324;
    v353 = *(_QWORD *)(v130 + 960);
    if (v353)
    {
      v352 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v353 + 48))(v353);
      atomic_store((unint64_t)v352, (unint64_t *)(v130 + 928));
LABEL_324:
      std::mutex::unlock((std::mutex *)(v130 + 864));
      break;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
LABEL_971:
    if ((_DWORD)v1298)
    {
      if ((v1334 & 1) == 0
      {
        if ((v1358 & 1) == 0
        {
          ggl::MeshTyped<ggl::Stars::StarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::Stars::starVertexReflection;
        }
        ggl::MeshTyped<ggl::Stars::StarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Stars::StarVertex>::attributesReflection(void)::r;
        unk_1EE5762C8 = 1;
      }
      *v352 = (uint64_t)&ggl::MeshTyped<ggl::Stars::StarVertex>::typedReflection(void)::r;
      v352[1] = (uint64_t)&ggl::Stars::pipelineDataStarsPipelineDeviceStructs(void)::ref;
      v352[2] = 0;
      if ((v1335 & 1) == 0
      {
        ggl::Stars::pipelineDataStarsPipelineConstantStructs(void)::ref = (uint64_t)ggl::Stars::View::reflection(void)::reflection;
      }
      qword_1EE586ED0 = (uint64_t)&ggl::Stars::pipelineDataStarsPipelineConstantStructs(void)::ref;
      unk_1EE586ED8 = xmmword_19FFB3350;
    }
  }
  *(_QWORD *)(*(_QWORD *)(v98 + 216) + 256) = v352;
  v354 = operator new();
  *(_QWORD *)(v354 + 12) = 0;
  *(_QWORD *)(v354 + 4) = 0;
  *(_DWORD *)(v354 + 24) = 1065353216;
  *(_DWORD *)(v354 + 32) = 0;
  *(_QWORD *)(v98 + 64) = v354;
  *(_BYTE *)v354 = 0;
  *(_BYTE *)(v354 + 28) = 0;
  *(_BYTE *)(v354 + 20) = 1;
  v355 = operator new();
  *(_DWORD *)(v355 + 32) = 0;
  *(_QWORD *)(v355 + 16) = 0;
  *(_QWORD *)(v355 + 24) = 0;
  *(_QWORD *)v355 = &off_1E42B5DE8;
  *(_QWORD *)(v355 + 8) = 0;
  *(_QWORD *)(v355 + 36) = 768;
  *(_DWORD *)(v355 + 44) = 0;
  *(_QWORD *)(v355 + 48) = 1;
  *(_WORD *)(v355 + 56) = 0;
  *(_QWORD *)(v355 + 67) = 0;
  *(_QWORD *)(v355 + 59) = 0;
  *(_BYTE *)(v355 + 75) = 0;
  *(_QWORD *)(v355 + 132) = 0;
  *(_QWORD *)(v355 + 124) = 0;
  *(_WORD *)(v355 + 188) = 257;
  *(_BYTE *)(v355 + 208) = 0;
  *(_QWORD *)(v355 + 192) = 0;
  *(_QWORD *)(v355 + 200) = 0;
  *(_QWORD *)(v98 + 80) = v355;
  *(_BYTE *)(v355 + 58) = 1;
  v356 = operator new();
  *(_DWORD *)(v356 + 32) = 0;
  *(_QWORD *)(v356 + 16) = 0;
  *(_QWORD *)(v356 + 24) = 0;
  *(_QWORD *)v356 = &off_1E42B5DE8;
  *(_QWORD *)(v356 + 8) = 0;
  *(_QWORD *)(v356 + 36) = 768;
  *(_DWORD *)(v356 + 44) = 0;
  *(_QWORD *)(v356 + 48) = 1;
  *(_WORD *)(v356 + 57) = 768;
  *(_QWORD *)(v356 + 67) = 0;
  *(_QWORD *)(v356 + 59) = 0;
  *(_BYTE *)(v356 + 75) = 0;
  *(_QWORD *)(v356 + 132) = 0;
  *(_QWORD *)(v356 + 124) = 0;
  *(_WORD *)(v356 + 188) = 257;
  *(_BYTE *)(v356 + 208) = 0;
  *(_QWORD *)(v356 + 192) = 0;
  *(_QWORD *)(v356 + 200) = 0;
  *(_QWORD *)(v98 + 72) = v356;
  *(_BYTE *)(v356 + 56) = 1;
  v357 = operator new();
  *(_DWORD *)(v357 + 32) = 0;
  *(_QWORD *)(v357 + 16) = 0;
  *(_QWORD *)(v357 + 24) = 0;
  *(_QWORD *)v357 = &off_1E42B5DE8;
  *(_QWORD *)(v357 + 8) = 0;
  *(_QWORD *)(v357 + 36) = 65537;
  *(_DWORD *)(v357 + 44) = 0;
  *(_QWORD *)(v357 + 48) = 1;
  *(_WORD *)(v357 + 56) = 0;
  *(_QWORD *)(v357 + 67) = 0;
  *(_QWORD *)(v357 + 59) = 0;
  *(_BYTE *)(v357 + 75) = 0;
  *(_QWORD *)(v357 + 132) = 0;
  *(_QWORD *)(v357 + 124) = 0;
  *(_WORD *)(v357 + 188) = 257;
  *(_BYTE *)(v357 + 208) = 0;
  *(_QWORD *)(v357 + 192) = 0;
  *(_QWORD *)(v357 + 200) = 0;
  *(_QWORD *)(v98 + 96) = v357;
  *(_BYTE *)(v357 + 58) = 4;
  v358 = operator new(0xE8uLL);
  v358[1] = 0;
  v358[2] = 0;
  *v358 = &off_1E42E1948;
  v359 = ggl::BufferData::BufferData((uint64_t)(v358 + 3), qword_1EE5725F8, 2, 1, 6, 1);
  v358[28] = ggl::TileBaseSurface::Shared::reflection(void)::reflection;
  v358[3] = &off_1E42B9230;
  v360 = *(std::__shared_weak_count **)(v98 + 176);
  *(_QWORD *)(v98 + 168) = v359;
  *(_QWORD *)(v98 + 176) = v358;
  if (v360)
  {
    v361 = (unint64_t *)&v360->__shared_owners_;
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  v363 = *(_QWORD **)(v98 + 168);
  v364 = v363[1];
  if (v364)
    v365 = v363[9];
  else
    v365 = 0;
  *(_QWORD *)(v365 + 112) = 0x410000003F800000;
  *(_OWORD *)(v365 + 128) = xmmword_19FFB4BB0;
  *(_OWORD *)(v365 + 80) = xmmword_19FFB4BC0;
  *(_OWORD *)(v365 + 96) = xmmword_19FFB4BD0;
  v366 = operator new(0xE8uLL);
  v366[1] = 0;
  v366[2] = 0;
  *v366 = &off_1E42E1788;
  v367 = ggl::BufferData::BufferData((uint64_t)(v366 + 3), qword_1EE5432B0, 2, 1, 6, 1);
  v366[28] = ggl::FlyoverNightDim::Color::reflection(void)::reflection;
  v366[3] = &off_1E42B9130;
  v368 = *(std::__shared_weak_count **)(v98 + 208);
  *(_QWORD *)(v98 + 200) = v367;
  *(_QWORD *)(v98 + 208) = v366;
  if (v368)
  {
    v369 = (unint64_t *)&v368->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v371 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v372 = *(_QWORD *)(v371 + 728);
  v373 = *(std::__shared_weak_count **)(v371 + 736);
  if (v373)
  {
    v374 = (unint64_t *)&v373->__shared_owners_;
    do
      v375 = __ldxr(v374);
    while (__stxr(v375 + 1, v374));
  }
  __p[0] = 0;
  v376 = (char *)operator new(0x198uLL);
  *((_QWORD *)v376 + 1) = 0;
  *((_QWORD *)v376 + 2) = 0;
  *(_QWORD *)v376 = &off_1E42DF798;
  *(_OWORD *)v1391 = *(_OWORD *)v131;
  *(_OWORD *)&v1391[16] = *(_OWORD *)(v131 + 16);
  if ((v377 & 1) == 0)
  {
    if ((_DWORD)v1302)
    {
      if ((v1303 & 1) == 0)
      {
        if ((_DWORD)v1302)
        {
          if ((v1336 & 1) == 0
          {
            if ((v1359 & 1) == 0
            {
              ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::attributesReflection(void)::r = (uint64_t)&ggl::TileBaseSurface::p3T2T2BufferReflection;
            }
            ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::attributesReflection(void)::r;
            unk_1EE576280 = 1;
          }
          ggl::TileBaseSurface::P3T2T2PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::typedReflection(void)::r;
          unk_1EE58CAF0 = &ggl::TileBaseSurface::pipelineDataP3T2T2PipelineDeviceStructs(void)::ref;
          qword_1EE58CAF8 = 0;
          if ((v1337 & 1) == 0
          {
            ggl::TileBaseSurface::pipelineDataP3T2T2PipelineConstantStructs(void)::ref = (uint64_t)ggl::TileBaseSurface::Element::reflection(void)::reflection;
            *(_QWORD *)algn_1EE58CBE8 = ggl::TileBaseSurface::Shared::reflection(void)::reflection;
          }
          qword_1EE58CB00 = (uint64_t)&ggl::TileBaseSurface::pipelineDataP3T2T2PipelineConstantStructs(void)::ref;
          unk_1EE58CB08 = xmmword_19FFB35C0;
        }
      }
      ggl::TileBaseSurface::P3T2T2PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TileBaseSurface::P3T2T2PipelineSetup::typedReflection(void)::ref;
      ggl::TileBaseSurfaceShader::typedReflection(v1302);
      qword_1EE58CA98 = (uint64_t)&ggl::TileBaseSurfaceShader::typedReflection(void)::ref;
      if ((v1304 & 1) == 0
      {
        ggl::TileBaseSurface::pipelineStateP3T2T2PipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58CB38 = 0;
        qword_1EE58CB40 = (uint64_t)"";
        dword_1EE58CB48 = 0;
        qword_1EE58CB50 = (uint64_t)&ggl::TileBaseSurface::pipelineStateP3T2T2PipelineAttributeBinding_0(void)::attr;
        unk_1EE58CB58 = 3;
      }
      qword_1EE58CAA0 = (uint64_t)&ggl::TileBaseSurface::pipelineStateP3T2T2PipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58CAA8 = 1;
      qword_1EE58CAB0 = 0;
      unk_1EE58CAB8 = 0;
      qword_1EE58CAC0 = (uint64_t)&ggl::TileBaseSurface::pipelineStateP3T2T2PipelineDeviceStructBinding(void)::ref;
      unk_1EE58CAC8 = 0;
      if ((v1305 & 1) == 0
      {
        ggl::TileBaseSurface::pipelineStateP3T2T2PipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE58CB78 = 0;
        qword_1EE58CB80 = (uint64_t)"element";
        dword_1EE58CB88 = 3;
        qword_1EE58CB90 = (uint64_t)&ggl::TileBaseSurface::pipelineStateP3T2T2PipelineConstantElementBinding(void)::reflection;
        unk_1EE58CB98 = xmmword_19FFB48D0;
        qword_1EE58CBA8 = 1;
        unk_1EE58CBB0 = "sharedConstants";
        dword_1EE58CBB8 = 3;
        qword_1EE58CBC0 = (uint64_t)&ggl::TileBaseSurface::pipelineStateP3T2T2PipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE58CBC8 = 7;
      }
      qword_1EE58CAD0 = (uint64_t)&ggl::TileBaseSurface::pipelineStateP3T2T2PipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE58CAD8 = 2;
    }
  }
  if (v373)
  {
    v378 = (unint64_t *)&v373->__shared_owners_;
    do
      v379 = __ldxr(v378);
    while (__stxr(v379 + 1, v378));
    *((_DWORD *)v376 + 14) = 0;
    *((_QWORD *)v376 + 5) = 0;
    *((_QWORD *)v376 + 6) = 0;
    *((_QWORD *)v376 + 3) = &off_1E42B6760;
    *((_QWORD *)v376 + 4) = 0;
    *((_QWORD *)v376 + 8) = &ggl::TileBaseSurface::P3T2T2PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v376 + 9) = v372;
    *((_QWORD *)v376 + 10) = v373;
    do
      v380 = __ldxr(v378);
    while (__stxr(v380 + 1, v378));
  }
  else
  {
    *((_DWORD *)v376 + 14) = 0;
    *((_QWORD *)v376 + 5) = 0;
    *((_QWORD *)v376 + 6) = 0;
    *((_QWORD *)v376 + 3) = &off_1E42B6760;
    *((_QWORD *)v376 + 4) = 0;
    *((_QWORD *)v376 + 8) = &ggl::TileBaseSurface::P3T2T2PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v376 + 9) = v372;
    *((_QWORD *)v376 + 10) = 0;
  }
  v376[136] = 0;
  *(_OWORD *)(v376 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v376 + 156) = 0;
  *(_QWORD *)(v376 + 172) = 0;
  *(_QWORD *)(v376 + 164) = 0;
  v376[184] = 0;
  *(_OWORD *)(v376 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v376 + 204) = 0;
  *(_QWORD *)(v376 + 220) = 0;
  *(_QWORD *)(v376 + 212) = 0;
  v376[232] = 0;
  *(_OWORD *)(v376 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v376 + 252) = 0;
  *(_QWORD *)(v376 + 268) = 0;
  *(_QWORD *)(v376 + 260) = 0;
  v381 = *(_OWORD *)&v1391[16];
  *(_OWORD *)(v376 + 280) = *(_OWORD *)v1391;
  *(_OWORD *)(v376 + 296) = v381;
  v376[312] = 0;
  *((_QWORD *)v376 + 48) = 0;
  *((_OWORD *)v376 + 22) = 0u;
  *((_OWORD *)v376 + 23) = 0u;
  *((_OWORD *)v376 + 20) = 0u;
  *((_OWORD *)v376 + 21) = 0u;
  *((_QWORD *)v376 + 49) = 0x100000001;
  v376[400] = 0;
  v376[88] = 0;
  *(_WORD *)(v376 + 89) = v1389.__sig;
  v376[91] = BYTE2(v1389.__sig);
  *(_OWORD *)(v376 + 92) = xmmword_19FFB3060;
  *(void **)(v376 + 108) = __p[0];
  *((_DWORD *)v376 + 29) = 0;
  *((_QWORD *)v376 + 15) = 0;
  *((_DWORD *)v376 + 32) = 0;
  v376[132] = 15;
  if (v373)
  {
    v382 = (unint64_t *)&v373->__shared_owners_;
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
  }
  *((_QWORD *)v376 + 3) = &off_1E42B7470;
  v384 = *(std::__shared_weak_count **)(v98 + 112);
  *(_QWORD *)(v98 + 104) = v376 + 24;
  *(_QWORD *)(v98 + 112) = v376;
  if (v384)
  {
    v385 = (unint64_t *)&v384->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  if (v373)
  {
    v387 = (unint64_t *)&v373->__shared_owners_;
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
  }
  v389 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v390 = *(_QWORD *)(v389 + 32);
  v391 = *(std::__shared_weak_count **)(v389 + 40);
  if (v391)
  {
    v392 = (unint64_t *)&v391->__shared_owners_;
    do
      v393 = __ldxr(v392);
    while (__stxr(v393 + 1, v392));
  }
  v394 = (char *)operator new(0x198uLL);
  *((_QWORD *)v394 + 1) = 0;
  *((_QWORD *)v394 + 2) = 0;
  *(_QWORD *)v394 = &off_1E42DE618;
  *(_OWORD *)v1391 = *(_OWORD *)v131;
  *(_OWORD *)&v1391[16] = *(_OWORD *)(v131 + 16);
  if ((v395 & 1) == 0)
  {
    if ((_DWORD)v1306)
    {
      if ((v1307 & 1) == 0)
      {
        if ((_DWORD)v1306)
        {
          if ((v1338 & 1) == 0
          {
            if ((v1360 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::EndOfWorld::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          unk_1EE5863C0 = &ggl::EndOfWorld::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE5863C8 = 0;
          if ((v1339 & 1) == 0
          {
            ggl::EndOfWorld::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::EndOfWorld::Element::reflection(void)::reflection;
            *(_QWORD *)algn_1EE5864A8 = ggl::EndOfWorld::Shared::reflection(void)::reflection;
          }
          qword_1EE5863D0 = (uint64_t)&ggl::EndOfWorld::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EE5863D8 = xmmword_19FFB35A0;
        }
      }
      ggl::EndOfWorld::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::EndOfWorld::BasePipelineSetup::typedReflection(void)::ref;
      ggl::EndOfWorldShader::typedReflection(v1306);
      qword_1EE586368 = (uint64_t)&ggl::EndOfWorldShader::typedReflection(void)::ref;
      if ((v1308 & 1) == 0
      {
        ggl::EndOfWorld::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5863F8 = 0;
        qword_1EE586400 = (uint64_t)"";
        dword_1EE586408 = 0;
        qword_1EE586410 = (uint64_t)&ggl::EndOfWorld::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE586418 = 2;
      }
      qword_1EE586370 = (uint64_t)&ggl::EndOfWorld::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE586378 = 1;
      qword_1EE586380 = 0;
      unk_1EE586388 = 1;
      qword_1EE586390 = (uint64_t)&ggl::EndOfWorld::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EE586398 = 0;
      if ((v1309 & 1) == 0
      {
        ggl::EndOfWorld::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE586438 = 0;
        qword_1EE586440 = (uint64_t)"element";
        dword_1EE586448 = 3;
        qword_1EE586450 = (uint64_t)&ggl::EndOfWorld::pipelineStateBasePipelineConstantElementBinding(void)::reflection;
        unk_1EE586458 = xmmword_19FFB35A0;
        qword_1EE586468 = 1;
        unk_1EE586470 = "sharedConstants";
        dword_1EE586478 = 3;
        qword_1EE586480 = (uint64_t)&ggl::EndOfWorld::pipelineStateBasePipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE586488 = 2;
      }
      qword_1EE5863A0 = (uint64_t)&ggl::EndOfWorld::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE5863A8 = 2;
    }
  }
  if (v391)
  {
    v396 = (unint64_t *)&v391->__shared_owners_;
    do
      v397 = __ldxr(v396);
    while (__stxr(v397 + 1, v396));
    *((_DWORD *)v394 + 14) = 0;
    *((_QWORD *)v394 + 5) = 0;
    *((_QWORD *)v394 + 6) = 0;
    *((_QWORD *)v394 + 3) = &off_1E42B6760;
    *((_QWORD *)v394 + 4) = 0;
    *((_QWORD *)v394 + 8) = &ggl::EndOfWorld::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v394 + 9) = v390;
    *((_QWORD *)v394 + 10) = v391;
    do
      v398 = __ldxr(v396);
    while (__stxr(v398 + 1, v396));
  }
  else
  {
    *((_DWORD *)v394 + 14) = 0;
    *((_QWORD *)v394 + 5) = 0;
    *((_QWORD *)v394 + 6) = 0;
    *((_QWORD *)v394 + 3) = &off_1E42B6760;
    *((_QWORD *)v394 + 4) = 0;
    *((_QWORD *)v394 + 8) = &ggl::EndOfWorld::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v394 + 9) = v390;
    *((_QWORD *)v394 + 10) = 0;
  }
  v394[136] = 0;
  *(_OWORD *)(v394 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v394 + 156) = 0;
  *(_QWORD *)(v394 + 172) = 0;
  *(_QWORD *)(v394 + 164) = 0;
  v394[184] = 0;
  *(_OWORD *)(v394 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v394 + 204) = 0;
  *(_QWORD *)(v394 + 220) = 0;
  *(_QWORD *)(v394 + 212) = 0;
  v394[232] = 0;
  *(_OWORD *)(v394 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v394 + 252) = 0;
  *(_QWORD *)(v394 + 268) = 0;
  *(_QWORD *)(v394 + 260) = 0;
  v399 = *(_OWORD *)&v1391[16];
  *(_OWORD *)(v394 + 280) = *(_OWORD *)v1391;
  *(_OWORD *)(v394 + 296) = v399;
  v394[312] = 0;
  *((_QWORD *)v394 + 48) = 0;
  *((_OWORD *)v394 + 22) = 0u;
  *((_OWORD *)v394 + 23) = 0u;
  *((_OWORD *)v394 + 20) = 0u;
  *((_OWORD *)v394 + 21) = 0u;
  *((_QWORD *)v394 + 49) = 0x100000001;
  v394[400] = 0;
  v394[88] = 1;
  *(_WORD *)(v394 + 89) = __p[0];
  v394[91] = BYTE2(__p[0]);
  *(_OWORD *)(v394 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v394 + 27) = 7;
  *((_QWORD *)v394 + 14) = 0;
  *((_QWORD *)v394 + 15) = 0;
  *((_DWORD *)v394 + 32) = 0;
  v394[132] = 15;
  if (v391)
  {
    v400 = (unint64_t *)&v391->__shared_owners_;
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
  *((_QWORD *)v394 + 3) = &off_1E42B5888;
  v402 = *(std::__shared_weak_count **)(v98 + 128);
  *(_QWORD *)(v98 + 120) = v394 + 24;
  *(_QWORD *)(v98 + 128) = v394;
  if (v402)
  {
    v403 = (unint64_t *)&v402->__shared_owners_;
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  if (v391)
  {
    v405 = (unint64_t *)&v391->__shared_owners_;
    do
      v406 = __ldaxr(v405);
    while (__stlxr(v406 - 1, v405));
    if (!v406)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
  v407 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v408 = *(_QWORD *)(v407 + 656);
  v409 = *(std::__shared_weak_count **)(v407 + 664);
  if (v409)
  {
    v410 = (unint64_t *)&v409->__shared_owners_;
    do
      v411 = __ldxr(v410);
    while (__stxr(v411 + 1, v410));
  }
  v412 = (char *)operator new(0x198uLL);
  *((_QWORD *)v412 + 1) = 0;
  *((_QWORD *)v412 + 2) = 0;
  *(_QWORD *)v412 = &off_1E42E5378;
  *(_OWORD *)v1391 = *(_OWORD *)v131;
  *(_OWORD *)&v1391[16] = *(_OWORD *)(v131 + 16);
  if ((v413 & 1) == 0)
  {
    if ((_DWORD)v1310)
    {
      if ((v1311 & 1) == 0)
      {
        if ((_DWORD)v1310)
        {
          if ((v1340 & 1) == 0
          {
            if ((v1361 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1ECE43AA8 = 1;
          }
          ggl::SolidLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE58CE18 = &ggl::SolidLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE58CE20 = 0;
          if ((v1341 & 1) == 0
          {
            ggl::SolidLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::SolidLine::Style::reflection(void)::reflection;
            unk_1EE58CF10 = ggl::SolidLine::View::reflection(void)::reflection;
          }
          qword_1EE58CE28 = (uint64_t)&ggl::SolidLine::pipelineDataBasePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE58CE30 = xmmword_19FFB35C0;
        }
      }
      ggl::SolidLine::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SolidLine::BasePipelineSetup::typedReflection(void)::ref;
      ggl::SolidLineShader::typedReflection(v1310);
      qword_1EE58CDC0 = (uint64_t)&ggl::SolidLineShader::typedReflection(void)::ref;
      if ((v1312 & 1) == 0
      {
        ggl::SolidLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58CE60 = 0;
        qword_1EE58CE68 = (uint64_t)"";
        dword_1EE58CE70 = 0;
        qword_1EE58CE78 = (uint64_t)&ggl::SolidLine::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE58CE80 = 1;
      }
      qword_1EE58CDC8 = (uint64_t)&ggl::SolidLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1EE58CDD0 = 1;
      qword_1EE58CDD8 = 0;
      unk_1EE58CDE0 = 0;
      qword_1EE58CDE8 = (uint64_t)&ggl::SolidLine::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EE58CDF0 = 0;
      if ((v1313 & 1) == 0
      {
        ggl::SolidLine::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58CEA0 = 0;
        qword_1EE58CEA8 = (uint64_t)"style";
        dword_1EE58CEB0 = 3;
        qword_1EE58CEB8 = (uint64_t)&ggl::SolidLine::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE58CEC0 = vdupq_n_s64(1uLL);
        qword_1EE58CED0 = 1;
        unk_1EE58CED8 = "view";
        dword_1EE58CEE0 = 3;
        qword_1EE58CEE8 = (uint64_t)&ggl::SolidLine::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE58CEF0 = 1;
      }
      qword_1EE58CDF8 = (uint64_t)&ggl::SolidLine::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1EE58CE00 = 2;
    }
  }
  if (v409)
  {
    v414 = (unint64_t *)&v409->__shared_owners_;
    do
      v415 = __ldxr(v414);
    while (__stxr(v415 + 1, v414));
    *((_DWORD *)v412 + 14) = 0;
    *((_QWORD *)v412 + 5) = 0;
    *((_QWORD *)v412 + 6) = 0;
    *((_QWORD *)v412 + 3) = &off_1E42B6760;
    *((_QWORD *)v412 + 4) = 0;
    *((_QWORD *)v412 + 8) = &ggl::SolidLine::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v412 + 9) = v408;
    *((_QWORD *)v412 + 10) = v409;
    do
      v416 = __ldxr(v414);
    while (__stxr(v416 + 1, v414));
  }
  else
  {
    *((_DWORD *)v412 + 14) = 0;
    *((_QWORD *)v412 + 5) = 0;
    *((_QWORD *)v412 + 6) = 0;
    *((_QWORD *)v412 + 3) = &off_1E42B6760;
    *((_QWORD *)v412 + 4) = 0;
    *((_QWORD *)v412 + 8) = &ggl::SolidLine::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v412 + 9) = v408;
    *((_QWORD *)v412 + 10) = 0;
  }
  v412[136] = 0;
  *(_OWORD *)(v412 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v412 + 156) = 0;
  *(_QWORD *)(v412 + 172) = 0;
  *(_QWORD *)(v412 + 164) = 0;
  v412[184] = 0;
  *(_OWORD *)(v412 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v412 + 204) = 0;
  *(_QWORD *)(v412 + 220) = 0;
  *(_QWORD *)(v412 + 212) = 0;
  v412[232] = 0;
  *(_OWORD *)(v412 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v412 + 252) = 0;
  *(_QWORD *)(v412 + 268) = 0;
  *(_QWORD *)(v412 + 260) = 0;
  v417 = *(_OWORD *)&v1391[16];
  *(_OWORD *)(v412 + 280) = *(_OWORD *)v1391;
  *(_OWORD *)(v412 + 296) = v417;
  v412[312] = 0;
  *((_QWORD *)v412 + 48) = 0;
  *((_OWORD *)v412 + 22) = 0u;
  *((_OWORD *)v412 + 23) = 0u;
  *((_OWORD *)v412 + 20) = 0u;
  *((_OWORD *)v412 + 21) = 0u;
  *((_QWORD *)v412 + 49) = 0x100000001;
  v412[400] = 0;
  v412[88] = 1;
  *(_WORD *)(v412 + 89) = __p[0];
  v412[91] = BYTE2(__p[0]);
  *(_OWORD *)(v412 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v412 + 27) = 7;
  *((_QWORD *)v412 + 14) = 0;
  *((_QWORD *)v412 + 15) = 0;
  *((_DWORD *)v412 + 32) = 0;
  v412[132] = 15;
  if (v409)
  {
    v418 = (unint64_t *)&v409->__shared_owners_;
    do
      v419 = __ldaxr(v418);
    while (__stlxr(v419 - 1, v418));
    if (!v419)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
  *((_QWORD *)v412 + 3) = &off_1E42BE418;
  v420 = *(std::__shared_weak_count **)(v98 + 144);
  *(_QWORD *)(v98 + 136) = v412 + 24;
  *(_QWORD *)(v98 + 144) = v412;
  if (!v420)
    goto LABEL_410;
  v421 = (unint64_t *)&v420->__shared_owners_;
  do
    v422 = __ldaxr(v421);
  while (__stlxr(v422 - 1, v421));
  if (!v422)
  {
    ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
    std::__shared_weak_count::__release_weak(v420);
    if (!v409)
      goto LABEL_414;
  }
  else
  {
LABEL_410:
    if (!v409)
      goto LABEL_414;
  }
  v423 = (unint64_t *)&v409->__shared_owners_;
  do
    v424 = __ldaxr(v423);
  while (__stlxr(v424 - 1, v423));
  if (v424)
  {
LABEL_414:
    if (*(_BYTE *)(v98 + 278))
      goto LABEL_415;
    goto LABEL_430;
  }
  ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
  std::__shared_weak_count::__release_weak(v409);
  if (*(_BYTE *)(v98 + 278))
  {
LABEL_415:
    v425 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
    v426 = *(_QWORD *)(v425 + 328);
    v1389.__sig = *(_QWORD *)(v425 + 320);
    *(_QWORD *)v1389.__opaque = v426;
    if (v426)
    {
      v427 = (unint64_t *)(v426 + 8);
      do
        v428 = __ldxr(v427);
      while (__stxr(v428 + 1, v427));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v429 = operator new(0x198uLL);
    v429[1] = 0;
    v429[2] = 0;
    *v429 = &off_1E42DF5D8;
    *(_OWORD *)__p = *(_OWORD *)v131;
    *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
    v430 = ggl::FlyoverNightDim::QuadPipelineState::QuadPipelineState((uint64_t)(v429 + 3), &v1389, (uint64_t)v1391, __p, 1);
    v431 = *(std::__shared_weak_count **)(v98 + 160);
    *(_QWORD *)(v98 + 152) = v430;
    *(_QWORD *)(v98 + 160) = v429;
    if (v431)
    {
      v432 = (unint64_t *)&v431->__shared_owners_;
      do
        v433 = __ldaxr(v432);
      while (__stlxr(v433 - 1, v432));
      if (!v433)
      {
        ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
        std::__shared_weak_count::__release_weak(v431);
      }
    }
    v434 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v435 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v436 = __ldaxr(v435);
      while (__stlxr(v436 - 1, v435));
      goto LABEL_441;
    }
    goto LABEL_443;
  }
LABEL_430:
  v437 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 200) + 80);
  v438 = *(_QWORD *)(v437 + 328);
  v1389.__sig = *(_QWORD *)(v437 + 320);
  *(_QWORD *)v1389.__opaque = v438;
  if (v438)
  {
    v439 = (unint64_t *)(v438 + 8);
    do
      v440 = __ldxr(v439);
    while (__stxr(v440 + 1, v439));
  }
  v1391[0] = 1;
  *(_OWORD *)&v1391[4] = xmmword_19FFB4BE0;
  memset(&v1391[20], 0, 24);
  v1392 = 15;
  v441 = operator new(0x198uLL);
  v441[1] = 0;
  v441[2] = 0;
  *v441 = &off_1E42DF5D8;
  *(_OWORD *)__p = *(_OWORD *)v131;
  *(_OWORD *)&__p[2] = *(_OWORD *)(v131 + 16);
  v442 = ggl::FlyoverNightDim::QuadPipelineState::QuadPipelineState((uint64_t)(v441 + 3), &v1389, (uint64_t)v1391, __p, 0);
  v443 = *(std::__shared_weak_count **)(v98 + 160);
  *(_QWORD *)(v98 + 152) = v442;
  *(_QWORD *)(v98 + 160) = v441;
  if (v443)
  {
    v444 = (unint64_t *)&v443->__shared_owners_;
    do
      v445 = __ldaxr(v444);
    while (__stlxr(v445 - 1, v444));
    if (!v445)
    {
      ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
      std::__shared_weak_count::__release_weak(v443);
    }
  }
  v434 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v446 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v436 = __ldaxr(v446);
    while (__stlxr(v436 - 1, v446));
LABEL_441:
    if (!v436)
    {
      ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
      std::__shared_weak_count::__release_weak(v434);
    }
  }
LABEL_443:
  *(_QWORD *)(v98 + 56) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 40) + 128) + 456);
  if (v365 && v364)
  {
    v447 = v363[8];
    if (v447 <= v364)
      v447 = v364;
    v363[7] = 0;
    v363[8] = v447;
  }
  v448 = *(_QWORD *)(v1375 + 40);
  v449 = 8 * *(unsigned __int8 *)(v98 + 34);
  v450 = *(_QWORD *)(v448 + v449);
  *(_QWORD *)(v448 + v449) = v98;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  v451 = operator new();
  *(int8x8_t *)v1391 = vext_s8(*(int8x8_t *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 12), *(int8x8_t *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 12), 6uLL);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer(v451, 2, v1375, v1391, 4);
  *(_QWORD *)v451 = &off_1E42AFE98;
  *(_OWORD *)(v451 + 56) = 0u;
  *(_BYTE *)(v451 + 48) = 0;
  *(_OWORD *)(v451 + 88) = 0u;
  *(_OWORD *)(v451 + 72) = 0u;
  *(_OWORD *)(v451 + 104) = 0u;
  *(_OWORD *)(v451 + 120) = 0u;
  *(_OWORD *)(v451 + 136) = 0u;
  *(_OWORD *)(v451 + 152) = 0u;
  *(_OWORD *)(v451 + 168) = 0u;
  *(_OWORD *)(v451 + 184) = 0u;
  *(_QWORD *)(v451 + 200) = 0;
  v452 = operator new();
  *(_QWORD *)(v452 + 32) = 0;
  *(_OWORD *)v452 = 0u;
  *(_OWORD *)(v452 + 16) = 0u;
  *(_DWORD *)(v452 + 32) = 1065353216;
  *(_QWORD *)(v451 + 208) = v452;
  *(_OWORD *)(v451 + 216) = 0u;
  *(_OWORD *)(v451 + 232) = 0u;
  *(_OWORD *)(v451 + 248) = 0u;
  *(_QWORD *)(v451 + 264) = 0;
  v453 = *(_QWORD *)(v1375 + 120);
  *(_WORD *)(v451 + 272) = *(_WORD *)(*(_QWORD *)(v453 + 8) + 18);
  *(_WORD *)(v451 + 274) = *(_WORD *)(*(_QWORD *)(v453 + 8) + 12);
  *(_WORD *)(v451 + 276) = *(_WORD *)(*(_QWORD *)(v453 + 8) + 14);
  *(_WORD *)(v451 + 278) = *(_WORD *)(*(_QWORD *)(v453 + 8) + 16);
  *(_BYTE *)(v451 + 280) = *(_BYTE *)(v453 + 56);
  v454 = (_OWORD *)objc_msgSend(*(id *)(*(_QWORD *)(v451 + 40) + 104), "format", v451 + 88);
  v455 = *(_QWORD *)(v451 + 40);
  v456 = *(unsigned __int8 *)(v451 + 280);
  if (*(_BYTE *)(v451 + 280))
    v457 = 0;
  else
    v457 = 7;
  v1373 = v457;
  memset(&v1391[20], 0, 24);
  v1391[0] = 0;
  *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
  v1392 = 8 * v456;
  v1374 = v455;
  v458 = *(_QWORD *)(*(_QWORD *)(v455 + 200) + 80);
  v459 = *(_QWORD *)(v458 + 536);
  v460 = *(std::__shared_weak_count **)(v458 + 544);
  if (v460)
  {
    v461 = (unint64_t *)&v460->__shared_owners_;
    do
      v462 = __ldxr(v461);
    while (__stxr(v462 + 1, v461));
  }
  v463 = (char *)operator new(0x198uLL);
  v464.i32[0] = 0;
  v465.i32[0] = v456;
  v466 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v465, v464), 0);
  v1372 = v456 ^ 1;
  *((_QWORD *)v463 + 1) = 0;
  *((_QWORD *)v463 + 2) = 0;
  *(_QWORD *)v463 = &off_1E42E3CB8;
  *(_OWORD *)__p = *v454;
  *(_OWORD *)&__p[2] = v454[1];
  v467 = *(_BYTE *)(v451 + 280);
  if ((v468 & 1) == 0)
  {
    v1371 = v466;
    v466 = v1371;
    if ((_DWORD)v1314)
    {
      if ((v1315 & 1) == 0)
      {
        if ((_DWORD)v1314)
        {
          if ((v1342 & 1) == 0
          {
            if ((v1362 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoad::defaultReflection;
            }
            ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r;
            unk_1EE576188 = 1;
          }
          ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE588DA8 = &ggl::FlyoverRoadFillTextured::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE588DB0 = 0;
          if ((v1343 & 1) == 0
          {
            ggl::FlyoverRoadFillTextured::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
            unk_1EE588EF0 = ggl::FlyoverRoad::Blend::reflection(void)::reflection;
            qword_1EE588EF8 = (uint64_t)ggl::FlyoverRoad::Transform::reflection(void)::reflection;
            unk_1EE588F00 = ggl::FlyoverRoad::Color::reflection(void)::reflection;
          }
          qword_1EE588DB8 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE588DC0 = xmmword_19FFB48D0;
        }
      }
      ggl::FlyoverRoadFillTextured::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverRoadFillTextured::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverRoadFillTexturedShader::typedReflection(v1314);
      qword_1EE588D50 = (uint64_t)&ggl::FlyoverRoadFillTexturedShader::typedReflection(void)::ref;
      if ((v1316 & 1) == 0
      {
        ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE588DE0 = 0;
        qword_1EE588DE8 = (uint64_t)"";
        dword_1EE588DF0 = 0;
        qword_1EE588DF8 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE588E00 = 4;
      }
      qword_1EE588D58 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1EE588D60 = 1;
      qword_1EE588D68 = 0;
      unk_1EE588D70 = 1;
      qword_1EE588D78 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1EE588D80 = 0;
      if ((v1317 & 1) == 0
      {
        ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE588E20 = 0;
        qword_1EE588E28 = (uint64_t)"view";
        dword_1EE588E30 = 3;
        qword_1EE588E38 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        unk_1EE588E40 = vdupq_n_s64(1uLL);
        qword_1EE588E50 = 1;
        unk_1EE588E58 = "blend";
        dword_1EE588E60 = 3;
        qword_1EE588E68 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineConstantBlendBinding(void)::reflection;
        *(_OWORD *)algn_1EE588E70 = xmmword_19FFB2DB0;
        qword_1EE588E80 = 2;
        unk_1EE588E88 = "transform";
        dword_1EE588E90 = 3;
        qword_1EE588E98 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineConstantTransformBinding(void)::reflection;
        unk_1EE588EA0 = xmmword_19FFB3000;
        qword_1EE588EB0 = 3;
        unk_1EE588EB8 = "color";
        dword_1EE588EC0 = 3;
        qword_1EE588EC8 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineConstantColorBinding(void)::reflection;
        unk_1EE588ED0 = 2;
      }
      qword_1EE588D88 = (uint64_t)&ggl::FlyoverRoadFillTextured::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1EE588D90 = 4;
      v466 = v1371;
    }
  }
  v1370 = vbslq_s8(v466, (int8x16_t)xmmword_19FFB35B0, (int8x16_t)xmmword_19FFB3060);
  if (v460)
  {
    v469 = (unint64_t *)&v460->__shared_owners_;
    do
      v470 = __ldxr(v469);
    while (__stxr(v470 + 1, v469));
    *((_DWORD *)v463 + 14) = 0;
    *((_QWORD *)v463 + 5) = 0;
    *((_QWORD *)v463 + 6) = 0;
    *((_QWORD *)v463 + 3) = &off_1E42B6760;
    *((_QWORD *)v463 + 4) = 0;
    *((_QWORD *)v463 + 8) = &ggl::FlyoverRoadFillTextured::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v463 + 9) = v459;
    *((_QWORD *)v463 + 10) = v460;
    do
      v471 = __ldxr(v469);
    while (__stxr(v471 + 1, v469));
  }
  else
  {
    *((_DWORD *)v463 + 14) = 0;
    *((_QWORD *)v463 + 5) = 0;
    *((_QWORD *)v463 + 6) = 0;
    *((_QWORD *)v463 + 3) = &off_1E42B6760;
    *((_QWORD *)v463 + 4) = 0;
    *((_QWORD *)v463 + 8) = &ggl::FlyoverRoadFillTextured::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v463 + 9) = v459;
    *((_QWORD *)v463 + 10) = 0;
  }
  v463[136] = 0;
  *(_OWORD *)(v463 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v463 + 156) = 0;
  *(_QWORD *)(v463 + 172) = 0;
  *(_QWORD *)(v463 + 164) = 0;
  v463[184] = 0;
  *(_OWORD *)(v463 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v463 + 204) = 0;
  *(_QWORD *)(v463 + 220) = 0;
  *(_QWORD *)(v463 + 212) = 0;
  v463[232] = 0;
  *(_OWORD *)(v463 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v463 + 252) = 0;
  *(_QWORD *)(v463 + 268) = 0;
  *(_QWORD *)(v463 + 260) = 0;
  v472 = *(_OWORD *)&__p[2];
  *(_OWORD *)(v463 + 280) = *(_OWORD *)__p;
  *(_OWORD *)(v463 + 296) = v472;
  v463[312] = 0;
  *((_QWORD *)v463 + 48) = 0;
  *((_OWORD *)v463 + 22) = 0u;
  *((_OWORD *)v463 + 23) = 0u;
  *((_OWORD *)v463 + 20) = 0u;
  *((_OWORD *)v463 + 21) = 0u;
  *((_QWORD *)v463 + 49) = 0x100000001;
  v463[400] = 0;
  v463[88] = v1372;
  v463[91] = BYTE2(v1383);
  *(_WORD *)(v463 + 89) = v1383;
  *(int8x16_t *)(v463 + 92) = v1370;
  *((_DWORD *)v463 + 27) = v1373;
  *((_QWORD *)v463 + 14) = 0;
  *((_QWORD *)v463 + 15) = 0;
  *((_DWORD *)v463 + 32) = 0;
  v463[132] = 15;
  if (v460)
  {
    v473 = (unint64_t *)&v460->__shared_owners_;
    do
      v474 = __ldaxr(v473);
    while (__stlxr(v474 - 1, v473));
    if (!v474)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  v463[328] = v467;
  v475 = vceqzq_s8(*(int8x16_t *)(v463 + 328));
  v476 = vmovl_high_s8(v475);
  v477 = vmovl_s16(*(int16x4_t *)v476.i8);
  v478.i64[0] = v477.u32[0];
  v478.i64[1] = v477.u32[1];
  v479 = v478;
  v480 = vmovl_s8(*(int8x8_t *)v475.i8);
  v481 = vmovl_s16(*(int16x4_t *)v480.i8);
  v478.i64[0] = v481.u32[0];
  v478.i64[1] = v481.u32[1];
  v482 = v478;
  v483 = vmovl_high_s16(v476);
  v478.i64[0] = v483.u32[0];
  v478.i64[1] = v483.u32[1];
  v484 = v478;
  v485 = vmovl_high_s16(v480);
  v478.i64[0] = v485.u32[0];
  v478.i64[1] = v485.u32[1];
  v486 = v478;
  v478.i64[0] = v477.u32[2];
  v478.i64[1] = v477.u32[3];
  v487 = v478;
  v478.i64[0] = v481.u32[2];
  v478.i64[1] = v481.u32[3];
  v488 = v478;
  v478.i64[0] = v483.u32[2];
  v478.i64[1] = v483.u32[3];
  v489 = v478;
  v478.i64[0] = v485.u32[2];
  v478.i64[1] = v485.u32[3];
  v490 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v478);
  v491 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v489);
  v492 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v488);
  v493 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v484);
  v494 = vceqzq_s8(*(int8x16_t *)(v463 + 344));
  v495 = vmovl_high_s8(v494);
  v496 = vmovl_s16(*(int16x4_t *)v495.i8);
  v478.i64[0] = v496.u32[0];
  v478.i64[1] = v496.u32[1];
  v497 = v478;
  v498 = vmovl_s8(*(int8x8_t *)v494.i8);
  v499 = vmovl_s16(*(int16x4_t *)v498.i8);
  v478.i64[0] = v499.u32[0];
  v478.i64[1] = v499.u32[1];
  v500 = v478;
  v501 = vmovl_high_s16(v495);
  v478.i64[0] = v501.u32[0];
  v478.i64[1] = v501.u32[1];
  v502 = v478;
  v503 = vmovl_high_s16(v498);
  v478.i64[0] = v503.u32[0];
  v478.i64[1] = v503.u32[1];
  v504 = v478;
  v478.i64[0] = v496.u32[2];
  v478.i64[1] = v496.u32[3];
  v505 = v478;
  v478.i64[0] = v499.u32[2];
  v478.i64[1] = v499.u32[3];
  v506 = v478;
  v478.i64[0] = v501.u32[2];
  v478.i64[1] = v501.u32[3];
  v507 = v478;
  v478.i64[0] = v503.u32[2];
  v478.i64[1] = v503.u32[3];
  v508 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v507);
  v509 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v497), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v479));
  v510 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v500), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v482));
  v511 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v502), v493);
  v512 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v504), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v486));
  v513 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v505), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v487));
  v514 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v506), v492);
  v515 = vorrq_s8(v508, v491);
  v516 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v478), v490);
  v517 = vceqzq_s8(*(int8x16_t *)(v463 + 360));
  v518 = vmovl_high_s8(v517);
  v519 = vmovl_s16(*(int16x4_t *)v518.i8);
  v478.i64[0] = v519.i32[0];
  v478.i64[1] = v519.i32[1];
  v520 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v478);
  v521 = vceqzq_s8(*(int8x16_t *)(v463 + 376));
  v522 = vmovl_high_s8(v521);
  v523 = vmovl_s16(*(int16x4_t *)v522.i8);
  v478.i64[0] = v523.i32[0];
  v478.i64[1] = v523.i32[1];
  v524 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v478), v520), v509);
  v525 = vmovl_s8(*(int8x8_t *)v517.i8);
  v526 = vmovl_s16(*(int16x4_t *)v525.i8);
  v478.i64[0] = v526.i32[0];
  v478.i64[1] = v526.i32[1];
  v527 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v478);
  v528 = vmovl_s8(*(int8x8_t *)v521.i8);
  v529 = vmovl_s16(*(int16x4_t *)v528.i8);
  v478.i64[0] = v529.i32[0];
  v478.i64[1] = v529.i32[1];
  v530 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v478), v527), v510);
  v531 = vmovl_high_s16(v518);
  v478.i64[0] = v531.i32[0];
  v478.i64[1] = v531.i32[1];
  v532 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v478);
  v533 = vmovl_high_s16(v522);
  v478.i64[0] = v533.i32[0];
  v478.i64[1] = v533.i32[1];
  v534 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v478), v532), v511);
  v535 = vmovl_high_s16(v525);
  v478.i64[0] = v535.i32[0];
  v478.i64[1] = v535.i32[1];
  v536 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v478);
  v537 = vmovl_high_s16(v528);
  v478.i64[0] = v537.i32[0];
  v478.i64[1] = v537.i32[1];
  v538 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v478), v536), v512);
  v478.i64[0] = v519.i32[2];
  v478.i64[1] = v519.i32[3];
  v539 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v478);
  v478.i64[0] = v523.i32[2];
  v478.i64[1] = v523.i32[3];
  v540 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v478), v539), v513);
  v478.i64[0] = v526.i32[2];
  v478.i64[1] = v526.i32[3];
  v541 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v478);
  v478.i64[0] = v529.i32[2];
  v478.i64[1] = v529.i32[3];
  v542 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v478), v541), v514);
  v478.i64[0] = v531.i32[2];
  v478.i64[1] = v531.i32[3];
  v543 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v478);
  v478.i64[0] = v533.i32[2];
  v478.i64[1] = v533.i32[3];
  v544 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v478), v543), v515);
  v478.i64[0] = v535.i32[2];
  v478.i64[1] = v535.i32[3];
  v545 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v478);
  v478.i64[0] = v537.i32[2];
  v478.i64[1] = v537.i32[3];
  *((_QWORD *)v463 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v530, v524), vorrq_s8(v538, v534)), (int64x2_t)vorrq_s8(vorrq_s8(v542, v540), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v478), v545), v516), v544))));
  *((_QWORD *)v463 + 3) = &off_1E42BB180;
  v463[312] = 1;
  v546 = *(std::__shared_weak_count **)(v451 + 96);
  *(_QWORD *)(v451 + 88) = v463 + 24;
  *(_QWORD *)(v451 + 96) = v463;
  if (v546)
  {
    v547 = (unint64_t *)&v546->__shared_owners_;
    do
      v548 = __ldaxr(v547);
    while (__stlxr(v548 - 1, v547));
    if (!v548)
    {
      ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
      std::__shared_weak_count::__release_weak(v546);
    }
  }
  if (v460)
  {
    v549 = (unint64_t *)&v460->__shared_owners_;
    do
      v550 = __ldaxr(v549);
    while (__stlxr(v550 - 1, v549));
    if (!v550)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  v551 = *(_QWORD *)(*(_QWORD *)(v1374 + 200) + 80);
  v552 = *(_QWORD *)(v551 + 512);
  v553 = *(std::__shared_weak_count **)(v551 + 520);
  if (v553)
  {
    v554 = (unint64_t *)&v553->__shared_owners_;
    do
      v555 = __ldxr(v554);
    while (__stxr(v555 + 1, v554));
  }
  v556 = (char *)operator new(0x198uLL);
  *((_QWORD *)v556 + 1) = 0;
  *((_QWORD *)v556 + 2) = 0;
  *(_QWORD *)v556 = &off_1E42E3E08;
  *(_OWORD *)__p = *v454;
  *(_OWORD *)&__p[2] = v454[1];
  v557 = *(_BYTE *)(v451 + 280);
  if ((v558 & 1) == 0
  {
    if ((v1318 & 1) == 0
    {
      if ((v1344 & 1) == 0
      {
        if ((v1363 & 1) == 0
        {
          ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoad::defaultReflection;
        }
        ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r;
        unk_1EE576188 = 1;
      }
      ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r;
      *(_QWORD *)algn_1EE58C048 = &ggl::FlyoverRoadFillProcedural::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
      qword_1EE58C050 = 0;
      if ((v1345 & 1) == 0
      {
        ggl::FlyoverRoadFillProcedural::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
        unk_1EE58C1A0 = ggl::FlyoverRoad::Blend::reflection(void)::reflection;
        qword_1EE58C1A8 = (uint64_t)ggl::FlyoverRoad::Transform::reflection(void)::reflection;
        unk_1EE58C1B0 = ggl::FlyoverRoad::Color::reflection(void)::reflection;
      }
      qword_1EE58C058 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineDataDefaultPipelineConstantStructs(void)::ref;
      unk_1EE58C060 = xmmword_19FFB3690;
    }
    ggl::FlyoverRoadFillProcedural::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::typedReflection(void)::ref;
    if ((v1319 & 1) == 0
    {
      ggl::FlyoverRoadFillProceduralShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadFillProceduralShader";
      if ((v1346 & 1) == 0
      {
        v1364 = ggl::crc32::compute<38ul>("FlyoverRoadFillProceduralShaderVertex");
        qword_1ECE428B0 = (uint64_t)"FlyoverRoadFillProceduralShader";
        unk_1ECE428B8 = ggl::flyoverRoadFillProceduralShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE428C0 = 1;
        unk_1ECE428C8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE428D0 = 4;
        unk_1ECE428D8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE428E0 = 0;
        unk_1ECE428E8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadFillProceduralShaderVertexFunctionDescriptor(void)::ref = v1364;
        *(_DWORD *)algn_1ECE428AC = 0;
        qword_1ECE428F0 = 0;
        unk_1ECE428F8 = &ggl::flyoverRoadFillProceduralShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42908 = 0;
        unk_1ECE42910 = 0;
        qword_1ECE42900 = 0;
      }
      qword_1ECE3BB00 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3BB08 = ggl::crc32::compute<38ul>("FlyoverRoadFillProceduralShaderVertex");
      if ((v1347 & 1) == 0
      {
        ggl::flyoverRoadFillProceduralShaderFragmentFunctionDescriptor(void)::ref = 0x1BEAEB913;
        qword_1ECE42F88 = (uint64_t)"FlyoverRoadFillProceduralShader";
        unk_1ECE42F90 = 0;
        qword_1ECE42F98 = 0;
        unk_1ECE42FA0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42FA8 = 2;
        unk_1ECE42FB0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE42FB8 = 0;
        unk_1ECE42FC0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE42FC8 = 0;
        unk_1ECE42FD0 = &ggl::flyoverRoadFillProceduralShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42FE0 = 0;
        unk_1ECE42FE8 = 0;
        qword_1ECE42FD8 = 0;
      }
      qword_1ECE3BB10 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3BB18 = -1095845613;
      qword_1ECE3BB20 = (uint64_t)ggl::flyoverRoadFillProceduralShaderShaderConstants(void)::ref;
      unk_1ECE3BB28 = 4;
      qword_1ECE3BB30 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderShaderTextures(void)::ref;
      unk_1ECE3BB38 = 0;
      qword_1ECE3BB40 = (uint64_t)&ggl::flyoverRoadFillProceduralShaderShaderSamplers(void)::ref;
      unk_1ECE3BB48 = 0;
    }
    qword_1EE58BFF0 = (uint64_t)&ggl::FlyoverRoadFillProceduralShader::typedReflection(void)::ref;
    if ((v1320 & 1) == 0
    {
      ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
      unk_1EE58C090 = 0;
      qword_1EE58C098 = (uint64_t)"";
      dword_1EE58C0A0 = 0;
      qword_1EE58C0A8 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
      unk_1EE58C0B0 = 4;
    }
    qword_1EE58BFF8 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
    unk_1EE58C000 = 1;
    qword_1EE58C008 = 0;
    unk_1EE58C010 = 0;
    qword_1EE58C018 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
    unk_1EE58C020 = 0;
    if ((v1321 & 1) == 0
    {
      ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
      unk_1EE58C0D0 = 0;
      qword_1EE58C0D8 = (uint64_t)"view";
      dword_1EE58C0E0 = 3;
      qword_1EE58C0E8 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
      *(int64x2_t *)algn_1EE58C0F0 = vdupq_n_s64(1uLL);
      qword_1EE58C100 = 1;
      unk_1EE58C108 = "blend";
      dword_1EE58C110 = 3;
      qword_1EE58C118 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineConstantBlendBinding(void)::reflection;
      unk_1EE58C120 = xmmword_19FFB2DB0;
      qword_1EE58C130 = 2;
      unk_1EE58C138 = "transform";
      dword_1EE58C140 = 3;
      qword_1EE58C148 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineConstantTransformBinding(void)::reflection;
      *(_OWORD *)algn_1EE58C150 = xmmword_19FFB3000;
      qword_1EE58C160 = 3;
      unk_1EE58C168 = "color";
      dword_1EE58C170 = 3;
      qword_1EE58C178 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineConstantColorBinding(void)::reflection;
      unk_1EE58C180 = 2;
    }
    qword_1EE58C028 = (uint64_t)&ggl::FlyoverRoadFillProcedural::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
    unk_1EE58C030 = 4;
  }
  if (v553)
  {
    v559 = (unint64_t *)&v553->__shared_owners_;
    do
      v560 = __ldxr(v559);
    while (__stxr(v560 + 1, v559));
    *((_DWORD *)v556 + 14) = 0;
    *((_QWORD *)v556 + 5) = 0;
    *((_QWORD *)v556 + 6) = 0;
    *((_QWORD *)v556 + 3) = &off_1E42B6760;
    *((_QWORD *)v556 + 4) = 0;
    *((_QWORD *)v556 + 8) = &ggl::FlyoverRoadFillProcedural::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v556 + 9) = v552;
    *((_QWORD *)v556 + 10) = v553;
    do
      v561 = __ldxr(v559);
    while (__stxr(v561 + 1, v559));
  }
  else
  {
    *((_DWORD *)v556 + 14) = 0;
    *((_QWORD *)v556 + 5) = 0;
    *((_QWORD *)v556 + 6) = 0;
    *((_QWORD *)v556 + 3) = &off_1E42B6760;
    *((_QWORD *)v556 + 4) = 0;
    *((_QWORD *)v556 + 8) = &ggl::FlyoverRoadFillProcedural::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v556 + 9) = v552;
    *((_QWORD *)v556 + 10) = 0;
  }
  v556[136] = 0;
  *(_OWORD *)(v556 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v556 + 156) = 0;
  *(_QWORD *)(v556 + 172) = 0;
  *(_QWORD *)(v556 + 164) = 0;
  v556[184] = 0;
  *(_OWORD *)(v556 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v556 + 204) = 0;
  *(_QWORD *)(v556 + 220) = 0;
  *(_QWORD *)(v556 + 212) = 0;
  v556[232] = 0;
  *(_OWORD *)(v556 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v556 + 252) = 0;
  *(_QWORD *)(v556 + 268) = 0;
  *(_QWORD *)(v556 + 260) = 0;
  v562 = *(_OWORD *)&__p[2];
  *(_OWORD *)(v556 + 280) = *(_OWORD *)__p;
  *(_OWORD *)(v556 + 296) = v562;
  v556[312] = 0;
  *((_QWORD *)v556 + 48) = 0;
  *((_OWORD *)v556 + 22) = 0u;
  *((_OWORD *)v556 + 23) = 0u;
  *((_OWORD *)v556 + 20) = 0u;
  *((_OWORD *)v556 + 21) = 0u;
  *((_QWORD *)v556 + 49) = 0x100000001;
  v556[400] = 0;
  v556[88] = v1372;
  v556[91] = BYTE2(v1383);
  *(_WORD *)(v556 + 89) = v1383;
  *(int8x16_t *)(v556 + 92) = v1370;
  *((_DWORD *)v556 + 27) = v1373;
  *((_QWORD *)v556 + 14) = 0;
  *((_QWORD *)v556 + 15) = 0;
  *((_DWORD *)v556 + 32) = 0;
  v556[132] = 15;
  if (v553)
  {
    v563 = (unint64_t *)&v553->__shared_owners_;
    do
      v564 = __ldaxr(v563);
    while (__stlxr(v564 - 1, v563));
    if (!v564)
    {
      ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
      std::__shared_weak_count::__release_weak(v553);
    }
  }
  v556[328] = v557;
  v565 = vceqzq_s8(*(int8x16_t *)(v556 + 328));
  v566 = vmovl_high_s8(v565);
  v567 = vmovl_s16(*(int16x4_t *)v566.i8);
  v568.i64[0] = v567.u32[0];
  v568.i64[1] = v567.u32[1];
  v569 = v568;
  v570 = vmovl_s8(*(int8x8_t *)v565.i8);
  v571 = vmovl_s16(*(int16x4_t *)v570.i8);
  v568.i64[0] = v571.u32[0];
  v568.i64[1] = v571.u32[1];
  v572 = v568;
  v573 = vmovl_high_s16(v566);
  v568.i64[0] = v573.u32[0];
  v568.i64[1] = v573.u32[1];
  v574 = v568;
  v575 = vmovl_high_s16(v570);
  v568.i64[0] = v575.u32[0];
  v568.i64[1] = v575.u32[1];
  v576 = v568;
  v568.i64[0] = v567.u32[2];
  v568.i64[1] = v567.u32[3];
  v577 = v568;
  v568.i64[0] = v571.u32[2];
  v568.i64[1] = v571.u32[3];
  v578 = v568;
  v568.i64[0] = v573.u32[2];
  v568.i64[1] = v573.u32[3];
  v579 = v568;
  v568.i64[0] = v575.u32[2];
  v568.i64[1] = v575.u32[3];
  v580 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v568);
  v581 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v579);
  v582 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v578);
  v583 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v574);
  v584 = vceqzq_s8(*(int8x16_t *)(v556 + 344));
  v585 = vmovl_high_s8(v584);
  v586 = vmovl_s16(*(int16x4_t *)v585.i8);
  v568.i64[0] = v586.u32[0];
  v568.i64[1] = v586.u32[1];
  v587 = v568;
  v588 = vmovl_s8(*(int8x8_t *)v584.i8);
  v589 = vmovl_s16(*(int16x4_t *)v588.i8);
  v568.i64[0] = v589.u32[0];
  v568.i64[1] = v589.u32[1];
  v590 = v568;
  v591 = vmovl_high_s16(v585);
  v568.i64[0] = v591.u32[0];
  v568.i64[1] = v591.u32[1];
  v592 = v568;
  v593 = vmovl_high_s16(v588);
  v568.i64[0] = v593.u32[0];
  v568.i64[1] = v593.u32[1];
  v594 = v568;
  v568.i64[0] = v586.u32[2];
  v568.i64[1] = v586.u32[3];
  v595 = v568;
  v568.i64[0] = v589.u32[2];
  v568.i64[1] = v589.u32[3];
  v596 = v568;
  v568.i64[0] = v591.u32[2];
  v568.i64[1] = v591.u32[3];
  v597 = v568;
  v568.i64[0] = v593.u32[2];
  v568.i64[1] = v593.u32[3];
  v598 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v597);
  v599 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v587), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v569));
  v600 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v590), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v572));
  v601 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v592), v583);
  v602 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v594), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v576));
  v603 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v595), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v577));
  v604 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v596), v582);
  v605 = vorrq_s8(v598, v581);
  v606 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v568), v580);
  v607 = vceqzq_s8(*(int8x16_t *)(v556 + 360));
  v608 = vmovl_s8(*(int8x8_t *)v607.i8);
  v609 = vmovl_high_s16(v608);
  v610 = vmovl_high_s8(v607);
  v611 = vmovl_high_s16(v610);
  v612 = vmovl_s16(*(int16x4_t *)v608.i8);
  v613 = vmovl_s16(*(int16x4_t *)v610.i8);
  v568.i64[0] = v612.i32[0];
  v568.i64[1] = v612.i32[1];
  v614 = v568;
  v568.i64[0] = v613.i32[0];
  v568.i64[1] = v613.i32[1];
  v615 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v568);
  v616 = vceqzq_s8(*(int8x16_t *)(v556 + 376));
  v617 = vmovl_high_s8(v616);
  v618 = vmovl_s16(*(int16x4_t *)v617.i8);
  v568.i64[0] = v618.i32[0];
  v568.i64[1] = v618.i32[1];
  v619 = vmovl_s8(*(int8x8_t *)v616.i8);
  v620 = vmovl_s16(*(int16x4_t *)v619.i8);
  v621 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v568), v615), v599);
  v568.i64[0] = v620.i32[0];
  v568.i64[1] = v620.i32[1];
  v622 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v568), vbicq_s8((int8x16_t)xmmword_19FFB3170, v614));
  v568.i64[0] = v611.i32[0];
  v568.i64[1] = v611.i32[1];
  v623 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v568);
  v624 = vmovl_high_s16(v617);
  v625 = vorrq_s8(v622, v600);
  v568.i64[0] = v624.i32[0];
  v568.i64[1] = v624.i32[1];
  v626 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v568), v623);
  v568.i64[0] = v609.i32[0];
  v568.i64[1] = v609.i32[1];
  v627 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v568);
  v628 = vmovl_high_s16(v619);
  v568.i64[0] = v628.i32[0];
  v568.i64[1] = v628.i32[1];
  v629 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v568), v627), v602);
  v568.i64[0] = v613.i32[2];
  v568.i64[1] = v613.i32[3];
  v630 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v568);
  v568.i64[0] = v618.i32[2];
  v568.i64[1] = v618.i32[3];
  v631 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v568), v630), v603);
  v568.i64[0] = v612.i32[2];
  v568.i64[1] = v612.i32[3];
  v632 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v568);
  v568.i64[0] = v620.i32[2];
  v568.i64[1] = v620.i32[3];
  v633 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v568), v632), v604);
  v568.i64[0] = v611.i32[2];
  v568.i64[1] = v611.i32[3];
  v634 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v568);
  v568.i64[0] = v624.i32[2];
  v568.i64[1] = v624.i32[3];
  v635 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v568), v634), v605);
  v568.i64[0] = v609.i32[2];
  v568.i64[1] = v609.i32[3];
  v636 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v568);
  v568.i64[0] = v628.i32[2];
  v568.i64[1] = v628.i32[3];
  *((_QWORD *)v556 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v625, v621), vorrq_s8(v629, vorrq_s8(v626, v601))), (int64x2_t)vorrq_s8(vorrq_s8(v633, v631), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v568), v636), v606), v635))));
  *((_QWORD *)v556 + 3) = &off_1E42BB360;
  v556[312] = 1;
  v637 = *(std::__shared_weak_count **)(v451 + 112);
  *(_QWORD *)(v451 + 104) = v556 + 24;
  *(_QWORD *)(v451 + 112) = v556;
  if (v637)
  {
    v638 = (unint64_t *)&v637->__shared_owners_;
    do
      v639 = __ldaxr(v638);
    while (__stlxr(v639 - 1, v638));
    if (!v639)
    {
      ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
      std::__shared_weak_count::__release_weak(v637);
    }
  }
  if (v553)
  {
    v640 = (unint64_t *)&v553->__shared_owners_;
    do
      v641 = __ldaxr(v640);
    while (__stlxr(v641 - 1, v640));
    if (!v641)
    {
      ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
      std::__shared_weak_count::__release_weak(v553);
    }
  }
  v642 = *(_QWORD *)(*(_QWORD *)(v1374 + 200) + 80);
  v643 = *(_QWORD *)(v642 + 584);
  v644 = *(std::__shared_weak_count **)(v642 + 592);
  if (v644)
  {
    v645 = (unint64_t *)&v644->__shared_owners_;
    do
      v646 = __ldxr(v645);
    while (__stxr(v646 + 1, v645));
  }
  v647 = (char *)operator new(0x198uLL);
  *((_QWORD *)v647 + 1) = 0;
  *((_QWORD *)v647 + 2) = 0;
  *(_QWORD *)v647 = &off_1E42E3E40;
  *(_OWORD *)__p = *v454;
  *(_OWORD *)&__p[2] = v454[1];
  v648 = *(_BYTE *)(v451 + 280);
  if ((v649 & 1) == 0
  {
    if ((v1322 & 1) == 0
    {
      if ((v1348 & 1) == 0
      {
        if ((v1365 & 1) == 0
        {
          ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoad::defaultReflection;
        }
        ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r;
        unk_1EE576188 = 1;
      }
      ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r;
      unk_1EE58C660 = &ggl::FlyoverRoadStrokeTextured::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
      qword_1EE58C668 = 0;
      if ((v1349 & 1) == 0
      {
        ggl::FlyoverRoadStrokeTextured::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
        *(_QWORD *)algn_1EE58C7D8 = ggl::FlyoverRoad::Blend::reflection(void)::reflection;
        qword_1EE58C7E0 = (uint64_t)ggl::FlyoverRoad::Transform::reflection(void)::reflection;
        unk_1EE58C7E8 = ggl::FlyoverRoad::Color::reflection(void)::reflection;
        qword_1EE58C7F0 = (uint64_t)ggl::FlyoverRoad::RibbonExtra::reflection(void)::reflection;
      }
      qword_1EE58C670 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineDataDefaultPipelineConstantStructs(void)::ref;
      unk_1EE58C678 = xmmword_19FFB3030;
    }
    ggl::FlyoverRoadStrokeTextured::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::typedReflection(void)::ref;
    if ((v1323 & 1) == 0
    {
      ggl::FlyoverRoadStrokeTexturedShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadStrokeTexturedShader";
      if ((v1350 & 1) == 0
      {
        v1366 = ggl::crc32::compute<38ul>("FlyoverRoadStrokeTexturedShaderVertex");
        qword_1ECE42998 = (uint64_t)"FlyoverRoadStrokeTexturedShader";
        unk_1ECE429A0 = ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE429A8 = 1;
        unk_1ECE429B0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE429B8 = 5;
        unk_1ECE429C0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE429C8 = 0;
        unk_1ECE429D0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadStrokeTexturedShaderVertexFunctionDescriptor(void)::ref = v1366;
        *(_DWORD *)algn_1ECE42994 = 0;
        qword_1ECE429D8 = 0;
        unk_1ECE429E0 = &ggl::flyoverRoadStrokeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE429F0 = 0;
        unk_1ECE429F8 = 0;
        qword_1ECE429E8 = 0;
      }
      qword_1ECE3BB58 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3BB60 = ggl::crc32::compute<38ul>("FlyoverRoadStrokeTexturedShaderVertex");
      if ((v1351 & 1) == 0
      {
        ggl::flyoverRoadStrokeTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1B1863BE2;
        qword_1ECE43070 = (uint64_t)"FlyoverRoadStrokeTexturedShader";
        unk_1ECE43078 = 0;
        qword_1ECE43080 = 0;
        unk_1ECE43088 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE43090 = 2;
        unk_1ECE43098 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE430A0 = 0;
        unk_1ECE430A8 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE430B0 = 1;
        unk_1ECE430B8 = &ggl::flyoverRoadStrokeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE430C8 = 0;
        unk_1ECE430D0 = 0;
        qword_1ECE430C0 = 1;
      }
      qword_1ECE3BB68 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3BB70 = -1316602910;
      qword_1ECE3BB78 = (uint64_t)ggl::flyoverRoadStrokeTexturedShaderShaderConstants(void)::ref;
      unk_1ECE3BB80 = 5;
      qword_1ECE3BB88 = (uint64_t)ggl::flyoverRoadStrokeTexturedShaderShaderTextures(void)::ref;
      unk_1ECE3BB90 = 1;
      qword_1ECE3BB98 = (uint64_t)&ggl::flyoverRoadStrokeTexturedShaderShaderSamplers(void)::ref;
      unk_1ECE3BBA0 = 1;
    }
    qword_1EE58C608 = (uint64_t)&ggl::FlyoverRoadStrokeTexturedShader::typedReflection(void)::ref;
    if ((v1324 & 1) == 0
    {
      ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE58C698 = 0;
      qword_1EE58C6A0 = (uint64_t)"";
      dword_1EE58C6A8 = 0;
      qword_1EE58C6B0 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
      unk_1EE58C6B8 = 4;
    }
    qword_1EE58C610 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE58C618 = 1;
    qword_1EE58C620 = 0;
    unk_1EE58C628 = 1;
    qword_1EE58C630 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
    unk_1EE58C638 = 0;
    if ((v1325 & 1) == 0
    {
      ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE58C6D8 = 0;
      qword_1EE58C6E0 = (uint64_t)"view";
      dword_1EE58C6E8 = 3;
      qword_1EE58C6F0 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
      unk_1EE58C6F8 = vdupq_n_s64(1uLL);
      qword_1EE58C708 = 1;
      unk_1EE58C710 = "blend";
      dword_1EE58C718 = 3;
      qword_1EE58C720 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantBlendBinding(void)::reflection;
      unk_1EE58C728 = xmmword_19FFB2DB0;
      qword_1EE58C738 = 2;
      unk_1EE58C740 = "transform";
      dword_1EE58C748 = 3;
      qword_1EE58C750 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantTransformBinding(void)::reflection;
      unk_1EE58C758 = xmmword_19FFB3000;
      qword_1EE58C768 = 3;
      unk_1EE58C770 = "color";
      dword_1EE58C778 = 3;
      qword_1EE58C780 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantColorBinding(void)::reflection;
      unk_1EE58C788 = xmmword_19FFB3CD0;
      qword_1EE58C798 = 4;
      unk_1EE58C7A0 = "ribbonExtra";
      dword_1EE58C7A8 = 3;
      qword_1EE58C7B0 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantRibbonExtraBinding(void)::reflection;
      unk_1EE58C7B8 = 1;
    }
    qword_1EE58C640 = (uint64_t)&ggl::FlyoverRoadStrokeTextured::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
    *(_QWORD *)algn_1EE58C648 = 5;
  }
  if (v644)
  {
    v650 = (unint64_t *)&v644->__shared_owners_;
    do
      v651 = __ldxr(v650);
    while (__stxr(v651 + 1, v650));
    *((_DWORD *)v647 + 14) = 0;
    *((_QWORD *)v647 + 5) = 0;
    *((_QWORD *)v647 + 6) = 0;
    *((_QWORD *)v647 + 3) = &off_1E42B6760;
    *((_QWORD *)v647 + 4) = 0;
    *((_QWORD *)v647 + 8) = &ggl::FlyoverRoadStrokeTextured::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v647 + 9) = v643;
    *((_QWORD *)v647 + 10) = v644;
    do
      v652 = __ldxr(v650);
    while (__stxr(v652 + 1, v650));
  }
  else
  {
    *((_DWORD *)v647 + 14) = 0;
    *((_QWORD *)v647 + 5) = 0;
    *((_QWORD *)v647 + 6) = 0;
    *((_QWORD *)v647 + 3) = &off_1E42B6760;
    *((_QWORD *)v647 + 4) = 0;
    *((_QWORD *)v647 + 8) = &ggl::FlyoverRoadStrokeTextured::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v647 + 9) = v643;
    *((_QWORD *)v647 + 10) = 0;
  }
  v647[136] = 0;
  *(_OWORD *)(v647 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v647 + 156) = 0;
  *(_QWORD *)(v647 + 172) = 0;
  *(_QWORD *)(v647 + 164) = 0;
  v647[184] = 0;
  *(_OWORD *)(v647 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v647 + 204) = 0;
  *(_QWORD *)(v647 + 220) = 0;
  *(_QWORD *)(v647 + 212) = 0;
  v647[232] = 0;
  *(_OWORD *)(v647 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v647 + 252) = 0;
  *(_QWORD *)(v647 + 268) = 0;
  *(_QWORD *)(v647 + 260) = 0;
  v653 = *(_OWORD *)&__p[2];
  *(_OWORD *)(v647 + 280) = *(_OWORD *)__p;
  *(_OWORD *)(v647 + 296) = v653;
  v647[312] = 0;
  *((_QWORD *)v647 + 48) = 0;
  *((_OWORD *)v647 + 22) = 0u;
  *((_OWORD *)v647 + 23) = 0u;
  *((_OWORD *)v647 + 20) = 0u;
  *((_OWORD *)v647 + 21) = 0u;
  *((_QWORD *)v647 + 49) = 0x100000001;
  v647[400] = 0;
  v647[88] = v1372;
  v647[91] = v1382;
  *(_WORD *)(v647 + 89) = v1381;
  *(int8x16_t *)(v647 + 92) = v1370;
  *((_DWORD *)v647 + 27) = v1373;
  *((_QWORD *)v647 + 14) = 0;
  *((_QWORD *)v647 + 15) = 0;
  *((_DWORD *)v647 + 32) = 0;
  v647[132] = 15;
  if (v644)
  {
    v654 = (unint64_t *)&v644->__shared_owners_;
    do
      v655 = __ldaxr(v654);
    while (__stlxr(v655 - 1, v654));
    if (!v655)
    {
      ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
      std::__shared_weak_count::__release_weak(v644);
    }
  }
  v647[328] = v648;
  v656 = vceqzq_s8(*(int8x16_t *)(v647 + 328));
  v657 = vmovl_high_s8(v656);
  v658 = vmovl_s16(*(int16x4_t *)v657.i8);
  v659.i64[0] = v658.u32[0];
  v659.i64[1] = v658.u32[1];
  v660 = v659;
  v661 = vmovl_s8(*(int8x8_t *)v656.i8);
  v662 = vmovl_s16(*(int16x4_t *)v661.i8);
  v659.i64[0] = v662.u32[0];
  v659.i64[1] = v662.u32[1];
  v663 = v659;
  v664 = vmovl_high_s16(v657);
  v659.i64[0] = v664.u32[0];
  v659.i64[1] = v664.u32[1];
  v665 = v659;
  v666 = vmovl_high_s16(v661);
  v659.i64[0] = v666.u32[0];
  v659.i64[1] = v666.u32[1];
  v667 = v659;
  v659.i64[0] = v658.u32[2];
  v659.i64[1] = v658.u32[3];
  v668 = v659;
  v659.i64[0] = v662.u32[2];
  v659.i64[1] = v662.u32[3];
  v669 = v659;
  v659.i64[0] = v664.u32[2];
  v659.i64[1] = v664.u32[3];
  v670 = v659;
  v659.i64[0] = v666.u32[2];
  v659.i64[1] = v666.u32[3];
  v671 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v659);
  v672 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v670);
  v673 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v669);
  v674 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v665);
  v675 = vceqzq_s8(*(int8x16_t *)(v647 + 344));
  v676 = vmovl_high_s8(v675);
  v677 = vmovl_s16(*(int16x4_t *)v676.i8);
  v659.i64[0] = v677.u32[0];
  v659.i64[1] = v677.u32[1];
  v678 = v659;
  v679 = vmovl_s8(*(int8x8_t *)v675.i8);
  v680 = vmovl_s16(*(int16x4_t *)v679.i8);
  v659.i64[0] = v680.u32[0];
  v659.i64[1] = v680.u32[1];
  v681 = v659;
  v682 = vmovl_high_s16(v676);
  v659.i64[0] = v682.u32[0];
  v659.i64[1] = v682.u32[1];
  v683 = v659;
  v684 = vmovl_high_s16(v679);
  v659.i64[0] = v684.u32[0];
  v659.i64[1] = v684.u32[1];
  v685 = v659;
  v659.i64[0] = v677.u32[2];
  v659.i64[1] = v677.u32[3];
  v686 = v659;
  v659.i64[0] = v680.u32[2];
  v659.i64[1] = v680.u32[3];
  v687 = v659;
  v659.i64[0] = v682.u32[2];
  v659.i64[1] = v682.u32[3];
  v688 = v659;
  v659.i64[0] = v684.u32[2];
  v659.i64[1] = v684.u32[3];
  v689 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v688);
  v690 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v678), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v660));
  v691 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v681), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v663));
  v692 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v683), v674);
  v693 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v685), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v667));
  v694 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v686), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v668));
  v695 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v687), v673);
  v696 = vorrq_s8(v689, v672);
  v697 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v659), v671);
  v698 = vceqzq_s8(*(int8x16_t *)(v647 + 360));
  v699 = vmovl_s8(*(int8x8_t *)v698.i8);
  v700 = vmovl_high_s16(v699);
  v701 = vmovl_high_s8(v698);
  v702 = vmovl_high_s16(v701);
  v703 = vmovl_s16(*(int16x4_t *)v699.i8);
  v704 = vmovl_s16(*(int16x4_t *)v701.i8);
  v659.i64[0] = v703.i32[0];
  v659.i64[1] = v703.i32[1];
  v705 = v659;
  v659.i64[0] = v704.i32[0];
  v659.i64[1] = v704.i32[1];
  v706 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v659);
  v707 = vceqzq_s8(*(int8x16_t *)(v647 + 376));
  v708 = vmovl_high_s8(v707);
  v709 = vmovl_s16(*(int16x4_t *)v708.i8);
  v659.i64[0] = v709.i32[0];
  v659.i64[1] = v709.i32[1];
  v710 = vmovl_s8(*(int8x8_t *)v707.i8);
  v711 = vmovl_s16(*(int16x4_t *)v710.i8);
  v712 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v659), v706), v690);
  v659.i64[0] = v711.i32[0];
  v659.i64[1] = v711.i32[1];
  v713 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v659), vbicq_s8((int8x16_t)xmmword_19FFB3170, v705));
  v659.i64[0] = v702.i32[0];
  v659.i64[1] = v702.i32[1];
  v714 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v659);
  v715 = vmovl_high_s16(v708);
  v716 = vorrq_s8(v713, v691);
  v659.i64[0] = v715.i32[0];
  v659.i64[1] = v715.i32[1];
  v717 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v659), v714);
  v659.i64[0] = v700.i32[0];
  v659.i64[1] = v700.i32[1];
  v718 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v659);
  v719 = vmovl_high_s16(v710);
  v659.i64[0] = v719.i32[0];
  v659.i64[1] = v719.i32[1];
  v720 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v659), v718), v693);
  v659.i64[0] = v704.i32[2];
  v659.i64[1] = v704.i32[3];
  v721 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v659);
  v659.i64[0] = v709.i32[2];
  v659.i64[1] = v709.i32[3];
  v722 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v659), v721), v694);
  v659.i64[0] = v703.i32[2];
  v659.i64[1] = v703.i32[3];
  v723 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v659);
  v659.i64[0] = v711.i32[2];
  v659.i64[1] = v711.i32[3];
  v724 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v659), v723), v695);
  v659.i64[0] = v702.i32[2];
  v659.i64[1] = v702.i32[3];
  v725 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v659);
  v659.i64[0] = v715.i32[2];
  v659.i64[1] = v715.i32[3];
  v726 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v659), v725), v696);
  v659.i64[0] = v700.i32[2];
  v659.i64[1] = v700.i32[3];
  v727 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v659);
  v659.i64[0] = v719.i32[2];
  v659.i64[1] = v719.i32[3];
  *((_QWORD *)v647 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v716, v712), vorrq_s8(v720, vorrq_s8(v717, v692))), (int64x2_t)vorrq_s8(vorrq_s8(v724, v722), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v659), v727), v697), v726))));
  *((_QWORD *)v647 + 3) = &off_1E42BB3B0;
  v647[312] = 1;
  v728 = *(std::__shared_weak_count **)(v451 + 128);
  *(_QWORD *)(v451 + 120) = v647 + 24;
  *(_QWORD *)(v451 + 128) = v647;
  if (v728)
  {
    v729 = (unint64_t *)&v728->__shared_owners_;
    do
      v730 = __ldaxr(v729);
    while (__stlxr(v730 - 1, v729));
    if (!v730)
    {
      ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
      std::__shared_weak_count::__release_weak(v728);
    }
  }
  if (v644)
  {
    v731 = (unint64_t *)&v644->__shared_owners_;
    do
      v732 = __ldaxr(v731);
    while (__stlxr(v732 - 1, v731));
    if (!v732)
    {
      ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
      std::__shared_weak_count::__release_weak(v644);
    }
  }
  v733 = *(_QWORD *)(*(_QWORD *)(v1374 + 200) + 80);
  v734 = *(_QWORD *)(v733 + 560);
  v735 = *(std::__shared_weak_count **)(v733 + 568);
  if (v735)
  {
    v736 = (unint64_t *)&v735->__shared_owners_;
    do
      v737 = __ldxr(v736);
    while (__stxr(v737 + 1, v736));
  }
  v738 = (char *)operator new(0x198uLL);
  *((_QWORD *)v738 + 1) = 0;
  *((_QWORD *)v738 + 2) = 0;
  *(_QWORD *)v738 = &off_1E42E3FC8;
  *(_OWORD *)__p = *v454;
  *(_OWORD *)&__p[2] = v454[1];
  v739 = *(_BYTE *)(v451 + 280);
  if ((v740 & 1) == 0
  {
    if ((v1326 & 1) == 0
    {
      if ((v1352 & 1) == 0
      {
        if ((v1367 & 1) == 0
        {
          ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoad::defaultReflection;
        }
        ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r;
        unk_1EE576188 = 1;
      }
      ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r;
      unk_1EE5895C0 = &ggl::FlyoverRoadStrokeProcedural::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
      qword_1EE5895C8 = 0;
      if ((v1353 & 1) == 0
      {
        ggl::FlyoverRoadStrokeProcedural::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
        *(_QWORD *)algn_1EE589748 = ggl::FlyoverRoad::Blend::reflection(void)::reflection;
        qword_1EE589750 = (uint64_t)ggl::FlyoverRoad::Transform::reflection(void)::reflection;
        unk_1EE589758 = ggl::FlyoverRoad::Color::reflection(void)::reflection;
        qword_1EE589760 = (uint64_t)ggl::FlyoverRoad::RibbonExtra::reflection(void)::reflection;
      }
      qword_1EE5895D0 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineDataDefaultPipelineConstantStructs(void)::ref;
      unk_1EE5895D8 = xmmword_19FFB4BF0;
    }
    ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::DefaultPipelineSetup::typedReflection(void)::ref;
    if ((v1327 & 1) == 0
    {
      ggl::FlyoverRoadStrokeProceduralShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadStrokeProceduralShader";
      if ((v1354 & 1) == 0
      {
        qword_1ECE42FF8 = (uint64_t)"FlyoverRoadStrokeProceduralShader";
        unk_1ECE43000 = ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE43008 = 1;
        unk_1ECE43010 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE43018 = 4;
        unk_1ECE43020 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE43028 = 0;
        unk_1ECE43030 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverRoadStrokeProceduralShaderVertexFunctionDescriptor(void)::ref = 3422672659;
        qword_1ECE43038 = 0;
        unk_1ECE43040 = &ggl::flyoverRoadStrokeProceduralShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE43050 = 0;
        unk_1ECE43058 = 0;
        qword_1ECE43048 = 0;
      }
      qword_1ECE3BD18 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3BD20 = -872294637;
      if ((v1355 & 1) == 0
      {
        ggl::flyoverRoadStrokeProceduralShaderFragmentFunctionDescriptor(void)::ref = 0x1391D3DD7;
        qword_1ECE43480 = (uint64_t)"FlyoverRoadStrokeProceduralShader";
        unk_1ECE43488 = 0;
        qword_1ECE43490 = 0;
        unk_1ECE43498 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE434A0 = 3;
        unk_1ECE434A8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE434B0 = 0;
        unk_1ECE434B8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE434C0 = 0;
        unk_1ECE434C8 = &ggl::flyoverRoadStrokeProceduralShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE434D8 = 0;
        unk_1ECE434E0 = 0;
        qword_1ECE434D0 = 0;
      }
      qword_1ECE3BD28 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3BD30 = 958217687;
      qword_1ECE3BD38 = (uint64_t)ggl::flyoverRoadStrokeProceduralShaderShaderConstants(void)::ref;
      unk_1ECE3BD40 = 5;
      qword_1ECE3BD48 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderShaderTextures(void)::ref;
      unk_1ECE3BD50 = 0;
      qword_1ECE3BD58 = (uint64_t)&ggl::flyoverRoadStrokeProceduralShaderShaderSamplers(void)::ref;
      unk_1ECE3BD60 = 0;
    }
    qword_1EE589568 = (uint64_t)&ggl::FlyoverRoadStrokeProceduralShader::typedReflection(void)::ref;
    if ((v1328 & 1) == 0
    {
      ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE589608 = 0;
      qword_1EE589610 = (uint64_t)"";
      dword_1EE589618 = 0;
      qword_1EE589620 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
      unk_1EE589628 = 4;
    }
    qword_1EE589570 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE589578 = 1;
    qword_1EE589580 = 0;
    unk_1EE589588 = 0;
    qword_1EE589590 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
    unk_1EE589598 = 0;
    if ((v1329 & 1) == 0
    {
      ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE589648 = 0;
      qword_1EE589650 = (uint64_t)"view";
      dword_1EE589658 = 3;
      qword_1EE589660 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
      unk_1EE589668 = vdupq_n_s64(1uLL);
      qword_1EE589678 = 1;
      unk_1EE589680 = "blend";
      dword_1EE589688 = 3;
      qword_1EE589690 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantBlendBinding(void)::reflection;
      unk_1EE589698 = xmmword_19FFB2DB0;
      qword_1EE5896A8 = 2;
      unk_1EE5896B0 = "transform";
      dword_1EE5896B8 = 3;
      qword_1EE5896C0 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantTransformBinding(void)::reflection;
      unk_1EE5896C8 = xmmword_19FFB3000;
      qword_1EE5896D8 = 3;
      unk_1EE5896E0 = "color";
      dword_1EE5896E8 = 3;
      qword_1EE5896F0 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantColorBinding(void)::reflection;
      unk_1EE5896F8 = xmmword_19FFB3CD0;
      qword_1EE589708 = 4;
      unk_1EE589710 = "ribbonExtra";
      dword_1EE589718 = 3;
      qword_1EE589720 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantRibbonExtraBinding(void)::reflection;
      unk_1EE589728 = 1;
    }
    qword_1EE5895A0 = (uint64_t)&ggl::FlyoverRoadStrokeProcedural::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
    *(_QWORD *)algn_1EE5895A8 = 5;
  }
  if (v735)
  {
    v741 = (unint64_t *)&v735->__shared_owners_;
    do
      v742 = __ldxr(v741);
    while (__stxr(v742 + 1, v741));
    *((_DWORD *)v738 + 14) = 0;
    *((_QWORD *)v738 + 5) = 0;
    *((_QWORD *)v738 + 6) = 0;
    *((_QWORD *)v738 + 3) = &off_1E42B6760;
    *((_QWORD *)v738 + 4) = 0;
    *((_QWORD *)v738 + 8) = &ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v738 + 9) = v734;
    *((_QWORD *)v738 + 10) = v735;
    do
      v743 = __ldxr(v741);
    while (__stxr(v743 + 1, v741));
  }
  else
  {
    *((_DWORD *)v738 + 14) = 0;
    *((_QWORD *)v738 + 5) = 0;
    *((_QWORD *)v738 + 6) = 0;
    *((_QWORD *)v738 + 3) = &off_1E42B6760;
    *((_QWORD *)v738 + 4) = 0;
    *((_QWORD *)v738 + 8) = &ggl::FlyoverRoadStrokeProcedural::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v738 + 9) = v734;
    *((_QWORD *)v738 + 10) = 0;
  }
  v738[136] = 0;
  *(_OWORD *)(v738 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v738 + 156) = 0;
  *(_QWORD *)(v738 + 172) = 0;
  *(_QWORD *)(v738 + 164) = 0;
  v738[184] = 0;
  *(_OWORD *)(v738 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v738 + 204) = 0;
  *(_QWORD *)(v738 + 220) = 0;
  *(_QWORD *)(v738 + 212) = 0;
  v738[232] = 0;
  *(_OWORD *)(v738 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v738 + 252) = 0;
  *(_QWORD *)(v738 + 268) = 0;
  *(_QWORD *)(v738 + 260) = 0;
  v744 = *(_OWORD *)&__p[2];
  *(_OWORD *)(v738 + 280) = *(_OWORD *)__p;
  *(_OWORD *)(v738 + 296) = v744;
  v738[312] = 0;
  *((_QWORD *)v738 + 48) = 0;
  *((_OWORD *)v738 + 22) = 0u;
  *((_OWORD *)v738 + 23) = 0u;
  *((_OWORD *)v738 + 20) = 0u;
  *((_OWORD *)v738 + 21) = 0u;
  *((_QWORD *)v738 + 49) = 0x100000001;
  v738[400] = 0;
  v738[88] = v1372;
  v738[91] = v1382;
  *(_WORD *)(v738 + 89) = v1381;
  *(int8x16_t *)(v738 + 92) = v1370;
  *((_DWORD *)v738 + 27) = v1373;
  *((_QWORD *)v738 + 14) = 0;
  *((_QWORD *)v738 + 15) = 0;
  *((_DWORD *)v738 + 32) = 0;
  v738[132] = 15;
  if (v735)
  {
    v745 = (unint64_t *)&v735->__shared_owners_;
    do
      v746 = __ldaxr(v745);
    while (__stlxr(v746 - 1, v745));
    if (!v746)
    {
      ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
      std::__shared_weak_count::__release_weak(v735);
    }
  }
  v738[328] = v739;
  v747 = vceqzq_s8(*(int8x16_t *)(v738 + 328));
  v748 = vmovl_high_s8(v747);
  v749 = vmovl_s16(*(int16x4_t *)v748.i8);
  v750.i64[0] = v749.u32[0];
  v750.i64[1] = v749.u32[1];
  v751 = v750;
  v752 = vmovl_s8(*(int8x8_t *)v747.i8);
  v753 = vmovl_s16(*(int16x4_t *)v752.i8);
  v750.i64[0] = v753.u32[0];
  v750.i64[1] = v753.u32[1];
  v754 = v750;
  v755 = vmovl_high_s16(v748);
  v750.i64[0] = v755.u32[0];
  v750.i64[1] = v755.u32[1];
  v756 = v750;
  v757 = vmovl_high_s16(v752);
  v750.i64[0] = v757.u32[0];
  v750.i64[1] = v757.u32[1];
  v758 = v750;
  v750.i64[0] = v749.u32[2];
  v750.i64[1] = v749.u32[3];
  v759 = v750;
  v750.i64[0] = v753.u32[2];
  v750.i64[1] = v753.u32[3];
  v760 = v750;
  v750.i64[0] = v755.u32[2];
  v750.i64[1] = v755.u32[3];
  v761 = v750;
  v750.i64[0] = v757.u32[2];
  v750.i64[1] = v757.u32[3];
  v762 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v750);
  v763 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v761);
  v764 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v760);
  v765 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v756);
  v766 = vceqzq_s8(*(int8x16_t *)(v738 + 344));
  v767 = vmovl_high_s8(v766);
  v768 = vmovl_s16(*(int16x4_t *)v767.i8);
  v750.i64[0] = v768.u32[0];
  v750.i64[1] = v768.u32[1];
  v769 = v750;
  v770 = vmovl_s8(*(int8x8_t *)v766.i8);
  v771 = vmovl_s16(*(int16x4_t *)v770.i8);
  v750.i64[0] = v771.u32[0];
  v750.i64[1] = v771.u32[1];
  v772 = v750;
  v773 = vmovl_high_s16(v767);
  v750.i64[0] = v773.u32[0];
  v750.i64[1] = v773.u32[1];
  v774 = v750;
  v775 = vmovl_high_s16(v770);
  v750.i64[0] = v775.u32[0];
  v750.i64[1] = v775.u32[1];
  v776 = v750;
  v750.i64[0] = v768.u32[2];
  v750.i64[1] = v768.u32[3];
  v777 = v750;
  v750.i64[0] = v771.u32[2];
  v750.i64[1] = v771.u32[3];
  v778 = v750;
  v750.i64[0] = v773.u32[2];
  v750.i64[1] = v773.u32[3];
  v779 = v750;
  v750.i64[0] = v775.u32[2];
  v750.i64[1] = v775.u32[3];
  v780 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v779);
  v781 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v769), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v751));
  v782 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v772), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v754));
  v783 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v774), v765);
  v784 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v776), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v758));
  v785 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v777), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v759));
  v786 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v778), v764);
  v787 = vorrq_s8(v780, v763);
  v788 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v750), v762);
  v789 = vceqzq_s8(*(int8x16_t *)(v738 + 360));
  v790 = vmovl_s8(*(int8x8_t *)v789.i8);
  v791 = vmovl_high_s16(v790);
  v792 = vmovl_high_s8(v789);
  v793 = vmovl_high_s16(v792);
  v794 = vmovl_s16(*(int16x4_t *)v790.i8);
  v795 = vmovl_s16(*(int16x4_t *)v792.i8);
  v750.i64[0] = v794.i32[0];
  v750.i64[1] = v794.i32[1];
  v796 = v750;
  v750.i64[0] = v795.i32[0];
  v750.i64[1] = v795.i32[1];
  v797 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v750);
  v798 = vceqzq_s8(*(int8x16_t *)(v738 + 376));
  v799 = vmovl_high_s8(v798);
  v800 = vmovl_s16(*(int16x4_t *)v799.i8);
  v750.i64[0] = v800.i32[0];
  v750.i64[1] = v800.i32[1];
  v801 = vmovl_s8(*(int8x8_t *)v798.i8);
  v802 = vmovl_s16(*(int16x4_t *)v801.i8);
  v803 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v750), v797), v781);
  v750.i64[0] = v802.i32[0];
  v750.i64[1] = v802.i32[1];
  v804 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v750), vbicq_s8((int8x16_t)xmmword_19FFB3170, v796));
  v750.i64[0] = v793.i32[0];
  v750.i64[1] = v793.i32[1];
  v805 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v750);
  v806 = vmovl_high_s16(v799);
  v807 = vorrq_s8(v804, v782);
  v750.i64[0] = v806.i32[0];
  v750.i64[1] = v806.i32[1];
  v808 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v750), v805);
  v750.i64[0] = v791.i32[0];
  v750.i64[1] = v791.i32[1];
  v809 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v750);
  v810 = vmovl_high_s16(v801);
  v750.i64[0] = v810.i32[0];
  v750.i64[1] = v810.i32[1];
  v811 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v750), v809), v784);
  v750.i64[0] = v795.i32[2];
  v750.i64[1] = v795.i32[3];
  v812 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v750);
  v750.i64[0] = v800.i32[2];
  v750.i64[1] = v800.i32[3];
  v813 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v750), v812), v785);
  v750.i64[0] = v794.i32[2];
  v750.i64[1] = v794.i32[3];
  v814 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v750);
  v750.i64[0] = v802.i32[2];
  v750.i64[1] = v802.i32[3];
  v815 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v750), v814), v786);
  v750.i64[0] = v793.i32[2];
  v750.i64[1] = v793.i32[3];
  v816 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v750);
  v750.i64[0] = v806.i32[2];
  v750.i64[1] = v806.i32[3];
  v817 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v750), v816), v787);
  v750.i64[0] = v791.i32[2];
  v750.i64[1] = v791.i32[3];
  v818 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v750);
  v750.i64[0] = v810.i32[2];
  v750.i64[1] = v810.i32[3];
  *((_QWORD *)v738 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v807, v803), vorrq_s8(v811, vorrq_s8(v808, v783))), (int64x2_t)vorrq_s8(vorrq_s8(v815, v813), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v750), v818), v788), v817))));
  *((_QWORD *)v738 + 3) = &off_1E42BB5A0;
  v738[312] = 1;
  v819 = *(std::__shared_weak_count **)(v451 + 144);
  *(_QWORD *)(v451 + 136) = v738 + 24;
  *(_QWORD *)(v451 + 144) = v738;
  if (v819)
  {
    v820 = (unint64_t *)&v819->__shared_owners_;
    do
      v821 = __ldaxr(v820);
    while (__stlxr(v821 - 1, v820));
    if (!v821)
    {
      ((void (*)(std::__shared_weak_count *))v819->__on_zero_shared)(v819);
      std::__shared_weak_count::__release_weak(v819);
    }
  }
  if (v735)
  {
    v822 = (unint64_t *)&v735->__shared_owners_;
    do
      v823 = __ldaxr(v822);
    while (__stlxr(v823 - 1, v822));
    if (!v823)
    {
      ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
      std::__shared_weak_count::__release_weak(v735);
    }
  }
  v824 = *(_QWORD *)(*(_QWORD *)(v1374 + 200) + 80);
  v825 = *(_QWORD *)(v824 + 128);
  v826 = *(std::__shared_weak_count **)(v824 + 136);
  if (v826)
  {
    v827 = (unint64_t *)&v826->__shared_owners_;
    do
      v828 = __ldxr(v827);
    while (__stxr(v828 + 1, v827));
  }
  v829 = (char *)operator new(0x198uLL);
  *((_QWORD *)v829 + 1) = 0;
  *((_QWORD *)v829 + 2) = 0;
  *(_QWORD *)v829 = &off_1E42E36D0;
  *(_OWORD *)__p = *v454;
  *(_OWORD *)&__p[2] = v454[1];
  v830 = *(_BYTE *)(v451 + 280);
  if ((v831 & 1) == 0)
  {
    if ((_DWORD)v1330)
    {
      if ((v1331 & 1) == 0)
      {
        if ((_DWORD)v1330)
        {
          if ((v1356 & 1) == 0
          {
            if ((v1368 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoad::defaultReflection;
            }
            ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::attributesReflection(void)::r;
            unk_1EE576188 = 1;
          }
          ggl::FlyoverBorderRibbon::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoad::Default>::typedReflection(void)::r;
          unk_1EE58C220 = &ggl::FlyoverBorderRibbon::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE58C228 = 0;
          if ((v1357 & 1) == 0
          {
            ggl::FlyoverBorderRibbon::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE58C398 = ggl::FlyoverRoad::Blend::reflection(void)::reflection;
            qword_1EE58C3A0 = (uint64_t)ggl::FlyoverBorderRibbon::Tile::reflection(void)::reflection;
            unk_1EE58C3A8 = ggl::FlyoverBorderRibbon::Border::reflection(void)::reflection;
            qword_1EE58C3B0 = (uint64_t)ggl::FlyoverBorderRibbon::Color::reflection(void)::reflection;
          }
          qword_1EE58C230 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE58C238 = xmmword_19FFB3020;
        }
      }
      ggl::FlyoverBorderRibbon::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverBorderRibbon::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverBorderRibbonShader::typedReflection(v1330);
      qword_1EE58C1C8 = (uint64_t)&ggl::FlyoverBorderRibbonShader::typedReflection(void)::ref;
      if ((v1332 & 1) == 0
      {
        ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58C258 = 0;
        qword_1EE58C260 = (uint64_t)"";
        dword_1EE58C268 = 0;
        qword_1EE58C270 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE58C278 = 4;
      }
      qword_1EE58C1D0 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58C1D8 = 1;
      qword_1EE58C1E0 = 0;
      unk_1EE58C1E8 = 2;
      qword_1EE58C1F0 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1EE58C1F8 = 0;
      if ((v1333 & 1) == 0
      {
        ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE58C298 = 0;
        qword_1EE58C2A0 = (uint64_t)"view";
        dword_1EE58C2A8 = 3;
        qword_1EE58C2B0 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        unk_1EE58C2B8 = vdupq_n_s64(1uLL);
        qword_1EE58C2C8 = 1;
        unk_1EE58C2D0 = "blend";
        dword_1EE58C2D8 = 3;
        qword_1EE58C2E0 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantBlendBinding(void)::reflection;
        unk_1EE58C2E8 = xmmword_19FFB2DB0;
        qword_1EE58C2F8 = 2;
        unk_1EE58C300 = "tile";
        dword_1EE58C308 = 3;
        qword_1EE58C310 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantTileBinding(void)::reflection;
        unk_1EE58C318 = xmmword_19FFB3040;
        qword_1EE58C328 = 3;
        unk_1EE58C330 = "border";
        dword_1EE58C338 = 3;
        qword_1EE58C340 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantBorderBinding(void)::reflection;
        unk_1EE58C348 = xmmword_19FFB3050;
        qword_1EE58C358 = 4;
        unk_1EE58C360 = "color";
        dword_1EE58C368 = 3;
        qword_1EE58C370 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantColorBinding(void)::reflection;
        unk_1EE58C378 = 2;
      }
      qword_1EE58C200 = (uint64_t)&ggl::FlyoverBorderRibbon::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE58C208 = 5;
    }
  }
  if (v826)
  {
    v832 = (unint64_t *)&v826->__shared_owners_;
    do
      v833 = __ldxr(v832);
    while (__stxr(v833 + 1, v832));
    *((_DWORD *)v829 + 14) = 0;
    *((_QWORD *)v829 + 5) = 0;
    *((_QWORD *)v829 + 6) = 0;
    *((_QWORD *)v829 + 3) = &off_1E42B6760;
    *((_QWORD *)v829 + 4) = 0;
    *((_QWORD *)v829 + 8) = &ggl::FlyoverBorderRibbon::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v829 + 9) = v825;
    *((_QWORD *)v829 + 10) = v826;
    do
      v834 = __ldxr(v832);
    while (__stxr(v834 + 1, v832));
  }
  else
  {
    *((_DWORD *)v829 + 14) = 0;
    *((_QWORD *)v829 + 5) = 0;
    *((_QWORD *)v829 + 6) = 0;
    *((_QWORD *)v829 + 3) = &off_1E42B6760;
    *((_QWORD *)v829 + 4) = 0;
    *((_QWORD *)v829 + 8) = &ggl::FlyoverBorderRibbon::DefaultPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v829 + 9) = v825;
    *((_QWORD *)v829 + 10) = 0;
  }
  v829[136] = 0;
  *(_OWORD *)(v829 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v829 + 156) = 0;
  *(_QWORD *)(v829 + 172) = 0;
  *(_QWORD *)(v829 + 164) = 0;
  v829[184] = 0;
  *(_OWORD *)(v829 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v829 + 204) = 0;
  *(_QWORD *)(v829 + 220) = 0;
  *(_QWORD *)(v829 + 212) = 0;
  v829[232] = 0;
  *(_OWORD *)(v829 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v829 + 252) = 0;
  *(_QWORD *)(v829 + 268) = 0;
  *(_QWORD *)(v829 + 260) = 0;
  v835 = *(_OWORD *)&__p[2];
  *(_OWORD *)(v829 + 280) = *(_OWORD *)__p;
  *(_OWORD *)(v829 + 296) = v835;
  v829[312] = 0;
  *((_QWORD *)v829 + 48) = 0;
  *((_OWORD *)v829 + 22) = 0u;
  *((_OWORD *)v829 + 23) = 0u;
  *((_OWORD *)v829 + 20) = 0u;
  *((_OWORD *)v829 + 21) = 0u;
  *((_QWORD *)v829 + 49) = 0x100000001;
  v829[400] = 0;
  v829[88] = v1372;
  v829[91] = v1380;
  *(_WORD *)(v829 + 89) = v1379;
  *(int8x16_t *)(v829 + 92) = v1370;
  *((_DWORD *)v829 + 27) = v1373;
  *((_QWORD *)v829 + 14) = 0;
  *((_QWORD *)v829 + 15) = 0;
  *((_DWORD *)v829 + 32) = 0;
  v829[132] = 15;
  if (v826)
  {
    v836 = (unint64_t *)&v826->__shared_owners_;
    do
      v837 = __ldaxr(v836);
    while (__stlxr(v837 - 1, v836));
    if (!v837)
    {
      ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
      std::__shared_weak_count::__release_weak(v826);
    }
  }
  v829[328] = v830;
  v838 = vceqzq_s8(*(int8x16_t *)(v829 + 328));
  v839 = vmovl_s8(*(int8x8_t *)v838.i8);
  v840 = vmovl_high_s16(v839);
  v841.i64[0] = v840.u32[2];
  v841.i64[1] = v840.u32[3];
  v842 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v841);
  v843 = vmovl_high_s8(v838);
  v844 = vmovl_high_s16(v843);
  v841.i64[0] = v844.u32[2];
  v841.i64[1] = v844.u32[3];
  v845 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v841);
  v846 = vmovl_s16(*(int16x4_t *)v839.i8);
  v841.i64[0] = v846.u32[2];
  v841.i64[1] = v846.u32[3];
  v847 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v841);
  v848 = vmovl_s16(*(int16x4_t *)v843.i8);
  v841.i64[0] = v848.u32[2];
  v841.i64[1] = v848.u32[3];
  v849 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v841);
  v841.i64[0] = v840.u32[0];
  v841.i64[1] = v840.u32[1];
  v850 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v841);
  v841.i64[0] = v844.u32[0];
  v841.i64[1] = v844.u32[1];
  v851 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v841);
  v841.i64[0] = v846.u32[0];
  v841.i64[1] = v846.u32[1];
  v852 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v841);
  v841.i64[0] = v848.u32[0];
  v841.i64[1] = v848.u32[1];
  v853 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v841);
  v854 = vceqzq_s8(*(int8x16_t *)(v829 + 344));
  v855 = vmovl_s8(*(int8x8_t *)v854.i8);
  v856 = vmovl_high_s16(v855);
  v841.i64[0] = v856.u32[2];
  v841.i64[1] = v856.u32[3];
  v857 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v841);
  v858 = vmovl_high_s8(v854);
  v859 = vmovl_high_s16(v858);
  v841.i64[0] = v859.u32[2];
  v841.i64[1] = v859.u32[3];
  v860 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v841);
  v861 = vmovl_s16(*(int16x4_t *)v855.i8);
  v841.i64[0] = v861.u32[2];
  v841.i64[1] = v861.u32[3];
  v862 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v841);
  v863 = vmovl_s16(*(int16x4_t *)v858.i8);
  v841.i64[0] = v863.u32[2];
  v841.i64[1] = v863.u32[3];
  v864 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v841);
  v841.i64[0] = v856.u32[0];
  v841.i64[1] = v856.u32[1];
  v865 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v841);
  v841.i64[0] = v859.u32[0];
  v841.i64[1] = v859.u32[1];
  v866 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v841);
  v841.i64[0] = v861.u32[0];
  v841.i64[1] = v861.u32[1];
  v867 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v841);
  v841.i64[0] = v863.u32[0];
  v841.i64[1] = v863.u32[1];
  v868 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v841), v853);
  v869 = vorrq_s8(v867, v852);
  v870 = vorrq_s8(v866, v851);
  v871 = vorrq_s8(v865, v850);
  v872 = vorrq_s8(v864, v849);
  v873 = vorrq_s8(v862, v847);
  v874 = vorrq_s8(v860, v845);
  v875 = vorrq_s8(v857, v842);
  v876 = vceqzq_s8(*(int8x16_t *)(v829 + 360));
  v877 = vmovl_s8(*(int8x8_t *)v876.i8);
  v878 = vmovl_high_s16(v877);
  v879 = vmovl_high_s8(v876);
  v880 = vmovl_high_s16(v879);
  v881 = vmovl_s16(*(int16x4_t *)v877.i8);
  v882 = vmovl_s16(*(int16x4_t *)v879.i8);
  v841.i64[0] = v882.i32[0];
  v841.i64[1] = v882.i32[1];
  v883 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v841);
  v841.i64[0] = v881.i32[0];
  v841.i64[1] = v881.i32[1];
  v884 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v841);
  v841.i64[0] = v880.i32[0];
  v841.i64[1] = v880.i32[1];
  v885 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v841);
  v841.i64[0] = v878.i32[0];
  v841.i64[1] = v878.i32[1];
  v886 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v841);
  v841.i64[0] = v878.i32[2];
  v841.i64[1] = v878.i32[3];
  v887 = v841;
  v841.i64[0] = v880.i32[2];
  v841.i64[1] = v880.i32[3];
  v888 = v841;
  v841.i64[0] = v881.i32[2];
  v841.i64[1] = v881.i32[3];
  v889 = v841;
  v841.i64[0] = v882.i32[2];
  v841.i64[1] = v882.i32[3];
  v890 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v841);
  v891 = vceqzq_s8(*(int8x16_t *)(v829 + 376));
  v892 = vmovl_high_s8(v891);
  v893 = vmovl_s16(*(int16x4_t *)v892.i8);
  v894 = vmovl_s8(*(int8x8_t *)v891.i8);
  v895 = vmovl_s16(*(int16x4_t *)v894.i8);
  v896 = vmovl_high_s16(v892);
  v897 = vmovl_high_s16(v894);
  v841.i64[0] = v897.i32[2];
  v841.i64[1] = v897.i32[3];
  v898 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v841);
  v841.i64[0] = v896.i32[2];
  v841.i64[1] = v896.i32[3];
  v899 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v841);
  v841.i64[0] = v895.i32[2];
  v841.i64[1] = v895.i32[3];
  v900 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v841);
  v841.i64[0] = v893.i32[2];
  v841.i64[1] = v893.i32[3];
  v901 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v841);
  v841.i64[0] = v897.i32[0];
  v841.i64[1] = v897.i32[1];
  v902 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v841);
  v841.i64[0] = v896.i32[0];
  v841.i64[1] = v896.i32[1];
  v903 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v841);
  v841.i64[0] = v895.i32[0];
  v841.i64[1] = v895.i32[1];
  v904 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v841);
  v841.i64[0] = v893.i32[0];
  v841.i64[1] = v893.i32[1];
  *((_QWORD *)v829 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v904, v884), v869), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v841), v883), v868)), vorrq_s8(vorrq_s8(vorrq_s8(v902, v886), v871), vorrq_s8(vorrq_s8(v903, v885), v870))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v900, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v889)), v873), vorrq_s8(vorrq_s8(v901, v890), v872)), vorrq_s8(vorrq_s8(vorrq_s8(v898, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v887)),
                                                v875),
                                              vorrq_s8(vorrq_s8(v899, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v888)), v874)))));
  *((_QWORD *)v829 + 3) = &off_1E42BA8B8;
  v829[312] = 1;
  v905 = *(std::__shared_weak_count **)(v451 + 160);
  *(_QWORD *)(v451 + 152) = v829 + 24;
  *(_QWORD *)(v451 + 160) = v829;
  if (v905)
  {
    v906 = (unint64_t *)&v905->__shared_owners_;
    do
      v907 = __ldaxr(v906);
    while (__stlxr(v907 - 1, v906));
    if (!v907)
    {
      ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
      std::__shared_weak_count::__release_weak(v905);
    }
  }
  if (v826)
  {
    v908 = (unint64_t *)&v826->__shared_owners_;
    do
      v909 = __ldaxr(v908);
    while (__stlxr(v909 - 1, v908));
    if (!v909)
    {
      ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
      std::__shared_weak_count::__release_weak(v826);
    }
  }
  v910 = *(_QWORD *)(*(_QWORD *)(v1374 + 200) + 80);
  v911 = *(_QWORD *)(v910 + 712);
  v1389.__sig = *(_QWORD *)(v910 + 704);
  *(_QWORD *)v1389.__opaque = v911;
  if (v911)
  {
    v912 = (unint64_t *)(v911 + 8);
    do
      v913 = __ldxr(v912);
    while (__stxr(v913 + 1, v912));
  }
  v914 = operator new(0x198uLL);
  v914[1] = 0;
  v914[2] = 0;
  *v914 = &off_1E42E3858;
  *(_OWORD *)__p = *v454;
  *(_OWORD *)&__p[2] = v454[1];
  v915 = ggl::StenciledAlphaClear::ClearPipelineState::ClearPipelineState((uint64_t)(v914 + 3), &v1389, (uint64_t)v1391, __p, *(_BYTE *)(v451 + 280));
  v916 = *(std::__shared_weak_count **)(v451 + 176);
  *(_QWORD *)(v451 + 168) = v915;
  *(_QWORD *)(v451 + 176) = v914;
  if (v916)
  {
    v917 = (unint64_t *)&v916->__shared_owners_;
    do
      v918 = __ldaxr(v917);
    while (__stlxr(v918 - 1, v917));
    if (!v918)
    {
      ((void (*)(std::__shared_weak_count *))v916->__on_zero_shared)(v916);
      std::__shared_weak_count::__release_weak(v916);
    }
  }
  v919 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v920 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v921 = __ldaxr(v920);
    while (__stlxr(v921 - 1, v920));
    if (!v921)
    {
      ((void (*)(std::__shared_weak_count *))v919->__on_zero_shared)(v919);
      std::__shared_weak_count::__release_weak(v919);
    }
  }
  v922 = operator new();
  *(_DWORD *)(v922 + 32) = 0;
  *(_QWORD *)(v922 + 16) = 0;
  *(_QWORD *)(v922 + 24) = 0;
  *(_QWORD *)v922 = &off_1E42B5DE8;
  *(_QWORD *)(v922 + 8) = 0;
  *(_QWORD *)(v922 + 36) = 66304;
  *(_DWORD *)(v922 + 44) = 0;
  *(_QWORD *)(v922 + 48) = 0xFFFF0200000600;
  *(_WORD *)(v922 + 56) = 0;
  *(_BYTE *)(v922 + 58) = 3;
  *(_QWORD *)(v922 + 67) = 0;
  *(_QWORD *)(v922 + 59) = 0;
  *(_BYTE *)(v922 + 75) = 0;
  *(_QWORD *)(v922 + 132) = 0;
  *(_QWORD *)(v922 + 124) = 0;
  *(_WORD *)(v922 + 188) = 257;
  *(_QWORD *)(v922 + 192) = 0;
  *(_QWORD *)(v922 + 200) = 0;
  *(_QWORD *)(v451 + 56) = v922;
  *(_BYTE *)(v922 + 208) = 1;
  v923 = operator new();
  *(_DWORD *)(v923 + 32) = 0;
  *(_QWORD *)(v923 + 16) = 0;
  *(_QWORD *)(v923 + 24) = 0;
  *(_QWORD *)v923 = &off_1E42B5DE8;
  *(_QWORD *)(v923 + 8) = 0;
  *(_QWORD *)(v923 + 36) = 66304;
  *(_DWORD *)(v923 + 44) = 0;
  *(_QWORD *)(v923 + 48) = 0xFFFF0200000500;
  *(_WORD *)(v923 + 56) = 0;
  *(_BYTE *)(v923 + 58) = 3;
  *(_QWORD *)(v923 + 67) = 0;
  *(_QWORD *)(v923 + 59) = 0;
  *(_BYTE *)(v923 + 75) = 0;
  *(_QWORD *)(v923 + 132) = 0;
  *(_QWORD *)(v923 + 124) = 0;
  *(_WORD *)(v923 + 188) = 257;
  *(_QWORD *)(v923 + 192) = 0;
  *(_QWORD *)(v923 + 200) = 0;
  *(_QWORD *)(v451 + 64) = v923;
  *(_BYTE *)(v923 + 208) = 1;
  v924 = operator new();
  *(_DWORD *)(v924 + 32) = 0;
  *(_QWORD *)(v924 + 16) = 0;
  *(_QWORD *)(v924 + 24) = 0;
  *(_QWORD *)v924 = &off_1E42B5DE8;
  *(_QWORD *)(v924 + 8) = 0;
  *(_QWORD *)(v924 + 36) = 66304;
  *(_DWORD *)(v924 + 44) = 0;
  *(_QWORD *)(v924 + 48) = 1;
  *(_WORD *)(v924 + 56) = 0;
  *(_BYTE *)(v924 + 58) = 3;
  *(_QWORD *)(v924 + 67) = 0;
  *(_QWORD *)(v924 + 59) = 0;
  *(_BYTE *)(v924 + 75) = 0;
  *(_QWORD *)(v924 + 132) = 0;
  *(_QWORD *)(v924 + 124) = 0;
  *(_WORD *)(v924 + 188) = 257;
  *(_QWORD *)(v924 + 192) = 0;
  *(_QWORD *)(v924 + 200) = 0;
  *(_QWORD *)(v451 + 72) = v924;
  *(_BYTE *)(v924 + 208) = 1;
  v925 = operator new();
  *(_DWORD *)(v925 + 32) = 0;
  *(_QWORD *)(v925 + 16) = 0;
  *(_QWORD *)(v925 + 24) = 0;
  *(_QWORD *)v925 = &off_1E42B5DE8;
  *(_QWORD *)(v925 + 8) = 0;
  *(_QWORD *)(v925 + 36) = 65537;
  *(_DWORD *)(v925 + 44) = 0;
  *(_QWORD *)(v925 + 48) = 0xFF0000000700;
  *(_WORD *)(v925 + 57) = 768;
  *(_QWORD *)(v925 + 67) = 0;
  *(_QWORD *)(v925 + 59) = 0;
  *(_BYTE *)(v925 + 75) = 0;
  *(_QWORD *)(v925 + 132) = 0;
  *(_QWORD *)(v925 + 124) = 0;
  *(_WORD *)(v925 + 188) = 257;
  *(_BYTE *)(v925 + 208) = 0;
  *(_QWORD *)(v925 + 192) = 0;
  *(_QWORD *)(v925 + 200) = 0;
  *(_BYTE *)(v925 + 56) = 0;
  *(_QWORD *)(v451 + 80) = v925;
  v926 = operator new();
  v927 = (_QWORD *)ggl::BufferData::BufferData(v926, qword_1EE569EB0, 2, 1, 6, 1);
  v927[25] = ggl::FlyoverRibbon::View::reflection(void)::reflection;
  *v927 = &off_1E42B8ED0;
  v928 = (_QWORD *)operator new();
  *v928 = &off_1E42E79C0;
  v928[1] = 0;
  v928[2] = 0;
  v928[3] = v926;
  v929 = *(std::__shared_weak_count **)(v451 + 200);
  *(_QWORD *)(v451 + 192) = v926;
  *(_QWORD *)(v451 + 200) = v928;
  if (v929)
  {
    v930 = (unint64_t *)&v929->__shared_owners_;
    do
      v931 = __ldaxr(v930);
    while (__stlxr(v931 - 1, v930));
    if (!v931)
    {
      ((void (*)(std::__shared_weak_count *))v929->__on_zero_shared)(v929);
      std::__shared_weak_count::__release_weak(v929);
    }
  }
  v932 = *(_QWORD *)(v451 + 40);
  v933 = *(uint64_t **)(v932 + 152);
  v934 = *v933;
  v935 = *(_QWORD **)(v932 + 128);
  v936 = v935[1];
  v937 = v935[94];
  v938 = (karo::RequestPruner *)v933[3];
  v939 = v935[6];
  v940 = operator new();
  strcpy((char *)__p, "/loading/roadcachenode");
  HIBYTE(__p[2]) = 22;
  v941 = *(_QWORD *)(*(_QWORD *)(v451 + 40) + 136);
  v942 = operator new(4uLL);
  *v942 = 1;
  *(_QWORD *)&v1390 = v942 + 1;
  v1389.__sig = (uint64_t)v942;
  *(_QWORD *)v1389.__opaque = v942 + 1;
  altitude::GEODataCacheNode::GEODataCacheNode(v940, (__int128 *)__p, v941, (uint64_t)&v1389);
  v943 = *(_QWORD *)(v451 + 224);
  *(_QWORD *)(v451 + 224) = v940;
  if (v943)
    (*(void (**)(uint64_t))(*(_QWORD *)v943 + 8))(v943);
  operator delete(v942);
  v944 = *(_BYTE *)(v451 + 32);
  *(_QWORD *)(*(_QWORD *)(v451 + 224) + 48) = v934;
  *(_QWORD *)(*(_QWORD *)(v451 + 224) + 152) = v936;
  *(_QWORD *)(*(_QWORD *)(v451 + 224) + 160) = v937;
  atomic_store(v944, (unsigned __int8 *)(*(_QWORD *)(v451 + 224) + 224));
  karo::RequestPruner::addRequestManager(v938, *(karo::AsyncRequestManager **)(v451 + 224));
  v945 = operator new();
  strcpy((char *)__p, "/loading/roaddatacache");
  HIBYTE(__p[2]) = 22;
  v946 = karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v945, (__int128 *)__p, *(_QWORD *)(*(_QWORD *)(v451 + 40) + 136));
  v946[9] = 0;
  v946[10] = 0;
  v946[8] = v946 + 9;
  *((_DWORD *)v946 + 22) = 0;
  *v946 = off_1E42C4968;
  *((_OWORD *)v946 + 6) = 0u;
  *((_OWORD *)v946 + 7) = 0u;
  *((_DWORD *)v946 + 32) = 1065353216;
  v946[17] = 0;
  pthread_mutexattr_init(&v1389);
  pthread_mutexattr_settype(&v1389, 2);
  v947 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v947, &v1389);
  pthread_mutexattr_destroy(&v1389);
  *(_QWORD *)(v945 + 136) = v947;
  *(_DWORD *)(v945 + 144) = 0;
  *(_QWORD *)v945 = &off_1E42C4178;
  *(_QWORD *)(v945 + 168) = 0;
  *(_QWORD *)(v945 + 176) = 0;
  v948 = *(_QWORD *)(v451 + 232);
  *(_QWORD *)(v451 + 232) = v945;
  if (v948)
    (*(void (**)(uint64_t))(*(_QWORD *)v948 + 8))(v948);
  *(_QWORD *)(*(_QWORD *)(v451 + 232) + 48) = v934;
  *(_QWORD *)(*(_QWORD *)(v451 + 232) + 160) = v937;
  *(_QWORD *)(*(_QWORD *)(v451 + 232) + 152) = *(_QWORD *)(v451 + 224);
  karo::RequestPruner::addRequestManager(v938, *(karo::AsyncRequestManager **)(v451 + 232));
  v949 = operator new();
  v950 = operator new(0x20uLL);
  __p[0] = v950;
  *(_OWORD *)&__p[1] = xmmword_19FFB3DA0;
  strcpy((char *)v950, "/loading/roadrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v949, (__int128 *)__p, *(_QWORD *)(*(_QWORD *)(v451 + 40) + 136));
  *(_QWORD *)(v949 + 80) = 0;
  *(_QWORD *)(v949 + 72) = 0;
  *(_QWORD *)(v949 + 64) = v949 + 72;
  *(_DWORD *)(v949 + 88) = 0;
  *(_QWORD *)v949 = &off_1E42C5610;
  *(_QWORD *)(v949 + 96) = 0;
  *(_QWORD *)(v949 + 120) = 0;
  *(_QWORD *)(v949 + 128) = 0;
  *(_QWORD *)(v949 + 112) = 0;
  *(_BYTE *)(v949 + 136) = 1;
  v951 = *(_QWORD *)(v451 + 240);
  *(_QWORD *)(v451 + 240) = v949;
  if (v951)
    (*(void (**)(uint64_t))(*(_QWORD *)v951 + 8))(v951);
  operator delete(v950);
  *(_QWORD *)(*(_QWORD *)(v451 + 240) + 48) = v934;
  *(_QWORD *)(*(_QWORD *)(v451 + 240) + 96) = *(_QWORD *)(v451 + 224);
  *(_QWORD *)(*(_QWORD *)(v451 + 240) + 104) = *(_QWORD *)(v451 + 232);
  *(_QWORD *)(*(_QWORD *)(v451 + 240) + 128) = v939;
  karo::RequestPruner::addRequestManager(v938, *(karo::AsyncRequestManager **)(v451 + 240));
  v952 = (char *)operator new(0x58uLL);
  *((_QWORD *)v952 + 1) = 0;
  *((_QWORD *)v952 + 2) = 0;
  *(_QWORD *)v952 = &off_1E42DED18;
  *((_QWORD *)v952 + 5) = 0;
  *((_QWORD *)v952 + 6) = 0;
  *((_QWORD *)v952 + 4) = 0;
  *((_DWORD *)v952 + 14) = 0;
  *((_QWORD *)v952 + 3) = &off_1E42B63B0;
  *(_OWORD *)(v952 + 60) = xmmword_19FFB4C00;
  *(_QWORD *)(v952 + 76) = 0x100000001;
  *((_DWORD *)v952 + 21) = 0;
  v1389.__sig = (uint64_t)(v952 + 24);
  *(_QWORD *)v1389.__opaque = v952;
  v953 = *(_QWORD *)(*(_QWORD *)(v451 + 40) + 136);
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_19FFB3490;
  strcpy((char *)__p[0], "/images/border_full.png");
  altitude::util::loadTextureFromBundle(&v1385, *(_QWORD *)(v953 + 80), (uint64_t)__p, 0, &v1389);
  v955 = v1385;
  v1385 = (pthread_mutexattr_t)0;
  v956 = *(std::__shared_weak_count **)(v451 + 264);
  *(pthread_mutexattr_t *)(v451 + 256) = v955;
  if (!v956)
    goto LABEL_611;
  v957 = (unint64_t *)&v956->__shared_owners_;
  do
    v958 = __ldaxr(v957);
  while (__stlxr(v958 - 1, v957));
  if (!v958)
  {
    ((void (*)(std::__shared_weak_count *))v956->__on_zero_shared)(v956);
    std::__shared_weak_count::__release_weak(v956);
    v959 = *(std::__shared_weak_count **)v1385.__opaque;
    if (!*(_QWORD *)v1385.__opaque)
      goto LABEL_615;
  }
  else
  {
LABEL_611:
    v959 = *(std::__shared_weak_count **)v1385.__opaque;
    if (!*(_QWORD *)v1385.__opaque)
      goto LABEL_615;
  }
  v960 = (unint64_t *)&v959->__shared_owners_;
  do
    v961 = __ldaxr(v960);
  while (__stlxr(v961 - 1, v960));
  if (v961)
  {
LABEL_615:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_617;
    goto LABEL_616;
  }
  ((void (*)(std::__shared_weak_count *))v959->__on_zero_shared)(v959);
  std::__shared_weak_count::__release_weak(v959);
  if (SHIBYTE(__p[2]) < 0)
LABEL_616:
    operator delete(__p[0]);
LABEL_617:
  RibbonTexture = md::realistic::RealisticRenderLayer::createRibbonTexture(v954);
  v963 = *(_QWORD *)(v451 + 248);
  *(_QWORD *)(v451 + 248) = RibbonTexture;
  if (v963)
    (*(void (**)(uint64_t))(*(_QWORD *)v963 + 8))(v963);
  v964 = *(_QWORD *)(*(_QWORD *)(v451 + 40) + 128);
  *(_QWORD *)(v451 + 216) = *(_QWORD *)(v964 + 456);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v964 + 464) + 64))(*(_QWORD *)(v964 + 464), *(_QWORD *)(v451 + 240));
  *(_QWORD *)(v451 + 184) = 0;
  v965 = *(_QWORD *)(v451 + 240);
  if (*(_BYTE *)(v451 + 32))
    *(_BYTE *)(v965 + 136) = 1;
  else
    altitude::RoadRequestManager::disable((pthread_mutex_t **)v965);
  v966 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v967 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v968 = __ldaxr(v967);
    while (__stlxr(v968 - 1, v967));
    if (!v968)
    {
      ((void (*)(std::__shared_weak_count *))v966->__on_zero_shared)(v966);
      std::__shared_weak_count::__release_weak(v966);
    }
  }
  v969 = *(_QWORD *)(v1375 + 40);
  v970 = 8 * *(unsigned __int8 *)(v451 + 34);
  v971 = *(_QWORD *)(v969 + v970);
  *(_QWORD *)(v969 + v970) = v451;
  if (v971)
    (*(void (**)(uint64_t))(*(_QWORD *)v971 + 8))(v971);
  v972 = operator new();
  *(_DWORD *)v1391 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 24);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer(v972, 3, v1375, v1391, 2);
  *(_QWORD *)v972 = &off_1E42B0130;
  *(_BYTE *)(v972 + 48) = 0;
  *(_QWORD *)(v972 + 168) = 0;
  *(_OWORD *)(v972 + 152) = 0u;
  *(_OWORD *)(v972 + 136) = 0u;
  *(_OWORD *)(v972 + 120) = 0u;
  *(_OWORD *)(v972 + 104) = 0u;
  *(_OWORD *)(v972 + 88) = 0u;
  *(_OWORD *)(v972 + 72) = 0u;
  *(_OWORD *)(v972 + 56) = 0u;
  v973 = *(_QWORD *)(v1375 + 120);
  *(_WORD *)(v972 + 176) = *(_WORD *)(*(_QWORD *)(v973 + 8) + 26);
  *(_BYTE *)(v972 + 178) = *(_BYTE *)(v973 + 56);
  v974 = objc_msgSend(*(id *)(*(_QWORD *)(v972 + 40) + 104), "format");
  if (*(_BYTE *)(v972 + 178))
  {
    v975 = 0;
    v976 = 0;
    memset(&v1391[20], 0, 24);
  }
  else
  {
    memset(&v1391[24], 0, 20);
    v976 = 7;
    *(_DWORD *)&v1391[20] = 7;
    v975 = 1;
  }
  v1391[0] = v975;
  *(_DWORD *)&v1391[4] = 1;
  *(_DWORD *)&v1391[8] = v976;
  *(_QWORD *)&v1391[12] = 0x100000000;
  v1392 = 15;
  v977 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v972 + 40) + 200) + 80);
  v978 = *(_QWORD *)(v977 + 640);
  v1389.__sig = *(_QWORD *)(v977 + 632);
  *(_QWORD *)v1389.__opaque = v978;
  if (v978)
  {
    v979 = (unint64_t *)(v978 + 8);
    do
      v980 = __ldxr(v979);
    while (__stxr(v980 + 1, v979));
  }
  v981 = operator new(0x198uLL);
  v981[1] = 0;
  v981[2] = 0;
  *v981 = &off_1E42DF1B0;
  *(_OWORD *)__p = *(_OWORD *)v974;
  *(_OWORD *)&__p[2] = *(_OWORD *)(v974 + 16);
  v982 = ggl::FlyoverTraffic::DefaultPipelineState::DefaultPipelineState((uint64_t)(v981 + 3), &v1389, (uint64_t)v1391, __p, *(_BYTE *)(v972 + 178));
  v983 = *(std::__shared_weak_count **)(v972 + 88);
  *(_QWORD *)(v972 + 80) = v982;
  *(_QWORD *)(v972 + 88) = v981;
  if (v983)
  {
    v984 = (unint64_t *)&v983->__shared_owners_;
    do
      v985 = __ldaxr(v984);
    while (__stlxr(v985 - 1, v984));
    if (!v985)
    {
      ((void (*)(std::__shared_weak_count *))v983->__on_zero_shared)(v983);
      std::__shared_weak_count::__release_weak(v983);
    }
  }
  v986 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v987 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v988 = __ldaxr(v987);
    while (__stlxr(v988 - 1, v987));
    if (!v988)
    {
      ((void (*)(std::__shared_weak_count *))v986->__on_zero_shared)(v986);
      std::__shared_weak_count::__release_weak(v986);
    }
  }
  v989 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v972 + 40) + 200) + 80);
  v990 = *(_QWORD *)(v989 + 712);
  v1385.__sig = *(_QWORD *)(v989 + 704);
  *(_QWORD *)v1385.__opaque = v990;
  if (v990)
  {
    v991 = (unint64_t *)(v990 + 8);
    do
      v992 = __ldxr(v991);
    while (__stxr(v992 + 1, v991));
  }
  memset((char *)&__p[2] + 4, 0, 24);
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)((char *)__p + 4) = xmmword_19FFB3060;
  BYTE4(__p[5]) = 15;
  v993 = operator new(0x198uLL);
  v993[1] = 0;
  v993[2] = 0;
  *v993 = &off_1E42E3858;
  v1389 = *(pthread_mutexattr_t *)v974;
  v1390 = *(_OWORD *)(v974 + 16);
  v994 = ggl::StenciledAlphaClear::ClearPipelineState::ClearPipelineState((uint64_t)(v993 + 3), &v1385, (uint64_t)__p, &v1389, *(_BYTE *)(v972 + 178));
  v995 = *(std::__shared_weak_count **)(v972 + 104);
  *(_QWORD *)(v972 + 96) = v994;
  *(_QWORD *)(v972 + 104) = v993;
  if (v995)
  {
    v996 = (unint64_t *)&v995->__shared_owners_;
    do
      v997 = __ldaxr(v996);
    while (__stlxr(v997 - 1, v996));
    if (!v997)
    {
      ((void (*)(std::__shared_weak_count *))v995->__on_zero_shared)(v995);
      std::__shared_weak_count::__release_weak(v995);
    }
  }
  v998 = *(std::__shared_weak_count **)v1385.__opaque;
  if (*(_QWORD *)v1385.__opaque)
  {
    v999 = (unint64_t *)(*(_QWORD *)v1385.__opaque + 8);
    do
      v1000 = __ldaxr(v999);
    while (__stlxr(v1000 - 1, v999));
    if (!v1000)
    {
      ((void (*)(std::__shared_weak_count *))v998->__on_zero_shared)(v998);
      std::__shared_weak_count::__release_weak(v998);
    }
  }
  v1001 = operator new();
  *(_DWORD *)(v1001 + 32) = 0;
  *(_QWORD *)(v1001 + 16) = 0;
  *(_QWORD *)(v1001 + 24) = 0;
  *(_QWORD *)v1001 = &off_1E42B5DE8;
  *(_QWORD *)(v1001 + 8) = 0;
  *(_QWORD *)(v1001 + 36) = 66304;
  *(_DWORD *)(v1001 + 44) = 0;
  *(_QWORD *)(v1001 + 48) = 0xFFFF0200000600;
  *(_WORD *)(v1001 + 56) = 0;
  *(_BYTE *)(v1001 + 58) = 3;
  *(_QWORD *)(v1001 + 67) = 0;
  *(_QWORD *)(v1001 + 59) = 0;
  *(_BYTE *)(v1001 + 75) = 0;
  *(_QWORD *)(v1001 + 132) = 0;
  *(_QWORD *)(v1001 + 124) = 0;
  *(_WORD *)(v1001 + 188) = 257;
  *(_QWORD *)(v1001 + 192) = 0;
  *(_QWORD *)(v1001 + 200) = 0;
  *(_BYTE *)(v1001 + 208) = 0;
  *(_QWORD *)(v972 + 64) = v1001;
  v1002 = operator new();
  *(_DWORD *)(v1002 + 32) = 0;
  *(_QWORD *)(v1002 + 16) = 0;
  *(_QWORD *)(v1002 + 24) = 0;
  *(_QWORD *)v1002 = &off_1E42B5DE8;
  *(_QWORD *)(v1002 + 8) = 0;
  *(_QWORD *)(v1002 + 36) = 65537;
  *(_DWORD *)(v1002 + 44) = 0;
  *(_QWORD *)(v1002 + 48) = 0xFF0000000400;
  *(_WORD *)(v1002 + 57) = 768;
  *(_QWORD *)(v1002 + 67) = 0;
  *(_QWORD *)(v1002 + 59) = 0;
  *(_BYTE *)(v1002 + 75) = 0;
  *(_QWORD *)(v1002 + 132) = 0;
  *(_QWORD *)(v1002 + 124) = 0;
  *(_WORD *)(v1002 + 188) = 257;
  *(_BYTE *)(v1002 + 208) = 0;
  *(_QWORD *)(v1002 + 192) = 0;
  *(_QWORD *)(v1002 + 200) = 0;
  *(_BYTE *)(v1002 + 56) = 0;
  *(_QWORD *)(v972 + 72) = v1002;
  v1003 = operator new();
  v1004 = (_QWORD *)ggl::BufferData::BufferData(v1003, qword_1EE569EB0, 2, 1, 6, 1);
  v1004[25] = ggl::FlyoverRibbon::View::reflection(void)::reflection;
  *v1004 = &off_1E42B8ED0;
  v1005 = (_QWORD *)operator new();
  *v1005 = &off_1E42E79C0;
  v1005[1] = 0;
  v1005[2] = 0;
  v1005[3] = v1003;
  v1006 = *(std::__shared_weak_count **)(v972 + 120);
  *(_QWORD *)(v972 + 112) = v1003;
  *(_QWORD *)(v972 + 120) = v1005;
  if (v1006)
  {
    v1007 = (unint64_t *)&v1006->__shared_owners_;
    do
      v1008 = __ldaxr(v1007);
    while (__stlxr(v1008 - 1, v1007));
    if (!v1008)
    {
      ((void (*)(std::__shared_weak_count *))v1006->__on_zero_shared)(v1006);
      std::__shared_weak_count::__release_weak(v1006);
    }
  }
  v1009 = operator new();
  v1010 = ggl::BufferData::BufferData(v1009, qword_1EE560BC0, 2, 1, 6, 1);
  *(_QWORD *)(v1010 + 200) = ggl::FlyoverTraffic::Shared::reflection(void)::reflection;
  *(_QWORD *)v1010 = &off_1E42B9010;
  v1011 = *(_QWORD *)(v1010 + 8);
  **(_DWORD **)(v1010 + 72) = 1065353216;
  if (*(_QWORD *)(v1010 + 64) > v1011)
    v1011 = *(_QWORD *)(v1010 + 64);
  *(_QWORD *)(v1010 + 56) = 0;
  *(_QWORD *)(v1010 + 64) = v1011;
  v1012 = (_QWORD *)operator new();
  *v1012 = &off_1E42E79F8;
  v1012[1] = 0;
  v1012[2] = 0;
  v1012[3] = v1009;
  v1013 = *(std::__shared_weak_count **)(v972 + 136);
  *(_QWORD *)(v972 + 128) = v1009;
  *(_QWORD *)(v972 + 136) = v1012;
  if (v1013)
  {
    v1014 = (unint64_t *)&v1013->__shared_owners_;
    do
      v1015 = __ldaxr(v1014);
    while (__stlxr(v1015 - 1, v1014));
    if (!v1015)
    {
      ((void (*)(std::__shared_weak_count *))v1013->__on_zero_shared)(v1013);
      std::__shared_weak_count::__release_weak(v1013);
    }
  }
  v1016 = *(_QWORD *)(v972 + 40);
  *(_QWORD *)(v972 + 144) = *(_QWORD *)(**(_QWORD **)(v1016 + 136) + 456);
  v1017 = *(uint64_t **)(v1016 + 152);
  v1018 = (karo::RequestPruner *)v1017[3];
  v1019 = *v1017;
  v1020 = *(_QWORD **)(v1016 + 128);
  v1021 = v1020[1];
  v1022 = v1020[94];
  v1023 = v1020[6];
  v1024 = operator new();
  v1025 = operator new(0x20uLL);
  __p[0] = v1025;
  *(_OWORD *)&__p[1] = xmmword_19FFB3890;
  strcpy((char *)v1025, "/loading/cache/traffic/dynamic");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v1024, (__int128 *)__p, *(_QWORD *)(*(_QWORD *)(v972 + 40) + 136));
  *(_QWORD *)(v1024 + 72) = 0;
  *(_QWORD *)(v1024 + 80) = 0;
  *(_QWORD *)(v1024 + 64) = v1024 + 72;
  *(_DWORD *)(v1024 + 88) = 0;
  *(_QWORD *)v1024 = off_1E42C4770;
  *(_OWORD *)(v1024 + 96) = 0u;
  *(_OWORD *)(v1024 + 112) = 0u;
  *(_DWORD *)(v1024 + 128) = 1065353216;
  *(_QWORD *)(v1024 + 136) = 0;
  pthread_mutexattr_init(&v1389);
  pthread_mutexattr_settype(&v1389, 2);
  v1026 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v1026, &v1389);
  pthread_mutexattr_destroy(&v1389);
  *(_QWORD *)(v1024 + 136) = v1026;
  *(_DWORD *)(v1024 + 144) = 0;
  *(_QWORD *)v1024 = &off_1E42C4C68;
  *(_QWORD *)(v1024 + 152) = 0;
  *(_QWORD *)(v1024 + 160) = 0;
  *(_DWORD *)(v1024 + 168) = 0;
  v1027 = *(_QWORD *)(v972 + 168);
  *(_QWORD *)(v972 + 168) = v1024;
  if (v1027)
    (*(void (**)(uint64_t))(*(_QWORD *)v1027 + 8))(v1027);
  operator delete(v1025);
  *(_QWORD *)(*(_QWORD *)(v972 + 168) + 48) = v1019;
  *(_QWORD *)(*(_QWORD *)(v972 + 168) + 160) = v1022;
  *(_QWORD *)(*(_QWORD *)(v972 + 168) + 152) = v1021;
  karo::RequestPruner::addRequestManager(v1018, *(karo::AsyncRequestManager **)(v972 + 168));
  v1028 = operator new();
  v1029 = operator new(0x20uLL);
  __p[0] = v1029;
  *(_OWORD *)&__p[1] = xmmword_19FFB34A0;
  strcpy((char *)v1029, "/loading/traffictiledatacache");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v1028, (__int128 *)__p, *(_QWORD *)(*(_QWORD *)(v972 + 40) + 136));
  *(_QWORD *)(v1028 + 72) = 0;
  *(_QWORD *)(v1028 + 80) = 0;
  *(_QWORD *)(v1028 + 64) = v1028 + 72;
  *(_DWORD *)(v1028 + 88) = 0;
  *(_QWORD *)v1028 = off_1E42C46C8;
  *(_OWORD *)(v1028 + 96) = 0u;
  *(_OWORD *)(v1028 + 112) = 0u;
  *(_DWORD *)(v1028 + 128) = 1065353216;
  *(_QWORD *)(v1028 + 136) = 0;
  pthread_mutexattr_init(&v1389);
  pthread_mutexattr_settype(&v1389, 2);
  v1030 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v1030, &v1389);
  pthread_mutexattr_destroy(&v1389);
  *(_QWORD *)(v1028 + 136) = v1030;
  *(_DWORD *)(v1028 + 144) = 0;
  *(_QWORD *)v1028 = &off_1E42C5A80;
  *(_QWORD *)(v1028 + 184) = 0;
  *(_QWORD *)(v1028 + 192) = 0;
  *(_DWORD *)(v1028 + 200) = 0;
  v1031 = *(_QWORD *)(v972 + 160);
  *(_QWORD *)(v972 + 160) = v1028;
  if (v1031)
    (*(void (**)(uint64_t))(*(_QWORD *)v1031 + 8))(v1031);
  operator delete(v1029);
  *(_QWORD *)(*(_QWORD *)(v972 + 160) + 48) = v1019;
  *(_QWORD *)(*(_QWORD *)(v972 + 160) + 152) = v1021;
  *(_QWORD *)(*(_QWORD *)(v972 + 160) + 160) = *(_QWORD *)(v972 + 168);
  *(_QWORD *)(*(_QWORD *)(v972 + 160) + 168) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v972 + 40) + 40)
                                                                       + 16)
                                                           + 232);
  *(_QWORD *)(*(_QWORD *)(v972 + 160) + 176) = v1022;
  karo::RequestPruner::addRequestManager(v1018, *(karo::AsyncRequestManager **)(v972 + 160));
  v1032 = operator new();
  v1033 = operator new(0x20uLL);
  __p[0] = v1033;
  *(_OWORD *)&__p[1] = xmmword_19FFB3D50;
  strcpy((char *)v1033, "/loading/skeletonrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v1032, (__int128 *)__p, *(_QWORD *)(*(_QWORD *)(v972 + 40) + 136));
  *(_QWORD *)(v1032 + 72) = 0;
  *(_QWORD *)(v1032 + 80) = 0;
  *(_QWORD *)(v1032 + 64) = v1032 + 72;
  *(_DWORD *)(v1032 + 88) = 0;
  *(_QWORD *)v1032 = &off_1E42C6080;
  *(_BYTE *)(v1032 + 92) = 0;
  *(_OWORD *)(v1032 + 96) = 0u;
  *(_OWORD *)(v1032 + 112) = 0u;
  *(_OWORD *)(v1032 + 128) = 0u;
  *(_QWORD *)(v1032 + 144) = 0;
  *(std::chrono::steady_clock::time_point *)(v1032 + 144) = std::chrono::steady_clock::now();
  *(_QWORD *)(v1032 + 152) = 0;
  *(_DWORD *)(v1032 + 160) = 0;
  v1034 = *(_QWORD *)(v972 + 152);
  *(_QWORD *)(v972 + 152) = v1032;
  if (v1034)
    (*(void (**)(uint64_t))(*(_QWORD *)v1034 + 8))(v1034);
  operator delete(v1033);
  *(_QWORD *)(*(_QWORD *)(v972 + 152) + 48) = v1019;
  *(_QWORD *)(*(_QWORD *)(v972 + 152) + 120) = v1021;
  *(_QWORD *)(*(_QWORD *)(v972 + 152) + 112) = v1023;
  *(_QWORD *)(*(_QWORD *)(v972 + 152) + 128) = v1022;
  *(_QWORD *)(*(_QWORD *)(v972 + 152) + 136) = *(_QWORD *)(v972 + 160);
  karo::RequestPruner::addRequestManager(v1018, *(karo::AsyncRequestManager **)(v972 + 152));
  *(_QWORD *)(v972 + 56) = 0;
  v1035 = *(_QWORD *)(v972 + 152);
  if (*(_BYTE *)(v972 + 32))
  {
    *(_BYTE *)(v1035 + 92) = 1;
  }
  else
  {
    altitude::SkeletonRequestManager::disable(*(pthread_mutex_t ***)(v972 + 152));
    v1035 = *(_QWORD *)(v972 + 152);
  }
  v1036 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v972 + 40) + 128) + 464);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1036 + 72))(v1036, v1035);
  v1037 = *(_QWORD *)(v1375 + 40);
  v1038 = 8 * *(unsigned __int8 *)(v972 + 34);
  v1039 = *(_QWORD *)(v1037 + v1038);
  *(_QWORD *)(v1037 + v1038) = v972;
  if (v1039)
    (*(void (**)(uint64_t))(*(_QWORD *)v1039 + 8))(v1039);
  v1040 = operator new();
  *(_WORD *)v1391 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 20);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer(v1040, 4, v1375, v1391, 1);
  *(_QWORD *)v1040 = &off_1E42AFFB8;
  *(_WORD *)(v1040 + 48) = 0;
  *(_BYTE *)(v1040 + 50) = 0;
  *(_OWORD *)(v1040 + 72) = 0u;
  *(_OWORD *)(v1040 + 88) = 0u;
  *(_OWORD *)(v1040 + 104) = 0u;
  *(_OWORD *)(v1040 + 120) = 0u;
  *(_OWORD *)(v1040 + 136) = 0u;
  *(_OWORD *)(v1040 + 152) = 0u;
  *(_OWORD *)(v1040 + 168) = 0u;
  *(_OWORD *)(v1040 + 184) = 0u;
  *(_OWORD *)(v1040 + 200) = 0u;
  *(_OWORD *)(v1040 + 216) = 0u;
  *(_OWORD *)(v1040 + 232) = 0u;
  *(_OWORD *)(v1040 + 56) = 0u;
  *(_OWORD *)(v1040 + 248) = 0u;
  *(_OWORD *)(v1040 + 264) = 0u;
  *(_OWORD *)(v1040 + 280) = 0u;
  *(_OWORD *)(v1040 + 296) = 0u;
  *(_OWORD *)(v1040 + 312) = 0u;
  v1041 = *(_QWORD *)(v1375 + 120);
  *(_WORD *)(v1040 + 328) = *(_WORD *)(*(_QWORD *)(v1041 + 8) + 20);
  *(_BYTE *)(v1040 + 330) = *(_BYTE *)(v1041 + 56);
  v1042 = (_OWORD *)objc_msgSend(*(id *)(v1375 + 104), "format");
  v1043 = operator new();
  v1044 = (_QWORD *)ggl::BufferData::BufferData(v1043, qword_1EE569EB0, 2, 1, 6, 1);
  v1044[25] = ggl::FlyoverRibbon::View::reflection(void)::reflection;
  *v1044 = &off_1E42B8ED0;
  v1045 = (_QWORD *)operator new();
  *v1045 = &off_1E42E79C0;
  v1045[1] = 0;
  v1045[2] = 0;
  v1045[3] = v1043;
  v1046 = *(std::__shared_weak_count **)(v1040 + 192);
  *(_QWORD *)(v1040 + 184) = v1043;
  *(_QWORD *)(v1040 + 192) = v1045;
  if (v1046)
  {
    v1047 = (unint64_t *)&v1046->__shared_owners_;
    do
      v1048 = __ldaxr(v1047);
    while (__stlxr(v1048 - 1, v1047));
    if (!v1048)
    {
      ((void (*)(std::__shared_weak_count *))v1046->__on_zero_shared)(v1046);
      std::__shared_weak_count::__release_weak(v1046);
    }
  }
  v1049 = operator new();
  v1050 = ggl::BufferData::BufferData(v1049, qword_1EE560BC0, 2, 1, 6, 1);
  *(_QWORD *)(v1050 + 200) = ggl::FlyoverTraffic::Shared::reflection(void)::reflection;
  *(_QWORD *)v1050 = &off_1E42B9010;
  v1051 = *(_QWORD *)(v1050 + 8);
  **(_DWORD **)(v1050 + 72) = 0;
  if (*(_QWORD *)(v1050 + 64) > v1051)
    v1051 = *(_QWORD *)(v1050 + 64);
  *(_QWORD *)(v1050 + 56) = 0;
  *(_QWORD *)(v1050 + 64) = v1051;
  v1052 = (_QWORD *)operator new();
  *v1052 = &off_1E42E79F8;
  v1052[1] = 0;
  v1052[2] = 0;
  v1052[3] = v1049;
  v1053 = *(std::__shared_weak_count **)(v1040 + 208);
  *(_QWORD *)(v1040 + 200) = v1049;
  *(_QWORD *)(v1040 + 208) = v1052;
  if (v1053)
  {
    v1054 = (unint64_t *)&v1053->__shared_owners_;
    do
      v1055 = __ldaxr(v1054);
    while (__stlxr(v1055 - 1, v1054));
    if (!v1055)
    {
      ((void (*)(std::__shared_weak_count *))v1053->__on_zero_shared)(v1053);
      std::__shared_weak_count::__release_weak(v1053);
    }
  }
  v1056 = *(unsigned __int8 *)(v1040 + 330);
  v1057 = operator new();
  *(_DWORD *)(v1057 + 32) = 0;
  *(_QWORD *)(v1057 + 16) = 0;
  *(_QWORD *)(v1057 + 24) = 0;
  v1058 = 0xFFFF0200000500;
  if (v1056)
    v1058 = 0xFFFF0200000100;
  *(_QWORD *)v1057 = &off_1E42B5DE8;
  *(_QWORD *)(v1057 + 8) = 0;
  *(_QWORD *)(v1057 + 36) = 66304;
  *(_DWORD *)(v1057 + 44) = 0;
  *(_QWORD *)(v1057 + 48) = v1058;
  *(_WORD *)(v1057 + 56) = 0;
  *(_BYTE *)(v1057 + 58) = 3;
  *(_QWORD *)(v1057 + 67) = 0;
  *(_QWORD *)(v1057 + 59) = 0;
  *(_BYTE *)(v1057 + 75) = 0;
  *(_QWORD *)(v1057 + 132) = 0;
  *(_QWORD *)(v1057 + 124) = 0;
  *(_WORD *)(v1057 + 188) = 257;
  *(_QWORD *)(v1057 + 192) = 0;
  *(_QWORD *)(v1057 + 200) = 0;
  *(_BYTE *)(v1057 + 208) = v1056 ^ 1;
  *(_QWORD *)(v1040 + 120) = v1057;
  if (*(_BYTE *)(v1040 + 330))
  {
    v1059 = 0;
    v1060 = 1;
  }
  else
  {
    v1059 = operator new();
    *(_DWORD *)(v1059 + 32) = 0;
    *(_QWORD *)(v1059 + 16) = 0;
    *(_QWORD *)(v1059 + 24) = 0;
    *(_QWORD *)v1059 = &off_1E42B5DE8;
    *(_QWORD *)(v1059 + 8) = 0;
    *(_QWORD *)(v1059 + 36) = 66304;
    *(_DWORD *)(v1059 + 44) = 0;
    *(_QWORD *)(v1059 + 48) = 0xFFFF0200000500;
    *(_WORD *)(v1059 + 56) = 0;
    *(_BYTE *)(v1059 + 58) = 3;
    *(_QWORD *)(v1059 + 67) = 0;
    *(_QWORD *)(v1059 + 59) = 0;
    *(_BYTE *)(v1059 + 75) = 0;
    *(_QWORD *)(v1059 + 132) = 0;
    *(_QWORD *)(v1059 + 124) = 0;
    *(_WORD *)(v1059 + 188) = 257;
    *(_QWORD *)(v1059 + 192) = 0;
    *(_QWORD *)(v1059 + 200) = 0;
    *(_BYTE *)(v1059 + 208) = 1;
    v1060 = *(unsigned __int8 *)(v1040 + 330);
  }
  *(_QWORD *)(v1040 + 128) = v1059;
  v1061 = operator new();
  *(_DWORD *)(v1061 + 32) = 0;
  *(_QWORD *)(v1061 + 16) = 0;
  *(_QWORD *)(v1061 + 24) = 0;
  v1062 = 0xFFFF0200000600;
  if (v1060)
    v1062 = 0xFFFF0200000100;
  *(_QWORD *)v1061 = &off_1E42B5DE8;
  *(_QWORD *)(v1061 + 8) = 0;
  *(_QWORD *)(v1061 + 36) = 66304;
  *(_DWORD *)(v1061 + 44) = 0;
  *(_QWORD *)(v1061 + 48) = v1062;
  *(_WORD *)(v1061 + 56) = 0;
  *(_BYTE *)(v1061 + 58) = 3;
  *(_QWORD *)(v1061 + 67) = 0;
  *(_QWORD *)(v1061 + 59) = 0;
  *(_BYTE *)(v1061 + 75) = 0;
  *(_QWORD *)(v1061 + 132) = 0;
  *(_QWORD *)(v1061 + 124) = 0;
  *(_WORD *)(v1061 + 188) = 257;
  *(_QWORD *)(v1061 + 192) = 0;
  *(_QWORD *)(v1061 + 200) = 0;
  *(_BYTE *)(v1061 + 208) = v1060 ^ 1;
  *(_QWORD *)(v1040 + 136) = v1061;
  v1063 = operator new();
  *(_DWORD *)(v1063 + 32) = 0;
  *(_QWORD *)(v1063 + 16) = 0;
  *(_QWORD *)(v1063 + 24) = 0;
  *(_QWORD *)v1063 = &off_1E42B5DE8;
  *(_QWORD *)(v1063 + 8) = 0;
  *(_QWORD *)(v1063 + 36) = 66304;
  *(_DWORD *)(v1063 + 44) = 0;
  *(_QWORD *)(v1063 + 48) = 1;
  *(_WORD *)(v1063 + 56) = 0;
  *(_BYTE *)(v1063 + 58) = 3;
  *(_QWORD *)(v1063 + 67) = 0;
  *(_QWORD *)(v1063 + 59) = 0;
  *(_BYTE *)(v1063 + 75) = 0;
  *(_QWORD *)(v1063 + 132) = 0;
  *(_QWORD *)(v1063 + 124) = 0;
  *(_WORD *)(v1063 + 188) = 257;
  *(_QWORD *)(v1063 + 192) = 0;
  *(_QWORD *)(v1063 + 200) = 0;
  *(_BYTE *)(v1063 + 208) = 0;
  *(_QWORD *)(v1040 + 144) = v1063;
  if (*(_BYTE *)(v1040 + 330))
  {
    v1064 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
    v1065 = *(_QWORD *)(v1064 + 616);
    v1389.__sig = *(_QWORD *)(v1064 + 608);
    *(_QWORD *)v1389.__opaque = v1065;
    if (v1065)
    {
      v1066 = (unint64_t *)(v1065 + 8);
      do
        v1067 = __ldxr(v1066);
      while (__stxr(v1067 + 1, v1066));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v1068 = operator new(0x198uLL);
    v1068[1] = 0;
    v1068[2] = 0;
    *v1068 = &off_1E42DEC70;
    *(_OWORD *)__p = *v1042;
    *(_OWORD *)&__p[2] = v1042[1];
    v1069 = ggl::FlyoverRoute::DefaultPipelineState::DefaultPipelineState((uint64_t)(v1068 + 3), &v1389, (uint64_t)v1391, __p, 1);
    v1070 = *(std::__shared_weak_count **)(v1040 + 64);
    *(_QWORD *)(v1040 + 56) = v1069;
    *(_QWORD *)(v1040 + 64) = v1068;
    if (v1070)
    {
      v1071 = (unint64_t *)&v1070->__shared_owners_;
      do
        v1072 = __ldaxr(v1071);
      while (__stlxr(v1072 - 1, v1071));
      if (!v1072)
      {
        ((void (*)(std::__shared_weak_count *))v1070->__on_zero_shared)(v1070);
        std::__shared_weak_count::__release_weak(v1070);
      }
    }
    v1073 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v1074 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v1075 = __ldaxr(v1074);
      while (__stlxr(v1075 - 1, v1074));
      if (!v1075)
      {
        ((void (*)(std::__shared_weak_count *))v1073->__on_zero_shared)(v1073);
        std::__shared_weak_count::__release_weak(v1073);
      }
    }
    v1076 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
    v1077 = *(_QWORD *)(v1076 + 640);
    v1389.__sig = *(_QWORD *)(v1076 + 632);
    *(_QWORD *)v1389.__opaque = v1077;
    if (v1077)
    {
      v1078 = (unint64_t *)(v1077 + 8);
      do
        v1079 = __ldxr(v1078);
      while (__stxr(v1079 + 1, v1078));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v1080 = operator new(0x198uLL);
    v1080[1] = 0;
    v1080[2] = 0;
    *v1080 = &off_1E42DF1B0;
    *(_OWORD *)__p = *v1042;
    *(_OWORD *)&__p[2] = v1042[1];
    v1081 = ggl::FlyoverTraffic::DefaultPipelineState::DefaultPipelineState((uint64_t)(v1080 + 3), &v1389, (uint64_t)v1391, __p, 1);
    v1082 = *(std::__shared_weak_count **)(v1040 + 80);
    *(_QWORD *)(v1040 + 72) = v1081;
    *(_QWORD *)(v1040 + 80) = v1080;
    if (v1082)
    {
      v1083 = (unint64_t *)&v1082->__shared_owners_;
      do
        v1084 = __ldaxr(v1083);
      while (__stlxr(v1084 - 1, v1083));
      if (!v1084)
      {
        ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
        std::__shared_weak_count::__release_weak(v1082);
      }
    }
    v1085 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v1086 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v1087 = __ldaxr(v1086);
      while (__stlxr(v1087 - 1, v1086));
      if (!v1087)
      {
        ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
        std::__shared_weak_count::__release_weak(v1085);
      }
    }
    v1088 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
    v1089 = *(_QWORD *)(v1088 + 160);
    v1389.__sig = *(_QWORD *)(v1088 + 152);
    *(_QWORD *)v1389.__opaque = v1089;
    if (v1089)
    {
      v1090 = (unint64_t *)(v1089 + 8);
      do
        v1091 = __ldxr(v1090);
      while (__stxr(v1091 + 1, v1090));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v1092 = operator new(0x198uLL);
    v1092[1] = 0;
    v1092[2] = 0;
    *v1092 = &off_1E42DF5A0;
    *(_OWORD *)__p = *v1042;
    *(_OWORD *)&__p[2] = v1042[1];
    v1093 = ggl::FlyoverManeuver::DefaultPipelineState::DefaultPipelineState((uint64_t)(v1092 + 3), &v1389, (uint64_t)v1391, __p, 1);
    v1094 = *(std::__shared_weak_count **)(v1040 + 96);
    *(_QWORD *)(v1040 + 88) = v1093;
    *(_QWORD *)(v1040 + 96) = v1092;
    if (v1094)
    {
      v1095 = (unint64_t *)&v1094->__shared_owners_;
      do
        v1096 = __ldaxr(v1095);
      while (__stlxr(v1096 - 1, v1095));
      if (!v1096)
      {
        ((void (*)(std::__shared_weak_count *))v1094->__on_zero_shared)(v1094);
        std::__shared_weak_count::__release_weak(v1094);
      }
    }
    v1097 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v1098 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v1099 = __ldaxr(v1098);
      while (__stlxr(v1099 - 1, v1098));
      goto LABEL_776;
    }
  }
  else
  {
    v1100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
    v1101 = *(_QWORD *)(v1100 + 616);
    v1389.__sig = *(_QWORD *)(v1100 + 608);
    *(_QWORD *)v1389.__opaque = v1101;
    if (v1101)
    {
      v1102 = (unint64_t *)(v1101 + 8);
      do
        v1103 = __ldxr(v1102);
      while (__stxr(v1103 + 1, v1102));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v1104 = operator new(0x198uLL);
    v1104[1] = 0;
    v1104[2] = 0;
    *v1104 = &off_1E42DEC70;
    *(_OWORD *)__p = *v1042;
    *(_OWORD *)&__p[2] = v1042[1];
    v1105 = ggl::FlyoverRoute::DefaultPipelineState::DefaultPipelineState((uint64_t)(v1104 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v1106 = *(std::__shared_weak_count **)(v1040 + 64);
    *(_QWORD *)(v1040 + 56) = v1105;
    *(_QWORD *)(v1040 + 64) = v1104;
    if (v1106)
    {
      v1107 = (unint64_t *)&v1106->__shared_owners_;
      do
        v1108 = __ldaxr(v1107);
      while (__stlxr(v1108 - 1, v1107));
      if (!v1108)
      {
        ((void (*)(std::__shared_weak_count *))v1106->__on_zero_shared)(v1106);
        std::__shared_weak_count::__release_weak(v1106);
      }
    }
    v1109 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v1110 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v1111 = __ldaxr(v1110);
      while (__stlxr(v1111 - 1, v1110));
      if (!v1111)
      {
        ((void (*)(std::__shared_weak_count *))v1109->__on_zero_shared)(v1109);
        std::__shared_weak_count::__release_weak(v1109);
      }
    }
    v1112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
    v1113 = *(_QWORD *)(v1112 + 640);
    v1389.__sig = *(_QWORD *)(v1112 + 632);
    *(_QWORD *)v1389.__opaque = v1113;
    if (v1113)
    {
      v1114 = (unint64_t *)(v1113 + 8);
      do
        v1115 = __ldxr(v1114);
      while (__stxr(v1115 + 1, v1114));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v1116 = operator new(0x198uLL);
    v1116[1] = 0;
    v1116[2] = 0;
    *v1116 = &off_1E42DF1B0;
    *(_OWORD *)__p = *v1042;
    *(_OWORD *)&__p[2] = v1042[1];
    v1117 = ggl::FlyoverTraffic::DefaultPipelineState::DefaultPipelineState((uint64_t)(v1116 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v1118 = *(std::__shared_weak_count **)(v1040 + 80);
    *(_QWORD *)(v1040 + 72) = v1117;
    *(_QWORD *)(v1040 + 80) = v1116;
    if (v1118)
    {
      v1119 = (unint64_t *)&v1118->__shared_owners_;
      do
        v1120 = __ldaxr(v1119);
      while (__stlxr(v1120 - 1, v1119));
      if (!v1120)
      {
        ((void (*)(std::__shared_weak_count *))v1118->__on_zero_shared)(v1118);
        std::__shared_weak_count::__release_weak(v1118);
      }
    }
    v1121 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v1122 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v1123 = __ldaxr(v1122);
      while (__stlxr(v1123 - 1, v1122));
      if (!v1123)
      {
        ((void (*)(std::__shared_weak_count *))v1121->__on_zero_shared)(v1121);
        std::__shared_weak_count::__release_weak(v1121);
      }
    }
    v1124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
    v1125 = *(_QWORD *)(v1124 + 160);
    v1389.__sig = *(_QWORD *)(v1124 + 152);
    *(_QWORD *)v1389.__opaque = v1125;
    if (v1125)
    {
      v1126 = (unint64_t *)(v1125 + 8);
      do
        v1127 = __ldxr(v1126);
      while (__stxr(v1127 + 1, v1126));
    }
    memset(&v1391[24], 0, 20);
    v1391[0] = 1;
    *(_OWORD *)&v1391[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v1391[20] = 7;
    v1392 = 15;
    v1128 = operator new(0x198uLL);
    v1128[1] = 0;
    v1128[2] = 0;
    *v1128 = &off_1E42DF5A0;
    *(_OWORD *)__p = *v1042;
    *(_OWORD *)&__p[2] = v1042[1];
    v1129 = ggl::FlyoverManeuver::DefaultPipelineState::DefaultPipelineState((uint64_t)(v1128 + 3), &v1389, (uint64_t)v1391, __p, 0);
    v1130 = *(std::__shared_weak_count **)(v1040 + 96);
    *(_QWORD *)(v1040 + 88) = v1129;
    *(_QWORD *)(v1040 + 96) = v1128;
    if (v1130)
    {
      v1131 = (unint64_t *)&v1130->__shared_owners_;
      do
        v1132 = __ldaxr(v1131);
      while (__stlxr(v1132 - 1, v1131));
      if (!v1132)
      {
        ((void (*)(std::__shared_weak_count *))v1130->__on_zero_shared)(v1130);
        std::__shared_weak_count::__release_weak(v1130);
      }
    }
    v1097 = *(std::__shared_weak_count **)v1389.__opaque;
    if (*(_QWORD *)v1389.__opaque)
    {
      v1133 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
      do
        v1099 = __ldaxr(v1133);
      while (__stlxr(v1099 - 1, v1133));
LABEL_776:
      if (!v1099)
      {
        ((void (*)(std::__shared_weak_count *))v1097->__on_zero_shared)(v1097);
        std::__shared_weak_count::__release_weak(v1097);
      }
    }
  }
  v1134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1040 + 40) + 200) + 80);
  v1135 = *(_QWORD *)(v1134 + 712);
  v1389.__sig = *(_QWORD *)(v1134 + 704);
  *(_QWORD *)v1389.__opaque = v1135;
  if (v1135)
  {
    v1136 = (unint64_t *)(v1135 + 8);
    do
      v1137 = __ldxr(v1136);
    while (__stxr(v1137 + 1, v1136));
  }
  memset(&v1391[20], 0, 24);
  v1391[0] = 0;
  *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
  v1392 = 15;
  v1138 = operator new(0x198uLL);
  v1138[1] = 0;
  v1138[2] = 0;
  *v1138 = &off_1E42E3858;
  *(_OWORD *)__p = *v1042;
  *(_OWORD *)&__p[2] = v1042[1];
  v1139 = ggl::StenciledAlphaClear::ClearPipelineState::ClearPipelineState((uint64_t)(v1138 + 3), &v1389, (uint64_t)v1391, __p, *(_BYTE *)(v1040 + 330));
  v1140 = *(std::__shared_weak_count **)(v1040 + 112);
  *(_QWORD *)(v1040 + 104) = v1139;
  *(_QWORD *)(v1040 + 112) = v1138;
  if (v1140)
  {
    v1141 = (unint64_t *)&v1140->__shared_owners_;
    do
      v1142 = __ldaxr(v1141);
    while (__stlxr(v1142 - 1, v1141));
    if (!v1142)
    {
      ((void (*)(std::__shared_weak_count *))v1140->__on_zero_shared)(v1140);
      std::__shared_weak_count::__release_weak(v1140);
    }
  }
  v1143 = *(std::__shared_weak_count **)v1389.__opaque;
  if (*(_QWORD *)v1389.__opaque)
  {
    v1144 = (unint64_t *)(*(_QWORD *)v1389.__opaque + 8);
    do
      v1145 = __ldaxr(v1144);
    while (__stlxr(v1145 - 1, v1144));
    if (!v1145)
    {
      ((void (*)(std::__shared_weak_count *))v1143->__on_zero_shared)(v1143);
      std::__shared_weak_count::__release_weak(v1143);
    }
  }
  v1146 = operator new();
  *(_DWORD *)(v1146 + 32) = 0;
  *(_QWORD *)(v1146 + 16) = 0;
  *(_QWORD *)(v1146 + 24) = 0;
  *(_QWORD *)v1146 = &off_1E42B5DE8;
  *(_QWORD *)(v1146 + 8) = 0;
  *(_QWORD *)(v1146 + 36) = 65537;
  *(_DWORD *)(v1146 + 44) = 0;
  *(_QWORD *)(v1146 + 48) = 0xFF0000000300;
  *(_WORD *)(v1146 + 57) = 768;
  *(_QWORD *)(v1146 + 67) = 0;
  *(_QWORD *)(v1146 + 59) = 0;
  *(_BYTE *)(v1146 + 75) = 0;
  *(_QWORD *)(v1146 + 132) = 0;
  *(_QWORD *)(v1146 + 124) = 0;
  *(_WORD *)(v1146 + 188) = 257;
  *(_BYTE *)(v1146 + 208) = 0;
  *(_QWORD *)(v1146 + 192) = 0;
  *(_QWORD *)(v1146 + 200) = 0;
  *(_BYTE *)(v1146 + 56) = 0;
  *(_QWORD *)(v1040 + 152) = v1146;
  v1147 = (_QWORD *)operator new();
  *v1147 = &unk_1E4293458;
  v1147[1] = 0;
  v1148 = -[RouteRenderLayerObserverProxy initWithPolylineGroupObserver:]([RouteRenderLayerObserverProxy alloc], "initWithPolylineGroupObserver:", v1147);
  v1149 = (void *)v1147[1];
  v1147[1] = v1148;

  *v1147 = off_1E42A07F0;
  v1150 = -[VKGlobeLineContainer initWithRouteRenderLayer:]([VKGlobeLineContainer alloc], "initWithRouteRenderLayer:", v1040);
  v1147[2] = &off_1E42B4EF0;
  v1147[3] = v1150;
  v1151 = -[GlobeLineContainerDelegate initWithRenderer:]([GlobeLineContainerDelegate alloc], "initWithRenderer:", *(_QWORD *)(v1040 + 40));
  v1147[5] = &off_1E42B5190;
  v1147[6] = v1151;
  v1152 = (void *)v1147[3];
  v1153 = v1151;
  objc_msgSend(v1152, "setDelegate:", v1153);

  v1154 = *(_QWORD *)(v1040 + 320);
  *(_QWORD *)(v1040 + 320) = v1147;
  if (v1154)
    (*(void (**)(uint64_t))(*(_QWORD *)v1154 + 48))(v1154);
  v1155 = *(_QWORD *)(v1375 + 40);
  v1156 = 8 * *(unsigned __int8 *)(v1040 + 34);
  v1157 = *(_QWORD *)(v1155 + v1156);
  *(_QWORD *)(v1155 + v1156) = v1040;
  if (v1157)
    (*(void (**)(uint64_t))(*(_QWORD *)v1157 + 8))(v1157);
  v1158 = operator new();
  *(_WORD *)v1391 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8) + 30);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer(v1158, 5, v1375, v1391, 1);
  *(_QWORD *)v1158 = &off_1E42AFF58;
  *(_OWORD *)(v1158 + 48) = 0u;
  *(_OWORD *)(v1158 + 64) = 0u;
  *(_OWORD *)(v1158 + 80) = 0u;
  *(_QWORD *)(v1158 + 96) = 0;
  v1159 = *(_QWORD *)(v1158 + 40);
  v1160 = *(uint64_t **)(v1159 + 152);
  v1161 = *v1160;
  v1162 = *(_QWORD **)(v1159 + 128);
  v1163 = v1162[1];
  v1164 = v1162[94];
  v1165 = (karo::RequestPruner *)v1160[3];
  v1376 = v1162[6];
  v1166 = operator new();
  v1167 = (char *)operator new(0x28uLL);
  *(_QWORD *)v1391 = v1167;
  *(_OWORD *)&v1391[8] = xmmword_19FFB3DB0;
  strcpy(v1167, "/loading/network/regionalresourceloader");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v1166, (__int128 *)v1391, *(_QWORD *)(*(_QWORD *)(v1158 + 40) + 136));
  *(_QWORD *)(v1166 + 80) = 0;
  *(_QWORD *)(v1166 + 72) = 0;
  *(_QWORD *)(v1166 + 64) = v1166 + 72;
  *(_DWORD *)(v1166 + 88) = 0;
  *(_QWORD *)v1166 = &off_1E42C62E8;
  v1168 = *(_QWORD *)(v1158 + 64);
  *(_QWORD *)(v1158 + 64) = v1166;
  if (v1168)
    (*(void (**)(uint64_t))(*(_QWORD *)v1168 + 8))(v1168);
  operator delete(v1167);
  karo::RequestPruner::addRequestManager(v1165, *(karo::AsyncRequestManager **)(v1158 + 64));
  v1169 = operator new();
  v1170 = (char *)operator new(0x28uLL);
  *(_QWORD *)v1391 = v1170;
  *(_OWORD *)&v1391[8] = xmmword_19FFB3D80;
  strcpy(v1170, "/loading/regionalresourcecachenode");
  v1171 = *(_QWORD *)(*(_QWORD *)(v1158 + 40) + 136);
  memset(__p, 0, 24);
  altitude::GEODataCacheNode::GEODataCacheNode(v1169, (__int128 *)v1391, v1171, (uint64_t)__p);
  v1172 = *(_QWORD *)(v1158 + 96);
  *(_QWORD *)(v1158 + 96) = v1169;
  if (v1172)
    (*(void (**)(uint64_t))(*(_QWORD *)v1172 + 8))(v1172);
  operator delete(v1170);
  *(_QWORD *)(*(_QWORD *)(v1158 + 96) + 48) = v1161;
  *(_QWORD *)(*(_QWORD *)(v1158 + 96) + 152) = *(_QWORD *)(v1158 + 64);
  *(_QWORD *)(*(_QWORD *)(v1158 + 96) + 160) = v1164;
  atomic_store(*(_BYTE *)(v1158 + 32), (unsigned __int8 *)(*(_QWORD *)(v1158 + 96) + 224));
  karo::RequestPruner::addRequestManager(v1165, *(karo::AsyncRequestManager **)(v1158 + 96));
  v1173 = operator new();
  v1391[23] = 21;
  strcpy(v1391, "/loading/poicachenode");
  v1174 = *(_QWORD *)(*(_QWORD *)(v1158 + 40) + 136);
  v1175 = operator new(4uLL);
  *v1175 = 2;
  __p[2] = v1175 + 1;
  __p[0] = v1175;
  __p[1] = v1175 + 1;
  altitude::GEODataCacheNode::GEODataCacheNode(v1173, (__int128 *)v1391, v1174, (uint64_t)__p);
  v1176 = *(_QWORD *)(v1158 + 80);
  *(_QWORD *)(v1158 + 80) = v1173;
  if (v1176)
    (*(void (**)(uint64_t))(*(_QWORD *)v1176 + 8))(v1176);
  operator delete(v1175);
  v1177 = *(_BYTE *)(v1158 + 32);
  *(_QWORD *)(*(_QWORD *)(v1158 + 80) + 48) = v1161;
  *(_QWORD *)(*(_QWORD *)(v1158 + 80) + 152) = v1163;
  *(_QWORD *)(*(_QWORD *)(v1158 + 80) + 160) = v1164;
  atomic_store(v1177, (unsigned __int8 *)(*(_QWORD *)(v1158 + 80) + 224));
  karo::RequestPruner::addRequestManager(v1165, *(karo::AsyncRequestManager **)(v1158 + 80));
  v1178 = operator new();
  v1179 = (char *)operator new(0x20uLL);
  *(_QWORD *)v1391 = v1179;
  *(_OWORD *)&v1391[8] = xmmword_19FFB3890;
  strcpy(v1179, "/loading/pointpolygoncachenode");
  v1180 = *(_QWORD *)(*(_QWORD *)(v1158 + 40) + 136);
  v1181 = operator new(8uLL);
  *v1181 = 0x800000004;
  __p[2] = v1181 + 1;
  __p[0] = v1181;
  __p[1] = v1181 + 1;
  altitude::GEODataCacheNode::GEODataCacheNode(v1178, (__int128 *)v1391, v1180, (uint64_t)__p);
  v1182 = *(_QWORD *)(v1158 + 88);
  *(_QWORD *)(v1158 + 88) = v1178;
  if (v1182)
    (*(void (**)(uint64_t))(*(_QWORD *)v1182 + 8))(v1182);
  operator delete(v1181);
  operator delete(v1179);
  *(_QWORD *)(*(_QWORD *)(v1158 + 88) + 48) = v1161;
  *(_QWORD *)(*(_QWORD *)(v1158 + 88) + 152) = v1163;
  *(_QWORD *)(*(_QWORD *)(v1158 + 88) + 160) = v1164;
  atomic_store(*(_BYTE *)(v1158 + 32), (unsigned __int8 *)(*(_QWORD *)(v1158 + 88) + 224));
  karo::RequestPruner::addRequestManager(v1165, *(karo::AsyncRequestManager **)(v1158 + 88));
  v1183 = operator new();
  v1184 = (char *)operator new(0x28uLL);
  *(_QWORD *)v1391 = v1184;
  *(_OWORD *)&v1391[8] = xmmword_19FFB3C00;
  strcpy(v1184, "/loading/labeldatarequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v1183, (__int128 *)v1391, *(_QWORD *)(*(_QWORD *)(v1158 + 40) + 136));
  *(_QWORD *)(v1183 + 80) = 0;
  *(_QWORD *)(v1183 + 72) = 0;
  *(_QWORD *)(v1183 + 64) = v1183 + 72;
  *(_DWORD *)(v1183 + 88) = 0;
  *(_QWORD *)v1183 = &off_1E42C6230;
  *(_OWORD *)(v1183 + 96) = 0u;
  *(_OWORD *)(v1183 + 112) = 0u;
  *(_QWORD *)(v1183 + 128) = 0;
  *(_BYTE *)(v1183 + 136) = 1;
  *(_QWORD *)(v1183 + 168) = 0;
  v1185 = *(_QWORD *)(v1158 + 56);
  *(_QWORD *)(v1158 + 56) = v1183;
  if (v1185)
    (*(void (**)(uint64_t))(*(_QWORD *)v1185 + 8))(v1185);
  operator delete(v1184);
  *(_QWORD *)(*(_QWORD *)(v1158 + 56) + 48) = v1161;
  *(_QWORD *)(*(_QWORD *)(v1158 + 56) + 96) = v1376;
  karo::RequestPruner::addRequestManager(v1165, *(karo::AsyncRequestManager **)(v1158 + 56));
  v1186 = *(_QWORD *)(v1158 + 40);
  *(_QWORD *)(*(_QWORD *)(v1158 + 56) + 104) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1186 + 40) + 16) + 224);
  *(_QWORD *)(*(_QWORD *)(v1158 + 56) + 112) = *(_QWORD *)(v1158 + 80);
  *(_QWORD *)(*(_QWORD *)(v1158 + 56) + 120) = *(_QWORD *)(v1158 + 88);
  *(_QWORD *)(*(_QWORD *)(v1158 + 56) + 128) = *(_QWORD *)(v1158 + 96);
  v1187 = *(_QWORD *)(v1186 + 128);
  *(_QWORD *)(v1158 + 72) = *(_QWORD *)(v1187 + 456);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1187 + 464) + 80))(*(_QWORD *)(v1187 + 464), *(_QWORD *)(v1158 + 56));
  v1188 = *(_QWORD *)(v1375 + 40);
  v1189 = 8 * *(unsigned __int8 *)(v1158 + 34);
  v1190 = *(_QWORD *)(v1188 + v1189);
  *(_QWORD *)(v1188 + v1189) = v1158;
  if (v1190)
    (*(void (**)(uint64_t))(*(_QWORD *)v1190 + 8))(v1190);
  v1191 = operator new();
  v1192 = *(_QWORD *)(*(_QWORD *)(v1375 + 120) + 8);
  *(_WORD *)v1391 = *(_WORD *)(v1192 + 28);
  *(_WORD *)&v1391[2] = *(_WORD *)(v1192 + 32);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer(v1191, 6, v1375, v1391, 2);
  *(_QWORD *)(v1191 + 48) = &unk_1E42B00F0;
  *(_QWORD *)v1191 = &off_1E42B0080;
  *(_QWORD *)(v1191 + 56) = 0;
  *(_QWORD *)(v1191 + 64) = 0;
  *(_QWORD *)(v1191 + 72) = 0x100000000;
  *(_OWORD *)(v1191 + 80) = 0u;
  *(_OWORD *)(v1191 + 96) = 0u;
  *(_OWORD *)(v1191 + 112) = 0u;
  *(_OWORD *)(v1191 + 128) = 0u;
  *(_OWORD *)(v1191 + 144) = 0u;
  *(_OWORD *)(v1191 + 160) = 0u;
  *(_OWORD *)(v1191 + 176) = 0u;
  *(_OWORD *)(v1191 + 192) = 0u;
  *(_OWORD *)(v1191 + 208) = 0u;
  *(_OWORD *)(v1191 + 224) = 0u;
  *(_OWORD *)(v1191 + 240) = 0u;
  *(_OWORD *)(v1191 + 256) = 0u;
  *(_OWORD *)(v1191 + 272) = 0u;
  v1377 = (void **)(v1191 + 80);
  *(_OWORD *)(v1191 + 281) = 0u;
  v1193 = *(id *)(v1375 + 104);
  *(_BYTE *)(v1191 + 296) = objc_msgSend(v1193, "supportsFramebufferFetch");

  v1194 = *(void **)(v1375 + 104);
  if (*(_BYTE *)(v1191 + 296))
    v1195 = objc_msgSend(v1194, "format");
  else
    v1195 = objc_msgSend(v1194, "linearFormat");
  v1385 = *(pthread_mutexattr_t *)v1195;
  v1386 = *(_OWORD *)(v1195 + 16);
  v1196 = operator new(0xE8uLL);
  v1196[1] = 0;
  v1196[2] = 0;
  *v1196 = &off_1E42E14E8;
  v1197 = ggl::BufferData::BufferData((uint64_t)(v1196 + 3), qword_1EE5716C0, 2, 1, 6, 1);
  v1196[28] = ggl::FlyoverOverlay::Shared::reflection(void)::reflection;
  v1196[3] = &off_1E42B8F90;
  v1198 = *(std::__shared_weak_count **)(v1191 + 224);
  *(_QWORD *)(v1191 + 216) = v1197;
  *(_QWORD *)(v1191 + 224) = v1196;
  if (v1198)
  {
    v1199 = (unint64_t *)&v1198->__shared_owners_;
    do
      v1200 = __ldaxr(v1199);
    while (__stlxr(v1200 - 1, v1199));
    if (!v1200)
    {
      ((void (*)(std::__shared_weak_count *))v1198->__on_zero_shared)(v1198);
      std::__shared_weak_count::__release_weak(v1198);
    }
  }
  v1201 = operator new(0xE8uLL);
  v1201[1] = 0;
  v1201[2] = 0;
  *v1201 = &off_1E42E14E8;
  v1202 = ggl::BufferData::BufferData((uint64_t)(v1201 + 3), qword_1EE5716C0, 2, 1, 6, 1);
  v1201[28] = ggl::FlyoverOverlay::Shared::reflection(void)::reflection;
  v1201[3] = &off_1E42B8F90;
  v1203 = *(std::__shared_weak_count **)(v1191 + 240);
  *(_QWORD *)(v1191 + 232) = v1202;
  *(_QWORD *)(v1191 + 240) = v1201;
  if (v1203)
  {
    v1204 = (unint64_t *)&v1203->__shared_owners_;
    do
      v1205 = __ldaxr(v1204);
    while (__stlxr(v1205 - 1, v1204));
    if (!v1205)
    {
      ((void (*)(std::__shared_weak_count *))v1203->__on_zero_shared)(v1203);
      std::__shared_weak_count::__release_weak(v1203);
    }
  }
  v1206 = operator new();
  v1207 = ggl::BufferData::BufferData(v1206, qword_1EE562718, 2, 1, 6, 1);
  *(_QWORD *)(v1207 + 200) = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
  *(_QWORD *)v1207 = &off_1E42B92B0;
  v1208 = *(_QWORD *)(v1191 + 248);
  *(_QWORD *)(v1191 + 248) = v1207;
  if (v1208)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1208 + 8))(v1208);
    v1207 = *(_QWORD *)(v1191 + 248);
  }
  v1209 = *(_QWORD *)(v1207 + 8);
  **(_DWORD **)(v1207 + 72) = 1065353216;
  if (*(_QWORD *)(v1207 + 64) > v1209)
    v1209 = *(_QWORD *)(v1207 + 64);
  *(_QWORD *)(v1207 + 56) = 0;
  *(_QWORD *)(v1207 + 64) = v1209;
  v1210 = operator new();
  *(_DWORD *)(v1210 + 32) = 0;
  *(_QWORD *)(v1210 + 16) = 0;
  *(_QWORD *)(v1210 + 24) = 0;
  *(_QWORD *)v1210 = &off_1E42B5DE8;
  *(_QWORD *)(v1210 + 8) = 0;
  *(_QWORD *)(v1210 + 36) = 66304;
  *(_DWORD *)(v1210 + 44) = 0;
  *(_QWORD *)(v1210 + 48) = 1;
  *(_WORD *)(v1210 + 56) = 0;
  *(_BYTE *)(v1210 + 58) = 3;
  *(_QWORD *)(v1210 + 67) = 0;
  *(_QWORD *)(v1210 + 59) = 0;
  *(_BYTE *)(v1210 + 75) = 0;
  *(_QWORD *)(v1210 + 132) = 0;
  *(_QWORD *)(v1210 + 124) = 0;
  *(_WORD *)(v1210 + 188) = 257;
  *(_QWORD *)(v1210 + 192) = 0;
  *(_QWORD *)(v1210 + 200) = 0;
  *(_BYTE *)(v1210 + 208) = 0;
  v1211 = *(_QWORD *)(v1191 + 208);
  *(_QWORD *)(v1191 + 208) = v1210;
  if (v1211)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1211 + 8))(v1211);
    v1210 = *(_QWORD *)(v1191 + 208);
  }
  *(_BYTE *)(v1210 + 56) = 1;
  v1212 = *(unsigned __int8 *)(v1191 + 296);
  if (*(_BYTE *)(v1191 + 296))
  {
    v1213 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1191 + 40) + 200) + 80);
    v1214 = *(std::__shared_weak_count **)(v1213 + 352);
    v1383 = *(_QWORD *)(v1213 + 344);
    v1384 = v1214;
    if (v1214)
    {
      v1215 = (unint64_t *)&v1214->__shared_owners_;
      do
        v1216 = __ldxr(v1215);
      while (__stxr(v1216 + 1, v1215));
    }
    memset(&v1391[20], 0, 24);
    v1391[0] = 0;
    *(_OWORD *)&v1391[4] = xmmword_19FFB3060;
    v1392 = 15;
    v1217 = operator new(0x198uLL);
    v1217[1] = 0;
    v1217[2] = 0;
    *v1217 = &off_1E42DF178;
    v1218 = (uint64_t)(v1217 + 3);
    v1389 = v1385;
    v1390 = v1386;
    v1219 = (void **)v1391;
    v1220 = 1;
  }
  else
  {
    v1221 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1191 + 40) + 200) + 80);
    v1222 = *(std::__shared_weak_count **)(v1221 + 352);
    v1383 = *(_QWORD *)(v1221 + 344);
    v1384 = v1222;
    if (v1222)
    {
      v1223 = (unint64_t *)&v1222->__shared_owners_;
      do
        v1224 = __ldxr(v1223);
      while (__stxr(v1224 + 1, v1223));
    }
    memset(&__p[3], 0, 20);
    LOBYTE(__p[0]) = 1;
    *(_OWORD *)((char *)__p + 4) = xmmword_19FFB35D0;
    HIDWORD(__p[2]) = 7;
    BYTE4(__p[5]) = 15;
    v1217 = operator new(0x198uLL);
    v1217[1] = 0;
    v1217[2] = 0;
    *v1217 = &off_1E42DF178;
    v1218 = (uint64_t)(v1217 + 3);
    v1389 = v1385;
    v1390 = v1386;
    v1219 = __p;
    v1220 = 0;
  }
  v1225 = ggl::FlyoverOverlay::P3T2PipelineState::P3T2PipelineState(v1218, &v1383, (uint64_t)v1219, &v1389, v1220);
  v1226 = *(std::__shared_weak_count **)(v1191 + 264);
  *(_QWORD *)(v1191 + 256) = v1225;
  *(_QWORD *)(v1191 + 264) = v1217;
  if (!v1226)
    goto LABEL_839;
  v1227 = (unint64_t *)&v1226->__shared_owners_;
  do
    v1228 = __ldaxr(v1227);
  while (__stlxr(v1228 - 1, v1227));
  if (!v1228)
  {
    ((void (*)(std::__shared_weak_count *))v1226->__on_zero_shared)(v1226);
    std::__shared_weak_count::__release_weak(v1226);
    if (v1212)
      goto LABEL_840;
  }
  else
  {
LABEL_839:
    if (v1212)
    {
LABEL_840:
      v1229 = v1384;
      if (!v1384)
        goto LABEL_854;
      v1230 = (unint64_t *)&v1384->__shared_owners_;
      do
        v1231 = __ldaxr(v1230);
      while (__stlxr(v1231 - 1, v1230));
      goto LABEL_852;
    }
  }
  v1229 = v1384;
  if (!v1384)
    goto LABEL_854;
  v1232 = (unint64_t *)&v1384->__shared_owners_;
  do
    v1231 = __ldaxr(v1232);
  while (__stlxr(v1231 - 1, v1232));
LABEL_852:
  if (!v1231)
  {
    ((void (*)(std::__shared_weak_count *))v1229->__on_zero_shared)(v1229);
    std::__shared_weak_count::__release_weak(v1229);
  }
LABEL_854:
  v1234 = *(_QWORD *)(v1375 + 184);
  v1233 = *(_QWORD *)(v1375 + 192);
  if (v1233)
  {
    v1235 = (unint64_t *)(v1233 + 8);
    do
      v1236 = __ldxr(v1235);
    while (__stxr(v1236 + 1, v1235));
  }
  v1237 = *(std::__shared_weak_count **)(v1191 + 64);
  *(_QWORD *)(v1191 + 56) = v1234;
  *(_QWORD *)(v1191 + 64) = v1233;
  if (v1237)
  {
    v1238 = (unint64_t *)&v1237->__shared_owners_;
    do
      v1239 = __ldaxr(v1238);
    while (__stlxr(v1239 - 1, v1238));
    if (!v1239)
    {
      ((void (*)(std::__shared_weak_count *))v1237->__on_zero_shared)(v1237);
      std::__shared_weak_count::__release_weak(v1237);
    }
    v1234 = *(_QWORD *)(v1191 + 56);
  }
  if (v1234)
  {
    std::mutex::lock((std::mutex *)(v1234 + 16));
    v1240 = *(id *)(v1234 + 8);
    std::mutex::unlock((std::mutex *)(v1234 + 16));
    v1388 = 0u;
    memset(__p, 0, sizeof(__p));
    obj = v1240;
    v1241 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", __p, v1391, 16);
    if (!v1241)
      goto LABEL_889;
    v1242 = *(_QWORD *)__p[2];
    while (1)
    {
      for (i = 0; i != v1241; ++i)
      {
        if (*(_QWORD *)__p[2] != v1242)
          objc_enumerationMutation(obj);
        v1245 = *((id *)__p[1] + i);
        v1246 = v1245;
        v1247 = *(_DWORD *)(v1191 + 72) + 1;
        v1249 = *(char **)(v1191 + 88);
        v1248 = *(_QWORD *)(v1191 + 96);
        if ((unint64_t)v1249 < v1248)
        {
          *(_QWORD *)v1249 = v1245;
          *((_DWORD *)v1249 + 2) = v1247;
          v1244 = v1249 + 16;
          goto LABEL_868;
        }
        v1250 = (char *)*v1377;
        v1251 = (v1249 - (_BYTE *)*v1377) >> 4;
        v1252 = v1251 + 1;
        if ((unint64_t)(v1251 + 1) >> 60)
          abort();
        v1253 = v1248 - (_QWORD)v1250;
        if (v1253 >> 3 > v1252)
          v1252 = v1253 >> 3;
        if ((unint64_t)v1253 >= 0x7FFFFFFFFFFFFFF0)
          v1254 = 0xFFFFFFFFFFFFFFFLL;
        else
          v1254 = v1252;
        if (v1254 >> 60)
          goto LABEL_919;
        v1255 = (char *)operator new(16 * v1254);
        v1256 = &v1255[16 * v1251];
        v1257 = &v1255[16 * v1254];
        *(_QWORD *)v1256 = v1246;
        *((_DWORD *)v1256 + 2) = v1247;
        v1244 = v1256 + 16;
        if (v1249 == v1250)
        {
          *(_QWORD *)(v1191 + 80) = v1256;
          *(_QWORD *)(v1191 + 88) = v1244;
          *(_QWORD *)(v1191 + 96) = v1257;
          if (!v1249)
            goto LABEL_868;
LABEL_887:
          operator delete(v1249);
          goto LABEL_868;
        }
        v1258 = v1249;
        do
        {
          v1259 = *((_QWORD *)v1258 - 2);
          v1258 -= 16;
          *(_QWORD *)v1258 = 0;
          *((_QWORD *)v1256 - 2) = v1259;
          v1256 -= 16;
          *((_DWORD *)v1256 + 2) = *((_DWORD *)v1258 + 2);
        }
        while (v1258 != v1250);
        *(_QWORD *)(v1191 + 80) = v1256;
        *(_QWORD *)(v1191 + 88) = v1244;
        *(_QWORD *)(v1191 + 96) = v1257;
        do
        {
          v1260 = (void *)*((_QWORD *)v1249 - 2);
          v1249 -= 16;

        }
        while (v1249 != v1250);
        v1249 = v1250;
        if (v1250)
          goto LABEL_887;
LABEL_868:
        *(_QWORD *)(v1191 + 88) = v1244;
      }
      v1241 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", __p, v1391, 16);
      if (!v1241)
      {
LABEL_889:

        break;
      }
    }
  }
  v1261 = *(_QWORD *)(v1191 + 40);
  v1262 = *(uint64_t **)(v1261 + 152);
  v1263 = *v1262;
  v1264 = *(_QWORD *)(*(_QWORD *)(v1261 + 128) + 48);
  v1265 = (karo::RequestPruner *)v1262[3];
  v1266 = operator new();
  v1267 = (char *)operator new(0x20uLL);
  *(_QWORD *)v1391 = v1267;
  *(_OWORD *)&v1391[8] = xmmword_19FFB3890;
  strcpy(v1267, "/loading/overlayrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v1266, (__int128 *)v1391, *(_QWORD *)(*(_QWORD *)(v1191 + 40) + 136));
  *(_QWORD *)(v1266 + 80) = 0;
  *(_QWORD *)(v1266 + 72) = 0;
  *(_QWORD *)(v1266 + 64) = v1266 + 72;
  *(_DWORD *)(v1266 + 88) = 0;
  *(_QWORD *)v1266 = &off_1E42C5E08;
  *(_QWORD *)(v1266 + 96) = 0;
  *(_BYTE *)(v1266 + 104) = 1;
  v1268 = *(_QWORD *)(v1191 + 272);
  *(_QWORD *)(v1191 + 272) = v1266;
  if (v1268)
    (*(void (**)(uint64_t))(*(_QWORD *)v1268 + 8))(v1268);
  operator delete(v1267);
  *(_QWORD *)(*(_QWORD *)(v1191 + 272) + 48) = v1263;
  *(_QWORD *)(*(_QWORD *)(v1191 + 272) + 96) = v1264;
  karo::RequestPruner::addRequestManager(v1265, *(karo::AsyncRequestManager **)(v1191 + 272));
  altitude::TileManager::registerTileListener(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1191 + 40) + 128) + 688), v1191 + 48);
  v1269 = *(_QWORD *)(*(_QWORD *)(v1191 + 40) + 128);
  *(_QWORD *)(v1191 + 200) = *(_QWORD *)(v1269 + 456);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1269 + 464) + 56))(*(_QWORD *)(v1269 + 464), *(_QWORD *)(v1191 + 272));
  v1270 = (std::__shared_weak_count *)operator new(0x60uLL);
  v1270->__shared_owners_ = 0;
  v1271 = (unint64_t *)&v1270->__shared_owners_;
  v1270->__shared_weak_owners_ = 0;
  v1270->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  ggl::TextureData2D::TextureData2D((uint64_t)&v1270[1], 512, 512, 1u, 12, 1);
  v1272 = (std::__shared_weak_count *)operator new(0x58uLL);
  v1272->__shared_owners_ = 0;
  v1273 = (unint64_t *)&v1272->__shared_owners_;
  v1272->__shared_weak_owners_ = 0;
  v1272->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v1272[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v1272[1].__shared_weak_owners_ = 0;
  v1272[2].__vftable = 0;
  v1272[1].__shared_owners_ = 0;
  LODWORD(v1272[2].__shared_owners_) = 0;
  *(_QWORD *)&v1274 = 0x100000001;
  *((_QWORD *)&v1274 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v1272[2].__shared_owners_ + 4) = v1274;
  *(std::__shared_weak_count_vtbl **)((char *)&v1272[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v1272[3].__shared_owners_) = 0;
  v1275 = operator new(0xB0uLL);
  v1276 = v1275;
  v1275[1] = 0;
  v1275[2] = 0;
  *v1275 = &off_1E42E53B0;
  v1277 = (char *)(v1275 + 3);
  do
    v1278 = __ldxr(v1271);
  while (__stxr(v1278 + 1, v1271));
  v1275[13] = 0;
  v1275[5] = 0;
  v1275[6] = 0;
  *((_DWORD *)v1275 + 14) = 0;
  v1275[10] = 0x100000001;
  shared_owners = v1270[1].__shared_owners_;
  shared_owners_high = HIDWORD(v1270[1].__shared_owners_);
  *((_DWORD *)v1275 + 22) = 0;
  *((_DWORD *)v1275 + 23) = shared_owners_high;
  v1275[12] = 0x100000001;
  v1275[14] = 0;
  v1275[15] = 0;
  v1275[3] = &off_1E42BE438;
  v1275[4] = 0;
  v1275[8] = &unk_1E42BE458;
  v1275[9] = "";
  *((_DWORD *)v1275 + 32) = shared_owners;
  v1275[17] = v1270 + 1;
  v1275[18] = v1270;
  do
    v1281 = __ldxr(v1271);
  while (__stxr(v1281 + 1, v1271));
  *((_WORD *)v1275 + 76) = 0;
  *((_BYTE *)v1275 + 154) = 1;
  v1275[20] = v1272 + 1;
  v1275[21] = v1272;
  do
    v1282 = __ldxr(v1273);
  while (__stxr(v1282 + 1, v1273));
  v1275[13] = v1270[1].__shared_weak_owners_;
  do
    v1283 = __ldaxr(v1271);
  while (__stlxr(v1283 - 1, v1271));
  if (!v1283)
  {
    ((void (*)(std::__shared_weak_count *))v1270->__on_zero_shared)(v1270);
    std::__shared_weak_count::__release_weak(v1270);
  }
  v1284 = *(std::__shared_weak_count **)(v1191 + 288);
  *(_QWORD *)(v1191 + 280) = v1277;
  *(_QWORD *)(v1191 + 288) = v1276;
  if (v1284)
  {
    v1285 = (unint64_t *)&v1284->__shared_owners_;
    do
      v1286 = __ldaxr(v1285);
    while (__stlxr(v1286 - 1, v1285));
    if (!v1286)
    {
      ((void (*)(std::__shared_weak_count *))v1284->__on_zero_shared)(v1284);
      std::__shared_weak_count::__release_weak(v1284);
    }
  }
  do
    v1287 = __ldaxr(v1273);
  while (__stlxr(v1287 - 1, v1273));
  if (!v1287)
  {
    ((void (*)(std::__shared_weak_count *))v1272->__on_zero_shared)(v1272);
    std::__shared_weak_count::__release_weak(v1272);
  }
  do
    v1288 = __ldaxr(v1271);
  while (__stlxr(v1288 - 1, v1271));
  if (!v1288)
  {
    ((void (*)(std::__shared_weak_count *))v1270->__on_zero_shared)(v1270);
    std::__shared_weak_count::__release_weak(v1270);
  }
  v1289 = *(_QWORD *)(v1375 + 40);
  v1290 = 8 * *(unsigned __int8 *)(v1191 + 34);
  v1291 = *(_QWORD *)(v1289 + v1290);
  *(_QWORD *)(v1289 + v1290) = v1191;
  if (v1291)
    (*(void (**)(uint64_t))(*(_QWORD *)v1291 + 8))(v1291);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v1292 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1292, "enableDOF"))
  {
    v1293 = (unsigned __int8 *)operator new();
    md::realistic::PostchainRenderLayer::PostchainRenderLayer((md::realistic::PostchainRenderLayer *)v1293, (md::realistic::RealisticRenderer *)v1375);
    v1294 = *(_QWORD *)(v1375 + 40);
    v1295 = 8 * v1293[34];
    v1296 = *(_QWORD *)(v1294 + v1295);
    *(_QWORD *)(v1294 + v1295) = v1293;
    if (v1296)
      (*(void (**)(uint64_t))(*(_QWORD *)v1296 + 8))(v1296);
  }

  return v1375;
}

void sub_19F82CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, md::realistic::RoadRenderLayer::RoadModelPipelineStates *a9, void *a10)
{
  _QWORD *v10;
  std::mutex *v11;
  void *v13;
  void *v14;
  altitude::FlyoverShared *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  md::Renderer *v38;
  uint64_t v39;

  std::mutex::unlock(v11);
  v13 = (void *)v10[31];
  if (v13)
  {
    v10[32] = v13;
    operator delete(v13);
  }
  v14 = (void *)v10[28];
  if (v14)
  {
    v10[29] = v14;
    operator delete(v14);
  }
  v15 = (altitude::FlyoverShared *)v10[27];
  v10[27] = 0;
  if (v15)
  {
    altitude::FlyoverShared::~FlyoverShared(v15);
    MEMORY[0x1A1AF4E00]();
  }
  v16 = (std::__shared_weak_count *)v10[26];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v10[24];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)v10[22];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)v10[20];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)v10[18];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)v10[16];
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)v10[14];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *v10 = off_1E428C468;
  v37 = (void *)v10[1];
  if (v37)
  {
    v10[2] = v37;
    operator delete(v37);
  }
  MEMORY[0x1A1AF4E00](v10, 0x10A1C402A02BDB1);

  v38 = (md::Renderer *)STACK[0x258];
  v39 = STACK[0x258] + 184;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x258] + 200);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v39);
  md::Renderer::~Renderer(v38);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::GlobeOverlayContainer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GlobeOverlayContainer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::GlobeOverlayContainer>::__on_zero_shared(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v7 = 0;
        v8 = 0;
        objc_msgSend(v6, "setFlyoverContainer:", &v7);
        if (v8)
          std::__shared_weak_count::__release_weak(v8);
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }

  std::mutex::~mutex((std::mutex *)(a1 + 40));
}

void sub_19F82E304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  void *v11;

  std::mutex::~mutex((std::mutex *)(v10 + 40));
  _Unwind_Resume(a1);
}

void altitude::StencilManager::~StencilManager(altitude::StencilManager *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::realistic::RealisticRenderer::warmUp(altitude::GlobeView ***this, double a2)
{
  altitude::GlobeView **v4;
  double v5;
  double v7;
  int v8;
  double v9;
  altitude::QuickSurfaceManager *v10;

  altitude::GlobeView::updateCameraFrame(*this[17]);
  altitude::GlobeView::update(*this[17]);
  v4 = this[17];
  v5 = *((double *)v4 + 21);
  if (a2 - v5 <= 0.0 || v5 <= 0.0)
    v7 = 0.0;
  else
    v7 = a2 - v5;
  *((double *)v4 + 21) = a2;
  *((double *)v4 + 22) = v7;
  v8 = *((_DWORD *)v4 + 22) + 1;
  v9 = *((double *)v4 + 13) + v7;
  v4[16] = v4[13];
  *((_OWORD *)v4 + 7) = *(_OWORD *)(v4 + 11);
  *((_DWORD *)v4 + 22) = v8;
  *((double *)v4 + 12) = v7;
  *((double *)v4 + 13) = v9;
  (*(void (**)(altitude::GlobeView *, _QWORD))(*(_QWORD *)this[16][86] + 56))(this[16][86], *((unsigned int *)this[17] + 22));
  v10 = this[16][88];
  if (*((_BYTE *)v10 + 64))
    altitude::QuickSurfaceManager::update(v10, *((unsigned int *)this[17] + 22));
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v24 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

const md::MuninRoadEdge *md::MuninRoadEdge::MuninRoadEdge(const md::MuninRoadEdge *a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, md::MuninJunction *a6, md::MuninJunction *a7)
{
  _BYTE *v13;
  const char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  int v26;
  BOOL v28;
  uint64_t v30;

  *(_QWORD *)a1 = a2;
  *((_DWORD *)a1 + 2) = 0;
  v13 = *(_BYTE **)(a2 + 16);
  v14 = "";
  if (v13 && *v13)
    v14 = *(const char **)(a2 + 16);
  {
    v30 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v30, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v16 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 5) = mdm::Allocator::instance(void)::alloc;
  v17 = strlen(v14);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v20 + 1, 1);
    *((_QWORD *)a1 + 3) = v18;
    *((_QWORD *)a1 + 4) = v21 | 0x8000000000000000;
    *((_QWORD *)a1 + 2) = v19;
    goto LABEL_12;
  }
  v19 = (char *)a1 + 16;
  *((_BYTE *)a1 + 39) = v17;
  if (v17)
LABEL_12:
    memmove(v19, v14, v18);
  *((_BYTE *)v19 + v18) = 0;
  v22 = a3[1];
  *((_OWORD *)a1 + 3) = *a3;
  *((_OWORD *)a1 + 4) = v22;
  *((_QWORD *)a1 + 10) = a4;
  *((_QWORD *)a1 + 11) = a5;
  *((_QWORD *)a1 + 12) = a6;
  *((_QWORD *)a1 + 13) = a7;
  *((_BYTE *)a1 + 112) = 0;
  v23 = *(_QWORD *)a1;
  if (*(_WORD *)(*(_QWORD *)a1 + 148))
  {
    v24 = (float)*(unsigned __int16 *)(*(_QWORD *)a1 + 148) * 0.01;
  }
  else
  {
    v25 = *(unsigned __int8 *)(v23 + 151);
    if (v25 > 8)
      v24 = 14.8;
    else
      v24 = flt_1A001A800[v25];
  }
  *((float *)a1 + 2) = v24;
  v26 = *(unsigned __int8 *)(v23 + 152);
  v28 = v26 == 10 || (v26 - 1) < 3;
  *((_BYTE *)a1 + 112) = v28;
  md::MuninJunction::addRoad(a6, a1);
  md::MuninJunction::addRoad(a7, a1);
  return a1;
}

void sub_19F82E7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 40) + 40))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void md::MuninRoadEdge::localizedName(md::MuninRoadEdge *this, uint64_t **a2, int a3)
{
  unsigned __int8 v4;
  float *v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v4 & 1) == 0)
  {
    v14 = a3;
    v12 = a2;
    v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    a2 = v12;
    a3 = v14;
    if (v8)
    {
      v9 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      a2 = v12;
      a3 = v14;
    }
  }
  *((_QWORD *)this + 3) = *((_QWORD *)v5 + 299);
  if (*a2)
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    if ((v6 & 1) == 0)
    {
      v15 = a3;
      v13 = a2;
      v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      a2 = v13;
      a3 = v15;
      if (v10)
      {
        v11 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v11, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        a2 = v13;
        a3 = v15;
      }
    }
    v20 = *((_QWORD *)v5 + 299);
    md::LabelFeature::textFromFeature(&v16, *a2, a3, (uint64_t)v18, 0);
    v7 = SHIBYTE(v19);
    *(_OWORD *)this = v16;
    *((_QWORD *)this + 2) = v17;
    if (v7 < 0)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 40))(v20, v18[0], v19 & 0x7FFFFFFFFFFFFFFFLL);
  }
}

void sub_19F82E9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (SHIBYTE(a17) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a18 + 40))(a18, a15, a17 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

uint64_t md::MuninRoadEdge::walkEdgeGeometry(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count **v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float64x2_t v16;
  float64_t v17;
  float64x2_t v18;
  float64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  BOOL v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x1E0C80C00];
  result = *a1;
  if (result)
  {
    if (*(_QWORD *)(a3 + 24))
    {
      v36[0] = 0;
      result = (uint64_t)geo::codec::multiSectionFeaturePoints((_QWORD *)result, 0, v36);
      v7 = a1 + 10;
      if ((unint64_t)a1[10] <= v36[0])
      {
        v8 = a1 + 11;
        if ((unint64_t)a1[11] <= v36[0])
        {
          v9 = result;
          v10 = (std::__shared_weak_count **)*a1;
          v35 = 0uLL;
          v11 = v10[1];
          if (v11)
          {
            v11 = std::__shared_weak_count::lock(v11);
            v12 = v11;
            *(_QWORD *)&v35.f64[1] = v11;
            if (v11)
            {
              v11 = *v10;
              *(_QWORD *)&v35.f64[0] = *v10;
            }
          }
          else
          {
            v12 = 0;
          }
          geo::codec::VectorTile::key((geo::codec::VectorTile *)v11);
          v36[1] = GEOTileKeyMake();
          v36[2] = v13;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          result = GEOMapRectForGEOTileKey();
          v16 = *(float64x2_t *)(MEMORY[0x1E0D266E8] + 16);
          v18.f64[1] = v17;
          v20.f64[1] = v19;
          v21 = vdivq_f64(vaddq_f64(v18, v20), v16);
          v22 = 1.0 - v21.f64[1];
          v23 = vdivq_f64(v20, v16);
          v24 = a2 == 0;
          if (a2)
            v25 = v7;
          else
            v25 = v8;
          v26 = *v25;
          if (v24)
            v27 = v7;
          else
            v27 = v8;
          v28 = *v27;
          if (v28 > v26)
            v29 = 1;
          else
            v29 = -1;
          v30 = vsubq_f64(v21, v23);
          v23.f64[1] = v22;
          v33 = v30;
          v34 = v23;
          v31 = v28 + 2 * v29;
          do
          {
            if (v31 == v26 + v29)
              break;
            v35 = vmlaq_f64(v34, vcvtq_f64_f32(*(float32x2_t *)(v9 + 8 * v26)), v33);
            v32 = *(_QWORD *)(a3 + 24);
            if (!v32)
            {
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            result = (*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v32 + 48))(v32, &v35);
            v26 += v29;
          }
          while ((result & 1) != 0);
        }
      }
    }
  }
  return result;
}

void sub_19F82EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0,std::allocator<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0,std::allocator<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8C18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0,std::allocator<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8C18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0,std::allocator<md::MuninRoadEdge::worldPolyline(BOOL,std::vector<gm::Matrix<double,2,1>> &)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::operator()(uint64_t a1, _OWORD *a2)
{
  char **v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v3 = *(char ***)(a1 + 8);
  v5 = v3[1];
  v4 = (unint64_t)v3[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *v3;
    v8 = (v5 - *v3) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *v3;
    }
    *v3 = v13;
    v3[1] = v6;
    v3[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  v3[1] = v6;
  return 1;
}

double md::MuninRoadEdge::edgeLengthInMeters(md::MuninRoadEdge *this)
{
  _QWORD *v2;
  uint64_t v3;
  double v4;
  long double v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  double v12;
  long double v13;
  _QWORD v15[2];
  double v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15[1] = 0;
  v16 = 0.0;
  v15[0] = 0;
  v17[0] = &off_1E42D8BD0;
  v17[1] = v15;
  v17[2] = &v16;
  v18 = v17;
  md::MuninRoadEdge::walkEdgeGeometry((uint64_t *)this, 1, (uint64_t)v17);
  v2 = v18;
  if (v18 == v17)
  {
    v3 = 4;
    v2 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = v16;
  v5 = exp((*((double *)this + 7) + (*((double *)this + 9) - *((double *)this + 7)) * 0.5) * 6.28318531 + -3.14159265);
  v6 = atan(v5) * 114.591559 + -90.0;
  v7 = cos(v6 * 0.034906585);
  v8 = cos(v6 * 0.0698131701);
  v9 = cos(v6 * 0.104719755);
  v10 = v6 * 0.00872664626;
  v11 = tan(v6 * 0.00872664626 + 0.78103484);
  v12 = log(v11);
  v13 = tan(v10 + 0.789761487);
  return (v7 * -559.82 + 111132.92 + v8 * 1.175 + v9 * -0.0023) * v4 / fabs((log(v13) - v12) * 0.159154943);
}

void sub_19F82EF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MuninRoadEdge::edgeLength(void)::$_0,std::allocator<md::MuninRoadEdge::edgeLength(void)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadEdge::edgeLength(void)::$_0,std::allocator<md::MuninRoadEdge::edgeLength(void)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8BD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadEdge::edgeLength(void)::$_0,std::allocator<md::MuninRoadEdge::edgeLength(void)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8BD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadEdge::edgeLength(void)::$_0,std::allocator<md::MuninRoadEdge::edgeLength(void)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float64x2_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_OWORD *)v2 != 0)
  {
    v3 = vsubq_f64(*(float64x2_t *)a2, *(float64x2_t *)v2);
    **(double **)(a1 + 16) = sqrt(vaddvq_f64(vmulq_f64(v3, v3))) + **(double **)(a1 + 16);
  }
  *(_QWORD *)v2 = *(_QWORD *)a2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 8);
  return 1;
}

double md::MuninRoadEdge::direction(std::__shared_weak_count ***this, int a2)
{
  std::__shared_weak_count **v3;
  double result;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  float64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x16_t v20;
  float64x2_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v3 = *this;
  if (!v3)
    return 0.0;
  result = 0.0;
  if (this[10] != this[11])
  {
    v25[0] = 0;
    v6 = geo::codec::multiSectionFeaturePoints(v3, 0, v25);
    result = 0.0;
    if ((unint64_t)this[10] < v25[0])
    {
      result = 0.0;
      if ((unint64_t)this[11] < v25[0])
      {
        v7 = v6;
        v8 = *this;
        v9 = (*this)[1];
        if (v9)
        {
          v9 = std::__shared_weak_count::lock(v9);
          v10 = v9;
          if (v9)
            v9 = *v8;
        }
        else
        {
          v10 = 0;
        }
        geo::codec::VectorTile::key((geo::codec::VectorTile *)v9);
        v25[1] = GEOTileKeyMake();
        v25[2] = v11;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        GEOMapRectForGEOTileKey();
        v15.f64[1] = v14;
        v16 = vdivq_f64(v15, *(float64x2_t *)(MEMORY[0x1E0D266E8] + 16));
        v17 = vmulq_f64(v16, vcvtq_f64_f32((float32x2_t)v7[(_QWORD)this[10]]));
        v18 = vmulq_f64(v16, vcvtq_f64_f32((float32x2_t)v7[(_QWORD)this[11]]));
        v19 = vsubq_f64(v17, v18);
        v20 = (int8x16_t)vmulq_f64(v19, v19);
        v21 = vsubq_f64(v18, v17);
        v22 = (int8x16_t)vmulq_f64(v21, v21);
        if (a2)
          v23 = -1;
        else
          v23 = 0;
        v24 = (int8x16_t)vdupq_n_s64(v23);
        *(_QWORD *)&result = *(_OWORD *)&vmulq_n_f64((float64x2_t)vbslq_s8(v24, (int8x16_t)v21, (int8x16_t)v19), 1.0 / sqrt(vaddvq_f64((float64x2_t)vbslq_s8(v24, v22, v20))));
      }
    }
  }
  return result;
}

void sub_19F82F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void altitude::C3bRequestManager::~C3bRequestManager(altitude::C3bRequestManager *this)
{
  altitude::C3bRequestManager::~C3bRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C4D58;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C2E80;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::C3bRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  int v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != a1 + 72)
  {
    do
    {
      v6 = *(_QWORD **)(v4 + 8);
      v7 = (_QWORD *)v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = *(_QWORD *)(v4 + 88);
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), v4);
      }
      v4 = (uint64_t)v8;
    }
    while (v8 != (_QWORD *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F82F35C(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 64);
  if (v4 != (_QWORD *)(a1 + 72))
  {
    while (v4[11] != a2)
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (_QWORD *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), (uint64_t)v4);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F82F400(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::clearRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL4 v6;
  _QWORD *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 72);
  if (v4)
  {
    v5 = a1 + 72;
    do
    {
      v6 = std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100]((uint64_t)(v4 + 4), a2);
      v7 = v4 + 1;
      if (!v6)
      {
        v7 = v4;
        v5 = (uint64_t)v4;
      }
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 != a1 + 72 && !std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100](a2, v5 + 32))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 88) + 16))(*(_QWORD *)(v5 + 88));
      std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), v5);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F82F4BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::C3bRequestManager::createRequest@<X0>(_QWORD *result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  __int128 *p_dst;
  unint64_t v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 __dst;
  unint64_t v37;
  _QWORD v38[2];
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;
  unint64_t v42;
  void *__p;
  char v44;
  unint64_t v45;
  int v46;
  uint64_t v47;

  if (!a3)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v7 = result;
  v8 = operator new();
  v9 = v7[12];
  v10 = v7[18];
  v11 = v7[6];
  v13 = v7[21];
  v12 = v7[22];
  v35 = *(_OWORD *)(v7 + 13);
  v14 = karo::Job::Job(v8, v7[4]);
  *(_BYTE *)(v14 + 176) = 0;
  *(_QWORD *)(v14 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v14 = &off_1E42C3830;
  *(_QWORD *)(v14 + 192) = 0;
  *(_OWORD *)(v14 + 200) = v35;
  v15 = v7[16];
  *(_QWORD *)(v14 + 216) = v7[15];
  *(_QWORD *)(v14 + 224) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(v8 + 232) = v13;
  *(_QWORD *)(v8 + 240) = v11;
  *(_QWORD *)(v8 + 248) = v10;
  *(_QWORD *)(v8 + 256) = v12;
  *(_QWORD *)(v8 + 376) = 0;
  *(_QWORD *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 368) = v8 + 376;
  *(_OWORD *)(v8 + 392) = *a2;
  *(_QWORD *)(v8 + 408) = *(_QWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 416), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)(v8 + 416) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(v8 + 432) = *(_QWORD *)(a3 + 24);
  }
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 440), *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)(v8 + 440) = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(v8 + 456) = *(_QWORD *)(a3 + 48);
  }
  v18 = *(_QWORD *)(a3 + 56);
  *(_DWORD *)(v8 + 506) = 0;
  v19 = (void **)(v8 + 472);
  *(_DWORD *)(v8 + 500) = 0;
  *(_BYTE *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 464) = v18;
  *(_QWORD *)(v8 + 472) = 0;
  *(_QWORD *)(v8 + 480) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  *(_BYTE *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 584) = 0;
  *(_QWORD *)(v8 + 600) = 0;
  *(_QWORD *)(v8 + 592) = 0;
  *(_QWORD *)(v8 + 192) = v9;
  *(double *)(v8 + 512) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(double *)(v8 + 520) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(double *)(v8 + 528) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v38);
  v20 = *(char *)(v8 + 439);
  if (v20 >= 0)
    v21 = v8 + 416;
  else
    v21 = *(_QWORD *)(v8 + 416);
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v8 + 439);
  else
    v22 = *(_QWORD *)(v8 + 424);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, v21, v22);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"level: ", 7);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"  lat: ", 7);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)"  lon: ", 7);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"  height: ", 10);
  std::ostream::operator<<();
  if ((v46 & 0x10) != 0)
  {
    v29 = v45;
    if (v45 < v42)
    {
      v45 = v42;
      v29 = v42;
    }
    v30 = (const void **)&v41;
  }
  else
  {
    if ((v46 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(v37) = 0;
      p_dst = &__dst;
      goto LABEL_33;
    }
    v30 = (const void **)v40;
    v29 = v40[2];
  }
  v31 = *v30;
  v27 = v29 - (_QWORD)*v30;
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v27 >= 0x17)
  {
    v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v32 = v27 | 7;
    v33 = v32 + 1;
    p_dst = (__int128 *)operator new(v32 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v37 = v33 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v37) = v29 - *(_BYTE *)v30;
    p_dst = &__dst;
    if (!v27)
      goto LABEL_33;
  }
  memmove(p_dst, v31, v27);
LABEL_33:
  *((_BYTE *)p_dst + v27) = 0;
  if (*(char *)(v8 + 495) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = __dst;
  *(_QWORD *)(v8 + 488) = v37;
  v38[0] = *MEMORY[0x1E0DE4F50];
  v34 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v39[0] = v34;
  v39[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v44 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](&v47);
  *a4 = v8;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8440;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  a4[1] = (uint64_t)result;
  return result;
}

void sub_19F82F964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void **v32;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;

  if (*(char *)(v31 + 439) < 0)
    operator delete(*v32);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v31 + 376));
  v34 = *(std::__shared_weak_count **)(v31 + 360);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(std::__shared_weak_count **)(v31 + 344);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(v31 + 328);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(_QWORD *)(v31 + 296);
  if (v43)
  {
    v44 = *(_QWORD *)(v31 + 304);
    v45 = *(void **)(v31 + 296);
    if (v44 != v43)
    {
      do
      {
        v46 = *(std::__shared_weak_count **)(v44 - 8);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v44 -= 16;
      }
      while (v44 != v43);
      v45 = *(void **)(v31 + 296);
    }
    *(_QWORD *)(v31 + 304) = v43;
    operator delete(v45);
  }
  v49 = *(std::__shared_weak_count **)(v31 + 288);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(std::__shared_weak_count **)(v31 + 272);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *(std::__shared_weak_count **)(v31 + 224);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  karo::Job::~Job((karo::Job *)v31);
  MEMORY[0x1A1AF4E00]();
  _Unwind_Resume(a1);
}

