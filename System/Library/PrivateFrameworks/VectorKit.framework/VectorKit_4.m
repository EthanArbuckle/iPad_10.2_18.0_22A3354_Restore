uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xA588623CD4116DAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x1AF456233693CD46 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
      v6 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x88B81689974D86F3 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x12B1E486D3040E2CLL;
    if (*(_QWORD *)&v4 <= 0x12B1E486D3040E2CuLL)
      v6 = 0x12B1E486D3040E2CuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x12B1E486D3040E2CLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

void md::OverlaysLogic::runAfterLayout(_QWORD *a1, md::LayoutContext *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a1[93];
  v13[0] = &off_1E42CB3C0;
  v14 = v13;
  geo::TaskQueue::barrierSync(v4, v13);
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  md::LayoutContext::frameState(a2);
  v8 = a1 + 118;
  v9 = (uint64_t *)a1[119];
  if (v9 != a1 + 118)
  {
    v10 = *(_QWORD *)(v7 + 624);
    do
    {
      while (v9[20] >= v10)
      {
        v9 = (uint64_t *)v9[1];
        if (v9 == v8)
          return;
      }
      v11 = *v9;
      v12 = (uint64_t *)v9[1];
      *(_QWORD *)(v11 + 8) = v12;
      *(_QWORD *)v9[1] = v11;
      --a1[120];
      md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v9 + 2));
      operator delete(v9);
      v9 = v12;
    }
    while (v12 != v8);
  }
}

void sub_19F181F94(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F181FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void md::DrapingLogic::runAfterLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  char v25;
  unsigned int v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t **v30;
  md::OverlayTileData *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = *(_QWORD *)(*(_QWORD *)a3 + 168);
  v35 = 0;
  v36 = 0;
  v34 = &v35;
  v4 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(v3);
  v5 = (unint64_t *)v4[7];
  v6 = (unint64_t *)v4[8];
  if (v5 != v6)
  {
    v7 = v4[10];
    while (1)
    {
      v8 = *v5;
      v9 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(v3);
      v10 = v9[4];
      if (v8 >> 39 >= (v9[5] - v10) >> 3)
        break;
      v11 = *(_QWORD *)(v10 + 8 * (v8 >> 39));
      if (!v11)
        break;
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(v8) & 0x7F));
      v14 = v9[7];
      v13 = v9[8];
      if (v12 >= (v13 - v14) >> 3)
        break;
      v15 = v14 + 8 * v12;
      v16 = v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(v8);
      if (!v16)
        break;
      v29 = v9[10];
      if (!v29 || v29 + v12 == v9[11])
        break;
LABEL_4:
      v7 += 104;
      if (++v5 == v6)
        goto LABEL_37;
    }
    v17 = (uint64_t *)operator new(0x30uLL);
    v18 = v17;
    v19 = *(_QWORD *)(v7 + 88);
    v17[4] = v19;
    v20 = *(unsigned __int8 *)(v7 + 96);
    *((_BYTE *)v17 + 40) = v20;
    v21 = v35;
    v22 = &v35;
    v23 = &v35;
    if (!v35)
    {
LABEL_31:
      *v17 = 0;
      v17[1] = 0;
      v17[2] = (uint64_t)v23;
      *v22 = v17;
      if (*v34)
      {
        v34 = (uint64_t **)*v34;
        v18 = *v22;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v35, v18);
      ++v36;
      goto LABEL_4;
    }
    while (1)
    {
      v23 = (uint64_t **)v21;
      v24 = v21[4];
      if (v19 == v24)
      {
        v26 = *((unsigned __int8 *)v21 + 40);
        if (v20 < v26)
          goto LABEL_14;
        v27 = v26 == v20;
        if (v26 >= v20)
          v28 = 1;
        else
          v28 = -1;
        if (v27)
          v28 = 0;
        if ((v28 & 0x80) == 0)
        {
LABEL_33:
          operator delete(v17);
          goto LABEL_4;
        }
LABEL_29:
        v21 = (uint64_t *)v21[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_31;
        }
      }
      else
      {
        if (v19 >= v24)
        {
          if (v24 >= v19)
            v25 = 1;
          else
            v25 = -1;
          if ((v25 & 0x80) == 0)
            goto LABEL_33;
          goto LABEL_29;
        }
LABEL_14:
        v21 = (uint64_t *)*v21;
        v22 = v23;
        if (!*v23)
          goto LABEL_31;
      }
    }
  }
LABEL_37:
  v30 = v34;
  if (v34 != &v35)
  {
    do
    {
      v31 = (md::OverlayTileData *)v30[4];
      if (((_BYTE)v30[5] & 1) != 0)
        md::OverlayTileData::clearEntities(v31);
      else
        md::ElevatedStrokeTileData::clearEntities(v31);
      v32 = v30[1];
      if (v32)
      {
        do
        {
          v33 = (uint64_t **)v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (uint64_t **)v30[2];
          v16 = *v33 == (uint64_t *)v30;
          v30 = v33;
        }
        while (!v16);
      }
      v30 = v33;
    }
    while (v33 != &v35);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v35);
}

void sub_19F182208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::VectorOverlay>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC3F88573D031CDC5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC3F88573D031CDC5;
      if (*(_QWORD *)&v3 <= 0xC3F88573D031CDC5)
        v5 = 0xC3F88573D031CDC5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC3F88573D031CDC5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC3F88573D031CDC5)
            {
              if (v7[2] == 0xC3F88573D031CDC5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC3F88573D031CDC5)
          {
            if (v7[2] == 0xC3F88573D031CDC5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::VectorOverlay]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B36D8;
  *(_QWORD *)(v11 + 8) = 0xC3F88573D031CDC5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC3F88573D031CDC5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC3F88573D031CDC5;
  v15[1] = "md::overlayComponents::VectorOverlay]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC3F88573D031CDC5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F182430(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xE719E07499A88BEBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x9F2276D081C2CB20;
    if (*(_QWORD *)&v4 <= 0x9F2276D081C2CB20)
      v6 = 0x9F2276D081C2CB20 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x9F2276D081C2CB20)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x90B6813830DCB581)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xA588623CD4116DAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x1AF456233693CD46 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
      v6 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x88B81689974D86F3 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x12B1E486D3040E2CLL;
    if (*(_QWORD *)&v4 <= 0x12B1E486D3040E2CuLL)
      v6 = 0x12B1E486D3040E2CuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x12B1E486D3040E2CLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xE719E07499A88BEBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

ggl::IsoAlphaAtlas *ggl::IsoAlphaAtlas::IsoAlphaAtlas(ggl::IsoAlphaAtlas *this, uint64_t a2, float a3, float a4, ggl::Device *a5, float a6, float a7)
{
  uint64_t *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0x800000080;
  *((float *)this + 2) = a3;
  *((_QWORD *)this + 2) = 0;
  v9 = (uint64_t *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  ggl::AlphaAtlas::generateTexture((ggl::AlphaAtlas *)&v44, 0x80u, 0x80u, a3, 0.15, a6, a7);
  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E42DED18;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_DWORD *)v10 + 14) = 0;
  *(_OWORD *)(v10 + 60) = xmmword_19FFB2E60;
  *(_QWORD *)(v10 + 76) = 0x100000001;
  *((_DWORD *)v10 + 21) = 0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v10;
  *((_QWORD *)v10 + 3) = &off_1E42B63B0;
  *((_QWORD *)this + 3) = v10 + 24;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = operator new();
  v15 = v44;
  v16 = v45;
  if (v45)
  {
    v17 = (unint64_t *)&v45->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_DWORD *)(v15 + 12);
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 56) = 0x100000001;
  *(_DWORD *)(v14 + 64) = 0;
  *(_DWORD *)(v14 + 68) = v19;
  *(_QWORD *)(v14 + 72) = 0x100000001;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)v14 = &off_1E42BE438;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v14 + 48) = "";
  *(_DWORD *)(v14 + 104) = *(_DWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 112) = v15;
  *(_QWORD *)(v14 + 120) = v16;
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_WORD *)(v14 + 128) = 0;
  *(_BYTE *)(v14 + 130) = 1;
  v22 = *((_QWORD *)this + 4);
  *(_QWORD *)(v14 + 136) = *((_QWORD *)this + 3);
  *(_QWORD *)(v14 + 144) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(v15 + 16);
  v25 = *v9;
  *v9 = v14;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v43, a2);
  v46[0] = &off_1E42D5FA8;
  v46[1] = this;
  v47 = v46;
  v41 = 0;
  v42 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v43 + 16))(v43, v46, &v41);
  v28 = v42;
  if (v42)
  {
    v29 = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v47;
  if (v47 == v46)
  {
    v32 = 4;
    v31 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_32;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_32:
  if (v43)
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
    v34 = v43;
    v43 = 0;
    v46[0] = v34;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v33 + 48))(v33, v46);
    v35 = v46[0];
    v46[0] = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v43;
    v43 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  v37 = v45;
  if (v45)
  {
    v38 = (unint64_t *)&v45->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return this;
}

uint64_t ggl::MetalLoader::performWithAccessor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  ggl::MetalDevice *v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  std::__throw_bad_function_call[abi:nn180100]();
  return ggl::MetalDevice::vendLoader(v4);
}

_QWORD *ggl::MetalDevice::vendLoader@<X0>(ggl::MetalDevice *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42B5C98;
  v4[1] = this;
  result = (_QWORD *)operator new();
  *result = &off_1E42BACA8;
  result[1] = this;
  v4[2] = result;
  *a2 = v4;
  return result;
}

void sub_19F183FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void ggl::MetalLoader::~MetalLoader(ggl::MetalLoader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E42B5C98;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E42B5C98;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void ggl::MetalResourceAccessor::~MetalResourceAccessor(ggl::MetalResourceAccessor *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::MetalDevice::unvendLoader(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::MetalLoader::device(ggl::MetalLoader *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9;
  float v10;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t result;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  float v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  float v41;
  char *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  char v46;
  char v47;

  if (a5 == 2)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v10 = *(float *)v9;
      LODWORD(v9) = *(float *)v9 == 1.0;
      if (*(_BYTE *)(a2 + 10))
      {
        if (v10 != 0.0 && v10 != 1.0)
          goto LABEL_12;
      }
    }
    v9 = v9;
  }
  else
  {
    v9 = 1;
  }
  v12 = *(unsigned __int8 *)(a2 + v9 + 11);
  v10 = 0.0;
  if (v12 != 2)
  {
    v23 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gss::DashPattern>(a2, a3, a4, v12, 0);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    result = v23[3];
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = result;
    v25 = (_DWORD *)*v23;
    v26 = (_DWORD *)v23[1];
    v27 = (uint64_t)v26 - *v23;
    if (v26 != (_DWORD *)*v23)
    {
      if (v27 < 0)
        goto LABEL_59;
      v28 = v27 >> 2;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 16) = result + 4 * v28;
      do
      {
        if (result)
          *(_DWORD *)result = *v25;
        ++v25;
        result += 4;
      }
      while (v25 != v26);
      *(_QWORD *)(a1 + 8) = result;
    }
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v23 + 8);
    return result;
  }
LABEL_12:
  v47 = 1;
  v46 = 1;
  v13 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gss::DashPattern>(a2, a3, a4, 0, &v47);
  v14 = v13;
  v15 = v13[3];
  v16 = *v13;
  v17 = v13[1];
  v18 = v17 - *v13;
  if (v17 != *v13)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = v18 >> 2;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v13[3]);
      v21 = (char *)v20;
      v22 = 0;
      do
      {
        if (v20 + v22)
          *(_DWORD *)(v20 + v22) = *(_DWORD *)(v16 + v22);
        v22 += 4;
      }
      while (v16 + v22 != v17);
      v29 = (char *)(v20 + v22);
      v45 = v20 + 4 * v19;
      goto LABEL_28;
    }
LABEL_59:
    abort();
  }
  v29 = 0;
  v45 = 0;
  v21 = 0;
LABEL_28:
  v30 = *((float *)v14 + 8);
  v31 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gss::DashPattern>(a2, a3, a4, 1u, &v46);
  v32 = v31;
  v33 = v31[3];
  v35 = *v31;
  v34 = v31[1];
  v36 = v34 - *v31;
  if (v34 == *v31)
  {
    v38 = 0;
    v40 = 0;
  }
  else
  {
    if (v36 < 0)
      abort();
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v31[3], v36, 4);
    v38 = (char *)v37;
    v39 = 0;
    do
    {
      if (v37 + v39)
        *(_DWORD *)(v37 + v39) = *(_DWORD *)(v35 + v39);
      v39 += 4;
    }
    while (v35 + v39 != v34);
    v40 = (char *)(v37 + v39);
    v36 = v37 + 4 * (v36 >> 2);
  }
  v41 = *((float *)v32 + 8);
  if (v10 >= 1.0)
    result = v33;
  else
    result = v15;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  if (v10 >= 1.0)
    v42 = v38;
  else
    v42 = v21;
  if (v10 >= 1.0)
    v29 = v40;
  v43 = v29 - v42;
  if (v29 != v42)
  {
    if (v43 < 0)
      abort();
    result = (*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v29 - v42, 4);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = result + 4 * (v43 >> 2);
    do
    {
      if (result)
        *(_DWORD *)result = *(_DWORD *)v42;
      v42 += 4;
      result += 4;
    }
    while (v42 != v29);
    *(_QWORD *)(a1 + 8) = result;
  }
  if (v10 >= 1.0)
    v44 = v41;
  else
    v44 = v30;
  *(float *)(a1 + 32) = v44;
  if (v38)
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v33 + 40))(v33, v38, v36 - (_QWORD)v38);
  if (v21)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v15 + 40))(v15, v21, v45 - (_QWORD)v21);
  return result;
}

void sub_19F1843E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v12, v13 - v12);
    if (!v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v10, a9 - v10);
  _Unwind_Resume(exception_object);
}

uint64_t *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gss::DashPattern>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 **v15;
  unint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unsigned __int16 v44;

  v5 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v5)
  {
    if (a5)
      *a5 = 0;
    return (uint64_t *)gss::defaultValueForKey<gss::PropertyID,gss::DashPattern>();
  }
  v6 = a1 + 16 * a4;
  v7 = *(unsigned __int16 *)(v6 + 56);
  if (*(_WORD *)(v6 + 56))
  {
    v8 = *(_QWORD *)(v6 + 48);
    v9 = v8 + 8 * v7;
    do
    {
      v11 = *(uint64_t **)(*(_QWORD *)v8 + 72);
      if (v11)
      {
        v14 = *v11;
        v12 = v11 + 2;
        v13 = v14;
        v15 = (unsigned __int16 **)(v14 + 80 * *((unsigned __int8 *)v12 + a3));
        v16 = *((unsigned __int16 *)v15 + 5);
        if (*((_WORD *)v15 + 5))
        {
          v17 = *v15;
          if (*((_BYTE *)v15 + 15))
          {
            if (v16 >= 0x1E)
            {
              v22 = *v15;
              v23 = v16;
              do
              {
                v24 = v23 >> 1;
                v25 = &v22[v23 >> 1];
                v27 = *v25;
                v26 = v25 + 1;
                v23 += ~(v23 >> 1);
                if (v27 < a2)
                  v22 = v26;
                else
                  v23 = v24;
              }
              while (v23);
              if (v22 == &v17[v16] || *v22 != a2)
                goto LABEL_6;
              v10 = (unint64_t)((char *)v22 - (char *)v17) >> 1;
            }
            else
            {
              v18 = 0;
              while (1)
              {
                v19 = v17[v18];
                if (v19 >= a2)
                  break;
                if (v16 == ++v18)
                  goto LABEL_6;
              }
              if (v19 == a2)
                LOWORD(v10) = v18;
              else
                LOWORD(v10) = v16;
            }
          }
          else
          {
            v20 = 2 * v16;
            v21 = *v15;
            while (*v21 != a2)
            {
              ++v21;
              v20 -= 2;
              if (!v20)
              {
                v21 = &v17[v16];
                break;
              }
            }
            v10 = (unint64_t)((char *)v21 - (char *)v17) >> 1;
          }
        }
        else
        {
          LOWORD(v10) = 0;
        }
        if ((_DWORD)v16 != (unsigned __int16)v10)
        {
          if (a3 >= 0x17)
            v35 = 23;
          else
            v35 = a3;
          v30 = v13 + 80 * *((unsigned __int8 *)v12 + v35);
          return gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(a2, v30);
        }
      }
LABEL_6:
      v8 += 8;
    }
    while (v8 != v9);
  }
  v28 = *(_QWORD **)(v5 + 72);
  if (!v28)
    goto LABEL_69;
  v29 = a3 >= 0x17 ? 23 : a3;
  v30 = *v28 + 80 * *((unsigned __int8 *)v28 + v29 + 16);
  v31 = *(unsigned __int16 *)(v30 + 10);
  if (!*(_WORD *)(v30 + 10))
    goto LABEL_69;
  v32 = *(unsigned __int16 **)v30;
  if (!*(_BYTE *)(v30 + 15))
  {
    v36 = 2 * v31;
    v37 = *(unsigned __int16 **)v30;
    while (*v37 != a2)
    {
      ++v37;
      v36 -= 2;
      if (!v36)
      {
        v37 = &v32[v31];
        break;
      }
    }
    if ((_DWORD)v31 == (unsigned __int16)((unint64_t)((char *)v37 - (char *)v32) >> 1))
      goto LABEL_69;
    return gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(a2, v30);
  }
  if (v31 >= 0x1E)
  {
    v38 = *(unsigned __int16 **)v30;
    v39 = *(unsigned __int16 *)(v30 + 10);
    do
    {
      v40 = v39 >> 1;
      v41 = &v38[v39 >> 1];
      v43 = *v41;
      v42 = v41 + 1;
      v39 += ~(v39 >> 1);
      if (v43 < a2)
        v38 = v42;
      else
        v39 = v40;
    }
    while (v39);
    if (v38 != &v32[v31]
      && *v38 == a2
      && (_DWORD)v31 != (unsigned __int16)((unint64_t)((char *)v38 - (char *)v32) >> 1))
    {
      return gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(a2, v30);
    }
LABEL_69:
    if (a5)
      *a5 = 0;
    return (uint64_t *)gss::defaultValueForKey<gss::PropertyID,gss::DashPattern>();
  }
  v33 = 0;
  while (1)
  {
    v34 = v32[v33];
    if (v34 >= a2)
      break;
    if (v31 == ++v33)
      goto LABEL_69;
  }
  if (v34 == a2)
    v44 = v33;
  else
    v44 = *(_WORD *)(v30 + 10);
  if ((_DWORD)v31 == v44)
    goto LABEL_69;
  return gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(a2, v30);
}

void ggl::Flyover::FlyoverPipelineSetup::setState(ggl::PipelineSetup *this, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (a2 && **(_QWORD **)(a2 + 40) == *((_QWORD *)this + 1))
  {
    v11 = *((_QWORD *)this + 2);
    if (v11 && v11 != a2)
      ggl::PipelineSetup::resetData((uint64_t)this);
    if (a3)
    {
      v12 = (unint64_t *)&a3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = a2;
    *((_QWORD *)this + 3) = a3;
    if (!v8)
      goto LABEL_20;
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
  }
  else
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (!v8)
      goto LABEL_20;
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!a3)
      return;
    goto LABEL_21;
  }
LABEL_20:
  if (!a3)
    return;
LABEL_21:
  v15 = (unint64_t *)&a3->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
}

uint64_t *gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 v14;
  gss::Allocator *v16;

  v2 = *(unsigned __int16 *)(a2 + 74);
  if (!*(_WORD *)(a2 + 74))
    goto LABEL_21;
  v3 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(a2 + 79))
  {
    if (v2 < 0x1E)
    {
      v4 = 0;
      while (1)
      {
        v5 = *(unsigned __int16 *)(v3 + 2 * v4);
        if (v5 >= a1)
          break;
        if (v2 == ++v4)
          goto LABEL_21;
      }
      v13 = (unsigned __int16)v4;
      if (v5 != a1)
        v13 = *(unsigned __int16 *)(a2 + 74);
      if (v13 != (_DWORD)v2)
        return *(uint64_t **)(*(_QWORD *)(a2 + 64) + *(unsigned __int16 *)(a2 + 72) + 16 * v13 + 8);
      goto LABEL_21;
    }
    v7 = *(unsigned __int16 **)(a2 + 64);
    v8 = *(unsigned __int16 *)(a2 + 74);
    do
    {
      v9 = v8 >> 1;
      v10 = &v7[v8 >> 1];
      v12 = *v10;
      v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v12 < a1)
        v7 = v11;
      else
        v8 = v9;
    }
    while (v8);
    if (v7 == (unsigned __int16 *)(v3 + 2 * v2) || *v7 != a1)
      goto LABEL_21;
  }
  else
  {
    v6 = 2 * v2;
    v7 = *(unsigned __int16 **)(a2 + 64);
    while (*v7 != a1)
    {
      ++v7;
      v6 -= 2;
      if (!v6)
      {
        LODWORD(v7) = v3 + 2 * v2;
        break;
      }
    }
  }
  v13 = (unsigned __int16)(((_DWORD)v7 - v3) >> 1);
  if (v13 != (_DWORD)v2)
    return *(uint64_t **)(*(_QWORD *)(a2 + 64) + *(unsigned __int16 *)(a2 + 72) + 16 * v13 + 8);
LABEL_21:
  if ((v14 & 1) != 0)
    return &gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  if ((_DWORD)v16)
  {
    gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue = 0;
    unk_1EE585390 = 0;
    qword_1EE585398 = 0;
    qword_1EE5853A0 = gss::Allocator::instance(v16);
    __cxa_atexit((void (*)(void *))gss::DashPattern::~DashPattern, &gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue, &dword_19F029000);
  }
  return &gss::PropertySetValueHelper<gss::PropertyID,gss::DashPattern>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

__int128 *gss::defaultValueForKey<gss::PropertyID,gss::DashPattern>()
{
  unsigned __int8 v0;
  gss::DashPattern *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1ECE65B80);
  if ((v0 & 1) == 0)
  {
    v2 = (gss::DashPattern *)__cxa_guard_acquire(&qword_1ECE65B80);
    if ((_DWORD)v2)
    {
      qword_1ECE65BA8 = 0;
      *(_OWORD *)&qword_1ECE65B98 = 0u;
      xmmword_1ECE65B88 = 0u;
      gss::DashPattern::DashPattern(v2);
      __cxa_atexit((void (*)(void *))gss::DashPattern::~DashPattern, &xmmword_1ECE65B88, &dword_19F029000);
      __cxa_guard_release(&qword_1ECE65B80);
    }
  }
  return &xmmword_1ECE65B88;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void ___ZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEf_block_invoke(uint64_t a1, ResourceAccessor *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  gss::Allocator *v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  int8x8_t v34;
  uint8x8_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t v57;
  int v58;
  float v59;
  float v60;
  id v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  BOOL v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  _BYTE *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned int *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  _QWORD *v94;
  _QWORD *v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  char v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;

  v2 = a1;
  v3 = *(unsigned __int8 **)(a1 + 32);
  md::MeshSetStorage::prepareStorage(*(uint64_t **)(a1 + 40), a2);
  v4 = *(uint64_t **)(v2 + 56);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      v7 = *(id *)(v5 + 8);
      objc_msgSend(v7, "willAddDataWithAccessor:", a2);

      v5 += 24;
    }
    while (v5 != v6);
  }
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD **)v8;
  v94 = *(_QWORD **)(v8 + 8);
  if (*(_QWORD **)v8 != v94)
  {
    v97 = v2;
    v10 = 1;
    v96 = v3;
    while (1)
    {
      v11 = *v9;
      v12 = (std::__shared_weak_count *)v9[1];
      v112 = *v9;
      v113 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v15 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v11 + 144));
      v16 = v15;
      if (v15)
        break;
LABEL_133:
      if (v12)
      {
        v88 = (unint64_t *)&v12->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v9 += 2;
      if (v9 == v94)
        goto LABEL_138;
    }
    v95 = v9;
    v17 = 0;
    v98 = v15;
LABEL_13:
    v18 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(v11 + 144));
    v19 = v18;
    v20 = v18 + (v17 << 7);
    v21 = v3[752];
    if (v21 == 2)
    {
      if (*(_BYTE *)(v20 + 127) != 1)
        goto LABEL_12;
    }
    else if (v21 == 1 && *(_BYTE *)(v18 + (v17 << 7) + 127) == 1)
    {
      goto LABEL_12;
    }
    if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v3 + 152))(v3, v112, v20) & 1) != 0)
      goto LABEL_12;
    v22 = v19 + (v17 << 7);
    v24 = *(unsigned __int8 *)(v22 + 127);
    v23 = (_BYTE *)(v22 + 127);
    v25 = v24 == 1;
    if (v24 == 1)
      v26 = v10 + 1;
    else
      v26 = v10;
    if (!v25)
      v10 = 0;
    if (!*(_DWORD *)(v20 + 100))
    {
      v10 = v26;
      goto LABEL_12;
    }
    v101 = v26;
    md::createFeatureAttributeSet((gss::Allocator *)&v108, (uint64_t *)(v20 + 24));
    v27 = **(_QWORD **)(v2 + 72);
    *(_QWORD *)((char *)&v102 + 7) = 0;
    *(_QWORD *)&v102 = 0;
    HIBYTE(v102) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v106, v27, (gss::FeatureAttributeSet *)&v108, (gss::QueryOverrides *)&v102);
    if (!BYTE14(v102) && (_QWORD)v102)
    {
      v29 = gss::Allocator::instance(v28);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, v102, WORD6(v102));
    }
    v30 = (char *)v109 - (char *)v108;
    v31 = ((char *)v109 - (char *)v108) >> 3;
    if (v109 != v108)
    {
      v32 = v108;
      do
      {
        v33 = ((v31 << 6) - 0x61C8864680B583EBLL + (v31 >> 2) + *v32) ^ v31;
        v31 = (*((unsigned __int16 *)v32 + 2) - 0x61C8864680B583EBLL + (v33 << 6) + (v33 >> 2)) ^ v33;
        v32 += 2;
      }
      while (v32 != v109);
    }
    v34 = *(int8x8_t *)(v2 + 88);
    v100 = v23;
    if (!*(_QWORD *)&v34)
      goto LABEL_68;
    v35 = (uint8x8_t)vcnt_s8(v34);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      v36 = v31;
      if (v31 >= *(_QWORD *)&v34)
        v36 = v31 % *(_QWORD *)&v34;
    }
    else
    {
      v36 = (*(_QWORD *)&v34 - 1) & v31;
    }
    v37 = *(_QWORD **)(*(_QWORD *)(v2 + 80) + 8 * v36);
    if (!v37 || (v38 = (_QWORD *)*v37) == 0)
    {
LABEL_68:
      v40 = 0;
      goto LABEL_69;
    }
    if (v35.u32[0] < 2uLL)
    {
      v39 = *(_QWORD *)&v34 - 1;
      while (1)
      {
        v46 = v38[1];
        if (v31 == v46)
        {
          v47 = v38[2];
          v48 = v38[3];
          if (v48 - v47 == v30)
          {
            if (v47 == v48)
              goto LABEL_67;
            v49 = v108;
            while (*(_DWORD *)v47 == *v49 && *(unsigned __int16 *)(v47 + 4) == *((unsigned __int16 *)v49 + 2))
            {
              v47 += 8;
              v49 += 2;
              if (v47 == v48)
                goto LABEL_67;
            }
          }
        }
        else if ((v46 & v39) != v36)
        {
          goto LABEL_68;
        }
        v40 = 0;
        v38 = (_QWORD *)*v38;
        if (!v38)
          goto LABEL_69;
      }
    }
    while (1)
    {
      v41 = v38[1];
      if (v31 == v41)
      {
        v42 = v38[2];
        v43 = v38[3];
        if (v43 - v42 == v30)
        {
          if (v42 == v43)
          {
LABEL_67:
            v40 = v38;
LABEL_69:
            v51 = atomic_load((unsigned __int8 *)&_ZGVZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap);
            if ((v51 & 1) == 0
              && __cxa_guard_acquire(&_ZGVZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap))
            {
              __cxa_guard_release(&_ZGVZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap);
            }
            v52 = v11;
            v53 = (unsigned __int8 **)(v40 + 6);
            if (!v40)
              v53 = (unsigned __int8 **)&_ZZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap;
            v54 = *v53;
            v55 = v53[1];
            if (*v53 == v55)
            {
              v56 = 0;
            }
            else
            {
              v56 = 0;
              v57 = v19 + (v17 << 7);
              v58 = *(unsigned __int8 *)(v57 + 126);
              v59 = *(float *)(v57 + 104);
              v60 = *(float *)(v57 + 108);
              do
              {
                if (*((_QWORD *)v54 + 2) == v10 && *v54 == v58)
                {
                  if (!v58
                    || ((v62 = *((float *)v54 + 1),
                         v63 = vabds_f32(v62, v59),
                         v63 > (float)(fabsf(v62 + v59) * 0.000011921))
                      ? (v64 = v63 <= 1.1755e-38)
                      : (v64 = 1),
                        v64
                     && ((v65 = *((float *)v54 + 2),
                          v66 = vabds_f32(v65, v60),
                          v66 > (float)(fabsf(v65 + v60) * 0.000011921))
                       ? (v67 = v66 <= 1.1755e-38)
                       : (v67 = 1),
                         v67)))
                  {
                    v61 = *((id *)v54 + 4);

                    v56 = v61;
                  }
                }
                v54 += 48;
              }
              while (v54 != v55);
            }
            v68 = v106;
            v69 = v107;
            if (v107)
            {
              v70 = (unint64_t *)&v107->__shared_owners_;
              v2 = v97;
              v11 = v52;
              v71 = v100;
              do
                v72 = __ldxr(v70);
              while (__stxr(v72 + 1, v70));
              *((_QWORD *)&v102 + 1) = v69;
              v16 = v98;
              do
                v73 = __ldxr(v70);
              while (__stxr(v73 + 1, v70));
            }
            else
            {
              *((_QWORD *)&v102 + 1) = 0;
              v2 = v97;
              v11 = v52;
              v16 = v98;
              v71 = v100;
            }
            *(_QWORD *)&v102 = v68;
            v103 = 0;
            v104 = 0;
            v105 = 0;
            if (v68)
              LOBYTE(v68) = (*(uint64_t (**)(unint64_t, uint64_t *))(*(_QWORD *)v68 + 48))(v68, &v103);
            v105 = v68;
            if (v69)
            {
              v74 = (unint64_t *)&v69->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
                v76 = *(_QWORD *)(v2 + 120);
                if (v76)
                  goto LABEL_104;
LABEL_108:
                v77 = 0;
                goto LABEL_109;
              }
            }
            v76 = *(_QWORD *)(v2 + 120);
            if (!v76)
              goto LABEL_108;
LABEL_104:
            if (*v71 == 1)
              v77 = v76;
            else
              v77 = 0;
LABEL_109:
            objc_msgSend(v56, "addPolygon:accessor:triangulator:withRounder:", v20, a2, *(_QWORD *)(v2 + 136), v77);
            if (v105)
              (*(void (**)(_QWORD))(*(_QWORD *)v102 + 56))(v102);
            v78 = v104;
            if (!v104)
              goto LABEL_115;
            v79 = (unint64_t *)&v104->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
              v81 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
              if (*((_QWORD *)&v102 + 1))
              {
LABEL_116:
                v82 = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
            }
            else
            {
LABEL_115:
              v81 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
              if (*((_QWORD *)&v102 + 1))
                goto LABEL_116;
            }

            v84 = v107;
            v3 = v96;
            if (!v107)
              goto LABEL_125;
            v85 = (unint64_t *)&v107->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              v87 = v108;
              if (v108)
              {
LABEL_126:
                v109 = v87;
                (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v111 + 40))(v111, v87, v110 - (_QWORD)v87);
              }
            }
            else
            {
LABEL_125:
              v87 = v108;
              if (v108)
                goto LABEL_126;
            }
            v10 = v101;
LABEL_12:
            if (++v17 == v16)
            {
              v12 = v113;
              v9 = v95;
              goto LABEL_133;
            }
            goto LABEL_13;
          }
          v44 = v108;
          while (*(_DWORD *)v42 == *v44 && *(unsigned __int16 *)(v42 + 4) == *((unsigned __int16 *)v44 + 2))
          {
            v42 += 8;
            v44 += 2;
            if (v42 == v43)
              goto LABEL_67;
          }
        }
      }
      else
      {
        if (v41 >= *(_QWORD *)&v34)
          v41 %= *(_QWORD *)&v34;
        if (v41 != v36)
          goto LABEL_68;
      }
      v40 = 0;
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_69;
    }
  }
LABEL_138:
  v90 = *(uint64_t **)(v2 + 56);
  v91 = *v90;
  v92 = v90[1];
  if (*v90 != v92)
  {
    do
    {
      v93 = *(id *)(v91 + 8);
      objc_msgSend(v93, "didFinishAddingData");

      v91 += 24;
    }
    while (v91 != v92);
  }
  md::MeshSetStorage::finalize(*(md::MeshSetStorage **)(v2 + 40));
}

void sub_19F185188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F185198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t *md::MeshSetStorage::prepareStorage(uint64_t *this, ResourceAccessor *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  _QWORD *v13;
  __n128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  unsigned __int8 v22;
  __n128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  __n128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;

  if (!*((_BYTE *)this + 40))
  {
    v2 = this;
    if (this[4])
    {
      if (*this && this[1])
      {
        v4 = (uint64_t *)this[2];
        if (v4 == this + 3)
        {
          v9 = 0;
          v5 = 0;
        }
        else
        {
          v5 = 0;
          v6 = 0;
          do
          {
            v7 = (_QWORD *)v4[4];
            v8 = (unint64_t)(v5 + v7[1] - 1) / v7[1] * v7[1];
            v5 = v8 + v7[2];
            v7[4] = v8;
            v7[5] = v5;
            v9 = v7[3] + v6;
            v7[6] = v6;
            v7[7] = v9;
            v10 = (uint64_t *)v4[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (uint64_t *)v4[2];
                v12 = *v11 == (_QWORD)v4;
                v4 = v11;
              }
              while (!v12);
            }
            v6 = v9;
            v4 = v11;
          }
          while (v11 != this + 3);
        }
        v13 = operator new(0xE0uLL);
        v13[1] = 0;
        v13[2] = 0;
        *v13 = &off_1E42DE500;
        v14.n128_f64[0] = ggl::BufferData::BufferData((uint64_t)(v13 + 3), 1, 0, v5);
        v15 = (std::__shared_weak_count *)v2[7];
        v2[6] = v16;
        v2[7] = (uint64_t)v13;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v19 = operator new(0xF8uLL);
        v19[1] = 0;
        v19[2] = 0;
        *v19 = &off_1E42E5228;
        v19[3] = &off_1E42B5748;
        v20 = (char *)(v19 + 3);
        v19[4] = 2;
        *((_DWORD *)v19 + 10) = 257;
        v19[6] = 0;
        v19[7] = 0;
        v19[8] = 0;
        v19[9] = 2 * v9;
        v21 = 0uLL;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        v19[14] = 0;
        if ((v22 & 1) == 0)
        {
          v48 = v19;
          v21 = 0uLL;
          v50 = v49;
          v19 = v48;
          if (v50)
          {
            v51 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v51, "GeoGL", 0xA3D02C1100000005);
            v21 = 0uLL;
            v19 = v48;
          }
        }
        v19[15] = ggl::Allocator::instance(void)::alloc;
        v19[16] = 0;
        *((_OWORD *)v19 + 11) = v21;
        *((_OWORD *)v19 + 12) = v21;
        v19[26] = 0;
        v19[27] = -1;
        v23.n128_u64[1] = 850045863;
        *((_OWORD *)v19 + 9) = xmmword_19FFB2DD0;
        *((_OWORD *)v19 + 10) = v21;
        *((_DWORD *)v19 + 34) = 0;
        v19[28] = &unk_1E42BD118;
        v19[29] = "MeshBufferStorage Index Data";
        *((_DWORD *)v19 + 60) = 0;
        v19[3] = &off_1E42BD0F8;
        v19[4] = 2;
        v24 = (std::__shared_weak_count *)v2[9];
        v2[8] = (uint64_t)v20;
        v2[9] = (uint64_t)v19;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = v2[6];
        v55 = 0uLL;
        v23.n128_u64[0] = (unint64_t)a2;
        *(_QWORD *)&v28 = a2;
        *((_QWORD *)&v28 + 1) = v27;
        v53 = v23;
        if (v5)
        {
          if (a2 && *(_BYTE *)(v27 + 17) != 2)
          {
            v52 = v28;
            v29 = (*((uint64_t (**)(ResourceAccessor *))a2->var0 + 7))(a2);
            v28 = v52;
          }
          else
          {
            v29 = *(_QWORD *)(v27 + 72);
          }
        }
        else
        {
          v29 = 0;
        }
        v55 = v28;
        v56 = 0;
        v57 = v5;
        v59 = v29;
        v58 = 257;
        ggl::BufferMemory::operator=(v2 + 10, (uint64_t)&v55);
        *(_QWORD *)&v30 = v53.n128_u64[0];
        if (v59)
        {
          v32 = v56;
          v31 = v57;
          if (v57 != v56)
          {
            v33 = (_QWORD *)*((_QWORD *)&v55 + 1);
            v34 = v58;
            v35 = HIBYTE(v58);
            if ((_QWORD)v55 && *(_BYTE *)(*((_QWORD *)&v55 + 1) + 17) != 2)
            {
              (*(void (**)(__n128))(*(_QWORD *)v55 + 64))(v53);
              *(_QWORD *)&v30 = v53.n128_u64[0];
            }
            if (v34 && !v35)
            {
              v37 = v33[7];
              v36 = v33[8];
              if (v36 == v37)
                v37 = v33[10] - v33[9];
              if (v32 < v37)
                v37 = v32;
              if (v36 <= v31)
                v36 = v31;
              if (v36 == v37)
                v36 = v37 + v33[10] - v33[9];
              v33[7] = v37;
              v33[8] = v36;
            }
          }
        }
        v38 = v2[8];
        v55 = 0uLL;
        v39 = *(_QWORD *)(v38 + 8) * v9;
        *((_QWORD *)&v30 + 1) = v38;
        if (v39)
        {
          if (a2 && *(_BYTE *)(v38 + 17) != 2)
          {
            v54 = v30;
            v40 = (*((uint64_t (**)(ResourceAccessor *))a2->var0 + 7))(a2);
            v30 = v54;
          }
          else
          {
            v40 = *(_QWORD *)(v38 + 72);
          }
        }
        else
        {
          v40 = 0;
        }
        v55 = v30;
        v56 = 0;
        v57 = v39;
        v59 = v40;
        v58 = 257;
        this = ggl::BufferMemory::operator=(v2 + 16, (uint64_t)&v55);
        if (v59)
        {
          v42 = v56;
          v41 = v57;
          if (v57 != v56)
          {
            v43 = (_QWORD *)*((_QWORD *)&v55 + 1);
            this = (uint64_t *)v55;
            v44 = v58;
            v45 = HIBYTE(v58);
            if ((_QWORD)v55 && *(_BYTE *)(*((_QWORD *)&v55 + 1) + 17) != 2)
              this = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v55 + 64))();
            if (v44 && !v45)
            {
              v47 = v43[7];
              v46 = v43[8];
              if (v46 == v47)
                v47 = v43[10] - v43[9];
              if (v42 < v47)
                v47 = v42;
              if (v46 <= v41)
                v46 = v41;
              if (v46 == v47)
                v46 = v47 + v43[10] - v43[9];
              v43[7] = v47;
              v43[8] = v46;
            }
          }
        }
        *((_BYTE *)v2 + 40) = 1;
      }
    }
  }
  return this;
}

void std::__function::__func<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0,std::allocator<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, const char **a2)
{
  md::AssetData::_buildAssets(*(_QWORD *)(a1 + 16), *(uint64_t **)(a1 + 8), *a2);
}

_QWORD *std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 80);
  v6 = operator new(0x20uLL);
  *v6 = &off_1E42C6DE0;
  v6[1] = ggl::Texture2D::onImplicitLoadComplete;
  v6[2] = 0;
  v6[3] = v3;
  v21 = v6;
  v13[0] = v4;
  v13[1] = v3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v5;
  v7 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v6);
  v19 = v8;
  v9 = v21;
  if (v21 == v20)
  {
    v10 = 4;
    v9 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(__n128))(*v9 + 8 * v10))(v7);
LABEL_6:
  (*(void (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v2 + 24))(v2, v13, v7);
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

uint64_t std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = result;
  v3 = *a2;
  v4 = **(_QWORD **)(result + 8);
  v5 = 4 * *(_QWORD *)(v4 + 8);
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(*a2, v4, 0, 4 * *(_QWORD *)(v4 + 8), 1, 0);
      v6 = (_OWORD *)result;
    }
    else
    {
      v6 = *(_OWORD **)(v4 + 72);
    }
  }
  else
  {
    v6 = 0;
  }
  *v6 = xmmword_19FFB33E0;
  v6[1] = xmmword_19FFB33F0;
  v7 = **(_QWORD **)(v2 + 16);
  v8 = 6 * *(_QWORD *)(v7 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v7 + 17) == 2)
    {
      v9 = *(_QWORD *)(v7 + 72);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(v3, v7, 0, 6 * *(_QWORD *)(v7 + 8), 1, 0);
      v9 = result;
    }
    *(_QWORD *)v9 = 0x2000200010000;
    *(_DWORD *)(v9 + 8) = 3;
    if (*(_BYTE *)(v7 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)v10 = 0x2000200010000;
    *(_DWORD *)(v10 + 8) = 3;
  }
  v11 = *(_QWORD *)(v7 + 64);
  if (v11 <= v8)
    v11 = v8;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = v11;
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, v6, v4, 0, v5, 1, 0);
    v12 = *(_QWORD *)(v4 + 64);
    if (v12 <= v5)
      v12 = v5;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = v12;
  }
  return result;
}

uint64_t gss::DashPattern::DashPattern(gss::DashPattern *this)
{
  uint64_t result;

  xmmword_1ECE65B88 = 0uLL;
  qword_1ECE65B98 = 0;
  result = gss::Allocator::instance(this);
  qword_1ECE65BA0 = result;
  return result;
}

uint64_t grl::codec::IconMapPack::decode(grl::Allocator *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  const char *v33;
  const char *v34;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  uint64_t v42[2];
  void *__p;
  void *v44;
  uint64_t v45;
  __int16 v46;
  _QWORD v47[2];
  uint64_t *v48;
  _QWORD *v49[3];
  void *v50[3];

  memset(v50, 0, sizeof(v50));
  v49[0] = 0;
  v49[1] = (_QWORD *)grl::Allocator::instance(a1);
  v49[2] = 0;
  v48 = (uint64_t *)v49;
  v4 = (std::__shared_weak_count *)a2[1];
  v47[0] = *a2;
  v47[1] = v4;
  if (!v4)
  {
    if (grl::codec::ResourcePack::decodeHeader((uint64_t)a1, v47, (uint64_t)v50, &v48))
      goto LABEL_8;
LABEL_59:
    v32 = 317;
    v33 = "decodeHeader(packStream, headerName, chapterDataPositions)";
    v34 = "Failed to decode Pack Header";
    goto LABEL_60;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = grl::codec::ResourcePack::decodeHeader((uint64_t)a1, v47, (uint64_t)v50, &v48);
  v8 = v7;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v8)
      goto LABEL_8;
    goto LABEL_59;
  }
  if (!v7)
    goto LABEL_59;
LABEL_8:
  if (*(_BYTE *)v50[0] != 73
    || *((_BYTE *)v50[0] + 1) != 67
    || *((_BYTE *)v50[0] + 2) != 79
    || *((_BYTE *)v50[0] + 3) != 78
    || *((_BYTE *)v50[0] + 4) != 77
    || *((_BYTE *)v50[0] + 5) != 65
    || *((_BYTE *)v50[0] + 6) != 80
    || *((_BYTE *)v50[0] + 7) != 80
    || *((_BYTE *)v50[0] + 8) != 65
    || *((_BYTE *)v50[0] + 9) != 67
    || *((_BYTE *)v50[0] + 10) != 75)
  {
    v32 = 319;
    v33 = "headerName[0] == 'I' && headerName[1] == 'C' && headerName[2] == 'O' && headerName[3] == 'N' && headerName[4] "
          "== 'M' && headerName[5] == 'A' && headerName[6] == 'P' && headerName[7] == 'P' && headerName[8] == 'A' && head"
          "erName[9] == 'C' && headerName[10] == 'K'";
    v34 = "Magic code is wrong";
LABEL_60:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v34, v33, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v32);
    goto LABEL_61;
  }
  v46 = 0;
  v10 = v48;
  if (v48 == (uint64_t *)v49)
  {
LABEL_56:
    v31 = 1;
    goto LABEL_62;
  }
  while (1)
  {
    v11 = *((unsigned __int16 *)v10 + 16);
    if (v11 <= 0xC)
    {
      if (v11 == 1)
      {
        __p = 0;
        v44 = 0;
        v45 = 0;
        v20 = a2[1];
        v42[0] = *a2;
        v42[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = grl::codec::ResourcePack::decodeChapterData((uint64_t)a1, v42, (uint64_t)(v10 + 5), (uint64_t)&__p);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v42);
        if ((v23 & 1) != 0)
        {
          if (!grl::codec::ResourcePack::decodePackInfo((uint64_t)a1, (uint64_t)&__p, &v46))
          {
            v36 = 328;
            v37 = "decodePackInfo(chapterData, context)";
            v38 = "Could not decode Pack Info chapter";
            goto LABEL_73;
          }
          goto LABEL_48;
        }
        v36 = 327;
        goto LABEL_71;
      }
      if (v11 == 11)
      {
        __p = 0;
        v44 = 0;
        v45 = 0;
        v12 = a2[1];
        v41[0] = *a2;
        v41[1] = v12;
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = grl::codec::ResourcePack::decodeChapterData((uint64_t)a1, v41, (uint64_t)(v10 + 5), (uint64_t)&__p);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v41);
        if ((v15 & 1) != 0)
        {
          if ((grl::codec::IconMapPack::decodeIconIDMapping((uint64_t)a1, (unsigned int *)__p, (uint64_t)v44) & 1) == 0)
          {
            v36 = 333;
            v37 = "decodeIconIDMapping(chapterData, context)";
            v38 = "Could not decode Icon ID chapter";
            goto LABEL_73;
          }
LABEL_48:
          if (__p)
          {
            v44 = __p;
            operator delete(__p);
          }
          goto LABEL_50;
        }
        v36 = 332;
        goto LABEL_71;
      }
      goto LABEL_50;
    }
    if (v11 == 13)
      break;
    if (v11 == 14)
    {
      __p = 0;
      v44 = 0;
      v45 = 0;
      v16 = a2[1];
      v40[0] = *a2;
      v40[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = grl::codec::ResourcePack::decodeChapterData((uint64_t)a1, v40, (uint64_t)(v10 + 5), (uint64_t)&__p);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v40);
      if ((v19 & 1) != 0)
      {
        if (!grl::codec::IconMapPack::decodeRegionMapping((uint64_t *)a1, __p, (uint64_t)v44))
        {
          v36 = 338;
          v37 = "decodeRegionMapping(chapterData, context)";
          v38 = "Could not decode Region Name chapter";
          goto LABEL_73;
        }
        goto LABEL_48;
      }
      v36 = 337;
LABEL_71:
      v37 = "decodeChapterData(packStream, chapterPair.second, chapterData)";
      v38 = "Could not decode Chapter Data";
      goto LABEL_73;
    }
LABEL_50:
    v28 = (uint64_t *)v10[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (uint64_t *)v10[2];
        v30 = *v29 == (_QWORD)v10;
        v10 = v29;
      }
      while (!v30);
    }
    v10 = v29;
    if (v29 == (uint64_t *)v49)
      goto LABEL_56;
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  v24 = a2[1];
  v39[0] = *a2;
  v39[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = grl::codec::ResourcePack::decodeChapterData((uint64_t)a1, v39, (uint64_t)(v10 + 5), (uint64_t)&__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v39);
  if ((v27 & 1) == 0)
  {
    v36 = 342;
    goto LABEL_71;
  }
  if ((grl::codec::IconMapPack::decodeFallbackMapping((uint64_t)a1, (unsigned int *)__p, (uint64_t)v44) & 1) != 0)
    goto LABEL_48;
  v36 = 343;
  v37 = "decodeFallbackMapping(chapterData, context)";
  v38 = "Could not decode Fallback chapter";
LABEL_73:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v38, v37, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v36);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
LABEL_61:
  v31 = 0;
LABEL_62:
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v48, v49[0]);
  if (v50[0])
    operator delete(v50[0]);
  return v31;
}

uint64_t grl::codec::IconDataPack::decode(uint64_t a1, __int128 *a2)
{
  grl::Allocator *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  const char *v33;
  const char *v34;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43[2];
  __int16 v44;
  _QWORD v45[2];
  uint64_t *v46;
  _QWORD *v47[3];
  void *v48[3];
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = (grl::Allocator *)std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100](a1 + 184, a2);
  memset(v48, 0, sizeof(v48));
  v47[0] = 0;
  v47[1] = (_QWORD *)grl::Allocator::instance(v3);
  v47[2] = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 192);
  v45[0] = *(_QWORD *)(a1 + 184);
  v45[1] = v4;
  v46 = (uint64_t *)v47;
  if (!v4)
  {
    if (grl::codec::ResourcePack::decodeHeader(a1, v45, (uint64_t)v48, &v46))
      goto LABEL_8;
LABEL_52:
    v32 = 184;
    v33 = "decodeHeader(_packStream, headerName, chapterDataPositions)";
    v34 = "Failed to decode Pack Header";
    goto LABEL_53;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = grl::codec::ResourcePack::decodeHeader(a1, v45, (uint64_t)v48, &v46);
  v8 = v7;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v8)
      goto LABEL_8;
    goto LABEL_52;
  }
  if (!v7)
    goto LABEL_52;
LABEL_8:
  if (*(_BYTE *)v48[0] != 73
    || *((_BYTE *)v48[0] + 1) != 67
    || *((_BYTE *)v48[0] + 2) != 79
    || *((_BYTE *)v48[0] + 3) != 78
    || *((_BYTE *)v48[0] + 4) != 68
    || *((_BYTE *)v48[0] + 5) != 65
    || *((_BYTE *)v48[0] + 6) != 84
    || *((_BYTE *)v48[0] + 7) != 65
    || *((_BYTE *)v48[0] + 8) != 80
    || *((_BYTE *)v48[0] + 9) != 65
    || *((_BYTE *)v48[0] + 10) != 67
    || *((_BYTE *)v48[0] + 11) != 75)
  {
    v32 = 186;
    v33 = "headerName[0] == 'I' && headerName[1] == 'C' && headerName[2] == 'O' && headerName[3] == 'N' && headerName[4] "
          "== 'D' && headerName[5] == 'A' && headerName[6] == 'T' && headerName[7] == 'A' && headerName[8] == 'P' && head"
          "erName[9] == 'A' && headerName[10] == 'C' && headerName[11] == 'K'";
    v34 = "Magic code is wrong";
LABEL_53:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v34, v33, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconDataPack.cpp", v32);
    goto LABEL_54;
  }
  v44 = 0;
  v10 = v46;
  if (v46 == (uint64_t *)v47)
  {
LABEL_49:
    v31 = 1;
    goto LABEL_55;
  }
  while (1)
  {
    v11 = *((unsigned __int16 *)v10 + 16);
    if (v11 == 14)
    {
      v40 = 0;
      v41 = 0;
      v16 = *(_QWORD *)(a1 + 192);
      v39[0] = *(_QWORD *)(a1 + 184);
      v39[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = grl::codec::ResourcePack::decodeChapterSize(a1, v39, (uint64_t)(v10 + 5), &v41, &v40);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v39);
      if (!v19)
      {
        v32 = 206;
        v33 = "decodeChapterSize(_packStream, chapterPair.second, rawSize, compressedSize)";
        v34 = "Could not decode Chapter Data";
        goto LABEL_53;
      }
      if (v40)
      {
        v32 = 207;
        v33 = "compressedSize == 0";
        v34 = "Atlases can't be compressed. This allows each one to individualy be read from disk.";
        goto LABEL_53;
      }
      std::istream::tellg();
      v20 = v56;
      *(_OWORD *)(a1 + 296) = v55;
      *(_OWORD *)(a1 + 312) = v20;
      *(_QWORD *)(a1 + 328) = v57;
      v21 = v52;
      *(_OWORD *)(a1 + 232) = v51;
      *(_OWORD *)(a1 + 248) = v21;
      v22 = v54;
      *(_OWORD *)(a1 + 264) = v53;
      *(_OWORD *)(a1 + 280) = v22;
      v23 = v50;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)__p;
      *(_OWORD *)(a1 + 216) = v23;
      goto LABEL_43;
    }
    if (v11 == 13)
      break;
    if (v11 == 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v50 = 0;
      v12 = *(_QWORD *)(a1 + 192);
      v43[0] = *(_QWORD *)(a1 + 184);
      v43[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = grl::codec::ResourcePack::decodeChapterData(a1, v43, (uint64_t)(v10 + 5), (uint64_t)__p);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v43);
      if ((v15 & 1) == 0)
      {
        v36 = 194;
LABEL_63:
        v37 = "decodeChapterData(_packStream, chapterPair.second, chapterData)";
        v38 = "Could not decode Chapter Data";
        goto LABEL_66;
      }
      if (!grl::codec::ResourcePack::decodePackInfo(a1, (uint64_t)__p, &v44))
      {
        v36 = 195;
        v37 = "decodePackInfo(chapterData, context)";
        v38 = "Could not decode Pack Info Chapter";
        goto LABEL_66;
      }
LABEL_41:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
LABEL_43:
    v28 = (uint64_t *)v10[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (uint64_t *)v10[2];
        v30 = *v29 == (_QWORD)v10;
        v10 = v29;
      }
      while (!v30);
    }
    v10 = v29;
    if (v29 == (uint64_t *)v47)
      goto LABEL_49;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v50 = 0;
  v24 = *(_QWORD *)(a1 + 192);
  v42[0] = *(_QWORD *)(a1 + 184);
  v42[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = grl::codec::ResourcePack::decodeChapterData(a1, v42, (uint64_t)(v10 + 5), (uint64_t)__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v42);
  if ((v27 & 1) == 0)
  {
    v36 = 199;
    goto LABEL_63;
  }
  if ((grl::codec::IconDataPack::decodeImageInfo(a1, (int *)__p[0], (uint64_t)__p[1]) & 1) != 0)
    goto LABEL_41;
  v36 = 200;
  v37 = "decodeImageInfo(chapterData, context)";
  v38 = "Could not decode Image Info Chapter";
LABEL_66:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v38, v37, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconDataPack.cpp", v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_54:
  v31 = 0;
LABEL_55:
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v46, v47[0]);
  if (v48[0])
    operator delete(v48[0]);
  return v31;
}

uint64_t grl::codec::IconConfigPack::decode(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  int v29;
  const char *v30;
  const char *v31;
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  _QWORD v35[2];
  uint64_t *v36;
  _QWORD *v37[3];
  void *__p;
  void *v39;
  uint64_t v40;
  void *v41[21];

  v41[20] = *(void **)MEMORY[0x1E0C80C00];
  memset(v41, 0, 24);
  __p = 0;
  v39 = 0;
  v40 = 0;
  v37[0] = 0;
  v37[1] = (_QWORD *)grl::Allocator::instance((grl::Allocator *)a1);
  v37[2] = 0;
  v4 = (std::__shared_weak_count *)a2[1];
  v35[0] = *a2;
  v35[1] = v4;
  v36 = (uint64_t *)v37;
  if (!v4)
  {
    if (grl::codec::ResourcePack::decodeHeader(a1, v35, (uint64_t)v41, &v36))
      goto LABEL_8;
LABEL_55:
    v29 = 225;
    v30 = "decodeHeader(packStream, headerName, chapterDataPositions)";
    v31 = "Failed to decode Pack Header";
    goto LABEL_56;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = grl::codec::ResourcePack::decodeHeader(a1, v35, (uint64_t)v41, &v36);
  v8 = v7;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v8)
      goto LABEL_8;
    goto LABEL_55;
  }
  if (!v7)
    goto LABEL_55;
LABEL_8:
  if (*(_BYTE *)v41[0] != 73
    || *((_BYTE *)v41[0] + 1) != 67
    || *((_BYTE *)v41[0] + 2) != 79
    || *((_BYTE *)v41[0] + 3) != 78
    || *((_BYTE *)v41[0] + 4) != 67
    || *((_BYTE *)v41[0] + 5) != 79
    || *((_BYTE *)v41[0] + 6) != 78
    || *((_BYTE *)v41[0] + 7) != 70
    || *((_BYTE *)v41[0] + 8) != 73
    || *((_BYTE *)v41[0] + 9) != 71
    || *((_BYTE *)v41[0] + 10) != 80
    || *((_BYTE *)v41[0] + 11) != 65
    || *((_BYTE *)v41[0] + 12) != 67
    || *((_BYTE *)v41[0] + 13) != 75)
  {
    v29 = 227;
    v30 = "headerName[0] == 'I' && headerName[1] == 'C' && headerName[2] == 'O' && headerName[3] == 'N' && headerName[4] "
          "== 'C' && headerName[5] == 'O' && headerName[6] == 'N' && headerName[7] == 'F' && headerName[8] == 'I' && head"
          "erName[9] == 'G' && headerName[10] == 'P' && headerName[11] == 'A' && headerName[12] == 'C' && headerName[13] == 'K'";
    v31 = "Magic code is wrong";
    goto LABEL_56;
  }
  v10 = v36;
  if (v36 == (uint64_t *)v37)
  {
    v27 = 1;
    goto LABEL_57;
  }
  while (1)
  {
    v11 = *((unsigned __int16 *)v10 + 16);
    if (v11 > 0xE)
      break;
    if (v11 == 1)
    {
      v39 = __p;
      v16 = a2[1];
      v34[0] = *a2;
      v34[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = grl::codec::ResourcePack::decodeChapterData(a1, v34, (uint64_t)(v10 + 5), (uint64_t)&__p);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v34);
      if ((v19 & 1) == 0)
      {
        v29 = 233;
        goto LABEL_68;
      }
      if (!grl::codec::ResourcePack::decodePackInfo(a1, (uint64_t)&__p, (_WORD *)(a1 + 192)))
      {
        v29 = 234;
        v30 = "decodePackInfo(chapterData, _packDataContext)";
        v31 = "Could not decode Pack Info Chapter";
        goto LABEL_56;
      }
    }
    else
    {
      if (v11 != 11)
        goto LABEL_46;
      v39 = __p;
      v12 = a2[1];
      v33[0] = *a2;
      v33[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = grl::codec::ResourcePack::decodeChapterData(a1, v33, (uint64_t)(v10 + 5), (uint64_t)&__p);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v33);
      if ((v15 & 1) == 0)
      {
        v29 = 238;
LABEL_68:
        v30 = "decodeChapterData(packStream, chapterPair.second, chapterData)";
        v31 = "Could not decode Chapter Data";
        goto LABEL_56;
      }
      if ((grl::codec::IconConfigPack::decodePropertyInfo((uint64_t)&__p, a1 + 192) & 1) == 0)
      {
        v29 = 239;
        v30 = "decodePropertyInfo(chapterData, _packDataContext)";
        v31 = "Could not decode Property Info Chapter";
        goto LABEL_56;
      }
    }
LABEL_46:
    v24 = (uint64_t *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (uint64_t *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (uint64_t *)v10[2];
        v26 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v26);
    }
    v27 = 1;
    v10 = v25;
    if (v25 == (uint64_t *)v37)
      goto LABEL_57;
  }
  if (v11 != 15)
  {
    if (v11 == 16)
    {
      v39 = __p;
      std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>((_QWORD *)(a1 + 168), *a2, a2[1]);
      std::istream::tellg();
      *(void **)(a1 + 184) = v41[19];
    }
    goto LABEL_46;
  }
  v39 = __p;
  v20 = a2[1];
  v32[0] = *a2;
  v32[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = grl::codec::ResourcePack::decodeChapterData(a1, v32, (uint64_t)(v10 + 5), (uint64_t)&__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v32);
  if ((v23 & 1) == 0)
  {
    v29 = 243;
    goto LABEL_68;
  }
  if (grl::codec::IconConfigPack::decodeIconDataLocations(a1, (unsigned int *)__p, (uint64_t)v39, (unsigned __int16 *)(a1 + 192)))
  {
    goto LABEL_46;
  }
  v29 = 244;
  v30 = "decodeIconDataLocations(chapterData, _packDataContext)";
  v31 = "Could not decode Icon Info Chapter";
LABEL_56:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v31, v30, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", v29);
  v27 = 0;
LABEL_57:
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v36, v37[0]);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  if (v41[0])
    operator delete(v41[0]);
  return v27;
}

uint64_t grl::codec::ResourcePack::decodeChapterData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;
  uint64_t result;
  size_t v16;
  char *v17;
  char *v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23[2];
  size_t v24;
  size_t v25;

  v4 = *a2;
  if (!*a2)
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Pack Stream Is Invalid", "packStream", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", 294);
    return 0;
  }
  v24 = 0;
  v25 = 0;
  v6 = (std::__shared_weak_count *)a2[1];
  v23[0] = v4;
  v23[1] = (uint64_t)v6;
  if (!v6)
  {
    if (grl::codec::ResourcePack::decodeChapterSize(a1, v23, a3, &v25, &v24))
      goto LABEL_12;
    return 0;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = grl::codec::ResourcePack::decodeChapterSize(a1, v23, a3, &v25, &v24);
  v10 = v9;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v10)
      goto LABEL_12;
    return 0;
  }
  if (!v9)
    return 0;
LABEL_12:
  v12 = v24;
  if (v24)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      v13 = (char *)operator new(v24);
      v22[0] = v13;
      v22[2] = &v13[v12];
      bzero(v13, v12);
      v22[1] = &v13[v12];
      std::istream::read();
      grl::codec::ResourcePack::decompressData((uint64_t)v22, v25, (unint64_t *)&v20);
      v14 = *(void **)a4;
      if (*(_QWORD *)a4)
      {
        *(_QWORD *)(a4 + 8) = v14;
        operator delete(v14);
      }
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v21;
      operator delete(v13);
      return 1;
    }
LABEL_26:
    abort();
  }
  v16 = v25;
  if (v25)
  {
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v17 = (char *)operator new(v25);
    v18 = &v17[v16];
    bzero(v17, v16);
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  std::istream::read();
  v19 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v19;
    operator delete(v19);
  }
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v18;
  result = 1;
  *(_QWORD *)(a4 + 16) = v18;
  return result;
}

BOOL grl::codec::ResourcePack::decodeChapterSize(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  v5 = *a2;
  if (*a2)
  {
    std::istream::seekg();
    std::istream::read();
    *a4 = v9;
    *a5 = v10;
  }
  else
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Pack Stream Is Invalid", "packStream", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", 258);
  }
  return v5 != 0;
}

void grl::codec::ResourcePack::decompressData(uint64_t a1@<X0>, size_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  Bytef *v5;
  unsigned int v7;
  unint64_t v8;
  uLong v9;
  uLong v10;
  z_stream v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(Bytef **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
  {
    v11.next_in = *(Bytef **)a1;
    v11.avail_in = v4 - (_DWORD)v5;
    v11.zalloc = 0;
    v11.zfree = 0;
    v11.total_out = 0;
    if (!inflateInit_(&v11, "1.2.12", 112))
    {
      if (a2)
        std::vector<unsigned char>::__append(a3, a2);
      v7 = 0;
      while (!v7)
      {
        v8 = *a3;
        v11.next_out = (Bytef *)(*a3 + v11.total_out);
        v11.avail_out = *((_DWORD *)a3 + 2) - v8 - LODWORD(v11.total_out);
        v7 = inflate(&v11, 2);
        if (v7 >= 2)
          goto LABEL_10;
      }
      if (inflateEnd(&v11))
      {
LABEL_10:
        v9 = *a3;
        if (a3[1] == *a3)
          return;
        goto LABEL_11;
      }
      v10 = a3[1] - *a3;
      if (v11.total_out <= v10)
      {
        if (v11.total_out < v10)
        {
          v9 = *a3 + v11.total_out;
LABEL_11:
          a3[1] = v9;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(a3, v11.total_out - v10);
      }
    }
  }
}

BOOL grl::codec::ResourcePack::decodeHeader(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  const char *v21;
  const char *v22;
  __int128 v24;
  unsigned __int16 v25;
  size_t __sz;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    std::istream::read();
    __sz = 0;
    v27 = 0uLL;
    std::vector<unsigned char>::__append(&__sz, 0x40uLL);
    v6 = (_OWORD *)__sz;
    v7 = v31;
    v8 = v29;
    v9 = v28;
    *(_OWORD *)(__sz + 32) = v30;
    v6[3] = v7;
    *v6 = v9;
    v6[1] = v8;
    v10 = v27;
    v11 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v11;
      v24 = v10;
      operator delete(v11);
      v10 = v24;
    }
    *(_QWORD *)a3 = v6;
    *(_OWORD *)(a3 + 8) = v10;
    v12 = v32;
    if (v32)
    {
      v13 = 10 * v32;
      v14 = (char *)operator new(v13);
      bzero(v14, 10 * v12);
      std::istream::read();
      v15 = 0;
      v16 = 0;
      v17 = 1;
      while (1)
      {
        if (v16 + 2 > v13)
        {
          v20 = 245;
          v21 = "chapterID.has_value()";
          v22 = "Chapter ID could not be read";
          goto LABEL_14;
        }
        v25 = *(_WORD *)&v14[v16];
        v18 = v16 + 10;
        if (v16 + 10 > v13)
          break;
        v19 = *(uint64_t **)&v14[v16 + 2];
        __sz = (size_t)&v25;
        std::__tree<std::__value_type<unsigned short,unsigned long long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long long>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,unsigned long long>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a4, &v25, (uint64_t)&std::piecewise_construct, (_WORD **)&__sz)[5] = v19;
        v15 = v17++ >= v12;
        v16 = v18;
        if ((_DWORD)v13 == (_DWORD)v18)
        {
          v15 = 1;
          goto LABEL_15;
        }
      }
      v20 = 248;
      v21 = "byteStart.has_value()";
      v22 = "Byte Start could not be read";
LABEL_14:
      printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v22, v21, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", v20);
LABEL_15:
      operator delete(v14);
    }
    else
    {
      std::istream::read();
      return 1;
    }
  }
  else
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Pack Stream Is Invalid", "packStream", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", 209);
    return 0;
  }
  return v15;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long long>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,unsigned long long>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 48, 8);
    *(_WORD *)(v11 + 32) = **a4;
    *(_QWORD *)(v11 + 40) = 0;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

BOOL grl::codec::ResourcePack::decodePackInfo(uint64_t a1, uint64_t a2, _WORD *a3)
{
  _WORD *v3;
  unint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  size_t v9;
  _BOOL8 v10;
  std::string __p;

  v3 = *(_WORD **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 <= 1)
  {
    v5 = 351;
    v6 = "version.has_value()";
    v7 = "Pack Version could not be read";
LABEL_8:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v7, v6, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", v5);
    return 0;
  }
  *a3 = *v3;
  if (v4 == 2)
  {
LABEL_7:
    v5 = 355;
    v6 = "region.has_value()";
    v7 = "Region could not be read";
    goto LABEL_8;
  }
  v9 = 0;
  while (*((_BYTE *)v3 + v9 + 2))
  {
    if (v4 - 2 == ++v9)
      goto LABEL_7;
  }
  std::string::basic_string[abi:nn180100](&__p, v3 + 1, v9);
  std::string::operator=((std::string *)(a1 + 8), &__p);
  v10 = v9 + 7 <= v4;
  if (v9 + 7 > v4)
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Content Scale could not be read", "contentScale.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", 359);
  else
    *(_DWORD *)(a1 + 32) = *(_DWORD *)((char *)v3 + v9 + 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

BOOL grl::codec::IconConfigPack::decodeIconDataLocations(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  unint64_t v4;
  BOOL v5;
  unsigned int *v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  int v20;
  const char *v21;
  const char *v22;
  char *v25;
  uint64_t **v26;
  int v27;
  __int16 v28;
  uint64_t v29;

  v4 = a3 - (_QWORD)a2;
  if ((unint64_t)(a3 - (_QWORD)a2) < 4)
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Number Of Data Locations could not be read", "numberOfDataLocations.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", 271);
    return 0;
  }
  v7 = a2 - 1;
  v8 = *a2;
  if (!*a2)
    return 1;
  v5 = 0;
  v10 = 0;
  v25 = (char *)a2 - 2;
  v26 = (uint64_t **)(a1 + 40);
  v11 = 4;
  while (1)
  {
    v12 = v11 + 1;
    if (v11 + 1 > v4)
    {
      v20 = 275;
      v21 = "sizeGroupRaw.has_value()";
      v22 = "Size Group could not be read";
      goto LABEL_23;
    }
    v13 = *((unsigned __int8 *)a2 + v11);
    if (*a4 >= 3u)
      break;
    v14 = 0;
LABEL_10:
    if (v12 + 2 > v4)
    {
      v20 = 285;
      v21 = "variant.has_value()";
      goto LABEL_22;
    }
    v11 = v12 + 6;
    if (v12 + 6 > v4)
    {
      v20 = 288;
      v21 = "bytePosition.has_value()";
      v22 = "Byte Position could not be read";
      goto LABEL_23;
    }
    if (v13 <= 9)
    {
      v15 = *(_WORD *)((char *)a2 + v12);
      v16 = *(unsigned int *)((char *)v7 + v11);
      LOBYTE(v27) = v13;
      HIWORD(v27) = v14;
      v28 = v15;
      v17 = std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,grl::Allocator>>::__find_equal<grl::codec::IconConfigPack::IconLocationIndex>((uint64_t)v26, &v29, (unsigned __int8 *)&v27);
      v18 = *v17;
      if (!*v17)
      {
        v19 = (uint64_t **)v17;
        v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 40, 8);
        *(_DWORD *)(v18 + 28) = v27;
        *(_WORD *)(v18 + 32) = v28;
        *(_DWORD *)(v18 + 36) = 0;
        std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(v26, v29, v19, (uint64_t *)v18);
      }
      *(_DWORD *)(v18 + 36) = v16;
    }
    v5 = ++v10 >= v8;
    if (v8 == v10)
      return 1;
  }
  v12 = v11 + 3;
  if (v11 + 3 <= v4)
  {
    v14 = *(_WORD *)&v25[v12];
    goto LABEL_10;
  }
  v20 = 281;
  v21 = "dataVariant.has_value()";
LABEL_22:
  v22 = "Variant could not be read";
LABEL_23:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v22, v21, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", v20);
  return v5;
}

uint64_t *std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,grl::Allocator>>::__find_equal<grl::codec::IconConfigPack::IconLocationIndex>(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((unsigned __int16 *)a3 + 2);
    v8 = *((unsigned __int16 *)a3 + 1);
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = *((unsigned __int8 *)v4 + 28);
        if (v6 == v10)
          break;
        if (v6 >= v10)
        {
          if (v10 >= v6)
            goto LABEL_18;
          goto LABEL_15;
        }
LABEL_12:
        v4 = (uint64_t *)*v9;
        result = v9;
        if (!*v9)
          goto LABEL_18;
      }
      v11 = *((unsigned __int16 *)v9 + 16);
      if (v7 != v11)
      {
        if (v7 >= v11)
        {
          if (v11 >= v7)
            goto LABEL_18;
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      v12 = *((unsigned __int16 *)v9 + 15);
      if (v8 < v12)
        goto LABEL_12;
      if (v12 >= v8)
        goto LABEL_18;
LABEL_15:
      result = v9 + 1;
      v4 = (uint64_t *)v9[1];
      if (!v4)
        goto LABEL_18;
    }
  }
  v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

uint64_t grl::codec::IconConfigPack::decodePropertyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = grl::PropertySet::decodePropertyContext(a1, (uint64_t **)(a2 + 8));
  if ((v2 & 1) == 0)
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Failed to decode property context", "PropertySet::decodePropertyContext(byteData, context.propertyContext)", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", 261);
  return v2;
}

uint64_t grl::codec::IconDataPack::decodeImageInfo(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  char v7;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int16 v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  const char *v42;
  const char *v43;
  uint64_t *v44;
  int v45;
  char *v46;
  unsigned int v47;

  v3 = a3 - (_QWORD)a2;
  if ((unint64_t)(a3 - (_QWORD)a2) < 4)
  {
    v4 = 221;
    v5 = "numImages.has_value()";
    v6 = "Number of Images could not be read";
    goto LABEL_3;
  }
  v46 = (char *)a2 - 2;
  v45 = *a2;
  if (*a2)
  {
    v11 = 0;
    v44 = (uint64_t *)(a1 + 48);
    v12 = 4;
    while (1)
    {
      if (v12 + 4 > v3)
      {
        v4 = 225;
        v5 = "imageID.has_value()";
        v6 = "Image ID could not be read";
        goto LABEL_3;
      }
      v13 = v12;
      v14 = v12 + 6;
      if (v12 + 6 > v3)
      {
        v4 = 228;
        v5 = "atlasIndex.has_value()";
        v6 = "Atlas Index could not be read";
        goto LABEL_3;
      }
      if (v12 + 10 > v3)
        break;
      if (v12 + 14 > v3)
      {
        v4 = 234;
        v5 = "atlasOffsetY.has_value()";
        goto LABEL_50;
      }
      if (v12 + 18 > v3)
      {
        v4 = 237;
        v5 = "imageSizeX.has_value()";
        goto LABEL_53;
      }
      v12 += 22;
      if (v13 + 22 > v3)
      {
        v4 = 240;
        v5 = "imageSizeY.has_value()";
LABEL_53:
        v6 = "Image Size could not be read";
LABEL_3:
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v6, v5, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconDataPack.cpp", v4);
        v7 = 0;
        return v7 & 1;
      }
      v15 = *(int *)((char *)a2 + v13);
      v16 = *(_WORD *)&v46[v14];
      v17 = v44;
      v18 = *(int *)((char *)a2 + v14);
      v19 = v44;
      v20 = *(int *)((char *)a2 + v13 + 10);
      v21 = *(_QWORD *)((char *)a2 + v13 + 14);
      v22 = *v44;
      if (*v44)
      {
        while (1)
        {
          while (1)
          {
            v19 = (uint64_t *)v22;
            v23 = *(_DWORD *)(v22 + 28);
            if (v23 <= v15)
              break;
            v22 = *v19;
            v17 = v19;
            if (!*v19)
              goto LABEL_20;
          }
          if (v23 >= v15)
            break;
          v22 = v19[1];
          if (!v22)
          {
            v17 = v19 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 56, 8);
        *(_DWORD *)(v24 + 28) = v15;
        *(_WORD *)(v24 + 32) = v16;
        *(_DWORD *)(v24 + 36) = v18;
        *(_DWORD *)(v24 + 40) = v20;
        *(_QWORD *)(v24 + 44) = v21;
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = v19;
        *v17 = v24;
        v25 = **(_QWORD **)(a1 + 40);
        if (v25)
        {
          *(_QWORD *)(a1 + 40) = v25;
          v26 = (uint64_t *)*v17;
        }
        else
        {
          v26 = (uint64_t *)v24;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v26);
        ++*(_QWORD *)(a1 + 64);
      }
      if (++v11 == v45)
      {
        v27 = v13 + 24;
        goto LABEL_27;
      }
    }
    v4 = 231;
    v5 = "atlasOffsetX.has_value()";
LABEL_50:
    v6 = "Atlas Offset could not be read";
    goto LABEL_3;
  }
  v27 = 6;
LABEL_27:
  if (v27 > v3)
  {
    v4 = 251;
    v5 = "numIndices.has_value()";
    v6 = "Number of Indices could not be read";
    goto LABEL_3;
  }
  v47 = *(unsigned __int16 *)((char *)a2 + v27 - 2);
  if (*(_WORD *)((char *)a2 + v27 - 2))
  {
    v28 = 0;
    v29 = 0;
    v30 = (uint64_t *)(a1 + 160);
    while (1)
    {
      if (v27 + 2 > v3)
      {
        v41 = 255;
        v42 = "atlasIndex.has_value()";
        v43 = "Atlas Index could not be read";
        goto LABEL_58;
      }
      if (v27 + 6 > v3)
      {
        v41 = 258;
        v42 = "byteStart.has_value()";
        v43 = "Byte Start could not be read";
        goto LABEL_58;
      }
      v31 = v27 + 10;
      if (v27 + 10 > v3)
        break;
      v32 = *(unsigned __int16 *)((char *)a2 + v27);
      v33 = *(_QWORD *)((char *)a2 + v27 + 2);
      v34 = (uint64_t **)(a1 + 160);
      v35 = a1 + 160;
      v36 = *v30;
      if (*v30)
      {
        while (1)
        {
          while (1)
          {
            v35 = v36;
            v37 = *(unsigned __int16 *)(v36 + 28);
            if (v37 <= v32)
              break;
            v36 = *(_QWORD *)v35;
            v34 = (uint64_t **)v35;
            if (!*(_QWORD *)v35)
              goto LABEL_41;
          }
          if (v37 >= v32)
            break;
          v36 = *(_QWORD *)(v35 + 8);
          if (!v36)
          {
            v34 = (uint64_t **)(v35 + 8);
            goto LABEL_41;
          }
        }
      }
      else
      {
LABEL_41:
        v38 = v35;
        v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), 40, 8);
        *(_WORD *)(v35 + 28) = v32;
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)v35 = 0;
        *(_QWORD *)(v35 + 8) = 0;
        *(_QWORD *)(v35 + 16) = v38;
        *v34 = (uint64_t *)v35;
        v39 = **(_QWORD **)(a1 + 152);
        v40 = (uint64_t *)v35;
        if (v39)
        {
          *(_QWORD *)(a1 + 152) = v39;
          v40 = *v34;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v40);
        ++*(_QWORD *)(a1 + 176);
      }
      *(_QWORD *)(v35 + 32) = v33;
      ++v29;
      v7 = 1;
      v27 = v31;
      v28 = v29 >= v47;
      if (v29 == v47)
        return v7 & 1;
    }
    v41 = 261;
    v42 = "byteLength.has_value()";
    v43 = "Byte Length could not be read";
LABEL_58:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v43, v42, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconDataPack.cpp", v41);
    v7 = v28;
  }
  else
  {
    v7 = 1;
  }
  return v7 & 1;
}

uint64_t grl::PropertySet::decodePropertyContext(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  char v9;
  int v11;
  const char *v12;
  const char *v13;
  unsigned int v14;
  unsigned int *v15;

  v3 = *(_BYTE **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = v2 - *(_QWORD *)a1;
  if (v2 == *(_QWORD *)a1)
  {
    v11 = 202;
    v12 = "numPropertyTypes.has_value()";
    v13 = "Property Types Count could not be read";
  }
  else
  {
    v5 = *v3;
    if (!*v3)
      return 1;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (v7 + 1 >= v4)
      {
        v11 = 206;
        v12 = "type.has_value()";
        v13 = "Property Type could not be read";
        goto LABEL_11;
      }
      if (v7 + 3 > v4)
        break;
      v9 = v3[v7 + 2];
      v14 = v3[v7 + 1];
      v15 = &v14;
      *((_BYTE *)std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,unsigned char>,grl::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a2, &v14, (uint64_t)&std::piecewise_construct, &v15)+ 32) = v9;
      ++v8;
      v7 += 2;
      if (v8 >= v5)
        return 1;
    }
    v11 = 209;
    v12 = "bytes.has_value()";
    v13 = "Bytes could not be read";
  }
LABEL_11:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v13, v12, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PropertySet.cpp", v11);
  return 0;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,unsigned char>,grl::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_DWORD *)(v11 + 28) = **a4;
    *(_BYTE *)(v11 + 32) = 0;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t grl::codec::IconMapPack::decodeFallbackMapping(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v3;
  const char *v4;
  unint64_t v5;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t *v17;
  uint64_t i;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t *v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  char v30;
  BOOL v32;
  unsigned int v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  const char *v48;
  const char *v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;

  if ((unint64_t)(a3 - (_QWORD)a2) < 4)
  {
    v3 = 506;
    v4 = "keyFallbackCount.has_value()";
    goto LABEL_52;
  }
  v5 = (unint64_t)a2;
  v55 = a3 - (_QWORD)a2;
  v7 = *a2;
  v54 = a2 - 1;
  v8 = (_QWORD *)(a1 + 392);
  std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(a1 + 392, vcvtps_u32_f32((float)*a2 / *(float *)(a1 + 440)));
  v53 = v5;
  v51 = v7;
  if (v7)
  {
    v9 = 0;
    v50 = (uint64_t *)(a1 + 416);
    v10 = 4;
    v11 = v55;
    while (1)
    {
      if (v10 + 4 > v11)
      {
        v3 = 511;
        v4 = "key.has_value()";
        v28 = "Key could not be read";
        goto LABEL_53;
      }
      v12 = v10;
      v10 += 8;
      if (v10 > v11)
      {
        v3 = 513;
        v4 = "value.has_value()";
        v28 = "Value could not be read";
        goto LABEL_53;
      }
      v13 = *(unsigned int *)(v5 + v12);
      v14 = v54[v10 / 4];
      v15 = *(_QWORD *)(a1 + 400);
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v5 = *(unsigned int *)(v5 + v12);
          if (v15 <= v13)
            v5 = v13 % v15;
        }
        else
        {
          v5 = ((_DWORD)v15 - 1) & v13;
        }
        v17 = *(uint64_t **)(*v8 + 8 * v5);
        if (v17)
        {
          for (i = *v17; i; i = *(_QWORD *)i)
          {
            v19 = *(_QWORD *)(i + 8);
            if (v19 == v13)
            {
              if (*(_DWORD *)(i + 16) == (_DWORD)v13)
              {
                v5 = v53;
                goto LABEL_45;
              }
            }
            else
            {
              if (v16.u32[0] > 1uLL)
              {
                if (v19 >= v15)
                  v19 %= v15;
              }
              else
              {
                v19 &= v15 - 1;
              }
              if (v19 != v5)
                break;
            }
          }
        }
      }
      i = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), 24, 8);
      *(_QWORD *)i = 0;
      *(_QWORD *)(i + 8) = v13;
      *(_DWORD *)(i + 16) = v13;
      *(_DWORD *)(i + 20) = 0;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 432) + 1);
      v21 = *(float *)(a1 + 440);
      if (!v15 || (float)(v21 * (float)v15) < v20)
      {
        v22 = (v15 & (v15 - 1)) != 0;
        if (v15 < 3)
          v22 = 1;
        v23 = v22 | (2 * v15);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>((unint64_t)v8, v25);
        v15 = *(_QWORD *)(a1 + 400);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v15 <= v13)
            v5 = v13 % v15;
          else
            v5 = v13;
        }
        else
        {
          v5 = ((_DWORD)v15 - 1) & v13;
        }
      }
      v26 = *(uint64_t **)(*v8 + 8 * v5);
      v11 = v55;
      if (v26)
      {
        *(_QWORD *)i = *v26;
        v5 = v53;
      }
      else
      {
        *(_QWORD *)i = *v50;
        *v50 = i;
        *(_QWORD *)(*v8 + 8 * v5) = v50;
        v5 = v53;
        if (!*(_QWORD *)i)
          goto LABEL_44;
        v27 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v27 >= v15)
            v27 %= v15;
        }
        else
        {
          v27 &= v15 - 1;
        }
        v26 = (uint64_t *)(*v8 + 8 * v27);
      }
      *v26 = i;
LABEL_44:
      ++*(_QWORD *)(a1 + 432);
LABEL_45:
      *(_DWORD *)(i + 20) = v14;
      if (++v9 == v51)
      {
        v29 = v12 + 12;
        goto LABEL_50;
      }
    }
  }
  v29 = 8;
  v11 = v55;
LABEL_50:
  if (v29 <= v11)
  {
    v52 = *(_DWORD *)(v5 + v29 - 4);
    if (!v52)
    {
      v30 = 1;
      return v30 & 1;
    }
    v32 = 0;
    v33 = 0;
    v34 = (uint64_t *)(a1 + 456);
    while (v29 + 4 <= v11)
    {
      if (v29 + 8 > v11)
      {
        v47 = 524;
        v48 = "max.has_value()";
        v49 = "Max could not be read";
        goto LABEL_78;
      }
      v35 = v29 + 12;
      if (v29 + 12 > v11)
      {
        v47 = 526;
        v48 = "value.has_value()";
        v49 = "Value could not be read";
        goto LABEL_78;
      }
      v36 = *(unsigned int *)(v5 + v29);
      v37 = *(unsigned int *)((char *)v54 + v29 + 8);
      v29 += 12;
      v38 = *(unsigned int *)((char *)v54 + v35);
      v39 = *v34;
      v40 = (uint64_t **)(a1 + 456);
      v41 = a1 + 456;
      if (*v34)
      {
        while (1)
        {
          while (1)
          {
            v41 = v39;
            v42 = *(_DWORD *)(v39 + 28);
            if (v42 <= v36)
              break;
LABEL_64:
            v39 = *(_QWORD *)v41;
            v40 = (uint64_t **)v41;
            if (!*(_QWORD *)v41)
              goto LABEL_69;
          }
          if (v42 >= v36)
          {
            v43 = *(_DWORD *)(v41 + 32);
            if (v43 > v37)
              goto LABEL_64;
            if (v43 >= v37)
              goto LABEL_72;
          }
          v39 = *(_QWORD *)(v41 + 8);
          if (!v39)
          {
            v40 = (uint64_t **)(v41 + 8);
            break;
          }
        }
      }
LABEL_69:
      v44 = v41;
      v41 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 464) + 16))(*(_QWORD *)(a1 + 464), 40, 8);
      *(_QWORD *)(v41 + 28) = v36 | (v37 << 32);
      *(_DWORD *)(v41 + 36) = 0;
      *(_QWORD *)v41 = 0;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = v44;
      *v40 = (uint64_t *)v41;
      v45 = **(_QWORD **)(a1 + 448);
      v46 = (uint64_t *)v41;
      if (v45)
      {
        *(_QWORD *)(a1 + 448) = v45;
        v46 = *v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 456), v46);
      ++*(_QWORD *)(a1 + 472);
      v11 = v55;
LABEL_72:
      *(_DWORD *)(v41 + 36) = v38;
      ++v33;
      v30 = 1;
      v32 = v33 >= v52;
      v5 = v53;
      if (v33 == v52)
        return v30 & 1;
    }
    v47 = 522;
    v48 = "min.has_value()";
    v49 = "Min could not be read";
LABEL_78:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v49, v48, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v47);
    v30 = v32;
    return v30 & 1;
  }
  v3 = 518;
  v4 = "dataFallbackCount.has_value()";
LABEL_52:
  v28 = "Count could not be read";
LABEL_53:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v28, v4, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v3);
  v30 = 0;
  return v30 & 1;
}

void md::DaVinciGroundRenderLayer::setupCommonGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;

  v12 = (_QWORD *)a1[4];
  *v12 = a4;
  v12[1] = 0;
  v13 = (_QWORD *)a1[16];
  if (a5)
  {
    v14 = (unint64_t *)(a5 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v13[1];
  *v13 = a4;
  v13[1] = a5;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (_QWORD *)a1[8];
  v20 = a2[27];
  v21 = a2[28];
  *v19 = v20;
  v19[1] = 0;
  v22 = (_QWORD *)a1[20];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)v22[1];
  *v22 = v20;
  v22[1] = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = a1[8];
  v29 = a2[56];
  v30 = a2[57];
  *(_QWORD *)(v28 + 160) = v29;
  *(_QWORD *)(v28 + 168) = 0;
  v31 = a1[20];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(v31 + 168);
  *(_QWORD *)(v31 + 160) = v29;
  *(_QWORD *)(v31 + 168) = v30;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = a1[8];
  v38 = a2[29];
  v39 = a2[30];
  *(_QWORD *)(v37 + 16) = v38;
  *(_QWORD *)(v37 + 24) = 0;
  v40 = a1[20];
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(v40 + 24);
  *(_QWORD *)(v40 + 16) = v38;
  *(_QWORD *)(v40 + 24) = v39;
  if (!v43)
    goto LABEL_32;
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (!*(_BYTE *)(a7 + 6))
      goto LABEL_48;
  }
  else
  {
LABEL_32:
    if (!*(_BYTE *)(a7 + 6))
      goto LABEL_48;
  }
  v46 = a1[8];
  v47 = a2[50];
  v48 = a2[51];
  *(_QWORD *)(v46 + 32) = v47;
  *(_QWORD *)(v46 + 40) = 0;
  v49 = a1[20];
  if (v48)
  {
    v50 = (unint64_t *)(v48 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(std::__shared_weak_count **)(v49 + 40);
  *(_QWORD *)(v49 + 32) = v47;
  *(_QWORD *)(v49 + 40) = v48;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = a3[12];
  if (v55)
  {
    v56 = *(_QWORD *)(v55 + 32);
    v57 = *(_QWORD *)(a3[1] + 96);
    if (v56 >= (*(_QWORD *)(a3[1] + 104) - v57) >> 3)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v57 + 8 * v56) + 16);
  }
  *(_QWORD *)(a1[12] + 8) = v55;
LABEL_48:
  v58 = a1[8];
  v59 = a3[40];
  v60 = a3[41];
  *(_QWORD *)(v58 + 208) = v59;
  *(_QWORD *)(v58 + 216) = 0;
  v61 = a1[20];
  if (v60)
  {
    v62 = (unint64_t *)(v60 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = *(std::__shared_weak_count **)(v61 + 216);
  *(_QWORD *)(v61 + 208) = v59;
  *(_QWORD *)(v61 + 216) = v60;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  *(_QWORD *)a1[12] = *(_QWORD *)(a7 + 280);
  v67 = a1[8];
  v68 = *a6;
  v69 = a6[1];
  *(_QWORD *)(v67 + 176) = *a6;
  *(_QWORD *)(v67 + 184) = 0;
  v70 = a1[20];
  if (v69)
  {
    v71 = (unint64_t *)(v69 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *(std::__shared_weak_count **)(v70 + 184);
  *(_QWORD *)(v70 + 176) = v68;
  *(_QWORD *)(v70 + 184) = v69;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void md::DaVinciGroundRenderLayer::setupStyleConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float64x2_t v39;
  float64_t v40;
  int v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  int v49;
  float64x2_t v50;
  __int128 v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float64x2_t v66;
  double v67;
  unint64_t v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;

  _S8 = 1.0 / *(float *)(a4 + 40);
  if (*(unsigned __int8 *)(a3 + 24) == 255)
  {
    if (*(_BYTE *)(a4 + 5) && *(_BYTE *)(a4 + 4))
    {
      v10 = *(double *)(a3 + 288);
      v11 = *(double *)(a3 + 296);
      v12 = *(double *)(a3 + 304);
      v13 = *(double *)(a3 + 312);
      v14 = v11 + v11;
      v15 = (v11 + v11) * v11;
      v16 = (v12 + v12) * v12;
      v17 = v10 + v10;
      v18 = (v10 + v10) * v11;
      v19 = (v12 + v12) * v13;
      v20 = v12 * (v10 + v10);
      v21 = 1.0 - (v10 + v10) * v10;
      v22 = v14 * v12;
      *(double *)&v51 = 1.0 - (v15 + v16);
      *((double *)&v51 + 1) = v19 + v18;
      v54 = v18 - v19;
      v55 = v21 - v16;
      v58 = v13 * v14 + v20;
      v59 = v22 - v13 * v17;
      v52 = v20 - v13 * v14;
      v56 = v13 * v17 + v22;
      v60 = v21 - v15;
      v53 = 0;
      v57 = 0;
      v61 = 0;
      v62 = 0;
      v64 = 0;
      v65 = 0x3FF0000000000000;
      v63 = 0;
      gm::Matrix<double,4,4>::inverted<int,void>(v66.f64, (double *)&v51);
      v23 = *(double *)(a4 + 80);
      v24 = *(double *)(a4 + 88);
      v25 = *(double *)(a4 + 96);
      v26 = *(double *)(a4 + 104);
      _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v66, v23), v69, v24), v71, v25), v73, v26);
      _D1 = v67 * v23 + v70 * v24 + v72 * v25 + v74 * v26;
    }
    else
    {
      _Q0 = *(float64x2_t *)(a4 + 80);
      _D1 = *(double *)(a4 + 96);
    }
  }
  else
  {
    _Q0 = *(float64x2_t *)(a4 + 112);
    _D1 = *(double *)(a4 + 128);
  }
  __asm { FCVT            H9, D1 }
  _D1 = _Q0.f64[1];
  __asm
  {
    FCVT            H1, D1
    FCVT            H0, D0
  }
  WORD1(_Q0.f64[0]) = LOWORD(_D1);
  v49 = LODWORD(_Q0.f64[0]);
  *(_QWORD *)&v51 = vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]).u64[0];
  __asm { FCVT            S0, H9 }
  *((_QWORD *)&v51 + 1) = __PAIR64__(LODWORD(_S8), _S0);
  v34 = (float *)(a1 + 368);
  v35 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>((_QWORD *)(a1 + 368), (float *)&v51);
  if (v35)
  {
    v36 = v35[4];
  }
  else
  {
    v37 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1704));
    v36 = v37;
    v66 = 0uLL;
    v38 = *(_QWORD *)(v37 + 8);
    v39.f64[0] = 0.0;
    *(_QWORD *)&v39.f64[1] = v37;
    if (v38)
      v40 = *(double *)(v37 + 72);
    else
      v40 = 0.0;
    v41 = v49;
    v50 = v39;
    v66 = v39;
    v67 = 0.0;
    v68 = v38;
    v69.f64[1] = v40;
    LOWORD(v69.f64[0]) = 1;
    __asm { FCVT            H0, S8 }
    **(_DWORD **)&v40 = v41;
    *(_WORD *)(*(_QWORD *)&v40 + 4) = _H9;
    *(_WORD *)(*(_QWORD *)&v40 + 6) = _H0;
    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(v34, (float *)&v51, &v51, v37);
    if (v38)
    {
      if (*(_QWORD *)&v50.f64[0] && *(_BYTE *)(*(_QWORD *)&v50.f64[1] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)&v50.f64[0] + 64))();
      v43 = *(_QWORD *)(*(_QWORD *)&v50.f64[1] + 64);
      if (v43 <= v38)
        v43 = v38;
      *(_QWORD *)(*(_QWORD *)&v50.f64[1] + 56) = 0;
      *(_QWORD *)(*(_QWORD *)&v50.f64[1] + 64) = v43;
    }
  }
  v44 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v44 + 80) = v36;
  *(_QWORD *)(v44 + 88) = 0;
  v45 = *(_QWORD *)(a2 + 160);
  v46 = *(std::__shared_weak_count **)(v45 + 88);
  *(_QWORD *)(v45 + 80) = 0;
  *(_QWORD *)(v45 + 88) = 0;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_19F188680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a27);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v18;
  uint64_t v20;

  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[3];
  v5 = *(unsigned int *)a2 - 0x61C8864680B583EBLL;
  if (*a2 == 0.0)
    v5 = 0x9E3779B97F4A7C15;
  v6 = LODWORD(v2) - 0x61C8864680B583EBLL;
  if (v2 == 0.0)
    v6 = 0x9E3779B97F4A7C15;
  v7 = LODWORD(v3) - 0x61C8864680B583EBLL;
  if (v3 == 0.0)
    v7 = 0x9E3779B97F4A7C15;
  v8 = LODWORD(v4) - 0x61C8864680B583EBLL;
  if (v4 == 0.0)
    v8 = 0x9E3779B97F4A7C15;
  v9 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v9)
    return 0;
  v10 = (v7 + ((((v5 >> 2) + (v5 << 6) + v6) ^ v5) << 6) + ((((v5 >> 2) + (v5 << 6) + v6) ^ v5) >> 2)) ^ ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
  v11 = (v8 + (v10 << 6) + (v10 >> 2)) ^ v10;
  v12 = (uint8x8_t)vcnt_s8(v9);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = v11;
    if (v11 >= *(_QWORD *)&v9)
      v13 = v11 % *(_QWORD *)&v9;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v9 - 1);
  }
  v14 = *(_QWORD **)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = (_QWORD *)*v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v9 - 1;
      while (1)
      {
        v20 = result[1];
        if (v20 == v11)
        {
          if (result[2] == *(_QWORD *)a2 && result[3] == *((_QWORD *)a2 + 1))
            return result;
        }
        else if ((v20 & v16) != v13)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v18 = result[1];
      if (v18 == v11)
      {
        if (result[2] == *(_QWORD *)a2 && result[3] == *((_QWORD *)a2 + 1))
          return result;
      }
      else
      {
        if (v18 >= *(_QWORD *)&v9)
          v18 %= *(_QWORD *)&v9;
        if (v18 != v13)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void gms::Material<ggl::Texture2D>::minNoColorCorrection(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::shininess@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 152);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 360))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 248);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 696))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 208);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 240);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 672))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 104);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::ssaoIntensity@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 288);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 840))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::specularity@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 144);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 336))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::shininess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 360))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 360))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 360))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 360))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 696))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 696))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 552))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 552))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 672))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 672))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 672))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 672))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 168))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 168))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 168))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 168))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::ssaoIntensity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 840))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 840))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 840))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 840))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::specularity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 336))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 336))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 336))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 336))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

void md::DaVinciGroundRenderLayer::setupStyleGroundOcclusionConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (*(_BYTE *)(a2[2] + 320))
  {
    v9 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1912));
    v10 = v9[1];
    _S3 = *(_DWORD *)(a5 + 68);
    _D0 = fmax(*(double *)(a3 + 32) * 0.5, 250.0)
        * (float)((float)(*(float *)(a5 + 64) * *(float *)(*(_QWORD *)(a4 + 8) + 624))
                * fmaxf((float)(*(float *)(a5 + 20) * 0.125) + -0.875, 0.0));
    __asm
    {
      FCVT            H0, D0
      FCVT            H1, S3
    }
    if (!*(_BYTE *)(a5 + 7))
      _S1 = 0.0;
    v20 = v9[8];
    v19 = (_WORD *)v9[9];
    *v19 = _H0;
    v19[1] = LOWORD(_S1);
    if (v20 > v10)
      v10 = v20;
    v9[7] = 0;
    v9[8] = v10;
    v21 = a2[8];
    *(_QWORD *)(v21 + 320) = v9;
    *(_QWORD *)(v21 + 328) = 0;
    v22 = a2[20];
    v23 = *(std::__shared_weak_count **)(v22 + 328);
    *(_QWORD *)(v22 + 320) = 0;
    *(_QWORD *)(v22 + 328) = 0;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

uint64_t md::MaterialRenderable::hash(md::MaterialRenderable *this)
{
  return *((_QWORD *)this + 30);
}

void md::DaVinciGroundRenderLayer::setupSSAOGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, char a5, float a6)
{
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if ((a5 & 1) != 0)
  {
    _S8 = a6;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "daVinciSSAODepthAwareUpsampleEnabled");

    if (v12)
    {
      v13 = a4[19];
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      v13 = a4[17];
      if (!v13)
      {
LABEL_17:
        *(_QWORD *)(a3[12] + 24) = v13;
        v23 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1936));
        v24 = v23[1];
        v25 = v23[9];
        v26 = *(_WORD *)(a2 + 216);
        *(_DWORD *)v25 = *(_DWORD *)(a2 + 212);
        *(_WORD *)(v25 + 4) = v26;
        __asm { FCVT            H0, S8 }
        *(_WORD *)(v25 + 8) = _H0;
        if (v23[8] > v24)
          v24 = v23[8];
        v23[7] = 0;
        v23[8] = v24;
        v32 = a3[8];
        *(_QWORD *)(v32 + 432) = v23;
        *(_QWORD *)(v32 + 440) = 0;
        v33 = a3[20];
        v34 = *(std::__shared_weak_count **)(v33 + 440);
        *(_QWORD *)(v33 + 432) = 0;
        *(_QWORD *)(v33 + 440) = 0;
        if (!v34)
          return;
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (v36)
          return;
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        v20 = v34;
LABEL_25:
        std::__shared_weak_count::__release_weak(v20);
        return;
      }
    }
    v21 = *(_QWORD *)(v13 + 32);
    v22 = *(_QWORD *)(a4[1] + 96);
    if (v21 >= (*(_QWORD *)(a4[1] + 104) - v22) >> 3)
      v13 = 0;
    else
      v13 = *(_QWORD *)(*(_QWORD *)(v22 + 8 * v21) + 16);
    goto LABEL_17;
  }
  v14 = *(uint64_t **)(a1 + 3128);
  v15 = *v14;
  v16 = (std::__shared_weak_count *)v14[1];
  if (!v16)
  {
    *(_QWORD *)(a3[12] + 24) = v15;
    return;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  *(_QWORD *)(a3[12] + 24) = v15;
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    v20 = v16;
    goto LABEL_25;
  }
}

void sub_19F189538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::DaVinciRenderStateCache::renderState(unsigned __int8 **a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  char v9;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  char v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  __int16 v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  malloc_zone_t *v44;
  void (***v45)(_QWORD);
  unsigned __int8 v46;
  uint64_t v47;
  geo::read_write_lock *v48;
  const char *v49;
  uint64_t v50;
  geo::read_write_lock *v51;
  const char *v52;
  malloc_zone_t *zone;
  uint64_t v54;
  geo::read_write_lock *v55;
  const char *v56;
  malloc_zone_t *v57;
  uint64_t v58;

  v9 = a7;
  if (a4)
    v12 = 2;
  else
    v12 = 0;
  if (a5)
    v13 = 4;
  else
    v13 = 0;
  if (a6)
    v14 = 8;
  else
    v14 = 0;
  if (a7)
    v15 = 16;
  else
    v15 = 0;
  v16 = v14 | v15 | a3 | v12 | v13;
  v18 = *a1;
  v17 = a1[1];
  if (*a1 != v17)
  {
    while (*v18 != a2 || (v18[2] & 0x1F) != v16 || v18[1] != a8)
    {
      v18 += 16;
      if (v18 == v17)
        goto LABEL_20;
    }
  }
  if (v18 == v17)
  {
LABEL_20:
    v19 = (v12 >> 1) ^ 1 | (a8 << 8) | ((a3 ^ 1) << 16);
    if (a6)
      v20 = 0x80000202020100;
    else
      v20 = 1;
    {
      v50 = operator new();
      *(_QWORD *)(v50 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v50 + 24) = "VectorKitLabels";
      *(_OWORD *)(v50 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v50 = &off_1E42B5668;
      *(_QWORD *)(v50 + 8) = "VectorKitLabels";
      *(_OWORD *)(v50 + 72) = 0u;
      *(_OWORD *)(v50 + 88) = 0u;
      *(_OWORD *)(v50 + 104) = 0u;
      *(_OWORD *)(v50 + 120) = 0u;
      *(_OWORD *)(v50 + 136) = 0u;
      *(_OWORD *)(v50 + 152) = 0u;
      *(_OWORD *)(v50 + 168) = 0u;
      *(_OWORD *)(v50 + 184) = 0u;
      *(_OWORD *)(v50 + 200) = 0u;
      *(_OWORD *)(v50 + 216) = 0u;
      *(_OWORD *)(v50 + 232) = 0u;
      *(_QWORD *)(v50 + 248) = 0;
      *(_OWORD *)(v50 + 56) = 0u;
      v51 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v50 + 56), 0);
      if ((_DWORD)v51)
        geo::read_write_lock::logFailure(v51, (uint64_t)"initialization", v52);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v50 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v50 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v50;
    }
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 216, 8);
    v23 = (void (***)(_QWORD))v22;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)v22 = &off_1E42B5DE8;
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 32) = 0;
    *(_DWORD *)(v22 + 36) = v19;
    *(_DWORD *)(v22 + 40) = v13 << 28;
    *(_DWORD *)(v22 + 44) = v13 << 28;
    *(_QWORD *)(v22 + 48) = v20;
    *(_QWORD *)(v22 + 67) = 0;
    *(_QWORD *)(v22 + 59) = 0;
    *(_BYTE *)(v22 + 75) = 0;
    *(_QWORD *)(v22 + 132) = 0;
    *(_QWORD *)(v22 + 124) = 0;
    *(_WORD *)(v22 + 188) = 257;
    *(_BYTE *)(v22 + 208) = 0;
    *(_QWORD *)(v22 + 192) = 0;
    *(_QWORD *)(v22 + 200) = 0;
    *(_BYTE *)(v22 + 58) = a2;
    *(_BYTE *)(v22 + 56) = 1;
    if (a2 == 3)
      v24 = v9;
    else
      v24 = 0;
    *(_BYTE *)(v22 + 57) = v24;
    v26 = *a1;
    v25 = a1[1];
    v18 = *a1;
    if (*a1 != v25)
    {
      while (*v18 != a2 || (v18[2] & 0x1F) != v16 || v18[1] != a8)
      {
        v18 += 16;
        if (v18 == v25)
          goto LABEL_34;
      }
    }
    if (v18 == v25)
    {
LABEL_34:
      v27 = a1[2];
      if (v25 >= v27)
      {
        v29 = (v25 - v26) >> 4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60)
          abort();
        v31 = v27 - v26;
        if (v31 >> 3 > v30)
          v30 = v31 >> 3;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        if (v30)
        {
          v32 = 16 * v30;
          v33 = (*(uint64_t (**)(unsigned __int8 *, unint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 16 * v30, 8);
          v34 = v33 + 16 * v29;
          v30 = v33 + v32;
          if (v33)
          {
            *(_BYTE *)v34 = a2;
            *(_BYTE *)(v34 + 1) = a8;
            *(_BYTE *)(v34 + 2) = v16;
            *(_QWORD *)(v34 + 8) = v23;
            v23 = 0;
          }
        }
        else
        {
          v34 = 16 * v29;
        }
        v28 = v34 + 16;
        v35 = *a1;
        v36 = a1[1];
        if (v36 == *a1)
        {
          *a1 = (unsigned __int8 *)v34;
          a1[1] = (unsigned __int8 *)v28;
          v41 = a1[2];
          a1[2] = (unsigned __int8 *)v30;
        }
        else
        {
          do
          {
            v37 = *((_WORD *)v36 - 8);
            v36 -= 16;
            v38 = v36[2];
            *(_WORD *)(v34 - 16) = v37;
            v34 -= 16;
            *(_BYTE *)(v34 + 2) = v38;
            v39 = *((_QWORD *)v36 + 1);
            *((_QWORD *)v36 + 1) = 0;
            *(_QWORD *)(v34 + 8) = v39;
          }
          while (v36 != v35);
          v36 = *a1;
          v40 = a1[1];
          *a1 = (unsigned __int8 *)v34;
          a1[1] = (unsigned __int8 *)v28;
          v41 = a1[2];
          for (a1[2] = (unsigned __int8 *)v30; v40 != v36; v40 -= 16)
          {
            v45 = (void (***)(_QWORD))*((_QWORD *)v40 - 1);
            *((_QWORD *)v40 - 1) = 0;
            if (v45)
            {
              (**v45)(v45);
              {
                v47 = operator new();
                *(_QWORD *)(v47 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v47 + 24) = "VectorKitLabels";
                *(_OWORD *)(v47 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v47 = &off_1E42B5668;
                *(_QWORD *)(v47 + 8) = "VectorKitLabels";
                *(_OWORD *)(v47 + 72) = 0u;
                *(_OWORD *)(v47 + 88) = 0u;
                *(_OWORD *)(v47 + 104) = 0u;
                *(_OWORD *)(v47 + 120) = 0u;
                *(_OWORD *)(v47 + 136) = 0u;
                *(_OWORD *)(v47 + 152) = 0u;
                *(_OWORD *)(v47 + 168) = 0u;
                *(_OWORD *)(v47 + 184) = 0u;
                *(_OWORD *)(v47 + 200) = 0u;
                *(_OWORD *)(v47 + 216) = 0u;
                *(_OWORD *)(v47 + 232) = 0u;
                *(_QWORD *)(v47 + 248) = 0;
                v58 = v47;
                *(_OWORD *)(v47 + 56) = 0u;
                v48 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v47 + 56), 0);
                if ((_DWORD)v48)
                  geo::read_write_lock::logFailure(v48, (uint64_t)"initialization", v49);
                v44 = malloc_create_zone(0, 0);
                *(_QWORD *)(v58 + 48) = v44;
                malloc_set_zone_name(v44, "VectorKitLabels");
                *(_QWORD *)(v58 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v58;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v45, 216);
            }
          }
        }
        if (v36)
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, int64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v36, v41 - v36);
      }
      else
      {
        if (v25)
        {
          *v25 = a2;
          v25[1] = a8;
          v25[2] = v16;
          *((_QWORD *)v25 + 1) = v22;
          v23 = 0;
        }
        v28 = (uint64_t)(v25 + 16);
      }
      a1[1] = (unsigned __int8 *)v28;
      v18 = (unsigned __int8 *)(v28 - 16);
    }
    if (v23)
    {
      (**v23)(v23);
      {
        v54 = operator new();
        *(_QWORD *)(v54 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v54 + 24) = "VectorKitLabels";
        *(_OWORD *)(v54 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v54 = &off_1E42B5668;
        *(_QWORD *)(v54 + 8) = "VectorKitLabels";
        *(_OWORD *)(v54 + 72) = 0u;
        *(_OWORD *)(v54 + 88) = 0u;
        *(_OWORD *)(v54 + 104) = 0u;
        *(_OWORD *)(v54 + 120) = 0u;
        *(_OWORD *)(v54 + 136) = 0u;
        *(_OWORD *)(v54 + 152) = 0u;
        *(_OWORD *)(v54 + 168) = 0u;
        *(_OWORD *)(v54 + 184) = 0u;
        *(_OWORD *)(v54 + 200) = 0u;
        *(_OWORD *)(v54 + 216) = 0u;
        *(_OWORD *)(v54 + 232) = 0u;
        *(_QWORD *)(v54 + 248) = 0;
        *(_OWORD *)(v54 + 56) = 0u;
        v55 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v54 + 56), 0);
        if ((_DWORD)v55)
          geo::read_write_lock::logFailure(v55, (uint64_t)"initialization", v56);
        v57 = malloc_create_zone(0, 0);
        *(_QWORD *)(v54 + 48) = v57;
        malloc_set_zone_name(v57, "VectorKitLabels");
        *(_QWORD *)(v54 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v54;
      }
      (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v23, 216);
    }
  }
  return *((_QWORD *)v18 + 1);
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::getProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(result + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 20);
    *(_BYTE *)a2 = 1;
  }
  return result;
}

void md::StyleTexture<md::LowZoomStyle>::_processStylePixelsIfNecessary(uint64_t a1)
{
  char *v2;
  unint64_t *v3;
  char *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unsigned __int32 *v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float32x2_t v21;
  int32x2_t v22;
  int shared_owners_high;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = (char *)operator new(0x58uLL);
    *((_QWORD *)v2 + 1) = 0;
    v3 = (unint64_t *)(v2 + 8);
    *((_QWORD *)v2 + 2) = 0;
    *(_QWORD *)v2 = &off_1E42DED18;
    *((_QWORD *)v2 + 3) = &off_1E42B63B0;
    v4 = v2 + 24;
    v5 = *(_DWORD *)(a1 + 92);
    *((_QWORD *)v2 + 5) = 0;
    *((_QWORD *)v2 + 6) = 0;
    *((_QWORD *)v2 + 4) = 0;
    *((_DWORD *)v2 + 14) = 0;
    *(_QWORD *)(v2 + 60) = 0x100000001;
    *((_DWORD *)v2 + 17) = 1;
    *((_DWORD *)v2 + 18) = v5;
    *((_QWORD *)v2 + 10) = 0;
    *((_DWORD *)v2 + 19) = v5;
    v36 = (std::__shared_weak_count *)v2;
    v6 = operator new();
    if ((v7 & 1) == 0
    {
      md::StyleTexture<md::LowZoomStyle>::textureData(void)::bytesPerPixel = 4;
    }
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::__shared_weak_count *)operator new(0x60uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
    v11 = v10 + 1;
    v12 = ggl::TextureData2D::TextureData2D((uint64_t)&v10[1], v8, v9, 1u, 12, 1);
    v34 = v10 + 1;
    v35 = v10;
    v13 = (unsigned __int32 *)((uint64_t (*)(_QWORD *, _QWORD))v10[1].__on_zero_shared)(v12, 0);
    v14 = operator new();
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    if (v15)
      MEMORY[0x1A1AF4E00](v15, 0xC400A2AC0F1);
    v16 = *(float32x2_t **)a1;
    v17 = *(float32x2_t **)(a1 + 8);
    if (*(float32x2_t **)a1 != v17)
    {
      v32 = v2 + 24;
      v33 = v2;
      LODWORD(v18) = 0;
      v19 = md::StyleTexture<md::LowZoomStyle>::textureData(void)::bytesPerPixel * *(_QWORD *)(a1 + 48);
      v20 = 1;
      v21 = (float32x2_t)vdup_n_s32(0x437F0000u);
      do
      {
        v22 = (int32x2_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vmul_f32(v16[1], v21)), (uint32x2_t)0x1800000010);
        *v13 = vorr_s8((int8x8_t)vdup_lane_s32(v22, 1), (int8x8_t)v22).u32[0] | ((int)(float)(v16->f32[1] * 255.0) << 8) | (int)(float)(v16->f32[0] * 255.0);
        if (v20 % *(_QWORD *)(a1 + 72))
        {
          v13 = (unsigned __int32 *)((char *)v13 + *(_QWORD *)(a1 + 64));
        }
        else
        {
          v18 = (v18 + 1);
          v13 = (unsigned __int32 *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v11->__on_zero_shared)(v11, 0)+ v19 * v18);
        }
        ++v20;
        v16 += 2;
      }
      while (v16 != v17);
      v11 = v34;
      v10 = v35;
      v2 = v33;
      v4 = v32;
    }
    shared_owners_high = HIDWORD(v11->__shared_owners_);
    *(_DWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 56) = 0x100000001;
    *(_DWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 68) = shared_owners_high;
    *(_QWORD *)(v6 + 72) = 0x100000001;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)v6 = &off_1E42BE438;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v6 + 48) = "";
    *(_DWORD *)(v6 + 104) = v11->__shared_owners_;
    *(_QWORD *)(v6 + 112) = v11;
    *(_QWORD *)(v6 + 120) = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    *(_WORD *)(v6 + 128) = 0;
    *(_BYTE *)(v6 + 130) = 1;
    *(_QWORD *)(v6 + 136) = v4;
    *(_QWORD *)(v6 + 144) = v2;
    do
      v26 = __ldxr(v3);
    while (__stxr(v26 + 1, v3));
    *(_QWORD *)(v6 + 80) = v11->__shared_weak_owners_;
    v27 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (v10)
    {
      v28 = (unint64_t *)&v10->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(a1 + 32) = 0;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
}

void sub_19F189FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1A1AF4E00](v5, 0x10F1C40BE47B5E1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::find<md::UniqueRenderID>(_QWORD *a1, unint64_t a2, unsigned __int8 a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t ***v8;
  uint64_t **result;
  uint64_t v10;
  unint64_t v12;
  uint64_t *v14;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = ((a2 >> 34) + a2 + (HIDWORD(a2) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(a2);
  v5 = ((v4 << 6) + a3 + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v3)
      v7 = v5 % *(_QWORD *)&v3;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v3 - 1);
  }
  v8 = *(uint64_t ****)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v14 = result[1];
        if (v14 == (uint64_t *)v5)
        {
          if (result[2] == (uint64_t *)a2 && *((unsigned __int8 *)result + 24) == a3)
            return result;
        }
        else if (((unint64_t)v14 & v10) != v7)
        {
          return 0;
        }
        result = (uint64_t **)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = (unint64_t)result[1];
      if (v12 == v5)
      {
        if (result[2] == (uint64_t *)a2 && *((unsigned __int8 *)result + 24) == a3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v3)
          v12 %= *(_QWORD *)&v3;
        if (v12 != v7)
          return 0;
      }
      result = (uint64_t **)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::__emplace_unique_key_args<md::UniqueRenderID,md::UniqueRenderID const&>(uint64_t a1, unint64_t a2, unsigned __int8 a3, _OWORD *a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  unint64_t v14;
  uint64_t *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v7 = ((a2 >> 34) + a2 + (HIDWORD(a2) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(a2);
  v8 = ((v7 << 6) + a3 + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = ((v7 << 6) + a3 + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v16 == (uint64_t *)v8)
            {
              if (v12[2] == (uint64_t *)a2 && *((unsigned __int8 *)v12 + 24) == a3)
                return;
            }
            else if (((unint64_t)v16 & (v9 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v12 = (uint64_t **)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = (unint64_t)v12[1];
          if (v14 == v8)
          {
            if (v12[2] == (uint64_t *)a2 && *((unsigned __int8 *)v12 + 24) == a3)
              return;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v4)
              break;
          }
          v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v17 = operator new(0x20uLL);
  *v17 = 0;
  v17[1] = v8;
  *((_OWORD *)v17 + 1) = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_40;
    if (prime < v9)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v9)
LABEL_40:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *v17 = *v28;
LABEL_64:
    *v28 = v17;
    goto LABEL_65;
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v27 + 8 * v4) = a1 + 16;
  if (*v17)
  {
    v29 = *(_QWORD *)(*v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F18A470(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(float *a1, float *a2, _OWORD *a3, uint64_t a4)
{
  unint64_t v4;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;

  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = 0x9E3779B97F4A7C15;
  v12 = *(unsigned int *)a2 - 0x61C8864680B583EBLL;
  if (*a2 == 0.0)
    v12 = 0x9E3779B97F4A7C15;
  v13 = LODWORD(v8) - 0x61C8864680B583EBLL;
  if (v8 == 0.0)
    v13 = 0x9E3779B97F4A7C15;
  v14 = ((v12 >> 2) + (v12 << 6) + v13) ^ v12;
  v15 = LODWORD(v9) - 0x61C8864680B583EBLL;
  if (v9 == 0.0)
    v15 = 0x9E3779B97F4A7C15;
  v16 = (v15 + (v14 << 6) + (v14 >> 2)) ^ v14;
  if (v10 != 0.0)
    v11 = LODWORD(v10) - 0x61C8864680B583EBLL;
  v17 = (v11 + (v16 << 6) + (v16 >> 2)) ^ v16;
  v18 = *((_QWORD *)a1 + 1);
  if (v18)
  {
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v4 = (v11 + (v16 << 6) + (v16 >> 2)) ^ v16;
      if (v17 >= v18)
        v4 = v17 % v18;
    }
    else
    {
      v4 = v17 & (v18 - 1);
    }
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (v21)
      {
        if (v19.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v21[1];
            if (v25 == v17)
            {
              if (v21[2] == *(_QWORD *)a2 && v21[3] == *((_QWORD *)a2 + 1))
                return;
            }
            else if ((v25 & (v18 - 1)) != v4)
            {
              goto LABEL_36;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_36;
          }
        }
        do
        {
          v23 = v21[1];
          if (v23 == v17)
          {
            if (v21[2] == *(_QWORD *)a2 && v21[3] == *((_QWORD *)a2 + 1))
              return;
          }
          else
          {
            if (v23 >= v18)
              v23 %= v18;
            if (v23 != v4)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_36:
  v26 = operator new(0x28uLL);
  *v26 = 0;
  v26[1] = v17;
  *((_OWORD *)v26 + 1) = *a3;
  v26[4] = a4;
  v27 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v28 = a1[8];
  if (!v18 || (float)(v28 * (float)v18) < v27)
  {
    v29 = 1;
    if (v18 >= 3)
      v29 = (v18 & (v18 - 1)) != 0;
    v30 = v29 | (2 * v18);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v18 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v18)
    {
      if (prime >= v18)
        goto LABEL_73;
      v44 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v18 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v18)
      {
        v18 = *((_QWORD *)a1 + 1);
LABEL_73:
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v17 >= v18)
            v4 = v17 % v18;
          else
            v4 = v17;
        }
        else
        {
          v4 = (v18 - 1) & v17;
        }
        goto LABEL_86;
      }
      if (!prime)
      {
        v53 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v53)
          operator delete(v53);
        v18 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_73;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v33 = operator new(8 * prime);
    v34 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v33;
    if (v34)
      operator delete(v34);
    v35 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35++) = 0;
    while (prime != v35);
    v37 = (uint64_t *)(a1 + 4);
    v36 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v36)
    {
LABEL_72:
      v18 = prime;
      goto LABEL_73;
    }
    v38 = v36[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v37;
      for (i = (_QWORD *)*v36; *v36; i = (_QWORD *)*v36)
      {
        v42 = i[1] & v39;
        if (v42 == v40)
        {
          v36 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v36 = *i;
          v43 = 8 * v42;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v36;
          v36 = i;
          v40 = v42;
        }
      }
      goto LABEL_72;
    }
    if (v38 >= prime)
      v38 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v37;
    v47 = (_QWORD *)*v36;
    if (!*v36)
      goto LABEL_72;
    while (1)
    {
      v49 = v47[1];
      if (v49 >= prime)
        v49 %= prime;
      if (v49 != v38)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v49))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v36;
          goto LABEL_77;
        }
        *v36 = *v47;
        v48 = 8 * v49;
        *v47 = **(_QWORD **)(*(_QWORD *)a1 + v48);
        **(_QWORD **)(*(_QWORD *)a1 + v48) = v47;
        v47 = v36;
      }
      v49 = v38;
LABEL_77:
      v36 = v47;
      v47 = (_QWORD *)*v47;
      v38 = v49;
      if (!v47)
        goto LABEL_72;
    }
  }
LABEL_86:
  v50 = *(_QWORD **)a1;
  v51 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v51)
  {
    *v26 = *v51;
LABEL_94:
    *v51 = v26;
    goto LABEL_95;
  }
  *v26 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v26;
  v50[v4] = a1 + 4;
  if (*v26)
  {
    v52 = *(_QWORD *)(*v26 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v52 >= v18)
        v52 %= v18;
    }
    else
    {
      v52 &= v18 - 1;
    }
    v51 = (_QWORD *)(*(_QWORD *)a1 + 8 * v52);
    goto LABEL_94;
  }
LABEL_95:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F18A968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 112);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 192))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 192))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

void gdc::LayerDataSource::updateLayerData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  std::string *p_p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v14;
  unint64_t v15;
  double v16;
  double v17;
  unint64_t v18;
  NSObject *v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::mutex *v30;
  NSObject *v31;
  std::string *v32;
  uint64_t v33;
  std::mutex *v34;
  int v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t ***v40;
  uint64_t **v41;
  int v42;
  int v43;
  uint64_t *v44;
  const void *v45;
  size_t v46;
  unint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  float v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  uint64_t v71;
  int8x8_t v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  int v84;
  int v85;
  size_t v86;
  size_t v87;
  const void *v88;
  const void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::string __p;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned __int8 v96;
  int v97;
  __int128 v98;
  uint8_t buf[4];
  std::string *v100;
  __int16 v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 112))(&v90, a1, a3, a4, a5);
  std::mutex::lock((std::mutex *)(a1 + 480));
  v14 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) * 0.000000001;
  v15 = *(_QWORD *)(a1 + 576);
  if (v15)
  {
    *(double *)(a1 + 544) = fmin(*(double *)(a1 + 544), v14);
    *(double *)(a1 + 552) = fmax(*(double *)(a1 + 552), v14);
    v16 = (double)v15;
    v17 = *(double *)(a1 + 560) + v14 / (double)v15;
    v18 = v15 + 1;
    *(double *)(a1 + 560) = v17 * v16 / (double)v18;
    v14 = *(double *)(a1 + 568) + v14;
  }
  else
  {
    *(double *)(a1 + 544) = v14;
    *(double *)(a1 + 552) = v14;
    *(double *)(a1 + 560) = v14;
    v18 = 1;
  }
  *(double *)(a1 + 568) = v14;
  *(_QWORD *)(a1 + 576) = v18;
  std::mutex::unlock((std::mutex *)(a1 + 480));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v19 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (!os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
    goto LABEL_11;
  p_p = &__p;
  gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)a3);
  v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315394;
  v100 = v20;
  v101 = 2048;
  v102 = a5;
  _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_DEBUG, "Created Layer Data: %s @ Time: %lld", buf, 0x16u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v21 = v90;
    if (v90)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    v21 = v90;
    if (v90)
    {
LABEL_12:
      v22 = *a4;
      v23 = a4[1];
      if (*a4 == v23)
      {
LABEL_74:
        *(_QWORD *)(v21 + 128) = a2;
        *(_BYTE *)(v21 + 160) = a6;
        v54 = *(_QWORD *)(a1 + 16);
        v34 = (std::mutex *)(v54 + 80);
        std::mutex::lock((std::mutex *)(v54 + 80));
        v55 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(v54 + 144, (unsigned __int8 *)a3, a3);
        v57 = v90;
        v56 = v91;
        if (v91)
        {
          p_shared_owners = (unint64_t *)&v91->__shared_owners_;
          do
            v59 = __ldxr(p_shared_owners);
          while (__stxr(v59 + 1, p_shared_owners));
        }
        v60 = (std::__shared_weak_count *)v55[17];
        v55[16] = v57;
        v55[17] = v56;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = *(_QWORD *)(v54 + 272);
        if (v63)
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v63 + 48))(v63, &v90);
        goto LABEL_130;
      }
      v24 = 0;
      while (1)
      {
        v25 = *(_QWORD **)(v22 + 24);
        if (v25)
          break;
LABEL_14:
        v22 += 48;
        if (v22 == v23)
        {
          if (v24 > 0)
          {
            *(_QWORD *)(v21 + 152) = v24;
            v29 = v24 - a5;
            if (v24 <= a5)
            {
              v30 = (std::mutex *)(a1 + 376);
              std::mutex::lock((std::mutex *)(a1 + 376));
              v53 = *(_QWORD *)(a1 + 464);
              if (v53)
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53);
            }
            else
            {
              v30 = (std::mutex *)(a1 + 304);
              std::mutex::lock((std::mutex *)(a1 + 304));
              (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 368) + 24))(*(_QWORD *)(a1 + 368), 0, (double)v29 * 0.001);
            }
            std::mutex::unlock(v30);
            v21 = v90;
          }
          goto LABEL_74;
        }
      }
      while (1)
      {
        v26 = v25[14];
        v27 = *(_QWORD *)(v26 + 112);
        if (v27 < 1)
        {
          v28 = 0;
          if (v24)
          {
LABEL_23:
            if (v28 < 1 || v28 >= v24)
              goto LABEL_18;
          }
        }
        else
        {
          v28 = *(_QWORD *)(v26 + 96) + v27;
          if (v24)
            goto LABEL_23;
        }
        v24 = v28;
LABEL_18:
        v25 = (_QWORD *)*v25;
        if (!v25)
          goto LABEL_14;
      }
    }
  }
  if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
  v31 = GEOGetGeoDisplayCoreDefaultLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDefaultLog::log, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(&__p, a1, a3);
    v32 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v100 = v32;
    _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "Failed to create layer data for key: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v33 = *(_QWORD *)(a1 + 16);
  v34 = (std::mutex *)(v33 + 80);
  std::mutex::lock((std::mutex *)(v33 + 80));
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&__p.__r_.__value_.__l.__size_, a3 + 8);
  v96 = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    v97 = *(_DWORD *)(a3 + 100);
    v35 = 1;
    v96 = 1;
  }
  else
  {
    v35 = 0;
  }
  v36 = (uint64_t *)(v33 + 184);
  v37 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)&v98 = v37;
  *((_QWORD *)&v98 + 1) = a2;
  v38 = *(_QWORD *)(v33 + 192);
  if (v38)
  {
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      p_p = (std::string *)v37;
      if (v37 >= v38)
        p_p = (std::string *)(v37 % v38);
    }
    else
    {
      p_p = (std::string *)((v38 - 1) & v37);
    }
    v40 = *(uint64_t ****)(*v36 + 8 * (_QWORD)p_p);
    if (v40)
    {
      v41 = *v40;
      if (*v40)
      {
        v42 = __p.__r_.__value_.__s.__data_[0];
        v43 = LOWORD(__p.__r_.__value_.__r.__words[1]);
        v44 = v95;
        v45 = (const void *)__p.__r_.__value_.__r.__words[2];
        v46 = v93 - __p.__r_.__value_.__r.__words[2];
        if (v39.u32[0] >= 2uLL)
        {
          while (1)
          {
            v47 = (unint64_t)v41[1];
            if (v47 == v37)
            {
              if (*((unsigned __int8 *)v41 + 16) == v42 && *((unsigned __int16 *)v41 + 12) == v43 && v41[12] == v44)
              {
                v48 = v41[4];
                if ((char *)v41[5] - (char *)v48 == v46)
                {
                  v86 = v46;
                  v88 = v45;
                  v84 = v43;
                  v82 = v44;
                  v49 = memcmp(v48, v45, v46);
                  v46 = v86;
                  v45 = v88;
                  v44 = v82;
                  v43 = v84;
                  if (!v49)
                    goto LABEL_126;
                }
              }
            }
            else
            {
              if (v47 >= v38)
                v47 %= v38;
              if ((std::string *)v47 != p_p)
                goto LABEL_85;
            }
            v41 = (uint64_t **)*v41;
            if (!v41)
              goto LABEL_85;
          }
        }
        do
        {
          v50 = v41[1];
          if (v50 == (uint64_t *)v37)
          {
            if (*((unsigned __int8 *)v41 + 16) == v42 && *((unsigned __int16 *)v41 + 12) == v43 && v41[12] == v44)
            {
              v51 = v41[4];
              if ((char *)v41[5] - (char *)v51 == v46)
              {
                v87 = v46;
                v89 = v45;
                v85 = v43;
                v83 = v44;
                v52 = memcmp(v51, v45, v46);
                v46 = v87;
                v45 = v89;
                v44 = v83;
                v43 = v85;
                if (!v52)
                  goto LABEL_126;
              }
            }
          }
          else if ((std::string *)((unint64_t)v50 & (v38 - 1)) != p_p)
          {
            break;
          }
          v41 = (uint64_t **)*v41;
        }
        while (v41);
        v36 = (uint64_t *)(v33 + 184);
      }
    }
  }
LABEL_85:
  v64 = (char *)operator new(0x88uLL);
  *(_QWORD *)v64 = 0;
  *((_QWORD *)v64 + 1) = v37;
  v64[16] = __p.__r_.__value_.__s.__data_[0];
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v64 + 24), (uint64_t)&__p.__r_.__value_.__l.__size_);
  v64[112] = 0;
  if (v96)
  {
    *((_DWORD *)v64 + 29) = v97;
    v64[112] = 1;
  }
  *(_OWORD *)(v64 + 120) = v98;
  v65 = (float)(unint64_t)(*(_QWORD *)(v33 + 208) + 1);
  v66 = *(float *)(v33 + 216);
  if (!v38 || (float)(v66 * (float)v38) < v65)
  {
    v67 = 1;
    if (v38 >= 3)
      v67 = (v38 & (v38 - 1)) != 0;
    v68 = v67 | (2 * v38);
    v69 = vcvtps_u32_f32(v65 / v66);
    if (v68 <= v69)
      prime = v69;
    else
      prime = v68;
    v71 = (uint64_t)v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v72 = *(int8x8_t *)(v33 + 192);
    if (prime > *(_QWORD *)&v72)
      goto LABEL_99;
    if (prime < *(_QWORD *)&v72)
    {
      v73 = vcvtps_u32_f32((float)*(unint64_t *)(v33 + 208) / *(float *)(v33 + 216));
      if (*(_QWORD *)&v72 < 3uLL || (v74 = (uint8x8_t)vcnt_s8(v72), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
      {
        v73 = std::__next_prime(v73);
      }
      else
      {
        v75 = 1 << -(char)__clz(v73 - 1);
        if (v73 >= 2)
          v73 = v75;
      }
      if (prime <= v73)
        prime = v73;
      if (prime < *(_QWORD *)&v72)
LABEL_99:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v71, prime);
    }
    v38 = *(_QWORD *)(v33 + 192);
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v37 >= v38)
        p_p = (std::string *)(v37 % v38);
      else
        p_p = (std::string *)v37;
    }
    else
    {
      p_p = (std::string *)((v38 - 1) & v37);
    }
    v36 = (uint64_t *)v71;
  }
  v76 = *v36;
  v77 = *(_QWORD **)(*v36 + 8 * (_QWORD)p_p);
  if (v77)
  {
    *(_QWORD *)v64 = *v77;
  }
  else
  {
    *(_QWORD *)v64 = *(_QWORD *)(v33 + 200);
    *(_QWORD *)(v33 + 200) = v64;
    *(_QWORD *)(v76 + 8 * (_QWORD)p_p) = v33 + 200;
    if (!*(_QWORD *)v64)
      goto LABEL_125;
    v78 = *(_QWORD *)(*(_QWORD *)v64 + 8);
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v78 >= v38)
        v78 %= v38;
    }
    else
    {
      v78 &= v38 - 1;
    }
    v77 = (_QWORD *)(*v36 + 8 * v78);
  }
  *v77 = v64;
LABEL_125:
  ++*(_QWORD *)(v33 + 208);
  v35 = v96;
LABEL_126:
  if (v35)
    v96 = 0;
  if (__p.__r_.__value_.__r.__words[2] != v94)
    free((void *)__p.__r_.__value_.__r.__words[2]);
LABEL_130:
  std::mutex::unlock(v34);
  v79 = v91;
  if (v91)
  {
    v80 = (unint64_t *)&v91->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

uint64_t gdc::ResourceFetcher::createResource(uint64_t a1, void *a2, unsigned __int16 *a3, char a4, unsigned int a5, uint64_t a6, char a7, _QWORD *a8)
{
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  double v21;
  double *v22;
  double v23;
  uint64_t v24;
  int64x2_t v25;
  int v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned __int16 *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  gdc::ResourceStore *v37;
  void *v38;
  const gdc::ResourceKey *v39;
  _QWORD *v40;
  uint64_t v41;
  std::chrono::steady_clock::time_point v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *size;
  unint64_t *v48;
  unint64_t v49;
  double v50;
  unint64_t v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  NSObject *v61;
  _BYTE *v62;
  std::string::size_type v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  NSObject *v70;
  int v71;
  std::string *p_buf;
  uint64_t v73;
  std::__shared_weak_count *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  char *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  char v97;
  uint64_t v98;
  __int128 v99;
  unint64_t v100;
  char v101;
  std::string buf;
  _BYTE __p[32];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[24];
  _BYTE *v108;
  _BYTE v109[24];
  _BYTE *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v101 = a5;
  v100 = 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a8 + 16))(*a8) & 1) == 0)
  {
    v100 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a8 + 24))(*a8);
    std::mutex::lock((std::mutex *)(a1 + 112));
    v16 = a1 + 40 * a5;
    v19 = *(_QWORD *)(v16 + 208);
    v17 = (uint64_t *)(v16 + 208);
    v18 = v19;
    v20 = (double *)(v17 - 4);
    v21 = (double)v100;
    if (v19)
    {
      *v20 = fmin(*v20, v21);
      v22 = (double *)(a1 + 40 * a5);
      v23 = v22[24];
      v24 = v18 + 1;
      v22[23] = fmax(v22[23], v21);
      v22[24] = (v23 + v21 / (double)v18) * (double)v18 / (double)(v18 + 1);
      v22[25] = v22[25] + v21;
    }
    else
    {
      v25 = vdupq_lane_s64(*(uint64_t *)&v21, 0);
      *(int64x2_t *)v20 = v25;
      *(int64x2_t *)(a1 + 40 * a5 + 192) = v25;
      v24 = 1;
    }
    *v17 = v24;
    std::mutex::unlock((std::mutex *)(a1 + 112));
  }
  v99 = 0uLL;
  v26 = a3[1];
  v28 = *(unsigned __int16 **)(a1 + 40);
  v27 = *(unsigned __int16 **)(a1 + 48);
  if (v28 != v27)
  {
    while (v26 != *v28)
    {
      v28 += 12;
      if (v28 == v27)
        goto LABEL_14;
    }
  }
  if (v28 == v27)
  {
LABEL_14:
    __p[31] = 14;
    *(_QWORD *)__p = -1;
    strcpy(&__p[8], "GeoDisplayCore");
    v105 = 0;
    v106 = 0;
    v104 = 0;
    v37 = *(gdc::ResourceStore **)geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 16), v26);
    v38 = a2;
    v39 = (const gdc::ResourceKey *)a3;
    goto LABEL_65;
  }
  v98 = a6;
  v29 = operator new(0x20uLL);
  v97 = a7;
  *v29 = &off_1E42D5890;
  v29[1] = a3;
  v29[2] = &v100;
  v29[3] = &v101;
  v110 = v29;
  v108 = 0;
  v30 = operator new(0x20uLL);
  *v30 = &off_1E42D58D8;
  v31 = a3;
  v30[1] = a3;
  v32 = v30 + 1;
  v30[2] = &v100;
  v30[3] = &v101;
  v108 = v30;
  v33 = (char *)operator new(0x20uLL);
  *(_QWORD *)v33 = &off_1E42D58D8;
  *(_OWORD *)(v33 + 8) = *(_OWORD *)v32;
  *((_QWORD *)v33 + 3) = v32[2];
  *(_QWORD *)&__p[24] = v33;
  std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::operator()((uint64_t)v29);
  v34 = v108;
  if (v108 == v107)
  {
    v36 = 4;
    v34 = v107;
    v35 = a2;
  }
  else
  {
    v35 = a2;
    if (!v108)
      goto LABEL_17;
    v36 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v36))();
LABEL_17:
  v40 = v110;
  if (v110 == v109)
  {
    v41 = 4;
    v40 = v109;
    goto LABEL_21;
  }
  if (v110)
  {
    v41 = 5;
LABEL_21:
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
  v42.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(std::string *__return_ptr, _QWORD, unsigned __int16 *, _QWORD *))(**((_QWORD **)v28 + 1) + 16))(&buf, *((_QWORD *)v28 + 1), v31, a8);
  v43 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  v99 = v43;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v48 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 336));
  v50 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v42.__d_.__rep_) * 0.000000001;
  v51 = *(_QWORD *)(a1 + 432);
  if (v51)
  {
    v52 = fmax(*(double *)(a1 + 408), v50);
    *(double *)(a1 + 400) = fmin(*(double *)(a1 + 400), v50);
    *(double *)(a1 + 408) = v52;
    v53 = (double)v51;
    v54 = *(double *)(a1 + 416) + v50 / (double)v51;
    v55 = v51 + 1;
    v50 = *(double *)(a1 + 424) + v50;
    *(double *)(a1 + 416) = v54 * v53 / (double)v55;
  }
  else
  {
    *(double *)(a1 + 400) = v50;
    *(double *)(a1 + 408) = v50;
    v55 = 1;
    *(double *)(a1 + 416) = v50;
  }
  *(double *)(a1 + 424) = v50;
  *(_QWORD *)(a1 + 432) = v55;
  std::mutex::unlock((std::mutex *)(a1 + 336));
  if (!*(_QWORD *)&__p[24])
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_99;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 48))(*(_QWORD *)&__p[24]);
  v56 = *(_QWORD **)&__p[24];
  if (*(_BYTE **)&__p[24] == __p)
  {
    v57 = 4;
    v56 = __p;
  }
  else
  {
    if (!*(_QWORD *)&__p[24])
      goto LABEL_41;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_41:
  v58 = v99;
  if (!(_QWORD)v99)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v70 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)v31);
      v71 = v31[1];
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = p_buf;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v71;
      *(_WORD *)&__p[18] = 2048;
      *(_QWORD *)&__p[20] = v35;
      _os_log_impl(&dword_19F029000, v70, OS_LOG_TYPE_ERROR, "Failed to decode key: %s type: %d, rid: %llu", __p, 0x1Cu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }

    __p[31] = 14;
    *(_QWORD *)__p = -2;
    strcpy(&__p[8], "GeoDisplayCore");
    v105 = 0;
    v106 = 0;
    v104 = 0;
    v37 = *(gdc::ResourceStore **)geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 16), v31[1]);
    v38 = v35;
    v39 = (const gdc::ResourceKey *)v31;
LABEL_65:
    gdc::ResourceStore::failed(v37, v38, v39, (const gdc::Error *)__p);
    v73 = 0;
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (!*((_QWORD *)&v99 + 1))
      return v73;
    goto LABEL_93;
  }
  if (v98 >= 1)
    *(_QWORD *)(v99 + 112) = v98;
  v59 = v101;
  *(_BYTE *)(v58 + 120) = a4;
  *(_BYTE *)(v58 + 121) = v59;
  *(_QWORD *)(v58 + 128) = v35;
  *(_BYTE *)(v58 + 136) = v97;
  v60 = *(_QWORD *)geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 16), v31[1]);
  std::mutex::lock((std::mutex *)(v60 + 128));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v61 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str((std::string *)__p, (unsigned __int8 *)v99);
    v62 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    v63 = *(_QWORD *)(v99 + 128);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v63;
    _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_DEBUG, "Resource Arrived: %s, rid: %llu", (uint8_t *)&buf, 0x16u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v65 = *(char **)(v60 + 200);
  v64 = *(_QWORD *)(v60 + 208);
  if ((unint64_t)v65 < v64)
  {
    *(_QWORD *)v65 = v99;
    v66 = *((_QWORD *)&v99 + 1);
    *((_QWORD *)v65 + 1) = *((_QWORD *)&v99 + 1);
    if (v66)
    {
      v67 = (unint64_t *)(v66 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = v65 + 16;
    goto LABEL_90;
  }
  v75 = *(char **)(v60 + 192);
  v76 = (v65 - v75) >> 4;
  v77 = v76 + 1;
  if ((unint64_t)(v76 + 1) >> 60)
LABEL_99:
    abort();
  v78 = v64 - (_QWORD)v75;
  if (v78 >> 3 > v77)
    v77 = v78 >> 3;
  v79 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
  v80 = 0xFFFFFFFFFFFFFFFLL;
  if (!v79)
    v80 = v77;
  if (v80 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v81 = 16 * v80;
  v82 = (char *)operator new(16 * v80);
  v83 = &v82[16 * v76];
  v84 = *((_QWORD *)&v99 + 1);
  *(_OWORD *)v83 = v99;
  if (v84)
  {
    v85 = (unint64_t *)(v84 + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v75 = *(char **)(v60 + 192);
    v65 = *(char **)(v60 + 200);
  }
  v87 = &v82[v81];
  v69 = v83 + 16;
  if (v65 == v75)
  {
    *(_QWORD *)(v60 + 192) = v83;
    *(_QWORD *)(v60 + 200) = v69;
    *(_QWORD *)(v60 + 208) = v87;
  }
  else
  {
    do
    {
      v88 = *((_OWORD *)v65 - 1);
      v65 -= 16;
      *((_OWORD *)v83 - 1) = v88;
      v83 -= 16;
      *(_QWORD *)v65 = 0;
      *((_QWORD *)v65 + 1) = 0;
    }
    while (v65 != v75);
    v75 = *(char **)(v60 + 192);
    v89 = *(char **)(v60 + 200);
    *(_QWORD *)(v60 + 192) = v83;
    *(_QWORD *)(v60 + 200) = v69;
    *(_QWORD *)(v60 + 208) = v87;
    while (v89 != v75)
    {
      v90 = (std::__shared_weak_count *)*((_QWORD *)v89 - 1);
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v89 -= 16;
    }
  }
  if (v75)
    operator delete(v75);
LABEL_90:
  *(_QWORD *)(v60 + 200) = v69;
  v93 = *(_QWORD *)(v60 + 24);
  if (v93)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v99);
  std::mutex::unlock((std::mutex *)(v60 + 128));
  v73 = 1;
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
LABEL_93:
    v94 = (unint64_t *)&v74->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return v73;
}

void sub_19F18BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  gdc::Error::~Error((void **)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F18BCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  char *v25;
  uint64_t v26;

  v25 = a24;
  if (a24 == &a21)
  {
    v26 = 4;
    v25 = &a21;
  }
  else
  {
    if (!a24)
      _Unwind_Resume(exception_object);
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
  _Unwind_Resume(exception_object);
}

unsigned __int16 *geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[](unsigned __int16 **a1, unsigned __int16 a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  char *v14;
  __int16 v15;
  unsigned __int16 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a1;
  if (*a1 != v5)
  {
    v6 = *a1;
    while (*v6 != a2)
    {
      v6 += 12;
      if (v6 == v5)
        goto LABEL_7;
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    v6 = *a1;
    if (v4 != v5)
    {
      v6 = *a1;
      while (*v6 != a2)
      {
        v6 += 12;
        if (v6 == v5)
          goto LABEL_13;
      }
    }
    if (v6 == v5)
    {
LABEL_13:
      v7 = a1[2];
      if (v5 >= v7)
      {
        v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3) + 1;
        if (v8 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v4) >> 3);
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v8;
        if (v10 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v11 = (char *)operator new(24 * v10);
        v6 = (unsigned __int16 *)&v11[8 * (((char *)v5 - (char *)v4) >> 3)];
        *v6 = a2;
        v12 = (unsigned __int16 *)&v11[24 * v10];
        *((_QWORD *)v6 + 1) = 0;
        *((_QWORD *)v6 + 2) = 0;
        v13 = v6 + 12;
        if (v4 == v5)
        {
          *a1 = v6;
          a1[1] = v13;
          a1[2] = v12;
        }
        else
        {
          v14 = &v11[8 * (((char *)v5 - (char *)v4) >> 3)];
          do
          {
            v15 = *(v5 - 12);
            v5 -= 12;
            *((_WORD *)v14 - 12) = v15;
            v14 -= 24;
            *(_OWORD *)(v14 + 8) = *(_OWORD *)(v5 + 4);
            *((_QWORD *)v5 + 1) = 0;
            *((_QWORD *)v5 + 2) = 0;
          }
          while (v5 != v4);
          v4 = *a1;
          v16 = a1[1];
          *a1 = (unsigned __int16 *)v14;
          a1[1] = v13;
          a1[2] = v12;
          while (v16 != v4)
          {
            v17 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(p_shared_owners);
              while (__stlxr(v19 - 1, p_shared_owners));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            v16 -= 12;
          }
        }
        if (v4)
          operator delete(v4);
        a1[1] = v13;
      }
      else
      {
        *v5 = a2;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        a1[1] = v5 + 12;
        v6 = v5;
      }
    }
  }
  return v6 + 4;
}

void sub_19F18BF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::DataObject::length(id *this)
{
  id v2;
  char isKindOfClass;
  id v4;

  v2 = this[2];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0 && (v4 = this[2]) != 0)
    return objc_msgSend(v4, "length");
  else
    return 0;
}

void sub_19F18BFFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TextDataStringInfo::generateLineBreakInfo(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  BOOL v34;
  char v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t **i;
  char v49;
  unsigned int v50;
  char v51;
  uint64_t **v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;

  v57 = a2;
  v7 = objc_msgSend(v57, "length");
  if (!v7)
    goto LABEL_84;
  {
    v54 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v54, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  if ((v7 & 0x8000000000000000) != 0)
    abort();
  v9 = mdm::Allocator::instance(void)::alloc;
  v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 2 * v7, 2);
  v11 = (unsigned __int16 *)v10;
  v12 = 0;
  do
  {
    if (v10 + v12)
      *(_WORD *)(v10 + v12) = 0;
    v12 += 2;
  }
  while (2 * v7 != v12);
  objc_msgSend(v57, "getCharacters:range:", v10, 0, v7);
  v13 = *(unsigned __int8 *)(a1 + 128);
  switch(v13)
  {
    case 3:
      if (md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken != -1)
        dispatch_once(&md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken, &__block_literal_global_13_13255);
      v14 = &md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeLeadingCharacterSet;
      v15 = md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet;
      if (!md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet)
        goto LABEL_82;
      break;
    case 2:
      if (md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken != -1)
        dispatch_once(&md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken, &__block_literal_global_14_13256);
      v14 = &md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeLeadingCharacterSet;
      v15 = md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet;
      if (!md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet)
        goto LABEL_82;
      break;
    case 1:
      if (md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken != -1)
        dispatch_once(&md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken, &__block_literal_global_13254);
      v14 = &md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeLeadingCharacterSet;
      v15 = md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet;
      if (!md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet)
        goto LABEL_82;
      break;
    default:
      if (md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken != -1)
        dispatch_once(&md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::onceToken, &__block_literal_global_15_13257);
      v14 = &md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeLeadingCharacterSet;
      v15 = md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet;
      if (!md::TextDataStringInfo::getBreakingCharacterSets(std::set<unsigned short> const*&,std::set<unsigned short> const*&)const::localeFollowingCharacterSet)
        goto LABEL_82;
      break;
  }
  v16 = *v14;
  if (!*v14)
    goto LABEL_82;
  {
    v55 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  if (v7 >> 62)
    abort();
  v56 = mdm::Allocator::instance(void)::alloc;
  v18 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 4 * v7, 4);
  v19 = v18;
  v20 = 0;
  do
  {
    if (v18 + v20)
      *(_DWORD *)(v18 + v20) = 0;
    v20 += 4;
  }
  while (4 * v7 != v20);
  if (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96) >= 2uLL)
  {
    v21 = 0;
    if (v7 <= 1)
      v22 = 1;
    else
      v22 = v7;
    v23 = v11;
    v24 = (_DWORD *)v18;
    do
    {
      v25 = *v23++;
      if (v25 == 30)
        ++v21;
      *v24++ = v21;
      --v22;
    }
    while (v22);
  }
  v26 = a4[1];
  v27 = v26 - *a4;
  if (v26 == *a4)
    goto LABEL_80;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = v27 / 24;
  if (v31 <= 1)
    v31 = 1;
  while (2)
  {
    v37 = *(_QWORD *)(*a3 + 8 * v28);
    if (v37 >= v7)
      goto LABEL_56;
    v38 = *a4 + 24 * v28;
    v39 = *(unsigned int *)(v19 + 4 * v37);
    v42 = *(unsigned __int8 *)(v38 + 20);
    v41 = (_BYTE *)(v38 + 20);
    v40 = v42;
    if (v39 != v29)
    {
      v40 = v40 & 0xFFFFFFEF | (16 * (*(_BYTE *)(*(_QWORD *)(a1 + 96) + v39) & 1));
      *v41 = v40;
      v29 = v39;
    }
    v43 = v11[v37];
    if (v43 - 0x2000 < 0xC || v43 == 32)
      v45 = 8;
    else
      v45 = 0;
    v46 = v45 | v40 & 0xFFFFFFF7;
    *v41 = v46;
    v47 = v46 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v29) >> 1) & 1));
    *v41 = v47;
    for (i = *(uint64_t ***)(v15 + 8); i; i = (uint64_t **)*i)
    {
      v50 = *((unsigned __int16 *)i + 13);
      if (v43 >= v50)
      {
        if (v50 >= v43)
        {
          v49 = 0;
          goto LABEL_73;
        }
        ++i;
      }
    }
    v49 = 2;
LABEL_73:
    v51 = v49 | v47 & 0xFD;
    *v41 = v51;
    v52 = *(uint64_t ***)(v16 + 8);
    if (!v52)
    {
LABEL_45:
      v32 = 1;
      goto LABEL_46;
    }
    while (1)
    {
      v53 = *((unsigned __int16 *)v52 + 13);
      if (v43 >= v53)
        break;
LABEL_75:
      v52 = (uint64_t **)*v52;
      if (!v52)
        goto LABEL_45;
    }
    if (v53 < v43)
    {
      ++v52;
      goto LABEL_75;
    }
    v32 = 0;
LABEL_46:
    v33 = v51 & 0xFE | v32;
    *v41 = v33;
    if (*(_BYTE *)(a1 + 128))
      v34 = v43 > 0x7F;
    else
      v34 = 0;
    v35 = v34;
    if (((v30 | v35) & 1) != 0)
      v36 = 4;
    else
      v36 = 0;
    *v41 = v36 | v33 & 0xFB;
    v30 = v35;
LABEL_56:
    if (++v28 != v31)
      continue;
    break;
  }
LABEL_80:
  if (v19)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v56 + 40))(v56, v19, 4 * v7);
LABEL_82:
  if (v11)
    (*(void (**)(uint64_t, unsigned __int16 *, unint64_t))(*(_QWORD *)v9 + 40))(v9, v11, 2 * v7);
LABEL_84:

}

void sub_19F18C534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v12;
  uint64_t v13;

  if (v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a11 + 40))(a11, v13, v12);

  _Unwind_Resume(a1);
}

BOOL gdc::DataObject::empty(id *this)
{
  return gdc::DataObject::length(this) == 0;
}

uint64_t std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void md::MapEngine::setNeedsTick(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[5];
  std::__shared_weak_count *v15;

  if (!*(_BYTE *)(a1 + 1182))
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 1179));
    v2 = 1 << *a2;
    v3 = (unint64_t *)(a1 + 1392);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 | v2, v3));
    v5 = (unsigned __int8 *)(a1 + 1180);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(1u, v5));
    if ((v6 & 1) == 0)
    {
      v7 = *(_QWORD *)(a1 + 120);
      v8 = *(std::__shared_weak_count **)(a1 + 128);
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      v11 = **(NSObject ***)(a1 + 8);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3321888768;
      v14[2] = ___ZN2md9MapEngine12setNeedsTickERKNS_15NeedsLayoutInfoE_block_invoke;
      v14[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__18weak_ptrIN2md17RunLoopControllerEEE_e5_v8__0l;
      v14[4] = v7;
      v15 = v8;
      if (v8)
      {
        v12 = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      dispatch_async(v11, v14);
      if (v15)
        std::__shared_weak_count::__release_weak(v15);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  unint64_t v16;
  const void *v17;
  int v18;
  uint64_t v19;
  const void *v20;
  int v21;
  uint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *__s2;
  uint64_t v38;
  uint64_t v39;

  v6 = *((_QWORD *)a2 + 13);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *((_QWORD *)a2 + 13);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *a2;
        v12 = *((unsigned __int16 *)a2 + 4);
        v13 = *((_QWORD *)a2 + 10);
        v14 = (const void *)*((_QWORD *)a2 + 2);
        v15 = *((_QWORD *)a2 + 3) - (_QWORD)v14;
        if (v8.u32[0] < 2uLL)
        {
          __s2 = (void *)*((_QWORD *)a2 + 2);
          while (1)
          {
            v19 = v10[1];
            if (v19 == v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                v20 = (const void *)v10[4];
                if (v10[5] - (_QWORD)v20 == v15)
                {
                  v39 = v13;
                  v21 = memcmp(v20, __s2, v15);
                  v13 = v39;
                  if (!v21)
                    return v10;
                }
              }
            }
            else if ((v19 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              v17 = (const void *)v10[4];
              if (v10[5] - (_QWORD)v17 == v15)
              {
                v38 = v13;
                v18 = memcmp(v17, v14, v15);
                v13 = v38;
                if (!v18)
                  return v10;
              }
            }
          }
          else
          {
            if (v16 >= v7)
              v16 %= v7;
            if (v16 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v10 = operator new(0x90uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v10 + 3), a3 + 8);
  *((_BYTE *)v10 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v10 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v10 + 112) = 1;
  }
  v22 = *(_QWORD *)(a3 + 104);
  v10[16] = 0;
  v10[17] = 0;
  v10[15] = v22;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v7 || (float)(v24 * (float)v7) < v23)
  {
    v25 = 1;
    if (v7 >= 3)
      v25 = (v7 & (v7 - 1)) != 0;
    v26 = v25 | (2 * v7);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_55;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_55:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v10 = *v34;
LABEL_69:
    *v34 = v10;
    goto LABEL_70;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v33 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v35 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v35 >= v7)
        v35 %= v7;
    }
    else
    {
      v35 &= v7 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void md::DaVinciMaterialLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 36)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_16;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_16:
    v9 = 0;
    v8 = 0;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD **)(v7 + 112);
  v8 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v8)
  {
LABEL_17:
    v53 = 1;
    goto LABEL_18;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v53 = 0;
LABEL_18:
  v15 = (_QWORD *)v9[20];
  v16 = (_QWORD *)v9[21];
  v17 = v9[18];
  if (v15 == v16 || !*(_QWORD *)(v17 + 16))
  {
    v37 = 0;
    goto LABEL_60;
  }
  while (1)
  {
    v19 = (_QWORD *)v9[18];
    v20 = v19[2];
    if (!v20)
      goto LABEL_23;
    v21 = (char *)v19[5];
    v22 = (char *)v19[6];
    if (v21 == v22)
      goto LABEL_23;
    v23 = v21;
    while (*(_QWORD *)v23 != *v15)
    {
      v23 += 16;
      if (v23 == v22)
      {
        v23 = v22;
        break;
      }
    }
    if (v23 == v22)
      goto LABEL_23;
    v24 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, (unint64_t)(v23 - v21) >> 4);
    if (!v24)
      goto LABEL_23;
    v25 = *(unsigned __int16 *)(v24 + 10);
    if (*(_WORD *)(v24 + 10))
    {
      v26 = *(char **)v24;
      if (*(_BYTE *)(v24 + 15))
      {
        if (v25 >= 0x1E)
        {
          v31 = *(char **)v24;
          v32 = *(unsigned __int16 *)(v24 + 10);
          do
          {
            v33 = v32 >> 1;
            v34 = (unsigned int *)&v31[4 * (v32 >> 1)];
            v36 = *v34;
            v35 = (char *)(v34 + 1);
            v32 += ~(v32 >> 1);
            if (v36 < 0x10059)
              v31 = v35;
            else
              v32 = v33;
          }
          while (v32);
          if (v31 == &v26[4 * v25] || *(_DWORD *)v31 != 65625)
            goto LABEL_23;
          v18 = (unint64_t)(v31 - v26) >> 2;
        }
        else
        {
          v27 = 0;
          while (1)
          {
            v28 = *(_DWORD *)&v26[4 * v27];
            if (v28 >= 0x10059)
              break;
            if (v25 == ++v27)
              goto LABEL_23;
          }
          LOWORD(v18) = v28 == 65625 ? v27 : *(_WORD *)(v24 + 10);
        }
      }
      else
      {
        v29 = 4 * v25;
        v30 = *(char **)v24;
        while (*(_DWORD *)v30 != 65625)
        {
          v30 += 4;
          v29 -= 4;
          if (!v29)
          {
            v30 = &v26[4 * v25];
            break;
          }
        }
        v18 = (unint64_t)(v30 - v26) >> 2;
      }
    }
    else
    {
      LOWORD(v18) = 0;
    }
    if ((_DWORD)v25 != (unsigned __int16)v18)
      break;
LABEL_23:
    v15 += 2;
    if (v15 == v16)
    {
      v37 = 0;
      goto LABEL_59;
    }
  }
  v37 = 1;
LABEL_59:
  v17 = v9[18];
LABEL_60:
  v38 = v9[24];
  v39 = (std::__shared_weak_count *)v9[19];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = v9[23];
  v43 = operator new(0xE8uLL);
  v44 = v43;
  v43[1] = 0;
  v43[2] = 0;
  *v43 = &off_1E42DAE50;
  v43[3] = &off_1E42B4768;
  v45 = (char *)(v43 + 3);
  do
  {
    v46 = __ldaxr(gdc::LayerData::nextId(void)::idGenerator);
    v47 = v46 + 1;
  }
  while (__stlxr(v47, gdc::LayerData::nextId(void)::idGenerator));
  *((_DWORD *)v43 + 8) = v47;
  *((_BYTE *)v43 + 40) = *(_BYTE *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v43 + 6), a1 + 8);
  *((_BYTE *)v44 + 136) = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    *((_DWORD *)v44 + 35) = *(_DWORD *)(a1 + 100);
    *((_BYTE *)v44 + 136) = 1;
  }
  v44[18] = *(_QWORD *)(a1 + 104);
  v44[19] = 0;
  *((_BYTE *)v44 + 184) = 1;
  v44[21] = 0;
  v44[22] = 0;
  v44[20] = 0;
  v44[3] = &off_1E428CF00;
  v44[24] = v38;
  v44[25] = v17;
  v44[26] = v39;
  if (v39)
  {
    v48 = (unint64_t *)&v39->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v44[27] = v42;
    *((_BYTE *)v44 + 224) = v37;
    *a3 = v45;
    a3[1] = v44;
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (v50)
    {
      if ((v53 & 1) != 0)
        return;
LABEL_78:
      v51 = (unint64_t *)&v8->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v53 & 1) == 0)
        goto LABEL_78;
    }
  }
  else
  {
    v44[27] = v42;
    *((_BYTE *)v44 + 224) = v37;
    *a3 = v45;
    a3[1] = v44;
    if ((v53 & 1) == 0)
      goto LABEL_78;
  }
}

uint64_t gms::LinearResolver::attributesForIndex(gms::LinearResolver *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v2) >> 3);
  v4 = v2 + 24 * a2;
  if (v3 <= a2)
    return 0;
  else
    return v4;
}

void md::RegionalResourceSetDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  id v8;
  char isKindOfClass;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 16))
    goto LABEL_17;
  v7 = *(_QWORD *)a2;
  v8 = *(id *)(*(_QWORD *)a2 + 16);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v10 = *(id *)(v7 + 16);
  }
  else
  {
    v11 = objc_alloc_init(MEMORY[0x1E0D27400]);
    v26[0] = *(_OWORD *)*((_QWORD *)a2 + 4);
    v12 = *(id *)(v7 + 16);
    objc_msgSend(v11, "decodeTile:forKey:", v12, v26);
    v10 = (id)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v10, "isMemberOfClass:", objc_opt_class()) & 1) == 0)
    {
      *a3 = 0;
      a3[1] = 0;

      return;
    }

  }
  if (!v10)
  {
LABEL_17:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v13 = operator new();
  v14 = v10;
  gdc::Resource::Resource(v13, (uint64_t)a1);
  *(_QWORD *)(v13 + 144) = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v14, "iconsCount"))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    objc_msgSend(v14, "icons", 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v23;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v23 != v18)
            objc_enumerationMutation(v16);
          objc_msgSend(v15, "addObject:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v19++));
        }
        while (v17 != v19);
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v17);
    }

  }
  v20 = *(void **)(v13 + 144);
  *(_QWORD *)(v13 + 144) = v15;

  v21 = (_QWORD *)operator new();
  *v21 = &off_1E42E6F78;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v13;
  *a3 = v13;
  a3[1] = (uint64_t)v21;

}

void sub_19F18D0F8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;

  v6 = *(void **)(v2 + 8);
  if (v6 != *(void **)(v2 + 24))
    free(v6);

  MEMORY[0x1A1AF4E00](v2, 0x1090C40010BC676);
  _Unwind_Resume(a1);
}

void md::GEOVectorTileResourceDecoder::decode(id *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  id v9;
  char isKindOfClass;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a3 + 16))
    goto LABEL_14;
  v8 = *(_QWORD *)a3;
  v9 = *(id *)(*(_QWORD *)a3 + 16);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v11 = *(id *)(v8 + 16);
  }
  else
  {
    v22 = *(_OWORD *)*((_QWORD *)a3 + 4);
    v12 = this[2];
    v13 = *(id *)(v8 + 16);
    objc_msgSend(v12, "decodeTile:forKey:", v13, &v22);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v11, "isMemberOfClass:", objc_opt_class()) & 1) == 0)
    {
      *a4 = 0;
      a4[1] = 0;

      return;
    }
  }
  if (!v11)
  {
LABEL_14:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  objc_msgSend(v11, "vectorTilePtr");
  v14 = operator new(0xB8uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E42DC6D0;
  v15 = gdc::Resource::Resource((uint64_t)(v14 + 3), (uint64_t)a2);
  v16 = *((_QWORD *)&v22 + 1);
  v14[21] = v22;
  v14[22] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    *a4 = v15;
    a4[1] = (uint64_t)v14;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    *a4 = v15;
    a4[1] = (uint64_t)v14;
  }

}

void sub_19F18D3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t gdc::Resource::Resource(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;

  v4 = (char *)(a1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 32;
  v5 = *(char **)(a2 + 8);
  v6 = *(char **)(a2 + 16);
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    if (v9 == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = v4;
      goto LABEL_20;
    }
    v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = v4 + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &v4[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = v4 + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &v4[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    v4 = *(char **)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = &v4[v7];
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 120) = 0;
  return a1;
}

void gdc::Timer::start(gdc::Timer *this, double a2, int a3)
{
  std::mutex *v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  dispatch_time_t v10;

  v6 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((_QWORD *)this + 10))
  {
    *((_BYTE *)this + 96) = 1;
    *((CFAbsoluteTime *)this + 11) = CFAbsoluteTimeGetCurrent() + a2;
    v7 = -1.0;
    if (a3)
      v7 = a2;
    *((double *)this + 1) = v7;
    v8 = *((_QWORD *)this + 10);
    if (a3)
      v9 = (unint64_t)(a2 * 1000000000.0);
    else
      v9 = -1;
    v10 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
    dispatch_source_set_timer(v8, v10, v9, 0xF4240uLL);
  }
  std::mutex::unlock(v6);
}

void md::LabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  int32x2_t *v20;
  __int32 v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unsigned __int8 v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[2];
  _BYTE v36[4];
  int32x2_t v37;
  void *__p[3];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;

  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v10 = *((_QWORD *)v8 + 3);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_16:
    v41 = v11;
    v42 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v41 = v11;
  v42 = v12;
  v15 = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  v39 = 0;
  v40 = 0;
  v18 = *(std::__shared_weak_count **)(a1 + 816);
  if (v18)
  {
    v19 = std::__shared_weak_count::lock(v18);
    v40 = v19;
    if (v19)
    {
      v39 = *(_QWORD *)(a1 + 808);
      if (v39)
      {
        memset(__p, 0, sizeof(__p));
        gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
        v20 = *(int32x2_t **)(a2 + 16);
        v21 = v20[1].i32[0];
        v36[0] = v20[1].i32[1];
        v36[1] = v21;
        v37 = vrev64_s32(*v20);
        v22 = v41;
        v23 = *(unsigned __int16 *)(a1 + 32);
        v24 = (std::__shared_weak_count *)operator new(0x170uLL);
        v25 = md::LabelLayerDataSource::toLabelTileType(v23);
        *(_OWORD *)&v24->__shared_owners_ = 0u;
        v26 = (unint64_t *)&v24->__shared_owners_;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF88;
        v43 = 0u;
        md::LabelTile::LabelTile((unsigned __int8 *)&v24[1], (uint64_t)v36, v22 + 144, v25, &v39, 0, &v43, 0);
        v35[0] = v27;
        v35[1] = v24;
        v28 = operator new(0x2F8uLL);
        v28[1] = 0;
        v28[2] = 0;
        *v28 = &off_1E42DB0F0;
        *a4 = md::LabelLayerData::LabelLayerData(v28 + 3, a2, v35, (uint64_t)__p);
        a4[1] = v28;
        do
          v29 = __ldaxr(v26);
        while (__stlxr(v29 - 1, v26));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        if (__p[0])
          operator delete(__p[0]);
        v19 = v40;
        if (!v40)
          goto LABEL_33;
        goto LABEL_30;
      }
    }
  }
  else
  {
    v19 = 0;
  }
  *a4 = 0;
  a4[1] = 0;
  if (!v19)
    goto LABEL_33;
LABEL_30:
  v30 = (unint64_t *)&v19->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v32 = v42;
    if (!v42)
      return;
    goto LABEL_34;
  }
LABEL_33:
  v32 = v42;
  if (!v42)
    return;
LABEL_34:
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
}

void sub_19F18D9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::__shared_weak_count *v19;
  void *v21;

  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLayerDataSource::toLabelTileType(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 13:
      result = 1;
      break;
    case 19:
      result = 3;
      break;
    case 20:
      result = 2;
      break;
    case 21:
      result = 9;
      break;
    case 22:
      result = 10;
      break;
    case 23:
      result = 11;
      break;
    case 24:
      result = 12;
      break;
    case 25:
      result = 5;
      break;
    case 26:
      result = 6;
      break;
    case 66:
      result = 13;
      break;
    case 69:
      result = 16;
      break;
    case 73:
      result = 14;
      break;
    case 74:
      result = 17;
      break;
    case 80:
      result = 15;
      break;
    default:
      return result;
  }
  return result;
}

void md::RegionalResourceLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  int *v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSArray *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;
  id v38;
  void *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  id v50;
  id *v51;
  id *v52;
  void *v53;
  id *v54;
  id *v55;
  id *v56;
  void (**v57)(id *);
  BOOL v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  uint64_t v64;
  md::ResourceInfo *v65;
  std::__shared_weak_count *v66;
  _QWORD v67[2];
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;

  v5 = *(int **)(a1 + 16);
  v6 = *((unsigned __int8 *)v5 + 8);
  v7 = 1.0 / (double)(1 << v6);
  v8 = v7 * (double)*v5;
  v9 = v7 * (double)((1 << v6) + ~v5[1]);
  v10 = v8 + v7;
  v11 = v9 + v7;
  v12 = (char *)operator new(0x70uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E42DAE88;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((_DWORD *)v12 + 18) = v6;
  *((double *)v12 + 10) = v8;
  *((double *)v12 + 11) = v9;
  *((double *)v12 + 12) = v10;
  *((double *)v12 + 13) = v11;
  *(_OWORD *)(v12 + 24) = 0u;
  v65 = (md::ResourceInfo *)(v12 + 24);
  v66 = (std::__shared_weak_count *)v12;
  v13 = *a2;
  v14 = a2[1];
  v15 = *a2;
  if (*a2 != v14)
  {
    v15 = *a2;
    while (*(_WORD *)v15 != 18)
    {
      v15 += 48;
      if (v15 == v14)
        goto LABEL_19;
    }
  }
  if (v15 != v14)
  {
    v16 = *(_QWORD **)(v15 + 24);
    if (v16)
    {
      do
      {
        v17 = v16[14];
        v18 = (std::__shared_weak_count *)v16[15];
        v68 = v17;
        v69 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        v21 = (NSArray *)*(id *)(v17 + 144);
        md::ResourceInfo::setResourceNames(v65, v21);

        if (v18)
        {
          v22 = (unint64_t *)&v18->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 = (_QWORD *)*v16;
      }
      while (v16);
      v13 = *a2;
      v14 = a2[1];
    }
  }
LABEL_19:
  if (v13 != v14)
  {
    while (*(_WORD *)v13 != 19)
    {
      v13 += 48;
      if (v13 == v14)
        goto LABEL_22;
    }
    if (v13 != v14)
    {
      v29 = *(_QWORD **)(v13 + 24);
      if (v29)
      {
        while (1)
        {
          v30 = v29[14];
          v31 = (std::__shared_weak_count *)v29[15];
          v63 = v29;
          v68 = v30;
          v69 = v31;
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v62 = v31;
          v35 = *(_QWORD *)(v30 + 144);
          v34 = *(_QWORD *)(v30 + 152);
          if (v35 != v34)
            break;
LABEL_64:
          if (v62)
          {
            v59 = (unint64_t *)&v62->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v29 = (_QWORD *)*v63;
          if (!*v63)
            goto LABEL_22;
        }
        v64 = *(_QWORD *)(v30 + 152);
        while (1)
        {
          v38 = *(id *)(v35 + 8);
          v39 = v38;
          v41 = (_QWORD *)*((_QWORD *)v65 + 4);
          v40 = *((_QWORD *)v65 + 5);
          if ((unint64_t)v41 < v40)
          {
            v36 = v38;
            *v41 = &off_1E42B4B30;
            v41[1] = v36;
            v37 = v41 + 3;
          }
          else
          {
            v42 = *((_QWORD *)v65 + 3);
            v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - v42) >> 3);
            v44 = v43 + 1;
            if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v42) >> 3);
            if (2 * v45 > v44)
              v44 = 2 * v45;
            if (v45 >= 0x555555555555555)
              v46 = 0xAAAAAAAAAAAAAAALL;
            else
              v46 = v44;
            if (v46)
            {
              if (v46 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v47 = (char *)operator new(24 * v46);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[24 * v43];
            v49 = &v47[24 * v46];
            v50 = v39;
            *(_QWORD *)v48 = &off_1E42B4B30;
            *((_QWORD *)v48 + 1) = v50;
            v37 = v48 + 24;
            v52 = (id *)*((_QWORD *)v65 + 3);
            v51 = (id *)*((_QWORD *)v65 + 4);
            if (v51 == v52)
            {
              *((_QWORD *)v65 + 3) = v48;
              *((_QWORD *)v65 + 4) = v37;
              *((_QWORD *)v65 + 5) = v49;
            }
            else
            {
              do
              {
                *((_QWORD *)v48 - 3) = &off_1E42B4B30;
                v48 -= 24;
                *((_QWORD *)v48 + 1) = 0;
                objc_storeStrong((id *)v48 + 1, *(v51 - 2));
                v53 = *(v51 - 2);
                *(v51 - 2) = 0;

                v51 -= 3;
              }
              while (v51 != v52);
              v51 = (id *)*((_QWORD *)v65 + 3);
              v54 = (id *)*((_QWORD *)v65 + 4);
              *((_QWORD *)v65 + 3) = v48;
              *((_QWORD *)v65 + 4) = v37;
              *((_QWORD *)v65 + 5) = v49;
              if (v54 != v51)
              {
                v55 = v54 - 3;
                v56 = v54 - 3;
                do
                {
                  v57 = (void (**)(id *))*v56;
                  v56 -= 3;
                  (*v57)(v55);
                  v58 = v55 == v51;
                  v55 = v56;
                }
                while (!v58);
                v34 = v64;
                if (!v51)
                  goto LABEL_41;
LABEL_63:
                operator delete(v51);
                goto LABEL_41;
              }
            }
            v34 = v64;
            if (v51)
              goto LABEL_63;
          }
LABEL_41:
          *((_QWORD *)v65 + 4) = v37;

          v35 += 24;
          if (v35 == v34)
            goto LABEL_64;
        }
      }
    }
  }
LABEL_22:
  v24 = operator new(0x2F8uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_1E42DD0E0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v67[0] = 0;
  v67[1] = 0;
  v25 = md::MapTileData::MapTileData((uint64_t)(v24 + 3), a1, (uint64_t)&v68, (uint64_t)v67, 1);
  v24[3] = &off_1E42A0F40;
  v24[82] = &unk_1E42A0F80;
  v24[93] = v65;
  v24[94] = v66;
  if (v66)
  {
    v26 = (unint64_t *)&v66->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *a3 = v25;
    a3[1] = (uint64_t)v24;
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  else
  {
    *a3 = v25;
    a3[1] = (uint64_t)v24;
  }
}

void sub_19F18DF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void md::DaVinciCenterLineRoadsLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int *v31;
  int v32;
  unsigned __int8 *v33;
  std::__sp_mut *sp_mut;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 v38;
  _QWORD *v39;
  int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void *__p[3];
  void *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71[2];
  __int128 v72;
  __int128 v73;
  __int128 *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v8 = (unsigned __int16 *)*a3;
  v7 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v7)
  {
    while (*(unsigned __int16 *)(a1 + 584) != *v8)
    {
      v8 += 24;
      if (v8 == v7)
        goto LABEL_40;
    }
  }
  if (v8 != v7)
  {
    std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v68, *((_QWORD *)v8 + 4));
    v9 = (_QWORD *)*((_QWORD *)v8 + 3);
    if (v9)
    {
      while (1)
      {
        v10 = v9[14];
        v11 = v9[15];
        *(_QWORD *)&v73 = v10;
        *((_QWORD *)&v73 + 1) = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v14 = v69;
        if (v69 >= (_QWORD *)v70)
          break;
        *v69 = v10;
        v14[1] = v11;
        v69 = v14 + 2;
LABEL_9:
        v9 = (_QWORD *)*v9;
        if (!v9)
          goto LABEL_40;
      }
      v15 = v68;
      v16 = ((char *)v69 - (_BYTE *)v68) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        abort();
      if ((v70 - (_BYTE *)v68) >> 3 > v17)
        v17 = (v70 - (_BYTE *)v68) >> 3;
      if ((unint64_t)(v70 - (_BYTE *)v68) >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(16 * v18);
      v20 = &v19[16 * v16];
      *(_OWORD *)v20 = v73;
      v21 = v20 + 16;
      v73 = 0uLL;
      if (v14 == v15)
      {
        v68 = v20;
        v70 = &v19[16 * v18];
        if (!v14)
          goto LABEL_33;
      }
      else
      {
        v22 = v14;
        do
        {
          v23 = *((_OWORD *)v22 - 1);
          v22 -= 2;
          *((_OWORD *)v20 - 1) = v23;
          v20 -= 16;
          *v22 = 0;
          v22[1] = 0;
        }
        while (v22 != v15);
        v68 = v20;
        v69 = v21;
        v70 = &v19[16 * v18];
        do
        {
          v24 = (std::__shared_weak_count *)*(v14 - 1);
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v14 -= 2;
        }
        while (v14 != v15);
        v14 = v15;
        if (!v15)
          goto LABEL_33;
      }
      operator delete(v14);
LABEL_33:
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      v69 = v21;
      if (*((_QWORD *)&v73 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      goto LABEL_9;
    }
  }
LABEL_40:
  v30 = *(unsigned __int16 *)(a1 + 32);
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  if (v68 == v69)
    v31 = *(int **)(a2 + 16);
  else
    v31 = (int *)(*(_QWORD *)(*(_QWORD *)v68 + 8) + 8);
  v32 = *v31;
  v33 = *(unsigned __int8 **)(a1 + 824);
  if (v33)
  {
    md::ElevationRequestUpdater::getDsmResource(&v65, v33, a3);
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  sp_mut = std::__get_sp_mut((const void *)(a1 + 752));
  std::__sp_mut::lock(sp_mut);
  v35 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)&v64 = *(_QWORD *)(a1 + 752);
  *((_QWORD *)&v64 + 1) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  std::__sp_mut::unlock(sp_mut);
  v38 = atomic_load((unsigned __int8 *)(a1 + 816));
  v39 = operator new(0x378uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = &off_1E42DD9D8;
  v40 = *(unsigned __int8 *)(a1 + 776);
  v72 = v64;
  v41 = *(void **)(a1 + 768);
  v42 = *(_QWORD *)(a1 + 808);
  if (!v42)
  {
    v43 = 0;
    goto LABEL_53;
  }
  if (v42 != a1 + 784)
  {
    v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v42 + 16))(*(_QWORD *)(a1 + 808));
LABEL_53:
    v74 = (__int128 *)v43;
    goto LABEL_55;
  }
  v74 = &v73;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 784) + 24))(a1 + 784, &v73);
LABEL_55:
  v44 = v32 & 0xF0;
  v45 = (std::__shared_weak_count *)v66;
  v71[0] = v65;
  v71[1] = v66;
  if (v66)
  {
    v46 = (unint64_t *)(v66 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData((uint64_t)(v39 + 3), v30, a2, (uint64_t)__p, (uint64_t)&v68, v44 != 0, v40 != 0, (uint64_t *)&v72, v41, (uint64_t)&v73, v38 & 1, v71);
  if (v45)
  {
    v48 = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v50 = v74;
  if (v74 == &v73)
  {
    v51 = 4;
    v50 = &v73;
    goto LABEL_67;
  }
  if (v74)
  {
    v51 = 5;
LABEL_67:
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *a4 = v39 + 3;
  a4[1] = v39;
  v55 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v56 = (unint64_t *)(v66 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  v58 = v68;
  if (v68)
  {
    v59 = v69;
    if (v69 != v68)
    {
      do
      {
        v60 = (std::__shared_weak_count *)*(v59 - 1);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v59 -= 2;
      }
      while (v59 != v58);
      v58 = v68;
    }
    operator delete(v58);
  }
}

void sub_19F18E528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a22);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void md::SelectedRoadLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int32x2_t *v12;
  __int32 v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  _QWORD *v17;
  void *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  id v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  gss::Allocator *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t *v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 *v90[3];
  uint64_t v91[2];
  uint64_t v92[2];
  _QWORD *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101[2];
  __int128 __p;
  int v103;
  __int128 v104;
  void *v105[4];
  std::__shared_weak_count *v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  void *v109;
  uint64_t *v110;
  uint64_t *v111;
  char *v112;
  __int16 v113;
  int32x2_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;

  if (*(_WORD *)(a1 + 32) != 68)
  {
    md::RoadLayerDataSource::createLayerData(a1, a2, a3, a4);
    return;
  }
  sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
  std::__sp_mut::lock(sp_mut);
  v9 = *(std::__shared_weak_count **)(a1 + 768);
  v115 = *(_QWORD *)(a1 + 760);
  v116 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  v12 = *(int32x2_t **)(a2 + 16);
  v13 = v12[1].i32[0];
  LOBYTE(v113) = v12[1].i32[1];
  HIBYTE(v113) = v13;
  v114 = vrev64_s32(*v12);
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v15 = (unsigned __int16 *)*a3;
  v14 = (unsigned __int16 *)a3[1];
  v16 = (unsigned __int16 *)*a3;
  v89 = a4;
  if ((unsigned __int16 *)*a3 != v14)
  {
    v16 = (unsigned __int16 *)*a3;
    while (*(unsigned __int16 *)(a1 + 584) != *v16)
    {
      v16 += 24;
      if (v16 == v14)
        goto LABEL_46;
    }
  }
  if (v16 != v14)
  {
    std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v110, *((_QWORD *)v16 + 4));
    v17 = (_QWORD *)*((_QWORD *)v16 + 3);
    if (v17)
    {
      while (1)
      {
        v18 = (void *)v17[14];
        v19 = (unint64_t *)v17[15];
        v101[0] = v18;
        v101[1] = v19;
        if (v19)
        {
          v20 = v19 + 1;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v111;
        if (v111 >= (uint64_t *)v112)
          break;
        *v111 = (uint64_t)v18;
        v22[1] = (uint64_t)v19;
        v111 = v22 + 2;
LABEL_15:
        v17 = (_QWORD *)*v17;
        if (!v17)
          goto LABEL_86;
      }
      v23 = v110;
      v24 = ((char *)v111 - (char *)v110) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        abort();
      if ((v112 - (char *)v110) >> 3 > v25)
        v25 = (v112 - (char *)v110) >> 3;
      if ((unint64_t)(v112 - (char *)v110) >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26 >> 60)
LABEL_143:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v27 = (char *)operator new(16 * v26);
      v28 = (uint64_t *)&v27[16 * v24];
      *(_OWORD *)v28 = *(_OWORD *)v101;
      v29 = v28 + 2;
      v101[0] = 0;
      v101[1] = 0;
      if (v22 == v23)
      {
        v110 = v28;
        v112 = &v27[16 * v26];
        if (!v22)
          goto LABEL_39;
      }
      else
      {
        v30 = v22;
        do
        {
          v31 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v28 - 1) = v31;
          v28 -= 2;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != v23);
        v110 = v28;
        v111 = v29;
        v112 = &v27[16 * v26];
        do
        {
          v32 = (std::__shared_weak_count *)*(v22 - 1);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v22 -= 2;
        }
        while (v22 != v23);
        v22 = v23;
        if (!v23)
          goto LABEL_39;
      }
      operator delete(v22);
LABEL_39:
      v111 = v29;
      if (v101[1])
      {
        v35 = (unint64_t *)((char *)v101[1] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          (*(void (**)(void *))(*(_QWORD *)v101[1] + 16))(v101[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v101[1]);
        }
      }
      goto LABEL_15;
    }
    goto LABEL_86;
  }
LABEL_46:
  if (*(_BYTE *)(a1 + 850))
  {
    if (v15 != v14)
    {
      while (*(unsigned __int16 *)(a1 + 848) != *v15)
      {
        v15 += 24;
        if (v15 == v14)
          goto LABEL_86;
      }
    }
    if (v15 != v14)
    {
      std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v110, *((_QWORD *)v15 + 4));
      v37 = (_QWORD *)*((_QWORD *)v15 + 3);
      if (v37)
      {
        while (1)
        {
          v38 = (void *)v37[14];
          v39 = (unint64_t *)v37[15];
          v101[0] = v38;
          v101[1] = v39;
          if (v39)
          {
            v40 = v39 + 1;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v42 = v111;
          if (v111 >= (uint64_t *)v112)
            break;
          *v111 = (uint64_t)v38;
          v42[1] = (uint64_t)v39;
          v111 = v42 + 2;
LABEL_55:
          v37 = (_QWORD *)*v37;
          if (!v37)
            goto LABEL_86;
        }
        v43 = v110;
        v44 = ((char *)v111 - (char *)v110) >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          abort();
        if ((v112 - (char *)v110) >> 3 > v45)
          v45 = (v112 - (char *)v110) >> 3;
        if ((unint64_t)(v112 - (char *)v110) >= 0x7FFFFFFFFFFFFFF0)
          v46 = 0xFFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46 >> 60)
          goto LABEL_143;
        v47 = (char *)operator new(16 * v46);
        v48 = (uint64_t *)&v47[16 * v44];
        *(_OWORD *)v48 = *(_OWORD *)v101;
        v49 = v48 + 2;
        v101[0] = 0;
        v101[1] = 0;
        if (v42 == v43)
        {
          v110 = v48;
          v112 = &v47[16 * v46];
          if (!v42)
            goto LABEL_79;
        }
        else
        {
          v50 = v42;
          do
          {
            v51 = *((_OWORD *)v50 - 1);
            v50 -= 2;
            *((_OWORD *)v48 - 1) = v51;
            v48 -= 2;
            *v50 = 0;
            v50[1] = 0;
          }
          while (v50 != v43);
          v110 = v48;
          v111 = v49;
          v112 = &v47[16 * v46];
          do
          {
            v52 = (std::__shared_weak_count *)*(v42 - 1);
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v42 -= 2;
          }
          while (v42 != v43);
          v42 = v43;
          if (!v43)
            goto LABEL_79;
        }
        operator delete(v42);
LABEL_79:
        v111 = v49;
        if (v101[1])
        {
          v55 = (unint64_t *)((char *)v101[1] + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            (*(void (**)(void *))(*(_QWORD *)v101[1] + 16))(v101[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v101[1]);
          }
        }
        goto LABEL_55;
      }
    }
  }
LABEL_86:
  v57 = *(id *)(a1 + 784);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)objc_msgSend(v57, "gglDevice") + 24))(&v109);

  v58 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v58->__shared_owners_ = 0;
  v59 = (unint64_t *)&v58->__shared_owners_;
  v58->__shared_weak_owners_ = 0;
  v58->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  ggl::BufferData::BufferData((uint64_t)&v58[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v58[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v58[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v107 = &v58[1].__vftable;
  v108 = v58;
  v60 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v60->__shared_owners_ = 0;
  v61 = (unint64_t *)&v60->__shared_owners_;
  v60->__shared_weak_owners_ = 0;
  v60->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  ggl::BufferData::BufferData((uint64_t)&v60[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v60[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v60[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v105[3] = &v60[1];
  v106 = v60;
  memset(v105, 0, 24);
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v105);
  __p = 0u;
  *(_OWORD *)v101 = 0u;
  v103 = 1065353216;
  v99 = 0;
  v100 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = gss::Allocator::instance(v62);
  v93 = &v58[1].__vftable;
  v94 = v58;
  do
    v63 = __ldxr(v59);
  while (__stxr(v63 + 1, v59));
  v92[0] = (uint64_t)&v60[1];
  v92[1] = (uint64_t)v60;
  do
    v64 = __ldxr(v61);
  while (__stxr(v64 + 1, v61));
  v91[0] = 0;
  v91[1] = 0;
  memset(v90, 0, sizeof(v90));
  md::RoadLayerDataSource::buildRoadTileData(&v104, (_QWORD *)a1, a2, &v109, &v113, &v110, v101, &v100, &v99, (uint64_t)&v95, &v93, v92, v91, v90, (uint64_t)v105);
  *v89 = v104;
  v104 = 0uLL;
  do
    v65 = __ldaxr(v61);
  while (__stlxr(v65 - 1, v61));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  v66 = v94;
  if (v94)
  {
    v67 = (unint64_t *)&v94->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v95)
  {
    v96 = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98 + 40))(v98, v95, v97 - v95);
  }
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v69 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v70 = (_QWORD *)*v69;
      operator delete(v69);
      v69 = v70;
    }
    while (v70);
  }
  if (v101[0])
    operator delete(v101[0]);
  if (v105[0])
    operator delete(v105[0]);
  v71 = v106;
  if (v106)
  {
    v72 = (unint64_t *)&v106->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v108;
  if (v108)
  {
    v75 = (unint64_t *)&v108->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v109)
  {
    v77 = (*(uint64_t (**)(void *))(*(_QWORD *)v109 + 24))(v109);
    v78 = v109;
    v109 = 0;
    v101[0] = v78;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v77 + 48))(v77, v101);
    v79 = v101[0];
    v101[0] = 0;
    if (v79)
      (*(void (**)(void *))(*(_QWORD *)v79 + 8))(v79);
    v80 = v109;
    v109 = 0;
    if (v80)
      (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  }
  v81 = v110;
  if (v110)
  {
    v82 = v111;
    if (v111 != v110)
    {
      do
      {
        v83 = (std::__shared_weak_count *)*(v82 - 1);
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v82 -= 2;
      }
      while (v82 != v81);
      v81 = v110;
    }
    operator delete(v81);
  }
  v86 = v116;
  if (v116)
  {
    v87 = (unint64_t *)&v116->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_19F18EF6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 - 160));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void md::AttributesLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  geo::codec::VectorTile *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *__p[3];
  _QWORD v36[2];
  uint64_t v37;
  std::__shared_weak_count *v38;

  v7 = (unsigned __int16 *)*a3;
  v8 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*v7 != *(unsigned __int16 *)(a1 + 584))
    {
      v7 += 24;
      if (v7 == v8)
        goto LABEL_17;
    }
  }
  if (v7 == v8 || *((_QWORD *)v7 + 4) != 1)
  {
LABEL_17:
    v10 = 0;
LABEL_18:
    v37 = v10;
    v38 = 0;
    if (v10)
      goto LABEL_19;
    goto LABEL_15;
  }
  v9 = *((_QWORD *)v7 + 3);
  v10 = *(_QWORD *)(v9 + 112);
  v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v37 = v10;
  v38 = v11;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v10 = v37;
    if (v37)
      goto LABEL_19;
LABEL_15:
    *a4 = 0;
    a4[1] = 0;
    v17 = v38;
    if (!v38)
      return;
    goto LABEL_36;
  }
  v10 = v37;
  if (!v37)
    goto LABEL_15;
LABEL_19:
  v18 = *(geo::codec::VectorTile **)(v10 + 144);
  v19 = *(std::__shared_weak_count **)(v10 + 152);
  v36[0] = v18;
  v36[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v18
    && (v22 = *(_QWORD *)geo::codec::VectorTile::attributes(v18)) != 0
    && (v23 = *(unsigned __int8 *)(v22 + 33), *(_BYTE *)(v22 + 33)))
  {
    v24 = 0;
    v25 = *(int **)v22;
    v26 = v25;
    while (1)
    {
      v27 = *v26;
      v26 += 2;
      if (v27 == 41)
        break;
      if (v23 == ++v24)
        goto LABEL_28;
    }
    v28 = v25[2 * v24 + 1];
  }
  else
  {
LABEL_28:
    v28 = -1;
  }
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  v29 = operator new(0x2E8uLL);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = &off_1E42DBB70;
  v30 = md::MapTileData::MapTileData((uint64_t)(v29 + 3), a2, (uint64_t)__p, (uint64_t)v36, 1);
  v29[3] = &off_1E4293F60;
  v29[82] = &unk_1E4293FA0;
  *((_DWORD *)v29 + 185) = v28;
  *a4 = v30;
  a4[1] = (uint64_t)v29;
  if (__p[0])
    operator delete(__p[0]);
  if (!v19)
    goto LABEL_35;
  v31 = (unint64_t *)&v19->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v17 = v38;
    if (!v38)
      return;
  }
  else
  {
LABEL_35:
    v17 = v38;
    if (!v38)
      return;
  }
LABEL_36:
  v33 = (unint64_t *)&v17->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_19F18F2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::DaVinciAssetLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  id v18;
  unsigned int v19;
  unsigned int v20;
  geo::codec::Allocator *v21;
  uint64_t v22;
  geo::codec::Allocator *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    while (*(_WORD *)v7 != 28)
    {
      v7 += 48;
      if (v7 == v8)
        goto LABEL_15;
    }
  }
  if (v7 == v8 || *(_QWORD *)(v7 + 32) != 1)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(v7 + 24);
  v10 = *(_QWORD *)(v9 + 112);
  v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11)
  {
LABEL_16:
    v37 = v10;
    v38 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v37 = v10;
  v38 = v11;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_17:
  v36 = *(id *)(a1 + 592);
  v17 = (char *)operator new(0x220uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1E42DDEE0;
  v18 = v36;
  *((_QWORD *)v17 + 3) = &off_1E42B4768;
  do
  {
    v19 = __ldaxr(gdc::LayerData::nextId(void)::idGenerator);
    v20 = v19 + 1;
  }
  while (__stlxr(v20, gdc::LayerData::nextId(void)::idGenerator));
  *((_DWORD *)v17 + 8) = v20;
  v17[40] = *(_BYTE *)a2;
  v21 = (geo::codec::Allocator *)gdc::LayerDataKey::LayerDataKey((uint64_t)(v17 + 48), a2 + 8);
  v17[136] = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    *((_DWORD *)v17 + 35) = *(_DWORD *)(a2 + 100);
    v17[136] = 1;
  }
  v22 = *(_QWORD *)(a2 + 104);
  *((_QWORD *)v17 + 3) = &off_1E42AF720;
  *((_QWORD *)v17 + 18) = v22;
  *((_QWORD *)v17 + 19) = 0;
  v17[184] = 1;
  *((_QWORD *)v17 + 21) = 0;
  *((_QWORD *)v17 + 22) = 0;
  *((_QWORD *)v17 + 20) = 0;
  *((_QWORD *)v17 + 24) = **(_QWORD **)(a2 + 16);
  *((_QWORD *)v17 + 36) = 0;
  *((_QWORD *)v17 + 37) = 0;
  *(_OWORD *)(v17 + 248) = 0u;
  *(_OWORD *)(v17 + 264) = 0u;
  *(_OWORD *)(v17 + 216) = 0u;
  *(_OWORD *)(v17 + 232) = 0u;
  *(_OWORD *)(v17 + 200) = 0u;
  *((_QWORD *)v17 + 35) = v17 + 288;
  *((_OWORD *)v17 + 21) = 0u;
  *((_OWORD *)v17 + 22) = 0u;
  *((_DWORD *)v17 + 92) = 1065353216;
  *((_QWORD *)v17 + 48) = 0;
  *((_QWORD *)v17 + 49) = 0;
  *((_QWORD *)v17 + 47) = v17 + 384;
  *((_DWORD *)v17 + 100) = 1065353216;
  *(_OWORD *)(v17 + 408) = 0u;
  *(_OWORD *)(v17 + 424) = 0u;
  *((_DWORD *)v17 + 110) = 1065353216;
  *((_QWORD *)v17 + 57) = 0;
  *((_QWORD *)v17 + 58) = 0;
  *((_QWORD *)v17 + 56) = 0;
  *((_QWORD *)v17 + 61) = 0;
  *((_QWORD *)v17 + 62) = 0;
  v23 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v21);
  *((_QWORD *)v17 + 63) = v23;
  *((_QWORD *)v17 + 64) = 0;
  *((_QWORD *)v17 + 65) = geo::codec::Allocator::instance(v23);
  *((_QWORD *)v17 + 66) = 0;
  *((_DWORD *)v17 + 134) = 1065353216;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v18, "gglDevice") + 24))(&v41);
  v42[0] = &off_1E42D47F8;
  v42[1] = &v37;
  v42[2] = v17 + 24;
  v43 = v42;
  v39 = 0;
  v40 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v41 + 16))(v41, v42, &v39);
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v43;
  if (v43 == v42)
  {
    v28 = 4;
    v27 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_31;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_31:
  if (v41)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
    v30 = v41;
    v41 = 0;
    v42[0] = v30;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 48))(v29, v42);
    v31 = v42[0];
    v42[0] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v41;
    v41 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }

  *a4 = v17 + 24;
  a4[1] = v17;

  v33 = v38;
  if (v38)
  {
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_19F18F6E0(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::areAllMapTilesReady(md::CompositeLabeler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 == v2)
    return 1;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 96))(*(_QWORD *)(v3 - 8));
    if ((_DWORD)result)
      v5 = v3 == v2;
    else
      v5 = 1;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::Labeler::areAllMapTilesReady(md::Labeler *this)
{
  return 1;
}

BOOL md::StandardLabeler::areAllMapTilesReady(md::StandardLabeler *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  return *(_BYTE *)(v1 + 759) && *(_BYTE *)(v1 + 760) != 0;
}

void md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  v6 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>((_QWORD *)(a2 + 32), *a3, (unsigned __int16 *)a3);
  if (v6)
  {
    v7 = v6;
    v8 = (uint64_t *)v6[6];
    if (v8 != (uint64_t *)a2)
    {
      v9 = *(uint64_t **)(a2 + 8);
      if (v9 != v8)
      {
        v10 = (uint64_t *)v8[1];
        if (v10 != v9)
        {
          v11 = *v8;
          *(_QWORD *)(v11 + 8) = v10;
          *(_QWORD *)v8[1] = v11;
          v12 = *v9;
          *(_QWORD *)(v12 + 8) = v8;
          *v8 = v12;
          *v9 = (uint64_t)v8;
          v8[1] = (uint64_t)v9;
        }
      }
      ++*(_DWORD *)(a2 + 92);
      v14 = v8[4];
      v13 = v8[5];
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v13;
      if (v13)
      {
        v15 = (unint64_t *)(v13 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      goto LABEL_12;
    }
    if (*((_BYTE *)v6 + 56))
    {
      ++*(_DWORD *)(a2 + 92);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
LABEL_12:
      *(_BYTE *)(a1 + 16) = 1;
      return;
    }
    v17 = (std::__shared_weak_count *)v6[5];
    if (v17)
    {
      v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        v19 = v18;
        v20 = v7[4];
        if (v20)
        {
          v21 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 48, 8);
          *v21 = 0;
          v21[1] = 0;
          v21[2] = *a3;
          v22 = a3[1];
          v21[3] = v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v21[4] = v20;
          v21[5] = v19;
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          *v21 = a2;
          v27 = *(_QWORD **)(a2 + 8);
          v21[1] = v27;
          *v27 = v21;
          v28 = *(_QWORD *)(a2 + 16) + 1;
          *(_QWORD *)(a2 + 8) = v21;
          *(_QWORD *)(a2 + 16) = v28;
          v7[6] = v21;
          ++*(_DWORD *)(a2 + 92);
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v19;
          goto LABEL_12;
        }
        v29 = (unint64_t *)&v18->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  ++*(_DWORD *)(a2 + 96);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void sub_19F18FC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>(_QWORD *a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int *v3;
  unsigned int *v4;
  char *v5;
  unint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;

  v3 = *(unsigned int **)(a2 + 240);
  v4 = *(unsigned int **)(a2 + 248);
  v5 = (char *)((char *)v4 - (char *)v3);
  v6 = ((char *)v4 - (char *)v3) >> 3;
  if (v4 != v3)
  {
    v7 = *(unsigned int **)(a2 + 240);
    do
    {
      v8 = ((v6 << 6) - 0x61C8864680B583EBLL + (v6 >> 2) + *v7) ^ v6;
      v6 = (*((unsigned __int16 *)v7 + 2) - 0x61C8864680B583EBLL + (v8 << 6) + (v8 >> 2)) ^ v8;
      v7 += 2;
    }
    while (v7 != v4);
  }
  v9 = *(unsigned __int16 *)(a2 + 282);
  if (*(_WORD *)(a2 + 282))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(a2 + 272);
    do
    {
      if (v12 < v9)
      {
        v11 = (unsigned int *)(v13 + 4 * v12);
        a3 = (unsigned __int16 *)(v13 + *(unsigned __int16 *)(a2 + 280) + 2 * v12);
      }
      v10 ^= (*a3
            - 0x61C8864680B583EBLL
            + ((((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v11) ^ v10) << 6)
            + ((((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v11) ^ v10) >> 2)) ^ ((v10 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v10 >> 2)
                                                                                       + *v11);
      v14 = v12 + 1;
      if (v12 + 1 < v9)
        ++v12;
      else
        v12 = *(unsigned __int16 *)(a2 + 282);
    }
    while (v14 < v9);
    v15 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v15)
      return 0;
  }
  else
  {
    v10 = 0;
    v15 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v15)
      return 0;
  }
  v16 = v10 ^ v6;
  v17 = (uint8x8_t)vcnt_s8(v15);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = v16;
    if (v16 >= *(_QWORD *)&v15)
      v18 = v16 % *(_QWORD *)&v15;
  }
  else
  {
    v18 = (*(_QWORD *)&v15 - 1) & v16;
  }
  v19 = *(_QWORD **)(*a1 + 8 * v18);
  if (!v19)
    return 0;
  result = (_QWORD *)*v19;
  if (!*v19)
    return result;
  while (1)
  {
    v21 = result[1];
    if (v21 != v16)
    {
      if (v17.u32[0] <= 1uLL)
      {
        v21 &= *(_QWORD *)&v15 - 1;
      }
      else if (v21 >= *(_QWORD *)&v15)
      {
        v21 %= *(_QWORD *)&v15;
      }
      if (v21 != v18)
        return 0;
      goto LABEL_24;
    }
    v22 = result[2];
    v23 = *(_QWORD *)(v22 + 240);
    v24 = *(_QWORD *)(v22 + 248);
    if ((char *)(v24 - v23) == v5)
    {
      if (v23 != v24)
      {
        v25 = *(_QWORD *)(a2 + 240);
        while (*(_DWORD *)v23 == *(_DWORD *)v25 && *(unsigned __int16 *)(v23 + 4) == *(unsigned __int16 *)(v25 + 4))
        {
          v23 += 8;
          v25 += 8;
          if (v23 == v24)
            goto LABEL_35;
        }
        goto LABEL_24;
      }
LABEL_35:
      v27 = *(unsigned __int16 *)(v22 + 282);
      if ((_DWORD)v27 == v9)
      {
        if (!*(_WORD *)(a2 + 282))
          return result;
        v28 = *(_DWORD **)(v22 + 272);
        v29 = *(_DWORD **)(a2 + 272);
        if (*v28 == *v29)
        {
          v30 = *(unsigned __int16 *)(a2 + 280);
          v31 = *(unsigned __int16 *)(v22 + 280);
          if (*(unsigned __int16 *)((char *)v28 + v31) == *(unsigned __int16 *)((char *)v29 + v30))
            break;
        }
      }
    }
LABEL_24:
    result = (_QWORD *)*result;
    if (!result)
      return result;
  }
  v32 = 0;
  v33 = v28 + 1;
  v34 = v29 + 1;
  v35 = (uint64_t)v28 + v31 + 2;
  v36 = (uint64_t)v29 + v30 + 2;
  while (v27 - 1 != v32)
  {
    if (v33[v32] != v34[v32])
    {
      if (v32 + 1 < v27)
        goto LABEL_24;
      return result;
    }
    v37 = *(unsigned __int16 *)(v35 + 2 * v32);
    v38 = *(unsigned __int16 *)(v36 + 2 * v32++);
    if (v37 != v38)
    {
      if (v32 < v27)
        goto LABEL_24;
      return result;
    }
  }
  return result;
}

void md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::insert(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  char *v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  float v62;
  float v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  size_t prime;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  size_t v73;
  size_t v74;
  size_t v75;
  _QWORD *i;
  size_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  size_t v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  char v112;

  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 48, 8);
  v10 = v7;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = *a2;
  v11 = a2[1];
  v7[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v7[4] = *a3;
  v14 = a3[1];
  v7[5] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *v7 = a1;
  v17 = *(_QWORD **)(a1 + 8);
  v7[1] = v17;
  *v17 = v7;
  v18 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)a3;
  v20 = a3[1];
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 16);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = *a3;
  }
  else
  {
    v23 = *a3;
  }
  v24 = v23 == 0;
  v25 = *a2;
  v26 = *(unsigned int **)(*a2 + 240);
  v27 = *(unsigned int **)(*a2 + 248);
  v28 = (char *)((char *)v27 - (char *)v26);
  v29 = ((char *)v27 - (char *)v26) >> 3;
  if (v27 != v26)
  {
    v30 = *(unsigned int **)(*a2 + 240);
    do
    {
      v31 = ((v29 << 6) - 0x61C8864680B583EBLL + (v29 >> 2) + *v30) ^ v29;
      v29 = (*((unsigned __int16 *)v30 + 2) - 0x61C8864680B583EBLL + (v31 << 6) + (v31 >> 2)) ^ v31;
      v30 += 2;
    }
    while (v30 != v27);
  }
  v32 = *(unsigned __int16 *)(v25 + 282);
  if (*(_WORD *)(v25 + 282))
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *(_QWORD *)(v25 + 272);
    do
    {
      if (v35 < v32)
      {
        v34 = (unsigned int *)(v36 + 4 * v35);
        v8 = (unsigned __int16 *)(v36 + *(unsigned __int16 *)(v25 + 280) + 2 * v35);
      }
      v33 ^= (*v8
            - 0x61C8864680B583EBLL
            + ((((v33 << 6) - 0x61C8864680B583EBLL + (v33 >> 2) + *v34) ^ v33) << 6)
            + ((((v33 << 6) - 0x61C8864680B583EBLL + (v33 >> 2) + *v34) ^ v33) >> 2)) ^ ((v33 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v33 >> 2)
                                                                                       + *v34);
      v9 = v35 + 1;
      if (v9 < v32)
        ++v35;
      else
        v35 = *(unsigned __int16 *)(v25 + 282);
    }
    while (v9 < v32);
  }
  else
  {
    v33 = 0;
  }
  v37 = (uint64_t *)(a1 + 32);
  v38 = v33 ^ v29;
  v39 = *(_QWORD *)(a1 + 40);
  v109 = v19;
  if (!v39)
    goto LABEL_60;
  v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
  v40.i16[0] = vaddlv_u8(v40);
  if (v40.u32[0] > 1uLL)
  {
    v3 = v33 ^ v29;
    if (v38 >= v39)
      v3 = v38 % v39;
  }
  else
  {
    v3 = (v39 - 1) & v38;
  }
  v41 = *(uint64_t ***)(*v37 + 8 * v3);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_60:
    v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 64, 8);
    v58 = v57;
    v110 = v57;
    v111 = (_QWORD *)(a1 + 64);
    *(_QWORD *)v57 = 0;
    *(_QWORD *)(v57 + 8) = v38;
    *(_QWORD *)(v57 + 16) = *a2;
    v59 = a2[1];
    *(_QWORD *)(v57 + 24) = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    *(_OWORD *)(v57 + 32) = v109;
    *(_QWORD *)(v57 + 48) = v10;
    *(_BYTE *)(v57 + 56) = v24;
    v112 = 1;
    v62 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
    v63 = *(float *)(a1 + 80);
    if (v39 && (float)(v63 * (float)v39) >= v62)
    {
LABEL_112:
      v85 = *(uint64_t **)(*v37 + 8 * v3);
      if (v85)
      {
        *(_QWORD *)v58 = *v85;
      }
      else
      {
        *(_QWORD *)v58 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v58;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = a1 + 56;
        if (!*(_QWORD *)v58)
        {
LABEL_121:
          ++*(_QWORD *)(a1 + 72);
          goto LABEL_135;
        }
        v86 = *(_QWORD *)(*(_QWORD *)v58 + 8);
        if ((v39 & (v39 - 1)) != 0)
        {
          if (v86 >= v39)
            v86 %= v39;
        }
        else
        {
          v86 &= v39 - 1;
        }
        v85 = (uint64_t *)(*v37 + 8 * v86);
      }
      *v85 = v58;
      goto LABEL_121;
    }
    v64 = 1;
    if (v39 >= 3)
      v64 = (v39 & (v39 - 1)) != 0;
    v65 = v64 | (2 * v39);
    v66 = vcvtps_u32_f32(v62 / v63);
    if (v65 <= v66)
      prime = v66;
    else
      prime = v65;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(_QWORD *)(a1 + 40);
    if (prime <= v39)
    {
      if (prime >= v39)
        goto LABEL_99;
      v79 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v39 < 3 || (v80 = (uint8x8_t)vcnt_s8((int8x8_t)v39), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
      {
        v79 = std::__next_prime(v79);
      }
      else
      {
        v81 = 1 << -(char)__clz(v79 - 1);
        if (v79 >= 2)
          v79 = v81;
      }
      if (prime <= v79)
        prime = v79;
      if (prime >= v39)
      {
        v39 = *(_QWORD *)(a1 + 40);
LABEL_99:
        if ((v39 & (v39 - 1)) != 0)
        {
          if (v38 >= v39)
            v3 = v38 % v39;
          else
            v3 = v38;
        }
        else
        {
          v3 = (v39 - 1) & v38;
        }
        goto LABEL_112;
      }
      if (!prime)
      {
        v87 = *v37;
        *v37 = 0;
        if (v87)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v87, 8 * *(_QWORD *)(a1 + 40));
        v39 = 0;
        *(_QWORD *)(a1 + 40) = 0;
        goto LABEL_99;
      }
    }
    v68 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 8 * prime, 8);
    v69 = *v37;
    *v37 = v68;
    if (v69)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v69, 8 * *(_QWORD *)(a1 + 40));
    v70 = 0;
    *(_QWORD *)(a1 + 40) = prime;
    do
      *(_QWORD *)(*v37 + 8 * v70++) = 0;
    while (prime != v70);
    v72 = a1 + 56;
    v71 = *(_QWORD **)(a1 + 56);
    if (!v71)
    {
LABEL_98:
      v39 = prime;
      goto LABEL_99;
    }
    v73 = v71[1];
    v74 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v75 = v73 & v74;
      *(_QWORD *)(*v37 + 8 * v75) = v72;
      for (i = (_QWORD *)*v71; *v71; i = (_QWORD *)*v71)
      {
        v77 = i[1] & v74;
        if (v77 == v75)
        {
          v71 = i;
        }
        else if (*(_QWORD *)(*v37 + 8 * v77))
        {
          *v71 = *i;
          v78 = 8 * v77;
          *i = **(_QWORD **)(*v37 + v78);
          **(_QWORD **)(*v37 + v78) = i;
        }
        else
        {
          *(_QWORD *)(*v37 + 8 * v77) = v71;
          v71 = i;
          v75 = v77;
        }
      }
      goto LABEL_98;
    }
    if (v73 >= prime)
      v73 %= prime;
    *(_QWORD *)(*v37 + 8 * v73) = v72;
    v82 = (_QWORD *)*v71;
    if (!*v71)
      goto LABEL_98;
    while (1)
    {
      v84 = v82[1];
      if (v84 >= prime)
        v84 %= prime;
      if (v84 != v73)
      {
        if (!*(_QWORD *)(*v37 + 8 * v84))
        {
          *(_QWORD *)(*v37 + 8 * v84) = v71;
          goto LABEL_103;
        }
        *v71 = *v82;
        v83 = 8 * v84;
        *v82 = **(_QWORD **)(*v37 + v83);
        **(_QWORD **)(*v37 + v83) = v82;
        v82 = v71;
      }
      v84 = v73;
LABEL_103:
      v71 = v82;
      v82 = (_QWORD *)*v82;
      v73 = v84;
      if (!v82)
        goto LABEL_98;
    }
  }
  while (1)
  {
    v43 = v42[1];
    if (v43 != v38)
    {
      if (v40.u32[0] <= 1uLL)
      {
        v43 &= v39 - 1;
      }
      else if (v43 >= v39)
      {
        v43 %= v39;
      }
      if (v43 != v3)
        goto LABEL_60;
      goto LABEL_36;
    }
    v44 = v42[2];
    v46 = *(_QWORD *)(v44 + 240);
    v45 = *(_QWORD *)(v44 + 248);
    if ((char *)(v45 - v46) == v28)
    {
      if (v46 != v45)
      {
        v47 = *(_QWORD *)(*a2 + 240);
        do
        {
          v9 = *(unsigned __int16 *)(v46 + 4);
          if (*(_DWORD *)v46 != *(_DWORD *)v47 || (_DWORD)v9 != *(unsigned __int16 *)(v47 + 4))
            goto LABEL_36;
          v46 += 8;
          v47 += 8;
        }
        while (v46 != v45);
      }
      v49 = *(unsigned __int16 *)(v44 + 282);
      if ((_DWORD)v49 == v32)
      {
        if (!*(_WORD *)(v25 + 282))
          break;
        v50 = *(_DWORD **)(v44 + 272);
        v51 = *(_DWORD **)(v25 + 272);
        if (*v50 == *v51)
        {
          v52 = (unsigned __int16 *)((char *)v51 + *(unsigned __int16 *)(v25 + 280));
          v53 = (unsigned __int16 *)((char *)v50 + *(unsigned __int16 *)(v44 + 280));
          v9 = *v52;
          if (*v53 == (_DWORD)v9)
          {
            v9 = 1;
            do
            {
              if (v49 == v9)
                goto LABEL_131;
              v54 = v9;
              v55 = v9;
              v56 = v50[v55];
              v9 = v51[v55];
              if (v56 != (_DWORD)v9)
                break;
              v9 = v54 + 1;
            }
            while (v53[v54] == v52[v54]);
            if (v54 >= v49)
              break;
          }
        }
      }
    }
LABEL_36:
    v42 = (uint64_t *)*v42;
    if (!v42)
      goto LABEL_60;
  }
LABEL_131:
  v88 = (std::__shared_weak_count *)v42[5];
  *((_OWORD *)v42 + 2) = v109;
  if (v88)
    std::__shared_weak_count::__release_weak(v88);
  v42[6] = (uint64_t)v10;
  *((_BYTE *)v42 + 56) = v24;
LABEL_135:
  while (2)
  {
    v89 = *(_QWORD *)(a1 + 16);
    if (v89 > *(unsigned int *)(a1 + 88))
    {
      v90 = *(uint64_t **)a1;
      v91 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>((_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16), (unsigned __int16 *)v9);
      if (v91 && (uint64_t *)v91[6] == v90)
      {
        v91[6] = a1;
        v90 = *(uint64_t **)a1;
      }
      v92 = *v90;
      *(_QWORD *)(v92 + 8) = v90[1];
      *(_QWORD *)v90[1] = v92;
      *(_QWORD *)(a1 + 16) = v89 - 1;
      v93 = (std::__shared_weak_count *)v90[5];
      if (!v93)
        goto LABEL_143;
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(p_shared_owners);
      while (__stlxr(v95 - 1, p_shared_owners));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        v96 = (std::__shared_weak_count *)v90[3];
        if (v96)
          goto LABEL_144;
      }
      else
      {
LABEL_143:
        v96 = (std::__shared_weak_count *)v90[3];
        if (v96)
        {
LABEL_144:
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
      }
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v90, 48);
      continue;
    }
    break;
  }
  v99 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v99;
  if (v99 >= 0x65)
  {
    *(_DWORD *)(a1 + 104) = 0;
    v100 = *(uint64_t **)(a1 + 56);
    if (v100)
    {
      v101 = 0;
      do
      {
        while (1)
        {
          if (!*((_BYTE *)v100 + 56))
          {
            v102 = v100[5];
            if (!v102 || *(_QWORD *)(v102 + 8) == -1)
              break;
          }
          v100 = (uint64_t *)*v100;
          ++v101;
          if (!v100)
            goto LABEL_170;
        }
        v103 = (uint64_t *)*v100;
        std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v110, (_QWORD *)(a1 + 32), v100);
        v104 = v110;
        v110 = 0;
        if (v104)
        {
          if (v112)
          {
            v105 = *(std::__shared_weak_count **)(v104 + 40);
            if (v105)
              std::__shared_weak_count::__release_weak(v105);
            v106 = *(std::__shared_weak_count **)(v104 + 24);
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
          }
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v111 + 40))(*v111, v104, 64);
        }
        v100 = v103;
      }
      while (v103);
    }
    else
    {
      v101 = 0;
    }
LABEL_170:
    *(_DWORD *)(a1 + 100) = v101;
  }
}

void sub_19F19081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *md::LabelStyle::styleQueryForComponent(unsigned __int8 **a1, uint64_t a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;

  LOBYTE(v76) = a2;
  BYTE1(v76) = a3;
  v6 = geo::linear_map<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::equal_to<md::LabelStyle::StyleQueryOptions>,std::allocator<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>,std::vector<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>::operator[](a1 + 8, (unsigned __int8 *)&v76);
  if (*(_QWORD *)v6)
    return v6;
  v7 = *((_QWORD *)*a1 + 30);
  v8 = *((_QWORD *)*a1 + 31);
  v9 = v8 - v7;
  v74 = *((_QWORD *)*a1 + 33);
  if (v8 == v7)
  {
    v12 = 0;
    v75 = 0;
    v19 = 0;
    v20 = 1;
  }
  else
  {
    if (v9 < 0)
      abort();
    v10 = v9 >> 3;
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a1 + 33) + 16))(*((_QWORD *)*a1 + 33));
    v12 = (uint64_t *)v11;
    v13 = 0;
    do
    {
      if (v11 + v13)
        *(_QWORD *)(v11 + v13) = *(_QWORD *)(v7 + v13);
      v13 += 8;
    }
    while (v7 + v13 != v8);
    v14 = v11 + v13;
    v75 = v11 + 8 * v10;
    v15 = (uint64_t *)v11;
    v17 = v14 - v11;
    v16 = v14 == v11;
    v18 = (v14 - v11) >> 3;
    v19 = (uint64_t *)(v11 + (v17 & 0xFFFFFFFFFFFFFFF8));
    v20 = v16;
    if (!v16)
    {
      v21 = 8 * v18;
      v15 = (uint64_t *)v11;
      while (*(_DWORD *)v15 != 65612)
      {
        ++v15;
        v21 -= 8;
        if (!v21)
        {
          v20 = 0;
          goto LABEL_19;
        }
      }
    }
    if (v15 != v19)
    {
      v22 = v19;
      goto LABEL_23;
    }
LABEL_19:
    if (v18 < v10)
    {
      if (v11)
        *v19 = ((a2 << 32) | 0x1003A) + 18;
      v22 = v19 + 1;
LABEL_23:
      v23 = v74;
      v24 = v11 + 8 * v10;
      if ((unint64_t)v22 >= v75)
        goto LABEL_24;
      goto LABEL_67;
    }
  }
  v32 = (char *)((char *)v19 - (char *)v12);
  v33 = v19 - v12;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 61)
    abort();
  if ((uint64_t)(v75 - (_QWORD)v12) >> 2 > v34)
    v34 = (uint64_t)(v75 - (_QWORD)v12) >> 2;
  if (v75 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v35 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v35 = v34;
  if (!v35)
  {
    v37 = (uint64_t *)(8 * v33);
    v22 = (uint64_t *)(8 * v33 + 8);
    if ((v20 & 1) != 0)
      goto LABEL_45;
LABEL_48:
    if ((unint64_t)(v32 - 8) < 0x38 || (unint64_t)((char *)v19 - (char *)v37) < 0x20)
    {
      v40 = v19;
      v23 = v74;
      v38 = v75;
    }
    else
    {
      v39 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v40 = &v19[-(v39 & 0x3FFFFFFFFFFFFFFCLL)];
      v41 = v37 - 2;
      v42 = v19 - 2;
      v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      v23 = v74;
      v38 = v75;
      do
      {
        v44 = *(_OWORD *)v42;
        *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
        *(_OWORD *)v41 = v44;
        v41 -= 4;
        v42 -= 4;
        v43 -= 4;
      }
      while (v43);
      v37 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
      if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        v19 = v12;
        v12 = v37;
        if (!v19)
          goto LABEL_66;
        goto LABEL_65;
      }
    }
    do
    {
      v53 = *--v40;
      *--v37 = v53;
    }
    while (v40 != v12);
    goto LABEL_64;
  }
  v36 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, 8 * v35, 4);
  v37 = (uint64_t *)(v36 + 8 * v33);
  v35 = v36 + 8 * v35;
  if (v36)
    *v37 = ((a2 << 32) | 0x1003A) + 18;
  v22 = v37 + 1;
  if ((v20 & 1) == 0)
    goto LABEL_48;
LABEL_45:
  v12 = v37;
  v23 = v74;
  v38 = v75;
  if (v19)
LABEL_65:
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v23 + 40))(v23, v19, v38 - (_QWORD)v19);
LABEL_66:
  v24 = v35;
  if ((unint64_t)v22 >= v35)
  {
LABEL_24:
    v25 = v22 - v12;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      abort();
    if ((uint64_t)(v24 - (_QWORD)v12) >> 2 > v26)
      v26 = (uint64_t)(v24 - (_QWORD)v12) >> 2;
    if (v24 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 8 * v27, 4);
      v29 = (uint64_t *)(v28 + 8 * v25);
      v30 = v28 + 8 * v27;
      if (v28)
      {
        v31 = 65594;
        if (a3)
          v31 = 0x10001003ALL;
        *v29 = v31;
      }
    }
    else
    {
      v30 = 0;
      v29 = (uint64_t *)(8 * v25);
    }
    v45 = v29 + 1;
    if (v22 == v12)
      goto LABEL_76;
    v46 = (char *)v22 - (char *)v12 - 8;
    if (v46 < 0x38)
    {
      v48 = v22;
    }
    else if ((unint64_t)((char *)v22 - (char *)v29) < 0x20)
    {
      v48 = v22;
    }
    else
    {
      v47 = (v46 >> 3) + 1;
      v48 = &v22[-(v47 & 0x3FFFFFFFFFFFFFFCLL)];
      v49 = v29 - 2;
      v50 = v22 - 2;
      v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v52 = *(_OWORD *)v50;
        *((_OWORD *)v49 - 1) = *((_OWORD *)v50 - 1);
        *(_OWORD *)v49 = v52;
        v49 -= 4;
        v50 -= 4;
        v51 -= 4;
      }
      while (v51);
      v29 -= v47 & 0x3FFFFFFFFFFFFFFCLL;
      if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_75;
    }
    do
    {
      v55 = *--v48;
      *--v29 = v55;
    }
    while (v48 != v12);
LABEL_75:
    v22 = v12;
LABEL_76:
    v12 = v29;
    if (v22)
      (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v23 + 40))(v23, v22, v24 - (_QWORD)v22);
    v24 = v30;
    goto LABEL_79;
  }
LABEL_67:
  if (v22)
  {
    v54 = 65594;
    if (a3)
      v54 = 0x10001003ALL;
    *v22 = v54;
  }
  v45 = v22 + 1;
LABEL_79:
  v56 = *a1;
  v57 = (std::__shared_weak_count *)*((_QWORD *)*a1 + 2);
  if (v57)
  {
    v58 = std::__shared_weak_count::lock(v57);
    v82 = v58;
    if (v58)
    {
      v59 = *((_QWORD *)v56 + 1);
      v81 = v59;
      if (v59)
      {
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v79 = v23;
        v60 = (char *)v45 - (char *)v12;
        if (v45 != v12)
        {
          if (v60 < 0)
            abort();
          v61 = (uint64_t *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, (char *)v45 - (char *)v12, 4);
          v76 = v61;
          v77 = v61;
          v78 = (char *)&v61[v60 >> 3];
          v62 = v12;
          do
          {
            if (v61)
              *v61 = *v62;
            ++v62;
            ++v61;
          }
          while (v62 != v45);
          v77 = v61;
        }
        gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v76);
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v80, v59, (gss::FeatureAttributeSet *)&v76, (gss::QueryOverrides *)(*a1 + 272));
        v63 = v80;
        v80 = 0uLL;
        v64 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
        *(_OWORD *)v6 = v63;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        if (*((_QWORD *)&v80 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (v76)
        {
          v77 = v76;
          (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v79 + 40))(v79, v76, v78 - (char *)v76);
        }
        v70 = v82;
        if (!v82)
          goto LABEL_108;
      }
      else
      {
        v70 = v58;
      }
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
LABEL_108:
  if (v12)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v23 + 40))(v23, v12, v24 - (_QWORD)v12);
  return v6;
}

void sub_19F190E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  if (a4)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 40))(a7, a4, a6 - a4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v9, v10 - v9);
  _Unwind_Resume(a1);
}

unsigned __int8 *geo::linear_map<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::equal_to<md::LabelStyle::StyleQueryOptions>,std::allocator<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>,std::vector<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>::operator[](unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v7;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char *v16;
  __int16 v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1;
  if (*a1 != v4)
  {
    v5 = *a1;
    while (*a2 != *v5 || a2[1] != v5[1])
    {
      v5 += 24;
      if (v5 == v4)
        goto LABEL_10;
    }
  }
  if (v5 == v4)
  {
LABEL_10:
    v7 = *(unsigned __int16 *)a2;
    v5 = *a1;
    if (v3 != v4)
    {
      v5 = *a1;
      while (*v5 != *(_WORD *)a2 || v5[1] != v7 >> 8)
      {
        v5 += 24;
        if (v5 == v4)
          goto LABEL_19;
      }
    }
    if (v5 == v4)
    {
LABEL_19:
      v9 = a1[2];
      if (v4 >= v9)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) + 1;
        if (v10 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v3) >> 3);
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v10;
        if (v12 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(24 * v12);
        v5 = (unsigned __int8 *)&v13[8 * ((v4 - v3) >> 3)];
        *(_WORD *)v5 = v7;
        v14 = (unsigned __int8 *)&v13[24 * v12];
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        v15 = v5 + 24;
        if (v3 == v4)
        {
          *a1 = v5;
          a1[1] = v15;
          a1[2] = v14;
        }
        else
        {
          v16 = &v13[8 * ((v4 - v3) >> 3)];
          do
          {
            v17 = *((_WORD *)v4 - 12);
            v4 -= 24;
            *((_WORD *)v16 - 12) = v17;
            v16 -= 24;
            *(_OWORD *)(v16 + 8) = *(_OWORD *)(v4 + 8);
            *((_QWORD *)v4 + 1) = 0;
            *((_QWORD *)v4 + 2) = 0;
          }
          while (v4 != v3);
          v3 = *a1;
          v18 = a1[1];
          *a1 = (unsigned __int8 *)v16;
          a1[1] = v15;
          a1[2] = v14;
          while (v18 != v3)
          {
            v19 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
            if (v19)
            {
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            v18 -= 24;
          }
        }
        if (v3)
          operator delete(v3);
        a1[1] = v15;
      }
      else
      {
        *(_WORD *)v4 = v7;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        a1[1] = v4 + 24;
        v5 = v4;
      }
    }
  }
  return v5 + 8;
}

void sub_19F191138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    v4 = 16 * a2;
    v5 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * a2, 8);
    v6 = v5 + v3;
    v7 = v5 + v4;
    v8 = *(_QWORD **)a1;
    v9 = *(_QWORD **)(a1 + 8);
    if (v9 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v13 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v10 = v5 + v3;
      do
      {
        v11 = *((_OWORD *)v9 - 1);
        v9 -= 2;
        *(_OWORD *)(v10 - 16) = v11;
        v10 -= 16;
        *v9 = 0;
        v9[1] = 0;
      }
      while (v9 != v8);
      v9 = *(_QWORD **)a1;
      v12 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v6;
      v13 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v9)
      {
        v14 = (std::__shared_weak_count *)*(v12 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 2;
      }
    }
    if (v9)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v9, v13 - (_QWORD)v9);
  }
}

uint64_t std::vector<BOOL,geo::StdAllocator<BOOL,mdm::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 > *(_QWORD *)(result + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v2 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = ((a2 - 1) >> 6) + 1;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 8 * v4, 8);
    v5 = (_QWORD *)*v2;
    v6 = v2[1];
    v7 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v7 = 0;
    *(_QWORD *)(result + 8 * v7) = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v8 = 0;
      v9 = 0;
      v10 = (_QWORD *)result;
      v11 = v5;
      do
      {
        v12 = 1 << v8;
        if (((*v11 >> v9) & 1) != 0)
          v13 = *v10 | v12;
        else
          v13 = *v10 & ~v12;
        *v10 = v13;
        v11 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
        v10 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v9 != (v6 & 0x3F) || v11 != &v5[v6 >> 6]);
    }
    *v2 = result;
    v2[1] = v6;
    v14 = v2[2];
    v2[2] = v4;
    if (v5)
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v3 + 40))(v3, v5, 8 * v14);
  }
  return result;
}

void ___ZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;
  int *v23;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD **)(a1 + 32);
  v22 = 0;
  if (!md::DaVinciGroundSettings::_parsePropertyKeyAndType(v5, (int *)&v22 + 1, &v22))
    goto LABEL_25;
  v8 = v7[1];
  if (!v8)
    goto LABEL_25;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = SHIDWORD(v22);
    if (v8 <= SHIDWORD(v22))
      v10 = SHIDWORD(v22) % v8;
  }
  else
  {
    v10 = (v8 - 1) & SHIDWORD(v22);
  }
  v11 = *(uint64_t ***)(*v7 + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_25:

    return;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = v8 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == SHIDWORD(v22))
      {
        if (*((_DWORD *)v12 + 4) == HIDWORD(v22))
          goto LABEL_23;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == SHIDWORD(v22))
      break;
    if (v14 >= v8)
      v14 %= v8;
    if (v14 != v10)
      goto LABEL_25;
LABEL_12:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (*((_DWORD *)v12 + 4) != HIDWORD(v22))
    goto LABEL_12;
LABEL_23:
  v17 = v22;
  v18 = v12 + 3;
  v19 = v6;
  v20 = *(_WORD *)(a1 + 40);
  v21 = v5;
  v16 = *((unsigned int *)v12 + 8);
  if ((_DWORD)v16 != -1)
  {
    v23 = &v17;
    ((void (*)(int **, uint64_t *))off_1E42EF770[v16])(&v23, v12 + 3);

    goto LABEL_25;
  }
  std::__throw_bad_variant_access[abi:nn180100]();
  __break(1u);
}

void sub_19F19155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundSettings::_parsePropertyKeyAndType(void *a1, int *a2, _DWORD *a3)
{
  md::_anonymous_namespace_ *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  md::_anonymous_namespace_ *v38;
  NSObject *v39;
  uint64_t *v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  md::_anonymous_namespace_ *v47;
  _DWORD *v48;
  md::_anonymous_namespace_ *v49;
  __int128 __dst;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v47 = a1;
  v5 = objc_retainAutorelease(v47);
  v6 = (const char *)-[md::_anonymous_namespace_ UTF8String](v5, "UTF8String");
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    *(_QWORD *)&v51 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    BYTE7(v51) = v7;
    p_dst = &__dst;
    if (!v7)
      goto LABEL_9;
  }
  memmove(p_dst, v6, v8);
LABEL_9:
  *((_BYTE *)p_dst + v8) = 0;
  v12 = SBYTE7(v51);
  v13 = (void *)__dst;
  if ((SBYTE7(v51) & 0x80u) == 0)
    v14 = (uint64_t *)&__dst;
  else
    v14 = (uint64_t *)__dst;
  if ((SBYTE7(v51) & 0x80u) == 0)
    v15 = BYTE7(v51);
  else
    v15 = *((_QWORD *)&__dst + 1);
  v16 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v14, v15);
  v48 = a3;
  v49 = v5;
  {
    v18 = v16;
                                         + 8));
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = v16;
    }
    else
    {
    }
    if (v21)
    {
      v22 = *v21;
      if (*v21)
      {
        v23 = a2;
        if (v19.u32[0] < 2uLL)
        {
          while (1)
          {
            v34 = v22[1];
            if (v18 == v34)
            {
              v35 = *((unsigned __int8 *)v22 + 39);
              if ((v35 & 0x80u) == 0)
                v36 = *((unsigned __int8 *)v22 + 39);
              else
                v36 = v22[3];
              if (v36 == v15)
              {
                if ((v35 & 0x80) != 0)
                {
                  v16 = memcmp((const void *)v22[2], v14, v22[3]);
                  if (!(_DWORD)v16)
                    goto LABEL_64;
                }
                else
                {
                  if (!*((_BYTE *)v22 + 39))
                    goto LABEL_64;
                  v37 = 0;
                  while (*((unsigned __int8 *)v22 + v37 + 16) == *((unsigned __int8 *)v14 + v37))
                  {
                    if (v35 == ++v37)
                      goto LABEL_64;
                  }
                }
              }
            }
            else if ((v34 & v24) != v20)
            {
              goto LABEL_25;
            }
            v25 = 0;
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_26;
          }
        }
        while (1)
        {
          v30 = v22[1];
          if (v18 == v30)
          {
            v31 = *((unsigned __int8 *)v22 + 39);
            if ((v31 & 0x80u) == 0)
              v32 = *((unsigned __int8 *)v22 + 39);
            else
              v32 = v22[3];
            if (v32 == v15)
            {
              if ((v31 & 0x80) != 0)
              {
                v16 = memcmp((const void *)v22[2], v14, v22[3]);
                if (!(_DWORD)v16)
                {
LABEL_64:
                  v25 = v22;
                  goto LABEL_26;
                }
              }
              else
              {
                if (!*((_BYTE *)v22 + 39))
                  goto LABEL_64;
                v33 = 0;
                while (*((unsigned __int8 *)v22 + v33 + 16) == *((unsigned __int8 *)v14 + v33))
                {
                  if (v31 == ++v33)
                    goto LABEL_64;
                }
              }
            }
          }
          else
          {
            if (v30 >= v17)
              v30 %= v17;
            if (v30 != v20)
              goto LABEL_25;
          }
          v25 = 0;
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_26;
        }
      }
    }
  }
  v23 = a2;
LABEL_25:
  v25 = 0;
LABEL_26:
  if (v12 < 0)
    operator delete(v13);
  if (!v25)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v38 = v49;
    v39 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 138412290;
      *(_QWORD *)((char *)&__dst + 4) = v49;
      _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Uknown property name %@ ...ignoring", (uint8_t *)&__dst, 0xCu);
    }

LABEL_92:
    v45 = 0;
    goto LABEL_93;
  }
  *v23 = *((_DWORD *)v25 + 10);
  if ((v26 & 1) == 0
  {
    __dst = xmmword_1A001A478;
    v51 = unk_1A001A488;
    v52 = 4;
    std::unordered_map<md::DaVinciGroundSettings::Property,md::DaVinciGroundSettings::PropertyType>::unordered_map((int *)&__dst, 5);
  }
  {
    v27 = *v23;
                                         + 8));
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      v29 = *v23;
    }
    else
    {
    }
    v38 = v49;
    if (v41)
    {
      v40 = *v41;
      if (*v41)
      {
        if (v28.u32[0] < 2uLL)
        {
          while (1)
          {
            v43 = v40[1];
            if (v43 == v27)
            {
              if (*((_DWORD *)v40 + 4) == (_DWORD)v27)
                goto LABEL_89;
            }
                            - 1)) != v29)
            {
              goto LABEL_88;
            }
            v40 = (uint64_t *)*v40;
            if (!v40)
              goto LABEL_89;
          }
        }
        do
        {
          v42 = v40[1];
          if (v42 == v27)
          {
            if (*((_DWORD *)v40 + 4) == (_DWORD)v27)
              break;
          }
          else
          {
            if (v42 != v29)
              goto LABEL_88;
          }
          v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
    }
    else
    {
LABEL_88:
      v40 = 0;
    }
  }
  else
  {
    v40 = 0;
    v38 = v49;
  }
LABEL_89:
  if ((v44 & 1) == 0
  {
    __dst = xmmword_1A001A478;
    v51 = unk_1A001A488;
    v52 = 4;
    std::unordered_map<md::DaVinciGroundSettings::Property,md::DaVinciGroundSettings::PropertyType>::unordered_map((int *)&__dst, 5);
  }
  if (!v40)
    goto LABEL_92;
  *v48 = *((_DWORD *)v40 + 5);
  v45 = 1;
LABEL_93:

  return v45;
}

void sub_19F191AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void md::`anonymous namespace'::_stringToProperty(md::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  void *v2[2];
  uint64_t v3;
  void *v4[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 __p;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:nn180100]<0>(v10, "veryHotHSVAdjustment");
    *(_OWORD *)v12 = *(_OWORD *)v10;
    v13 = v11;
    v10[1] = 0;
    v11 = 0;
    v10[0] = 0;
    v14 = 0;
    std::string::basic_string[abi:nn180100]<0>(v8, "arcticHSVAdjustment");
    v15 = *(_OWORD *)v8;
    v16 = v9;
    v8[1] = 0;
    v9 = 0;
    v8[0] = 0;
    v17 = 1;
    std::string::basic_string[abi:nn180100]<0>(v6, "veryDryHSVAdjustment");
    v18 = *(_OWORD *)v6;
    v19 = v7;
    v6[1] = 0;
    v7 = 0;
    v6[0] = 0;
    v20 = 2;
    std::string::basic_string[abi:nn180100]<0>(v4, "veryWetHSVAdjustment");
    v21 = *(_OWORD *)v4;
    v22 = v5;
    v4[1] = 0;
    v5 = 0;
    v4[0] = 0;
    v23 = 3;
    std::string::basic_string[abi:nn180100]<0>(v2, "groundElevationScale");
    __p = *(_OWORD *)v2;
    v25 = v3;
    v2[1] = 0;
    v3 = 0;
    v2[0] = 0;
    v26 = 4;
    std::unordered_map<std::string,md::DaVinciGroundSettings::Property>::unordered_map((__int128 *)v12, 5);
    if (SHIBYTE(v25) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v19) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete((void *)v21);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
LABEL_17:
    operator delete((void *)v18);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
LABEL_18:
    operator delete((void *)v15);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v3) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v12[0]);
    if ((SHIBYTE(v3) & 0x80000000) == 0)
    {
LABEL_10:
      if ((SHIBYTE(v5) & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
LABEL_20:
    operator delete(v2[0]);
    if ((SHIBYTE(v5) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v7) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v4[0]);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v9) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_23;
    }
LABEL_22:
    operator delete(v6[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
LABEL_14:
        return;
      }
LABEL_24:
      operator delete(v10[0]);
      goto LABEL_14;
    }
LABEL_23:
    operator delete(v8[0]);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
}

void sub_19F191DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;

  if (a72 < 0)
  {
    operator delete(a68);
    if ((a66 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a59 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a66 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_7;
  }
LABEL_13:
  operator delete(a40);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_14;
LABEL_7:
  operator delete(__p);
LABEL_14:
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_16:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_23:
    _Unwind_Resume(a1);
  }
LABEL_22:
  operator delete(a34);
  goto LABEL_23;
}

uint64_t *gms::ZoomablePropertyStore<float>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = v5 | (v6 << 8);
  v8 = *a4;
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v6)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v6)
    {
      if (v16 == v9)
        goto LABEL_46;
      v27 = *v16;
      if (*v16)
      {
        do
        {
          v28 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v16[2];
          v15 = *(_QWORD *)v28 == (_QWORD)v16;
          v16 = (_QWORD *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        v29 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v29;
            v30 = *((unsigned __int8 *)v29 + 29);
            if (v6 >= v30)
              break;
            v29 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_53;
          }
          if (v30 >= v6)
            break;
          v29 = v25[1];
          if (!v29)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_53:
      v31 = operator new(0x28uLL);
      v31[7] = v7;
      v31[8] = v8;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v25;
      *v10 = (uint64_t *)v31;
      v32 = *(_QWORD *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        v33 = *v10;
      }
      else
      {
        v33 = (uint64_t *)v31;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 29);
        if (v6 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_53;
      }
      if (v26 >= v6)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::ZoomablePropertyStore<float>::zoomable()
{
  return 1;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addDryAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 280);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x22u, 290);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1030;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1260;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 280);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addWetAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 272);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x21u, 289);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1030;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1260;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 272);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t *gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  _BYTE v33[14];

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = (_WORD)v6 << 8;
  *(_QWORD *)&v33[2] = *(_QWORD *)a4;
  *(_DWORD *)&v33[10] = *(_DWORD *)(a4 + 8);
  if (result[7])
  {
    v8 = (uint64_t *)result[5];
    v9 = (uint64_t **)(result + 6);
    if (v8 == result + 6)
    {
      v15 = (_QWORD *)result[5];
    }
    else
    {
      v10 = 0;
      v11 = (uint64_t *)result[5];
      do
      {
        v12 = (uint64_t *)v11[1];
        if (v12)
        {
          do
          {
            v13 = (uint64_t **)v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t **)v11[2];
            v14 = *v13 == v11;
            v11 = (uint64_t *)v13;
          }
          while (!v14);
        }
        ++v10;
        v11 = (uint64_t *)v13;
      }
      while (v13 != v9);
      v15 = (_QWORD *)result[5];
      do
      {
        v16 = v10 >> 1;
        v17 = v15;
        if (v10 != 1)
        {
          v19 = v10 >> 1;
          v20 = v15;
          do
          {
            v22 = (_QWORD *)v20[1];
            if (v22)
            {
              do
              {
                v17 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v20[2];
                v14 = *v17 == (_QWORD)v20;
                v20 = v17;
              }
              while (!v14);
            }
            v20 = v17;
          }
          while (v19-- > 1);
        }
        if (*((unsigned __int8 *)v17 + 29) < v6)
        {
          v18 = (_QWORD *)v17[1];
          if (v18)
          {
            do
            {
              v15 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v17[2];
              v14 = *v15 == (_QWORD)v17;
              v17 = v15;
            }
            while (!v14);
          }
          v16 = v10 + ~v16;
        }
        v10 = v16;
      }
      while (v16);
    }
    if (v15 == v9 || *((unsigned __int8 *)v15 + 28) >= v6)
    {
      if (v15 == v8)
        goto LABEL_46;
      v26 = *v15;
      if (*v15)
      {
        do
        {
          v27 = v26;
          v26 = *(_QWORD *)(v26 + 8);
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = v15[2];
          v14 = *(_QWORD *)v27 == (_QWORD)v15;
          v15 = (_QWORD *)v27;
        }
        while (v14);
      }
      if (v5 >= *(unsigned __int8 *)(v27 + 29))
      {
LABEL_46:
        v28 = *v9;
        v24 = (uint64_t **)(result + 6);
        if (!*v9)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v24 = (uint64_t **)v28;
            v29 = *((unsigned __int8 *)v28 + 29);
            if (v6 >= v29)
              break;
            v28 = *v24;
            v9 = v24;
            if (!*v24)
              goto LABEL_53;
          }
          if (v29 >= v6)
            break;
          v28 = v24[1];
          if (!v28)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(result + 6);
    v23 = result[6];
    if (!v23)
    {
      v24 = (uint64_t **)(result + 6);
LABEL_53:
      v30 = (char *)operator new(0x30uLL);
      *((_WORD *)v30 + 14) = v7 | v5;
      *(_QWORD *)(v30 + 30) = *(_QWORD *)v33;
      *(_QWORD *)(v30 + 36) = *(_QWORD *)&v33[6];
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;
      *((_QWORD *)v30 + 2) = v24;
      *v9 = (uint64_t *)v30;
      v31 = *(_QWORD *)v4[5];
      if (v31)
      {
        v4[5] = v31;
        v32 = *v9;
      }
      else
      {
        v32 = (uint64_t *)v30;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v32);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t **)v23;
        v25 = *(unsigned __int8 *)(v23 + 29);
        if (v6 >= v25)
          break;
        v23 = (uint64_t)*v24;
        v9 = v24;
        if (!*v24)
          goto LABEL_53;
      }
      if (v25 >= v6)
        break;
      v23 = (uint64_t)v24[1];
      if (!v23)
      {
LABEL_52:
        v9 = v24 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

void md::`anonymous namespace'::_readPropertyValueFromObject<gm::Matrix<float,3,1>>(uint64_t a1, void *a2)
{
  int v2;
  int v3;
  id v5;
  void *v6;
  char isKindOfClass;
  int v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  int v13;
  id v14;

  v14 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_13;
  v5 = v14;
  if (objc_msgSend(v5, "count") != 3)
    goto LABEL_12;
  objc_msgSend(v5, "objectAtIndex:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v6, "floatValue");
    v2 = v8;
  }

  objc_msgSend(v5, "objectAtIndex:", 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v9, "floatValue");
    v3 = v10;
  }
  else
  {
    isKindOfClass = 0;
  }

  objc_msgSend(v5, "objectAtIndex:", 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_12;
  }
  objc_msgSend(v11, "floatValue");
  v13 = v12;

  if ((isKindOfClass & 1) == 0)
  {
LABEL_12:

LABEL_13:
    *(_BYTE *)a1 = 0;
    goto LABEL_14;
  }
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v13;

LABEL_14:
}

void sub_19F1927AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::zoomable()
{
  return 1;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<float>::zoomable()
{
  return 0;
}

uint64_t md::CompositeLabeler::needsForceLayoutAllLabels(md::CompositeLabeler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 88))(*(_QWORD *)(v3 - 8));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::Labeler::needsForceLayoutAllLabels(md::Labeler *this)
{
  return 0;
}

BOOL md::MapStandardLabeler::needsForceLayoutAllLabels(md::MapStandardLabeler *this)
{
  unsigned __int8 v2;

  if (*((_BYTE *)this + 372))
  {
    *((_BYTE *)this + 372) = 0;
    return 1;
  }
  else
  {
    v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 3391));
    return (v2 & 1) != 0 && *(_BYTE *)(*((_QWORD *)this + 49) + 115) != 0;
  }
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::DaVinciGroundRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::DaVinciGroundRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 816 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F192C24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v6 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v13 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xFBD83FDA8879FF7ELL)
      {
        if (v15[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0xFBD83FDA8879FF7ELL)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v7 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x3070CB6B3C7F21D3;
    if (a3 <= 0x3070CB6B3C7F21D3)
      v19 = 0x3070CB6B3C7F21D3 % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x3070CB6B3C7F21D3;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x3070CB6B3C7F21D3)
      {
        if (v21[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x3070CB6B3C7F21D3)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x3070CB6B3C7F21D3)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0xD2404CDD1F9A6950;
    if (a3 <= 0xD2404CDD1F9A6950)
      v25 = 0xD2404CDD1F9A6950 % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0xD2404CDD1F9A6950;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0xD2404CDD1F9A6950)
      {
        if (v27[2] == 0xD2404CDD1F9A6950)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0xD2404CDD1F9A6950)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0xD2404CDD1F9A6950)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0xD2404CDD1F9A6950)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

uint64_t md::CartographicRenderer::update(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;

  v2 = *(uint64_t **)(result + 40);
  for (i = *(uint64_t **)(result + 48); v2 != i; ++v2)
  {
    result = *v2;
    if (*v2)
    {
      if (*(_BYTE *)(result + 32))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 72))(result, a2);
    }
  }
  return result;
}

uint64_t md::DaVinciGroundRenderLayer::prepare(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (!*(_BYTE *)(result + 33))
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 104))(result);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, a2);
    if (*(_QWORD *)result != *(_QWORD *)(result + 8))
      **(_BYTE **)(a2 + 736) = 1;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19F193B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t *md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19F193D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  uint64_t v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int16 v64[2];
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v16 = *(uint64_t **)(v15 + 32);
          if (v16)
          {
            v17 = *(_QWORD *)(a2 + 192);
            if (v17)
            {
              if (v17 >> 61)
                abort();
              v18 = 8 * v17;
              v19 = (char *)operator new(8 * v17);
              *a3 = v19;
              a3[1] = v19;
              a3[2] = &v19[v18];
            }
            v20 = *(_QWORD **)(v6 + 176);
            v61 = (_QWORD *)(v6 + 184);
            if (v20 != (_QWORD *)(v6 + 184))
            {
              v58 = (uint64_t **)(v6 + 224);
              v59 = v16;
              v60 = v6;
              do
              {
                v21 = v20[4];
                v22 = (std::__shared_weak_count *)v20[5];
                v66 = v21;
                v67 = v22;
                if (v22)
                {
                  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
                  do
                    v24 = __ldxr(p_shared_owners);
                  while (__stxr(v24 + 1, p_shared_owners));
                }
                v64[0] = *(_WORD *)(v21 + 168);
                v65 = *(_QWORD *)(v21 + 172);
                v25 = *(double *)(v21 + 600);
                v26 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v28 = *(unsigned __int8 *)(v27 + 128);
                md::GeometryContext::transformConstantData((double *)&v62, v16, (unsigned __int8 *)v64, v28, v25, v26);
                v29 = *((_BYTE *)v20 + 48);
                v30 = *(_QWORD **)(v6 + 264);
                if (!v30)
                {
                  geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(v58);
                  v30 = *(_QWORD **)(v6 + 264);
                }
                *(_QWORD *)(v6 + 264) = *v30;
                md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v30, &v66, v29, (v28 - 1) < 3u, &v62);
                v32 = (_QWORD *)a3[1];
                v31 = a3[2];
                if ((unint64_t)v32 >= v31)
                {
                  v34 = (_BYTE *)*a3;
                  v35 = (uint64_t)v32 - *a3;
                  v36 = v35 >> 3;
                  v37 = (v35 >> 3) + 1;
                  if (v37 >> 61)
                    abort();
                  v38 = v31 - (_QWORD)v34;
                  if (v38 >> 2 > v37)
                    v37 = v38 >> 2;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v37;
                  if (v39)
                  {
                    if (v39 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v40 = operator new(8 * v39);
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v41 = &v40[8 * v36];
                  *v41 = v30;
                  v33 = v41 + 1;
                  if (v32 == (_QWORD *)v34)
                  {
                    v34 = v32;
                  }
                  else
                  {
                    v42 = (char *)(v32 - 1) - v34;
                    if (v42 < 0x58)
                      goto LABEL_81;
                    if ((unint64_t)((char *)v32 - &v40[v35]) < 0x20)
                      goto LABEL_81;
                    v43 = (v42 >> 3) + 1;
                    v44 = &v40[8 * v36 - 16];
                    v45 = (__int128 *)(v32 - 2);
                    v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v47 = *v45;
                      *(v44 - 1) = *(v45 - 1);
                      *v44 = v47;
                      v44 -= 2;
                      v45 -= 2;
                      v46 -= 4;
                    }
                    while (v46);
                    v41 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
                    v32 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_81:
                      do
                      {
                        v48 = *--v32;
                        *--v41 = v48;
                      }
                      while (v32 != (_QWORD *)v34);
                      v34 = (_BYTE *)*a3;
                    }
                  }
                  *a3 = v41;
                  a3[1] = v33;
                  a3[2] = &v40[8 * v39];
                  if (v34)
                    operator delete(v34);
                  v16 = v59;
                  v6 = v60;
                }
                else
                {
                  *v32 = v30;
                  v33 = v32 + 1;
                }
                a3[1] = v33;
                v49 = v63;
                if (v63)
                {
                  v50 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v52 = v67;
                if (!v67)
                  goto LABEL_68;
                v53 = (unint64_t *)&v67->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                  v55 = (_QWORD *)v20[1];
                  if (!v55)
                  {
                    do
                    {
LABEL_72:
                      v56 = (_QWORD *)v20[2];
                      v57 = *v56 == (_QWORD)v20;
                      v20 = v56;
                    }
                    while (!v57);
                    goto LABEL_29;
                  }
                }
                else
                {
LABEL_68:
                  v55 = (_QWORD *)v20[1];
                  if (!v55)
                    goto LABEL_72;
                }
                do
                {
                  v56 = v55;
                  v55 = (_QWORD *)*v55;
                }
                while (v55);
LABEL_29:
                v20 = v56;
              }
              while (v56 != v61);
            }
          }
        }
      }
    }
  }
}

void sub_19F1941D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  double *v9;
  float v10;
  float v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  float32_t v33;
  float32x2_t *v34;
  unint64_t v35;

  v5 = *(uint64_t **)(a3 + 8);
  v6 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v6)
  {
    v9 = 0;
    v10 = MEMORY[0x10];
    v11 = MEMORY[0x14];
    goto LABEL_43;
  }
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v6 <= 0x8BD499FBD96FBB9ELL)
      v8 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v12 = *v5;
  v13 = *(_QWORD **)(v12 + 8 * v8);
  if (v13 && (v14 = (_QWORD *)*v13) != 0)
  {
    if (v7.u32[0] >= 2uLL)
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        v14 = (_QWORD *)*v14;
    }
    else
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        v14 = (_QWORD *)*v14;
    }
    v15 = *(_QWORD *)(v14[5] + 32);
    v16 = v15 + 16;
    v17 = v15 + 20;
  }
  else
  {
    v16 = 16;
    v17 = 20;
  }
  if (v7.u32[0] > 1uLL)
  {
    v18 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v6 <= 0x1AF456233693CD46uLL)
      v18 = 0x1AF456233693CD46uLL % *(_QWORD *)&v6;
  }
  else
  {
    v18 = (*(_QWORD *)&v6 - 1) & 0x1AF456233693CD46;
  }
  v10 = *(float *)v16;
  v11 = *(float *)v17;
  v19 = *(_QWORD **)(v12 + 8 * v18);
  if (!v19)
    goto LABEL_42;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_42;
  if (v7.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46)
          goto LABEL_40;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_42;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v22 = v20[1];
    if (v22 == 0x1AF456233693CD46)
      break;
    if (v22 >= *(_QWORD *)&v6)
      v22 %= *(_QWORD *)&v6;
    if (v22 != v18)
      goto LABEL_42;
LABEL_29:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_42;
  }
  if (v20[2] != 0x1AF456233693CD46)
    goto LABEL_29;
LABEL_40:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) == 0x1AF456233693CD46)
  {
    v9 = *(double **)(v24 + 32);
    goto LABEL_43;
  }
LABEL_42:
  v9 = 0;
LABEL_43:
  v25 = *a2;
  v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      v27 = *v25++;
      a1 = md::BaseMapTileDataRenderable::adjustZScale(v27, v10, v11);
      v28 = *(_QWORD **)(v27 + 448);
      v29 = v28[1];
      v30 = v9[62];
      v31 = v9[63];
      v32 = v9[64];
      v33 = *(double *)(v27 + 576)
          + *(double *)(v27 + 480) * v30
          + *(double *)(v27 + 512) * v31
          + *(double *)(v27 + 544) * v32;
      v35 = v28[8];
      v34 = (float32x2_t *)v28[9];
      *v34 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v27 + 560), *(float64x2_t *)(v27 + 464), v30), *(float64x2_t *)(v27 + 496), v31), *(float64x2_t *)(v27 + 528), v32));
      v34[1].f32[0] = v33;
      if (v35 > v29)
        v29 = v35;
      v28[7] = 0;
      v28[8] = v29;
    }
    while (v25 != v26);
  }
  md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::updateWithContext(a1, a2, a3);
}

void md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t *v24;
  uint64_t *v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t i;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  void *__src;
  int64x2_t v113;
  int64x2_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;

  v4 = *(_BYTE *)(a3 + 48);
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = 0;
  v6 = *(_QWORD *)(a3 + 400);
  v5 = *(std::__shared_weak_count **)(a3 + 408);
  v117 = v6;
  v118 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v10 = *(_QWORD *)(a3 + 384);
  v9 = *(std::__shared_weak_count **)(a3 + 392);
  v115 = v10;
  v116 = v9;
  if (!v9)
  {
    if (*(unsigned __int8 *)(v6 + 169) <= *(unsigned __int8 *)(v10 + 169))
      goto LABEL_22;
LABEL_11:
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v121 = v6;
    v122 = v5;
    v16 = v10;
    v17 = v5;
    if (!v9)
      goto LABEL_23;
LABEL_15:
    v18 = (unint64_t *)&v9->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v119 = v16;
    v120 = v9;
    v20 = *(_BYTE *)(v16 + 169);
    v21 = (unint64_t *)&v9->__shared_owners_;
    v110 = v9;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v111 = v9;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    goto LABEL_24;
  }
  v11 = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  if (*(unsigned __int8 *)(v6 + 169) > *(unsigned __int8 *)(v10 + 169))
    goto LABEL_11;
  do
    v13 = __ldxr(v11);
  while (__stxr(v13 + 1, v11));
LABEL_22:
  v121 = v10;
  v122 = v9;
  v16 = v6;
  v17 = v9;
  v6 = v10;
  v9 = v5;
  if (v5)
    goto LABEL_15;
LABEL_23:
  v119 = v16;
  v120 = 0;
  v20 = *(_BYTE *)(v16 + 169);
  v110 = 0;
  v111 = 0;
LABEL_24:
  v24 = *a2;
  v25 = md::SceneContext::subtileClipMask(*a2, v16, v4);
  v26 = *(_BYTE *)(v6 + 169);
  v108 = v17;
  v105 = *(_QWORD *)(v6 + 172);
  if (v17)
  {
    v27 = (unint64_t *)&v17->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v109 = v17;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    v24 = *a2;
  }
  else
  {
    v109 = 0;
  }
  v30 = (uint64_t)md::SceneContext::subtileClipMask(v24, v6, v4);
  if (!((unint64_t)v25 | v30))
  {
    __src = operator new(8uLL);
    v31 = vdupq_n_s64(1uLL);
    v113 = v31;
    *(_QWORD *)__src = 1;
    v114 = v31;
    goto LABEL_95;
  }
  v32 = v30;
  if (!v25)
  {
    std::vector<BOOL>::vector(&__src, v30);
    v114 = *(int64x2_t *)(v32 + 24);
    goto LABEL_95;
  }
  v33 = v25[3];
  v34 = v33 >> (v26 - v20);
  v35 = -1 << (v26 - v20);
  v36 = (HIDWORD(v105) & ~v35) * v34;
  v37 = (v105 & ~v35) * v34;
  if (!v30)
  {
    __src = 0;
    v113 = 0uLL;
    if (!(_DWORD)v34)
    {
      v114.i64[0] = v34;
      goto LABEL_94;
    }
    v60 = v34 * (unint64_t)v34;
    if ((v60 & 0x8000000000000000) != 0)
LABEL_153:
      abort();
    v61 = (v60 - 1) >> 6;
    v62 = operator new(8 * (v61 + 1));
    v63 = v62;
    v113.i64[0] = v34 * (unint64_t)v34;
    v113.i64[1] = v61 + 1;
    __src = v62;
    if (v60 >= 0x41)
      v64 = (v60 - 1) >> 6;
    else
      v64 = 0;
    v62[v64] = 0;
    if (v60 >= 0x40)
      bzero(v62, 8 * (v60 >> 6));
    if ((v60 & 0x3F) != 0)
      v63[v60 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v60 & 0x3F));
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v114 = (int64x2_t)v34;
    v69 = *v25;
LABEL_78:
    v70 = 0;
    while (1)
    {
      v71 = v33 * (v37 + v68) + (v36 + v70);
      if (((*(_QWORD *)(v69 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v71) & 1) != 0)
      {
        if (v70 >= v34)
          goto LABEL_80;
        if (v67 == v60)
          goto LABEL_80;
        if (v68 >= v34)
          goto LABEL_80;
        v72 = (v65 + v70) >> 6;
        v73 = 1 << (v65 + v70);
        v74 = v63[v72];
        if ((v74 & v73) != 0)
          goto LABEL_80;
        v63[v72] = v74 | v73;
        v75 = 1;
      }
      else
      {
        if (!v67)
          goto LABEL_80;
        if (v70 >= v34)
          goto LABEL_80;
        if (v68 >= v34)
          goto LABEL_80;
        v76 = (v65 + v70) >> 6;
        v77 = 1 << (v65 + v70);
        v78 = v63[v76];
        if ((v78 & v77) == 0)
          goto LABEL_80;
        v63[v76] = v78 & ~v77;
        v75 = -1;
      }
      v66 += v75;
      v114.i64[1] = v66;
      v67 = v66;
LABEL_80:
      if (v34 == ++v70)
      {
        ++v68;
        v65 += v34;
        if (v68 == v34)
          goto LABEL_95;
        goto LABEL_78;
      }
    }
  }
  v38 = *(_QWORD *)(v30 + 24);
  if (v34 <= v38)
    v39 = v38;
  else
    v39 = v34;
  v113 = 0uLL;
  __src = 0;
  if (!(_DWORD)v39)
  {
    v114.i64[0] = v39;
LABEL_94:
    v114.i64[1] = 0;
    goto LABEL_95;
  }
  v40 = v39 * (unint64_t)v39;
  if ((v40 & 0x8000000000000000) != 0)
    goto LABEL_153;
  v106 = (v40 - 1) >> 6;
  v41 = operator new(8 * (v106 + 1));
  v42 = v41;
  v113.i64[0] = v39 * (unint64_t)v39;
  v113.i64[1] = v106 + 1;
  __src = v41;
  v43 = v106;
  if (v40 < 0x41)
    v43 = 0;
  v41[v43] = 0;
  v44 = v40 >> 6;
  if (v40 >= 0x40)
  {
    bzero(v41, 8 * (v40 >> 6));
    v44 = v40 >> 6;
  }
  if ((v40 & 0x3F) != 0)
    v42[v44] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v40 & 0x3F));
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v114 = (int64x2_t)v39;
  v49 = *(_QWORD *)v32;
  while (2)
  {
    for (i = 0; i != v39; ++i)
    {
      v51 = v46;
      if (((*(_QWORD *)(v49
                       + (((v38 * (v48 / (v39 / v38))
                          + (unint64_t)(i / (v39 / v38))) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v38 * (v48 / (v39 / v38)) + (i / (v39 / v38)))) & 1) != 0)
      {
        v52 = i / (v39 / v34)
            + v36
            + v33 * (v48 / (v39 / v34) + v37);
        if (((*(_QWORD *)(*v25 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v52) & 1) != 0)
        {
          if (i < v39 && v47 != v40 && v48 < v39)
          {
            v53 = (v45 + i) >> 6;
            v54 = 1 << (v45 + i);
            v55 = v42[v53];
            if ((v55 & v54) == 0)
            {
              v42[v53] = v55 | v54;
              v56 = 1;
LABEL_64:
              v46 += v56;
              v114.i64[1] = v46;
              v47 = v46;
              continue;
            }
          }
          continue;
        }
        v51 = v47;
      }
      if (v51)
      {
        if (i >= v39
          || v48 >= v39
          || (v57 = (v45 + i) >> 6,
              v58 = 1 << (v45 + i),
              v59 = v42[v57],
              (v59 & v58) == 0))
        {
          v47 = v51;
          continue;
        }
        v42[v57] = v59 & ~v58;
        v56 = -1;
        goto LABEL_64;
      }
      v47 = 0;
    }
    ++v48;
    v45 += v39;
    if (v48 != v39)
      continue;
    break;
  }
LABEL_95:
  if ((void **)(a3 + 416) != &__src)
  {
    v79 = v113.i64[0];
    if (v113.i64[0])
    {
      v80 = *(void **)(a3 + 416);
      if (v113.i64[0] <= *(_QWORD *)(a3 + 432) << 6)
      {
        v81 = v113.i64[0] - 1;
      }
      else
      {
        if (v80)
        {
          operator delete(v80);
          *(_QWORD *)(a3 + 416) = 0;
          *(_QWORD *)(a3 + 424) = 0;
          *(_QWORD *)(a3 + 432) = 0;
          v79 = v113.i64[0];
        }
        if (v79 < 0)
          abort();
        v81 = v79 - 1;
        v82 = ((unint64_t)(v79 - 1) >> 6) + 1;
        v80 = operator new(8 * v82);
        *(_QWORD *)(a3 + 416) = v80;
        *(_QWORD *)(a3 + 424) = 0;
        *(_QWORD *)(a3 + 432) = v82;
      }
      memmove(v80, __src, ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v79 = v113.i64[0];
    }
    *(_QWORD *)(a3 + 424) = v79;
  }
  *(int64x2_t *)(a3 + 440) = v114;
  v83 = v114.i64[1];
  *(_BYTE *)(a3 + 456) = v114.i64[1] != 0;
  if (v83)
  {
    if (*(_QWORD *)(a3 + 448) == *(_QWORD *)(a3 + 440) * *(_QWORD *)(a3 + 440))
      v84 = 0;
    else
      v84 = a3 + 416;
    md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v84);
  }
  if (__src)
    operator delete(__src);
  if (v109)
  {
    v85 = (unint64_t *)&v109->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v108)
  {
    v87 = (unint64_t *)&v108->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v111)
  {
    v89 = (unint64_t *)&v111->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v110)
  {
    v91 = (unint64_t *)&v110->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v93 = v116;
  if (v116)
  {
    v94 = (unint64_t *)&v116->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v118;
  if (v118)
  {
    v97 = (unint64_t *)&v118->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v120;
  if (v120)
  {
    v100 = (unint64_t *)&v120->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v122;
  if (v122)
  {
    v103 = (unint64_t *)&v122->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
}

void sub_19F194D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v25 - 152);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v25 - 136);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v25 - 120);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::VenueRenderLayer::prepare(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  if (a1[34] != a1[35])
    **(_BYTE **)(a2 + 736) = 1;
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::prepare(_BYTE *a1)
{
  uint64_t result;
  char v3;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1);
  v3 = a1[49];
  a1[481] = v3 - a1[48] + 2;
  a1[480] = v3 + 1;
  return result;
}

uint64_t md::PointLabelFeature::newRootPart(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v6;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  const md::PartCreationContext *v27;
  uint64_t v28;
  uint64_t result;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t AnnotationPart;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  md::LabelPart *v60;
  BOOL v61;
  char v62;
  md::LabelPart *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 **v69;
  unsigned __int8 v70;
  float *v71;
  uint64_t v72;
  __int128 *v73;
  int v74;
  _OWORD *v75;
  unsigned __int8 *v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  unsigned __int8 v80;
  float *v81;
  unsigned __int8 v82;
  __int128 *v83;
  unsigned __int8 v84;
  unint64_t *v85;
  __int16 v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  float v91;
  char v92;
  char v93;
  unsigned __int8 *v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  __int16 v109;
  _DWORD *v110;
  const md::LabelLayoutContext *v111;
  _DWORD *v112;
  int v113;
  int v114;
  BOOL v116;
  unsigned int v117;
  int v118;
  unsigned __int8 *v119;
  int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  int v128;
  BOOL v129;
  _QWORD *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  int v139;
  __int16 v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  __int16 v157;
  uint64_t v158;
  unint64_t v159;
  int64x2_t v160;
  int64x2_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  geo::read_write_lock *v173;
  const char *v174;
  malloc_zone_t *zone;
  int v176;
  uint64_t v177;
  geo::read_write_lock *v178;
  const char *v179;
  malloc_zone_t *v180;
  int v181;
  uint64_t v182;
  geo::read_write_lock *v183;
  const char *v184;
  malloc_zone_t *v185;
  unsigned __int8 **v186;
  unsigned __int8 *v187;
  int v188;
  uint64_t v189;
  unsigned __int8 v190;
  uint64_t v191;
  uint64_t *v192;
  char v193;
  md::LabelPart *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE v198[5];
  void *v199[2];
  uint64_t v200;
  char v201;
  uint64_t v202[4];
  void *__p[2];
  uint64_t v204;
  char v205;
  _BYTE *v206;
  uint64_t v207;
  char v208;
  __int16 v209;
  char v210;
  __int16 v211;
  __int16 v212;
  char v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE v217[24];
  _BYTE *v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  v6 = a1[58];
  if (!v6)
    return 0;
  v11 = *(_DWORD *)(a3 + 48);
  v12 = a1 + 58;
  do
  {
    v13 = *(_DWORD *)(v6 + 32);
    v14 = v13 >= v11;
    if (v13 >= v11)
      v15 = (uint64_t *)v6;
    else
      v15 = (uint64_t *)(v6 + 8);
    if (v14)
      v12 = (_QWORD *)v6;
    v6 = *v15;
  }
  while (*v15);
  if (v12 == a1 + 58 || v11 < *((_DWORD *)v12 + 8))
    return 0;
  v17 = v12 + 5;
  v16 = (_QWORD *)v12[5];
  v18 = v17[1] - (_QWORD)v16;
  if ((unint64_t)v18 < 9)
  {
    v23 = 1;
  }
  else
  {
    v19 = v18 >> 3;
    if (*v16)
      v20 = *v16 + 8;
    else
      v20 = 0;
    v21 = *(_QWORD *)(v20 + 72);
    v22 = 2;
    if (v19 > 2)
      v22 = v19;
    v23 = 1;
    while (1)
    {
      v24 = v16[v23];
      v25 = v24 ? v24 + 8 : 0;
      if (*(_QWORD *)(v25 + 72) != v21 || *(unsigned __int8 *)(v25 + 129) > (int)*(float *)(a3 + 392))
        break;
      if (v22 == ++v23)
      {
        v23 = v22;
        break;
      }
    }
  }
  v26 = (unsigned __int8 *)v16[v23 - 1];
  if (!v26)
    return 0;
  v205 = 0;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v218 = 0;
  LOBYTE(__p[0]) = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v202[0] = a2;
  v202[1] = a3;
  v202[2] = a4;
  v202[3] = (uint64_t)(a1 + 82);
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 672))(v199, a1);
  if (v205 == v201)
  {
    if (!v205)
      goto LABEL_44;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v199;
    v204 = v200;
    v199[1] = 0;
    v200 = 0;
    v199[0] = 0;
  }
  else if (v205)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v205 = 0;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v199;
    v204 = v200;
    v199[1] = 0;
    v200 = 0;
    v199[0] = 0;
    v205 = 1;
  }
  if (v201 && v199[0])
  {
    v199[1] = v199[0];
    operator delete(v199[0]);
  }
LABEL_44:
  v206 = v26 + 8;
  if (*(float *)(a3 + 780) >= *(float *)(a3 + 204))
    v30 = *(_BYTE *)(a4 + 250);
  else
    v30 = *(_BYTE *)(a4 + 250) | 2;
  if (v205)
  {
    v31 = *(_QWORD *)(a4 + 296);
    if (!v31)
    {
      v32 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a4, 0);
      v31 = *v32;
      *(_QWORD *)(a4 + 296) = *v32;
    }
    v33 = *(unsigned __int8 *)(v31 + 97);
    if (v33)
    {
      if (!v205)
      {
        result = std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        return result;
      }
      v34 = v33 - 1;
      if (v34 < ((char *)__p[1] - (char *)__p[0]) >> 2)
        __p[1] = (char *)__p[0] + 4 * v34;
    }
  }
  if ((v30 & 1) != 0)
  {
    v37 = *(_QWORD *)(a4 + 296);
    if (!v37)
    {
      v38 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a4, 0);
      v37 = *v38;
      *(_QWORD *)(a4 + 296) = *v38;
    }
    v36 = *(_BYTE *)(v37 + 88) == 9;
    if ((*(_BYTE *)(a3 + 1270)
       || (v39 = atomic_load((unsigned __int8 *)(a3 + 1240)), (v39 & 1) == 0)
       || !*(_BYTE *)(a3 + 1245))
      && (v35 = md::PointLabelFeature::newLayoutIconPart((md::PointLabelFeature *)v202, v27)) != 0
      || (v35 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 656))(a1, v202)) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 176))(v35, 1);
      if (!*(_BYTE *)(a3 + 1245))
      {
        v40 = atomic_load((unsigned __int8 *)(a3 + 1240));
        if ((v40 & 1) != 0 && !*(_BYTE *)(a3 + 1245) && *(_BYTE *)(a3 + 822) != 1)
          *(_BYTE *)(v35 + 567) = 1;
      }
      if (*((_BYTE *)a1 + 652))
      {
        *(_BYTE *)(v35 + 567) = *(_BYTE *)(a2 + 3665) ^ 1;
        *(_BYTE *)(v35 + 568) = 1;
      }
    }
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  v193 = v36;
  v41 = 0;
  if ((v30 & 2) != 0)
  {
    v43 = 87;
    switch(*(_BYTE *)(a4 + 144))
    {
      case 0:
      case 2:
        v43 = 86;
        goto LABEL_75;
      case 5:
        v50 = *(_QWORD *)(a4 + 312);
        if (!v50)
        {
          v51 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
          v50 = *v51;
          *(_QWORD *)(a4 + 312) = *v51;
        }
        v52 = *(unsigned __int8 *)(v50 + 46);
        if (!*(_BYTE *)(v50 + 46))
        {
          if (*(_BYTE *)(v50 + 47) == 8)
            v52 = 6;
          else
            v52 = 2;
        }
        AnnotationPart = md::PointLabelFeature::createAnnotationPart((md::LabelFeature *)a1, v202, 1, v52);
        goto LABEL_98;
      case 6:
        AnnotationPart = md::PointLabelFeature::createGraphicAnnotationPart(a1, v202, 1, 1);
LABEL_98:
        v41 = AnnotationPart;
        goto LABEL_71;
      case 9:
LABEL_75:
        v44 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 8 * v43))(a1, v202);
        v45 = 0;
        goto LABEL_77;
      case 0xA:
      case 0xB:
        v44 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 712))(a1, v202);
        v45 = 1;
LABEL_77:
        v46 = md::PointLabelFeature::newTextPart((md::LabelFeature *)a1, v202, v44, v45);
        if (!v46)
        {
          v41 = 0;
          goto LABEL_71;
        }
        if ((v30 & 8) != 0)
        {
          v48 = *(_QWORD *)(a4 + 312);
          if (!v48)
          {
            v49 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
            v48 = *v49;
            *(_QWORD *)(a4 + 312) = *v49;
          }
          v47 = *(unsigned __int8 *)(v48 + 46);
          if (!*(_BYTE *)(v48 + 46))
          {
            if (*(_BYTE *)(v48 + 47) == 8)
              v47 = 6;
            else
              v47 = 2;
          }
        }
        else if ((v30 & 0x10) != 0)
        {
          v47 = 3;
        }
        else if ((v30 & 4) != 0)
        {
          v47 = 4;
        }
        else
        {
          v47 = 1;
        }
        v54 = md::PointLabelFeature::createAnnotationPart((md::LabelFeature *)a1, v202, 1, v47);
        v55 = *(_QWORD *)(a4 + 312);
        if (!v55)
        {
          v56 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
          v55 = *v56;
          *(_QWORD *)(a4 + 312) = *v56;
        }
        v196 = v35;
        v57 = v54;
        v194 = (md::LabelPart *)v46;
        v58 = *(unsigned __int8 *)(v55 + 51);
        v59 = md::PointLabelFeature::createAnnotationPart((md::LabelFeature *)a1, v202, 2, v58);
        v60 = (md::LabelPart *)v59;
        v61 = v58 == 6 || v47 == 6;
        v62 = v193;
        if (v61)
          v62 = 1;
        v193 = v62;
        if (v57 | v59)
        {
          v63 = (md::LabelPart *)v57;
          v64 = mdm::Allocator::instance((mdm::Allocator *)v59);
          v35 = v196;
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, 696, 8);
          v65 = md::StackLabelPart::StackLabelPart(v41, 0, 0, 0, 0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 6);
          md::CompositeLabelPart::addLabelPart(v41, v194);
          if (v63)
            md::CompositeLabelPart::addLabelPart(v41, v63);
          if (v60)
            md::CompositeLabelPart::addLabelPart(v41, v60);
        }
        else
        {
          v41 = (uint64_t)v194;
          v35 = v196;
        }
        v42 = v35 != 0;
        break;
      default:
        goto LABEL_71;
    }
  }
  else
  {
LABEL_71:
    v42 = v35 != 0;
    if (!(v35 | v41))
    {
      v28 = 0;
      goto LABEL_225;
    }
  }
  v66 = *(unsigned __int8 *)(a3 + 256);
  v67 = v26 + 139;
  if (v66 == 2)
    v67 = v26 + 140;
  if (v66 == 3)
    v68 = v26 + 141;
  else
    v68 = v67;
  v189 = a1[72];
  v69 = (unsigned __int8 **)(v189 + 32 * *v68);
  v191 = *v68;
  if (!v42 || *(_BYTE *)(a4 + 242) || (v119 = *v69, *v69 == v69[1]))
  {
    *(_DWORD *)v198 = 150994944;
    v198[4] = 0;
  }
  else
  {
    *(_WORD *)v198 = *(_WORD *)v119;
    v198[2] = 0;
    *(_WORD *)&v198[3] = *(_WORD *)(v119 + 3);
  }
  v186 = v69;
  v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v70 & 1) == 0)
  {
    v71 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v169)
    {
      v170 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v170, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v71 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v71 + 299) + 16))(*((_QWORD *)v71 + 299), 968, 8);
  v28 = v72;
  v73 = (__int128 *)(v72 + 716);
  v74 = *a5;
  v75 = (_OWORD *)(v72 + 280);
  v76 = (unsigned __int8 *)(a3 + 317);
  v190 = v26[138];
  v188 = v74;
  *(_DWORD *)(v72 + 8) = 1065353216;
  if (v74)
    v76 = v198;
  v187 = v76;
  *(_QWORD *)(v72 + 16) = 0;
  *(_QWORD *)(v72 + 24) = v72;
  v77 = 0uLL;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  v78 = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(v72 + 64) = 0;
  v79 = 1065353216;
  *(_QWORD *)(v72 + 88) = 1065353216;
  *(_DWORD *)(v72 + 96) = 1065353216;
  *(_OWORD *)(v72 + 100) = 0u;
  *(_DWORD *)(v72 + 116) = 0;
  *(_OWORD *)(v72 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(v72 + 224) = 0;
  *(_BYTE *)(v72 + 200) = 0;
  *(_OWORD *)(v72 + 184) = 0u;
  *(_OWORD *)(v72 + 257) = 0u;
  *(_OWORD *)(v72 + 248) = 0u;
  *(_OWORD *)(v72 + 232) = 0u;
  *v75 = xmmword_19FFB3580;
  *(_OWORD *)(v72 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(v72 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(v72 + 328) = 1065353216;
  *(_DWORD *)(v72 + 336) = 1065353216;
  *(_DWORD *)(v72 + 356) = 0;
  *(_OWORD *)(v72 + 340) = 0u;
  *(_OWORD *)(v72 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(v72 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(v72 + 464) = 0;
  *(_OWORD *)(v72 + 424) = 0u;
  *(_BYTE *)(v72 + 440) = 0;
  *(_OWORD *)(v72 + 497) = 0u;
  *(_OWORD *)(v72 + 472) = 0u;
  *(_OWORD *)(v72 + 488) = 0u;
  *(_OWORD *)(v72 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(v72 + 536) = 1065353216;
  *(_OWORD *)(v72 + 540) = 0u;
  *(_WORD *)(v72 + 556) = 512;
  *(_BYTE *)(v72 + 562) = 0;
  *(_DWORD *)(v72 + 558) = 0;
  *(_WORD *)(v72 + 563) = -1;
  *(_DWORD *)(v72 + 565) = 0;
  *(_QWORD *)v72 = off_1E4294028;
  *(_OWORD *)(v72 + 576) = 0u;
  *(_QWORD *)(v72 + 592) = 0;
  v197 = v72 + 716;
  if ((v80 & 1) == 0)
  {
    v78 = xmmword_19FFB2E30;
    v77 = 0uLL;
    if (v171)
    {
      v172 = operator new();
      *(_QWORD *)(v172 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v172 + 24) = "VectorKitLabels";
      *(_OWORD *)(v172 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v172 = &off_1E42B5668;
      *(_QWORD *)(v172 + 8) = "VectorKitLabels";
      *(_OWORD *)(v172 + 72) = 0u;
      *(_OWORD *)(v172 + 88) = 0u;
      *(_OWORD *)(v172 + 104) = 0u;
      *(_OWORD *)(v172 + 120) = 0u;
      *(_OWORD *)(v172 + 136) = 0u;
      *(_OWORD *)(v172 + 152) = 0u;
      *(_OWORD *)(v172 + 168) = 0u;
      *(_OWORD *)(v172 + 184) = 0u;
      *(_OWORD *)(v172 + 200) = 0u;
      *(_OWORD *)(v172 + 216) = 0u;
      *(_OWORD *)(v172 + 232) = 0u;
      *(_QWORD *)(v172 + 248) = 0;
      *(_OWORD *)(v172 + 56) = 0u;
      v173 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v172 + 56), 0);
      if ((_DWORD)v173)
        geo::read_write_lock::logFailure(v173, (uint64_t)"initialization", v174);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v172 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v172 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v172;
      v73 = (__int128 *)v197;
      v77 = 0uLL;
      v78 = xmmword_19FFB2E30;
    }
  }
  v81 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  *(_QWORD *)(v28 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(v28 + 608) = 0;
  *(_BYTE *)(v28 + 616) = 0;
  *(_WORD *)(v28 + 628) = 1;
  *(_BYTE *)(v28 + 630) = 0;
  *(_QWORD *)v28 = off_1E429C6C0;
  *(_OWORD *)(v28 + 632) = v77;
  *(_OWORD *)(v28 + 648) = v77;
  v75[24] = v78;
  *(_BYTE *)(v28 + 680) = 0;
  *(_OWORD *)(v28 + 684) = v77;
  *(_OWORD *)(v28 + 700) = v77;
  *v73 = v78;
  *(_BYTE *)(v28 + 732) = 0;
  *(_QWORD *)(v28 + 736) = 0;
  *(_QWORD *)(v28 + 752) = 0;
  *(_QWORD *)(v28 + 744) = 0;
  v83 = v73;
  if ((v82 & 1) == 0)
  {
    v81 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v176)
    {
      v177 = operator new();
      *(_QWORD *)(v177 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v177 + 24) = "VectorKitLabels";
      *(_OWORD *)(v177 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v177 = &off_1E42B5668;
      *(_QWORD *)(v177 + 8) = "VectorKitLabels";
      *(_OWORD *)(v177 + 72) = 0u;
      *(_OWORD *)(v177 + 88) = 0u;
      *(_OWORD *)(v177 + 104) = 0u;
      *(_OWORD *)(v177 + 120) = 0u;
      *(_OWORD *)(v177 + 136) = 0u;
      *(_OWORD *)(v177 + 152) = 0u;
      *(_OWORD *)(v177 + 168) = 0u;
      *(_OWORD *)(v177 + 184) = 0u;
      *(_OWORD *)(v177 + 200) = 0u;
      *(_OWORD *)(v177 + 216) = 0u;
      *(_OWORD *)(v177 + 232) = 0u;
      *(_QWORD *)(v177 + 248) = 0;
      *(_OWORD *)(v177 + 56) = 0u;
      v178 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v177 + 56), 0);
      if ((_DWORD)v178)
        geo::read_write_lock::logFailure(v178, (uint64_t)"initialization", v179);
      v180 = malloc_create_zone(0, 0);
      *(_QWORD *)(v177 + 48) = v180;
      malloc_set_zone_name(v180, "VectorKitLabels");
      *(_QWORD *)(v177 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v177;
      v81 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v83 = (__int128 *)v197;
    }
  }
  *(_QWORD *)(v28 + 760) = *((_QWORD *)v81 + 299);
  *(_QWORD *)(v28 + 776) = 0;
  *(_QWORD *)(v28 + 768) = 0;
  *(_DWORD *)(v28 + 784) = 255;
  *(_DWORD *)(v28 + 792) = 0;
  *(_QWORD *)(v28 + 800) = 0;
  *(_QWORD *)(v28 + 816) = 0;
  *(_QWORD *)(v28 + 808) = 0;
  if ((v84 & 1) == 0)
  {
    v81 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v181)
    {
      v182 = operator new();
      *(_QWORD *)(v182 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v182 + 24) = "VectorKitLabels";
      *(_OWORD *)(v182 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v182 = &off_1E42B5668;
      *(_QWORD *)(v182 + 8) = "VectorKitLabels";
      *(_OWORD *)(v182 + 72) = 0u;
      *(_OWORD *)(v182 + 88) = 0u;
      *(_OWORD *)(v182 + 104) = 0u;
      *(_OWORD *)(v182 + 120) = 0u;
      *(_OWORD *)(v182 + 136) = 0u;
      *(_OWORD *)(v182 + 152) = 0u;
      *(_OWORD *)(v182 + 168) = 0u;
      *(_OWORD *)(v182 + 184) = 0u;
      *(_OWORD *)(v182 + 200) = 0u;
      *(_OWORD *)(v182 + 216) = 0u;
      *(_OWORD *)(v182 + 232) = 0u;
      *(_QWORD *)(v182 + 248) = 0;
      *(_OWORD *)(v182 + 56) = 0u;
      v183 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v182 + 56), 0);
      if ((_DWORD)v183)
        geo::read_write_lock::logFailure(v183, (uint64_t)"initialization", v184);
      v185 = malloc_create_zone(0, 0);
      *(_QWORD *)(v182 + 48) = v185;
      malloc_set_zone_name(v185, "VectorKitLabels");
      *(_QWORD *)(v182 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v182;
      v81 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v83 = (__int128 *)v197;
    }
  }
  v85 = (unint64_t *)(v28 + 800);
  *(_QWORD *)(v28 + 824) = *((_QWORD *)v81 + 299);
  *(_DWORD *)(v28 + 832) = 150994944;
  *(_DWORD *)(v28 + 836) = 0;
  *(_WORD *)(v28 + 840) = 9;
  v86 = *(unsigned __int8 *)(a4 + 244);
  v87 = *(_BYTE *)(a4 + 248);
  *(_BYTE *)(v28 + 842) = *(_BYTE *)(a4 + 251);
  *(_WORD *)(v28 + 843) = v87;
  *(_WORD *)((char *)v83 + 129) = v86;
  *(_WORD *)(v28 + 847) = 9;
  *(_WORD *)(v28 + 850) = 0x8000;
  *(_BYTE *)(v28 + 852) = 0x80;
  v88 = *(_QWORD *)(a4 + 272);
  if (!v88)
  {
    v89 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a4);
    v88 = *v89;
    *(_QWORD *)(a4 + 272) = *v89;
  }
  *(_BYTE *)(v28 + 853) = *(_BYTE *)(v88 + 64);
  *(_WORD *)(v28 + 854) = 0;
  *(_BYTE *)(v28 + 856) = 0;
  v90 = *(unsigned __int8 *)(a4 + 253);
  *(_BYTE *)(v28 + 857) = v90;
  *(_WORD *)(v28 + 858) = v90;
  v91 = *(float *)(a4 + 164);
  *(_BYTE *)(v28 + 860) = v91 > 0.0;
  *(_QWORD *)(v28 + 864) = 1065353216;
  *(_OWORD *)(v28 + 888) = 0u;
  *(_OWORD *)(v28 + 904) = 0u;
  v192 = (uint64_t *)(v28 + 888);
  *(_BYTE *)(v28 + 920) = 0;
  *(_BYTE *)(v28 + 921) = 1;
  v92 = *(_BYTE *)(a4 + 250);
  *(_BYTE *)(v28 + 922) = v92;
  *(_BYTE *)(v28 + 923) = *(_BYTE *)(a4 + 144);
  *(_BYTE *)(v28 + 924) = *(_BYTE *)(v88 + 70);
  *(_WORD *)(v28 + 941) = 0;
  v195 = (_BYTE *)(v28 + 925);
  *(_OWORD *)(v28 + 925) = 0u;
  *(_BYTE *)(v28 + 943) = v190;
  *(_BYTE *)(v28 + 944) = v191;
  *(_WORD *)(v28 + 945) = 512;
  *(_DWORD *)(v28 + 948) = 1065353216;
  *(_QWORD *)(v28 + 952) = 0x100000001000001;
  *(_BYTE *)(v28 + 960) = *(_BYTE *)(a3 + 1265);
  if (v90 == 5)
  {
    if (!*(_BYTE *)(a3 + 164))
    {
      v93 = 4;
LABEL_137:
      *(_BYTE *)(v28 + 858) = v93;
    }
  }
  else if (v91 > 0.0 && !v90)
  {
    v93 = 1;
    goto LABEL_137;
  }
  if (*(_BYTE *)(a3 + 1260) && *(_BYTE *)(a2 + 3152))
    *(_BYTE *)(v28 + 954) = 1;
  v94 = *(unsigned __int8 **)(a2 + 432);
  if (v35)
  {
    md::CompositeLabelPart::addLabelPart(v28, (md::LabelPart *)v35);
    *v195 = 1;
  }
  else if ((v92 & 1) != 0)
  {
    md::LabelIconStyleMonitor::initialize(v28 + 736, a4);
  }
  if (v41)
  {
    md::CompositeLabelPart::addLabelPart(v28, (md::LabelPart *)v41);
    *(_BYTE *)(v28 + 930) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 672))(v41);
    *(_BYTE *)(v28 + 926) = 1;
    *(_BYTE *)(v28 + 955) = *(_BYTE *)(a2 + 3624);
    v95 = *(_BYTE *)(v28 + 922);
    *(_BYTE *)(v28 + 927) = (v95 & 0x1C) != 0;
    *(_BYTE *)(v28 + 928) = (v95 & 4) != 0;
    *(_BYTE *)(v28 + 942) = 1;
    v96 = *(_QWORD *)(a4 + 312);
    if (!v96)
    {
      v97 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
      v96 = *v97;
      *(_QWORD *)(a4 + 312) = *v97;
    }
    *(_QWORD *)((char *)v83 + 217) = *(_QWORD *)(v96 + 46);
    v98 = *(_QWORD *)(a4 + 296);
    if (!v98)
    {
      v99 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a4, 0);
      v98 = *v99;
      *(_QWORD *)(a4 + 296) = *v99;
    }
    *(_BYTE *)(v28 + 941) = *(_BYTE *)(v98 + 93);
    v100 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 504);
    if (v100)
    {
      v101 = *(unsigned __int8 *)(v100 + 88);
      *(_BYTE *)(v28 + 945) = v101;
      if (v101)
        *(_BYTE *)(v28 + 946) = v101;
    }
    else
    {
      *(_BYTE *)(v28 + 945) = 0;
    }
  }
  v102 = *(unsigned __int8 *)(v28 + 858);
  *(_BYTE *)(v28 + 565) = *(_BYTE *)(v28 + 858) != 0;
  if (v102)
  {
    v103 = operator new();
    v104 = *v192;
    *v192 = v103;
    if (v104)
      MEMORY[0x1A1AF4E00](v104, 0x1000C40AE2C30F4);
    if (!v35)
      goto LABEL_164;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 64))(v35, 1, 0);
    if (*(_BYTE *)(v28 + 858) == 5)
    {
      *(_BYTE *)(v28 + 859) = 1;
      v105 = operator new();
      v106 = *(_QWORD *)(v28 + 904);
      *(_QWORD *)(v28 + 904) = v105;
      if (!v106)
      {
LABEL_163:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 40))(v35, v105);
LABEL_164:
        if (v41)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 64))(v41, 1, 0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 40))(v41, *v192);
        }
        goto LABEL_166;
      }
      MEMORY[0x1A1AF4E00](v106, 0x1000C40AE2C30F4);
    }
    v105 = *(_QWORD *)(v28 + 904);
    if (!v105)
      v105 = *v192;
    goto LABEL_163;
  }
LABEL_166:
  if (!v35 || *(_BYTE *)(a4 + 242) || *(_BYTE *)(v28 + 842) == 5)
  {
    *(_BYTE *)(v28 + 921) = 1;
    *(_BYTE *)(v28 + 958) = 1;
    if (!v41)
      goto LABEL_224;
  }
  else
  {
    v124 = *(_BYTE *)(v189 + 32 * v191 + 24);
    v125 = *v186;
    v126 = v186[1];
    if (v124)
      v124 = 0xCCCCCCCCCCCCCCCDLL * (v126 - v125) < 2;
    *(_BYTE *)(v28 + 921) = v124;
    *(_BYTE *)(v28 + 958) = v125 == v126;
    if (!v41)
      goto LABEL_224;
    if (v125 != v126)
    {
      v107 = *v125;
      v108 = v125[1];
      v109 = *(_WORD *)(v125 + 3);
      goto LABEL_171;
    }
  }
  v107 = 0;
  v108 = 0;
  v109 = 9;
LABEL_171:
  *(_WORD *)((char *)v199 + 3) = v109;
  v110 = (_DWORD *)(v28 + 837);
  LOBYTE(v199[0]) = v107;
  *(_WORD *)((char *)v199 + 1) = v108;
  md::CaptionedIconLabelPart::populatePlacement(v28, v28 + 837, (unsigned __int8 *)v199, 1);
  v112 = (_DWORD *)(v28 + 832);
  v113 = *(unsigned __int16 *)(a4 + 246);
  *(_BYTE *)(v28 + 856) = (v113 & 0xAA | *(unsigned __int8 *)(v189 + 32 * v191 + 25)) != 0;
  if (!*(_BYTE *)(v28 + 958) || v113)
  {
    md::CaptionedIconLabelPart::populatePlacement(v28, v28 + 832, v187, v188 != 0);
  }
  else
  {
    *v112 = *v110;
    *(_BYTE *)(v28 + 836) = *(_BYTE *)(v28 + 841);
  }
  v114 = *(unsigned __int8 *)(v28 + 832);
  v116 = v114 == 3 || v114 == 100;
  *(_BYTE *)(v28 + 855) = v116;
  *(_BYTE *)(v28 + 920) = (v114 & 0xFE) == 2;
  if (v114 != 5)
  {
    if ((v114 & 0xFE) == 2)
    {
      v118 = v94[472] + *(unsigned __int8 *)(v28 + 836);
      if (!*(_BYTE *)(v28 + 856))
      {
        v117 = ((v118 + 32) >> 5) & 6;
        goto LABEL_191;
      }
    }
    else
    {
      v117 = *(unsigned __int8 *)(v28 + 835);
      if (v117 != 10)
        goto LABEL_191;
      LOBYTE(v118) = *(_BYTE *)(v28 + 836);
    }
    LOBYTE(v117) = (v118 + 16) >> 5;
    goto LABEL_191;
  }
  LOBYTE(v117) = md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition((md::CaptionedIconLabelPart *)a3, (md::Label *)v94, v111);
LABEL_191:
  *(_BYTE *)(v28 + 847) = v117;
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 368))(v41);
  v120 = *(unsigned __int8 *)(v28 + 833);
  v121 = *(unsigned __int8 *)(v28 + 847);
  v122 = (char *)&diagonalDownLabelAnchors;
  switch(*(_BYTE *)(v28 + 833))
  {
    case 1:
      goto LABEL_196;
    case 4:
      v122 = (char *)&diagonalUpLabelAnchors;
      goto LABEL_193;
    case 8:
LABEL_193:
      v123 = &v122[2 * v121];
      if (!*v123 || !v123[1])
        goto LABEL_195;
      goto LABEL_202;
    case 0x10:
      if ((_DWORD)v121 == 6)
        v120 = 8;
      else
        v120 = 1;
      if ((_DWORD)v121 == 2)
        v120 = 4;
LABEL_202:
      *(_BYTE *)(v28 + 848) = v120;
      if ((v120 & 0xC) != 0)
      {
        if (v120 == 4)
        {
          v79 = 0x3F12D5E73F51B3F2;
        }
        else if (v120 == 8)
        {
          v79 = 0xBF12D5E73F51B3F2;
        }
        *(_QWORD *)(v28 + 864) = v79;
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 376))(v41);
      }
      break;
    default:
LABEL_195:
      LOBYTE(v120) = 1;
LABEL_196:
      *(_BYTE *)(v28 + 848) = v120;
      break;
  }
  if (!*(_BYTE *)(v28 + 955))
    goto LABEL_224;
  if (*(_BYTE *)(v28 + 921))
  {
    md::CaptionedIconLabelPart::initAlternatePlacements(v28);
    goto LABEL_216;
  }
  *(_QWORD *)(v28 + 808) = *(_QWORD *)(v28 + 800);
  v132 = *v186;
  v133 = v186[1];
  if (*v186 == v133)
    goto LABEL_216;
  do
  {
    v134 = *v132;
    if (!*v132)
    {
      if (*(unsigned __int8 *)(v28 + 842) <= 1u)
        v134 = 1;
      else
        v134 = *(unsigned __int8 *)(v28 + 842);
    }
    if (v132[3] != 9)
    {
      v135 = *(unsigned __int16 *)(v132 + 3);
LABEL_250:
      v136 = v135 >> 8;
      goto LABEL_251;
    }
    if (*((_BYTE *)v83 + 129) != 9)
    {
      v135 = *(unsigned __int16 *)((char *)v83 + 129);
      goto LABEL_250;
    }
    if (*v195)
      LOWORD(v135) = 6;
    else
      LOWORD(v135) = 8;
    if (*v195)
      LOWORD(v136) = -64;
    else
      LOWORD(v136) = 0;
LABEL_251:
    if (v134 == 1 && *(_BYTE *)(v28 + 930) != 0 && (v136 & 0x1F) == 0)
    {
      if (v135 <= 9u && (gss::LabelPositionToMask(v135) & 0x83) != 0)
        LOWORD(v135) = mirroredHorizontalPositions[v135];
      LOWORD(v136) = 32 * v135;
      if ((v135 & 0xF8) != 0)
        LOWORD(v136) = 0;
    }
    v139 = v135;
    v140 = v135 | (unsigned __int16)((_WORD)v136 << 8);
    if (v139 == 8)
    {
      if (*v195)
        v140 = -16378;
      else
        v134 = 1;
    }
    v141 = v132[1];
    if (!v132[1])
    {
      if (*(unsigned __int8 *)(v28 + 843) <= 1u)
        v141 = 1;
      else
        v141 = *(unsigned __int8 *)(v28 + 843);
    }
    if (v134 != *(unsigned __int8 *)v112
      || v141 != *(unsigned __int8 *)(v28 + 833)
      || *(unsigned __int8 *)(v28 + 835) != v140
      || v140 == 10 && *(unsigned __int8 *)(v28 + 836) != (unsigned __int16)(v140 & 0xFF00) >> 8)
    {
      v142 = *(_QWORD *)(v28 + 808);
      v143 = *(_QWORD *)(v28 + 816);
      if (v142 >= v143)
      {
        v146 = v85;
        v147 = *v85;
        v148 = 0xCCCCCCCCCCCCCCCDLL * (v142 - *v85);
        v149 = v148 + 1;
        if (v148 + 1 >= 0x3333333333333334)
          abort();
        v150 = 0xCCCCCCCCCCCCCCCDLL * (v143 - v147);
        if (2 * v150 > v149)
          v149 = 2 * v150;
        if (v150 >= 0x1999999999999999)
          v149 = 0x3333333333333333;
        if (v149)
        {
          v151 = 5 * v149;
          v152 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v28 + 824) + 16))(*(_QWORD *)(v28 + 824), 5 * v149, 1);
          v153 = v152 + 5 * v148;
          v149 = v152 + v151;
          if (v152)
          {
            *(_BYTE *)v153 = v134;
            *(_BYTE *)(v153 + 1) = v141;
            *(_BYTE *)(v153 + 2) = 0;
            *(_WORD *)(v153 + 3) = v140;
          }
          v85 = v146;
        }
        else
        {
          v153 = 5 * v148;
          v85 = v146;
        }
        v145 = v197;
        v154 = *(_QWORD *)(v197 + 92);
        v155 = *v85;
        v156 = v153;
        if (v154 != *v85)
        {
          do
          {
            v157 = *(_WORD *)(v154 - 5);
            v154 -= 5;
            *(_WORD *)(v156 - 5) = v157;
            v156 -= 5;
            *(_BYTE *)(v156 + 2) = 0;
            *(_WORD *)(v156 + 3) = *(_WORD *)(v154 + 3);
          }
          while (v154 != v155);
          v154 = *v85;
        }
        v144 = v153 + 5;
        *(_QWORD *)(v28 + 800) = v156;
        *(_QWORD *)(v28 + 808) = v153 + 5;
        v158 = *(_QWORD *)(v28 + 816);
        *(_QWORD *)(v28 + 816) = v149;
        if (v154)
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v28 + 824) + 40))(*(_QWORD *)(v28 + 824), v154, v158 - v154);
      }
      else
      {
        if (v142)
        {
          *(_BYTE *)v142 = v134;
          *(_BYTE *)(v142 + 1) = v141;
          *(_BYTE *)(v142 + 2) = 0;
          *(_WORD *)(v142 + 3) = v140;
        }
        v144 = v142 + 5;
        v145 = v197;
      }
      *(_QWORD *)(v145 + 92) = v144;
    }
    v132 += 5;
    v83 = (__int128 *)v197;
  }
  while (v132 != v133);
  v159 = *v85;
  v160 = *(int64x2_t *)(v197 + 92);
  v161 = vsubq_s64(v160, vdupq_n_s64(*v85));
  v162 = 0xCCCCCCCCCCCCCCCDLL * v161.i64[0];
  v110 = (_DWORD *)(v28 + 837);
  if (0xCCCCCCCCCCCCCCCDLL * v161.i64[1] > 0xCCCCCCCCCCCCCCCDLL * v161.i64[0])
  {
    if (v160.i64[0] == v159)
    {
      v165 = v161.i64[0];
      v166 = v161.i64[0];
    }
    else
    {
      v163 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v28 + 824) + 16))(*(_QWORD *)(v28 + 824), v161.i64[0], 1);
      v159 = *(_QWORD *)(v28 + 808);
      v164 = *(_QWORD *)(v28 + 800);
      v165 = v163 + 5 * v162;
      v166 = v165;
      if (v159 != v164)
      {
        do
        {
          v167 = *(_WORD *)(v159 - 5);
          v159 -= 5;
          *(_WORD *)(v166 - 5) = v167;
          v166 -= 5;
          *(_BYTE *)(v166 + 2) = 0;
          *(_WORD *)(v166 + 3) = *(_WORD *)(v159 + 3);
        }
        while (v159 != v164);
        v159 = *v85;
      }
    }
    *(_QWORD *)(v28 + 800) = v166;
    *(_QWORD *)(v28 + 808) = v165;
    v168 = *(_QWORD *)(v28 + 816);
    *(_QWORD *)(v28 + 816) = v165;
    if (v159)
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v28 + 824) + 40))(*(_QWORD *)(v28 + 824), v159, v168 - v159);
  }
LABEL_216:
  v127 = *(unsigned __int8 **)(v28 + 800);
  v129 = v127 != *(unsigned __int8 **)(v28 + 808)
      && *(unsigned __int8 *)v110 == *v127
      && *(unsigned __int8 *)(v28 + 838) == v127[1]
      && (v128 = *(unsigned __int8 *)(v28 + 840), v128 == v127[3])
      && (v128 != 10 || *(unsigned __int8 *)(v28 + 841) == v127[4]);
  *(_BYTE *)(v28 + 956) = v129;
LABEL_224:
  *(_BYTE *)(v28 + 561) = v193;
LABEL_225:
  v130 = v218;
  if (v218 == v217)
  {
    v131 = 4;
    v130 = v217;
LABEL_229:
    (*(void (**)(void))(*v130 + 8 * v131))();
  }
  else if (v218)
  {
    v131 = 5;
    goto LABEL_229;
  }
  if (SHIBYTE(v216) < 0)
    operator delete(v214);
  if (v205)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v28;
}

void sub_19F196474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  md::PartCreationContext::~PartCreationContext((md::PartCreationContext *)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::createAnnotationPart(md::LabelFeature *a1, uint64_t *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  unsigned __int8 v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t GraphicAnnotationPart;
  md::LabelPart *v16;
  BOOL v17;
  uint64_t v18;
  md::LabelPart *v19;
  uint64_t v20;
  md::LabelPart *v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a3;
  switch(a4)
  {
    case 2:
    case 6:
      v7 = a2[2];
      v8 = *(_QWORD *)(v7 + 312);
      if ((_DWORD)a3 == 1)
      {
        if (!v8)
        {
          v9 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
          v8 = *v9;
          *(_QWORD *)(v7 + 312) = *v9;
        }
        v10 = (unsigned __int8 *)(v8 + 47);
      }
      else
      {
        if (!v8)
        {
          v22 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
          v8 = *v22;
          *(_QWORD *)(v7 + 312) = *v22;
        }
        v10 = (unsigned __int8 *)(v8 + 52);
      }
      v23 = (*(uint64_t (**)(md::LabelFeature *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 712))(a1, a2, *v10);
      v24 = md::PointLabelFeature::newTextPart(a1, a2, v23, 1);
      v13 = (_BYTE *)v24;
      if (v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 176))(v24, 11);
      return (uint64_t)v13;
    case 3:
      return md::PointLabelFeature::createGraphicAnnotationPart((uint64_t *)a1, a2, a3, 1);
    case 4:
      return (*(uint64_t (**)(md::LabelFeature *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 736))(a1, a2, a3);
    case 5:
      {
        v25 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
      v14 = md::StackLabelPart::StackLabelPart((uint64_t)v13, 1, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 176))(v14, 9);
      v13[630] = 1;
      GraphicAnnotationPart = md::PointLabelFeature::createGraphicAnnotationPart((uint64_t *)a1, a2, v4, 1);
      v16 = (md::LabelPart *)GraphicAnnotationPart;
      v17 = GraphicAnnotationPart != 0;
      if (GraphicAnnotationPart)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)GraphicAnnotationPart + 176))(GraphicAnnotationPart, 10);
        md::CompositeLabelPart::addLabelPart((uint64_t)v13, v16);
      }
      v18 = md::PointLabelFeature::createGraphicAnnotationPart((uint64_t *)a1, a2, v4, 1);
      v19 = (md::LabelPart *)v18;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 176))(v18, 10);
        md::CompositeLabelPart::addLabelPart((uint64_t)v13, v19);
        v17 = 1;
      }
      v20 = md::PointLabelFeature::createGraphicAnnotationPart((uint64_t *)a1, a2, v4, 1);
      v21 = (md::LabelPart *)v20;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 176))(v20, 10);
        md::CompositeLabelPart::addLabelPart((uint64_t)v13, v21);
      }
      else if (!v17)
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
        return 0;
      }
      return (uint64_t)v13;
    default:
      return 0;
  }
}

void sub_19F1968A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::PointLabelFeature::additionalIconAttributeValues(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t md::PointLabelFeature::mainTextIndex(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  if ((*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this)
    && *(_BYTE *)(*((_QWORD *)this + 63) + 236) == 1)
  {
    return md::PointLabelFeature::externalFeatureTextIndex((uint64_t *)this, 1, *(_QWORD *)a2);
  }
  else
  {
    return *(unsigned __int8 *)(*((_QWORD *)a2 + 8) + 130);
  }
}

void md::PointLabelFeature::iconPackColor(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  int v7;
  md::LabelStyle *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  _BYTE *v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  float v30;
  int v31;
  int v32;
  int v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  int v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float v48;
  float v49;
  float v50;
  int v51;
  int v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE *v60;
  std::__shared_weak_count *v61;
  char v62;
  _BYTE v63[5];
  __int128 v64;
  __int128 v65;
  std::string v66[2];
  std::string *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 85))
    goto LABEL_2;
  *(_BYTE *)(a3 + 85) = 1;
  v10 = *(_QWORD *)(a3 + 8);
  v9 = *(md::LabelStyle **)(a3 + 16);
  v11 = *(_QWORD *)a3;
  v12 = (char *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 720))(a2, a3);
  v13 = *(_QWORD *)(a3 + 16);
  if (!*(_QWORD *)(v13 + 296))
    *(_QWORD *)(v13 + 296) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a3 + 16), 0);
  (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a2 + 680))(v63, a2);
  LOBYTE(v60) = 0;
  v62 = 0;
  if (!(*(uint64_t (**)(uint64_t *))(*a2 + 64))(a2))
  {
    v67 = 0;
    memset(v66, 0, sizeof(v66));
    goto LABEL_24;
  }
  v14 = a2[63];
  if (*(char *)(v14 + 143) < 0)
    std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)(v14 + 120), *(_QWORD *)(v14 + 128));
  else
    v66[0] = *(std::string *)(v14 + 120);
  v18 = *(_QWORD *)(v14 + 168);
  if (!v18)
    goto LABEL_22;
  if (v18 != v14 + 144)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_22:
    v67 = (std::string *)v18;
    goto LABEL_24;
  }
  v67 = &v66[1];
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
LABEL_24:
  md::LabelStyle::pointIconImageKey(&v64, v9, v11, v10, a2 + 82, v12, (uint64_t)v63, 0, (uint64_t)&v60, 0, 255, 0, (uint64_t)v66);
  v65 = v64;
  v64 = 0uLL;
  v19 = v67;
  if (v67 == &v66[1])
  {
    v20 = 4;
    v19 = &v66[1];
  }
  else
  {
    if (!v67)
      goto LABEL_29;
    v20 = 5;
  }
  (*(void (**)(void))(v19->__r_.__value_.__r.__words[0] + 8 * v20))();
LABEL_29:
  if (SHIBYTE(v66[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66[0].__r_.__value_.__l.__data_);
  md::LabelImageLoader::loadIconImage((grl::Allocator *)&v60, *(_QWORD *)(*(_QWORD *)a3 + 264), &v65);
  v23 = v60;
  if (!v60)
    goto LABEL_71;
  if (v60[168])
  {
    LOBYTE(v21) = v60[169];
    v24 = (float)LODWORD(v21);
    LOBYTE(v22) = v60[170];
    v25 = (float)v22;
    LOBYTE(v22) = v60[171];
    v26 = (float)v22;
    v27 = v60[172];
    if ((float)(v24 * 0.0039216) >= 0.04045)
      v28 = powf((float)(v24 * 0.0037171) + 0.052133, 2.4);
    else
      v28 = v24 * 0.00030353;
    if ((float)(v25 * 0.0039216) >= 0.04045)
      v29 = powf((float)(v25 * 0.0037171) + 0.052133, 2.4);
    else
      v29 = v25 * 0.00030353;
    if ((float)(v26 * 0.0039216) >= 0.04045)
      v30 = powf((float)(v26 * 0.0037171) + 0.052133, 2.4);
    else
      v30 = v26 * 0.00030353;
    v22 = 1132396544;
    v31 = (int)(float)(v28 * 255.0);
    v21 = v30 * 255.0;
    v32 = (int)(float)(v29 * 255.0);
    v33 = (int)v21;
    if (!*(_BYTE *)(a3 + 90))
    {
      *(_DWORD *)(a3 + 86) = (v27 << 24) | (v33 << 16) | (v32 << 8) | v31;
      *(_BYTE *)(a3 + 90) = 1;
      if (!v23[178])
        goto LABEL_59;
      goto LABEL_45;
    }
    *(_BYTE *)(a3 + 86) = v31;
    *(_BYTE *)(a3 + 87) = v32;
    *(_BYTE *)(a3 + 88) = v33;
    *(_BYTE *)(a3 + 89) = v27;
  }
  if (!v23[178])
    goto LABEL_59;
LABEL_45:
  LOBYTE(v21) = v23[179];
  v34 = (float)LODWORD(v21);
  LOBYTE(v22) = v23[180];
  v35 = (float)v22;
  LOBYTE(v22) = v23[181];
  v36 = (float)v22;
  v37 = v23[182];
  if ((float)(v34 * 0.0039216) >= 0.04045)
    v38 = powf((float)(v34 * 0.0037171) + 0.052133, 2.4);
  else
    v38 = v34 * 0.00030353;
  if ((float)(v35 * 0.0039216) >= 0.04045)
    v39 = powf((float)(v35 * 0.0037171) + 0.052133, 2.4);
  else
    v39 = v35 * 0.00030353;
  if ((float)(v36 * 0.0039216) >= 0.04045)
    v40 = powf((float)(v36 * 0.0037171) + 0.052133, 2.4);
  else
    v40 = v36 * 0.00030353;
  v22 = 1132396544;
  v41 = (int)(float)(v38 * 255.0);
  v21 = v40 * 255.0;
  v42 = (int)(float)(v39 * 255.0);
  v43 = (int)v21;
  if (*(_BYTE *)(a3 + 95))
  {
    *(_BYTE *)(a3 + 91) = v41;
    *(_BYTE *)(a3 + 92) = v42;
    *(_BYTE *)(a3 + 93) = v43;
    *(_BYTE *)(a3 + 94) = v37;
  }
  else
  {
    *(_DWORD *)(a3 + 91) = (v37 << 24) | (v43 << 16) | (v42 << 8) | v41;
    *(_BYTE *)(a3 + 95) = 1;
  }
LABEL_59:
  if (v23[173])
  {
    LOBYTE(v21) = v23[174];
    v44 = (float)LODWORD(v21);
    LOBYTE(v22) = v23[175];
    v45 = (float)v22;
    LOBYTE(v22) = v23[176];
    v46 = (float)v22;
    v47 = v23[177];
    if ((float)(v44 * 0.0039216) >= 0.04045)
      v48 = powf((float)(v44 * 0.0037171) + 0.052133, 2.4);
    else
      v48 = v44 * 0.00030353;
    if ((float)(v45 * 0.0039216) >= 0.04045)
      v49 = powf((float)(v45 * 0.0037171) + 0.052133, 2.4);
    else
      v49 = v45 * 0.00030353;
    if ((float)(v46 * 0.0039216) >= 0.04045)
      v50 = powf((float)(v46 * 0.0037171) + 0.052133, 2.4);
    else
      v50 = v46 * 0.00030353;
    v51 = (int)(float)(v48 * 255.0);
    v52 = (int)(float)(v49 * 255.0);
    v53 = (int)(float)(v50 * 255.0);
    if (!*(_BYTE *)(a3 + 100))
    {
      *(_DWORD *)(a3 + 96) = (v47 << 24) | (v53 << 16) | (v52 << 8) | v51;
      *(_BYTE *)(a3 + 100) = 1;
      v54 = v61;
      if (v61)
        goto LABEL_72;
      goto LABEL_76;
    }
    *(_BYTE *)(a3 + 96) = v51;
    *(_BYTE *)(a3 + 97) = v52;
    *(_BYTE *)(a3 + 98) = v53;
    *(_BYTE *)(a3 + 99) = v47;
  }
LABEL_71:
  v54 = v61;
  if (v61)
  {
LABEL_72:
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_76:
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_2:
  if (a4 != 6)
  {
    if (a4 == 5 && *(_BYTE *)(a3 + 90))
    {
      v7 = *(_DWORD *)(a3 + 86);
      goto LABEL_13;
    }
LABEL_15:
    v17 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a3 + 95))
    goto LABEL_15;
  v7 = *(_DWORD *)(a3 + 91);
LABEL_13:
  v15 = *(unsigned __int8 *)(a3 + 100);
  v16 = *(_DWORD *)(a3 + 96);
  *(_DWORD *)a1 = v7;
  v17 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 9) = 0;
  if (v15)
  {
    *(_DWORD *)(a1 + 5) = v16;
    *(_BYTE *)(a1 + 9) = 1;
  }
LABEL_16:
  *(_BYTE *)(a1 + 10) = v17;
}

void sub_19F19711C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelImageLoader::loadIconImage(grl::Allocator *a1, uint64_t a2, _QWORD *a3)
{
  grl::Allocator *v5;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  std::string::size_type v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  float v30;
  uint32x4_t *v31;
  uint16x4_t *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint32x4_t *v35;
  unint64_t v36;
  uint32x4_t *v37;
  uint16x4_t *v38;
  unint64_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 *v52;
  std::string *v53;
  uint64_t v54;
  void *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const void *v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  void **v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92[2];
  unint64_t v93;
  __int128 v94;
  void *__p;
  char *v96;
  char *v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  int v100;
  char v101;
  int v102;
  __int16 v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  char *v111;
  __int128 v112;
  std::string __dst;
  __int128 v114;
  __int128 v115;
  _BYTE v116[24];
  _BYTE *v117;
  IconModifiers v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;

  v5 = a1;
  v123 = *MEMORY[0x1E0C80C00];
  v112 = 0uLL;
  *(_QWORD *)&v118._isClusterIcon = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v118._opacity = _D0;
  v118._pathScale._hasValue = 0;
  LOWORD(v118._pathScale._value.type) = 0;
  v118._pathScale._value.data[6] = 0;
  *(&v118._component + 4) = 0;
  *(&v118._customColor._hasValue + 4) = 0;
  v118._shapeColor._hasValue = 0;
  v118._tailDirection._value.type = 0.0;
  *(_QWORD *)&v118._textLocale._hasValue = grl::Allocator::instance(a1);
  v118._textLocale._value.type = 0.0;
  *(_QWORD *)&v118._tailDirection._hasValue = &v118._tailDirection._value;
  v122 = 0;
  v11.n128_u8[1] = 0;
  v11.n128_u16[1] = 0;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v12 = *a3;
  if (*(_BYTE *)(*a3 + 112) == 6 && *(_BYTE *)(v12 + 180))
  {
    grl::IconModifiers::setTailDirection((uint64_t)&v118, *(float *)(v12 + 184));
    v12 = *a3;
  }
  if (*(_BYTE *)(v12 + 197))
  {
    grl::IconModifiers::setUseBalloonShape((uint64_t)&v118, 1);
    v12 = *a3;
  }
  v13 = (_QWORD *)(v12 + 120);
  if (*(char *)(v12 + 143) < 0)
  {
    v14 = *(_QWORD *)(v12 + 128);
    if (!v14)
      goto LABEL_23;
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v13 = (_QWORD *)*v13;
    if (v14 < 0x17)
      goto LABEL_9;
LABEL_13:
    v16 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_16;
  }
  v14 = *(unsigned __int8 *)(v12 + 143);
  if (!*(_BYTE *)(v12 + 143))
    goto LABEL_23;
  if (v14 >= 0x17)
    goto LABEL_13;
LABEL_9:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
LABEL_16:
  memmove(p_dst, v13, v14);
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  v11.n128_f64[0] = grl::IconModifiers::setText(&v118, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(*a3 + 112) != 6)
  {
    grl::IconModifiers::setScale((grl::IconModifiers *)&v118, *(float *)(*a3 + 188));
    grl::IconModifiers::setPathScale((uint64_t)&v118, *(float *)(*a3 + 200));
    grl::IconModifiers::setGlyphHidden((uint64_t)&v118, 1);
    grl::IconModifiers::setClusterIcon(&v118, 1);
    v18 = *(unsigned __int8 *)(*a3 + 116);
    if (v18 == 2)
    {
      grl::IconModifiers::setLandmark((uint64_t)&v118, 1);
    }
    else if (v18 == 10)
    {
      grl::IconModifiers::setSelected((uint64_t)&v118, 1);
    }
  }
LABEL_23:
  v19 = *(_QWORD *)(*a3 + 296);
  if (!v19)
    goto LABEL_41;
  if (v19 == *a3 + 272)
  {
    *(_QWORD *)&v114 = &__dst;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 24))(v19, &__dst);
    v20 = (std::string *)v114;
  }
  else
  {
    v20 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    *(_QWORD *)&v114 = v20;
  }
  if (v20 == &__dst)
  {
    (*(void (**)(std::string *))(__dst.__r_.__value_.__r.__words[0] + 32))(&__dst);
  }
  else
  {
    if (!v20)
      goto LABEL_41;
    (*(void (**)(std::string *))(v20->__r_.__value_.__r.__words[0] + 40))(v20);
  }
  v21 = *(_QWORD *)(*a3 + 296);
  if (!v21)
    goto LABEL_34;
  if (v21 != *a3 + 272)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_34:
    v117 = (_BYTE *)v21;
    goto LABEL_36;
  }
  v117 = v116;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 24))(v21, v116);
LABEL_36:
  grl::IconModifiers::setImageDataProvider((uint64_t)&v118, (uint64_t)v116);
  v22 = v117;
  if (v117 == v116)
  {
    v23 = 4;
    v22 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_41;
    v23 = 5;
  }
  v11 = ((__n128 (*)(void))*(_QWORD *)(*v22 + 8 * v23))();
LABEL_41:
  v11.n128_u8[0] = *(_BYTE *)(*a3 + 160);
  v24 = (float)v11.n128_u32[0];
  v11.n128_u8[0] = *(_BYTE *)(*a3 + 161);
  v25 = (float)v11.n128_u32[0];
  v11.n128_u8[0] = *(_BYTE *)(*a3 + 162);
  v26 = (float)v11.n128_u32[0];
  v27 = *(unsigned __int8 *)(*a3 + 163);
  if ((float)(v24 * 0.0039216) >= 0.0031308)
    v28 = (float)(powf(v24 * 0.0039216, 0.41667) * 1.055) + -0.055;
  else
    v28 = v24 * 0.050667;
  if ((float)(v25 * 0.0039216) >= 0.0031308)
    v29 = (float)(powf(v25 * 0.0039216, 0.41667) * 1.055) + -0.055;
  else
    v29 = v25 * 0.050667;
  if ((float)(v26 * 0.0039216) >= 0.0031308)
    v30 = (float)(powf(v26 * 0.0039216, 0.41667) * 1.055) + -0.055;
  else
    v30 = v26 * 0.050667;
  LODWORD(__dst.__r_.__value_.__l.__data_) = (v27 << 24) | ((int)(float)(v30 * 255.0) << 16) | ((int)(float)(v29 * 255.0) << 8) | (int)(float)(v28 * 255.0);
  grl::IconModifiers::setTransitLineColor((uint64_t)&v118, &__dst);
  grl::IconRequestOptions::setSizeGroup((uint64_t)&v118, *(_BYTE *)(*a3 + 196));
  v31 = (uint32x4_t *)grl::IconModifiers::setComponent((uint64_t)&v118, *(_BYTE *)(*a3 + 117));
  v32 = *(uint16x4_t **)(*a3 + 72);
  v33 = *(unsigned __int16 **)(*a3 + 80);
  v110 = 0;
  v111 = 0;
  v109 = 0;
  v34 = (char *)v33 - (char *)v32;
  if (v33 == (unsigned __int16 *)v32)
    goto LABEL_60;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFFLL)
    abort();
  v31 = (uint32x4_t *)operator new(2 * v34);
  v109 = v31;
  v111 = &v31->i8[4 * (v34 >> 1)];
  v35 = v31;
  if ((unint64_t)(v34 - 2) < 0x1E)
    goto LABEL_57;
  v36 = ((unint64_t)(v34 - 2) >> 1) + 1;
  v37 = v31 + 2;
  v38 = v32 + 2;
  v39 = v36 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v40 = *(uint16x8_t *)v38[-2].i8;
    v41 = vmovl_u16(*v38);
    v42 = vmovl_high_u16(*(uint16x8_t *)v38->i8);
    v37[-2] = vmovl_u16(*(uint16x4_t *)v40.i8);
    v37[-1] = vmovl_high_u16(v40);
    *v37 = v41;
    v37[1] = v42;
    v37 += 4;
    v38 += 4;
    v39 -= 16;
  }
  while (v39);
  v35 = (uint32x4_t *)((char *)v31 + 4 * (v36 & 0xFFFFFFFFFFFFFFF0));
  if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
  {
    v32 = (uint16x4_t *)((char *)v32 + 2 * (v36 & 0xFFFFFFFFFFFFFFF0));
    do
    {
LABEL_57:
      v43 = v32->u16[0];
      v32 = (uint16x4_t *)((char *)v32 + 2);
      v35->i32[0] = v43;
      v35 = (uint32x4_t *)((char *)v35 + 4);
    }
    while (v32 != (uint16x4_t *)v33);
  }
  v110 = v35;
  if (v35 != v31)
    v31 = (uint32x4_t *)grl::IconModifiers::setClusterIconValues((uint64_t)&v118, (uint64_t)&v109);
LABEL_60:
  v100 = 1065353216;
  v101 = 4;
  v103 = -1;
  v102 = 0;
  v104 = 0;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v108 = grl::Allocator::instance((grl::Allocator *)v31);
  grl::IconRequestOptions::setContentScale((float *)&v100, *(float *)(*a3 + 56));
  grl::IconRequestOptions::setSizeGroup((uint64_t)&v100, *(_BYTE *)(*a3 + 168));
  grl::IconRequestOptions::setVariant((uint64_t)&v100, *(_WORD *)(*a3 + 172));
  grl::IconRequestOptions::setDataVariant((uint64_t)&v100, *(_WORD *)(*a3 + 176));
  grl::IconRequestOptions::setCountryCode((uint64_t)&v100, *(_WORD *)(*a3 + 192));
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 168) + 64);
  (*(void (**)(uint64_t **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v44 + 48))(&v98, v44, *a3);
  if (v98)
  {
    __p = 0;
    v96 = 0;
    v97 = 0;
    v45 = *v98;
    v46 = v98[1];
    v47 = v46 - *v98;
    if (v46 != *v98)
    {
      v48 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 3);
      if (v48 >= 0xAAAAAAAAAAAAAABLL)
        abort();
      v49 = (char *)operator new(v47);
      v50 = 0;
      __p = v49;
      v96 = v49;
      v97 = &v49[24 * v48];
      do
      {
        v52 = (__int128 *)(v45 + v50);
        v53 = (std::string *)&v49[v50];
        if (*(char *)(v45 + v50 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
        }
        else
        {
          v51 = *v52;
          v53->__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
          *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v51;
        }
        v50 += 24;
      }
      while (v45 + v50 != v46);
      v96 = &v49[v50];
    }
  }
  else
  {
    __p = 0;
    v96 = 0;
    v97 = 0;
  }
  grl::IconRequestOptions::setResourceNames((uint64_t)&v100, (__int128 **)&__p);
  v115 = 0u;
  v114 = 0u;
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0u;
  v54 = *a3;
  if (*(_DWORD *)(*a3 + 60))
  {
    grl::IconManager::imageForKeyValue(objc_msgSend(*(id *)(*(_QWORD *)(a2 + 112) + 96), "grlIconManager"), *(_DWORD *)(*a3 + 60), *(unsigned __int16 *)(*a3 + 64), (const grl::IconModifiers *)&v118, (float *)&v100, &__dst, v92);
    v112 = *(_OWORD *)v92;
    v55 = v92[0];
    v54 = *a3;
    if (v92[0])
    {
      v56 = 8;
LABEL_99:
      md::LabelImageKey::setDebugInfo((void **)v54, (uint64_t)&__dst);
LABEL_100:
      *(_BYTE *)(*a3 + 113) = v56;
      v72 = *((_QWORD *)&v112 + 1);
      *(_QWORD *)v5 = v55;
      *((_QWORD *)v5 + 1) = v72;
      v5 = (grl::Allocator *)&v112;
      goto LABEL_101;
    }
  }
  if ((*(char *)(v54 + 39) & 0x80000000) == 0)
  {
    v57 = *(_QWORD *)(a2 + 112);
    if (*(_BYTE *)(v54 + 39))
      goto LABEL_75;
LABEL_80:
    if (!*(_BYTE *)(v57 + 3662))
      goto LABEL_101;
    goto LABEL_140;
  }
  v57 = *(_QWORD *)(a2 + 112);
  if (!*(_QWORD *)(v54 + 24))
    goto LABEL_80;
LABEL_75:
  v58 = objc_msgSend(*(id *)(v57 + 96), "grlIconManager");
  v59 = *(char *)(v54 + 39);
  if (v59 < 0)
  {
    v61 = *(_QWORD *)(v54 + 24);
    if (v61 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v60 = *(const void **)(v54 + 16);
    if (v61 < 0x17)
    {
LABEL_77:
      HIBYTE(v93) = v61;
      v62 = v92;
      if (!v61)
        goto LABEL_88;
      goto LABEL_87;
    }
  }
  else
  {
    v60 = (const void *)(v54 + 16);
    v61 = v59;
    if (v59 < 0x17uLL)
      goto LABEL_77;
  }
  v63 = (v61 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v61 | 7) != 0x17)
    v63 = v61 | 7;
  v64 = v63 + 1;
  v62 = operator new(v63 + 1);
  v92[1] = (void *)v61;
  v93 = v64 | 0x8000000000000000;
  v92[0] = v62;
LABEL_87:
  memmove(v62, v60, v61);
LABEL_88:
  *((_BYTE *)v62 + v61) = 0;
  grl::IconManager::imageForName(v58, (uint64_t)v92, &v118, (float *)&v100, &__dst, &v94);
  v65 = v94;
  v94 = 0uLL;
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  v112 = v65;
  if (!v66)
    goto LABEL_92;
  p_shared_owners = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldaxr(p_shared_owners);
  while (__stlxr(v68 - 1, p_shared_owners));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
    if (!*((_QWORD *)&v94 + 1))
      goto LABEL_96;
  }
  else
  {
LABEL_92:
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
    if (!*((_QWORD *)&v94 + 1))
      goto LABEL_96;
  }
  v70 = (unint64_t *)&v69->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (v71)
  {
LABEL_96:
    if ((SHIBYTE(v93) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_138:
    operator delete(v92[0]);
    v55 = (void *)v112;
    if ((_QWORD)v112)
      goto LABEL_98;
    goto LABEL_139;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(v93) < 0)
    goto LABEL_138;
LABEL_97:
  v55 = (void *)v112;
  if ((_QWORD)v112)
  {
LABEL_98:
    v54 = *a3;
    v56 = 9;
    goto LABEL_99;
  }
LABEL_139:
  v57 = *(_QWORD *)(a2 + 112);
  if (!*(_BYTE *)(v57 + 3662))
    goto LABEL_101;
LABEL_140:
  grl::IconManager::imageForKeyValue(objc_msgSend(*(id *)(v57 + 96), "grlIconManager", v92[0]), 0x10008u, 1, (const grl::IconModifiers *)&v118, (float *)&v100, 0, v92);
  v85 = *(_OWORD *)v92;
  v92[0] = 0;
  v92[1] = 0;
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  v112 = v85;
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)v92[1];
  if (v92[1])
  {
    v90 = (unint64_t *)((char *)v92[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v55 = (void *)v112;
  if ((_QWORD)v112)
  {
    v56 = 10;
    goto LABEL_100;
  }
LABEL_101:
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  if (SHIBYTE(v115) < 0)
  {
    operator delete(*((void **)&v114 + 1));
    if ((SBYTE7(v114) & 0x80000000) == 0)
    {
LABEL_103:
      v73 = (char *)__p;
      if (__p)
        goto LABEL_104;
LABEL_114:
      v76 = v99;
      if (!v99)
        goto LABEL_119;
      goto LABEL_115;
    }
  }
  else if ((SBYTE7(v114) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete((void *)__dst.__r_.__value_.__l.__size_);
  v73 = (char *)__p;
  if (!__p)
    goto LABEL_114;
LABEL_104:
  v74 = (void **)v96;
  v75 = v73;
  if (v96 != v73)
  {
    do
    {
      if (*((char *)v74 - 1) < 0)
        operator delete(*(v74 - 3));
      v74 -= 3;
    }
    while (v74 != (void **)v73);
    v75 = __p;
  }
  v96 = v73;
  operator delete(v75);
  v76 = v99;
  if (v99)
  {
LABEL_115:
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_119:
  v79 = v105;
  if (v105)
  {
    v80 = v106;
    v81 = v105;
    if (v106 != v105)
    {
      do
      {
        if (*(char *)(v80 - 1) < 0)
          operator delete(*(void **)(v80 - 24));
        v80 -= 24;
      }
      while (v80 != v79);
      v81 = v105;
    }
    v106 = v79;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v108 + 40))(v108, v81, v107 - v81);
  }
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&v118);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_19F197CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a49);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void grl::IconModifiers::~IconModifiers(grl::IconModifiers *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)this + 88, *((_QWORD *)this + 12));
  if (*((_BYTE *)this + 56))
  {
    if (*((char *)this + 87) < 0)
      operator delete(*((void **)this + 8));
    *((_BYTE *)this + 56) = 0;
  }
  if (*((_BYTE *)this + 44))
    *((_BYTE *)this + 44) = 0;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 30))
    *((_BYTE *)this + 30) = 0;
  if (*((_BYTE *)this + 25))
    *((_BYTE *)this + 25) = 0;
  if (*((_BYTE *)this + 16))
    *((_BYTE *)this + 16) = 0;
}

uint64_t std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 63) < 0)
      operator delete(*(void **)(a2 + 40));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

void `non-virtual thunk to'md::StandardLabeler::resourcesAtMercatorPoint(uint64_t a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  md::LabelPool::resourcesAtMercatorPoint(a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), a2);
}

void md::LabelPool::resourcesAtMercatorPoint(_QWORD *a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  double v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *a1 = 0;
  a1[1] = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)v6 + 152);
      v10 = *(std::__shared_weak_count **)(*(_QWORD *)v6 + 160);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (v9)
      {
        v13 = *(_DWORD *)(v9 + 48);
        if (v13 > v8 && *a4 >= *(double *)(v9 + 56) && *a4 < *(double *)(v9 + 72))
        {
          v14 = a4[1];
          if (v14 >= *(double *)(v9 + 64) && v14 < *(double *)(v9 + 80))
          {
            if (v10)
            {
              v15 = (unint64_t *)&v10->__shared_owners_;
              do
                v16 = __ldxr(v15);
              while (__stxr(v16 + 1, v15));
            }
            v17 = (std::__shared_weak_count *)a1[1];
            *a1 = v9;
            a1[1] = v10;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            v8 = v13;
          }
        }
      }
      if (v10)
      {
        v20 = (unint64_t *)&v10->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v6 += 16;
    }
    while (v6 != a3);
  }
}

uint64_t *grl::IconRequestOptions::setResourceNames(uint64_t a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  std::string *v6;
  std::string::value_type *v7;
  uint64_t *result;
  std::string *v9;
  std::string *v10;
  std::string::value_type *v11;
  uint64_t v12;
  std::string **v13;

  v3 = *a2;
  v4 = a2[1];
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v5 = grl::Allocator::instance((grl::Allocator *)a1);
  v12 = v5;
  if (v4 == v3)
  {
    v6 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v3) >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v9 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v11 = &v9->__r_.__value_.__s.__data_[8 * (((char *)v4 - (char *)v3) >> 3)];
    v6 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<geo::StdAllocator<std::string,grl::Allocator>,std::string const*,std::string const*,std::string*>((int)&v12, v3, v4, v9);
    v10 = v6;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__clear[abi:nn180100]((uint64_t *)(a1 + 16));
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 16));
    v6 = v10;
  }
  v7 = v11;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v13 = &v9;
  result = std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v13);
  *(_BYTE *)(a1 + 12) = 1;
  return result;
}

float geo::colorTransform<geo::GammaCorrection>(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a1[3];
  if (*a2 >= v6)
  {
    v8 = *a1;
    v9 = *a1 + 1.0;
    v7 = -(float)(v8 - (float)(v9 * powf(v3, 1.0 / a1[1])));
  }
  else
  {
    v7 = v3 * a1[2];
  }
  if (v4 >= v6)
    powf(v4, 1.0 / a1[1]);
  if (v5 >= v6)
    powf(v5, 1.0 / a1[1]);
  return v7;
}

md::BalloonLabelPart *md::PointLabelFeature::newIconPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  md::BalloonLabelPart *v6;
  uint64_t v7;
  int8x16_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float32x2_t *v19;
  float v20;
  float32x2_t v21;
  int v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  const md::PartCreationContext *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  const md::PartCreationContext *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  md::LabelPart *v75;
  __n128 v76;
  unsigned __int8 v77;
  md::LabelPart *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  unsigned __int8 v91;
  int *v92;
  md::LabelStyle *v93;
  std::__shared_count *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  std::string *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *p_shared_weak_owners;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int *i;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  md::LabelStyle *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::string *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  md::LabelStyle *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unsigned __int8 v158;
  std::__shared_weak_count *v159;
  char *v160;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  geo::read_write_lock *v170;
  const char *v171;
  malloc_zone_t *zone;
  uint64_t v173;
  geo::read_write_lock *v174;
  const char *v175;
  malloc_zone_t *v176;
  uint64_t v177;
  geo::read_write_lock *v178;
  const char *v179;
  malloc_zone_t *v180;
  uint64_t v181;
  uint64_t v182;
  geo::read_write_lock *v183;
  const char *v184;
  malloc_zone_t *v185;
  float32x4_t v186;
  int8x16_t v187;
  int32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x2_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  char v195;
  __int128 v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::string v201[2];
  std::string *v202;
  std::string v203[2];
  std::string *v204;
  _BYTE v205[32];
  __int128 v206;
  _BYTE *v207;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this)
    && *(_QWORD *)(*((_QWORD *)this + 63) + 352) != *(_QWORD *)(*((_QWORD *)this + 63) + 360))
  {
    {
      v165 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v165, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 680, 8);
    v6 = (md::BalloonLabelPart *)v5;
    v7 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = 1065353216;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = v5;
    *(_OWORD *)(v5 + 72) = xmmword_19FFB2E30;
    v8 = (int8x16_t *)(v5 + 72);
    *(_QWORD *)(v5 + 64) = 0;
    v9 = 0uLL;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_QWORD *)(v5 + 88) = 1065353216;
    *(_DWORD *)(v5 + 96) = 1065353216;
    *(_DWORD *)(v5 + 116) = 0;
    *(_QWORD *)(v5 + 100) = 0;
    *(_QWORD *)(v5 + 108) = 0;
    *(_OWORD *)(v5 + 120) = xmmword_19FFB2E30;
    *(_OWORD *)(v5 + 136) = xmmword_19FFB2E30;
    *(_OWORD *)(v5 + 152) = xmmword_19FFB2E30;
    *(_OWORD *)(v5 + 168) = xmmword_19FFB3480;
    *(_BYTE *)(v5 + 224) = 0;
    *(_BYTE *)(v5 + 200) = 0;
    *(_QWORD *)(v5 + 184) = 0;
    *(_QWORD *)(v5 + 192) = 0;
    *(_OWORD *)(v5 + 257) = 0u;
    *(_OWORD *)(v5 + 248) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_OWORD *)(v5 + 280) = xmmword_19FFB3580;
    *(_OWORD *)(v5 + 296) = xmmword_19FFB3590;
    *(_OWORD *)(v5 + 360) = xmmword_19FFB2E30;
    *(_OWORD *)(v5 + 376) = xmmword_19FFB2E30;
    *(_OWORD *)(v5 + 392) = xmmword_19FFB2E30;
    *(_OWORD *)(v5 + 408) = xmmword_19FFB3480;
    *(_OWORD *)(v5 + 520) = xmmword_19FFB3580;
    *(_OWORD *)(v5 + 312) = xmmword_19FFB2E30;
    v10 = v5 + 312;
    *(_QWORD *)(v5 + 328) = 1065353216;
    *(_DWORD *)(v5 + 336) = 1065353216;
    *(_DWORD *)(v5 + 356) = 0;
    *(_QWORD *)(v5 + 340) = 0;
    *(_QWORD *)(v5 + 348) = 0;
    *(_BYTE *)(v5 + 464) = 0;
    *(_QWORD *)(v5 + 424) = 0;
    *(_QWORD *)(v5 + 432) = 0;
    *(_BYTE *)(v5 + 440) = 0;
    *(_OWORD *)(v5 + 497) = 0u;
    *(_OWORD *)(v5 + 472) = 0u;
    *(_OWORD *)(v5 + 488) = 0u;
    *(_DWORD *)(v5 + 536) = 1065353216;
    *(_QWORD *)(v5 + 540) = 0;
    *(_QWORD *)(v5 + 548) = 0;
    *(_WORD *)(v5 + 556) = 512;
    *(_BYTE *)(v5 + 562) = 0;
    *(_DWORD *)(v5 + 558) = 0;
    *(_WORD *)(v5 + 563) = -1;
    *(_DWORD *)(v5 + 565) = 0;
    __asm { FMOV            V1.4S, #1.0 }
    *(_OWORD *)(v5 + 572) = _Q1;
    *(_DWORD *)(v5 + 588) = 1065353216;
    *(_WORD *)(v5 + 592) = 256;
    *(_BYTE *)(v5 + 594) = 0;
    *(_OWORD *)(v5 + 596) = _Q1;
    *(_DWORD *)(v5 + 612) = 1065353216;
    *(_WORD *)(v5 + 616) = 256;
    *(_BYTE *)(v5 + 618) = 0;
    *(_QWORD *)(v5 + 620) = 0;
    *(_DWORD *)(v5 + 628) = 257;
    *(_WORD *)(v5 + 632) = 1;
    *(_QWORD *)v5 = off_1E429A970;
    *(_QWORD *)(v5 + 640) = *((_QWORD *)this + 63);
    v16 = *((_QWORD *)this + 64);
    *(_QWORD *)(v5 + 648) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_OWORD *)(v5 + 656) = 0uLL;
    v19 = *(float32x2_t **)(*((_QWORD *)this + 63) + 352);
    v20 = *(float *)(v7 + 176);
    v21 = vmul_n_f32(*v19, v20);
    v190 = v21;
    v191 = vmul_n_f32(v19[1], -v20);
    v22 = v19[2].u8[0];
    *(_BYTE *)(v5 + 672) = v22;
    if (v22)
    {
      v23 = v21.f32[1];
      *(float *)&v9 = fmaxf(v21.f32[0], v21.f32[1]) * 0.5;
      v188 = (int32x2_t)v9;
      *(_DWORD *)(v5 + 656) = v9;
      md::CollisionObject::resetWithCircles((void **)(v5 + 72), 1u);
      v24 = *((_QWORD *)v6 + 30);
      v25 = *((_DWORD *)v6 + 62);
      *((_DWORD *)v6 + 62) = v25 + 1;
      v26 = v24 + 12 * v25;
      *(float32x2_t *)v27.f32 = vmla_f32(v191, (float32x2_t)0x3F0000003F000000, v190);
      v27.i64[1] = v27.i64[0];
      v186 = v27;
      v192 = v27.i64[0];
      *(_QWORD *)v26 = v27.i64[0];
      *(_DWORD *)(v26 + 8) = v188.i32[0];
      if (*(float *)v188.i32 != 0.0)
      {
        v28 = (float32x4_t)vdupq_lane_s32(v188, 0);
        v29.i64[0] = vsubq_f32(v186, v28).u64[0];
        v29.i64[1] = vaddq_f32(v186, v28).i64[1];
        v30.i64[0] = v29.i64[0];
        v30.i64[1] = v8->i64[1];
        v31.i64[0] = v8->i64[0];
        v31.i64[1] = v29.i64[1];
        *v8 = vbslq_s8((int8x16_t)vcgtq_f32(v31, v30), v29, *v8);
      }
      md::CollisionObject::resetWithCircles((void **)v10, 1u);
      v32 = *((_QWORD *)v6 + 60);
      v33 = *((_DWORD *)v6 + 122);
      *((_DWORD *)v6 + 122) = v33 + 1;
      v34 = v32 + 12 * v33;
      *(_QWORD *)v34 = v192;
      *(_DWORD *)(v34 + 8) = v188.i32[0];
      if (*(float *)v188.i32 != 0.0)
      {
        v35 = (float32x4_t)vdupq_lane_s32(v188, 0);
        v36.i64[0] = vsubq_f32(v186, v35).u64[0];
        v36.i64[1] = vaddq_f32(v186, v35).i64[1];
        v37.i64[0] = v36.i64[0];
        v37.i64[1] = *(_QWORD *)(v10 + 8);
        v38.i64[0] = *(_QWORD *)v10;
        v38.i64[1] = v36.i64[1];
        *(int8x16_t *)v10 = vbslq_s8((int8x16_t)vcgtq_f32(v38, v37), v36, *(int8x16_t *)v10);
      }
      v39 = v190.f32[0];
    }
    else
    {
      *(float32x2_t *)(v5 + 660) = vmul_n_f32(v21, v20 * 0.5);
      md::CollisionObject::resetWithRects((void **)(v5 + 72), 1u);
      v48 = *((_QWORD *)v6 + 29);
      v49 = *((unsigned int *)v6 + 62);
      *((_DWORD *)v6 + 62) = v49 + 1;
      *(float32x2_t *)v50.i8 = v191;
      v50.u64[1] = (unint64_t)vadd_f32(v190, v191);
      *(int8x16_t *)(v48 + 16 * v49) = v50;
      v51 = *(int8x16_t *)((char *)v6 + 72);
      *(float32x2_t *)v52.f32 = v191;
      v52.i64[1] = vextq_s8(v51, v51, 8uLL).u64[0];
      v53.i64[0] = *((_QWORD *)v6 + 9);
      v187 = v50;
      v189 = (float32x2_t)v50.u64[1];
      v53.i64[1] = v50.i64[1];
      *(int8x16_t *)((char *)v6 + 72) = vbslq_s8((int8x16_t)vcgtq_f32(v53, v52), v50, v51);
      md::CollisionObject::resetWithRects((void **)v10, 1u);
      v54 = *((_QWORD *)v6 + 59);
      v55 = *((unsigned int *)v6 + 122);
      *((_DWORD *)v6 + 122) = v55 + 1;
      *(int8x16_t *)(v54 + 16 * v55) = v187;
      v56 = vmaxnm_f32(*(float32x2_t *)((char *)v6 + 320), v189);
      *((float32x2_t *)v6 + 39) = vminnm_f32(v191, *(float32x2_t *)((char *)v6 + 312));
      *((float32x2_t *)v6 + 40) = v56;
      v23 = v190.f32[1];
      v39 = v190.f32[0];
    }
    *((float *)v6 + 167) = 0.5 - (float)(fminf(v23, v39) * 0.5);
    return v6;
  }
  v40 = *((_QWORD *)a2 + 2);
  v41 = *(_QWORD *)(v40 + 296);
  if (v41)
  {
    if (!*(_DWORD *)(v41 + 68))
      goto LABEL_18;
  }
  else
  {
    v42 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v43 = *v42;
    *(_QWORD *)(v40 + 296) = *v42;
    if (!*(_DWORD *)(v43 + 68))
      goto LABEL_18;
  }
  v6 = (md::BalloonLabelPart *)(*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(_QWORD *)this + 664))(this, a2);
  if (v6)
    return v6;
LABEL_18:
  v44 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (!v44[1245])
    goto LABEL_65;
  if (!v44[1270])
  {
    v57 = atomic_load(v44 + 1240);
    if ((v57 & 1) == 0 || !v44[1245])
      goto LABEL_65;
LABEL_28:
    *((_QWORD *)a2 + 9) = (*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(_QWORD *)this + 720))(this, a2);
    v58 = *((_QWORD *)a2 + 2);
    if (!*(_QWORD *)(v58 + 296))
      *(_QWORD *)(v58 + 296) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    (*(void (**)(_BYTE *__return_ptr, md::PointLabelFeature *))(*(_QWORD *)this + 680))(v205, this);
    if (*((unsigned __int8 *)a2 + 84) == v205[4])
    {
      if (*((_BYTE *)a2 + 84))
        *((_DWORD *)a2 + 20) = *(_DWORD *)v205;
    }
    else if (*((_BYTE *)a2 + 84))
    {
      *((_BYTE *)a2 + 84) = 0;
    }
    else
    {
      *((_DWORD *)a2 + 20) = *(_DWORD *)v205;
      *((_BYTE *)a2 + 84) = 1;
    }
    if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
    {
      v207 = 0;
      v206 = 0u;
      memset(v205, 0, sizeof(v205));
      goto LABEL_46;
    }
    v60 = *((_QWORD *)this + 63);
    if (*(char *)(v60 + 143) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v205, *(const std::string::value_type **)(v60 + 120), *(_QWORD *)(v60 + 128));
    }
    else
    {
      *(_OWORD *)v205 = *(_OWORD *)(v60 + 120);
      *(_QWORD *)&v205[16] = *(_QWORD *)(v60 + 136);
    }
    v61 = *(_QWORD *)(v60 + 168);
    if (v61)
    {
      if (v61 == v60 + 144)
      {
        v207 = &v205[24];
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
LABEL_46:
        v62 = (void **)((char *)a2 + 104);
        if (*((char *)a2 + 127) < 0)
          operator delete(*v62);
        *(_OWORD *)v62 = *(_OWORD *)v205;
        *((_QWORD *)a2 + 15) = *(_QWORD *)&v205[16];
        v205[23] = 0;
        v205[0] = 0;
        v63 = (const md::PartCreationContext *)*((_QWORD *)a2 + 19);
        *((_QWORD *)a2 + 19) = 0;
        if (v63 == (const md::PartCreationContext *)((char *)a2 + 128))
        {
          v64 = 4;
          v63 = (const md::PartCreationContext *)((char *)a2 + 128);
        }
        else
        {
          if (!v63)
            goto LABEL_53;
          v64 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
LABEL_53:
        if (!v207)
        {
          *((_QWORD *)a2 + 19) = 0;
          goto LABEL_62;
        }
        v65 = &v205[24];
        if (v207 != &v205[24])
        {
          *((_QWORD *)a2 + 19) = v207;
          v207 = 0;
          goto LABEL_62;
        }
        *((_QWORD *)a2 + 19) = (char *)a2 + 128;
        (*(void (**)(_BYTE *, char *))(*(_QWORD *)&v205[24] + 24))(&v205[24], (char *)a2 + 128);
        if (v207 == &v205[24])
        {
          v66 = 4;
        }
        else
        {
          if (!v207)
            goto LABEL_62;
          v66 = 5;
          v65 = v207;
        }
        (*(void (**)(_QWORD *))(*v65 + 8 * v66))(v65);
LABEL_62:
        if ((v205[23] & 0x80000000) != 0)
          operator delete(*(void **)v205);
        v6 = md::PointLabelFeatureBase::newBalloonWithDotPart(a2, v59);
        if (v6)
          return v6;
        goto LABEL_65;
      }
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
    }
    v207 = (_BYTE *)v61;
    goto LABEL_46;
  }
  v45 = *((_QWORD *)a2 + 2);
  v46 = *(_QWORD *)(v45 + 296);
  if (!v46)
  {
    v47 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v46 = *v47;
    *(_QWORD *)(v45 + 296) = *v47;
  }
  if (*(_BYTE *)(v46 + 88) == 10)
    goto LABEL_28;
LABEL_65:
  v67 = *((_QWORD *)a2 + 2);
  v68 = *(_QWORD *)(v67 + 296);
  if (!v68)
  {
    v69 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v68 = *v69;
    *(_QWORD *)(v67 + 296) = *v69;
  }
  if (*(_BYTE *)(v68 + 88) != 11)
    goto LABEL_94;
  *((_QWORD *)a2 + 9) = (*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(_QWORD *)this + 720))(this, a2);
  v70 = *((_QWORD *)a2 + 2);
  if (!*(_QWORD *)(v70 + 296))
    *(_QWORD *)(v70 + 296) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
  (*(void (**)(_BYTE *__return_ptr, md::PointLabelFeature *))(*(_QWORD *)this + 680))(v205, this);
  if (*((unsigned __int8 *)a2 + 84) == v205[4])
  {
    if (*((_BYTE *)a2 + 84))
      *((_DWORD *)a2 + 20) = *(_DWORD *)v205;
  }
  else if (*((_BYTE *)a2 + 84))
  {
    *((_BYTE *)a2 + 84) = 0;
  }
  else
  {
    *((_DWORD *)a2 + 20) = *(_DWORD *)v205;
    *((_BYTE *)a2 + 84) = 1;
  }
  *(_QWORD *)&v196 = a2;
  md::PointLabelFeatureBase::newRingIconPart(md::PartCreationContext const&)::$_0::operator()((uint64_t *)v205, (uint64_t **)&v196, 1);
  md::PointLabelFeatureBase::newRingIconPart(md::PartCreationContext const&)::$_0::operator()((uint64_t *)&v197, (uint64_t **)&v196, 4);
  v6 = 0;
  if (*(_QWORD *)v205 && v197)
  {
    {
      v168 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v168, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v6 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 688, 8);
    v72 = *((_QWORD *)a2 + 2);
    *((_DWORD *)v6 + 2) = 1065353216;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = v6;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *(_OWORD *)((char *)v6 + 72) = xmmword_19FFB2E30;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 11) = 1065353216;
    *((_DWORD *)v6 + 24) = 1065353216;
    *(_OWORD *)((char *)v6 + 100) = 0u;
    *((_DWORD *)v6 + 29) = 0;
    *(_OWORD *)((char *)v6 + 120) = xmmword_19FFB2E30;
    *(_OWORD *)((char *)v6 + 136) = xmmword_19FFB2E30;
    *(_OWORD *)((char *)v6 + 152) = xmmword_19FFB2E30;
    *(_OWORD *)((char *)v6 + 168) = xmmword_19FFB3480;
    *((_BYTE *)v6 + 224) = 0;
    *(_OWORD *)((char *)v6 + 184) = 0u;
    *((_BYTE *)v6 + 200) = 0;
    *(_OWORD *)((char *)v6 + 257) = 0u;
    *(_OWORD *)((char *)v6 + 248) = 0u;
    *(_OWORD *)((char *)v6 + 232) = 0u;
    *(_OWORD *)((char *)v6 + 280) = xmmword_19FFB3580;
    *(_OWORD *)((char *)v6 + 296) = xmmword_19FFB3590;
    *(_OWORD *)((char *)v6 + 312) = xmmword_19FFB2E30;
    *((_QWORD *)v6 + 41) = 1065353216;
    *((_DWORD *)v6 + 84) = 1065353216;
    *((_DWORD *)v6 + 89) = 0;
    *(_OWORD *)((char *)v6 + 340) = 0u;
    *(_OWORD *)((char *)v6 + 360) = xmmword_19FFB2E30;
    *(_OWORD *)((char *)v6 + 376) = xmmword_19FFB2E30;
    *(_OWORD *)((char *)v6 + 392) = xmmword_19FFB2E30;
    *(_OWORD *)((char *)v6 + 408) = xmmword_19FFB3480;
    *((_BYTE *)v6 + 464) = 0;
    *(_OWORD *)((char *)v6 + 424) = 0u;
    *((_BYTE *)v6 + 440) = 0;
    *(_OWORD *)((char *)v6 + 497) = 0u;
    *(_OWORD *)((char *)v6 + 472) = 0u;
    *(_OWORD *)((char *)v6 + 488) = 0u;
    *(_OWORD *)((char *)v6 + 520) = xmmword_19FFB3580;
    *((_DWORD *)v6 + 134) = 1065353216;
    *(_OWORD *)((char *)v6 + 540) = 0u;
    *((_WORD *)v6 + 278) = 512;
    *((_BYTE *)v6 + 562) = 0;
    *(_DWORD *)((char *)v6 + 558) = 0;
    *(_WORD *)((char *)v6 + 563) = -1;
    *(_DWORD *)((char *)v6 + 565) = 0;
    *(_QWORD *)v6 = off_1E4294028;
    *((_OWORD *)v6 + 36) = 0u;
    *((_QWORD *)v6 + 74) = 0;
    {
      v169 = operator new();
      *(_QWORD *)(v169 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v169 + 24) = "VectorKitLabels";
      *(_OWORD *)(v169 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v169 = &off_1E42B5668;
      *(_QWORD *)(v169 + 8) = "VectorKitLabels";
      *(_OWORD *)(v169 + 72) = 0u;
      *(_OWORD *)(v169 + 88) = 0u;
      *(_OWORD *)(v169 + 104) = 0u;
      *(_OWORD *)(v169 + 120) = 0u;
      *(_OWORD *)(v169 + 136) = 0u;
      *(_OWORD *)(v169 + 152) = 0u;
      *(_OWORD *)(v169 + 168) = 0u;
      *(_OWORD *)(v169 + 184) = 0u;
      *(_OWORD *)(v169 + 200) = 0u;
      *(_OWORD *)(v169 + 216) = 0u;
      *(_OWORD *)(v169 + 232) = 0u;
      *(_QWORD *)(v169 + 248) = 0;
      *(_OWORD *)(v169 + 56) = 0u;
      v170 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v169 + 56), 0);
      if ((_DWORD)v170)
        geo::read_write_lock::logFailure(v170, (uint64_t)"initialization", v171);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v169 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v169 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v169;
    }
    *((_QWORD *)v6 + 75) = mdm::Allocator::instance(void)::alloc;
    *((_BYTE *)v6 + 608) = 0;
    *((_BYTE *)v6 + 616) = 0;
    *((_WORD *)v6 + 314) = 1;
    *((_BYTE *)v6 + 630) = 0;
    *(_QWORD *)v6 = off_1E4293080;
    md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)v6 + 632, v72);
    {
      v173 = operator new();
      *(_QWORD *)(v173 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v173 + 24) = "VectorKitLabels";
      *(_OWORD *)(v173 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v173 = &off_1E42B5668;
      *(_QWORD *)(v173 + 8) = "VectorKitLabels";
      *(_OWORD *)(v173 + 72) = 0u;
      *(_OWORD *)(v173 + 88) = 0u;
      *(_OWORD *)(v173 + 104) = 0u;
      *(_OWORD *)(v173 + 120) = 0u;
      *(_OWORD *)(v173 + 136) = 0u;
      *(_OWORD *)(v173 + 152) = 0u;
      *(_OWORD *)(v173 + 168) = 0u;
      *(_OWORD *)(v173 + 184) = 0u;
      *(_OWORD *)(v173 + 200) = 0u;
      *(_OWORD *)(v173 + 216) = 0u;
      *(_OWORD *)(v173 + 232) = 0u;
      *(_QWORD *)(v173 + 248) = 0;
      *(_OWORD *)(v173 + 56) = 0u;
      v174 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v173 + 56), 0);
      if ((_DWORD)v174)
        geo::read_write_lock::logFailure(v174, (uint64_t)"initialization", v175);
      v176 = malloc_create_zone(0, 0);
      *(_QWORD *)(v173 + 48) = v176;
      malloc_set_zone_name(v176, "VectorKitLabels");
      *(_QWORD *)(v173 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v173;
    }
    v75 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v76.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v75, v205);
    {
      v177 = operator new();
      *(_QWORD *)(v177 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v177 + 24) = "VectorKitLabels";
      *(_OWORD *)(v177 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v177 = &off_1E42B5668;
      *(_QWORD *)(v177 + 8) = "VectorKitLabels";
      *(_OWORD *)(v177 + 72) = 0u;
      *(_OWORD *)(v177 + 88) = 0u;
      *(_OWORD *)(v177 + 104) = 0u;
      *(_OWORD *)(v177 + 120) = 0u;
      *(_OWORD *)(v177 + 136) = 0u;
      *(_OWORD *)(v177 + 152) = 0u;
      *(_OWORD *)(v177 + 168) = 0u;
      *(_OWORD *)(v177 + 184) = 0u;
      *(_OWORD *)(v177 + 200) = 0u;
      *(_OWORD *)(v177 + 216) = 0u;
      *(_OWORD *)(v177 + 232) = 0u;
      *(_QWORD *)(v177 + 248) = 0;
      *(_OWORD *)(v177 + 56) = 0u;
      v178 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v177 + 56), 0);
      if ((_DWORD)v178)
        geo::read_write_lock::logFailure(v178, (uint64_t)"initialization", v179);
      v180 = malloc_create_zone(0, 0);
      *(_QWORD *)(v177 + 48) = v180;
      malloc_set_zone_name(v180, "VectorKitLabels");
      *(_QWORD *)(v177 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v177;
    }
    v78 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 784, 8, v76);
    md::IconLabelPart::IconLabelPart((uint64_t)v78, &v197);
    *(_QWORD *)v79 = off_1E4297458;
    *(_OWORD *)(v79 + 768) = 0u;
    *(_BYTE *)(v79 + 660) = 9;
    md::CompositeLabelPart::addLabelPart((uint64_t)v6, v75);
    md::CompositeLabelPart::addLabelPart((uint64_t)v6, v78);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v75 + 176))(v75, 1);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v78 + 176))(v78, 1);
    *((_BYTE *)v75 + 659) = 1;
    *((_QWORD *)v6 + 3) = v78;
  }
  v80 = v198;
  if (v198)
  {
    p_shared_owners = (unint64_t *)&v198->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *(std::__shared_weak_count **)&v205[8];
  if (*(_QWORD *)&v205[8])
  {
    v84 = (unint64_t *)(*(_QWORD *)&v205[8] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (!v6)
  {
LABEL_94:
    v197 = 0;
    v198 = 0;
    v199 = 0;
    {
      v166 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v200 = mdm::Allocator::instance(void)::alloc;
    v87 = *((_QWORD *)a2 + 2);
    v88 = *(_QWORD *)(v87 + 272);
    if (!v88)
    {
      v89 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*((_QWORD *)a2 + 2));
      v88 = *v89;
      *(_QWORD *)(v87 + 272) = *v89;
    }
    if (*(_BYTE *)(v88 + 69) != 6)
      goto LABEL_145;
    v90 = (_QWORD *)*((_QWORD *)a2 + 8);
    v91 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 3392));
    md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v205, v90, 2, v91 & 1);
    if (!v205[0])
      goto LABEL_145;
    v92 = *(int **)&v205[8];
    if (*(_QWORD *)&v205[8] == *(_QWORD *)&v205[16])
    {
LABEL_135:
      if (!v92)
        goto LABEL_145;
      for (i = *(int **)&v205[16]; ; i -= 14)
      {
        if (i == v92)
        {
          *(_QWORD *)&v205[16] = v92;
          (*(void (**)(_QWORD, int *, _QWORD))(*(_QWORD *)v206 + 40))(v206, v92, *(_QWORD *)&v205[24] - (_QWORD)v92);
          goto LABEL_145;
        }
        if (*((char *)i - 1) < 0)
        {
          operator delete(*((void **)i - 3));
          if ((*((char *)i - 25) & 0x80000000) == 0)
            continue;
        }
        else if ((*((char *)i - 25) & 0x80000000) == 0)
        {
          continue;
        }
        operator delete(*((void **)i - 6));
      }
    }
    v94 = (std::__shared_count *)*((_QWORD *)a2 + 1);
    v93 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
    v95 = *(_QWORD *)a2;
    v96 = *(_DWORD *)(*(_QWORD *)&v205[8] + 4);
    v193 = **(_DWORD **)&v205[8];
    v97 = *((_QWORD *)v93 + 37);
    if (!v97)
    {
      v98 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v93, 0);
      v97 = *v98;
      *((_QWORD *)v93 + 37) = *v98;
    }
    BYTE5(v194) = 0;
    v195 = 0;
    if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
    {
      v204 = 0;
      memset(v203, 0, sizeof(v203));
      goto LABEL_112;
    }
    v99 = *((_QWORD *)this + 63);
    if (*(char *)(v99 + 143) < 0)
      std::string::__init_copy_ctor_external(v203, *(const std::string::value_type **)(v99 + 120), *(_QWORD *)(v99 + 128));
    else
      v203[0] = *(std::string *)(v99 + 120);
    v100 = *(_QWORD *)(v99 + 168);
    if (v100)
    {
      if (v100 == v99 + 144)
      {
        v204 = &v203[1];
        (*(void (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
LABEL_112:
        md::LabelStyle::createIcon((uint64_t *)&v196, v93, v95, v94, (uint64_t *)this + 82, 0, v193, v96, 0, v97, (char *)&v194 + 5, (uint64_t)v203);
        v101 = v204;
        if (v204 == &v203[1])
        {
          v102 = 4;
          v101 = &v203[1];
        }
        else
        {
          if (!v204)
            goto LABEL_117;
          v102 = 5;
        }
        (*(void (**)(void))(v101->__r_.__value_.__r.__words[0] + 8 * v102))();
LABEL_117:
        if (SHIBYTE(v203[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v203[0].__r_.__value_.__l.__data_);
        if ((_QWORD)v196)
        {
          v103 = v198;
          if (v198 >= v199)
          {
            p_shared_weak_owners = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v197, &v196);
          }
          else
          {
            if (v198)
            {
              v198->__vftable = (std::__shared_weak_count_vtbl *)v196;
              v104 = *((_QWORD *)&v196 + 1);
              v103->__shared_owners_ = *((_QWORD *)&v196 + 1);
              if (v104)
              {
                v105 = (unint64_t *)(v104 + 8);
                do
                  v106 = __ldxr(v105);
                while (__stxr(v106 + 1, v105));
              }
            }
            p_shared_weak_owners = (std::__shared_weak_count *)&v103->__shared_weak_owners_;
          }
          v198 = p_shared_weak_owners;
          md::PointLabelFeature::appendAlternateIcons((uint64_t *)this, (uint64_t *)a2, v92, (uint64_t)&v197);
        }
        v108 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
        if (*((_QWORD *)&v196 + 1))
        {
          v109 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        if (v205[0])
        {
          v92 = *(int **)&v205[8];
          goto LABEL_135;
        }
LABEL_145:
        v113 = v197;
        v112 = v198;
        if (v197 != v198)
        {
LABEL_202:
          v144 = (char *)v112 - (char *)v113;
          if (v144 == 16)
          {
            {
              v167 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v167, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v6 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 840, 8);
            v113 = v197;
            md::PointIconLabelPart::PointIconLabelPart((uint64_t)v6, v197, *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((md::LabelStyle **)a2 + 2), 0);
          }
          else if (v144 < 0x11)
          {
            v6 = 0;
          }
          else
          {
            {
              v181 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v181, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v6 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 944, 8);
            v147 = *(_QWORD *)a2;
            v148 = *((_QWORD *)a2 + 1);
            v149 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
            v150 = (char *)v197;
            md::PointIconLabelPart::PointIconLabelPart((uint64_t)v6, v197, v147, v148, v149, 0);
            *(_QWORD *)v6 = off_1E429CFD8;
            *((_QWORD *)v6 + 105) = 0;
            *((_QWORD *)v6 + 107) = 0;
            *((_QWORD *)v6 + 106) = 0;
            v151 = v200;
            v152 = (char *)v198;
            *((_QWORD *)v6 + 108) = v200;
            v153 = v152 - v150;
            if (v152 != v150)
            {
              if (v153 < 0)
                abort();
              v154 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, v152 - v150, 8);
              *((_QWORD *)v6 + 105) = v154;
              *((_QWORD *)v6 + 106) = v154;
              *((_QWORD *)v6 + 107) = &v154[2 * (v153 >> 4)];
              do
              {
                if (v154)
                {
                  *v154 = *(_QWORD *)v150;
                  v155 = *((_QWORD *)v150 + 1);
                  v154[1] = v155;
                  if (v155)
                  {
                    v156 = (unint64_t *)(v155 + 8);
                    do
                      v157 = __ldxr(v156);
                    while (__stxr(v157 + 1, v156));
                  }
                }
                v150 += 16;
                v154 += 2;
              }
              while (v150 != v152);
              *((_QWORD *)v6 + 106) = v154;
            }
            *((_QWORD *)v6 + 111) = 0;
            *(_OWORD *)((char *)v6 + 872) = 0u;
            {
              v182 = operator new();
              *(_QWORD *)(v182 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v182 + 24) = "VectorKitLabels";
              *(_OWORD *)(v182 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v182 = &off_1E42B5668;
              *(_QWORD *)(v182 + 8) = "VectorKitLabels";
              *(_OWORD *)(v182 + 72) = 0u;
              *(_OWORD *)(v182 + 88) = 0u;
              *(_OWORD *)(v182 + 104) = 0u;
              *(_OWORD *)(v182 + 120) = 0u;
              *(_OWORD *)(v182 + 136) = 0u;
              *(_OWORD *)(v182 + 152) = 0u;
              *(_OWORD *)(v182 + 168) = 0u;
              *(_OWORD *)(v182 + 184) = 0u;
              *(_OWORD *)(v182 + 200) = 0u;
              *(_OWORD *)(v182 + 216) = 0u;
              *(_OWORD *)(v182 + 232) = 0u;
              *(_QWORD *)(v182 + 248) = 0;
              *(_OWORD *)(v182 + 56) = 0u;
              v183 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v182 + 56), 0);
              if ((_DWORD)v183)
                geo::read_write_lock::logFailure(v183, (uint64_t)"initialization", v184);
              v185 = malloc_create_zone(0, 0);
              *(_QWORD *)(v182 + 48) = v185;
              malloc_set_zone_name(v185, "VectorKitLabels");
              *(_QWORD *)(v182 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v182;
            }
            *((_QWORD *)v6 + 112) = mdm::Allocator::instance(void)::alloc;
            *((_DWORD *)v6 + 228) = 1065353216;
            *((_QWORD *)v6 + 113) = 0;
            *((_BYTE *)v6 + 916) = 0;
            *((_DWORD *)v6 + 232) = 1065353216;
            *((_QWORD *)v6 + 115) = 0;
            *((_BYTE *)v6 + 932) = 0;
            *((_WORD *)v6 + 468) = 0;
            *((_BYTE *)v6 + 938) = 0;
            v113 = v197;
          }
          if (v113)
          {
            v159 = v198;
            v160 = (char *)v113;
            if (v198 != v113)
            {
              do
              {
                shared_weak_owners = (std::__shared_weak_count *)v159[-1].__shared_weak_owners_;
                if (shared_weak_owners)
                {
                  v162 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                  do
                    v163 = __ldaxr(v162);
                  while (__stlxr(v163 - 1, v162));
                  if (!v163)
                  {
                    ((void (*)(std::__shared_weak_count *, char *))shared_weak_owners->__on_zero_shared)(shared_weak_owners, v160);
                    std::__shared_weak_count::__release_weak(shared_weak_owners);
                  }
                }
                v159 = (std::__shared_weak_count *)((char *)v159 - 16);
              }
              while (v159 != v113);
              v160 = (char *)v197;
            }
            v198 = v113;
            (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v200 + 40))(v200, v160, (char *)v199 - v160);
          }
          return v6;
        }
        v115 = *((_QWORD *)a2 + 1);
        v114 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
        v116 = *(_QWORD *)a2;
        v117 = (char *)(*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(_QWORD *)this + 720))(this, a2);
        v118 = *((_QWORD *)a2 + 2);
        if (!*(_QWORD *)(v118 + 296))
          *(_QWORD *)(v118 + 296) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
        (*(void (**)(uint64_t *__return_ptr, md::PointLabelFeature *))(*(_QWORD *)this + 680))(&v194, this);
        if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
        {
          v202 = 0;
          memset(v201, 0, sizeof(v201));
          goto LABEL_158;
        }
        v119 = *((_QWORD *)this + 63);
        if (*(char *)(v119 + 143) < 0)
          std::string::__init_copy_ctor_external(v201, *(const std::string::value_type **)(v119 + 120), *(_QWORD *)(v119 + 128));
        else
          v201[0] = *(std::string *)(v119 + 120);
        v120 = *(_QWORD *)(v119 + 168);
        if (v120)
        {
          if (v120 == v119 + 144)
          {
            v202 = &v201[1];
            (*(void (**)(uint64_t))(*(_QWORD *)v120 + 24))(v120);
LABEL_158:
            md::LabelStyle::pointIcon((uint64_t *)v205, v114, v116, v115, (uint64_t *)this + 82, v117, (int *)&v194, 0, (uint64_t)a2 + 32, 0, 255, 0, (uint64_t)v201);
            v121 = v202;
            if (v202 == &v201[1])
            {
              v122 = 4;
              v121 = &v201[1];
            }
            else
            {
              if (!v202)
                goto LABEL_163;
              v122 = 5;
            }
            (*(void (**)(void))(v121->__r_.__value_.__r.__words[0] + 8 * v122))();
LABEL_163:
            if (SHIBYTE(v201[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v201[0].__r_.__value_.__l.__data_);
            if (!*(_QWORD *)v205)
              goto LABEL_196;
            if (v113 < v199)
            {
              if (v113)
              {
                v113->__vftable = *(std::__shared_weak_count_vtbl **)v205;
                v123 = *(_QWORD *)&v205[8];
                v113->__shared_owners_ = *(_QWORD *)&v205[8];
                if (v123)
                {
                  v124 = (unint64_t *)(v123 + 8);
                  do
                    v125 = __ldxr(v124);
                  while (__stxr(v125 + 1, v124));
                }
              }
              v126 = (std::__shared_weak_count *)&v113->__shared_weak_owners_;
LABEL_195:
              v198 = v126;
              md::PointLabelFeature::appendAlternateIcons((uint64_t *)this, (uint64_t *)a2, 0, (uint64_t)&v197);
LABEL_196:
              v141 = *(std::__shared_weak_count **)&v205[8];
              if (*(_QWORD *)&v205[8])
              {
                v142 = (unint64_t *)(*(_QWORD *)&v205[8] + 8);
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v113 = v197;
              v112 = v198;
              goto LABEL_202;
            }
            v127 = ((char *)v199 - (char *)v113) >> 3;
            if (v127 <= 1)
              v127 = 1;
            if ((unint64_t)((char *)v199 - (char *)v113) >= 0x7FFFFFFFFFFFFFF0)
              v128 = 0xFFFFFFFFFFFFFFFLL;
            else
              v128 = v127;
            v129 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v200 + 16))(v200, 16 * v128, 8);
            v130 = (std::__shared_weak_count *)&v129[2 * v128];
            if (v129 && (v131 = *(_QWORD *)&v205[8], *(_OWORD *)v129 = *(_OWORD *)v205, v131))
            {
              v132 = (unint64_t *)(v131 + 8);
              do
                v133 = __ldxr(v132);
              while (__stxr(v133 + 1, v132));
              v134 = v198;
              v126 = (std::__shared_weak_count *)(v129 + 2);
              if (v198 != v113)
              {
                v135 = v198;
                do
                {
                  v136 = *(_OWORD *)&v135[-1].__shared_owners_;
                  v135 = (std::__shared_weak_count *)((char *)v135 - 16);
                  *((_OWORD *)v129 - 1) = v136;
                  v129 -= 2;
                  v135->__vftable = 0;
                  v135->__shared_owners_ = 0;
                }
                while (v135 != v113);
                v197 = (std::__shared_weak_count *)v129;
                v198 = v126;
                v137 = v199;
                v199 = v130;
                do
                {
                  v138 = (std::__shared_weak_count *)v134[-1].__shared_weak_owners_;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  v134 = (std::__shared_weak_count *)((char *)v134 - 16);
                }
                while (v134 != v113);
                goto LABEL_193;
              }
            }
            else
            {
              v126 = (std::__shared_weak_count *)(v129 + 2);
            }
            v137 = v199;
            v197 = (std::__shared_weak_count *)v129;
            v199 = (std::__shared_weak_count *)&v129[2 * v128];
LABEL_193:
            if (v113)
              (*(void (**)(uint64_t, std::__shared_weak_count *, int64_t))(*(_QWORD *)v200 + 40))(v200, v113, (char *)v137 - (char *)v113);
            goto LABEL_195;
          }
          v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
        }
        v202 = (std::string *)v120;
        goto LABEL_158;
      }
      v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
    }
    v204 = (std::string *)v100;
    goto LABEL_112;
  }
  return v6;
}

void sub_19F199AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a45 < 0)
    operator delete(__p);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional(v45 - 176);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a25);
  _Unwind_Resume(a1);
}

void sub_19F199CC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  mdm::Allocator *v6;
  uint64_t v7;

  v3 = *(std::__shared_weak_count **)(v1 + 648);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)v1 = off_1E42AF8C0;
  free(*(void **)(v1 + 472));
  free(*(void **)(v1 + 480));
  free(*(void **)(v1 + 496));
  free(*(void **)(v1 + 232));
  free(*(void **)(v1 + 240));
  free(*(void **)(v1 + 256));
  v7 = mdm::Allocator::instance(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v1, 680);
  _Unwind_Resume(a1);
}

void md::PointLabelFeature::iconColor(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  if ((*(_BYTE *)(a1 + 89) & 0xFD) != 0)
  {
    *a2 = 0;
    a2[4] = 0;
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 72);
    a2[4] = 1;
  }
}

char *md::PointLabelFeature::iconText(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  id v19;

  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_QWORD *)(v4 + 296);
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 90);
  }
  else
  {
    v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v8 = *v7;
    *(_QWORD *)(v4 + 296) = *v7;
    v9 = *((_QWORD *)a2 + 2);
    v5 = *(_QWORD *)(v9 + 296);
    v6 = *(unsigned __int8 *)(v8 + 90);
    if (!v5)
    {
      v10 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
      v5 = *v10;
      *(_QWORD *)(v9 + 296) = *v10;
    }
  }
  if (*(_BYTE *)(v5 + 88) == 9)
  {
    if (v6 == 7)
      goto LABEL_9;
    if (v6 != 2)
    {
      if (!v6)
      {
LABEL_9:
        v11 = *(id *)(*(_QWORD *)a2 + 3472);
        v12 = v11;
        if (v11
          && (v19 = 0,
              objc_msgSend(v11, "getTextForKey:text:locale:", &unk_1E43479A8, &v19, 0),
              (v13 = v19) != 0))
        {
          v14 = objc_retainAutorelease(v13);
          v15 = (char *)objc_msgSend(v14, "UTF8String");
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }

        return v15;
      }
LABEL_16:
      v16 = 255;
      goto LABEL_18;
    }
  }
  else if (v6 != 2)
  {
    if (v6 == 7 && (*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
    {
      v16 = md::PointLabelFeature::externalFeatureTextIndex((uint64_t *)this, 3, *(_QWORD *)a2);
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  v16 = *(unsigned __int8 *)(*((_QWORD *)a2 + 8) + 130);
LABEL_18:
  v17 = *((_QWORD *)this + 68);
  if (v16 >= (unint64_t)((*((_QWORD *)this + 69) - v17) >> 6))
    return 0;
  v15 = (char *)(v17 + ((unint64_t)v16 << 6));
  if (v15[23] < 0)
    return *(char **)v15;
  return v15;
}

void sub_19F199F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::externalFeature(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 63);
}

void md::PointLabelFeature::appendAlternateIcons(uint64_t *a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_count *v19;
  md::LabelStyle *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  int v43;
  uint64_t *v44;
  uint64_t *v47;
  uint64_t v49;
  uint64_t v50;
  char v51[5];
  __int128 v52;
  std::string v53[2];
  std::string *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v49 = *(unsigned __int8 *)(v4 + 126);
  if (*(_BYTE *)(v4 + 126))
  {
    v6 = 0;
    v47 = a1 + 82;
    while (1)
    {
      if (v6 >= *(unsigned __int8 *)(v4 + 126))
      {
        v7 = 0;
        if (!MEMORY[0])
          return;
      }
      else
      {
        if (!*(_BYTE *)(v4 + 457))
          md::LabelStyle::prepareAlternateStyles((md::LabelStyle *)v4);
        v7 = v4 + 16 * v6 + 360;
        if (!*(_BYTE *)v7)
          return;
      }
      v50 = *(_QWORD *)(v7 + 8);
      switch(*(_BYTE *)(v7 + 2))
      {
        case 3:
          v8 = *(_QWORD *)(v4 + 272);
          if (!v8)
          {
            v9 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v4);
            v8 = *v9;
            *(_QWORD *)(v4 + 272) = *v9;
          }
          v10 = v8 + 80;
          v11 = *(char *)(v8 + 103);
          if ((v11 & 0x80000000) == 0)
            goto LABEL_18;
          goto LABEL_27;
        case 4:
          v12 = *(_QWORD *)(v4 + 272);
          if (!v12)
          {
            v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v4);
            v12 = *v13;
            *(_QWORD *)(v4 + 272) = *v13;
          }
          v10 = v12 + 112;
          v11 = *(char *)(v12 + 135);
          if ((v11 & 0x80000000) == 0)
            goto LABEL_18;
          goto LABEL_27;
        case 5:
          v14 = a3;
          if (a3)
          {
            v15 = a3[1];
LABEL_22:
            v16 = *v14;
            if (!*v14)
              goto LABEL_3;
            v10 = 0;
            goto LABEL_29;
          }
          v24 = *(_QWORD *)(v4 + 296);
          if (!v24)
          {
            v25 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v4, 0);
            v24 = *v25;
            *(_QWORD *)(v4 + 296) = *v25;
          }
          v26 = *v47;
          if (!*v47)
            goto LABEL_3;
          v27 = *(unsigned __int8 *)(v26 + 33);
          if (!*(_BYTE *)(v26 + 33))
            goto LABEL_3;
          v28 = *(_DWORD *)(v24 + 64);
          v29 = *(_QWORD *)v26;
          if (*(_DWORD *)v29 == v28)
          {
            LOWORD(v15) = *(_WORD *)(v29 + 4);
            v14 = (int *)(v24 + 64);
            goto LABEL_22;
          }
          v41 = 0;
          v42 = (int *)(v29 + 8);
          do
          {
            if (v27 - 1 == v41)
              goto LABEL_3;
            v43 = *v42;
            v42 += 2;
            ++v41;
          }
          while (v43 != v28);
          if (v41 < v27)
          {
            LOWORD(v15) = *(_WORD *)(v29 + 8 * v41 + 4);
            if (!v24)
            {
              v44 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v4, 0);
              v24 = *v44;
              *(_QWORD *)(v4 + 296) = *v44;
            }
            v14 = (int *)(v24 + 64);
            goto LABEL_22;
          }
LABEL_3:
          if (++v6 == v49)
            return;
          break;
        case 7:
          v17 = *(_QWORD *)(v4 + 272);
          if (!v17)
          {
            v18 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v4);
            v17 = *v18;
            *(_QWORD *)(v4 + 272) = *v18;
          }
          v10 = v17 + 144;
          v11 = *(char *)(v17 + 167);
          if (v11 < 0)
          {
LABEL_27:
            if (!*(_QWORD *)(v10 + 8))
              goto LABEL_3;
          }
          else
          {
LABEL_18:
            if (!(_BYTE)v11)
              goto LABEL_3;
          }
          LOWORD(v15) = 0;
          v16 = 0;
LABEL_29:
          v19 = (std::__shared_count *)a2[1];
          v20 = (md::LabelStyle *)a2[2];
          v21 = *a2;
          if (!*((_QWORD *)v20 + 37))
            *((_QWORD *)v20 + 37) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
          (*(void (**)(char *__return_ptr, uint64_t *))(*a1 + 680))(v51, a1);
          if ((*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1))
          {
            v22 = a1[63];
            if (*(char *)(v22 + 143) < 0)
              std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)(v22 + 120), *(_QWORD *)(v22 + 128));
            else
              v53[0] = *(std::string *)(v22 + 120);
            v23 = *(_QWORD *)(v22 + 168);
            if (v23)
            {
              if (v23 == v22 + 144)
              {
                v54 = &v53[1];
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 24))(v23, &v53[1]);
              }
              else
              {
                v54 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
              }
            }
            else
            {
              v54 = 0;
            }
          }
          else
          {
            v54 = 0;
            memset(v53, 0, sizeof(v53));
          }
          md::LabelStyle::createIcon((uint64_t *)&v52, v20, v21, v19, v47, (void **)v10, v16, v15, 0, v50, v51, (uint64_t)v53);
          v30 = v54;
          if (v54 == &v53[1])
          {
            v30 = &v53[1];
            v31 = 4;
          }
          else
          {
            if (!v54)
              goto LABEL_52;
            v31 = 5;
          }
          (*(void (**)(void))(v30->__r_.__value_.__r.__words[0] + 8 * v31))();
LABEL_52:
          if (SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v53[0].__r_.__value_.__l.__data_);
            v32 = v52;
            if (!(_QWORD)v52)
            {
LABEL_54:
              v33 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
              if (!*((_QWORD *)&v52 + 1))
                goto LABEL_3;
LABEL_65:
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v40 = __ldaxr(p_shared_owners);
              while (__stlxr(v40 - 1, p_shared_owners));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
              goto LABEL_3;
            }
          }
          else
          {
            v32 = v52;
            if (!(_QWORD)v52)
              goto LABEL_54;
          }
          v34 = *(_QWORD **)(a4 + 8);
          if ((unint64_t)v34 >= *(_QWORD *)(a4 + 16))
          {
            v38 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a4, &v52);
          }
          else
          {
            if (v34)
            {
              *v34 = v32;
              v35 = *((_QWORD *)&v52 + 1);
              v34[1] = *((_QWORD *)&v52 + 1);
              if (v35)
              {
                v36 = (unint64_t *)(v35 + 8);
                do
                  v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
              }
            }
            v38 = v34 + 2;
          }
          *(_QWORD *)(a4 + 8) = v38;
          v33 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
          if (*((_QWORD *)&v52 + 1))
            goto LABEL_65;
          goto LABEL_3;
        default:
          goto LABEL_3;
      }
    }
  }
}

void sub_19F19A3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F19A3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelStyle::prepareAlternateStyles(md::LabelStyle *this)
{
  unint64_t v2;
  char *v9;
  std::__shared_weak_count *v10;
  _OWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  unsigned __int16 v36;
  unint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  char *v85;
  uint64_t v86;
  unsigned __int8 v87;
  __int128 v88;
  uint64_t v89;
  std::__shared_weak_count *v90;

  if (*((_BYTE *)this + 126))
  {
    v2 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    v81 = _Q0;
    __asm { FMOV            V10.2S, #1.0 }
    do
    {
      v9 = (char *)this + 16 * v2;
      v11 = v9 + 32;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 4);
      if (v10)
        goto LABEL_7;
      v16 = *(_QWORD *)(*(_QWORD *)this + 264);
      v17 = *(_QWORD *)(*(_QWORD *)this + 240);
      v18 = *(_QWORD *)(*(_QWORD *)this + 248);
      v19 = v18 - v17;
      if (v18 == v17)
      {
        v45 = 0;
        v35 = 0;
        v34 = 0;
        if (v2)
          v36 = 2;
        else
          v36 = 1;
      }
      else
      {
        if (v19 < 0)
          abort();
        v20 = v19 >> 3;
        v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 16))(*(_QWORD *)(*(_QWORD *)this + 264));
        v22 = (unint64_t *)v21;
        v23 = 0;
        do
        {
          if (v21 + v23)
            *(_QWORD *)(v21 + v23) = *(_QWORD *)(v17 + v23);
          v23 += 8;
        }
        while (v17 + v23 != v18);
        v34 = (unint64_t *)(v21 + v23);
        v35 = v21 + 8 * v20;
        if (v2)
          v36 = 2;
        else
          v36 = 1;
        if (v20 > v23 >> 3)
        {
          v82 = v21 + 8 * v20;
          if (v21)
            *v34 = ((unint64_t)v36 << 32) | 0x10057;
          v37 = v34 + 1;
          goto LABEL_73;
        }
        v45 = (char *)v21;
      }
      v46 = ((char *)v34 - v45) >> 3;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61)
        abort();
      v48 = v35 - (_QWORD)v45;
      if ((v35 - (uint64_t)v45) >> 2 > v47)
        v47 = (v35 - (uint64_t)v45) >> 2;
      if (v48 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
      {
        v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 8 * v49, 4);
        v51 = (unint64_t *)(v50 + 8 * v46);
        v82 = v50 + 8 * v49;
        if (v50)
          *v51 = ((unint64_t)v36 << 32) | 0x10057;
      }
      else
      {
        v82 = 0;
        v51 = (unint64_t *)(8 * v46);
      }
      v22 = v51;
      if (v34 != (unint64_t *)v45)
      {
        v52 = (char *)v34 - v45 - 8;
        if (v52 < 0x38 || (unint64_t)((char *)v34 - (char *)v51) < 0x20)
        {
          v54 = v34;
          v22 = v51;
          do
          {
LABEL_70:
            v59 = *--v54;
            *--v22 = v59;
          }
          while (v54 != (unint64_t *)v45);
          goto LABEL_71;
        }
        v53 = (v52 >> 3) + 1;
        v54 = &v34[-(v53 & 0x3FFFFFFFFFFFFFFCLL)];
        v55 = v51 - 2;
        v56 = v34 - 2;
        v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *(_OWORD *)v56;
          *((_OWORD *)v55 - 1) = *((_OWORD *)v56 - 1);
          *(_OWORD *)v55 = v58;
          v55 -= 4;
          v56 -= 4;
          v57 -= 4;
        }
        while (v57);
        v22 = &v51[-(v53 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_70;
      }
LABEL_71:
      v37 = v51 + 1;
      if (v45)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v16 + 40))(v16, v45, v48);
LABEL_73:
      v60 = *(_QWORD *)this;
      v61 = *(std::__shared_weak_count **)(*(_QWORD *)this + 16);
      if (!v61)
        goto LABEL_108;
      v62 = std::__shared_weak_count::lock(v61);
      v90 = v62;
      if (!v62)
        goto LABEL_108;
      v63 = *(_QWORD *)(v60 + 8);
      v89 = v63;
      if (!v63)
      {
        v78 = v62;
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v80 = __ldaxr(p_shared_owners);
        while (__stlxr(v80 - 1, p_shared_owners));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v78);
        }
LABEL_108:
        if (v22)
          (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v16 + 40))(v16, v22, v82 - (_QWORD)v22);
        goto LABEL_5;
      }
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = v16;
      v64 = (char *)v37 - (char *)v22;
      if (v37 != v22)
      {
        if (v64 < 0)
          abort();
        v65 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, (char *)v37 - (char *)v22, 4);
        v83 = v65;
        v84 = v65;
        v85 = (char *)(&v65->__vftable + (v64 >> 3));
        v66 = v22;
        do
        {
          if (v65)
            v65->__vftable = (std::__shared_weak_count_vtbl *)*v66;
          ++v66;
          v65 = (std::__shared_weak_count *)((char *)v65 + 8);
        }
        while (v66 != v37);
        v84 = v65;
      }
      gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v83);
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v88, v63, (gss::FeatureAttributeSet *)&v83, (gss::QueryOverrides *)(*(_QWORD *)this + 272));
      v67 = v88;
      v88 = 0uLL;
      v68 = (std::__shared_weak_count *)*((_QWORD *)this + 2 * v2 + 5);
      *v11 = v67;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (v83)
      {
        v84 = v83;
        (*(void (**)(uint64_t, std::__shared_weak_count *, int64_t))(*(_QWORD *)v86 + 40))(v86, v83, v85 - (char *)v83);
      }
      v74 = *(_QWORD *)v11;
      v75 = v90;
      if (v90)
      {
        v76 = (unint64_t *)&v90->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      if (v22)
        (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v16 + 40))(v16, v22, v82 - (_QWORD)v22);
      if (v74)
      {
        v10 = *(std::__shared_weak_count **)v11;
        v9 = (char *)this + 16 * v2;
LABEL_7:
        v12 = (std::__shared_weak_count *)*((_QWORD *)v9 + 5);
        v89 = (uint64_t)v10;
        v90 = v12;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v84 = v12;
          do
            v15 = __ldxr(v13);
          while (__stxr(v15 + 1, v13));
        }
        else
        {
          v84 = 0;
        }
        v83 = v10;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        if (v10)
          LODWORD(v10) = ((uint64_t (*)(std::__shared_weak_count *, char **))v10->__vftable[1].~__shared_weak_count_0)(v10, &v85);
        v87 = v10;
        if (v12)
        {
          v24 = (unint64_t *)&v12->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          LODWORD(v10) = v87;
        }
        if ((_DWORD)v10)
        {
          v26 = *((_QWORD *)this + 2);
          v27 = *((float *)this + 26);
          v28 = *((float *)this + 22);
          v29 = *((unsigned __int8 *)this + 93);
          *((_BYTE *)this + 16 * v2 + 360) = 1;
          if ((int)v27 >= 0x17)
            v30 = 23;
          else
            v30 = (int)v27;
          v31 = (uint64_t)v83[1].__vftable;
          v32 = *(unsigned __int8 *)(v31 + 12);
          if (v32 == 2)
          {
            LOBYTE(v89) = 1;
            LOBYTE(v88) = 1;
            v33 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v31, 0x7Bu, v30, 0, &v89);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v31, 0x7Bu, v30, 1u, &v88);
          }
          else
          {
            v33 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>((uint64_t)v83[1].__vftable, 0x7Bu, v30, v32, 0);
          }
          *((_BYTE *)this + 16 * v2 + 361) = v33;
          v38 = (uint64_t)v83[1].__vftable;
          v39 = *(unsigned __int8 *)(v38 + 12);
          if (v39 == 2)
          {
            LOBYTE(v89) = 1;
            LOBYTE(v88) = 1;
            v40 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v38, 0x17Au, v30, 0, &v89);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v38, 0x17Au, v30, 1u, &v88);
          }
          else
          {
            v40 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>((uint64_t)v83[1].__vftable, 0x17Au, v30, v39, 0);
          }
          v41 = (char *)this + 16 * v2;
          v41[362] = v40;
          v42 = *((_QWORD *)v41 + 46);
          if (!v42)
          {
            v43 = (uint64_t *)(v41 + 368);
            v42 = operator new();
            *(_QWORD *)v42 = &off_1E4297368;
            *(_OWORD *)(v42 + 8) = 0u;
            *(_OWORD *)(v42 + 24) = 0u;
            *(_OWORD *)(v42 + 40) = 0u;
            *(_OWORD *)(v42 + 56) = 0u;
            *(_OWORD *)(v42 + 72) = 0u;
            *(_OWORD *)(v42 + 85) = 0u;
            *(_OWORD *)(v42 + 16) = v81;
            *(_QWORD *)(v42 + 32) = _D10;
            *(_DWORD *)(v42 + 40) = 1084227584;
            v44 = *v43;
            *v43 = v42;
            if (v44)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              v42 = *v43;
            }
          }
          md::LabelIconStyleGroup::update(v42, (uint64_t)&v83, v26, v29, v27, v28);
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v83);
      }
LABEL_5:
      ++v2;
    }
    while (v2 < *((unsigned __int8 *)this + 126));
  }
  *((_BYTE *)this + 457) = 1;
}

void sub_19F19AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v13, a6 - v13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void grl::IconManager::imageForName(uint64_t a1@<X0>, uint64_t a2@<X1>, IconModifiers *a3@<X2>, float *a4@<X3>, _DWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  grl::Allocator *v12;
  unsigned int v13;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = grl::IconManager::identifierForName(a1, a2, ceilf(*a4));
  v13 = v12;
  if (a5)
    *a5 = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    *((_QWORD *)&v16 + 1) = 0;
    v17 = grl::Allocator::instance(v12);
    v18 = 0;
    *(_QWORD *)&v16 = (char *)&v16 + 8;
    grl::IconManager::imageForIconID(a1, v13, a3, (uint64_t)a4, &v16, (uint64_t)a5, a6);
    std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&v16, *((_QWORD **)&v16 + 1));
  }
  else
  {
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v14 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      LODWORD(v16) = 136315138;
      *(_QWORD *)((char *)&v16 + 4) = v15;
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Failed to find Icon ID for name: %s", (uint8_t *)&v16, 0xCu);
    }
    *a6 = 0;
    a6[1] = 0;
  }
}

grl::Allocator *grl::IconManager::identifierForName(uint64_t a1, uint64_t a2, float a3)
{
  float v5;
  grl::Allocator *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p[2];
  char v26;
  float v27;
  _BYTE buf[22];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = ceilf(a3);
  std::string::basic_string[abi:nn180100]<0>(__p, "Default");
  v27 = v5;
  grl::IconManager::retrieveResourcePack(buf, a1, (const void **)__p, 2);
  v6 = *(grl::Allocator **)buf;
  v7 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_6;
  v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  do
    v10 = __ldaxr(v8);
  while (__stlxr(v10 - 1, v8));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if (v6)
    {
LABEL_7:
      v11 = v7;
      goto LABEL_23;
    }
  }
  grl::IconManager::loadGlobalResourcePack(buf, a1, (uint64_t)__p);
  v6 = *(grl::Allocator **)buf;
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (!v6)
  {
LABEL_25:
    if (!v11)
      goto LABEL_39;
    goto LABEL_35;
  }
LABEL_23:
  v19 = grl::codec::IconMapPack::identifierForName(v6, a2);
  if ((_DWORD)v19)
  {
    v6 = (grl::Allocator *)v19;
    goto LABEL_25;
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  v20 = GEOGetGeoResourceLibIconManagerLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v5;
    _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "Failed to find ID for Icon Name\nName: %s - Content Scale: %f", buf, 0x16u);
  }
  v6 = 0;
  if (v11)
  {
LABEL_35:
    v22 = (unint64_t *)&v11->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_39:
  if (v26 < 0)
    operator delete(__p[0]);
  return v6;
}

uint64_t grl::codec::IconMapPack::identifierForName(grl::Allocator *a1, uint64_t a2)
{
  int v3;
  char *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (char *)a2;
  else
    v4 = *(char **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v11 = grl::Allocator::instance(a1);
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>::__init_with_size[abi:nn180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((uint64_t)v9, v4, &v4[v5], v5);
  v6 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>((_QWORD *)a1 + 12, (uint64_t)v9);
  if (v6)
    v7 = *((unsigned int *)v6 + 12);
  else
    v7 = 0;
  if (SHIBYTE(v10) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 40))(v11, v9[0], v10 & 0x7FFFFFFFFFFFFFFFLL);
  return v7;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 6);
    do
    {
      v15 = *((_QWORD *)v13 + 1);
      if (v8 == v15)
      {
        if ((std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>::operator()[abi:nn180100](v14, v13 + 16, v2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v7)
            v15 %= *(_QWORD *)&v7;
        }
        else
        {
          v15 &= *(_QWORD *)&v7 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

void __destroy_helper_block_ea8_32c57_ZTSNSt3__18weak_ptrIN3ggl7RunLoop18_RunLoopCallbackerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void gdc::LayerDataCollector::sortIndexList(unsigned __int8 **this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v9;
  unsigned __int8 *v10;
  const void *v11;
  size_t v12;
  const void *v13;
  unsigned __int8 *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  __int128 v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  void *v22;

  v2 = *this;
  v3 = this[1];
  v4 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v3 - v2) >> 4));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  v6 = *this;
  v7 = this[1];
  if (*this != v7 && *this + 144 != v7)
  {
    v9 = 0;
    while (1)
    {
      v10 = &v6[v9];
      if (*(_QWORD *)&v6[v9 + 136] == *(_QWORD *)&v6[v9 + 280]
        && *v10 == v10[144]
        && *(unsigned __int16 *)&v6[v9 + 8] == *(unsigned __int16 *)&v6[v9 + 152]
        && *(_QWORD *)&v6[v9 + 80] == *(_QWORD *)&v6[v9 + 224])
      {
        v11 = *(const void **)&v6[v9 + 16];
        v12 = *(_QWORD *)&v6[v9 + 24] - (_QWORD)v11;
        v13 = *(const void **)&v6[v9 + 160];
        if (v12 == *(_QWORD *)&v6[v9 + 168] - (_QWORD)v13
          && !memcmp(v11, v13, v12)
          && v6[v9 + 112] == v6[v9 + 256]
          && v6[v9 + 113] == v6[v9 + 257]
          && *(_DWORD *)&v6[v9 + 116] == *(_DWORD *)&v6[v9 + 260]
          && *(_DWORD *)&v6[v9 + 120] == *(_DWORD *)&v6[v9 + 264])
        {
          break;
        }
      }
      v9 += 144;
      if (&v6[v9 + 144] == v7)
        return;
    }
    if (v10 != v7)
    {
      if (v10 + 288 != v7)
      {
        v14 = &v6[v9];
        do
        {
          if (*((_QWORD *)v10 + 17) != *((_QWORD *)v14 + 53)
            || *v10 != v14[288]
            || *((unsigned __int16 *)v10 + 4) != *((unsigned __int16 *)v14 + 148)
            || *((_QWORD *)v10 + 10) != *((_QWORD *)v14 + 46)
            || (v15 = (const void *)*((_QWORD *)v10 + 2),
                v16 = *((_QWORD *)v10 + 3) - (_QWORD)v15,
                v17 = (const void *)*((_QWORD *)v14 + 38),
                v16 != *((_QWORD *)v14 + 39) - (_QWORD)v17)
            || memcmp(v15, v17, v16)
            || v10[112] != v14[400]
            || v10[113] != v14[401]
            || *((_DWORD *)v10 + 29) != *((_DWORD *)v14 + 101)
            || *((_DWORD *)v10 + 30) != *((_DWORD *)v14 + 102))
          {
            v18 = gdc::LayerDataRequestKey::operator=((uint64_t)(v10 + 144), (uint64_t)(v14 + 288));
            v19 = *((_OWORD *)v14 + 25);
            *((_QWORD *)v10 + 34) = *((_QWORD *)v14 + 52);
            *((_OWORD *)v10 + 16) = v19;
            *((_QWORD *)v10 + 35) = *((_QWORD *)v14 + 53);
            v10 = (unsigned __int8 *)v18;
          }
          v20 = v14 + 432;
          v14 += 144;
        }
        while (v20 != v7);
        v7 = this[1];
      }
      v21 = v10 + 144;
      if (v10 + 144 != v7)
      {
        while (v7 != v21)
        {
          if (*(v7 - 48))
            *(v7 - 48) = 0;
          v22 = (void *)*((_QWORD *)v7 - 16);
          if (v22 != *((void **)v7 - 14))
            free(v22);
          v7 -= 144;
        }
        this[1] = v21;
      }
    }
  }
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned short,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  _WORD *v10;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (_WORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[8] = *((_WORD *)a2 + 8);
      v7 = *(_WORD **)v6;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      v6 = v7;
      if (!v7)
        goto LABEL_7;
    }
    do
    {
      v10 = *(_WORD **)v6;
      operator delete(v6);
      v6 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v8 = operator new(0x18uLL);
      *(_QWORD *)v8 = 0;
      v9 = *((unsigned __int16 *)a2 + 8);
      v8[8] = v9;
      *((_QWORD *)v8 + 1) = v9;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19F19B590(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned short>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a1, *((_WORD *)i + 8), *((_WORD *)i + 8));
  return a1;
}

void sub_19F19B6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t a1, unsigned __int16 a2, __int16 a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F19B994(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>(uint64_t a1, unsigned __int16 a2, __int16 a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F19BC68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::SceneStateManager::updateMerged(md::SceneStateManager *this)
{
  void **v2;
  char *v3;
  char *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  char *v7;
  char *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;

  v2 = (void **)((char *)this + 232);
  *((_QWORD *)this + 30) = *((_QWORD *)this + 29);
  v3 = (char *)*((_QWORD *)this + 23);
  v4 = (char *)*((_QWORD *)this + 24);
  while (v3 != v4)
  {
    v6 = (unsigned __int16 *)*((_QWORD *)this + 29);
    v5 = (unsigned __int16 *)*((_QWORD *)this + 30);
    if (v6 != v5)
    {
      while (*v6 < *(unsigned __int16 *)v3)
      {
        if (++v6 == v5)
          goto LABEL_2;
      }
    }
    if (v6 == v5 || (v5 = v6, *(unsigned __int16 *)v3 != *v6))
LABEL_2:
      std::vector<md::TileSelectionTileSetType>::insert(v2, v5, v3);
    v3 += 2;
  }
  v7 = (char *)*((_QWORD *)this + 26);
  v8 = (char *)*((_QWORD *)this + 27);
  while (v7 != v8)
  {
    v10 = (unsigned __int16 *)*((_QWORD *)this + 29);
    v9 = (unsigned __int16 *)*((_QWORD *)this + 30);
    if (v10 != v9)
    {
      while (*v10 < *(unsigned __int16 *)v7)
      {
        if (++v10 == v9)
          goto LABEL_13;
      }
    }
    if (v10 == v9 || (v9 = v10, *(unsigned __int16 *)v7 != *v10))
LABEL_13:
      std::vector<md::TileSelectionTileSetType>::insert(v2, v9, v7);
    v7 += 2;
  }
}

void md::InjectedFeaturesDataRequester::requestDataKeys(md::InjectedFeaturesDataRequester *this, const gdc::SelectionContext *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t i;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  signed int v16;
  double v17;
  double v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *j;
  __int16 v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  gdc::LayerDataCollector *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 *k;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned __int8 *v39;
  gdc::LayerDataCollector *v40;
  unsigned __int8 v41[16];
  void *v42;
  void *v43;
  char v44;
  int32x2_t v45;
  int v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 8);
  v4 = *(_QWORD *)(v3 + 32);
  v40 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
  if (!v4)
  {
    v5 = 0;
    v6 = *(uint64_t **)(v3 + 24);
    if (v6)
      goto LABEL_4;
LABEL_41:
    v7 = (unint64_t)v5;
    goto LABEL_42;
  }
  if (v4 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v5 = (unsigned __int8 *)operator new(24 * v4);
  v4 = (unint64_t)&v5[24 * v4];
  v6 = *(uint64_t **)(v3 + 24);
  if (!v6)
    goto LABEL_41;
LABEL_4:
  v7 = (unint64_t)v5;
  do
  {
    while (1)
    {
      v8 = **((unsigned int **)a2 + 8);
      if ((_DWORD)v8)
      {
        if (v8 < 0x101)
        {
          v9 = 0;
          i = 256;
        }
        else
        {
          v9 = 0;
          for (i = 256; i < v8; i *= 2)
            ++v9;
        }
        while (i > v8)
        {
          --v9;
          v8 *= 2;
        }
      }
      else
      {
        v9 = 0;
      }
      v11 = *((unsigned __int8 *)v6 + 17);
      v12 = 1 << v11;
      v13 = (*((_DWORD *)v6 + 5) % v12 + v12) % v12;
      v14 = (*((_DWORD *)v6 + 6) % v12 + v12) % v12;
      v15 = (v9 + v11) & ~((int)(v9 + v11) >> 31);
      if (v15 >= 18)
        v15 = 18;
      v16 = v11 - v15;
      if (v16 >= 0)
      {
        v17 = COERCE_DOUBLE(__PAIR64__(v14, v13));
        v16 = v16;
        if (v11 < v16)
          v16 = *((unsigned __int8 *)v6 + 17);
        v18 = COERCE_DOUBLE(vshl_s32((int32x2_t)__PAIR64__(v14, v13), vneg_s32(vdup_n_s32(v16))));
        v19 = v11 == 0;
        if (*((_BYTE *)v6 + 17))
          LOBYTE(v11) = v11 - v16;
        else
          LOBYTE(v11) = 0;
        if (!v19)
          v17 = v18;
        v14 = HIDWORD(v17);
        v13 = LODWORD(v17);
      }
      v20 = *((_BYTE *)v6 + 16);
      if (v7 >= v4)
        break;
      *(_BYTE *)v7 = v20;
      *(_BYTE *)(v7 + 1) = v11;
      *(_DWORD *)(v7 + 4) = v13;
      *(_DWORD *)(v7 + 8) = v14;
      v7 += 24;
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_42;
    }
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v5) >> 3) + 1;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(v4 - (_QWORD)v5) >> 3) > v21)
      v21 = 0x5555555555555556 * ((uint64_t)(v4 - (_QWORD)v5) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v5) >> 3) >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = (char *)operator new(24 * v22);
    v24 = &v23[8 * ((uint64_t)(v7 - (_QWORD)v5) >> 3)];
    *v24 = v20;
    v24[1] = v11;
    *((_DWORD *)v24 + 1) = v13;
    *((_DWORD *)v24 + 2) = v14;
    for (j = v24; (unsigned __int8 *)v7 != v5; *(_QWORD *)(j + 4) = *(_QWORD *)(v7 + 4))
    {
      v26 = *(_WORD *)(v7 - 24);
      v7 -= 24;
      *((_WORD *)j - 12) = v26;
      j -= 24;
    }
    v4 = (unint64_t)&v23[24 * v22];
    v7 = (unint64_t)(v24 + 24);
    if (v5)
      operator delete(v5);
    v5 = (unsigned __int8 *)j;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_42:
  v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v5) >> 3));
  if ((unsigned __int8 *)v7 == v5)
    v28 = 0;
  else
    v28 = v27;
  std::__introsort<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *,false>((uint64_t)v5, v7, v28, 1);
  if ((unsigned __int8 *)v7 == v5)
  {
    v30 = v40;
    goto LABEL_70;
  }
  v29 = v5 + 24;
  v30 = v40;
  if (v5 + 24 == (unsigned __int8 *)v7)
  {
    v33 = (unsigned __int8 *)v7;
  }
  else
  {
    v31 = *v5;
    while (1)
    {
      v32 = v31;
      v33 = v29 - 24;
      v31 = *v29;
      if (__PAIR64__(*(v29 - 23), v32) == __PAIR64__(v29[1], v31)
        && *((_DWORD *)v29 - 5) == *((_DWORD *)v29 + 1)
        && *((_DWORD *)v29 - 4) == *((_DWORD *)v29 + 2))
      {
        break;
      }
      v29 += 24;
      if (v29 == (unsigned __int8 *)v7)
        goto LABEL_70;
    }
    if (v33 != (unsigned __int8 *)v7)
    {
      for (k = v29 + 24; k != (unsigned __int8 *)v7; k += 24)
      {
        if (*v33 != *k
          || v33[1] != k[1]
          || *((_DWORD *)v33 + 1) != *((_DWORD *)k + 1)
          || *((_DWORD *)v33 + 2) != *((_DWORD *)k + 2))
        {
          v35 = *(_OWORD *)k;
          *((_QWORD *)v33 + 5) = *((_QWORD *)k + 2);
          *(_OWORD *)(v33 + 24) = v35;
          v33 += 24;
        }
      }
      v33 += 24;
      v36 = v7 - (_QWORD)v33;
      if ((unsigned __int8 *)v7 == v33)
        goto LABEL_70;
      goto LABEL_66;
    }
  }
  v36 = v7 - (_QWORD)v33;
  if ((unsigned __int8 *)v7 == v33)
    goto LABEL_70;
LABEL_66:
  if (&v33[v36] != (unsigned __int8 *)v7)
  {
    v37 = 8 * (v36 >> 3);
    do
    {
      v38 = *(_OWORD *)&v33[v37];
      *((_QWORD *)v33 + 2) = *(_QWORD *)&v33[v37 + 16];
      *(_OWORD *)v33 = v38;
      v33 += 24;
    }
    while (&v33[v37] != (unsigned __int8 *)v7);
  }
  v7 = (unint64_t)v33;
LABEL_70:
  if (v5 != (unsigned __int8 *)v7)
  {
    v39 = v5;
    do
    {
      v45 = vrev64_s32(*(int32x2_t *)(v39 + 4));
      v46 = v39[1];
      v47 = *v39;
      gdc::LayerDataRequestKey::LayerDataRequestKey(v41, 0, 62, (int *)&v45, 4);
      gdc::LayerDataCollector::addDataKey(v30, (const gdc::LayerDataRequestKey *)v41, (const QuadTile *)v39);
      if (v44)
        v44 = 0;
      if (v42 != v43)
        free(v42);
      v39 += 24;
    }
    while (v39 != (unsigned __int8 *)v7);
  }
  if (v5)
    operator delete(v5);
}

void sub_19F19C278(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F19C284(_Unwind_Exception *exception_object)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void md::S2ResourceDataRequester::requestDataKeys(md::S2ResourceDataRequester *this, const gdc::SelectionContext *a2, char a3)
{
  uint64_t *v3;
  gdc::LayerDataCollector *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12[16];
  void *v13;
  void *v14;
  char v15;
  unsigned __int8 v16[4];
  int v17;
  int v18;

  if (*((_QWORD *)this + 1))
  {
    v3 = *(uint64_t **)(*((_QWORD *)a2 + 8) + 24);
    if (v3)
    {
      v6 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
      do
      {
        v7 = *((_BYTE *)v3 + 17);
        v8 = 1;
        v9 = 1 << v7;
        v10 = *((_DWORD *)v3 + 6);
        v11 = (*((_DWORD *)v3 + 5) % v9 + v9) % v9;
        v16[0] = *((_BYTE *)v3 + 16);
        v16[1] = v7;
        v17 = v11;
        v18 = (v10 % v9 + v9) % v9;
        if ((a3 & 1) == 0)
          v8 = *((_DWORD *)this + 4);
        gdc::Tiled::mapDataKeyFromTile(v12, 0, v16, *((_WORD *)this + 11), v8);
        gdc::LayerDataCollector::addDataKey(v6, (const gdc::LayerDataRequestKey *)v12, (const QuadTile *)(v3 + 2));
        if (v15)
          v15 = 0;
        if (v13 != v14)
          free(v13);
        v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
  }
}

void md::InjectedFeaturesLayerDataSource::addFallbackData(md::InjectedFeaturesLayerDataSource *this, const gdc::SelectionContext *a2)
{
  unint64_t *v3;
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  __int16 v23;
  const gdc::LayerDataRequestKey *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  const QuadTile *v29;
  char *v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  unsigned __int128 v35;
  unsigned __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int64x2_t v39;
  __int16 *v40;
  __int16 *v41;
  __int16 *v42;
  __int16 *v43;
  char v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  char v53[8];
  void *v54;
  void *v55;
  unsigned __int16 v56;
  char *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  __int16 v66;
  uint64_t v67;
  char v68[4];
  int v69;
  int v70;
  __int16 *v71;
  char *v72;
  uint64_t v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)*((_QWORD *)a2 + 1);
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v49 = (uint64_t)v3;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v56, v3, *((unsigned __int16 *)this + 16));
  v4 = v56;
  v6 = v57;
  v5 = (char *)v58;
  v7 = v59;
  v8 = (char *)this + 608;
  v9 = (unsigned __int16)v60;
  v52 = v61;
  v50 = v62;
LABEL_3:
  while (v4 != v9 || v6 != v52 || v7 != v50)
  {
    v10 = v6[113];
    v11 = *(_QWORD *)(v6 + 116);
    v12 = v6[112];
    v13 = (_DWORD *)*((_QWORD *)v6 + 2);
    v14 = v13[2];
    v15 = v13[3];
    v16 = v14;
    LODWORD(v13) = *v13;
    v17 = 1 << v14;
    v18 = (*(_DWORD *)(*((_QWORD *)v6 + 2) + 4) % v17 + v17) % v17;
    v68[0] = v15;
    v68[1] = v14;
    v19 = ((int)v13 % v17 + v17) % v17;
    v69 = v18;
    v70 = v19;
    if (v16 > 0x1E
      || ((v20 = vcvtmd_s64_f64((double)v19 / (double)v17), v20 >= 0) ? (v21 = v20) : (v21 = -v20), v21 > 0x7F))
    {
      LOBYTE(v20) = 0;
      LOBYTE(v16) = 0;
      v22 = 0;
      if (*v8)
        goto LABEL_13;
LABEL_12:
      *v8 = 1;
      goto LABEL_13;
    }
    v32.i64[0] = ((v19 + v17) % v17) | ((unint64_t)((v19 + v17) % v17) << 16);
    v32.i64[1] = ((v18 + v17) % v17) | ((unint64_t)((v18 + v17) % v17) << 16);
    v33.i64[0] = 0xFFFF0000FFFFLL;
    v33.i64[1] = 0xFFFF0000FFFFLL;
    v34 = (int64x2_t)vandq_s8(v32, v33);
    v35 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v34, 8uLL), (int8x16_t)v34) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v36 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v35, 4uLL), (int8x16_t)v35) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
    v33.i64[0] = 0x3333333333333333;
    v33.i64[1] = 0x3333333333333333;
    v37 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v36, 2uLL), (int8x16_t)v36), v33);
    v38 = (int8x16_t)vshlq_u64((uint64x2_t)v37, (uint64x2_t)xmmword_19FFB2DB0);
    v37.i64[1] *= 2;
    v39 = (int64x2_t)vandq_s8(vorrq_s8(v38, v37), (int8x16_t)xmmword_19FFB2DC0);
    v22 = vorrq_s8((int8x16_t)v39, (int8x16_t)vdupq_laneq_s64(v39, 1)).u64[0];
    if (!*v8)
      goto LABEL_12;
LABEL_13:
    *((_QWORD *)this + 77) = v22;
    *((_BYTE *)this + 624) = v16;
    *((_BYTE *)this + 625) = v20;
    v23 = *((_WORD *)this + 16);
    v24 = (const gdc::LayerDataRequestKey *)*((_QWORD *)this + 2);
    v74[0] = &off_1E42C6F00;
    v74[1] = md::TileAdjustmentHelpers::dataKeyForTile;
    v75 = v74;
    md::TileAdjustmentHelpers::getFallbackDataForTile((int64x2_t *)((char *)this + 712), v23, v68, v24, (uint64_t)v74, (uint64_t)this + 608);
    v25 = v75;
    if (v75 == v74)
    {
      v25 = v74;
      v26 = 4;
      goto LABEL_17;
    }
    if (v75)
    {
      v26 = 5;
LABEL_17:
      (*(void (**)(void))(*v25 + 8 * v26))();
    }
    v27 = *((unsigned __int8 *)this + 600);
    if (*((_BYTE *)this + 601))
      v28 = (_QWORD *)*((_QWORD *)a2 + 7);
    else
      v28 = 0;
    LOBYTE(v66) = v12;
    HIBYTE(v66) = v10;
    v67 = v11;
    gdc::FallbackCollector::collectFallbackData((uint64_t)this + 608, (void **)&v71, v27 != 0, v28, &v66);
    gdc::FallbackCollector::end((md::InjectedFeaturesLayerDataSource *)((char *)this + 608), v29);
    v30 = v6 + 144;
    v6 = v5;
    if (v30 != v5)
    {
      v6 = v30;
      while (1)
      {
        if (*((unsigned __int16 *)v6 + 4) == v4)
        {
          v31 = *((_QWORD *)v6 + 17);
          if (!*(_QWORD *)(v7 + 144 * v31 + 112) || *(_BYTE *)(v7 + 144 * v31 + 136))
            break;
        }
        v6 += 144;
        if (v6 == v5)
        {
          v6 = v5;
          goto LABEL_3;
        }
      }
    }
  }
  v40 = v71;
  v41 = (__int16 *)v72;
  if (v71 == (__int16 *)v72)
  {
    if (v71)
      goto LABEL_53;
  }
  else
  {
    v42 = v71 + 56;
    do
    {
      v44 = *(_BYTE *)(*(_QWORD *)v42 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v53, (uint64_t)(v42 - 44));
      LOBYTE(v56) = v44;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v57, (uint64_t)v53);
      v64 = 0;
      v65 = (v63
           - 0x61C8864680B583EBLL
           + ((v56 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v56 - 0x61C8864680B583EBLL) >> 2)) ^ (v56
                                                                                      - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v49, (uint64_t)&v56, v42 - 56, v42);
      if (v64)
        v64 = 0;
      if (v58 != v60)
        free(v58);
      if (v54 != v55)
        free(v54);
      v43 = v42 + 8;
      v42 += 64;
    }
    while (v43 != v41);
    if (v40)
    {
      if (v40 != v41)
      {
        do
        {
          v45 = (std::__shared_weak_count *)*((_QWORD *)v41 - 1);
          if (v45)
          {
            p_shared_owners = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(p_shared_owners);
            while (__stlxr(v47 - 1, p_shared_owners));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = (void *)*((_QWORD *)v41 - 12);
          if (v48 != *((void **)v41 - 10))
            free(v48);
          v41 -= 64;
        }
        while (v41 != v40);
        v40 = v71;
      }
LABEL_53:
      operator delete(v40);
    }
  }
}

void sub_19F19C840(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void gdc::FallbackCollector::end(gdc::FallbackCollector *this, const QuadTile *a2)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  BOOL v12;

  if (*(_BYTE *)this)
    *(_BYTE *)this = 0;
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      v5 = (_QWORD *)*((_QWORD *)v3 + 6);
      if (v5 && *((_QWORD *)this + 9))
      {
        v6 = (std::__shared_weak_count *)v5[12];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *, const QuadTile *))v6->__on_zero_shared)(v6, a2);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v9 = (void *)v5[1];
        if (v9 != (void *)v5[3])
          free(v9);
        *v5 = *((_QWORD *)this + 12);
        *((_QWORD *)this + 12) = v5;
      }
      v10 = (char *)*((_QWORD *)v3 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v3 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != v4);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v4;
}

void gdc::FallbackCollector::collectFallbackData(uint64_t a1, void **a2, int a3, _QWORD *a4, __int16 *a5)
{
  __int16 *v5;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t *v17;
  unsigned int v18;
  char v19;
  int v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  __int16 *v88;
  _QWORD *v90;
  _QWORD *v91;
  __int16 v92[2];
  uint64_t v93;

  if (!*(_BYTE *)a1 || !*(_QWORD *)(a1 + 40))
    return;
  v5 = a5;
  v7 = a3;
  v10 = (_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v11 = *(unsigned __int8 *)(a1 + 16);
    v12 = *(unsigned __int8 *)(a1 + 17);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = (_QWORD *)(a1 + 32);
    while (1)
    {
      v18 = *(unsigned __int8 *)(v9 + 40);
      v19 = v18 - v11;
      if (v18 >= v11)
      {
        if (v18 > v11)
        {
          v22 = *(unsigned __int8 *)(v9 + 41);
          if (v12 != v22)
          {
            v15 = (char)v12 > (char)v22;
            goto LABEL_6;
          }
          v23 = *(_QWORD *)(v9 + 32) >> (2 * v19);
          goto LABEL_21;
        }
        v24 = *(unsigned __int8 *)(v9 + 41);
        if (v24 == v12)
        {
          v23 = *(_QWORD *)(v9 + 32);
LABEL_21:
          v15 = v23 < v13;
          goto LABEL_6;
        }
        v21 = (char)v24 < (char)v12;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v9 + 41);
        if (v20 == BYTE1(*(_QWORD *)(a1 + 16)))
        {
          v15 = *(_QWORD *)(v9 + 32) <= v13 >> (2 * (v11 - v18));
          goto LABEL_6;
        }
        v21 = (char)v20 < (char)BYTE1(*(_QWORD *)(a1 + 16));
      }
      v15 = v21;
LABEL_6:
      v16 = !v15;
      if (v15)
        v17 = (uint64_t *)(v9 + 8);
      else
        v17 = (uint64_t *)v9;
      if (v16)
        v14 = (_QWORD *)v9;
      v9 = *v17;
      if (!*v17)
        goto LABEL_28;
    }
  }
  v14 = (_QWORD *)(a1 + 32);
LABEL_28:
  if (v14 != *(_QWORD **)(a1 + 24))
  {
    v25 = (_QWORD *)*v14;
    if (*v14)
    {
      do
      {
        v26 = v25;
        v25 = (_QWORD *)v25[1];
      }
      while (v25);
    }
    else
    {
      v27 = v14;
      do
      {
        v26 = (_QWORD *)v27[2];
        v16 = *v26 == (_QWORD)v27;
        v27 = v26;
      }
      while (v16);
    }
    v28 = v26[6];
    v30 = (char *)a2[1];
    v29 = (char *)a2[2];
    if (v30 < v29)
    {
      *(_WORD *)v30 = *a5;
      *(_QWORD *)(v30 + 4) = *(_QWORD *)(a5 + 2);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v30 + 24), v28);
      v31 = *(_QWORD *)(v28 + 96);
      *((_QWORD *)v30 + 14) = *(_QWORD *)(v28 + 88);
      *((_QWORD *)v30 + 15) = v31;
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = v30 + 128;
LABEL_68:
      a2[1] = v34;
      if (!v7)
        return;
      goto LABEL_69;
    }
    v35 = (v30 - (_BYTE *)*a2) >> 7;
    if ((unint64_t)(v35 + 1) >> 57)
LABEL_121:
      abort();
    v36 = v29 - (_BYTE *)*a2;
    v37 = v36 >> 6;
    if (v36 >> 6 <= (unint64_t)(v35 + 1))
      v37 = v35 + 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFF80)
      v38 = 0x1FFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
    {
      if (v38 >> 57)
LABEL_122:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v39 = (char *)operator new(v38 << 7);
    }
    else
    {
      v39 = 0;
    }
    v40 = &v39[128 * v35];
    *(_WORD *)v40 = *v5;
    *(_QWORD *)(v40 + 4) = *(_QWORD *)(v5 + 2);
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v40 + 24), v28);
    v41 = *(_QWORD *)(v28 + 96);
    *((_QWORD *)v40 + 14) = *(_QWORD *)(v28 + 88);
    *((_QWORD *)v40 + 15) = v41;
    if (v41)
    {
      v42 = (unint64_t *)(v41 + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = &v39[128 * v38];
    v34 = v40 + 128;
    v45 = (char *)*a2;
    v46 = (char *)a2[1];
    if (v46 == *a2)
    {
      *a2 = v40;
      a2[1] = v34;
      a2[2] = v44;
    }
    else
    {
      v86 = v44;
      v87 = v40 + 128;
      v88 = v5;
      v47 = 0;
      do
      {
        v48 = &v40[v47];
        v49 = &v46[v47];
        *((_WORD *)v48 - 64) = *(_WORD *)&v46[v47 - 128];
        *(_QWORD *)(v48 - 124) = *(_QWORD *)&v46[v47 - 124];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v40[v47 - 104], (uint64_t)&v46[v47 - 104]);
        *((_OWORD *)v48 - 1) = *(_OWORD *)&v46[v47 - 16];
        *((_QWORD *)v49 - 2) = 0;
        *((_QWORD *)v49 - 1) = 0;
        v47 -= 128;
      }
      while (&v46[v47] != v45);
      v50 = &v40[v47];
      v46 = (char *)*a2;
      v51 = (char *)a2[1];
      v34 = v87;
      *a2 = v50;
      a2[1] = v87;
      a2[2] = v86;
      if (v51 == v46)
      {
        v5 = v88;
        v7 = a3;
        if (!v46)
          goto LABEL_68;
LABEL_67:
        operator delete(v46);
        goto LABEL_68;
      }
      v5 = v88;
      do
      {
        v52 = (std::__shared_weak_count *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = (void *)*((_QWORD *)v51 - 12);
        if (v55 != *((void **)v51 - 10))
          free(v55);
        v51 -= 128;
      }
      while (v51 != v46);
    }
    v7 = a3;
    if (!v46)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_69:
  v92[0] = *v5;
  v93 = *(_QWORD *)(v5 + 2);
  if (v14 != v10)
  {
    v90 = v10;
    v91 = a4;
    while (1)
    {
      v56 = v14[6];
      if (*(_QWORD *)(v56 + 88))
      {
        if (!a4
          || std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a4, (unsigned __int8 *)v92))
        {
          break;
        }
      }
LABEL_110:
      v84 = (_QWORD *)v14[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (_QWORD *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (_QWORD *)v14[2];
          v16 = *v85 == (_QWORD)v14;
          v14 = v85;
        }
        while (!v16);
      }
      v14 = v85;
      if (v85 == v10)
        return;
    }
    v58 = (char *)a2[1];
    v57 = (char *)a2[2];
    if (v58 < v57)
    {
      *(_WORD *)v58 = v92[0];
      *(_QWORD *)(v58 + 4) = v93;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v58 + 24), v56);
      v59 = *(_QWORD *)(v56 + 96);
      *((_QWORD *)v58 + 14) = *(_QWORD *)(v56 + 88);
      *((_QWORD *)v58 + 15) = v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = v58 + 128;
      goto LABEL_109;
    }
    v63 = (v58 - (_BYTE *)*a2) >> 7;
    if ((unint64_t)(v63 + 1) >> 57)
      goto LABEL_121;
    v64 = v57 - (_BYTE *)*a2;
    v65 = v64 >> 6;
    if (v64 >> 6 <= (unint64_t)(v63 + 1))
      v65 = v63 + 1;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFF80)
      v66 = 0x1FFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
    {
      if (v66 >> 57)
        goto LABEL_122;
      v67 = (char *)operator new(v66 << 7);
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[128 * v63];
    *(_WORD *)v68 = v92[0];
    *(_QWORD *)(v68 + 4) = v93;
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v68 + 24), v56);
    v69 = *(_QWORD *)(v56 + 96);
    *((_QWORD *)v68 + 14) = *(_QWORD *)(v56 + 88);
    *((_QWORD *)v68 + 15) = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = &v67[128 * v66];
    v62 = v68 + 128;
    v74 = (char *)*a2;
    v73 = (char *)a2[1];
    if (v73 == *a2)
    {
      *a2 = v68;
      a2[1] = v62;
      a2[2] = v72;
    }
    else
    {
      v75 = 0;
      do
      {
        v76 = &v68[v75];
        v77 = &v73[v75];
        *((_WORD *)v76 - 64) = *(_WORD *)&v73[v75 - 128];
        *(_QWORD *)(v76 - 124) = *(_QWORD *)&v73[v75 - 124];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v68[v75 - 104], (uint64_t)&v73[v75 - 104]);
        *((_OWORD *)v76 - 1) = *(_OWORD *)&v73[v75 - 16];
        *((_QWORD *)v77 - 2) = 0;
        *((_QWORD *)v77 - 1) = 0;
        v75 -= 128;
      }
      while (&v73[v75] != v74);
      v78 = &v68[v75];
      v73 = (char *)*a2;
      v79 = (char *)a2[1];
      *a2 = v78;
      a2[1] = v62;
      a2[2] = v72;
      if (v79 == v73)
      {
        v10 = v90;
        a4 = v91;
        if (!v73)
          goto LABEL_109;
        goto LABEL_108;
      }
      v10 = v90;
      a4 = v91;
      do
      {
        v80 = (std::__shared_weak_count *)*((_QWORD *)v79 - 1);
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = (void *)*((_QWORD *)v79 - 12);
        if (v83 != *((void **)v79 - 10))
          free(v83);
        v79 -= 128;
      }
      while (v79 != v73);
    }
    if (!v73)
    {
LABEL_109:
      a2[1] = v62;
      goto LABEL_110;
    }
LABEL_108:
    operator delete(v73);
    goto LABEL_109;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,long long>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(float *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_63:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19F19D3BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *md::RouteLineLayerDataSource::addFallbackData(md::RouteLineLayerDataSource *this, const gdc::SelectionContext *a2)
{
  unint64_t *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  _DWORD *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  __int16 v22;
  const gdc::LayerDataRequestKey *v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int64x2_t v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  int8x16_t v30;
  int8x16_t v31;
  int64x2_t v32;
  _QWORD *v33;
  uint64_t v34;
  const QuadTile *v35;
  char *v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  __int16 *v40;
  __int16 *v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  _QWORD *result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  char v53;
  char v54[8];
  void *v55;
  void *v56;
  unsigned __int16 v57;
  char *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  __int16 v67;
  uint64_t v68;
  char v69[4];
  int v70;
  int v71;
  __int16 *v72;
  char *v73;
  uint64_t v74;
  _BYTE v75[24];
  _BYTE *v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)*((_QWORD *)a2 + 1);
  v4 = 9;
  if (*((_BYTE *)this + 600))
    v4 = 10;
  v77[0] = &off_1E42C6E70;
  v77[1] = md::RouteLineData::mapDataKeyFromTile;
  v77[2] = v4;
  v78 = v77;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v49 = (uint64_t)v3;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v57, v3, *((unsigned __int16 *)this + 16));
  v5 = v57;
  v7 = v58;
  v6 = (char *)v59;
  v8 = v60;
  v52 = (unsigned __int16)v61;
  v9 = (char *)this + 608;
  v51 = v62;
  v50 = v63;
LABEL_5:
  while (v5 != v52 || v7 != v51 || v8 != v50)
  {
    v53 = v7[113];
    v10 = *(_QWORD *)(v7 + 116);
    v11 = v7[112];
    v12 = (_DWORD *)*((_QWORD *)v7 + 2);
    v13 = v12[2];
    v14 = v12[3];
    v15 = v13;
    LODWORD(v12) = *v12;
    v16 = 1 << v13;
    v17 = (*(_DWORD *)(*((_QWORD *)v7 + 2) + 4) % v16 + v16) % v16;
    v69[0] = v14;
    v69[1] = v13;
    v18 = ((int)v12 % v16 + v16) % v16;
    v70 = v17;
    v71 = v18;
    if (v15 > 0x1E
      || ((v19 = vcvtmd_s64_f64((double)v18 / (double)v16), v19 >= 0) ? (v20 = v19) : (v20 = -v19), v20 > 0x7F))
    {
      LOBYTE(v19) = 0;
      LOBYTE(v15) = 0;
      v21 = 0;
      if (*v9)
        goto LABEL_15;
LABEL_14:
      *v9 = 1;
      goto LABEL_15;
    }
    v25.i64[0] = ((v18 + v16) % v16) | ((unint64_t)((v18 + v16) % v16) << 16);
    v25.i64[1] = ((v17 + v16) % v16) | ((unint64_t)((v17 + v16) % v16) << 16);
    v26.i64[0] = 0xFFFF0000FFFFLL;
    v26.i64[1] = 0xFFFF0000FFFFLL;
    v27 = (int64x2_t)vandq_s8(v25, v26);
    v28 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v27, 8uLL), (int8x16_t)v27) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v29 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v28, 4uLL), (int8x16_t)v28) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
    v26.i64[0] = 0x3333333333333333;
    v26.i64[1] = 0x3333333333333333;
    v30 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v29, 2uLL), (int8x16_t)v29), v26);
    v31 = (int8x16_t)vshlq_u64((uint64x2_t)v30, (uint64x2_t)xmmword_19FFB2DB0);
    v30.i64[1] *= 2;
    v32 = (int64x2_t)vandq_s8(vorrq_s8(v31, v30), (int8x16_t)xmmword_19FFB2DC0);
    v21 = vorrq_s8((int8x16_t)v32, (int8x16_t)vdupq_laneq_s64(v32, 1)).u64[0];
    if (!*v9)
      goto LABEL_14;
LABEL_15:
    *((_QWORD *)this + 77) = v21;
    *((_BYTE *)this + 624) = v15;
    *((_BYTE *)this + 625) = v19;
    v22 = *((_WORD *)this + 16);
    v23 = (const gdc::LayerDataRequestKey *)*((_QWORD *)this + 2);
    v24 = (uint64_t)v78;
    if (!v78)
      goto LABEL_18;
    if (v78 != v77)
    {
      v24 = (*(uint64_t (**)(void))(*v78 + 16))();
LABEL_18:
      v76 = (_BYTE *)v24;
      goto LABEL_22;
    }
    v76 = v75;
    (*(void (**)(_QWORD *, _BYTE *))(v77[0] + 24))(v77, v75);
LABEL_22:
    md::TileAdjustmentHelpers::getFallbackDataForTile((int64x2_t *)((char *)this + 712), v22, v69, v23, (uint64_t)v75, (uint64_t)this + 608);
    v33 = v76;
    if (v76 == v75)
    {
      v33 = v75;
      v34 = 4;
      goto LABEL_26;
    }
    if (v76)
    {
      v34 = 5;
LABEL_26:
      (*(void (**)(void))(*v33 + 8 * v34))();
    }
    LOBYTE(v67) = v11;
    HIBYTE(v67) = v53;
    v68 = v10;
    gdc::FallbackCollector::collectFallbackData((uint64_t)this + 608, (void **)&v72, 1, 0, &v67);
    gdc::FallbackCollector::end((md::RouteLineLayerDataSource *)((char *)this + 608), v35);
    v36 = v7 + 144;
    v7 = v6;
    if (v36 != v6)
    {
      v7 = v36;
      while (1)
      {
        if (*((unsigned __int16 *)v7 + 4) == v5)
        {
          v37 = *((_QWORD *)v7 + 17);
          if (!*(_QWORD *)(v8 + 144 * v37 + 112) || *(_BYTE *)(v8 + 144 * v37 + 136))
            break;
        }
        v7 += 144;
        if (v7 == v6)
        {
          v7 = v6;
          goto LABEL_5;
        }
      }
    }
  }
  v38 = v72;
  v39 = (__int16 *)v73;
  if (v72 == (__int16 *)v73)
  {
    if (v72)
      goto LABEL_57;
  }
  else
  {
    v40 = v72 + 56;
    do
    {
      v42 = *(_BYTE *)(*(_QWORD *)v40 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v54, (uint64_t)(v40 - 44));
      LOBYTE(v57) = v42;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v58, (uint64_t)v54);
      v65 = 0;
      v66 = (v64
           - 0x61C8864680B583EBLL
           + ((v57 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v57 - 0x61C8864680B583EBLL) >> 2)) ^ (v57
                                                                                      - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v49, (uint64_t)&v57, v40 - 56, v40);
      if (v65)
        v65 = 0;
      if (v59 != v61)
        free(v59);
      if (v55 != v56)
        free(v55);
      v41 = v40 + 8;
      v40 += 64;
    }
    while (v41 != v39);
    if (v38)
    {
      if (v38 != v39)
      {
        do
        {
          v43 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = (void *)*((_QWORD *)v39 - 12);
          if (v46 != *((void **)v39 - 10))
            free(v46);
          v39 -= 64;
        }
        while (v39 != v38);
        v38 = v72;
      }
LABEL_57:
      operator delete(v38);
    }
  }
  result = v78;
  if (v78 == v77)
  {
    v48 = 4;
    result = v77;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v48))();
  }
  else if (v78)
  {
    v48 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v48))();
  }
  return result;
}

void sub_19F19D8E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 200));
  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t md::Anchor::worldIndexWithContext(md::Anchor *this, const md::CameraContext *a2)
{
  double v3;
  double v4;
  uint64_t v5;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64_t v15;
  float64_t v16;
  uint64_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;

  if (!a2)
    return 0;
  if (!*((_BYTE *)a2 + 3056))
    return 0;
  v3 = *((double *)a2 + 368);
  v4 = *((double *)a2 + 366);
  if (v3 < v4 || *((double *)a2 + 369) < *((double *)a2 + 367))
    return 0;
  v7 = -ceil(fabs(v4));
  if (v4 < 0.0)
    v4 = v7;
  v8 = (uint64_t)v4;
  v9 = -ceil(fabs(v3));
  if (v3 < 0.0)
    v3 = v9;
  v10 = (uint64_t)v3;
  (*(void (**)(md::Anchor *))(*(_QWORD *)this + 40))(this);
  if (v8 > v10)
    return 0x7FFFFFFFFFFFFFFFLL;
  v14 = v11;
  v15 = v12;
  v16 = v13;
  v17 = v10 + 1;
  v5 = 0x7FFFFFFFFFFFFFFFLL;
  v18 = INFINITY;
  while (1)
  {
    v23.f64[0] = v15;
    v23.f64[1] = v16;
    v22 = v14 + (double)v8;
    if (geo::Intersect::encloses<double>((double *)a2 + 123, &v22))
      break;
    v19 = vsubq_f64(*(float64x2_t *)((char *)a2 + 504), v23);
    v20 = vmulq_f64(v19, v19);
    v21 = v20.f64[0]
        + (*((double *)a2 + 62) - (v14 + (double)v8)) * (*((double *)a2 + 62) - (v14 + (double)v8))
        + v20.f64[1];
    if (v21 < v18)
      v5 = v8;
    v18 = fmin(v21, v18);
    if (v17 == ++v8)
      return v5;
  }
  return v8;
}

double md::MercatorTerrainAnchor::worldPoint(md::MercatorTerrainAnchor *this)
{
  uint64_t v1;
  double v3;
  md::MercatorTerrainHeightCache *v4;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0.0;
  v3 = (*(double (**)(md::MercatorTerrainAnchor *))(*(_QWORD *)this + 56))(this);
  v4 = *(md::MercatorTerrainHeightCache **)(v1 + 24);
  if (v4)
    md::MercatorTerrainHeightCache::heightForAnchor(v4, (unint64_t)this);
  return v3;
}

double md::Anchor::mercatorPoint(md::Anchor *this)
{
  return *((double *)this + 2);
}

double md::MercatorTerrainHeightCache::heightForAnchor(md::MercatorTerrainHeightCache *this, unint64_t a2)
{
  unint64_t v2;
  float *v5;
  double result;
  uint64_t (***v7)(_QWORD, _QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  void **v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  float v48;
  void *v49;
  _QWORD v50[3];

  v5 = (float *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(this, a2);
  if (v5)
    return v5[6];
  v7 = (uint64_t (***)(_QWORD, _QWORD *))*((_QWORD *)this + 5);
  if (!v7)
    return 0.0;
  v50[0] = (*(double (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v50[1] = v8;
  v50[2] = v9;
  v10 = (**v7)(v7, v50);
  if (!v11)
    return 0.0;
  v12 = *(double *)&v10;
  v13 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v14 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v13 >> 47) ^ v13);
  v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
      if (v15 >= v16)
        v2 = v15 % v16;
    }
    else
    {
      v2 = v15 & (v16 - 1);
    }
    v18 = *(void ***)(*(_QWORD *)this + 8 * v2);
    if (v18)
    {
      v19 = *v18;
      if (*v18)
      {
        if (v17.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v19[1];
            if (v21 == v15)
            {
              if (v19[2] == a2)
                goto LABEL_87;
            }
            else if ((v21 & (v16 - 1)) != v2)
            {
              goto LABEL_27;
            }
            v19 = (_QWORD *)*v19;
            if (!v19)
              goto LABEL_27;
          }
        }
        do
        {
          v20 = v19[1];
          if (v20 == v15)
          {
            if (v19[2] == a2)
              goto LABEL_87;
          }
          else
          {
            if (v20 >= v16)
              v20 %= v16;
            if (v20 != v2)
              break;
          }
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_27:
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v15;
  v19[2] = a2;
  *((_DWORD *)v19 + 6) = 0;
  v22 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
  v23 = *((float *)this + 8);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    v24 = 1;
    if (v16 >= 3)
      v24 = (v16 & (v16 - 1)) != 0;
    v25 = v24 | (2 * v16);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v16 = *((_QWORD *)this + 1);
    }
    if (prime <= v16)
    {
      if (prime >= v16)
        goto LABEL_64;
      v39 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v16 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime >= v16)
      {
        v16 = *((_QWORD *)this + 1);
LABEL_64:
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v15 >= v16)
            v2 = v15 % v16;
          else
            v2 = v15;
        }
        else
        {
          v2 = (v16 - 1) & v15;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        v49 = *(void **)this;
        *(_QWORD *)this = 0;
        if (v49)
          operator delete(v49);
        v16 = 0;
        *((_QWORD *)this + 1) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = *(void **)this;
    *(_QWORD *)this = v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    *((_QWORD *)this + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)this + 8 * v30++) = 0;
    while (prime != v30);
    v32 = (char *)this + 16;
    v31 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v31)
    {
LABEL_63:
      v16 = prime;
      goto LABEL_64;
    }
    v33 = v31[1];
    v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v35 = v33 & v34;
      *(_QWORD *)(*(_QWORD *)this + 8 * v35) = v32;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v37 = i[1] & v34;
        if (v37 == v35)
        {
          v31 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)this + 8 * v37))
        {
          *v31 = *i;
          v38 = 8 * v37;
          *i = **(_QWORD **)(*(_QWORD *)this + v38);
          **(_QWORD **)(*(_QWORD *)this + v38) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v37) = v31;
          v31 = i;
          v35 = v37;
        }
      }
      goto LABEL_63;
    }
    if (v33 >= prime)
      v33 %= prime;
    *(_QWORD *)(*(_QWORD *)this + 8 * v33) = v32;
    v42 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_63;
    while (1)
    {
      v44 = v42[1];
      if (v44 >= prime)
        v44 %= prime;
      if (v44 != v33)
      {
        if (!*(_QWORD *)(*(_QWORD *)this + 8 * v44))
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v44) = v31;
          goto LABEL_68;
        }
        *v31 = *v42;
        v43 = 8 * v44;
        *v42 = **(_QWORD **)(*(_QWORD *)this + v43);
        **(_QWORD **)(*(_QWORD *)this + v43) = v42;
        v42 = v31;
      }
      v44 = v33;
LABEL_68:
      v31 = v42;
      v42 = (_QWORD *)*v42;
      v33 = v44;
      if (!v42)
        goto LABEL_63;
    }
  }
LABEL_77:
  v45 = *(_QWORD *)this;
  v46 = *(_QWORD **)(*(_QWORD *)this + 8 * v2);
  if (v46)
  {
    *v19 = *v46;
  }
  else
  {
    *v19 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v19;
    *(_QWORD *)(v45 + 8 * v2) = (char *)this + 16;
    if (!*v19)
      goto LABEL_86;
    v47 = *(_QWORD *)(*v19 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v47 >= v16)
        v47 %= v16;
    }
    else
    {
      v47 &= v16 - 1;
    }
    v46 = (_QWORD *)(*(_QWORD *)this + 8 * v47);
  }
  *v46 = v19;
LABEL_86:
  ++*((_QWORD *)this + 3);
LABEL_87:
  result = v12;
  v48 = v12;
  *((float *)v19 + 6) = v48;
  return result;
}

void sub_19F19E054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ElevatedTerrainHeightProvider::heightAtPoint(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return md::World::getElevation(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

_QWORD *md::LayerDataLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *this, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  os_signpost_id_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  size_t v27;
  uint8_t *v28;
  uint8_t *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint8_t *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  _BYTE *v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  std::string::size_type v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unint64_t v59;
  std::string::size_type v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t ***v64;
  uint64_t **v65;
  uint8_t *v66;
  size_t v67;
  unint64_t v68;
  uint64_t *v69;
  size_t v70;
  int v71;
  uint64_t *v72;
  uint64_t *v73;
  int v74;
  std::string *v75;
  std::string::value_type *v76;
  uint8_t *v77;
  uint8_t *v78;
  size_t v79;
  std::string::pointer data;
  std::string::pointer size;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  char *v96;
  __int128 *v97;
  _OWORD *v98;
  unint64_t v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  uint8_t *v103;
  char *v104;
  uint64_t v105;
  char v106;
  _QWORD *v107;
  float v108;
  float v109;
  _BOOL8 v110;
  unint64_t v111;
  unint64_t v112;
  size_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  std::string *v117;
  size_t v118;
  size_t v119;
  size_t v120;
  std::string *i;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint8x8_t v126;
  uint64_t v127;
  std::string *v128;
  uint64_t v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  std::string **v133;
  unint64_t v134;
  void *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint8x8_t v144;
  void **v145;
  unsigned __int8 *v146;
  unint64_t v147;
  const void *v148;
  size_t v149;
  const void *v150;
  uint64_t v151;
  const void *v152;
  size_t v153;
  const void *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  unint64_t v160;
  size_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  __int128 *v167;
  _OWORD *v168;
  unint64_t v169;
  __int128 v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  char *v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  char *v178;
  __int128 *v179;
  _OWORD *v180;
  unint64_t v181;
  __int128 v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  char *v186;
  uint64_t v187;
  char v188;
  float v189;
  float v190;
  _BOOL8 v191;
  unint64_t v192;
  unint64_t v193;
  size_t prime;
  int8x8_t v195;
  unint64_t v196;
  uint8x8_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  _QWORD *v205;
  _QWORD *v206;
  char *v207;
  char *v208;
  size_t v209;
  uint8_t *v210;
  uint8_t *v211;
  unint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  __int128 *v215;
  _OWORD *v216;
  unint64_t v217;
  __int128 v218;
  unint64_t v219;
  uint64_t v220;
  uint8_t *v221;
  _QWORD *v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  _BYTE *v226;
  __int128 *v227;
  _OWORD *v228;
  unint64_t v229;
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  _QWORD *v234;
  uint64_t v235;
  char v236;
  std::string::size_type v237;
  std::string::size_type v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void **v246;
  void **v247;
  void **v248;
  void *v249;
  void **v250;
  void **v251;
  void *v252;
  void *v253;
  char *v254;
  char *v255;
  void *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  void *v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  void *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  void *v276;
  unint64_t v277;
  char *v278;
  void *v279;
  uint64_t *v280;
  std::string::size_type j;
  void *v282;
  uint64_t *v283;
  std::string::size_type v284;
  std::string::size_type v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t **v291;
  uint64_t **v292;
  uint64_t *v293;
  _QWORD *v294;
  std::string::size_type v295;
  std::string::size_type v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  _QWORD *v302;
  _QWORD *v303;
  std::string::size_type v304;
  std::string::size_type v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  std::string::size_type v310;
  unint64_t v311;
  uint8x8_t v312;
  unint64_t v313;
  unint64_t v314;
  BOOL v315;
  unint64_t v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  uint64_t ***v322;
  uint64_t **v323;
  int v324;
  int v325;
  uint64_t *v326;
  uint8_t *v327;
  size_t v328;
  unint64_t v329;
  uint64_t *v330;
  size_t v331;
  int v332;
  uint64_t *v333;
  uint64_t *v334;
  int v335;
  _QWORD *v336;
  float v337;
  float v338;
  _BOOL8 v339;
  unint64_t v340;
  unint64_t v341;
  size_t v342;
  int8x8_t v343;
  unint64_t v344;
  uint8x8_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::string::size_type v353;
  unint64_t v354;
  _BYTE *v355;
  uint64_t *v356;
  uint64_t *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t *v361;
  uint64_t *v362;
  _QWORD *v363;
  void *v364;
  uint64_t *v365;
  uint64_t *v366;
  _BYTE *v367;
  void *v368;
  _BYTE *v369;
  void *v370;
  uint64_t v371;
  const gdc::LayerDataRequestKey *v372;
  unsigned __int8 *v373;
  uint64_t *v374;
  _BYTE *v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  void *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  _BYTE *v383;
  void *v384;
  unsigned __int8 *v385;
  unsigned __int8 *v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint8_t *v393;
  uint64_t v394;
  uint64_t v395;
  char **v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  char *v400;
  char **v401;
  uint64_t v402;
  size_t *v403;
  uint8_t *v404;
  uint8_t *v405;
  unint64_t v406;
  size_t v407;
  char *v408;
  char *v409;
  unint64_t v410;
  char *v411;
  uint64_t v412;
  __int128 *v413;
  _OWORD *v414;
  unint64_t v415;
  __int128 v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t *v419;
  char *v420;
  uint64_t v421;
  char v422;
  unint64_t v423;
  char *v424;
  __int128 *v425;
  _OWORD *v426;
  unint64_t v427;
  __int128 v428;
  unint64_t v429;
  unint64_t v430;
  uint8_t *v431;
  char *v432;
  uint64_t v433;
  char v434;
  uint64_t v435;
  _BYTE *v436;
  int v437;
  int v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  _BYTE *v447;
  void *v448;
  _BYTE *v449;
  void *v450;
  uint64_t *v451;
  uint64_t *k;
  void *v453;
  uint64_t *v454;
  uint64_t *v455;
  void *v456;
  void *v457;
  uint8_t *v458;
  uint64_t v459;
  uint8_t *v460;
  uint64_t *v461;
  uint64_t v462;
  _QWORD *result;
  uint64_t v464;
  uint64_t v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  size_t v469;
  uint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t *v473;
  uint64_t *v474;
  size_t v475;
  size_t v476;
  uint64_t v477;
  uint8_t *v478;
  uint8_t *v479;
  _QWORD *v480;
  __int128 v481;
  std::string **v482;
  _QWORD *v483;
  uint8_t *v484;
  uint8_t *v485;
  size_t v486;
  std::string *v487;
  std::string *v488;
  uint8_t *v489;
  char *v490;
  uint64_t *v491;
  uint64_t *v492;
  int v493;
  void *v494;
  uint64_t *v495;
  unint64_t v496;
  void *v497;
  uint64_t *v498;
  unint64_t v499;
  void *v500[4];
  void *v501;
  char v502;
  int v503;
  std::string v504;
  void *__p[2];
  void *v506;
  unint64_t v507;
  int v508;
  void *v509;
  __int128 v510;
  unint64_t v511;
  int v512;
  _QWORD v513[3];
  _QWORD *v514;
  uint64_t (**v515)();
  md::LayoutContext *v516;
  uint64_t (***v517)();
  _QWORD v518[3];
  _QWORD *v519;
  uint8_t buf[8];
  uint8_t *v521;
  uint8_t *v522;
  uint8_t *v523;
  uint64_t v524;
  _QWORD v525[4];
  std::string::size_type v526;
  __int128 v527;
  _QWORD *v528;
  std::string v529;
  std::string v530;
  uint64_t v531;

  v5 = (unint64_t)this;
  v531 = *MEMORY[0x1E0C80C00];
  v515 = &off_1E42CBE28;
  v516 = this;
  v517 = &v515;
  v518[0] = &off_1E42CBE70;
  v513[0] = &off_1E42CBE70;
  v513[1] = this;
  v514 = v513;
  v519 = v518;
  v518[1] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v6 = *((_QWORD *)v516 + 10);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "LayerDataLogicVariableRate", (const char *)&unk_1A0189141, buf, 2u);
    }
  }
  v8 = v514;
  if (v514 == v513)
  {
    v9 = 4;
    v8 = v513;
  }
  else
  {
    if (!v514)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v517;
  if (v517 == &v515)
  {
    v11 = 4;
    v10 = &v515;
  }
  else
  {
    if (!v517)
      goto LABEL_16;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_16:
  *a4 = *(_QWORD *)(a1 + 120);
  md::LayoutContext::frameState((md::LayoutContext *)v5);
  v489 = (uint8_t *)(uint64_t)(*(double *)(v12 + 88) * 1000.0);
  v13 = *(_QWORD **)(a1 + 120);
  v14 = v13[7];
  v15 = *(_QWORD *)(v14 + 56);
  v466 = *(_QWORD *)(v14 + 64);
  if (v15 == v466)
    goto LABEL_426;
  do
  {
    v17 = *(_QWORD *)(v15 + 8);
    v16 = *(std::__shared_weak_count **)(v15 + 16);
    v470 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v468 = v16;
    std::mutex::lock((std::mutex *)(v17 + 128));
    v20 = *(_QWORD **)(v17 + 192);
    v500[0] = v20;
    v481 = *(_OWORD *)(v17 + 200);
    *(_OWORD *)&v500[1] = v481;
    v509 = *(void **)(v17 + 216);
    v21 = (char *)v509;
    *(_OWORD *)(v17 + 192) = 0u;
    *(_OWORD *)(v17 + 208) = 0u;
    v22 = *(_OWORD *)(v17 + 240);
    v510 = *(_OWORD *)(v17 + 224);
    v490 = (char *)v510;
    *(_OWORD *)__p = v22;
    *(_OWORD *)(v17 + 224) = 0u;
    *(_OWORD *)(v17 + 240) = 0u;
    v506 = *(void **)(v17 + 256);
    *(_QWORD *)(v17 + 256) = 0;
    std::mutex::unlock((std::mutex *)(v17 + 128));
    if (v21 == v490)
    {
      v136 = (_QWORD *)v481;
      if (v20 == (_QWORD *)v481)
        goto LABEL_377;
LABEL_215:
      v491 = (uint64_t *)(v17 + 264);
      v483 = v136;
      v472 = (_QWORD *)(v17 + 280);
      while (1)
      {
        v137 = (_QWORD *)*v20;
        v137[12] = v489;
        v137[13] = v489;
        v138 = *(unsigned __int8 *)v137;
        v139 = *((unsigned __int16 *)v137 + 1);
        v140 = (v139
              - 0x61C8864680B583EBLL
              + ((v138 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v138 - 0x61C8864680B583EBLL) >> 2)) ^ (v138 - 0x61C8864680B583EBLL);
        v141 = v137[9];
        v142 = (v141 - 0x61C8864680B583EBLL + (v140 << 6) + (v140 >> 2)) ^ v140;
        v143 = *(_QWORD *)(v17 + 272);
        if (v143)
        {
          v144 = (uint8x8_t)vcnt_s8((int8x8_t)v143);
          v144.i16[0] = vaddlv_u8(v144);
          if (v144.u32[0] > 1uLL)
          {
            v5 = (v141 - 0x61C8864680B583EBLL + (v140 << 6) + (v140 >> 2)) ^ v140;
            if (v142 >= v143)
              v5 = v142 % v143;
          }
          else
          {
            v5 = v142 & (v143 - 1);
          }
          v145 = *(void ***)(*v491 + 8 * v5);
          if (v145)
          {
            v146 = (unsigned __int8 *)*v145;
            if (*v145)
            {
              if (v144.u32[0] < 2uLL)
              {
                while (1)
                {
                  v151 = *((_QWORD *)v146 + 1);
                  if (v151 == v142)
                  {
                    if (v146[16] == (_DWORD)v138
                      && *((unsigned __int16 *)v146 + 9) == (_DWORD)v139
                      && *((_QWORD *)v146 + 11) == v141)
                    {
                      v152 = (const void *)*((_QWORD *)v146 + 3);
                      v153 = *((_QWORD *)v146 + 4) - (_QWORD)v152;
                      v154 = (const void *)v137[1];
                      if (v153 == v137[2] - (_QWORD)v154 && !memcmp(v152, v154, v153))
                        goto LABEL_245;
                    }
                  }
                  else if ((v151 & (v143 - 1)) != v5)
                  {
                    goto LABEL_247;
                  }
                  v146 = *(unsigned __int8 **)v146;
                  if (!v146)
                    goto LABEL_247;
                }
              }
              do
              {
                v147 = *((_QWORD *)v146 + 1);
                if (v147 == v142)
                {
                  if (v146[16] == (_DWORD)v138
                    && *((unsigned __int16 *)v146 + 9) == (_DWORD)v139
                    && *((_QWORD *)v146 + 11) == v141)
                  {
                    v148 = (const void *)*((_QWORD *)v146 + 3);
                    v149 = *((_QWORD *)v146 + 4) - (_QWORD)v148;
                    v150 = (const void *)v137[1];
                    if (v149 == v137[2] - (_QWORD)v150 && !memcmp(v148, v150, v149))
                    {
LABEL_245:
                      v155 = v483;
                      v156 = v20[1];
                      if (!v156)
                        goto LABEL_326;
                      goto LABEL_324;
                    }
                  }
                }
                else
                {
                  if (v147 >= v143)
                    v147 %= v143;
                  if (v147 != v5)
                    break;
                }
                v146 = *(unsigned __int8 **)v146;
              }
              while (v146);
            }
          }
        }
LABEL_247:
        v146 = (unsigned __int8 *)operator new(0x80uLL);
        *(_QWORD *)v146 = 0;
        *((_QWORD *)v146 + 1) = v142;
        v157 = (char *)(v146 + 56);
        *((_QWORD *)v146 + 2) = *v137;
        *((_QWORD *)v146 + 3) = v146 + 56;
        *((_QWORD *)v146 + 4) = v146 + 56;
        *((_QWORD *)v146 + 5) = v146 + 56;
        *((_QWORD *)v146 + 6) = 32;
        v158 = (char *)v137[1];
        v159 = (char *)v137[2];
        v160 = v159 - v158;
        if ((unint64_t)(v159 - v158) >= 0x21)
          break;
LABEL_268:
        if (v158 != v159)
        {
          if (v160 < 8)
          {
            v178 = v157;
          }
          else if ((unint64_t)(v157 - v158) < 0x20)
          {
            v178 = v157;
          }
          else
          {
            if (v160 < 0x20)
            {
              v177 = 0;
LABEL_279:
              v183 = v160 & 0xFFFFFFFFFFFFFFF8;
              v178 = &v157[v160 & 0xFFFFFFFFFFFFFFF8];
              v184 = v177 - (v160 & 0xFFFFFFFFFFFFFFF8);
              v185 = (uint64_t *)&v158[v177];
              v186 = &v157[v177];
              do
              {
                v187 = *v185++;
                *(_QWORD *)v186 = v187;
                v186 += 8;
                v184 += 8;
              }
              while (v184);
              if (v160 != v183)
              {
                v158 += v183;
                goto LABEL_284;
              }
LABEL_285:
              v157 = (char *)*((_QWORD *)v146 + 4);
              goto LABEL_286;
            }
            v177 = v160 & 0xFFFFFFFFFFFFFFE0;
            v179 = (__int128 *)(v158 + 16);
            v180 = v157 + 16;
            v181 = v160 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v182 = *v179;
              *(v180 - 1) = *(v179 - 1);
              *v180 = v182;
              v179 += 2;
              v180 += 2;
              v181 -= 32;
            }
            while (v181);
            if (v160 == v177)
              goto LABEL_285;
            if ((v160 & 0x18) != 0)
              goto LABEL_279;
            v158 += v177;
            v178 = &v157[v177];
          }
          do
          {
LABEL_284:
            v188 = *v158++;
            *v178++ = v188;
          }
          while (v158 != v159);
          goto LABEL_285;
        }
LABEL_286:
        *((_QWORD *)v146 + 4) = &v157[v160];
        *((_QWORD *)v146 + 11) = v137[9];
        *((_OWORD *)v146 + 6) = *((_OWORD *)v137 + 5);
        *((_QWORD *)v146 + 14) = 0;
        *((_QWORD *)v146 + 15) = 0;
        v189 = (float)(unint64_t)(*(_QWORD *)(v17 + 288) + 1);
        v190 = *(float *)(v17 + 296);
        if (!v143 || (float)(v190 * (float)v143) < v189)
        {
          v191 = (v143 & (v143 - 1)) != 0;
          if (v143 < 3)
            v191 = 1;
          v192 = v191 | (2 * v143);
          v193 = vcvtps_u32_f32(v189 / v190);
          if (v192 <= v193)
            prime = v193;
          else
            prime = v192;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v195 = *(int8x8_t *)(v17 + 272);
          if (prime > *(_QWORD *)&v195)
            goto LABEL_298;
          if (prime < *(_QWORD *)&v195)
          {
            v196 = vcvtps_u32_f32((float)*(unint64_t *)(v17 + 288) / *(float *)(v17 + 296));
            if (*(_QWORD *)&v195 < 3uLL
              || (v197 = (uint8x8_t)vcnt_s8(v195), v197.i16[0] = vaddlv_u8(v197), v197.u32[0] > 1uLL))
            {
              v196 = std::__next_prime(v196);
            }
            else
            {
              v198 = 1 << -(char)__clz(v196 - 1);
              if (v196 >= 2)
                v196 = v198;
            }
            if (prime <= v196)
              prime = v196;
            if (prime < *(_QWORD *)&v195)
LABEL_298:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v491, prime);
          }
          v143 = *(_QWORD *)(v17 + 272);
          if ((v143 & (v143 - 1)) != 0)
          {
            if (v142 >= v143)
              v5 = v142 % v143;
            else
              v5 = v142;
          }
          else
          {
            v5 = (v143 - 1) & v142;
          }
        }
        v199 = *v491;
        v200 = *(_QWORD **)(*v491 + 8 * v5);
        if (v200)
        {
          *(_QWORD *)v146 = *v200;
          v155 = v483;
        }
        else
        {
          *(_QWORD *)v146 = *v472;
          *v472 = v146;
          *(_QWORD *)(v199 + 8 * v5) = v472;
          v155 = v483;
          if (!*(_QWORD *)v146)
            goto LABEL_323;
          v201 = *(_QWORD *)(*(_QWORD *)v146 + 8);
          if ((v143 & (v143 - 1)) != 0)
          {
            if (v201 >= v143)
              v201 %= v143;
          }
          else
          {
            v201 &= v143 - 1;
          }
          v200 = (_QWORD *)(*v491 + 8 * v201);
        }
        *v200 = v146;
LABEL_323:
        ++*(_QWORD *)(v17 + 288);
        v137 = (_QWORD *)*v20;
        v156 = v20[1];
        if (!v156)
          goto LABEL_326;
LABEL_324:
        v202 = (unint64_t *)(v156 + 16);
        do
          v203 = __ldxr(v202);
        while (__stxr(v203 + 1, v202));
LABEL_326:
        v204 = (std::__shared_weak_count *)*((_QWORD *)v146 + 15);
        *((_QWORD *)v146 + 14) = v137;
        *((_QWORD *)v146 + 15) = v156;
        if (v204)
          std::__shared_weak_count::__release_weak(v204);
        v205 = (_QWORD *)*v20;
        v206 = v525;
        *(_QWORD *)buf = *(_QWORD *)*v20;
        v521 = (uint8_t *)v525;
        v522 = (uint8_t *)v525;
        v523 = (uint8_t *)v525;
        v524 = 32;
        v207 = (char *)v205[1];
        v208 = (char *)v205[2];
        v5 = v208 - v207;
        if ((unint64_t)(v208 - v207) >= 0x21)
        {
          if (v5 <= 0x40)
            v209 = 64;
          else
            v209 = v208 - v207;
          v206 = malloc_type_malloc(v209, 0x100004077774924uLL);
          v210 = v521;
          v211 = v522;
          if (v521 == v522)
            goto LABEL_348;
          v212 = v522 - v521;
          if ((unint64_t)(v522 - v521) < 8)
          {
            v213 = v206;
          }
          else
          {
            v213 = v206;
            if ((unint64_t)((char *)v206 - (char *)v521) >= 0x20)
            {
              if (v212 < 0x20)
              {
                v214 = 0;
LABEL_342:
                v219 = v212 & 0xFFFFFFFFFFFFFFF8;
                v213 = (char *)v206 + (v212 & 0xFFFFFFFFFFFFFFF8);
                v220 = v214 - (v212 & 0xFFFFFFFFFFFFFFF8);
                v221 = &v210[v214];
                v222 = (_QWORD *)((char *)v206 + v214);
                do
                {
                  v223 = *(_QWORD *)v221;
                  v221 += 8;
                  *v222++ = v223;
                  v220 += 8;
                }
                while (v220);
                if (v212 != v219)
                {
                  v210 += v219;
                  goto LABEL_347;
                }
LABEL_348:
                v521 = (uint8_t *)v206;
                v522 = (uint8_t *)v206;
                v524 = v209;
                goto LABEL_349;
              }
              v214 = v212 & 0xFFFFFFFFFFFFFFE0;
              v215 = (__int128 *)(v521 + 16);
              v216 = v206 + 2;
              v217 = v212 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v218 = *v215;
                *(v216 - 1) = *(v215 - 1);
                *v216 = v218;
                v215 += 2;
                v216 += 2;
                v217 -= 32;
              }
              while (v217);
              if (v212 == v214)
                goto LABEL_348;
              if ((v212 & 0x18) != 0)
                goto LABEL_342;
              v210 += v214;
              v213 = (char *)v206 + v214;
            }
          }
          do
          {
LABEL_347:
            v224 = *v210++;
            *v213++ = v224;
          }
          while (v210 != v211);
          goto LABEL_348;
        }
LABEL_349:
        if (v207 != v208)
        {
          if (v5 < 8)
          {
            v226 = v206;
          }
          else if ((unint64_t)((char *)v206 - v207) < 0x20)
          {
            v226 = v206;
          }
          else
          {
            if (v5 < 0x20)
            {
              v225 = 0;
LABEL_360:
              v231 = v5 & 0xFFFFFFFFFFFFFFF8;
              v226 = (char *)v206 + (v5 & 0xFFFFFFFFFFFFFFF8);
              v232 = v225 - (v5 & 0xFFFFFFFFFFFFFFF8);
              v233 = (uint64_t *)&v207[v225];
              v234 = (_QWORD *)((char *)v206 + v225);
              do
              {
                v235 = *v233++;
                *v234++ = v235;
                v232 += 8;
              }
              while (v232);
              if (v5 != v231)
              {
                v207 += v231;
                goto LABEL_365;
              }
LABEL_366:
              v206 = v522;
              goto LABEL_367;
            }
            v225 = v5 & 0xFFFFFFFFFFFFFFE0;
            v227 = (__int128 *)(v207 + 16);
            v228 = v206 + 2;
            v229 = v5 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v230 = *v227;
              *(v228 - 1) = *(v227 - 1);
              *v228 = v230;
              v227 += 2;
              v228 += 2;
              v229 -= 32;
            }
            while (v229);
            if (v5 == v225)
              goto LABEL_366;
            if ((v5 & 0x18) != 0)
              goto LABEL_360;
            v207 += v225;
            v226 = (char *)v206 + v225;
          }
          do
          {
LABEL_365:
            v236 = *v207++;
            *v226++ = v236;
          }
          while (v207 != v208);
          goto LABEL_366;
        }
LABEL_367:
        v237 = v205[9];
        v522 = (uint8_t *)v206 + v5;
        v526 = v237;
        v527 = *((_OWORD *)v205 + 5);
        v528 = (_QWORD *)*v20;
        v238 = v20[1];
        v529.__r_.__value_.__r.__words[0] = v238;
        if (v238)
        {
          v239 = (unint64_t *)(v238 + 8);
          do
            v240 = __ldxr(v239);
          while (__stxr(v240 + 1, v239));
        }
        geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::insert((uint64_t *)(v17 + 344), (uint64_t *)buf);
        v241 = (std::__shared_weak_count *)v529.__r_.__value_.__r.__words[0];
        if (v529.__r_.__value_.__r.__words[0])
        {
          v242 = (unint64_t *)(v529.__r_.__value_.__r.__words[0] + 8);
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        if (v521 != v523)
          free(v521);
        v20 += 2;
        if (v20 == v155)
          goto LABEL_377;
      }
      if (v160 <= 0x40)
        v161 = 64;
      else
        v161 = v159 - v158;
      v476 = v161;
      v157 = (char *)malloc_type_malloc(v161, 0x100004077774924uLL);
      v162 = (char *)*((_QWORD *)v146 + 3);
      v163 = (char *)*((_QWORD *)v146 + 4);
      if (v162 == v163)
      {
LABEL_267:
        *((_QWORD *)v146 + 3) = v157;
        *((_QWORD *)v146 + 4) = v157;
        *((_QWORD *)v146 + 6) = v476;
        goto LABEL_268;
      }
      v164 = v163 - v162;
      if ((unint64_t)(v163 - v162) < 8)
      {
        v165 = v157;
      }
      else
      {
        v165 = v157;
        if ((unint64_t)(v157 - v162) >= 0x20)
        {
          if (v164 < 0x20)
          {
            v166 = 0;
LABEL_261:
            v171 = v164 & 0xFFFFFFFFFFFFFFF8;
            v165 = &v157[v164 & 0xFFFFFFFFFFFFFFF8];
            v172 = v166 - (v164 & 0xFFFFFFFFFFFFFFF8);
            v173 = (uint64_t *)&v162[v166];
            v174 = &v157[v166];
            do
            {
              v175 = *v173++;
              *(_QWORD *)v174 = v175;
              v174 += 8;
              v172 += 8;
            }
            while (v172);
            if (v164 == v171)
              goto LABEL_267;
            v162 += v171;
            goto LABEL_266;
          }
          v166 = v164 & 0xFFFFFFFFFFFFFFE0;
          v167 = (__int128 *)(v162 + 16);
          v168 = v157 + 16;
          v169 = v164 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v170 = *v167;
            *(v168 - 1) = *(v167 - 1);
            *v168 = v170;
            v167 += 2;
            v168 += 2;
            v169 -= 32;
          }
          while (v169);
          if (v164 == v166)
            goto LABEL_267;
          if ((v164 & 0x18) != 0)
            goto LABEL_261;
          v162 += v166;
          v165 = &v157[v166];
        }
      }
      do
      {
LABEL_266:
        v176 = *v162++;
        *v165++ = v176;
      }
      while (v162 != v163);
      goto LABEL_267;
    }
    v482 = (std::string **)(v17 + 320);
    do
    {
      v23 = v525;
      *(_QWORD *)buf = *((_QWORD *)v21 + 1);
      v521 = (uint8_t *)v525;
      v522 = (uint8_t *)v525;
      v523 = (uint8_t *)v525;
      v524 = 32;
      v24 = (char *)*((_QWORD *)v21 + 2);
      v25 = (char *)*((_QWORD *)v21 + 3);
      v26 = v25 - v24;
      if ((unint64_t)(v25 - v24) < 0x21)
        goto LABEL_46;
      if (v26 <= 0x40)
        v27 = 64;
      else
        v27 = v25 - v24;
      v23 = malloc_type_malloc(v27, 0x100004077774924uLL);
      v28 = v521;
      v29 = v522;
      if (v521 != v522)
      {
        v30 = v522 - v521;
        if ((unint64_t)(v522 - v521) < 8)
        {
          v31 = v23;
        }
        else
        {
          v31 = v23;
          if ((unint64_t)((char *)v23 - (char *)v521) >= 0x20)
          {
            if (v30 < 0x20)
            {
              v32 = 0;
              goto LABEL_39;
            }
            v32 = v30 & 0xFFFFFFFFFFFFFFE0;
            v33 = (__int128 *)(v521 + 16);
            v34 = v23 + 2;
            v35 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v33;
              *(v34 - 1) = *(v33 - 1);
              *v34 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v30 == v32)
              goto LABEL_45;
            if ((v30 & 0x18) != 0)
            {
LABEL_39:
              v37 = v30 & 0xFFFFFFFFFFFFFFF8;
              v31 = (char *)v23 + (v30 & 0xFFFFFFFFFFFFFFF8);
              v38 = v32 - (v30 & 0xFFFFFFFFFFFFFFF8);
              v39 = &v28[v32];
              v40 = (_QWORD *)((char *)v23 + v32);
              do
              {
                v41 = *(_QWORD *)v39;
                v39 += 8;
                *v40++ = v41;
                v38 += 8;
              }
              while (v38);
              if (v30 == v37)
                goto LABEL_45;
              v28 += v37;
            }
            else
            {
              v28 += v32;
              v31 = (char *)v23 + v32;
            }
          }
        }
        do
        {
          v42 = *v28++;
          *v31++ = v42;
        }
        while (v28 != v29);
      }
LABEL_45:
      v521 = (uint8_t *)v23;
      v522 = (uint8_t *)v23;
      v524 = v27;
LABEL_46:
      if (v24 == v25)
        goto LABEL_64;
      if (v26 < 8)
      {
        v44 = v23;
        goto LABEL_62;
      }
      if ((unint64_t)((char *)v23 - v24) < 0x20)
      {
        v44 = v23;
        goto LABEL_62;
      }
      if (v26 >= 0x20)
      {
        v43 = v26 & 0xFFFFFFFFFFFFFFE0;
        v45 = (__int128 *)(v24 + 16);
        v46 = v23 + 2;
        v47 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v48 = *v45;
          *(v46 - 1) = *(v45 - 1);
          *v46 = v48;
          v45 += 2;
          v46 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v26 == v43)
          goto LABEL_63;
        if ((v26 & 0x18) == 0)
        {
          v24 += v43;
          v44 = (char *)v23 + v43;
          goto LABEL_62;
        }
      }
      else
      {
        v43 = 0;
      }
      v49 = v26 & 0xFFFFFFFFFFFFFFF8;
      v44 = (char *)v23 + (v26 & 0xFFFFFFFFFFFFFFF8);
      v50 = v43 - (v26 & 0xFFFFFFFFFFFFFFF8);
      v51 = (uint64_t *)&v24[v43];
      v52 = (_QWORD *)((char *)v23 + v43);
      do
      {
        v53 = *v51++;
        *v52++ = v53;
        v50 += 8;
      }
      while (v50);
      if (v26 == v49)
        goto LABEL_63;
      v24 += v49;
      do
      {
LABEL_62:
        v54 = *v24++;
        *v44++ = v54;
      }
      while (v24 != v25);
LABEL_63:
      v23 = v522;
LABEL_64:
      v55 = *((_QWORD *)v21 + 10);
      v522 = (uint8_t *)v23 + v26;
      v526 = v55;
      v527 = *(_OWORD *)(v21 + 88);
      v528 = (_QWORD *)*((_QWORD *)v21 + 13);
      if (v21[135] < 0)
      {
        std::string::__init_copy_ctor_external(&v529, *((const std::string::value_type **)v21 + 14), *((_QWORD *)v21 + 15));
        if (v21[159] < 0)
        {
LABEL_68:
          std::string::__init_copy_ctor_external(&v530, *((const std::string::value_type **)v21 + 17), *((_QWORD *)v21 + 18));
          goto LABEL_69;
        }
      }
      else
      {
        v56 = *((_OWORD *)v21 + 7);
        v529.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 16);
        *(_OWORD *)&v529.__r_.__value_.__l.__data_ = v56;
        if (v21[159] < 0)
          goto LABEL_68;
      }
      v57 = *(_OWORD *)(v21 + 136);
      v530.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 19);
      *(_OWORD *)&v530.__r_.__value_.__l.__data_ = v57;
LABEL_69:
      v5 = buf[0];
      v58 = *(unsigned __int16 *)&buf[2];
      v59 = (*(unsigned __int16 *)&buf[2]
           - 0x61C8864680B583EBLL
           + ((v5 - 0x61C8864680B583EBLL) << 6)
           + ((v5 - 0x61C8864680B583EBLL) >> 2)) ^ (v5 - 0x61C8864680B583EBLL);
      v60 = v526;
      v61 = (v526 - 0x61C8864680B583EBLL + (v59 << 6) + (v59 >> 2)) ^ v59;
      v62 = *(_QWORD *)(v17 + 312);
      if (v62)
      {
        v63 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
        v63.i16[0] = vaddlv_u8(v63);
        if (v63.u32[0] > 1uLL)
        {
          v26 = (v526 - 0x61C8864680B583EBLL + (v59 << 6) + (v59 >> 2)) ^ v59;
          if (v61 >= v62)
            v26 = v61 % v62;
        }
        else
        {
          v26 = v61 & (v62 - 1);
        }
        v64 = *(uint64_t ****)(*(_QWORD *)(v17 + 304) + 8 * v26);
        if (v64)
        {
          v65 = *v64;
          if (*v64)
          {
            v66 = v521;
            v67 = v522 - v521;
            if (v63.u32[0] < 2uLL)
            {
              while (1)
              {
                v72 = v65[1];
                if (v72 == (uint64_t *)v61)
                {
                  if (*((unsigned __int8 *)v65 + 16) == (_DWORD)v5
                    && *((unsigned __int16 *)v65 + 9) == v58
                    && v65[11] == (uint64_t *)v60)
                  {
                    v73 = v65[3];
                    if ((char *)v65[4] - (char *)v73 == v67)
                    {
                      v475 = v67;
                      v479 = v66;
                      v74 = memcmp(v73, v66, v67);
                      v67 = v475;
                      v66 = v479;
                      if (!v74)
                        goto LABEL_97;
                    }
                  }
                }
                else if (((unint64_t)v72 & (v62 - 1)) != v26)
                {
                  goto LABEL_101;
                }
                v65 = (uint64_t **)*v65;
                if (!v65)
                  goto LABEL_101;
              }
            }
            do
            {
              v68 = (unint64_t)v65[1];
              if (v68 == v61)
              {
                if (*((unsigned __int8 *)v65 + 16) == (_DWORD)v5
                  && *((unsigned __int16 *)v65 + 9) == v58
                  && v65[11] == (uint64_t *)v60)
                {
                  v69 = v65[3];
                  if ((char *)v65[4] - (char *)v69 == v67)
                  {
                    v478 = v66;
                    v70 = v67;
                    v71 = memcmp(v69, v66, v67);
                    v67 = v70;
                    v66 = v478;
                    if (!v71)
                    {
LABEL_97:
                      if ((SHIBYTE(v530.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_98;
LABEL_201:
                      operator delete(v530.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_202;
                      goto LABEL_99;
                    }
                  }
                }
              }
              else
              {
                if (v68 >= v62)
                  v68 %= v62;
                if (v68 != v26)
                  break;
              }
              v65 = (uint64_t **)*v65;
            }
            while (v65);
          }
        }
      }
LABEL_101:
      v75 = (std::string *)operator new(0xA8uLL);
      v75->__r_.__value_.__r.__words[0] = 0;
      v75->__r_.__value_.__l.__size_ = v61;
      v76 = &v75[2].__r_.__value_.__s.__data_[8];
      v77 = v521;
      v75->__r_.__value_.__r.__words[2] = *(_QWORD *)buf;
      v75[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v75[2].__r_.__value_.__l.__size_;
      v75[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v75[2].__r_.__value_.__l.__size_;
      v75[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v75[2].__r_.__value_.__l.__size_;
      v75[2].__r_.__value_.__r.__words[0] = 32;
      v78 = v522;
      v5 = v522 - v77;
      if ((unint64_t)(v522 - v77) >= 0x21)
      {
        if (v5 <= 0x40)
          v79 = 64;
        else
          v79 = v522 - v77;
        v76 = (std::string::value_type *)malloc_type_malloc(v79, 0x100004077774924uLL);
        data = v75[1].__r_.__value_.__l.__data_;
        size = (std::string::pointer)v75[1].__r_.__value_.__l.__size_;
        if (data == size)
          goto LABEL_121;
        v82 = size - data;
        if ((unint64_t)(size - data) < 8)
        {
          v83 = v76;
          goto LABEL_120;
        }
        v83 = v76;
        if ((unint64_t)(v76 - data) < 0x20)
          goto LABEL_120;
        if (v82 >= 0x20)
        {
          v84 = v82 & 0xFFFFFFFFFFFFFFE0;
          v85 = (__int128 *)(data + 16);
          v86 = v76 + 16;
          v87 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v88 = *v85;
            *(v86 - 1) = *(v85 - 1);
            *v86 = v88;
            v85 += 2;
            v86 += 2;
            v87 -= 32;
          }
          while (v87);
          if (v82 == v84)
            goto LABEL_121;
          if ((v82 & 0x18) == 0)
          {
            data += v84;
            v83 = &v76[v84];
            goto LABEL_120;
          }
        }
        else
        {
          v84 = 0;
        }
        v89 = v82 & 0xFFFFFFFFFFFFFFF8;
        v83 = &v76[v82 & 0xFFFFFFFFFFFFFFF8];
        v90 = v84 - (v82 & 0xFFFFFFFFFFFFFFF8);
        v91 = &data[v84];
        v92 = &v76[v84];
        do
        {
          v93 = *(_QWORD *)v91;
          v91 += 8;
          *(_QWORD *)v92 = v93;
          v92 += 8;
          v90 += 8;
        }
        while (v90);
        if (v82 == v89)
          goto LABEL_121;
        data += v89;
        do
        {
LABEL_120:
          v94 = *data++;
          *v83++ = v94;
        }
        while (data != size);
LABEL_121:
        v75[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
        v75[1].__r_.__value_.__l.__size_ = (std::string::size_type)v76;
        v75[2].__r_.__value_.__r.__words[0] = v79;
      }
      if (v77 != v78)
      {
        if (v5 < 8)
        {
          v96 = v76;
          goto LABEL_138;
        }
        if ((unint64_t)(v76 - (std::string::value_type *)v77) < 0x20)
        {
          v96 = v76;
          goto LABEL_138;
        }
        if (v5 >= 0x20)
        {
          v95 = v5 & 0xFFFFFFFFFFFFFFE0;
          v97 = (__int128 *)(v77 + 16);
          v98 = v76 + 16;
          v99 = v5 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v100 = *v97;
            *(v98 - 1) = *(v97 - 1);
            *v98 = v100;
            v97 += 2;
            v98 += 2;
            v99 -= 32;
          }
          while (v99);
          if (v5 == v95)
            goto LABEL_139;
          if ((v5 & 0x18) == 0)
          {
            v77 += v95;
            v96 = &v76[v95];
            goto LABEL_138;
          }
        }
        else
        {
          v95 = 0;
        }
        v101 = v5 & 0xFFFFFFFFFFFFFFF8;
        v96 = &v76[v5 & 0xFFFFFFFFFFFFFFF8];
        v102 = v95 - (v5 & 0xFFFFFFFFFFFFFFF8);
        v103 = &v77[v95];
        v104 = &v76[v95];
        do
        {
          v105 = *(_QWORD *)v103;
          v103 += 8;
          *(_QWORD *)v104 = v105;
          v104 += 8;
          v102 += 8;
        }
        while (v102);
        if (v5 == v101)
          goto LABEL_139;
        v77 += v101;
        do
        {
LABEL_138:
          v106 = *v77++;
          *v96++ = v106;
        }
        while (v77 != v78);
LABEL_139:
        v76 = (std::string::value_type *)v75[1].__r_.__value_.__l.__size_;
      }
      v75[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v76[v5];
      v107 = v528;
      v75[3].__r_.__value_.__r.__words[2] = v526;
      *(_OWORD *)&v75[4].__r_.__value_.__l.__data_ = v527;
      v75[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v107;
      v75[5] = v529;
      memset(&v529, 0, sizeof(v529));
      v75[6] = v530;
      memset(&v530, 0, sizeof(v530));
      v108 = (float)(unint64_t)(*(_QWORD *)(v17 + 328) + 1);
      v109 = *(float *)(v17 + 336);
      if (!v62 || (float)(v109 * (float)v62) < v108)
      {
        v110 = v62 < 3 || (v62 & (v62 - 1)) != 0;
        v111 = v110 | (2 * v62);
        v112 = vcvtps_u32_f32(v108 / v109);
        if (v111 <= v112)
          v113 = v112;
        else
          v113 = v111;
        if (v113 == 1)
        {
          v113 = 2;
        }
        else if ((v113 & (v113 - 1)) != 0)
        {
          v113 = std::__next_prime(v113);
        }
        v62 = *(_QWORD *)(v17 + 312);
        if (v113 <= v62)
        {
          if (v113 >= v62)
            goto LABEL_178;
          v125 = vcvtps_u32_f32((float)*(unint64_t *)(v17 + 328) / *(float *)(v17 + 336));
          if (v62 < 3 || (v126 = (uint8x8_t)vcnt_s8((int8x8_t)v62), v126.i16[0] = vaddlv_u8(v126), v126.u32[0] > 1uLL))
          {
            v125 = std::__next_prime(v125);
          }
          else
          {
            v127 = 1 << -(char)__clz(v125 - 1);
            if (v125 >= 2)
              v125 = v127;
          }
          if (v113 <= v125)
            v113 = v125;
          if (v113 >= v62)
          {
            v62 = *(_QWORD *)(v17 + 312);
LABEL_178:
            if ((v62 & (v62 - 1)) != 0)
            {
              if (v61 >= v62)
                v26 = v61 % v62;
              else
                v26 = v61;
            }
            else
            {
              v26 = (v62 - 1) & v61;
            }
            goto LABEL_191;
          }
          if (!v113)
          {
            v135 = *(void **)(v17 + 304);
            *(_QWORD *)(v17 + 304) = 0;
            if (v135)
              operator delete(v135);
            v62 = 0;
            *(_QWORD *)(v17 + 312) = 0;
            goto LABEL_178;
          }
        }
        if (v113 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v114 = operator new(8 * v113);
        v115 = *(void **)(v17 + 304);
        *(_QWORD *)(v17 + 304) = v114;
        if (v115)
          operator delete(v115);
        v116 = 0;
        *(_QWORD *)(v17 + 312) = v113;
        do
          *(_QWORD *)(*(_QWORD *)(v17 + 304) + 8 * v116++) = 0;
        while (v113 != v116);
        v117 = *v482;
        if (!*v482)
        {
LABEL_177:
          v62 = v113;
          goto LABEL_178;
        }
        v118 = v117->__r_.__value_.__l.__size_;
        v119 = v113 - 1;
        if ((v113 & (v113 - 1)) == 0)
        {
          v120 = v118 & v119;
          *(_QWORD *)(*(_QWORD *)(v17 + 304) + 8 * v120) = v482;
          for (i = (std::string *)v117->__r_.__value_.__r.__words[0];
                v117->__r_.__value_.__r.__words[0];
                i = (std::string *)v117->__r_.__value_.__r.__words[0])
          {
            v122 = i->__r_.__value_.__l.__size_ & v119;
            if (v122 == v120)
            {
              v117 = i;
            }
            else
            {
              v123 = *(_QWORD *)(v17 + 304);
              if (*(_QWORD *)(v123 + 8 * v122))
              {
                v117->__r_.__value_.__r.__words[0] = i->__r_.__value_.__r.__words[0];
                v124 = 8 * v122;
                i->__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)(v17 + 304) + v124);
                **(_QWORD **)(*(_QWORD *)(v17 + 304) + v124) = i;
              }
              else
              {
                *(_QWORD *)(v123 + 8 * v122) = v117;
                v117 = i;
                v120 = v122;
              }
            }
          }
          goto LABEL_177;
        }
        if (v118 >= v113)
          v118 %= v113;
        *(_QWORD *)(*(_QWORD *)(v17 + 304) + 8 * v118) = v482;
        v128 = (std::string *)v117->__r_.__value_.__r.__words[0];
        if (!v117->__r_.__value_.__r.__words[0])
          goto LABEL_177;
        while (1)
        {
          v130 = v128->__r_.__value_.__l.__size_;
          if (v130 >= v113)
            v130 %= v113;
          if (v130 != v118)
          {
            v131 = *(_QWORD *)(v17 + 304);
            if (!*(_QWORD *)(v131 + 8 * v130))
            {
              *(_QWORD *)(v131 + 8 * v130) = v117;
              goto LABEL_182;
            }
            v117->__r_.__value_.__r.__words[0] = v128->__r_.__value_.__r.__words[0];
            v129 = 8 * v130;
            v128->__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)(v17 + 304) + v129);
            **(_QWORD **)(*(_QWORD *)(v17 + 304) + v129) = v128;
            v128 = v117;
          }
          v130 = v118;
LABEL_182:
          v117 = v128;
          v128 = (std::string *)v128->__r_.__value_.__r.__words[0];
          v118 = v130;
          if (!v128)
            goto LABEL_177;
        }
      }
LABEL_191:
      v132 = *(_QWORD *)(v17 + 304);
      v133 = *(std::string ***)(v132 + 8 * v26);
      if (v133)
      {
        v75->__r_.__value_.__r.__words[0] = (std::string::size_type)*v133;
      }
      else
      {
        v75->__r_.__value_.__r.__words[0] = (std::string::size_type)*v482;
        *v482 = v75;
        *(_QWORD *)(v132 + 8 * v26) = v482;
        if (!v75->__r_.__value_.__r.__words[0])
          goto LABEL_200;
        v134 = *(_QWORD *)(v75->__r_.__value_.__r.__words[0] + 8);
        if ((v62 & (v62 - 1)) != 0)
        {
          if (v134 >= v62)
            v134 %= v62;
        }
        else
        {
          v134 &= v62 - 1;
        }
        v133 = (std::string **)(*(_QWORD *)(v17 + 304) + 8 * v134);
      }
      *v133 = v75;
LABEL_200:
      ++*(_QWORD *)(v17 + 328);
      if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_201;
LABEL_98:
      if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
LABEL_202:
        operator delete(v529.__r_.__value_.__l.__data_);
LABEL_99:
      if (v521 != v523)
        free(v521);
      v21 += 160;
    }
    while (v21 != v490);
    v20 = v500[0];
    v136 = v500[1];
    if (v500[0] != v500[1])
      goto LABEL_215;
LABEL_377:
    v244 = *(_QWORD *)(v17 + 120);
    if (v244)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v244 + 48))(v244, v17 + 304);
    v245 = *(_QWORD *)(v17 + 56);
    if (!v245)
      goto LABEL_384;
    if ((void *)v510 != v509 || v500[1] != v500[0] || (v246 = (void **)__p[1], __p[1] != __p[0]))
    {
      (*(void (**)(uint64_t, void **, void **, void **))(*(_QWORD *)v245 + 48))(v245, v500, &v509, __p);
LABEL_384:
      v246 = (void **)__p[0];
    }
    if (!v246)
      goto LABEL_397;
    v247 = (void **)__p[1];
    v248 = v246;
    if (__p[1] != v246)
    {
      while (1)
      {
        if (*((char *)v247 - 1) < 0)
        {
          operator delete(*(v247 - 3));
          if (*((char *)v247 - 25) < 0)
LABEL_394:
            operator delete(*(v247 - 6));
        }
        else if (*((char *)v247 - 25) < 0)
        {
          goto LABEL_394;
        }
        v249 = *(v247 - 18);
        if (v249 != *(v247 - 16))
          free(v249);
        v247 -= 20;
        if (v247 == v246)
        {
          v248 = (void **)__p[0];
          break;
        }
      }
    }
    __p[1] = v246;
    operator delete(v248);
LABEL_397:
    v250 = (void **)v509;
    if (!v509)
      goto LABEL_409;
    v251 = (void **)v510;
    v252 = v509;
    if ((void *)v510 != v509)
    {
      while (1)
      {
        if (*((char *)v251 - 1) < 0)
        {
          operator delete(*(v251 - 3));
          if (*((char *)v251 - 25) < 0)
LABEL_406:
            operator delete(*(v251 - 6));
        }
        else if (*((char *)v251 - 25) < 0)
        {
          goto LABEL_406;
        }
        v253 = *(v251 - 18);
        if (v253 != *(v251 - 16))
          free(v253);
        v251 -= 20;
        if (v251 == v250)
        {
          v252 = v509;
          break;
        }
      }
    }
    *(_QWORD *)&v510 = v250;
    operator delete(v252);
LABEL_409:
    v254 = (char *)v500[0];
    if (v500[0])
    {
      v255 = (char *)v500[1];
      v256 = v500[0];
      if (v500[1] != v500[0])
      {
        do
        {
          v257 = (std::__shared_weak_count *)*((_QWORD *)v255 - 1);
          if (v257)
          {
            v258 = (unint64_t *)&v257->__shared_owners_;
            do
              v259 = __ldaxr(v258);
            while (__stlxr(v259 - 1, v258));
            if (!v259)
            {
              ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
              std::__shared_weak_count::__release_weak(v257);
            }
          }
          v255 -= 16;
        }
        while (v255 != v254);
        v256 = v500[0];
      }
      v500[1] = v254;
      operator delete(v256);
    }
    v5 = (unint64_t)v468;
    if (v468)
    {
      v260 = (unint64_t *)&v468->__shared_owners_;
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
        std::__shared_weak_count::__release_weak(v468);
      }
    }
    v15 = v470 + 24;
  }
  while (v470 + 24 != v466);
  v13 = *(_QWORD **)(a1 + 120);
LABEL_426:
  v497 = 0;
  v498 = 0;
  v499 = 0;
  v494 = 0;
  v495 = 0;
  v496 = 0;
  v262 = v13[1];
  v467 = v13[2];
  if (v262 == v467)
    goto LABEL_770;
  do
  {
    v471 = v262;
    v477 = *(_QWORD *)(v262 + 8);
    v263 = *(uint64_t **)(v477 + 16);
    std::mutex::lock((std::mutex *)(v263 + 10));
    v264 = (void *)v263[18];
    v265 = v263[19];
    v263[18] = 0;
    v263[19] = 0;
    v509 = v264;
    *(_QWORD *)&v510 = v265;
    v266 = v263[20];
    v267 = v263[21];
    v263[20] = 0;
    v263[21] = 0;
    *((_QWORD *)&v510 + 1) = v266;
    v511 = v267;
    v512 = *((_DWORD *)v263 + 44);
    *((_DWORD *)v263 + 44) = 1065353216;
    if (v267)
    {
      v268 = *(_QWORD *)(v266 + 8);
      if ((v265 & (v265 - 1)) != 0)
      {
        if (v268 >= v265)
          v268 %= v265;
      }
      else
      {
        v268 &= v265 - 1;
      }
      *((_QWORD *)v264 + v268) = (char *)&v510 + 8;
    }
    v269 = (void *)v263[23];
    v270 = v263[24];
    v263[23] = 0;
    v263[24] = 0;
    __p[0] = v269;
    __p[1] = (void *)v270;
    v271 = (_QWORD *)v263[25];
    v272 = v263[26];
    v263[25] = 0;
    v263[26] = 0;
    v506 = v271;
    v507 = v272;
    v508 = *((_DWORD *)v263 + 54);
    *((_DWORD *)v263 + 54) = 1065353216;
    if (v272)
    {
      v273 = v271[1];
      if ((v270 & (v270 - 1)) != 0)
      {
        if (v273 >= v270)
          v273 %= v270;
      }
      else
      {
        v273 &= v270 - 1;
      }
      *((_QWORD *)v269 + v273) = &v506;
    }
    std::mutex::unlock((std::mutex *)(v263 + 10));
    v274 = (char *)v263[28];
    v487 = (std::string *)(v263 + 28);
    v275 = (char *)v263[29];
    if (v275 != v274)
    {
      do
      {
        if (*(v275 - 16))
          *(v275 - 16) = 0;
        v276 = (void *)*((_QWORD *)v275 - 12);
        if (v276 != *((void **)v275 - 10))
          free(v276);
        v275 -= 112;
      }
      while (v275 != v274);
      v275 = (char *)v487->__r_.__value_.__r.__words[0];
    }
    v263[29] = (uint64_t)v274;
    v277 = 0x6DB6DB6DB6DB6DB7 * ((v274 - v275) >> 4);
    if (v511 <= v277)
    {
      if (v511 < v277)
      {
        v278 = &v275[112 * v511];
        while (v274 != v278)
        {
          if (*(v274 - 16))
            *(v274 - 16) = 0;
          v279 = (void *)*((_QWORD *)v274 - 12);
          if (v279 != *((void **)v274 - 10))
            free(v279);
          v274 -= 112;
        }
        v263[29] = (uint64_t)v278;
      }
    }
    else
    {
      std::vector<gdc::LayerDataRequestKey>::__append((void **)&v487->__r_.__value_.__l.__data_, v511 - v277);
    }
    v280 = (uint64_t *)v497;
    for (j = (std::string::size_type)v498; (uint64_t *)j != v280; j -= 120)
    {
      if (*(_BYTE *)(j - 16))
        *(_BYTE *)(j - 16) = 0;
      v282 = *(void **)(j - 96);
      if (v282 != *(void **)(j - 80))
        free(v282);
    }
    v498 = v280;
    std::vector<gdc::LayerDataRequestKeyPair>::reserve((uint64_t)&v497, v511);
    v283 = (uint64_t *)*((_QWORD *)&v510 + 1);
    if (*((_QWORD *)&v510 + 1))
    {
      v492 = v263 + 3;
      v480 = v263 + 5;
      do
      {
        LOBYTE(v500[0]) = *((_BYTE *)v283 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v500[1], (uint64_t)(v283 + 3));
        v502 = 0;
        if (*((_BYTE *)v283 + 112))
        {
          v503 = *((_DWORD *)v283 + 29);
          v502 = 1;
        }
        v284 = v283[16];
        v504.__r_.__value_.__r.__words[0] = v283[15];
        v504.__r_.__value_.__l.__size_ = v284;
        v285 = v283[17];
        v504.__r_.__value_.__r.__words[2] = v285;
        if (v285)
        {
          v286 = (unint64_t *)(v285 + 8);
          do
            v287 = __ldxr(v286);
          while (__stxr(v287 + 1, v286));
          v284 = v504.__r_.__value_.__l.__size_;
        }
        v288 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v284 + 16))(v284);
        buf[0] = (uint8_t)v500[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v521, (uint64_t)&v500[1]);
        LOBYTE(v528) = 0;
        if (v502)
        {
          HIDWORD(v528) = v503;
          LOBYTE(v528) = 1;
        }
        v529 = v504;
        if (v504.__r_.__value_.__r.__words[2])
        {
          v289 = (unint64_t *)(v504.__r_.__value_.__r.__words[2] + 8);
          do
            v290 = __ldxr(v289);
          while (__stxr(v290 + 1, v289));
        }
        v530.__r_.__value_.__r.__words[0] = v288;
        v291 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v492, buf);
        if (!v291)
        {
          v303 = operator new(0x98uLL);
          *v303 = 0;
          v303[1] = 0;
          *((_BYTE *)v303 + 16) = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v303 + 3), (uint64_t)&v521);
          *((_BYTE *)v303 + 112) = 0;
          if ((_BYTE)v528)
          {
            *((_DWORD *)v303 + 29) = HIDWORD(v528);
            *((_BYTE *)v303 + 112) = 1;
          }
          v304 = v529.__r_.__value_.__l.__size_;
          v303[15] = v529.__r_.__value_.__r.__words[0];
          v303[16] = v304;
          v305 = v529.__r_.__value_.__r.__words[2];
          v303[17] = *((_QWORD *)&v529.__r_.__value_.__l + 2);
          if (v305)
          {
            v306 = (unint64_t *)(v305 + 8);
            do
              v307 = __ldxr(v306);
            while (__stxr(v307 + 1, v306));
          }
          v303[18] = v530.__r_.__value_.__r.__words[0];
          v308 = *v263;
          *(_QWORD *)(v308 + 8) = v303;
          *v303 = v308;
          *v263 = (uint64_t)v303;
          v303[1] = v263;
          ++v263[2];
          v309 = (uint64_t *)v263[8];
          v263[9] += v530.__r_.__value_.__r.__words[0];
          if (v309 == v263)
            v263[8] = (uint64_t)v303;
          v310 = v529.__r_.__value_.__r.__words[0];
          v311 = v263[4];
          if (v311)
          {
            v312 = (uint8x8_t)vcnt_s8((int8x8_t)v311);
            v312.i16[0] = vaddlv_u8(v312);
            if (v312.u32[0] > 1uLL)
            {
              j = v529.__r_.__value_.__r.__words[0];
              if (v529.__r_.__value_.__r.__words[0] >= v311)
                j = v529.__r_.__value_.__r.__words[0] % v311;
            }
            else
            {
              j = (v311 - 1) & v529.__r_.__value_.__r.__words[0];
            }
            v322 = *(uint64_t ****)(*v492 + 8 * j);
            if (v322)
            {
              v323 = *v322;
              if (*v322)
              {
                v324 = buf[0];
                v325 = (unsigned __int16)v521;
                v326 = (uint64_t *)v527;
                v327 = v522;
                v328 = v523 - v522;
                if (v312.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v333 = v323[1];
                    if (v333 == (uint64_t *)v310)
                    {
                      if (*((unsigned __int8 *)v323 + 16) == v324
                        && *((unsigned __int16 *)v323 + 12) == v325
                        && v323[12] == v326)
                      {
                        v334 = v323[4];
                        if ((char *)v323[5] - (char *)v334 == v328)
                        {
                          v485 = v327;
                          v469 = v328;
                          v474 = v326;
                          v335 = memcmp(v334, v327, v328);
                          v328 = v469;
                          v327 = v485;
                          v326 = v474;
                          if (!v335)
                            goto LABEL_581;
                        }
                      }
                    }
                    else if (((unint64_t)v333 & (v311 - 1)) != j)
                    {
                      goto LABEL_541;
                    }
                    v323 = (uint64_t **)*v323;
                    if (!v323)
                      goto LABEL_541;
                  }
                }
                do
                {
                  v329 = (unint64_t)v323[1];
                  if (v329 == v310)
                  {
                    if (*((unsigned __int8 *)v323 + 16) == v324
                      && *((unsigned __int16 *)v323 + 12) == v325
                      && v323[12] == v326)
                    {
                      v330 = v323[4];
                      if ((char *)v323[5] - (char *)v330 == v328)
                      {
                        v484 = v327;
                        v331 = v328;
                        v473 = v326;
                        v332 = memcmp(v330, v327, v328);
                        v328 = v331;
                        v327 = v484;
                        v326 = v473;
                        if (!v332)
                          goto LABEL_581;
                      }
                    }
                  }
                  else
                  {
                    if (v329 >= v311)
                      v329 %= v311;
                    if (v329 != j)
                      break;
                  }
                  v323 = (uint64_t **)*v323;
                }
                while (v323);
              }
            }
          }
LABEL_541:
          v336 = operator new(0x88uLL);
          *v336 = 0;
          v336[1] = v310;
          *((_BYTE *)v336 + 16) = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v336 + 3), (uint64_t)&v521);
          *((_BYTE *)v336 + 112) = 0;
          if ((_BYTE)v528)
          {
            *((_DWORD *)v336 + 29) = HIDWORD(v528);
            *((_BYTE *)v336 + 112) = 1;
          }
          v336[15] = v529.__r_.__value_.__r.__words[0];
          v336[16] = v303;
          v337 = (float)(unint64_t)(v263[6] + 1);
          v338 = *((float *)v263 + 14);
          if (!v311 || (float)(v338 * (float)v311) < v337)
          {
            v339 = (v311 & (v311 - 1)) != 0;
            if (v311 < 3)
              v339 = 1;
            v340 = v339 | (2 * v311);
            v341 = vcvtps_u32_f32(v337 / v338);
            if (v340 <= v341)
              v342 = v341;
            else
              v342 = v340;
            if (v342 == 1)
            {
              v342 = 2;
            }
            else if ((v342 & (v342 - 1)) != 0)
            {
              v342 = std::__next_prime(v342);
            }
            v343 = (int8x8_t)v263[4];
            if (v342 > *(_QWORD *)&v343)
              goto LABEL_555;
            if (v342 < *(_QWORD *)&v343)
            {
              v344 = vcvtps_u32_f32((float)(unint64_t)v263[6] / *((float *)v263 + 14));
              if (*(_QWORD *)&v343 < 3uLL
                || (v345 = (uint8x8_t)vcnt_s8(v343), v345.i16[0] = vaddlv_u8(v345), v345.u32[0] > 1uLL))
              {
                v344 = std::__next_prime(v344);
              }
              else
              {
                v346 = 1 << -(char)__clz(v344 - 1);
                if (v344 >= 2)
                  v344 = v346;
              }
              if (v342 <= v344)
                v342 = v344;
              if (v342 < *(_QWORD *)&v343)
LABEL_555:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v492, v342);
            }
            v311 = v263[4];
            if ((v311 & (v311 - 1)) != 0)
            {
              if (v310 >= v311)
                j = v310 % v311;
              else
                j = v310;
            }
            else
            {
              j = (v311 - 1) & v310;
            }
          }
          v347 = *v492;
          v348 = *(_QWORD **)(*v492 + 8 * j);
          if (v348)
          {
            *v336 = *v348;
            goto LABEL_579;
          }
          *v336 = *v480;
          *v480 = v336;
          *(_QWORD *)(v347 + 8 * j) = v480;
          if (*v336)
          {
            v349 = *(_QWORD *)(*v336 + 8);
            if ((v311 & (v311 - 1)) != 0)
            {
              if (v349 >= v311)
                v349 %= v311;
            }
            else
            {
              v349 &= v311 - 1;
            }
            v348 = (_QWORD *)(*v492 + 8 * v349);
LABEL_579:
            *v348 = v336;
          }
          ++v263[6];
          goto LABEL_581;
        }
        v292 = v291;
        v293 = v291[16];
        v294 = operator new(0x98uLL);
        *v294 = 0;
        v294[1] = 0;
        *((_BYTE *)v294 + 16) = buf[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v294 + 3), (uint64_t)&v521);
        *((_BYTE *)v294 + 112) = 0;
        if ((_BYTE)v528)
        {
          *((_DWORD *)v294 + 29) = HIDWORD(v528);
          *((_BYTE *)v294 + 112) = 1;
        }
        v295 = v529.__r_.__value_.__l.__size_;
        v294[15] = v529.__r_.__value_.__r.__words[0];
        v294[16] = v295;
        v296 = v529.__r_.__value_.__r.__words[2];
        v294[17] = *((_QWORD *)&v529.__r_.__value_.__l + 2);
        if (v296)
        {
          v297 = (unint64_t *)(v296 + 8);
          do
            v298 = __ldxr(v297);
          while (__stxr(v298 + 1, v297));
        }
        v294[18] = v530.__r_.__value_.__r.__words[0];
        v299 = *v263;
        *(_QWORD *)(v299 + 8) = v294;
        *v294 = v299;
        *v263 = (uint64_t)v294;
        v294[1] = v263;
        v300 = v263[2];
        v263[2] = v300 + 1;
        v301 = (uint64_t *)v263[8];
        if (v301 == v293)
        {
          v302 = (_QWORD *)v293[1];
        }
        else
        {
          v302 = v294;
          if (v301 != v263)
            goto LABEL_502;
        }
        v263[8] = (uint64_t)v302;
LABEL_502:
        v313 = v293[18];
        v314 = v263[9];
        v315 = v314 >= v313;
        v316 = v314 - v313;
        if (!v315)
          v316 = 0;
        v263[9] = v316 + v530.__r_.__value_.__r.__words[0];
        v317 = *v293;
        *(_QWORD *)(v317 + 8) = v293[1];
        *(_QWORD *)v293[1] = v317;
        v263[2] = v300;
        v318 = (std::__shared_weak_count *)v293[17];
        if (v318)
        {
          v319 = (unint64_t *)&v318->__shared_owners_;
          do
            v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (!v320)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
            if (!*((_BYTE *)v293 + 112))
              goto LABEL_510;
LABEL_509:
            *((_BYTE *)v293 + 112) = 0;
            goto LABEL_510;
          }
        }
        if (*((_BYTE *)v293 + 112))
          goto LABEL_509;
LABEL_510:
        v321 = (void *)v293[4];
        if (v321 != (void *)v293[6])
          free(v321);
        operator delete(v293);
        v292[16] = v294;
LABEL_581:
        v350 = (std::__shared_weak_count *)v529.__r_.__value_.__r.__words[2];
        if (!v529.__r_.__value_.__r.__words[2])
          goto LABEL_585;
        v351 = (unint64_t *)(v529.__r_.__value_.__r.__words[2] + 8);
        do
          v352 = __ldaxr(v351);
        while (__stlxr(v352 - 1, v351));
        if (v352)
        {
LABEL_585:
          if (!(_BYTE)v528)
            goto LABEL_587;
LABEL_586:
          LOBYTE(v528) = 0;
          goto LABEL_587;
        }
        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
        std::__shared_weak_count::__release_weak(v350);
        if ((_BYTE)v528)
          goto LABEL_586;
LABEL_587:
        if (v522 != (uint8_t *)v524)
          free(v522);
        v353 = v504.__r_.__value_.__l.__size_;
        *(_QWORD *)(v504.__r_.__value_.__l.__size_ + 136) = v489;
        *(_QWORD *)(v353 + 144) = v489;
        v354 = v263[29];
        if (v354 >= v263[30])
        {
          v355 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)&v487->__r_.__value_.__l.__data_, (uint64_t)v500);
        }
        else
        {
          *(_BYTE *)v354 = v500[0];
          gdc::LayerDataKey::LayerDataKey(v354 + 8, (uint64_t)&v500[1]);
          *(_BYTE *)(v354 + 96) = 0;
          if (v502)
          {
            *(_DWORD *)(v354 + 100) = v503;
            *(_BYTE *)(v354 + 96) = 1;
          }
          *(_QWORD *)(v354 + 104) = v504.__r_.__value_.__r.__words[0];
          v355 = (_BYTE *)(v354 + 112);
        }
        v263[29] = (uint64_t)v355;
        *(_QWORD *)buf = *(_QWORD *)(v504.__r_.__value_.__l.__size_ + 128);
        LOBYTE(v521) = v500[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v522, (uint64_t)&v500[1]);
        v529.__r_.__value_.__s.__data_[0] = 0;
        if (v502)
        {
          HIDWORD(v529.__r_.__value_.__r.__words[0]) = v503;
          v529.__r_.__value_.__s.__data_[0] = 1;
        }
        v529.__r_.__value_.__l.__size_ = v504.__r_.__value_.__r.__words[0];
        v356 = v498;
        if ((unint64_t)v498 >= v499)
        {
          v357 = (uint64_t *)std::vector<gdc::LayerDataRequestKeyPair>::__push_back_slow_path<gdc::LayerDataRequestKeyPair>(&v497, (uint64_t)buf);
        }
        else
        {
          *v498 = *(_QWORD *)buf;
          *((_BYTE *)v356 + 8) = (_BYTE)v521;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v356 + 2), (uint64_t)&v522);
          *((_BYTE *)v356 + 104) = 0;
          if (v529.__r_.__value_.__s.__data_[0])
          {
            *((_DWORD *)v356 + 27) = HIDWORD(v529.__r_.__value_.__r.__words[0]);
            *((_BYTE *)v356 + 104) = 1;
          }
          v356[14] = v529.__r_.__value_.__l.__size_;
          v357 = v356 + 15;
        }
        v498 = v357;
        if (v529.__r_.__value_.__s.__data_[0])
          v529.__r_.__value_.__s.__data_[0] = 0;
        if (v523 != (uint8_t *)v525[0])
          free(v523);
        v358 = (std::__shared_weak_count *)v504.__r_.__value_.__r.__words[2];
        if (v504.__r_.__value_.__r.__words[2])
        {
          v359 = (unint64_t *)(v504.__r_.__value_.__r.__words[2] + 8);
          do
            v360 = __ldaxr(v359);
          while (__stlxr(v360 - 1, v359));
          if (!v360)
          {
            ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
            std::__shared_weak_count::__release_weak(v358);
            if (!v502)
              goto LABEL_611;
LABEL_610:
            v502 = 0;
            goto LABEL_611;
          }
        }
        if (v502)
          goto LABEL_610;
LABEL_611:
        if (v500[2] != v501)
          free(v500[2]);
        v283 = (uint64_t *)*v283;
      }
      while (v283);
    }
    v361 = (uint64_t *)v494;
    v362 = v495;
    if (v495 != v494)
    {
      do
      {
        if (*((_BYTE *)v362 - 16))
          *((_BYTE *)v362 - 16) = 0;
        v364 = (void *)*(v362 - 12);
        if (v364 != (void *)*(v362 - 10))
          free(v364);
        v362 -= 15;
      }
      while (v362 != v361);
    }
    v495 = v361;
    std::vector<gdc::LayerDataRequestKeyPair>::reserve((uint64_t)&v494, v507);
    v363 = v506;
    if (v506)
    {
      do
      {
        *(_QWORD *)buf = v363[16];
        LOBYTE(v521) = *((_BYTE *)v363 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v522, (uint64_t)(v363 + 3));
        v529.__r_.__value_.__s.__data_[0] = 0;
        if (*((_BYTE *)v363 + 112))
        {
          HIDWORD(v529.__r_.__value_.__r.__words[0]) = *((_DWORD *)v363 + 29);
          v529.__r_.__value_.__s.__data_[0] = 1;
        }
        v529.__r_.__value_.__l.__size_ = v363[15];
        v365 = v495;
        if ((unint64_t)v495 >= v496)
        {
          v366 = (uint64_t *)std::vector<gdc::LayerDataRequestKeyPair>::__push_back_slow_path<gdc::LayerDataRequestKeyPair>(&v494, (uint64_t)buf);
        }
        else
        {
          *v495 = *(_QWORD *)buf;
          *((_BYTE *)v365 + 8) = (_BYTE)v521;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v365 + 2), (uint64_t)&v522);
          *((_BYTE *)v365 + 104) = 0;
          if (v529.__r_.__value_.__s.__data_[0])
          {
            *((_DWORD *)v365 + 27) = HIDWORD(v529.__r_.__value_.__r.__words[0]);
            *((_BYTE *)v365 + 104) = 1;
          }
          v365[14] = v529.__r_.__value_.__l.__size_;
          v366 = v365 + 15;
        }
        v495 = v366;
        if (v529.__r_.__value_.__s.__data_[0])
          v529.__r_.__value_.__s.__data_[0] = 0;
        if (v523 != (uint8_t *)v525[0])
          free(v523);
        v363 = (_QWORD *)*v363;
      }
      while (v363);
      v367 = v506;
      if (v506)
      {
        do
        {
          if (v367[112])
            v367[112] = 0;
          v383 = *(_BYTE **)v367;
          v384 = (void *)*((_QWORD *)v367 + 4);
          if (v384 != *((void **)v367 + 6))
            free(v384);
          operator delete(v367);
          v367 = v383;
        }
        while (v383);
      }
    }
    v368 = __p[0];
    __p[0] = 0;
    if (v368)
      operator delete(v368);
    v369 = (_BYTE *)*((_QWORD *)&v510 + 1);
    if (*((_QWORD *)&v510 + 1))
    {
      while (1)
      {
        v375 = *(_BYTE **)v369;
        v376 = (std::__shared_weak_count *)*((_QWORD *)v369 + 17);
        if (v376)
        {
          v377 = (unint64_t *)&v376->__shared_owners_;
          do
            v378 = __ldaxr(v377);
          while (__stlxr(v378 - 1, v377));
          if (!v378)
            break;
        }
        if (v369[112])
          goto LABEL_651;
LABEL_652:
        v379 = (void *)*((_QWORD *)v369 + 4);
        if (v379 != *((void **)v369 + 6))
          free(v379);
        operator delete(v369);
        v369 = v375;
        if (!v375)
          goto LABEL_641;
      }
      ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
      std::__shared_weak_count::__release_weak(v376);
      if (!v369[112])
        goto LABEL_652;
LABEL_651:
      v369[112] = 0;
      goto LABEL_652;
    }
LABEL_641:
    v370 = v509;
    v509 = 0;
    if (v370)
      operator delete(v370);
    gdc::LayerDataSource::processNewLayerData(long long,std::vector<gdc::LayerDataRequestKeyPair> &,std::vector<gdc::LayerDataRequestKeyPair> &)::$_0::operator()(v477, (uint64_t *)v497, v498, 0);
    gdc::LayerDataSource::processNewLayerData(long long,std::vector<gdc::LayerDataRequestKeyPair> &,std::vector<gdc::LayerDataRequestKeyPair> &)::$_0::operator()(v477, (uint64_t *)v494, v495, 1);
    v371 = *(_QWORD *)(v477 + 472);
    v493 = *(unsigned __int16 *)(v477 + 32);
    v372 = *(const gdc::LayerDataRequestKey **)(v477 + 16);
    v373 = (unsigned __int8 *)v497;
    v374 = v498;
    if (v497 != v498)
    {
      do
      {
        if (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(v371 + 24), v373 + 8))
        {
          gdc::LayerDataStore::get((gdc::LayerDataStore *)buf, v372, v373 + 8);
          gdc::LayerDataRequestTracker::_processKey((_QWORD *)v371, v373 + 8, (uint64_t *)buf, 0);
          v380 = (std::__shared_weak_count *)v521;
          if (v521)
          {
            v381 = (unint64_t *)(v521 + 8);
            do
              v382 = __ldaxr(v381);
            while (__stlxr(v382 - 1, v381));
            if (!v382)
            {
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
            }
          }
        }
        v373 += 120;
      }
      while (v373 != (unsigned __int8 *)v374);
    }
    memset(v500, 0, sizeof(v500));
    LODWORD(v501) = 1065353216;
    v385 = *(unsigned __int8 **)(v371 + 40);
    if (v385)
    {
      do
      {
        if (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(v477 + 80), v385 + 16))
        {
          std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v500, v385 + 16, (uint64_t)(v385 + 16));
        }
        v385 = *(unsigned __int8 **)v385;
      }
      while (v385);
      v386 = (unsigned __int8 *)v500[2];
      if (v500[2])
      {
        do
        {
          *(_QWORD *)buf = 0;
          v521 = 0;
          gdc::LayerDataRequestTracker::_processKey((_QWORD *)v371, v386 + 16, (uint64_t *)buf, 0);
          v386 = *(unsigned __int8 **)v386;
        }
        while (v386);
      }
    }
    v488 = (std::string *)v372;
    v387 = *(_QWORD *)(v371 + 64);
    v388 = *(_QWORD *)(v371 + 72);
    if (v388 != v387)
    {
      v389 = 0;
      while (1)
      {
        v390 = v387 + 112 * v389;
        if (*(unsigned __int16 *)(v390 + 8) == v493)
          break;
        ++v389;
LABEL_678:
        if (v389 >= 0x6DB6DB6DB6DB6DB7 * ((v388 - v387) >> 4))
          goto LABEL_753;
      }
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v509, (const gdc::LayerDataRequestKey *)v488, (unsigned __int8 *)(v387 + 112 * v389));
      if (v509)
        gdc::LayerDataRequestTracker::_processKey((_QWORD *)v371, (unsigned __int8 *)v390, (uint64_t *)&v509, 0);
      v392 = *(_QWORD *)(v371 + 64);
      v391 = *(_QWORD *)(v371 + 72);
      v393 = (uint8_t *)(v392 + 112 * v389);
      buf[0] = *v393;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v521, (uint64_t)(v393 + 8));
      LOBYTE(v528) = 0;
      if (v393[96])
      {
        HIDWORD(v528) = *(_DWORD *)(v392 + 112 * v389 + 100);
        LOBYTE(v528) = 1;
      }
      v394 = 0x6DB6DB6DB6DB6DB7 * ((v391 - v392) >> 4) - 1;
      v395 = v392 + 112 * v394;
      v529.__r_.__value_.__r.__words[0] = *(_QWORD *)(v392 + 112 * v389 + 104);
      gdc::LayerDataRequestKey::operator=(v392 + 112 * v389, v395);
      *(_BYTE *)v395 = buf[0];
      *(_WORD *)(v395 + 8) = (_WORD)v521;
      if (buf == (uint8_t *)v395)
      {
LABEL_728:
        v435 = v392 + 112 * v394;
        v438 = *(unsigned __int8 *)(v435 + 96);
        v436 = (_BYTE *)(v435 + 96);
        v437 = v438;
        *((_OWORD *)v436 - 1) = v527;
        if ((_BYTE)v528)
        {
          v439 = HIDWORD(v528);
          if (!v437)
            *v436 = 1;
          v440 = v392 + 112 * v394;
          *(_DWORD *)(v440 + 100) = v439;
          *(_QWORD *)(v440 + 104) = v529.__r_.__value_.__r.__words[0];
          LOBYTE(v528) = 0;
        }
        else
        {
          if (v437)
            *v436 = 0;
          *(_QWORD *)(v392 + 112 * v394 + 104) = v529.__r_.__value_.__r.__words[0];
        }
        if (v522 != (uint8_t *)v524)
          free(v522);
        v441 = *(_QWORD *)(v371 + 72);
        if (v441 == *(_QWORD *)(v371 + 64))
        {
          std::vector<gdc::LayerDataRequestKey>::__append((void **)(v371 + 64), 0xFFFFFFFFFFFFFFFFLL);
          v444 = (std::__shared_weak_count *)v510;
          if (!(_QWORD)v510)
          {
LABEL_752:
            v387 = *(_QWORD *)(v371 + 64);
            v388 = *(_QWORD *)(v371 + 72);
            goto LABEL_678;
          }
        }
        else
        {
          v442 = v441 - 112;
          while (v441 != v442)
          {
            if (*(_BYTE *)(v441 - 16))
              *(_BYTE *)(v441 - 16) = 0;
            v443 = *(void **)(v441 - 96);
            if (v443 != *(void **)(v441 - 80))
              free(v443);
            v441 -= 112;
          }
          *(_QWORD *)(v371 + 72) = v442;
          v444 = (std::__shared_weak_count *)v510;
          if (!(_QWORD)v510)
            goto LABEL_752;
        }
        v445 = (unint64_t *)&v444->__shared_owners_;
        do
          v446 = __ldaxr(v445);
        while (__stlxr(v446 - 1, v445));
        if (!v446)
        {
          ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
          std::__shared_weak_count::__release_weak(v444);
        }
        goto LABEL_752;
      }
      v396 = (char **)(v395 + 16);
      v397 = v392 + 112 * v394;
      v399 = *(_QWORD *)(v397 + 32);
      v398 = (_QWORD *)(v397 + 32);
      if (*(_QWORD *)(v395 + 16) != v399)
        free(*(void **)(v395 + 16));
      v400 = (char *)(v398 + 2);
      v401 = (char **)(v398 - 1);
      *v398 = v398 + 2;
      *v396 = (char *)(v398 + 2);
      *(v398 - 1) = v398 + 2;
      v402 = v392 + 112 * v394;
      *(_QWORD *)(v402 + 40) = 32;
      v403 = (size_t *)(v402 + 40);
      v405 = v522;
      v404 = v523;
      v406 = v523 - v522;
      if ((unint64_t)(v523 - v522) < 0x21)
      {
LABEL_708:
        if (v405 == v404)
          goto LABEL_727;
        if (v406 < 8)
        {
          v424 = v400;
          goto LABEL_725;
        }
        if ((unint64_t)(v400 - (char *)v405) < 0x20)
        {
          v424 = v400;
          goto LABEL_725;
        }
        if (v406 >= 0x20)
        {
          v423 = v406 & 0xFFFFFFFFFFFFFFE0;
          v425 = (__int128 *)(v405 + 16);
          v426 = v400 + 16;
          v427 = v406 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v428 = *v425;
            *(v426 - 1) = *(v425 - 1);
            *v426 = v428;
            v425 += 2;
            v426 += 2;
            v427 -= 32;
          }
          while (v427);
          if (v406 == v423)
            goto LABEL_726;
          if ((v406 & 0x18) == 0)
          {
            v405 += v423;
            v424 = &v400[v423];
            goto LABEL_725;
          }
        }
        else
        {
          v423 = 0;
        }
        v429 = v406 & 0xFFFFFFFFFFFFFFF8;
        v424 = &v400[v406 & 0xFFFFFFFFFFFFFFF8];
        v430 = v423 - (v406 & 0xFFFFFFFFFFFFFFF8);
        v431 = &v405[v423];
        v432 = &v400[v423];
        do
        {
          v433 = *(_QWORD *)v431;
          v431 += 8;
          *(_QWORD *)v432 = v433;
          v432 += 8;
          v430 += 8;
        }
        while (v430);
        if (v406 == v429)
          goto LABEL_726;
        v405 += v429;
        do
        {
LABEL_725:
          v434 = *v405++;
          *v424++ = v434;
        }
        while (v405 != v404);
LABEL_726:
        v400 = *v401;
LABEL_727:
        *v401 = &v400[v406];
        goto LABEL_728;
      }
      if (v406 <= 0x40)
        v407 = 64;
      else
        v407 = v523 - v522;
      v486 = v407;
      v400 = (char *)malloc_type_malloc(v407, 0x100004077774924uLL);
      v408 = *v396;
      v409 = *v401;
      if (*v396 == *v401)
      {
LABEL_707:
        *v396 = v400;
        *v401 = v400;
        *v403 = v486;
        goto LABEL_708;
      }
      v410 = v409 - v408;
      if ((unint64_t)(v409 - v408) < 8)
      {
        v411 = v400;
      }
      else
      {
        v411 = v400;
        if ((unint64_t)(v400 - v408) >= 0x20)
        {
          if (v410 < 0x20)
          {
            v412 = 0;
LABEL_701:
            v417 = v410 & 0xFFFFFFFFFFFFFFF8;
            v411 = &v400[v410 & 0xFFFFFFFFFFFFFFF8];
            v418 = v412 - (v410 & 0xFFFFFFFFFFFFFFF8);
            v419 = (uint64_t *)&v408[v412];
            v420 = &v400[v412];
            do
            {
              v421 = *v419++;
              *(_QWORD *)v420 = v421;
              v420 += 8;
              v418 += 8;
            }
            while (v418);
            if (v410 == v417)
              goto LABEL_707;
            v408 += v417;
            goto LABEL_706;
          }
          v412 = v410 & 0xFFFFFFFFFFFFFFE0;
          v413 = (__int128 *)(v408 + 16);
          v414 = v400 + 16;
          v415 = v410 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v416 = *v413;
            *(v414 - 1) = *(v413 - 1);
            *v414 = v416;
            v413 += 2;
            v414 += 2;
            v415 -= 32;
          }
          while (v415);
          if (v410 == v412)
            goto LABEL_707;
          if ((v410 & 0x18) != 0)
            goto LABEL_701;
          v408 += v412;
          v411 = &v400[v412];
        }
      }
      do
      {
LABEL_706:
        v422 = *v408++;
        *v411++ = v422;
      }
      while (v408 != v409);
      goto LABEL_707;
    }
LABEL_753:
    v447 = v500[2];
    if (v500[2])
    {
      do
      {
        if (v447[112])
          v447[112] = 0;
        v449 = *(_BYTE **)v447;
        v450 = (void *)*((_QWORD *)v447 + 4);
        if (v450 != *((void **)v447 + 6))
          free(v450);
        operator delete(v447);
        v447 = v449;
      }
      while (v449);
    }
    v448 = v500[0];
    v500[0] = 0;
    if (v448)
      operator delete(v448);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v477 + 32))(v477, &v497);
    v262 = v471 + 24;
  }
  while (v471 + 24 != v467);
  v451 = (uint64_t *)v494;
  if (v494)
  {
    for (k = v495; k != v451; k -= 15)
    {
      if (*((_BYTE *)k - 16))
        *((_BYTE *)k - 16) = 0;
      v453 = (void *)*(k - 12);
      if (v453 != (void *)*(k - 10))
        free(v453);
    }
    operator delete(v451);
  }
LABEL_770:
  v454 = (uint64_t *)v497;
  if (v497)
  {
    v455 = v498;
    v456 = v497;
    if (v498 != v497)
    {
      do
      {
        if (*((_BYTE *)v455 - 16))
          *((_BYTE *)v455 - 16) = 0;
        v457 = (void *)*(v455 - 12);
        if (v457 != (void *)*(v455 - 10))
          free(v457);
        v455 -= 15;
      }
      while (v455 != v454);
      v456 = v497;
    }
    v498 = v454;
    operator delete(v456);
  }
  v458 = *(uint8_t **)(*(_QWORD *)(a1 + 120) + 56);
  v459 = *((_QWORD *)v458 + 38);
  *(_QWORD *)buf = &off_1E42D5920;
  v521 = v458;
  v460 = buf;
  v522 = v489;
  v523 = buf;
  v461 = *(uint64_t **)(v459 + 24);
  if (v461)
  {
    do
    {
      if (*((_DWORD *)v461 + 28) == 2)
      {
        if (!v523)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
LABEL_800:
          std::__throw_bad_function_call[abi:nn180100]();
        }
        (*(void (**)(uint8_t *, uint64_t *))(*(_QWORD *)v523 + 48))(v523, v461 + 2);
      }
      v461 = (uint64_t *)*v461;
    }
    while (v461);
    v460 = v523;
    if (v523 == buf)
    {
      v462 = 4;
      v460 = buf;
    }
    else
    {
      if (!v523)
        goto LABEL_791;
      v462 = 5;
    }
  }
  else
  {
    v462 = 4;
  }
  (*(void (**)(void))(*(_QWORD *)v460 + 8 * v462))();
LABEL_791:
  if (!v519)
    goto LABEL_800;
  (*(void (**)(_QWORD *))(*v519 + 48))(v519);
  result = v519;
  if (v519 == v518)
  {
    v464 = 4;
    result = v518;
  }
  else
  {
    if (!v519)
      return result;
    v464 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v464))();
}

void sub_19F1A0C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 232);
  if (v3 == (_QWORD *)(v1 - 256))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 256);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *md::LayerDataLogic::runAfterLayoutAtVariableRate(uint64_t a1, md::LayoutContext *this, uint64_t a3, _QWORD *a4)
{
  os_signpost_id_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t **v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t **v34;
  uint64_t **v35;
  unsigned int v36;
  os_signpost_id_t v37;
  NSObject *v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  const char *v45;
  BOOL v46;
  const char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned __int16 ***v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  _QWORD *v64;
  uint64_t **v65;
  uint64_t **v66;
  unsigned int v67;
  unsigned __int8 *v68;
  uint64_t **v69;
  uint64_t **v70;
  unsigned int v71;
  char *v72;
  char v73;
  unsigned __int16 **v74;
  unsigned __int16 **v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  int v78;
  unsigned __int8 *v79;
  _QWORD *v80;
  uint64_t **v81;
  uint64_t **v82;
  unsigned int v83;
  unsigned __int8 *v84;
  uint64_t **v85;
  uint64_t **v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  NSObject *v96;
  _BYTE *v97;
  os_signpost_id_t v98;
  NSObject *v99;
  uint64_t *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  NSObject *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  std::string::size_type v110;
  unsigned __int16 *v111;
  unint64_t v112;
  NSObject *v113;
  const char *v114;
  unsigned __int16 *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  NSObject *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int64_t v123;
  unint64_t v124;
  _WORD *v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  int64_t v132;
  unint64_t v133;
  _WORD *v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  NSObject *v141;
  uint64_t v142;
  char v143;
  unint64_t v144;
  int v145;
  NSObject *v146;
  _BYTE *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  void *v157;
  _QWORD *v158;
  void *v159;
  _QWORD *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  NSObject *v165;
  NSObject *v166;
  uint64_t v167;
  _QWORD *v168;
  unsigned __int8 *v169;
  NSObject *v170;
  std::string *p_buf;
  const char *v172;
  uint64_t v173;
  os_signpost_id_t v174;
  NSObject *v175;
  _QWORD *v176;
  unsigned __int8 *v177;
  std::string::size_type v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  _QWORD *result;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int16 **v190;
  int v191;
  uint64_t v192;
  gdc::ResourceManager *v193;
  unsigned __int16 *v194;
  _QWORD *v195;
  uint64_t v196;
  std::string buf;
  uint64_t v198;
  void *v199;
  void *v200;
  char v201;
  int v202;
  uint64_t v203;
  void *v204;
  char *v205;
  _WORD *v206;
  __int128 v207;
  char v208;
  _QWORD v209[3];
  _QWORD *v210;
  uint64_t (**v211)();
  md::LayoutContext *v212;
  uint64_t (***v213)();
  _QWORD v214[3];
  _QWORD *v215;
  _BYTE v216[24];
  char *v217;
  _BYTE __p[40];
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  NSObject *v221;
  char v222;
  char v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  _BYTE block[24];
  void *v229;
  _BYTE *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;

  v233 = *MEMORY[0x1E0C80C00];
  v211 = &off_1E42CBD98;
  v212 = this;
  v213 = &v211;
  v214[0] = &off_1E42CBDE0;
  v209[0] = &off_1E42CBDE0;
  v209[1] = this;
  v210 = v209;
  v215 = v214;
  v214[1] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v7 = *((_QWORD *)v212 + 10);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v7, "LayerDataLogicAfterVariableRate", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
    }
  }
  v9 = v210;
  if (v210 == v209)
  {
    v10 = 4;
    v9 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = v213;
  if (v213 == &v211)
  {
    v12 = 4;
    v11 = &v211;
  }
  else
  {
    if (!v213)
      goto LABEL_16;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_16:
  md::LayoutContext::frameState(this);
  v14 = *(_QWORD **)(a1 + 120);
  v15 = v14[1];
  v188 = v14[2];
  if (v15 == v188)
    goto LABEL_342;
  v185 = a4;
  v186 = a1;
  v16 = (uint64_t)(*(double *)(v13 + 88) * 1000.0);
  v187 = *(_QWORD **)(a1 + 120);
  while (2)
  {
    v17 = *(_QWORD **)(v15 + 8);
    v192 = v15;
    v193 = (gdc::ResourceManager *)v14[7];
    v195 = v17 + 10;
    v18 = (uint64_t *)v17[12];
    if (!v18)
      goto LABEL_91;
    do
    {
      while (1)
      {
        v19 = (_QWORD *)v18[16];
        if (v19[25] >= v16)
          break;
        v20 = (uint64_t *)*v18;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v195, v18);
        v21 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        if (!v21)
          goto LABEL_22;
        if (__p[16])
        {
          v22 = *(std::__shared_weak_count **)(v21 + 136);
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            goto LABEL_82;
          }
          goto LABEL_83;
        }
LABEL_21:
        operator delete((void *)v21);
LABEL_22:
        v18 = v20;
        if (!v20)
          goto LABEL_91;
      }
      v25 = v19[15];
      v26 = v19[16];
      if (v25 == v26)
      {
LABEL_55:
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        v37 = *(_QWORD *)(v18[16] + 112);
        if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v38 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
          {
            v39 = (int *)v18[4];
            v40 = *v39;
            v41 = v39[1];
            v42 = v39[2];
            v43 = *((unsigned __int16 *)v18 + 12);
            v44 = *((unsigned __int8 *)v18 + 16);
            v45 = "<Invalid>";
            if (v44 == 1)
              v45 = "Preliminary";
            v46 = v44 == 0;
            v47 = "Standard";
            if (!v46)
              v47 = v45;
            *(_DWORD *)__p = 67110146;
            *(_DWORD *)&__p[4] = v40;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = v41;
            *(_WORD *)&__p[14] = 1024;
            *(_DWORD *)&__p[16] = v42;
            *(_WORD *)&__p[20] = 1024;
            *(_DWORD *)&__p[22] = v43;
            *(_WORD *)&__p[26] = 2080;
            *(_QWORD *)&__p[28] = v47;
            _os_signpost_emit_with_name_impl(&dword_19F029000, v38, OS_SIGNPOST_INTERVAL_BEGIN, v37, "LayerDataRequest", "tileKey=%d.%d.%d tileType=%d requestType=%s retry=true", __p, 0x24u);
          }
        }
        __p[0] = *((_BYTE *)v18 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&__p[8], (uint64_t)(v18 + 3));
        v223 = 0;
        if (*((_BYTE *)v18 + 112))
        {
          v224 = *((_DWORD *)v18 + 29);
          v223 = 1;
        }
        v48 = v18[16];
        v225 = v18[15];
        v226 = v48;
        v49 = (std::__shared_weak_count *)v18[17];
        v227 = v49;
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>((uint64_t)(v17 + 5), __p, (uint64_t)__p);
        v52 = v227;
        if (!v227)
          goto LABEL_73;
        v53 = (unint64_t *)&v227->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
          if (!v223)
            goto LABEL_75;
        }
        else
        {
LABEL_73:
          if (!v223)
          {
LABEL_75:
            if (*(_QWORD *)&__p[16] != *(_QWORD *)&__p[32])
              free(*(void **)&__p[16]);
            v20 = (uint64_t *)*v18;
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v195, v18);
            v21 = *(_QWORD *)__p;
            *(_QWORD *)__p = 0;
            if (!v21)
              goto LABEL_22;
            if (!__p[16])
              goto LABEL_21;
            v22 = *(std::__shared_weak_count **)(v21 + 136);
            if (!v22)
              goto LABEL_83;
            v55 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v55);
            while (__stlxr(v24 - 1, v55));
LABEL_82:
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
              if (!*(_BYTE *)(v21 + 112))
              {
LABEL_85:
                v56 = *(void **)(v21 + 32);
                if (v56 != *(void **)(v21 + 48))
                  free(v56);
                goto LABEL_21;
              }
            }
            else
            {
LABEL_83:
              if (!*(_BYTE *)(v21 + 112))
                goto LABEL_85;
            }
            *(_BYTE *)(v21 + 112) = 0;
            goto LABEL_85;
          }
        }
        v223 = 0;
        goto LABEL_75;
      }
      v27 = 2;
      do
      {
        while (1)
        {
          v28 = *(unsigned __int8 **)(v25 + 24);
          if (!v28)
            goto LABEL_33;
          v29 = (_QWORD *)(v17[34] + 8);
          v30 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v29, v28 + 16);
          if (v30)
          {
            if (*((_DWORD *)v30 + 29) == 2)
              break;
          }
          v31 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v29, v28 + 16);
          if (v31)
          {
            v32 = *((_DWORD *)v31 + 28);
            if (v32 < 2)
            {
LABEL_32:
              v27 = 0;
              goto LABEL_33;
            }
            if (v32 - 3 < 2)
              goto LABEL_40;
            break;
          }
LABEL_40:
          v25 += 48;
          v27 = 1;
          if (v25 == v26)
            goto LABEL_53;
        }
        if (v27 == 2)
        {
          v33 = *(unsigned __int8 **)v28;
          if (v33)
          {
            while (1)
            {
              v34 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v29, v33 + 16);
              if (!v34 || *((_DWORD *)v34 + 29) != 2)
              {
                v35 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v29, v33 + 16);
                if (!v35)
                  goto LABEL_40;
                v36 = *((_DWORD *)v35 + 28);
                if (v36 < 2)
                  goto LABEL_32;
                if (v36 - 3 < 2)
                  goto LABEL_40;
              }
              v33 = *(unsigned __int8 **)v33;
              v27 = 2;
              if (!v33)
                goto LABEL_33;
            }
          }
          v27 = 2;
        }
LABEL_33:
        v25 += 48;
      }
      while (v25 != v26);
      if (v27 != 1)
        goto LABEL_55;
LABEL_53:
      v18 = (uint64_t *)*v18;
    }
    while (v18);
LABEL_91:
    v57 = (uint64_t *)v17[7];
    while (v57)
    {
      v59 = (unsigned __int16 ***)(v57 + 16);
      v58 = v57[16];
      if (*(_QWORD *)(v58 + 200) >= v16 && !*(_BYTE *)(v58 + 209))
      {
        v194 = (unsigned __int16 *)(v57 + 2);
        v60 = *(_QWORD *)(v58 + 120);
        v61 = *(_QWORD *)(v58 + 128);
        if (v60 == v61)
          goto LABEL_353;
        v62 = 2;
        do
        {
          v63 = *(unsigned __int8 **)(v60 + 24);
          if (!v63)
            goto LABEL_100;
          v64 = (_QWORD *)(v17[34] + 8);
          v65 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v64, v63 + 16);
          if (v65 && *((_DWORD *)v65 + 29) == 2)
            goto LABEL_109;
          v66 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v64, v63 + 16);
          if (v66)
          {
            v67 = *((_DWORD *)v66 + 28);
            if (v67 >= 5)
              goto LABEL_109;
          }
          else
          {
            v67 = 3;
          }
          if (((0x1Bu >> v67) & 1) == 0)
          {
LABEL_109:
            if (v62 != 2)
              goto LABEL_100;
            v68 = *(unsigned __int8 **)v63;
            if (!*(_QWORD *)v63)
            {
LABEL_99:
              v62 = 2;
              goto LABEL_100;
            }
            while (1)
            {
              v69 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v64, v68 + 16);
              if (!v69 || *((_DWORD *)v69 + 29) != 2)
              {
                v70 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v64, v68 + 16);
                if (!v70)
                {
                  v62 = 1;
                  goto LABEL_100;
                }
                v71 = *((_DWORD *)v70 + 28);
                if (v71 < 5 && ((0x1Bu >> v71) & 1) != 0)
                {
                  v72 = (char *)&unk_1A00858F0 + 4 * (int)v71;
                  goto LABEL_120;
                }
              }
              v68 = *(unsigned __int8 **)v68;
              if (!v68)
                goto LABEL_99;
            }
          }
          v72 = (char *)&unk_1A00838D0 + 4 * v67;
LABEL_120:
          v62 = *(_DWORD *)v72;
LABEL_100:
          v60 += 48;
        }
        while (v60 != v61);
        if (v62 == 2)
        {
LABEL_353:
          if ((*(unsigned int (**)(_QWORD *))(*v17 + 56))(v17))
          {
            v73 = gdc::LayerDataRequest::collectResources(*v59, v193);
            v74 = *v59;
            if ((v73 & 1) != 0 || *((_BYTE *)v74 + 208) || *((_BYTE *)v17 + 296) && !*((_BYTE *)v74 + 209))
            {
              if ((*(unsigned int (**)(_QWORD *, uint64_t *, gdc::ResourceManager *, unsigned __int16 **))(*v17 + 120))(v17, v57 + 16, v193, v74 + 21))
              {
                v75 = *v59;
                v76 = (*v59)[15];
                v77 = (*v59)[16];
                if (v76 != v77)
                {
                  v190 = *v59;
                  v78 = 2;
                  do
                  {
                    v79 = (unsigned __int8 *)*((_QWORD *)v76 + 3);
                    if (!v79)
                      goto LABEL_133;
                    v80 = (_QWORD *)(v17[34] + 8);
                    v81 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v80, v79 + 16);
                    if (v81 && *((_DWORD *)v81 + 29) == 2)
                      goto LABEL_142;
                    v82 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v80, v79 + 16);
                    if (v82)
                    {
                      v83 = *((_DWORD *)v82 + 28);
                      if (v83 >= 5)
                        goto LABEL_142;
                    }
                    else
                    {
                      v83 = 3;
                    }
                    if (((0x1Bu >> v83) & 1) == 0)
                    {
LABEL_142:
                      if (v78 != 2)
                        goto LABEL_133;
                      v84 = *(unsigned __int8 **)v79;
                      if (!*(_QWORD *)v79)
                      {
LABEL_132:
                        v78 = 2;
                        goto LABEL_133;
                      }
                      while (1)
                      {
                        v85 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v80, v84 + 16);
                        if (!v85 || *((_DWORD *)v85 + 29) != 2)
                        {
                          v86 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v80, v84 + 16);
                          if (!v86)
                          {
                            v78 = 1;
                            goto LABEL_133;
                          }
                          v87 = *((_DWORD *)v86 + 28);
                          if (v87 < 5 && ((0x1Bu >> v87) & 1) != 0)
                          {
                            v88 = (char *)&unk_1A0085904 + 4 * (int)v87;
                            goto LABEL_153;
                          }
                        }
                        v84 = *(unsigned __int8 **)v84;
                        if (!v84)
                          goto LABEL_132;
                      }
                    }
                    v88 = (char *)&unk_1A00838D0 + 4 * v83;
LABEL_153:
                    v78 = *(_DWORD *)v88;
LABEL_133:
                    v76 += 24;
                  }
                  while (v76 != v77);
                  v75 = v190;
                  if (v78 != 2)
                    goto LABEL_94;
                }
                gdc::LayerDataRequest::collectResources(v75, v193);
              }
              if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
              v106 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
              {
                gdc::LayerDataRequestKey::keysInt32Str((std::string *)__p, (unsigned __int16 *)*v59);
                v107 = __p;
                if (__p[23] < 0)
                  v107 = *(_BYTE **)__p;
                *(_DWORD *)block = 136315394;
                *(_QWORD *)&block[4] = v107;
                *(_WORD *)&block[12] = 2048;
                *(_QWORD *)&block[14] = v16;
                _os_log_impl(&dword_19F029000, v106, OS_LOG_TYPE_DEBUG, "Queuing creation of: %s timestamp: %lld", block, 0x16u);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              *((_BYTE *)*v59 + 209) = 1;
              v108 = v17[1];
              v109 = (*(uint64_t (**)(_QWORD *))(*v17 + 64))(v17);
              if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
              v110 = os_signpost_id_generate((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log);
              v111 = (*v59)[14];
              v191 = *((unsigned __int8 *)*v59 + 208);
              if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
              v112 = v110 - 1;
              v189 = v109;
              if (v110 - 1 > 0xFFFFFFFFFFFFFFFDLL)
              {
                if (v108)
                  goto LABEL_217;
                v116 = (uint64_t)v111;
                v117 = (uint64_t)(v57 + 2);
                v118 = v191;
              }
              else
              {
                v113 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
                if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
                {
                  v114 = "yes";
                  if (!*((_BYTE *)*v59 + 208))
                    v114 = "no";
                  v115 = (*v59)[14];
                  *(_DWORD *)__p = 134218498;
                  *(_QWORD *)&__p[4] = v111;
                  *(_WORD *)&__p[12] = 2080;
                  *(_QWORD *)&__p[14] = v114;
                  *(_WORD *)&__p[22] = 2048;
                  *(_QWORD *)&__p[24] = v115;
                  _os_signpost_emit_with_name_impl(&dword_19F029000, v113, OS_SIGNPOST_INTERVAL_BEGIN, v110, "LayerDataDecode", "requestId=%zu hasAllResources=%s parent_signpost=%zu", __p, 0x20u);
                }
                if (v108)
                {
LABEL_217:
                  v120 = v57[16];
                  buf.__r_.__value_.__r.__words[0] = v110;
                  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
                  buf.__r_.__value_.__s.__data_[16] = *((_BYTE *)v57 + 16);
                  gdc::LayerDataKey::LayerDataKey((uint64_t)&v198, (uint64_t)(v57 + 3));
                  v201 = 0;
                  if (*((_BYTE *)v57 + 112))
                  {
                    v202 = *((_DWORD *)v57 + 29);
                    v201 = 1;
                  }
                  v203 = v57[15];
                  v205 = 0;
                  v206 = 0;
                  v204 = 0;
                  v121 = *(char **)(v120 + 168);
                  v122 = *(char **)(v120 + 176);
                  v123 = v122 - v121;
                  if (v122 != v121)
                  {
                    v124 = 0xAAAAAAAAAAAAAAABLL * (v123 >> 4);
                    if (v124 > 0x555555555555555)
                      goto LABEL_349;
                    v125 = operator new(v123);
                    v204 = v125;
                    v205 = (char *)v125;
                    v206 = &v125[24 * v124];
                    do
                    {
                      v126 = (uint64_t)(v121 + 8);
                      v127 = *(_WORD *)v121;
                      v121 += 48;
                      v128 = (uint64_t)(v125 + 4);
                      *v125 = v127;
                      v125 += 24;
                      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v128, v126);
                    }
                    while (v121 != v122);
                    v205 = (char *)v125;
                  }
                  *(_QWORD *)&v207 = v16;
                  *((_QWORD *)&v207 + 1) = v111;
                  v208 = v191;
                  v217 = 0;
                  v129 = (char *)operator new(0xB8uLL);
                  *(_QWORD *)v129 = &off_1E42D5800;
                  *(_OWORD *)(v129 + 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                  v129[24] = buf.__r_.__value_.__s.__data_[16];
                  gdc::LayerDataKey::LayerDataKey((uint64_t)(v129 + 32), (uint64_t)&v198);
                  v129[120] = 0;
                  if (v201)
                  {
                    *((_DWORD *)v129 + 31) = v202;
                    v129[120] = 1;
                  }
                  v130 = (char *)v204;
                  *((_QWORD *)v129 + 16) = v203;
                  *((_QWORD *)v129 + 17) = 0;
                  *((_QWORD *)v129 + 18) = 0;
                  *((_QWORD *)v129 + 19) = 0;
                  v131 = v205;
                  v132 = v205 - v130;
                  if (v205 != v130)
                  {
                    v133 = 0xAAAAAAAAAAAAAAABLL * (v132 >> 4);
                    if (v133 > 0x555555555555555)
LABEL_349:
                      abort();
                    v134 = operator new(v132);
                    *((_QWORD *)v129 + 17) = v134;
                    *((_QWORD *)v129 + 18) = v134;
                    *((_QWORD *)v129 + 19) = &v134[24 * v133];
                    do
                    {
                      v135 = (uint64_t)(v130 + 8);
                      v136 = *(_WORD *)v130;
                      v130 += 48;
                      v137 = (uint64_t)(v134 + 4);
                      *v134 = v136;
                      v134 += 24;
                      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v137, v135);
                    }
                    while (v130 != v131);
                    *((_QWORD *)v129 + 18) = v134;
                  }
                  *((_OWORD *)v129 + 10) = v207;
                  v129[176] = v208;
                  v217 = v129;
                  v138 = (std::__shared_weak_count *)operator new(0x40uLL);
                  v138->__shared_owners_ = 0;
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  v138->__shared_weak_owners_ = 0;
                  v138->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE308;
                  v138[2].__vftable = (std::__shared_weak_count_vtbl *)(*(uint64_t (**)(char *))(*(_QWORD *)v129 + 16))(v129);
                  LOWORD(v138[2].__shared_owners_) = 0;
                  do
                    v140 = __ldxr(v139);
                  while (__stxr(v140 + 1, v139));
                  if (v189)
                  {
                    v141 = *(NSObject **)(v189 + 8);
                    if (*(_BYTE *)(v108 + 58))
                      goto LABEL_235;
LABEL_240:
                    v142 = 0;
                  }
                  else
                  {
                    v141 = 0;
                    if (!*(_BYTE *)(v108 + 58))
                      goto LABEL_240;
LABEL_235:
                    v142 = *(_QWORD *)(v108 + 72);
                  }
                  v143 = *(_BYTE *)(v108 + 56);
                  *(_QWORD *)__p = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&__p[8] = 1174405120;
                  *(_QWORD *)&__p[16] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke;
                  *(_QWORD *)&__p[24] = &__block_descriptor_tmp_41631;
                  v222 = v143;
                  *(_QWORD *)&__p[32] = v142;
                  v219 = v138 + 1;
                  v220 = v138;
                  do
                    v144 = __ldxr(v139);
                  while (__stxr(v144 + 1, v139));
                  v145 = *(unsigned __int8 *)(v108 + 56);
                  v221 = v141;
                  if (v145)
                  {
                    *(_QWORD *)block = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&block[8] = 0x40000000;
                    *(_QWORD *)&block[16] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke_23;
                    v229 = &unk_1E42FB098;
                    v231 = v108;
                    v232 = v142;
                    v230 = __p;
                    if (v141)
                      dispatch_group_enter(v141);
                    v146 = *(NSObject **)(v108 + 40);
                    v147 = block;
LABEL_247:
                    dispatch_async(v146, v147);
                    v148 = v220;
                    if (!v220)
                      goto LABEL_255;
LABEL_251:
                    v149 = (unint64_t *)&v148->__shared_owners_;
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                    goto LABEL_255;
                  }
                  if (!v141)
                  {
                    v147 = __p;
                    v146 = *(NSObject **)(v108 + 16);
                    goto LABEL_247;
                  }
                  dispatch_group_async(v141, *(dispatch_queue_t *)(v108 + 16), __p);
                  v148 = v220;
                  if (v220)
                    goto LABEL_251;
                  do
LABEL_255:
                    v151 = __ldaxr(v139);
                  while (__stlxr(v151 - 1, v139));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                  do
                    v152 = __ldaxr(v139);
                  while (__stlxr(v152 - 1, v139));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                  v153 = v217;
                  if (v217 == v216)
                  {
                    v153 = v216;
                    v154 = 4;
LABEL_265:
                    (*(void (**)(void))(*(_QWORD *)v153 + 8 * v154))();
                  }
                  else if (v217)
                  {
                    v154 = 5;
                    goto LABEL_265;
                  }
                  v155 = (char *)v204;
                  if (v204)
                  {
                    v156 = v205;
                    v157 = v204;
                    if (v205 != v204)
                    {
                      do
                      {
                        v158 = (_QWORD *)*((_QWORD *)v156 - 3);
                        if (v158)
                        {
                          do
                          {
                            v160 = (_QWORD *)*v158;
                            v161 = (std::__shared_weak_count *)v158[15];
                            if (v161)
                            {
                              v162 = (unint64_t *)&v161->__shared_owners_;
                              do
                                v163 = __ldaxr(v162);
                              while (__stlxr(v163 - 1, v162));
                              if (!v163)
                              {
                                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                                std::__shared_weak_count::__release_weak(v161);
                              }
                            }
                            v164 = (void *)v158[3];
                            if (v164 != (void *)v158[5])
                              free(v164);
                            operator delete(v158);
                            v158 = v160;
                          }
                          while (v160);
                        }
                        v159 = (void *)*((_QWORD *)v156 - 5);
                        *((_QWORD *)v156 - 5) = 0;
                        if (v159)
                          operator delete(v159);
                        v156 -= 48;
                      }
                      while (v156 != v155);
                      v157 = v204;
                    }
                    v205 = v155;
                    operator delete(v157);
                  }
                  if (v201)
                    v201 = 0;
                  if (v199 != v200)
                    free(v199);
                  goto LABEL_94;
                }
                v116 = (uint64_t)v111;
                if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
                v117 = (uint64_t)(v57 + 2);
                v118 = v191;
                v119 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
                if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
                {
                  *(_WORD *)__p = 0;
                  _os_signpost_emit_with_name_impl(&dword_19F029000, v119, OS_SIGNPOST_INTERVAL_BEGIN, v110, "LayerDataDecodeDispatched", (const char *)&unk_1A0189141, __p, 2u);
                }
              }
              gdc::LayerDataSource::updateLayerData((uint64_t)v17, v116, v117, (uint64_t *)*v59 + 21, v16, v118 != 0);
              if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken == -1)
              {
                if (v112 <= 0xFFFFFFFFFFFFFFFDLL)
                  goto LABEL_292;
              }
              else
              {
                dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
                if (v112 <= 0xFFFFFFFFFFFFFFFDLL)
                {
LABEL_292:
                  v165 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
                  if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
                  {
                    *(_WORD *)__p = 0;
                    _os_signpost_emit_with_name_impl(&dword_19F029000, v165, OS_SIGNPOST_INTERVAL_END, v110, "LayerDataDecodeDispatched", (const char *)&unk_1A0189141, __p, 2u);
                    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
                  }
                  v166 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
                  if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
                  {
                    *(_WORD *)__p = 0;
                    _os_signpost_emit_with_name_impl(&dword_19F029000, v166, OS_SIGNPOST_INTERVAL_END, v110, "LayerDataDecode", (const char *)&unk_1A0189141, __p, 2u);
                  }
                }
              }
            }
          }
        }
        else
        {
          if (v62 == 1)
          {
            __p[0] = *((_BYTE *)v57 + 16);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&__p[8], (uint64_t)(v57 + 3));
            v223 = 0;
            if (*((_BYTE *)v57 + 112))
            {
              v224 = *((_DWORD *)v57 + 29);
              v223 = 1;
            }
            v89 = v57[16];
            v225 = v57[15];
            v226 = v89;
            v90 = (std::__shared_weak_count *)v57[17];
            v227 = v90;
            if (v90)
            {
              v91 = (unint64_t *)&v90->__shared_owners_;
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>((uint64_t)v195, __p, (uint64_t)__p);
            v93 = v227;
            if (!v227)
              goto LABEL_164;
            v94 = (unint64_t *)&v227->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
              if (v223)
LABEL_165:
                v223 = 0;
            }
            else
            {
LABEL_164:
              if (v223)
                goto LABEL_165;
            }
            if (*(_QWORD *)&__p[16] != *(_QWORD *)&__p[32])
              free(*(void **)&__p[16]);
            if (*(_BYTE *)v194 == 1)
            {
LABEL_176:
              if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
            }
            else
            {
              if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
                dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
              v96 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
              {
                gdc::LayerDataRequestKey::keysInt32Str((std::string *)__p, v194);
                v97 = __p;
                if (__p[23] < 0)
                  v97 = *(_BYTE **)__p;
                *(_DWORD *)block = 136315138;
                *(_QWORD *)&block[4] = v97;
                _os_log_impl(&dword_19F029000, v96, OS_LOG_TYPE_DEBUG, "Failed layer data request: %s", block, 0xCu);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                goto LABEL_176;
              }
            }
            v98 = (os_signpost_id_t)(*v59)[14];
            if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v99 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
              if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
              {
                *(_WORD *)__p = 0;
                _os_signpost_emit_with_name_impl(&dword_19F029000, v99, OS_SIGNPOST_INTERVAL_END, v98, "LayerDataRequest", "status=failed", __p, 2u);
              }
            }
            v100 = (uint64_t *)*v57;
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v17 + 5, v57);
            v101 = *(_QWORD *)__p;
            *(_QWORD *)__p = 0;
            if (v101)
            {
              if (__p[16])
              {
                v102 = *(std::__shared_weak_count **)(v101 + 136);
                if (!v102)
                  goto LABEL_354;
                v103 = (unint64_t *)&v102->__shared_owners_;
                do
                  v104 = __ldaxr(v103);
                while (__stlxr(v104 - 1, v103));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                  if (*(_BYTE *)(v101 + 112))
LABEL_188:
                    *(_BYTE *)(v101 + 112) = 0;
                }
                else
                {
LABEL_354:
                  if (*(_BYTE *)(v101 + 112))
                    goto LABEL_188;
                }
                v105 = *(void **)(v101 + 32);
                if (v105 != *(void **)(v101 + 48))
                  free(v105);
              }
              operator delete((void *)v101);
            }
            v57 = v100;
            continue;
          }
          if (v62)
            continue;
        }
      }
LABEL_94:
      v57 = (uint64_t *)*v57;
    }
    v15 = v192 + 24;
    v14 = v187;
    if (v192 + 24 != v188)
      continue;
    break;
  }
  v14 = *(_QWORD **)(v186 + 120);
  v167 = v14[1];
  v196 = v14[2];
  if (v167 != v196)
  {
    while (2)
    {
      v168 = *(_QWORD **)(v167 + 8);
      v169 = (unsigned __int8 *)v168[7];
      if (v169)
      {
        while (2)
        {
          while (*(_QWORD *)(*((_QWORD *)v169 + 16) + 200) >= v16)
          {
            v169 = *(unsigned __int8 **)v169;
            if (!v169)
              goto LABEL_304;
          }
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v170 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
          {
            gdc::LayerDataRequestKey::keysInt32Str(&buf, *((unsigned __int16 **)v169 + 16));
            p_buf = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            v172 = "y";
            if (!*(_BYTE *)(*((_QWORD *)v169 + 16) + 209))
              v172 = "n";
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = p_buf;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)&__p[14] = v172;
            _os_log_impl(&dword_19F029000, v170, OS_LOG_TYPE_DEBUG, "Auto cancelling layer data request: %s, pendingCreation: %s", __p, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
              dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          }
          v173 = *((_QWORD *)v169 + 16);
          v174 = *(_QWORD *)(v173 + 112);
          if (v174 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v175 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_signpost_emit_with_name_impl(&dword_19F029000, v175, OS_SIGNPOST_INTERVAL_END, v174, "LayerDataRequest", "status=cancelled", (uint8_t *)&buf, 2u);
              v173 = *((_QWORD *)v169 + 16);
            }
          }
          if (*(_BYTE *)(v173 + 209))
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)(v168 + 20), *(_QWORD *)(v173 + 112), *(_QWORD *)(v173 + 112));
          v176 = (_QWORD *)v168[59];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
          gdc::LayerDataRequestTracker::_processKey(v176, v169 + 16, (uint64_t *)&buf, 1);
          v177 = *(unsigned __int8 **)v169;
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&buf, v168 + 5, v169);
          v178 = buf.__r_.__value_.__r.__words[0];
          buf.__r_.__value_.__r.__words[0] = 0;
          if (!v178)
            goto LABEL_336;
          if (buf.__r_.__value_.__s.__data_[16])
          {
            v179 = *(std::__shared_weak_count **)(v178 + 136);
            if (!v179)
              goto LABEL_355;
            v180 = (unint64_t *)&v179->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
              if (*(_BYTE *)(v178 + 112))
LABEL_332:
                *(_BYTE *)(v178 + 112) = 0;
            }
            else
            {
LABEL_355:
              if (*(_BYTE *)(v178 + 112))
                goto LABEL_332;
            }
            v182 = *(void **)(v178 + 32);
            if (v182 != *(void **)(v178 + 48))
              free(v182);
          }
          operator delete((void *)v178);
LABEL_336:
          v169 = v177;
          if (!v177)
            break;
          continue;
        }
      }
LABEL_304:
      v168[35] = v16;
      v167 += 24;
      if (v167 != v196)
        continue;
      break;
    }
    v14 = *(_QWORD **)(v186 + 120);
  }
  a4 = v185;
LABEL_342:
  *a4 = v14;
  if (!v215)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(_QWORD *))(*v215 + 48))(v215);
  result = v215;
  if (v215 == v214)
  {
    v184 = 4;
    result = v214;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v184))();
  }
  else if (v215)
  {
    v184 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v184))();
  }
  return result;
}

void md::ElevationLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  long double v32;
  double v33;
  long double v34;
  double v35;
  long double v36;
  double v37;
  long double v38;
  long double v39;
  long double v40;
  long double v41;
  double v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  float v58;
  BOOL v59;
  float v60;
  float v61;
  int v62;
  _BOOL4 v64;
  int v65;
  void *v66;
  float v67;
  char v68;
  void *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  double v77;
  uint64_t v78;
  double v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  double v92;
  double v93;
  uint64_t v94;
  void *v95;
  int v96;
  double *v97;
  double *v98;
  double v99;
  double *v100;
  double v101;
  char v102;
  char v103;
  double v104;
  __double2 v105;
  double v106;
  double v107;
  __double2 v108;
  double v109;
  double *v110;
  double *v111;
  double v112;
  double *v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  double v117;
  void *v118;
  int v119;
  double v120;
  double v121;
  __double2 v122;
  double v123;
  double v124;
  __double2 v125;
  double v126;
  double v127;
  double v128;
  void *v129;
  void *v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  long double v155;
  long double v156;
  long double v157;
  double v158;
  double v159;
  __double2 v160;
  long double v161;
  double v162;
  double v163;
  __double2 v164;
  long double v165;
  long double v166;
  double v167;
  __double2 v168;
  long double v169;
  long double v170;
  double v171;
  double v172;
  __double2 v173;
  long double v174;
  long double v175;
  long double v176;
  long double v177;
  double v178;
  double v179;
  long double v180;
  __double2 v181;
  long double v182;
  uint64_t v183;
  double v184;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  double v194;
  long double v195;
  long double v196;
  float64x2_t v197;
  float64x2_t v198;
  double v199;
  double v200;
  double v201;
  double v202;
  float v203;
  double v204;
  char v205;
  double v206;
  double v207;
  double v208;
  __double2 v209;
  double v210;
  double v211;
  double v212;
  double v213;
  __double2 v214;
  double v215;
  double v216;
  double v217;
  double v218;
  int v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  BOOL v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  uint64_t v235;
  int v236;
  long double v237;
  long double v238;
  float64x2_t v239;
  float64x2_t v240;
  double v241;
  double v242;
  double v243;
  double v244;
  float v245;
  double v246;
  char v247;
  double v248;
  uint64_t v249;
  double v250;
  uint64_t v251;
  int v252;
  long double v253;
  long double v254;
  float64x2_t v255;
  float64x2_t v256;
  double v257;
  double v258;
  double v259;
  double v260;
  float v261;
  double v262;
  char v263;
  double v264;
  uint64_t v265;
  double v266;
  uint64_t v267;
  int v268;
  long double v269;
  long double v270;
  float64x2_t v271;
  float64x2_t v272;
  double v273;
  double v274;
  double v275;
  double v276;
  float v277;
  double v278;
  char v279;
  double v280;
  uint64_t v281;
  double v282;
  uint64_t v283;
  int v284;
  long double v285;
  long double v286;
  float64x2_t v287;
  float64x2_t v288;
  double v289;
  double v290;
  double v291;
  double v292;
  float v293;
  double v294;
  char v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  long double v309;
  double v310;
  double v311;
  long double v312;
  double v313;
  long double v314;
  double v315;
  long double v316;
  double v317;
  long double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  float64x2_t v333;
  BOOL v334;
  void *v335[2];
  double v336;
  uint64_t v337;
  double v338;
  double v339;
  long double v340;
  long double v341;
  long double v342;
  long double v343;
  long double v344;
  long double v345;
  long double v346;
  long double v347;
  float64x2_t v348;
  uint64_t v349;
  _QWORD v350[3];
  _QWORD *v351;
  _QWORD v352[3];
  _QWORD *v353;
  _QWORD v354[3];
  _QWORD *v355;
  uint64_t v356;

  v356 = *MEMORY[0x1E0C80C00];
  v352[0] = &off_1E42CBBE8;
  v352[1] = a2;
  v353 = v352;
  v350[0] = &off_1E42CBC30;
  v350[1] = a2;
  v351 = v350;
  v355 = v354;
  v354[0] = &off_1E42CBC30;
  v354[1] = a2;
  std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::operator()((uint64_t)v352);
  v8 = v351;
  if (v351 == v350)
  {
    v9 = 4;
    v8 = v350;
  }
  else
  {
    if (!v351)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v353;
  if (v353 == v352)
  {
    v11 = 4;
    v10 = v352;
  }
  else
  {
    if (!v353)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v13 = *(float *)(a4 + 16) <= 0.01 && *(_BYTE *)(a4 + 3) != 0;
  v334 = v13;
  v14 = *(uint64_t **)(*(_QWORD *)(a1 + 280) + 1128);
  v15 = *v14;
  v16 = v14[1];
  v17 = v15;
  if (v15 != v16)
  {
    v17 = v15;
    while (*(_BYTE *)v17 != 20)
    {
      v17 += 16;
      if (v17 == v16)
        goto LABEL_25;
    }
  }
  if (v17 == v16)
  {
LABEL_25:
    LODWORD(v18) = 0;
    if (v15 != v16)
    {
LABEL_26:
      while (*(_BYTE *)v15 != 29)
      {
        v15 += 16;
        if (v15 == v16)
          goto LABEL_31;
      }
    }
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v15 != v16)
      goto LABEL_26;
  }
  if (v15 == v16)
LABEL_31:
    v19 = 0;
  else
    v19 = *(_QWORD *)(v15 + 8);
  v20 = *a3;
  v21 = a3[1];
  *(_BYTE *)(a4 + 5) = *(_BYTE *)(a1 + 352);
  if (v18 > 8 || ((1 << v18) & 0x121) == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_WORD *)(a4 + 2) = 0;
    *(_OWORD *)(a4 + 8) = xmmword_19FFB3B40;
    goto LABEL_84;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  md::LayoutContext::frameState(a2);
  v24 = v23[20];
  v25 = v23[17];
  v26 = v23[62];
  v27 = v23[63];
  if (v26 >= v27)
  {
    v33 = v23[73];
  }
  else
  {
    v28 = v27 * v26;
    v29 = v26 / v27;
    if (v28 <= 0.0)
      v30 = 1.0;
    else
      v30 = v29;
    v31 = tan(v23[73] * 0.5);
    v32 = atan(v30 * v31);
    v33 = v32 + v32;
  }
  v34 = tan(v25 * 0.5 + 0.789761487);
  v35 = log(v34);
  v36 = tan(v25 * 0.5 + 0.78103484);
  v37 = fabs((v35 - log(v36)) * 0.159154943);
  v38 = cos(v25 + v25) * -559.82 + 111132.92;
  v39 = v38 + cos(v25 * 4.0) * 1.175;
  v40 = v39 + cos(v25 * 6.0) * -0.0023;
  v41 = tan(v33 * 0.5);
  v42 = log2(v24 * (v41 + v41) * v37 / v40);
  v43 = *(float *)(v20 + 100);
  LOBYTE(v335[0]) = 0;
  LOBYTE(v348.f64[0]) = 0;
  gss::ClientStyleState<gss::PropertyID>::queryNightMode(*(_QWORD *)(v20 + 32), (BOOL *)v335, (BOOL *)&v348);
  v44 = v42;
  v45 = v43 - v44;
  v46 = 1.0;
  if ((_DWORD)v18 != 5)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v47, "daVinciOverrideElevationScaling"))
    {
      v48 = objc_msgSend(v47, "daVinciElevationScalingMaxZ");
      if (v48 <= objc_msgSend(v47, "daVinciElevationScalingMinZ"))
      {
LABEL_47:

        goto LABEL_48;
      }
      v49 = objc_msgSend(v47, "daVinciElevationScalingMinZ");
      v50 = objc_msgSend(v47, "daVinciElevationScalingMaxZ");
      objc_msgSend(v47, "daVinciElevationScalingMinZFactor");
      v52 = v51;
      objc_msgSend(v47, "daVinciElevationScalingMaxZFactor");
      v54 = fminf(fmaxf((float)(v45 - (float)v49) / (float)((float)v50 - (float)v49), 0.0), 1.0);
    }
    else
    {
      v55 = *(_QWORD **)(v21 + 48);
      v52 = md::DaVinciGroundSettings::valueForZoomLevel<float>(v55, (int)v45);
      v53 = md::DaVinciGroundSettings::valueForZoomLevel<float>(v55, ((int)v45 + 1));
      v54 = v45 - truncf(v45);
    }
    v46 = v52 + (float)((float)(v53 - v52) * v54);
    goto LABEL_47;
  }
LABEL_48:
  v56 = objc_msgSend(v22, "daVinciElevationScalingNormalsOnly");
  v57 = *(_QWORD *)(a1 + 160);
  v58 = 1.0;
  if (!v56)
    v58 = v46;
  v59 = *(_DWORD *)(v57 + 76) != 0;
  v60 = *(float *)(v57 + 48);
  v61 = v60 * v58;
  *(float *)(a4 + 16) = v61;
  v62 = *(unsigned __int8 *)(v57 + 80);
  *(_BYTE *)a4 = v62;
  *(float *)(a4 + 8) = v60;
  *(_BYTE *)(a4 + 2) = v59;
  v64 = (_DWORD)v18 == 8 || v19 == 3;
  v65 = *(unsigned __int8 *)(a4 + 1);
  if (v62 && !*(_BYTE *)(a4 + 1) && v64)
  {
    v66 = *(void **)(a1 + 144);
    if (v66)
      objc_msgSend(v66, "stop");
    *(_QWORD *)(a1 + 168) = 0x3F800000BF800000;
    objc_msgSend(v22, "daVinciTransitionDuration");
    md::ElevationLogic::_startFlatteningScaleAnimation((md::ElevationLogic *)a1, v67);
    v68 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a4 + 1))
      LOBYTE(v64) = 1;
    if (!v62 || v64)
      goto LABEL_70;
    v69 = *(void **)(a1 + 144);
    if (v69)
      objc_msgSend(v69, "stop");
    *(_QWORD *)(a1 + 168) = 1065353216;
    objc_msgSend(v22, "daVinciTransitionDuration");
    md::ElevationLogic::_startFlatteningScaleAnimation((md::ElevationLogic *)a1, v70);
    v68 = 0;
  }
  *(_BYTE *)(a4 + 1) = v68;
  v60 = *(float *)(*(_QWORD *)(a1 + 160) + 48);
  v61 = *(float *)(a4 + 16);
LABEL_70:
  v71 = *(float *)(a1 + 172);
  *(float *)(a4 + 12) = fmaxf(v60 + (float)((float)-(float)(v71 - (float)(v46 * v71)) * v60), 0.01);
  *(float *)(a4 + 16) = v61 * v71;
  v72 = 1.0;
  if ((_DWORD)v18 != 5 && (!*(_BYTE *)a4 || objc_msgSend(v22, "daVinciPitchScaleEnabled")))
  {
    objc_msgSend(v22, "buildingPOIPitchScaleMinZoom");
    v74 = v73;
    objc_msgSend(v22, "buildingPOIPitchScaleMaxZoom");
    v76 = v75;
    *(float *)&v77 = md::LayoutContext::frameState(a2);
    v79 = *(double *)(v78 + 168);
    objc_msgSend(v22, "buildingPOIPitchScaleMaxZoomFactor", v77);
    v81 = v80;
    objc_msgSend(v22, "buildingPOIPitchScaleFullHeightAngle");
    v83 = fminf((float)((float)(v81 + -1.0) * fminf((float)(v45 - v74) / (float)(v76 - v74), 1.0)) + 1.0, 1.0);
    v82 = v79 * 0.636619772;
    v72 = fminf((float)((float)(v82 - (float)(v83 * v82)) / sinf(v84 * 0.017453)) + v83, 1.0);
  }
  *(float *)(a4 + 20) = v72;
  v86 = v45 > 11.0 || v65 != 0;
  *(_BYTE *)(a4 + 3) = v86;
  *(_BYTE *)(a4 + 4) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 280) + 1240))
  {
    md::LayoutContext::frameState(a2);
    if (!*(_BYTE *)(v87 + 128))
    {
      md::LayoutContext::frameState(a2);
      v88 = *(float *)(a4 + 20);
      v90 = v88 / cos(*(long double *)(v89 + 136));
      *(float *)(a4 + 20) = v90;
      *(_BYTE *)(a4 + 4) = 1;
    }
  }

LABEL_84:
  md::LayoutContext::frameState(a2);
  v92 = *(double *)(v91 + 88);
  v93 = *(double *)(a1 + 240);
  md::LayoutContext::frameState(a2);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(v94 + 88);
  if (!*(_QWORD *)(a1 + 256)
    || (+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"),
        v95 = (void *)objc_claimAutoreleasedReturnValue(),
        v96 = objc_msgSend(v95, "toursCorrectElevation"),
        v95,
        !v96))
  {
    if (!*(_BYTE *)a4)
    {
      v220 = *(_QWORD *)(a1 + 280);
      v221 = *(uint64_t **)(v220 + 1128);
      v222 = *v221;
      v223 = v221[1];
      if (v222 != v223)
      {
        while (*(_BYTE *)v222 != 20)
        {
          v222 += 16;
          if (v222 == v223)
            goto LABEL_125;
        }
      }
      if (v222 == v223
        || ((v224 = *(_DWORD *)(v222 + 8) - 2, *(_BYTE *)(v220 + 1241)) ? (v225 = v224 > 2) : (v225 = 1), v225))
      {
LABEL_125:
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 248) = 0;
        md::LayoutContext::frameState(a2);
        if ((*(_DWORD *)(a1 + 288) & 0xFFFFFFFE) == 2)
        {
          *(_QWORD *)(v226 + 152) = 0;
          if (!*(_BYTE *)(a1 + 328))
            goto LABEL_134;
          goto LABEL_131;
        }
        goto LABEL_130;
      }
    }
    md::LayoutContext::frameState(a2);
    v111 = v110;
    v112 = *(double *)(a1 + 176);
    v113 = v110 + 17;
    *(double *)&v114 = COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((_QWORD *)a1, (uint64_t)(v110 + 17)));
    LOBYTE(v116) = v115;
    v117 = *(double *)&v114;
    if ((v18 - 2) > 2
      || (+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"),
          v118 = (void *)objc_claimAutoreleasedReturnValue(),
          v119 = objc_msgSend(v118, "correctBumpiness"),
          v118,
          !v119))
    {
      v116 = v116;
      if ((_BYTE)v116)
        v194 = v117;
      else
        v194 = 0.0;
      *(_QWORD *)(a1 + 232) = 0;
      v206 = v117;
      v207 = v111[18];
      v208 = v111[19];
      v209 = __sincos_stret(v111[17]);
      v210 = 6378137.0 / sqrt(v209.__sinval * v209.__sinval * -0.00669437999 + 1.0);
      v211 = (v210 + v208) * v209.__cosval;
      v212 = v207;
      v213 = v206;
      v214 = __sincos_stret(v212);
      *(double *)(a1 + 184) = v211 * v214.__cosval;
      *(double *)(a1 + 192) = v211 * v214.__sinval;
      *(double *)(a1 + 200) = (v208 + v210 * 0.99330562) * v209.__sinval;
      gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v335, v113);
      v215 = v336;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v335;
      *(double *)(a1 + 224) = v215;
      goto LABEL_107;
    }
    v321 = v112;
    v332 = v117;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v335, v113);
    v120 = v111[18];
    v121 = v111[19];
    v122 = __sincos_stret(v111[17]);
    v123 = 6378137.0 / sqrt(v122.__sinval * v122.__sinval * -0.00669437999 + 1.0);
    v124 = (v123 + v121) * v122.__cosval;
    v125 = __sincos_stret(v120);
    v126 = v124 * v125.__cosval;
    v127 = v124 * v125.__sinval;
    v128 = (v121 + v123 * 0.99330562) * v122.__sinval;
    v129 = v335[0];
    v130 = v335[1];
    v132 = v338;
    v131 = v339;
    v134 = v336;
    v133 = *(double *)&v337;
    v135 = v340;
    v136 = v111[20];
    v137 = sqrt((*(double *)v335 - *(double *)(a1 + 208)) * (*(double *)v335 - *(double *)(a1 + 208))+ (*(double *)&v335[1] - *(double *)(a1 + 216)) * (*(double *)&v335[1] - *(double *)(a1 + 216))+ (v336 - *(double *)(a1 + 224)) * (v336 - *(double *)(a1 + 224)));
    *(void **)(a1 + 208) = v335[0];
    *(double *)(a1 + 216) = *(double *)&v130;
    *(double *)(a1 + 224) = v134;
    if (v137 <= 0.00001 || v136 >= 5000.0)
    {
LABEL_194:
      v213 = v332;
      if ((_BYTE)v116)
      {
        v297 = sqrt((*(double *)(a1 + 184) - v126) * (*(double *)(a1 + 184) - v126)+ (*(double *)(a1 + 192) - v127) * (*(double *)(a1 + 192) - v127)+ (*(double *)(a1 + 200) - v128) * (*(double *)(a1 + 200) - v128));
        v194 = v332;
        if (v297 < 1000.0)
        {
          v298 = *(double *)(a1 + 176);
          v299 = fmin(fmax(fmin(fmax((v332 - v298) / fmax(v297, 0.00001) - *(double *)(a1 + 232), -((v92 - v93) * 0.2)), (v92 - v93) * 0.2)+ *(double *)(a1 + 232), -0.2), 0.2);
          *(double *)(a1 + 232) = v299;
          v194 = v298 + v299 * v297;
        }
        if (v137 <= 0.00001)
          *(_QWORD *)(a1 + 232) = 0;
        *(double *)(a1 + 184) = v126;
        *(double *)(a1 + 192) = v127;
        v116 = 1;
        *(double *)(a1 + 200) = v128;
      }
      else
      {
        v116 = 0;
        *(_QWORD *)(a1 + 232) = 0;
        v194 = v321;
      }
      goto LABEL_107;
    }
    v302 = v137;
    v306 = v93;
    v307 = v92;
    v139 = -(v131 * -2.0 * v132 - (v133 + v133) * v135);
    v140 = v126 - *(double *)&v129 + (v133 + v133) * v132 + v135 * (v131 * -2.0);
    v300 = v111[74];
    v301 = sqrt(*(double *)&v129 * *(double *)&v129 + *(double *)&v130 * *(double *)&v130 + v134 * v134);
    v141 = 1.0 / v301 * *(double *)&v129;
    v305 = v126;
    v142 = 1.0 / v301 * *(double *)&v130;
    v143 = 1.0 / v301 * v134;
    v324 = *(double *)&v129;
    v144 = 1.0 - *(double *)&v130 + v131 * -2.0 * v131 + v127 - (v133 + v133) * v133;
    v145 = v139 + v128 - v134;
    v146 = -(v145 * v142 - v144 * v143);
    v147 = -(v140 * v143 - v145 * v141);
    v148 = -(v144 * v141 - v140 * v142);
    v149 = -(v147 * v143 - v148 * v142);
    v150 = -(v148 * v141 - v146 * v143);
    v151 = -(v146 * v142 - v147 * v141);
    v152 = 1.0 / sqrt(v149 * v149 + v150 * v150 + v151 * v151);
    v325 = v152 * v149;
    v323 = v152 * v150;
    v327 = v152 * v151;
    v310 = *(double *)&v130 + v152 * v150 * 5.0;
    v313 = *(double *)&v129 + v152 * v149 * 5.0;
    v308 = v134 + v152 * v151 * 5.0;
    v153 = 5.0 / sqrt(v147 * v147 + v146 * v146 + v148 * v148);
    v154 = v153 * v147;
    v304 = v127;
    v315 = v153 * v148;
    v317 = v153 * v146;
    v155 = v313 + v153 * v146;
    v156 = v310 + v153 * v147;
    v157 = v308 + v153 * v148;
    v158 = sqrt(v155 * v155 + v156 * v156);
    v322 = *(double *)&v130;
    v326 = v134;
    v303 = v128;
    v159 = atan2(v157, v158 * 0.996647189);
    v320 = atan2(v156, v155);
    v160 = __sincos_stret(v159);
    v319 = atan2(v157 + v160.__sinval * v160.__sinval * 42841.3115 * v160.__sinval, v158 - v160.__cosval * v160.__cosval * 42697.6727 * v160.__cosval);
    v161 = v310 - v154;
    v162 = sqrt((v313 - v317) * (v313 - v317) + v161 * v161);
    v163 = atan2(v308 - v315, v162 * 0.996647189);
    v318 = atan2(v161, v313 - v317);
    v164 = __sincos_stret(v163);
    v316 = atan2(v308 - v315 + v164.__sinval * v164.__sinval * 42841.3115 * v164.__sinval, v162 - v164.__cosval * v164.__cosval * 42697.6727 * v164.__cosval);
    v165 = v324 - v325 * 2.5;
    v166 = v322 - v323 * 2.5;
    v311 = sqrt(v165 * v165 + v166 * v166);
    v167 = atan2(v326 - v327 * 2.5, v311 * 0.996647189);
    v314 = atan2(v166, v165);
    v168 = __sincos_stret(v167);
    v312 = atan2(v326 - v327 * 2.5 + v168.__sinval * v168.__sinval * 42841.3115 * v168.__sinval, v311 - v168.__cosval * v168.__cosval * 42697.6727 * v168.__cosval);
    v169 = v324 + v325 * 15.0;
    v170 = v322 + v323 * 15.0;
    v171 = sqrt(v169 * v169 + v170 * v170);
    v172 = atan2(v326 + v327 * 15.0, v171 * 0.996647189);
    v309 = atan2(v170, v169);
    v173 = __sincos_stret(v172);
    v174 = atan2(v326 + v327 * 15.0 + v173.__sinval * v173.__sinval * 42841.3115 * v173.__sinval, v171 - v173.__cosval * v173.__cosval * 42697.6727 * v173.__cosval);
    v175 = v324 + v325 * 30.0;
    v176 = v322 + v323 * 30.0;
    v177 = v326 + v327 * 30.0;
    v178 = sqrt(v175 * v175 + v176 * v176);
    v179 = atan2(v177, v178 * 0.996647189);
    v180 = atan2(v176, v175);
    v181 = __sincos_stret(v179);
    v182 = atan2(v177 + v181.__sinval * v181.__sinval * 42841.3115 * v181.__sinval, v178 - v181.__cosval * v181.__cosval * 42697.6727 * v181.__cosval);
    v336 = COERCE_DOUBLE(&v338);
    v337 = 5;
    v338 = v319;
    v339 = v320;
    v340 = v316;
    v341 = v318;
    v342 = v312;
    v343 = v314;
    v344 = v174;
    v345 = v309;
    v346 = v182;
    v347 = v180;
    v335[0] = &v338;
    v335[1] = &v348;
    v183 = *(_QWORD *)(a1 + 272);
    if (!v183)
    {
      v93 = v306;
      v92 = v307;
      v128 = v303;
      v127 = v304;
      v126 = v305;
      v137 = v302;
      goto LABEL_194;
    }
    v127 = v304;
    v128 = v303;
    v184 = sqrt(v305 * v305 + v127 * v127 + v128 * v128) - v301 + fmax(v300 + v300, 35.0);
    __asm { FMOV            V0.2D, #0.5 }
    v333 = _Q0;
    v93 = v306;
    v92 = v307;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 160) + 80))
    {
      v189 = *(_QWORD *)(a1 + 280);
      v190 = md::MapEngine::mapType(**(md::MapEngine ***)(v189 + 1128), *(md::MapEngine **)(*(_QWORD *)(v189 + 1128) + 8));
      v191 = 0;
      v192 = *(unsigned __int8 *)(v189 + 1241);
      v193 = 1;
      v194 = 0.0;
      if (!v192)
      {
LABEL_151:
        v126 = v305;
LABEL_152:
        v233 = *(_QWORD *)(a1 + 272);
        if (v233)
        {
          v234 = v340;
          v328 = v341;
          if (*(_BYTE *)(*(_QWORD *)(a1 + 160) + 80)
            || (v235 = *(_QWORD *)(a1 + 280),
                v236 = md::MapEngine::mapType(**(md::MapEngine ***)(v235 + 1128), *(md::MapEngine **)(*(_QWORD *)(v235 + 1128) + 8)), *(_BYTE *)(v235 + 1241))&& (v236 - 2) <= 2)
          {
            v237 = tan(v234 * 0.5 + 0.785398163);
            v238 = log(v237);
            v239.f64[0] = v328;
            v239.f64[1] = v238;
            v240 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
            v348 = vmlaq_f64(v333, v240, v239);
            v349 = 0;
            v246 = COERCE_DOUBLE(md::World::getElevation(v233, &v348, v240.f64[0], v348.f64[0], v328, v241, v242, v243, v244, v245));
            if (v247)
            {
              if (v193)
                v248 = v184 + v246;
              else
                v248 = v194;
              v194 = fmax(v184 + v246, v248);
              v191 = 1;
            }
          }
          v249 = *(_QWORD *)(a1 + 272);
          if (v249)
          {
            v250 = v342;
            v329 = v343;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 160) + 80)
              || (v251 = *(_QWORD *)(a1 + 280),
                  v252 = md::MapEngine::mapType(**(md::MapEngine ***)(v251 + 1128), *(md::MapEngine **)(*(_QWORD *)(v251 + 1128) + 8)), *(_BYTE *)(v251 + 1241))&& (v252 - 2) <= 2)
            {
              v253 = tan(v250 * 0.5 + 0.785398163);
              v254 = log(v253);
              v255.f64[0] = v329;
              v255.f64[1] = v254;
              v256 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
              v348 = vmlaq_f64(v333, v256, v255);
              v349 = 0;
              v262 = COERCE_DOUBLE(md::World::getElevation(v249, &v348, v256.f64[0], v348.f64[0], v329, v257, v258, v259, v260, v261));
              if (v263)
              {
                if (v191)
                  v264 = v194;
                else
                  v264 = v184 + v262;
                v194 = fmax(v184 + v262, v264);
                v191 = 1;
              }
            }
            v126 = v305;
            v265 = *(_QWORD *)(a1 + 272);
            if (!v265)
              goto LABEL_189;
            v266 = v344;
            v330 = v345;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 160) + 80)
              || (v267 = *(_QWORD *)(a1 + 280),
                  v268 = md::MapEngine::mapType(**(md::MapEngine ***)(v267 + 1128), *(md::MapEngine **)(*(_QWORD *)(v267 + 1128) + 8)), *(_BYTE *)(v267 + 1241))&& (v268 - 2) <= 2)
            {
              v269 = tan(v266 * 0.5 + 0.785398163);
              v270 = log(v269);
              v271.f64[0] = v330;
              v271.f64[1] = v270;
              v272 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
              v348 = vmlaq_f64(v333, v272, v271);
              v349 = 0;
              v278 = COERCE_DOUBLE(md::World::getElevation(v265, &v348, v272.f64[0], v348.f64[0], v330, v273, v274, v275, v276, v277));
              if (v279)
              {
                if (v191)
                  v280 = v194;
                else
                  v280 = v184 + v278;
                v194 = fmax(v184 + v278, v280);
                v191 = 1;
              }
            }
            v126 = v305;
            v281 = *(_QWORD *)(a1 + 272);
            if (!v281)
              goto LABEL_189;
            v282 = v346;
            v331 = v347;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 160) + 80)
              || (v283 = *(_QWORD *)(a1 + 280),
                  v284 = md::MapEngine::mapType(**(md::MapEngine ***)(v283 + 1128), *(md::MapEngine **)(*(_QWORD *)(v283 + 1128) + 8)), *(_BYTE *)(v283 + 1241))&& (v284 - 2) <= 2)
            {
              v285 = tan(v282 * 0.5 + 0.785398163);
              v286 = log(v285);
              v287.f64[0] = v331;
              v287.f64[1] = v286;
              v288 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
              v348 = vmlaq_f64(v333, v288, v287);
              v349 = 0;
              v294 = COERCE_DOUBLE(md::World::getElevation(v281, &v348, v288.f64[0], v348.f64[0], v331, v289, v290, v291, v292, v293));
              if (v295)
              {
                if (v191)
                  v296 = v194;
                else
                  v296 = v184 + v294;
                v194 = fmax(v184 + v294, v296);
                v191 = 1;
              }
            }
          }
          v126 = v305;
        }
LABEL_189:
        if (v335[0] != *(void **)&v336)
        {
          free(v335[0]);
          v126 = v305;
        }
        v137 = v302;
        if (!v191 || v194 <= *(double *)(a1 + 176))
          goto LABEL_194;
        *(_QWORD *)(a1 + 232) = 0;
        *(double *)(a1 + 184) = v126;
        *(double *)(a1 + 192) = v304;
        v116 = v116;
        *(double *)(a1 + 200) = v303;
        v213 = v332;
LABEL_107:
        v216 = (float)(*(float *)(a4 + 16) * *(float *)(a4 + 20));
        v217 = v194 * v216;
        *(double *)(a1 + 176) = v194 * v216;
        if (v116)
          v218 = v213;
        else
          v218 = v194;
        *(double *)(a1 + 248) = (v194 - v218) * v216;
        v219 = *(_DWORD *)(a1 + 288);
        if (v219 != 3)
        {
          if (v219 != 2)
          {
            if (v219 == 1)
            {
              v111[19] = v111[19] + v217;
              if (!*(_BYTE *)(a1 + 328))
                goto LABEL_134;
              goto LABEL_131;
            }
            goto LABEL_130;
          }
          v217 = v111[19] * v216;
        }
        v111[19] = v217;
LABEL_130:
        if (!*(_BYTE *)(a1 + 328))
          goto LABEL_134;
        goto LABEL_131;
      }
      v126 = v305;
      if ((v190 - 2) > 2)
        goto LABEL_152;
    }
    v195 = tan(v319 * 0.5 + 0.785398163);
    v196 = log(v195);
    v197.f64[0] = v320;
    v197.f64[1] = v196;
    v198 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    v348 = vmlaq_f64(v333, v198, v197);
    v349 = 0;
    v204 = COERCE_DOUBLE(md::World::getElevation(v183, &v348, v198.f64[0], v348.f64[0], v320, v199, v200, v201, v202, v203));
    if (v205)
    {
      v193 = 0;
      v194 = v184 + v204;
      v191 = 1;
    }
    else
    {
      v191 = 0;
      v193 = 1;
      v194 = 0.0;
    }
    goto LABEL_151;
  }
  md::LayoutContext::frameState(a2);
  v98 = v97;
  v99 = *(double *)(*(_QWORD *)(a1 + 256) + 152);
  v100 = v97 + 17;
  v101 = COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((_QWORD *)a1, (uint64_t)(v97 + 17)));
  v103 = v102;
  v98[19] = v99;
  *(double *)(a1 + 176) = v99;
  v104 = v98[18];
  v105 = __sincos_stret(v98[17]);
  v106 = 6378137.0 / sqrt(v105.__sinval * v105.__sinval * -0.00669437999 + 1.0);
  v107 = (v106 + v99) * v105.__cosval;
  v108 = __sincos_stret(v104);
  *(double *)(a1 + 184) = v107 * v108.__cosval;
  *(double *)(a1 + 192) = v107 * v108.__sinval;
  *(double *)(a1 + 200) = (v99 + v106 * 0.99330562) * v105.__sinval;
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v335, v100);
  v109 = v336;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)v335;
  *(double *)(a1 + 224) = v109;
  *(_QWORD *)(a1 + 232) = 0;
  if (v103)
  {
    *(double *)(a1 + 248) = v98[19] - v101;
    if (!*(_BYTE *)(a1 + 328))
      goto LABEL_134;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = 0;
    if (!*(_BYTE *)(a1 + 328))
      goto LABEL_134;
  }
LABEL_131:
  md::LayoutContext::frameState(a2);
  if (!*(_BYTE *)(a1 + 328))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_204:
    __break(1u);
    return;
  }
  v335[0] = *(void **)(v227 + 152);
  LOBYTE(v335[1]) = 1;
  v228 = *(_QWORD *)(a1 + 320);
  if (!v228)
  {
LABEL_203:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_204;
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v228 + 48))(v228, v335);
LABEL_134:
  v230 = *(float *)(a4 + 16) <= 0.01 && *(_BYTE *)(a4 + 3) != 0;
  *(_BYTE *)(a4 + 6) = v334 ^ v230;
  if (!v355)
    goto LABEL_203;
  (*(void (**)(_QWORD *))(*v355 + 48))(v355);
  v231 = v355;
  if (v355 == v354)
  {
    v232 = 4;
    v231 = v354;
  }
  else
  {
    if (!v355)
      return;
    v232 = 5;
  }
  (*(void (**)(void))(*v231 + 8 * v232))();
}

void sub_19F1A36BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45)
{
  uint64_t v45;

  if (a43 != a45)
    free(a43);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v45 - 192));
  _Unwind_Resume(a1);
}

float md::LayoutContext::frameState(md::LayoutContext *this)
{
  NSObject *v2;
  float result;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 728))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v2 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "_frameState.has_value()";
      v8 = 2080;
      v9 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MDLayoutContext.mm";
      v10 = 1024;
      v11 = 82;
      _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_ERROR, "Requesting frameState on context in undefined state: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v6, 0x1Cu);
    }

    if (!*((_BYTE *)this + 728))
    {
      v4 = (_QWORD *)std::__throw_bad_optional_access[abi:nn180100]();
      return md::DaVinciGroundSettings::valueForZoomLevel<float>(v4, v5);
    }
  }
  return result;
}

float md::DaVinciGroundSettings::valueForZoomLevel<float>(_QWORD *a1, unsigned int a2)
{
  int8x8_t v2;
  float v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  v3 = 1.0;
  if (v2)
  {
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 4;
      if (*(_QWORD *)&v2 <= 4uLL)
        v5 = 4uLL % *(_QWORD *)&v2;
    }
    else
    {
      v5 = (v2.i8[0] - 1) & 4;
    }
    v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 4)
            {
              if (*((_DWORD *)v7 + 4) == 4)
                goto LABEL_22;
            }
            else if ((v10 & v8) != v5)
            {
              return v3;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return v3;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 4)
          {
            if (*((_DWORD *)v7 + 4) == 4)
            {
LABEL_22:
              if (!*((_DWORD *)v7 + 8))
              {
                (**(void (***)(uint64_t *__return_ptr, float))v7[3])(&v12, (float)a2);
                if ((_BYTE)v12)
                  return *((float *)&v12 + 1);
              }
              return v3;
            }
          }
          else
          {
            if (v9 >= *(_QWORD *)&v2)
              v9 %= *(_QWORD *)&v2;
            if (v9 != v5)
              return v3;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
  return v3;
}

_QWORD *gms::ZoomablePropertyStore<float>::getProperty@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  int v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  int v70;
  float v71;

  *(_BYTE *)a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)result[5];
  v7 = result + 6;
  v8 = v6;
  if (v6 != result + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)result[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)result[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (v21 = 1), v21))
    v8 = result + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)result[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)result[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)result[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (_QWORD *)result[4]) == 0 || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v40 = 0;
        v41 = v6;
        do
        {
          v42 = (_QWORD *)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v41[2];
              v13 = *v43 == (_QWORD)v41;
              v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          v41 = v43;
        }
        while (v43 != v7);
        do
        {
          v44 = v40 >> 1;
          v45 = v6;
          if (v40 != 1)
          {
            v47 = v40 >> 1;
            v48 = v6;
            do
            {
              v49 = (_QWORD *)v48[1];
              if (v49)
              {
                do
                {
                  v45 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v48[2];
                  v13 = *v45 == (_QWORD)v48;
                  v48 = v45;
                }
                while (!v13);
              }
              v48 = v45;
              v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 29))
          {
            v46 = (_QWORD *)v45[1];
            if (v46)
            {
              do
              {
                v6 = v46;
                v46 = (_QWORD *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v45[2];
                v13 = *v6 == (_QWORD)v45;
                v45 = v6;
              }
              while (!v13);
            }
            v44 = v40 + ~v44;
          }
          v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (v50 = v5 >= *((unsigned __int8 *)v6 + 29)) : (v50 = 1), v50))
      {
        v6 = v7;
      }
      *(_BYTE *)a2 = 1;
      v51 = *((_DWORD *)v6 + 8);
    }
    else
    {
      v35 = v6;
      if (v6 != v7)
      {
        v36 = 0;
        v37 = v6;
        do
        {
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v37[2];
              v13 = *v39 == (_QWORD)v37;
              v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          v37 = v39;
        }
        while (v39 != v7);
        v35 = v6;
        do
        {
          v52 = v36 >> 1;
          v53 = v35;
          if (v36 != 1)
          {
            v55 = v36 >> 1;
            v56 = v35;
            do
            {
              v57 = (_QWORD *)v56[1];
              if (v57)
              {
                do
                {
                  v53 = v57;
                  v57 = (_QWORD *)*v57;
                }
                while (v57);
              }
              else
              {
                do
                {
                  v53 = (_QWORD *)v56[2];
                  v13 = *v53 == (_QWORD)v56;
                  v56 = v53;
                }
                while (!v13);
              }
              v56 = v53;
              v19 = v55-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v53 + 29))
          {
            v54 = (_QWORD *)v53[1];
            if (v54)
            {
              do
              {
                v35 = v54;
                v54 = (_QWORD *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v53[2];
                v13 = *v35 == (_QWORD)v53;
                v53 = v35;
              }
              while (!v13);
            }
            v52 = v36 + ~v52;
          }
          v36 = v52;
        }
        while (v52);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 28) ? (v58 = v5 >= *((unsigned __int8 *)v35 + 29)) : (v58 = 1), v58))
      {
        v35 = v7;
      }
      v70 = *((_DWORD *)v35 + 8);
      if (v6 != v7)
      {
        v59 = 0;
        v60 = v6;
        do
        {
          v61 = (_QWORD *)v60[1];
          if (v61)
          {
            do
            {
              v62 = v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              v62 = (_QWORD *)v60[2];
              v13 = *v62 == (_QWORD)v60;
              v60 = v62;
            }
            while (!v13);
          }
          ++v59;
          v60 = v62;
        }
        while (v62 != v7);
        do
        {
          v63 = v59 >> 1;
          v64 = v6;
          if (v59 != 1)
          {
            v66 = v59 >> 1;
            v67 = v6;
            do
            {
              v68 = (_QWORD *)v67[1];
              if (v68)
              {
                do
                {
                  v64 = v68;
                  v68 = (_QWORD *)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  v64 = (_QWORD *)v67[2];
                  v13 = *v64 == (_QWORD)v67;
                  v67 = v64;
                }
                while (!v13);
              }
              v67 = v64;
              v19 = v66-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v64 + 29) <= v22)
          {
            v65 = (_QWORD *)v64[1];
            if (v65)
            {
              do
              {
                v6 = v65;
                v65 = (_QWORD *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v64[2];
                v13 = *v6 == (_QWORD)v64;
                v64 = v6;
              }
              while (!v13);
            }
            v63 = v59 + ~v63;
          }
          v59 = v63;
        }
        while (v63);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        v6 = v7;
      }
      v69 = *((_DWORD *)v6 + 8);
      v71 = v34;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, float *, int *, int *))(*result + 48))(result, &v71, &v70, &v69);
      *(_BYTE *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = v51;
  }
  return result;
}

uint64_t std::__function::__func<float (*)(float,float const&,float const&),std::allocator<float (*)(float,float const&,float const&)>,float ()(float,float const&,float const&)>::operator()(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(a1 + 8))(a3, a4, *a2);
}

float gms::lerp<float>(float *a1, float *a2, float a3)
{
  return *a1 + (float)((float)(*a2 - *a1) * a3);
}

void sub_19F1A4160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::PropertyID>::queryNightMode(uint64_t a1, BOOL *a2, BOOL *a3)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  geo::read_write_lock *v9;
  const char *v10;

  v6 = (pthread_rwlock_t *)(a1 + 16);
  v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  *a2 = *(_BYTE *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10001u) == 1;
  *a3 = *(_BYTE *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 232), 0x10001u) == 1;
  v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
}

void sub_19F1A4240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

unint64_t md::ElevationLogic::heightAtCoordinate(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  long double v3;
  long double v4;
  float64x2_t v5;
  float64x2_t v6;
  double v12;
  double v13;
  double v14;
  float v15;
  uint64_t Elevation;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  __int128 v26;
  float64x2_t v27;
  uint64_t v28;

  v2 = a1[34];
  if (!v2)
    goto LABEL_14;
  if (*(_BYTE *)(a1[20] + 80))
    goto LABEL_3;
  v19 = a1[35];
  v20 = *(uint64_t **)(v19 + 1128);
  v21 = *v20;
  v22 = v20[1];
  if (v21 != v22)
  {
    while (*(_BYTE *)v21 != 20)
    {
      v21 += 16;
      if (v21 == v22)
        goto LABEL_14;
    }
  }
  if (v21 == v22 || ((v23 = *(_DWORD *)(v21 + 8) - 2, *(_BYTE *)(v19 + 1241)) ? (v24 = v23 > 2) : (v24 = 1), v24))
  {
LABEL_14:
    v18 = 0;
    v17 = 0;
  }
  else
  {
LABEL_3:
    v26 = *(_OWORD *)(a2 + 8);
    v3 = tan(*(double *)a2 * 0.5 + 0.785398163);
    v4 = log(v3);
    *(_QWORD *)&v5.f64[0] = v26;
    v5.f64[1] = v4;
    v6 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    __asm { FMOV            V2.2D, #0.5 }
    v27 = vmlaq_f64(_Q2, v6, v5);
    v28 = *((_QWORD *)&v26 + 1);
    Elevation = md::World::getElevation(v2, &v27, v6.f64[0], *(double *)&v26, v27.f64[0], *(double *)&v26, v12, v13, v14, v15);
    v17 = Elevation & 0xFFFFFFFFFFFFFF00;
    v18 = Elevation;
  }
  return v17 | v18;
}

uint64_t md::World::getElevation(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned __int8 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  double v39;
  int64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float32x4_t v43;
  double v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;

  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(a1 + 377))
  {
    if (v11 != v12)
    {
      while (*(_WORD *)v11 != 77)
      {
        v11 += 16;
        if (v11 == v12)
          goto LABEL_37;
      }
    }
    v13 = 0.0;
    if (v11 != v12)
    {
      v14 = *(_QWORD **)(v11 + 8);
      if (v14)
      {
        v15 = (_QWORD *)v14[1];
        if (v15 != v14)
        {
          v16 = 0;
          v17 = 0;
          do
          {
            v19 = (_QWORD *)v15[16];
            v18 = (std::__shared_weak_count *)v15[17];
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v21 = __ldxr(p_shared_owners);
              while (__stxr(v21 + 1, p_shared_owners));
            }
            v22 = v19[90];
            if ((v22 || (v22 = v19[92]) != 0) && *(unsigned __int8 *)(v22 + 57) > v16)
            {
              if ((*(unsigned int (**)(_QWORD *, float64x2_t *))(*v19 + 48))(v19, a2))
              {
                v23 = (*(uint64_t (**)(_QWORD *, float64x2_t *, uint64_t))(*v19 + 56))(v19, a2, 1);
                if (BYTE4(v23))
                {
                  v24 = v19[90];
                  if (v24 || (v24 = v19[92]) != 0)
                    v16 = *(_BYTE *)(v24 + 57);
                  else
                    v16 = 0;
                  if (v17 != BYTE4(v23))
                  {
                    v17 = !v17;
                    if (v17)
                      v13 = *(float *)&v23;
                    if (!v18)
                      goto LABEL_10;
LABEL_25:
                    v25 = (unint64_t *)&v18->__shared_owners_;
                    do
                      v26 = __ldaxr(v25);
                    while (__stlxr(v26 - 1, v25));
                    if (!v26)
                    {
                      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                      std::__shared_weak_count::__release_weak(v18);
                    }
                    goto LABEL_10;
                  }
                  v17 = 1;
                  v13 = *(float *)&v23;
                }
              }
            }
            if (v18)
              goto LABEL_25;
LABEL_10:
            v15 = (_QWORD *)v15[1];
          }
          while (v15 != v14);
        }
      }
    }
  }
  else
  {
    if (v11 != v12)
    {
      while (*(_WORD *)v11 != 43)
      {
        v11 += 16;
        if (v11 == v12)
        {
LABEL_37:
          v13 = 0.0;
          return *(_QWORD *)&v13;
        }
      }
    }
    v13 = 0.0;
    if (v11 != v12)
    {
      v27 = *(_QWORD **)(v11 + 8);
      if (v27)
      {
        v28 = (_QWORD *)v27[1];
        if (v28 != v27)
        {
          v29 = 0;
          do
          {
            v30 = v28[16];
            v31 = (std::__shared_weak_count *)v28[17];
            if (v31)
            {
              v32 = (unint64_t *)&v31->__shared_owners_;
              do
                v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
            }
            v34 = *(_QWORD *)(v30 + 720);
            v35 = *(std::__shared_weak_count **)(v30 + 728);
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
            if (v34)
            {
              if (*(_QWORD *)v34 != *(_QWORD *)(v34 + 8))
              {
                v38 = *(unsigned __int8 *)(v34 + 57);
                v39 = (double)(1 << v38);
                v40.i64[0] = *(int *)(v34 + 64);
                v40.i64[1] = (1 << v38) + ~*(_DWORD *)(v34 + 60);
                v41 = vmlsq_lane_f64(*a2, vcvtq_f64_s64(v40), 1.0 / v39, 0);
                v42 = vmulq_n_f64(v41, v39);
                v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v42), v42);
                LODWORD(v42.f64[0]) = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_19FFB3850, v43)).u32[0];
                v44 = COERCE_DOUBLE(vmovn_s32(vcgeq_f32(v43, (float32x4_t)xmmword_19FFB3850)));
                HIDWORD(v42.f64[0]) = HIDWORD(v44);
                if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v42.f64[0], 0xFuLL))) & 1) != 0
                  && v38 > v29)
                {
                  v45 = md::ElevationRaster::elevationInMetersAtWorldPoint(v34, 1, a2->f64[0], a2->f64[1], v44, 0.00781250185, v41.f64[0], a8, a9, a10);
                  if (HIDWORD(v45))
                    v13 = *(float *)&v45;
                  else
                    v13 = 0.0;
                  v29 = v38;
                }
              }
            }
            if (v35)
            {
              v46 = (unint64_t *)&v35->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            if (v31)
            {
              v48 = (unint64_t *)&v31->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v28 = (_QWORD *)v28[1];
          }
          while (v28 != v27);
        }
      }
    }
  }
  return *(_QWORD *)&v13;
}

void sub_19F1A4730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciElevationRaster::containsWorldPoint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2;
  int v3;
  int64x2_t v4;
  float64x2_t v5;
  float32x4_t v6;
  int16x4_t v7;

  v2 = *(_QWORD *)(a1 + 720);
  v3 = 1 << *(_BYTE *)(v2 + 57);
  v4.i64[0] = *(int *)(v2 + 64);
  v4.i64[1] = v3 + ~*(_DWORD *)(v2 + 60);
  v5 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v4), 1.0 / (double)v3, 0), (double)v3);
  v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v5);
  v7.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_19FFB3850, v6)).u32[0];
  v7.i32[1] = vmovn_s32(vcgeq_f32(v6, (float32x4_t)xmmword_19FFB3850)).i32[1];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v7, 0xFuLL))) & 1;
}

void md::LabelLayoutContext::coordinateEyePos(md::LabelLayoutContext *this, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  long double v6;
  double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  double v12;
  long double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  __double2 v21;

  if (*(_BYTE *)(a2 + 8))
  {
    md::LabelLayoutContext::mercatorEyePos((md::LabelLayoutContext *)a2);
    v4 = v3;
    v6 = v5 * 6.28318531;
    v8 = exp(v7 * 6.28318531 + -3.14159265);
    v9 = atan(v8);
    v10 = fmod(v6, 6.28318531);
    v11 = fmod(v10 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
    v12 = v9 * 114.591559 + -90.0;
  }
  else
  {
    v13 = *(double *)(a2 + 136);
    v14 = *(double *)(a2 + 144);
    v15 = *(double *)(a2 + 152);
    v16 = sqrt(v13 * v13 + v14 * v14);
    v17 = atan2(v15, v16 * 0.996647189);
    v18 = atan2(v14, v13);
    v19 = __sincos_stret(v17);
    v20 = atan2(v15 + v19.__sinval * v19.__sinval * 42841.3115 * v19.__sinval, v16 + v19.__cosval * v19.__cosval * -42697.6727 * v19.__cosval);
    v21 = __sincos_stret(v20);
    v4 = v16 / v21.__cosval + -6378137.0 / sqrt(v21.__sinval * v21.__sinval * -0.00669437999 + 1.0);
    v12 = v20 * 57.2957795;
    v11 = v18 * 57.2957795;
  }
  *(double *)this = v12;
  *((double *)this + 1) = v11;
  *((double *)this + 2) = v4;
}

void md::LabelLayoutContext::mercatorEyePos(md::LabelLayoutContext *this)
{
  long double v1;
  long double v2;
  long double v3;
  double v4;
  double v5;
  __double2 v6;
  double v7;
  long double v8;

  if (!*((_BYTE *)this + 8))
  {
    v1 = *((double *)this + 17);
    v2 = *((double *)this + 18);
    v3 = *((double *)this + 19);
    v4 = sqrt(v1 * v1 + v2 * v2);
    v5 = atan2(v3, v4 * 0.996647189);
    atan2(v2, v1);
    v6 = __sincos_stret(v5);
    v7 = atan2(v3 + v6.__sinval * v6.__sinval * 42841.3115 * v6.__sinval, v4 + v6.__cosval * v6.__cosval * -42697.6727 * v6.__cosval);
    __sincos_stret(v7);
    v8 = tan(v7 * 0.5 + 0.785398163);
    log(v8);
  }
}

void gdc::LayerDataRequestTracker::_processKey(_QWORD *a1, unsigned __int8 *a2, uint64_t *a3, char a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t i;
  int8x8_t *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  int8x8_t v13;
  int8x8_t **v14;
  int8x8_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  int8x8_t v22;
  const void *v23;
  int v24;
  unint64_t v25;
  const void *v26;
  int v27;
  int8x8_t *v28;
  int8x8_t *v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t v32;
  unint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  char v43;
  int8x8_t v44;
  uint64_t *v45;
  uint64_t v46;
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  const void *v59;
  size_t v60;
  uint64_t v61;
  const void *v62;
  int v63;
  unint64_t v64;
  const void *v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  float *v75;
  int8x8_t v76;
  int8x8_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v91;
  unint64_t v92;
  char v93;

  v75 = (float *)(a1 + 3);
  if (!std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(a1 + 3, a2))return;
  v4 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(v75, a2, (uint64_t)a2);
  v5 = v4[16];
  v87 = v4;
  if (v4[17] != v5)
  {
    for (i = 0; i < (v87[17] - v5) >> 3; ++i)
    {
      v7 = *(int8x8_t **)(v5 + 8 * i);
      v8 = v7[8];
      if (v8)
      {
        v9 = *((_QWORD *)a2 + 13);
        v10 = (uint8x8_t)vcnt_s8(v8);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v12 = *((_QWORD *)a2 + 13);
          if (v9 >= *(_QWORD *)&v8)
            v12 = v9 % *(_QWORD *)&v8;
        }
        else
        {
          v12 = (*(_QWORD *)&v8 - 1) & v9;
        }
        v13 = v7[7];
        v14 = *(int8x8_t ***)(*(_QWORD *)&v13 + 8 * v12);
        if (v14)
        {
          v15 = *v14;
          if (*v14)
          {
            v16 = *(_QWORD *)&v8 - 1;
            v17 = *a2;
            v18 = *((unsigned __int16 *)a2 + 4);
            v19 = *((_QWORD *)a2 + 10);
            v20 = (const void *)*((_QWORD *)a2 + 2);
            v21 = *((_QWORD *)a2 + 3) - (_QWORD)v20;
            if (v10.u32[0] < 2uLL)
            {
              while (1)
              {
                v22 = v15[1];
                if (*(_QWORD *)&v22 == v9)
                {
                  if (v15[2].u8[0] == v17 && v15[3].u16[0] == v18 && *(_QWORD *)&v15[12] == v19)
                  {
                    v23 = (const void *)v15[4];
                    if (*(_QWORD *)&v15[5] - (_QWORD)v23 == v21)
                    {
                      v80 = v16;
                      v82 = v11;
                      v76 = v13;
                      v78 = v19;
                      v24 = memcmp(v23, v20, v21);
                      v19 = v78;
                      v16 = v80;
                      v13 = v76;
                      v11 = v82;
                      if (!v24)
                        goto LABEL_22;
                    }
                  }
                }
                else if ((*(_QWORD *)&v22 & v16) != v12)
                {
                  goto LABEL_64;
                }
                v15 = (int8x8_t *)*v15;
                if (!v15)
                  goto LABEL_64;
              }
            }
            do
            {
              v25 = (unint64_t)v15[1];
              if (v25 == v9)
              {
                if (v15[2].u8[0] == v17 && v15[3].u16[0] == v18 && *(_QWORD *)&v15[12] == v19)
                {
                  v26 = (const void *)v15[4];
                  if (*(_QWORD *)&v15[5] - (_QWORD)v26 == v21)
                  {
                    v81 = v16;
                    v83 = v11;
                    v77 = v13;
                    v79 = v19;
                    v27 = memcmp(v26, v20, v21);
                    v19 = v79;
                    v16 = v81;
                    v13 = v77;
                    v11 = v83;
                    if (!v27)
                    {
LABEL_22:
                      if (v11 > 1)
                      {
                        if (v9 >= *(_QWORD *)&v8)
                          v9 %= *(_QWORD *)&v8;
                      }
                      else
                      {
                        v9 &= v16;
                      }
                      v28 = *(int8x8_t **)(*(_QWORD *)&v13 + 8 * v9);
                      do
                      {
                        v29 = v28;
                        v28 = (int8x8_t *)*v28;
                      }
                      while (v28 != v15);
                      if (v29 == &v7[9])
                        goto LABEL_50;
                      v30 = (unint64_t)v29[1];
                      if (v11 > 1)
                      {
                        if (v30 >= *(_QWORD *)&v8)
                          v30 %= *(_QWORD *)&v8;
                      }
                      else
                      {
                        v30 &= v16;
                      }
                      if (v30 != v9)
                      {
LABEL_50:
                        if (!*(_QWORD *)v15)
                          goto LABEL_51;
                        v31 = *(_QWORD *)(*(_QWORD *)v15 + 8);
                        if (v11 > 1)
                        {
                          if (v31 >= *(_QWORD *)&v8)
                            v31 %= *(_QWORD *)&v8;
                        }
                        else
                        {
                          v31 &= v16;
                        }
                        if (v31 != v9)
LABEL_51:
                          *(_QWORD *)(*(_QWORD *)&v13 + 8 * v9) = 0;
                      }
                      v32 = *v15;
                      if (*v15)
                      {
                        v33 = *(_QWORD *)(*(_QWORD *)&v32 + 8);
                        if (v11 > 1)
                        {
                          if (v33 >= *(_QWORD *)&v8)
                            v33 %= *(_QWORD *)&v8;
                        }
                        else
                        {
                          v33 &= v16;
                        }
                        if (v33 != v9)
                        {
                          *(_QWORD *)(*(_QWORD *)&v7[7] + 8 * v33) = v29;
                          v32 = *v15;
                        }
                      }
                      *v29 = v32;
                      *v15 = 0;
                      --*(_QWORD *)&v7[10];
                      if (v15[14].i8[0])
                        v15[14].i8[0] = 0;
                      v34 = (void *)v15[4];
                      if (v34 != (void *)v15[6])
                        free(v34);
                      operator delete(v15);
                      break;
                    }
                  }
                }
              }
              else
              {
                if (v25 >= *(_QWORD *)&v8)
                  v25 %= *(_QWORD *)&v8;
                if (v25 != v12)
                  break;
              }
              v15 = (int8x8_t *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_64:
      v35 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>((uint64_t)&v7[2], a2, (uint64_t)a2);
      v37 = *a3;
      v36 = a3[1];
      if (v36)
      {
        v38 = (unint64_t *)(v36 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (std::__shared_weak_count *)v35[17];
      v35[16] = v37;
      v35[17] = v36;
      if (!v40)
        goto LABEL_71;
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v43 = v7[12].i8[0];
        if (v43)
          goto LABEL_78;
      }
      else
      {
LABEL_71:
        v43 = v7[12].i8[0];
        if (v43)
          goto LABEL_78;
      }
      if ((a4 & 1) != 0)
      {
        v43 = 1;
      }
      else
      {
        if (*a3)
        {
          v43 = 0;
LABEL_78:
          if (!*(_QWORD *)&v7[10])
            goto LABEL_82;
          goto LABEL_4;
        }
        v43 = 2;
      }
      v7[12].i8[0] = v43;
      if (!*(_QWORD *)&v7[10])
      {
LABEL_82:
        v93 = v43;
        v44 = v7[16];
        if (!*(_QWORD *)&v44)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          return;
        }
        (*(void (**)(int8x8_t, char *, int8x8_t *))(**(_QWORD **)&v44 + 48))(v44, &v93, v7 + 2);
        v45 = *(uint64_t **)(v87[16] + 8 * i);
        v46 = *v45;
        *(_QWORD *)(v46 + 8) = v45[1];
        *(_QWORD *)v45[1] = v46;
        --a1[2];
        gdc::LayerDataRequestTracker::RequestStatus::~RequestStatus((gdc::LayerDataRequestTracker::RequestStatus *)(v45 + 2));
        operator delete(v45);
      }
LABEL_4:
      v5 = v87[16];
    }
  }
  v47 = (int8x8_t)a1[4];
  if (v47)
  {
    v48 = *((_QWORD *)a2 + 13);
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    v50 = v49.u32[0];
    if (v49.u32[0] > 1uLL)
    {
      v51 = *((_QWORD *)a2 + 13);
      if (v48 >= *(_QWORD *)&v47)
        v51 = v48 % *(_QWORD *)&v47;
    }
    else
    {
      v51 = (*(_QWORD *)&v47 - 1) & v48;
    }
    v52 = *(_QWORD *)v75;
    v53 = *(uint64_t ***)(*(_QWORD *)v75 + 8 * v51);
    if (v53)
    {
      v54 = *v53;
      if (*v53)
      {
        v55 = *(_QWORD *)&v47 - 1;
        v56 = *a2;
        v57 = *((unsigned __int16 *)a2 + 4);
        v58 = *((_QWORD *)a2 + 10);
        v59 = (const void *)*((_QWORD *)a2 + 2);
        v60 = *((_QWORD *)a2 + 3) - (_QWORD)v59;
        if (v49.u32[0] < 2uLL)
        {
          while (1)
          {
            v61 = v54[1];
            if (v61 == v48)
            {
              if (*((unsigned __int8 *)v54 + 16) == v56 && *((unsigned __int16 *)v54 + 12) == v57 && v54[12] == v58)
              {
                v62 = (const void *)v54[4];
                if (v54[5] - (_QWORD)v62 == v60)
                {
                  v88 = v55;
                  v91 = v50;
                  v63 = memcmp(v62, v59, v60);
                  v55 = v88;
                  v50 = v91;
                  if (!v63)
                    goto LABEL_101;
                }
              }
            }
            else if ((v61 & v55) != v51)
            {
              return;
            }
            v54 = (uint64_t *)*v54;
            if (!v54)
              return;
          }
        }
        do
        {
          v64 = v54[1];
          if (v64 == v48)
          {
            if (*((unsigned __int8 *)v54 + 16) == v56 && *((unsigned __int16 *)v54 + 12) == v57 && v54[12] == v58)
            {
              v65 = (const void *)v54[4];
              if (v54[5] - (_QWORD)v65 == v60)
              {
                v89 = v55;
                v92 = v50;
                v66 = memcmp(v65, v59, v60);
                v55 = v89;
                v50 = v92;
                if (!v66)
                {
LABEL_101:
                  if (v50 > 1)
                  {
                    if (v48 >= *(_QWORD *)&v47)
                      v48 %= *(_QWORD *)&v47;
                  }
                  else
                  {
                    v48 &= v55;
                  }
                  v67 = *(uint64_t **)(v52 + 8 * v48);
                  do
                  {
                    v68 = v67;
                    v67 = (uint64_t *)*v67;
                  }
                  while (v67 != v54);
                  if (v68 == a1 + 5)
                    goto LABEL_129;
                  v69 = v68[1];
                  if (v50 > 1)
                  {
                    if (v69 >= *(_QWORD *)&v47)
                      v69 %= *(_QWORD *)&v47;
                  }
                  else
                  {
                    v69 &= v55;
                  }
                  if (v69 != v48)
                  {
LABEL_129:
                    if (!*v54)
                      goto LABEL_130;
                    v70 = *(_QWORD *)(*v54 + 8);
                    if (v50 > 1)
                    {
                      if (v70 >= *(_QWORD *)&v47)
                        v70 %= *(_QWORD *)&v47;
                    }
                    else
                    {
                      v70 &= v55;
                    }
                    if (v70 != v48)
LABEL_130:
                      *(_QWORD *)(v52 + 8 * v48) = 0;
                  }
                  v71 = (uint64_t *)*v54;
                  if (*v54)
                  {
                    v72 = v71[1];
                    if (v50 > 1)
                    {
                      if (v72 >= *(_QWORD *)&v47)
                        v72 %= *(_QWORD *)&v47;
                    }
                    else
                    {
                      v72 &= v55;
                    }
                    if (v72 != v48)
                    {
                      *(_QWORD *)(*(_QWORD *)v75 + 8 * v72) = v68;
                      v71 = (uint64_t *)*v54;
                    }
                  }
                  *v68 = (uint64_t)v71;
                  *v54 = 0;
                  --a1[6];
                  v73 = (void *)v54[16];
                  if (v73)
                  {
                    v54[17] = (uint64_t)v73;
                    operator delete(v73);
                  }
                  if (*((_BYTE *)v54 + 112))
                    *((_BYTE *)v54 + 112) = 0;
                  v74 = (void *)v54[4];
                  if (v74 != (void *)v54[6])
                    free(v74);
                  operator delete(v54);
                  return;
                }
              }
            }
          }
          else
          {
            if (v64 >= *(_QWORD *)&v47)
              v64 %= *(_QWORD *)&v47;
            if (v64 != v51)
              return;
          }
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
    }
  }
}

uint64_t `non-virtual thunk to'md::BuildingRenderLayer::heightAtPoint(uint64_t a1, double *a2)
{
  return md::BuildingRenderLayer::heightAtPoint(a1 - 368, a2);
}

uint64_t md::BuildingRenderLayer::heightAtPoint(uint64_t a1, double *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  float v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  float *v27;
  char v28;
  uint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  uint64_t i;
  float v37;
  float v39;
  float v40;
  float v42;
  float v43;
  unint64_t v44;
  int8x8_t *v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t result;
  _QWORD v58[45];

  v2 = *(uint64_t **)(a1 + 272);
  v3 = *(uint64_t **)(a1 + 280);
  if (v2 == v3)
  {
LABEL_79:
    *(double *)&result = 0.0;
    return result;
  }
  v6 = *a2;
  v5 = a2[1];
  while (1)
  {
    v7 = *v2;
    v8 = *(double *)(*v2 + 56);
    if (v6 >= v8)
    {
      v10 = *(double *)(v7 + 72);
      v9 = *(double *)(v7 + 80);
      v11 = *(double *)(v7 + 64);
      v12 = v6 >= v10 || v5 < v11;
      if (!v12 && v5 < v9)
        break;
    }
    if (++v2 == v3)
      goto LABEL_79;
  }
  v14 = (v6 - v8) / (v10 - v8);
  v15 = (v5 - v11) / (v9 - v11);
  v16 = *(_QWORD *)(v7 + 384);
  v17 = geo::codec::VectorTile::totalBuildingFootprintsCount(*(geo::codec::VectorTile **)(v16 + 904));
  if (v17)
  {
    v18 = v17;
    v19 = 0;
    while (1)
    {
      v20 = geo::codec::buildingFootprintFeatureAtIndex(v16 + 904, v19);
      if (v20)
      {
        v21 = (_QWORD *)v20;
        if (!*(_BYTE *)(v20 + 128))
        {
          v22 = *(unsigned int *)(v20 + 100);
          if ((_DWORD)v22)
            break;
        }
      }
LABEL_15:
      if (++v19 == v18)
        goto LABEL_38;
    }
    v23 = 0;
    while (1)
    {
      v58[0] = 0;
      v24 = geo::codec::multiSectionFeaturePoints(v21, v23, v58);
      if (v58[0])
      {
        v25 = 0;
        v26 = 0;
        v27 = (float *)v24 + 1;
        do
        {
          if (v58[0] - 1 == v26)
            v29 = 0;
          else
            v29 = v26 + 1;
          v30 = (float *)&v24[v29];
          v31 = *v27;
          v32 = v30[1];
          v28 = fminf(*v27, v32) <= v15
             && fmaxf(v31, v32) >= v15
             && ((v33 = *(v27 - 1), v34 = *v30, fmaxf(v33, *v30) >= v14) ? (v35 = v31 == v32) : (v35 = 1), !v35)
             && (v33 == v34
              || (float)((float)((float)((float)(v34 - v33) * (float)(v15 - v31)) / (float)(v32 - v31)) + v33) >= v14);
          ++v26;
          v25 += v28;
          v27 += 2;
        }
        while (v58[0] != v26);
        if ((v25 & 1) != 0)
          break;
      }
      if (++v23 == v22)
        goto LABEL_15;
    }
    v43 = geo::codec::buildingFootprintExtrusionHeight((uint64_t)v21, v23);
    v44 = v21[5];
  }
  else
  {
LABEL_38:
    for (i = *(_QWORD *)(v16 + 960); ; i += 432)
    {
      if (i == *(_QWORD *)(v16 + 968))
        goto LABEL_79;
      v37 = *(float *)(i + 4);
      if (*(float *)i <= v14 && v37 > v14)
      {
        v40 = *(float *)(i + 8);
        v39 = *(float *)(i + 12);
        if (v40 <= v15 && v39 > v15)
          break;
      }
    }
    v42 = (float)((float)(v15 - v40) * 20.0) / (float)(v39 - v40);
    LOBYTE(v42) = *(_BYTE *)(i
                           + 20
                           * (int)vcvtms_s32_f32((float)((float)(v14 - *(float *)i) * 20.0) / (float)(v37 - *(float *)i))
                           + (int)vcvtms_s32_f32(v42)
                           + 24);
    v43 = *(float *)(i + 16)
        + (float)((float)((float)LODWORD(v42) * 0.0039216) * (float)(*(float *)(i + 20) - *(float *)(i + 16)));
    v44 = *(_QWORD *)(i + 424);
  }
  v45 = *(int8x8_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) + 1120);
  v46 = v45[2];
  if (!*(_QWORD *)&v46)
    goto LABEL_81;
  v47 = (uint8x8_t)vcnt_s8(v46);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.u32[0] > 1uLL)
  {
    v48 = 0xEC9B77B4222D22FFLL % *(_QWORD *)&v46;
    if (*(_QWORD *)&v46 > 0xEC9B77B4222D22FFLL)
      v48 = 0xEC9B77B4222D22FFLL;
  }
  else
  {
    v48 = (*(_QWORD *)&v46 - 1) & 0xEC9B77B4222D22FFLL;
  }
  v49 = *(_QWORD **)(*(_QWORD *)&v45[1] + 8 * v48);
  if (!v49)
    goto LABEL_81;
  v50 = (_QWORD *)*v49;
  if (!v50)
    goto LABEL_81;
  if (v47.u32[0] < 2uLL)
  {
    v51 = *(_QWORD *)&v46 - 1;
    while (1)
    {
      v53 = v50[1];
      if (v53 == 0xEC9B77B4222D22FFLL)
      {
        if (v50[2] == 0xEC9B77B4222D22FFLL)
          goto LABEL_72;
      }
      else if ((v53 & v51) != v48)
      {
        goto LABEL_81;
      }
      v50 = (_QWORD *)*v50;
      if (!v50)
        goto LABEL_81;
    }
  }
  while (1)
  {
    v52 = v50[1];
    if (v52 == 0xEC9B77B4222D22FFLL)
      break;
    if (v52 >= *(_QWORD *)&v46)
      v52 %= *(_QWORD *)&v46;
    if (v52 != v48)
      goto LABEL_81;
LABEL_61:
    v50 = (_QWORD *)*v50;
    if (!v50)
      goto LABEL_81;
  }
  if (v50[2] != 0xEC9B77B4222D22FFLL)
    goto LABEL_61;
LABEL_72:
  v54 = v50[5];
  if (v54)
  {
    md::VenueLogic::logicContext((md::VenueLogic *)v58, v54);
    if (md::VenueLogicContext::venueContainsBuildingWithId((md::VenueLogicContext *)v58[10], v58[11], v44))
    {
      v55 = fmaxf((float)(*(float *)(a1 + 412) * 2.0) + -31.0, 0.0);
      v56 = v55 <= 1.0 ? 1.0 - v55 : 0.0;
      if (v56 < 0.00000011921)
      {
        md::VenueLogicContext::~VenueLogicContext((md::VenueLogicContext *)v58);
        goto LABEL_79;
      }
    }
    md::VenueLogicContext::~VenueLogicContext((md::VenueLogicContext *)v58);
  }
LABEL_81:
  *(double *)&result = (*(double *)(v7 + 72) - *(double *)(v7 + 56)) * (*(float *)(v7 + 412) * v43);
  return result;
}

float *md::DashTextureCache::textureForPattern(_QWORD *a1, float *a2, float *a3, unsigned int a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float *v26;
  unint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  float *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float *v66;
  float *v67;
  float *v68;
  float *v69;
  float v70;
  char v71;
  float v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  float *v77;
  float *i;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  __int16 v83;
  __int16 v84;
  unsigned __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  _QWORD *v96;
  void *v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  int v103;
  float *v104;
  uint64_t v106;
  unint64_t j;
  int v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float *v115;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  __int128 v119;
  uint64_t v120;
  unint64_t v121;
  int shared_owners_high;
  int shared_owners;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  float *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  float *result;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  float *v139;
  _QWORD *v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  __int16 v149;
  char v150;
  char v151;

  v10 = *((_QWORD *)a3 + 3);
  v11 = *(_QWORD *)a3;
  v12 = *((_QWORD *)a3 + 1);
  v13 = v12 - *(_QWORD *)a3;
  if (v12 == *(_QWORD *)a3)
  {
    v19 = 0;
    v18 = 0;
    v16 = 0;
  }
  else
  {
    if (v13 < 0)
      goto LABEL_200;
    v14 = v13 >> 2;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(*((_QWORD *)a3 + 3));
    v16 = v15;
    v17 = 0;
    do
    {
      if (v15 + v17)
        *(_DWORD *)(v15 + v17) = *(_DWORD *)(v11 + v17);
      v17 += 4;
    }
    while (v11 + v17 != v12);
    v18 = v15 + v17;
    v19 = v15 + 4 * v14;
  }
  v20 = a3[8];
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = v10;
  v21 = v18 - v16;
  v142 = a4;
  if (v18 == v16)
  {
    v26 = 0;
    v24 = 0;
  }
  else
  {
    if (v21 < 0)
      goto LABEL_200;
    v22 = v21 >> 2;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    v24 = (float *)v23;
    v25 = 0;
    v144 = v23;
    v146 = v23 + 4 * v22;
    a4 = v142;
    do
    {
      if (v23 + v25)
        *(_DWORD *)(v23 + v25) = *(_DWORD *)(v16 + v25);
      v25 += 4;
    }
    while (v16 + v25 != v18);
    v26 = (float *)(v23 + v25);
    v145 = v23 + v25;
  }
  v148 = v20;
  v143 = (int)(float)(a5 + 0.5);
  v149 = (int)(float)(a5 + 0.5);
  v150 = 0;
  v151 = a4;
  if (v16)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v16, v19 - v16);
  v27 = (LODWORD(v20) - 0x61C8864680B57FA7) ^ 0x11;
  if (v20 == 0.0)
    v27 = 0x9E3779B97F4A8048;
  if (v24 != v26)
  {
    v28 = v24;
    do
    {
      v29 = *v28++;
      v30 = LODWORD(v29) - 0x61C8864680B583EBLL;
      if (v29 == 0.0)
        v30 = 0x9E3779B97F4A7C15;
      v27 ^= (v27 >> 2) + (v27 << 6) + v30;
    }
    while (v28 != v26);
  }
  v31 = *(int8x8_t *)(a2 + 2);
  if (v31)
  {
    v32 = v27 ^ a4 ^ v143;
    v33 = (uint8x8_t)vcnt_s8(v31);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v34 = v32;
      if (v32 >= *(_QWORD *)&v31)
        v34 = v32 % *(_QWORD *)&v31;
    }
    else
    {
      v34 = (*(_QWORD *)&v31 - 1) & v32;
    }
    v35 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v34);
    if (v35)
    {
      v36 = *v35;
      if (v36)
      {
        v37 = v26 - v24;
        if (v33.u32[0] < 2uLL)
        {
          v38 = *(_QWORD *)&v31 - 1;
          while (1)
          {
            v39 = v36[1];
            if (v32 == v39)
            {
              if (*((float *)v36 + 12) == v20)
              {
                v40 = v36[2];
                v41 = v36[3];
                if (v37 == (v41 - v40) >> 2)
                {
                  if (v41 == v40)
                  {
LABEL_44:
                    if (*((unsigned __int16 *)v36 + 28) == (_DWORD)v143
                      && !*((_BYTE *)v36 + 58)
                      && *((unsigned __int8 *)v36 + 59) == a4)
                    {
                      goto LABEL_192;
                    }
                  }
                  else
                  {
                    v42 = 0;
                    v43 = 1;
                    while (vabds_f32(*(float *)(v40 + 4 * v42), v24[v42]) <= 0.00000011921)
                    {
                      v42 = v43++;
                      if (v37 <= v42)
                        goto LABEL_44;
                    }
                  }
                }
              }
            }
            else if ((v39 & v38) != v34)
            {
              goto LABEL_64;
            }
            v36 = (uint64_t *)*v36;
            if (!v36)
              goto LABEL_64;
          }
        }
        do
        {
          v44 = v36[1];
          if (v32 == v44)
          {
            if (*((float *)v36 + 12) == v20)
            {
              v45 = v36[2];
              v46 = v36[3];
              if (v37 == (v46 - v45) >> 2)
              {
                if (v46 == v45)
                {
LABEL_58:
                  if (*((unsigned __int16 *)v36 + 28) == (_DWORD)v143
                    && !*((_BYTE *)v36 + 58)
                    && *((unsigned __int8 *)v36 + 59) == a4)
                  {
                    goto LABEL_192;
                  }
                }
                else
                {
                  v47 = 0;
                  v48 = 1;
                  while (vabds_f32(*(float *)(v45 + 4 * v47), v24[v47]) <= 0.00000011921)
                  {
                    v47 = v48++;
                    if (v37 <= v47)
                      goto LABEL_58;
                  }
                }
              }
            }
          }
          else
          {
            if (v44 >= *(_QWORD *)&v31)
              v44 %= *(_QWORD *)&v31;
            if (v44 != v34)
              break;
          }
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
    }
  }
LABEL_64:
  v49 = (unsigned __int8 *)operator new(0x60uLL);
  *((_QWORD *)v49 + 1) = 0;
  *((_QWORD *)v49 + 2) = 0;
  *(_QWORD *)v49 = &off_1E42DACC8;
  v50 = *((_QWORD *)a3 + 3);
  v51 = *(_QWORD *)a3;
  v52 = *((_QWORD *)a3 + 1);
  v53 = v52 - *(_QWORD *)a3;
  if (v52 == *(_QWORD *)a3)
  {
    v58 = 0;
    v56 = 0;
    v138 = 0;
  }
  else
  {
    if (v53 < 0)
      goto LABEL_200;
    v54 = v53 >> 2;
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(*((_QWORD *)a3 + 3));
    v56 = (float *)v55;
    v57 = 0;
    do
    {
      if (v55 + v57)
        *(_DWORD *)(v55 + v57) = *(_DWORD *)(v51 + v57);
      v57 += 4;
    }
    while (v51 + v57 != v52);
    v58 = (float *)(v55 + v57);
    v138 = v55 + 4 * v54;
  }
  v59 = *((_DWORD *)a3 + 8);
  *((_QWORD *)v49 + 4) = 0;
  *((_QWORD *)v49 + 5) = 0;
  *((_QWORD *)v49 + 3) = 0;
  *((_QWORD *)v49 + 6) = v50;
  v60 = (char *)v58 - (char *)v56;
  v140 = a1;
  v141 = v50;
  if (v58 == v56)
  {
    v65 = 0;
    v63 = 0;
    v66 = v58;
  }
  else
  {
    if (v60 < 0)
      goto LABEL_200;
    v61 = v60 >> 2;
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    v63 = v62;
    v64 = 0;
    *((_QWORD *)v49 + 3) = v62;
    *((_QWORD *)v49 + 5) = v62 + 4 * v61;
    do
    {
      if (v62 + v64)
        *(float *)(v62 + v64) = v56[v64 / 4];
      v64 += 4;
    }
    while (&v56[v64 / 4] != v58);
    v65 = v62 + v64;
    *((_QWORD *)v49 + 4) = v62 + v64;
    v66 = v56;
  }
  *((_DWORD *)v49 + 14) = v59;
  v49[80] = v142;
  *((_QWORD *)v49 + 11) = 0;
  *((_DWORD *)v49 + 18) = v59;
  *((_WORD *)v49 + 35) = v143;
  v139 = a2;
  if (v58 == v66)
  {
    v67 = (float *)operator new(0xCuLL);
    *((_DWORD *)v67 + 2) = 1;
    *(_QWORD *)v67 = 0x40000000BF800000;
    v68 = v67 + 3;
    v82 = v50;
    v81 = v142;
  }
  else
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    do
    {
      if (v68 == v67)
      {
        v71 = 1;
        v70 = 0.0;
      }
      else
      {
        v70 = *(v68 - 2);
        v71 = *((_BYTE *)v68 - 4) ^ 1;
      }
      v72 = *v66 + v70;
      if (v68 < v69)
      {
        *v68 = v70;
        v68[1] = v72;
        *((_BYTE *)v68 + 8) = v71;
        v68 += 3;
      }
      else
      {
        v73 = ((char *)v68 - (char *)v67) / 12;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        if (0x5555555555555556 * (v69 - v67) > v74)
          v74 = 0x5555555555555556 * (v69 - v67);
        if (0xAAAAAAAAAAAAAAABLL * (v69 - v67) >= 0xAAAAAAAAAAAAAAALL)
          v75 = 0x1555555555555555;
        else
          v75 = v74;
        if (v75)
        {
          if (v75 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v76 = (char *)operator new(12 * v75);
        }
        else
        {
          v76 = 0;
        }
        v77 = (float *)&v76[12 * v73];
        *v77 = v70;
        v77[1] = v72;
        *((_BYTE *)v77 + 8) = v71;
        for (i = v77; v68 != v67; *((_DWORD *)i + 2) = v80)
        {
          v79 = *(_QWORD *)(v68 - 3);
          v68 -= 3;
          v80 = *((_DWORD *)v68 + 2);
          *(_QWORD *)(i - 3) = v79;
          i -= 3;
        }
        v69 = (float *)&v76[12 * v75];
        v68 = v77 + 3;
        if (v67)
          operator delete(v67);
        v67 = i;
      }
      ++v66;
    }
    while (v66 != v58);
    v81 = v49[80];
    v63 = *((_QWORD *)v49 + 3);
    v65 = *((_QWORD *)v49 + 4);
    v82 = *((_QWORD *)v49 + 6);
  }
  v83 = v81 == 0;
  if (v143 <= 1)
    v84 = 1;
  else
    v84 = v143;
  v85 = v84 + 4 * v83;
  if ((v85 & 0xF800) != 0)
    v86 = 2048;
  else
    v86 = v85;
  *((_WORD *)v49 + 32) = v86;
  v87 = v65 - v63;
  if (v65 != v63)
  {
    if ((v87 & 0x8000000000000000) == 0)
    {
      v88 = v87 >> 2;
      v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);
      v87 = v89;
      v90 = 0;
      do
      {
        if (v89 + v90)
          *(_DWORD *)(v89 + v90) = *(_DWORD *)(v63 + v90);
        v90 += 4;
      }
      while (v63 + v90 != v65);
      v91 = v89 + 4 * v88;
      goto LABEL_119;
    }
LABEL_200:
    abort();
  }
  v91 = 0;
LABEL_119:
  v92 = (int)(float)(*((float *)v49 + 14) + 0.5);
  if (v92 <= 1)
    v92 = 1;
  if (v92 >= 0x800)
    v93 = 2048;
  else
    v93 = v92;
  *((_WORD *)v49 + 33) = v93;
  if (v87)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 40))(v82, v87, v91 - v87);
  *((_WORD *)v49 + 34) = 1;
  v94 = (std::__shared_weak_count *)operator new(0x60uLL);
  v94->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v94->__shared_owners_;
  v94->__shared_weak_owners_ = 0;
  v94->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v96 = ggl::TextureData2D::TextureData2D((uint64_t)&v94[1], v86, v93, 1u, 2, 0);
  v97 = (void *)((uint64_t (*)(_QWORD *, _QWORD))v94[1].__on_zero_shared)(v96, 0);
  if ((_DWORD)v86)
  {
    v99 = 1.0 / (float)v93;
    if ((v142 & 1) != 0)
    {
      if (v67 == v68)
      {
        bzero(v97, (v86 * v93));
      }
      else
      {
        v100 = 0;
        v98 = *((float *)v49 + 18);
        do
        {
          v101 = 0;
          v102 = (float)(v98 * (float)(int)v100) * v99;
          do
          {
            v104 = v67;
            do
            {
              if (v102 >= *v104 && v102 < v104[1])
              {
                v103 = -*((unsigned __int8 *)v104 + 8);
                goto LABEL_133;
              }
              v104 += 3;
            }
            while (v104 != v68);
            LOBYTE(v103) = 0;
LABEL_133:
            *((_BYTE *)v97 + v101 + v100 * v86) = v103;
            ++v101;
          }
          while (v101 != v86);
          ++v100;
        }
        while (v100 != v93);
      }
    }
    else
    {
      v106 = 0;
      HIWORD(v98) = 0;
      do
      {
        for (j = 0; j != v86; ++j)
        {
          v109 = 2 - j;
          v110 = j + ~(_WORD)v143;
          if (j < v143 + 2)
            v110 = 0;
          if (j >= 2)
            v109 = v110;
          v111 = fmaxf((float)v109, 0.0);
          if (v109)
            v112 = 0.5;
          else
            v112 = 1.0;
          if (v111 <= 2.0)
            v113 = v111 * 0.5;
          else
            v113 = 1.0;
          if (v67 == v68)
          {
LABEL_144:
            LOBYTE(v108) = 0;
          }
          else
          {
            v114 = (float)(*((float *)v49 + 18) * (float)(int)v106) * v99;
            v115 = v67;
            while (v114 < *v115 || v114 >= v115[1])
            {
              v115 += 3;
              if (v115 == v68)
                goto LABEL_144;
            }
            v108 = -*((unsigned __int8 *)v115 + 8);
          }
          *((_BYTE *)v97 + j + v106 * v86) = (int)(float)((float)(v112
                                                                + (float)((float)((float)(v113 * v113)
                                                                                * (float)((float)(v113 * 2.0) + -3.0))
                                                                        * v112))
                                                        * (float)v108);
        }
        ++v106;
      }
      while (v106 != v93);
    }
  }
  LOWORD(v98) = *((_WORD *)v49 + 35);
  *((float *)v49 + 19) = (float)v86 / (float)LODWORD(v98);
  v117 = (std::__shared_weak_count *)operator new(0x58uLL);
  v117->__shared_owners_ = 0;
  v118 = (unint64_t *)&v117->__shared_owners_;
  v117->__shared_weak_owners_ = 0;
  v117->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v117[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v117[1].__shared_weak_owners_ = 0;
  v117[2].__vftable = 0;
  v117[1].__shared_owners_ = 0;
  LODWORD(v117[2].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v117[2].__shared_owners_ + 4) = 0x100000001;
  *(_QWORD *)&v119 = 0x100000001;
  *((_QWORD *)&v119 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v117[2].__shared_weak_owners_ + 4) = v119;
  HIDWORD(v117[3].__shared_owners_) = 0;
  v120 = operator new();
  do
    v121 = __ldxr(p_shared_owners);
  while (__stxr(v121 + 1, p_shared_owners));
  *(_QWORD *)(v120 + 16) = 0;
  *(_QWORD *)(v120 + 24) = 0;
  *(_DWORD *)(v120 + 32) = 0;
  *(_QWORD *)(v120 + 56) = 0x100000001;
  shared_owners = v94[1].__shared_owners_;
  shared_owners_high = HIDWORD(v94[1].__shared_owners_);
  *(_DWORD *)(v120 + 64) = 0;
  *(_DWORD *)(v120 + 68) = shared_owners_high;
  *(_QWORD *)(v120 + 72) = 0x100000001;
  *(_QWORD *)(v120 + 88) = 0;
  *(_QWORD *)(v120 + 96) = 0;
  *(_QWORD *)v120 = &off_1E42BE438;
  *(_QWORD *)(v120 + 8) = 0;
  *(_QWORD *)(v120 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v120 + 48) = "";
  *(_DWORD *)(v120 + 104) = shared_owners;
  *(_QWORD *)(v120 + 112) = v94 + 1;
  *(_QWORD *)(v120 + 120) = v94;
  do
    v124 = __ldxr(p_shared_owners);
  while (__stxr(v124 + 1, p_shared_owners));
  *(_WORD *)(v120 + 128) = 0;
  *(_BYTE *)(v120 + 130) = 1;
  *(_QWORD *)(v120 + 136) = v117 + 1;
  *(_QWORD *)(v120 + 144) = v117;
  a2 = v139;
  do
    v125 = __ldxr(v118);
  while (__stxr(v125 + 1, v118));
  *(_QWORD *)(v120 + 80) = v94[1].__shared_weak_owners_;
  v126 = *((_QWORD *)v49 + 11);
  *((_QWORD *)v49 + 11) = v120;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  do
    v127 = __ldaxr(p_shared_owners);
  while (__stlxr(v127 - 1, p_shared_owners));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
  do
    v128 = __ldaxr(v118);
  while (__stlxr(v128 - 1, v118));
  if (!v128)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  do
    v129 = __ldaxr(p_shared_owners);
  while (__stlxr(v129 - 1, p_shared_owners));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
  a1 = v140;
  if (v67)
    operator delete(v67);
  if (v56)
    (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v141 + 40))(v141, v56, v138 - (_QWORD)v56);
  v130 = std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::__emplace_unique_key_args<md::DashTextureCache::Key,std::piecewise_construct_t const&,std::tuple<md::DashTextureCache::Key const&>,std::tuple<>>(v139, (uint64_t)&v144, (uint64_t)&v144);
  v131 = (std::__shared_weak_count *)*((_QWORD *)v130 + 9);
  *((_QWORD *)v130 + 8) = v49 + 24;
  *((_QWORD *)v130 + 9) = v49;
  if (v131)
  {
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
LABEL_192:
  result = std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::__emplace_unique_key_args<md::DashTextureCache::Key,std::piecewise_construct_t const&,std::tuple<md::DashTextureCache::Key const&>,std::tuple<>>(a2, (uint64_t)&v144, (uint64_t)&v144);
  v135 = *((_QWORD *)result + 9);
  *a1 = *((_QWORD *)result + 8);
  a1[1] = v135;
  if (v135)
  {
    v136 = (unint64_t *)(v135 + 8);
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  if (v144)
    return (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147 + 40))(v147, v144, v146 - v144);
  return result;
}

float *std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::__emplace_unique_key_args<md::DashTextureCache::Key,std::piecewise_construct_t const&,std::tuple<md::DashTextureCache::Key const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  float v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  void **v19;
  float *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  float v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  size_t prime;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  size_t v49;
  size_t v50;
  size_t v51;
  _QWORD *i;
  size_t v53;
  uint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  size_t v60;
  _QWORD *v61;
  float **v62;
  unint64_t v63;
  _QWORD *v65;

  v6 = *(float *)(a2 + 32);
  if (v6 == 0.0)
    v7 = 0x9E3779B97F4A8048;
  else
    v7 = (LODWORD(v6) - 0x61C8864680B57FA7) ^ 0x11;
  v8 = *(float **)a2;
  v9 = *(float **)(a2 + 8);
  if (*(float **)a2 != v9)
  {
    v10 = *(float **)a2;
    do
    {
      v11 = *v10++;
      v12 = LODWORD(v11) - 0x61C8864680B583EBLL;
      if (v11 == 0.0)
        v12 = 0x9E3779B97F4A7C15;
      v7 ^= (v7 >> 2) + (v7 << 6) + v12;
    }
    while (v10 != v9);
  }
  v13 = *(unsigned __int16 *)(a2 + 40);
  v14 = *(unsigned __int8 *)(a2 + 42);
  v15 = *(unsigned __int8 *)(a2 + 43);
  v16 = v7 ^ v13 ^ v14 ^ v15;
  v17 = *((_QWORD *)a1 + 1);
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v3 = v7 ^ v13 ^ v14 ^ v15;
      if (v16 >= v17)
        v3 = v16 % v17;
    }
    else
    {
      v3 = (v17 - 1) & v16;
    }
    v19 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
      v20 = (float *)*v19;
      if (*v19)
      {
        v21 = v9 - v8;
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v20 + 1);
            if (v22 == v16)
            {
              if (v20[12] == v6)
              {
                v23 = *((_QWORD *)v20 + 2);
                v24 = *((_QWORD *)v20 + 3);
                if (v21 == (v24 - v23) >> 2)
                {
                  if (v24 == v23)
                  {
LABEL_28:
                    if (*((unsigned __int16 *)v20 + 28) == (_DWORD)v13
                      && __PAIR64__(*((unsigned __int8 *)v20 + 59), *((unsigned __int8 *)v20 + 58)) == __PAIR64__(v15, v14))
                    {
                      return v20;
                    }
                  }
                  else
                  {
                    v25 = 0;
                    v26 = 1;
                    while (vabds_f32(*(float *)(v23 + 4 * v25), v8[v25]) <= 0.00000011921)
                    {
                      v25 = v26++;
                      if (v21 <= v25)
                        goto LABEL_28;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v17 - 1)) != v3)
            {
              goto LABEL_46;
            }
            v20 = *(float **)v20;
            if (!v20)
              goto LABEL_46;
          }
        }
        do
        {
          v27 = *((_QWORD *)v20 + 1);
          if (v27 == v16)
          {
            if (v20[12] == v6)
            {
              v28 = *((_QWORD *)v20 + 2);
              v29 = *((_QWORD *)v20 + 3);
              if (v21 == (v29 - v28) >> 2)
              {
                if (v29 == v28)
                {
LABEL_41:
                  if (*((unsigned __int16 *)v20 + 28) == (_DWORD)v13
                    && __PAIR64__(*((unsigned __int8 *)v20 + 59), *((unsigned __int8 *)v20 + 58)) == __PAIR64__(v15, v14))
                  {
                    return v20;
                  }
                }
                else
                {
                  v30 = 0;
                  v31 = 1;
                  while (vabds_f32(*(float *)(v28 + 4 * v30), v8[v30]) <= 0.00000011921)
                  {
                    v30 = v31++;
                    if (v21 <= v30)
                      goto LABEL_41;
                  }
                }
              }
            }
          }
          else
          {
            if (v27 >= v17)
              v27 %= v17;
            if (v27 != v3)
              break;
          }
          v20 = *(float **)v20;
        }
        while (v20);
      }
    }
  }
LABEL_46:
  v20 = (float *)operator new(0x50uLL);
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = v16;
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  v32 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v20 + 4) = 0;
  *((_QWORD *)v20 + 5) = v32;
  v33 = *(_DWORD **)a3;
  v34 = *(_DWORD **)(a3 + 8);
  v35 = (uint64_t)v34 - *(_QWORD *)a3;
  if (v34 != *(_DWORD **)a3)
  {
    if (v35 < 0)
      abort();
    v36 = v35 >> 2;
    v37 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    *((_QWORD *)v20 + 2) = v37;
    *((_QWORD *)v20 + 4) = &v37[v36];
    do
    {
      if (v37)
        *v37 = *v33;
      ++v33;
      ++v37;
    }
    while (v33 != v34);
    *((_QWORD *)v20 + 3) = v37;
  }
  v20[12] = *(float *)(a3 + 32);
  v20[14] = *(float *)(a3 + 40);
  *((_QWORD *)v20 + 8) = 0;
  *((_QWORD *)v20 + 9) = 0;
  v38 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v39 = a1[8];
  if (!v17 || (float)(v39 * (float)v17) < v38)
  {
    v40 = 1;
    if (v17 >= 3)
      v40 = (v17 & (v17 - 1)) != 0;
    v41 = v40 | (2 * v17);
    v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42)
      prime = v42;
    else
      prime = v41;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v17 = *((_QWORD *)a1 + 1);
    if (prime <= v17)
    {
      if (prime >= v17)
        goto LABEL_90;
      v55 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v17 < 3 || (v56 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
      {
        v55 = std::__next_prime(v55);
      }
      else
      {
        v57 = 1 << -(char)__clz(v55 - 1);
        if (v55 >= 2)
          v55 = v57;
      }
      if (prime <= v55)
        prime = v55;
      if (prime >= v17)
      {
        v17 = *((_QWORD *)a1 + 1);
LABEL_90:
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v16 >= v17)
            v3 = v16 % v17;
          else
            v3 = v16;
        }
        else
        {
          v3 = (v17 - 1) & v16;
        }
        goto LABEL_103;
      }
      if (!prime)
      {
        v65 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v65)
          operator delete(v65);
        v17 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_90;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v44 = operator new(8 * prime);
    v45 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v44;
    if (v45)
      operator delete(v45);
    v46 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v46++) = 0;
    while (prime != v46);
    v48 = (uint64_t *)(a1 + 4);
    v47 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v47)
    {
LABEL_89:
      v17 = prime;
      goto LABEL_90;
    }
    v49 = v47[1];
    v50 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v51 = v49 & v50;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v48;
      for (i = (_QWORD *)*v47; *v47; i = (_QWORD *)*v47)
      {
        v53 = i[1] & v50;
        if (v53 == v51)
        {
          v47 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v47 = *i;
          v54 = 8 * v53;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v54);
          **(_QWORD **)(*(_QWORD *)a1 + v54) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v47;
          v47 = i;
          v51 = v53;
        }
      }
      goto LABEL_89;
    }
    if (v49 >= prime)
      v49 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v48;
    v58 = (_QWORD *)*v47;
    if (!*v47)
      goto LABEL_89;
    while (1)
    {
      v60 = v58[1];
      if (v60 >= prime)
        v60 %= prime;
      if (v60 != v49)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v60))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v60) = v47;
          goto LABEL_94;
        }
        *v47 = *v58;
        v59 = 8 * v60;
        *v58 = **(_QWORD **)(*(_QWORD *)a1 + v59);
        **(_QWORD **)(*(_QWORD *)a1 + v59) = v58;
        v58 = v47;
      }
      v60 = v49;
LABEL_94:
      v47 = v58;
      v58 = (_QWORD *)*v58;
      v49 = v60;
      if (!v58)
        goto LABEL_89;
    }
  }
LABEL_103:
  v61 = *(_QWORD **)a1;
  v62 = *(float ***)(*(_QWORD *)a1 + 8 * v3);
  if (v62)
  {
    *(_QWORD *)v20 = *v62;
LABEL_111:
    *v62 = v20;
    goto LABEL_112;
  }
  *(_QWORD *)v20 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v20;
  v61[v3] = a1 + 4;
  if (*(_QWORD *)v20)
  {
    v63 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v63 >= v17)
        v63 %= v17;
    }
    else
    {
      v63 &= v17 - 1;
    }
    v62 = (float **)(*(_QWORD *)a1 + 8 * v63);
    goto LABEL_111;
  }
LABEL_112:
  ++*((_QWORD *)a1 + 3);
  return v20;
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  grl::FontManager **v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint8_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD *result;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  uint8_t buf[24];
  uint8_t *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v37 = v36;
  v34[0] = &off_1E42D9C20;
  v35 = v34;
  v36[0] = &off_1E42D9CB0;
  v39 = v38;
  v38[0] = &off_1E42D9C20;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsGenerateGlyphInfos", (const char *)&unk_1A0189141, buf, 2u);
  }

  v3 = v35;
  if (v35 == v34)
  {
    v4 = 4;
    v3 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = v37;
  if (v37 == v36)
  {
    v6 = 4;
    v5 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  v7 = (unsigned __int8 **)a1[1];
  v8 = (unsigned __int8 **)a1[2];
  while (v7 != v8)
  {
    v10 = *v7;
    v11 = (grl::FontManager **)objc_msgSend(*(id *)(a1[5] + 96), "grlFontManager");
    v12 = atomic_load(v10 + 125);
    if ((v12 & 1) == 0)
    {
      if (*(_QWORD *)v10)
        md::TextDataString::generateGlyphInfosAndPositions((md::TextDataString *)v10, v11);
      atomic_store(1u, v10 + 125);
    }
    v9 = *v7;
    v7 += 2;
    atomic_store(0, v9 + 124);
  }
  v14 = a1[5];
  v13 = a1[6];
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 152) + 136);
  if (v13)
  {
    v16 = (unint64_t *)(v13 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v19 = a1[7];
  v18 = a1[8];
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v33 = 0;
  v22 = (uint8_t *)operator new(0x28uLL);
  *(_QWORD *)v22 = &off_1E42D9C68;
  *((_QWORD *)v22 + 1) = v14;
  *((_QWORD *)v22 + 2) = v13;
  *((_QWORD *)v22 + 3) = v19;
  *((_QWORD *)v22 + 4) = v18;
  v33 = v22;
  geo::TaskQueue::async(&v30, v15, buf);
  v23 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v33;
  if (v33 == buf)
  {
    v27 = 4;
    v26 = buf;
  }
  else
  {
    if (!v33)
      goto LABEL_38;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_38:
  if (!v39)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F1A6BA4);
  }
  (*(void (**)(_QWORD *))(*v39 + 48))(v39);
  result = v39;
  if (v39 == v38)
  {
    v29 = 4;
    result = v38;
  }
  else
  {
    if (!v39)
      return result;
    v29 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint8_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint8_t buf[24];
  uint8_t *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v42 = v41;
  v39[0] = &off_1E42D99E0;
  v40 = v39;
  v41[0] = &off_1E42D9A70;
  v44 = v43;
  v43[0] = &off_1E42D99E0;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderIcon", (const char *)&unk_1A0189141, buf, 2u);
  }

  v3 = v40;
  if (v40 == v39)
  {
    v4 = 4;
    v3 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = v42;
  if (v42 == v41)
  {
    v6 = 4;
    v5 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  v7 = a1[1];
  v8 = a1[3];
  v9 = (std::__shared_weak_count *)a1[5];
  v35 = a1[4];
  v36 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, 1, v8, &v35);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  v13 = a1[6];
  v12 = a1[7];
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 136);
  if (v12)
  {
    v15 = (unint64_t *)(v12 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = a1[1];
  v17 = a1[2];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v22 = a1[8];
  v21 = a1[9];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v38 = 0;
  v25 = (uint8_t *)operator new(0x38uLL);
  *(_QWORD *)v25 = &off_1E42D9A28;
  *((_QWORD *)v25 + 1) = v13;
  *((_QWORD *)v25 + 2) = v12;
  *((_QWORD *)v25 + 3) = v18;
  *((_QWORD *)v25 + 4) = v17;
  *((_QWORD *)v25 + 5) = v22;
  *((_QWORD *)v25 + 6) = v21;
  v38 = v25;
  geo::TaskQueue::async(&v33, v14, buf);
  v26 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v38;
  if (v38 == buf)
  {
    v30 = 4;
    v29 = buf;
  }
  else
  {
    if (!v38)
      goto LABEL_39;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_39:
  if (!v44)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F1A7000);
  }
  (*(void (**)(_QWORD *))(*v44 + 48))(v44);
  result = v44;
  if (v44 == v43)
  {
    v32 = 4;
    result = v43;
  }
  else
  {
    if (!v44)
      return result;
    v32 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v32))();
}

void sub_19F1A7010(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F1A701C()
{
  JUMPOUT(0x19F1A7024);
}

void grl::IconImage::image(grl::IconImage *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  NSObject *v15;
  __int128 v16;

  v4 = (std::mutex *)((char *)this + 208);
  std::mutex::lock((std::mutex *)((char *)this + 208));
  v5 = *((_QWORD *)this + 1);
  if ((!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) == 0) && *(_QWORD *)this)
  {
    grl::IconRenderer::renderImage(*(grl::IconRenderer **)this, &v16);
    v6 = v16;
    v16 = 0uLL;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *(_OWORD *)((char *)this + 8) = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::unique_ptr<grl::IconRenderer>::reset[abi:nn180100]((grl::IconRenderer **)this, 0);
  }
  v13 = *((_QWORD *)this + 1);
  if (v13 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13) & 1) != 0)
  {
    v14 = *(const void **)(*((_QWORD *)this + 1) + 16);
    *a2 = &off_1E42B4870;
    if (v14)
      CFRetain(v14);
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v15 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "grl::IconImage failed to generate the final icon image.", (uint8_t *)&v16, 2u);
    }
    v14 = 0;
    *a2 = &off_1E42B4870;
  }
  a2[1] = v14;
  std::mutex::unlock(v4);
}

void md::LabelIcon::setImage(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int8 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float32x4_t v21;
  float64_t v22;
  float64x2_t v23;
  float32x2_t v24;
  float64_t v25;
  float64x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  __int128 v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  id v40;
  void *v41;

  v8 = atomic_load((unsigned __int8 *)(a1 + 144));
  if ((v8 & 1) == 0)
  {
    objc_msgSend(*(id *)(a2 + 8), "size");
    v10 = v9;
    v12 = v11;
    objc_msgSend(*(id *)(a2 + 8), "anchorPoint");
    v14 = v13;
    v16 = v15;
    objc_msgSend(*(id *)(a2 + 8), "labelingPoint");
    *(float *)&v17 = v17;
    *(float *)&v18 = v18;
    *(_DWORD *)(a1 + 88) = LODWORD(v17);
    *(_DWORD *)(a1 + 92) = LODWORD(v18);
    *(float *)&v17 = v14;
    *(float *)&v18 = v16;
    *(_DWORD *)(a1 + 80) = LODWORD(v17);
    *(_DWORD *)(a1 + 84) = LODWORD(v18);
    v19 = v10;
    v20 = v12;
    *(float *)(a1 + 48) = -*(float *)&v17;
    *(float *)(a1 + 52) = -*(float *)&v18;
    *(float *)(a1 + 56) = v19 - *(float *)&v17;
    *(float *)(a1 + 60) = v20 - *(float *)&v18;
    objc_msgSend(*(id *)(a2 + 8), "collisionRect");
    v21.i64[0] = *(_QWORD *)(a1 + 80);
    v23.f64[1] = v22;
    v24 = vcvt_f32_f64(v23);
    v26.f64[1] = v25;
    v27 = vsub_f32(vcvt_f32_f64(v26), *(float32x2_t *)v21.f32);
    v28 = vadd_f32(v27, v24);
    *(float32x2_t *)&v29 = v27;
    *((float32x2_t *)&v29 + 1) = v28;
    *(_OWORD *)(a1 + 64) = v29;
    v30 = *(float *)(a1 + 136);
    if (v30 != 1.0)
    {
      v21.i64[1] = *(_QWORD *)(a1 + 88);
      *(float32x4_t *)(a1 + 80) = vmulq_n_f32(v21, v30);
      v31.i32[0] = *(_DWORD *)(a1 + 56);
      v21.i32[0] = *(_DWORD *)(a1 + 48);
      if (v31.f32[0] >= v21.f32[0] && *(float *)(a1 + 60) >= *(float *)(a1 + 52))
      {
        v31.i32[1] = *(_DWORD *)(a1 + 60);
        v21.i32[1] = *(_DWORD *)(a1 + 52);
        v32 = vsub_f32(v31, *(float32x2_t *)v21.f32);
        v33 = vmla_f32(*(float32x2_t *)v21.f32, (float32x2_t)0x3F0000003F000000, v32);
        v34 = vmaxnm_f32(v32, 0);
        v35 = vsub_f32(v33, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v34), v30 * 0.5)));
        *(float32x2_t *)(a1 + 48) = v35;
        *(float32x2_t *)(a1 + 56) = vmla_n_f32(v35, v34, v30);
      }
      v36 = vcgt_f32(v27, v28);
      if (((v36.i32[0] | v36.i32[1]) & 1) == 0)
      {
        v37 = vmla_f32(v27, (float32x2_t)0x3F0000003F000000, v24);
        v38 = vmaxnm_f32(v24, 0);
        v39 = vsub_f32(v37, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v38), v30 * 0.5)));
        *(float32x2_t *)(a1 + 64) = v39;
        *(float32x2_t *)(a1 + 72) = vmla_n_f32(v39, v38, v30);
      }
    }
  }
  objc_msgSend(*(id *)(a2 + 8), "prepareTextureWithAtlas:", a4);
  *(_BYTE *)(a1 + 141) = 1;
  v40 = *(id *)(a2 + 8);
  v41 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v40;

  if (!a3)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      atomic_store(1u, (unsigned __int8 *)(a1 + 143));
      atomic_store(1u, (unsigned __int8 *)(a1 + 144));
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 142));
  }
}

void sub_19F1A7494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_19F1A78D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *ggl::TextureData2D::TextureData2D(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _QWORD *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  int v26;
  uint64_t v27;
  geo::read_write_lock *v28;
  const char *v29;
  malloc_zone_t *zone;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *v34;
  _BYTE v35[4];
  unsigned int v36;
  uint64_t v37;

  v8 = a4;
  LODWORD(v9) = a3;
  LODWORD(v10) = a2;
  v11 = (_QWORD *)a1;
  v37 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = off_1E42B67F0;
  *(_QWORD *)(a1 + 32) = 0;
  v12 = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if ((v13 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      v26 = a6;
      v27 = operator new();
      *(_QWORD *)(v27 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v27 + 24) = "GeoGL";
      *(_OWORD *)(v27 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v27 = &off_1E42B5668;
      *(_QWORD *)(v27 + 8) = "GeoGL";
      *(_OWORD *)(v27 + 72) = 0u;
      *(_OWORD *)(v27 + 88) = 0u;
      *(_OWORD *)(v27 + 104) = 0u;
      *(_OWORD *)(v27 + 120) = 0u;
      *(_OWORD *)(v27 + 136) = 0u;
      *(_OWORD *)(v27 + 152) = 0u;
      *(_OWORD *)(v27 + 168) = 0u;
      *(_OWORD *)(v27 + 184) = 0u;
      *(_OWORD *)(v27 + 200) = 0u;
      *(_OWORD *)(v27 + 216) = 0u;
      *(_OWORD *)(v27 + 232) = 0u;
      *(_QWORD *)(v27 + 248) = 0;
      *(_OWORD *)(v27 + 56) = 0u;
      v28 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v27 + 56), 0);
      if ((_DWORD)v28)
        geo::read_write_lock::logFailure(v28, (uint64_t)"initialization", v29);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v27 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v27 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v27;
      a6 = v26;
    }
  }
  v11[7] = ggl::Allocator::instance(void)::alloc;
  v11[8] = 0;
  v14 = v8;
  v15 = v11[4];
  v16 = (v11[5] - v15) >> 3;
  if (v8 <= v16)
  {
    v17 = 0;
    if (v8 < v16)
      v11[5] = v15 + 8 * v8;
  }
  else
  {
    a1 = std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(v12, v8 - v16);
    v17 = v11[8];
  }
  v18 = 8 * v8;
  MEMORY[0x1E0C80A78](a1);
  bzero(&v35[-((v18 + 15) & 0xFFFFFFFF0)], v18);
  if (v8)
  {
    v36 = v8;
    v19 = a6;
    v9 = v9;
    v20 = &v35[-((v18 + 15) & 0xFFFFFFFF0)];
    v10 = v10;
    do
    {
      *v20++ = v17;
      v17 += ggl::pixelFormatPixelsSize(a5, v10, v9);
      if (v10 <= 1)
        v10 = 1;
      else
        v10 >>= 1;
      if (v9 <= 1)
        v9 = 1;
      else
        v9 >>= 1;
      --v14;
    }
    while (v14);
    v11[8] = v17;
    a6 = v19;
    v8 = v36;
  }
  if (!v17)
  {
    v11[3] = 0;
    if (!v8)
      return v11;
    goto LABEL_24;
  }
  {
    v31 = operator new();
    *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v31 + 24) = "GeoGL";
    *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v31 = &off_1E42B5668;
    *(_QWORD *)(v31 + 8) = "GeoGL";
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_OWORD *)(v31 + 152) = 0u;
    *(_OWORD *)(v31 + 168) = 0u;
    *(_OWORD *)(v31 + 184) = 0u;
    *(_OWORD *)(v31 + 200) = 0u;
    *(_OWORD *)(v31 + 216) = 0u;
    *(_OWORD *)(v31 + 232) = 0u;
    *(_QWORD *)(v31 + 248) = 0;
    *(_OWORD *)(v31 + 56) = 0u;
    v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
    if ((_DWORD)v32)
      geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
    v34 = malloc_create_zone(0, 0);
    *(_QWORD *)(v31 + 48) = v34;
    malloc_set_zone_name(v34, "GeoGL");
    *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v31;
  }
  v22 = *(_QWORD *)ggl::Allocator::instance(void)::alloc;
  if (a6)
    v23 = *(uint64_t (**)(void))(v22 + 24);
  else
    v23 = *(uint64_t (**)(void))(v22 + 16);
  v11[3] = v23();
  if (v8)
  {
LABEL_24:
    v24 = 0;
    do
    {
      *(_QWORD *)(v11[4] + v24) = v11[3] + *(_QWORD *)&v35[v24 - ((v18 + 15) & 0xFFFFFFFF0)];
      v24 += 8;
    }
    while (v18 != v24);
  }
  return v11;
}

uint64_t ggl::pixelFormatPixelsSize(int a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  uint64x2_t v6;
  float64x2_t v7;
  unint64_t v8;
  uint64x2_t v9;
  uint64x2_t v11;
  uint64x2_t v12;
  uint64x2_t v17;
  uint64x2_t v18;
  uint64x2_t v19;
  uint64x2_t v20;
  uint64x2_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  unint64_t v24;
  unint64_t v25;

  result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 25:
      return a3 * a2;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
      return 2 * a3 * a2;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 26:
      return 4 * a3 * a2;
    case 9:
    case 16:
    case 17:
      return 8 * a3 * a2;
    case 10:
    case 11:
      return 3 * a3 * a2;
    case 18:
      return 16 * a3 * a2;
    case 22:
      v24 = a2 >> 2;
      if ((a2 & 3) != 0)
        ++v24;
      v25 = a3 >> 2;
      if ((a3 & 3) != 0)
        ++v25;
      return 8 * v24 * v25;
    case 28:
    case 44:
      v20.i64[0] = a2;
      v20.i64[1] = a3;
      v7 = vcvtq_f64_u64(v20);
      __asm { FMOV            V1.2D, #0.25 }
      goto LABEL_32;
    case 29:
    case 45:
      v21.i64[0] = a2;
      v21.i64[1] = a3;
      v7 = vcvtq_f64_u64(v21);
      _Q1 = (float64x2_t)xmmword_19FFB2F20;
      goto LABEL_32;
    case 30:
    case 46:
      v22.i64[0] = a2;
      v22.i64[1] = a3;
      v7 = vcvtq_f64_u64(v22);
      v8 = 0x3FC999999999999ALL;
LABEL_31:
      _Q1 = (float64x2_t)vdupq_n_s64(v8);
      goto LABEL_32;
    case 31:
    case 47:
      v23.i64[0] = a2;
      v23.i64[1] = a3;
      v7 = vcvtq_f64_u64(v23);
      _Q1 = (float64x2_t)xmmword_19FFB2F10;
LABEL_32:
      v18 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(v7, _Q1)));
      goto LABEL_33;
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      v5 = a1 & 0xFFFFFFEF;
      switch(v5)
      {
        case ' ':
          v6.i64[0] = a2;
          v6.i64[1] = a3;
          v7 = vcvtq_f64_u64(v6);
          v8 = 0x3FC5555555555555;
          goto LABEL_31;
        case '!':
          v9.i64[0] = a2;
          v9.i64[1] = a3;
          v7 = vcvtq_f64_u64(v9);
          _Q1 = (float64x2_t)xmmword_19FFB2EE0;
          goto LABEL_32;
        case '"':
          v11.i64[0] = a2;
          v11.i64[1] = a3;
          v7 = vcvtq_f64_u64(v11);
          _Q1 = (float64x2_t)xmmword_19FFB2ED0;
          goto LABEL_32;
        case '#':
          v12.i64[0] = a2;
          v12.i64[1] = a3;
          v7 = vcvtq_f64_u64(v12);
          __asm { FMOV            V1.2D, #0.125 }
          goto LABEL_32;
        case '$':
          v17.i64[0] = a2;
          v17.i64[1] = a3;
          v7 = vcvtq_f64_u64(v17);
          _Q1 = (float64x2_t)xmmword_19FFB2EC0;
          goto LABEL_32;
        case '%':
          v19.i64[0] = a2;
          v19.i64[1] = a3;
          v7 = vcvtq_f64_u64(v19);
          _Q1 = (float64x2_t)xmmword_19FFB2EB0;
          goto LABEL_32;
        default:
          v18.i64[0] = a2;
          v18.i64[1] = a3;
          switch(v5)
          {
            case '&':
              v7 = vcvtq_f64_u64(v18);
              _Q1 = (float64x2_t)xmmword_19FFB2F00;
              goto LABEL_32;
            case '\'':
              v7 = vcvtq_f64_u64(v18);
              v8 = 0x3FB999999999999ALL;
              goto LABEL_31;
            case '(':
              v7 = vcvtq_f64_u64(v18);
              _Q1 = (float64x2_t)xmmword_19FFB2EF0;
              goto LABEL_32;
            case ')':
              v7 = vcvtq_f64_u64(v18);
              v8 = 0x3FB5555555555555;
              goto LABEL_31;
            default:
              goto LABEL_33;
          }
      }
LABEL_33:
      result = 16 * v18.i64[0] * v18.i64[1];
      break;
    case 42:
    case 43:
      result = 24 * a3 * a2;
      break;
    case 58:
      result = 4;
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;
  unsigned int v5;
  uint64x2_t v6;
  float64x2_t v7;
  unint64_t v8;
  uint64x2_t v9;
  uint64x2_t v11;
  uint64x2_t v12;
  uint64x2_t v17;
  uint64x2_t v18;
  uint64x2_t v19;
  uint64x2_t v20;
  uint64x2_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  unint64_t v24;
  unint64_t v25;

  result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 25:
      return a3 * a2;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
      return 2 * a3 * a2;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 26:
      return 4 * a3 * a2;
    case 9:
    case 16:
    case 17:
      return 8 * a3 * a2;
    case 10:
    case 11:
      return 3 * a3 * a2;
    case 18:
      return 16 * a3 * a2;
    case 22:
      v24 = a2 >> 2;
      if ((a2 & 3) != 0)
        ++v24;
      v25 = a3 >> 2;
      if ((a3 & 3) != 0)
        ++v25;
      return 8 * v24 * v25;
    case 28:
    case 44:
      v20.i64[0] = a2;
      v20.i64[1] = a3;
      v7 = vcvtq_f64_u64(v20);
      __asm { FMOV            V1.2D, #0.25 }
      goto LABEL_32;
    case 29:
    case 45:
      v21.i64[0] = a2;
      v21.i64[1] = a3;
      v7 = vcvtq_f64_u64(v21);
      _Q1 = (float64x2_t)xmmword_19FFB2F20;
      goto LABEL_32;
    case 30:
    case 46:
      v22.i64[0] = a2;
      v22.i64[1] = a3;
      v7 = vcvtq_f64_u64(v22);
      v8 = 0x3FC999999999999ALL;
LABEL_31:
      _Q1 = (float64x2_t)vdupq_n_s64(v8);
      goto LABEL_32;
    case 31:
    case 47:
      v23.i64[0] = a2;
      v23.i64[1] = a3;
      v7 = vcvtq_f64_u64(v23);
      _Q1 = (float64x2_t)xmmword_19FFB2F10;
LABEL_32:
      v18 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(v7, _Q1)));
      goto LABEL_33;
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      v5 = a1 & 0xFFFFFFEF;
      switch(v5)
      {
        case ' ':
          v6.i64[0] = a2;
          v6.i64[1] = a3;
          v7 = vcvtq_f64_u64(v6);
          v8 = 0x3FC5555555555555;
          goto LABEL_31;
        case '!':
          v9.i64[0] = a2;
          v9.i64[1] = a3;
          v7 = vcvtq_f64_u64(v9);
          _Q1 = (float64x2_t)xmmword_19FFB2EE0;
          goto LABEL_32;
        case '"':
          v11.i64[0] = a2;
          v11.i64[1] = a3;
          v7 = vcvtq_f64_u64(v11);
          _Q1 = (float64x2_t)xmmword_19FFB2ED0;
          goto LABEL_32;
        case '#':
          v12.i64[0] = a2;
          v12.i64[1] = a3;
          v7 = vcvtq_f64_u64(v12);
          __asm { FMOV            V1.2D, #0.125 }
          goto LABEL_32;
        case '$':
          v17.i64[0] = a2;
          v17.i64[1] = a3;
          v7 = vcvtq_f64_u64(v17);
          _Q1 = (float64x2_t)xmmword_19FFB2EC0;
          goto LABEL_32;
        case '%':
          v19.i64[0] = a2;
          v19.i64[1] = a3;
          v7 = vcvtq_f64_u64(v19);
          _Q1 = (float64x2_t)xmmword_19FFB2EB0;
          goto LABEL_32;
        default:
          v18.i64[0] = a2;
          v18.i64[1] = a3;
          switch(v5)
          {
            case '&':
              v7 = vcvtq_f64_u64(v18);
              _Q1 = (float64x2_t)xmmword_19FFB2F00;
              goto LABEL_32;
            case '\'':
              v7 = vcvtq_f64_u64(v18);
              v8 = 0x3FB999999999999ALL;
              goto LABEL_31;
            case '(':
              v7 = vcvtq_f64_u64(v18);
              _Q1 = (float64x2_t)xmmword_19FFB2EF0;
              goto LABEL_32;
            case ')':
              v7 = vcvtq_f64_u64(v18);
              v8 = 0x3FB5555555555555;
              goto LABEL_31;
            default:
              goto LABEL_33;
          }
      }
LABEL_33:
      result = 16 * v18.i64[0] * v18.i64[1];
      break;
    case 42:
    case 43:
      result = 24 * a3 * a2;
      break;
    case 58:
      result = 4;
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;
  unsigned int v5;
  uint64x2_t v6;
  float64x2_t v7;
  unint64_t v8;
  uint64x2_t v9;
  uint64x2_t v11;
  uint64x2_t v12;
  uint64x2_t v17;
  uint64x2_t v18;
  uint64x2_t v19;
  uint64x2_t v20;
  uint64x2_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  unint64_t v24;
  unint64_t v25;

  result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 25:
      return a3 * a2;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
      return 2 * a3 * a2;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 26:
      return 4 * a3 * a2;
    case 9:
    case 16:
    case 17:
      return 8 * a3 * a2;
    case 10:
    case 11:
      return 3 * a3 * a2;
    case 18:
      return 16 * a3 * a2;
    case 22:
      v24 = a2 >> 2;
      if ((a2 & 3) != 0)
        ++v24;
      v25 = a3 >> 2;
      if ((a3 & 3) != 0)
        ++v25;
      return 8 * v24 * v25;
    case 28:
    case 44:
      v20.i64[0] = a2;
      v20.i64[1] = a3;
      v7 = vcvtq_f64_u64(v20);
      __asm { FMOV            V1.2D, #0.25 }
      goto LABEL_32;
    case 29:
    case 45:
      v21.i64[0] = a2;
      v21.i64[1] = a3;
      v7 = vcvtq_f64_u64(v21);
      _Q1 = (float64x2_t)xmmword_19FFB2F20;
      goto LABEL_32;
    case 30:
    case 46:
      v22.i64[0] = a2;
      v22.i64[1] = a3;
      v7 = vcvtq_f64_u64(v22);
      v8 = 0x3FC999999999999ALL;
LABEL_31:
      _Q1 = (float64x2_t)vdupq_n_s64(v8);
      goto LABEL_32;
    case 31:
    case 47:
      v23.i64[0] = a2;
      v23.i64[1] = a3;
      v7 = vcvtq_f64_u64(v23);
      _Q1 = (float64x2_t)xmmword_19FFB2F10;
LABEL_32:
      v18 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(v7, _Q1)));
      goto LABEL_33;
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      v5 = a1 & 0xFFFFFFEF;
      switch(v5)
      {
        case ' ':
          v6.i64[0] = a2;
          v6.i64[1] = a3;
          v7 = vcvtq_f64_u64(v6);
          v8 = 0x3FC5555555555555;
          goto LABEL_31;
        case '!':
          v9.i64[0] = a2;
          v9.i64[1] = a3;
          v7 = vcvtq_f64_u64(v9);
          _Q1 = (float64x2_t)xmmword_19FFB2EE0;
          goto LABEL_32;
        case '"':
          v11.i64[0] = a2;
          v11.i64[1] = a3;
          v7 = vcvtq_f64_u64(v11);
          _Q1 = (float64x2_t)xmmword_19FFB2ED0;
          goto LABEL_32;
        case '#':
          v12.i64[0] = a2;
          v12.i64[1] = a3;
          v7 = vcvtq_f64_u64(v12);
          __asm { FMOV            V1.2D, #0.125 }
          goto LABEL_32;
        case '$':
          v17.i64[0] = a2;
          v17.i64[1] = a3;
          v7 = vcvtq_f64_u64(v17);
          _Q1 = (float64x2_t)xmmword_19FFB2EC0;
          goto LABEL_32;
        case '%':
          v19.i64[0] = a2;
          v19.i64[1] = a3;
          v7 = vcvtq_f64_u64(v19);
          _Q1 = (float64x2_t)xmmword_19FFB2EB0;
          goto LABEL_32;
        default:
          v18.i64[0] = a2;
          v18.i64[1] = a3;
          switch(v5)
          {
            case '&':
              v7 = vcvtq_f64_u64(v18);
              _Q1 = (float64x2_t)xmmword_19FFB2F00;
              goto LABEL_32;
            case '\'':
              v7 = vcvtq_f64_u64(v18);
              v8 = 0x3FB999999999999ALL;
              goto LABEL_31;
            case '(':
              v7 = vcvtq_f64_u64(v18);
              _Q1 = (float64x2_t)xmmword_19FFB2EF0;
              goto LABEL_32;
            case ')':
              v7 = vcvtq_f64_u64(v18);
              v8 = 0x3FB5555555555555;
              goto LABEL_31;
            default:
              goto LABEL_33;
          }
      }
LABEL_33:
      result = 16 * v18.i64[0] * v18.i64[1];
      break;
    case 42:
    case 43:
      result = 24 * a3 * a2;
      break;
    case 58:
      result = 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 3)
  {
    if (a2)
    {
      v11 = 8 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 8;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      abort();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v10, 8);
    else
      result = 0;
    v13 = (_QWORD *)(result + 8 * v7);
    v14 = 8 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 8;
    }
    while (v14);
    v17 = result + 8 * v10;
    v19 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v20 = v18 - *(_QWORD *)v3 - 8;
      if (v20 < 0x58)
        goto LABEL_36;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_36;
      v21 = (v20 >> 3) + 1;
      v22 = (_OWORD *)(result + 8 * v7 - 16);
      v23 = (__int128 *)(v18 - 16);
      result = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v24;
        v22 -= 2;
        v23 -= 2;
        result -= 4;
      }
      while (result);
      v13 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      v18 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          v25 = *(_QWORD *)(v18 - 8);
          v18 -= 8;
          *--v13 = v25;
        }
        while (v18 != v19);
      }
      v18 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v26 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v17;
    if (v18)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v26 - v18);
  }
  return result;
}

void sub_19F1A81A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void *geo::MallocZoneAllocator::callocate(malloc_zone_t **this, size_t a2, size_t a3)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;

  v6 = (pthread_rwlock_t *)(this + 7);
  v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  v9 = malloc_type_zone_calloc(this[6], a2, a3, 0x2C8B3229uLL);
  v10 = (unint64_t *)(this + 5);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v12)
    geo::read_write_lock::logFailure(v12, (uint64_t)"unlock", v13);
  return v9;
}

{
  pthread_rwlock_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;

  v6 = (pthread_rwlock_t *)(this + 7);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)(this + 7));
  v7 = malloc_type_zone_calloc(this[6], a2, a3, 0x2C8B3229uLL);
  v8 = (unint64_t *)(this + 5);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  geo::read_write_lock::unlock(v6);
  return v7;
}

void sub_19F1A82C8(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  geo::read_write_lock::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 ta2::TextureAtlas::allocateTextureRegion@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;
  __n128 result;
  __n128 v27;

  v7 = *a2;
  v8 = *(unsigned int *)(*a2 + 16);
  v9 = *(unsigned int *)(*a2 + 20);
  v10 = v8 + 2;
  v11 = v9 + 2;
  if (!a3)
  {
    if (*(_DWORD *)(a1 + 56) >= v10 && *(_DWORD *)(a1 + 60) >= v11)
      goto LABEL_8;
LABEL_7:
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 64) < v10 || *(_DWORD *)(a1 + 68) < v11)
    goto LABEL_7;
LABEL_8:
  v12 = (char *)operator new(0x78uLL);
  v13 = v12;
  *((_QWORD *)v12 + 1) = 0;
  v14 = (unint64_t *)(v12 + 8);
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E42E5C70;
  *((_QWORD *)v12 + 3) = &off_1E42C2B90;
  v15 = v12 + 24;
  v16 = *(_QWORD *)(a1 + 280);
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a1 + 272);
  *((_QWORD *)v12 + 5) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v7 = *a2;
  }
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = 0;
  *((_QWORD *)v12 + 8) = v8 | (v9 << 32);
  *(_OWORD *)(v12 + 72) = xmmword_19FFB2E30;
  v19 = a2[1];
  *((_QWORD *)v12 + 11) = v7;
  *((_QWORD *)v12 + 12) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_WORD *)v12 + 52) = 7680;
  *((_QWORD *)v12 + 14) = 0;
  v22.n128_u64[0] = (unint64_t)(v12 + 24);
  v22.n128_u64[1] = (unint64_t)v12;
  v27 = v22;
  std::mutex::lock((std::mutex *)(a1 + 160));
  v23 = *(__n128 **)(a1 + 232);
  if ((unint64_t)v23 >= *(_QWORD *)(a1 + 240))
  {
    v25 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 224, v27);
  }
  else
  {
    v23->n128_u64[0] = (unint64_t)v15;
    v23->n128_u64[1] = (unint64_t)v13;
    do
      v24 = __ldxr(v14);
    while (__stxr(v24 + 1, v14));
    v25 = v23 + 1;
  }
  *(_QWORD *)(a1 + 232) = v25;
  std::mutex::unlock((std::mutex *)(a1 + 160));
  result = v27;
  *a4 = v27;
  return result;
}

void ta2::TextureAtlas::createReloadRegionItems(__n128 **a1, uint64_t a2)
{
  __n128 *v4;
  __n128 **v5;
  __n128 *v6;
  size_t v7;
  uint64_t v8;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  int v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;

  v5 = a1 + 1;
  v4 = a1[1];
  v6 = *a1;
  a1[1] = 0;
  *a1 = 0;
  a1[2] = 0;
  v7 = (char *)v4 - (char *)v6;
  v8 = v4 - v6;
  if (v4 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0)
      abort();
    v9 = (__n128 *)operator new(v7);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v8];
  }
  std::vector<ta2::TextureAtlas::RegionItem>::reserve(a2, v8 - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  if (v4 != v6)
  {
    v10 = v6;
    while (1)
    {
      v12 = v10->n128_u64[0];
      if (*(_BYTE *)(v10->n128_u64[0] + 80) != 2)
      {
        v13 = (char)--*(_BYTE *)(v12 + 81);
        if (v13 <= 0)
        {
          v37 = 0;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v18 = (std::__shared_weak_count *)v10->n128_u64[1];
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
            *(_QWORD *)&v33 = v12;
            *((_QWORD *)&v33 + 1) = v18;
          }
          else
          {
            *(_QWORD *)&v33 = v12;
          }
          v37 = 1;
          v21 = v10->n128_u64[0];
          v22 = *(_QWORD *)(v10->n128_u64[0] + 32);
          *((_QWORD *)&v36 + 1) = *(_QWORD *)(v10->n128_u64[0] + 24);
          v23 = *(_QWORD *)(v21 + 40);
          LODWORD(v35) = v22 - 1;
          DWORD1(v35) = (unint64_t)(v22 - 0x100000000) >> 32;
          DWORD2(v35) = v23 + 1;
          HIDWORD(v35) = (unint64_t)(v23 + 0x100000000) >> 32;
          v24 = *(_QWORD *)(a2 + 8);
          if (v24 < *(_QWORD *)(a2 + 16))
          {
            *(_QWORD *)v24 = v12;
            *(_QWORD *)(v24 + 8) = v18;
            if (v18)
            {
              v25 = (unint64_t *)&v18->__shared_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            v27 = v35;
            *(_OWORD *)(v24 + 16) = v34;
            *(_OWORD *)(v24 + 32) = v27;
            *(_OWORD *)(v24 + 48) = v36;
            *(_BYTE *)(v24 + 64) = v37;
            *(_QWORD *)(a2 + 8) = v24 + 72;
            if (!v18)
              goto LABEL_8;
LABEL_28:
            v28 = (unint64_t *)&v18->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            goto LABEL_8;
          }
          *(_QWORD *)(a2 + 8) = std::vector<ta2::TextureAtlas::RegionItem>::__push_back_slow_path<ta2::TextureAtlas::RegionItem const&>((char **)a2, (uint64_t)&v33);
          if (v18)
            goto LABEL_28;
        }
        else
        {
          v14 = a1[1];
          if (v14 >= a1[2])
          {
            v11 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)a1, *v10);
          }
          else
          {
            v14->n128_u64[0] = v12;
            v15 = v10->n128_u64[1];
            v14->n128_u64[1] = v15;
            if (v15)
            {
              v16 = (unint64_t *)(v15 + 8);
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v11 = v14 + 1;
          }
          *v5 = v11;
        }
      }
LABEL_8:
      if (++v10 == v4)
      {
        if (!v6)
          return;
        do
        {
          v30 = (std::__shared_weak_count *)v4[-1].n128_u64[1];
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          --v4;
        }
        while (v4 != v6);
LABEL_41:
        operator delete(v6);
        return;
      }
    }
  }
  if (v6)
    goto LABEL_41;
}

uint64_t __copy_helper_block_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t buildAssetMesh(geo::ibitstream *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  FILE *v10;
  uint64_t v11;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  uint64_t *Float;
  int32x2_t v28;
  int32x2_t v29;
  __int16 *v30;
  __int16 v31;
  int32x2_t v32;
  float v33;
  float v34;
  int32x2_t v35;
  int32x2_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  float *v45;
  float *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  float *v51;
  float *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  float v57;
  unsigned __int8 v58;
  _WORD *v59;
  _WORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unint64_t v70;
  float *v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  const float *v79;
  float *v80;
  unint64_t v81;
  uint64_t v82;
  int *v83;
  float *v84;
  int v85;
  __int16 **v86;
  uint64_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  unint64_t v91;
  __int16 *v92;
  unint64_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  __int16 *v97;
  uint64_t v98;
  const float *v99;
  unint64_t v100;
  int *v101;
  __int16 *v102;
  int v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  int v106;
  float v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  float *v120;
  int *v121;
  int v122;
  unint64_t v123;
  int64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  BOOL v128;
  uint64_t v129;
  unint64_t v130;
  const float *v131;
  float *v132;
  unint64_t v133;
  uint64_t v134;
  float *v135;
  int *v136;
  int v137;
  unint64_t v138;
  const float *v139;
  float *v140;
  unint64_t v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  float v144;
  int32x2_t v145;
  float v146;
  float v147;
  int32x2_t v148;
  int32x2_t v149;
  int32x2_t v150;
  float v151;
  int32x2_t v152;
  int32x2_t v153;
  float v154;
  float v155;
  float32x4_t v156;
  int32x2_t v157;
  float32x4_t v158;
  int32x2_t v159;
  float32x4_t v160;
  int32x2_t v161;
  float32x2_t v162;
  unsigned __int8 **v163;
  unint64_t v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  int *v169[3];
  geo::codec::Allocator *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  geo::codec::Allocator *v174;
  const float *v175;
  const float *v176;
  uint64_t v177;
  geo::codec::Allocator *v178;
  float32x4x2_t v179;
  float32x4x2_t v180;
  float32x4x3_t v181;
  float32x4x3_t v182;
  float32x4x3_t v183;
  float32x4x3_t v184;
  float32x4x3_t v185;
  float32x4x3_t v186;
  int16x8x3_t v187;

  v5 = *((unsigned __int8 *)this + 24);
  v6 = *((_BYTE *)this + 24) != 0;
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  v9 = v8 + 2;
  if (!*((_BYTE *)this + 24))
    v9 = v8 + 1;
  if (v7 < v9)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_5:
    fprintf(v10, "%s:%d Asset Parse: Read error\n");
    return 0;
  }
  v16 = v8 + 1;
  v17 = *(_QWORD *)this;
  v18 = *(unsigned __int8 *)(*(_QWORD *)this + v8);
  if (*((_BYTE *)this + 24))
  {
    if (v16 >= v7)
      v19 = 0;
    else
      v19 = *(unsigned __int8 *)(v17 + v16);
    v18 = ((v19 & (0xFFFF << (8 - v5))) >> (8 - v5)) | ((((1 << (8 - v5)) - 1) & v18) << v5);
  }
  *((_QWORD *)this + 2) = v16;
  if (a2)
  {
    v20 = v8 + 2;
    if (v7 < v20 + v6)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v21 = *(unsigned __int8 *)(v17 + v16);
    if (v5)
    {
      if (v20 >= v7)
        v22 = 0;
      else
        v22 = *(unsigned __int8 *)(v17 + v20);
      v21 = ((v22 & (0xFFFF << (8 - v5))) >> (8 - v5)) | ((((1 << (8 - v5)) - 1) & v21) << v5);
    }
    *((_QWORD *)this + 2) = v20;
    *(_BYTE *)(a3 + 128) = v21;
  }
  v23 = v18;
  if (v18 >= (unint64_t)((a5 - a4) >> 3))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: vertex format index exceeds its range\n");
    return 0;
  }
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
  if (!(_BYTE)v175)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v24.i32[0] = HIDWORD(v175);
  v161 = v24;
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
  if (!(_BYTE)v175)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v25.i32[0] = HIDWORD(v175);
  v159 = v25;
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
  if (!(_BYTE)v175)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v26.i32[0] = HIDWORD(v175);
  v157 = v26;
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
  if (!(_BYTE)v175)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v155 = *((float *)&v175 + 1);
  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
  if (!(_BYTE)v175)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v154 = *((float *)&v175 + 1);
  Float = geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
  if (!(_BYTE)v175)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v30 = (__int16 *)(a4 + 8 * v23);
  v31 = *v30;
  v151 = *((float *)&v175 + 1);
  if ((*v30 & 8) != 0)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
    if (!(_BYTE)v175)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v32.i32[0] = HIDWORD(v175);
    v152 = v32;
    Float = geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
    if (!(_BYTE)v175)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v28.i32[0] = HIDWORD(v175);
    v31 = *v30;
    v29 = v152;
  }
  else
  {
    v29.i32[0] = -1.0;
    v28.i32[0] = 2.0;
    if ((v31 & 2) != 0)
      *(float *)v28.i32 = 2.0 / (float)~(-1 << *(_BYTE *)(a4 + 8 * v23 + 5));
  }
  v150 = v28;
  v153 = v29;
  if ((v31 & 0x10) != 0)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
    if (!(_BYTE)v175)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v35.i32[0] = HIDWORD(v175);
    v148 = v35;
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
    if (!(_BYTE)v175)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v36.i32[0] = HIDWORD(v175);
    v145 = v36;
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
    if (!(_BYTE)v175)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v146 = *((float *)&v175 + 1);
    Float = geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v175);
    if (!(_BYTE)v175)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_5;
    }
    v34 = *((float *)&v175 + 1);
    v31 = *v30;
    v33 = v146;
    v29 = v148;
  }
  else
  {
    v33 = 1.0;
    v29.i32[0] = 0;
    if ((v31 & 4) != 0)
    {
      v37 = a4 + 8 * v23;
      v33 = 1.0 / (float)~(-1 << *(_BYTE *)(v37 + 6));
      v34 = 1.0 / (float)~(-1 << *(_BYTE *)(v37 + 7));
      v28.i32[0] = 0;
      v145 = v28;
    }
    else
    {
      v28.i32[0] = 0;
      v145 = v28;
      v34 = 1.0;
    }
  }
  v144 = v34;
  v147 = v33;
  v149 = v29;
  if ((v31 & 1) == 0)
  {
    geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, 0x10u);
    if ((_BYTE)v175)
    {
      if (!WORD2(v175))
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Mesh has 0 vertex\n");
        return 0;
      }
      v141 = WORD2(v175);
      std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(a3, WORD2(v175));
      v38 = *(float **)a3;
      v39 = *(float **)(a3 + 8);
      if (*(float **)a3 == v39)
      {
LABEL_61:
        if ((*v30 & 2) == 0
          || (std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(a3 + 32, v141), v45 = *(float **)(a3 + 32), v46 = *(float **)(a3 + 40), v45 == v46))
        {
LABEL_68:
          if ((*v30 & 4) == 0
            || (std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::resize(a3 + 64, v141), v51 = *(float **)(a3 + 64), v52 = *(float **)(a3 + 72), v51 == v52))
          {
LABEL_74:
            geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, 8u);
            if ((_BYTE)v175)
            {
              v58 = BYTE4(v175);
              geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, 0x20u);
              if ((_BYTE)v175)
              {
                if (!HIDWORD(v175))
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Mesh has 0 index\n");
                  return 0;
                }
                std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(a3 + 96), HIDWORD(v175));
                v59 = *(_WORD **)(a3 + 96);
                v60 = *(_WORD **)(a3 + 104);
                if (v59 == v60)
                {
LABEL_80:
                  if (*((_BYTE *)this + 24))
                  {
                    *((_BYTE *)this + 24) = 0;
                    ++*((_QWORD *)this + 2);
                  }
                  return 1;
                }
                while (1)
                {
                  geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, v58);
                  if (!(_BYTE)v175)
                    break;
                  *v59++ = WORD2(v175);
                  if (v59 == v60)
                    goto LABEL_80;
                }
                v10 = (FILE *)*MEMORY[0x1E0C80C10];
              }
              else
              {
                v10 = (FILE *)*MEMORY[0x1E0C80C10];
              }
            }
            else
            {
              v10 = (FILE *)*MEMORY[0x1E0C80C10];
            }
          }
          else
          {
            v53 = a4 + 8 * v23;
            v54 = (unsigned __int8 *)(v53 + 6);
            v55 = (unsigned __int8 *)(v53 + 7);
            while (1)
            {
              geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v54);
              if (!(_BYTE)v175)
              {
                v10 = (FILE *)*MEMORY[0x1E0C80C10];
                goto LABEL_5;
              }
              v56 = HIDWORD(v175);
              geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v55);
              if (!(_BYTE)v175)
                break;
              v57 = *(float *)v145.i32 + (float)(v144 * (float)HIDWORD(v175));
              *v51 = *(float *)v149.i32 + (float)(v147 * (float)v56);
              v51[1] = v57;
              v51 += 2;
              if (v51 == v52)
                goto LABEL_74;
            }
            v10 = (FILE *)*MEMORY[0x1E0C80C10];
          }
        }
        else
        {
          v47 = (unsigned __int8 *)(a4 + 8 * v23 + 5);
          while (1)
          {
            geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v47);
            if (!(_BYTE)v175)
            {
              v10 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_5;
            }
            v48 = HIDWORD(v175);
            geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v47);
            if (!(_BYTE)v175)
            {
              v10 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_5;
            }
            v49 = HIDWORD(v175);
            geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v47);
            if (!(_BYTE)v175)
              break;
            v50 = HIDWORD(v175);
            *v45 = *(float *)v153.i32 + (float)(*(float *)v150.i32 * (float)v48);
            v45[1] = *(float *)v153.i32 + (float)(*(float *)v150.i32 * (float)v49);
            v45[2] = *(float *)v153.i32 + (float)(*(float *)v150.i32 * (float)v50);
            v45 += 3;
            if (v45 == v46)
              goto LABEL_68;
          }
          v10 = (FILE *)*MEMORY[0x1E0C80C10];
        }
      }
      else
      {
        v40 = (unsigned __int8 *)(a4 + 8 * v23);
        v41 = v40 + 2;
        v142 = v40 + 4;
        v143 = v40 + 3;
        while (1)
        {
          geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v41);
          if (!(_BYTE)v175)
          {
            v10 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_5;
          }
          v42 = HIDWORD(v175);
          geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v143);
          if (!(_BYTE)v175)
          {
            v10 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_5;
          }
          v43 = HIDWORD(v175);
          geo::ibitstream::unpack32((uint64_t)&v175, (uint64_t *)this, *v142);
          if (!(_BYTE)v175)
            break;
          v44 = HIDWORD(v175);
          *v38 = *(float *)v161.i32 + (float)(v155 * (float)v42);
          v38[1] = *(float *)v159.i32 + (float)(v154 * (float)v43);
          v38[2] = *(float *)v157.i32 + (float)(v151 * (float)v44);
          v38 += 3;
          if (v38 == v39)
            goto LABEL_61;
        }
        v10 = (FILE *)*MEMORY[0x1E0C80C10];
      }
    }
    else
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
    }
    goto LABEL_5;
  }
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)Float);
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v178);
  memset(v169, 0, sizeof(v169));
  v170 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v174);
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = geo::codec::Allocator::instance(v170);
  geo::ibitstream::readVarInt((uint64_t)this, (uint64_t)&v163);
  if (!(_BYTE)v163)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Read error\n");
    goto LABEL_101;
  }
  v61 = v164;
  v62 = *((_QWORD *)this + 2);
  if (v164 > *((_QWORD *)this + 1)
            - ((v62 + ((unint64_t)*((unsigned __int8 *)this + 24) >> 3)) & 0x1FFFFFFFFFFFFFFFLL))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Asset size overflows the buffer\n");
    goto LABEL_101;
  }
  if (!geo::codec::decompressBinaryBlob((_DWORD *)(*(_QWORD *)this + v62), v164, (uint64_t *)&v175, &v171, v169, (uint64_t *)&v165))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Decompression has failed\n");
    goto LABEL_101;
  }
  *((_QWORD *)this + 2) += v61;
  std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(a3, 0xAAAAAAAAAAAAAAABLL * (v176 - v175));
  v63 = (uint64_t)v175;
  v65 = *(float *)v159.i32;
  v64 = *(float *)v161.i32;
  v67 = v155;
  v66 = *(float *)v157.i32;
  v68 = v154;
  v69 = v151;
  if (v176 != v175)
  {
    v70 = ((char *)v176 - (char *)v175) / 12;
    v71 = *(float **)a3;
    if (v70 <= 1)
      v70 = 1;
    if (v70 < 0xC)
    {
      v72 = 0;
      goto LABEL_119;
    }
    v72 = 0;
    v73 = !is_mul_ok(v70 - 1, 0xCuLL);
    v74 = 3 * (v70 - 1);
    if (&v71[v74 + 1] < v71 + 1 || v73 || &v71[v74 + 2] < v71 + 2 || v73 || &v71[v74] < v71)
    {
      v65 = *(float *)v159.i32;
      v64 = *(float *)v161.i32;
      v67 = v155;
      v66 = *(float *)v157.i32;
      v68 = v154;
      v69 = v151;
LABEL_119:
      v81 = v70 - v72;
      v82 = 12 * v72 + 8;
      v83 = (int *)(v63 + v82);
      v84 = (float *)((char *)v71 + v82);
      do
      {
        *(v84 - 2) = v64 + (float)(v67 * (float)*(v83 - 2));
        *(v84 - 1) = v65 + (float)(v68 * (float)*(v83 - 1));
        v85 = *v83;
        v83 += 3;
        *v84 = v66 + (float)(v69 * (float)v85);
        v84 += 3;
        --v81;
      }
      while (v81);
      goto LABEL_121;
    }
    v65 = *(float *)v159.i32;
    v64 = *(float *)v161.i32;
    v67 = v155;
    v66 = *(float *)v157.i32;
    v68 = v154;
    v69 = v151;
    if (v73)
      goto LABEL_119;
    v75 = (float32x4_t)vdupq_lane_s32(v161, 0);
    v76 = (float32x4_t)vdupq_lane_s32(v159, 0);
    v72 = v70 & 0xFFFFFFFFFFFFFFFCLL;
    v77 = (float32x4_t)vdupq_lane_s32(v157, 0);
    v78 = v70 & 0xFFFFFFFFFFFFFFFCLL;
    v79 = v175;
    v80 = *(float **)a3;
    do
    {
      v183 = vld3q_f32(v79);
      v79 += 12;
      v186.val[0] = vmlaq_n_f32(v75, vcvtq_f32_s32((int32x4_t)v183.val[0]), v155);
      v186.val[1] = vmlaq_n_f32(v76, vcvtq_f32_s32((int32x4_t)v183.val[1]), v154);
      v186.val[2] = vmlaq_n_f32(v77, vcvtq_f32_s32((int32x4_t)v183.val[2]), v151);
      vst3q_f32(v80, v186);
      v80 += 12;
      v78 -= 4;
    }
    while (v78);
    v65 = *(float *)v159.i32;
    v64 = *(float *)v161.i32;
    v66 = *(float *)v157.i32;
    if (v70 != v72)
      goto LABEL_119;
  }
LABEL_121:
  v86 = (__int16 **)(a3 + 96);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(a3 + 96), (v172 - v171) >> 2);
  v87 = v171;
  v88 = v153;
  v89 = v149;
  v90 = v150;
  if (v172 != v171)
  {
    v91 = (v172 - v171) / 12;
    v92 = *v86;
    if (v91 <= 1)
      v91 = 1;
    if (v91 >= 0x10)
    {
      v93 = 0;
      v94 = !is_mul_ok(v91 - 1, 6uLL);
      v95 = 3 * (v91 - 1);
      if (&v92[v95 + 1] < v92 + 1 || v94 || &v92[v95 + 2] < v92 + 2 || v94 || &v92[v95] < v92)
      {
        v88 = v153;
        v89 = v149;
        v90 = v150;
      }
      else
      {
        v88 = v153;
        v89 = v149;
        v90 = v150;
        if (!v94)
        {
          v93 = v91 & 0xFFFFFFFFFFFFFFF8;
          v96 = v91 & 0xFFFFFFFFFFFFFFF8;
          v97 = *v86;
          v98 = v171;
          do
          {
            v99 = (const float *)v98;
            v181 = vld3q_f32(v99);
            v99 += 12;
            v184 = vld3q_f32(v99);
            v187.val[0] = vuzp1q_s16((int16x8_t)v181.val[0], (int16x8_t)v184.val[0]);
            v187.val[1] = vuzp1q_s16((int16x8_t)v181.val[1], (int16x8_t)v184.val[1]);
            v187.val[2] = vuzp1q_s16((int16x8_t)v181.val[2], (int16x8_t)v184.val[2]);
            vst3q_s16(v97, v187);
            v97 += 24;
            v98 += 96;
            v96 -= 8;
          }
          while (v96);
          v88 = v153;
          v89 = v149;
          v90 = v150;
          if (v91 == v93)
            goto LABEL_139;
        }
      }
    }
    else
    {
      v93 = 0;
    }
    v100 = v91 - v93;
    v101 = (int *)(v87 + 12 * v93 + 8);
    v102 = &v92[3 * v93 + 1];
    do
    {
      *(v102 - 1) = *(v101 - 2);
      *v102 = *(v101 - 1);
      v103 = *v101;
      v101 += 3;
      v102[1] = v103;
      v102 += 3;
      --v100;
    }
    while (v100);
  }
LABEL_139:
  v104 = v165;
  v105 = v166;
  if (v165 == v166)
  {
    v11 = 1;
    goto LABEL_102;
  }
  v160 = (float32x4_t)vdupq_lane_s32(v88, 0);
  v162 = (float32x2_t)vdupq_lane_s32(v90, 0).u64[0];
  v156 = (float32x4_t)vdupq_lane_s32(v145, 0);
  v158 = (float32x4_t)vdupq_lane_s32(v89, 0);
  v11 = 1;
  while (1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2) * *((unsigned int *)v104 + 1) != (uint64_t)(*((_QWORD *)v104 + 2) - *((_QWORD *)v104 + 1)) >> 2)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Size does not match\n");
      goto LABEL_101;
    }
    v106 = *v104;
    if (v106 == 2)
      break;
    if (v106 != 1)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Unrecognized attribute\n");
      goto LABEL_101;
    }
    std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::resize(a3 + 64, 0xAAAAAAAAAAAAAAABLL * (v176 - v175));
    v107 = *(float *)v145.i32;
    if (*((_DWORD *)v104 + 1) != 2)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Incorrect number of components per attribute for UV\n");
      goto LABEL_101;
    }
    v108 = *(_QWORD *)(a3 + 64);
    v109 = *(_QWORD *)(a3 + 72) - v108;
    if (v109)
    {
      v110 = v109 >> 3;
      v111 = *((_QWORD *)v104 + 1);
      if (v110 <= 1)
        v110 = 1;
      if (v110 >= 8
        && ((v112 = 8 * (v110 - 1), v113 = v108 + v112, v114 = v108 + 4 + v112, v113 >= v108)
          ? (v115 = v114 >= v108 + 4)
          : (v115 = 0),
            v115 ? (v116 = (v110 - 1) >> 61 == 0) : (v116 = 0),
            v116))
      {
        v117 = v110 & 0xFFFFFFFFFFFFFFFCLL;
        v138 = v110 & 0xFFFFFFFFFFFFFFFCLL;
        v139 = (const float *)*((_QWORD *)v104 + 1);
        v140 = *(float **)(a3 + 64);
        do
        {
          v179 = vld2q_f32(v139);
          v139 += 8;
          v180.val[0] = vmlaq_n_f32(v158, vcvtq_f32_s32((int32x4_t)v179.val[0]), v147);
          v180.val[1] = vmlaq_n_f32(v156, vcvtq_f32_s32((int32x4_t)v179.val[1]), v144);
          vst2q_f32(v140, v180);
          v140 += 8;
          v138 -= 4;
        }
        while (v138);
        v107 = *(float *)v145.i32;
        if (v110 == v117)
          goto LABEL_141;
      }
      else
      {
        v117 = 0;
      }
      v118 = v110 - v117;
      v119 = 8 * v117;
      v120 = (float *)(v108 + v119 + 4);
      v121 = (int *)(v111 + v119 + 4);
      do
      {
        *(v120 - 1) = *(float *)v149.i32 + (float)(v147 * (float)*(v121 - 1));
        v122 = *v121;
        v121 += 2;
        *v120 = v107 + (float)(v144 * (float)v122);
        v120 += 2;
        --v118;
      }
      while (v118);
    }
LABEL_141:
    v104 += 72;
    if (v104 == v105)
      goto LABEL_102;
  }
  std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(a3 + 32, 0xAAAAAAAAAAAAAAABLL * (v176 - v175));
  if (*((_DWORD *)v104 + 1) == 3)
  {
    v123 = *(_QWORD *)(a3 + 32);
    v124 = *(_QWORD *)(a3 + 40) - v123;
    if (v124)
    {
      v125 = v124 / 12;
      v126 = *((_QWORD *)v104 + 1);
      if (v125 <= 1)
        v125 = 1;
      if (v125 >= 8)
      {
        v127 = 0;
        v128 = !is_mul_ok(v125 - 1, 0xCuLL);
        v129 = 12 * (v125 - 1);
        if (v123 + 4 + v129 >= v123 + 4
          && !v128
          && v123 + 8 + v129 >= v123 + 8
          && !v128
          && v123 + v129 >= v123
          && !v128)
        {
          v127 = v125 & 0xFFFFFFFFFFFFFFFCLL;
          v130 = v125 & 0xFFFFFFFFFFFFFFFCLL;
          v131 = (const float *)*((_QWORD *)v104 + 1);
          v132 = *(float **)(a3 + 32);
          do
          {
            v182 = vld3q_f32(v131);
            v131 += 12;
            v185.val[0] = vmlaq_n_f32(v160, vcvtq_f32_s32((int32x4_t)v182.val[0]), *(float *)v150.i32);
            v185.val[1] = vmlaq_n_f32(v160, vcvtq_f32_s32((int32x4_t)v182.val[1]), *(float *)v150.i32);
            v185.val[2] = vmlaq_n_f32(v160, vcvtq_f32_s32((int32x4_t)v182.val[2]), *(float *)v150.i32);
            vst3q_f32(v132, v185);
            v132 += 12;
            v130 -= 4;
          }
          while (v130);
          if (v125 == v127)
            goto LABEL_141;
        }
      }
      else
      {
        v127 = 0;
      }
      v133 = v125 - v127;
      v134 = 12 * v127;
      v135 = (float *)(v123 + v134 + 8);
      v136 = (int *)(v126 + v134 + 8);
      do
      {
        *((float32x2_t *)v135 - 1) = vmla_f32(*(float32x2_t *)v160.f32, v162, vcvt_f32_s32(*(int32x2_t *)(v136 - 2)));
        v137 = *v136;
        v136 += 3;
        *v135 = *(float *)v153.i32 + (float)(*(float *)v150.i32 * (float)v137);
        v135 += 3;
        --v133;
      }
      while (v133);
    }
    goto LABEL_141;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Incorrect number of components per attribute for normal\n");
LABEL_101:
  v11 = 0;
LABEL_102:
  v163 = &v165;
  std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v163);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v169);
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](&v171);
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v175);
  return v11;
}

void sub_19F1A989C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 232) = v1 - 216;
  std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)(v1 - 232));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 184));
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t geo::ibitstream::unpack32(uint64_t this, uint64_t *a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  v3 = *((unsigned __int8 *)a2 + 24);
  v5 = a2[1];
  v4 = a2[2];
  v6 = v4 + ((v3 + a3) >> 3);
  if (v6 > v5)
    goto LABEL_16;
  v7 = ((_BYTE)v3 + (_BYTE)a3) & 7;
  v8 = v6 == v5 && v7 != 0;
  if (a3 > 0x20 || v8)
    goto LABEL_16;
  v9 = 0;
  if (a3)
  {
    v10 = *a2;
    do
    {
      v11 = a3;
      if (8 - v3 < a3)
        v11 = 8 - v3;
      v9 = (*(unsigned __int8 *)(v10 + v4) >> (8 - v3 - v11)) & ~(-1 << v11) | (v9 << v11);
      LOBYTE(a3) = a3 - v11;
      v4 += (v11 + (unint64_t)v3) >> 3;
      a2[2] = v4;
      v3 = ((_BYTE)v3 + (_BYTE)v11) & 7;
      *((_BYTE *)a2 + 24) = v3;
    }
    while ((_BYTE)a3);
  }
  if (v4 == v6 && v7 == v3)
  {
    *(_BYTE *)this = 1;
    *(_DWORD *)(this + 4) = v9;
  }
  else
  {
LABEL_16:
    *(_BYTE *)this = 0;
  }
  return this;
}

uint64_t geo::codec::Allocator::instance(geo::codec::Allocator *this)
{
  unsigned __int8 v1;
  uint64_t v3;

    return geo::codec::Allocator::instance(void)::alloc;
  v3 = operator new();
  geo::MallocZoneAllocator::MallocZoneAllocator(v3, "GeoCodec", 0x99AFC36000000008, 0, 0);
  geo::codec::Allocator::instance(void)::alloc = v3;
  return geo::codec::Allocator::instance(void)::alloc;
}

void sub_19F1A9A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_19F1A9A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *geo::ibitstream::readFloat@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  v13 = 0;
  v2 = this[1];
  v3 = this[2];
  v4 = *((_BYTE *)this + 24);
  v5 = v3 + 5;
  if (!v4)
    v5 = v3 + 4;
  if (v2 >= v5)
  {
    v6 = *this;
    if (*((_BYTE *)this + 24))
    {
      v7 = 0;
      v8 = v6 + v3;
      v9 = v3 + 1;
      do
      {
        if (v9 + v7 >= v2)
          v10 = 0;
        else
          v10 = *(unsigned __int8 *)(v8 + v7 + 1);
        v11 = ((v10 & (0xFFFF << (8 - v4))) >> (8 - v4)) | ((((1 << (8 - v4)) + 255) & *(unsigned __int8 *)(v8 + v7)) << v4);
        this[2] = v9 + v7;
        *((_BYTE *)&v13 + v7++) = v11;
      }
      while (v7 != 4);
      v12 = v13;
    }
    else
    {
      v12 = *(_DWORD *)(v6 + v3);
      this[2] = v3 + 4;
    }
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = v12;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return this;
}

uint64_t std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v2 = result;
  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
      *(_QWORD *)(result + 8) = v3 + 12 * a2;
  }
  else
  {
    v7 = *(_QWORD *)(result + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
    {
      *(_QWORD *)(result + 8) = v4 + 12 * (12 * v6 / 0xC);
    }
    else
    {
      if (a2 > 0x1555555555555555)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 2);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0xAAAAAAAAAAAAAAALL)
        v10 = 0x1555555555555555;
      else
        v10 = v9;
      v11 = 12 * v10;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 12 * v10, 4);
      v13 = *(_QWORD *)v2;
      v12 = *(_QWORD *)(v2 + 8);
      v14 = result + 12 * v5;
      v15 = v14 + 12 * (12 * v6 / 0xC);
      if (v12 != *(_QWORD *)v2)
      {
        do
        {
          v16 = *(_QWORD *)(v12 - 12);
          v12 -= 12;
          v17 = *(_DWORD *)(v12 + 8);
          *(_QWORD *)(v14 - 12) = v16;
          v14 -= 12;
          *(_DWORD *)(v14 + 8) = v17;
        }
        while (v12 != v13);
        v12 = *(_QWORD *)v2;
      }
      *(_QWORD *)v2 = v14;
      *(_QWORD *)(v2 + 8) = v15;
      v18 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = result + v11;
      if (v12)
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v12, v18 - v12);
    }
  }
  return result;
}

uint64_t std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result;
  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = v4 - *(_QWORD *)result;
  v6 = v5 >> 3;
  v7 = a2 - (v5 >> 3);
  if (a2 <= v5 >> 3)
  {
    if (a2 < v5 >> 3)
      *(_QWORD *)(result + 8) = v3 + 8 * a2;
  }
  else
  {
    v8 = *(_QWORD *)(result + 16);
    if (v7 <= (v8 - v4) >> 3)
    {
      *(_QWORD *)(result + 8) = v4 + 8 * v7;
    }
    else
    {
      if (a2 >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v9 = v8 - v3;
      v10 = v9 >> 2;
      if (v9 >> 2 <= a2)
        v10 = a2;
      v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
      v12 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11)
        v12 = v10;
      v13 = 8 * v12;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v12, 4);
      v15 = *(_QWORD *)v2;
      v14 = *(_QWORD *)(v2 + 8);
      v16 = result + 8 * v6;
      v17 = v16 + 8 * v7;
      if (v14 != *(_QWORD *)v2)
      {
        v18 = v14 - *(_QWORD *)v2 - 8;
        if (v18 < 0x58)
          goto LABEL_25;
        if ((unint64_t)(v14 - v5 - result) < 0x20)
          goto LABEL_25;
        v19 = (v18 >> 3) + 1;
        v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = v14 - v20;
        v16 -= v20;
        v22 = (_OWORD *)(result + 8 * v6 - 16);
        v23 = (__int128 *)(v14 - 16);
        v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 2;
          v24 -= 4;
        }
        while (v24);
        v14 = v21;
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          do
          {
            v26 = *(_QWORD *)(v14 - 8);
            v14 -= 8;
            *(_QWORD *)(v16 - 8) = v26;
            v16 -= 8;
          }
          while (v14 != v15);
        }
        v14 = *(_QWORD *)v2;
      }
      *(_QWORD *)v2 = v16;
      *(_QWORD *)(v2 + 8) = v17;
      v27 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = result + v13;
      if (v14)
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v14, v27 - v14);
    }
  }
  return result;
}

uint64_t geo::ibitstream::readVarInt(uint64_t this, uint64_t *a2)
{
  char v2;
  char v3;
  _BOOL8 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  int v68;

  v2 = *((_BYTE *)a2 + 24);
  v3 = v2;
  v4 = v2 != 0;
  v5 = a2[1];
  v6 = a2[2];
  v7 = v6 + 1;
  if (!v2)
  {
    if (v5 < v6 + 1)
      goto LABEL_30;
    v13 = *a2;
    v14 = *(_BYTE *)(*a2 + v6);
    a2[2] = v7;
    v15 = v14 & 0x7F;
    if (v14 < 0)
    {
      v16 = v6 + 2;
      if (v5 < v6 + 2 + v4)
        goto LABEL_30;
      v17 = *(char *)(v13 + v7);
      a2[2] = v16;
      v15 |= (unint64_t)(v17 & 0x7F) << 7;
      if (v17 < 0)
      {
        v18 = v6 + 3;
        if (v5 < v6 + 3 + v4)
          goto LABEL_30;
        v19 = *(char *)(v13 + v16);
        a2[2] = v18;
        v15 |= (unint64_t)(v19 & 0x7F) << 14;
        if (v19 < 0)
        {
          v20 = v6 + 4;
          if (v5 < v6 + 4 + v4)
            goto LABEL_30;
          v21 = *(char *)(v13 + v18);
          a2[2] = v20;
          v15 |= (unint64_t)(v21 & 0x7F) << 21;
          if (v21 < 0)
          {
            v22 = v6 + 5;
            if (v5 < v6 + 5 + v4)
              goto LABEL_30;
            v23 = *(char *)(v13 + v20);
            a2[2] = v22;
            v15 |= (unint64_t)(v23 & 0x7F) << 28;
            if (v23 < 0)
            {
              v24 = v6 + 6;
              if (v5 < v6 + 6 + v4)
                goto LABEL_30;
              v25 = *(char *)(v13 + v22);
              a2[2] = v24;
              v15 |= (unint64_t)(v25 & 0x7F) << 35;
              if (v25 < 0)
              {
                v26 = v6 + 7;
                if (v5 < v6 + 7 + v4)
                  goto LABEL_30;
                v27 = *(char *)(v13 + v24);
                a2[2] = v26;
                v15 |= (unint64_t)(v27 & 0x7F) << 42;
                if (v27 < 0)
                {
                  v28 = v6 + 8;
                  if (v5 < v6 + 8 + v4)
                    goto LABEL_30;
                  v29 = *(char *)(v13 + v26);
                  a2[2] = v28;
                  v15 |= (unint64_t)(v29 & 0x7F) << 49;
                  if (v29 < 0)
                  {
                    v30 = v6 + 9;
                    if (v5 < v6 + 9 + v4)
                      goto LABEL_30;
                    v31 = *(char *)(v13 + v28);
                    a2[2] = v30;
                    v15 |= (unint64_t)(v31 & 0x7F) << 56;
                    if (v31 < 0)
                    {
                      v32 = v6 + 10;
                      if (v5 < v32 + v4)
                        goto LABEL_30;
                      v33 = *(unsigned __int8 *)(v13 + v30);
                      a2[2] = v32;
                      if ((v33 & 0x80) != 0)
                        goto LABEL_30;
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_28:
    *(_BYTE *)this = 1;
    *(_QWORD *)(this + 8) = v15;
    return this;
  }
  if (v5 >= v6 + 2)
  {
    v8 = 8 - v2;
    v9 = (1 << (8 - v2)) + 255;
    v10 = 0xFFFF << (8 - v2);
    v11 = *a2;
    if (v7 >= v5)
      v12 = 0;
    else
      v12 = *(unsigned __int8 *)(v11 + v7);
    v34 = ((v12 & v10) >> v8) | ((((1 << (8 - v2)) - 1) & *(_BYTE *)(*a2 + v6)) << v2);
    a2[2] = v7;
    v15 = v34 & 0x7F;
    if ((v34 & 0x80) == 0)
      goto LABEL_28;
    v35 = v6 + 2;
    if (v5 >= v6 + 2 + v4)
    {
      v36 = *(unsigned __int8 *)(v11 + v7);
      if (v35 >= v5)
        v37 = 0;
      else
        v37 = *(unsigned __int8 *)(v11 + v35);
      v38 = ((v37 & v10) >> v8) | ((v9 & v36) << v3);
      a2[2] = v35;
      v15 = v15 & 0xFFFFFFFFFFFFC07FLL | ((unint64_t)(v38 & 0x7F) << 7);
      if ((v38 & 0x80) != 0)
      {
        v39 = v6 + 3;
        if (v5 < v6 + 3 + v4)
          goto LABEL_30;
        v40 = *(unsigned __int8 *)(v11 + v35);
        v41 = v39 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v39);
        v42 = ((v41 & v10) >> v8) | ((v9 & v40) << v3);
        a2[2] = v39;
        v15 = v15 & 0xFFFFFFFFFFE03FFFLL | ((unint64_t)(v42 & 0x7F) << 14);
        if ((v42 & 0x80) != 0)
        {
          v43 = v6 + 4;
          if (v5 < v6 + 4 + v4)
            goto LABEL_30;
          v44 = *(unsigned __int8 *)(v11 + v39);
          v45 = v43 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v43);
          v46 = ((v45 & v10) >> v8) | ((v9 & v44) << v3);
          a2[2] = v43;
          v15 = v15 & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v46 & 0x7F) << 21);
          if ((v46 & 0x80) != 0)
          {
            v47 = v6 + 5;
            if (v5 < v6 + 5 + v4)
              goto LABEL_30;
            v48 = *(unsigned __int8 *)(v11 + v43);
            v49 = v47 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v47);
            v50 = ((v49 & v10) >> v8) | ((v9 & v48) << v3);
            a2[2] = v47;
            v15 = v15 & 0xFFFFFFF80FFFFFFFLL | ((unint64_t)(v50 & 0x7F) << 28);
            if ((v50 & 0x80) != 0)
            {
              v51 = v6 + 6;
              if (v5 < v6 + 6 + v4)
                goto LABEL_30;
              v52 = *(unsigned __int8 *)(v11 + v47);
              v53 = v51 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v51);
              v54 = ((v53 & v10) >> v8) | ((v9 & v52) << v3);
              a2[2] = v51;
              v15 |= (unint64_t)(v54 & 0x7F) << 35;
              if ((v54 & 0x80) != 0)
              {
                v55 = v6 + 7;
                if (v5 < v6 + 7 + v4)
                  goto LABEL_30;
                v56 = *(unsigned __int8 *)(v11 + v51);
                v57 = v55 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v55);
                v58 = ((v57 & v10) >> v8) | ((v9 & v56) << v3);
                a2[2] = v55;
                v15 |= (unint64_t)(v58 & 0x7F) << 42;
                if ((v58 & 0x80) != 0)
                {
                  v59 = v6 + 8;
                  if (v5 < v6 + 8 + v4)
                    goto LABEL_30;
                  v60 = *(unsigned __int8 *)(v11 + v55);
                  v61 = v59 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v59);
                  v62 = ((v61 & v10) >> v8) | ((v9 & v60) << v3);
                  a2[2] = v59;
                  v15 |= (unint64_t)(v62 & 0x7F) << 49;
                  if ((v62 & 0x80) != 0)
                  {
                    v63 = v6 + 9;
                    if (v5 < v6 + 9 + v4)
                      goto LABEL_30;
                    v64 = *(unsigned __int8 *)(v11 + v59);
                    v65 = v63 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v63);
                    v66 = ((v65 & v10) >> v8) | ((v9 & v64) << v3);
                    a2[2] = v63;
                    v15 |= (unint64_t)(v66 & 0x7F) << 56;
                    if ((v66 & 0x80) != 0)
                    {
                      v67 = v6 + 10;
                      if (v5 < v67 + v4)
                        goto LABEL_30;
                      v68 = v67 >= v5 ? 0 : *(unsigned __int8 *)(v11 + v67);
                      v33 = ((v68 & v10) >> v8) | ((v9 & *(_BYTE *)(v11 + v63)) << v3);
                      a2[2] = v67;
                      if ((v33 & 0x80) != 0)
                        goto LABEL_30;
LABEL_75:
                      v15 |= v33 << 63;
                      goto LABEL_28;
                    }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_28;
    }
  }
LABEL_30:
  *(_BYTE *)this = 0;
  return this;
}

uint64_t geo::ibitstream::readVarInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = *(unsigned __int8 *)(this + 24);
  v7 = *(_QWORD *)(this + 8);
  v6 = *(_QWORD *)(this + 16);
  v8 = 2;
  if (!*(_BYTE *)(this + 24))
    v8 = 1;
  while (1)
  {
    if (v7 < v8 + v6)
    {
LABEL_12:
      *(_BYTE *)a2 = 0;
      return this;
    }
    v9 = v6 + 1;
    v10 = *(unsigned __int8 *)(*(_QWORD *)this + v6);
    if (v5)
    {
      if (v9 >= v7)
        v11 = 0;
      else
        v11 = *(unsigned __int8 *)(*(_QWORD *)this + v6 + 1);
      v10 = ((v11 & (0xFFFF << (8 - v5))) >> (8 - v5)) | ((((1 << (8 - v5)) + 255) & v10) << v5);
    }
    *(_QWORD *)(this + 16) = v9;
    v4 |= (unint64_t)(v10 & 0x7F) << v2;
    if ((v10 & 0x80) == 0)
      break;
    v2 += 7;
    v6 = v9;
    if (v3++ >= 9)
      goto LABEL_12;
  }
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v4;
  return this;
}

uint64_t md::LabelExternalPointFeature::isLeafClusterChild(md::LabelExternalPointFeature *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2 || v2->__shared_owners_ == -1)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  v4 = *((_QWORD *)this + 37);
  if (!v3)
    v4 = 0;
  if (v4 && (v5 = *((_QWORD *)this + 36)) != 0)
  {
    v6 = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) >> 1) & 1;
    if (!v3)
      return v6;
  }
  else
  {
    v6 = 0;
    if (!v3)
      return v6;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

void sub_19F1AA4B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *md::LabelMapTile::updateLabels(_BYTE *this, md::LabelManager *a2, md::LabelPool *a3, int a4, int a5)
{
  md::LabelManager *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string::size_type v17;
  std::string::size_type v18;
  int v19;
  _QWORD *v20;
  _BOOL4 v21;
  _QWORD *v22;
  double *v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  double *v46;
  float64_t v47;
  float64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  int8x8_t v56;
  uint8x8_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  std::string::size_type v71;
  std::string *v72;
  std::string *p_p;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  float64x2_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  unint64_t *v91;
  unint64_t v92;
  std::string::size_type v93;
  md::LabelManager *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t **v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  md::LabelManager *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  md::LabelPoint *v120;
  double *v121;
  double v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  _DWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  __int128 v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  std::string::size_type v153;
  std::string::size_type *v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::string::size_type *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::string::size_type *v165;
  __int128 v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::string::size_type v175;
  std::string::size_type *v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::string::size_type *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::string::size_type *v187;
  __int128 v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  std::string::size_type v197;
  std::string::size_type *v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::string::size_type *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  std::string::size_type *v209;
  __int128 v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count *v218;
  std::string::size_type v219;
  std::string::size_type *v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  std::string::size_type *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::string::size_type *v231;
  __int128 v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count *v240;
  std::string::size_type v241;
  std::string::size_type *v242;
  _QWORD *v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  std::string::size_type *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  std::string::size_type *v253;
  __int128 v254;
  uint64_t v255;
  unint64_t *p_shared_owners;
  unint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t *v262;
  md::LabelPool *v263;
  std::__shared_weak_count *v264;
  unsigned __int8 *v265;
  std::__shared_weak_count *size;
  unint64_t *v267;
  unint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  unsigned int *v271;
  unsigned int *v272;
  md::LabelManager *v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t *v292;
  _BYTE *v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned __int8 *v303;
  int v304;
  md::LabelManager *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  int v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unsigned __int8 *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  unsigned int *v330;
  unsigned int *v331;
  md::LabelManager *v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t *v351;
  _BYTE *v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned __int8 *v362;
  int v363;
  md::LabelManager *v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unsigned __int8 *v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  _QWORD *v378;
  _QWORD *v379;
  unsigned int *v380;
  unsigned int *v381;
  md::LabelManager *v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t *v401;
  _BYTE *v402;
  int v403;
  uint64_t v404;
  int v405;
  uint64_t **v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned __int8 *v412;
  int v413;
  md::LabelManager *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unsigned __int8 *v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  _QWORD *v428;
  _QWORD *v429;
  unsigned int *v430;
  unsigned int *v431;
  md::LabelManager *v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t *v439;
  uint64_t *v440;
  uint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t *v451;
  _BYTE *v452;
  int v453;
  uint64_t v454;
  int v455;
  uint64_t **v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unsigned __int8 *v462;
  int v463;
  md::LabelManager *v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unsigned __int8 *v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  unsigned __int8 v480;
  unsigned __int8 v481;
  uint64_t v482;
  unsigned __int8 *v483;
  unsigned __int8 *v484;
  uint64_t v485;
  uint64_t **v486;
  unsigned __int8 *v487;
  int v488;
  _QWORD *v489;
  uint64_t *v490;
  std::__shared_weak_count *v491;
  std::__shared_weak_count *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  uint64_t v495;
  unint64_t *v496;
  unint64_t v497;
  uint64_t *v498;
  unint64_t v499;
  uint64_t *v500;
  uint64_t *v501;
  unint64_t v502;
  uint64_t **v504;
  uint64_t *v505;
  uint64_t *v506;
  uint64_t *v507;
  _QWORD *v508;
  _QWORD *v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  unsigned __int8 v514;
  uint64_t v515;
  geo::read_write_lock *v516;
  const char *v517;
  malloc_zone_t *v518;
  _QWORD *v519;
  unsigned __int8 v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  geo::read_write_lock *v525;
  const char *v526;
  malloc_zone_t *v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  unsigned int *v531;
  unsigned int *v532;
  md::LabelManager *v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t *v540;
  uint64_t *v541;
  uint64_t *v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t *v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t *v552;
  _BYTE *v553;
  int v554;
  uint64_t v555;
  int v556;
  uint64_t **v557;
  uint64_t *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unsigned __int8 *v563;
  int v564;
  md::LabelManager *v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  geo::read_write_lock *v575;
  const char *v576;
  malloc_zone_t *zone;
  uint64_t v578;
  uint64_t v579;
  _QWORD *i;
  _QWORD *v581;
  uint64_t v582;
  _QWORD *v583;
  _QWORD *v584;
  md::LabelManager *v585;
  uint64_t v586;
  md::PointLabelFeature **v587;
  md::PointLabelFeature **v588;
  md::PointLabelFeature *v590;
  unint64_t *v591;
  unint64_t v592;
  unint64_t v593;
  unsigned int *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  BOOL v598;
  long double v599;
  long double v600;
  long double v601;
  double v602;
  double v603;
  __double2 v604;
  long double v605;
  long double v606;
  long double v607;
  float64x2_t v608;
  float64x2_t v609;
  double v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  unint64_t *v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t **v617;
  uint64_t *v618;
  uint64_t **v619;
  unint64_t v620;
  uint64_t *v621;
  uint64_t *v622;
  uint64_t v623;
  unint64_t *v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unsigned __int8 *v628;
  int v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  unsigned int *v638;
  unsigned int *v639;
  uint64_t v640;
  uint64_t v641;
  _QWORD *v642;
  _QWORD *v643;
  char *v644;
  unint64_t v645;
  _QWORD *v646;
  unint64_t *v647;
  unint64_t v648;
  unint64_t v649;
  _QWORD *v650;
  _QWORD *v651;
  char *v652;
  double *v653;
  double v655;
  _QWORD *v657;
  _QWORD *v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  _BYTE *v662;
  char *v663;
  char *v664;
  unint64_t v665;
  char *v666;
  int v667;
  char *v668;
  uint64_t v669;
  _OWORD *v670;
  char *v671;
  uint64_t v672;
  __int128 v673;
  unint64_t v674;
  unsigned int *v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unint64_t *v679;
  unint64_t v680;
  unint64_t v681;
  uint64_t *v682;
  uint64_t *v683;
  uint64_t *v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t *v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t *v691;
  uint64_t *v692;
  uint64_t v693;
  uint64_t *v694;
  _BYTE *v695;
  int v696;
  uint64_t v697;
  int v698;
  uint64_t **v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unsigned __int8 *v705;
  int v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  unint64_t *v710;
  unint64_t v711;
  std::__shared_weak_count *v712;
  unint64_t *v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  _QWORD *v717;
  _QWORD *v718;
  _QWORD *v719;
  unint64_t *v720;
  unint64_t v721;
  unint64_t v722;
  _DWORD *v723;
  _DWORD *v724;
  char *v725;
  double *v726;
  double v728;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  _BYTE *v733;
  char *v734;
  char *v735;
  unint64_t v736;
  char *v737;
  int v738;
  char *v739;
  uint64_t v740;
  _OWORD *v741;
  char *v742;
  uint64_t v743;
  __int128 v744;
  unsigned int *v745;
  std::__shared_weak_count *v746;
  unint64_t *v747;
  unint64_t v748;
  unint64_t *v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t *v752;
  uint64_t *v753;
  uint64_t *v754;
  unint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t *v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t *v762;
  uint64_t v763;
  uint64_t *v764;
  _BYTE *v765;
  int v766;
  uint64_t v767;
  int v768;
  uint64_t **v769;
  uint64_t *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned __int8 *v775;
  int v776;
  std::__shared_weak_count *v777;
  unint64_t *v778;
  unint64_t v779;
  unint64_t *v780;
  unint64_t v781;
  std::__shared_weak_count *v782;
  unint64_t *v783;
  unint64_t v784;
  uint64_t v785;
  double *v786;
  md::PointLabelFeature **v787;
  md::PointLabelFeature **v788;
  md::PointLabelFeature *v790;
  unint64_t *v791;
  unint64_t v792;
  unint64_t v793;
  unsigned int *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  BOOL v798;
  long double v799;
  long double v800;
  long double v801;
  double v802;
  double v803;
  __double2 v804;
  long double v805;
  long double v806;
  long double v807;
  float64x2_t v808;
  float64x2_t v809;
  double v810;
  std::__shared_weak_count *v811;
  unint64_t *v812;
  unint64_t v813;
  unint64_t *v814;
  unint64_t v815;
  unint64_t v816;
  uint64_t **v817;
  uint64_t *v818;
  uint64_t **v819;
  unint64_t v820;
  uint64_t *v821;
  uint64_t *v822;
  uint64_t v823;
  unint64_t *v824;
  unint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unsigned __int8 *v828;
  int v829;
  std::__shared_weak_count *v830;
  unint64_t *v831;
  unint64_t v832;
  unint64_t *v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  unsigned int *v838;
  unsigned int *v839;
  md::LabelManager *v840;
  uint64_t v841;
  uint64_t **v842;
  std::string::size_type *v843;
  std::string::size_type *v844;
  std::string::size_type v845;
  md::LabelPoint *v846;
  double *v847;
  double v848;
  std::__shared_weak_count *v849;
  unint64_t *v850;
  unint64_t v851;
  unint64_t *v852;
  unint64_t v853;
  unint64_t v854;
  uint64_t *v855;
  uint64_t **v856;
  uint64_t **v857;
  unint64_t v858;
  uint64_t *v859;
  uint64_t *v860;
  uint64_t v861;
  unint64_t *v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unsigned __int8 *v866;
  int v867;
  std::__shared_weak_count *v868;
  unint64_t *v869;
  unint64_t v870;
  unint64_t *v871;
  unint64_t v872;
  std::__shared_weak_count *v873;
  unint64_t *v874;
  unint64_t v875;
  md::LabelManager *v876;
  uint64_t v877;
  _QWORD *v878;
  _QWORD *v879;
  _QWORD *v880;
  md::LabelPoint *v881;
  double *v882;
  double v883;
  _QWORD *v884;
  unint64_t *v885;
  unint64_t v886;
  unint64_t v887;
  std::__shared_weak_count *v888;
  unint64_t *v889;
  unint64_t v890;
  unint64_t *v891;
  unint64_t v892;
  unint64_t v893;
  uint64_t *v894;
  uint64_t **v895;
  uint64_t **v896;
  unint64_t v897;
  uint64_t *v898;
  uint64_t *v899;
  uint64_t v900;
  unint64_t *v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unsigned __int8 *v905;
  int v906;
  std::__shared_weak_count *v907;
  unint64_t *v908;
  unint64_t v909;
  unint64_t *v910;
  unint64_t v911;
  std::__shared_weak_count *v912;
  unint64_t *v913;
  unint64_t v914;
  md::LabelManager *v915;
  uint64_t v916;
  unsigned __int8 **v917;
  unsigned __int8 **v918;
  void *v919;
  unsigned __int8 *v920;
  unsigned int *v921;
  unsigned int *j;
  uint64_t v923;
  uint64_t *v924;
  uint64_t **v925;
  uint64_t **v926;
  unint64_t v927;
  uint64_t *v928;
  uint64_t *v929;
  uint64_t v930;
  unint64_t *v931;
  unint64_t v932;
  uint64_t v933;
  uint64_t v934;
  unsigned __int8 *v935;
  int v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  int v940;
  _QWORD *v941;
  _QWORD *k;
  _QWORD *v943;
  _QWORD *v944;
  uint64_t v945;
  md::LabelPoint *v946;
  double *v947;
  double v948;
  uint64_t v949;
  uint64_t *v950;
  uint64_t **v951;
  uint64_t **v952;
  unint64_t v953;
  uint64_t *v954;
  uint64_t *v955;
  uint64_t v956;
  unint64_t *v957;
  unint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unsigned __int8 *v961;
  int v962;
  std::__shared_weak_count *v963;
  unint64_t *v964;
  unint64_t v965;
  md::LineLabelFeature **v966;
  md::LineLabelFeature **v967;
  void *v968;
  md::LineLabelFeature *v969;
  unsigned int *v970;
  unsigned int *m;
  uint64_t v972;
  uint64_t *v973;
  uint64_t *v974;
  uint64_t *v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t *v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t *v982;
  uint64_t *v983;
  uint64_t v984;
  uint64_t *v985;
  _BYTE *v986;
  int v987;
  uint64_t v988;
  int v989;
  uint64_t **v990;
  uint64_t *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  unsigned __int8 *v996;
  int v997;
  std::__shared_weak_count *v998;
  unint64_t *v999;
  unint64_t v1000;
  unsigned __int8 **v1001;
  unsigned __int8 **n;
  unsigned __int8 *v1003;
  md::LabelPoint *v1004;
  double *v1005;
  double v1006;
  unsigned __int8 *v1007;
  uint64_t v1008;
  int v1009;
  uint64_t v1010;
  uint64_t *v1011;
  uint64_t **v1012;
  uint64_t **v1013;
  unint64_t v1014;
  uint64_t *v1015;
  uint64_t *v1016;
  uint64_t v1017;
  unint64_t *v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  unsigned __int8 *v1022;
  int v1023;
  std::__shared_weak_count *v1024;
  unint64_t *v1025;
  unint64_t v1026;
  _QWORD *v1027;
  uint64_t v1028;
  unsigned __int8 *v1029;
  int v1030;
  _QWORD *v1031;
  _QWORD **v1032;
  std::__shared_weak_count *v1033;
  unint64_t *v1034;
  unint64_t v1035;
  unsigned __int8 v1036;
  uint64_t v1037;
  std::__shared_weak_count *v1038;
  uint64_t v1039;
  int v1040;
  _QWORD *v1041;
  uint64_t v1042;
  std::__shared_weak_count *v1043;
  unint64_t *v1044;
  unint64_t v1045;
  std::__shared_weak_count *v1046;
  unint64_t *v1047;
  unint64_t v1048;
  std::__shared_weak_count *v1049;
  unint64_t *v1050;
  unint64_t v1051;
  uint64_t v1052;
  std::__shared_weak_count *v1053;
  uint64_t v1054;
  int v1055;
  _QWORD *v1056;
  uint64_t v1057;
  std::__shared_weak_count *v1058;
  unint64_t *v1059;
  unint64_t v1060;
  std::__shared_weak_count *v1061;
  unint64_t *v1062;
  unint64_t v1063;
  md::LabelManager *v1064;
  uint64_t v1065;
  int v1066;
  md::LabelRouteCollisionInfo *v1067;
  uint64_t **v1068;
  int v1069;
  _QWORD *v1070;
  uint64_t v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  unint64_t v1074;
  md::LabelManager *v1075;
  uint64_t v1076;
  int v1077;
  uint64_t **v1078;
  int v1079;
  _QWORD *v1080;
  uint64_t v1081;
  unint64_t *v1082;
  unint64_t *v1083;
  md::LabelManager *v1084;
  int type;
  uint64_t v1086;
  uint64_t v1087;
  unsigned int v1088;
  uint64_t **v1089;
  char *v1090;
  char *v1091;
  md::LabelPool *v1092;
  QuadTile *v1093;
  QuadTile *v1094;
  unint64_t v1095;
  double v1096;
  double v1097;
  double v1098;
  double v1099;
  uint64_t *v1100;
  uint64_t *v1101;
  QuadTile *v1102;
  uint64_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  unint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  _BYTE *v1109;
  char *v1110;
  uint64_t **v1111;
  QuadTile *v1112;
  QuadTile *v1113;
  unint64_t v1114;
  QuadTile *v1115;
  unint64_t hash;
  char *v1117;
  md::LabelPoint *v1118;
  _OWORD *v1119;
  _OWORD *v1120;
  double *v1121;
  char *v1122;
  uint64_t v1123;
  unint64_t v1124;
  unint64_t v1125;
  unint64_t v1126;
  unint64_t v1127;
  char *v1128;
  char *v1129;
  char *v1130;
  double v1131;
  double v1132;
  uint64_t **v1133;
  uint64_t v1134;
  _OWORD *v1135;
  int *p_xIdx;
  uint64_t v1137;
  __int128 v1138;
  uint64_t **v1139;
  uint64_t *v1140;
  uint64_t *v1141;
  uint64_t **v1142;
  unsigned int v1143;
  double v1144;
  double v1145;
  unint64_t *v1146;
  uint64_t v1147;
  size_t v1148;
  void *v1149;
  uint64_t v1150;
  double v1151;
  int v1152;
  int v1153;
  BOOL v1154;
  QuadTile *v1155;
  QuadTile *v1156;
  QuadTile *v1157;
  QuadTile *v1158;
  uint64_t v1159;
  int8x8_t *v1160;
  int v1161;
  uint64_t v1162;
  int8x8_t v1163;
  unint64_t v1164;
  uint8x8_t v1165;
  unint64_t v1166;
  uint64_t **v1167;
  uint64_t *v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int64_t v1174;
  uint64_t v1175;
  unint64_t v1176;
  unint64_t v1177;
  _BYTE *v1178;
  QuadTile *v1179;
  unint64_t v1180;
  QuadTile *v1181;
  unint64_t v1182;
  QuadTile *v1183;
  uint64_t v1184;
  _OWORD *v1185;
  int *v1186;
  uint64_t v1187;
  __int128 v1188;
  unsigned __int8 v1189;
  uint64_t v1190;
  char *v1191;
  char *v1192;
  QuadTile *v1193;
  int8x8_t *v1194;
  char *v1195;
  char *v1196;
  char *v1197;
  char *v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  char *v1202;
  uint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  char *v1210;
  char *v1211;
  char *v1212;
  uint64_t v1213;
  uint64_t v1214;
  char *v1215;
  unint64_t v1216;
  char *v1217;
  uint64_t v1218;
  __int128 *v1219;
  _OWORD *v1220;
  uint64_t v1221;
  __int128 v1222;
  uint64_t v1223;
  char *v1224;
  unint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  _OWORD *v1228;
  __int128 *v1229;
  uint64_t v1230;
  __int128 v1231;
  uint64_t v1232;
  uint64_t v1233;
  char *v1234;
  char *v1235;
  uint64_t *v1236;
  unint64_t v1237;
  unint64_t v1238;
  md::LabelMapTile *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  double *v1243;
  int8x8_t v1244;
  double v1245;
  char *v1246;
  uint64_t v1247;
  unsigned int v1248;
  uint64_t v1249;
  uint64_t v1250;
  double v1251;
  double v1252;
  unsigned int v1253;
  double *v1254;
  double *v1255;
  double v1256;
  double v1257;
  double v1258;
  double v1259;
  double v1260;
  double v1261;
  double *v1262;
  uint64_t v1263;
  unint64_t v1264;
  char v1265;
  double v1266;
  double v1267;
  double *v1268;
  char *v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  unint64_t *v1274;
  uint64_t v1275;
  int v1276;
  uint64_t v1277;
  geo::read_write_lock *v1278;
  const char *v1279;
  malloc_zone_t *v1280;
  uint64_t v1281;
  uint64_t v1282;
  _QWORD *v1283;
  uint64_t v1284;
  int8x8_t *v1285;
  md::VenueLogicContext *v1286;
  BOOL v1287;
  _BYTE *v1288;
  uint64_t v1289;
  md::LabelManager *v1290;
  uint64_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  QuadTile *v1294;
  _QWORD *v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  uint64_t v1298;
  _QWORD *v1299;
  _QWORD *v1300;
  uint64_t v1301;
  uint64_t v1302;
  _QWORD *v1303;
  int v1304;
  QuadTile *v1305;
  _BOOL4 v1306;
  int v1307;
  unint64_t v1308;
  double *v1309;
  unsigned int v1310;
  QuadTile *v1311;
  QuadTile *v1312;
  QuadTile *v1313;
  QuadTile *v1314;
  _QWORD *v1315;
  _QWORD *v1316;
  long double v1317;
  _QWORD *v1318;
  unint64_t v1319;
  long double v1320;
  int v1321;
  unsigned int v1322;
  QuadTile *v1323;
  QuadTile *v1324;
  QuadTile *v1325;
  QuadTile *v1326;
  int v1327;
  int v1328;
  uint64_t **v1329;
  int8x8_t *v1330;
  md::LabelPool *v1331;
  md::LabelPool *v1332;
  md::LabelPool *v1333;
  md::LabelPool *v1334;
  md::LabelMapTile *v1335;
  std::string __p;
  __int128 v1337;
  float64x2_t v1338;
  std::string v1339;
  _QWORD **v1340;
  _QWORD *v1341[3];
  md::LabelManager *v1342;
  uint8_t buf[24];
  uint64_t v1344;
  __int16 v1345;
  float64_t v1346;
  __int16 v1347;
  uint64_t v1348;
  __int16 v1349;
  uint64_t v1350;
  uint64_t v1351;

  v6 = a2;
  v7 = (uint64_t)this;
  v1351 = *MEMORY[0x1E0C80C00];
  v1342 = a2;
  v1327 = a4;
  if ((char)this[492] == a4 && !this[122] && !this[124] && !this[123] && !this[128] && !a5)
    return this;
  v8 = *((_QWORD *)a2 + 54);
  this[492] = a4;
  {
    v1275 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1275, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v10 = (_QWORD *)mdm::Allocator::instance(void)::alloc;
  v11 = *(_QWORD **)(v7 + 416);
  v1340 = *(_QWORD ***)(v7 + 408);
  v1341[0] = v11;
  v12 = *(_QWORD **)(v7 + 432);
  *(_QWORD *)(v7 + 432) = 0;
  v1341[1] = v10;
  v1341[2] = v12;
  *(_QWORD *)(v7 + 408) = v7 + 416;
  *(_QWORD *)(v7 + 416) = 0;
  v13 = v11 + 2;
  if (!v12)
    v13 = &v1340;
  v1284 = v8;
  *v13 = v1341;
  if (*(float *)(v8 + 424) > 0.0 && *(_BYTE *)(v8 + 27))
  {
    *(_OWORD *)buf = xmmword_19FFB34C0;
    *(_QWORD *)&buf[16] = 0;
    LOBYTE(v1345) = 0;
    __asm { FMOV            V2.2D, #0.5 }
    v1338 = vmlaq_f64(*(float64x2_t *)(v7 + 40), _Q2, vsubq_f64(*(float64x2_t *)(v7 + 56), *(float64x2_t *)(v7 + 40)));
    v1339.__r_.__value_.__r.__words[0] = (*(double (**)(uint64_t, float64x2_t *))(*(_QWORD *)v7 + 16))(v7, &v1338);
    v1339.__r_.__value_.__l.__size_ = v17;
    v1339.__r_.__value_.__r.__words[2] = v18;
    __p.__r_.__value_.__s.__data_[0] = 0;
    __p.__r_.__value_.__s.__data_[12] = 0;
    md::LabelLayoutContext::evaluateWorldPoint(v8, (uint64_t)&v1339, (uint64_t)&__p, 1u, 0, (uint64_t)buf, 1.0);
    if (!(_BYTE)v1345)
    {
      v19 = (int)*(float *)buf & ~((int)*(float *)buf >> 31);
      if (v19 >= v1327)
        v19 = v1327;
      if (v19 >= 23)
        v19 = 23;
      v1327 = v19;
    }
    v6 = v1342;
  }
  v20 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v6 + 21) + 64) + 8))(*(_QWORD *)(*((_QWORD *)v6 + 21) + 64));
  if (v20)
  {
    v21 = v20[16] != v20[17] || v20[30] != v20[31];
    v1306 = v21;
  }
  else
  {
    v1306 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)v1342 + 29) + 28))
    v1287 = *((_BYTE *)v1342 + 3389) != 0;
  else
    v1287 = 0;
  v1303 = v20;
  v1282 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 32) + 80))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 32));
  v1283 = (_QWORD *)(v7 + 440);
  v1285 = *(int8x8_t **)(v8 + 1232);
  *(_DWORD *)(v7 + 96) = 0;
  v22 = (_QWORD *)(v7 + 168);
  v1295 = (_QWORD *)(v7 + 328);
  v1311 = (QuadTile *)(v7 + 8);
  v23 = (double *)(v7 + 40);
  *(_QWORD *)(v7 + 88) = 0;
  v1331 = a3;
  v1335 = (md::LabelMapTile *)v7;
  v1329 = (uint64_t **)(v7 + 416);
  v1309 = (double *)(v7 + 40);
  do
  {
    v24 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_28;
    v1299 = v22;
    v25 = (unsigned int *)*((_QWORD *)v1342 + 37);
    v26 = *((_DWORD *)v24 + 70);
    v27 = v25[3];
    v1315 = v24;
    if (v26 != v27)
    {
      *((_DWORD *)v24 + 70) = v27;
      v29 = v26 > v27 || v26 <= v25[4];
      memset(buf, 0, sizeof(buf));
      {
        v578 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v578, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v1344 = mdm::Allocator::instance(void)::alloc;
      v31 = v24[8] + v24[28];
      if (v31)
      {
        if (v31 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v32 = (*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
        v34 = *(_QWORD *)buf;
        v33 = *(_QWORD *)&buf[8];
        v35 = v32;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            v36 = *(_OWORD *)(v33 - 24);
            *(_QWORD *)(v35 - 8) = *(_QWORD *)(v33 - 8);
            *(_OWORD *)(v35 - 24) = v36;
            v35 -= 24;
            v33 -= 24;
          }
          while (v33 != v34);
          v33 = v34;
        }
        *(_QWORD *)buf = v35;
        *(_QWORD *)&buf[8] = v32;
        v37 = *(_QWORD *)&buf[16];
        *(_QWORD *)&buf[16] = v32 + 24 * v31;
        if (v33)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v33, v37 - v33);
      }
      v1322 = v29;
      v38 = atomic_load((unsigned __int8 *)(*(_QWORD *)v25 + 3394));
      v39 = (_QWORD *)v24[25];
      v40 = v24 + 26;
      if (v39 == v24 + 26)
      {
LABEL_46:
        v41 = (_QWORD *)v24[5];
        v7 = (uint64_t)v1335;
        if (v41 == v24 + 6)
        {
LABEL_47:
          v42 = (_QWORD *)v24[17];
          if (v42 == v24 + 18)
          {
LABEL_48:
            v43 = (_QWORD *)v24[29];
            if (v43 == v24 + 30)
            {
LABEL_49:
              v44 = (_QWORD *)v24[13];
              if (v44 == v24 + 14)
              {
LABEL_50:
                v45 = (_QWORD *)v24[21];
                if (v45 == v24 + 22)
                {
LABEL_51:
                  md::LabelFeatureStyler::styleLabelFeatures(v25, (char **)buf, v1322, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v25 + 152) + 64));
                  if (*(_QWORD *)buf)
                  {
                    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1344 + 40))(v1344, *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
                  }
                  goto LABEL_53;
                }
                while (1)
                {
                  v238 = (std::__shared_weak_count *)v45[5];
                  if (!v238)
                    goto LABEL_403;
                  v239 = std::__shared_weak_count::lock(v238);
                  v1339.__r_.__value_.__l.__size_ = (std::string::size_type)v239;
                  if (!v239)
                    goto LABEL_403;
                  v240 = v239;
                  v241 = v45[4];
                  v1339.__r_.__value_.__r.__words[0] = v241;
                  if (v241 && *(_DWORD *)(v241 + 128) != v25[3])
                  {
                    v242 = *(std::string::size_type **)&buf[8];
                    if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
                    {
                      v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
                      v245 = v244 + 1;
                      if (v244 + 1 > 0xAAAAAAAAAAAAAAALL)
                        abort();
                      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v245)
                        v245 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                        v246 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v246 = v245;
                      if (v246)
                      {
                        v247 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 16))(v1344, 24 * v246, 8);
                        v248 = (std::string::size_type *)(v247 + 24 * v244);
                        v249 = v247 + 24 * v246;
                        if (v247)
                        {
                          *v248 = v241;
                          v250 = v247 + 24 * v244;
                          *(_QWORD *)(v250 + 8) = 0;
                          *(_QWORD *)(v250 + 16) = 0;
                        }
                      }
                      else
                      {
                        v249 = 0;
                        v248 = (std::string::size_type *)(8 * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
                      }
                      v7 = (uint64_t)v1335;
                      v252 = *(_QWORD *)buf;
                      v251 = *(_QWORD *)&buf[8];
                      v253 = v248;
                      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                      {
                        do
                        {
                          v254 = *(_OWORD *)(v251 - 24);
                          *(v253 - 1) = *(_QWORD *)(v251 - 8);
                          *(_OWORD *)(v253 - 3) = v254;
                          v253 -= 3;
                          v251 -= 24;
                        }
                        while (v251 != v252);
                        v251 = v252;
                      }
                      v243 = v248 + 3;
                      v255 = *(_QWORD *)&buf[16];
                      *(_QWORD *)buf = v253;
                      *(_QWORD *)&buf[16] = v249;
                      if (v251)
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v251, v255 - v251);
                    }
                    else
                    {
                      if (*(_QWORD *)&buf[8])
                      {
                        *(_QWORD *)(*(_QWORD *)&buf[8] + 8) = 0;
                        v242[2] = 0;
                        *v242 = v241;
                      }
                      v243 = v242 + 3;
                    }
                    *(_QWORD *)&buf[8] = v243;
                  }
                  p_shared_owners = (unint64_t *)&v240->__shared_owners_;
                  do
                    v257 = __ldaxr(p_shared_owners);
                  while (__stlxr(v257 - 1, p_shared_owners));
                  if (!v257)
                  {
                    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                    std::__shared_weak_count::__release_weak(v240);
                    v258 = (_QWORD *)v45[1];
                    if (!v258)
                    {
                      do
                      {
LABEL_407:
                        v259 = (_QWORD *)v45[2];
                        _ZF = *v259 == (_QWORD)v45;
                        v45 = v259;
                      }
                      while (!_ZF);
                      goto LABEL_375;
                    }
                  }
                  else
                  {
LABEL_403:
                    v258 = (_QWORD *)v45[1];
                    if (!v258)
                      goto LABEL_407;
                  }
                  do
                  {
                    v259 = v258;
                    v258 = (_QWORD *)*v258;
                  }
                  while (v258);
LABEL_375:
                  v45 = v259;
                  if (v259 == v24 + 22)
                    goto LABEL_51;
                }
              }
              while (1)
              {
                v216 = (std::__shared_weak_count *)v44[5];
                if (!v216)
                  goto LABEL_368;
                v217 = std::__shared_weak_count::lock(v216);
                v1339.__r_.__value_.__l.__size_ = (std::string::size_type)v217;
                if (!v217)
                  goto LABEL_368;
                v218 = v217;
                v219 = v44[4];
                v1339.__r_.__value_.__r.__words[0] = v219;
                if (v219 && *(_DWORD *)(v219 + 128) != v25[3])
                {
                  v220 = *(std::string::size_type **)&buf[8];
                  if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
                  {
                    v222 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
                    v223 = v222 + 1;
                    if (v222 + 1 > 0xAAAAAAAAAAAAAAALL)
                      abort();
                    if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v223)
                      v223 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                      v224 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v224 = v223;
                    if (v224)
                    {
                      v225 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 16))(v1344, 24 * v224, 8);
                      v226 = (std::string::size_type *)(v225 + 24 * v222);
                      v227 = v225 + 24 * v224;
                      if (v225)
                      {
                        *v226 = v219;
                        v228 = v225 + 24 * v222;
                        *(_QWORD *)(v228 + 8) = 0;
                        *(_QWORD *)(v228 + 16) = 0;
                      }
                    }
                    else
                    {
                      v227 = 0;
                      v226 = (std::string::size_type *)(8 * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
                    }
                    v7 = (uint64_t)v1335;
                    v230 = *(_QWORD *)buf;
                    v229 = *(_QWORD *)&buf[8];
                    v231 = v226;
                    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                    {
                      do
                      {
                        v232 = *(_OWORD *)(v229 - 24);
                        *(v231 - 1) = *(_QWORD *)(v229 - 8);
                        *(_OWORD *)(v231 - 3) = v232;
                        v231 -= 3;
                        v229 -= 24;
                      }
                      while (v229 != v230);
                      v229 = v230;
                    }
                    v221 = v226 + 3;
                    v233 = *(_QWORD *)&buf[16];
                    *(_QWORD *)buf = v231;
                    *(_QWORD *)&buf[16] = v227;
                    if (v229)
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v229, v233 - v229);
                  }
                  else
                  {
                    if (*(_QWORD *)&buf[8])
                    {
                      *(_QWORD *)(*(_QWORD *)&buf[8] + 8) = 0;
                      v220[2] = 0;
                      *v220 = v219;
                    }
                    v221 = v220 + 3;
                  }
                  *(_QWORD *)&buf[8] = v221;
                }
                v234 = (unint64_t *)&v218->__shared_owners_;
                do
                  v235 = __ldaxr(v234);
                while (__stlxr(v235 - 1, v234));
                if (!v235)
                {
                  ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                  std::__shared_weak_count::__release_weak(v218);
                  v236 = (_QWORD *)v44[1];
                  if (!v236)
                  {
                    do
                    {
LABEL_372:
                      v237 = (_QWORD *)v44[2];
                      _ZF = *v237 == (_QWORD)v44;
                      v44 = v237;
                    }
                    while (!_ZF);
                    goto LABEL_340;
                  }
                }
                else
                {
LABEL_368:
                  v236 = (_QWORD *)v44[1];
                  if (!v236)
                    goto LABEL_372;
                }
                do
                {
                  v237 = v236;
                  v236 = (_QWORD *)*v236;
                }
                while (v236);
LABEL_340:
                v44 = v237;
                if (v237 == v24 + 14)
                  goto LABEL_50;
              }
            }
            while (1)
            {
              v194 = (std::__shared_weak_count *)v43[5];
              if (!v194)
                goto LABEL_333;
              v195 = std::__shared_weak_count::lock(v194);
              v1339.__r_.__value_.__l.__size_ = (std::string::size_type)v195;
              if (!v195)
                goto LABEL_333;
              v196 = v195;
              v197 = v43[4];
              v1339.__r_.__value_.__r.__words[0] = v197;
              if (v197 && *(_DWORD *)(v197 + 128) != v25[3])
              {
                v198 = *(std::string::size_type **)&buf[8];
                if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
                {
                  v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
                  v201 = v200 + 1;
                  if (v200 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v201)
                    v201 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                    v202 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v202 = v201;
                  if (v202)
                  {
                    v203 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 16))(v1344, 24 * v202, 8);
                    v204 = (std::string::size_type *)(v203 + 24 * v200);
                    v205 = v203 + 24 * v202;
                    if (v203)
                    {
                      *v204 = v197;
                      v206 = v203 + 24 * v200;
                      *(_QWORD *)(v206 + 8) = 0;
                      *(_QWORD *)(v206 + 16) = 0;
                    }
                  }
                  else
                  {
                    v205 = 0;
                    v204 = (std::string::size_type *)(8 * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
                  }
                  v208 = *(_QWORD *)buf;
                  v207 = *(_QWORD *)&buf[8];
                  v7 = (uint64_t)v1335;
                  v209 = v204;
                  if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                  {
                    do
                    {
                      v210 = *(_OWORD *)(v207 - 24);
                      *(v209 - 1) = *(_QWORD *)(v207 - 8);
                      *(_OWORD *)(v209 - 3) = v210;
                      v209 -= 3;
                      v207 -= 24;
                    }
                    while (v207 != v208);
                    v207 = v208;
                  }
                  v199 = v204 + 3;
                  v211 = *(_QWORD *)&buf[16];
                  *(_QWORD *)buf = v209;
                  *(_QWORD *)&buf[16] = v205;
                  if (v207)
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v207, v211 - v207);
                }
                else
                {
                  if (*(_QWORD *)&buf[8])
                  {
                    *(_QWORD *)(*(_QWORD *)&buf[8] + 8) = 0;
                    v198[2] = 0;
                    *v198 = v197;
                  }
                  v199 = v198 + 3;
                }
                *(_QWORD *)&buf[8] = v199;
              }
              v212 = (unint64_t *)&v196->__shared_owners_;
              do
                v213 = __ldaxr(v212);
              while (__stlxr(v213 - 1, v212));
              if (!v213)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
                v214 = (_QWORD *)v43[1];
                if (!v214)
                {
                  do
                  {
LABEL_337:
                    v215 = (_QWORD *)v43[2];
                    _ZF = *v215 == (_QWORD)v43;
                    v43 = v215;
                  }
                  while (!_ZF);
                  goto LABEL_305;
                }
              }
              else
              {
LABEL_333:
                v214 = (_QWORD *)v43[1];
                if (!v214)
                  goto LABEL_337;
              }
              do
              {
                v215 = v214;
                v214 = (_QWORD *)*v214;
              }
              while (v214);
LABEL_305:
              v43 = v215;
              if (v215 == v24 + 30)
                goto LABEL_49;
            }
          }
          while (1)
          {
            v172 = (std::__shared_weak_count *)v42[5];
            if (!v172)
              goto LABEL_298;
            v173 = std::__shared_weak_count::lock(v172);
            v1339.__r_.__value_.__l.__size_ = (std::string::size_type)v173;
            if (!v173)
              goto LABEL_298;
            v174 = v173;
            v175 = v42[4];
            v1339.__r_.__value_.__r.__words[0] = v175;
            if (v175 && *(_DWORD *)(v175 + 128) != v25[3])
            {
              v176 = *(std::string::size_type **)&buf[8];
              if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
              {
                v178 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
                v179 = v178 + 1;
                if (v178 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v179)
                  v179 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                  v180 = 0xAAAAAAAAAAAAAAALL;
                else
                  v180 = v179;
                if (v180)
                {
                  v181 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 16))(v1344, 24 * v180, 8);
                  v182 = (std::string::size_type *)(v181 + 24 * v178);
                  v183 = v181 + 24 * v180;
                  if (v181)
                  {
                    *v182 = v175;
                    v184 = v181 + 24 * v178;
                    *(_QWORD *)(v184 + 8) = 0;
                    *(_QWORD *)(v184 + 16) = 0;
                  }
                }
                else
                {
                  v183 = 0;
                  v182 = (std::string::size_type *)(8 * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
                }
                v186 = *(_QWORD *)buf;
                v185 = *(_QWORD *)&buf[8];
                v7 = (uint64_t)v1335;
                v187 = v182;
                if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                {
                  do
                  {
                    v188 = *(_OWORD *)(v185 - 24);
                    *(v187 - 1) = *(_QWORD *)(v185 - 8);
                    *(_OWORD *)(v187 - 3) = v188;
                    v187 -= 3;
                    v185 -= 24;
                  }
                  while (v185 != v186);
                  v185 = v186;
                }
                v177 = v182 + 3;
                v189 = *(_QWORD *)&buf[16];
                *(_QWORD *)buf = v187;
                *(_QWORD *)&buf[16] = v183;
                if (v185)
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v185, v189 - v185);
              }
              else
              {
                if (*(_QWORD *)&buf[8])
                {
                  *(_QWORD *)(*(_QWORD *)&buf[8] + 8) = 0;
                  v176[2] = 0;
                  *v176 = v175;
                }
                v177 = v176 + 3;
              }
              *(_QWORD *)&buf[8] = v177;
            }
            v190 = (unint64_t *)&v174->__shared_owners_;
            do
              v191 = __ldaxr(v190);
            while (__stlxr(v191 - 1, v190));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
              v192 = (_QWORD *)v42[1];
              if (!v192)
              {
                do
                {
LABEL_302:
                  v193 = (_QWORD *)v42[2];
                  _ZF = *v193 == (_QWORD)v42;
                  v42 = v193;
                }
                while (!_ZF);
                goto LABEL_270;
              }
            }
            else
            {
LABEL_298:
              v192 = (_QWORD *)v42[1];
              if (!v192)
                goto LABEL_302;
            }
            do
            {
              v193 = v192;
              v192 = (_QWORD *)*v192;
            }
            while (v192);
LABEL_270:
            v42 = v193;
            if (v193 == v24 + 18)
              goto LABEL_48;
          }
        }
        while (1)
        {
          v150 = (std::__shared_weak_count *)v41[5];
          if (!v150)
            goto LABEL_263;
          v151 = std::__shared_weak_count::lock(v150);
          v1339.__r_.__value_.__l.__size_ = (std::string::size_type)v151;
          if (!v151)
            goto LABEL_263;
          v152 = v151;
          v153 = v41[4];
          v1339.__r_.__value_.__r.__words[0] = v153;
          if (v153 && *(_DWORD *)(v153 + 128) != v25[3])
          {
            v154 = *(std::string::size_type **)&buf[8];
            if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
            {
              v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
              v157 = v156 + 1;
              if (v156 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v157)
                v157 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                v158 = 0xAAAAAAAAAAAAAAALL;
              else
                v158 = v157;
              if (v158)
              {
                v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 16))(v1344, 24 * v158, 8);
                v160 = (std::string::size_type *)(v159 + 24 * v156);
                v161 = v159 + 24 * v158;
                if (v159)
                {
                  *v160 = v153;
                  v162 = v159 + 24 * v156;
                  *(_QWORD *)(v162 + 8) = 0;
                  *(_QWORD *)(v162 + 16) = 0;
                }
              }
              else
              {
                v161 = 0;
                v160 = (std::string::size_type *)(8 * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
              }
              v164 = *(_QWORD *)buf;
              v163 = *(_QWORD *)&buf[8];
              v7 = (uint64_t)v1335;
              v165 = v160;
              if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
              {
                do
                {
                  v166 = *(_OWORD *)(v163 - 24);
                  *(v165 - 1) = *(_QWORD *)(v163 - 8);
                  *(_OWORD *)(v165 - 3) = v166;
                  v165 -= 3;
                  v163 -= 24;
                }
                while (v163 != v164);
                v163 = v164;
              }
              v155 = v160 + 3;
              v167 = *(_QWORD *)&buf[16];
              *(_QWORD *)buf = v165;
              *(_QWORD *)&buf[16] = v161;
              if (v163)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v163, v167 - v163);
            }
            else
            {
              if (*(_QWORD *)&buf[8])
              {
                *(_QWORD *)(*(_QWORD *)&buf[8] + 8) = 0;
                v154[2] = 0;
                *v154 = v153;
              }
              v155 = v154 + 3;
            }
            *(_QWORD *)&buf[8] = v155;
          }
          v168 = (unint64_t *)&v152->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
            v170 = (_QWORD *)v41[1];
            if (!v170)
            {
              do
              {
LABEL_267:
                v171 = (_QWORD *)v41[2];
                _ZF = *v171 == (_QWORD)v41;
                v41 = v171;
              }
              while (!_ZF);
              goto LABEL_235;
            }
          }
          else
          {
LABEL_263:
            v170 = (_QWORD *)v41[1];
            if (!v170)
              goto LABEL_267;
          }
          do
          {
            v171 = v170;
            v170 = (_QWORD *)*v170;
          }
          while (v170);
LABEL_235:
          v41 = v171;
          if (v171 == v24 + 6)
            goto LABEL_47;
        }
      }
      while (1)
      {
        v128 = (std::__shared_weak_count *)v39[5];
        if (!v128)
          goto LABEL_228;
        v129 = std::__shared_weak_count::lock(v128);
        v1339.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
        if (!v129)
          goto LABEL_228;
        v130 = v129;
        v131 = (_DWORD *)v39[4];
        v1339.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
        if (v131 && v131[32] != v25[3])
        {
          v132 = *(_QWORD **)&buf[8];
          if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
          {
            v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
            v135 = v134 + 1;
            if (v134 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v135)
              v135 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
              v136 = 0xAAAAAAAAAAAAAAALL;
            else
              v136 = v135;
            if (v136)
            {
              v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 16))(v1344, 24 * v136, 8);
              v138 = (_QWORD *)(v137 + 24 * v134);
              v139 = v137 + 24 * v136;
              if (v137)
              {
                *v138 = v131;
                v140 = v137 + 24 * v134;
                *(_QWORD *)(v140 + 8) = 0;
                *(_QWORD *)(v140 + 16) = 0;
              }
            }
            else
            {
              v139 = 0;
              v138 = (_QWORD *)(8 * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
            }
            v24 = v1315;
            v142 = *(_QWORD *)buf;
            v141 = *(_QWORD *)&buf[8];
            v143 = v138;
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                v144 = *(_OWORD *)(v141 - 24);
                *(v143 - 1) = *(_QWORD *)(v141 - 8);
                *(_OWORD *)(v143 - 3) = v144;
                v143 -= 3;
                v141 -= 24;
              }
              while (v141 != v142);
              v141 = v142;
            }
            v133 = v138 + 3;
            v145 = *(_QWORD *)&buf[16];
            *(_QWORD *)buf = v143;
            *(_QWORD *)&buf[16] = v139;
            if (v141)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1344 + 40))(v1344, v141, v145 - v141);
          }
          else
          {
            if (*(_QWORD *)&buf[8])
            {
              *(_QWORD *)(*(_QWORD *)&buf[8] + 8) = 0;
              v132[2] = 0;
              *v132 = v131;
            }
            v133 = v132 + 3;
          }
          *(_QWORD *)&buf[8] = v133;
          (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v131 + 528))(v131, v38);
        }
        v146 = (unint64_t *)&v130->__shared_owners_;
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
          v148 = (_QWORD *)v39[1];
          if (!v148)
          {
            do
            {
LABEL_232:
              v149 = (_QWORD *)v39[2];
              _ZF = *v149 == (_QWORD)v39;
              v39 = v149;
            }
            while (!_ZF);
            goto LABEL_200;
          }
        }
        else
        {
LABEL_228:
          v148 = (_QWORD *)v39[1];
          if (!v148)
            goto LABEL_232;
        }
        do
        {
          v149 = v148;
          v148 = (_QWORD *)*v148;
        }
        while (v148);
LABEL_200:
        v39 = v149;
        if (v149 == v40)
          goto LABEL_46;
      }
    }
LABEL_53:
    v46 = (double *)v24[3];
    v48 = *v46;
    v47 = v46[1];
    v1338.f64[0] = v48;
    v1338.f64[1] = v47;
    if (v47 != 0.0)
    {
      v49 = (unint64_t *)(*(_QWORD *)&v47 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = (_QWORD *)v24[25];
    if (v51 != v24 + 26)
    {
      while (1)
      {
        v1337 = 0uLL;
        v52 = (std::__shared_weak_count *)v51[5];
        if (!v52)
        {
          v53 = 0;
LABEL_67:
          ++*(_DWORD *)(v7 + 88);
          goto LABEL_68;
        }
        v53 = std::__shared_weak_count::lock(v52);
        *((_QWORD *)&v1337 + 1) = v53;
        if (!v53)
          goto LABEL_67;
        v54 = (unsigned __int8 *)v51[4];
        *(_QWORD *)&v1337 = v54;
        if (!v54)
          goto LABEL_67;
        if (v1306)
        {
          v55 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v54 + 160))(v54);
          v56 = (int8x8_t)v1303[21];
          if (v56)
          {
            v57 = (uint8x8_t)vcnt_s8(v56);
            v57.i16[0] = vaddlv_u8(v57);
            if (v57.u32[0] > 1uLL)
            {
              v58 = v55;
              if (*(_QWORD *)&v56 <= v55)
                v58 = v55 % *(_QWORD *)&v56;
            }
            else
            {
              v58 = (*(_QWORD *)&v56 - 1) & v55;
            }
            v63 = *(_QWORD **)(v1303[20] + 8 * v58);
            if (v63)
            {
              v64 = (_QWORD *)*v63;
              if (v64)
              {
                if (v57.u32[0] < 2uLL)
                {
                  v65 = *(_QWORD *)&v56 - 1;
                  while (1)
                  {
                    v67 = v64[1];
                    if (v67 == v55)
                    {
                      if (v64[2] == v55)
                        goto LABEL_68;
                    }
                    else if ((v67 & v65) != v58)
                    {
                      goto LABEL_96;
                    }
                    v64 = (_QWORD *)*v64;
                    if (!v64)
                      goto LABEL_96;
                  }
                }
                do
                {
                  v66 = v64[1];
                  if (v66 == v55)
                  {
                    if (v64[2] == v55)
                      goto LABEL_68;
                  }
                  else
                  {
                    if (v66 >= *(_QWORD *)&v56)
                      v66 %= *(_QWORD *)&v56;
                    if (v66 != v58)
                      break;
                  }
                  v64 = (_QWORD *)*v64;
                }
                while (v64);
              }
            }
          }
        }
LABEL_96:
        if (!*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v54 + 552))(v54, 0, 0, 0, 0))
        {
          ++*((_DWORD *)v1335 + 23);
          goto LABEL_68;
        }
        if (!v54[140] && v1327 < v54[136])
        {
          ++*((_DWORD *)v1335 + 24);
          goto LABEL_68;
        }
        md::PointLabelFeature::updatePositions((md::PointLabelFeature *)v54);
        v68 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v54 + 160))(v54);
        if (md::DebugStreamingPOIFeatureID)
        {
          if (md::DebugStreamingPOIFeatureID == v68)
            break;
        }
LABEL_112:
        if (*((_QWORD *)v54 + 55) <= *((_QWORD *)v54 + 54))
        {
          v76 = v1287;
          if (!v54[647])
            v76 = 0;
          if (!v76)
          {
            if (!v1285
              || !(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v54 + 368))(v54)
              || !(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v54 + 384))(v54)
              || (v77 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v54 + 376))(v54),
                  v78 = md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(v1285, v77),
                  v78 == (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v54 + 400))(v54)))
            {
              v79 = (unsigned __int8 *)*((_QWORD *)v54 + 57);
              if (v79 != v54 + 464)
              {
                while (1)
                {
                  v81 = *((_QWORD *)v79 + 5);
                  v80 = *((_QWORD *)v79 + 6);
                  v82 = v1338;
                  if (*(_QWORD *)&v1338.f64[1])
                  {
                    v83 = (unint64_t *)(*(_QWORD *)&v1338.f64[1] + 8);
                    do
                      v84 = __ldxr(v83);
                    while (__stxr(v84 + 1, v83));
                  }
                  if (v81 == v80)
                  {
                    v89 = 0;
                    if (!*(_QWORD *)&v82.f64[1])
                      goto LABEL_142;
                  }
                  else
                  {
                    v85 = v81 + 8;
                    do
                    {
                      v86 = *(_QWORD *)(v85 - 8);
                      if (v86)
                        v87 = v86 + 8;
                      else
                        v87 = 0;
                      v88 = *(_QWORD *)(v87 + 8);
                      v89 = v88 == *(_QWORD *)&v82.f64[0];
                      _ZF = v88 == *(_QWORD *)&v82.f64[0] || v85 == v80;
                      v85 += 8;
                    }
                    while (!_ZF);
                    if (!*(_QWORD *)&v82.f64[1])
                    {
LABEL_142:
                      if (!v89)
                        goto LABEL_189;
                      goto LABEL_143;
                    }
                  }
                  v91 = (unint64_t *)(*(_QWORD *)&v82.f64[1] + 8);
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (v92)
                    goto LABEL_142;
                  (*(void (**)(_QWORD))(**(_QWORD **)&v82.f64[1] + 16))(*(_QWORD *)&v82.f64[1]);
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v82.f64[1]);
                  if (!v89)
                    goto LABEL_189;
LABEL_143:
                  v93 = v1337;
                  if (v1311->_type == 255)
                  {
                    v120 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v1337
                                                                                                  + 112))(v1337, v79 + 32);
                    v121 = (double *)md::LabelPoint::mercatorPoint(v120);
                    if (*v121 < *v23
                      || *v121 > *((double *)v1335 + 7)
                      || (v122 = v121[1], v122 < *((double *)v1335 + 6))
                      || v122 > *((double *)v1335 + 8))
                    {
LABEL_189:
                      v126 = (unsigned __int8 *)*((_QWORD *)v79 + 1);
                      if (!v126)
                        goto LABEL_193;
                      goto LABEL_190;
                    }
                    v93 = v1337;
                  }
                  v94 = v1342;
                  v95 = (std::__shared_weak_count *)*((_QWORD *)&v1337 + 1);
                  v1339.__r_.__value_.__r.__words[0] = v93;
                  v1339.__r_.__value_.__l.__size_ = *((_QWORD *)&v1337 + 1);
                  if (*((_QWORD *)&v1337 + 1))
                  {
                    v96 = (unint64_t *)(*((_QWORD *)&v1337 + 1) + 8);
                    do
                      v97 = __ldxr(v96);
                    while (__stxr(v97 + 1, v96));
                  }
                  md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v94, &v1339, (unsigned int *)v79 + 8, 1);
                  if (!v95)
                    goto LABEL_151;
                  v98 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v99 = __ldaxr(v98);
                  while (__stlxr(v99 - 1, v98));
                  if (!v99)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                    v100 = *(_QWORD *)buf;
                    if (!*(_QWORD *)buf)
                      goto LABEL_185;
                  }
                  else
                  {
LABEL_151:
                    v100 = *(_QWORD *)buf;
                    if (!*(_QWORD *)buf)
                      goto LABEL_185;
                  }
                  v101 = v1329;
                  while (1)
                  {
                    v102 = *v101;
                    v103 = v101;
                    if (!*v101)
                      break;
                    while (1)
                    {
                      v101 = (uint64_t **)v102;
                      v104 = v102[4];
                      if (v100 < v104)
                        break;
                      if (v104 >= v100)
                        goto LABEL_169;
                      v102 = v101[1];
                      if (!v102)
                      {
                        v103 = v101 + 1;
                        goto LABEL_158;
                      }
                    }
                  }
LABEL_158:
                  v105 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53)
                                                                                        + 16))(*((_QWORD *)v1335 + 53), 48, 8);
                  v106 = v105;
                  v107 = *(_QWORD *)&buf[8];
                  v105[4] = *(_QWORD *)buf;
                  v105[5] = v107;
                  if (v107)
                  {
                    v108 = (unint64_t *)(v107 + 8);
                    do
                      v109 = __ldxr(v108);
                    while (__stxr(v109 + 1, v108));
                  }
                  *v105 = 0;
                  v105[1] = 0;
                  v105[2] = (uint64_t)v101;
                  *v103 = v105;
                  v110 = **((_QWORD **)v1335 + 51);
                  if (v110)
                  {
                    *((_QWORD *)v1335 + 51) = v110;
                    v106 = *v103;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v106);
                  ++*((_QWORD *)v1335 + 54);
                  v111 = *(_QWORD *)buf;
                  v112 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 + 1, v112));
                  if (!v113 && !*(_BYTE *)(v111 + 820))
                  {
                    *(_BYTE *)(v111 + 1214) = -1;
                    md::Label::updateStateMachineForStaging(v111, 0, 37);
                  }
                  *(_BYTE *)(v111 + 1261) = 0;
                  *(_QWORD *)(v111 + 1224) = 0;
                  v100 = *(_QWORD *)buf;
LABEL_169:
                  v114 = v1342;
                  v115 = (std::__shared_weak_count *)*((_QWORD *)&v1337 + 1);
                  *(_OWORD *)&v1339.__r_.__value_.__l.__data_ = v1337;
                  if (*((_QWORD *)&v1337 + 1))
                  {
                    v116 = (unint64_t *)(*((_QWORD *)&v1337 + 1) + 8);
                    do
                      v117 = __ldxr(v116);
                    while (__stxr(v117 + 1, v116));
                  }
                  md::Label::update(v100, (uint64_t)v114, (uint64_t)v1335);
                  if (v115)
                  {
                    v118 = (unint64_t *)&v115->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
LABEL_185:
                  v123 = *(std::__shared_weak_count **)&buf[8];
                  if (!*(_QWORD *)&buf[8])
                    goto LABEL_189;
                  v124 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (v125)
                    goto LABEL_189;
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                  v126 = (unsigned __int8 *)*((_QWORD *)v79 + 1);
                  if (!v126)
                  {
                    do
                    {
LABEL_193:
                      v127 = (unsigned __int8 *)*((_QWORD *)v79 + 2);
                      _ZF = *(_QWORD *)v127 == (_QWORD)v79;
                      v79 = v127;
                    }
                    while (!_ZF);
                    goto LABEL_122;
                  }
                  do
                  {
LABEL_190:
                    v127 = v126;
                    v126 = *(unsigned __int8 **)v126;
                  }
                  while (v126);
LABEL_122:
                  v79 = v127;
                  if (v127 == v54 + 464)
                  {
                    v53 = (std::__shared_weak_count *)*((_QWORD *)&v1337 + 1);
                    goto LABEL_68;
                  }
                }
              }
            }
          }
        }
        if (!v53)
          goto LABEL_72;
LABEL_68:
        v59 = (unint64_t *)&v53->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
          v61 = (_QWORD *)v51[1];
          if (!v61)
          {
            do
            {
LABEL_76:
              v62 = (_QWORD *)v51[2];
              _ZF = *v62 == (_QWORD)v51;
              v51 = v62;
            }
            while (!_ZF);
            goto LABEL_58;
          }
        }
        else
        {
LABEL_72:
          v61 = (_QWORD *)v51[1];
          if (!v61)
            goto LABEL_76;
        }
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
LABEL_58:
        v51 = v62;
        v7 = (uint64_t)v1335;
        if (v62 == v24 + 26)
          goto LABEL_410;
      }
      if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
      v69 = (id)GEOGetVectorKitStreamingPOILog_log;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        md::HighlightHelper::debugTileToString(&v1339, v1311);
        v70 = SHIBYTE(v1339.__r_.__value_.__r.__words[2]);
        v71 = v1339.__r_.__value_.__r.__words[0];
        md::HighlightHelper::debugTileToString(&__p, (const QuadTile *)v24 + 12);
        v72 = &v1339;
        if (v70 < 0)
          v72 = (std::string *)v71;
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v75 = *((_QWORD *)v54 + 54);
        v74 = *((_QWORD *)v54 + 55);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v72;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = p_p;
        *(_WORD *)&buf[22] = 2048;
        v1344 = (uint64_t)v24;
        v1345 = 2048;
        v1346 = v1338.f64[0];
        v1347 = 2048;
        v1348 = v74;
        v1349 = 2048;
        v1350 = v75;
        _os_log_impl(&dword_19F029000, v69, OS_LOG_TYPE_DEBUG, "Add MapTileFeature, mapTile=(%s), labelTile=(%s)[%p] geoTile[%p] removeVersion=%llu, updateVersion=%llu", buf, 0x3Eu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v1339.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_111;
        }
        else if ((SHIBYTE(v1339.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_111;
        }
        operator delete(v1339.__r_.__value_.__l.__data_);
      }
LABEL_111:

      goto LABEL_112;
    }
LABEL_410:
    v260 = (_QWORD *)v24[5];
    v261 = v24 + 6;
    if (v260 != v24 + 6)
    {
      v1323 = 0;
      v262 = (uint64_t *)v1329;
      v263 = v1331;
      while (1)
      {
        *(_OWORD *)&v1339.__r_.__value_.__l.__data_ = 0uLL;
        v264 = (std::__shared_weak_count *)v260[5];
        if (!v264
          || (v1339.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v264)) == 0
          || (v265 = (unsigned __int8 *)v260[4], (v1339.__r_.__value_.__r.__words[0] = (std::string::size_type)v265) == 0))
        {
          ++*(_DWORD *)(v7 + 88);
          goto LABEL_421;
        }
        if (!*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v265 + 552))(v265, 0, 0, 0, 0))
        {
          ++*(_DWORD *)(v7 + 92);
          goto LABEL_421;
        }
        if (!v265[140] && v1327 < v265[136])
        {
          ++*(_DWORD *)(v7 + 96);
          goto LABEL_421;
        }
        md::LineLabelFeature::updatePositions((md::LineLabelFeature *)v265, v1342, v1327, (md::LabelMapTile *)v7);
        md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)(v265 + 192), v23, v1327);
        if (v1323)
          operator delete(v1323);
        v271 = *(unsigned int **)&buf[8];
        v1323 = *(QuadTile **)buf;
        v272 = *(unsigned int **)buf;
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          break;
LABEL_421:
        size = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        if (!v1339.__r_.__value_.__l.__size_)
          goto LABEL_425;
        v267 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
        do
          v268 = __ldaxr(v267);
        while (__stlxr(v268 - 1, v267));
        if (!v268)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
          v269 = (_QWORD *)v260[1];
          if (!v269)
          {
            do
            {
LABEL_429:
              v270 = (_QWORD *)v260[2];
              _ZF = *v270 == (_QWORD)v260;
              v260 = v270;
            }
            while (!_ZF);
            goto LABEL_412;
          }
        }
        else
        {
LABEL_425:
          v269 = (_QWORD *)v260[1];
          if (!v269)
            goto LABEL_429;
        }
        do
        {
          v270 = v269;
          v269 = (_QWORD *)*v269;
        }
        while (v269);
LABEL_412:
        v260 = v270;
        if (v270 == v261)
          goto LABEL_509;
      }
      while (1)
      {
        v273 = v1342;
        v274 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v275 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v276 = __ldxr(v275);
          while (__stxr(v276 + 1, v275));
        }
        md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v273, &__p, v272, 1);
        if (!v274)
          goto LABEL_444;
        v277 = (unint64_t *)&v274->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
          v279 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_500;
        }
        else
        {
LABEL_444:
          v279 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_500;
        }
        v280 = *v1329;
        v281 = (uint64_t *)v1329;
        v282 = (uint64_t *)v1329;
        if (*v1329)
        {
          while (1)
          {
            while (1)
            {
              v282 = v280;
              v283 = v280[4];
              if (v279 >= v283)
                break;
              v280 = (uint64_t *)*v282;
              v281 = v282;
              if (!*v282)
                goto LABEL_452;
            }
            if (v283 >= v279)
              break;
            v280 = (uint64_t *)v282[1];
            if (!v280)
            {
              v281 = v282 + 1;
              goto LABEL_452;
            }
          }
        }
        else
        {
LABEL_452:
          v284 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 424) + 16))(*(_QWORD *)(v7 + 424), 48, 8);
          v285 = *(_QWORD *)&buf[8];
          *(_QWORD *)(v284 + 32) = *(_QWORD *)buf;
          *(_QWORD *)(v284 + 40) = v285;
          if (v285)
          {
            v286 = (unint64_t *)(v285 + 8);
            do
              v287 = __ldxr(v286);
            while (__stxr(v287 + 1, v286));
          }
          *(_QWORD *)v284 = 0;
          *(_QWORD *)(v284 + 8) = 0;
          *(_QWORD *)(v284 + 16) = v282;
          *v281 = v284;
          v288 = **(_QWORD **)(v7 + 408);
          if (v288)
          {
            *(_QWORD *)(v7 + 408) = v288;
            v284 = *v281;
          }
          v289 = *v1329;
          _ZF = v284 == (_QWORD)*v1329;
          *(_BYTE *)(v284 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v290 = *(uint64_t **)(v284 + 16);
              if (*((_BYTE *)v290 + 24))
                break;
              v291 = v290[2];
              v292 = *(uint64_t **)v291;
              if (*(uint64_t **)v291 == v290)
              {
                v295 = *(_QWORD *)(v291 + 8);
                if (!v295 || (v296 = *(unsigned __int8 *)(v295 + 24), v293 = (_BYTE *)(v295 + 24), v296))
                {
                  if (*v290 == v284)
                  {
                    v297 = *(uint64_t ***)(v284 + 16);
                  }
                  else
                  {
                    v297 = (uint64_t **)v290[1];
                    v298 = *v297;
                    v290[1] = (uint64_t)*v297;
                    if (v298)
                    {
                      v298[2] = (uint64_t)v290;
                      v291 = v290[2];
                    }
                    v297[2] = (uint64_t *)v291;
                    *(_QWORD *)(v290[2] + 8 * (*(_QWORD *)v290[2] != (_QWORD)v290)) = v297;
                    *v297 = v290;
                    v290[2] = (uint64_t)v297;
                    v291 = (uint64_t)v297[2];
                    v290 = *(uint64_t **)v291;
                  }
                  *((_BYTE *)v297 + 24) = 1;
                  *(_BYTE *)(v291 + 24) = 0;
                  v301 = v290[1];
                  *(_QWORD *)v291 = v301;
                  if (v301)
                    *(_QWORD *)(v301 + 16) = v291;
                  v290[2] = *(_QWORD *)(v291 + 16);
                  *(_QWORD *)(*(_QWORD *)(v291 + 16) + 8 * (**(_QWORD **)(v291 + 16) != v291)) = v290;
                  v290[1] = v291;
                  goto LABEL_486;
                }
              }
              else if (!v292 || (v294 = *((unsigned __int8 *)v292 + 24), v293 = v292 + 3, v294))
              {
                if (*v290 == v284)
                {
                  v299 = *(_QWORD *)(v284 + 8);
                  *v290 = v299;
                  if (v299)
                  {
                    *(_QWORD *)(v299 + 16) = v290;
                    v291 = v290[2];
                  }
                  *(_QWORD *)(v284 + 16) = v291;
                  *(_QWORD *)(v290[2] + 8 * (*(_QWORD *)v290[2] != (_QWORD)v290)) = v284;
                  *(_QWORD *)(v284 + 8) = v290;
                  v290[2] = v284;
                  v291 = *(_QWORD *)(v284 + 16);
                }
                else
                {
                  v284 = *(_QWORD *)(v284 + 16);
                }
                *(_BYTE *)(v284 + 24) = 1;
                *(_BYTE *)(v291 + 24) = 0;
                v290 = *(uint64_t **)(v291 + 8);
                v300 = *v290;
                *(_QWORD *)(v291 + 8) = *v290;
                if (v300)
                  *(_QWORD *)(v300 + 16) = v291;
                v290[2] = *(_QWORD *)(v291 + 16);
                *(_QWORD *)(*(_QWORD *)(v291 + 16) + 8 * (**(_QWORD **)(v291 + 16) != v291)) = v290;
                *v290 = v291;
LABEL_486:
                *(_QWORD *)(v291 + 16) = v290;
                break;
              }
              *((_BYTE *)v290 + 24) = 1;
              v284 = v291;
              *(_BYTE *)(v291 + 24) = v291 == (_QWORD)v289;
              *v293 = 1;
            }
            while ((uint64_t *)v291 != v289);
          }
          ++*(_QWORD *)(v7 + 432);
          v302 = *(_QWORD *)buf;
          v303 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
          do
            v304 = __ldaxr(v303);
          while (__stlxr(v304 + 1, v303));
          if (!v304 && !*(_BYTE *)(v302 + 820))
          {
            *(_BYTE *)(v302 + 1214) = -1;
            md::Label::updateStateMachineForStaging(v302, 0, 37);
          }
          *(_BYTE *)(v302 + 1261) = 0;
          *(_QWORD *)(v302 + 1224) = 0;
          v279 = *(_QWORD *)buf;
        }
        v305 = v1342;
        v306 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v307 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v308 = __ldxr(v307);
          while (__stxr(v308 + 1, v307));
        }
        md::Label::update(v279, (uint64_t)v305, v7);
        if (!v306)
          goto LABEL_500;
        v309 = (unint64_t *)&v306->__shared_owners_;
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 - 1, v309));
        if (v310)
        {
LABEL_500:
          v311 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
            goto LABEL_501;
          goto LABEL_436;
        }
        ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
        std::__shared_weak_count::__release_weak(v306);
        v311 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
LABEL_501:
          v312 = (unint64_t *)&v311->__shared_owners_;
          do
            v313 = __ldaxr(v312);
          while (__stlxr(v313 - 1, v312));
          if (!v313)
          {
            ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
            std::__shared_weak_count::__release_weak(v311);
          }
        }
LABEL_436:
        if (++v272 == v271)
          goto LABEL_421;
      }
    }
    v1323 = 0;
    v262 = (uint64_t *)v1329;
    v263 = v1331;
LABEL_509:
    v314 = (_QWORD *)v1315[17];
    if (v314 != v1315 + 18)
    {
      while (1)
      {
        *(_OWORD *)&v1339.__r_.__value_.__l.__data_ = 0uLL;
        v323 = (std::__shared_weak_count *)v314[5];
        if (!v323
          || (v1339.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v323)) == 0
          || (v324 = (unsigned __int8 *)v314[4], (v1339.__r_.__value_.__r.__words[0] = (std::string::size_type)v324) == 0))
        {
          ++*(_DWORD *)(v7 + 88);
          goto LABEL_530;
        }
        if (!*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v324 + 552))(v324, 0, 0, 0, 0))
        {
          ++*(_DWORD *)(v7 + 92);
          goto LABEL_530;
        }
        if (!v324[140] && v1327 < v324[136])
        {
          ++*(_DWORD *)(v7 + 96);
          goto LABEL_530;
        }
        md::LineLabelFeature::updatePositions((md::LineLabelFeature *)v324, v1342, v1327, (md::LabelMapTile *)v7);
        md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)(v324 + 192), v23, v1327);
        if (v1323)
          operator delete(v1323);
        v330 = *(unsigned int **)&buf[8];
        v1323 = *(QuadTile **)buf;
        v331 = *(unsigned int **)buf;
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          break;
LABEL_530:
        v325 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        if (!v1339.__r_.__value_.__l.__size_)
          goto LABEL_534;
        v326 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
        do
          v327 = __ldaxr(v326);
        while (__stlxr(v327 - 1, v326));
        if (!v327)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
          v328 = (_QWORD *)v314[1];
          if (!v328)
          {
            do
            {
LABEL_538:
              v329 = (_QWORD *)v314[2];
              _ZF = *v329 == (_QWORD)v314;
              v314 = v329;
            }
            while (!_ZF);
            goto LABEL_521;
          }
        }
        else
        {
LABEL_534:
          v328 = (_QWORD *)v314[1];
          if (!v328)
            goto LABEL_538;
        }
        do
        {
          v329 = v328;
          v328 = (_QWORD *)*v328;
        }
        while (v328);
LABEL_521:
        v314 = v329;
        if (v329 == v1315 + 18)
          goto LABEL_510;
      }
      while (1)
      {
        v332 = v1342;
        v333 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v334 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v335 = __ldxr(v334);
          while (__stxr(v335 + 1, v334));
        }
        md::LabelPool::labelForFeature((md::LabelBase **)buf, v263, (uint64_t)v332, &__p, v331, 1);
        if (!v333)
          goto LABEL_553;
        v336 = (unint64_t *)&v333->__shared_owners_;
        do
          v337 = __ldaxr(v336);
        while (__stlxr(v337 - 1, v336));
        if (!v337)
        {
          ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
          std::__shared_weak_count::__release_weak(v333);
          v338 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_609;
        }
        else
        {
LABEL_553:
          v338 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_609;
        }
        v339 = (uint64_t *)*v262;
        v340 = v262;
        v341 = v262;
        if (*v262)
        {
          while (1)
          {
            while (1)
            {
              v341 = v339;
              v342 = v339[4];
              if (v338 >= v342)
                break;
              v339 = (uint64_t *)*v341;
              v340 = v341;
              if (!*v341)
                goto LABEL_561;
            }
            if (v342 >= v338)
              break;
            v339 = (uint64_t *)v341[1];
            if (!v339)
            {
              v340 = v341 + 1;
              goto LABEL_561;
            }
          }
        }
        else
        {
LABEL_561:
          v343 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 424) + 16))(*(_QWORD *)(v7 + 424), 48, 8);
          v344 = *(_QWORD *)&buf[8];
          *(_QWORD *)(v343 + 32) = *(_QWORD *)buf;
          *(_QWORD *)(v343 + 40) = v344;
          if (v344)
          {
            v345 = (unint64_t *)(v344 + 8);
            do
              v346 = __ldxr(v345);
            while (__stxr(v346 + 1, v345));
          }
          *(_QWORD *)v343 = 0;
          *(_QWORD *)(v343 + 8) = 0;
          *(_QWORD *)(v343 + 16) = v341;
          *v340 = v343;
          v347 = **(_QWORD **)(v7 + 408);
          if (v347)
          {
            *(_QWORD *)(v7 + 408) = v347;
            v343 = *v340;
          }
          v348 = *v262;
          _ZF = v343 == *v262;
          *(_BYTE *)(v343 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v349 = *(uint64_t **)(v343 + 16);
              if (*((_BYTE *)v349 + 24))
                break;
              v350 = v349[2];
              v351 = *(uint64_t **)v350;
              if (*(uint64_t **)v350 == v349)
              {
                v354 = *(_QWORD *)(v350 + 8);
                if (!v354 || (v355 = *(unsigned __int8 *)(v354 + 24), v352 = (_BYTE *)(v354 + 24), v355))
                {
                  if (*v349 == v343)
                  {
                    v356 = *(uint64_t ***)(v343 + 16);
                  }
                  else
                  {
                    v356 = (uint64_t **)v349[1];
                    v357 = *v356;
                    v349[1] = (uint64_t)*v356;
                    if (v357)
                    {
                      v357[2] = (uint64_t)v349;
                      v350 = v349[2];
                    }
                    v356[2] = (uint64_t *)v350;
                    *(_QWORD *)(v349[2] + 8 * (*(_QWORD *)v349[2] != (_QWORD)v349)) = v356;
                    *v356 = v349;
                    v349[2] = (uint64_t)v356;
                    v350 = (uint64_t)v356[2];
                    v349 = *(uint64_t **)v350;
                  }
                  *((_BYTE *)v356 + 24) = 1;
                  *(_BYTE *)(v350 + 24) = 0;
                  v360 = v349[1];
                  *(_QWORD *)v350 = v360;
                  if (v360)
                    *(_QWORD *)(v360 + 16) = v350;
                  v349[2] = *(_QWORD *)(v350 + 16);
                  *(_QWORD *)(*(_QWORD *)(v350 + 16) + 8 * (**(_QWORD **)(v350 + 16) != v350)) = v349;
                  v349[1] = v350;
                  goto LABEL_595;
                }
              }
              else if (!v351 || (v353 = *((unsigned __int8 *)v351 + 24), v352 = v351 + 3, v353))
              {
                if (*v349 == v343)
                {
                  v358 = *(_QWORD *)(v343 + 8);
                  *v349 = v358;
                  if (v358)
                  {
                    *(_QWORD *)(v358 + 16) = v349;
                    v350 = v349[2];
                  }
                  *(_QWORD *)(v343 + 16) = v350;
                  *(_QWORD *)(v349[2] + 8 * (*(_QWORD *)v349[2] != (_QWORD)v349)) = v343;
                  *(_QWORD *)(v343 + 8) = v349;
                  v349[2] = v343;
                  v350 = *(_QWORD *)(v343 + 16);
                }
                else
                {
                  v343 = *(_QWORD *)(v343 + 16);
                }
                *(_BYTE *)(v343 + 24) = 1;
                *(_BYTE *)(v350 + 24) = 0;
                v349 = *(uint64_t **)(v350 + 8);
                v359 = *v349;
                *(_QWORD *)(v350 + 8) = *v349;
                if (v359)
                  *(_QWORD *)(v359 + 16) = v350;
                v349[2] = *(_QWORD *)(v350 + 16);
                *(_QWORD *)(*(_QWORD *)(v350 + 16) + 8 * (**(_QWORD **)(v350 + 16) != v350)) = v349;
                *v349 = v350;
LABEL_595:
                *(_QWORD *)(v350 + 16) = v349;
                break;
              }
              *((_BYTE *)v349 + 24) = 1;
              v343 = v350;
              *(_BYTE *)(v350 + 24) = v350 == v348;
              *v352 = 1;
            }
            while (v350 != v348);
          }
          ++*(_QWORD *)(v7 + 432);
          v361 = *(_QWORD *)buf;
          v362 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
          do
            v363 = __ldaxr(v362);
          while (__stlxr(v363 + 1, v362));
          if (!v363 && !*(_BYTE *)(v361 + 820))
          {
            *(_BYTE *)(v361 + 1214) = -1;
            md::Label::updateStateMachineForStaging(v361, 0, 37);
          }
          *(_BYTE *)(v361 + 1261) = 0;
          *(_QWORD *)(v361 + 1224) = 0;
          v338 = *(_QWORD *)buf;
        }
        v364 = v1342;
        v365 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v366 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v367 = __ldxr(v366);
          while (__stxr(v367 + 1, v366));
        }
        md::Label::update(v338, (uint64_t)v364, v7);
        if (!v365)
          goto LABEL_609;
        v368 = (unint64_t *)&v365->__shared_owners_;
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 - 1, v368));
        if (v369)
        {
LABEL_609:
          v370 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
            goto LABEL_610;
          goto LABEL_545;
        }
        ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
        std::__shared_weak_count::__release_weak(v365);
        v370 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
LABEL_610:
          v371 = (unint64_t *)&v370->__shared_owners_;
          do
            v372 = __ldaxr(v371);
          while (__stlxr(v372 - 1, v371));
          if (!v372)
          {
            ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
            std::__shared_weak_count::__release_weak(v370);
          }
        }
LABEL_545:
        if (++v331 == v330)
          goto LABEL_530;
      }
    }
LABEL_510:
    v315 = (_QWORD *)v1315[29];
    if (v315 != v1315 + 30)
    {
      while (1)
      {
        *(_OWORD *)&v1339.__r_.__value_.__l.__data_ = 0uLL;
        v373 = (std::__shared_weak_count *)v315[5];
        if (!v373
          || (v1339.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v373)) == 0
          || (v374 = (unsigned __int8 *)v315[4], (v1339.__r_.__value_.__r.__words[0] = (std::string::size_type)v374) == 0))
        {
          ++*(_DWORD *)(v7 + 88);
          goto LABEL_626;
        }
        if (!*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v374 + 552))(v374, 0, 0, 0, 0))
        {
          ++*(_DWORD *)(v7 + 92);
          goto LABEL_626;
        }
        if (!v374[140] && v1327 < v374[136])
        {
          ++*(_DWORD *)(v7 + 96);
          goto LABEL_626;
        }
        md::LineLabelFeature::updatePositions((md::LineLabelFeature *)v374, v1342, v1327, (md::LabelMapTile *)v7);
        md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)(v374 + 192), v23, v1327);
        if (v1323)
          operator delete(v1323);
        v380 = *(unsigned int **)&buf[8];
        v1323 = *(QuadTile **)buf;
        v381 = *(unsigned int **)buf;
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          break;
LABEL_626:
        v375 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        if (!v1339.__r_.__value_.__l.__size_)
          goto LABEL_630;
        v376 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
        do
          v377 = __ldaxr(v376);
        while (__stlxr(v377 - 1, v376));
        if (!v377)
        {
          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
          std::__shared_weak_count::__release_weak(v375);
          v378 = (_QWORD *)v315[1];
          if (!v378)
          {
            do
            {
LABEL_634:
              v379 = (_QWORD *)v315[2];
              _ZF = *v379 == (_QWORD)v315;
              v315 = v379;
            }
            while (!_ZF);
            goto LABEL_617;
          }
        }
        else
        {
LABEL_630:
          v378 = (_QWORD *)v315[1];
          if (!v378)
            goto LABEL_634;
        }
        do
        {
          v379 = v378;
          v378 = (_QWORD *)*v378;
        }
        while (v378);
LABEL_617:
        v315 = v379;
        if (v379 == v1315 + 30)
          goto LABEL_511;
      }
      while (1)
      {
        v382 = v1342;
        v383 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v384 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v385 = __ldxr(v384);
          while (__stxr(v385 + 1, v384));
        }
        md::LabelPool::labelForFeature((md::LabelBase **)buf, v263, (uint64_t)v382, &__p, v381, 1);
        if (!v383)
          goto LABEL_649;
        v386 = (unint64_t *)&v383->__shared_owners_;
        do
          v387 = __ldaxr(v386);
        while (__stlxr(v387 - 1, v386));
        if (!v387)
        {
          ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
          std::__shared_weak_count::__release_weak(v383);
          v388 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_705;
        }
        else
        {
LABEL_649:
          v388 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_705;
        }
        v389 = (uint64_t *)*v262;
        v390 = v262;
        v391 = v262;
        if (*v262)
        {
          while (1)
          {
            while (1)
            {
              v391 = v389;
              v392 = v389[4];
              if (v388 >= v392)
                break;
              v389 = (uint64_t *)*v391;
              v390 = v391;
              if (!*v391)
                goto LABEL_657;
            }
            if (v392 >= v388)
              break;
            v389 = (uint64_t *)v391[1];
            if (!v389)
            {
              v390 = v391 + 1;
              goto LABEL_657;
            }
          }
        }
        else
        {
LABEL_657:
          v393 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 424) + 16))(*(_QWORD *)(v7 + 424), 48, 8);
          v394 = *(_QWORD *)&buf[8];
          *(_QWORD *)(v393 + 32) = *(_QWORD *)buf;
          *(_QWORD *)(v393 + 40) = v394;
          if (v394)
          {
            v395 = (unint64_t *)(v394 + 8);
            do
              v396 = __ldxr(v395);
            while (__stxr(v396 + 1, v395));
          }
          *(_QWORD *)v393 = 0;
          *(_QWORD *)(v393 + 8) = 0;
          *(_QWORD *)(v393 + 16) = v391;
          *v390 = v393;
          v397 = **(_QWORD **)(v7 + 408);
          if (v397)
          {
            *(_QWORD *)(v7 + 408) = v397;
            v393 = *v390;
          }
          v398 = *v262;
          _ZF = v393 == *v262;
          *(_BYTE *)(v393 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v399 = *(uint64_t **)(v393 + 16);
              if (*((_BYTE *)v399 + 24))
                break;
              v400 = v399[2];
              v401 = *(uint64_t **)v400;
              if (*(uint64_t **)v400 == v399)
              {
                v404 = *(_QWORD *)(v400 + 8);
                if (!v404 || (v405 = *(unsigned __int8 *)(v404 + 24), v402 = (_BYTE *)(v404 + 24), v405))
                {
                  if (*v399 == v393)
                  {
                    v406 = *(uint64_t ***)(v393 + 16);
                  }
                  else
                  {
                    v406 = (uint64_t **)v399[1];
                    v407 = *v406;
                    v399[1] = (uint64_t)*v406;
                    if (v407)
                    {
                      v407[2] = (uint64_t)v399;
                      v400 = v399[2];
                    }
                    v406[2] = (uint64_t *)v400;
                    *(_QWORD *)(v399[2] + 8 * (*(_QWORD *)v399[2] != (_QWORD)v399)) = v406;
                    *v406 = v399;
                    v399[2] = (uint64_t)v406;
                    v400 = (uint64_t)v406[2];
                    v399 = *(uint64_t **)v400;
                  }
                  *((_BYTE *)v406 + 24) = 1;
                  *(_BYTE *)(v400 + 24) = 0;
                  v410 = v399[1];
                  *(_QWORD *)v400 = v410;
                  if (v410)
                    *(_QWORD *)(v410 + 16) = v400;
                  v399[2] = *(_QWORD *)(v400 + 16);
                  *(_QWORD *)(*(_QWORD *)(v400 + 16) + 8 * (**(_QWORD **)(v400 + 16) != v400)) = v399;
                  v399[1] = v400;
                  goto LABEL_691;
                }
              }
              else if (!v401 || (v403 = *((unsigned __int8 *)v401 + 24), v402 = v401 + 3, v403))
              {
                if (*v399 == v393)
                {
                  v408 = *(_QWORD *)(v393 + 8);
                  *v399 = v408;
                  if (v408)
                  {
                    *(_QWORD *)(v408 + 16) = v399;
                    v400 = v399[2];
                  }
                  *(_QWORD *)(v393 + 16) = v400;
                  *(_QWORD *)(v399[2] + 8 * (*(_QWORD *)v399[2] != (_QWORD)v399)) = v393;
                  *(_QWORD *)(v393 + 8) = v399;
                  v399[2] = v393;
                  v400 = *(_QWORD *)(v393 + 16);
                }
                else
                {
                  v393 = *(_QWORD *)(v393 + 16);
                }
                *(_BYTE *)(v393 + 24) = 1;
                *(_BYTE *)(v400 + 24) = 0;
                v399 = *(uint64_t **)(v400 + 8);
                v409 = *v399;
                *(_QWORD *)(v400 + 8) = *v399;
                if (v409)
                  *(_QWORD *)(v409 + 16) = v400;
                v399[2] = *(_QWORD *)(v400 + 16);
                *(_QWORD *)(*(_QWORD *)(v400 + 16) + 8 * (**(_QWORD **)(v400 + 16) != v400)) = v399;
                *v399 = v400;
LABEL_691:
                *(_QWORD *)(v400 + 16) = v399;
                break;
              }
              *((_BYTE *)v399 + 24) = 1;
              v393 = v400;
              *(_BYTE *)(v400 + 24) = v400 == v398;
              *v402 = 1;
            }
            while (v400 != v398);
          }
          ++*(_QWORD *)(v7 + 432);
          v411 = *(_QWORD *)buf;
          v412 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 + 1, v412));
          if (!v413 && !*(_BYTE *)(v411 + 820))
          {
            *(_BYTE *)(v411 + 1214) = -1;
            md::Label::updateStateMachineForStaging(v411, 0, 37);
          }
          *(_BYTE *)(v411 + 1261) = 0;
          *(_QWORD *)(v411 + 1224) = 0;
          v388 = *(_QWORD *)buf;
        }
        v414 = v1342;
        v415 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v416 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v417 = __ldxr(v416);
          while (__stxr(v417 + 1, v416));
        }
        md::Label::update(v388, (uint64_t)v414, v7);
        if (!v415)
          goto LABEL_705;
        v418 = (unint64_t *)&v415->__shared_owners_;
        do
          v419 = __ldaxr(v418);
        while (__stlxr(v419 - 1, v418));
        if (v419)
        {
LABEL_705:
          v420 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
            goto LABEL_706;
          goto LABEL_641;
        }
        ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
        std::__shared_weak_count::__release_weak(v415);
        v420 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
LABEL_706:
          v421 = (unint64_t *)&v420->__shared_owners_;
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
            std::__shared_weak_count::__release_weak(v420);
          }
        }
LABEL_641:
        if (++v381 == v380)
          goto LABEL_626;
      }
    }
LABEL_511:
    v316 = (_QWORD *)v1315[13];
    if (v316 != v1315 + 14)
    {
      while (1)
      {
        *(_OWORD *)&v1339.__r_.__value_.__l.__data_ = 0uLL;
        v423 = (std::__shared_weak_count *)v316[5];
        if (!v423
          || (v1339.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v423)) == 0
          || (v424 = (unsigned __int8 *)v316[4], (v1339.__r_.__value_.__r.__words[0] = (std::string::size_type)v424) == 0))
        {
          ++*(_DWORD *)(v7 + 88);
          goto LABEL_722;
        }
        if (!*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v424 + 552))(v424, 0, 0, 0, 0))
        {
          ++*(_DWORD *)(v7 + 92);
          goto LABEL_722;
        }
        if (!v424[140] && v1327 < v424[136])
        {
          ++*(_DWORD *)(v7 + 96);
          goto LABEL_722;
        }
        md::LineLabelFeature::updatePositions((md::LineLabelFeature *)v424, v1342, v1327, (md::LabelMapTile *)v7);
        md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)(v424 + 192), v23, v1327);
        if (v1323)
          operator delete(v1323);
        v430 = *(unsigned int **)&buf[8];
        v1323 = *(QuadTile **)buf;
        v431 = *(unsigned int **)buf;
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          break;
LABEL_722:
        v425 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        if (!v1339.__r_.__value_.__l.__size_)
          goto LABEL_726;
        v426 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
        do
          v427 = __ldaxr(v426);
        while (__stlxr(v427 - 1, v426));
        if (!v427)
        {
          ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
          std::__shared_weak_count::__release_weak(v425);
          v428 = (_QWORD *)v316[1];
          if (!v428)
          {
            do
            {
LABEL_730:
              v429 = (_QWORD *)v316[2];
              _ZF = *v429 == (_QWORD)v316;
              v316 = v429;
            }
            while (!_ZF);
            goto LABEL_713;
          }
        }
        else
        {
LABEL_726:
          v428 = (_QWORD *)v316[1];
          if (!v428)
            goto LABEL_730;
        }
        do
        {
          v429 = v428;
          v428 = (_QWORD *)*v428;
        }
        while (v428);
LABEL_713:
        v316 = v429;
        if (v429 == v1315 + 14)
          goto LABEL_512;
      }
      while (1)
      {
        v432 = v1342;
        v433 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v434 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v435 = __ldxr(v434);
          while (__stxr(v435 + 1, v434));
        }
        md::LabelPool::labelForFeature((md::LabelBase **)buf, v263, (uint64_t)v432, &__p, v431, 1);
        if (!v433)
          goto LABEL_745;
        v436 = (unint64_t *)&v433->__shared_owners_;
        do
          v437 = __ldaxr(v436);
        while (__stlxr(v437 - 1, v436));
        if (!v437)
        {
          ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
          std::__shared_weak_count::__release_weak(v433);
          v438 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_801;
        }
        else
        {
LABEL_745:
          v438 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_801;
        }
        v439 = (uint64_t *)*v262;
        v440 = v262;
        v441 = v262;
        if (*v262)
        {
          while (1)
          {
            while (1)
            {
              v441 = v439;
              v442 = v439[4];
              if (v438 >= v442)
                break;
              v439 = (uint64_t *)*v441;
              v440 = v441;
              if (!*v441)
                goto LABEL_753;
            }
            if (v442 >= v438)
              break;
            v439 = (uint64_t *)v441[1];
            if (!v439)
            {
              v440 = v441 + 1;
              goto LABEL_753;
            }
          }
        }
        else
        {
LABEL_753:
          v443 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 424) + 16))(*(_QWORD *)(v7 + 424), 48, 8);
          v444 = *(_QWORD *)&buf[8];
          *(_QWORD *)(v443 + 32) = *(_QWORD *)buf;
          *(_QWORD *)(v443 + 40) = v444;
          if (v444)
          {
            v445 = (unint64_t *)(v444 + 8);
            do
              v446 = __ldxr(v445);
            while (__stxr(v446 + 1, v445));
          }
          *(_QWORD *)v443 = 0;
          *(_QWORD *)(v443 + 8) = 0;
          *(_QWORD *)(v443 + 16) = v441;
          *v440 = v443;
          v447 = **(_QWORD **)(v7 + 408);
          if (v447)
          {
            *(_QWORD *)(v7 + 408) = v447;
            v443 = *v440;
          }
          v448 = *v262;
          _ZF = v443 == *v262;
          *(_BYTE *)(v443 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v449 = *(uint64_t **)(v443 + 16);
              if (*((_BYTE *)v449 + 24))
                break;
              v450 = v449[2];
              v451 = *(uint64_t **)v450;
              if (*(uint64_t **)v450 == v449)
              {
                v454 = *(_QWORD *)(v450 + 8);
                if (!v454 || (v455 = *(unsigned __int8 *)(v454 + 24), v452 = (_BYTE *)(v454 + 24), v455))
                {
                  if (*v449 == v443)
                  {
                    v456 = *(uint64_t ***)(v443 + 16);
                  }
                  else
                  {
                    v456 = (uint64_t **)v449[1];
                    v457 = *v456;
                    v449[1] = (uint64_t)*v456;
                    if (v457)
                    {
                      v457[2] = (uint64_t)v449;
                      v450 = v449[2];
                    }
                    v456[2] = (uint64_t *)v450;
                    *(_QWORD *)(v449[2] + 8 * (*(_QWORD *)v449[2] != (_QWORD)v449)) = v456;
                    *v456 = v449;
                    v449[2] = (uint64_t)v456;
                    v450 = (uint64_t)v456[2];
                    v449 = *(uint64_t **)v450;
                  }
                  *((_BYTE *)v456 + 24) = 1;
                  *(_BYTE *)(v450 + 24) = 0;
                  v460 = v449[1];
                  *(_QWORD *)v450 = v460;
                  if (v460)
                    *(_QWORD *)(v460 + 16) = v450;
                  v449[2] = *(_QWORD *)(v450 + 16);
                  *(_QWORD *)(*(_QWORD *)(v450 + 16) + 8 * (**(_QWORD **)(v450 + 16) != v450)) = v449;
                  v449[1] = v450;
                  goto LABEL_787;
                }
              }
              else if (!v451 || (v453 = *((unsigned __int8 *)v451 + 24), v452 = v451 + 3, v453))
              {
                if (*v449 == v443)
                {
                  v458 = *(_QWORD *)(v443 + 8);
                  *v449 = v458;
                  if (v458)
                  {
                    *(_QWORD *)(v458 + 16) = v449;
                    v450 = v449[2];
                  }
                  *(_QWORD *)(v443 + 16) = v450;
                  *(_QWORD *)(v449[2] + 8 * (*(_QWORD *)v449[2] != (_QWORD)v449)) = v443;
                  *(_QWORD *)(v443 + 8) = v449;
                  v449[2] = v443;
                  v450 = *(_QWORD *)(v443 + 16);
                }
                else
                {
                  v443 = *(_QWORD *)(v443 + 16);
                }
                *(_BYTE *)(v443 + 24) = 1;
                *(_BYTE *)(v450 + 24) = 0;
                v449 = *(uint64_t **)(v450 + 8);
                v459 = *v449;
                *(_QWORD *)(v450 + 8) = *v449;
                if (v459)
                  *(_QWORD *)(v459 + 16) = v450;
                v449[2] = *(_QWORD *)(v450 + 16);
                *(_QWORD *)(*(_QWORD *)(v450 + 16) + 8 * (**(_QWORD **)(v450 + 16) != v450)) = v449;
                *v449 = v450;
LABEL_787:
                *(_QWORD *)(v450 + 16) = v449;
                break;
              }
              *((_BYTE *)v449 + 24) = 1;
              v443 = v450;
              *(_BYTE *)(v450 + 24) = v450 == v448;
              *v452 = 1;
            }
            while (v450 != v448);
          }
          ++*(_QWORD *)(v7 + 432);
          v461 = *(_QWORD *)buf;
          v462 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
          do
            v463 = __ldaxr(v462);
          while (__stlxr(v463 + 1, v462));
          if (!v463 && !*(_BYTE *)(v461 + 820))
          {
            *(_BYTE *)(v461 + 1214) = -1;
            md::Label::updateStateMachineForStaging(v461, 0, 37);
          }
          *(_BYTE *)(v461 + 1261) = 0;
          *(_QWORD *)(v461 + 1224) = 0;
          v438 = *(_QWORD *)buf;
        }
        v464 = v1342;
        v465 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
        if (v1339.__r_.__value_.__l.__size_)
        {
          v466 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
          do
            v467 = __ldxr(v466);
          while (__stxr(v467 + 1, v466));
        }
        md::Label::update(v438, (uint64_t)v464, v7);
        if (!v465)
          goto LABEL_801;
        v468 = (unint64_t *)&v465->__shared_owners_;
        do
          v469 = __ldaxr(v468);
        while (__stlxr(v469 - 1, v468));
        if (v469)
        {
LABEL_801:
          v470 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
            goto LABEL_802;
          goto LABEL_737;
        }
        ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
        std::__shared_weak_count::__release_weak(v465);
        v470 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
LABEL_802:
          v471 = (unint64_t *)&v470->__shared_owners_;
          do
            v472 = __ldaxr(v471);
          while (__stlxr(v472 - 1, v471));
          if (!v472)
          {
            ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
            std::__shared_weak_count::__release_weak(v470);
          }
        }
LABEL_737:
        if (++v431 == v430)
          goto LABEL_722;
      }
    }
LABEL_512:
    v317 = (_QWORD *)v1315[21];
    v318 = v1315 + 22;
    _ZF = v317 == v1315 + 22;
    v319 = v1327;
    v1316 = v1315 + 22;
    if (!_ZF)
    {
      while (1)
      {
        *(_OWORD *)&v1339.__r_.__value_.__l.__data_ = 0uLL;
        v473 = (std::__shared_weak_count *)v317[5];
        if (v473)
        {
          v1339.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v473);
          if (v1339.__r_.__value_.__l.__size_)
          {
            v474 = (unsigned __int8 *)v317[4];
            v1339.__r_.__value_.__r.__words[0] = (std::string::size_type)v474;
            if (v474)
              break;
          }
        }
        ++*(_DWORD *)(v7 + 88);
LABEL_818:
        v475 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
        if (!v1339.__r_.__value_.__l.__size_)
          goto LABEL_822;
        v476 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
        do
          v477 = __ldaxr(v476);
        while (__stlxr(v477 - 1, v476));
        if (!v477)
        {
          ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
          std::__shared_weak_count::__release_weak(v475);
          v478 = (_QWORD *)v317[1];
          if (!v478)
          {
            do
            {
LABEL_826:
              v479 = (_QWORD *)v317[2];
              _ZF = *v479 == (_QWORD)v317;
              v317 = v479;
            }
            while (!_ZF);
            goto LABEL_809;
          }
        }
        else
        {
LABEL_822:
          v478 = (_QWORD *)v317[1];
          if (!v478)
            goto LABEL_826;
        }
        do
        {
          v479 = v478;
          v478 = (_QWORD *)*v478;
        }
        while (v478);
LABEL_809:
        v317 = v479;
        if (v479 == v318)
          goto LABEL_514;
      }
      if (!*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v474 + 552))(v474, 0, 0, 0, 0))
      {
        ++*(_DWORD *)(v7 + 92);
        goto LABEL_901;
      }
      if (!v474[140] && v319 < v474[136])
      {
        ++*(_DWORD *)(v7 + 96);
LABEL_901:
        v23 = v1309;
        goto LABEL_818;
      }
      md::LineLabelFeature::updatePositions((md::LineLabelFeature *)v474, v1342, v319, (md::LabelMapTile *)v7);
      v480 = atomic_load(v474 + 672);
      if ((v480 & 1) == 0)
        goto LABEL_912;
      {
        v574 = operator new();
        *(_QWORD *)(v574 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v574 + 24) = "VectorKitLabels";
        *(_OWORD *)(v574 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v574 = &off_1E42B5668;
        *(_QWORD *)(v574 + 8) = "VectorKitLabels";
        *(_OWORD *)(v574 + 72) = 0u;
        *(_OWORD *)(v574 + 88) = 0u;
        *(_OWORD *)(v574 + 104) = 0u;
        *(_OWORD *)(v574 + 120) = 0u;
        *(_OWORD *)(v574 + 136) = 0u;
        *(_OWORD *)(v574 + 152) = 0u;
        *(_OWORD *)(v574 + 168) = 0u;
        *(_OWORD *)(v574 + 184) = 0u;
        *(_OWORD *)(v574 + 200) = 0u;
        *(_OWORD *)(v574 + 216) = 0u;
        *(_OWORD *)(v574 + 232) = 0u;
        *(_QWORD *)(v574 + 248) = 0;
        *(_OWORD *)(v574 + 56) = 0u;
        v575 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v574 + 56), 0);
        if ((_DWORD)v575)
          geo::read_write_lock::logFailure(v575, (uint64_t)"initialization", v576);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v574 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v574 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v574;
        v7 = (uint64_t)v1335;
      }
      v482 = mdm::Allocator::instance(void)::alloc;
      std::mutex::lock((std::mutex *)(v474 + 608));
      v483 = (unsigned __int8 *)*((_QWORD *)v474 + 85);
      v484 = (unsigned __int8 *)*((_QWORD *)v474 + 86);
      *(_OWORD *)(v474 + 680) = 0u;
      v485 = *((_QWORD *)v474 + 87);
      *((_QWORD *)v474 + 87) = 0;
      atomic_store(0, v474 + 672);
      std::mutex::unlock((std::mutex *)(v474 + 608));
      if (v483 == v484)
      {
        v319 = v1327;
        if (!v483)
          goto LABEL_912;
        goto LABEL_911;
      }
      v1289 = v485;
      v1291 = v482;
      v486 = (uint64_t **)(v474 + 576);
      v487 = v483;
      while (1)
      {
        v488 = *v487;
        if (v488 != 2)
        {
          if (v488 == 1)
            md::TransitLineLabelFeature::addTransitLink((uint64_t *)v474, *((_QWORD *)v487 + 1));
          goto LABEL_833;
        }
        v489 = (_QWORD *)*((_QWORD *)v474 + 63);
        if (v489 != *((_QWORD **)v474 + 64))
          break;
LABEL_833:
        v487 += 32;
        if (v487 == v484)
        {
          v7 = (uint64_t)v1335;
          v319 = v1327;
          v485 = v1289;
          v482 = v1291;
          if (!v483)
          {
LABEL_912:
            v23 = v1309;
            md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)(v474 + 192), v1309, v319);
            if (v1323)
              operator delete(v1323);
            v531 = *(unsigned int **)&buf[8];
            v1323 = *(QuadTile **)buf;
            v532 = *(unsigned int **)buf;
            if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
            {
LABEL_915:
              v318 = v1316;
              goto LABEL_818;
            }
            while (1)
            {
              v533 = v1342;
              v534 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
              if (v1339.__r_.__value_.__l.__size_)
              {
                v535 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
                do
                  v536 = __ldxr(v535);
                while (__stxr(v536 + 1, v535));
              }
              md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v533, &__p, v532, 1);
              if (!v534)
                goto LABEL_924;
              v537 = (unint64_t *)&v534->__shared_owners_;
              do
                v538 = __ldaxr(v537);
              while (__stlxr(v538 - 1, v537));
              if (!v538)
              {
                ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
                std::__shared_weak_count::__release_weak(v534);
                v539 = *(_QWORD *)buf;
                if (!*(_QWORD *)buf)
                  goto LABEL_979;
              }
              else
              {
LABEL_924:
                v539 = *(_QWORD *)buf;
                if (!*(_QWORD *)buf)
                  goto LABEL_979;
              }
              v540 = (uint64_t *)v1329;
              while (1)
              {
                v541 = (uint64_t *)*v540;
                v542 = v540;
                if (!*v540)
                  break;
                while (1)
                {
                  v540 = v541;
                  v543 = v541[4];
                  if (v539 < v543)
                    break;
                  if (v543 >= v539)
                    goto LABEL_972;
                  v541 = (uint64_t *)v540[1];
                  if (!v541)
                  {
                    v542 = v540 + 1;
                    goto LABEL_931;
                  }
                }
              }
LABEL_931:
              v544 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 424) + 16))(*(_QWORD *)(v7 + 424), 48, 8);
              v545 = *(_QWORD *)&buf[8];
              *(_QWORD *)(v544 + 32) = *(_QWORD *)buf;
              *(_QWORD *)(v544 + 40) = v545;
              if (v545)
              {
                v546 = (unint64_t *)(v545 + 8);
                do
                  v547 = __ldxr(v546);
                while (__stxr(v547 + 1, v546));
              }
              *(_QWORD *)v544 = 0;
              *(_QWORD *)(v544 + 8) = 0;
              *(_QWORD *)(v544 + 16) = v540;
              *v542 = v544;
              v548 = **(_QWORD **)(v7 + 408);
              if (v548)
              {
                *(_QWORD *)(v7 + 408) = v548;
                v544 = *v542;
              }
              v549 = *v1329;
              _ZF = v544 == (_QWORD)*v1329;
              *(_BYTE *)(v544 + 24) = _ZF;
              if (!_ZF)
              {
                do
                {
                  v550 = *(uint64_t **)(v544 + 16);
                  if (*((_BYTE *)v550 + 24))
                    break;
                  v551 = v550[2];
                  v552 = *(uint64_t **)v551;
                  if (*(uint64_t **)v551 == v550)
                  {
                    v555 = *(_QWORD *)(v551 + 8);
                    if (!v555 || (v556 = *(unsigned __int8 *)(v555 + 24), v553 = (_BYTE *)(v555 + 24), v556))
                    {
                      if (*v550 == v544)
                      {
                        v557 = *(uint64_t ***)(v544 + 16);
                      }
                      else
                      {
                        v557 = (uint64_t **)v550[1];
                        v558 = *v557;
                        v550[1] = (uint64_t)*v557;
                        if (v558)
                        {
                          v558[2] = (uint64_t)v550;
                          v551 = v550[2];
                        }
                        v557[2] = (uint64_t *)v551;
                        *(_QWORD *)(v550[2] + 8 * (*(_QWORD *)v550[2] != (_QWORD)v550)) = v557;
                        *v557 = v550;
                        v550[2] = (uint64_t)v557;
                        v551 = (uint64_t)v557[2];
                        v550 = *(uint64_t **)v551;
                      }
                      *((_BYTE *)v557 + 24) = 1;
                      *(_BYTE *)(v551 + 24) = 0;
                      v561 = v550[1];
                      *(_QWORD *)v551 = v561;
                      if (v561)
                        *(_QWORD *)(v561 + 16) = v551;
                      v550[2] = *(_QWORD *)(v551 + 16);
                      *(_QWORD *)(*(_QWORD *)(v551 + 16) + 8 * (**(_QWORD **)(v551 + 16) != v551)) = v550;
                      v550[1] = v551;
                      goto LABEL_965;
                    }
                  }
                  else if (!v552 || (v554 = *((unsigned __int8 *)v552 + 24), v553 = v552 + 3, v554))
                  {
                    if (*v550 == v544)
                    {
                      v559 = *(_QWORD *)(v544 + 8);
                      *v550 = v559;
                      if (v559)
                      {
                        *(_QWORD *)(v559 + 16) = v550;
                        v551 = v550[2];
                      }
                      *(_QWORD *)(v544 + 16) = v551;
                      *(_QWORD *)(v550[2] + 8 * (*(_QWORD *)v550[2] != (_QWORD)v550)) = v544;
                      *(_QWORD *)(v544 + 8) = v550;
                      v550[2] = v544;
                      v551 = *(_QWORD *)(v544 + 16);
                    }
                    else
                    {
                      v544 = *(_QWORD *)(v544 + 16);
                    }
                    *(_BYTE *)(v544 + 24) = 1;
                    *(_BYTE *)(v551 + 24) = 0;
                    v550 = *(uint64_t **)(v551 + 8);
                    v560 = *v550;
                    *(_QWORD *)(v551 + 8) = *v550;
                    if (v560)
                      *(_QWORD *)(v560 + 16) = v551;
                    v550[2] = *(_QWORD *)(v551 + 16);
                    *(_QWORD *)(*(_QWORD *)(v551 + 16) + 8 * (**(_QWORD **)(v551 + 16) != v551)) = v550;
                    *v550 = v551;
LABEL_965:
                    *(_QWORD *)(v551 + 16) = v550;
                    break;
                  }
                  *((_BYTE *)v550 + 24) = 1;
                  v544 = v551;
                  *(_BYTE *)(v551 + 24) = v551 == (_QWORD)v549;
                  *v553 = 1;
                }
                while ((uint64_t *)v551 != v549);
              }
              ++*(_QWORD *)(v7 + 432);
              v562 = *(_QWORD *)buf;
              v563 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
              do
                v564 = __ldaxr(v563);
              while (__stlxr(v564 + 1, v563));
              if (!v564 && !*(_BYTE *)(v562 + 820))
              {
                *(_BYTE *)(v562 + 1214) = -1;
                md::Label::updateStateMachineForStaging(v562, 0, 37);
              }
              *(_BYTE *)(v562 + 1261) = 0;
              *(_QWORD *)(v562 + 1224) = 0;
              v539 = *(_QWORD *)buf;
LABEL_972:
              v565 = v1342;
              v566 = (std::__shared_weak_count *)v1339.__r_.__value_.__l.__size_;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1339.__r_.__value_.__l.__data_;
              if (v1339.__r_.__value_.__l.__size_)
              {
                v567 = (unint64_t *)(v1339.__r_.__value_.__l.__size_ + 8);
                do
                  v568 = __ldxr(v567);
                while (__stxr(v568 + 1, v567));
              }
              md::Label::update(v539, (uint64_t)v565, v7);
              if (!v566)
                goto LABEL_979;
              v569 = (unint64_t *)&v566->__shared_owners_;
              do
                v570 = __ldaxr(v569);
              while (__stlxr(v570 - 1, v569));
              if (v570)
              {
LABEL_979:
                v571 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                  goto LABEL_980;
                goto LABEL_916;
              }
              ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
              std::__shared_weak_count::__release_weak(v566);
              v571 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
LABEL_980:
                v572 = (unint64_t *)&v571->__shared_owners_;
                do
                  v573 = __ldaxr(v572);
                while (__stlxr(v573 - 1, v572));
                if (!v573)
                {
                  ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
                  std::__shared_weak_count::__release_weak(v571);
                }
              }
LABEL_916:
              if (++v532 == v531)
                goto LABEL_915;
            }
          }
          do
          {
            v528 = (std::__shared_weak_count *)*((_QWORD *)v484 - 1);
            if (v528)
            {
              v529 = (unint64_t *)&v528->__shared_owners_;
              do
                v530 = __ldaxr(v529);
              while (__stlxr(v530 - 1, v529));
              if (!v530)
              {
                ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
                std::__shared_weak_count::__release_weak(v528);
              }
            }
            v484 -= 32;
          }
          while (v484 != v483);
LABEL_911:
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v482 + 40))(v482, v483, v485 - (_QWORD)v483);
          goto LABEL_912;
        }
      }
      while (1)
      {
        while (1)
        {
          v490 = *(uint64_t **)(*v489 + 8);
          v491 = (std::__shared_weak_count *)v490[1];
          if (v491)
            break;
          v493 = *((_QWORD *)v487 + 2);
LABEL_849:
          if (!v493)
            goto LABEL_850;
LABEL_840:
          if (++v489 == *((_QWORD **)v474 + 64))
            goto LABEL_833;
        }
        v492 = std::__shared_weak_count::lock(v491);
        v493 = *((_QWORD *)v487 + 2);
        if (!v492)
          goto LABEL_849;
        v494 = v492;
        v495 = *v490;
        v496 = (unint64_t *)&v492->__shared_owners_;
        do
          v497 = __ldaxr(v496);
        while (__stlxr(v497 - 1, v496));
        if (!v497)
        {
          ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
          std::__shared_weak_count::__release_weak(v494);
          if (v495 == v493)
            goto LABEL_850;
          goto LABEL_840;
        }
        if (v495 != v493)
          goto LABEL_840;
LABEL_850:
        v498 = *v486;
        if (*v486)
        {
          v499 = *(_QWORD *)(*v489 + 8);
          v500 = (uint64_t *)(v474 + 576);
          v501 = *v486;
          do
          {
            v502 = v501[4];
            _CF = v502 >= v499;
            if (v502 >= v499)
              v504 = (uint64_t **)v501;
            else
              v504 = (uint64_t **)(v501 + 1);
            if (_CF)
              v500 = v501;
            v501 = *v504;
          }
          while (*v504);
          if (v500 != (uint64_t *)v486 && v499 >= v500[4])
          {
            v505 = (uint64_t *)v500[1];
            v506 = v500;
            if (v505)
            {
              do
              {
                v507 = v505;
                v505 = (uint64_t *)*v505;
              }
              while (v505);
            }
            else
            {
              do
              {
                v507 = (uint64_t *)v506[2];
                _ZF = *v507 == (_QWORD)v506;
                v506 = v507;
              }
              while (!_ZF);
            }
            if (*((uint64_t **)v474 + 71) == v500)
              *((_QWORD *)v474 + 71) = v507;
            --*((_QWORD *)v474 + 74);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v498, v500);
            (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)v474 + 73) + 40))(*((_QWORD *)v474 + 73), v500, 48);
          }
        }
        v508 = v489 + 1;
        v509 = (_QWORD *)*((_QWORD *)v474 + 64);
        v510 = v489;
        if (v489 + 1 != v509)
        {
          do
          {
            v511 = v510;
            v512 = *v510;
            if (*v510)
            {
              _ZF = (*(_QWORD *)v512)-- == 1;
              if (_ZF)
              {
                v513 = *(_QWORD *)(v512 + 16);
                if (v513)
                {
                  *(_QWORD *)(v512 + 24) = v513;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v512 + 40) + 40))(*(_QWORD *)(v512 + 40), v513, *(_QWORD *)(v512 + 32) - v513);
                }
                {
                  v515 = operator new();
                  *(_QWORD *)(v515 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v515 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v515 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v515 = &off_1E42B5668;
                  *(_QWORD *)(v515 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v515 + 72) = 0u;
                  *(_OWORD *)(v515 + 88) = 0u;
                  *(_OWORD *)(v515 + 104) = 0u;
                  *(_OWORD *)(v515 + 120) = 0u;
                  *(_OWORD *)(v515 + 136) = 0u;
                  *(_OWORD *)(v515 + 152) = 0u;
                  *(_OWORD *)(v515 + 168) = 0u;
                  *(_OWORD *)(v515 + 184) = 0u;
                  *(_OWORD *)(v515 + 200) = 0u;
                  *(_OWORD *)(v515 + 216) = 0u;
                  *(_OWORD *)(v515 + 232) = 0u;
                  *(_QWORD *)(v515 + 248) = 0;
                  *(_OWORD *)(v515 + 56) = 0u;
                  v516 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v515 + 56), 0);
                  if ((_DWORD)v516)
                    geo::read_write_lock::logFailure(v516, (uint64_t)"initialization", v517);
                  v518 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v515 + 48) = v518;
                  malloc_set_zone_name(v518, "VectorKitLabels");
                  *(_QWORD *)(v515 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v515;
                }
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, *v511, 56);
              }
            }
            v510 = v511 + 1;
            *v511 = v511[1];
            v511[1] = 0;
          }
          while (v511 + 2 != v509);
          v508 = (_QWORD *)*((_QWORD *)v474 + 64);
          if (v508 == v510)
            goto LABEL_898;
LABEL_885:
          v519 = v508;
          do
          {
            v522 = *--v519;
            v521 = v522;
            if (v522)
            {
              _ZF = (*(_QWORD *)v521)-- == 1;
              if (_ZF)
              {
                v523 = *(_QWORD *)(v521 + 16);
                if (v523)
                {
                  *(_QWORD *)(v521 + 24) = v523;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v521 + 40) + 40))(*(_QWORD *)(v521 + 40), v523, *(_QWORD *)(v521 + 32) - v523);
                }
                {
                  v524 = operator new();
                  *(_QWORD *)(v524 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v524 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v524 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v524 = &off_1E42B5668;
                  *(_QWORD *)(v524 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v524 + 72) = 0u;
                  *(_OWORD *)(v524 + 88) = 0u;
                  *(_OWORD *)(v524 + 104) = 0u;
                  *(_OWORD *)(v524 + 120) = 0u;
                  *(_OWORD *)(v524 + 136) = 0u;
                  *(_OWORD *)(v524 + 152) = 0u;
                  *(_OWORD *)(v524 + 168) = 0u;
                  *(_OWORD *)(v524 + 184) = 0u;
                  *(_OWORD *)(v524 + 200) = 0u;
                  *(_OWORD *)(v524 + 216) = 0u;
                  *(_OWORD *)(v524 + 232) = 0u;
                  *(_QWORD *)(v524 + 248) = 0;
                  v1281 = v524;
                  *(_OWORD *)(v524 + 56) = 0u;
                  v525 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v524 + 56), 0);
                  if ((_DWORD)v525)
                    geo::read_write_lock::logFailure(v525, (uint64_t)"initialization", v526);
                  v527 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v1281 + 48) = v527;
                  malloc_set_zone_name(v527, "VectorKitLabels");
                  *(_QWORD *)(v1281 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v1281;
                }
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, *(v508 - 1), 56);
                *(v508 - 1) = 0;
              }
            }
            v508 = v519;
          }
          while (v519 != v510);
          goto LABEL_898;
        }
        if (v508 != v489)
          goto LABEL_885;
LABEL_898:
        *((_QWORD *)v474 + 64) = v510;
        if (v489 == v510)
          goto LABEL_833;
      }
    }
LABEL_514:
    if (v1323)
      operator delete(v1323);
    v320 = *(std::__shared_weak_count **)&v1338.f64[1];
    a3 = v1331;
    if (*(_QWORD *)&v1338.f64[1])
    {
      v321 = (unint64_t *)(*(_QWORD *)&v1338.f64[1] + 8);
      do
        v322 = __ldaxr(v321);
      while (__stlxr(v322 - 1, v321));
      if (!v322)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    v22 = v1299;
LABEL_28:
    v22 += 2;
  }
  while (v22 != v1295);
  v1339.__r_.__value_.__r.__words[0] = v7;
  v1339.__r_.__value_.__l.__size_ = (std::string::size_type)&v1342;
  v1339.__r_.__value_.__r.__words[2] = (std::string::size_type)a3;
  v579 = *(_QWORD *)(v7 + 328);
  if (v579)
  {
    if (*((_BYTE *)v1342 + 3029))
    {
      v581 = *(_QWORD **)(v579 + 200);
      for (i = *(_QWORD **)(v579 + 208); v581 != i; v581 += 2)
        md::LabelMapTile::updateLabels(md::LabelManager *,md::LabelPool &,int,BOOL)::$_0::operator()((uint64_t)&v1339, v581);
    }
    else if (*((_BYTE *)v1342 + 3030))
    {
      v944 = *(_QWORD **)(v579 + 200);
      v943 = *(_QWORD **)(v579 + 208);
      while (v944 != v943)
      {
        if (*(_BYTE *)(*v944 + 353))
          md::LabelMapTile::updateLabels(md::LabelManager *,md::LabelPool &,int,BOOL)::$_0::operator()((uint64_t)&v1339, v944);
        v944 += 2;
      }
    }
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 48) + 24))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 48)))
  {
    v582 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 48) + 24))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 48));
    v584 = *(_QWORD **)v582;
    v583 = *(_QWORD **)(v582 + 8);
    if (*(_QWORD **)v582 != v583)
    {
      do
      {
        md::LabelMapTile::updateLabels(md::LabelManager *,md::LabelPool &,int,BOOL)::$_0::operator()((uint64_t)&v1339, v584);
        v584 += 2;
      }
      while (v584 != v583);
    }
  }
  v585 = v1342;
  v586 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 40) + 16))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 40));
  v1324 = (QuadTile *)v585;
  if (v586)
  {
    v587 = *(md::PointLabelFeature ***)v586;
    v588 = *(md::PointLabelFeature ***)(v586 + 8);
    if (*(md::PointLabelFeature ***)v586 != v588)
    {
      __asm { FMOV            V0.2D, #0.5 }
      v1292 = _Q0;
      v1296 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
      while (!*(_QWORD *)(*(uint64_t (**)(md::PointLabelFeature *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v587 + 552))(*v587, 0, 0, 0, 0))
      {
        ++*((_DWORD *)v1335 + 23);
LABEL_1003:
        v587 += 2;
        if (v587 == v588)
          goto LABEL_1067;
      }
      v590 = *v587;
      if (!*((_QWORD *)*v587 + 9))
      {
        v591 = (unint64_t *)(*((_QWORD *)v585 + 36) + 680);
        do
        {
          v592 = __ldaxr(v591);
          v593 = v592 + 1;
        }
        while (__stlxr(v593, v591));
        *((_QWORD *)v590 + 9) = v593;
        v590 = *v587;
      }
      md::PointLabelFeature::updatePositions(v590);
      v594 = (unsigned int *)*((_QWORD *)*v587 + 57);
      v595 = (uint64_t)*v587 + 464;
      if (v594 == (unsigned int *)v595)
        goto LABEL_1003;
      while (1)
      {
        v596 = (*(uint64_t (**)(md::PointLabelFeature *, _QWORD *))(*(_QWORD *)*v587 + 112))(*v587, (_QWORD *)v594 + 4);
        v597 = v596;
        if (*(_BYTE *)(v596 + 45))
          v598 = 1;
        else
          v598 = *(_BYTE *)(v596 + 46) == 0;
        if (v598)
        {
          v609.f64[0] = *(float64_t *)(v596 + 24);
        }
        else
        {
          v599 = *(double *)v596;
          v600 = *(double *)(v596 + 8);
          v601 = *(double *)(v596 + 16);
          v602 = sqrt(v599 * v599 + v600 * v600);
          v603 = atan2(v601, v602 * 0.996647189);
          v1317 = atan2(v600, v599);
          v604 = __sincos_stret(v603);
          v605 = atan2(v601 + v604.__sinval * v604.__sinval * 42841.3115 * v604.__sinval, v602 + v604.__cosval * v604.__cosval * -42697.6727 * v604.__cosval);
          v606 = tan(v605 * 0.5 + 0.785398163);
          v607 = log(v606);
          v608.f64[0] = v1317;
          v608.f64[1] = v607;
          v609 = vmlaq_f64(v1292, v1296, v608);
          *(float64x2_t *)(v597 + 24) = v609;
          *(_BYTE *)(v597 + 45) = 1;
        }
        if (v609.f64[0] < *v23
          || v609.f64[0] > *((double *)v1335 + 7)
          || (v610 = *(double *)(v597 + 32), v610 < *((double *)v1335 + 6))
          || v610 > *((double *)v1335 + 8))
        {
LABEL_1060:
          v638 = (unsigned int *)*((_QWORD *)v594 + 1);
          if (!v638)
            goto LABEL_1064;
          goto LABEL_1061;
        }
        v611 = (std::__shared_weak_count *)v587[1];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v587;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v611;
        if (v611)
        {
          v612 = (unint64_t *)&v611->__shared_owners_;
          do
            v613 = __ldxr(v612);
          while (__stxr(v613 + 1, v612));
        }
        md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v585, &__p, v594 + 8, 1);
        if (!v611)
          goto LABEL_1029;
        v614 = (unint64_t *)&v611->__shared_owners_;
        do
          v615 = __ldaxr(v614);
        while (__stlxr(v615 - 1, v614));
        if (!v615)
        {
          ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
          std::__shared_weak_count::__release_weak(v611);
          v616 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_1056;
        }
        else
        {
LABEL_1029:
          v616 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_1056;
        }
        v617 = v1329;
        while (1)
        {
          v618 = *v617;
          v619 = v617;
          if (!*v617)
            break;
          while (1)
          {
            v617 = (uint64_t **)v618;
            v620 = v618[4];
            if (v616 < v620)
              break;
            if (v620 >= v616)
              goto LABEL_1047;
            v618 = v617[1];
            if (!v618)
            {
              v619 = v617 + 1;
              goto LABEL_1036;
            }
          }
        }
LABEL_1036:
        v621 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53) + 16))(*((_QWORD *)v1335 + 53), 48, 8);
        v622 = v621;
        v623 = *(_QWORD *)&buf[8];
        v621[4] = *(_QWORD *)buf;
        v621[5] = v623;
        if (v623)
        {
          v624 = (unint64_t *)(v623 + 8);
          do
            v625 = __ldxr(v624);
          while (__stxr(v625 + 1, v624));
        }
        *v621 = 0;
        v621[1] = 0;
        v621[2] = (uint64_t)v617;
        *v619 = v621;
        v626 = **((_QWORD **)v1335 + 51);
        if (v626)
        {
          *((_QWORD *)v1335 + 51) = v626;
          v622 = *v619;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v622);
        ++*((_QWORD *)v1335 + 54);
        v627 = *(_QWORD *)buf;
        v628 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
        do
          v629 = __ldaxr(v628);
        while (__stlxr(v629 + 1, v628));
        if (!v629 && !*(_BYTE *)(v627 + 820))
        {
          *(_BYTE *)(v627 + 1214) = -1;
          md::Label::updateStateMachineForStaging(v627, 0, 37);
        }
        *(_BYTE *)(v627 + 1261) = 0;
        *(_QWORD *)(v627 + 1224) = 0;
        v616 = *(_QWORD *)buf;
LABEL_1047:
        v630 = (std::__shared_weak_count *)v587[1];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v587;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v630;
        v585 = (md::LabelManager *)v1324;
        if (v630)
        {
          v631 = (unint64_t *)&v630->__shared_owners_;
          do
            v632 = __ldxr(v631);
          while (__stxr(v632 + 1, v631));
        }
        md::Label::update(v616, (uint64_t)v1324, (uint64_t)v1335);
        if (v630)
        {
          v633 = (unint64_t *)&v630->__shared_owners_;
          do
            v634 = __ldaxr(v633);
          while (__stlxr(v634 - 1, v633));
          if (!v634)
          {
            ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
            std::__shared_weak_count::__release_weak(v630);
          }
        }
LABEL_1056:
        v635 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_1060;
        v636 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v637 = __ldaxr(v636);
        while (__stlxr(v637 - 1, v636));
        if (v637)
          goto LABEL_1060;
        ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
        std::__shared_weak_count::__release_weak(v635);
        v638 = (unsigned int *)*((_QWORD *)v594 + 1);
        if (!v638)
        {
          do
          {
LABEL_1064:
            v639 = (unsigned int *)*((_QWORD *)v594 + 2);
            _ZF = *(_QWORD *)v639 == (_QWORD)v594;
            v594 = v639;
          }
          while (!_ZF);
          goto LABEL_1011;
        }
        do
        {
LABEL_1061:
          v639 = v638;
          v638 = *(unsigned int **)v638;
        }
        while (v638);
LABEL_1011:
        v594 = v639;
        if (v639 == (unsigned int *)v595)
          goto LABEL_1003;
      }
    }
  }
LABEL_1067:
  v640 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v585 + 21) + 40) + 24))(*(_QWORD *)(*((_QWORD *)v585 + 21) + 40));
  v641 = (uint64_t)v1335;
  if (v640)
  {
    v643 = *(_QWORD **)v640;
    v642 = *(_QWORD **)(v640 + 8);
    if (*(_QWORD **)v640 != v642)
    {
      v644 = 0;
      v645 = 0;
      v1318 = *(_QWORD **)(v640 + 8);
      while (1)
      {
        if (!*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v643 + 552))(*v643, 0, 0, 0, 0))
        {
          ++*(_DWORD *)(v641 + 92);
          goto LABEL_1071;
        }
        v646 = (_QWORD *)*v643;
        if (!*(_QWORD *)(*v643 + 72))
        {
          v647 = (unint64_t *)(*((_QWORD *)v585 + 36) + 680);
          do
          {
            v648 = __ldaxr(v647);
            v649 = v648 + 1;
          }
          while (__stlxr(v649, v647));
          v646[9] = v649;
          v646 = (_QWORD *)*v643;
        }
        v650 = (_QWORD *)v646[41];
        v651 = v646 + 42;
        if (v650 != v646 + 42)
          break;
LABEL_1071:
        v643 += 2;
        if (v643 == v642)
          goto LABEL_1197;
      }
      v652 = v644;
      while (1)
      {
        v653 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v650[5] + 48));
        if (*v653 < *(double *)(v641 + 40) || *v653 > *(double *)(v641 + 56))
          goto LABEL_1092;
        v655 = v653[1];
        if (v655 < *(double *)(v641 + 48) || v655 > *(double *)(v641 + 64))
          goto LABEL_1092;
        if ((unint64_t)v652 < v645)
        {
          *(_DWORD *)v652 = *((_DWORD *)v650 + 8);
          v652 += 4;
LABEL_1092:
          v657 = (_QWORD *)v650[1];
          if (!v657)
            goto LABEL_1113;
          goto LABEL_1093;
        }
        v659 = (v652 - v644) >> 2;
        v660 = v659 + 1;
        if ((unint64_t)(v659 + 1) >> 62)
          abort();
        if ((uint64_t)(v645 - (_QWORD)v644) >> 1 > v660)
          v660 = (uint64_t)(v645 - (_QWORD)v644) >> 1;
        v661 = v645 - (unint64_t)v644 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v660;
        if (v661)
        {
          if (v661 >> 62)
            goto LABEL_2037;
          v662 = operator new(4 * v661);
        }
        else
        {
          v662 = 0;
        }
        v663 = &v662[4 * v659];
        *(_DWORD *)v663 = *((_DWORD *)v650 + 8);
        v664 = v663 + 4;
        if (v652 != v644)
          break;
        v668 = &v662[4 * v661];
        if (v644)
          goto LABEL_1111;
LABEL_1112:
        v644 = v663;
        v652 = v664;
        v641 = (uint64_t)v1335;
        v585 = (md::LabelManager *)v1324;
        v645 = (unint64_t)v668;
        v657 = (_QWORD *)v650[1];
        if (!v657)
        {
          do
          {
LABEL_1113:
            v658 = (_QWORD *)v650[2];
            _ZF = *v658 == (_QWORD)v650;
            v650 = v658;
          }
          while (!_ZF);
          goto LABEL_1079;
        }
        do
        {
LABEL_1093:
          v658 = v657;
          v657 = (_QWORD *)*v657;
        }
        while (v657);
LABEL_1079:
        v650 = v658;
        if (v658 == v651)
        {
          if (v644 == v652)
            goto LABEL_1195;
          v674 = v645;
          v675 = (unsigned int *)v644;
          while (1)
          {
            v676 = (std::__shared_weak_count *)v643[1];
            __p.__r_.__value_.__r.__words[0] = *v643;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v676;
            if (v676)
            {
              v677 = (unint64_t *)&v676->__shared_owners_;
              do
                v678 = __ldxr(v677);
              while (__stxr(v678 + 1, v677));
            }
            md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v585, &__p, v675, 1);
            if (!v676)
              goto LABEL_1132;
            v679 = (unint64_t *)&v676->__shared_owners_;
            do
              v680 = __ldaxr(v679);
            while (__stlxr(v680 - 1, v679));
            if (!v680)
            {
              ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
              std::__shared_weak_count::__release_weak(v676);
              v681 = *(_QWORD *)buf;
              if (!*(_QWORD *)buf)
                goto LABEL_1187;
            }
            else
            {
LABEL_1132:
              v681 = *(_QWORD *)buf;
              if (!*(_QWORD *)buf)
                goto LABEL_1187;
            }
            v682 = (uint64_t *)v1329;
            while (1)
            {
              v683 = (uint64_t *)*v682;
              v684 = v682;
              if (!*v682)
                break;
              while (1)
              {
                v682 = v683;
                v685 = v683[4];
                if (v681 < v685)
                  break;
                if (v685 >= v681)
                  goto LABEL_1180;
                v683 = (uint64_t *)v682[1];
                if (!v683)
                {
                  v684 = v682 + 1;
                  goto LABEL_1139;
                }
              }
            }
LABEL_1139:
            v686 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v641 + 424) + 16))(*(_QWORD *)(v641 + 424), 48, 8);
            v687 = *(_QWORD *)&buf[8];
            *(_QWORD *)(v686 + 32) = *(_QWORD *)buf;
            *(_QWORD *)(v686 + 40) = v687;
            if (v687)
            {
              v688 = (unint64_t *)(v687 + 8);
              do
                v689 = __ldxr(v688);
              while (__stxr(v689 + 1, v688));
            }
            *(_QWORD *)v686 = 0;
            *(_QWORD *)(v686 + 8) = 0;
            *(_QWORD *)(v686 + 16) = v682;
            *v684 = v686;
            v690 = **(_QWORD **)(v641 + 408);
            if (v690)
            {
              *(_QWORD *)(v641 + 408) = v690;
              v686 = *v684;
            }
            v691 = *v1329;
            _ZF = v686 == (_QWORD)*v1329;
            *(_BYTE *)(v686 + 24) = _ZF;
            if (!_ZF)
            {
              do
              {
                v692 = *(uint64_t **)(v686 + 16);
                if (*((_BYTE *)v692 + 24))
                  break;
                v693 = v692[2];
                v694 = *(uint64_t **)v693;
                if (*(uint64_t **)v693 == v692)
                {
                  v697 = *(_QWORD *)(v693 + 8);
                  if (!v697 || (v698 = *(unsigned __int8 *)(v697 + 24), v695 = (_BYTE *)(v697 + 24), v698))
                  {
                    if (*v692 == v686)
                    {
                      v699 = *(uint64_t ***)(v686 + 16);
                    }
                    else
                    {
                      v699 = (uint64_t **)v692[1];
                      v700 = *v699;
                      v692[1] = (uint64_t)*v699;
                      if (v700)
                      {
                        v700[2] = (uint64_t)v692;
                        v693 = v692[2];
                      }
                      v699[2] = (uint64_t *)v693;
                      *(_QWORD *)(v692[2] + 8 * (*(_QWORD *)v692[2] != (_QWORD)v692)) = v699;
                      *v699 = v692;
                      v692[2] = (uint64_t)v699;
                      v693 = (uint64_t)v699[2];
                      v692 = *(uint64_t **)v693;
                    }
                    *((_BYTE *)v699 + 24) = 1;
                    *(_BYTE *)(v693 + 24) = 0;
                    v703 = v692[1];
                    *(_QWORD *)v693 = v703;
                    if (v703)
                      *(_QWORD *)(v703 + 16) = v693;
                    v692[2] = *(_QWORD *)(v693 + 16);
                    *(_QWORD *)(*(_QWORD *)(v693 + 16) + 8 * (**(_QWORD **)(v693 + 16) != v693)) = v692;
                    v692[1] = v693;
                    goto LABEL_1173;
                  }
                }
                else if (!v694 || (v696 = *((unsigned __int8 *)v694 + 24), v695 = v694 + 3, v696))
                {
                  if (*v692 == v686)
                  {
                    v701 = *(_QWORD *)(v686 + 8);
                    *v692 = v701;
                    if (v701)
                    {
                      *(_QWORD *)(v701 + 16) = v692;
                      v693 = v692[2];
                    }
                    *(_QWORD *)(v686 + 16) = v693;
                    *(_QWORD *)(v692[2] + 8 * (*(_QWORD *)v692[2] != (_QWORD)v692)) = v686;
                    *(_QWORD *)(v686 + 8) = v692;
                    v692[2] = v686;
                    v693 = *(_QWORD *)(v686 + 16);
                  }
                  else
                  {
                    v686 = *(_QWORD *)(v686 + 16);
                  }
                  *(_BYTE *)(v686 + 24) = 1;
                  *(_BYTE *)(v693 + 24) = 0;
                  v692 = *(uint64_t **)(v693 + 8);
                  v702 = *v692;
                  *(_QWORD *)(v693 + 8) = *v692;
                  if (v702)
                    *(_QWORD *)(v702 + 16) = v693;
                  v692[2] = *(_QWORD *)(v693 + 16);
                  *(_QWORD *)(*(_QWORD *)(v693 + 16) + 8 * (**(_QWORD **)(v693 + 16) != v693)) = v692;
                  *v692 = v693;
LABEL_1173:
                  *(_QWORD *)(v693 + 16) = v692;
                  break;
                }
                *((_BYTE *)v692 + 24) = 1;
                v686 = v693;
                *(_BYTE *)(v693 + 24) = v693 == (_QWORD)v691;
                *v695 = 1;
              }
              while ((uint64_t *)v693 != v691);
            }
            ++*(_QWORD *)(v641 + 432);
            v704 = *(_QWORD *)buf;
            v705 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
            do
              v706 = __ldaxr(v705);
            while (__stlxr(v706 + 1, v705));
            if (!v706 && !*(_BYTE *)(v704 + 820))
            {
              *(_BYTE *)(v704 + 1214) = -1;
              md::Label::updateStateMachineForStaging(v704, 0, 37);
            }
            *(_BYTE *)(v704 + 1261) = 0;
            *(_QWORD *)(v704 + 1224) = 0;
            v681 = *(_QWORD *)buf;
LABEL_1180:
            v707 = (std::__shared_weak_count *)v643[1];
            __p.__r_.__value_.__r.__words[0] = *v643;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v707;
            v585 = (md::LabelManager *)v1324;
            if (v707)
            {
              v708 = (unint64_t *)&v707->__shared_owners_;
              do
                v709 = __ldxr(v708);
              while (__stxr(v709 + 1, v708));
            }
            md::Label::update(v681, (uint64_t)v1324, v641);
            if (!v707)
              goto LABEL_1187;
            v710 = (unint64_t *)&v707->__shared_owners_;
            do
              v711 = __ldaxr(v710);
            while (__stlxr(v711 - 1, v710));
            if (v711)
            {
LABEL_1187:
              v712 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
                goto LABEL_1188;
              goto LABEL_1124;
            }
            ((void (*)(std::__shared_weak_count *))v707->__on_zero_shared)(v707);
            std::__shared_weak_count::__release_weak(v707);
            v712 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
LABEL_1188:
              v713 = (unint64_t *)&v712->__shared_owners_;
              do
                v714 = __ldaxr(v713);
              while (__stlxr(v714 - 1, v713));
              if (!v714)
              {
                ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
                std::__shared_weak_count::__release_weak(v712);
              }
            }
LABEL_1124:
            if (++v675 == (unsigned int *)v652)
            {
              v645 = v674;
LABEL_1195:
              v642 = v1318;
              goto LABEL_1071;
            }
          }
        }
      }
      v665 = v652 - 4 - v644;
      if (v665 >= 0x2C && (unint64_t)(v644 - v662) >= 0x20)
      {
        v669 = (v665 >> 2) + 1;
        v666 = &v652[-4 * (v669 & 0x7FFFFFFFFFFFFFF8)];
        v670 = &v662[4 * v659 - 16];
        v671 = v652 - 16;
        v672 = v669 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v673 = *(_OWORD *)v671;
          *(v670 - 1) = *((_OWORD *)v671 - 1);
          *v670 = v673;
          v670 -= 2;
          v671 -= 32;
          v672 -= 8;
        }
        while (v672);
        v663 -= 4 * (v669 & 0x7FFFFFFFFFFFFFF8);
        if (v669 == (v669 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_1110:
          v668 = &v662[4 * v661];
          if (!v644)
            goto LABEL_1112;
LABEL_1111:
          operator delete(v644);
          goto LABEL_1112;
        }
      }
      else
      {
        v666 = v652;
      }
      do
      {
        v667 = *((_DWORD *)v666 - 1);
        v666 -= 4;
        *((_DWORD *)v663 - 1) = v667;
        v663 -= 4;
      }
      while (v666 != v644);
      goto LABEL_1110;
    }
  }
  v644 = 0;
  v645 = 0;
LABEL_1197:
  v715 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v585 + 21) + 40) + 32))(*(_QWORD *)(*((_QWORD *)v585 + 21) + 40));
  v716 = (uint64_t *)v1329;
  if (v715)
  {
    v717 = *(_QWORD **)v715;
    v718 = *(_QWORD **)(v715 + 8);
    if (*(_QWORD **)v715 != v718)
    {
      v1300 = *(_QWORD **)(v715 + 8);
      while (1)
      {
        if (!*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v717 + 552))(*v717, 0, 0, 0, 0))
        {
          ++*(_DWORD *)(v641 + 92);
          goto LABEL_1201;
        }
        v719 = (_QWORD *)*v717;
        if (!*(_QWORD *)(*v717 + 72))
        {
          v720 = (unint64_t *)(*((_QWORD *)v585 + 36) + 680);
          do
          {
            v721 = __ldaxr(v720);
            v722 = v721 + 1;
          }
          while (__stlxr(v722, v720));
          v719[9] = v722;
          v719 = (_QWORD *)*v717;
        }
        v723 = (_DWORD *)v719[33];
        v724 = (_DWORD *)v719[34];
        if (v723 != v724)
          break;
LABEL_1201:
        v717 += 2;
        if (v717 == v718)
          goto LABEL_1321;
      }
      v725 = v644;
      while (1)
      {
        v726 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v723 + 2));
        if (*v726 < *(double *)(v641 + 40) || *v726 > *(double *)(v641 + 56))
          goto LABEL_1210;
        v728 = v726[1];
        if (v728 < *(double *)(v641 + 48) || v728 > *(double *)(v641 + 64))
          goto LABEL_1210;
        if ((unint64_t)v725 >= v645)
          break;
        *(_DWORD *)v725 = *v723;
        v725 += 4;
LABEL_1210:
        v723 += 40;
        if (v723 == v724)
        {
          if (v644 == v725)
            goto LABEL_1320;
          v1319 = v645;
          v745 = (unsigned int *)v644;
          while (1)
          {
            v746 = (std::__shared_weak_count *)v717[1];
            __p.__r_.__value_.__r.__words[0] = *v717;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v746;
            if (v746)
            {
              v747 = (unint64_t *)&v746->__shared_owners_;
              do
                v748 = __ldxr(v747);
              while (__stxr(v748 + 1, v747));
            }
            md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v585, &__p, v745, 1);
            if (!v746)
              goto LABEL_1256;
            v749 = (unint64_t *)&v746->__shared_owners_;
            do
              v750 = __ldaxr(v749);
            while (__stlxr(v750 - 1, v749));
            if (!v750)
            {
              ((void (*)(std::__shared_weak_count *))v746->__on_zero_shared)(v746);
              std::__shared_weak_count::__release_weak(v746);
              v751 = *(_QWORD *)buf;
              if (!*(_QWORD *)buf)
                goto LABEL_1312;
            }
            else
            {
LABEL_1256:
              v751 = *(_QWORD *)buf;
              if (!*(_QWORD *)buf)
                goto LABEL_1312;
            }
            v752 = (uint64_t *)*v716;
            v753 = v716;
            v754 = v716;
            if (*v716)
            {
              while (1)
              {
                while (1)
                {
                  v754 = v752;
                  v755 = v752[4];
                  if (v751 >= v755)
                    break;
                  v752 = (uint64_t *)*v754;
                  v753 = v754;
                  if (!*v754)
                    goto LABEL_1264;
                }
                if (v755 >= v751)
                  break;
                v752 = (uint64_t *)v754[1];
                if (!v752)
                {
                  v753 = v754 + 1;
                  goto LABEL_1264;
                }
              }
            }
            else
            {
LABEL_1264:
              v756 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v641 + 424) + 16))(*(_QWORD *)(v641 + 424), 48, 8);
              v757 = *(_QWORD *)&buf[8];
              *(_QWORD *)(v756 + 32) = *(_QWORD *)buf;
              *(_QWORD *)(v756 + 40) = v757;
              if (v757)
              {
                v758 = (unint64_t *)(v757 + 8);
                do
                  v759 = __ldxr(v758);
                while (__stxr(v759 + 1, v758));
              }
              *(_QWORD *)v756 = 0;
              *(_QWORD *)(v756 + 8) = 0;
              *(_QWORD *)(v756 + 16) = v754;
              *v753 = v756;
              v760 = **(_QWORD **)(v641 + 408);
              if (v760)
              {
                *(_QWORD *)(v641 + 408) = v760;
                v756 = *v753;
              }
              v761 = *v716;
              _ZF = v756 == *v716;
              *(_BYTE *)(v756 + 24) = _ZF;
              if (!_ZF)
              {
                do
                {
                  v762 = *(uint64_t **)(v756 + 16);
                  if (*((_BYTE *)v762 + 24))
                    break;
                  v763 = v762[2];
                  v764 = *(uint64_t **)v763;
                  if (*(uint64_t **)v763 == v762)
                  {
                    v767 = *(_QWORD *)(v763 + 8);
                    if (!v767 || (v768 = *(unsigned __int8 *)(v767 + 24), v765 = (_BYTE *)(v767 + 24), v768))
                    {
                      if (*v762 == v756)
                      {
                        v769 = *(uint64_t ***)(v756 + 16);
                      }
                      else
                      {
                        v769 = (uint64_t **)v762[1];
                        v770 = *v769;
                        v762[1] = (uint64_t)*v769;
                        if (v770)
                        {
                          v770[2] = (uint64_t)v762;
                          v763 = v762[2];
                        }
                        v769[2] = (uint64_t *)v763;
                        *(_QWORD *)(v762[2] + 8 * (*(_QWORD *)v762[2] != (_QWORD)v762)) = v769;
                        *v769 = v762;
                        v762[2] = (uint64_t)v769;
                        v763 = (uint64_t)v769[2];
                        v762 = *(uint64_t **)v763;
                      }
                      *((_BYTE *)v769 + 24) = 1;
                      *(_BYTE *)(v763 + 24) = 0;
                      v773 = v762[1];
                      *(_QWORD *)v763 = v773;
                      if (v773)
                        *(_QWORD *)(v773 + 16) = v763;
                      v762[2] = *(_QWORD *)(v763 + 16);
                      *(_QWORD *)(*(_QWORD *)(v763 + 16) + 8 * (**(_QWORD **)(v763 + 16) != v763)) = v762;
                      v762[1] = v763;
                      goto LABEL_1298;
                    }
                  }
                  else if (!v764 || (v766 = *((unsigned __int8 *)v764 + 24), v765 = v764 + 3, v766))
                  {
                    if (*v762 == v756)
                    {
                      v771 = *(_QWORD *)(v756 + 8);
                      *v762 = v771;
                      if (v771)
                      {
                        *(_QWORD *)(v771 + 16) = v762;
                        v763 = v762[2];
                      }
                      *(_QWORD *)(v756 + 16) = v763;
                      *(_QWORD *)(v762[2] + 8 * (*(_QWORD *)v762[2] != (_QWORD)v762)) = v756;
                      *(_QWORD *)(v756 + 8) = v762;
                      v762[2] = v756;
                      v763 = *(_QWORD *)(v756 + 16);
                    }
                    else
                    {
                      v756 = *(_QWORD *)(v756 + 16);
                    }
                    *(_BYTE *)(v756 + 24) = 1;
                    *(_BYTE *)(v763 + 24) = 0;
                    v762 = *(uint64_t **)(v763 + 8);
                    v772 = *v762;
                    *(_QWORD *)(v763 + 8) = *v762;
                    if (v772)
                      *(_QWORD *)(v772 + 16) = v763;
                    v762[2] = *(_QWORD *)(v763 + 16);
                    *(_QWORD *)(*(_QWORD *)(v763 + 16) + 8 * (**(_QWORD **)(v763 + 16) != v763)) = v762;
                    *v762 = v763;
LABEL_1298:
                    *(_QWORD *)(v763 + 16) = v762;
                    break;
                  }
                  *((_BYTE *)v762 + 24) = 1;
                  v756 = v763;
                  *(_BYTE *)(v763 + 24) = v763 == v761;
                  *v765 = 1;
                }
                while (v763 != v761);
              }
              ++*(_QWORD *)(v641 + 432);
              v774 = *(_QWORD *)buf;
              v775 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
              do
                v776 = __ldaxr(v775);
              while (__stlxr(v776 + 1, v775));
              if (!v776 && !*(_BYTE *)(v774 + 820))
              {
                *(_BYTE *)(v774 + 1214) = -1;
                md::Label::updateStateMachineForStaging(v774, 0, 37);
              }
              *(_BYTE *)(v774 + 1261) = 0;
              *(_QWORD *)(v774 + 1224) = 0;
              v751 = *(_QWORD *)buf;
            }
            v777 = (std::__shared_weak_count *)v717[1];
            __p.__r_.__value_.__r.__words[0] = *v717;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v777;
            v585 = (md::LabelManager *)v1324;
            if (v777)
            {
              v778 = (unint64_t *)&v777->__shared_owners_;
              do
                v779 = __ldxr(v778);
              while (__stxr(v779 + 1, v778));
            }
            md::Label::update(v751, (uint64_t)v1324, v641);
            if (!v777)
              goto LABEL_1312;
            v780 = (unint64_t *)&v777->__shared_owners_;
            do
              v781 = __ldaxr(v780);
            while (__stlxr(v781 - 1, v780));
            if (v781)
            {
LABEL_1312:
              v782 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
                goto LABEL_1313;
              goto LABEL_1248;
            }
            ((void (*)(std::__shared_weak_count *))v777->__on_zero_shared)(v777);
            std::__shared_weak_count::__release_weak(v777);
            v782 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
LABEL_1313:
              v783 = (unint64_t *)&v782->__shared_owners_;
              do
                v784 = __ldaxr(v783);
              while (__stlxr(v784 - 1, v783));
              if (!v784)
              {
                ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
                std::__shared_weak_count::__release_weak(v782);
              }
            }
LABEL_1248:
            if (++v745 == (unsigned int *)v725)
            {
              v645 = v1319;
LABEL_1320:
              v718 = v1300;
              goto LABEL_1201;
            }
          }
        }
      }
      v730 = (v725 - v644) >> 2;
      v731 = v730 + 1;
      if ((unint64_t)(v730 + 1) >> 62)
        abort();
      if ((uint64_t)(v645 - (_QWORD)v644) >> 1 > v731)
        v731 = (uint64_t)(v645 - (_QWORD)v644) >> 1;
      if (v645 - (unint64_t)v644 >= 0x7FFFFFFFFFFFFFFCLL)
        v732 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v732 = v731;
      if (v732)
      {
        if (v732 >> 62)
          goto LABEL_2037;
        v733 = operator new(4 * v732);
      }
      else
      {
        v733 = 0;
      }
      v734 = &v733[4 * v730];
      *(_DWORD *)v734 = *v723;
      v735 = v734 + 4;
      if (v725 == v644)
      {
        v716 = (uint64_t *)v1329;
        v739 = &v733[4 * v732];
        if (!v644)
          goto LABEL_1239;
        goto LABEL_1238;
      }
      v736 = v725 - 4 - v644;
      if (v736 >= 0x2C && (unint64_t)(v644 - v733) >= 0x20)
      {
        v740 = (v736 >> 2) + 1;
        v737 = &v725[-4 * (v740 & 0x7FFFFFFFFFFFFFF8)];
        v741 = &v733[4 * v730 - 16];
        v742 = v725 - 16;
        v743 = v740 & 0x7FFFFFFFFFFFFFF8;
        v716 = (uint64_t *)v1329;
        do
        {
          v744 = *(_OWORD *)v742;
          *(v741 - 1) = *((_OWORD *)v742 - 1);
          *v741 = v744;
          v741 -= 2;
          v742 -= 32;
          v743 -= 8;
        }
        while (v743);
        v734 -= 4 * (v740 & 0x7FFFFFFFFFFFFFF8);
        if (v740 == (v740 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_1237:
          v739 = &v733[4 * v732];
          if (!v644)
          {
LABEL_1239:
            v644 = v734;
            v725 = v735;
            v641 = (uint64_t)v1335;
            v585 = (md::LabelManager *)v1324;
            v645 = (unint64_t)v739;
            goto LABEL_1210;
          }
LABEL_1238:
          operator delete(v644);
          goto LABEL_1239;
        }
      }
      else
      {
        v737 = v725;
        v716 = (uint64_t *)v1329;
      }
      do
      {
        v738 = *((_DWORD *)v737 - 1);
        v737 -= 4;
        *((_DWORD *)v734 - 1) = v738;
        v734 -= 4;
      }
      while (v737 != v644);
      goto LABEL_1237;
    }
  }
LABEL_1321:
  v785 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v585 + 21) + 40) + 40))(*(_QWORD *)(*((_QWORD *)v585 + 21) + 40));
  v786 = v1309;
  if (v785)
  {
    v787 = *(md::PointLabelFeature ***)v785;
    v788 = *(md::PointLabelFeature ***)(v785 + 8);
    if (*(md::PointLabelFeature ***)v785 != v788)
    {
      __asm { FMOV            V0.2D, #0.5 }
      v1293 = _Q0;
      v1297 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
      while (!*(_QWORD *)(*(uint64_t (**)(md::PointLabelFeature *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v787 + 552))(*v787, 0, 0, 0, 0))
      {
        ++*((_DWORD *)v1335 + 23);
LABEL_1325:
        v787 += 2;
        if (v787 == v788)
          goto LABEL_1389;
      }
      v790 = *v787;
      if (!*((_QWORD *)*v787 + 9))
      {
        v791 = (unint64_t *)(*((_QWORD *)v585 + 36) + 680);
        do
        {
          v792 = __ldaxr(v791);
          v793 = v792 + 1;
        }
        while (__stlxr(v793, v791));
        *((_QWORD *)v790 + 9) = v793;
        v790 = *v787;
      }
      md::PointLabelFeature::updatePositions(v790);
      v794 = (unsigned int *)*((_QWORD *)*v787 + 57);
      v795 = (uint64_t)*v787 + 464;
      if (v794 == (unsigned int *)v795)
        goto LABEL_1325;
      while (1)
      {
        v796 = (*(uint64_t (**)(md::PointLabelFeature *, _QWORD *))(*(_QWORD *)*v787 + 112))(*v787, (_QWORD *)v794 + 4);
        v797 = v796;
        if (*(_BYTE *)(v796 + 45))
          v798 = 1;
        else
          v798 = *(_BYTE *)(v796 + 46) == 0;
        if (v798)
        {
          v809.f64[0] = *(float64_t *)(v796 + 24);
        }
        else
        {
          v799 = *(double *)v796;
          v800 = *(double *)(v796 + 8);
          v801 = *(double *)(v796 + 16);
          v802 = sqrt(v799 * v799 + v800 * v800);
          v803 = atan2(v801, v802 * 0.996647189);
          v1320 = atan2(v800, v799);
          v804 = __sincos_stret(v803);
          v805 = atan2(v801 + v804.__sinval * v804.__sinval * 42841.3115 * v804.__sinval, v802 + v804.__cosval * v804.__cosval * -42697.6727 * v804.__cosval);
          v806 = tan(v805 * 0.5 + 0.785398163);
          v807 = log(v806);
          v808.f64[0] = v1320;
          v808.f64[1] = v807;
          v809 = vmlaq_f64(v1293, v1297, v808);
          *(float64x2_t *)(v797 + 24) = v809;
          *(_BYTE *)(v797 + 45) = 1;
        }
        if (v809.f64[0] < *v1309
          || v809.f64[0] > *((double *)v1335 + 7)
          || (v810 = *(double *)(v797 + 32), v810 < *((double *)v1335 + 6))
          || v810 > *((double *)v1335 + 8))
        {
LABEL_1382:
          v838 = (unsigned int *)*((_QWORD *)v794 + 1);
          if (!v838)
            goto LABEL_1386;
          goto LABEL_1383;
        }
        v811 = (std::__shared_weak_count *)v787[1];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v787;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v811;
        if (v811)
        {
          v812 = (unint64_t *)&v811->__shared_owners_;
          do
            v813 = __ldxr(v812);
          while (__stxr(v813 + 1, v812));
        }
        md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v585, &__p, v794 + 8, 1);
        if (!v811)
          goto LABEL_1351;
        v814 = (unint64_t *)&v811->__shared_owners_;
        do
          v815 = __ldaxr(v814);
        while (__stlxr(v815 - 1, v814));
        if (!v815)
        {
          ((void (*)(std::__shared_weak_count *))v811->__on_zero_shared)(v811);
          std::__shared_weak_count::__release_weak(v811);
          v816 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_1378;
        }
        else
        {
LABEL_1351:
          v816 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_1378;
        }
        v817 = v1329;
        while (1)
        {
          v818 = *v817;
          v819 = v817;
          if (!*v817)
            break;
          while (1)
          {
            v817 = (uint64_t **)v818;
            v820 = v818[4];
            if (v816 < v820)
              break;
            if (v820 >= v816)
              goto LABEL_1369;
            v818 = v817[1];
            if (!v818)
            {
              v819 = v817 + 1;
              goto LABEL_1358;
            }
          }
        }
LABEL_1358:
        v821 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53) + 16))(*((_QWORD *)v1335 + 53), 48, 8);
        v822 = v821;
        v823 = *(_QWORD *)&buf[8];
        v821[4] = *(_QWORD *)buf;
        v821[5] = v823;
        if (v823)
        {
          v824 = (unint64_t *)(v823 + 8);
          do
            v825 = __ldxr(v824);
          while (__stxr(v825 + 1, v824));
        }
        *v821 = 0;
        v821[1] = 0;
        v821[2] = (uint64_t)v817;
        *v819 = v821;
        v826 = **((_QWORD **)v1335 + 51);
        if (v826)
        {
          *((_QWORD *)v1335 + 51) = v826;
          v822 = *v819;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v822);
        ++*((_QWORD *)v1335 + 54);
        v827 = *(_QWORD *)buf;
        v828 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
        do
          v829 = __ldaxr(v828);
        while (__stlxr(v829 + 1, v828));
        if (!v829 && !*(_BYTE *)(v827 + 820))
        {
          *(_BYTE *)(v827 + 1214) = -1;
          md::Label::updateStateMachineForStaging(v827, 0, 37);
        }
        *(_BYTE *)(v827 + 1261) = 0;
        *(_QWORD *)(v827 + 1224) = 0;
        v816 = *(_QWORD *)buf;
LABEL_1369:
        v830 = (std::__shared_weak_count *)v787[1];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v787;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v830;
        v585 = (md::LabelManager *)v1324;
        if (v830)
        {
          v831 = (unint64_t *)&v830->__shared_owners_;
          do
            v832 = __ldxr(v831);
          while (__stxr(v832 + 1, v831));
        }
        md::Label::update(v816, (uint64_t)v1324, (uint64_t)v1335);
        if (v830)
        {
          v833 = (unint64_t *)&v830->__shared_owners_;
          do
            v834 = __ldaxr(v833);
          while (__stlxr(v834 - 1, v833));
          if (!v834)
          {
            ((void (*)(std::__shared_weak_count *))v830->__on_zero_shared)(v830);
            std::__shared_weak_count::__release_weak(v830);
          }
        }
LABEL_1378:
        v835 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_1382;
        v836 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v837 = __ldaxr(v836);
        while (__stlxr(v837 - 1, v836));
        if (v837)
          goto LABEL_1382;
        ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
        std::__shared_weak_count::__release_weak(v835);
        v838 = (unsigned int *)*((_QWORD *)v794 + 1);
        if (!v838)
        {
          do
          {
LABEL_1386:
            v839 = (unsigned int *)*((_QWORD *)v794 + 2);
            _ZF = *(_QWORD *)v839 == (_QWORD)v794;
            v794 = v839;
          }
          while (!_ZF);
          goto LABEL_1333;
        }
        do
        {
LABEL_1383:
          v839 = v838;
          v838 = *(unsigned int **)v838;
        }
        while (v838);
LABEL_1333:
        v794 = v839;
        if (v839 == (unsigned int *)v795)
          goto LABEL_1325;
      }
    }
  }
LABEL_1389:
  if (v644)
    operator delete(v644);
  v840 = v1342;
  v841 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 32) + 200))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 32));
  v842 = v1329;
  if (v841)
  {
    v843 = *(std::string::size_type **)v841;
    v844 = *(std::string::size_type **)(v841 + 8);
    if (*(std::string::size_type **)v841 != v844)
    {
      while (1)
      {
        v845 = *v843;
        *(_DWORD *)buf = 1;
        v846 = (md::LabelPoint *)(*(uint64_t (**)(std::string::size_type, uint8_t *))(*(_QWORD *)v845 + 112))(v845, buf);
        v847 = (double *)md::LabelPoint::mercatorPoint(v846);
        if (*v847 >= *v1309 && *v847 <= *((double *)v1335 + 7))
        {
          v848 = v847[1];
          if (v848 >= *((double *)v1335 + 6) && v848 <= *((double *)v1335 + 8))
            break;
        }
LABEL_1394:
        v843 += 2;
        if (v843 == v844)
          goto LABEL_1441;
      }
      v849 = (std::__shared_weak_count *)v843[1];
      __p.__r_.__value_.__r.__words[0] = *v843;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v849;
      if (v849)
      {
        v850 = (unint64_t *)&v849->__shared_owners_;
        do
          v851 = __ldxr(v850);
        while (__stxr(v851 + 1, v850));
      }
      LODWORD(v1338.f64[0]) = 1;
      md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v840, &__p, (unsigned int *)&v1338, 1);
      if (!v849)
        goto LABEL_1406;
      v852 = (unint64_t *)&v849->__shared_owners_;
      do
        v853 = __ldaxr(v852);
      while (__stlxr(v853 - 1, v852));
      if (!v853)
      {
        ((void (*)(std::__shared_weak_count *))v849->__on_zero_shared)(v849);
        std::__shared_weak_count::__release_weak(v849);
        v854 = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_1407;
      }
      else
      {
LABEL_1406:
        v854 = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_1407:
          v855 = *v1329;
          v856 = v1329;
          v857 = v1329;
          if (*v1329)
          {
            while (1)
            {
              while (1)
              {
                v857 = (uint64_t **)v855;
                v858 = v855[4];
                if (v854 >= v858)
                  break;
                v855 = *v857;
                v856 = v857;
                if (!*v857)
                  goto LABEL_1414;
              }
              if (v858 >= v854)
                break;
              v855 = v857[1];
              if (!v855)
              {
                v856 = v857 + 1;
                goto LABEL_1414;
              }
            }
          }
          else
          {
LABEL_1414:
            v859 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53) + 16))(*((_QWORD *)v1335 + 53), 48, 8);
            v860 = v859;
            v861 = *(_QWORD *)&buf[8];
            v859[4] = *(_QWORD *)buf;
            v859[5] = v861;
            if (v861)
            {
              v862 = (unint64_t *)(v861 + 8);
              do
                v863 = __ldxr(v862);
              while (__stxr(v863 + 1, v862));
            }
            *v859 = 0;
            v859[1] = 0;
            v859[2] = (uint64_t)v857;
            *v856 = v859;
            v864 = **((_QWORD **)v1335 + 51);
            if (v864)
            {
              *((_QWORD *)v1335 + 51) = v864;
              v860 = *v856;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v860);
            ++*((_QWORD *)v1335 + 54);
            v865 = *(_QWORD *)buf;
            v866 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
            do
              v867 = __ldaxr(v866);
            while (__stlxr(v867 + 1, v866));
            if (!v867 && !*(_BYTE *)(v865 + 820))
            {
              *(_BYTE *)(v865 + 1214) = -1;
              md::Label::updateStateMachineForStaging(v865, 0, 37);
            }
            *(_BYTE *)(v865 + 1261) = 0;
            *(_QWORD *)(v865 + 1224) = 0;
            v854 = *(_QWORD *)buf;
          }
          v868 = (std::__shared_weak_count *)v843[1];
          __p.__r_.__value_.__r.__words[0] = *v843;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v868;
          if (v868)
          {
            v869 = (unint64_t *)&v868->__shared_owners_;
            do
              v870 = __ldxr(v869);
            while (__stxr(v870 + 1, v869));
          }
          md::Label::update(v854, (uint64_t)v840, (uint64_t)v1335);
          if (v868)
          {
            v871 = (unint64_t *)&v868->__shared_owners_;
            do
              v872 = __ldaxr(v871);
            while (__stlxr(v872 - 1, v871));
            if (!v872)
            {
              ((void (*)(std::__shared_weak_count *))v868->__on_zero_shared)(v868);
              std::__shared_weak_count::__release_weak(v868);
            }
          }
        }
      }
      if (!*(_QWORD *)(*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v843 + 552))(*v843, 0, 0, 0, 0))++*((_DWORD *)v1335 + 23);
      v873 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v874 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v875 = __ldaxr(v874);
        while (__stlxr(v875 - 1, v874));
        if (!v875)
        {
          ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
          std::__shared_weak_count::__release_weak(v873);
        }
      }
      goto LABEL_1394;
    }
  }
LABEL_1441:
  v876 = v1342;
  v877 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 32) + 192))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 32));
  if (v877)
  {
    v878 = *(_QWORD **)v877;
    v879 = *(_QWORD **)(v877 + 8);
    if (*(_QWORD **)v877 != v879)
    {
      do
      {
        v880 = (_QWORD *)*v878;
        *(_DWORD *)buf = 1;
        v881 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD *, uint8_t *))(*v880 + 112))(v880, buf);
        v882 = (double *)md::LabelPoint::mercatorPoint(v881);
        if (*v882 >= *v1309 && *v882 <= *((double *)v1335 + 7))
        {
          v883 = v882[1];
          if (v883 >= *((double *)v1335 + 6) && v883 <= *((double *)v1335 + 8))
          {
            v884 = (_QWORD *)*v878;
            if (!*(_QWORD *)(*v878 + 72))
            {
              v885 = (unint64_t *)(*((_QWORD *)v876 + 36) + 680);
              do
              {
                v886 = __ldaxr(v885);
                v887 = v886 + 1;
              }
              while (__stlxr(v887, v885));
              v884[9] = v887;
              v884 = (_QWORD *)*v878;
            }
            if (*(_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*v884 + 552))(v884, 0, 0, 0, 0))
            {
              v888 = (std::__shared_weak_count *)v878[1];
              __p.__r_.__value_.__r.__words[0] = *v878;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v888;
              if (v888)
              {
                v889 = (unint64_t *)&v888->__shared_owners_;
                do
                  v890 = __ldxr(v889);
                while (__stxr(v890 + 1, v889));
              }
              LODWORD(v1338.f64[0]) = 1;
              md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v876, &__p, (unsigned int *)&v1338, 1);
              if (!v888)
                goto LABEL_1462;
              v891 = (unint64_t *)&v888->__shared_owners_;
              do
                v892 = __ldaxr(v891);
              while (__stlxr(v892 - 1, v891));
              if (!v892)
              {
                ((void (*)(std::__shared_weak_count *))v888->__on_zero_shared)(v888);
                std::__shared_weak_count::__release_weak(v888);
                v893 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                {
LABEL_1463:
                  v894 = *v1329;
                  v895 = v1329;
                  v896 = v1329;
                  if (*v1329)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v896 = (uint64_t **)v894;
                        v897 = v894[4];
                        if (v893 >= v897)
                          break;
                        v894 = *v896;
                        v895 = v896;
                        if (!*v896)
                          goto LABEL_1470;
                      }
                      if (v897 >= v893)
                        break;
                      v894 = v896[1];
                      if (!v894)
                      {
                        v895 = v896 + 1;
                        goto LABEL_1470;
                      }
                    }
                  }
                  else
                  {
LABEL_1470:
                    v898 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53)
                                                                                          + 16))(*((_QWORD *)v1335 + 53), 48, 8);
                    v899 = v898;
                    v900 = *(_QWORD *)&buf[8];
                    v898[4] = *(_QWORD *)buf;
                    v898[5] = v900;
                    if (v900)
                    {
                      v901 = (unint64_t *)(v900 + 8);
                      do
                        v902 = __ldxr(v901);
                      while (__stxr(v902 + 1, v901));
                    }
                    *v898 = 0;
                    v898[1] = 0;
                    v898[2] = (uint64_t)v896;
                    *v895 = v898;
                    v903 = **((_QWORD **)v1335 + 51);
                    if (v903)
                    {
                      *((_QWORD *)v1335 + 51) = v903;
                      v899 = *v895;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v899);
                    ++*((_QWORD *)v1335 + 54);
                    v904 = *(_QWORD *)buf;
                    v905 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
                    do
                      v906 = __ldaxr(v905);
                    while (__stlxr(v906 + 1, v905));
                    if (!v906 && !*(_BYTE *)(v904 + 820))
                    {
                      *(_BYTE *)(v904 + 1214) = -1;
                      md::Label::updateStateMachineForStaging(v904, 0, 37);
                    }
                    *(_BYTE *)(v904 + 1261) = 0;
                    *(_QWORD *)(v904 + 1224) = 0;
                    v893 = *(_QWORD *)buf;
                  }
                  v907 = (std::__shared_weak_count *)v878[1];
                  __p.__r_.__value_.__r.__words[0] = *v878;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v907;
                  if (v907)
                  {
                    v908 = (unint64_t *)&v907->__shared_owners_;
                    do
                      v909 = __ldxr(v908);
                    while (__stxr(v909 + 1, v908));
                  }
                  md::Label::update(v893, (uint64_t)v876, (uint64_t)v1335);
                  if (v907)
                  {
                    v910 = (unint64_t *)&v907->__shared_owners_;
                    do
                      v911 = __ldaxr(v910);
                    while (__stlxr(v911 - 1, v910));
                    if (!v911)
                    {
                      ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
                      std::__shared_weak_count::__release_weak(v907);
                    }
                  }
                }
              }
              else
              {
LABEL_1462:
                v893 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                  goto LABEL_1463;
              }
              v912 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v913 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v914 = __ldaxr(v913);
                while (__stlxr(v914 - 1, v913));
                if (!v914)
                {
                  ((void (*)(std::__shared_weak_count *))v912->__on_zero_shared)(v912);
                  std::__shared_weak_count::__release_weak(v912);
                }
              }
              goto LABEL_1445;
            }
            ++*((_DWORD *)v1335 + 23);
          }
        }
LABEL_1445:
        v878 += 2;
      }
      while (v878 != v879);
    }
  }
  v915 = v1342;
  v916 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 32) + 208))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 32));
  if (v916)
  {
    v918 = *(unsigned __int8 ***)v916;
    v917 = *(unsigned __int8 ***)(v916 + 8);
    if (*(unsigned __int8 ***)v916 != v917)
    {
      v919 = 0;
      do
      {
        v920 = *v918;
        if (*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v918 + 552))(*v918, 0, 0, 0, 0))
        {
          if (v920[140] || v1327 >= v920[136])
          {
            md::LineLabelFeature::updatePositions((md::LineLabelFeature *)v920, v915, v1327, v1335);
            md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)(v920 + 192), v786, v1327);
            if (v919)
              operator delete(v919);
            v919 = *(void **)buf;
            v921 = *(unsigned int **)&buf[8];
            for (j = *(unsigned int **)buf; j != v921; ++j)
            {
              md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v915, v918, j, 1);
              v923 = *(_QWORD *)buf;
              if (*(_QWORD *)buf)
              {
                v924 = *v1329;
                v925 = v1329;
                v926 = v1329;
                if (*v1329)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v926 = (uint64_t **)v924;
                      v927 = v924[4];
                      if (*(_QWORD *)buf >= v927)
                        break;
                      v924 = *v926;
                      v925 = v926;
                      if (!*v926)
                        goto LABEL_1517;
                    }
                    if (v927 >= *(_QWORD *)buf)
                      break;
                    v924 = v926[1];
                    if (!v924)
                    {
                      v925 = v926 + 1;
                      goto LABEL_1517;
                    }
                  }
                }
                else
                {
LABEL_1517:
                  v928 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53)
                                                                                        + 16))(*((_QWORD *)v1335 + 53), 48, 8);
                  v929 = v928;
                  v930 = *(_QWORD *)&buf[8];
                  v928[4] = *(_QWORD *)buf;
                  v928[5] = v930;
                  if (v930)
                  {
                    v931 = (unint64_t *)(v930 + 8);
                    do
                      v932 = __ldxr(v931);
                    while (__stxr(v932 + 1, v931));
                  }
                  *v928 = 0;
                  v928[1] = 0;
                  v928[2] = (uint64_t)v926;
                  *v925 = v928;
                  v933 = **((_QWORD **)v1335 + 51);
                  if (v933)
                  {
                    *((_QWORD *)v1335 + 51) = v933;
                    v929 = *v925;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v929);
                  ++*((_QWORD *)v1335 + 54);
                  v934 = *(_QWORD *)buf;
                  v935 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
                  do
                    v936 = __ldaxr(v935);
                  while (__stlxr(v936 + 1, v935));
                  if (!v936 && !*(_BYTE *)(v934 + 820))
                  {
                    *(_BYTE *)(v934 + 1214) = -1;
                    md::Label::updateStateMachineForStaging(v934, 0, 37);
                  }
                  *(_BYTE *)(v934 + 1261) = 0;
                  *(_QWORD *)(v934 + 1224) = 0;
                  v923 = *(_QWORD *)buf;
                }
                md::Label::update(v923, (uint64_t)v915, (uint64_t)v1335);
              }
              v937 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v938 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v939 = __ldaxr(v938);
                while (__stlxr(v939 - 1, v938));
                if (!v939)
                {
                  ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
                  std::__shared_weak_count::__release_weak(v937);
                }
              }
            }
            v786 = v1309;
          }
          else
          {
            ++*((_DWORD *)v1335 + 24);
          }
        }
        else
        {
          ++*((_DWORD *)v1335 + 23);
        }
        v918 += 2;
      }
      while (v918 != v917);
      if (v919)
        operator delete(v919);
    }
  }
  v940 = v1327;
  if (v1306)
  {
    v941 = (_QWORD *)v1303[16];
    for (k = (_QWORD *)v1303[17]; v941 != k; v941 += 2)
    {
      v945 = *v941;
      *(_DWORD *)buf = 1;
      v946 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v945 + 112))(v945, buf);
      v947 = (double *)md::LabelPoint::mercatorPoint(v946);
      if (*v947 >= *v786 && *v947 <= *((double *)v1335 + 7))
      {
        v948 = v947[1];
        if (v948 >= *((double *)v1335 + 6) && v948 <= *((double *)v1335 + 8))
        {
          if (*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v941 + 552))(*v941, 0, 0, 0, 0))
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = 1;
            md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v1342, v941, (unsigned int *)&__p, 1);
            v949 = *(_QWORD *)buf;
            if (*(_QWORD *)buf)
            {
              v950 = *v1329;
              v951 = v1329;
              v952 = v1329;
              if (*v1329)
              {
                while (1)
                {
                  while (1)
                  {
                    v952 = (uint64_t **)v950;
                    v953 = v950[4];
                    if (*(_QWORD *)buf >= v953)
                      break;
                    v950 = *v952;
                    v951 = v952;
                    if (!*v952)
                      goto LABEL_1560;
                  }
                  if (v953 >= *(_QWORD *)buf)
                    break;
                  v950 = v952[1];
                  if (!v950)
                  {
                    v951 = v952 + 1;
                    goto LABEL_1560;
                  }
                }
              }
              else
              {
LABEL_1560:
                v954 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53) + 16))(*((_QWORD *)v1335 + 53), 48, 8);
                v955 = v954;
                v956 = *(_QWORD *)&buf[8];
                v954[4] = *(_QWORD *)buf;
                v954[5] = v956;
                if (v956)
                {
                  v957 = (unint64_t *)(v956 + 8);
                  do
                    v958 = __ldxr(v957);
                  while (__stxr(v958 + 1, v957));
                }
                *v954 = 0;
                v954[1] = 0;
                v954[2] = (uint64_t)v952;
                *v951 = v954;
                v959 = **((_QWORD **)v1335 + 51);
                if (v959)
                {
                  *((_QWORD *)v1335 + 51) = v959;
                  v955 = *v951;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v955);
                ++*((_QWORD *)v1335 + 54);
                v960 = *(_QWORD *)buf;
                v961 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
                do
                  v962 = __ldaxr(v961);
                while (__stlxr(v962 + 1, v961));
                if (!v962 && !*(_BYTE *)(v960 + 820))
                {
                  *(_BYTE *)(v960 + 1214) = -1;
                  md::Label::updateStateMachineForStaging(v960, 0, 37);
                }
                *(_BYTE *)(v960 + 1261) = 0;
                *(_QWORD *)(v960 + 1224) = 0;
                v949 = *(_QWORD *)buf;
              }
              md::Label::update(v949, (uint64_t)v1342, (uint64_t)v1335);
            }
            v963 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v964 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v965 = __ldaxr(v964);
              while (__stlxr(v965 - 1, v964));
              if (!v965)
              {
                ((void (*)(std::__shared_weak_count *))v963->__on_zero_shared)(v963);
                std::__shared_weak_count::__release_weak(v963);
              }
            }
          }
          else
          {
            ++*((_DWORD *)v1335 + 23);
          }
        }
      }
    }
    v967 = (md::LineLabelFeature **)v1303[30];
    v966 = (md::LineLabelFeature **)v1303[31];
    if (v967 != v966)
    {
      v968 = 0;
      do
      {
        v969 = *v967;
        md::LineLabelFeature::updatePositions(*v967, v1342, v940, v1335);
        md::LineLabelPlacer::placementsForRect((char **)buf, (uint64_t)v969 + 192, v786, v940);
        if (v968)
          operator delete(v968);
        v968 = *(void **)buf;
        v970 = *(unsigned int **)&buf[8];
        for (m = *(unsigned int **)buf; m != v970; ++m)
        {
          md::LabelPool::labelForFeature((md::LabelBase **)buf, v1331, (uint64_t)v1342, v967, m, 1);
          v972 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            v973 = *v1329;
            v974 = (uint64_t *)v1329;
            v975 = (uint64_t *)v1329;
            if (*v1329)
            {
              while (1)
              {
                while (1)
                {
                  v975 = v973;
                  v976 = v973[4];
                  if (*(_QWORD *)buf >= v976)
                    break;
                  v973 = (uint64_t *)*v975;
                  v974 = v975;
                  if (!*v975)
                    goto LABEL_1593;
                }
                if (v976 >= *(_QWORD *)buf)
                  break;
                v973 = (uint64_t *)v975[1];
                if (!v973)
                {
                  v974 = v975 + 1;
                  goto LABEL_1593;
                }
              }
            }
            else
            {
LABEL_1593:
              v977 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53) + 16))(*((_QWORD *)v1335 + 53), 48, 8);
              v978 = *(_QWORD *)&buf[8];
              *(_QWORD *)(v977 + 32) = *(_QWORD *)buf;
              *(_QWORD *)(v977 + 40) = v978;
              if (v978)
              {
                v979 = (unint64_t *)(v978 + 8);
                do
                  v980 = __ldxr(v979);
                while (__stxr(v980 + 1, v979));
              }
              *(_QWORD *)v977 = 0;
              *(_QWORD *)(v977 + 8) = 0;
              *(_QWORD *)(v977 + 16) = v975;
              *v974 = v977;
              v981 = **((_QWORD **)v1335 + 51);
              if (v981)
              {
                *((_QWORD *)v1335 + 51) = v981;
                v977 = *v974;
              }
              v982 = *v1329;
              _ZF = v977 == (_QWORD)*v1329;
              *(_BYTE *)(v977 + 24) = _ZF;
              if (!_ZF)
              {
                do
                {
                  v983 = *(uint64_t **)(v977 + 16);
                  if (*((_BYTE *)v983 + 24))
                    break;
                  v984 = v983[2];
                  v985 = *(uint64_t **)v984;
                  if (*(uint64_t **)v984 == v983)
                  {
                    v988 = *(_QWORD *)(v984 + 8);
                    if (!v988 || (v989 = *(unsigned __int8 *)(v988 + 24), v986 = (_BYTE *)(v988 + 24), v989))
                    {
                      if (*v983 == v977)
                      {
                        v990 = *(uint64_t ***)(v977 + 16);
                      }
                      else
                      {
                        v990 = (uint64_t **)v983[1];
                        v991 = *v990;
                        v983[1] = (uint64_t)*v990;
                        if (v991)
                        {
                          v991[2] = (uint64_t)v983;
                          v984 = v983[2];
                        }
                        v990[2] = (uint64_t *)v984;
                        *(_QWORD *)(v983[2] + 8 * (*(_QWORD *)v983[2] != (_QWORD)v983)) = v990;
                        *v990 = v983;
                        v983[2] = (uint64_t)v990;
                        v984 = (uint64_t)v990[2];
                        v983 = *(uint64_t **)v984;
                      }
                      *((_BYTE *)v990 + 24) = 1;
                      *(_BYTE *)(v984 + 24) = 0;
                      v994 = v983[1];
                      *(_QWORD *)v984 = v994;
                      if (v994)
                        *(_QWORD *)(v994 + 16) = v984;
                      v983[2] = *(_QWORD *)(v984 + 16);
                      *(_QWORD *)(*(_QWORD *)(v984 + 16) + 8 * (**(_QWORD **)(v984 + 16) != v984)) = v983;
                      v983[1] = v984;
                      goto LABEL_1625;
                    }
                  }
                  else if (!v985 || (v987 = *((unsigned __int8 *)v985 + 24), v986 = v985 + 3, v987))
                  {
                    if (*v983 == v977)
                    {
                      v992 = *(_QWORD *)(v977 + 8);
                      *v983 = v992;
                      if (v992)
                      {
                        *(_QWORD *)(v992 + 16) = v983;
                        v984 = v983[2];
                      }
                      *(_QWORD *)(v977 + 16) = v984;
                      *(_QWORD *)(v983[2] + 8 * (*(_QWORD *)v983[2] != (_QWORD)v983)) = v977;
                      *(_QWORD *)(v977 + 8) = v983;
                      v983[2] = v977;
                      v984 = *(_QWORD *)(v977 + 16);
                    }
                    else
                    {
                      v977 = *(_QWORD *)(v977 + 16);
                    }
                    *(_BYTE *)(v977 + 24) = 1;
                    *(_BYTE *)(v984 + 24) = 0;
                    v983 = *(uint64_t **)(v984 + 8);
                    v993 = *v983;
                    *(_QWORD *)(v984 + 8) = *v983;
                    if (v993)
                      *(_QWORD *)(v993 + 16) = v984;
                    v983[2] = *(_QWORD *)(v984 + 16);
                    *(_QWORD *)(*(_QWORD *)(v984 + 16) + 8 * (**(_QWORD **)(v984 + 16) != v984)) = v983;
                    *v983 = v984;
LABEL_1625:
                    *(_QWORD *)(v984 + 16) = v983;
                    break;
                  }
                  *((_BYTE *)v983 + 24) = 1;
                  v977 = v984;
                  *(_BYTE *)(v984 + 24) = v984 == (_QWORD)v982;
                  *v986 = 1;
                }
                while ((uint64_t *)v984 != v982);
              }
              ++*((_QWORD *)v1335 + 54);
              v995 = *(_QWORD *)buf;
              v996 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
              do
                v997 = __ldaxr(v996);
              while (__stlxr(v997 + 1, v996));
              if (!v997 && !*(_BYTE *)(v995 + 820))
              {
                *(_BYTE *)(v995 + 1214) = -1;
                md::Label::updateStateMachineForStaging(v995, 0, 37);
              }
              *(_BYTE *)(v995 + 1261) = 0;
              *(_QWORD *)(v995 + 1224) = 0;
              v972 = *(_QWORD *)buf;
            }
            md::Label::update(v972, (uint64_t)v1342, (uint64_t)v1335);
          }
          v998 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v999 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v1000 = __ldaxr(v999);
            while (__stlxr(v1000 - 1, v999));
            if (!v1000)
            {
              ((void (*)(std::__shared_weak_count *))v998->__on_zero_shared)(v998);
              std::__shared_weak_count::__release_weak(v998);
            }
          }
        }
        v967 += 2;
        v786 = v1309;
        v940 = v1327;
      }
      while (v967 != v966);
      if (v968)
        operator delete(v968);
    }
  }
  v1001 = (unsigned __int8 **)*((_QWORD *)v1335 + 43);
  for (n = (unsigned __int8 **)*((_QWORD *)v1335 + 44); v1001 != n; v1001 += 2)
  {
    v1003 = *v1001;
    *(_DWORD *)buf = 1;
    v1004 = (md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *, uint8_t *))(*(_QWORD *)v1003 + 112))(v1003, buf);
    v1005 = (double *)md::LabelPoint::mercatorPoint(v1004);
    if (*v1005 >= *v786 && *v1005 <= *((double *)v1335 + 7))
    {
      v1006 = v1005[1];
      if (v1006 >= *((double *)v1335 + 6) && v1006 <= *((double *)v1335 + 8))
      {
        if (*(_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v1001 + 552))(*v1001, 0, 0, 0, 0))
        {
          v1007 = *v1001;
          if ((*v1001)[140] || v940 >= v1007[136])
          {
            if (!v1285
              || !*(_QWORD *)&v1285[34]
              || !(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1007 + 368))(v1007)
              || !(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)*v1001 + 384))(*v1001)
              || (v1008 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)*v1001 + 376))(*v1001),
                  v1009 = md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(v1285, v1008),
                  v1009 == (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)*v1001 + 400))(*v1001)))
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 1;
              md::LabelPool::labelForCustomFeature((uint64_t *)buf, (uint64_t)v1331, (uint64_t)v1342, v1001, (unsigned int *)&__p, 1);
              v1010 = *(_QWORD *)buf;
              if (*(_QWORD *)buf)
              {
                v1011 = *v1329;
                v1012 = v1329;
                v1013 = v1329;
                if (*v1329)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v1013 = (uint64_t **)v1011;
                      v1014 = v1011[4];
                      if (*(_QWORD *)buf >= v1014)
                        break;
                      v1011 = *v1013;
                      v1012 = v1013;
                      if (!*v1013)
                        goto LABEL_1665;
                    }
                    if (v1014 >= *(_QWORD *)buf)
                      break;
                    v1011 = v1013[1];
                    if (!v1011)
                    {
                      v1012 = v1013 + 1;
                      goto LABEL_1665;
                    }
                  }
                }
                else
                {
LABEL_1665:
                  v1015 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1335 + 53)
                                                                                         + 16))(*((_QWORD *)v1335 + 53), 48, 8);
                  v1016 = v1015;
                  v1017 = *(_QWORD *)&buf[8];
                  v1015[4] = *(_QWORD *)buf;
                  v1015[5] = v1017;
                  if (v1017)
                  {
                    v1018 = (unint64_t *)(v1017 + 8);
                    do
                      v1019 = __ldxr(v1018);
                    while (__stxr(v1019 + 1, v1018));
                  }
                  *v1015 = 0;
                  v1015[1] = 0;
                  v1015[2] = (uint64_t)v1013;
                  *v1012 = v1015;
                  v1020 = **((_QWORD **)v1335 + 51);
                  if (v1020)
                  {
                    *((_QWORD *)v1335 + 51) = v1020;
                    v1016 = *v1012;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1335 + 52), v1016);
                  ++*((_QWORD *)v1335 + 54);
                  v1021 = *(_QWORD *)buf;
                  v1022 = (unsigned __int8 *)(*(_QWORD *)buf + 1296);
                  do
                    v1023 = __ldaxr(v1022);
                  while (__stlxr(v1023 + 1, v1022));
                  if (!v1023 && !*(_BYTE *)(v1021 + 820))
                  {
                    *(_BYTE *)(v1021 + 1214) = -1;
                    md::Label::updateStateMachineForStaging(v1021, 0, 37);
                  }
                  *(_BYTE *)(v1021 + 1261) = 0;
                  *(_QWORD *)(v1021 + 1224) = 0;
                  v1010 = *(_QWORD *)buf;
                }
                md::Label::update(v1010, (uint64_t)v1342, (uint64_t)v1335);
              }
              v1024 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v1025 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v1026 = __ldaxr(v1025);
                while (__stlxr(v1026 - 1, v1025));
                if (!v1026)
                {
                  ((void (*)(std::__shared_weak_count *))v1024->__on_zero_shared)(v1024);
                  std::__shared_weak_count::__release_weak(v1024);
                }
              }
            }
          }
          else
          {
            ++*((_DWORD *)v1335 + 24);
          }
        }
        else
        {
          ++*((_DWORD *)v1335 + 23);
        }
      }
    }
  }
  if (*((_BYTE *)v1335 + 125))
  {
    v1027 = v1340;
    if (v1340 != v1341)
    {
      do
      {
        v1028 = v1027[4];
        v1029 = (unsigned __int8 *)(v1028 + 1296);
        do
          v1030 = __ldaxr(v1029);
        while (__stlxr(v1030 - 1, v1029));
        if (v1030 == 1)
        {
          if (*(_BYTE *)(v1028 + 1264))
          {
            *(_BYTE *)(v1028 + 1261) = 1;
            *(_QWORD *)(v1028 + 1224) = 0;
          }
          else
          {
            md::Label::updateStateMachineForStaging(v1028, 1, 37);
          }
        }
        v1031 = (_QWORD *)v1027[1];
        if (v1031)
        {
          do
          {
            v1032 = (_QWORD **)v1031;
            v1031 = (_QWORD *)*v1031;
          }
          while (v1031);
        }
        else
        {
          do
          {
            v1032 = (_QWORD **)v1027[2];
            _ZF = *v1032 == v1027;
            v1027 = v1032;
          }
          while (!_ZF);
        }
        v1027 = v1032;
      }
      while (v1032 != v1341);
    }
  }
  *((_BYTE *)v1335 + 125) = 1;
  if (*((_BYTE *)v1335 + 126))
  {
    v1033 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 56);
    *v1283 = 0;
    v1283[1] = 0;
    if (!v1033)
      goto LABEL_1703;
    v1034 = (unint64_t *)&v1033->__shared_owners_;
    do
      v1035 = __ldaxr(v1034);
    while (__stlxr(v1035 - 1, v1034));
    if (!v1035)
    {
      ((void (*)(std::__shared_weak_count *))v1033->__on_zero_shared)(v1033);
      std::__shared_weak_count::__release_weak(v1033);
      if (!*((_QWORD *)v1335 + 27))
        goto LABEL_1719;
    }
    else
    {
LABEL_1703:
      if (!*((_QWORD *)v1335 + 27))
        goto LABEL_1719;
    }
    v1036 = atomic_load((unsigned __int8 *)v1342 + 3391);
    if ((v1036 & 1) != 0)
    {
      v1037 = *((_QWORD *)v1335 + 27);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v1038 = *(std::__shared_weak_count **)(v1037 + 272);
      if (v1038)
      {
        *(_QWORD *)&buf[8] = std::__shared_weak_count::lock(v1038);
        if (*(_QWORD *)&buf[8])
        {
          v1039 = *(_QWORD *)(v1037 + 264);
          *(_QWORD *)buf = v1039;
          if (v1039)
          {
            v1040 = *(unsigned __int8 *)(*((_QWORD *)v1342 + 29) + 17);
            v1041 = operator new(0xF0uLL);
            v1041[1] = 0;
            v1041[2] = 0;
            *v1041 = &off_1E42DD1C0;
            v1042 = md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo((uint64_t)(v1041 + 3), v1040 == 0, v786, v1039, 3);
            v1043 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 56);
            *((_QWORD *)v1335 + 55) = v1042;
            *((_QWORD *)v1335 + 56) = v1041;
            if (v1043)
            {
              v1044 = (unint64_t *)&v1043->__shared_owners_;
              do
                v1045 = __ldaxr(v1044);
              while (__stlxr(v1045 - 1, v1044));
              if (!v1045)
              {
                ((void (*)(std::__shared_weak_count *))v1043->__on_zero_shared)(v1043);
                std::__shared_weak_count::__release_weak(v1043);
              }
            }
          }
        }
      }
      v1046 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v1047 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v1048 = __ldaxr(v1047);
        while (__stlxr(v1048 - 1, v1047));
        if (!v1048)
        {
          ((void (*)(std::__shared_weak_count *))v1046->__on_zero_shared)(v1046);
          std::__shared_weak_count::__release_weak(v1046);
        }
      }
    }
  }
LABEL_1719:
  *((_BYTE *)v1335 + 126) = 0;
  if (*((_BYTE *)v1335 + 127))
  {
    v1049 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 58);
    v1283[2] = 0;
    v1283[3] = 0;
    if (!v1049)
      goto LABEL_1724;
    v1050 = (unint64_t *)&v1049->__shared_owners_;
    do
      v1051 = __ldaxr(v1050);
    while (__stlxr(v1051 - 1, v1050));
    if (!v1051)
    {
      ((void (*)(std::__shared_weak_count *))v1049->__on_zero_shared)(v1049);
      std::__shared_weak_count::__release_weak(v1049);
      v1052 = *((_QWORD *)v1335 + 35);
      if (v1052)
      {
LABEL_1725:
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v1053 = *(std::__shared_weak_count **)(v1052 + 272);
        if (v1053)
        {
          *(_QWORD *)&buf[8] = std::__shared_weak_count::lock(v1053);
          if (*(_QWORD *)&buf[8])
          {
            v1054 = *(_QWORD *)(v1052 + 264);
            *(_QWORD *)buf = v1054;
            if (v1054)
            {
              v1055 = *(unsigned __int8 *)(*((_QWORD *)v1342 + 29) + 17);
              v1056 = operator new(0xF0uLL);
              v1056[1] = 0;
              v1056[2] = 0;
              *v1056 = &off_1E42DD1C0;
              v1057 = md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo((uint64_t)(v1056 + 3), v1055 == 0, v786, v1054, 2);
              v1058 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 58);
              *((_QWORD *)v1335 + 57) = v1057;
              *((_QWORD *)v1335 + 58) = v1056;
              if (v1058)
              {
                v1059 = (unint64_t *)&v1058->__shared_owners_;
                do
                  v1060 = __ldaxr(v1059);
                while (__stlxr(v1060 - 1, v1059));
                if (!v1060)
                {
                  ((void (*)(std::__shared_weak_count *))v1058->__on_zero_shared)(v1058);
                  std::__shared_weak_count::__release_weak(v1058);
                }
              }
            }
          }
        }
        v1061 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v1062 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v1063 = __ldaxr(v1062);
          while (__stlxr(v1063 - 1, v1062));
          if (!v1063)
          {
            ((void (*)(std::__shared_weak_count *))v1061->__on_zero_shared)(v1061);
            std::__shared_weak_count::__release_weak(v1061);
          }
        }
      }
    }
    else
    {
LABEL_1724:
      v1052 = *((_QWORD *)v1335 + 35);
      if (v1052)
        goto LABEL_1725;
    }
    *((_BYTE *)v1335 + 127) = 0;
  }
  if (!v1303 || (v1064 = v1342, *((_BYTE *)v1342 + 201) != 1))
  {
    if (v1282)
    {
      v1075 = v1342;
      if (*((_BYTE *)v1342 + 201) == 2)
      {
        if (*(_BYTE *)(md::LabelSettingsStyleCache::styleCaps(*(md::LabelSettingsStyleCache **)(*((_QWORD *)v1342 + 42)
                                                                                               + 200))
                      + 1))
        {
          v1076 = *(_QWORD *)(v1282 + 200);
          if (v1076)
          {
            v1077 = *(unsigned __int8 *)(v1076 + 24);
            if (*((_DWORD *)v1335 + 122) == v1077)
              goto LABEL_1765;
            *((_DWORD *)v1335 + 122) = v1077;
            v1078 = (uint64_t **)md::LabelRouteCollisionInfo::tileCollisionInfo(*(md::LabelRouteCollisionInfo **)(v1076 + 96), *((unsigned __int8 *)v1335 + 9), v786);
            if (v1078)
            {
              v1079 = *(unsigned __int8 *)(*((_QWORD *)v1075 + 29) + 17);
              v1080 = operator new(0xF0uLL);
              v1080[1] = 0;
              v1080[2] = 0;
              *v1080 = &off_1E42DD1C0;
              v1081 = md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo((uint64_t)(v1080 + 3), v1079 == 0, v786, v1078);
              v1072 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 60);
              *((_QWORD *)v1335 + 59) = v1081;
              *((_QWORD *)v1335 + 60) = v1080;
              if (!v1072)
                goto LABEL_1765;
              v1082 = (unint64_t *)&v1072->__shared_owners_;
              do
                v1074 = __ldaxr(v1082);
              while (__stlxr(v1074 - 1, v1082));
            }
            else
            {
              v1072 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 60);
              v1283[4] = 0;
              v1283[5] = 0;
              if (!v1072)
                goto LABEL_1765;
              v1274 = (unint64_t *)&v1072->__shared_owners_;
              do
                v1074 = __ldaxr(v1274);
              while (__stlxr(v1074 - 1, v1274));
            }
LABEL_1763:
            if (!v1074)
            {
              ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
              std::__shared_weak_count::__release_weak(v1072);
            }
            goto LABEL_1765;
          }
        }
      }
    }
LABEL_1760:
    *((_DWORD *)v1335 + 122) = 0;
    v1072 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 60);
    v1283[4] = 0;
    v1283[5] = 0;
    if (!v1072)
      goto LABEL_1765;
    v1083 = (unint64_t *)&v1072->__shared_owners_;
    do
      v1074 = __ldaxr(v1083);
    while (__stlxr(v1074 - 1, v1083));
    goto LABEL_1763;
  }
  v1065 = v1303[41];
  if (!v1065)
    goto LABEL_1760;
  v1066 = *(_DWORD *)(v1065 + 48);
  if (*((_DWORD *)v1335 + 122) == v1066)
    goto LABEL_1765;
  *((_DWORD *)v1335 + 122) = v1066;
  v1067 = *(md::LabelRouteCollisionInfo **)(v1065 + 304);
  if (!v1067
    || (v1068 = (uint64_t **)md::LabelRouteCollisionInfo::tileCollisionInfo(v1067, *((unsigned __int8 *)v1335 + 9), v786)) == 0)
  {
    v1072 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 60);
    v1283[4] = 0;
    v1283[5] = 0;
    if (!v1072)
      goto LABEL_1765;
    v1146 = (unint64_t *)&v1072->__shared_owners_;
    do
      v1074 = __ldaxr(v1146);
    while (__stlxr(v1074 - 1, v1146));
    goto LABEL_1763;
  }
  v1069 = *(unsigned __int8 *)(*((_QWORD *)v1064 + 29) + 17);
  v1070 = operator new(0xF0uLL);
  v1070[1] = 0;
  v1070[2] = 0;
  *v1070 = &off_1E42DD1C0;
  v1071 = md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo((uint64_t)(v1070 + 3), v1069 == 0, v786, v1068);
  v1072 = (std::__shared_weak_count *)*((_QWORD *)v1335 + 60);
  *((_QWORD *)v1335 + 59) = v1071;
  *((_QWORD *)v1335 + 60) = v1070;
  if (v1072)
  {
    v1073 = (unint64_t *)&v1072->__shared_owners_;
    do
      v1074 = __ldaxr(v1073);
    while (__stlxr(v1074 - 1, v1073));
    goto LABEL_1763;
  }
LABEL_1765:
  v1084 = v1342;
  type = v1311->_type;
  v1086 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1342 + 21) + 32) + 80))(*(_QWORD *)(*((_QWORD *)v1342 + 21) + 32));
  if (type != 255
    || !v1086
    || (v1087 = *(_QWORD *)(v1086 + 200)) == 0
    || *(_QWORD *)(v1284 + 1208) == *(_QWORD *)(v1284 + 1216))
  {
    v1139 = (uint64_t **)*((_QWORD *)v1335 + 51);
    if (v1139 != v1329)
    {
      do
      {
        v1140 = v1139[4];
        if (*((_BYTE *)v1140 + 1279))
        {
          *((_WORD *)v1140 + 640) = 0;
          *((_BYTE *)v1140 + 1282) = 0;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1140[1] + 520))(v1140[1], 0xFFFFFFFFLL))
            md::LabelFeatureStyler::restyleFeature(*((md::LabelFeatureStyler **)v1084 + 37), (md::LabelFeature *)v1139[4][1]);
        }
        v1141 = v1139[1];
        if (v1141)
        {
          do
          {
            v1142 = (uint64_t **)v1141;
            v1141 = (uint64_t *)*v1141;
          }
          while (v1141);
        }
        else
        {
          do
          {
            v1142 = (uint64_t **)v1139[2];
            _ZF = *v1142 == (uint64_t *)v1139;
            v1139 = v1142;
          }
          while (!_ZF);
        }
        v1139 = v1142;
      }
      while (v1142 != v1329);
    }
    goto LABEL_2031;
  }
  v1088 = *((unsigned __int8 *)v1335 + 9);
  if (v1088 >= 0xF)
    v1088 = 15;
  v1310 = v1088;
  v1089 = (uint64_t **)*((_QWORD *)v1335 + 51);
  if (v1089 == v1329)
    goto LABEL_2031;
  v1290 = v1084;
  v1090 = 0;
  v1091 = 0;
  v1092 = 0;
  v1093 = 0;
  v1094 = 0;
  v1095 = 0;
  v1328 = *(unsigned __int8 *)(v1284 + 1197);
  v1312 = *(QuadTile **)(v1086 + 200);
  v1321 = *(unsigned __int8 *)(v1087 + 24);
  v1096 = 1.79769313e308;
  v1097 = -1.79769313e308;
  v1098 = -1.79769313e308;
  v1099 = 1.79769313e308;
  do
  {
    v1332 = v1092;
    v1100 = v1089[4];
    if (!*((_BYTE *)v1100 + 1279))
    {
      v1092 = v1332;
      v1101 = v1089[1];
      if (v1101)
        goto LABEL_1821;
      goto LABEL_1831;
    }
    if (*((unsigned __int8 *)v1100 + 1281) == v1328
      && *((unsigned __int8 *)v1100 + 1280) == v1321
      && *((unsigned __int8 *)v1100 + 1282) >= v1310)
    {
      v1092 = v1332;
      v1101 = v1089[1];
      if (v1101)
        goto LABEL_1821;
      goto LABEL_1831;
    }
    if ((unint64_t)v1094 < v1095)
    {
      *(_QWORD *)&v1094->_type = v1100;
      v1094 = (QuadTile *)((char *)v1094 + 8);
      v1092 = v1332;
      goto LABEL_1799;
    }
    v1102 = v1093;
    v1103 = (char *)v1094 - (char *)v1093;
    v1104 = v1103 >> 3;
    v1105 = (v1103 >> 3) + 1;
    v1325 = v1102;
    if (v1105 >> 61)
      abort();
    v1106 = v1095 - (_QWORD)v1102;
    v1107 = (uint64_t)(v1095 - (_QWORD)v1102) >> 2;
    if (v1107 > v1105)
      v1105 = v1107;
    if (v1106 >= 0x7FFFFFFFFFFFFFF8)
      v1108 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v1108 = v1105;
    if (v1108)
    {
      if (v1108 >> 61)
        goto LABEL_2037;
      v1109 = operator new(8 * v1108);
      v1110 = v1090;
    }
    else
    {
      v1110 = v1090;
      v1109 = 0;
    }
    v1111 = (uint64_t **)&v1109[8 * v1104];
    *v1111 = v1100;
    v1112 = (QuadTile *)(v1111 + 1);
    v1113 = v1325;
    if (v1094 == v1325)
    {
      v842 = v1329;
      v1092 = v1332;
      v1117 = &v1109[8 * v1108];
      if (!v1325)
        goto LABEL_1798;
LABEL_1797:
      operator delete(v1113);
      goto LABEL_1798;
    }
    v1114 = (char *)&v1094[-1]._hash - (char *)v1325;
    v1092 = v1332;
    if (v1114 < 0x168
      || &v1109[v1103 - 8 - (v1114 & 0xFFFFFFFFFFFFFFF8)] > &v1109[v1103 - 8]
      || (unint64_t *)((char *)&v1094[-1]._hash - (v1114 & 0xFFFFFFFFFFFFFFF8)) > &v1094[-1]._hash
      || (unint64_t)((char *)v1094 - &v1109[v1103]) < 0x20)
    {
      v1115 = v1094;
      v842 = v1329;
      v1113 = v1325;
      do
      {
LABEL_1795:
        hash = v1115[-1]._hash;
        v1115 = (QuadTile *)((char *)v1115 - 8);
        *--v1111 = (uint64_t *)hash;
      }
      while (v1115 != v1113);
      goto LABEL_1796;
    }
    v1134 = (v1114 >> 3) + 1;
    v1115 = (QuadTile *)((char *)v1094 - 8 * (v1134 & 0x3FFFFFFFFFFFFFFCLL));
    v1135 = &v1109[8 * v1104 - 16];
    p_xIdx = &v1094[-1]._xIdx;
    v1137 = v1134 & 0x3FFFFFFFFFFFFFFCLL;
    v1113 = v1325;
    do
    {
      v1138 = *(_OWORD *)p_xIdx;
      *(v1135 - 1) = *((_OWORD *)p_xIdx - 1);
      *v1135 = v1138;
      v1135 -= 2;
      p_xIdx -= 8;
      v1137 -= 4;
    }
    while (v1137);
    v1111 -= v1134 & 0x3FFFFFFFFFFFFFFCLL;
    v842 = v1329;
    if (v1134 != (v1134 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_1795;
LABEL_1796:
    v1117 = &v1109[8 * v1108];
    if (v1113)
      goto LABEL_1797;
LABEL_1798:
    v1093 = (QuadTile *)v1111;
    v1094 = v1112;
    v1090 = v1110;
    v1095 = (unint64_t)v1117;
LABEL_1799:
    v1118 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1089[4][1] + 112))(v1089[4][1], v1089[4] + 6);
    v1119 = (_OWORD *)md::LabelPoint::mercatorPoint(v1118);
    v1120 = v1119;
    if (v1091 >= v1090)
    {
      v1122 = v1090;
      v1123 = (v1091 - (char *)v1092) >> 4;
      v1124 = v1123 + 1;
      if ((unint64_t)(v1123 + 1) >> 60)
        abort();
      v1125 = v1122 - (char *)v1092;
      v1126 = (v1122 - (char *)v1092) >> 3;
      if (v1126 > v1124)
        v1124 = v1126;
      if (v1125 >= 0x7FFFFFFFFFFFFFF0)
        v1127 = 0xFFFFFFFFFFFFFFFLL;
      else
        v1127 = v1124;
      if (v1127)
      {
        if (v1127 >> 60)
          goto LABEL_2037;
        v1128 = (char *)operator new(16 * v1127);
      }
      else
      {
        v1128 = 0;
      }
      v1129 = &v1128[16 * v1123];
      *(_OWORD *)v1129 = *v1120;
      if (v1091 == (char *)v1092)
      {
        v1092 = (md::LabelPool *)&v1128[16 * v1123];
      }
      else
      {
        v1130 = &v1128[16 * v1123];
        do
        {
          *((_OWORD *)v1130 - 1) = *((_OWORD *)v1091 - 1);
          v1130 -= 16;
          v1091 -= 16;
        }
        while (v1091 != (char *)v1092);
        v1091 = (char *)v1092;
        v1092 = (md::LabelPool *)v1130;
      }
      v1090 = &v1128[16 * v1127];
      v1121 = (double *)(v1129 + 16);
      if (v1091)
        operator delete(v1091);
    }
    else
    {
      *(_OWORD *)v1091 = *v1119;
      v1121 = (double *)(v1091 + 16);
    }
    v1131 = *(v1121 - 2);
    v1132 = *(v1121 - 1);
    v1096 = fmin(v1131, v1096);
    v1098 = fmax(v1098, v1131);
    v1099 = fmin(v1132, v1099);
    v1097 = fmax(v1097, v1132);
    v1091 = (char *)v1121;
    v1101 = v1089[1];
    if (v1101)
    {
      do
      {
LABEL_1821:
        v1133 = (uint64_t **)v1101;
        v1101 = (uint64_t *)*v1101;
      }
      while (v1101);
      goto LABEL_1773;
    }
    do
    {
LABEL_1831:
      v1133 = (uint64_t **)v1089[2];
      _ZF = *v1133 == (uint64_t *)v1089;
      v1089 = v1133;
    }
    while (!_ZF);
LABEL_1773:
    v1089 = v1133;
  }
  while (v1133 != v842);
  if (v1093 != v1094)
  {
    if (v1098 < v1096)
    {
      v1143 = v1310;
    }
    else
    {
      v1143 = v1310;
      if (v1097 >= v1099)
      {
        v1144 = *(double *)(v1284 + 1200);
        v1145 = -(v1144 * *((double *)v1335 + 13));
        v1096 = v1096 - v1144 * *((double *)v1335 + 13);
        v1098 = v1098 - v1145;
        v1099 = v1099 - v1144 * *((double *)v1335 + 13);
        v1097 = v1097 - v1145;
      }
    }
    memset(buf, 0, sizeof(buf));
    v1147 = (char *)v1094 - (char *)v1093;
    v1326 = v1093;
    if ((char *)v1094 - (char *)v1093 < 0)
      abort();
    v1148 = v1147 >> 3;
    v1149 = operator new(v1147 >> 3);
    memset(v1149, 255, v1148);
    v1288 = v1149;
    v1150 = md::LabelRouteCollisionInfo::collisionInfoForZoom(*(md::LabelRouteCollisionInfo **)&v1312[4]._type, v1143);
    v1151 = 1.0 / *(double *)(v1150 + 16);
    v1152 = (int)(v1096 * v1151) & ~((int)(v1096 * v1151) >> 31);
    v1304 = (int)(v1098 * v1151);
    v1330 = (int8x8_t *)v1150;
    v1286 = (md::VenueLogicContext *)v1148;
    if (v1152 > v1304
      || ((v1153 = (int)(v1097 * v1151),
           v1301 = (int)(v1099 * v1151) & ~((int)(v1099 * v1151) >> 31),
           (int)v1301 <= v1153)
        ? (v1154 = *(_QWORD *)(v1150 + 32) == 0)
        : (v1154 = 1),
          v1154))
    {
      v1156 = 0;
      v1157 = 0;
      goto LABEL_1923;
    }
    v1333 = v1092;
    v1155 = 0;
    v1156 = 0;
    v1157 = 0;
    v1158 = 0;
    v1159 = (v1153 + 1);
    v1160 = (int8x8_t *)v1150;
LABEL_1867:
    v1161 = v1152 << 16;
    v1162 = v1301;
    while (2)
    {
      v1163 = v1160[4];
      if (!*(_QWORD *)&v1163)
        goto LABEL_1869;
      v1164 = (v1161 + v1162);
      v1165 = (uint8x8_t)vcnt_s8(v1163);
      v1165.i16[0] = vaddlv_u8(v1165);
      if (v1165.u32[0] > 1uLL)
      {
        v1166 = (v1161 + v1162);
        if (*(_QWORD *)&v1163 <= v1164)
          v1166 = v1164 % *(_QWORD *)&v1163;
      }
      else
      {
        v1166 = (v1163.i32[0] - 1) & v1164;
      }
      v1167 = *(uint64_t ***)(*(_QWORD *)&v1160[3] + 8 * v1166);
      if (!v1167)
        goto LABEL_1869;
      v1168 = *v1167;
      if (!v1168)
        goto LABEL_1869;
      if (v1165.u32[0] < 2uLL)
      {
        v1169 = *(_QWORD *)&v1163 - 1;
        while (1)
        {
          v1171 = v1168[1];
          if (v1171 == v1164)
          {
            if (*((_DWORD *)v1168 + 4) == (_DWORD)v1164)
              goto LABEL_1891;
          }
          else if ((v1171 & v1169) != v1166)
          {
            goto LABEL_1869;
          }
          v1168 = (uint64_t *)*v1168;
          if (!v1168)
            goto LABEL_1869;
        }
      }
      while (2)
      {
        v1170 = v1168[1];
        if (v1170 != v1164)
        {
          if (v1170 >= *(_QWORD *)&v1163)
            v1170 %= *(_QWORD *)&v1163;
          if (v1170 != v1166)
            goto LABEL_1869;
          goto LABEL_1880;
        }
        if (*((_DWORD *)v1168 + 4) != (_DWORD)v1164)
        {
LABEL_1880:
          v1168 = (uint64_t *)*v1168;
          if (!v1168)
            goto LABEL_1869;
          continue;
        }
        break;
      }
LABEL_1891:
      v1172 = v1168[3];
      if (v1172)
        v1173 = v1172 + 8;
      else
        v1173 = 0;
      if (v1158 < v1155)
      {
        *(_QWORD *)&v1158->_type = v1173;
        v1158 = (QuadTile *)((char *)v1158 + 8);
        v1156 = v1158;
      }
      else
      {
        v1307 = v1152;
        v1174 = (char *)v1158 - (char *)v1157;
        v1175 = ((char *)v1158 - (char *)v1157) >> 3;
        v1176 = v1175 + 1;
        v1313 = v1157;
        if ((unint64_t)(v1175 + 1) >> 61)
          abort();
        if (((char *)v1155 - (char *)v1157) >> 2 > v1176)
          v1176 = ((char *)v1155 - (char *)v1157) >> 2;
        if ((unint64_t)((char *)v1155 - (char *)v1157) >= 0x7FFFFFFFFFFFFFF8)
          v1177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1177 = v1176;
        if (v1177)
        {
          if (!(v1177 >> 61))
          {
            v1178 = operator new(8 * v1177);
            goto LABEL_1905;
          }
LABEL_2037:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v1178 = 0;
LABEL_1905:
        v1157 = (QuadTile *)&v1178[8 * v1175];
        *(_QWORD *)&v1157->_type = v1173;
        v1156 = (QuadTile *)&v1157->_xIdx;
        v1179 = v1313;
        if (v1158 != v1313)
        {
          v1180 = (char *)&v1158[-1]._hash - (char *)v1313;
          if (v1180 < 0x168
            || &v1178[v1174 - 8 - (v1180 & 0xFFFFFFFFFFFFFFF8)] > &v1178[v1174 - 8]
            || (unint64_t *)((char *)&v1158[-1]._hash - (v1180 & 0xFFFFFFFFFFFFFFF8)) > &v1158[-1]._hash
            || (unint64_t)((char *)v1158 - &v1178[v1174]) < 0x20)
          {
            v1181 = v1158;
            v1179 = v1313;
            v1160 = v1330;
          }
          else
          {
            v1184 = (v1180 >> 3) + 1;
            v1181 = (QuadTile *)((char *)v1158 - 8 * (v1184 & 0x3FFFFFFFFFFFFFFCLL));
            v1185 = &v1178[8 * v1175 - 16];
            v1186 = &v1158[-1]._xIdx;
            v1187 = v1184 & 0x3FFFFFFFFFFFFFFCLL;
            v1160 = v1330;
            do
            {
              v1188 = *(_OWORD *)v1186;
              *(v1185 - 1) = *((_OWORD *)v1186 - 1);
              *v1185 = v1188;
              v1185 -= 2;
              v1186 -= 8;
              v1187 -= 4;
            }
            while (v1187);
            v1157 = (QuadTile *)((char *)v1157 - 8 * (v1184 & 0x3FFFFFFFFFFFFFFCLL));
            v1179 = v1313;
            if (v1184 == (v1184 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1909:
              v1155 = (QuadTile *)&v1178[8 * v1177];
              if (v1179)
                goto LABEL_1910;
LABEL_1912:
              v1158 = v1156;
              goto LABEL_1913;
            }
          }
          do
          {
            v1182 = v1181[-1]._hash;
            v1181 = (QuadTile *)((char *)v1181 - 8);
            v1157[-1]._hash = v1182;
            v1157 = (QuadTile *)((char *)v1157 - 8);
          }
          while (v1181 != v1179);
          goto LABEL_1909;
        }
        v1160 = v1330;
        v1155 = (QuadTile *)&v1178[8 * v1177];
        if (!v1313)
          goto LABEL_1912;
LABEL_1910:
        v1183 = v1156;
        operator delete(v1179);
        v1156 = v1183;
        v1158 = v1183;
LABEL_1913:
        v1152 = v1307;
      }
LABEL_1869:
      if (++v1162 != v1159)
        continue;
      break;
    }
    while (v1152 != v1304)
    {
      ++v1152;
      if (v1160[4])
        goto LABEL_1867;
    }
    v1092 = v1333;
LABEL_1923:
    v1305 = v1156;
    if ((v1189 & 1) == 0)
    {
      v1156 = v1305;
      if (v1276)
      {
        v1277 = operator new();
        *(_QWORD *)(v1277 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v1277 + 24) = "VectorKitLabels";
        *(_OWORD *)(v1277 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v1277 = &off_1E42B5668;
        *(_QWORD *)(v1277 + 8) = "VectorKitLabels";
        *(_OWORD *)(v1277 + 72) = 0u;
        *(_OWORD *)(v1277 + 88) = 0u;
        *(_OWORD *)(v1277 + 104) = 0u;
        *(_OWORD *)(v1277 + 120) = 0u;
        *(_OWORD *)(v1277 + 136) = 0u;
        *(_OWORD *)(v1277 + 152) = 0u;
        *(_OWORD *)(v1277 + 168) = 0u;
        *(_OWORD *)(v1277 + 184) = 0u;
        *(_OWORD *)(v1277 + 200) = 0u;
        *(_OWORD *)(v1277 + 216) = 0u;
        *(_OWORD *)(v1277 + 232) = 0u;
        *(_QWORD *)(v1277 + 248) = 0;
        *(_OWORD *)(v1277 + 56) = 0u;
        v1278 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1277 + 56), 0);
        if ((_DWORD)v1278)
          geo::read_write_lock::logFailure(v1278, (uint64_t)"initialization", v1279);
        v1280 = malloc_create_zone(0, 0);
        *(_QWORD *)(v1277 + 48) = v1280;
        malloc_set_zone_name(v1280, "VectorKitLabels");
        *(_QWORD *)(v1277 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v1277;
        v1156 = v1305;
      }
    }
    v1302 = mdm::Allocator::instance(void)::alloc;
    v1314 = v1157;
    v1190 = 0;
    if (v1157 != v1156)
    {
      v1191 = 0;
      v1192 = 0;
      v1193 = v1157;
      v1194 = v1330;
      v1334 = v1092;
      while (1)
      {
        v1198 = *(char **)(*(_QWORD *)&v1193->_type + 40);
        v1197 = *(char **)(*(_QWORD *)&v1193->_type + 48);
        v1199 = v1197 - v1198;
        if (v1197 - v1198 < 1)
        {
          v1195 = v1191;
          v1196 = v1192;
          v1092 = v1334;
        }
        else
        {
          v1200 = v1199 >> 3;
          v1201 = v1191 - v1192;
          v1202 = &v1192[(v1191 - v1192) & 0xFFFFFFFFFFFFFFF8];
          if (v1199 >> 3 > (v1190 - (uint64_t)v1191) >> 3)
          {
            v1203 = v1201 >> 3;
            v1204 = (v1201 >> 3) + v1200;
            if (v1204 >> 61)
              abort();
            v1205 = v1190 - (_QWORD)v1192;
            if ((v1190 - (uint64_t)v1192) >> 2 > v1204)
              v1204 = (v1190 - (uint64_t)v1192) >> 2;
            if (v1205 >= 0x7FFFFFFFFFFFFFF8)
              v1204 = 0x1FFFFFFFFFFFFFFFLL;
            v1308 = v1204;
            if (v1204)
            {
              v1294 = v1193;
              v1206 = v1197 - v1198;
              v1207 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v1302 + 16))(v1302, 8 * v1204, 4);
              v1205 = v1190 - (_QWORD)v1192;
              v1203 = v1201 >> 3;
              v1199 = v1206;
              v1193 = v1294;
            }
            else
            {
              v1207 = 0;
            }
            v1196 = (char *)(v1207 + 8 * v1203);
            v1213 = 8 * v1200;
            v1195 = &v1196[8 * v1200];
            v1214 = v1213;
            v1215 = v1196;
            do
            {
              if (v1215)
                *(_QWORD *)v1215 = *(_QWORD *)v1198;
              v1215 += 8;
              v1198 += 8;
              v1214 -= 8;
            }
            while (v1214);
            if ((unint64_t)v1201 < 8)
            {
              v1092 = v1334;
              goto LABEL_1958;
            }
            v1216 = (v1201 & 0xFFFFFFFFFFFFFFF8) - 8;
            v1092 = v1334;
            if (v1216 < 0x68)
            {
              v1217 = &v1192[(v1191 - v1192) & 0xFFFFFFFFFFFFFFF8];
              goto LABEL_1957;
            }
            v1217 = &v1192[(v1191 - v1192) & 0xFFFFFFFFFFFFFFF8];
            if ((unint64_t)&v1192[-v1207] < 0x20)
              goto LABEL_2060;
            v1218 = (v1216 >> 3) + 1;
            v1217 = &v1202[-8 * (v1218 & 0x3FFFFFFFFFFFFFFCLL)];
            v1219 = (__int128 *)&v1192[8 * v1203 - 16];
            v1220 = (_OWORD *)(v1207 + 8 * v1203 - 16);
            v1221 = v1218 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1222 = *v1219;
              *(v1220 - 1) = *(v1219 - 1);
              *v1220 = v1222;
              v1219 -= 2;
              v1220 -= 2;
              v1221 -= 4;
            }
            while (v1221);
            v1196 -= 8 * (v1218 & 0x3FFFFFFFFFFFFFFCLL);
            if (v1218 != (v1218 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_2060:
              do
              {
LABEL_1957:
                v1223 = *((_QWORD *)v1217 - 1);
                v1217 -= 8;
                *((_QWORD *)v1196 - 1) = v1223;
                v1196 -= 8;
              }
              while (v1217 != v1192);
            }
LABEL_1958:
            v1190 = v1207 + 8 * v1308;
            if (v1191 == v1202)
            {
LABEL_1965:
              if (v1192)
                goto LABEL_1966;
            }
            else
            {
              v1224 = &v1192[v1201 & 0xFFFFFFFFFFFFFFF8];
              v1225 = v1191 - v1224 - 8;
              if (v1225 < 0x68)
                goto LABEL_2061;
              if ((v1201 & 0xFFFFFFFFFFFFFFF8) + v1207 + v1199 - (unint64_t)v1224 < 0x20)
                goto LABEL_2061;
              v1226 = (v1225 >> 3) + 1;
              v1227 = 8 * (v1226 & 0x3FFFFFFFFFFFFFFCLL);
              v1202 += v1227;
              v1228 = (_OWORD *)(v1207 + v1213 + 8 * v1203 + 16);
              v1229 = (__int128 *)&v1192[8 * v1203 + 16];
              v1230 = v1226 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1231 = *v1229;
                *(v1228 - 1) = *(v1229 - 1);
                *v1228 = v1231;
                v1228 += 2;
                v1229 += 2;
                v1230 -= 4;
              }
              while (v1230);
              v1195 += v1227;
              if (v1226 != (v1226 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_2061:
                do
                {
                  v1232 = *(_QWORD *)v1202;
                  v1202 += 8;
                  *(_QWORD *)v1195 = v1232;
                  v1195 += 8;
                }
                while (v1202 != v1191);
                goto LABEL_1965;
              }
LABEL_1966:
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v1302 + 40))(v1302, v1192, v1205);
            }
            v1194 = v1330;
            v1156 = v1305;
            goto LABEL_1927;
          }
          v1208 = v1190;
          v1209 = (v1191 - v1202) >> 3;
          if (v1209 >= v1200)
          {
            v1210 = &v1198[8 * v1200];
            v1212 = v1191;
LABEL_1970:
            v1233 = 8 * v1200;
            v1234 = &v1212[-8 * v1200];
            v1195 = v1212;
            while (v1234 < v1191)
            {
              if (v1195)
                *(_QWORD *)v1195 = *(_QWORD *)v1234;
              v1234 += 8;
              v1195 += 8;
            }
            v1235 = &v1202[v1233];
            if (v1212 != v1235)
              memmove(&v1212[-8 * ((v1212 - v1235) >> 3)], &v1192[(v1191 - v1192) & 0xFFFFFFFFFFFFFFF8], v1212 - v1235);
            if (v1210 != v1198)
              memmove(&v1192[(v1191 - v1192) & 0xFFFFFFFFFFFFFFF8], v1198, v1210 - v1198);
            v1196 = v1192;
            v1194 = v1330;
            v1092 = v1334;
            v1156 = v1305;
            v1190 = v1208;
            goto LABEL_1927;
          }
          v1210 = &v1198[8 * v1209];
          if (v1210 == v1197)
          {
            v1212 = v1191;
          }
          else
          {
            v1211 = &v1198[8 * v1209];
            v1212 = v1191;
            do
            {
              if (v1212)
                *(_QWORD *)v1212 = *(_QWORD *)v1211;
              v1211 += 8;
              v1212 += 8;
            }
            while (v1211 != v1197);
          }
          if (v1191 - v1202 >= 1)
            goto LABEL_1970;
          v1195 = v1212;
          v1196 = v1192;
          v1194 = v1330;
          v1092 = v1334;
          v1190 = v1208;
        }
LABEL_1927:
        v1193 = (QuadTile *)((char *)v1193 + 8);
        v1191 = v1195;
        v1192 = v1196;
        if (v1193 == v1156)
          goto LABEL_1982;
      }
    }
    v1195 = 0;
    v1196 = 0;
    v1194 = v1330;
LABEL_1982:
    v1298 = v1190;
    v1236 = *(uint64_t **)(*(_QWORD *)v1194 + 32);
    v1237 = (v1091 - (char *)v1092) >> 4;
    v1238 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
    if (v1237 <= v1238)
    {
      v1239 = v1335;
      if (v1237 < v1238)
        *(_QWORD *)&buf[8] = *(_QWORD *)buf + 8 * v1237;
    }
    else
    {
      std::vector<double>::__append((uint64_t)buf, v1237 - v1238);
      v1239 = v1335;
    }
    if (v1091 != (char *)v1092)
    {
      v1240 = *(_QWORD *)buf;
      if (v1237 <= 1)
        v1241 = 1;
      else
        v1241 = (v1091 - (char *)v1092) >> 4;
      if (v1196 == v1195)
      {
        memset_pattern16(*(void **)buf, &unk_19FFB63B0, 8 * v1241);
      }
      else
      {
        v1242 = 0;
        do
        {
          v1243 = (double *)((char *)v1092 + 16 * v1242);
          v1244 = v1194[10];
          v1245 = 1.79769313e308;
          v1246 = v1196;
          do
          {
            v1247 = *((unsigned int *)v1246 + 1);
            if (v1247 >= 2)
            {
              v1248 = *(_DWORD *)v1246;
              v1249 = *v1236;
              v1250 = v1247 - 1;
              v1251 = *v1243;
              v1252 = v1243[1];
              do
              {
                v1253 = v1248 + 1;
                v1254 = (double *)(v1249 + 16 * *(int *)(*(_QWORD *)&v1244 + 4 * v1248));
                v1255 = (double *)(v1249 + 16 * *(int *)(*(_QWORD *)&v1244 + 4 * v1253));
                v1257 = *v1254;
                v1256 = v1254[1];
                v1258 = *v1255 - *v1254;
                v1259 = v1255[1] - v1256;
                v1260 = v1258 * v1258 + v1259 * v1259;
                v1261 = 0.0;
                if (v1260 > 1.0e-15)
                  v1261 = fmin(fmax(((v1251 - v1257) * v1258 + (v1252 - v1256) * v1259) / v1260, 0.0), 1.0);
                v1245 = fmin((v1251 - (v1257 + v1261 * v1258)) * (v1251 - (v1257 + v1261 * v1258))+ (v1252 - (v1256 + v1261 * v1259)) * (v1252 - (v1256 + v1261 * v1259)), v1245);
                v1248 = v1253;
                --v1250;
              }
              while (v1250);
            }
            v1246 += 8;
          }
          while (v1246 != v1195);
          *(double *)(v1240 + 8 * v1242++) = v1245;
        }
        while (v1242 != v1241);
      }
    }
    if (v1196)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v1302 + 40))(v1302, v1196, v1298 - (_QWORD)v1196);
    if (v1314)
      operator delete(v1314);
    v1262 = *(double **)buf;
    v1093 = v1326;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      v1263 = 0;
      v1264 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if (v1264 <= 1)
        v1264 = 1;
      do
      {
        v1266 = v1262[v1263];
        v1267 = 1.79769313e308;
        if (v1266 != 1.79769313e308)
          v1267 = *((double *)v1239 + 14) * v1266;
        v1268 = *(double **)(v1284 + 1208);
        v1269 = *(char **)(v1284 + 1216);
        if (v1268 == (double *)v1269)
        {
LABEL_2009:
          v1265 = 0;
        }
        else
        {
          while (v1268[1] < v1267)
          {
            v1268 += 2;
            if (v1268 == (double *)v1269)
              goto LABEL_2009;
          }
          v1265 = *(_BYTE *)v1268;
        }
        v1288[v1263++] = v1265;
      }
      while (v1263 != v1264);
    }
    v1270 = 0;
    if ((unint64_t)v1286 <= 1)
      v1271 = 1;
    else
      v1271 = (uint64_t)v1286;
    do
    {
      v1272 = *((_QWORD *)&v1326->_type + v1270);
      if (*(_BYTE *)(v1272 + 1279))
      {
        v1273 = (char)v1288[v1270];
        *(_BYTE *)(v1272 + 1280) = v1321;
        *(_BYTE *)(v1272 + 1281) = v1328;
        *(_BYTE *)(v1272 + 1282) = v1310;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v1272 + 8) + 520))(*(_QWORD *)(v1272 + 8), v1273))
        {
          md::LabelFeatureStyler::restyleFeature(*((md::LabelFeatureStyler **)v1290 + 37), *(md::LabelFeature **)(*((_QWORD *)&v1326->_type + v1270) + 8));
        }
      }
      ++v1270;
    }
    while (v1271 != v1270);
    operator delete(v1288);
    if (v1262)
      operator delete(v1262);
  }
  if (v1092)
    operator delete(v1092);
  if (v1093)
    operator delete(v1093);
LABEL_2031:
  *((_WORD *)v1335 + 61) = 0;
  *((_BYTE *)v1335 + 124) = 0;
  *((_BYTE *)v1335 + 128) = 0;
  return (_BYTE *)std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)&v1340, v1341[0]);
}

void sub_19F1B1978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,_QWORD *a54)
{
  std::__shared_weak_count *v54;
  void *v56;

  std::__shared_weak_count::~__shared_weak_count(v54);
  operator delete(v56);
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)&a53, a54);
  _Unwind_Resume(a1);
}

void md::LineLabelPlacer::placementsForRect(char **a1, uint64_t a2, double *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  double *v6;
  uint64_t v7;
  char *v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  unint64_t v13;
  char *v14;
  md::LabelPoint *v15;
  double *v16;
  double v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD **)(a2 + 32);
  v5 = (_QWORD *)(a2 + 40);
  if (v4 != (_QWORD *)(a2 + 40))
  {
    v6 = a3;
    v7 = a2;
    v9 = 0;
    v10 = 0;
    v11 = (char *)(1 << a4);
    v48 = 1 << a4;
    while (1)
    {
      v12 = (_DWORD *)v4[5];
      if ((v11 & v12[4]) != 0)
        break;
LABEL_46:
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v34 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v34);
      }
      v4 = v33;
      if (v33 == v5)
        return;
    }
    if (*(_BYTE *)(*(_QWORD *)v7 + 290))
    {
      v13 = (unint64_t)a1[2];
      if ((unint64_t)v9 < v13)
      {
LABEL_7:
        *(_DWORD *)v9 = *((_DWORD *)v4 + 8);
        v14 = v9 + 4;
LABEL_45:
        a1[1] = v14;
        v9 = v14;
        goto LABEL_46;
      }
      v26 = (v9 - v10) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        abort();
      v28 = v13 - (_QWORD)v10;
      if (v28 >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v27;
      if (v24)
      {
        if (v24 >> 62)
LABEL_80:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(4 * v24);
      }
      else
      {
        v25 = 0;
      }
      v11 = &v25[4 * v26];
      *(_DWORD *)v11 = *((_DWORD *)v4 + 8);
      v14 = v11 + 4;
      if (v9 != v10)
      {
        v29 = v9 - 4 - v10;
        if (v29 >= 0xBC)
        {
          if (&v25[v9 - v10 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v9 - v10 - 4])
          {
            v30 = v9;
          }
          else if (&v9[-(v29 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
          {
            v30 = v9;
          }
          else if ((unint64_t)(v10 - v25) >= 0x20)
          {
            v35 = (v29 >> 2) + 1;
            v30 = &v9[-4 * (v35 & 0x7FFFFFFFFFFFFFF8)];
            v36 = &v25[4 * v26 - 16];
            v37 = v9 - 16;
            v38 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 32;
              v38 -= 8;
            }
            while (v38);
            v11 -= 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_42;
          }
          else
          {
            v30 = v9;
          }
        }
        else
        {
          v30 = v9;
        }
        do
        {
          v31 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v11 - 1) = v31;
          v11 -= 4;
        }
        while (v30 != v10);
      }
    }
    else
    {
      v15 = (md::LabelPoint *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 56))(v12);
      v16 = (double *)md::LabelPoint::mercatorPoint(v15);
      if (*v16 < *v6 || *v16 > v6[2])
        goto LABEL_46;
      v18 = v16[1];
      if (v18 < v6[1] || v18 > v6[3])
        goto LABEL_46;
      v20 = (unint64_t)a1[2];
      if ((unint64_t)v9 < v20)
        goto LABEL_7;
      v21 = (v9 - v10) >> 2;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62)
        abort();
      v23 = v20 - (_QWORD)v10;
      if (v23 >> 1 > v22)
        v22 = v23 >> 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 62)
          goto LABEL_80;
        v25 = operator new(4 * v24);
      }
      else
      {
        v25 = 0;
      }
      v11 = &v25[4 * v21];
      *(_DWORD *)v11 = *((_DWORD *)v4 + 8);
      v14 = v11 + 4;
      if (v9 != v10)
      {
        v40 = v9 - 4 - v10;
        if (v40 >= 0xBC)
        {
          if (&v25[v9 - v10 - 4 - (v40 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v9 - v10 - 4])
          {
            v41 = v9;
          }
          else if (&v9[-(v40 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
          {
            v41 = v9;
          }
          else if ((unint64_t)(v10 - v25) >= 0x20)
          {
            v43 = (v40 >> 2) + 1;
            v41 = &v9[-4 * (v43 & 0x7FFFFFFFFFFFFFF8)];
            v44 = &v25[4 * v21 - 16];
            v45 = v9 - 16;
            v46 = v43 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            v11 -= 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
            if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_42;
          }
          else
          {
            v41 = v9;
          }
        }
        else
        {
          v41 = v9;
        }
        do
        {
          v42 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v11 - 1) = v42;
          v11 -= 4;
        }
        while (v41 != v10);
      }
    }
LABEL_42:
    *a1 = v11;
    a1[1] = v14;
    a1[2] = &v25[4 * v24];
    if (v10)
      operator delete(v10);
    v10 = v11;
    v7 = a2;
    v6 = a3;
    LODWORD(v11) = v48;
    goto LABEL_45;
  }
}

void sub_19F1B22F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void md::LineLabelFeature::updatePositions(md::LineLabelFeature *this, md::LabelManager *a2, int a3, md::LabelMapTile *a4)
{
  unsigned __int8 *v8;
  _DWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45[3];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 10))
  {
    v9 = (_DWORD *)((char *)this + 192);
    v8 = (unsigned __int8 *)*((_QWORD *)this + 24);
    v10 = atomic_load(v8 + 80);
    if ((v10 & 1) != 0)
      md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v8);
    v11 = *((_QWORD *)a2 + 54);
    v12 = (*(uint64_t (**)(md::LineLabelFeature *, _QWORD))(*(_QWORD *)this + 472))(this, 0);
    if (v12)
    {
      if (*(char *)(v12 + 23) < 0)
        v13 = *(_QWORD *)(v12 + 8);
      else
        v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = v13 != 0;
    }
    else
    {
      v14 = 0;
    }
    if (*(float *)(v11 + 424) > 0.0 && a4 && *(_BYTE *)(v11 + 27))
    {
      v42 = xmmword_19FFB34C0;
      v43 = xmmword_19FFB34C0;
      v44 = xmmword_19FFB34C0;
      v45[0] = xmmword_19FFB34C0;
      v15 = (_QWORD *)*((_QWORD *)this + 24);
      v16 = v15[33];
      v18 = v15[34];
      v19 = v15[35];
      v35 = v15[32];
      v17 = v35;
      v36 = v16;
      v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(_QWORD *)a4 + 16))(a4, &v35);
      v38 = v20;
      v39 = v21;
      v40[0] = 0;
      v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)&v42, 1.0);
      v35 = v17;
      v36 = v19;
      v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(_QWORD *)a4 + 16))(a4, &v35);
      v38 = v22;
      v39 = v23;
      v40[0] = 0;
      v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)&v43, 1.0);
      v35 = v18;
      v36 = v19;
      v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(_QWORD *)a4 + 16))(a4, &v35);
      v38 = v24;
      v39 = v25;
      v40[0] = 0;
      v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)&v44, 1.0);
      v35 = v18;
      v36 = v16;
      v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(_QWORD *)a4 + 16))(a4, &v35);
      v38 = v26;
      v39 = v27;
      v40[0] = 0;
      v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)v45, 1.0);
      v28 = fmaxf(fmaxf(fmaxf(*(float *)&v42, *(float *)&v43), *(float *)&v44), *(float *)v45);
      v29 = (int)fminf(*(float *)v45, fminf(*(float *)&v44, fminf(*(float *)&v43, *(float *)&v42)));
      v30 = *((unsigned __int8 *)this + 136);
      if (v29 <= v30)
        v29 = *((unsigned __int8 *)this + 136);
      if (v29 >= a3)
        v31 = a3;
      else
        v31 = v29;
      v32 = (int)v28;
      if ((int)v28 <= v30)
        v32 = *((unsigned __int8 *)this + 136);
      if (v32 < a3)
        LOBYTE(a3) = v32;
      while (v31 <= a3)
      {
        v33 = md::LineLabelFeature::roadMetricsForZ(this, v31, (const md::LabelLayoutContext *)v11);
        if (v33)
        {
          md::LineLabelPlacer::updatePlacements(v9, v31, (uint64_t)v33, (uint64_t)a2, *((unsigned __int8 *)this + 433), v14);
          *((_BYTE *)this + 433) = 0;
        }
        ++v31;
      }
    }
    else
    {
      v34 = md::LineLabelFeature::roadMetricsForZ(this, a3, (const md::LabelLayoutContext *)v11);
      if (v34)
      {
        md::LineLabelPlacer::updatePlacements(v9, a3, (uint64_t)v34, (uint64_t)a2, *((unsigned __int8 *)this + 433), v14);
        *((_BYTE *)this + 433) = 0;
      }
    }
  }
}

BOOL md::LineLabelFeature::isOnMeshRoad(md::LineLabelFeature *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 147);
  return v1 == 2 || v1 == 5;
}

void md::LineLabelPlacer::updatePlacements(_DWORD *a1, uint64_t __e, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  int v29;
  int v30;
  unsigned int v31;
  float v32;
  int v33;
  int v34;
  uint64_t v35;
  double v36;

  v12 = *(_QWORD *)a1;
  v13 = *(_DWORD *)(*(_QWORD *)a1 + 252);
  v14 = a1[4];
  if (*(_BYTE *)(*(_QWORD *)a1 + 288))
    goto LABEL_2;
  if (__e >= 0x17)
    v20 = 23;
  else
    v20 = __e;
  v21 = atomic_load((unsigned __int8 *)(v12 + 224 + v20));
  if (v21 == 254)
  {
    if (*(_BYTE *)(v12 + 289))
      v22 = 24;
    else
      v22 = 5;
    v23 = *(unsigned __int8 **)(v12 + 128);
    v24 = *(_QWORD *)(v12 + 136) - (_QWORD)v23;
    if (v24)
    {
      v25 = 0;
      v26 = v24 / 112;
      if (v26 <= 1)
        v27 = 1;
      else
        v27 = v26;
      v21 = -1;
      v28 = 1000.0;
      while (1)
      {
        v29 = *v23;
        v23 += 112;
        v30 = v20 - v29;
        if ((_DWORD)v20 == v29)
          break;
        if (v30 >= 0)
          v31 = v30;
        else
          v31 = -v30;
        if (v31 <= v22)
        {
          v32 = (float)v30;
          if (v30 < 0)
            v32 = (float)v30 * -0.8;
          if (v32 < v28)
            v21 = v25;
          v28 = fminf(v32, v28);
        }
        if (v27 == ++v25)
          goto LABEL_42;
      }
      v21 = v25;
    }
    else
    {
      v21 = -1;
    }
LABEL_42:
    atomic_store(v21, (unsigned __int8 *)(v12 + 224 + v20));
    if ((v21 & 0x80000000) != 0)
      goto LABEL_2;
  }
  else
  {
    v21 = (char)v21;
    if ((char)v21 < 0)
      goto LABEL_2;
  }
  v35 = *(_QWORD *)(v12 + 128);
  if (!v35)
  {
LABEL_2:
    v15 = 0;
    goto LABEL_3;
  }
  v36 = *(double *)(v35 + 112 * v21 + 8);
  v15 = v36 > 12.0 / ldexpf(1.0, __e);
LABEL_3:
  v16 = a1[5];
  v17 = 1 << __e;
  if (v13 != v14)
    goto LABEL_34;
  v18 = a1[17];
  if ((v17 & v18) != 0)
    v19 = a5;
  else
    v19 = 1;
  if (((v19 | v15) & 1) != 0 || (v17 & v16) != 0)
  {
    if (!a5)
    {
LABEL_35:
      v33 = v16 & ~(_DWORD)v17;
      v34 = v16 | v17;
      if (!v15)
        v34 = v33;
      a1[4] = *(_DWORD *)(*(_QWORD *)a1 + 252);
      a1[5] = v34;
      a1[17] = v18 | v17;
      md::LineLabelPlacer::doUpdatePositions((uint64_t)a1, __e, a3, a4, v15, a6);
      return;
    }
LABEL_34:
    LODWORD(v18) = 0;
    goto LABEL_35;
  }
}

uint64_t md::UniLineLabelFeature::hasAnnotatedShieldText(md::UniLineLabelFeature *this)
{
  uint64_t result;
  uint64_t v2;

  if (*((_BYTE *)this + 449) == 1)
    return 0;
  result = (*(uint64_t (**)(md::UniLineLabelFeature *, _QWORD))(*(_QWORD *)this + 472))(this, 0);
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      v2 = *(_QWORD *)(result + 8);
    else
      v2 = *(unsigned __int8 *)(result + 23);
    return v2 != 0;
  }
  return result;
}

uint64_t md::LineLabelFeature::enableMultipleLabelsPerLine(md::LineLabelFeature *this)
{
  return 1;
}

void md::LineLabelPlacer::doUpdatePositions(uint64_t a1, uint64_t __e, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t *v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  md::LabelPoint *v15;
  float64x2_t *v16;
  uint64_t v17;
  __n128 v24;
  char v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  float v48;
  uint64_t v49;
  unsigned int v50;
  double v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  uint64_t v54;
  _QWORD **v55;
  int v56;
  double v57;
  uint64_t v58;
  uint64_t i;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  double v63;
  int *v64;
  int *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  double v75;
  double v76;
  int v77;
  BOOL v78;
  double v79;
  _BOOL4 v81;
  uint64_t v82;
  int *v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  _BOOL4 v87;
  int v88;
  int v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  _BOOL4 v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  unsigned int v109;
  double v110;
  double v111;
  float v112;
  double *v113;
  double v114;
  double *v115;
  double v116;
  double v117;
  double *v118;
  double v119;
  double *v120;
  double v121;
  double v122;
  double v123;
  BOOL v124;
  double v125;
  double v126;
  double v127;
  double v128;
  int v129;
  BOOL v130;
  double *v131;
  double *v132;
  double *v133;
  double v134;
  double *v135;
  float v136;
  double v137;
  double v138;
  double v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  __n128 v143;
  int64x2_t v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned __int8 v156;
  __n128 v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __n128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  int v174;
  int v175;
  __n128 v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  int v189;
  uint64_t *v190;
  char *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t *v198;
  int v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  int64_t v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  _BYTE *v214;
  uint64_t *v215;
  char *v216;
  char *v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  _OWORD *v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  unint64_t *v227;
  size_t v228;
  uint64_t v229;
  char *v230;
  unint64_t *v231;
  int8x16_t *v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  _BOOL4 v242;
  uint64_t v243;
  double v244;
  int8x16_t *v245;
  double v246;
  int v247;
  unint64_t *v249;
  char *v250;
  int v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  double v256;
  double v257;
  double v258;
  unint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  long double v265;
  long double v266;
  double v267;
  long double v268;
  double v269;
  __double2 v270;
  double v271;
  __double2 v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  long double v276;
  long double v277;
  double v278;
  long double v279;
  double v280;
  __double2 v281;
  double v282;
  __double2 v283;
  double v284;
  double *v285;
  double *v286;
  double v287;
  double v288;
  unint64_t v289;
  char *v290;
  unint64_t v291;
  char *v292;
  md::LabelPoint *v293;
  double v294;
  md::LabelPoint *v295;
  char *v296;
  double v297;
  double v298;
  double v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  md::LabelPoint *v304;
  md::LabelPoint *v305;
  long double v306;
  long double v307;
  double v308;
  long double v309;
  double v310;
  __double2 v311;
  double v312;
  __double2 v313;
  char *v314;
  unint64_t v315;
  long double v316;
  long double v317;
  double v318;
  long double v319;
  double v320;
  __double2 v321;
  double v322;
  __double2 v323;
  double v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  long double v328;
  long double v329;
  double v330;
  long double v331;
  double v332;
  __double2 v333;
  double v334;
  __double2 v335;
  double v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  double v340;
  double v341;
  double v342;
  unint64_t v343;
  char *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  long double v349;
  long double v350;
  double v351;
  long double v352;
  double v353;
  __double2 v354;
  double v355;
  __double2 v356;
  double v357;
  uint64_t v358;
  uint64_t v359;
  long double v360;
  long double v361;
  double v362;
  long double v363;
  double v364;
  __double2 v365;
  double v366;
  __double2 v367;
  double v368;
  unint64_t v369;
  double v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  long double v374;
  long double v375;
  double v376;
  long double v377;
  double v378;
  __double2 v379;
  double v380;
  __double2 v381;
  long double v382;
  long double v383;
  double v384;
  long double v385;
  double v386;
  __double2 v387;
  double v388;
  __double2 v389;
  double v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  long double v395;
  long double v396;
  long double v397;
  double v398;
  double v399;
  __double2 v400;
  long double v401;
  long double v402;
  long double v403;
  float64x2_t v404;
  float64x2_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  BOOL v409;
  long double v410;
  long double v411;
  long double v412;
  double v413;
  double v414;
  __double2 v415;
  long double v416;
  long double v417;
  long double v418;
  float64x2_t v419;
  float64x2_t v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  BOOL v424;
  unint64_t v425;
  long double v426;
  long double v427;
  long double v428;
  double v429;
  double v430;
  double v431;
  __double2 v432;
  long double v433;
  long double v434;
  double v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  BOOL v439;
  long double v440;
  long double v441;
  long double v442;
  double v443;
  double v444;
  double v445;
  __double2 v446;
  long double v447;
  long double v448;
  double v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  BOOL v453;
  uint64_t *v454;
  uint64_t *v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  char *v464;
  unint64_t v465;
  unsigned __int8 *v466;
  int v467;
  int v468;
  const md::LabelPoint *v469;
  double v470;
  double v471;
  double v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  _BYTE *v476;
  unsigned __int8 **v477;
  char *v478;
  unint64_t v479;
  char *v480;
  unsigned __int8 *v481;
  uint64_t v482;
  _OWORD *v483;
  char *v484;
  uint64_t v485;
  __int128 v486;
  char *v487;
  char *v488;
  uint64_t v489;
  uint64_t v490;
  geo::read_write_lock *v491;
  const char *v492;
  malloc_zone_t *zone;
  uint64_t v494;
  geo::read_write_lock *v495;
  const char *v496;
  malloc_zone_t *v497;
  double v499;
  uint64_t v500;
  unint64_t v501;
  size_t v502;
  int8x16_t *v503;
  _QWORD **v504;
  double v505;
  _QWORD **v506;
  float64x2_t v507;
  double *v508;
  float64x2_t v509;
  long double v510;
  long double v511;
  unint64_t *v512;
  int64x2_t v513;
  unint64_t *v514;
  int64x2_t v515;
  int v516;
  uint64_t *v517;
  int8x16_t *v518;
  uint64_t v519;
  char *v520;
  unint64_t *v521;
  double *v522;
  int v523;
  int *v524;
  char *v526;
  double v527;
  char *v528;
  uint64_t v529;
  int v530;
  double v531;
  char *v532;
  char *v533;
  md::LabelPoint *v534;
  md::LabelPoint *v535;
  _BOOL4 v536;
  char *v537;
  unint64_t v538;
  unint64_t v539;
  void *__p;
  void *v541;
  uint64_t v542;
  __n128 *v543;
  __n128 *v544;
  uint64_t v545;
  uint64_t v546;
  int *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  char v551[8];
  std::__shared_weak_count *v552;
  _OWORD v553[11];
  int64x2_t v554;
  int64x2_t v555[2];
  int v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  _DWORD v560[2];
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  _DWORD v564[2];
  uint64_t v565;
  int v566;
  int v567;
  int v568[4];
  _BYTE v569[28];
  int v570;
  __int128 v571;
  __int128 v572;
  uint64_t v573;
  _BYTE v574[7];
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  _BYTE v578[7];
  uint64_t v579;
  int v580;
  int v581;
  double v582;
  _QWORD v583[3];
  _QWORD *v584;
  uint64_t v585;

  v8 = __e;
  v585 = *MEMORY[0x1E0C80C00];
  v10 = *(uint64_t **)(a1 + 32);
  v517 = (uint64_t *)(a1 + 40);
  if (v10 != (uint64_t *)(a1 + 40))
  {
    v11 = *(double *)(a3 + 56);
    v12 = 1 << __e;
    v13 = ~(1 << __e);
    do
    {
      v14 = v10[5];
      if ((v12 & *(_DWORD *)(v14 + 12)) == 0)
        goto LABEL_18;
      if (a5)
      {
        v15 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v10[5]);
        v16 = (float64x2_t *)md::LabelPoint::mercatorPoint(v15);
        v17 = *(_QWORD *)(a4 + 432);
        _Q0 = *v16;
        _D2 = *(_QWORD *)(v17 + 920);
        __asm { FMLA            D3, D2, V0.D[1] }
        v24 = (__n128)vmulq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v17 + 960), *(float64x2_t *)(v17 + 864), v16->f64[0]), *(float64x2_t *)(v17 + 896), *v16, 1), 1.0 / _D3);
        v24.n128_u64[0] = (unint64_t)vcvt_f32_f64((float64x2_t)v24);
        if (v24.n128_f32[0] < *(float *)(v17 + 1104)
          || v24.n128_f32[0] >= *(float *)(v17 + 1112)
          || (v24.n128_u32[0] = v24.n128_u32[1], v24.n128_f32[1] < *(float *)(v17 + 1108))
          || v24.n128_f32[1] >= *(float *)(v17 + 1116))
        {
          v25 = (*(uint64_t (**)(_QWORD, float64x2_t *, __n128))(**(_QWORD **)(*(_QWORD *)(a4 + 168) + 64)
                                                                         + 56))(*(_QWORD *)(*(_QWORD *)(a4 + 168) + 64), v16, v24);
          v14 = v10[5];
          if ((v25 & 1) == 0)
            goto LABEL_15;
        }
        else
        {
          v14 = v10[5];
        }
      }
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v14 + 176))(v14, v8, v11);
      v14 = v10[5];
      if ((v26 & 1) != 0)
      {
        *(_BYTE *)(v14 + 11) = 0;
        goto LABEL_17;
      }
LABEL_15:
      *(_DWORD *)(v14 + 12) &= v13;
      if (*(_DWORD *)(v14 + 24) < (int)v8)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v14 + 176))(v14, v8, 1.0);
        *(_DWORD *)(v14 + 24) = v8;
      }
LABEL_17:
      if (!*(_DWORD *)(v10[5] + 12))
      {
        v29 = (uint64_t *)v10[1];
        v30 = v10;
        if (v29)
        {
          do
          {
            v28 = v29;
            v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v28 = (uint64_t *)v30[2];
            _ZF = *v28 == (_QWORD)v30;
            v30 = v28;
          }
          while (!_ZF);
        }
        if (*(uint64_t **)(a1 + 32) == v10)
          *(_QWORD *)(a1 + 32) = v28;
        --*(_QWORD *)(a1 + 56);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v10);
        v31 = (std::__shared_weak_count *)v10[6];
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v10, 56);
        goto LABEL_4;
      }
LABEL_18:
      v27 = (uint64_t *)v10[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (uint64_t *)v10[2];
          _ZF = *v28 == (_QWORD)v10;
          v10 = v28;
        }
        while (!_ZF);
      }
LABEL_4:
      v10 = v28;
    }
    while (v28 != v517);
  }
  v34 = *(_QWORD *)a1;
  if (v8 >= 0x17)
    v35 = 23;
  else
    v35 = v8;
  v36 = atomic_load((unsigned __int8 *)(v34 + 224 + v35));
  if (v36 == 254)
  {
    if (*(_BYTE *)(v34 + 289))
      v37 = 24;
    else
      v37 = 5;
    v38 = *(unsigned __int8 **)(v34 + 128);
    v39 = *(_QWORD *)(v34 + 136) - (_QWORD)v38;
    if (v39)
    {
      v40 = 0;
      v41 = v39 / 112;
      if (v41 <= 1)
        v42 = 1;
      else
        v42 = v41;
      v36 = -1;
      v43 = 1000.0;
      while (1)
      {
        v45 = *v38;
        v38 += 112;
        v44 = v45;
        if ((_DWORD)v35 == v45)
          break;
        v46 = v35 - v44;
        if (v46 >= 0)
          v47 = v46;
        else
          v47 = -v46;
        if (v47 <= v37)
        {
          v48 = (float)v46;
          if (v46 < 0)
            v48 = (float)v46 * -0.8;
          if (v48 < v43)
            v36 = v40;
          v43 = fminf(v48, v43);
        }
        if (v42 == ++v40)
          goto LABEL_63;
      }
      v36 = v40;
    }
    else
    {
      v36 = -1;
    }
LABEL_63:
    atomic_store(v36, (unsigned __int8 *)(v34 + 224 + v35));
    v529 = v8;
    if (v36 < 0)
      goto LABEL_343;
  }
  else
  {
    v36 = (char)v36;
    v529 = v8;
    if ((char)v36 < 0)
      goto LABEL_343;
  }
  v49 = *(_QWORD *)(v34 + 128);
  if (v49)
  {
    v523 = a5;
    v536 = *(double *)(a3 + 40) > 0.0 && *(_BYTE *)(a3 + 86) != 0;
    v50 = v36;
    v51 = *(double *)a3;
    v547 = 0;
    v548 = 0;
    v549 = 0;
    {
      v490 = operator new();
      *(_QWORD *)(v490 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v490 + 24) = "VectorKitLabels";
      *(_OWORD *)(v490 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v490 = &off_1E42B5668;
      *(_QWORD *)(v490 + 8) = "VectorKitLabels";
      *(_OWORD *)(v490 + 72) = 0u;
      *(_OWORD *)(v490 + 88) = 0u;
      *(_OWORD *)(v490 + 104) = 0u;
      *(_OWORD *)(v490 + 120) = 0u;
      *(_OWORD *)(v490 + 136) = 0u;
      *(_OWORD *)(v490 + 152) = 0u;
      *(_OWORD *)(v490 + 168) = 0u;
      *(_OWORD *)(v490 + 184) = 0u;
      *(_OWORD *)(v490 + 200) = 0u;
      *(_OWORD *)(v490 + 216) = 0u;
      *(_OWORD *)(v490 + 232) = 0u;
      *(_QWORD *)(v490 + 248) = 0;
      *(_OWORD *)(v490 + 56) = 0u;
      v491 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v490 + 56), 0);
      if ((_DWORD)v491)
        geo::read_write_lock::logFailure(v491, (uint64_t)"initialization", v492);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v490 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v490 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v490;
      v8 = v529;
    }
    v550 = mdm::Allocator::instance(void)::alloc;
    v543 = 0;
    v544 = 0;
    v545 = 0;
    {
      v494 = operator new();
      *(_QWORD *)(v494 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v494 + 24) = "VectorKitLabels";
      *(_OWORD *)(v494 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v494 = &off_1E42B5668;
      *(_QWORD *)(v494 + 8) = "VectorKitLabels";
      *(_OWORD *)(v494 + 72) = 0u;
      *(_OWORD *)(v494 + 88) = 0u;
      *(_OWORD *)(v494 + 104) = 0u;
      *(_OWORD *)(v494 + 120) = 0u;
      *(_OWORD *)(v494 + 136) = 0u;
      *(_OWORD *)(v494 + 152) = 0u;
      *(_OWORD *)(v494 + 168) = 0u;
      *(_OWORD *)(v494 + 184) = 0u;
      *(_OWORD *)(v494 + 200) = 0u;
      *(_OWORD *)(v494 + 216) = 0u;
      *(_OWORD *)(v494 + 232) = 0u;
      *(_QWORD *)(v494 + 248) = 0;
      *(_OWORD *)(v494 + 56) = 0u;
      v495 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v494 + 56), 0);
      if ((_DWORD)v495)
        geo::read_write_lock::logFailure(v495, (uint64_t)"initialization", v496);
      v497 = malloc_create_zone(0, 0);
      *(_QWORD *)(v494 + 48) = v497;
      malloc_set_zone_name(v497, "VectorKitLabels");
      *(_QWORD *)(v494 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v494;
      v8 = v529;
    }
    v546 = mdm::Allocator::instance(void)::alloc;
    v519 = *(unsigned __int8 *)(a1 + 24);
    __p = 0;
    v541 = 0;
    v542 = 0;
    v54 = v49 + 112 * v50;
    v55 = *(_QWORD ***)(v54 + 80);
    v504 = *(_QWORD ***)(v54 + 88);
    v56 = v523;
    if (v55 == v504)
      goto LABEL_330;
    v522 = (double *)(a3 + 24);
    v508 = (double *)(a3 + 32);
    v57 = 2.0;
    v513 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v515 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v527 = 1.0 / v51;
    while (1)
    {
      v58 = (uint64_t)v547;
      for (i = v548; i != v58; i -= 216)
      {
        v60 = *(std::__shared_weak_count **)(i - 200);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      v548 = v58;
      v544 = v543;
      md::LineLabelPlacer::populateBlocks((uint64_t *)a1, v8, *v55, (uint64_t *)&v547, &v543);
      v506 = v55;
      v63 = *((double *)*v55 + 14);
      v541 = __p;
      v65 = v547;
      v64 = (int *)v548;
      v524 = (int *)v548;
      if (v547 != (int *)v548)
        break;
LABEL_72:
      v55 = v506 + 1;
      if (v506 + 1 == v504)
      {
        if (__p)
        {
          v541 = __p;
          operator delete(__p);
        }
LABEL_330:
        if (v543)
        {
          v544 = v543;
          (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v546 + 40))(v546, v543, v545 - (_QWORD)v543);
        }
        v183 = (uint64_t)v547;
        if (v547)
        {
          v184 = v548;
          v185 = (uint64_t)v547;
          if ((int *)v548 != v547)
          {
            do
            {
              v186 = *(std::__shared_weak_count **)(v184 - 200);
              if (v186)
              {
                v187 = (unint64_t *)&v186->__shared_owners_;
                do
                  v188 = __ldaxr(v187);
                while (__stlxr(v188 - 1, v187));
                if (!v188)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v186->__on_zero_shared)(v186, v185);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
              v184 -= 216;
            }
            while (v184 != v183);
            v185 = (uint64_t)v547;
          }
          v548 = v183;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v550 + 40))(v550, v185, v549 - v185);
        }
        goto LABEL_343;
      }
    }
    while (1)
    {
      if (*((double *)v65 + 23) - *((double *)v65 + 22) + fmin(*((double *)v65 + 25), *((double *)v65 + 24)) * v57 < *(double *)(a3 + 64))
        goto LABEL_85;
      if (v56)
      {
        v554 = v515;
        v555[0] = v513;
        v68 = *((_QWORD *)v65 + 1);
        if (!v68 || v65[12] != *(_DWORD *)(v68 + 252) || !*((_QWORD *)v65 + 4) || *((__int16 *)v65 + 21) < 0)
        {
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v65 + 2), *((unsigned __int8 *)v65 + 172), *(double *)v513.i64);
          v68 = *((_QWORD *)v65 + 1);
        }
        v69 = *((_QWORD *)v65 + 2);
        *(_QWORD *)v568 = v68;
        *(_QWORD *)&v568[2] = v69;
        if (v69)
        {
          v70 = (unint64_t *)(v69 + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        *(_OWORD *)v569 = *(_OWORD *)(v65 + 6);
        *(_QWORD *)&v569[16] = *((_QWORD *)v65 + 5);
        *(_DWORD *)&v569[24] = v65[12];
        md::LabelLinePosition::offsetDistance((md::LabelLinePosition *)v568, (double *)v554.i64, *((double *)v65 + 23) - *((double *)v65 + 22));
        v72 = *(std::__shared_weak_count **)&v568[2];
        if (*(_QWORD *)&v568[2])
        {
          v73 = (unint64_t *)(*(_QWORD *)&v568[2] + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v553[0] = v554;
        v553[1] = v555[0];
        if (((*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(*(_QWORD *)(a4 + 168) + 64) + 64))(*(_QWORD *)(*(_QWORD *)(a4 + 168) + 64), v553) & 1) == 0)goto LABEL_85;
      }
      if (*(_BYTE *)(a1 + 24))
        v63 = (v543[*v65].n128_f64[1] + v543[*v65].n128_f64[0]) * 0.5;
      v75 = *((double *)v65 + 22);
      v76 = *((double *)v65 + 23);
      v77 = (int)((v75 - v63) * v527);
      v78 = v75 > v63 || v76 < v63;
      v79 = (v76 - v63) * v527;
      _ZF = v78 && v77 == (int)v79;
      if (_ZF)
        goto LABEL_85;
      v81 = v536 && *(_BYTE *)(a3 + 88) && *(_BYTE *)(a3 + 84) != 0;
      v83 = v65 + 2;
      v82 = *((_QWORD *)v65 + 1);
      if (!v82
        || (v84 = v65[12], v84 != *(_DWORD *)(v82 + 252))
        || (v85 = (uint64_t *)*((_QWORD *)v65 + 4)) == 0
        || *((__int16 *)v65 + 21) < 0)
      {
        md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v65 + 2), *((unsigned __int8 *)v65 + 172), v79);
        v82 = *(_QWORD *)v83;
        if (!*(_QWORD *)v83)
        {
          v87 = 0;
LABEL_132:
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v65 + 2), *((unsigned __int8 *)v65 + 172), v79);
          v82 = *(_QWORD *)v83;
          goto LABEL_133;
        }
        v84 = v65[12];
        if (v84 != *(_DWORD *)(v82 + 252))
          goto LABEL_126;
        v85 = (uint64_t *)*((_QWORD *)v65 + 4);
        if (!v85 || *((__int16 *)v65 + 21) < 0)
          goto LABEL_126;
      }
      v86 = *v85;
      if (v86 && *(unsigned __int8 *)(v86 + 38) != 255)
        v87 = *(_BYTE *)(a3 + 84) != 0;
      else
LABEL_126:
        v87 = 0;
      if (v84 != *(_DWORD *)(v82 + 252) || !*((_QWORD *)v65 + 4) || *((__int16 *)v65 + 21) < 0)
        goto LABEL_132;
LABEL_133:
      v88 = *(unsigned __int8 *)(v82 + 120);
      v89 = v65[12];
      v90 = *(_DWORD *)(v82 + 252);
      if (*(_BYTE *)(v82 + 120) || v89 != v90)
      {
        v93 = 0;
        if (v89 != v90 || !*((_QWORD *)v65 + 4))
          goto LABEL_159;
      }
      else
      {
        v91 = (uint64_t *)*((_QWORD *)v65 + 4);
        if (v91
          && (*((__int16 *)v65 + 21) & 0x80000000) == 0
          && (v92 = *v91) != 0
          && !*(_BYTE *)(v92 + 32)
          && (v98 = *(_QWORD *)(v92 + 16)) != 0
          && *(_BYTE *)(v98 + 150))
        {
          v93 = *(_BYTE *)(a3 + 85) != 0;
          if (!*((_QWORD *)v65 + 4))
            goto LABEL_159;
        }
        else
        {
          v93 = 0;
          if (!*((_QWORD *)v65 + 4))
            goto LABEL_159;
        }
      }
      if ((*((__int16 *)v65 + 21) & 0x80000000) == 0)
      {
        if (v88 == 7)
          goto LABEL_160;
        goto LABEL_145;
      }
LABEL_159:
      md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v65 + 2), *((unsigned __int8 *)v65 + 172), v79);
      v82 = *(_QWORD *)v83;
      v88 = *(unsigned __int8 *)(*(_QWORD *)v83 + 120);
      if (v88 == 7)
      {
LABEL_160:
        if (v65[12] != *(_DWORD *)(v82 + 252))
          goto LABEL_171;
        v99 = (uint64_t *)*((_QWORD *)v65 + 4);
        if (!v99)
          goto LABEL_171;
        if (*((__int16 *)v65 + 21) < 0)
          goto LABEL_171;
        v100 = *v99;
        if (!v100)
          goto LABEL_171;
        if (*(_BYTE *)(v100 + 32) != 1)
          goto LABEL_171;
        v101 = *(uint64_t **)(v100 + 24);
        if (!v101)
          goto LABEL_171;
        v102 = *v101;
        if (!v102)
          goto LABEL_171;
        v97 = *(unsigned __int8 *)(v102 + 304);
        goto LABEL_168;
      }
LABEL_145:
      if (v88)
        goto LABEL_171;
      if (v65[12] != *(_DWORD *)(v82 + 252))
        goto LABEL_171;
      v94 = (uint64_t *)*((_QWORD *)v65 + 4);
      if (!v94)
        goto LABEL_171;
      if (*((__int16 *)v65 + 21) < 0)
        goto LABEL_171;
      v95 = *v94;
      if (!v95)
        goto LABEL_171;
      if (*(_BYTE *)(v95 + 32))
        goto LABEL_171;
      v96 = *(_QWORD *)(v95 + 16);
      if (!v96)
        goto LABEL_171;
      v97 = *(unsigned __int8 *)(v96 + 153);
      if (!*(_BYTE *)(v96 + 153))
        goto LABEL_172;
      if (v97 != 1 && v97 != 2)
      {
LABEL_171:
        v97 = 4;
LABEL_172:
        v103 = *(unsigned __int8 *)(a1 + 72);
        v104 = v103 == 7;
        goto LABEL_173;
      }
LABEL_168:
      v103 = *(unsigned __int8 *)(a1 + 72);
      v104 = v103 == 7;
      if (v103 != 7 && v97 - 3 > 0xFFFFFFFD)
      {
        v105 = 0;
        v106 = 4 * *(unsigned __int8 *)(a3 + 87);
        goto LABEL_179;
      }
LABEL_173:
      v105 = 0;
      if (v104 && v97 <= 1)
      {
        v105 = *(_BYTE *)(a3 + 87) != 0;
        if (*(_BYTE *)(a3 + 87))
          v106 = 5;
        else
          v106 = 0;
      }
      else
      {
        v106 = 0;
      }
LABEL_179:
      if (v81)
        v107 = 2;
      else
        v107 = 3;
      if (v536 || v81)
      {
        v108 = (double *)(a3 + 8);
      }
      else
      {
        v108 = (double *)(a3 + 8);
        if (v87 && v93)
        {
          v107 = 7;
        }
        else
        {
          if (v87 && v105)
            v109 = 8;
          else
            v109 = 1;
          if (v87)
            v107 = v109;
          else
            v107 = 6;
          if (!v87 && !v93)
          {
            v107 = v106;
            if (!(_BYTE)v106)
            {
              v56 = v523;
              v64 = v524;
              goto LABEL_85;
            }
          }
        }
      }
      v583[0] = &off_1E4279A38;
      v583[1] = &__p;
      v583[2] = v519;
      v584 = v583;
      v110 = *(double *)(a3 + 48);
      v111 = 0.0;
      v112 = *(float *)(a3 + 76);
      v113 = v108;
      v114 = v110;
      switch((char)v107)
      {
        case 1:
          v115 = (double *)(a3 + 24);
          goto LABEL_200;
        case 2:
          v116 = *(double *)(a3 + 24);
          v117 = *(double *)(a3 + 40);
          goto LABEL_202;
        case 3:
          v114 = *(double *)(a3 + 40);
          v113 = (double *)(a3 + 16);
          goto LABEL_204;
        case 4:
        case 5:
          goto LABEL_204;
        case 6:
          v115 = (double *)(a3 + 32);
LABEL_200:
          v114 = *v115;
          goto LABEL_203;
        case 7:
          v116 = *v522;
          v117 = *v508;
LABEL_202:
          v114 = v117 + v116;
          goto LABEL_203;
        case 8:
          v114 = *v522 + v110;
LABEL_203:
          v113 = (double *)a3;
LABEL_204:
          v111 = *v113;
          break;
        default:
          break;
      }
      v118 = v108;
      v119 = *(double *)(a3 + 48);
      switch((int)v108)
      {
        case 0:
          v120 = (double *)(a3 + 24);
          goto LABEL_211;
        case 1:
          v121 = *(double *)(a3 + 24);
          v122 = *(double *)(a3 + 40);
          goto LABEL_213;
        case 2:
          v119 = *(double *)(a3 + 40);
          v118 = (double *)(a3 + 16);
          goto LABEL_215;
        case 3:
        case 4:
          goto LABEL_215;
        case 5:
          v120 = (double *)(a3 + 32);
LABEL_211:
          v119 = *v120;
          goto LABEL_214;
        case 6:
          v121 = *v522;
          v122 = *v508;
LABEL_213:
          v119 = v122 + v121;
          goto LABEL_214;
        case 7:
          v119 = *v522 + v110;
LABEL_214:
          v118 = (double *)a3;
LABEL_215:
          v119 = *v118 + v119;
          break;
        default:
          break;
      }
      v123 = v112;
      v78 = v112 < 0.0;
      v124 = v112 >= 0.0;
      v125 = 80.0;
      if (!v78)
        v125 = v123;
      if (v8 < 0xE)
        v124 = 1;
      v126 = v125;
      if (!v124)
      {
        v126 = 10.0;
        if (*(_BYTE *)(*(_QWORD *)a1 + 122) == 2)
          v126 = 8.0;
      }
      v127 = *((double *)v65 + 23) - *((double *)v65 + 22);
      v128 = v127 + fmin(*((double *)v65 + 25), *((double *)v65 + 24)) * 2.0;
      v129 = v106 != 0;
      v130 = v114 > v128;
      if (!(_BYTE)v106 || v107 == v106 || v114 <= v128)
      {
        if (v107 != 7 || v114 <= v128)
          goto LABEL_247;
        v106 = 6;
        v132 = (double *)(a3 + 32);
LABEL_232:
        v114 = *v132;
        v131 = (double *)a3;
        goto LABEL_233;
      }
      if (v106 - 4 >= 2)
      {
        v114 = 0.0;
        v132 = (double *)(a3 + 24);
        v111 = 0.0;
        if (v106 != 1)
          goto LABEL_234;
        goto LABEL_232;
      }
      v131 = v108;
      v114 = *(double *)(a3 + 48);
LABEL_233:
      v111 = *v131;
LABEL_234:
      v133 = v108;
      v134 = *(double *)(a3 + 48);
      switch((char)v106)
      {
        case 1:
          v135 = (double *)(a3 + 24);
          goto LABEL_238;
        case 2:
          v134 = *(double *)(a3 + 40) + *(double *)(a3 + 24);
          goto LABEL_239;
        case 3:
          v134 = *(double *)(a3 + 40);
          v133 = (double *)(a3 + 16);
          goto LABEL_243;
        case 4:
        case 5:
          goto LABEL_243;
        case 6:
          v135 = (double *)(a3 + 32);
LABEL_238:
          v134 = *v135;
LABEL_239:
          v133 = (double *)a3;
LABEL_243:
          v119 = *v133 + v134;
          if (!v124)
            goto LABEL_244;
          goto LABEL_246;
        default:
          v119 = 0.0;
          if (v124)
            goto LABEL_246;
LABEL_244:
          v125 = 10.0;
          if (*(_BYTE *)(*(_QWORD *)a1 + 122) == 2)
            v125 = 8.0;
LABEL_246:
          v129 = 0;
          v130 = v114 > v128;
          v126 = v125;
          v107 = v106;
          LOBYTE(v106) = 0;
          break;
      }
LABEL_247:
      *(double *)&v534 = v63;
      v136 = *((float *)v65 + 52);
      v137 = fmax(v111 + v114, v119);
      v138 = v137 * 0.800000012 * (v137 * 0.800000012);
      v139 = v126 * 0.0000000249532021;
      if (*(_BYTE *)(*(_QWORD *)a1 + 290))
        v139 = v126;
      v531 = v139;
      v140 = (v127 / v137);
      v141 = 1 << (__clz(v140) ^ 0x1F);
      if (v140)
        v142 = v141;
      else
        v142 = 0;
      if (v142 > 2)
        goto LABEL_275;
      if (v130)
        goto LABEL_321;
      *(_OWORD *)v568 = 0u;
      *(_OWORD *)v569 = 0u;
      *(_QWORD *)&v569[20] = 0;
      *(_DWORD *)&v569[16] = -1;
      v570 = 0;
      v571 = 0u;
      v572 = 0u;
      v573 = 0;
      *(_DWORD *)v574 = 2139095039;
      *(_WORD *)&v574[4] = 0;
      v574[6] = 0;
      v575 = 0u;
      v576 = 0u;
      v577 = 0;
      *(_DWORD *)v578 = 2139095039;
      *(_WORD *)&v578[4] = 0;
      v578[6] = 0;
      v580 = 0;
      v579 = 0;
      v581 = 255;
      if (!md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v65 + 2), (md::LabelLineResolvedPosition *)v568, v127 * 0.5))goto LABEL_269;
      *(double *)v554.i64 = v137 * 0.800000012 * (v137 * 0.800000012);
      if (!v584)
        goto LABEL_661;
      if (((*(uint64_t (**)(_QWORD *, int *, int64x2_t *))(*v584 + 48))(v584, v568, &v554) & 1) != 0)
        goto LABEL_269;
      v143 = md::LineLabelPlacer::addPositionIfValid((uint64_t)&v554, a1, (uint64_t **)v568, 1, v107, v529, 0, v110, v128, v136);
      v144 = v554;
      if (v554.i64[1])
      {
        v145 = (unint64_t *)(v554.i64[1] + 8);
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
      }
      v147 = *(std::__shared_weak_count **)&v568[2];
      *(int64x2_t *)v568 = v144;
      if (v147)
      {
        v148 = (unint64_t *)&v147->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v147->__on_zero_shared)(v147, v143);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      *(int64x2_t *)v569 = v555[0];
      *(int64x2_t *)&v569[12] = *(int64x2_t *)((char *)v555 + 12);
      v570 = v556;
      v571 = v557;
      v572 = v558;
      *(_DWORD *)v574 = v560[0];
      *(_DWORD *)&v574[3] = *(_DWORD *)((char *)v560 + 3);
      v575 = v561;
      v576 = v562;
      v573 = v559;
      v577 = v563;
      *(_DWORD *)&v578[3] = *(_DWORD *)((char *)v564 + 3);
      *(_DWORD *)v578 = v564[0];
      v579 = v565;
      v580 = v566;
      v581 = v567;
      v150 = (std::__shared_weak_count *)v554.i64[1];
      if (!v554.i64[1])
        goto LABEL_269;
      v151 = (unint64_t *)(v554.i64[1] + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
        v153 = *(std::__shared_weak_count **)&v568[2];
        if (*(_QWORD *)&v568[2])
        {
LABEL_270:
          v154 = (unint64_t *)&v153->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
      }
      else
      {
LABEL_269:
        v153 = *(std::__shared_weak_count **)&v568[2];
        if (*(_QWORD *)&v568[2])
          goto LABEL_270;
      }
      v103 = *(unsigned __int8 *)(a1 + 72);
LABEL_275:
      if (((v140 == 0) & ~v129) != 0 || v103)
        goto LABEL_299;
      v156 = v107;
      if (v129)
      {
        v137 = v114 * 0.5 + *(double *)(a3 + 48) * 2.0;
        v156 = v106;
      }
      if (v127 * 0.5 <= v137 + v531)
        goto LABEL_299;
      *(_OWORD *)v568 = 0u;
      *(_OWORD *)v569 = 0u;
      *(_QWORD *)&v569[20] = 0;
      *(_DWORD *)&v569[16] = -1;
      v570 = 0;
      v571 = 0u;
      v572 = 0u;
      v573 = 0;
      *(_DWORD *)v574 = 2139095039;
      *(_WORD *)&v574[4] = 0;
      v574[6] = 0;
      v575 = 0u;
      v576 = 0u;
      v577 = 0;
      *(_DWORD *)v578 = 2139095039;
      *(_WORD *)&v578[4] = 0;
      v578[6] = 0;
      v580 = 0;
      v579 = 0;
      v581 = 255;
      if (md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v65 + 2), (md::LabelLineResolvedPosition *)v568, v531))
      {
        *(double *)v554.i64 = v138;
        if (!v584)
          goto LABEL_661;
        if (((*(uint64_t (**)(_QWORD *, int *, int64x2_t *))(*v584 + 48))(v584, v568, &v554) & 1) == 0)
        {
          v157 = md::LineLabelPlacer::addPositionIfValid((uint64_t)&v554, a1, (uint64_t **)v568, 0, v156, v529, 1, v110, v128, v136);
          v158 = (std::__shared_weak_count *)v554.i64[1];
          if (v554.i64[1])
          {
            v159 = (unint64_t *)(v554.i64[1] + 8);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v158->__on_zero_shared)(v158, v157);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
        }
      }
      if (!md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v65 + 2), (md::LabelLineResolvedPosition *)v568, v127 - v531))goto LABEL_295;
      *(double *)v553 = v138;
      if (!v584)
      {
LABEL_661:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      if (((*(uint64_t (**)(_QWORD *, int *, _OWORD *))(*v584 + 48))(v584, v568, v553) & 1) != 0)
        goto LABEL_295;
      v161 = md::LineLabelPlacer::addPositionIfValid((uint64_t)v553, a1, (uint64_t **)v568, 2, v156, v529, 2, v110, v128, v136);
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v553[0] + 1);
      if (!*((_QWORD *)&v553[0] + 1))
        goto LABEL_295;
      v163 = (unint64_t *)(*((_QWORD *)&v553[0] + 1) + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v162->__on_zero_shared)(v162, v161);
        std::__shared_weak_count::__release_weak(v162);
        v165 = *(std::__shared_weak_count **)&v568[2];
        if (!*(_QWORD *)&v568[2])
          goto LABEL_299;
      }
      else
      {
LABEL_295:
        v165 = *(std::__shared_weak_count **)&v568[2];
        if (!*(_QWORD *)&v568[2])
          goto LABEL_299;
      }
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (v167)
      {
LABEL_299:
        if (v142 >= 3)
          goto LABEL_300;
        goto LABEL_321;
      }
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
      if (v142 >= 3)
      {
LABEL_300:
        *(_OWORD *)v568 = 0u;
        *(_OWORD *)v569 = 0u;
        *(_QWORD *)&v569[20] = 0;
        *(_DWORD *)&v569[16] = -1;
        v570 = 0;
        v571 = 0u;
        v572 = 0u;
        v573 = 0;
        *(_DWORD *)v574 = 2139095039;
        *(_WORD *)&v574[4] = 0;
        v574[6] = 0;
        v575 = 0u;
        v576 = 0u;
        v577 = 0;
        *(_DWORD *)v578 = 2139095039;
        *(_WORD *)&v578[4] = 0;
        v578[6] = 0;
        v580 = 0;
        v579 = 0;
        v581 = 255;
        v168 = __clz(__rbit32(v142));
        v169 = 1;
        v170 = v107;
        do
        {
          v172 = md::LabelLineResolvedPosition::positionAtDistance((md::LabelLineResolvedPosition *)(v65 + 2), (md::LabelLineResolvedPosition *)v568, v127 * (double)v169 * (1.0 / (double)v142));
          v171 = v107;
          if (v172)
          {
            v582 = v138;
            if (!v584)
              goto LABEL_661;
            if (((*(uint64_t (**)(_QWORD *, int *, double *))(*v584 + 48))(v584, v568, &v582) & 1) != 0)
            {
              v171 = v170;
            }
            else
            {
              v173 = v168 + ~__clz(__rbit32(v169));
              _ZF = v173 == 0;
              v174 = v173 + 3;
              if (_ZF)
                v175 = 0;
              else
                v175 = v174;
              v176 = md::LineLabelPlacer::addPositionIfValid((uint64_t)v551, a1, (uint64_t **)v568, 1, v170, v529, v175, v110, v128, v136);
              v177 = v552;
              v171 = v107;
              if (v552)
              {
                v178 = (unint64_t *)&v552->__shared_owners_;
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                v171 = v107;
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t, __n128))v177->__on_zero_shared)(v177, v107, v176);
                  std::__shared_weak_count::__release_weak(v177);
                  v171 = v107;
                }
              }
            }
          }
          ++v169;
          v170 = v171;
        }
        while (v169 != v142);
        v180 = *(std::__shared_weak_count **)&v568[2];
        if (*(_QWORD *)&v568[2])
        {
          v181 = (unint64_t *)(*(_QWORD *)&v568[2] + 8);
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
      }
LABEL_321:
      v66 = v584;
      if (v584 == v583)
      {
        v66 = v583;
        v67 = 4;
        v8 = v529;
        v56 = v523;
        v57 = 2.0;
        v64 = v524;
        v63 = *(double *)&v534;
      }
      else
      {
        v8 = v529;
        v56 = v523;
        v57 = 2.0;
        v64 = v524;
        v63 = *(double *)&v534;
        if (!v584)
          goto LABEL_85;
        v67 = 5;
      }
      (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_85:
      v65 += 54;
      if (v65 == v64)
        goto LABEL_72;
    }
  }
LABEL_343:
  v189 = *(unsigned __int8 *)(*(_QWORD *)a1 + 290);
  v190 = *(uint64_t **)(a1 + 32);
  v516 = v189;
  if (v190 == v517)
  {
    v233 = 1;
    v538 = 0;
    v191 = 0;
    v227 = 0;
    v232 = 0;
    v228 = 0;
    v512 = 0;
    v518 = 0;
    goto LABEL_411;
  }
  v191 = 0;
  v520 = 0;
  v537 = 0;
  v192 = 1 << v8;
  v193 = ~(1 << v8);
  do
  {
    v194 = v190[5];
    v195 = *(unsigned int *)(v194 + 12);
    if ((v192 & v195) == 0)
    {
LABEL_359:
      v198 = (uint64_t *)v190[1];
      if (v198)
        goto LABEL_360;
      goto LABEL_400;
    }
    if (*(_BYTE *)(v194 + 11) == 1)
    {
      v196 = *(unsigned __int8 *)(v194 + 9);
      if (v196 != 8 && v196 != 4)
      {
        *(_BYTE *)(v194 + 10) = 0;
        if (v520 < v537)
        {
          *(_QWORD *)v520 = v194;
          v520 += 8;
          v198 = (uint64_t *)v190[1];
          if (v198)
            goto LABEL_360;
          goto LABEL_400;
        }
        v206 = v520 - v191;
        v207 = v191;
        v208 = (v520 - v191) >> 3;
        v209 = v208 + 1;
        if ((unint64_t)(v208 + 1) >> 61)
          abort();
        v532 = v207;
        v210 = v537 - v207;
        v211 = (v537 - v207) >> 2;
        if (v211 > v209)
          v209 = v211;
        if (v210 >= 0x7FFFFFFFFFFFFFF8)
          v212 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v212 = v209;
        if (v212)
        {
          if (v212 >> 61)
LABEL_663:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v213 = v212;
          v214 = operator new(8 * v212);
          v212 = v213;
        }
        else
        {
          v214 = 0;
        }
        v215 = (uint64_t *)&v214[8 * v208];
        *v215 = v194;
        v216 = (char *)(v215 + 1);
        v217 = v532;
        if (v520 != v532)
        {
          v218 = v520 - 8 - v532;
          if (v218 < 0x168)
          {
            v219 = v520;
LABEL_395:
            v217 = v532;
            do
            {
LABEL_396:
              v220 = *((_QWORD *)v219 - 1);
              v219 -= 8;
              *--v215 = v220;
            }
            while (v219 != v217);
            goto LABEL_397;
          }
          if (&v214[v206 - 8 - (v218 & 0xFFFFFFFFFFFFFFF8)] > &v214[v206 - 8]
            || &v520[-(v218 & 0xFFFFFFFFFFFFFFF8) - 8] > v520 - 8
            || (unint64_t)(v520 - &v214[v206]) < 0x20)
          {
            v219 = v520;
            goto LABEL_395;
          }
          v222 = (v218 >> 3) + 1;
          v219 = &v520[-8 * (v222 & 0x3FFFFFFFFFFFFFFCLL)];
          v223 = &v214[8 * v208 - 16];
          v224 = v520 - 16;
          v225 = v222 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v226 = *(_OWORD *)v224;
            *(v223 - 1) = *((_OWORD *)v224 - 1);
            *v223 = v226;
            v223 -= 2;
            v224 -= 32;
            v225 -= 4;
          }
          while (v225);
          v215 -= v222 & 0x3FFFFFFFFFFFFFFCLL;
          v217 = v532;
          if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_396;
        }
LABEL_397:
        v537 = &v214[8 * v212];
        if (v217)
          operator delete(v217);
        v520 = v216;
        v191 = (char *)v215;
        v8 = v529;
        v198 = (uint64_t *)v190[1];
        if (v198)
        {
          do
          {
LABEL_360:
            v200 = v198;
            v198 = (uint64_t *)*v198;
          }
          while (v198);
          goto LABEL_346;
        }
        goto LABEL_400;
      }
      *(_BYTE *)(v194 + 10) = 1;
      *(_DWORD *)(v194 + 16) |= v192;
      v198 = (uint64_t *)v190[1];
      if (v198)
        goto LABEL_360;
      do
      {
LABEL_400:
        v221 = v190;
        v190 = (uint64_t *)v190[2];
      }
      while ((uint64_t *)*v190 != v221);
      v200 = v190;
      goto LABEL_346;
    }
    v199 = v195 & v193;
    *(_DWORD *)(v194 + 12) = v199;
    if (*(_DWORD *)(v194 + 24) < (int)v8)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v194 + 176))(v194, v8, 1.0);
      *(_DWORD *)(v194 + 24) = v8;
      v194 = v190[5];
      v199 = *(_DWORD *)(v194 + 12);
    }
    *(_DWORD *)(v194 + 16) &= v193;
    if (v199)
      goto LABEL_359;
    v201 = (uint64_t *)v190[1];
    v202 = v190;
    if (v201)
    {
      do
      {
        v200 = v201;
        v201 = (uint64_t *)*v201;
      }
      while (v201);
    }
    else
    {
      do
      {
        v200 = (uint64_t *)v202[2];
        _ZF = *v200 == (_QWORD)v202;
        v202 = v200;
      }
      while (!_ZF);
    }
    if (*(uint64_t **)(a1 + 32) == v190)
      *(_QWORD *)(a1 + 32) = v200;
    --*(_QWORD *)(a1 + 56);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v190);
    v203 = (std::__shared_weak_count *)v190[6];
    if (v203)
    {
      v204 = (unint64_t *)&v203->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v190, 56);
LABEL_346:
    v190 = v200;
  }
  while (v200 != v517);
  v227 = (unint64_t *)v520;
  v228 = v520 - v191;
  v229 = (v520 - v191) >> 3;
  v538 = v229;
  if (v520 == v191)
  {
    v232 = 0;
    v512 = 0;
    v518 = 0;
    v233 = 1;
    v191 = v520;
    v189 = v516;
  }
  else
  {
    v189 = v516;
    if ((v228 & 0x8000000000000000) != 0)
      abort();
    v230 = (char *)operator new(v520 - v191);
    memcpy(v230, v191, v228);
    v231 = (unint64_t *)operator new(v228);
    v232 = (int8x16_t *)&v230[8 * v229];
    v518 = (int8x16_t *)&v231[v229];
    v512 = v231;
    memcpy(v231, v191, v228);
    v233 = 0;
    v227 = (unint64_t *)v520;
    v228 = (size_t)v230;
  }
LABEL_411:
  v501 = (uint64_t)((uint64_t)v232->i64 - v228) >> 3;
  v234 = 126 - 2 * __clz(v501);
  if (v232 == (int8x16_t *)v228)
    v235 = 0;
  else
    v235 = v234;
  v503 = v232;
  if (v189)
  {
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(v228, v232, v235, 1);
    v236 = 126 - 2 * __clz(((char *)v518 - (char *)v512) >> 3);
    if (v518 == (int8x16_t *)v512)
      v237 = 0;
    else
      v237 = v236;
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>((uint64_t)v512, v518, v237, 1);
  }
  else
  {
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>((unint64_t *)v228, (unint64_t *)v232, v235, 1);
    v238 = 126 - 2 * __clz(((char *)v518 - (char *)v512) >> 3);
    if (v518 == (int8x16_t *)v512)
      v239 = 0;
    else
      v239 = v238;
    std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(v512, (unint64_t *)v518, v239, 1);
  }
  v240 = 126 - 2 * __clz(v538);
  if (v233)
    v241 = 0;
  else
    v241 = v240;
  std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,false>((unint64_t *)v191, v227, v241, 1);
  v242 = *(double *)(a3 + 40) > 0.0 && *(_BYTE *)(a3 + 86) != 0;
  _ZF = (!v242 | a6) == 0;
  v243 = 16;
  if (!_ZF)
    v243 = 0;
  if (*(_BYTE *)(a1 + 24))
    v243 = 56;
  if ((v233 & 1) != 0)
    goto LABEL_654;
  v526 = 0;
  v528 = 0;
  v244 = *(double *)(a3 + v243);
  v245 = v518;
  v505 = v244;
  v246 = v244 * v244;
  v500 = 1 << v8;
  v247 = ~(1 << v8);
  v509 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  __asm { FMOV            V0.2D, #0.5 }
  v507 = _Q0;
  v249 = (unint64_t *)v191;
  v533 = v191;
  v521 = v227;
  v502 = v228;
  v250 = (char *)v503;
  v499 = v246;
  v530 = v247;
  while (2)
  {
    if (*(_BYTE *)(*v249 + 10))
      goto LABEL_438;
    v514 = v249;
    v539 = *v249;
    v252 = (char *)v512;
    v253 = (*(uint64_t (**)(void))(*(_QWORD *)*v249 + 56))();
    v254 = v253;
    memset(v568, 0, sizeof(v568));
    *(_QWORD *)v569 = 0;
    v255 = v528;
    v535 = (md::LabelPoint *)v253;
    if (!v189)
    {
      v285 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v253);
      v286 = v285;
      if (v250 == (char *)v228)
      {
        v296 = v250;
        if (v245 != (int8x16_t *)v512)
          goto LABEL_463;
        goto LABEL_473;
      }
      v287 = *v285 - v505;
      v288 = *v285 + v505;
      v289 = v501;
      v290 = v250;
      v250 = (char *)v228;
      while (1)
      {
        while (1)
        {
          v291 = v289 >> 1;
          v292 = &v250[8 * (v289 >> 1)];
          v293 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v292 + 56))(*(_QWORD *)v292);
          v294 = *(double *)md::LabelPoint::mercatorPoint(v293);
          if (v294 >= v287)
            break;
          v250 = v292 + 8;
          v289 += ~v291;
          if (!v289)
            goto LABEL_462;
        }
        v295 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, double))(**(_QWORD **)v292 + 56))(*(_QWORD *)v292, v294);
        if (*(double *)md::LabelPoint::mercatorPoint(v295) <= v288)
          break;
        v290 = &v250[8 * (v289 >> 1)];
        v289 >>= 1;
        if (!v291)
        {
LABEL_462:
          v296 = v250;
          v191 = v533;
          v189 = v516;
          v255 = v528;
          v245 = v518;
          v246 = v499;
          if (v518 != (int8x16_t *)v512)
          {
LABEL_463:
            v297 = v286[1];
            v298 = v297 - v505;
            v299 = v297 + v505;
            v300 = ((char *)v518 - (char *)v512) >> 3;
            v301 = (char *)v512;
            do
            {
              while (1)
              {
                v302 = v300 >> 1;
                v303 = &v301[8 * (v300 >> 1)];
                v304 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v303 + 56))(*(_QWORD *)v303);
                if (*(double *)(md::LabelPoint::mercatorPoint(v304) + 8) >= v298)
                  break;
                v301 = v303 + 8;
                v300 += ~v302;
                if (!v300)
                  goto LABEL_468;
              }
              v305 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v303 + 56))(*(_QWORD *)v303);
              if (*(double *)(md::LabelPoint::mercatorPoint(v305) + 8) <= v299)
              {
                if (v300 >= 2)
                {
                  do
                  {
                    v450 = &v301[8 * (v302 >> 1)];
                    v451 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v450 + 56))(*(_QWORD *)v450);
                    v452 = v451;
                    if (*(_BYTE *)(v451 + 45))
                      v453 = 1;
                    else
                      v453 = *(_BYTE *)(v451 + 46) == 0;
                    if (v453)
                    {
                      v449 = *(double *)(v451 + 32);
                    }
                    else
                    {
                      v440 = *(double *)v451;
                      v441 = *(double *)(v451 + 8);
                      v442 = *(double *)(v451 + 16);
                      v443 = sqrt(v440 * v440 + v441 * v441);
                      v444 = atan2(v442, v443 * 0.996647189);
                      v445 = atan2(v441, v440);
                      v446 = __sincos_stret(v444);
                      v447 = atan2(v442 + v446.__sinval * v446.__sinval * 42841.3115 * v446.__sinval, v443 + v446.__cosval * v446.__cosval * -42697.6727 * v446.__cosval);
                      v448 = tan(v447 * 0.5 + 0.785398163);
                      v449 = log(v448) * 0.159154943 + 0.5;
                      *(double *)(v452 + 24) = v445 * 0.159154943 + 0.5;
                      *(double *)(v452 + 32) = v449;
                      *(_BYTE *)(v452 + 45) = 1;
                    }
                    if (v449 >= v298)
                      v302 >>= 1;
                    else
                      v302 += ~(v302 >> 1);
                    if (v449 < v298)
                      v301 = v450 + 8;
                  }
                  while (v302);
                }
                v252 = v303 + 8;
                if (v245 == (int8x16_t *)(v303 + 8))
                {
                  v191 = v533;
                  v189 = v516;
                  v255 = v528;
                  v246 = v499;
                }
                else
                {
                  v425 = ((char *)v245 - (v303 + 8)) >> 3;
                  v255 = v528;
                  v246 = v499;
                  do
                  {
                    v436 = &v252[8 * (v425 >> 1)];
                    v437 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v436 + 56))(*(_QWORD *)v436);
                    v438 = v437;
                    if (*(_BYTE *)(v437 + 45))
                      v439 = 1;
                    else
                      v439 = *(_BYTE *)(v437 + 46) == 0;
                    if (v439)
                    {
                      v435 = *(double *)(v437 + 32);
                    }
                    else
                    {
                      v426 = *(double *)v437;
                      v427 = *(double *)(v437 + 8);
                      v428 = *(double *)(v437 + 16);
                      v429 = sqrt(v426 * v426 + v427 * v427);
                      v430 = atan2(v428, v429 * 0.996647189);
                      v431 = atan2(v427, v426);
                      v432 = __sincos_stret(v430);
                      v433 = atan2(v428 + v432.__sinval * v432.__sinval * 42841.3115 * v432.__sinval, v429 + v432.__cosval * v432.__cosval * -42697.6727 * v432.__cosval);
                      v434 = tan(v433 * 0.5 + 0.785398163);
                      v435 = log(v434) * 0.159154943 + 0.5;
                      *(double *)(v438 + 24) = v431 * 0.159154943 + 0.5;
                      *(double *)(v438 + 32) = v435;
                      *(_BYTE *)(v438 + 45) = 1;
                    }
                    if (v435 > v299)
                    {
                      v425 >>= 1;
                    }
                    else
                    {
                      v252 = v436 + 8;
                      v425 += ~(v425 >> 1);
                    }
                  }
                  while (v425);
                  v191 = v533;
                  v189 = v516;
                }
                v247 = v530;
                goto LABEL_588;
              }
              v245 = (int8x16_t *)&v301[8 * (v300 >> 1)];
              v300 >>= 1;
            }
            while (v302);
LABEL_468:
            v252 = v301;
            v191 = v533;
            v189 = v516;
            v255 = v528;
            v246 = v499;
LABEL_588:
            std::vector<md::RoadPosition *>::__assign_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(v568, v250, v296, (v296 - v250) >> 3);
            std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>((unint64_t *)v568, *(uint64_t *)&v568[2], v301, v252, (v252 - v301) >> 3);
            goto LABEL_589;
          }
LABEL_473:
          v301 = (char *)v512;
          goto LABEL_588;
        }
      }
      if (v289 >= 2)
      {
        do
        {
          v421 = &v250[8 * (v291 >> 1)];
          v422 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v421 + 56))(*(_QWORD *)v421);
          v423 = v422;
          if (*(_BYTE *)(v422 + 45))
            v424 = 1;
          else
            v424 = *(_BYTE *)(v422 + 46) == 0;
          if (v424)
          {
            v420.f64[0] = *(float64_t *)(v422 + 24);
          }
          else
          {
            v410 = *(double *)v422;
            v411 = *(double *)(v422 + 8);
            v412 = *(double *)(v422 + 16);
            v413 = sqrt(v410 * v410 + v411 * v411);
            v414 = atan2(v412, v413 * 0.996647189);
            v511 = atan2(v411, v410);
            v415 = __sincos_stret(v414);
            v416 = atan2(v412 + v415.__sinval * v415.__sinval * 42841.3115 * v415.__sinval, v413 + v415.__cosval * v415.__cosval * -42697.6727 * v415.__cosval);
            v417 = tan(v416 * 0.5 + 0.785398163);
            v418 = log(v417);
            v419.f64[0] = v511;
            v419.f64[1] = v418;
            v420 = vmlaq_f64(v507, v509, v419);
            *(float64x2_t *)(v423 + 24) = v420;
            *(_BYTE *)(v423 + 45) = 1;
          }
          if (v420.f64[0] >= v287)
            v291 >>= 1;
          else
            v291 += ~(v291 >> 1);
          if (v420.f64[0] < v287)
            v250 = v421 + 8;
        }
        while (v291);
      }
      v296 = v292 + 8;
      if (v290 == v292 + 8)
      {
        v191 = v533;
        v189 = v516;
        v255 = v528;
        v245 = v518;
        v246 = v499;
      }
      else
      {
        v394 = (v290 - (v292 + 8)) >> 3;
        v255 = v528;
        v246 = v499;
        do
        {
          v406 = &v296[8 * (v394 >> 1)];
          v407 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v406 + 56))(*(_QWORD *)v406);
          v408 = v407;
          if (*(_BYTE *)(v407 + 45))
            v409 = 1;
          else
            v409 = *(_BYTE *)(v407 + 46) == 0;
          if (v409)
          {
            v405.f64[0] = *(float64_t *)(v407 + 24);
          }
          else
          {
            v395 = *(double *)v407;
            v396 = *(double *)(v407 + 8);
            v397 = *(double *)(v407 + 16);
            v398 = sqrt(v395 * v395 + v396 * v396);
            v399 = atan2(v397, v398 * 0.996647189);
            v510 = atan2(v396, v395);
            v400 = __sincos_stret(v399);
            v401 = atan2(v397 + v400.__sinval * v400.__sinval * 42841.3115 * v400.__sinval, v398 + v400.__cosval * v400.__cosval * -42697.6727 * v400.__cosval);
            v402 = tan(v401 * 0.5 + 0.785398163);
            v403 = log(v402);
            v404.f64[0] = v510;
            v404.f64[1] = v403;
            v405 = vmlaq_f64(v507, v509, v404);
            *(float64x2_t *)(v408 + 24) = v405;
            *(_BYTE *)(v408 + 45) = 1;
          }
          if (v405.f64[0] > v288)
          {
            v394 >>= 1;
          }
          else
          {
            v296 = v406 + 8;
            v394 += ~(v394 >> 1);
          }
        }
        while (v394);
        v191 = v533;
        v189 = v516;
        v245 = v518;
      }
      v247 = v530;
      if (v245 != (int8x16_t *)v512)
        goto LABEL_463;
      goto LABEL_473;
    }
    if (*(_BYTE *)(v253 + 44))
    {
      v256 = *(double *)v253;
      if (v250 != (char *)v228)
        goto LABEL_443;
LABEL_470:
      v228 = (size_t)v250;
      if (v245 != (int8x16_t *)v512)
        goto LABEL_495;
LABEL_471:
      v314 = (char *)v512;
      goto LABEL_509;
    }
    v306 = *(double *)(v253 + 24) * 6.28318531;
    v307 = exp(*(double *)(v253 + 32) * 6.28318531 + -3.14159265);
    v308 = atan(v307) * 2.0 + -1.57079633;
    v309 = fmod(v306, 6.28318531);
    v310 = fmod(v309 + 6.28318531, 6.28318531) + -3.14159265;
    v311 = __sincos_stret(v308);
    v312 = 6378137.0 / sqrt(v311.__sinval * v311.__sinval * -0.00669437999 + 1.0);
    v313 = __sincos_stret(v310);
    v256 = v312 * v311.__cosval * v313.__cosval;
    *(double *)v254 = v256;
    *(double *)(v254 + 8) = v312 * v311.__cosval * v313.__sinval;
    *(double *)(v254 + 16) = v311.__sinval * 0.99330562 * v312;
    *(_BYTE *)(v254 + 44) = 1;
    if (v250 == (char *)v228)
      goto LABEL_470;
LABEL_443:
    v257 = v256 - v505;
    v258 = v256 + v505;
    v259 = v501;
    v260 = v250;
    while (2)
    {
      while (2)
      {
        v261 = v259 >> 1;
        v262 = (char *)(v228 + 8 * (v259 >> 1));
        v263 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v262 + 56))(*(_QWORD *)v262);
        v264 = v263;
        if (*(_BYTE *)(v263 + 44))
        {
          if (*(double *)v263 < v257)
            goto LABEL_444;
        }
        else
        {
          v265 = *(double *)(v263 + 24) * 6.28318531;
          v266 = exp(*(double *)(v263 + 32) * 6.28318531 + -3.14159265);
          v267 = atan(v266) * 2.0 + -1.57079633;
          v268 = fmod(v265, 6.28318531);
          v269 = fmod(v268 + 6.28318531, 6.28318531) + -3.14159265;
          v270 = __sincos_stret(v267);
          v271 = 6378137.0 / sqrt(v270.__sinval * v270.__sinval * -0.00669437999 + 1.0);
          v272 = __sincos_stret(v269);
          v273 = v271 * v270.__cosval * v272.__cosval;
          *(double *)v264 = v273;
          *(double *)(v264 + 8) = v271 * v270.__cosval * v272.__sinval;
          *(double *)(v264 + 16) = v270.__sinval * 0.99330562 * v271;
          *(_BYTE *)(v264 + 44) = 1;
          if (v273 < v257)
          {
LABEL_444:
            v228 = (size_t)(v262 + 8);
            v259 += ~v261;
            if (!v259)
              goto LABEL_454;
            continue;
          }
        }
        break;
      }
      v274 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v262 + 56))(*(_QWORD *)v262);
      v275 = v274;
      if (*(_BYTE *)(v274 + 44))
      {
        if (*(double *)v274 <= v258)
          goto LABEL_474;
LABEL_453:
        v260 = (char *)(v228 + 8 * (v259 >> 1));
        v259 >>= 1;
        if (!v261)
        {
LABEL_454:
          v250 = (char *)v228;
LABEL_455:
          v189 = v516;
          v245 = v518;
          v247 = v530;
          goto LABEL_494;
        }
        continue;
      }
      break;
    }
    v276 = *(double *)(v274 + 24) * 6.28318531;
    v277 = exp(*(double *)(v274 + 32) * 6.28318531 + -3.14159265);
    v278 = atan(v277) * 2.0 + -1.57079633;
    v279 = fmod(v276, 6.28318531);
    v280 = fmod(v279 + 6.28318531, 6.28318531) + -3.14159265;
    v281 = __sincos_stret(v278);
    v282 = 6378137.0 / sqrt(v281.__sinval * v281.__sinval * -0.00669437999 + 1.0);
    v283 = __sincos_stret(v280);
    v284 = v282 * v281.__cosval * v283.__cosval;
    *(double *)v275 = v284;
    *(double *)(v275 + 8) = v282 * v281.__cosval * v283.__sinval;
    *(double *)(v275 + 16) = v281.__sinval * 0.99330562 * v282;
    *(_BYTE *)(v275 + 44) = 1;
    if (v284 > v258)
      goto LABEL_453;
LABEL_474:
    if (v259 >= 2)
    {
      do
      {
        v337 = (_QWORD *)(v228 + 8 * (v261 >> 1));
        v338 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v337 + 56))(*v337);
        v339 = v338;
        if (*(_BYTE *)(v338 + 44))
        {
          v336 = *(double *)v338;
        }
        else
        {
          v328 = *(double *)(v338 + 24) * 6.28318531;
          v329 = exp(*(double *)(v338 + 32) * 6.28318531 + -3.14159265);
          v330 = atan(v329) * 2.0 + -1.57079633;
          v331 = fmod(v328, 6.28318531);
          v332 = fmod(v331 + 6.28318531, 6.28318531) + -3.14159265;
          v333 = __sincos_stret(v330);
          v334 = 6378137.0 / sqrt(v333.__sinval * v333.__sinval * -0.00669437999 + 1.0);
          v335 = __sincos_stret(v332);
          v336 = v334 * v333.__cosval * v335.__cosval;
          *(double *)v339 = v336;
          *(double *)(v339 + 8) = v334 * v333.__cosval * v335.__sinval;
          *(double *)(v339 + 16) = v333.__sinval * 0.99330562 * v334;
          *(_BYTE *)(v339 + 44) = 1;
        }
        if (v336 >= v257)
          v261 >>= 1;
        else
          v261 += ~(v261 >> 1);
        if (v336 < v257)
          v228 = (size_t)(v337 + 1);
      }
      while (v261);
    }
    v250 = v262 + 8;
    if (v260 == v262 + 8)
    {
      v191 = v533;
      goto LABEL_455;
    }
    v315 = (v260 - (v262 + 8)) >> 3;
    v247 = v530;
    do
    {
      v325 = &v250[8 * (v315 >> 1)];
      v326 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v325 + 56))(*(_QWORD *)v325);
      v327 = v326;
      if (*(_BYTE *)(v326 + 44))
      {
        v324 = *(double *)v326;
      }
      else
      {
        v316 = *(double *)(v326 + 24) * 6.28318531;
        v317 = exp(*(double *)(v326 + 32) * 6.28318531 + -3.14159265);
        v318 = atan(v317) * 2.0 + -1.57079633;
        v319 = fmod(v316, 6.28318531);
        v320 = fmod(v319 + 6.28318531, 6.28318531) + -3.14159265;
        v321 = __sincos_stret(v318);
        v322 = 6378137.0 / sqrt(v321.__sinval * v321.__sinval * -0.00669437999 + 1.0);
        v323 = __sincos_stret(v320);
        v324 = v322 * v321.__cosval * v323.__cosval;
        *(double *)v327 = v324;
        *(double *)(v327 + 8) = v322 * v321.__cosval * v323.__sinval;
        *(double *)(v327 + 16) = v321.__sinval * 0.99330562 * v322;
        *(_BYTE *)(v327 + 44) = 1;
      }
      if (v324 > v258)
      {
        v315 >>= 1;
      }
      else
      {
        v250 = v325 + 8;
        v315 += ~(v315 >> 1);
      }
    }
    while (v315);
    v191 = v533;
    v189 = v516;
    v245 = v518;
LABEL_494:
    v254 = (uint64_t)v535;
    if (v245 == (int8x16_t *)v512)
      goto LABEL_471;
LABEL_495:
    v340 = *(double *)(v254 + 8);
    v341 = v340 - v505;
    v342 = v340 + v505;
    v343 = ((char *)v518 - (char *)v512) >> 3;
    v344 = (char *)v245;
    while (2)
    {
      while (2)
      {
        v345 = v343 >> 1;
        v346 = &v252[8 * (v343 >> 1)];
        v347 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v346 + 56))(*(_QWORD *)v346);
        v348 = v347;
        if (*(_BYTE *)(v347 + 44))
        {
          if (*(double *)(v347 + 8) < v341)
            goto LABEL_496;
        }
        else
        {
          v349 = *(double *)(v347 + 24) * 6.28318531;
          v350 = exp(*(double *)(v347 + 32) * 6.28318531 + -3.14159265);
          v351 = atan(v350) * 2.0 + -1.57079633;
          v352 = fmod(v349, 6.28318531);
          v353 = fmod(v352 + 6.28318531, 6.28318531) + -3.14159265;
          v354 = __sincos_stret(v351);
          v355 = 6378137.0 / sqrt(v354.__sinval * v354.__sinval * -0.00669437999 + 1.0);
          v356 = __sincos_stret(v353);
          v357 = v355 * v354.__cosval * v356.__sinval;
          *(double *)v348 = v355 * v354.__cosval * v356.__cosval;
          *(double *)(v348 + 8) = v357;
          *(double *)(v348 + 16) = v354.__sinval * 0.99330562 * v355;
          *(_BYTE *)(v348 + 44) = 1;
          if (v357 < v341)
          {
LABEL_496:
            v252 = v346 + 8;
            v343 += ~v345;
            if (!v343)
              goto LABEL_506;
            continue;
          }
        }
        break;
      }
      v358 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v346 + 56))(*(_QWORD *)v346);
      v359 = v358;
      if (*(_BYTE *)(v358 + 44))
      {
        if (*(double *)(v358 + 8) <= v342)
          goto LABEL_510;
LABEL_505:
        v344 = &v252[8 * (v343 >> 1)];
        v343 >>= 1;
        if (!v345)
        {
LABEL_506:
          v314 = v252;
LABEL_507:
          v191 = v533;
          v189 = v516;
          goto LABEL_508;
        }
        continue;
      }
      break;
    }
    v360 = *(double *)(v358 + 24) * 6.28318531;
    v361 = exp(*(double *)(v358 + 32) * 6.28318531 + -3.14159265);
    v362 = atan(v361) * 2.0 + -1.57079633;
    v363 = fmod(v360, 6.28318531);
    v364 = fmod(v363 + 6.28318531, 6.28318531) + -3.14159265;
    v365 = __sincos_stret(v362);
    v366 = 6378137.0 / sqrt(v365.__sinval * v365.__sinval * -0.00669437999 + 1.0);
    v367 = __sincos_stret(v364);
    v368 = v366 * v365.__cosval * v367.__sinval;
    *(double *)v359 = v366 * v365.__cosval * v367.__cosval;
    *(double *)(v359 + 8) = v368;
    *(double *)(v359 + 16) = v365.__sinval * 0.99330562 * v366;
    *(_BYTE *)(v359 + 44) = 1;
    if (v368 > v342)
      goto LABEL_505;
LABEL_510:
    if (v343 >= 2)
    {
      do
      {
        v391 = &v252[8 * (v345 >> 1)];
        v392 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v391 + 56))(*(_QWORD *)v391);
        v393 = v392;
        if (*(_BYTE *)(v392 + 44))
        {
          v390 = *(double *)(v392 + 8);
        }
        else
        {
          v382 = *(double *)(v392 + 24) * 6.28318531;
          v383 = exp(*(double *)(v392 + 32) * 6.28318531 + -3.14159265);
          v384 = atan(v383) * 2.0 + -1.57079633;
          v385 = fmod(v382, 6.28318531);
          v386 = fmod(v385 + 6.28318531, 6.28318531) + -3.14159265;
          v387 = __sincos_stret(v384);
          v388 = 6378137.0 / sqrt(v387.__sinval * v387.__sinval * -0.00669437999 + 1.0);
          v389 = __sincos_stret(v386);
          v390 = v388 * v387.__cosval * v389.__sinval;
          *(double *)v393 = v388 * v387.__cosval * v389.__cosval;
          *(double *)(v393 + 8) = v390;
          *(double *)(v393 + 16) = v387.__sinval * 0.99330562 * v388;
          *(_BYTE *)(v393 + 44) = 1;
        }
        if (v390 >= v341)
          v345 >>= 1;
        else
          v345 += ~(v345 >> 1);
        if (v390 < v341)
          v252 = v391 + 8;
      }
      while (v345);
    }
    v314 = v346 + 8;
    if (v344 != v346 + 8)
    {
      v369 = (v344 - (v346 + 8)) >> 3;
      v255 = v528;
      do
      {
        v371 = &v314[8 * (v369 >> 1)];
        v372 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v371 + 56))(*(_QWORD *)v371);
        v373 = v372;
        if (*(_BYTE *)(v372 + 44))
        {
          v370 = *(double *)(v372 + 8);
        }
        else
        {
          v374 = *(double *)(v372 + 24) * 6.28318531;
          v375 = exp(*(double *)(v372 + 32) * 6.28318531 + -3.14159265);
          v376 = atan(v375) * 2.0 + -1.57079633;
          v377 = fmod(v374, 6.28318531);
          v378 = fmod(v377 + 6.28318531, 6.28318531) + -3.14159265;
          v379 = __sincos_stret(v376);
          v380 = 6378137.0 / sqrt(v379.__sinval * v379.__sinval * -0.00669437999 + 1.0);
          v381 = __sincos_stret(v378);
          v370 = v380 * v379.__cosval * v381.__sinval;
          *(double *)v373 = v380 * v379.__cosval * v381.__cosval;
          *(double *)(v373 + 8) = v370;
          *(double *)(v373 + 16) = v379.__sinval * 0.99330562 * v380;
          *(_BYTE *)(v373 + 44) = 1;
        }
        if (v370 > v342)
        {
          v369 >>= 1;
        }
        else
        {
          v314 = v371 + 8;
          v369 += ~(v369 >> 1);
        }
      }
      while (v369);
      goto LABEL_507;
    }
    v191 = v533;
    v189 = v516;
    v255 = v528;
LABEL_508:
    v247 = v530;
LABEL_509:
    std::vector<md::RoadPosition *>::__assign_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(v568, (char *)v228, v250, (uint64_t)&v250[-v228] >> 3);
    std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>((unint64_t *)v568, *(uint64_t *)&v568[2], v252, v314, (v314 - v252) >> 3);
LABEL_589:
    v454 = *(uint64_t **)v568;
    v455 = *(uint64_t **)&v568[2];
    v456 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v568[2] - *(_QWORD *)v568) >> 3);
    if (*(_QWORD *)&v568[2] == *(_QWORD *)v568)
      v457 = 0;
    else
      v457 = v456;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **,false>(*(uint64_t *)v568, *(unint64_t **)&v568[2], v457, 1);
    if (v455 == v454)
    {
      v464 = v255;
      v465 = v539;
      goto LABEL_643;
    }
    v458 = v454 + 1;
    do
    {
      if (v458 == v455)
      {
        v465 = v539;
        goto LABEL_606;
      }
      v459 = v458 - 1;
      v460 = *(v458 - 1);
      v461 = *v458++;
    }
    while (v460 != v461);
    v462 = v459 + 2;
    if (v459 + 2 != v455)
    {
      do
      {
        v463 = v460;
        v460 = *v462;
        if (v463 != *v462)
        {
          v459[1] = v460;
          ++v459;
        }
        ++v462;
      }
      while (v462 != v455);
      v455 = *(uint64_t **)&v568[2];
    }
    v465 = v539;
    if (v459 + 1 != v455)
    {
      v455 = v459 + 1;
      *(_QWORD *)&v568[2] = v459 + 1;
    }
LABEL_606:
    v464 = v255;
    if (v454 != v455)
    {
      while (1)
      {
        v466 = (unsigned __int8 *)*v454;
        if (*v454 == v465)
          goto LABEL_610;
        v467 = v466[9];
        if (v467 != *(unsigned __int8 *)(v465 + 9))
          goto LABEL_610;
        if (v467 == 1)
        {
          v468 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v465 + 152))(v465);
          _ZF = v468 == (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v466 + 152))(v466);
          v191 = v533;
          v247 = v530;
          v465 = v539;
          if (!_ZF)
            goto LABEL_610;
        }
        v469 = (const md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v466 + 56))(v466);
        md::LabelPoint::vectorToPoint(v535, v469, v189 != 0);
        if (v470 * v470 + v471 * v471 + v472 * v472 < v246)
        {
          if (v464 >= v526)
          {
            v473 = (v464 - v255) >> 3;
            v474 = v473 + 1;
            if ((unint64_t)(v473 + 1) >> 61)
              abort();
            if ((v526 - v255) >> 2 > v474)
              v474 = (v526 - v255) >> 2;
            if ((unint64_t)(v526 - v255) >= 0x7FFFFFFFFFFFFFF8)
              v475 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v475 = v474;
            if (v475)
            {
              if (v475 >> 61)
                goto LABEL_663;
              v476 = operator new(8 * v475);
            }
            else
            {
              v476 = 0;
            }
            v477 = (unsigned __int8 **)&v476[8 * v473];
            *v477 = v466;
            v478 = (char *)(v477 + 1);
            if (v464 == v255)
              goto LABEL_632;
            v479 = v464 - 8 - v255;
            if (v479 < 0x168
              || &v476[v464 - v255 - 8 - (v479 & 0xFFFFFFFFFFFFFFF8)] > &v476[v464 - v255 - 8]
              || &v464[-(v479 & 0xFFFFFFFFFFFFFFF8) - 8] > v464 - 8
              || (unint64_t)(v255 - v476) < 0x20)
            {
              v480 = v464;
            }
            else
            {
              v482 = (v479 >> 3) + 1;
              v480 = &v464[-8 * (v482 & 0x3FFFFFFFFFFFFFFCLL)];
              v483 = &v476[8 * v473 - 16];
              v484 = v464 - 16;
              v485 = v482 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v486 = *(_OWORD *)v484;
                *(v483 - 1) = *((_OWORD *)v484 - 1);
                *v483 = v486;
                v483 -= 2;
                v484 -= 32;
                v485 -= 4;
              }
              while (v485);
              v477 -= v482 & 0x3FFFFFFFFFFFFFFCLL;
              if (v482 == (v482 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_632;
            }
            do
            {
              v481 = (unsigned __int8 *)*((_QWORD *)v480 - 1);
              v480 -= 8;
              *--v477 = v481;
            }
            while (v480 != v255);
LABEL_632:
            v526 = &v476[8 * v475];
            if (v255)
              operator delete(v255);
            v255 = (char *)v477;
            v464 = v478;
            v191 = v533;
            v189 = v516;
            v247 = v530;
            goto LABEL_609;
          }
          *(_QWORD *)v464 = v466;
          v464 += 8;
        }
LABEL_609:
        v465 = v539;
LABEL_610:
        if (++v454 == v455)
        {
          v454 = *(uint64_t **)v568;
          break;
        }
      }
    }
LABEL_643:
    if (v454)
    {
      operator delete(v454);
      v465 = v539;
    }
    v487 = v255;
    v528 = v255;
    _ZF = v255 == v464;
    v227 = v521;
    v228 = v502;
    v250 = (char *)v503;
    if (_ZF)
    {
      *(_BYTE *)(v465 + 10) = 1;
      v251 = *(_DWORD *)(v465 + 16) | v500;
LABEL_436:
      *(_DWORD *)(v465 + 16) = v251;
    }
    else
    {
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v487 + 10) == 1)
        {
          *(_BYTE *)(v465 + 10) = 2;
          v251 = *(_DWORD *)(v465 + 16) & v247;
          goto LABEL_436;
        }
        v487 += 8;
      }
      while (v487 != v464);
      *(_BYTE *)(v465 + 10) = 1;
      *(_DWORD *)(v465 + 16) |= v500;
      v488 = v528;
      do
      {
        v489 = *(_QWORD *)v488;
        v488 += 8;
        *(_BYTE *)(v489 + 10) = 2;
        *(_DWORD *)(v489 + 16) &= v247;
      }
      while (v488 != v464);
    }
    v245 = v518;
    v249 = v514;
LABEL_438:
    if (++v249 != v227)
      continue;
    break;
  }
  if (v528)
    operator delete(v528);
LABEL_654:
  if (v512)
    operator delete(v512);
  if (v228)
    operator delete((void *)v228);
  if (v191)
    operator delete(v191);
}

void sub_19F1B58CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::LabelPool::labelForFeature(md::LabelBase **a1, md::LabelPool *this, uint64_t a3, _QWORD *a4, unsigned int *a5, int a6)
{
  unint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  _BOOL4 v18;
  BOOL v19;
  char **v20;
  uint64_t *v21;
  _BOOL4 v22;
  char *v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  char **v29;
  uint64_t *v30;
  BOOL v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  md::LabelBase *v34;
  unint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  md::LabelBase *v60;
  md::LabelBase *v61;
  unint64_t *v62;
  md::LabelBase *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  md::LabelBase *v71;
  std::__shared_weak_count *v72;
  md::LabelDedupingGroup *v73;
  unint64_t *v74;
  unint64_t v75;
  md::LabelBase *v76;
  md::LabelDedupingGroup *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  md::LabelBase *v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  md::LabelDedupingGroup *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  float v99;
  float v100;
  _BOOL8 v101;
  unint64_t v102;
  unint64_t v103;
  size_t prime;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  size_t v110;
  size_t v111;
  size_t v112;
  _QWORD *i;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint8x8_t v118;
  uint64_t v119;
  unint64_t v120;
  int8x8_t v121;
  uint8x8_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v127;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  md::LabelDedupingGroup **v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  md::LabelDedupingGroup *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _QWORD *v151;
  md::LabelDedupingGroup *v152;
  md::LabelDedupingGroup *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  unint64_t *v165;
  _QWORD *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  md::LabelDedupingGroup *v172;
  md::LabelDedupingGroup *v173;
  md::LabelDedupingGroup **v174;
  unint64_t *v175;
  md::LabelDedupingGroup *v176;
  md::LabelDedupingGroup *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 v182;
  md::LabelDedupingGroup *v183[2];
  char v184;

  if (*((_QWORD *)this + 27) > *((_QWORD *)this + 76))
  {
    md::LabelPool::pruneCachedLabels((uint64_t)this);
    *((_QWORD *)this + 76) = *(_QWORD *)this + *((_QWORD *)this + 27);
  }
  *a1 = 0;
  a1[1] = 0;
  v12 = *(_QWORD *)(*a4 + 72);
  v13 = *a5;
  v15 = (uint64_t **)((char *)this + 232);
  v14 = (char *)*((_QWORD *)this + 29);
  if (v14)
  {
    v16 = (uint64_t **)((char *)this + 232);
    do
    {
      v17 = *((_QWORD *)v14 + 4);
      v19 = v17 == v12;
      v18 = v17 < v12;
      if (v19)
        v18 = *((_DWORD *)v14 + 10) < v13;
      v19 = !v18;
      if (v18)
        v20 = (char **)(v14 + 8);
      else
        v20 = (char **)v14;
      if (v19)
        v16 = (uint64_t **)v14;
      v14 = *v20;
    }
    while (*v20);
    if (v16 != v15)
    {
      v21 = v16[4];
      v19 = v12 == (_QWORD)v21;
      v22 = v12 < (unint64_t)v21;
      if (v19)
        v22 = v13 < *((_DWORD *)v16 + 10);
      if (!v22)
      {
        v63 = (md::LabelBase *)v16[6];
        v62 = (unint64_t *)v16[7];
        if (v62)
        {
          v64 = v62 + 1;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        *a1 = v63;
        a1[1] = (md::LabelBase *)v62;
        return;
      }
    }
  }
  if (!a6)
    return;
  v24 = (uint64_t **)((char *)this + 200);
  v23 = (char *)*((_QWORD *)this + 25);
  if (v23)
  {
    v25 = (uint64_t **)((char *)this + 200);
    do
    {
      v26 = *((_QWORD *)v23 + 4);
      v19 = v26 == v12;
      v27 = v26 < v12;
      if (v19)
        v27 = *((_DWORD *)v23 + 10) < v13;
      v28 = !v27;
      if (v27)
        v29 = (char **)(v23 + 8);
      else
        v29 = (char **)v23;
      if (v28)
        v25 = (uint64_t **)v23;
      v23 = *v29;
    }
    while (*v29);
    if (v25 != v24)
    {
      v30 = v25[4];
      v19 = v12 == (_QWORD)v30;
      v31 = v12 < (unint64_t)v30;
      if (v19)
        v31 = v13 < *((_DWORD *)v25 + 10);
      if (!v31)
      {
        v32 = (std::__shared_weak_count *)v25[7];
        if (v32)
        {
          if (v32->__shared_owners_ != -1)
          {
            v33 = std::__shared_weak_count::lock(v32);
            if (v33)
              v34 = (md::LabelBase *)v25[6];
            else
              v34 = 0;
            *a1 = v34;
            a1[1] = (md::LabelBase *)v33;
            goto LABEL_59;
          }
        }
      }
    }
  }
  v35 = (unint64_t *)operator new(0x538uLL);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = (unint64_t)&off_1E42DDE70;
  v36 = md::Label::Label((uint64_t)(v35 + 3), a3, a4, a5);
  *a1 = (md::LabelBase *)v36;
  a1[1] = (md::LabelBase *)v35;
  v37 = (char *)this + 200;
  v38 = *v24;
  if (*v24)
  {
    while (1)
    {
      while (1)
      {
        v37 = (char *)v38;
        v39 = v38[4];
        v40 = *((_DWORD *)v37 + 10);
        v41 = v13 < v40;
        if (v12 != v39)
          v41 = v12 < v39;
        if (!v41)
          break;
        v38 = *(uint64_t **)v37;
        v24 = (uint64_t **)v37;
        if (!*(_QWORD *)v37)
          goto LABEL_50;
      }
      v42 = v40 < v13;
      if (!(v12 == v39 ? v42 : v39 < v12))
        break;
      v38 = (uint64_t *)*((_QWORD *)v37 + 1);
      if (!v38)
      {
        v24 = (uint64_t **)(v37 + 8);
        goto LABEL_50;
      }
    }
  }
  else
  {
LABEL_50:
    v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 16))(*((_QWORD *)this + 26), 64, 8);
    *(_QWORD *)(v44 + 32) = v12;
    *(_DWORD *)(v44 + 40) = v13;
    *(_QWORD *)(v44 + 48) = 0;
    *(_QWORD *)(v44 + 56) = 0;
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v44 + 8) = 0;
    *(_QWORD *)(v44 + 16) = v37;
    *v24 = (uint64_t *)v44;
    v45 = **((_QWORD **)this + 24);
    v46 = (uint64_t *)v44;
    if (v45)
    {
      *((_QWORD *)this + 24) = v45;
      v46 = *v24;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 25), v46);
    ++*((_QWORD *)this + 27);
    v36 = (uint64_t)*a1;
    v35 = (unint64_t *)a1[1];
    if (!v35)
      goto LABEL_57;
    v37 = (char *)v44;
  }
  v47 = v35 + 2;
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v44 = (uint64_t)v37;
LABEL_57:
  v49 = *(std::__shared_weak_count **)(v44 + 56);
  *(_QWORD *)(v44 + 48) = v36;
  *(_QWORD *)(v44 + 56) = v35;
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
LABEL_59:
  v50 = *v15;
  v51 = (uint64_t *)((char *)this + 232);
  if (*v15)
  {
    while (1)
    {
      while (1)
      {
        v51 = v50;
        v52 = v50[4];
        v53 = *((_DWORD *)v51 + 10);
        v54 = v13 < v53;
        if (v12 != v52)
          v54 = v12 < v52;
        if (!v54)
          break;
        v50 = (uint64_t *)*v51;
        v15 = (uint64_t **)v51;
        if (!*v51)
          goto LABEL_71;
      }
      v55 = v53 < v13;
      v56 = v12 == v52 ? v55 : v52 < v12;
      if (v56 != 1)
        break;
      v50 = (uint64_t *)v51[1];
      if (!v50)
      {
        v15 = (uint64_t **)(v51 + 1);
        goto LABEL_71;
      }
    }
    v57 = (uint64_t)v51;
    v61 = *a1;
    v60 = a1[1];
    if (!v60)
      goto LABEL_82;
  }
  else
  {
LABEL_71:
    v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 30) + 16))(*((_QWORD *)this + 30), 64, 8);
    *(_QWORD *)(v57 + 32) = v12;
    *(_DWORD *)(v57 + 40) = v13;
    *(_QWORD *)(v57 + 48) = 0;
    *(_QWORD *)(v57 + 56) = 0;
    *(_QWORD *)v57 = 0;
    *(_QWORD *)(v57 + 8) = 0;
    *(_QWORD *)(v57 + 16) = v51;
    *v15 = (uint64_t *)v57;
    v58 = **((_QWORD **)this + 28);
    v59 = (uint64_t *)v57;
    if (v58)
    {
      *((_QWORD *)this + 28) = v58;
      v59 = *v15;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 29), v59);
    ++*((_QWORD *)this + 31);
    v61 = *a1;
    v60 = a1[1];
    if (!v60)
      goto LABEL_82;
  }
  v66 = (unint64_t *)((char *)v60 + 8);
  do
    v67 = __ldxr(v66);
  while (__stxr(v67 + 1, v66));
LABEL_82:
  v68 = *(std::__shared_weak_count **)(v57 + 56);
  *(_QWORD *)(v57 + 48) = v61;
  *(_QWORD *)(v57 + 56) = v60;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = *a1;
  if (!*((_BYTE *)*a1 + 1253))
    *((_BYTE *)v71 + 1253) = 1;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 3613))
    goto LABEL_90;
  (*(void (**)(md::LabelDedupingGroup **__return_ptr))(**((_QWORD **)v71 + 1) + 288))(v183);
  v73 = v183[0];
  v72 = (std::__shared_weak_count *)v183[1];
  if (v183[1])
  {
    v74 = (unint64_t *)((char *)v183[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v73)
  {
    v76 = *a1;
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)*a1 + 1) + 288))(&v182);
    v77 = (md::LabelDedupingGroup *)v182;
    v78 = 0x9DDFEA08EB382D69 * (((8 * v182) + 8) ^ DWORD1(v182));
    v79 = 0x9DDFEA08EB382D69 * (DWORD1(v182) ^ (v78 >> 47) ^ v78);
    v80 = v79 ^ (v79 >> 47);
    v81 = 0x9DDFEA08EB382D69 * v80;
    v82 = *((_QWORD *)this + 40);
    if (v82)
    {
      v83 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
      v83.i16[0] = vaddlv_u8(v83);
      if (v83.u32[0] > 1uLL)
      {
        a3 = 0x9DDFEA08EB382D69 * v80;
        if (v81 >= v82)
          a3 = v81 % v82;
      }
      else
      {
        a3 = v81 & (v82 - 1);
      }
      v91 = *(_QWORD **)(*((_QWORD *)this + 39) + 8 * a3);
      if (v91)
      {
        v92 = (_QWORD *)*v91;
        if (v92)
        {
          if (v83.u32[0] < 2uLL)
          {
            while (1)
            {
              v94 = v92[1];
              if (v94 == v81)
              {
                if (v92[2] == (_QWORD)v182)
                  goto LABEL_197;
              }
              else if ((v94 & (v82 - 1)) != a3)
              {
                goto LABEL_125;
              }
              v92 = (_QWORD *)*v92;
              if (!v92)
                goto LABEL_125;
            }
          }
          do
          {
            v93 = v92[1];
            if (v93 == v81)
            {
              if (v92[2] == (_QWORD)v182)
                goto LABEL_197;
            }
            else
            {
              if (v93 >= v82)
                v93 %= v82;
              if (v93 != a3)
                break;
            }
            v92 = (_QWORD *)*v92;
          }
          while (v92);
        }
      }
    }
LABEL_125:
    v95 = (md::LabelDedupingGroup *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 43) + 16))(*((_QWORD *)this + 43), 32, 8);
    v183[0] = v95;
    v183[1] = (md::LabelPool *)((char *)this + 344);
    *(_QWORD *)v95 = 0;
    *((_QWORD *)v95 + 1) = v81;
    v96 = *((_QWORD *)&v182 + 1);
    *((_QWORD *)v95 + 2) = v182;
    *((_QWORD *)v95 + 3) = v96;
    if (v96)
    {
      v97 = (unint64_t *)(v96 + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v184 = 1;
    v99 = (float)(unint64_t)(*((_QWORD *)this + 44) + 1);
    v100 = *((float *)this + 90);
    if (v82 && (float)(v100 * (float)v82) >= v99)
    {
LABEL_187:
      v131 = *(md::LabelDedupingGroup ***)(*((_QWORD *)this + 39) + 8 * a3);
      if (v131)
      {
        *(_QWORD *)v95 = *v131;
      }
      else
      {
        *(_QWORD *)v95 = *((_QWORD *)this + 42);
        *((_QWORD *)this + 42) = v95;
        *(_QWORD *)(*((_QWORD *)this + 39) + 8 * a3) = (char *)this + 336;
        if (!*(_QWORD *)v95)
        {
LABEL_196:
          ++*((_QWORD *)this + 44);
          v77 = (md::LabelDedupingGroup *)v182;
LABEL_197:
          md::LabelBase::setDedupingGroup(v76, v77);
          v133 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v134 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            goto LABEL_200;
          }
          goto LABEL_90;
        }
        v132 = *(_QWORD *)(*(_QWORD *)v95 + 8);
        if ((v82 & (v82 - 1)) != 0)
        {
          if (v132 >= v82)
            v132 %= v82;
        }
        else
        {
          v132 &= v82 - 1;
        }
        v131 = (md::LabelDedupingGroup **)(*((_QWORD *)this + 39) + 8 * v132);
      }
      *v131 = v95;
      goto LABEL_196;
    }
    v101 = 1;
    if (v82 >= 3)
      v101 = (v82 & (v82 - 1)) != 0;
    v102 = v101 | (2 * v82);
    v103 = vcvtps_u32_f32(v99 / v100);
    if (v102 <= v103)
      prime = v103;
    else
      prime = v102;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v82 = *((_QWORD *)this + 40);
    if (prime <= v82)
    {
      if (prime >= v82)
        goto LABEL_174;
      v117 = vcvtps_u32_f32((float)*((unint64_t *)this + 44) / *((float *)this + 90));
      if (v82 < 3 || (v118 = (uint8x8_t)vcnt_s8((int8x8_t)v82), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
      {
        v117 = std::__next_prime(v117);
      }
      else
      {
        v119 = 1 << -(char)__clz(v117 - 1);
        if (v117 >= 2)
          v117 = v119;
      }
      if (prime <= v117)
        prime = v117;
      if (prime >= v82)
      {
        v82 = *((_QWORD *)this + 40);
LABEL_174:
        if ((v82 & (v82 - 1)) != 0)
        {
          if (v81 >= v82)
            a3 = v81 % v82;
          else
            a3 = v81;
        }
        else
        {
          a3 = (v82 - 1) & v81;
        }
        goto LABEL_187;
      }
      if (!prime)
      {
        v136 = *((_QWORD *)this + 39);
        *((_QWORD *)this + 39) = 0;
        if (v136)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v136, 8 * *((_QWORD *)this + 40));
        v82 = 0;
        *((_QWORD *)this + 40) = 0;
        goto LABEL_174;
      }
    }
    v105 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)this + 41) + 16))(*((_QWORD *)this + 41), 8 * prime, 8);
    v106 = *((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = v105;
    if (v106)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v106, 8 * *((_QWORD *)this + 40));
    v107 = 0;
    *((_QWORD *)this + 40) = prime;
    do
      *(_QWORD *)(*((_QWORD *)this + 39) + 8 * v107++) = 0;
    while (prime != v107);
    v108 = (_QWORD *)*((_QWORD *)this + 42);
    if (!v108)
    {
LABEL_173:
      v82 = prime;
      goto LABEL_174;
    }
    v109 = (char *)this + 336;
    v110 = v108[1];
    v111 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v112 = v110 & v111;
      *(_QWORD *)(*((_QWORD *)this + 39) + 8 * v112) = v109;
      for (i = (_QWORD *)*v108; *v108; i = (_QWORD *)*v108)
      {
        v114 = i[1] & v111;
        if (v114 == v112)
        {
          v108 = i;
        }
        else
        {
          v115 = *((_QWORD *)this + 39);
          if (*(_QWORD *)(v115 + 8 * v114))
          {
            *v108 = *i;
            v116 = 8 * v114;
            *i = **(_QWORD **)(*((_QWORD *)this + 39) + v116);
            **(_QWORD **)(*((_QWORD *)this + 39) + v116) = i;
          }
          else
          {
            *(_QWORD *)(v115 + 8 * v114) = v108;
            v108 = i;
            v112 = v114;
          }
        }
      }
      goto LABEL_173;
    }
    if (v110 >= prime)
      v110 %= prime;
    *(_QWORD *)(*((_QWORD *)this + 39) + 8 * v110) = v109;
    v127 = (_QWORD *)*v108;
    if (!*v108)
      goto LABEL_173;
    while (1)
    {
      v129 = v127[1];
      if (v129 >= prime)
        v129 %= prime;
      if (v129 != v110)
      {
        v130 = *((_QWORD *)this + 39);
        if (!*(_QWORD *)(v130 + 8 * v129))
        {
          *(_QWORD *)(v130 + 8 * v129) = v108;
          goto LABEL_178;
        }
        *v108 = *v127;
        v128 = 8 * v129;
        *v127 = **(_QWORD **)(*((_QWORD *)this + 39) + v128);
        **(_QWORD **)(*((_QWORD *)this + 39) + v128) = v127;
        v127 = v108;
      }
      v129 = v110;
LABEL_178:
      v108 = v127;
      v127 = (_QWORD *)*v127;
      v110 = v129;
      if (!v127)
        goto LABEL_173;
    }
  }
  v84 = *a1;
  v85 = *((unsigned __int8 *)*a1 + 38);
  if (v85 != 1)
  {
    if (v85 != 2)
    {
      if (*((_BYTE *)v84 + 1216))
      {
        v124 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v84 + 1) + 472))(*((_QWORD *)v84 + 1), 0);
        v125 = v124;
        if (v124)
        {
          if (*(char *)(v124 + 23) < 0 ? *(_QWORD *)(v124 + 8) : *(unsigned __int8 *)(v124 + 23))
          {
            v183[0] = 0;
            v183[1] = 0;
            v171 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>((_QWORD *)this + 32, v124);
            if (v171)
            {
              v172 = (md::LabelDedupingGroup *)v171[6];
              v173 = (md::LabelDedupingGroup *)v171[7];
              v174 = v183;
            }
            else
            {
              _ZNSt3__111make_sharedB8nn180100IN2md23NamedLabelDedupingGroupEJEvEENS_10shared_ptrIT_EEDpOT0_((md::LabelDedupingGroup **)&v182);
              std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)v183, &v182);
              std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v182);
              *(_QWORD *)&v182 = v125;
              v174 = (md::LabelDedupingGroup **)(std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>,std::tuple<>>((float *)this + 64, v125, (__int128 **)&v182)+ 6);
              v172 = v183[0];
              v173 = v183[1];
            }
            std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(v174, (uint64_t)v172, (uint64_t)v173);
            md::LabelBase::setDedupingGroup(v84, v183[0]);
            std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v183);
          }
        }
      }
      goto LABEL_90;
    }
    v86 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v84 + 1) + 160))(*((_QWORD *)v84 + 1));
    v87 = v86;
    v181 = v86;
    if (!v86)
      goto LABEL_90;
    v183[0] = 0;
    v183[1] = 0;
    v88 = *(int8x8_t *)((char *)this + 376);
    if (!*(_QWORD *)&v88)
      goto LABEL_261;
    v89 = (uint8x8_t)vcnt_s8(v88);
    v89.i16[0] = vaddlv_u8(v89);
    if (v89.u32[0] > 1uLL)
    {
      v90 = v86;
      if (v86 >= *(_QWORD *)&v88)
        v90 = v86 % *(_QWORD *)&v88;
    }
    else
    {
      v90 = (*(_QWORD *)&v88 - 1) & v86;
    }
    v159 = *(_QWORD **)(*((_QWORD *)this + 46) + 8 * v90);
    if (!v159 || (v160 = (_QWORD *)*v159) == 0)
    {
LABEL_261:
      v164 = (char *)operator new(0x68uLL);
      *((_QWORD *)v164 + 1) = 0;
      v165 = (unint64_t *)(v164 + 8);
      *((_QWORD *)v164 + 2) = 0;
      *(_QWORD *)v164 = &off_1E42DD888;
      *(_OWORD *)(v164 + 24) = 0u;
      *(_OWORD *)(v164 + 40) = 0u;
      *(_OWORD *)(v164 + 56) = 0u;
      *(_OWORD *)(v164 + 72) = 0u;
      *(_OWORD *)(v164 + 88) = 0u;
      md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)(v164 + 24));
      *((_QWORD *)v164 + 3) = &off_1E42A5C68;
      v183[0] = (md::LabelDedupingGroup *)(v164 + 24);
      v183[1] = (md::LabelDedupingGroup *)v164;
      *(_QWORD *)&v182 = &v181;
      v166 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,geo::StdAllocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)this + 92, v87, (uint64_t **)&v182);
      do
        v167 = __ldxr(v165);
      while (__stxr(v167 + 1, v165));
      v168 = (std::__shared_weak_count *)v166[4];
      v166[3] = v164 + 24;
      v166[4] = v164;
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      goto LABEL_283;
    }
    if (v89.u32[0] < 2uLL)
    {
      v161 = *(_QWORD *)&v88 - 1;
      while (1)
      {
        v163 = v160[1];
        if (v163 == v86)
        {
          if (v160[2] == v86)
            goto LABEL_279;
        }
        else if ((v163 & v161) != v90)
        {
          goto LABEL_261;
        }
        v160 = (_QWORD *)*v160;
        if (!v160)
          goto LABEL_261;
      }
    }
    while (1)
    {
      v162 = v160[1];
      if (v162 == v86)
      {
        if (v160[2] == v86)
        {
LABEL_279:
          v177 = (md::LabelDedupingGroup *)v160[3];
          v176 = (md::LabelDedupingGroup *)v160[4];
          if (v176)
          {
            v178 = (unint64_t *)((char *)v176 + 8);
            do
              v179 = __ldxr(v178);
            while (__stxr(v179 + 1, v178));
          }
          v183[0] = v177;
          v183[1] = v176;
LABEL_283:
          md::LabelBase::setDedupingGroup(*a1, v183[0]);
          v133 = (std::__shared_weak_count *)v183[1];
          if (v183[1])
          {
            v180 = (unint64_t *)((char *)v183[1] + 8);
            do
              v135 = __ldaxr(v180);
            while (__stlxr(v135 - 1, v180));
            goto LABEL_200;
          }
          goto LABEL_90;
        }
      }
      else
      {
        if (v162 >= *(_QWORD *)&v88)
          v162 %= *(_QWORD *)&v88;
        if (v162 != v90)
          goto LABEL_261;
      }
      v160 = (_QWORD *)*v160;
      if (!v160)
        goto LABEL_261;
    }
  }
  v120 = *(_QWORD *)(*((_QWORD *)v84 + 1) + 72);
  v181 = v120;
  if (!v120)
    goto LABEL_90;
  v183[0] = 0;
  v183[1] = 0;
  v121 = *(int8x8_t *)((char *)this + 432);
  if (v121)
  {
    v122 = (uint8x8_t)vcnt_s8(v121);
    v122.i16[0] = vaddlv_u8(v122);
    if (v122.u32[0] > 1uLL)
    {
      v123 = v120;
      if (v120 >= *(_QWORD *)&v121)
        v123 = v120 % *(_QWORD *)&v121;
    }
    else
    {
      v123 = (*(_QWORD *)&v121 - 1) & v120;
    }
    v137 = *(_QWORD **)(*((_QWORD *)this + 53) + 8 * v123);
    if (v137)
    {
      v138 = (_QWORD *)*v137;
      if (v138)
      {
        if (v122.u32[0] < 2uLL)
        {
          v139 = *(_QWORD *)&v121 - 1;
          while (1)
          {
            v141 = v138[1];
            if (v141 == v120)
            {
              if (v138[2] == v120)
                goto LABEL_274;
            }
            else if ((v141 & v139) != v123)
            {
              goto LABEL_228;
            }
            v138 = (_QWORD *)*v138;
            if (!v138)
              goto LABEL_228;
          }
        }
        do
        {
          v140 = v138[1];
          if (v140 == v120)
          {
            if (v138[2] == v120)
            {
LABEL_274:
              std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(v183, v138[3], v138[4]);
              goto LABEL_275;
            }
          }
          else
          {
            if (v140 >= *(_QWORD *)&v121)
              v140 %= *(_QWORD *)&v121;
            if (v140 != v123)
              break;
          }
          v138 = (_QWORD *)*v138;
        }
        while (v138);
      }
    }
  }
LABEL_228:
  v142 = operator new(0x80uLL);
  v142[1] = 0;
  v142[2] = 0;
  *v142 = &off_1E42DD1F8;
  v143 = md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)(v142 + 3));
  v142[3] = &off_1E42A1FB8;
  v142[13] = *((_QWORD *)v84 + 1);
  v144 = *((_QWORD *)v84 + 2);
  v142[14] = v144;
  if (v144)
  {
    v145 = (unint64_t *)(v144 + 16);
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
  }
  *((_DWORD *)v142 + 30) = 0;
  *(_QWORD *)&v147 = v143;
  *((_QWORD *)&v147 + 1) = v142;
  v148 = (std::__shared_weak_count *)v183[1];
  *(_OWORD *)v183 = v147;
  if (v148)
  {
    v149 = (unint64_t *)&v148->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  *(_QWORD *)&v182 = &v181;
  v151 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,geo::StdAllocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)this + 106, v181, (uint64_t **)&v182);
  v153 = v183[0];
  v152 = v183[1];
  if (v183[1])
  {
    v154 = (unint64_t *)((char *)v183[1] + 8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = (std::__shared_weak_count *)v151[4];
  v151[3] = v153;
  v151[4] = v152;
  if (v156)
  {
    v157 = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
LABEL_275:
  md::LabelBase::setDedupingGroup(*a1, v183[0]);
  v133 = (std::__shared_weak_count *)v183[1];
  if (v183[1])
  {
    v175 = (unint64_t *)((char *)v183[1] + 8);
    do
      v135 = __ldaxr(v175);
    while (__stlxr(v135 - 1, v175));
LABEL_200:
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
LABEL_90:
  *((_BYTE *)this + 758) = 1;
}

void sub_19F1B6AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

_BYTE *md::Label::incTileRefCount(_BYTE *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;

  v1 = (uint64_t)this;
  v2 = this + 1296;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (!v3 && !this[820])
  {
    this[1214] = -1;
    this = (_BYTE *)md::Label::updateStateMachineForStaging((uint64_t)this, 0, 37);
  }
  *(_BYTE *)(v1 + 1261) = 0;
  *(_QWORD *)(v1 + 1224) = 0;
  return this;
}

void md::LabelFeature::dedupingGroup(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::PointLabelFeature::updatePositions(md::PointLabelFeature *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *zone;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  geo::read_write_lock *v48;
  const char *v49;
  malloc_zone_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD **v65;
  _QWORD **v66;
  unsigned __int8 v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  md::PointLabelFeatureElement *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  geo::read_write_lock *v76;
  const char *v77;
  malloc_zone_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  geo::read_write_lock *v84;
  const char *v85;
  malloc_zone_t *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  __int128 v90;
  unsigned __int8 *v91;
  _BYTE v92[24];
  uint64_t v93;
  _BYTE buf[12];
  __int16 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)this + 312);
  if ((v1 & 1) != 0)
  {
    memset(v92, 0, sizeof(v92));
    {
      v87 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v87, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v93 = mdm::Allocator::instance(void)::alloc;
    std::mutex::lock((std::mutex *)((char *)this + 248));
    v4 = (unsigned __int8 *)*((_QWORD *)this + 40);
    v5 = *(_QWORD *)&v92[16];
    v90 = *(_OWORD *)((char *)this + 328);
    v6 = *(_OWORD *)v92;
    *(_QWORD *)v92 = v4;
    *((_OWORD *)this + 20) = v6;
    *(_OWORD *)&v92[8] = v90;
    *((_QWORD *)this + 42) = v5;
    atomic_store(0, (unsigned __int8 *)this + 312);
    std::mutex::unlock((std::mutex *)((char *)this + 248));
    v7 = v4;
    v88 = (unsigned __int8 *)v90;
    if (v4 != (unsigned __int8 *)v90)
    {
      v89 = (uint64_t *)((char *)this + 464);
      do
      {
        v91 = v7;
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = *((_QWORD *)v7 + 5);
          v10 = (*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 160))(this);
          if (md::DebugStreamingPOIFeatureID)
            v11 = md::DebugStreamingPOIFeatureID == v10;
          else
            v11 = 0;
          if (v11)
          {
            if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
            v12 = (id)GEOGetVectorKitStreamingPOILog_log;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              v13 = *((_QWORD *)this + 55);
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v13;
              v95 = 2048;
              v96 = v9;
              _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_DEBUG, "PointLabelFeature::setPoiRemoveVersion, oldVersion=%llu, newVersion=%llu", buf, 0x16u);
            }

          }
          *((_QWORD *)this + 55) = v9;
        }
        else if (v8 == 1)
        {
          v14 = (*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 160))(this);
          if (md::DebugStreamingPOIFeatureID)
            v15 = md::DebugStreamingPOIFeatureID == v14;
          else
            v15 = 0;
          if (v15)
          {
            if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
            v16 = (id)GEOGetVectorKitStreamingPOILog_log;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              v17 = *((_QWORD *)v91 + 2);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v17;
              _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_DEBUG, "PointLabelFeature::removeTileElements, geoTile=%p", buf, 0xCu);
            }

          }
          v18 = (uint64_t *)*((_QWORD *)this + 57);
          if (v18 != v89)
          {
            do
            {
              v19 = (uint64_t *)v18[5];
              v20 = (uint64_t *)v18[6];
              v21 = *((_QWORD *)v91 + 2);
              v22 = (std::__shared_weak_count *)*((_QWORD *)v91 + 3);
              if (v22)
              {
                p_shared_owners = (unint64_t *)&v22->__shared_owners_;
                do
                  v24 = __ldxr(p_shared_owners);
                while (__stxr(v24 + 1, p_shared_owners));
              }
              if (v19 != v20)
              {
                while (1)
                {
                  v25 = *v19 ? *v19 + 8 : 0;
                  if (*(_QWORD *)(v25 + 8) == v21)
                    break;
                  if (++v19 == v20)
                  {
                    v19 = v20;
                    goto LABEL_67;
                  }
                }
                if (v19 != v20)
                {
                  for (i = v19 + 1; i != v20; ++i)
                  {
                    v27 = *i;
                    v28 = *i + 8;
                    if (!*i)
                      v28 = 0;
                    if (*(_QWORD *)(v28 + 8) != v21)
                    {
                      v29 = (_QWORD *)*v19;
                      if (*v19)
                      {
                        v11 = (*v29)-- == 1;
                        if (v11)
                        {
                          v30 = (std::__shared_weak_count *)v29[3];
                          if (v30)
                          {
                            v31 = (unint64_t *)&v30->__shared_owners_;
                            do
                              v32 = __ldaxr(v31);
                            while (__stlxr(v32 - 1, v31));
                            if (!v32)
                            {
                              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                              std::__shared_weak_count::__release_weak(v30);
                            }
                          }
                          if ((v33 & 1) == 0
                          {
                            v34 = operator new();
                            *(_QWORD *)(v34 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v34 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v34 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v34 = &off_1E42B5668;
                            *(_QWORD *)(v34 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v34 + 72) = 0u;
                            *(_OWORD *)(v34 + 88) = 0u;
                            *(_OWORD *)(v34 + 104) = 0u;
                            *(_OWORD *)(v34 + 120) = 0u;
                            *(_OWORD *)(v34 + 136) = 0u;
                            *(_OWORD *)(v34 + 152) = 0u;
                            *(_OWORD *)(v34 + 168) = 0u;
                            *(_OWORD *)(v34 + 184) = 0u;
                            *(_OWORD *)(v34 + 200) = 0u;
                            *(_OWORD *)(v34 + 216) = 0u;
                            *(_OWORD *)(v34 + 232) = 0u;
                            *(_QWORD *)(v34 + 248) = 0;
                            *(_OWORD *)(v34 + 56) = 0u;
                            v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
                            if ((_DWORD)v35)
                              geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
                            zone = malloc_create_zone(0, 0);
                            *(_QWORD *)(v34 + 48) = zone;
                            malloc_set_zone_name(zone, "VectorKitLabels");
                            *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v34;
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, *v19, 152);
                          *v19 = 0;
                          v27 = *i;
                        }
                      }
                      *v19++ = v27;
                      *i = 0;
                    }
                  }
                }
              }
LABEL_67:
              if (v22)
              {
                v38 = (unint64_t *)&v22->__shared_owners_;
                do
                  v39 = __ldaxr(v38);
                while (__stlxr(v39 - 1, v38));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              v40 = (uint64_t *)v18[6];
              if (v19 != v40)
              {
                while (v40 != v19)
                {
                  v42 = (_QWORD *)*--v40;
                  v41 = v42;
                  if (v42)
                  {
                    v11 = (*v41)-- == 1;
                    if (v11)
                    {
                      v43 = (std::__shared_weak_count *)v41[3];
                      if (v43)
                      {
                        v44 = (unint64_t *)&v43->__shared_owners_;
                        do
                          v45 = __ldaxr(v44);
                        while (__stlxr(v45 - 1, v44));
                        if (!v45)
                        {
                          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                          std::__shared_weak_count::__release_weak(v43);
                        }
                      }
                      if ((v46 & 1) == 0
                      {
                        v47 = operator new();
                        *(_QWORD *)(v47 + 16) = 0x5ED09DD50000000FLL;
                        *(_QWORD *)(v47 + 24) = "VectorKitLabels";
                        *(_OWORD *)(v47 + 32) = xmmword_19FFB2E80;
                        *(_QWORD *)v47 = &off_1E42B5668;
                        *(_QWORD *)(v47 + 8) = "VectorKitLabels";
                        *(_OWORD *)(v47 + 72) = 0u;
                        *(_OWORD *)(v47 + 88) = 0u;
                        *(_OWORD *)(v47 + 104) = 0u;
                        *(_OWORD *)(v47 + 120) = 0u;
                        *(_OWORD *)(v47 + 136) = 0u;
                        *(_OWORD *)(v47 + 152) = 0u;
                        *(_OWORD *)(v47 + 168) = 0u;
                        *(_OWORD *)(v47 + 184) = 0u;
                        *(_OWORD *)(v47 + 200) = 0u;
                        *(_OWORD *)(v47 + 216) = 0u;
                        *(_OWORD *)(v47 + 232) = 0u;
                        *(_QWORD *)(v47 + 248) = 0;
                        *(_OWORD *)(v47 + 56) = 0u;
                        v48 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v47 + 56), 0);
                        if ((_DWORD)v48)
                          geo::read_write_lock::logFailure(v48, (uint64_t)"initialization", v49);
                        v50 = malloc_create_zone(0, 0);
                        *(_QWORD *)(v47 + 48) = v50;
                        malloc_set_zone_name(v50, "VectorKitLabels");
                        *(_QWORD *)(v47 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                        mdm::Allocator::instance(void)::alloc = v47;
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 40))(mdm::Allocator::instance(void)::alloc, *v40, 152);
                      *v40 = 0;
                    }
                  }
                }
                v18[6] = (uint64_t)v19;
              }
              v51 = (uint64_t *)v18[5];
              if (v51 != v19)
              {
                v52 = *v51 ? *v51 + 8 : 0;
                if (*(_QWORD *)(v52 + 72) != *((_QWORD *)this + 54))
                {
                  v59 = (*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 160))(this);
                  if (md::DebugStreamingPOIFeatureID && md::DebugStreamingPOIFeatureID == v59)
                  {
                    if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
                      dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
                    v60 = (id)GEOGetVectorKitStreamingPOILog_log;
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                    {
                      v61 = *((_QWORD *)this + 54);
                      if (*v51)
                        v62 = *v51 + 8;
                      else
                        v62 = 0;
                      v63 = *(_QWORD *)(v62 + 72);
                      *(_DWORD *)buf = 134218240;
                      *(_QWORD *)&buf[4] = v61;
                      v95 = 2048;
                      v96 = v63;
                      _os_log_impl(&dword_19F029000, v60, OS_LOG_TYPE_DEBUG, "PointLabelFeature::removeTile, unexpire elements oldVersion=%llu -> updateVersion=%llu", buf, 0x16u);
                    }

                  }
                  if (*v51)
                    v64 = *v51 + 8;
                  else
                    v64 = 0;
                  *((_QWORD *)this + 54) = *(_QWORD *)(v64 + 72);
                  v65 = (_QWORD **)v18[5];
                  v66 = (_QWORD **)v18[6];
                  while (v65 != v66)
                  {
                    v68 = *v65;
                    *(_QWORD *)buf = v68;
                    if (v68)
                    {
                      v69 = (*v68)++;
                      if (v68[10] != *((_QWORD *)this + 54))
                      {
                        *v68 = v69;
                        if (!v69)
                        {
                          v79 = (std::__shared_weak_count *)v68[3];
                          if (v79)
                          {
                            v80 = (unint64_t *)&v79->__shared_owners_;
                            do
                              v81 = __ldaxr(v80);
                            while (__stlxr(v81 - 1, v80));
                            if (!v81)
                            {
                              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                              std::__shared_weak_count::__release_weak(v79);
                            }
                          }
                          if ((v82 & 1) == 0
                          {
                            v83 = operator new();
                            *(_QWORD *)(v83 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v83 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v83 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v83 = &off_1E42B5668;
                            *(_QWORD *)(v83 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v83 + 72) = 0u;
                            *(_OWORD *)(v83 + 88) = 0u;
                            *(_OWORD *)(v83 + 104) = 0u;
                            *(_OWORD *)(v83 + 120) = 0u;
                            *(_OWORD *)(v83 + 136) = 0u;
                            *(_OWORD *)(v83 + 152) = 0u;
                            *(_OWORD *)(v83 + 168) = 0u;
                            *(_OWORD *)(v83 + 184) = 0u;
                            *(_OWORD *)(v83 + 200) = 0u;
                            *(_OWORD *)(v83 + 216) = 0u;
                            *(_OWORD *)(v83 + 232) = 0u;
                            *(_QWORD *)(v83 + 248) = 0;
                            *(_OWORD *)(v83 + 56) = 0u;
                            v84 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v83 + 56), 0);
                            if ((_DWORD)v84)
                              geo::read_write_lock::logFailure(v84, (uint64_t)"initialization", v85);
                            v86 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v83 + 48) = v86;
                            malloc_set_zone_name(v86, "VectorKitLabels");
                            *(_QWORD *)(v83 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v83;
                          }
                          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)buf, 152);
                        }
                        break;
                      }
                      v70 = (uint64_t)(v68 + 1);
                    }
                    else
                    {
                      if (MEMORY[0x48] != *((_QWORD *)this + 54))
                        break;
                      v70 = 0;
                    }
                    md::PointLabelFeatureElement::updateText(v70, this, *((unsigned __int8 *)this + 649));
                    if (v68)
                      v71 = (md::PointLabelFeatureElement *)(v68 + 1);
                    else
                      v71 = 0;
                    md::PointLabelFeatureElement::updateLabelPlacements(v71, this);
                    if (v68)
                    {
                      v11 = (*v68)-- == 1;
                      if (v11)
                      {
                        v72 = (std::__shared_weak_count *)v68[3];
                        if (v72)
                        {
                          v73 = (unint64_t *)&v72->__shared_owners_;
                          do
                            v74 = __ldaxr(v73);
                          while (__stlxr(v74 - 1, v73));
                          if (!v74)
                          {
                            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                            std::__shared_weak_count::__release_weak(v72);
                          }
                        }
                        if ((v67 & 1) == 0
                        {
                          v75 = operator new();
                          *(_QWORD *)(v75 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v75 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v75 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v75 = &off_1E42B5668;
                          *(_QWORD *)(v75 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v75 + 72) = 0u;
                          *(_OWORD *)(v75 + 88) = 0u;
                          *(_OWORD *)(v75 + 104) = 0u;
                          *(_OWORD *)(v75 + 120) = 0u;
                          *(_OWORD *)(v75 + 136) = 0u;
                          *(_OWORD *)(v75 + 152) = 0u;
                          *(_OWORD *)(v75 + 168) = 0u;
                          *(_OWORD *)(v75 + 184) = 0u;
                          *(_OWORD *)(v75 + 200) = 0u;
                          *(_OWORD *)(v75 + 216) = 0u;
                          *(_OWORD *)(v75 + 232) = 0u;
                          *(_QWORD *)(v75 + 248) = 0;
                          *(_OWORD *)(v75 + 56) = 0u;
                          v76 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v75 + 56), 0);
                          if ((_DWORD)v76)
                            geo::read_write_lock::logFailure(v76, (uint64_t)"initialization", v77);
                          v78 = malloc_create_zone(0, 0);
                          *(_QWORD *)(v75 + 48) = v78;
                          malloc_set_zone_name(v78, "VectorKitLabels");
                          *(_QWORD *)(v75 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v75;
                        }
                        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)buf, 152);
                      }
                    }
                    ++v65;
                  }
                }
              }
              v53 = (uint64_t *)v18[1];
              if (v18[5] == v18[6])
              {
                v55 = (uint64_t *)v18[1];
                v56 = v18;
                if (v53)
                {
                  do
                  {
                    v54 = v55;
                    v55 = (uint64_t *)*v55;
                  }
                  while (v55);
                }
                else
                {
                  do
                  {
                    v54 = (uint64_t *)v56[2];
                    v11 = *v54 == (_QWORD)v56;
                    v56 = v54;
                  }
                  while (!v11);
                }
                v57 = v18;
                if (v53)
                {
                  do
                  {
                    v58 = v53;
                    v53 = (uint64_t *)*v53;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    v58 = (uint64_t *)v57[2];
                    v11 = *v58 == (_QWORD)v57;
                    v57 = v58;
                  }
                  while (!v11);
                }
                if (*((uint64_t **)this + 57) == v18)
                  *((_QWORD *)this + 57) = v58;
                --*((_QWORD *)this + 60);
                std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 58), v18);
                *(_QWORD *)buf = v18 + 5;
                std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);
                (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 59) + 40))(*((_QWORD *)this + 59), v18, 128);
              }
              else if (v53)
              {
                do
                {
                  v54 = v53;
                  v53 = (uint64_t *)*v53;
                }
                while (v53);
              }
              else
              {
                do
                {
                  v54 = (uint64_t *)v18[2];
                  v11 = *v54 == (_QWORD)v18;
                  v18 = v54;
                }
                while (!v11);
              }
              v18 = v54;
            }
            while (v54 != v89);
          }
        }
        else if (!*v7)
        {
          (*(void (**)(md::PointLabelFeature *, unsigned __int8 *, _QWORD))(*(_QWORD *)this + 760))(this, v7 + 8, v7[32]);
        }
        v7 = v91 + 48;
      }
      while (v91 + 48 != v88);
      v7 = *(unsigned __int8 **)v92;
    }
    if (v7)
    {
      std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::__clear[abi:nn180100]((uint64_t *)v92);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v93 + 40))(v93, *(_QWORD *)v92, *(_QWORD *)&v92[16] - *(_QWORD *)v92);
    }
  }
}

void sub_19F1B7994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL md::PointLabelFeatureBase::setFlexZone(md::PointLabelFeatureBase *this, unsigned __int8 a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 244);
  if (v2 != a2)
    *((_BYTE *)this + 244) = a2;
  return v2 != a2;
}

uint64_t md::LabelNavTrafficSupport::externalTrafficIncidentFeatures(md::LabelNavTrafficSupport *this)
{
  return (uint64_t)this + 72;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::externalRouteWaypointFeatures(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 7) + 88;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::routeAnnotationFeatures(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 8) + 112;
}

uint64_t md::NullARWalkingLabelsStateDelegate::arWalkingStorefrontFeatures(md::NullARWalkingLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullARWalkingLabelsStateDelegate::arWalkingManeuverFeatures(md::NullARWalkingLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullARWalkingLabelsStateDelegate::arWalkingContinueFeatures(md::NullARWalkingLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullARWalkingLabelsStateDelegate::arWalkingArrivalFeatures(md::NullARWalkingLabelsStateDelegate *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'md::MapStandardLabeler::transitSupport(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 47);
}

float md::DaVinciGroundTileData::_edgeSmoothingAngleForZ(md::DaVinciGroundTileData *this)
{
  void *v1;
  unsigned int v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "daVinciSmoothEdgeMinZ");
  v3 = objc_msgSend(v1, "daVinciSmoothEdgeMaxZ");
  objc_msgSend(v1, "daVinciSmoothEdgeMinZAngle");
  v5 = v4;
  objc_msgSend(v1, "daVinciSmoothEdgeMaxZAngle");
  v7 = (float)(v5
             + (float)((float)(v6 - v5)
                     * fminf(fmaxf((float)(17.0 - (float)v2) / (float)((float)v3 - (float)v2), 0.0), 1.0)))
     * 0.017453;

  return v7;
}

void sub_19F1B7B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelFeaturePool::addPointFeatures(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t **a6, int a7, char a8)
{
  unsigned __int8 v12;
  float *v13;
  unint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  BOOL v25;
  NSObject *v26;
  std::string *p_p;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  md::PointLabelFeature *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  md::PointLabelFeature *v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int8x8_t v60;
  uint8x8_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *p_shared_weak_owners;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  _BYTE *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t **v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v118;
  _QWORD *v119;
  float *v120;
  uint64_t v121;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  std::string __p;
  _BYTE buf[12];
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  int v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v118 = *a5;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v13 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v115 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v115, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v128 = mdm::Allocator::instance(void)::alloc;
  v125 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
  v127 = v125 + 768;
  v119 = 0;
  v14 = 0;
  v116 = (_QWORD *)(a1 + 456);
  v15 = a6 + 1;
  v120 = (float *)(a1 + 344);
  v121 = a1;
  while (1)
  {
    v126 = v125;
    std::mutex::lock((std::mutex *)a1);
    if (v119)
      goto LABEL_6;
    v16 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v116, *a2);
    if (!v16)
      break;
    v119 = v16 + 3;
LABEL_6:
    v18 = v125;
    v17 = v126;
    if (0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) <= 0x1F && v14 < a4)
    {
      while (a7 == 17)
      {
        v21 = a3[3];
        if (v21)
        {
          v22 = *(unsigned __int8 *)(v21 + 33);
          if (*(_BYTE *)(v21 + 33))
          {
            v23 = *(_DWORD **)v21;
            if (*v23 != 79)
            {
              v24 = 0;
              v68 = v23 + 2;
              while (v22 - 1 != v24)
              {
                v69 = *v68;
                v68 += 2;
                ++v24;
                if (v69 == 79)
                {
                  if (v24 >= v22)
                    goto LABEL_14;
                  goto LABEL_23;
                }
              }
              goto LABEL_14;
            }
            v24 = 0;
LABEL_23:
            if (LOWORD(v23[2 * v24 + 1]) == 1)
              break;
          }
        }
LABEL_14:
        ++v14;
        a3 += 28;
        if (0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3) > 0x1F || v14 >= a4)
          goto LABEL_11;
      }
      if (md::DebugStreamingPOIFeatureID)
        v25 = md::DebugStreamingPOIFeatureID == a3[5];
      else
        v25 = 0;
      if (v25)
      {
        if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
        v26 = (id)GEOGetVectorKitStreamingPOILog_log;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          md::HighlightHelper::debugTileToString(&__p, (const QuadTile *)(a5 + 1));
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v28 = a5[4];
          v29 = a5[5];
          v30 = *((unsigned __int8 *)a5 + 90);
          v31 = a3[22];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = p_p;
          v131 = 2048;
          v132 = v28;
          v133 = 2048;
          v134 = v29;
          v135 = 1024;
          v136 = v30;
          v137 = 2048;
          v138 = v31;
          _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::addPointFeature tile=(%s) geo[%p] label[%p] isPreTile=%i version=%llu", buf, 0x30u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }

      }
      *(_QWORD *)buf = 0;
      {
        v113 = operator new();
        *((_QWORD *)v13 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v113, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v33 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v13 + 299) + 16))(*((_QWORD *)v13 + 299), 104, 8);
      *(_QWORD *)buf = v33;
      *v33 = 1;
      md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v33 + 1), a3, a8);
      *(_QWORD *)buf = v33;
      v34 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(v120, (uint64_t)buf, (_QWORD **)buf);
      *((_BYTE *)a5 + 89) = v35;
      if (v35)
      {
        {
          v114 = operator new();
          *((_QWORD *)v13 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v114, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v37 = *((_QWORD *)v13 + 299);
        v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16);
        if (a7 == 17)
        {
          v39 = (_QWORD *)v38(v37, 704, 8);
          *v39 = &off_1E42DCAC0;
          v39[1] = 0;
          v39[2] = 0;
          v39[3] = v37;
          v40 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v39 + 4), (GeoCodecsPointFeature *)a3, (const md::LabelFeatureCreationParams *)a5);
          v39[4] = &off_1E429D3A0;
          if (*(_QWORD *)buf)
            v41 = *(_QWORD *)buf + 8;
          else
            v41 = 0;
          v42 = *(std::__shared_weak_count **)(v41 + 16);
          *(_QWORD *)(v41 + 8) = v40;
          *(_QWORD *)(v41 + 16) = v39;
          if (v42)
          {
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
LABEL_60:
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
        else
        {
          v50 = (_QWORD *)v38(*((_QWORD *)v13 + 299), 704, 8);
          *v50 = &off_1E42DB908;
          v50[1] = 0;
          v50[2] = 0;
          v50[3] = v37;
          v51 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v50 + 4), (GeoCodecsPointFeature *)a3, (const md::LabelFeatureCreationParams *)a5);
          if (*(_QWORD *)buf)
            v52 = *(_QWORD *)buf + 8;
          else
            v52 = 0;
          v42 = *(std::__shared_weak_count **)(v52 + 16);
          *(_QWORD *)(v52 + 8) = v51;
          *(_QWORD *)(v52 + 16) = v50;
          if (v42)
          {
            v53 = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldaxr(v53);
            while (__stlxr(v44 - 1, v53));
            goto LABEL_60;
          }
        }
        if (*(_QWORD *)buf)
          v54 = *(_QWORD *)buf + 8;
        else
          v54 = 0;
        v55 = *(_QWORD *)(v54 + 8);
        *(_QWORD *)(v55 + 152) = v54;
        v56 = *(_QWORD *)(a1 + 672) + 1;
        *(_QWORD *)(a1 + 672) = v56;
        *(_QWORD *)(v55 + 72) = v56;
        *(_BYTE *)(v55 + 147) = a8;
        v57 = atomic_load((unsigned __int8 *)(*a5 + 3394));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 528))(v55, v57);
        v49 = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
          v58 = *(_QWORD *)buf + 8;
        else
          v58 = 0;
        v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 8) + 160))(*(_QWORD *)(v58 + 8));
        v60 = *(int8x8_t *)(a1 + 520);
        if (v60)
        {
          v61 = (uint8x8_t)vcnt_s8(v60);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            v62 = v59;
            if (v59 >= *(_QWORD *)&v60)
              v62 = v59 % *(_QWORD *)&v60;
          }
          else
          {
            v62 = (*(_QWORD *)&v60 - 1) & v59;
          }
          v63 = *(_QWORD **)(*(_QWORD *)(a1 + 512) + 8 * v62);
          if (v63)
          {
            v64 = (_QWORD *)*v63;
            if (v64)
            {
              if (v61.u32[0] < 2uLL)
              {
                v65 = *(_QWORD *)&v60 - 1;
                while (1)
                {
                  v67 = v64[1];
                  if (v67 == v59)
                  {
                    if (v64[2] == v59)
                      goto LABEL_94;
                  }
                  else if ((v67 & v65) != v62)
                  {
                    goto LABEL_95;
                  }
                  v64 = (_QWORD *)*v64;
                  if (!v64)
                    goto LABEL_95;
                }
              }
              do
              {
                v66 = v64[1];
                if (v66 == v59)
                {
                  if (v64[2] == v59)
                  {
LABEL_94:
                    md::PointLabelFeature::setPOIUpdateRemoveVersion(*(int64x2_t **)(v58 + 8), v64[3]);
                    break;
                  }
                }
                else
                {
                  if (v66 >= *(_QWORD *)&v60)
                    v66 %= *(_QWORD *)&v60;
                  if (v66 != v62)
                    break;
                }
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
          }
        }
      }
      else
      {
        v45 = v34;
        v46 = (_QWORD *)v34[2];
        if (v46)
          ++*v46;
        geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(buf);
        v47 = v45[2];
        *(_QWORD *)buf = v47;
        if (v47)
          v48 = (_QWORD *)(v47 + 8);
        else
          v48 = 0;
        md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v48, a3);
        v49 = *(_QWORD *)buf;
      }
LABEL_95:
      v70 = v49 + 8;
      if (!v49)
        v70 = 0;
      md::PointLabelFeature::addPointFeature(*(md::PointLabelFeature **)(v70 + 8), (GeoCodecsPointFeature *)a3, (const md::LabelFeatureCreationParams *)a5);
      std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((unint64_t)(v119 + 35), *(uint64_t *)buf, (_QWORD **)buf);
      if (*(_QWORD *)buf)
        v71 = *(_QWORD *)buf + 8;
      else
        v71 = 0;
      v73 = *(_QWORD *)(v71 + 8);
      v72 = *(std::__shared_weak_count **)(v71 + 16);
      if (v72)
      {
        v74 = (unint64_t *)&v72->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
        geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(buf);
        p_shared_weak_owners = (unint64_t *)&v72->__shared_weak_owners_;
        do
          v77 = __ldxr(p_shared_weak_owners);
        while (__stxr(v77 + 1, p_shared_weak_owners));
      }
      else
      {
        geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(buf);
      }
      v78 = *v15;
      v79 = (uint64_t *)(a6 + 1);
      v80 = (uint64_t *)(a6 + 1);
      if (*v15)
      {
        while (1)
        {
          while (1)
          {
            v80 = v78;
            v81 = v78[5];
            if ((unint64_t)v72 >= v81)
              break;
            v78 = (uint64_t *)*v80;
            v79 = v80;
            if (!*v80)
              goto LABEL_114;
          }
          if (v81 >= (unint64_t)v72)
            break;
          v78 = (uint64_t *)v80[1];
          if (!v78)
          {
            v79 = v80 + 1;
            goto LABEL_114;
          }
        }
        a1 = v121;
        v13 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        if (v72)
          std::__shared_weak_count::__release_weak(v72);
        if (*((_BYTE *)a5 + 89))
          goto LABEL_134;
LABEL_169:
        if (!v72)
        {
LABEL_13:
          v18 = v125;
          v17 = v126;
          goto LABEL_14;
        }
      }
      else
      {
LABEL_114:
        v82 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a6[2] + 16))(a6[2], 48, 8);
        *(_QWORD *)(v82 + 32) = v73;
        *(_QWORD *)(v82 + 40) = v72;
        *(_QWORD *)v82 = 0;
        *(_QWORD *)(v82 + 8) = 0;
        *(_QWORD *)(v82 + 16) = v80;
        *v79 = v82;
        v83 = (uint64_t *)**a6;
        if (v83)
        {
          *a6 = v83;
          v82 = *v79;
        }
        v84 = *v15;
        v25 = v82 == (_QWORD)*v15;
        *(_BYTE *)(v82 + 24) = v25;
        a1 = v121;
        v13 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        if (!v25)
        {
          do
          {
            v85 = *(uint64_t **)(v82 + 16);
            if (*((_BYTE *)v85 + 24))
              break;
            v86 = v85[2];
            v87 = *(uint64_t **)v86;
            if (*(uint64_t **)v86 == v85)
            {
              v90 = *(_QWORD *)(v86 + 8);
              if (!v90 || (v91 = *(unsigned __int8 *)(v90 + 24), v88 = (_BYTE *)(v90 + 24), v91))
              {
                if (*v85 == v82)
                {
                  v92 = *(uint64_t ***)(v82 + 16);
                }
                else
                {
                  v92 = (uint64_t **)v85[1];
                  v93 = *v92;
                  v85[1] = (uint64_t)*v92;
                  if (v93)
                  {
                    v93[2] = (uint64_t)v85;
                    v86 = v85[2];
                  }
                  v92[2] = (uint64_t *)v86;
                  *(_QWORD *)(v85[2] + 8 * (*(_QWORD *)v85[2] != (_QWORD)v85)) = v92;
                  *v92 = v85;
                  v85[2] = (uint64_t)v92;
                  v86 = (uint64_t)v92[2];
                  v85 = *(uint64_t **)v86;
                }
                *((_BYTE *)v92 + 24) = 1;
                *(_BYTE *)(v86 + 24) = 0;
                v110 = v85[1];
                *(_QWORD *)v86 = v110;
                if (v110)
                  *(_QWORD *)(v110 + 16) = v86;
                v85[2] = *(_QWORD *)(v86 + 16);
                *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v85;
                v85[1] = v86;
                goto LABEL_167;
              }
            }
            else if (!v87 || (v89 = *((unsigned __int8 *)v87 + 24), v88 = v87 + 3, v89))
            {
              if (*v85 == v82)
              {
                v108 = *(_QWORD *)(v82 + 8);
                *v85 = v108;
                if (v108)
                {
                  *(_QWORD *)(v108 + 16) = v85;
                  v86 = v85[2];
                }
                *(_QWORD *)(v82 + 16) = v86;
                *(_QWORD *)(v85[2] + 8 * (*(_QWORD *)v85[2] != (_QWORD)v85)) = v82;
                *(_QWORD *)(v82 + 8) = v85;
                v85[2] = v82;
                v86 = *(_QWORD *)(v82 + 16);
              }
              else
              {
                v82 = *(_QWORD *)(v82 + 16);
              }
              *(_BYTE *)(v82 + 24) = 1;
              *(_BYTE *)(v86 + 24) = 0;
              v85 = *(uint64_t **)(v86 + 8);
              v109 = *v85;
              *(_QWORD *)(v86 + 8) = *v85;
              if (v109)
                *(_QWORD *)(v109 + 16) = v86;
              v85[2] = *(_QWORD *)(v86 + 16);
              *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v85;
              *v85 = v86;
LABEL_167:
              *(_QWORD *)(v86 + 16) = v85;
              break;
            }
            *((_BYTE *)v85 + 24) = 1;
            v82 = v86;
            *(_BYTE *)(v86 + 24) = v86 == (_QWORD)v84;
            *v88 = 1;
          }
          while ((uint64_t *)v86 != v84);
        }
        a6[3] = (uint64_t *)((char *)a6[3] + 1);
        if (!*((_BYTE *)a5 + 89))
          goto LABEL_169;
LABEL_134:
        v94 = v126;
        if (v126 >= v127)
        {
          v96 = 0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3);
          v97 = v96 + 1;
          if (v96 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v127 - v125) >> 3) > v97)
            v97 = 0x5555555555555556 * ((v127 - v125) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v127 - v125) >> 3) >= 0x555555555555555)
            v98 = 0xAAAAAAAAAAAAAAALL;
          else
            v98 = v97;
          if (v98)
          {
            v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, 24 * v98, 8);
            v100 = (char *)(v99 + 24 * v96);
            v101 = (char *)(v99 + 24 * v98);
            if (v99)
            {
              *(_QWORD *)v100 = v73;
              v102 = v99 + 24 * v96;
              *(_QWORD *)(v102 + 8) = 0;
              *(_QWORD *)(v102 + 16) = 0;
            }
          }
          else
          {
            v101 = 0;
            v100 = (char *)(8 * ((v126 - v125) >> 3));
          }
          v13 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
          v104 = v125;
          v103 = v126;
          v105 = v100;
          if (v126 != v125)
          {
            do
            {
              v106 = *(_OWORD *)(v103 - 24);
              *((_QWORD *)v105 - 1) = *((_QWORD *)v103 - 1);
              *(_OWORD *)(v105 - 24) = v106;
              v105 -= 24;
              v103 -= 24;
            }
            while (v103 != v104);
            v103 = v125;
          }
          v95 = v100 + 24;
          v125 = v105;
          v126 = v100 + 24;
          v107 = v127;
          v127 = v101;
          if (v103)
            (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v128 + 40))(v128, v103, v107 - v103);
        }
        else
        {
          if (v126)
          {
            *((_QWORD *)v126 + 1) = 0;
            *((_QWORD *)v94 + 2) = 0;
            *(_QWORD *)v94 = v73;
          }
          v95 = v94 + 24;
        }
        v126 = v95;
        a1 = v121;
        if (!v72)
          goto LABEL_13;
      }
      v111 = (unint64_t *)&v72->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      goto LABEL_13;
    }
LABEL_11:
    md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v118 + 296), &v125, 1u, 1, *(_QWORD *)(*(_QWORD *)(v118 + 152) + 32));
    std::mutex::unlock((std::mutex *)a1);
    if (v14 >= a4)
      goto LABEL_179;
  }
  std::mutex::unlock((std::mutex *)a1);
LABEL_179:
  if (v125)
  {
    v126 = v125;
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v128 + 40))(v128, v125, v127 - v125);
  }
}

void sub_19F1B8750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (!a24)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a27 + 40))(a27, a24, a26 - a24);
  _Unwind_Resume(exception_object);
}

uint64_t md::PointLabelFeature::setMzrOverrideMode(uint64_t result, unsigned __int8 a2)
{
  atomic_store(a2, (unsigned __int8 *)(result + 653));
  return result;
}

void md::PointLabelFeature::addPointFeature(md::PointLabelFeature *this, GeoCodecsPointFeature *a2, const md::LabelFeatureCreationParams *a3)
{
  unsigned __int8 v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float v21;
  int v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  double __b;
  int64x2_t v56;
  uint64_t v57;
  _QWORD *v58;

  {
    v52 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v52, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
  v8 = v7;
  v54 = v7;
  *v7 = 1;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = 0;
  if (a2)
  {
    v7[1] = a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    if (v9 && (v9 = std::__shared_weak_count::lock(v9)) != 0)
      v10 = *(_QWORD *)a2;
    else
      v10 = 0;
    v11 = (std::__shared_weak_count *)v8[3];
    v8[2] = v10;
    v8[3] = v9;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  labelPointFromGeoPointFeature((GeoCodecsPointFeature *)(v8 + 4), (const md::LabelFeatureCreationParams *)a2, (uint64_t)a3);
  v14 = *((_QWORD *)a2 + 22);
  *((_BYTE *)v8 + 108) = 0;
  *((_BYTE *)v8 + 112) = 0;
  *((_BYTE *)v8 + 116) = 0;
  *((_DWORD *)v8 + 30) = 0;
  v8[11] = 0;
  v8[12] = 0;
  v8[10] = v14;
  *((_BYTE *)v8 + 104) = 0;
  *((_BYTE *)v8 + 136) = *((_BYTE *)a2 + 210);
  *((_BYTE *)v8 + 138) = -1;
  *(_QWORD *)((char *)v8 + 139) = 0;
  *((_BYTE *)v8 + 137) = *(_BYTE *)(geo::codec::VectorTile::key((geo::codec::VectorTile *)v8[2]) + 1) & 0x3F;
  if (*((_BYTE *)a2 + 210))
  {
    v15 = *((double *)a3 + 8);
    v16 = *((double *)a3 + 6);
    if (v15 >= v16 && (v17 = *((double *)a3 + 9), v18 = *((double *)a3 + 7), v17 >= v18))
    {
      v19 = v16 + (v15 - v16) * *((float *)a2 + 27);
      v20 = v18 + (v17 - v18) * *((float *)a2 + 28);
    }
    else
    {
      memset_pattern16(&__b, &unk_19FFB63B0, 0x10uLL);
      v19 = __b;
      v20 = *(double *)v56.i64;
    }
  }
  else
  {
    v19 = 0.0;
    v20 = 0.0;
  }
  *((double *)v8 + 11) = v19;
  *((double *)v8 + 12) = v20;
  if (*((_BYTE *)a2 + 213))
  {
    *((_DWORD *)v8 + 26) = *((_DWORD *)a2 + 25);
    *((_BYTE *)v8 + 108) = 1;
  }
  if (*((_BYTE *)a2 + 214))
  {
    v21 = *((float *)a2 + 26) * 360.0;
    *((float *)v8 + 28) = v21;
    *((_BYTE *)v8 + 116) = 1;
    *((float *)v8 + 31) = md::LabelFeature::vectorFromAzimuth((md::LabelFeature *)(v8 + 4), v21, (const md::LabelPoint *)*((unsigned __int8 *)this + 392));
    *((_DWORD *)v8 + 32) = v22;
    *((_DWORD *)v8 + 33) = v23;
  }
  *((_BYTE *)v8 + 145) = *((_BYTE *)a2 + 207) != 0;
  *((_BYTE *)v8 + 146) = *((_BYTE *)a2 + 204) != 0;
  v54 = v8;
  if (*((_BYTE *)a3 + 89))
  {
    *((_BYTE *)this + 649) = *((_BYTE *)a3 + 88);
    (*(void (**)(md::PointLabelFeature *, _QWORD **))(*(_QWORD *)this + 760))(this, &v54);
    v24 = v54;
    if (!v54)
      return;
    goto LABEL_47;
  }
  std::mutex::lock((std::mutex *)((char *)this + 248));
  v25 = *((_QWORD *)this + 41);
  v26 = *((_QWORD *)this + 42);
  if (v25 >= v26)
  {
    v30 = *((_QWORD *)this + 40);
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v30) >> 4);
    if (v31 + 1 > 0x555555555555555)
      abort();
    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v30) >> 4);
    v33 = 2 * v32;
    if (2 * v32 <= v31 + 1)
      v33 = v31 + 1;
    if (v32 >= 0x2AAAAAAAAAAAAAALL)
      v34 = 0x555555555555555;
    else
      v34 = v33;
    v58 = (_QWORD *)((char *)this + 344);
    if (v34)
    {
      v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 43) + 16))(*((_QWORD *)this + 43), 48 * v34, 8);
      v36 = v35 + 48 * v31;
      v37 = v35 + 48 * v34;
      if (v35)
      {
        v38 = *((_BYTE *)a3 + 88);
        *(_BYTE *)v36 = 0;
        v39 = v35 + 48 * v31;
        *(_QWORD *)(v39 + 8) = 0;
        *(_QWORD *)(v39 + 8) = v54;
        v54 = 0;
        *(_QWORD *)(v39 + 16) = 0;
        *(_QWORD *)(v39 + 24) = 0;
        *(_BYTE *)(v39 + 32) = v38;
        *(_QWORD *)(v39 + 40) = 0;
      }
    }
    else
    {
      v37 = 0;
      v36 = 48 * v31;
    }
    v29 = v36 + 48;
    v56.i64[1] = v36 + 48;
    v41 = *((_QWORD *)this + 40);
    v40 = *((_QWORD *)this + 41);
    if (v40 == v41)
    {
      v45 = vdupq_n_s64(v40);
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = v36 + v42;
        v44 = v40 + v42;
        *(_BYTE *)(v43 - 48) = *(_BYTE *)(v40 + v42 - 48);
        *(_QWORD *)(v43 - 40) = 0;
        *(_OWORD *)(v43 - 40) = *(_OWORD *)(v40 + v42 - 40);
        *(_QWORD *)(v44 - 40) = 0;
        *(_QWORD *)(v43 - 24) = *(_QWORD *)(v40 + v42 - 24);
        *(_QWORD *)(v44 - 32) = 0;
        *(_QWORD *)(v44 - 24) = 0;
        *(_OWORD *)(v43 - 16) = *(_OWORD *)(v40 + v42 - 16);
        v42 -= 48;
      }
      while (v40 + v42 != v41);
      v36 += v42;
      v45 = *((int64x2_t *)this + 20);
    }
    *((_QWORD *)this + 40) = v36;
    *((_QWORD *)this + 41) = v29;
    v56 = v45;
    v46 = *((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = v37;
    v57 = v46;
    __b = *(double *)v45.i64;
    std::__split_buffer<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator> &>::__destruct_at_end[abi:nn180100]((uint64_t)&__b, v45.i64[0]);
    if (__b != 0.0)
      (*(void (**)(_QWORD, double, uint64_t))(*(_QWORD *)*v58 + 40))(*v58, COERCE_DOUBLE(*(_QWORD *)&__b), v57 - *(_QWORD *)&__b);
  }
  else
  {
    if (v25)
    {
      v27 = *((_BYTE *)a3 + 88);
      *(_BYTE *)v25 = 0;
      v28 = v54;
      v54 = 0;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 8) = v28;
      *(_BYTE *)(v25 + 32) = v27;
      *(_QWORD *)(v25 + 40) = 0;
    }
    v29 = v25 + 48;
  }
  *((_QWORD *)this + 41) = v29;
  atomic_store(1u, (unsigned __int8 *)this + 312);
  std::mutex::unlock((std::mutex *)((char *)this + 248));
  v24 = v54;
  if (v54)
  {
LABEL_47:
    if ((*v24)-- == 1)
    {
      v48 = (std::__shared_weak_count *)v24[3];
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((v51 & 1) == 0)
      {
        {
          v53 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v54, 152);
    }
  }
}

void sub_19F1B8D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>::~fast_shared_ptr(&a9);
  _Unwind_Resume(a1);
}

void sub_19F1B8DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v9;
  md::components::Material *v10;
  mdm::Allocator *v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;

  md::components::Material::~Material(v10);
  if ((*v9)-- == 1)
  {
    v14 = (std::__shared_weak_count *)v9[3];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = mdm::Allocator::instance(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, a9, 152);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(float *a1, uint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *i;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  _QWORD *j;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v52;

  if (*(_QWORD *)a2)
    v7 = *(_QWORD *)a2 + 8;
  else
    v7 = 0;
  v8 = md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(*(_QWORD **)(v7 + 56), *(_BYTE *)(v7 + 88));
  v9 = v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v9)
        {
          v17 = i[2];
          if (v17)
            v18 = v17 + 8;
          else
            v18 = 0;
          v19 = *(unsigned __int8 *)(v18 + 88);
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + 96);
          v15 = v19 - v20;
          if (v19 != v20)
            goto LABEL_14;
          v21 = *(uint64_t **)(v18 + 56);
          v22 = v21[5];
          if (!v22)
            v22 = v21[6];
          v23 = *(uint64_t **)(*(_QWORD *)a2 + 64);
          v24 = v23[5];
          if (v24)
          {
            if (v22 != v24)
              continue;
          }
          else if (v22 != v23[6])
          {
            continue;
          }
          if (v21[15] == v23[15] && v21[16] == v23[16] && v21[17] == v23[17] && v21[18] == v23[18])
          {
            if (v22)
              return i;
            v15 = geo::codec::featureStyleAttributesCompare(v21 + 3, v23 + 3);
LABEL_14:
            if (!v15)
              return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 24, 8);
  *i = 0;
  i[1] = v9;
  i[2] = 0;
  v25 = *a3;
  i[2] = *a3;
  if (v25)
    ++*v25;
  v26 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v27 = a1[12];
  if (!v10 || (float)(v27 * (float)v10) < v26)
  {
    v28 = 1;
    if (v10 >= 3)
      v28 = (v10 & (v10 - 1)) != 0;
    v29 = v28 | (2 * v10);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v10 = *((_QWORD *)a1 + 1);
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_77;
      v43 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v10 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_77:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_90;
      }
      if (!prime)
      {
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v52)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v52, 8 * *((_QWORD *)a1 + 1));
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_77;
      }
    }
    v32 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v33 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v32;
    if (v33)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v33, 8 * *((_QWORD *)a1 + 1));
    v34 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34++) = 0;
    while (prime != v34);
    v36 = (uint64_t *)(a1 + 6);
    v35 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v35)
    {
LABEL_76:
      v10 = prime;
      goto LABEL_77;
    }
    v37 = v35[1];
    v38 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v39 = v37 & v38;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v36;
      for (j = (_QWORD *)*v35; *v35; j = (_QWORD *)*v35)
      {
        v41 = j[1] & v38;
        if (v41 == v39)
        {
          v35 = j;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
        {
          *v35 = *j;
          v42 = 8 * v41;
          *j = **(_QWORD **)(*(_QWORD *)a1 + v42);
          **(_QWORD **)(*(_QWORD *)a1 + v42) = j;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v35;
          v35 = j;
          v39 = v41;
        }
      }
      goto LABEL_76;
    }
    if (v37 >= prime)
      v37 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v36;
    v46 = (_QWORD *)*v35;
    if (!*v35)
      goto LABEL_76;
    while (1)
    {
      v48 = v46[1];
      if (v48 >= prime)
        v48 %= prime;
      if (v48 != v37)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v48))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = v35;
          goto LABEL_81;
        }
        *v35 = *v46;
        v47 = 8 * v48;
        *v46 = **(_QWORD **)(*(_QWORD *)a1 + v47);
        **(_QWORD **)(*(_QWORD *)a1 + v47) = v46;
        v46 = v35;
      }
      v48 = v37;
LABEL_81:
      v35 = v46;
      v46 = (_QWORD *)*v46;
      v37 = v48;
      if (!v46)
        goto LABEL_76;
    }
  }
LABEL_90:
  v49 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v49)
  {
    *i = *v49;
LABEL_98:
    *v49 = i;
    goto LABEL_99;
  }
  *i = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*i)
  {
    v50 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v50 >= v10)
        v50 %= v10;
    }
    else
    {
      v50 &= v10 - 1;
    }
    v49 = (_QWORD *)(*(_QWORD *)a1 + 8 * v50);
    goto LABEL_98;
  }
LABEL_99:
  ++*((_QWORD *)a1 + 5);
  return i;
}

void sub_19F1B9388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(unint64_t result, uint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;

  v5 = result;
  v6 = a2 + 8;
  if (!a2)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = *(_QWORD *)(v7 + 72);
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v12[1];
            if (v18 == v8)
            {
              v16 = v12[2];
              if (v16)
                v17 = v16 + 8;
              else
                v17 = 0;
              if (*(_QWORD *)(*(_QWORD *)(v17 + 8) + 72) == v8)
                return result;
            }
            else if ((v18 & (v9 - 1)) != v3)
            {
              goto LABEL_30;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_30;
          }
        }
        do
        {
          v15 = v12[1];
          if (v15 == v8)
          {
            v13 = v12[2];
            if (v13)
              v14 = v13 + 8;
            else
              v14 = 0;
            if (*(_QWORD *)(*(_QWORD *)(v14 + 8) + 72) == v8)
              return result;
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_30:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 24, 8);
  v19 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = 0;
  v20 = *a3;
  *(_QWORD *)(result + 16) = *a3;
  if (v20)
    ++*v20;
  v21 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v22 = *(float *)(v5 + 48);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    if (v26 == 1)
    {
      v26 = 2;
    }
    else if ((v26 & (v26 - 1)) != 0)
    {
      result = std::__next_prime(v26);
      v26 = result;
    }
    v9 = *(_QWORD *)(v5 + 8);
    if (v26 <= v9)
    {
      if (v26 >= v9)
        goto LABEL_68;
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (v9 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v38 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v38;
      }
      if (v26 <= result)
        v26 = result;
      if (v26 >= v9)
      {
        v9 = *(_QWORD *)(v5 + 8);
LABEL_68:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_81;
      }
      if (!v26)
      {
        v44 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v44)
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v44, 8 * *(_QWORD *)(v5 + 8));
        v9 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        goto LABEL_68;
      }
    }
    result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16), 8 * v26, 8);
    v27 = *(_QWORD *)v5;
    *(_QWORD *)v5 = result;
    if (v27)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v27, 8 * *(_QWORD *)(v5 + 8));
    v28 = 0;
    *(_QWORD *)(v5 + 8) = v26;
    do
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v28++) = 0;
    while (v26 != v28);
    v30 = v5 + 24;
    v29 = *(_QWORD **)(v5 + 24);
    if (!v29)
    {
LABEL_67:
      v9 = v26;
      goto LABEL_68;
    }
    v31 = v29[1];
    v32 = v26 - 1;
    if ((v26 & (v26 - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v33) = v30;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v29 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)v5 + 8 * v35))
        {
          *v29 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*(_QWORD *)v5 + v36);
          **(_QWORD **)(*(_QWORD *)v5 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v35) = v29;
          v29 = i;
          v33 = v35;
        }
      }
      goto LABEL_67;
    }
    if (v31 >= v26)
      v31 %= v26;
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v31) = v30;
    v39 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_67;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= v26)
        v41 %= v26;
      if (v41 != v31)
      {
        if (!*(_QWORD *)(*(_QWORD *)v5 + 8 * v41))
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v41) = v29;
          goto LABEL_72;
        }
        *v29 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*(_QWORD *)v5 + v40);
        **(_QWORD **)(*(_QWORD *)v5 + v40) = v39;
        v39 = v29;
      }
      v41 = v31;
LABEL_72:
      v29 = v39;
      v39 = (_QWORD *)*v39;
      v31 = v41;
      if (!v39)
        goto LABEL_67;
    }
  }
LABEL_81:
  v42 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v42)
  {
    *(_QWORD *)v19 = *v42;
LABEL_89:
    *v42 = v19;
    goto LABEL_90;
  }
  *(_QWORD *)v19 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v19;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v19)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (unint64_t *)(*(_QWORD *)v5 + 8 * v43);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19F1B9880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;

  v3 = a1[5];
  v4 = v3;
  if (!v3)
    v4 = a1[6];
  v5 = ((((unint64_t)a2 >> 2) | ((unint64_t)a2 << 6)) + v4 - 0x61C8864680B583EBLL) ^ a2;
  v6 = a1[15];
  v7 = a1[16];
  v8 = v6 == 0;
  v9 = (v6 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
  if (!v8)
    v5 = v9;
  if (v7)
    v5 ^= v7 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2);
  v10 = a1[17];
  v11 = a1[18];
  v8 = v10 == 0;
  v12 = (v10 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
  if (!v8)
    v5 = v12;
  if (v11)
    result = (v11 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
  else
    result = v5;
  if (!v3 && !a1[6])
  {
    v14 = a1[3];
    if (v14)
    {
      v15 = (*(char *)(v14 + 34) - 0x61C8864680B57FA7) ^ 0x11;
      v16 = *(unsigned __int8 *)(v14 + 33);
      if (*(_BYTE *)(v14 + 33))
      {
        v17 = (int *)(*(_QWORD *)v14 + 4);
        do
        {
          v18 = ((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *(v17 - 1)) ^ v15;
          v15 = (*v17 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      v19 = *(unsigned __int8 *)(v14 + 32);
      if (*(_BYTE *)(v14 + 32))
      {
        v20 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 4);
        do
        {
          v21 = ((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *((unsigned int *)v20 - 1)) ^ v15;
          v22 = *v20;
          v20 = (uint64_t *)((char *)v20 + 12);
          v15 = (v22 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
          --v19;
        }
        while (v19);
      }
      result ^= (result << 6) - 0x61C8864680B583EBLL + (result >> 2) + v15;
    }
  }
  return result;
}

uint64_t **md::PointLabelFeature::addElement(uint64_t a1, _QWORD **a2, int a3, __n128 a4, __n128 a5)
{
  unsigned __int8 v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  _QWORD **v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __n128 *v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  unsigned int v72;
  double v73;
  _QWORD *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  long double v79;
  long double v80;
  double v81;
  long double v82;
  double v83;
  __double2 v84;
  double v85;
  __double2 v86;
  long double v87;
  long double v88;
  double v89;
  long double v90;
  double v91;
  __double2 v92;
  double v93;
  __double2 v94;
  double v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned int v98;
  unsigned __int8 v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  int v111;
  _QWORD **v112;
  _QWORD **v113;
  unint64_t *v114;
  unsigned __int8 v115;
  _QWORD *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  md::PointLabelFeatureElement *v122;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD **v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  uint8_t buf[24];
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  float v144[2];
  int v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v134 = 0;
  v135 = 0;
  v136 = 0;
  {
    v127 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v127, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v137 = mdm::Allocator::instance(void)::alloc;
  v8 = *a2 + 1;
  v132 = *v8;
  if (*v8)
  {
    if (!*a2)
      v8 = 0;
    v9 = v8[9];
    v10 = *(_QWORD *)(a1 + 432);
    if (md::DebugStreamingPOIFeatureID && md::DebugStreamingPOIFeatureID == *(_QWORD *)(v132 + 40))
    {
      if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
      v11 = (id)GEOGetVectorKitStreamingPOILog_log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        if (*a2)
          v12 = (uint64_t)(*a2 + 1);
        else
          v12 = 0;
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(_QWORD *)(a1 + 432);
        v15 = *(_QWORD *)(v12 + 72);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v14;
        *(_WORD *)&buf[22] = 2048;
        v140 = v15;
        LOWORD(v141) = 1024;
        *(_DWORD *)((char *)&v141 + 2) = v9 < v10;
        WORD3(v141) = 1024;
        DWORD2(v141) = v9 > v10;
        _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_DEBUG, "PointFeature::addElement: geoTile=%p oldVersion=%llu newVersion=%llu isOldVersion=%i isNewVersion=%i", buf, 0x2Cu);
      }

    }
    if (v9 < v10)
    {
      if (*(_QWORD *)(a1 + 480))
        md::PointPosition::addElement((unint64_t *)(*(_QWORD *)(a1 + 456) + 40), a2);
      goto LABEL_173;
    }
    if (v9 > v10)
    {
      v129 = a2;
      v16 = *(_QWORD **)(a1 + 456);
      v131 = a1;
      v133 = (_QWORD *)(a1 + 464);
      if (v16 != (_QWORD *)(a1 + 464))
      {
        v17 = 0uLL;
        while (1)
        {
          v18 = (_QWORD **)v16[5];
          v19 = (_QWORD **)v16[6];
          if (v18 != v19)
            break;
LABEL_72:
          v51 = (_QWORD *)v16[1];
          if (v51)
          {
            do
            {
              v52 = v51;
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v52 = (_QWORD *)v16[2];
              v45 = *v52 == (_QWORD)v16;
              v16 = v52;
            }
            while (!v45);
          }
          v16 = v52;
          if (v52 == v133)
            goto LABEL_78;
        }
        v20 = (_QWORD *)v135;
        while ((unint64_t)v20 < v136)
        {
          if (v20)
          {
            *v20 = 0;
            v21 = *v18;
            *v20 = *v18;
            if (v21)
              ++*v21;
          }
          ++v20;
LABEL_25:
          v135 = (unint64_t)v20;
          if (++v18 == v19)
            goto LABEL_72;
        }
        v22 = (_QWORD **)v20 - v134;
        if ((unint64_t)(v22 + 1) >> 61)
          abort();
        v23 = (uint64_t)(v136 - (_QWORD)v134) >> 2;
        if (v23 <= v22 + 1)
          v23 = v22 + 1;
        if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128))(*(_QWORD *)v137 + 16))(v137, 8 * v24, 8, a4, a5, v17);
          v26 = (_QWORD *)(v25 + 8 * v22);
          v27 = v25 + 8 * v24;
          if (v25)
          {
            *v26 = 0;
            v28 = *v18;
            *v26 = *v18;
            v17 = 0uLL;
            if (v28)
              ++*v28;
          }
          else
          {
            v17 = 0uLL;
          }
        }
        else
        {
          v27 = 0;
          v26 = (_QWORD *)(8 * v22);
        }
        v20 = v26 + 1;
        v29 = v134;
        v30 = (_QWORD *)v135;
        if ((_QWORD **)v135 == v134)
        {
          v134 = (_QWORD **)v26;
          v135 = (unint64_t)(v26 + 1);
          v42 = v136;
          v136 = v27;
          goto LABEL_70;
        }
        v31 = v135 - (_QWORD)v134 - 8;
        if (v31 > 0x37
          && ((v32 = v31 >> 3, (unint64_t)&v26[-v32 - 1] < v135)
            ? (v33 = v135 - 8 * v32 - 8 >= (unint64_t)v26)
            : (v33 = 1),
              v33))
        {
          v34 = v32 + 1;
          v35 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v36 = (_QWORD *)(v135 - 8 * v35);
          v37 = (__n128 *)(v26 - 4);
          v38 = (__n128 *)(v135 - 32);
          v39 = v35;
          do
          {
            *v37 = v17;
            v37[1] = v17;
            a5 = *v38;
            a4 = v38[1];
            *v37 = *v38;
            v37[1] = a4;
            v37 -= 2;
            *v38 = v17;
            v38[1] = v17;
            v38 -= 2;
            v39 -= 4;
          }
          while (v39);
          v26 -= v35;
          if (v34 == v35)
          {
LABEL_55:
            v30 = v134;
            v41 = (_QWORD *)v135;
            v134 = (_QWORD **)v26;
            v135 = (unint64_t)v20;
            v42 = v136;
            v136 = v27;
            while (v41 != v30)
            {
              v44 = (_QWORD *)*--v41;
              v43 = v44;
              if (v44)
              {
                v45 = (*v43)-- == 1;
                if (v45)
                {
                  v46 = (std::__shared_weak_count *)v43[3];
                  if (v46)
                  {
                    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(p_shared_owners);
                    while (__stlxr(v48 - 1, p_shared_owners));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  {
                    v50 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v50, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 40))(mdm::Allocator::instance(void)::alloc, *v41, 152);
                  *v41 = 0;
                  v17 = 0uLL;
                }
              }
            }
LABEL_70:
            if (v30)
            {
              (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v137 + 40))(v137, v30, v42 - (_QWORD)v30);
              v17 = 0uLL;
            }
            goto LABEL_25;
          }
        }
        else
        {
          v36 = (_QWORD *)v135;
        }
        do
        {
          *--v26 = 0;
          v40 = *--v36;
          *v26 = v40;
          *v36 = 0;
        }
        while (v36 != v29);
        goto LABEL_55;
      }
LABEL_78:
      a1 = v131;
      std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(v131 + 456, *(_QWORD **)(v131 + 464));
      *(_QWORD *)(v131 + 480) = 0;
      *(_QWORD *)(v131 + 456) = v133;
      *(_QWORD *)(v131 + 464) = 0;
      v53 = *(_QWORD *)(v131 + 552);
      v54 = *(_QWORD *)(v131 + 544);
      a2 = (_QWORD **)v129;
      if (v53 == v54)
      {
LABEL_79:
        *(_QWORD *)(v131 + 552) = v54;
        if (*v129)
          v55 = *v129 + 8;
        else
          v55 = 0;
        *(_QWORD *)(v131 + 432) = *(_QWORD *)(v55 + 72);
        v57 = *(_QWORD *)(v132 + 24);
        v56 = *(_QWORD *)(v132 + 32);
        if (v56)
        {
          v58 = (unint64_t *)(v56 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        *(_QWORD *)(v131 + 656) = v57;
        v60 = *(std::__shared_weak_count **)(v131 + 664);
        *(_QWORD *)(v131 + 664) = v56;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        *(_BYTE *)(v131 + 448) = 1;
        v63 = *(float *)(v132 + 164);
        if (v63 == 0.0)
          v63 = 254.0;
        *(float *)(v131 + 368) = v63;
        v64 = *(float *)(v132 + 68);
        *(float *)(v131 + 352) = v64;
        v65 = *(float *)(v132 + 160);
        if (v65 == 101.0)
          v66 = v64;
        else
          v66 = *(float *)(v132 + 160);
        if (v65 == 100.0)
          v66 = 253.0;
        *(float *)(v131 + 356) = v66;
        v67 = *(float *)(v132 + 168);
        if (v67 == 101.0)
          v68 = v64;
        else
          v68 = *(float *)(v132 + 168);
        if (v67 == 100.0)
          v69 = 253.0;
        else
          v69 = v68;
        *(float *)(v131 + 360) = v69;
        v70 = *(float *)(v132 + 172);
        if (v70 != 101.0)
          v64 = *(float *)(v132 + 172);
        if (v70 == 100.0)
          v64 = 253.0;
        *(float *)(v131 + 364) = v64;
        goto LABEL_108;
      }
      while (1)
      {
        if (*(char *)(v53 - 9) < 0)
        {
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v53 - 8) + 40))(*(_QWORD *)(v53 - 8), *(_QWORD *)(v53 - 32), *(_QWORD *)(v53 - 16) & 0x7FFFFFFFFFFFFFFFLL);
          if (*(char *)(v53 - 41) < 0)
LABEL_132:
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v53 - 40) + 40))(*(_QWORD *)(v53 - 40), *(_QWORD *)(v53 - 64), *(_QWORD *)(v53 - 48) & 0x7FFFFFFFFFFFFFFFLL);
        }
        else if (*(char *)(v53 - 41) < 0)
        {
          goto LABEL_132;
        }
        v53 -= 64;
        if (v53 == v54)
          goto LABEL_79;
      }
    }
  }
LABEL_108:
  if (*(_QWORD *)(a1 + 480))
  {
    v71 = *a2 ? (uint64_t)(*a2 + 1) : 0;
    v72 = *(char *)(v71 + 129);
    v73 = ldexp(1.0, v72);
    v74 = *(_QWORD **)(a1 + 456);
    if (v74 != (_QWORD *)(a1 + 464))
    {
      v75 = 156543.035 / v73 * (156543.035 / v73);
      do
      {
        if (*(_BYTE *)(v71 + 68))
        {
          if (*((_BYTE *)v74 + 116))
            goto LABEL_117;
        }
        else
        {
          v79 = *(double *)(v71 + 48) * 6.28318531;
          v80 = exp(*(double *)(v71 + 56) * 6.28318531 + -3.14159265);
          v81 = atan(v80) * 2.0 + -1.57079633;
          v82 = fmod(v79, 6.28318531);
          v83 = fmod(v82 + 6.28318531, 6.28318531) + -3.14159265;
          v84 = __sincos_stret(v81);
          v85 = 6378137.0 / sqrt(v84.__sinval * v84.__sinval * -0.00669437999 + 1.0);
          v86 = __sincos_stret(v83);
          *(double *)(v71 + 24) = v85 * v84.__cosval * v86.__cosval;
          *(double *)(v71 + 32) = v85 * v84.__cosval * v86.__sinval;
          *(double *)(v71 + 40) = v84.__sinval * 0.99330562 * v85;
          *(_BYTE *)(v71 + 68) = 1;
          if (*((_BYTE *)v74 + 116))
          {
LABEL_117:
            v76 = *((double *)v74 + 9);
            v77 = *((double *)v74 + 10);
            v78 = *((double *)v74 + 11);
            goto LABEL_120;
          }
        }
        v87 = *((double *)v74 + 12) * 6.28318531;
        v88 = exp(*((double *)v74 + 13) * 6.28318531 + -3.14159265);
        v89 = atan(v88) * 2.0 + -1.57079633;
        v90 = fmod(v87, 6.28318531);
        v91 = fmod(v90 + 6.28318531, 6.28318531) + -3.14159265;
        v92 = __sincos_stret(v89);
        v93 = 6378137.0 / sqrt(v92.__sinval * v92.__sinval * -0.00669437999 + 1.0);
        v94 = __sincos_stret(v91);
        v76 = v93 * v92.__cosval * v94.__cosval;
        v77 = v93 * v92.__cosval * v94.__sinval;
        *((double *)v74 + 9) = v76;
        *((double *)v74 + 10) = v77;
        v78 = v92.__sinval * 0.99330562 * v93;
        *((double *)v74 + 11) = v78;
        *((_BYTE *)v74 + 116) = 1;
LABEL_120:
        v95 = *(double *)(v71 + 24);
        if ((v95 - v76) * (v95 - v76)
           + (*(double *)(v71 + 32) - v77) * (*(double *)(v71 + 32) - v77)
           + (*(double *)(v71 + 40) - v78) * (*(double *)(v71 + 40) - v78) <= v75)
        {
          if (*((unsigned __int8 *)v74 + 120) < v72)
          {
            if (*((_BYTE *)v74 + 122))
            {
              *((double *)v74 + 9) = v95;
              v74[10] = *(_QWORD *)(v71 + 32);
              v74[11] = *(_QWORD *)(v71 + 40);
              v74[12] = *(_QWORD *)(v71 + 48);
              v74[13] = *(_QWORD *)(v71 + 56);
              v124 = *(_DWORD *)(v71 + 64);
              *(_DWORD *)((char *)v74 + 115) = *(_DWORD *)(v71 + 67);
              *((_DWORD *)v74 + 28) = v124;
            }
            else
            {
              v125 = *((_DWORD *)v74 + 28);
              *((double *)v74 + 9) = v95;
              v74[10] = *(_QWORD *)(v71 + 32);
              v74[11] = *(_QWORD *)(v71 + 40);
              v74[12] = *(_QWORD *)(v71 + 48);
              v74[13] = *(_QWORD *)(v71 + 56);
              v126 = *(_DWORD *)(v71 + 64);
              *(_DWORD *)((char *)v74 + 115) = *(_DWORD *)(v71 + 67);
              *((_DWORD *)v74 + 28) = v126;
              *((_DWORD *)v74 + 28) = v125;
            }
            *((_BYTE *)v74 + 120) = v72;
          }
          v111 = md::PointPosition::addElement(v74 + 5, a2);
          goto LABEL_148;
        }
        v96 = (_QWORD *)v74[1];
        if (v96)
        {
          do
          {
            v97 = v96;
            v96 = (_QWORD *)*v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            v97 = (_QWORD *)v74[2];
            v45 = *v97 == (_QWORD)v74;
            v74 = v97;
          }
          while (!v45);
        }
        v74 = v97;
      }
      while (v97 != (_QWORD *)(a1 + 464));
    }
  }
  v98 = *(_DWORD *)(a1 + 488);
  *(_DWORD *)(a1 + 488) = v98 + 1;
  memset(buf, 0, sizeof(buf));
  {
    v128 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v128, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v140 = mdm::Allocator::instance(void)::alloc;
  if (*a2)
    v100 = (uint64_t)(*a2 + 1);
  else
    v100 = 0;
  v101 = *(_OWORD *)(v100 + 24);
  v142 = *(_QWORD *)(v100 + 40);
  v141 = v101;
  v143 = *(_OWORD *)(v100 + 48);
  v102 = *(_DWORD *)(v100 + 67);
  v144[0] = *(float *)(v100 + 64);
  *(_DWORD *)((char *)v144 + 3) = v102;
  LOWORD(v145) = *(unsigned __int8 *)(v100 + 129);
  HIBYTE(v145) = 0;
  BYTE2(v145) = v144[0] != 3.4028e38;
  md::PointPosition::addElement((unint64_t *)buf, a2);
  v103 = *(_QWORD *)(a1 + 464);
  if (v103)
  {
    while (1)
    {
      while (1)
      {
        v105 = (uint64_t *)v103;
        v106 = *(_DWORD *)(v103 + 32);
        if (v98 >= v106)
          break;
        v103 = *v105;
        v104 = v105;
        if (!*v105)
          goto LABEL_144;
      }
      if (v106 >= v98)
        break;
      v103 = v105[1];
      if (!v103)
      {
        v104 = v105 + 1;
        goto LABEL_144;
      }
    }
  }
  else
  {
    v104 = (uint64_t *)(a1 + 464);
    v105 = (uint64_t *)(a1 + 464);
LABEL_144:
    v107 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 472) + 16))(*(_QWORD *)(a1 + 472), 128, 8);
    *(_DWORD *)(v107 + 32) = v98;
    *(_OWORD *)(v107 + 40) = *(_OWORD *)buf;
    v108 = v140;
    *(_QWORD *)(v107 + 56) = *(_QWORD *)&buf[16];
    *(_QWORD *)(v107 + 64) = v108;
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)(v107 + 88) = v142;
    *(_OWORD *)(v107 + 72) = v141;
    *(_OWORD *)(v107 + 96) = v143;
    v109 = v144[0];
    *(float *)(v107 + 115) = *(float *)((char *)v144 + 3);
    *(float *)(v107 + 112) = v109;
    *(_DWORD *)(v107 + 120) = v145;
    *(_QWORD *)v107 = 0;
    *(_QWORD *)(v107 + 8) = 0;
    *(_QWORD *)(v107 + 16) = v105;
    *v104 = v107;
    v110 = **(_QWORD **)(a1 + 456);
    if (v110)
    {
      *(_QWORD *)(a1 + 456) = v110;
      v107 = *v104;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 464), (uint64_t *)v107);
    ++*(_QWORD *)(a1 + 480);
  }
  v138 = buf;
  std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v138);
  v111 = 1;
LABEL_148:
  v112 = v134;
  v113 = (_QWORD **)v135;
  if (v134 != (_QWORD **)v135)
  {
    v114 = (unint64_t *)(*(_QWORD *)(a1 + 456) + 40);
    do
    {
      v116 = *v112;
      *(_QWORD *)buf = v116;
      if (v116)
        ++*v116;
      md::PointPosition::addElement(v114, (_QWORD **)buf);
      if (v116)
      {
        v45 = (*v116)-- == 1;
        if (v45)
        {
          v117 = (std::__shared_weak_count *)v116[3];
          if (v117)
          {
            v118 = (unint64_t *)&v117->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          {
            v120 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v120, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)buf, 152);
        }
      }
      ++v112;
    }
    while (v112 != v113);
  }
  if (v111)
  {
    if (*a2)
      v121 = (uint64_t)(*a2 + 1);
    else
      v121 = 0;
    md::PointLabelFeatureElement::updateText(v121, (const md::PointLabelFeature *)a1, a3);
    if (*a2)
      v122 = (md::PointLabelFeatureElement *)(*a2 + 1);
    else
      v122 = 0;
    md::PointLabelFeatureElement::updateLabelPlacements(v122, (const md::PointLabelFeature *)a1);
  }
LABEL_173:
  *(_QWORD *)buf = &v134;
  return std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);
}

void sub_19F1BA718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19)
{
  a19 = &a14;
  std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&a19);
  _Unwind_Resume(a1);
}

void md::PointLabelFeatureElement::updateLabelPlacements(md::PointLabelFeatureElement *this, const md::PointLabelFeature *a2)
{
  const md::PointLabelFeature *v2;
  md::PointLabelFeatureElement *v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  __int16 v25;
  __int16 v26;
  BOOL v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  float v42;
  char *v43;
  void *v44;
  float v45;
  __int16 v46;
  __int16 v47;
  char *v48;
  void *v49;
  __int16 v50;
  __int16 v51;
  md::PointLabelFeatureElement *v52;
  std::__shared_weak_count *v53;
  const md::PointLabelFeature *v54;
  uint64_t v55;
  int v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  char *v59;
  __int16 v60;
  char v61;
  void *__p[2];
  __int128 v63;

  v2 = a2;
  v3 = this;
  if (*((_BYTE *)this + 136))
  {
    v4 = *((unsigned __int8 *)this + 135);
    v5 = (*(uint64_t (**)(const md::PointLabelFeature *))(*(_QWORD *)a2 + 72))(a2);
    if (v4 >= (uint64_t)(*(_QWORD *)(v5 + 384) - *(_QWORD *)(v5 + 376)) >> 5)
    {
      *(_OWORD *)__p = 0u;
      v63 = 0u;
      BYTE8(v63) = 1;
      v6 = __p;
    }
    else
    {
      v6 = (void **)(*(_QWORD *)((*(uint64_t (**)(const md::PointLabelFeature *))(*(_QWORD *)v2 + 72))(v2)
                               + 376)
                   + 32 * *((unsigned __int8 *)v3 + 135));
    }
    *((_BYTE *)v3 + 131) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)v6);
    goto LABEL_72;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v63 = 0;
  WORD4(v63) = 1;
  BYTE10(v63) = 0;
  v7 = *(_QWORD *)this;
  v57 = 0;
  v58 = 0;
  v8 = *(std::__shared_weak_count **)(v7 + 8);
  if (v8)
  {
    v8 = std::__shared_weak_count::lock(v8);
    v9 = v8;
    v58 = v8;
    if (v8)
    {
      v8 = *(std::__shared_weak_count **)v7;
      v57 = *(std::__shared_weak_count **)v7;
    }
    if (!*(_BYTE *)(v7 + 205))
      goto LABEL_65;
    goto LABEL_12;
  }
  v9 = 0;
  if (*(_BYTE *)(v7 + 205))
  {
LABEL_12:
    v10 = geo::codec::VectorTile::labelTextPlacements((geo::codec::VectorTile *)v8);
    BYTE8(v63) = *(_BYTE *)(v7 + 209) ^ 1;
    v11 = *(unsigned __int8 *)(v7 + 205);
    if (*(_BYTE *)(v7 + 205))
    {
      v12 = v10;
      v13 = 5 * v11;
      v14 = (char *)operator new(5 * v11);
      v15 = v14;
      __p[0] = v14;
      __p[1] = v14;
      *(_QWORD *)&v63 = &v14[v13];
      v16 = *(unsigned __int8 *)(v7 + 205);
      if (*(_BYTE *)(v7 + 205))
      {
        v52 = v3;
        v53 = v9;
        v54 = v2;
        v55 = v7;
        v17 = 0;
        v18 = 0;
        v19 = (unsigned __int8 *)(v12 + 16 * *(unsigned int *)(v7 + 184));
        v20 = v14;
        v21 = &v14[v13];
        do
        {
          if (!v19[5])
          {
            v22 = v19[2];
            if ((_DWORD)v22 == 10)
            {
              v23 = v19[4];
              v24 = (v23 + 16) >> 5;
              if ((v23 & 0x1F) != 0)
                LOWORD(v24) = 10;
              v25 = v24 | ((_WORD)v23 << 8);
            }
            else
            {
              if (v22 > 9)
              {
                v29 = 0;
                v26 = 9;
              }
              else
              {
                v26 = geoPositionToLabelPosition(unsigned char)::positions[v22];
                if (v19[2])
                  v27 = (_DWORD)v22 == 9;
                else
                  v27 = 1;
                v28 = !v27;
                if ((v28 & 1) != 0)
                  v29 = 32 * v26;
                else
                  v29 = 0;
              }
              v25 = v26 | (v29 << 8);
            }
            v30 = *v19;
            if (v30 > 2)
            {
              v32 = 0;
            }
            else
            {
              if (v19[3])
                v31 = 3;
              else
                v31 = 2;
              if ((_DWORD)v30 == 2)
                v32 = v31;
              else
                v32 = geoPlacementModeToLabelPositionMode(unsigned char,BOOL)::positionModes[v30];
              if ((v32 & 0xFE) == 2)
                v17 = 1;
            }
            if (v19[1] - 1 >= 5)
              v33 = 0;
            else
              v33 = 1 << (v19[1] - 1);
            if (v20 < v21)
            {
              *v20 = v32;
              v20[1] = v33;
              v20[2] = 0;
              *(_WORD *)(v20 + 3) = v25;
              v20 += 5;
            }
            else
            {
              v34 = 0xCCCCCCCCCCCCCCCDLL * (v20 - v15) + 1;
              if (v34 >= 0x3333333333333334)
              {
                BYTE9(v63) = v17;
                *(_QWORD *)&v63 = v21;
                __p[0] = v15;
                abort();
              }
              v56 = v17;
              if (0x999999999999999ALL * (v21 - v15) > v34)
                v34 = 0x999999999999999ALL * (v21 - v15);
              if (0xCCCCCCCCCCCCCCCDLL * (v21 - v15) >= 0x1999999999999999)
                v34 = 0x3333333333333333;
              if (v34 >= 0x3333333333333334)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v35 = 5 * v34;
              v36 = (char *)operator new(5 * v34);
              v37 = &v36[v20 - v15];
              *v37 = v32;
              v37[1] = v33;
              v37[2] = 0;
              *(_WORD *)(v37 + 3) = v25;
              v38 = v37;
              if (v20 == v15)
              {
                v7 = v55;
              }
              else
              {
                v7 = v55;
                do
                {
                  v39 = *(_WORD *)(v20 - 5);
                  v20 -= 5;
                  *(_WORD *)(v38 - 5) = v39;
                  v38 -= 5;
                  v38[2] = 0;
                  *(_WORD *)(v38 + 3) = *(_WORD *)(v20 + 3);
                }
                while (v20 != v15);
              }
              v21 = &v36[v35];
              v20 = v37 + 5;
              if (v15)
                operator delete(v15);
              v15 = v38;
              v17 = v56;
            }
            v16 = *(unsigned __int8 *)(v7 + 205);
          }
          ++v18;
          v19 += 16;
        }
        while (v18 < v16);
        BYTE9(v63) = v17;
        __p[1] = v20;
        *(_QWORD *)&v63 = v21;
        __p[0] = v15;
        v9 = v53;
        v2 = v54;
        v3 = v52;
      }
    }
  }
LABEL_65:
  *((_BYTE *)v3 + 131) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)__p);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
LABEL_72:
  if (*((_BYTE *)v3 + 108))
  {
    v42 = *((float *)v3 + 26);
    WORD4(v63) = 1;
    BYTE10(v63) = 0;
    v43 = (char *)operator new(5uLL);
    v44 = v43;
    v45 = v42 * 0.0027778;
    v46 = vcvts_n_s32_f32((float)(0.75 - v45) - floorf(0.75 - v45), 8uLL);
    v47 = (v46 + 16) >> 5;
    if ((v46 & 0x1F) != 0)
      v47 = 10;
    *(_WORD *)v43 = 259;
    v43[2] = 0;
    *(_WORD *)(v43 + 3) = v47 | (v46 << 8);
    __p[1] = v43 + 5;
    *(_QWORD *)&v63 = v43 + 5;
    __p[0] = v43;
    *((_BYTE *)v3 + 132) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)__p);
    v60 = 1;
    v61 = 0;
    v48 = (char *)operator new(5uLL);
    v49 = v48;
    v50 = vcvts_n_s32_f32((float)(0.25 - v45) - floorf(0.25 - v45), 8uLL);
    v51 = (v50 + 16) >> 5;
    if ((v50 & 0x1F) != 0)
      v51 = 10;
    *(_WORD *)v48 = 259;
    v48[2] = 0;
    *(_WORD *)(v48 + 3) = v51 | (v50 << 8);
    v58 = (std::__shared_weak_count *)(v48 + 5);
    v59 = v48 + 5;
    v57 = (std::__shared_weak_count *)v48;
    *((_BYTE *)v3 + 133) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)&v57);
    operator delete(v49);
    operator delete(v44);
  }
}

void sub_19F1BAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v20)
  {
    a20 = v20;
    operator delete(v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::indexForPlacementInfo(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *i;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  _WORD *v17;
  _WORD *v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  _WORD *v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;

  v4 = a1[72];
  v5 = a1[73];
  if (v4 == v5)
  {
    LOBYTE(v8) = 0;
    goto LABEL_23;
  }
  v6 = *(unsigned __int8 *)(a2 + 24);
  v7 = *(unsigned __int8 **)(a2 + 8);
  v8 = 0;
  v9 = &v7[-*(_QWORD *)a2];
  if (v7 != *(unsigned __int8 **)a2)
  {
    v11 = a1[72];
    do
    {
      if (v6 == *(unsigned __int8 *)(v11 + 24) && v9 == (unsigned __int8 *)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11))
      {
        v12 = (unsigned __int8 *)(*(_QWORD *)v11 + 4);
        for (i = (unsigned __int8 *)(*(_QWORD *)a2 + 4); ; i += 5)
        {
          v14 = i - 4;
          if (*(i - 4) != *(v12 - 4))
            break;
          if (*(i - 3) != *(v12 - 3))
            break;
          v15 = *(i - 1);
          if (v15 != *(v12 - 1) || v15 == 10 && *i != *v12)
            break;
          v12 += 5;
          if (v14 + 5 == v7)
            return v8;
        }
      }
      ++v8;
      v11 += 32;
    }
    while (v11 != v5);
LABEL_21:
    if (v8 > 0xFF)
    {
      LOBYTE(v8) = 0;
      return v8;
    }
LABEL_23:
    v16 = a1[74];
    if (v5 < v16)
    {
      if (v5)
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        v17 = *(_WORD **)a2;
        v18 = *(_WORD **)(a2 + 8);
        v19 = (size_t)v18 - *(_QWORD *)a2;
        if (v18 != *(_WORD **)a2)
        {
          v20 = 0xCCCCCCCCCCCCCCCDLL * v19;
          if (0xCCCCCCCCCCCCCCCDLL * v19 >= 0x3333333333333334)
            abort();
          v21 = (char *)operator new(v19);
          *(_QWORD *)v5 = v21;
          *(_QWORD *)(v5 + 8) = v21;
          *(_QWORD *)(v5 + 16) = &v21[5 * v20];
          do
          {
            *(_WORD *)v21 = *v17;
            v21[2] = 0;
            *(_WORD *)(v21 + 3) = *(_WORD *)((char *)v17 + 3);
            v21 += 5;
            v17 = (_WORD *)((char *)v17 + 5);
          }
          while (v17 != v18);
          *(_QWORD *)(v5 + 8) = v21;
        }
        v22 = *(_WORD *)(a2 + 24);
        *(_BYTE *)(v5 + 26) = *(_BYTE *)(a2 + 26);
        *(_WORD *)(v5 + 24) = v22;
      }
      v23 = v5 + 32;
      a1[73] = v23;
      goto LABEL_57;
    }
    v24 = (uint64_t)(v5 - v4) >> 5;
    if ((unint64_t)(v24 + 1) >> 59)
      abort();
    v25 = a1 + 75;
    v26 = v16 - v4;
    v27 = v26 >> 4;
    if (v26 >> 4 <= (unint64_t)(v24 + 1))
      v27 = v24 + 1;
    v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0;
    v29 = 0x7FFFFFFFFFFFFFFLL;
    if (!v28)
      v29 = v27;
    if (v29)
    {
      v30 = 32 * v29;
      v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v25 + 16))(*v25, 32 * v29, 8);
      v32 = v31 + 32 * v24;
      v33 = v31 + v30;
      if (v31)
      {
        v34 = v31;
        *(_QWORD *)v32 = 0;
        *(_QWORD *)(v32 + 8) = 0;
        *(_QWORD *)(v32 + 16) = 0;
        v35 = *(_WORD **)a2;
        v36 = *(_WORD **)(a2 + 8);
        v37 = (size_t)v36 - *(_QWORD *)a2;
        if (v36 != *(_WORD **)a2)
        {
          v38 = 0xCCCCCCCCCCCCCCCDLL * v37;
          if (0xCCCCCCCCCCCCCCCDLL * v37 >= 0x3333333333333334)
            abort();
          v39 = (char *)operator new(v37);
          *(_QWORD *)v32 = v39;
          *(_QWORD *)(v32 + 8) = v39;
          *(_QWORD *)(v32 + 16) = &v39[5 * v38];
          do
          {
            *(_WORD *)v39 = *v35;
            v39[2] = 0;
            *(_WORD *)(v39 + 3) = *(_WORD *)((char *)v35 + 3);
            v39 += 5;
            v35 = (_WORD *)((char *)v35 + 5);
          }
          while (v35 != v36);
          *(_QWORD *)(v32 + 8) = v39;
          v25 = a1 + 75;
        }
        v40 = *(_WORD *)(a2 + 24);
        v41 = v34 + 32 * v24;
        *(_BYTE *)(v41 + 26) = *(_BYTE *)(a2 + 26);
        *(_WORD *)(v41 + 24) = v40;
      }
    }
    else
    {
      v33 = 0;
      v32 = 32 * v24;
    }
    v23 = v32 + 32;
    v42 = a1[73];
    v43 = a1[72];
    if (v42 == v43)
    {
      v46 = a1[73];
    }
    else
    {
      do
      {
        *(_QWORD *)(v32 - 32) = 0;
        *(_QWORD *)(v32 - 24) = 0;
        v32 -= 32;
        *(_QWORD *)(v32 + 16) = 0;
        v44 = *(_OWORD *)(v42 - 32);
        v42 -= 32;
        *(_OWORD *)v32 = v44;
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(v42 + 16);
        *(_QWORD *)v42 = 0;
        *(_QWORD *)(v42 + 8) = 0;
        *(_QWORD *)(v42 + 16) = 0;
        v45 = *(_WORD *)(v42 + 24);
        *(_BYTE *)(v32 + 26) = *(_BYTE *)(v42 + 26);
        *(_WORD *)(v32 + 24) = v45;
      }
      while (v42 != v43);
      v46 = a1[72];
      v42 = a1[73];
    }
    a1[72] = v32;
    a1[73] = v23;
    v47 = a1[74];
    a1[74] = v33;
    if (v42 == v46)
    {
      v46 = v42;
      if (!v42)
        goto LABEL_57;
    }
    else
    {
      v48 = v42;
      do
      {
        v50 = *(void **)(v48 - 32);
        v48 -= 32;
        v49 = v50;
        if (v50)
        {
          *(_QWORD *)(v42 - 24) = v49;
          operator delete(v49);
        }
        v42 = v48;
      }
      while (v48 != v46);
      if (!v46)
        goto LABEL_57;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v25 + 40))(*v25, v46, v47 - v46);
LABEL_57:
    a1[73] = v23;
    return v8;
  }
  v10 = a1[72];
  while (v6 != *(unsigned __int8 *)(v10 + 24) || v9 != (unsigned __int8 *)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10))
  {
    ++v8;
    v10 += 32;
    if (v10 == v5)
      goto LABEL_21;
  }
  return v8;
}

void sub_19F1BB0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1BB0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 584) = v2;
  _Unwind_Resume(a1);
}

uint64_t md::PointPosition::addElement(unint64_t *a1, _QWORD **a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = (_QWORD *)v3;
  if (v3 == v4)
  {
LABEL_6:
    if ((unint64_t)v5 >= a1[2])
    {
      v8 = std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>((uint64_t)a1, a2);
      v3 = *a1;
    }
    else
    {
      if (v5)
      {
        *v5 = 0;
        v7 = *a2;
        *v5 = *a2;
        if (v7)
          ++*v7;
      }
      v8 = v5 + 1;
    }
    v9 = 126 - 2 * __clz((uint64_t)((uint64_t)v8 - v3) >> 3);
    a1[1] = (unint64_t)v8;
    if (v8 == (uint64_t *)v3)
      v10 = 0;
    else
      v10 = v9;
    v11 = 1;
    std::__introsort<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,false>(v3, v8, v10, 1);
  }
  else
  {
    v6 = v3;
    while (*(_QWORD *)(*(_QWORD *)v6 + 8) != (*a2)[1])
    {
      v6 += 8;
      if (v6 == v4)
      {
        v5 = (_QWORD *)a1[1];
        goto LABEL_6;
      }
    }
    return 0;
  }
  return v11;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *j;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned __int8 v45;
  uint64_t *v46;
  BOOL v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *i;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  BOOL v88;
  char v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;

  v7 = (uint64_t *)result;
  while (2)
  {
    v8 = v7;
LABEL_3:
    v9 = v8;
    v7 = v8 + 1;
    v160 = v8 + 2;
LABEL_4:
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v82 = *(a2 - 1);
        v83 = *v9;
        if (v82)
          v84 = v82 + 8;
        else
          v84 = 0;
        v85 = *(_QWORD *)(v84 + 72);
        v86 = v83 + 8;
        if (!v83)
          v86 = 0;
        v87 = *(_QWORD *)(v86 + 72);
        if (v85 == v87)
        {
          if (*(unsigned __int8 *)(v84 + 129) >= *(unsigned __int8 *)(v86 + 129))
            return result;
        }
        else if (v85 <= v87)
        {
          return result;
        }
        *v9 = 0;
        *v9 = *(a2 - 1);
        *(a2 - 1) = v83;
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v9, v7, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v9, v7, v160, a2 - 1);
      case 5uLL:
        return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,0>(v9, v7, v160, v9 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v88 = v9 == a2 || v7 == a2;
          v89 = v88;
          if ((a4 & 1) != 0)
          {
            if ((v89 & 1) != 0)
              return result;
            v90 = 0;
            v91 = v9;
            while (1)
            {
              v93 = v91;
              v91 = v7;
              v94 = *v7;
              v95 = *v93;
              v96 = *v7 + 8;
              if (!*v7)
                v96 = 0;
              v97 = *(uint64_t **)(v96 + 72);
              v98 = v95 + 8;
              if (!v95)
                v98 = 0;
              v99 = *(uint64_t **)(v98 + 72);
              if (v97 == v99)
              {
                if (*(unsigned __int8 *)(v96 + 129) < *(unsigned __int8 *)(v98 + 129))
                  goto LABEL_210;
              }
              else if (v97 > v99)
              {
LABEL_210:
                *v7 = v95;
                *v93 = 0;
                v100 = v90;
                v92 = v9;
                if (v93 != v9)
                {
                  while (1)
                  {
                    v101 = *(uint64_t *)((char *)v9 + v100 - 8);
                    v102 = v101 + 8;
                    if (!v101)
                      v102 = 0;
                    result = *(_QWORD *)(v102 + 72);
                    if (v97 == (uint64_t *)result)
                    {
                      result = *(unsigned __int8 *)(v96 + 129);
                      if (result >= *(unsigned __int8 *)(v102 + 129))
                      {
                        v92 = v93;
                        break;
                      }
                    }
                    else if ((unint64_t)v97 <= result)
                    {
                      v92 = (uint64_t *)((char *)v9 + v100);
                      break;
                    }
                    --v93;
                    *(uint64_t *)((char *)v9 + v100) = v101;
                    *(uint64_t *)((char *)v9 + v100 - 8) = 0;
                    v100 -= 8;
                    if (!v100)
                    {
                      v92 = v9;
                      break;
                    }
                  }
                }
                *v92 = v94;
              }
              ++v7;
              v90 += 8;
              if (v91 + 1 == a2)
                return result;
            }
          }
          if ((v89 & 1) != 0)
            return result;
          while (1)
          {
            v149 = v9;
            v9 = v7;
            v150 = *v7;
            v151 = *v149;
            v152 = *v7 + 8;
            if (!*v7)
              v152 = 0;
            v153 = *(_QWORD *)(v152 + 72);
            v154 = v151 + 8;
            if (!v151)
              v154 = 0;
            v155 = *(_QWORD *)(v154 + 72);
            if (v153 == v155)
            {
              if (*(unsigned __int8 *)(v152 + 129) < *(unsigned __int8 *)(v154 + 129))
                goto LABEL_321;
            }
            else if (v153 > v155)
            {
LABEL_321:
              *v7 = 0;
              do
              {
                while (1)
                {
                  v156 = v149;
                  v149[1] = v151;
                  v157 = *--v149;
                  v151 = v157;
                  *v156 = 0;
                  v158 = v157 + 8;
                  if (!v157)
                    v158 = 0;
                  v159 = *(_QWORD *)(v158 + 72);
                  if (v153 == v159)
                    break;
                  if (v153 <= v159)
                    goto LABEL_311;
                }
              }
              while (*(unsigned __int8 *)(v152 + 129) < *(unsigned __int8 *)(v158 + 129));
LABEL_311:
              *v156 = v150;
            }
            ++v7;
            if (v9 + 1 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v103 = (v11 - 2) >> 1;
          v104 = v103;
LABEL_225:
          v106 = v104;
          if (v103 < v104)
            goto LABEL_224;
          v107 = (2 * v104) | 1;
          v105 = &v9[v107];
          if (2 * v106 + 2 >= (uint64_t)v11)
            goto LABEL_238;
          v108 = v105[1];
          if (*v105)
            v109 = *v105 + 8;
          else
            v109 = 0;
          v110 = *(_QWORD *)(v109 + 72);
          if (v108)
            v111 = v108 + 8;
          else
            v111 = 0;
          v112 = *(_QWORD *)(v111 + 72);
          if (v110 == v112)
          {
            if (*(unsigned __int8 *)(v109 + 129) >= *(unsigned __int8 *)(v111 + 129))
              goto LABEL_238;
          }
          else if (v110 <= v112)
          {
LABEL_238:
            v113 = v9[v106];
            if (*v105)
              v114 = *v105 + 8;
            else
              v114 = 0;
            result = *(_QWORD *)(v114 + 72);
            v115 = v113 + 8;
            if (!v113)
              v115 = 0;
            v116 = *(uint64_t **)(v115 + 72);
            if ((uint64_t *)result == v116)
            {
              result = *(unsigned __int8 *)(v115 + 129);
              if (*(unsigned __int8 *)(v114 + 129) < result)
                goto LABEL_224;
            }
            else if (result > (unint64_t)v116)
            {
              goto LABEL_224;
            }
            v117 = v106;
            v9[v117] = 0;
            result = *v105;
            v9[v117] = *v105;
            while (1)
            {
              *v105 = 0;
              if (v103 < v107)
                goto LABEL_223;
              v118 = v105;
              v119 = 2 * v107;
              v107 = (2 * v107) | 1;
              v105 = &v9[v107];
              v120 = v119 + 2;
              if (v120 < (uint64_t)v11)
              {
                v121 = v105[1];
                if (*v105)
                  v122 = *v105 + 8;
                else
                  v122 = 0;
                v123 = *(_QWORD *)(v122 + 72);
                if (v121)
                  v124 = v121 + 8;
                else
                  v124 = 0;
                v125 = *(_QWORD *)(v124 + 72);
                if (v123 != v125)
                {
                  if (v123 <= v125)
                    goto LABEL_263;
LABEL_262:
                  ++v105;
                  v107 = v120;
                  goto LABEL_263;
                }
                if (*(unsigned __int8 *)(v122 + 129) < *(unsigned __int8 *)(v124 + 129))
                  goto LABEL_262;
              }
LABEL_263:
              result = *v105;
              v126 = *v105 + 8;
              if (!*v105)
                v126 = 0;
              v127 = *(uint64_t **)(v126 + 72);
              if (v127 == v116)
              {
                if (*(unsigned __int8 *)(v126 + 129) < *(unsigned __int8 *)(v115 + 129))
                {
LABEL_222:
                  v105 = v118;
LABEL_223:
                  *v105 = v113;
LABEL_224:
                  v104 = v106 - 1;
                  if (v106)
                    goto LABEL_225;
                  v128 = (unint64_t)v10 >> 3;
                  while (2)
                  {
                    v131 = 0;
                    v132 = *v9;
                    *v9 = 0;
                    v129 = v9;
LABEL_275:
                    v133 = v129;
                    v129 += v131 + 1;
                    v134 = 2 * v131;
                    v131 = (2 * v131) | 1;
                    v135 = v134 + 2;
                    if (v135 < v128)
                    {
                      v136 = v129[1];
                      if (*v129)
                        v137 = *v129 + 8;
                      else
                        v137 = 0;
                      result = *(_QWORD *)(v137 + 72);
                      if (v136)
                        v138 = v136 + 8;
                      else
                        v138 = 0;
                      v139 = *(uint64_t **)(v138 + 72);
                      if ((uint64_t *)result == v139)
                      {
                        if (*(unsigned __int8 *)(v137 + 129) >= *(unsigned __int8 *)(v138 + 129))
                          goto LABEL_274;
                      }
                      else if (result <= (unint64_t)v139)
                      {
                        goto LABEL_274;
                      }
                      ++v129;
                      v131 = v135;
                    }
LABEL_274:
                    *v133 = *v129;
                    *v129 = 0;
                    if (v131 > (uint64_t)((unint64_t)(v128 - 2) >> 1))
                    {
                      if (v129 == --a2)
                        goto LABEL_270;
                      *v129 = *a2;
                      *a2 = v132;
                      v140 = (char *)v129 - (char *)v9 + 8;
                      if (v140 < 9)
                        goto LABEL_271;
                      v141 = ((unint64_t)v140 >> 3) - 2;
                      v142 = v141 >> 1;
                      v143 = &v9[v141 >> 1];
                      v132 = *v129;
                      if (*v143)
                        v144 = *v143 + 8;
                      else
                        v144 = 0;
                      v145 = *(uint64_t **)(v144 + 72);
                      v146 = v132 + 8;
                      if (!v132)
                        v146 = 0;
                      v147 = *(uint64_t **)(v146 + 72);
                      if (v145 != v147)
                      {
                        if (v145 <= v147)
                          goto LABEL_271;
LABEL_298:
                        *v129 = 0;
                        *v129 = *v143;
                        *v143 = 0;
                        v129 = &v9[v141 >> 1];
                        while (v141 >= 2)
                        {
                          v141 = v142 - 1;
                          v142 = (v142 - 1) >> 1;
                          v129 = &v9[v142];
                          v148 = *v129 + 8;
                          if (!*v129)
                            v148 = 0;
                          result = *(_QWORD *)(v148 + 72);
                          if ((uint64_t *)result == v147)
                          {
                            result = *(unsigned __int8 *)(v146 + 129);
                            if (*(unsigned __int8 *)(v148 + 129) >= result)
                            {
LABEL_269:
                              v129 = v143;
                              break;
                            }
                          }
                          else if (result <= (unint64_t)v147)
                          {
                            goto LABEL_269;
                          }
                          *v143 = *v129;
                          *v129 = 0;
                          v143 = &v9[v142];
                        }
LABEL_270:
                        *v129 = v132;
                        goto LABEL_271;
                      }
                      if (*(unsigned __int8 *)(v144 + 129) < *(unsigned __int8 *)(v146 + 129))
                        goto LABEL_298;
LABEL_271:
                      if (v128-- <= 2)
                        return result;
                      continue;
                    }
                    goto LABEL_275;
                  }
                }
              }
              else if (v127 > v116)
              {
                goto LABEL_222;
              }
              *v118 = result;
            }
          }
          ++v105;
          v107 = 2 * v106 + 2;
          goto LABEL_238;
        }
        v12 = &v9[v11 >> 1];
        v13 = a2 - 1;
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(&v9[v11 >> 1], v9, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v9, &v9[v11 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v7, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v160, v12 + 1, a2 - 3);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v12 - 1, v12, v12 + 1);
          v14 = *v9;
          *v9 = 0;
          *v9 = *v12;
          *v12 = v14;
        }
        --a3;
        v15 = *v9;
        if ((a4 & 1) == 0)
        {
          v16 = *(v9 - 1);
          if (v16)
            v17 = v16 + 8;
          else
            v17 = 0;
          v18 = *(_QWORD *)(v17 + 72);
          v19 = v15 + 8;
          if (!v15)
            v19 = 0;
          v20 = *(_QWORD *)(v19 + 72);
          if (v18 == v20)
          {
            if (*(unsigned __int8 *)(v17 + 129) < *(unsigned __int8 *)(v19 + 129))
              goto LABEL_20;
            v20 = *(_QWORD *)(v17 + 72);
          }
          else if (v18 > v20)
          {
            goto LABEL_20;
          }
          *v9 = 0;
          v54 = *v13;
          v55 = *v13 + 8;
          if (!*v13)
            v55 = 0;
          v56 = *(_QWORD *)(v55 + 72);
          if (v20 == v56)
          {
            if (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v55 + 129))
            {
              while (1)
              {
LABEL_112:
                if (*v7)
                  v57 = *v7 + 8;
                else
                  v57 = 0;
                v58 = *(_QWORD *)(v57 + 72);
                if (v20 == v58)
                {
                  if (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v57 + 129))
                    goto LABEL_126;
                }
                else if (v20 > v58)
                {
                  goto LABEL_126;
                }
                ++v7;
              }
            }
          }
          else if (v20 > v56)
          {
            goto LABEL_112;
          }
          while (v7 < a2)
          {
            if (*v7)
              v59 = *v7 + 8;
            else
              v59 = 0;
            v60 = *(_QWORD *)(v59 + 72);
            if (v20 == v60)
            {
              if (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v59 + 129))
                break;
            }
            else if (v20 > v60)
            {
              break;
            }
            ++v7;
          }
LABEL_126:
          i = a2;
          if (v7 < a2)
          {
            for (i = a2 - 1; ; --i)
            {
              if (v54)
                v63 = v54 + 8;
              else
                v63 = 0;
              v64 = *(_QWORD *)(v63 + 72);
              if (v20 == v64)
              {
                if (*(unsigned __int8 *)(v19 + 129) >= *(unsigned __int8 *)(v63 + 129))
                  break;
              }
              else if (v20 <= v64)
              {
                break;
              }
              v62 = *(i - 1);
              v54 = v62;
            }
          }
          if (v7 >= i)
          {
            v72 = 0;
            goto LABEL_155;
          }
          v65 = *v7;
          while (2)
          {
            *v7 = 0;
            *v7++ = *i;
            *i = v65;
            while (1)
            {
              v65 = *v7;
              v66 = *v7 + 8;
              if (!*v7)
                v66 = 0;
              v67 = *(_QWORD *)(v66 + 72);
              if (v20 != v67)
                break;
              if (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v66 + 129))
                goto LABEL_147;
LABEL_140:
              ++v7;
            }
            if (v20 <= v67)
              goto LABEL_140;
            do
            {
LABEL_147:
              while (1)
              {
                v68 = *--i;
                v69 = v68 + 8;
                v70 = v68 ? v69 : 0;
                v71 = *(_QWORD *)(v70 + 72);
                if (v20 == v71)
                  break;
                if (v20 <= v71)
                  goto LABEL_137;
              }
            }
            while (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v70 + 129));
LABEL_137:
            if (v7 < i)
              continue;
            break;
          }
          v72 = (_QWORD *)*v9;
LABEL_155:
          v73 = v7 - 1;
          if (v7 - 1 != v9)
          {
            if (v72)
            {
              v88 = (*v72)-- == 1;
              if (v88)
              {
                v74 = (std::__shared_weak_count *)v72[3];
                if (v74)
                {
                  p_shared_owners = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(p_shared_owners);
                  while (__stlxr(v76 - 1, p_shared_owners));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                v77 = mdm::Allocator::instance((mdm::Allocator *)result);
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 40))(v77, *v9, 152);
                *v9 = 0;
              }
            }
            *v9 = *v73;
            v9 = v7 - 1;
            goto LABEL_166;
          }
          if (v72)
          {
            v88 = (*v72)-- == 1;
            if (v88)
            {
              v78 = (std::__shared_weak_count *)v72[3];
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v81 = mdm::Allocator::instance((mdm::Allocator *)result);
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81 + 40))(v81, *v9, 152);
LABEL_166:
              *v9 = 0;
            }
          }
          a4 = 0;
          *v73 = v15;
          continue;
        }
LABEL_20:
        *v9 = 0;
        v21 = v15 + 8;
        if (!v15)
          v21 = 0;
        v22 = *(_QWORD *)(v21 + 72);
        v23 = v7;
        while (2)
        {
          v24 = *v23;
          v25 = *v23 + 8;
          if (!*v23)
            v25 = 0;
          v26 = *(_QWORD *)(v25 + 72);
          if (v26 == v22)
          {
            if (*(unsigned __int8 *)(v25 + 129) >= *(unsigned __int8 *)(v21 + 129))
              break;
            goto LABEL_24;
          }
          if (v26 > v22)
          {
LABEL_24:
            ++v23;
            continue;
          }
          break;
        }
        v27 = v23 - 1;
        if (v23 - 1 != v9)
        {
          for (j = a2 - 1; ; --j)
          {
            if (*j)
              v29 = *j + 8;
            else
              v29 = 0;
            v30 = *(_QWORD *)(v29 + 72);
            if (v30 == v22)
            {
              if (*(unsigned __int8 *)(v29 + 129) < *(unsigned __int8 *)(v21 + 129))
                goto LABEL_51;
            }
            else if (v30 > v22)
            {
              goto LABEL_51;
            }
          }
        }
        j = a2;
        if (v23 < a2)
        {
          for (j = a2 - 1; ; --j)
          {
            if (*j)
              v31 = *j + 8;
            else
              v31 = 0;
            v32 = *(_QWORD *)(v31 + 72);
            if (v32 == v22)
            {
              if (v23 >= j || *(unsigned __int8 *)(v31 + 129) < *(unsigned __int8 *)(v21 + 129))
                break;
            }
            else if (v23 >= j || v32 > v22)
            {
              break;
            }
          }
        }
LABEL_51:
        if (v23 < j)
        {
          v33 = v23;
          v34 = j;
          while (1)
          {
            *v33 = 0;
            *v33++ = *v34;
            *v34 = v24;
            while (1)
            {
              v24 = *v33;
              v35 = *v33 + 8;
              if (!*v33)
                v35 = 0;
              v36 = *(_QWORD *)(v35 + 72);
              if (v36 != v22)
                break;
              if (*(unsigned __int8 *)(v35 + 129) >= *(unsigned __int8 *)(v21 + 129))
                goto LABEL_61;
LABEL_56:
              ++v33;
            }
            if (v36 > v22)
              goto LABEL_56;
LABEL_61:
            v27 = v33 - 1;
            do
            {
              while (1)
              {
                v37 = *--v34;
                v38 = v37 + 8;
                v39 = v37 ? v38 : 0;
                v40 = *(_QWORD *)(v39 + 72);
                if (v40 == v22)
                  break;
                if (v40 > v22)
                  goto LABEL_53;
              }
            }
            while (*(unsigned __int8 *)(v39 + 129) >= *(unsigned __int8 *)(v21 + 129));
LABEL_53:
            if (v33 >= v34)
            {
              v41 = (_QWORD *)*v9;
              if (v27 == v9)
                goto LABEL_87;
LABEL_70:
              if (v41)
              {
                v88 = (*v41)-- == 1;
                if (v88)
                {
                  v42 = (std::__shared_weak_count *)v41[3];
                  if (v42)
                  {
                    v43 = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(v43);
                    while (__stlxr(v44 - 1, v43));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  {
                    v52 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v52, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, *v9, 152);
                  *v9 = 0;
                }
              }
              *v9 = *v27;
              v46 = v27;
LABEL_81:
              *v46 = 0;
              goto LABEL_82;
            }
          }
        }
        v41 = 0;
        if (v27 != v9)
          goto LABEL_70;
LABEL_87:
        if (v41)
        {
          v88 = (*v41)-- == 1;
          if (v88)
          {
            v48 = (std::__shared_weak_count *)v41[3];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            {
              v53 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *v9, 152);
            v46 = v9;
            goto LABEL_81;
          }
        }
LABEL_82:
        *v27 = v15;
        if (v23 < j)
        {
LABEL_102:
          result = std::__introsort<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,false>(v9, v27, a3, a4 & 1);
          a4 = 0;
          v7 = v27 + 1;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v9, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v47)
            goto LABEL_3;
          goto LABEL_102;
        }
        a2 = v27;
        if (!v47)
          goto LABEL_4;
        return result;
    }
  }
}

void sub_19F1BBFAC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;

  if (v1)
  {
    if ((*v1)-- == 1)
    {
      v4 = (std::__shared_weak_count *)v1[3];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = mdm::Allocator::instance((mdm::Allocator *)exception_object);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v1, 152);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::PointLabelFeature::featureID(md::PointLabelFeature *this)
{
  return *((_QWORD *)this + 62);
}

float md::LabelFeature::vectorFromAzimuth(md::LabelFeature *this, float a2, const md::LabelPoint *a3)
{
  float v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;

  v3 = a2 * -0.017453;
  v4 = v3;
  if (!(_DWORD)a3)
    return __sincos_stret(v3).__cosval;
  v5 = md::LabelPoint::geocentricNormal(this);
  v7 = v6;
  v9 = v8;
  v10 = -(v5 * v8);
  v11 = -(v6 * v8);
  v12 = v7 * v7 + v5 * v5;
  v13 = 1.0 / sqrt(v10 * v10 + v11 * v11 + v12 * v12);
  v14 = v13 * v10;
  v15 = v13 * v11;
  v16 = v13 * v12;
  v17 = __sincos_stret(v4 * 0.5);
  v18 = v5 * v17.__sinval;
  v19 = v7 * v17.__sinval;
  v20 = v9 * v17.__sinval;
  return v14
       + (-(v15 * v20 - v16 * v19) - (v15 * v20 - v16 * v19)) * v17.__cosval
       + (-(v14 * v19 - v15 * v18) - (v14 * v19 - v15 * v18)) * v19
       - (-(v16 * v18 - v14 * v20) - (v16 * v18 - v14 * v20)) * v20;
}

BOOL md::ElevationLogic::_startFlatteningScaleAnimation(md::ElevationLogic *this, float a2)
{
  VKTimedAnimation *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  _QWORD v8[5];

  v3 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", a2);
  v4 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v3;

  objc_msgSend(*((id *)this + 18), "setTimingFunction:", VKAnimationCurveEaseOut);
  v5 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN2md14ElevationLogic30_startFlatteningScaleAnimationEf_block_invoke;
  v8[3] = &__block_descriptor_40_e8_v12__0f8l;
  v8[4] = this;
  objc_msgSend(*((id *)this + 18), "setStepHandler:", v8);
  v7[0] = v5;
  v7[1] = 3221225472;
  v7[2] = ___ZN2md14ElevationLogic30_startFlatteningScaleAnimationEf_block_invoke_2;
  v7[3] = &__block_descriptor_40_e8_v12__0B8l;
  v7[4] = this;
  objc_msgSend(*((id *)this + 18), "setCompletionHandler:", v7);
  return md::AnimationRunner::runAnimation(*((md::MapEngine ***)this + 16), *((VKAnimation **)this + 18));
}

uint64_t md::CartographicMapEngineConfiguration::didBecomeInactive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (!*(_QWORD *)&v3)
    return result;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v3 <= 0x20A1ED17D78F322BuLL)
      v5 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x20A1ED17D78F322BLL;
  }
  v6 = v2[1];
  v7 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v5);
  if (!v7 || (v8 = (_QWORD *)*v7) == 0)
  {
LABEL_21:
    v11 = 0;
    goto LABEL_22;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x20A1ED17D78F322BLL)
      {
        if (v8[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_46;
      }
      else if ((v10 & (*(_QWORD *)&v3 - 1)) != v5)
      {
        goto LABEL_21;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x20A1ED17D78F322BLL)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      goto LABEL_21;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_21;
  }
  if (v8[2] != 0x20A1ED17D78F322BLL)
    goto LABEL_11;
LABEL_46:
  v11 = v8[5];
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    v12 = 0xBEC1A12372CEEC00;
    if (*(_QWORD *)&v3 <= 0xBEC1A12372CEEC00)
      v12 = 0xBEC1A12372CEEC00 % *(_QWORD *)&v3;
  }
  else
  {
    v12 = (*(_QWORD *)&v3 - 1) & 0xBEC1A12372CEEC00;
  }
  v13 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_41:
    v18 = 0;
    if (v11)
      goto LABEL_42;
    goto LABEL_43;
  }
  if (v4.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == 0xBEC1A12372CEEC00)
      {
        if (v14[2] == 0xBEC1A12372CEEC00)
          goto LABEL_47;
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_41;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_41;
    }
  }
  while (2)
  {
    v16 = v14[1];
    if (v16 != 0xBEC1A12372CEEC00)
    {
      if (v16 >= *(_QWORD *)&v3)
        v16 %= *(_QWORD *)&v3;
      if (v16 != v12)
        goto LABEL_41;
      goto LABEL_31;
    }
    if (v14[2] != 0xBEC1A12372CEEC00)
    {
LABEL_31:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_41;
      continue;
    }
    break;
  }
LABEL_47:
  v18 = v14[5];
  if (!v11)
    goto LABEL_43;
LABEL_42:
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 160) + 168) + 32);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 120))(v19, 0);
LABEL_43:
  if (v18)
    return objc_msgSend(*(id *)(v18 + 296), "setRouteOverlayCache:", 0);
  return result;
}

void md::CartographicMapEngineConfiguration::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int8x8_t *v20;
  int8x8_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t *v32;
  int8x8_t v33;
  uint8x8_t v34;
  uint64_t v35;
  int8x8_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  v5 = *(_QWORD *)(a3 + 856);
  v6 = *(int8x8_t **)(a2 + 1120);
  v7 = v6[2];
  if (!*(_QWORD *)&v7)
    goto LABEL_33;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v7 <= 0x2FED70A4459DFCA1uLL)
      v9 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x2FED70A4459DFCA1;
  }
  v10 = *(_QWORD **)(*(_QWORD *)&v6[1] + 8 * v9);
  if (!v10)
    goto LABEL_33;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_33;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == 0x2FED70A4459DFCA1)
      {
        if (v11[2] == 0x2FED70A4459DFCA1)
          goto LABEL_22;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_33;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_33;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == 0x2FED70A4459DFCA1)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_33;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_33;
  }
  if (v11[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
LABEL_22:
  v15 = v11[5];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 208);
    if (v16)
    {
      gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(v16, 0x10036u);
      v50 = 4;
      v17 = *(char **)(v15 + 1128);
      v18 = *(char **)(v15 + 1136);
      if (v17 != v18)
      {
        while (*v17 <= 3u)
        {
          if (++v17 == v18)
            goto LABEL_30;
        }
      }
      if (v17 == v18 || (v18 = v17, *v17 != 4))
LABEL_30:
        std::vector<md::StyleManagerEvent>::insert(v15 + 1128, v18, &v50);
      v19 = **(_QWORD **)(v15 + 1240);
      if (v19)
      {
        v51 = 12;
        md::MapEngine::setNeedsTick(v19, &v51);
      }
    }
  }
LABEL_33:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 320) + 268) = 1;
  v20 = *(int8x8_t **)(a2 + 1120);
  v21 = v20[2];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8(v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v23 = 0x20A1ED17D78F322BLL;
      if (*(_QWORD *)&v21 <= 0x20A1ED17D78F322BuLL)
        v23 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v21;
    }
    else
    {
      v23 = (*(_QWORD *)&v21 - 1) & 0x20A1ED17D78F322BLL;
    }
    v24 = *(_QWORD **)(*(_QWORD *)&v20[1] + 8 * v23);
    if (v24)
    {
      v25 = (_QWORD *)*v24;
      if (v25)
      {
        if (v22.u32[0] < 2uLL)
        {
          v26 = *(_QWORD *)&v21 - 1;
          while (1)
          {
            v28 = v25[1];
            if (v28 == 0x20A1ED17D78F322BLL)
            {
              if (v25[2] == 0x20A1ED17D78F322BLL)
                goto LABEL_101;
            }
            else if ((v28 & v26) != v23)
            {
              goto LABEL_53;
            }
            v25 = (_QWORD *)*v25;
            if (!v25)
              goto LABEL_53;
          }
        }
        do
        {
          v27 = v25[1];
          if (v27 == 0x20A1ED17D78F322BLL)
          {
            if (v25[2] == 0x20A1ED17D78F322BLL)
            {
LABEL_101:
              v29 = v25[5];
              goto LABEL_54;
            }
          }
          else
          {
            if (v27 >= *(_QWORD *)&v21)
              v27 %= *(_QWORD *)&v21;
            if (v27 != v23)
              break;
          }
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
    }
  }
LABEL_53:
  v29 = 0;
LABEL_54:
  md::LabelsLogic::setWorldType(v29, *(unsigned __int8 *)(a1 + 32));
  v30 = *(_QWORD *)(v5 + 40);
  if ((unint64_t)(*(_QWORD *)(v5 + 48) - v30) < 0x98)
    return;
  v31 = *(_QWORD *)(v30 + 144);
  if (!v31)
    return;
  v32 = *(int8x8_t **)(a2 + 1120);
  v33 = v32[2];
  if (!*(_QWORD *)&v33)
    return;
  v34 = (uint8x8_t)vcnt_s8(v33);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v33 <= 0x20A1ED17D78F322BuLL)
      v35 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v33;
  }
  else
  {
    v35 = (*(_QWORD *)&v33 - 1) & 0x20A1ED17D78F322BLL;
  }
  v36 = v32[1];
  v37 = *(_QWORD **)(*(_QWORD *)&v36 + 8 * v35);
  if (!v37 || (v38 = (_QWORD *)*v37) == 0)
  {
LABEL_76:
    v41 = 0;
    goto LABEL_77;
  }
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v38[1];
      if (v40 == 0x20A1ED17D78F322BLL)
      {
        if (v38[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_102;
      }
      else if ((v40 & (*(_QWORD *)&v33 - 1)) != v35)
      {
        goto LABEL_76;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_76;
    }
  }
  while (2)
  {
    v39 = v38[1];
    if (v39 != 0x20A1ED17D78F322BLL)
    {
      if (v39 >= *(_QWORD *)&v33)
        v39 %= *(_QWORD *)&v33;
      if (v39 != v35)
        goto LABEL_76;
      goto LABEL_66;
    }
    if (v38[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_66:
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_76;
      continue;
    }
    break;
  }
LABEL_102:
  v41 = v38[5];
LABEL_77:
  if (v34.u32[0] > 1uLL)
  {
    v42 = 0xBEC1A12372CEEC00;
    if (*(_QWORD *)&v33 <= 0xBEC1A12372CEEC00)
      v42 = 0xBEC1A12372CEEC00 % *(_QWORD *)&v33;
  }
  else
  {
    v42 = (*(_QWORD *)&v33 - 1) & 0xBEC1A12372CEEC00;
  }
  v43 = *(_QWORD **)(*(_QWORD *)&v36 + 8 * v42);
  if (!v43 || (v44 = (_QWORD *)*v43) == 0)
  {
LABEL_96:
    v48 = 0;
    if (v41)
      goto LABEL_97;
    goto LABEL_98;
  }
  if (v34.u32[0] < 2uLL)
  {
    v45 = *(_QWORD *)&v33 - 1;
    while (1)
    {
      v47 = v44[1];
      if (v47 == 0xBEC1A12372CEEC00)
      {
        if (v44[2] == 0xBEC1A12372CEEC00)
          goto LABEL_103;
      }
      else if ((v47 & v45) != v42)
      {
        goto LABEL_96;
      }
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_96;
    }
  }
  while (2)
  {
    v46 = v44[1];
    if (v46 != 0xBEC1A12372CEEC00)
    {
      if (v46 >= *(_QWORD *)&v33)
        v46 %= *(_QWORD *)&v33;
      if (v46 != v42)
        goto LABEL_96;
      goto LABEL_86;
    }
    if (v44[2] != 0xBEC1A12372CEEC00)
    {
LABEL_86:
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_96;
      continue;
    }
    break;
  }
LABEL_103:
  v48 = v44[5];
  if (!v41)
    goto LABEL_98;
LABEL_97:
  v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 160) + 168) + 32);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 120))(v49, *(_QWORD *)(v31 + 72));
LABEL_98:
  if (v48)
    objc_msgSend(*(id *)(v48 + 296), "setRouteOverlayCache:", *(_QWORD *)(v31 + 72));
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::setRouteOverlayCache(uint64_t this, const RouteOverlayCache *a2)
{
  if (*(const RouteOverlayCache **)(this + 96) != a2)
  {
    *(_QWORD *)(this + 96) = a2;
    *(_QWORD *)(*(_QWORD *)(this + 680) + 104) = a2;
  }
  return this;
}

void md::StyleLogic::setUsage(uint64_t a1, int a2, int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char v7;
  char v8;

  if (*(unsigned __int8 *)(a1 + 173) != a2 || *(unsigned __int8 *)(a1 + 174) != a3)
  {
    *(_BYTE *)(a1 + 173) = a2;
    *(_BYTE *)(a1 + 174) = a3;
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10071u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10071u, *(unsigned __int8 *)(a1 + 173));
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10072u, *(unsigned __int8 *)(a1 + 174));
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10072u, *(unsigned __int8 *)(a1 + 174));
    v7 = 4;
    v4 = *(char **)(a1 + 1128);
    v5 = *(char **)(a1 + 1136);
    if (v4 != v5)
    {
      while (*v4 <= 3u)
      {
        if (++v4 == v5)
          goto LABEL_9;
      }
    }
    if (v4 == v5 || (v5 = v4, *v4 != 4))
LABEL_9:
      std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v5, &v7);
    v6 = **(_QWORD **)(a1 + 1240);
    if (v6)
    {
      v8 = 12;
      md::MapEngine::setNeedsTick(v6, &v8);
    }
  }
}

void md::StyleLogic::reset(md::StyleLogic *this)
{
  __int16 *v1;
  std::__shared_weak_count *v3;
  char *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  geo::read_write_lock *v34;
  const char *v35;
  uint64_t v36;
  geo::read_write_lock *v37;
  const char *v38;
  geo::read_write_lock *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  unsigned __int16 v54;
  uint64_t v55;
  _DWORD *v56;
  gss::Allocator *v57;
  uint64_t v58;
  float v59;
  unint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  geo::read_write_lock *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  unsigned int v81;
  __int16 v82;
  unsigned __int16 v83;
  uint64_t v84;
  _DWORD *v85;
  gss::Allocator *v86;
  uint64_t v87;
  float v88;
  unint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  geo::read_write_lock *v99;
  const char *v100;
  double v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  unint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  double v129;
  int v130;
  id v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  id v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  char *v148;
  gss::Allocator *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  v4 = (char *)this + 424;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  *((_OWORD *)this + 37) = 0u;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 77) = 0;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 96) = 0;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 98) = 0;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 117);
  *((_OWORD *)this + 58) = 0u;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 119) = 0;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_QWORD *)((char *)&v160 + 7) = 0;
  *(_QWORD *)&v160 = 0;
  HIBYTE(v160) = 1;
  *(_QWORD *)((char *)&v159 + 7) = 0;
  *(_QWORD *)&v159 = 0;
  HIBYTE(v159) = 1;
  v31 = *((_QWORD *)this + 28);
  if (v31)
  {
    v161 = v31 + 16;
    v32 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v31 + 16));
    if ((_DWORD)v32)
      geo::read_write_lock::logFailure(v32, (uint64_t)"read lock", v33);
    *(_QWORD *)((char *)&v158 + 7) = 0;
    *(_QWORD *)&v158 = 0;
    HIBYTE(v158) = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(&v158, v31 + 216);
    v34 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v31 + 16));
    if ((_DWORD)v34)
      geo::read_write_lock::logFailure(v34, (uint64_t)"unlock", v35);
    v36 = *((_QWORD *)this + 28);
    v160 = v158;
    v161 = v36 + 16;
    v37 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v36 + 16));
    if ((_DWORD)v37)
      geo::read_write_lock::logFailure(v37, (uint64_t)"read lock", v38);
    *(_QWORD *)((char *)&v158 + 7) = 0;
    *(_QWORD *)&v158 = 0;
    HIBYTE(v158) = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(&v158, v36 + 232);
    v39 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v36 + 16));
    if ((_DWORD)v39)
      geo::read_write_lock::logFailure(v39, (uint64_t)"unlock", v40);
    if (!BYTE14(v159))
    {
      v41 = v159;
      if ((_QWORD)v159)
      {
        v42 = gss::Allocator::instance(v39);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v42 + 40))(v42, v41, WORD6(v159));
      }
    }
    v159 = v158;
  }
  md::StyleLogic::updateConfiguration(this, *((_DWORD *)this + 274));
  v43 = *((_QWORD *)this + 28);
  if (v43)
  {
    if (!v31)
    {
      v103 = gss::ClientStyleState<gss::PropertyID>::sourceMapDisplayStyle(*((_QWORD *)this + 26));
      gss::ClientStyleState<gss::ScenePropertyID>::setSourceMapDisplayStyle(v43, v103);
      v104 = *((_QWORD *)this + 28);
      v105 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(*((_QWORD *)this + 26));
      gss::ClientStyleState<gss::ScenePropertyID>::setTargetMapDisplayStyle(v104, v105);
      goto LABEL_122;
    }
    *(_QWORD *)&v158 = v43 + 16;
    v44 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v43 + 16));
    if ((_DWORD)v44)
      geo::read_write_lock::logFailure((geo::read_write_lock *)v44, (uint64_t)"write lock", v45);
    v46 = WORD5(v160);
    if (WORD5(v160))
    {
      v47 = 0;
      v48 = 0;
      v49 = v160;
      v50 = v160 + WORD4(v160);
      do
      {
        if (v48 < v46)
        {
          v47 = (unsigned int *)(v49 + 4 * v48);
          v1 = (__int16 *)(v50 + 2 * v48);
        }
        v51 = *v1;
        v44 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v43 + 216), *v47);
        *(_WORD *)v44 = v51;
        v52 = v48 + 1;
        if (v48 + 1 < v46)
          ++v48;
        else
          v48 = v46;
      }
      while (v52 < v46);
    }
    if (!*(_BYTE *)(v43 + 230) && !*(_BYTE *)(v43 + 231))
    {
      v53 = *(_WORD *)(v43 + 228);
      v54 = (4 * v53) | 2;
      v55 = gss::Allocator::instance((gss::Allocator *)v44);
      v56 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v55 + 16))(v55, (unsigned __int16)(v54 + 2 * v53) & 0xFFFE, 1);
      if (*(_QWORD *)(v43 + 216))
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v43 + 216, v56, (_DWORD *)((char *)v56 + v54), 1);
        v58 = gss::Allocator::instance(v57);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v58 + 40))(v58, *(_QWORD *)(v43 + 216), *(unsigned __int16 *)(v43 + 228));
      }
      *(_WORD *)(v43 + 228) = v53;
      *(_QWORD *)(v43 + 216) = v56;
      *(_WORD *)(v43 + 224) = v54;
    }
    v59 = COERCE_FLOAT(atomic_load((unsigned int *)(v43 + 256)));
    if (v59 <= 0.0)
    {
      v60 = *(unsigned __int16 *)(v43 + 242);
      if ((_DWORD)v60 == *(unsigned __int16 *)(v43 + 226))
      {
        if (!*(_WORD *)(v43 + 242))
          goto LABEL_87;
        v61 = *(_DWORD **)(v43 + 232);
        v62 = *(_DWORD **)(v43 + 216);
        if (*v61 == *v62)
        {
          v63 = (unsigned __int16 *)((char *)v62 + *(unsigned __int16 *)(v43 + 224));
          v64 = (unsigned __int16 *)((char *)v61 + *(unsigned __int16 *)(v43 + 240));
          if (*v64 == *v63)
          {
            v65 = 0;
            v66 = 1;
            while (1)
            {
              if (v60 == v66)
              {
                v67 = *(unsigned __int16 *)(v43 + 242);
                goto LABEL_182;
              }
              v67 = v66;
              ++v65;
              if (v61[v66] != v62[v66])
                break;
              ++v66;
              if (v64[v67] != v63[v67])
                goto LABEL_182;
            }
            v67 = v65;
LABEL_182:
            LOBYTE(v60) = v67 < v60;
LABEL_87:
            atomic_store(v60, (unsigned __int8 *)(v43 + 254));
            v68 = (unsigned int *)(v43 + 248);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 + 1, v68));
            v70 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v158);
            if ((_DWORD)v70)
              geo::read_write_lock::logFailure(v70, (uint64_t)"unlock", v71);
            v72 = *((_QWORD *)this + 28);
            *(_QWORD *)&v158 = v72 + 16;
            v73 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v72 + 16));
            if ((_DWORD)v73)
              geo::read_write_lock::logFailure((geo::read_write_lock *)v73, (uint64_t)"write lock", v74);
            v75 = WORD5(v159);
            if (WORD5(v159))
            {
              v76 = 0;
              v77 = 0;
              v78 = v159;
              v79 = v159 + WORD4(v159);
              do
              {
                if (v77 < v75)
                {
                  v76 = (unsigned int *)(v78 + 4 * v77);
                  v1 = (__int16 *)(v79 + 2 * v77);
                }
                v80 = *v1;
                v73 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v72 + 232), *v76);
                *(_WORD *)v73 = v80;
                v81 = v77 + 1;
                if (v77 + 1 < v75)
                  ++v77;
                else
                  v77 = v75;
              }
              while (v81 < v75);
            }
            if (!*(_BYTE *)(v72 + 246) && !*(_BYTE *)(v72 + 247))
            {
              v82 = *(_WORD *)(v72 + 244);
              v83 = (4 * v82) | 2;
              v84 = gss::Allocator::instance((gss::Allocator *)v73);
              v85 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v84 + 16))(v84, (unsigned __int16)(v83 + 2 * v82) & 0xFFFE, 1);
              if (*(_QWORD *)(v72 + 232))
              {
                geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v72 + 232, v85, (_DWORD *)((char *)v85 + v83), 1);
                v87 = gss::Allocator::instance(v86);
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v87 + 40))(v87, *(_QWORD *)(v72 + 232), *(unsigned __int16 *)(v72 + 244));
              }
              *(_WORD *)(v72 + 244) = v82;
              *(_QWORD *)(v72 + 232) = v85;
              *(_WORD *)(v72 + 240) = v83;
            }
            v88 = COERCE_FLOAT(atomic_load((unsigned int *)(v72 + 256)));
            if (v88 <= 0.0)
            {
              v89 = *(unsigned __int16 *)(v72 + 242);
              if ((_DWORD)v89 == *(unsigned __int16 *)(v72 + 226))
              {
                if (!*(_WORD *)(v72 + 242))
                {
LABEL_117:
                  atomic_store(v89, (unsigned __int8 *)(v72 + 254));
                  v97 = (unsigned int *)(v72 + 248);
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 + 1, v97));
                  v99 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v158);
                  if ((_DWORD)v99)
                    geo::read_write_lock::logFailure(v99, (uint64_t)"unlock", v100);
LABEL_122:
                  v106 = *((_QWORD *)this + 28);
                  LODWORD(v101) = *(_DWORD *)(*((_QWORD *)this + 26) + 256);
                  v107 = COERCE_FLOAT(atomic_load((unsigned int *)(v106 + 256)));
                  *(float *)&v102 = v107;
                  if (v107 == *(float *)&v101)
                  {
LABEL_137:
                    v125 = *((_QWORD *)this + 28);
                    objc_msgSend(*((id *)this + 19), "size", v101, v102);
                    v127 = v126;
                    objc_msgSend(*((id *)this + 19), "size");
                    v129 = fmin(v128, v127);
                    if (v129 <= 250.0)
                    {
                      v130 = 0;
                    }
                    else if (v129 <= 450.0)
                    {
                      v130 = 1;
                    }
                    else if (v129 <= 850.0)
                    {
                      v130 = 2;
                    }
                    else
                    {
                      v130 = 3;
                    }
                    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(v125, 0x10018u, v130);
                    goto LABEL_145;
                  }
                  *(_DWORD *)(v106 + 256) = *(_DWORD *)(*((_QWORD *)this + 26) + 256);
                  v108 = COERCE_FLOAT(atomic_load((unsigned int *)(v106 + 256)));
                  *(float *)&v101 = v108;
                  if (v108 <= 0.0)
                  {
                    v109 = *(unsigned __int16 *)(v106 + 242);
                    if ((_DWORD)v109 == *(unsigned __int16 *)(v106 + 226))
                    {
                      if (!*(_WORD *)(v106 + 242))
                        goto LABEL_134;
                      v110 = *(_DWORD **)(v106 + 232);
                      v111 = *(_DWORD **)(v106 + 216);
                      if (*v110 == *v111)
                      {
                        v112 = *(unsigned __int16 *)(v106 + 224);
                        v113 = *(unsigned __int16 *)(v106 + 240);
                        if (*(unsigned __int16 *)((char *)v110 + v113) == *(unsigned __int16 *)((char *)v111 + v112))
                        {
                          v114 = 0;
                          v115 = v110 + 1;
                          v116 = v111 + 1;
                          v117 = (uint64_t)v110 + v113 + 2;
                          v118 = (uint64_t)v111 + v112 + 2;
                          while (v109 - 1 != v114)
                          {
                            v119 = v114++;
                            if (v115[v119] != v116[v119])
                              goto LABEL_179;
                            if (*(unsigned __int16 *)(v117 + 2 * v119) != *(unsigned __int16 *)(v118 + 2 * v119))
                            {
                              v114 = v119 + 1;
                              goto LABEL_179;
                            }
                          }
                          v114 = *(unsigned __int16 *)(v106 + 242);
LABEL_179:
                          LOBYTE(v109) = v114 < v109;
                          goto LABEL_134;
                        }
                      }
                    }
                  }
                  LOBYTE(v109) = 1;
LABEL_134:
                  atomic_store(v109, (unsigned __int8 *)(v106 + 254));
                  v120 = *(unsigned __int8 *)(v106 + 253);
                  v121 = atomic_load((unsigned __int8 *)(v106 + 254));
                  if (v120 != (v121 & 1))
                  {
                    v122 = atomic_load((unsigned __int8 *)(v106 + 254));
                    *(_BYTE *)(v106 + 253) = v122 & 1;
                    v123 = (unsigned int *)(v106 + 248);
                    do
                      v124 = __ldaxr(v123);
                    while (__stlxr(v124 + 1, v123));
                  }
                  goto LABEL_137;
                }
                v90 = *(_DWORD **)(v72 + 232);
                v91 = *(_DWORD **)(v72 + 216);
                if (*v90 == *v91)
                {
                  v92 = (unsigned __int16 *)((char *)v91 + *(unsigned __int16 *)(v72 + 224));
                  v93 = (unsigned __int16 *)((char *)v90 + *(unsigned __int16 *)(v72 + 240));
                  if (*v93 == *v92)
                  {
                    v94 = 0;
                    v95 = 1;
                    while (1)
                    {
                      if (v89 == v95)
                      {
                        v96 = *(unsigned __int16 *)(v72 + 242);
                        goto LABEL_184;
                      }
                      v96 = v95;
                      ++v94;
                      if (v90[v95] != v91[v95])
                        break;
                      ++v95;
                      if (v93[v96] != v92[v96])
                        goto LABEL_184;
                    }
                    v96 = v94;
LABEL_184:
                    LOBYTE(v89) = v96 < v89;
                    goto LABEL_117;
                  }
                }
              }
            }
            LOBYTE(v89) = 1;
            goto LABEL_117;
          }
        }
      }
    }
    LOBYTE(v60) = 1;
    goto LABEL_87;
  }
LABEL_145:
  v131 = *((id *)this + 145);
  v132 = v131;
  v133 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  v156 = *((_QWORD *)this + 32);
  v157 = v133;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  objc_msgSend(v131, "setStyleManager:", &v156);
  v136 = v157;
  if (v157)
  {
    v137 = (unint64_t *)&v157->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  v139 = *((id *)this + 145);
  v140 = v139;
  v141 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  v154 = *((_QWORD *)this + 28);
  v155 = v141;
  if (v141)
  {
    v142 = (unint64_t *)&v141->__shared_owners_;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  objc_msgSend(v139, "setSceneClientStyleState:", &v154);
  v144 = v155;
  if (v155)
  {
    v145 = (unint64_t *)&v155->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }

  LOBYTE(v158) = 4;
  v147 = (char *)*((_QWORD *)this + 141);
  v148 = (char *)*((_QWORD *)this + 142);
  if (v147 != v148)
  {
    while (*v147 <= 3u)
    {
      if (++v147 == v148)
        goto LABEL_167;
    }
  }
  if (v147 == v148 || (v148 = v147, *v147 != 4))
LABEL_167:
    std::vector<md::StyleManagerEvent>::insert((uint64_t)this + 1128, v148, (char *)&v158);
  v149 = (gss::Allocator *)**((_QWORD **)this + 155);
  if (v149)
  {
    LOBYTE(v158) = 8;
    md::MapEngine::setNeedsTick((uint64_t)v149, &v158);
  }
  if (!BYTE14(v159))
  {
    v150 = v159;
    if ((_QWORD)v159)
    {
      v151 = gss::Allocator::instance(v149);
      v149 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v151 + 40))(v151, v150, WORD6(v159));
    }
  }
  if (!BYTE14(v160))
  {
    v152 = v160;
    if ((_QWORD)v160)
    {
      v153 = gss::Allocator::instance(v149);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v153 + 40))(v153, v152, WORD6(v160));
    }
  }
}

void sub_19F1BD70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  pthread_rwlock_t *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, pthread_rwlock_t *);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va1);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va2);
  _Unwind_Resume(a1);
}

void md::StyleLogic::runBeforeLayout(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  size_t v45;
  size_t v46;
  void **p_dst;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  int v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  id v61;
  int v62;
  int v63;
  uint64_t v64;
  geo::read_write_lock *v65;
  const char *v66;
  geo::read_write_lock *v67;
  const char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  _DWORD *v80;
  unsigned int v81;
  void *v82;
  float v83;
  float v84;
  int v85;
  void *v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  _DWORD *v96;
  unsigned int v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int *v110;
  _DWORD *v111;
  unsigned int v112;
  void *v113;
  float v114;
  float v115;
  int v116;
  void *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  float v121;
  void *v122;
  int v123;
  _BOOL4 v124;
  void **v125;
  void *v126;
  int v127;
  void *v128;
  VKTimedAnimation *v129;
  double v130;
  uint64_t v131;
  void *v132;
  char *v133;
  char *v134;
  unint64_t *v135;
  char *v136;
  unint64_t *v137;
  char *v138;
  uint64_t v139;
  geo::read_write_lock *v140;
  const char *v141;
  int v142;
  _DWORD *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  geo::read_write_lock *v147;
  const char *v148;
  uint64_t v149;
  geo::read_write_lock *v150;
  const char *v151;
  int v152;
  _DWORD *v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  geo::read_write_lock *v157;
  const char *v158;
  unsigned int *v159;
  unsigned int *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int *v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL8 v171;
  int v172;
  NSObject *v173;
  uint64_t v174;
  geo::read_write_lock *v175;
  const char *v176;
  geo::read_write_lock *v177;
  const char *v178;
  void **v179;
  int v180;
  NSObject *v181;
  uint64_t v182;
  geo::read_write_lock *v183;
  const char *v184;
  geo::read_write_lock *v185;
  const char *v186;
  void **v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  _BYTE v194[15];
  char v195;
  uint64_t v196[2];
  void **__dst;
  uint64_t v198;
  int64_t v199;
  void *v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  _QWORD v204[3];
  _QWORD *v205;
  _QWORD v206[3];
  _QWORD *v207;
  _QWORD v208[3];
  _QWORD *v209;
  __int128 buf;
  void (*v211)(uint64_t, float);
  void *v212;
  uint64_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v206[0] = &off_1E42C8870;
  v206[1] = a2;
  v207 = v206;
  v204[0] = &off_1E42C88B8;
  v204[1] = a2;
  v205 = v204;
  v209 = v208;
  v208[0] = &off_1E42C88B8;
  v208[1] = a2;
  _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv((uint64_t)v206);
  v7 = v205;
  if (v205 == v204)
  {
    v8 = 4;
    v7 = v204;
  }
  else
  {
    if (!v205)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v207;
  if (v207 == v206)
  {
    v10 = 4;
    v9 = v206;
  }
  else
  {
    if (!v207)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  if (!*(_QWORD *)(a1 + 256))
    md::StyleLogic::updateConfiguration((md::StyleLogic *)a1, 0);
  v11 = *(uint64_t **)(a1 + 1256);
  v12 = *v11;
  v13 = v11[1];
  if (*v11 != v13)
  {
    while (1)
    {
      __dst = (void **)a1;
      v14 = *(_QWORD *)(v12 + 24);
      if (!v14)
        break;
      (*(void (**)(uint64_t, void ***))(*(_QWORD *)v14 + 48))(v14, &__dst);
      v12 += 32;
      if (v12 == v13)
      {
        v15 = *v11;
        v12 = v11[1];
        if (v12 == *v11)
          goto LABEL_25;
        while (2)
        {
          v18 = v12 - 32;
          v16 = *(_QWORD **)(v12 - 8);
          if ((_QWORD *)(v12 - 32) != v16)
          {
            if (v16)
            {
              v17 = 5;
LABEL_19:
              (*(void (**)(void))(*v16 + 8 * v17))();
            }
            v12 -= 32;
            if (v18 == v15)
            {
              v12 = v15;
              goto LABEL_25;
            }
            continue;
          }
          break;
        }
        v16 = (_QWORD *)(v12 - 32);
        v17 = 4;
        goto LABEL_19;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_286;
  }
LABEL_25:
  v19 = (uint64_t *)(a1 + 256);
  v11[1] = v12;
  md::StyleLogicContext::operator=(a4, (uint64_t *)(a1 + 256));
  *(_BYTE *)(a4 + 82) = 0;
  *(_BYTE *)(a4 + 84) = *(_BYTE *)(a1 + 167);
  *(_DWORD *)(a4 + 88) = *(_DWORD *)(a1 + 1096);
  *(_BYTE *)(a4 + 92) = *(_BYTE *)(a1 + 164);
  *(_BYTE *)(a4 + 93) = *(_BYTE *)(a1 + 172);
  *(_WORD *)(a4 + 94) = *(_WORD *)(a1 + 173);
  *(_DWORD *)(a4 + 104) = *(_DWORD *)(a1 + 124);
  *(_BYTE *)(a4 + 83) = *(_BYTE *)(a1 + 1112);
  if (*(_BYTE *)(a1 + 168))
    v20 = *(_BYTE *)(a1 + 169);
  else
    v20 = 4;
  *(_BYTE *)(a4 + 112) = v20;
  *(_BYTE *)(a4 + 97) = *(_BYTE *)(a1 + 176);
  v21 = *a2;
  objc_msgSend(v21, "size");
  v23 = v22;
  v25 = v24;

  if (v23 > 0.0 && v25 > 0.0)
  {
    v26 = log2(v23 * 0.001953125 * *(float *)(a1 + 124));
    *(float *)(a4 + 100) = v26;
  }
  v27 = *(_QWORD *)(a1 + 1200);
  v28 = *(_QWORD *)(a1 + 256);
  if (!v28)
  {
    md::StyleLogic::updateConfiguration((md::StyleLogic *)a1, *(_DWORD *)(a1 + 1096));
    v28 = *v19;
  }
  v29 = *(std::__shared_weak_count **)(a1 + 264);
  v196[0] = v28;
  v196[1] = (uint64_t)v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  md::World::setStyleManager(v27, v196);
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v34 = *(uint64_t **)(a1 + 184);
  v35 = *v34;
  v36 = v34[1];
  if (v35 != v36)
  {
    while (*(_BYTE *)v35)
    {
      v35 += 16;
      if (v35 == v36)
        goto LABEL_47;
    }
  }
  if (v35 == v36)
LABEL_47:
    v37 = 0;
  else
    v37 = *(_QWORD *)(v35 + 8);
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10048u, v37 != 0);
  v38 = *(uint64_t **)(a1 + 184);
  v39 = *v38;
  v40 = v38[1];
  if (v39 != v40)
  {
    while (*(_BYTE *)v39 != 33)
    {
      v39 += 16;
      if (v39 == v40)
        goto LABEL_54;
    }
  }
  if (v39 == v40)
LABEL_54:
    v41 = 0;
  else
    v41 = *(_QWORD *)(v39 + 8);
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x1007Bu, v41 != 0);
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "objectForKey:", *MEMORY[0x1E0C997B8]);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  v193 = v43;
  if (!v43)
    goto LABEL_82;
  v44 = (const char *)objc_msgSend(objc_retainAutorelease(v43), "UTF8String");
  v45 = strlen(v44);
  if (v45 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    p_dst = (void **)operator new(v48 + 1);
    v198 = v46;
    v199 = v49 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_63;
  }
  HIBYTE(v199) = v45;
  p_dst = (void **)&__dst;
  if (v45)
LABEL_63:
    memmove(p_dst, v44, v46);
  *((_BYTE *)p_dst + v46) = 0;
  v50 = *v19;
  if (!*v19)
  {
    md::StyleLogic::updateConfiguration((md::StyleLogic *)a1, *(_DWORD *)(a1 + 1096));
    v50 = *v19;
  }
  v51 = *(_QWORD *)(v50 + 16);
  v52 = *(std::__shared_weak_count **)(v50 + 24);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = *(_QWORD **)(v51 + 104);
  if (v55
    && (v56 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(v55, (uint64_t)&__dst)) != 0)
  {
    v57 = *((_DWORD *)v56 + 10);
    if (!v52)
      goto LABEL_77;
  }
  else
  {
    v57 = -1;
    if (!v52)
      goto LABEL_77;
  }
  v58 = (unint64_t *)&v52->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
  {
LABEL_77:
    if ((SHIBYTE(v199) & 0x80000000) == 0)
      goto LABEL_78;
LABEL_81:
    operator delete(__dst);
    if ((v57 & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_82;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if (SHIBYTE(v199) < 0)
    goto LABEL_81;
LABEL_78:
  if ((v57 & 0x80000000) == 0)
  {
LABEL_79:
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x5Du, (unsigned __int16)v57);
    goto LABEL_83;
  }
LABEL_82:
  gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x5Du);
LABEL_83:
  if (*(_BYTE *)(a1 + 176) == 2)
  {
    v60 = *(unsigned __int8 *)(a1 + 1112);
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10038u, v60);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10038u, v60);
    v61 = *(id *)(a1 + 1160);
    v62 = objc_msgSend(v61, "navCameraModeStyleAttribute");

    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10034u, v62);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10034u, v62);
    v63 = *(unsigned __int8 *)(a1 + 1113);
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10074u, v63);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10074u, v63);
  }
  else
  {
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10034u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10038u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10074u);
  }
  v64 = *(_QWORD *)(a1 + 224);
  __dst = (void **)(v64 + 16);
  v65 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v64 + 16));
  if ((_DWORD)v65)
    geo::read_write_lock::logFailure(v65, (uint64_t)"read lock", v66);
  memset(v194, 0, sizeof(v194));
  v195 = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v194, v64 + 216);
  v67 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v64 + 16));
  if ((_DWORD)v67)
    geo::read_write_lock::logFailure(v67, (uint64_t)"unlock", v68);
  v69 = 65636;
  v70 = *(unsigned __int16 *)&v194[10];
  if (*(_WORD *)&v194[10])
  {
    if (v195)
    {
      if (*(unsigned __int16 *)&v194[10] >= 0x1Eu)
      {
        v76 = *(_DWORD **)v194;
        v77 = *(unsigned __int16 *)&v194[10];
        do
        {
          v78 = v77 >> 1;
          v79 = &v76[v77 >> 1];
          v81 = *v79;
          v80 = v79 + 1;
          v77 += ~(v77 >> 1);
          if (v81 < 0x10064)
            v76 = v80;
          else
            v77 = v78;
        }
        while (v77);
        LOWORD(v73) = *(_WORD *)&v194[10];
        if (v76 != (_DWORD *)(*(_QWORD *)v194 + 4 * *(unsigned __int16 *)&v194[10]))
        {
          if (*v76 == 65636)
            LOWORD(v73) = ((unint64_t)v76 - *(_QWORD *)v194) >> 2;
          else
            LOWORD(v73) = *(_WORD *)&v194[10];
        }
      }
      else
      {
        v71 = 0;
        while (1)
        {
          v72 = *(_DWORD *)(*(_QWORD *)v194 + 4 * v71);
          if (v72 >= 0x10064)
            break;
          if (*(unsigned __int16 *)&v194[10] == ++v71)
          {
            LOWORD(v73) = *(_WORD *)&v194[10];
            goto LABEL_115;
          }
        }
        if (v72 == 65636)
          LOWORD(v73) = v71;
        else
          LOWORD(v73) = *(_WORD *)&v194[10];
      }
    }
    else
    {
      v74 = 4 * *(unsigned __int16 *)&v194[10];
      v75 = *(_DWORD **)v194;
      while (*v75 != 65636)
      {
        ++v75;
        v74 -= 4;
        if (!v74)
        {
          v75 = (_DWORD *)(*(_QWORD *)v194 + 4 * *(unsigned __int16 *)&v194[10]);
          break;
        }
      }
      v73 = ((unint64_t)v75 - *(_QWORD *)v194) >> 2;
    }
  }
  else
  {
    LOWORD(v73) = 0;
  }
LABEL_115:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "routeWindshieldAnimationTime");
  v84 = v83;

  v85 = (_DWORD)v70 != (unsigned __int16)v73
     && *(_WORD *)(*(_QWORD *)v194 + *(unsigned __int16 *)&v194[8] + 2 * (unsigned __int16)v73) != 0;
  if (*(unsigned __int8 *)(a1 + 1114) != v85)
  {
    v86 = *(void **)(a1 + 1184);
    if (v86)
      objc_msgSend(v86, "stop");
    if ((_DWORD)v70)
    {
      if (v195)
      {
        if (v70 >= 0x1E)
        {
          v92 = *(_DWORD **)v194;
          v93 = v70;
          do
          {
            v94 = v93 >> 1;
            v95 = &v92[v93 >> 1];
            v97 = *v95;
            v96 = v95 + 1;
            v93 += ~(v93 >> 1);
            if (v97 < 0x1006B)
              v92 = v96;
            else
              v93 = v94;
          }
          while (v93);
          if (v92 == (_DWORD *)(*(_QWORD *)v194 + 4 * v70) || *v92 != 65643)
            goto LABEL_149;
          v89 = ((unint64_t)v92 - *(_QWORD *)v194) >> 2;
        }
        else
        {
          v87 = 0;
          while (1)
          {
            v88 = *(_DWORD *)(*(_QWORD *)v194 + 4 * v87);
            if (v88 >= 0x1006B)
              break;
            if (v70 == ++v87)
              goto LABEL_149;
          }
          if (v88 == 65643)
            LOWORD(v89) = v87;
          else
            LOWORD(v89) = v70;
        }
      }
      else
      {
        v90 = 4 * v70;
        v91 = *(_DWORD **)v194;
        while (*v91 != 65643)
        {
          ++v91;
          v90 -= 4;
          if (!v90)
          {
            v91 = (_DWORD *)(*(_QWORD *)v194 + 4 * v70);
            break;
          }
        }
        v89 = ((unint64_t)v91 - *(_QWORD *)v194) >> 2;
      }
    }
    else
    {
      LOWORD(v89) = 0;
    }
    if (v85)
    {
      if ((_DWORD)v70 != (unsigned __int16)v89)
      {
        v98 = *(_QWORD *)v194 + *(unsigned __int16 *)&v194[8];
        if (*(_WORD *)(v98 + 2 * (unsigned __int16)v89))
        {
          gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x1006Bu, *(unsigned __int16 *)(v98 + 2 * (unsigned __int16)v89));
          goto LABEL_150;
        }
      }
    }
LABEL_149:
    gss::ClientStyleState<gss::PropertyID>::removeTargetClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x1006Bu);
LABEL_150:
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10064u, v85);
    *(_BYTE *)(a1 + 1114) = v85;
    if (*(_BYTE *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), v84);
    }
    else
    {
      *(_BYTE *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = v84;
      LOBYTE(__dst) = 4;
      v99 = *(char **)(a1 + 1128);
      v100 = *(char **)(a1 + 1136);
      if (v99 != v100)
      {
        while (*v99 <= 3u)
        {
          if (++v99 == v100)
            goto LABEL_158;
        }
      }
      if (v99 == v100 || (v100 = v99, *v99 != 4))
LABEL_158:
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v100, (char *)&__dst);
      v101 = **(_QWORD **)(a1 + 1240);
      if (v101)
      {
        LOBYTE(__dst) = 12;
        md::MapEngine::setNeedsTick(v101, &__dst);
      }
    }
  }
  if ((_DWORD)v70)
  {
    if (v195)
    {
      if (v70 >= 0x1E)
      {
        v107 = *(_DWORD **)v194;
        v108 = v70;
        do
        {
          v109 = v108 >> 1;
          v110 = &v107[v108 >> 1];
          v112 = *v110;
          v111 = v110 + 1;
          v108 += ~(v108 >> 1);
          if (v112 < 0x1006F)
            v107 = v111;
          else
            v108 = v109;
        }
        while (v108);
        LOWORD(v104) = v70;
        if (v107 != (_DWORD *)(*(_QWORD *)v194 + 4 * v70))
        {
          if (*v107 == 65647)
            LOWORD(v104) = ((unint64_t)v107 - *(_QWORD *)v194) >> 2;
          else
            LOWORD(v104) = v70;
        }
      }
      else
      {
        v102 = 0;
        while (1)
        {
          v103 = *(_DWORD *)(*(_QWORD *)v194 + 4 * v102);
          if (v103 >= 0x1006F)
            break;
          if (v70 == ++v102)
          {
            LOWORD(v104) = v70;
            goto LABEL_186;
          }
        }
        if (v103 == 65647)
          LOWORD(v104) = v102;
        else
          LOWORD(v104) = v70;
      }
    }
    else
    {
      v105 = 4 * v70;
      v106 = *(_DWORD **)v194;
      while (*v106 != 65647)
      {
        ++v106;
        v105 -= 4;
        if (!v105)
        {
          v106 = (_DWORD *)(*(_QWORD *)v194 + 4 * v70);
          break;
        }
      }
      v104 = ((unint64_t)v106 - *(_QWORD *)v194) >> 2;
    }
  }
  else
  {
    LOWORD(v104) = 0;
  }
LABEL_186:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v113, "routeIsCoveredAnimationTime");
  v115 = v114;

  v116 = (_DWORD)v70 != (unsigned __int16)v104
      && *(_WORD *)(*(_QWORD *)v194 + *(unsigned __int16 *)&v194[8] + 2 * (unsigned __int16)v104) != 0;
  if (*(unsigned __int8 *)(a1 + 1115) != v116)
  {
    v117 = *(void **)(a1 + 1184);
    if (v117)
      objc_msgSend(v117, "stop");
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x1006Fu, v116);
    *(_BYTE *)(a1 + 1115) = v116;
    if (*(_BYTE *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), v115);
    }
    else
    {
      *(_BYTE *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = v115;
      LOBYTE(__dst) = 4;
      v118 = *(char **)(a1 + 1128);
      v119 = *(char **)(a1 + 1136);
      if (v118 != v119)
      {
        while (*v118 <= 3u)
        {
          if (++v118 == v119)
            goto LABEL_200;
        }
      }
      if (v118 == v119 || (v119 = v118, *v118 != 4))
LABEL_200:
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v119, (char *)&__dst);
      v120 = **(_QWORD **)(a1 + 1240);
      if (v120)
      {
        LOBYTE(__dst) = 12;
        md::MapEngine::setNeedsTick(v120, &__dst);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1116))
  {
    *(_BYTE *)(a1 + 1116) = 0;
    v121 = *(float *)(a1 + 1120);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = objc_msgSend(v122, "disableStylesheetAnimations");
    v124 = v121 > 0.0;

    v125 = (void **)MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v211 = ___ZN2md10StyleLogic18initiateTransitionEf_block_invoke;
    v212 = &__block_descriptor_40_e8_v12__0f8l;
    v213 = a1;
    v126 = (void *)MEMORY[0x1A1AF5730](&buf);
    v127 = v124 & ~v123;
    __dst = v125;
    v198 = 3221225472;
    v199 = (int64_t)___ZN2md10StyleLogic18initiateTransitionEf_block_invoke_2;
    v200 = &__block_descriptor_41_e8_v12__0B8l;
    v201 = a1;
    v202 = v124 & ~(_BYTE)v123;
    v128 = (void *)MEMORY[0x1A1AF5730](&__dst);
    v129 = [VKTimedAnimation alloc];
    v130 = v121;
    if (!v127)
      v130 = 0.0;
    v131 = -[VKTimedAnimation initWithDuration:](v129, "initWithDuration:", v130);
    v132 = *(void **)(a1 + 1184);
    *(_QWORD *)(a1 + 1184) = v131;

    objc_msgSend(*(id *)(a1 + 1184), "setTimingFunction:", VKAnimationCurveEaseOut);
    objc_msgSend(*(id *)(a1 + 1184), "setStepHandler:", v126);
    objc_msgSend(*(id *)(a1 + 1184), "setCompletionHandler:", v128);
    LOBYTE(v203) = 1;
    v133 = *(char **)(a1 + 1128);
    v134 = *(char **)(a1 + 1136);
    if (v133 != v134)
    {
      while (!*v133)
      {
        if (++v133 == v134)
          goto LABEL_212;
      }
    }
    if (v133 == v134 || (v134 = v133, *v133 != 1))
LABEL_212:
      std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v134, (char *)&v203);
    *(_BYTE *)(a1 + 336) = v127;
    *(_BYTE *)(a1 + 337) = v127;
    md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 200), *(VKAnimation **)(a1 + 1184));

    *(_DWORD *)(a1 + 1120) = 0;
  }
  v135 = (unint64_t *)(a4 + 120);
  v136 = *(char **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = v136;
  v137 = (unint64_t *)(a4 + 144);
  v138 = *(char **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = v138;
  v139 = *(_QWORD *)(a1 + 208);
  __dst = (void **)(v139 + 16);
  v140 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v139 + 16));
  v192 = a4;
  if ((_DWORD)v140)
    geo::read_write_lock::logFailure(v140, (uint64_t)"read lock", v141);
  v142 = *(unsigned __int16 *)(v139 + 226);
  if (*(_WORD *)(v139 + 226))
  {
    v143 = 0;
    v144 = 0;
    v145 = *(unsigned __int16 *)(v139 + 226);
    do
    {
      if (v144 < v145)
      {
        v146 = *(_QWORD *)(v139 + 216);
        v143 = (_DWORD *)(v146 + 4 * v144);
        v69 = v146 + *(unsigned __int16 *)(v139 + 224) + 2 * v144;
      }
      LODWORD(buf) = *v143;
      WORD2(buf) = *(_WORD *)v69;
      v136 = std::vector<std::pair<gss::StyleAttribute,unsigned short>>::insert(v135, (uint64_t)v136, (uint64_t)&buf) + 8;
      v145 = *(unsigned __int16 *)(v139 + 226);
      if (v144 + 1 < v145)
        ++v144;
      else
        v144 = *(unsigned __int16 *)(v139 + 226);
    }
    while (v144 != v142);
  }
  v147 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v139 + 16));
  if ((_DWORD)v147)
    geo::read_write_lock::logFailure(v147, (uint64_t)"unlock", v148);
  v149 = *(_QWORD *)(a1 + 208);
  __dst = (void **)(v149 + 16);
  v150 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v149 + 16));
  if ((_DWORD)v150)
    geo::read_write_lock::logFailure(v150, (uint64_t)"read lock", v151);
  v152 = *(unsigned __int16 *)(v149 + 242);
  if (*(_WORD *)(v149 + 242))
  {
    v153 = 0;
    v154 = 0;
    v155 = *(unsigned __int16 *)(v149 + 242);
    do
    {
      if (v154 < v155)
      {
        v156 = *(_QWORD *)(v149 + 232);
        v153 = (_DWORD *)(v156 + 4 * v154);
        v139 = v156 + *(unsigned __int16 *)(v149 + 240) + 2 * v154;
      }
      LODWORD(buf) = *v153;
      WORD2(buf) = *(_WORD *)v139;
      v138 = std::vector<std::pair<gss::StyleAttribute,unsigned short>>::insert(v137, (uint64_t)v138, (uint64_t)&buf) + 8;
      v155 = *(unsigned __int16 *)(v149 + 242);
      if (v154 + 1 < v155)
        ++v154;
      else
        v154 = *(unsigned __int16 *)(v149 + 242);
    }
    while (v154 != v152);
  }
  v157 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v149 + 16));
  if ((_DWORD)v157)
    geo::read_write_lock::logFailure(v157, (uint64_t)"unlock", v158);
  v159 = *(unsigned int **)(v192 + 144);
  v160 = *(unsigned int **)(v192 + 152);
  v161 = 126 - 2 * __clz(((char *)v160 - (char *)v159) >> 3);
  if (v160 == v159)
    v162 = 0;
  else
    v162 = v161;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(v159, v160, v162, 1);
  v163 = *(unsigned int **)(v192 + 120);
  v164 = *(unsigned int **)(v192 + 128);
  v165 = 126 - 2 * __clz(((char *)v164 - (char *)v163) >> 3);
  if (v164 == v163)
    v166 = 0;
  else
    v166 = v165;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(v163, v164, v166, 1);
  v167 = gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10036u);
  if (v167 >= 0x10000)
    *(_BYTE *)(v192 + 96) = v167;
  *(_BYTE *)(v192 + 82) = 1;
  *(_DWORD *)(v192 + 108) = *(_DWORD *)(a1 + 120);
  v168 = *(_QWORD *)(v192 + 48);
  *(_QWORD *)(v192 + 48) = *(_QWORD *)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = v168;
  v169 = *(_QWORD *)(v192 + 56);
  *(_QWORD *)(v192 + 56) = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v169;
  v170 = *(_QWORD *)(v192 + 64);
  *(_QWORD *)(v192 + 64) = *(_QWORD *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = v170;
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a1 + 1128);
  if (GEOGetVectorKitStyleLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitStyleLogicLog(void)::onceToken, &__block_literal_global_19501);
  v171 = os_log_type_enabled((os_log_t)GEOGetVectorKitStyleLogicLog(void)::log, OS_LOG_TYPE_DEBUG);
  if (v171)
  {
    v172 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 248);
    if (v172 != *(_DWORD *)(a1 + 1352))
    {
      *(_DWORD *)(a1 + 1352) = v172;
      v173 = (id)GEOGetVectorKitStyleLogicLog(void)::log;
      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
      {
        v174 = *(_QWORD *)(a1 + 208);
        v203 = v174 + 16;
        v175 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v174 + 16));
        if ((_DWORD)v175)
          geo::read_write_lock::logFailure(v175, (uint64_t)"read lock", v176);
        gss::attributesToString((unsigned __int16 *)(v174 + 216), 1, 0, 0, &__dst);
        v177 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v174 + 16));
        if ((_DWORD)v177)
          geo::read_write_lock::logFailure(v177, (uint64_t)"unlock", v178);
        v179 = (void **)&__dst;
        if (v199 < 0)
          v179 = __dst;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v179;
        _os_log_impl(&dword_19F029000, v173, OS_LOG_TYPE_DEBUG, "ClientStateDidChange:\n%s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v199) < 0)
          operator delete(__dst);
      }

    }
    v180 = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 248);
    if (v180 != *(_DWORD *)(a1 + 1356))
    {
      *(_DWORD *)(a1 + 1356) = v180;
      if (GEOGetVectorKitStyleLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitStyleLogicLog(void)::onceToken, &__block_literal_global_19501);
      v181 = (id)GEOGetVectorKitStyleLogicLog(void)::log;
      if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
      {
        v182 = *(_QWORD *)(a1 + 224);
        v203 = v182 + 16;
        v183 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v182 + 16));
        if ((_DWORD)v183)
          geo::read_write_lock::logFailure(v183, (uint64_t)"read lock", v184);
        gss::attributesToString((unsigned __int16 *)(v182 + 216), 1, 0, 0, &__dst);
        v185 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v182 + 16));
        if ((_DWORD)v185)
          geo::read_write_lock::logFailure(v185, (uint64_t)"unlock", v186);
        v187 = (void **)&__dst;
        if (v199 < 0)
          v187 = __dst;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v187;
        _os_log_impl(&dword_19F029000, v181, OS_LOG_TYPE_DEBUG, "SceneClientStateDidChange:\n%s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v199) < 0)
          operator delete(__dst);
      }

    }
  }
  if (!v194[14])
  {
    v188 = *(_QWORD *)v194;
    if (*(_QWORD *)v194)
    {
      v189 = gss::Allocator::instance((gss::Allocator *)v171);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v189 + 40))(v189, v188, *(unsigned __int16 *)&v194[12]);
    }
  }

  if (!v209)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_286:
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v209 + 48))(v209);
  v190 = v209;
  if (v209 == v208)
  {
    v191 = 4;
    v190 = v208;
  }
  else
  {
    if (!v209)
      return;
    v191 = 5;
  }
  (*(void (**)(void))(*v190 + 8 * v191))();
}

void sub_19F1BE934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,pthread_rwlock_t *a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;

  geo::write_lock_guard::~write_lock_guard(&a25);

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a12);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a36);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<gss::StyleAttribute,unsigned short>>::insert(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  void *v57;
  _WORD *v58;
  uint64_t v59;
  unint64_t v61;
  char *v62;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = (unint64_t)(v9 + 8);
    }
    else
    {
      v11 = v5 - (_QWORD)(v9 + 8);
      v12 = v11 >> 3;
      v13 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        v20 = (_QWORD *)a1[1];
      }
      else
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
        v15 = (char *)(v14 + v6);
        v16 = v14 + v6 + 8;
        if (v5 > v16)
          v16 = a1[1];
        v17 = v16 + ~v6 - v14;
        v18 = v5 - (_QWORD)v15;
        v19 = v17 >= 0x58 && v18 > 0x1F;
        v20 = (_QWORD *)a1[1];
        if (!v19)
          goto LABEL_66;
        v21 = (v17 >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = (uint64_t *)((char *)v13 + v22);
        v23 = (_OWORD *)(v5 + 16);
        v24 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        v20 = (_QWORD *)(v5 + v22);
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_66:
          do
          {
            v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = (unint64_t)v20;
      if ((char *)v5 != v9 + 8)
      {
        v58 = (_WORD *)(v5 - 4);
        v59 = 8 * v12;
        do
        {
          *((_DWORD *)v58 - 1) = *(_DWORD *)&v9[v59 - 8];
          *v58 = *(_WORD *)&v9[v59 - 4];
          v58 -= 4;
          v59 -= 8;
        }
        while (v59);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *(_WORD *)(v6 + 8 * v8 + 4) = *(_WORD *)(a3 + 4);
    }
    return v9;
  }
  v28 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v28 >> 61)
    abort();
  v29 = v10 - v6;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 >> 61)
      goto LABEL_63;
    v31 = (char *)operator new(8 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[8 * v8];
  v33 = &v31[8 * v30];
  if (v8 != v30)
  {
LABEL_32:
    v35 = (char *)v6;
    goto LABEL_33;
  }
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF8) >= 1)
  {
    v34 = v8 + 2;
    if (v8 >= -1)
      v34 = v8 + 1;
    v32 -= 8 * (v34 >> 1);
    goto LABEL_32;
  }
  if ((unint64_t)v7 < 8)
    v61 = 1;
  else
    v61 = (v7 >> 2) & 0xFFFFFFFFFFFFFFFELL;
  if (v61 >> 61)
LABEL_63:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v62 = (char *)operator new(8 * v61);
  v32 = &v62[8 * (v61 >> 2)];
  v33 = &v62[8 * v61];
  if (!v31)
    goto LABEL_32;
  operator delete(v31);
  v35 = (char *)*a1;
LABEL_33:
  *(_QWORD *)v32 = *(_QWORD *)a3;
  v36 = v32 + 8;
  v37 = v32;
  if (v35 != v9)
  {
    v38 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v39 = v38 - v35 - 8;
    v40 = v9;
    v37 = v32;
    if (v39 < 0x58)
      goto LABEL_67;
    v40 = v9;
    v37 = v32;
    if ((unint64_t)(v38 - v32) < 0x20)
      goto LABEL_67;
    v41 = (v39 >> 3) + 1;
    v40 = &v9[-8 * (v41 & 0x3FFFFFFFFFFFFFFCLL)];
    v42 = v32 - 16;
    v43 = (__int128 *)(v6 + 8 * v8 - 16);
    v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    v37 = &v32[-8 * (v41 & 0x3FFFFFFFFFFFFFFCLL)];
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_67:
      do
      {
        v46 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v37 - 1) = v46;
        v37 -= 8;
      }
      while (v40 != v35);
    }
  }
  v47 = (char *)a1[1];
  if (v47 != v9)
  {
    v48 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v49 = v47 - v48 - 8;
    if (v49 < 0x38)
      goto LABEL_68;
    if ((unint64_t)(v36 - v48) < 0x20)
      goto LABEL_68;
    v50 = (v49 >> 3) + 1;
    v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
    v9 += v51;
    v52 = v32 + 24;
    v53 = (__int128 *)(v6 + 8 * v8 + 16);
    v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *v53;
      *(v52 - 1) = *(v53 - 1);
      *v52 = v55;
      v52 += 2;
      v53 += 2;
      v54 -= 4;
    }
    while (v54);
    v36 += v51;
    if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_68:
      do
      {
        v56 = *(_QWORD *)v9;
        v9 += 8;
        *(_QWORD *)v36 = v56;
        v36 += 8;
      }
      while (v9 != v47);
    }
  }
  v57 = (void *)*a1;
  *a1 = (unint64_t)v37;
  a1[1] = (unint64_t)v36;
  a1[2] = (unint64_t)v33;
  if (v57)
    operator delete(v57);
  return v32;
}

void sub_19F1BEEF0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int16 *v3;
  pthread_rwlock_t *v7;
  geo::read_write_lock *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int v21;
  gss::Allocator *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  _DWORD *v34;
  unsigned int v35;
  __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  gss::Allocator *v41;
  uint64_t v42;
  gss::Allocator *v43;
  __int16 v44;
  unsigned __int16 v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  gss::Allocator *v49;
  uint64_t v50;
  float v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  geo::read_write_lock *v65;
  const char *v66;
  pthread_rwlock_t *v67;

  v7 = (pthread_rwlock_t *)(a1 + 16);
  v67 = (pthread_rwlock_t *)(a1 + 16);
  v8 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"write lock", v9);
  v10 = *(unsigned __int16 *)(a1 + 226);
  if (!*(_WORD *)(a1 + 226))
    goto LABEL_24;
  v11 = *(_QWORD *)(a1 + 216);
  if (*(_BYTE *)(a1 + 231))
  {
    if (v10 >= 0x1E)
    {
      v16 = *(_DWORD **)(a1 + 216);
      v17 = *(unsigned __int16 *)(a1 + 226);
      do
      {
        v18 = v17 >> 1;
        v19 = &v16[v17 >> 1];
        v21 = *v19;
        v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2)
          v16 = v20;
        else
          v17 = v18;
      }
      while (v17);
      if (v16 == (_DWORD *)(v11 + 4 * v10))
        goto LABEL_24;
      if (*v16 != a2)
        goto LABEL_24;
      v12 = ((unint64_t)v16 - v11) >> 2;
      if ((_DWORD)v10 == (unsigned __int16)v12)
        goto LABEL_24;
    }
    else
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_DWORD *)(v11 + 4 * v12);
        if (v13 >= a2)
          break;
        if (v10 == ++v12)
          goto LABEL_24;
      }
      if (v13 != a2)
        LOWORD(v12) = *(_WORD *)(a1 + 226);
      if ((_DWORD)v10 == (unsigned __int16)v12)
        goto LABEL_24;
    }
  }
  else
  {
    v14 = 4 * v10;
    v15 = *(_DWORD **)(a1 + 216);
    while (*v15 != a2)
    {
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        v15 = (_DWORD *)(v11 + 4 * v10);
        break;
      }
    }
    v12 = ((unint64_t)v15 - v11) >> 2;
    if ((_DWORD)v10 == (unsigned __int16)v12)
      goto LABEL_24;
  }
  if (v10 > (unsigned __int16)v12)
    v3 = (unsigned __int16 *)(v11 + *(unsigned __int16 *)(a1 + 224) + 2 * (unsigned __int16)v12);
  if (*v3 == a3)
  {
    v23 = 0;
    v24 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_68;
    goto LABEL_27;
  }
LABEL_24:
  v22 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), a2);
  *(_WORD *)v22 = a3;
  if (*(_BYTE *)(a1 + 230) || *(_BYTE *)(a1 + 231))
  {
    v23 = 1;
    v24 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_68;
  }
  else
  {
    v36 = *(_WORD *)(a1 + 228);
    v37 = (4 * v36) | 2;
    v38 = gss::Allocator::instance(v22);
    v39 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v38 + 16))(v38, (unsigned __int16)(v37 + 2 * v36) & 0xFFFE, 1);
    v40 = v39;
    if (*(_QWORD *)(a1 + 216))
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 216, v39, (_DWORD *)((char *)v39 + v37), 1);
      v42 = gss::Allocator::instance(v41);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(a1 + 216), *(unsigned __int16 *)(a1 + 228));
    }
    *(_WORD *)(a1 + 228) = v36;
    *(_QWORD *)(a1 + 216) = v40;
    v23 = 1;
    *(_WORD *)(a1 + 224) = v37;
    v24 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_68;
  }
LABEL_27:
  v25 = *(_QWORD *)(a1 + 232);
  if (!*(_BYTE *)(a1 + 247))
  {
    v28 = 4 * v24;
    v29 = *(_DWORD **)(a1 + 232);
    while (*v29 != a2)
    {
      ++v29;
      v28 -= 4;
      if (!v28)
      {
        v29 = (_DWORD *)(v25 + 4 * v24);
        break;
      }
    }
    v26 = ((unint64_t)v29 - v25) >> 2;
    if ((_DWORD)v24 == (unsigned __int16)v26)
      goto LABEL_68;
    goto LABEL_63;
  }
  if (v24 >= 0x1E)
  {
    v30 = *(_DWORD **)(a1 + 232);
    v31 = v24;
    do
    {
      v32 = v31 >> 1;
      v33 = &v30[v31 >> 1];
      v35 = *v33;
      v34 = v33 + 1;
      v31 += ~(v31 >> 1);
      if (v35 < a2)
        v30 = v34;
      else
        v31 = v32;
    }
    while (v31);
    if (v30 != (_DWORD *)(v25 + 4 * v24) && *v30 == a2)
    {
      v26 = ((unint64_t)v30 - v25) >> 2;
      if ((_DWORD)v24 != (unsigned __int16)v26)
        goto LABEL_63;
    }
LABEL_68:
    v43 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 232), a2);
    *(_WORD *)v43 = a3;
    if (!*(_BYTE *)(a1 + 246) && !*(_BYTE *)(a1 + 247))
    {
      v44 = *(_WORD *)(a1 + 244);
      v45 = (4 * v44) | 2;
      v46 = gss::Allocator::instance(v43);
      v47 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 16))(v46, (unsigned __int16)(v45 + 2 * v44) & 0xFFFE, 1);
      v48 = v47;
      if (*(_QWORD *)(a1 + 232))
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 232, v47, (_DWORD *)((char *)v47 + v45), 1);
        v50 = gss::Allocator::instance(v49);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 40))(v50, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
      }
      *(_WORD *)(a1 + 244) = v44;
      *(_QWORD *)(a1 + 232) = v48;
      *(_WORD *)(a1 + 240) = v45;
    }
LABEL_73:
    v51 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    if (v51 <= 0.0)
    {
      v52 = *(unsigned __int16 *)(a1 + 242);
      if ((_DWORD)v52 == *(unsigned __int16 *)(a1 + 226))
      {
        if (!*(_WORD *)(a1 + 242))
          goto LABEL_84;
        v53 = *(_DWORD **)(a1 + 232);
        v54 = *(_DWORD **)(a1 + 216);
        if (*v53 == *v54)
        {
          v55 = *(unsigned __int16 *)(a1 + 224);
          v56 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v53 + v56) == *(unsigned __int16 *)((char *)v54 + v55))
          {
            v57 = 0;
            v58 = v53 + 1;
            v59 = v54 + 1;
            v60 = (uint64_t)v53 + v56 + 2;
            v61 = (uint64_t)v54 + v55 + 2;
            while (v52 - 1 != v57)
            {
              v62 = v57++;
              if (v58[v62] != v59[v62])
                goto LABEL_91;
              if (*(unsigned __int16 *)(v60 + 2 * v62) != *(unsigned __int16 *)(v61 + 2 * v62))
              {
                v57 = v62 + 1;
                goto LABEL_91;
              }
            }
            v57 = *(unsigned __int16 *)(a1 + 242);
LABEL_91:
            LOBYTE(v52) = v57 < v52;
            goto LABEL_84;
          }
        }
      }
    }
    LOBYTE(v52) = 1;
LABEL_84:
    atomic_store(v52, (unsigned __int8 *)(a1 + 254));
    v63 = (unsigned int *)(a1 + 248);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
    v7 = v67;
    goto LABEL_87;
  }
  v26 = 0;
  while (1)
  {
    v27 = *(_DWORD *)(v25 + 4 * v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_68;
  }
  if (v27 != a2)
    LOWORD(v26) = v24;
  if ((_DWORD)v24 == (unsigned __int16)v26)
    goto LABEL_68;
LABEL_63:
  if (v24 > (unsigned __int16)v26)
    v3 = (unsigned __int16 *)(v25 + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v26);
  if (*v3 != a3)
    goto LABEL_68;
  if (v23)
    goto LABEL_73;
LABEL_87:
  v65 = (geo::read_write_lock *)pthread_rwlock_unlock(v7);
  if ((_DWORD)v65)
    geo::read_write_lock::logFailure(v65, (uint64_t)"unlock", v66);
}

void sub_19F1BF3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(uint64_t a1, unsigned int a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  geo::read_write_lock *v22;
  const char *v23;

  v4 = (pthread_rwlock_t *)(a1 + 16);
  v5 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"write lock", v6);
  v7 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(a1 + 216, a2);
  if (geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(a1 + 232, a2) | v7)
  {
    v8 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    if (v8 <= 0.0)
    {
      v9 = *(unsigned __int16 *)(a1 + 242);
      if ((_DWORD)v9 == *(unsigned __int16 *)(a1 + 226))
      {
        if (!*(_WORD *)(a1 + 242))
          goto LABEL_15;
        v10 = *(_DWORD **)(a1 + 232);
        v11 = *(_DWORD **)(a1 + 216);
        if (*v10 == *v11)
        {
          v12 = *(unsigned __int16 *)(a1 + 224);
          v13 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v10 + v13) == *(unsigned __int16 *)((char *)v11 + v12))
          {
            v14 = 0;
            v15 = v10 + 1;
            v16 = v11 + 1;
            v17 = (uint64_t)v10 + v13 + 2;
            v18 = (uint64_t)v11 + v12 + 2;
            while (v9 - 1 != v14)
            {
              v19 = v14++;
              if (v15[v19] != v16[v19])
                goto LABEL_21;
              if (*(unsigned __int16 *)(v17 + 2 * v19) != *(unsigned __int16 *)(v18 + 2 * v19))
              {
                v14 = v19 + 1;
                goto LABEL_21;
              }
            }
            v14 = *(unsigned __int16 *)(a1 + 242);
LABEL_21:
            LOBYTE(v9) = v14 < v9;
            goto LABEL_15;
          }
        }
      }
    }
    LOBYTE(v9) = 1;
LABEL_15:
    atomic_store(v9, (unsigned __int8 *)(a1 + 254));
    v20 = (unsigned int *)(a1 + 248);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v22)
    geo::read_write_lock::logFailure(v22, (uint64_t)"unlock", v23);
}

uint64_t geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  if (*(_BYTE *)(a1 + 14))
    return 0;
  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
  {
    v8 = 0;
    LOWORD(v6) = 0;
    goto LABEL_27;
  }
  v5 = *(char **)a1;
  if (!*(_BYTE *)(a1 + 15))
  {
    v9 = 4 * v4;
    v10 = *(char **)a1;
    while (*(_DWORD *)v10 != a2)
    {
      v10 += 4;
      v9 -= 4;
      if (!v9)
      {
        v10 = &v5[4 * v4];
        break;
      }
    }
    v6 = (unint64_t)(v10 - v5) >> 2;
    goto LABEL_26;
  }
  if (v4 < 0x1E)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_DWORD *)&v5[4 * v6];
      if (v7 >= a2)
        break;
      if (v4 == ++v6)
        return 0;
    }
    if (v7 != a2)
      LOWORD(v6) = *(_WORD *)(a1 + 10);
LABEL_26:
    v8 = *(unsigned __int16 *)(a1 + 10);
    goto LABEL_27;
  }
  v11 = *(char **)a1;
  v12 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    v13 = v12 >> 1;
    v14 = &v11[4 * (v12 >> 1)];
    v16 = *(_DWORD *)v14;
    v15 = v14 + 4;
    v12 += ~(v12 >> 1);
    if (v16 < a2)
      v11 = v15;
    else
      v12 = v13;
  }
  while (v12);
  if (v11 == &v5[4 * v4] || *(_DWORD *)v11 != a2)
    return 0;
  v6 = (unint64_t)(v11 - v5) >> 2;
  v8 = *(unsigned __int16 *)(a1 + 10);
LABEL_27:
  v17 = (unsigned __int16)v6;
  if ((unsigned __int16)v6 == (_DWORD)v4)
    return 0;
  if (*(_BYTE *)(a1 + 15))
  {
    v18 = v4 - 1;
    *(_WORD *)(a1 + 10) = v18;
    v19 = v18 - (unsigned __int16)v6;
    memmove((void *)(*(_QWORD *)a1 + 4 * (unsigned __int16)v6), (const void *)(*(_QWORD *)a1 + 4 * ((unsigned __int16)v6 + 1)), 4 * v19);
    v20 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
    memmove((void *)(v20 + 2 * v17), (const void *)(v20 + 2 * (v17 + 1)), 2 * v19);
  }
  else
  {
    v21 = v8 - 1;
    v22 = *(char **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * (unsigned __int16)v6) = *(_DWORD *)(*(_QWORD *)a1 + 4 * v21);
    *(_WORD *)&v22[2 * (unsigned __int16)v6 + *(unsigned __int16 *)(a1 + 8)] = *(_WORD *)&v22[2 * v21
                                                                                            + *(unsigned __int16 *)(a1 + 8)];
    --*(_WORD *)(a1 + 10);
  }
  return 1;
}

uint64_t md::StyleLogicContext::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  char *v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  _BYTE *v51;
  _BYTE *v52;
  __int128 v53;
  __int128 v54;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v12 = a2[2];
  v11 = a2[3];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v19 = a2[4];
  v18 = a2[5];
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v18;
  if (!v22)
    goto LABEL_24;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_24:
    if ((uint64_t *)a1 != a2)
      goto LABEL_25;
LABEL_41:
    v39 = *(_OWORD *)(a2 + 9);
    v40 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 97) = *(_OWORD *)((char *)a2 + 97);
    *(_OWORD *)(a1 + 88) = v40;
    *(_OWORD *)(a1 + 72) = v39;
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if ((uint64_t *)a1 == a2)
    goto LABEL_41;
LABEL_25:
  v25 = a2[7] - a2[6];
  v26 = *(_BYTE **)(a1 + 48);
  v27 = *(_BYTE **)(a1 + 56);
  v28 = v27 - v26;
  v29 = v25 - (v27 - v26);
  if (v25 <= v27 - v26)
  {
    if (v25 < v27 - v26)
      *(_QWORD *)(a1 + 56) = &v26[v25];
    goto LABEL_57;
  }
  v30 = *(_QWORD *)(a1 + 64);
  if (v30 - (uint64_t)v27 < v29)
  {
    if ((v25 & 0x8000000000000000) != 0)
      abort();
    v31 = v30 - (_QWORD)v26;
    v32 = 2 * v31;
    if (2 * v31 <= v25)
      v32 = a2[7] - a2[6];
    if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
      v33 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    v34 = (char *)operator new(v33);
    v35 = &v34[v28];
    v36 = &v34[v33];
    v37 = &v34[v25];
    bzero(&v34[v28], v29);
    if (v27 == v26)
      goto LABEL_55;
    if (v28 < 8 || (unint64_t)(v26 - v34) < 0x20)
      goto LABEL_52;
    if (v28 >= 0x20)
    {
      v38 = v28 & 0xFFFFFFFFFFFFFFE0;
      v41 = (__int128 *)(v27 - 16);
      v42 = &v34[v27 - 16 - v26];
      v43 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v44 = *v41;
        *((_OWORD *)v42 - 1) = *(v41 - 1);
        *(_OWORD *)v42 = v44;
        v42 -= 32;
        v41 -= 2;
        v43 -= 32;
      }
      while (v43);
      if (v28 == v38)
        goto LABEL_54;
      if ((v28 & 0x18) == 0)
      {
        v35 -= v38;
        v27 -= v38;
        goto LABEL_52;
      }
    }
    else
    {
      v38 = 0;
    }
    v45 = v38 - (v28 & 0xFFFFFFFFFFFFFFF8);
    v46 = &v27[-v38 - 8];
    v47 = v46 - v26;
    do
    {
      v48 = *(_QWORD *)v46;
      v46 -= 8;
      *(_QWORD *)&v34[v47] = v48;
      v47 -= 8;
      v45 += 8;
    }
    while (v45);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_54;
    v35 -= v28 & 0xFFFFFFFFFFFFFFF8;
    v27 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_52:
    v49 = v35 - 1;
    do
    {
      v50 = *--v27;
      *v49-- = v50;
    }
    while (v27 != v26);
LABEL_54:
    v35 = v34;
LABEL_55:
    *(_QWORD *)(a1 + 48) = v35;
    *(_QWORD *)(a1 + 56) = v37;
    *(_QWORD *)(a1 + 64) = v36;
    if (v26)
      operator delete(v26);
    goto LABEL_57;
  }
  bzero(*(void **)(a1 + 56), v25 - (v27 - v26));
  *(_QWORD *)(a1 + 56) = &v26[v25];
LABEL_57:
  v51 = (_BYTE *)a2[6];
  v52 = (_BYTE *)a2[7];
  if (v52 != v51)
    memmove(*(void **)(a1 + 48), v51, v52 - v51);
  v53 = *(_OWORD *)(a2 + 9);
  v54 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)((char *)a2 + 97);
  *(_OWORD *)(a1 + 88) = v54;
  *(_OWORD *)(a1 + 72) = v53;
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1 + 120, (char *)a2[15], (char *)a2[16], (a2[16] - a2[15]) >> 3);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1 + 144, (char *)a2[18], (char *)a2[19], (a2[19] - a2[18]) >> 3);
  return a1;
}

void md::World::setStyleManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  const void *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  const void *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__sp_mut *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__sp_mut *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__sp_mut *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__sp_mut *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  const void *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__sp_mut *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (v4 != v5)
  {
    while (*(_WORD *)v4 != 1)
    {
      v4 += 16;
      if (v4 == v5)
        goto LABEL_15;
    }
  }
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v7 = *a2;
      v8 = (std::__shared_weak_count *)a2[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      md::PolygonLayerDataSource::setStyleManager(v6, v7, (uint64_t)v8);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
LABEL_15:
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  if (v13 != v14)
  {
    while (*(_WORD *)v13 != 59)
    {
      v13 += 16;
      if (v13 == v14)
        goto LABEL_29;
    }
  }
  if (v13 != v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if (v15)
    {
      v16 = *a2;
      v17 = (std::__shared_weak_count *)a2[1];
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      md::PolygonLayerDataSource::setStyleManager(v15, v16, (uint64_t)v17);
      if (v17)
      {
        v20 = (unint64_t *)&v17->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
LABEL_29:
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v22;
  if (v22 != v23)
  {
    v24 = *(_QWORD *)(a1 + 32);
    while (*(_WORD *)v24 != 57)
    {
      v24 += 16;
      if (v24 == v23)
        goto LABEL_45;
    }
  }
  if (v24 != v23)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v27 = *a2;
      v26 = a2[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      *(_QWORD *)(v25 + 776) = v27;
      v30 = *(std::__shared_weak_count **)(v25 + 784);
      *(_QWORD *)(v25 + 784) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40);
    }
  }
LABEL_45:
  if (v22 != v23)
  {
    v33 = v22;
    while (*(_WORD *)v33 != 58)
    {
      v33 += 16;
      if (v33 == v23)
        goto LABEL_63;
    }
    if (v33 != v23)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
      {
        v36 = *a2;
        v35 = a2[1];
        if (v35)
        {
          v37 = (unint64_t *)(v35 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        *(_QWORD *)(v34 + 776) = v36;
        v39 = *(std::__shared_weak_count **)(v34 + 784);
        *(_QWORD *)(v34 + 784) = v35;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *(_QWORD *)(a1 + 40);
      }
    }
LABEL_63:
    while (v22 != v23)
    {
      if (*(_WORD *)v22 == 41)
      {
        if (v22 != v23)
        {
          v132 = *(_QWORD *)(v22 + 8);
          if (v132)
          {
            v133 = *a2;
            v134 = (std::__shared_weak_count *)a2[1];
            if (v134)
            {
              v135 = (unint64_t *)&v134->__shared_owners_;
              do
                v136 = __ldxr(v135);
              while (__stxr(v136 + 1, v135));
            }
            md::PolygonLayerDataSource::setStyleManager(v132, v133, (uint64_t)v134);
            if (v134)
            {
              v137 = (unint64_t *)&v134->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
          }
        }
        break;
      }
      v22 += 16;
    }
  }
  v42 = *(_QWORD *)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 40);
  if (v42 != v43)
  {
    while (*(_WORD *)v42 != 2)
    {
      v42 += 16;
      if (v42 == v43)
        goto LABEL_78;
    }
  }
  if (v42 != v43)
  {
    v44 = *(_QWORD *)(v42 + 8);
    if (v44)
    {
      v45 = *a2;
      v46 = (std::__shared_weak_count *)a2[1];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      md::TrafficLayerDataSource::setStyleManager(v44, v45, (uint64_t)v46);
      if (v46)
      {
        v49 = (unint64_t *)&v46->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }
  }
LABEL_78:
  v51 = *(_QWORD *)(a1 + 32);
  v52 = *(_QWORD *)(a1 + 40);
  if (v51 != v52)
  {
    while (*(_WORD *)v51 != 42)
    {
      v51 += 16;
      if (v51 == v52)
        goto LABEL_92;
    }
  }
  if (v51 != v52)
  {
    v53 = *(_QWORD *)(v51 + 8);
    if (v53)
    {
      v54 = *a2;
      v55 = (std::__shared_weak_count *)a2[1];
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      md::TrafficLayerDataSource::setStyleManager(v53, v54, (uint64_t)v55);
      if (v55)
      {
        v58 = (unint64_t *)&v55->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
  }
LABEL_92:
  v60 = *(_QWORD *)(a1 + 32);
  v61 = *(_QWORD *)(a1 + 40);
  if (v60 != v61)
  {
    while (*(_WORD *)v60 != 3)
    {
      v60 += 16;
      if (v60 == v61)
        goto LABEL_106;
    }
  }
  if (v60 != v61)
  {
    v62 = *(_QWORD *)(v60 + 8);
    if (v62)
    {
      v63 = *a2;
      v64 = (std::__shared_weak_count *)a2[1];
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      md::TrafficLayerDataSource::setStyleManager(v62, v63, (uint64_t)v64);
      if (v64)
      {
        v67 = (unint64_t *)&v64->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
  }
LABEL_106:
  v69 = *(_QWORD *)(a1 + 32);
  v70 = *(_QWORD *)(a1 + 40);
  if (v69 != v70)
  {
    while (*(_WORD *)v69 != 52)
    {
      v69 += 16;
      if (v69 == v70)
        goto LABEL_120;
    }
  }
  if (v69 != v70)
  {
    v71 = *(_QWORD *)(v69 + 8);
    if (v71)
    {
      v72 = *a2;
      v73 = (std::__shared_weak_count *)a2[1];
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      md::TrafficLayerDataSource::setStyleManager(v71, v72, (uint64_t)v73);
      if (v73)
      {
        v76 = (unint64_t *)&v73->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }
  }
LABEL_120:
  v78 = *(_QWORD *)(a1 + 32);
  v79 = *(_QWORD *)(a1 + 40);
  v80 = v78;
  if (v78 != v79)
  {
    v80 = *(_QWORD *)(a1 + 32);
    while (*(_WORD *)v80 != 53)
    {
      v80 += 16;
      if (v80 == v79)
        goto LABEL_138;
    }
  }
  if (v80 != v79)
  {
    v81 = *(_QWORD *)(v80 + 8);
    if (v81)
    {
      v82 = *a2;
      v83 = (std::__shared_weak_count *)a2[1];
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      md::TrafficLayerDataSource::setStyleManager(v81, v82, (uint64_t)v83);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      *(_BYTE *)(v81 + 784) = 1;
      v78 = *(_QWORD *)(a1 + 32);
      v79 = *(_QWORD *)(a1 + 40);
    }
  }
LABEL_138:
  while (v78 != v79)
  {
    if (*(_WORD *)v78 == 4)
    {
      if (v78 != v79)
      {
        v125 = *(_QWORD *)(v78 + 8);
        if (v125)
        {
          v126 = *a2;
          v127 = (std::__shared_weak_count *)a2[1];
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
          }
          md::TrafficLayerDataSource::setStyleManager(v125, v126, (uint64_t)v127);
          if (v127)
          {
            v130 = (unint64_t *)&v127->__shared_owners_;
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
        }
      }
      break;
    }
    v78 += 16;
  }
  v88 = *(_QWORD *)(a1 + 32);
  v89 = *(_QWORD *)(a1 + 40);
  if (v88 != v89)
  {
    while (*(_WORD *)v88 != 65)
    {
      v88 += 16;
      if (v88 == v89)
        goto LABEL_153;
    }
  }
  if (v88 != v89)
  {
    v90 = *(_QWORD *)(v88 + 8);
    if (v90)
    {
      v91 = *a2;
      v92 = (std::__shared_weak_count *)a2[1];
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      md::TrafficLayerDataSource::setStyleManager(v90, v91, (uint64_t)v92);
      if (v92)
      {
        v95 = (unint64_t *)&v92->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
    }
  }
LABEL_153:
  v97 = *(_QWORD *)(a1 + 32);
  v98 = *(_QWORD *)(a1 + 40);
  if (v97 != v98)
  {
    while (*(_WORD *)v97 != 67)
    {
      v97 += 16;
      if (v97 == v98)
        goto LABEL_167;
    }
  }
  if (v97 != v98)
  {
    v99 = *(_QWORD *)(v97 + 8);
    if (v99)
    {
      v100 = *a2;
      v101 = (std::__shared_weak_count *)a2[1];
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      md::TrafficLayerDataSource::setStyleManager(v99, v100, (uint64_t)v101);
      if (v101)
      {
        v104 = (unint64_t *)&v101->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
    }
  }
LABEL_167:
  v106 = *(_QWORD *)(a1 + 32);
  v107 = *(_QWORD *)(a1 + 40);
  if (v106 != v107)
  {
    while (*(_WORD *)v106 != 68)
    {
      v106 += 16;
      if (v106 == v107)
        goto LABEL_181;
    }
  }
  if (v106 != v107)
  {
    v108 = *(_QWORD *)(v106 + 8);
    if (v108)
    {
      v109 = *a2;
      v110 = (std::__shared_weak_count *)a2[1];
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      md::TrafficLayerDataSource::setStyleManager(v108, v109, (uint64_t)v110);
      if (v110)
      {
        v113 = (unint64_t *)&v110->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
  }
LABEL_181:
  v115 = *(_QWORD *)(a1 + 32);
  v116 = *(_QWORD *)(a1 + 40);
  if (v115 != v116)
  {
    while (*(_WORD *)v115 != 6)
    {
      v115 += 16;
      if (v115 == v116)
        goto LABEL_224;
    }
  }
  if (v115 != v116)
  {
    v117 = *(_QWORD *)(v115 + 8);
    if (v117)
    {
      v118 = *a2;
      v119 = (std::__shared_weak_count *)a2[1];
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
        v122 = (const void *)(v117 + 776);
        v123 = (unint64_t *)&v119->__shared_owners_;
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      else
      {
        v122 = (const void *)(v117 + 776);
      }
      sp_mut = std::__get_sp_mut(v122);
      std::__sp_mut::lock(sp_mut);
      *(_QWORD *)(v117 + 776) = v118;
      v140 = *(std::__shared_weak_count **)(v117 + 784);
      *(_QWORD *)(v117 + 784) = v119;
      std::__sp_mut::unlock(sp_mut);
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (v119)
      {
        v143 = (unint64_t *)&v119->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
    }
  }
LABEL_224:
  v145 = *(_QWORD *)(a1 + 32);
  v146 = *(_QWORD *)(a1 + 40);
  if (v145 != v146)
  {
    while (*(_WORD *)v145 != 14)
    {
      v145 += 16;
      if (v145 == v146)
        goto LABEL_247;
    }
  }
  if (v145 != v146)
  {
    v147 = *(_QWORD *)(v145 + 8);
    if (v147)
    {
      v148 = *a2;
      v149 = (std::__shared_weak_count *)a2[1];
      if (v149)
      {
        v150 = (unint64_t *)&v149->__shared_owners_;
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
        v152 = (const void *)(v147 + 752);
        v153 = (unint64_t *)&v149->__shared_owners_;
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
      }
      else
      {
        v152 = (const void *)(v147 + 752);
      }
      v155 = std::__get_sp_mut(v152);
      std::__sp_mut::lock(v155);
      *(_QWORD *)(v147 + 752) = v148;
      v156 = *(std::__shared_weak_count **)(v147 + 760);
      *(_QWORD *)(v147 + 760) = v149;
      std::__sp_mut::unlock(v155);
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      if (v149)
      {
        v159 = (unint64_t *)&v149->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
    }
  }
LABEL_247:
  v161 = *(_QWORD *)(a1 + 32);
  v162 = *(_QWORD *)(a1 + 40);
  v163 = v161;
  if (v161 != v162)
  {
    v163 = *(_QWORD *)(a1 + 32);
    while (*(_WORD *)v163 != 16)
    {
      v163 += 16;
      if (v163 == v162)
        goto LABEL_263;
    }
  }
  if (v163 != v162)
  {
    v164 = *(_QWORD *)(v163 + 8);
    if (v164)
    {
      v165 = *a2;
      v166 = a2[1];
      if (v166)
      {
        v167 = (unint64_t *)(v166 + 8);
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v169 = std::__get_sp_mut((const void *)(v164 + 792));
      std::__sp_mut::lock(v169);
      *(_QWORD *)(v164 + 792) = v165;
      v170 = *(std::__shared_weak_count **)(v164 + 800);
      *(_QWORD *)(v164 + 800) = v166;
      std::__sp_mut::unlock(v169);
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      v161 = *(_QWORD *)(a1 + 32);
      v162 = *(_QWORD *)(a1 + 40);
    }
  }
LABEL_263:
  if (v161 != v162)
  {
    v173 = v161;
    while (*(_WORD *)v173 != 17)
    {
      v173 += 16;
      if (v173 == v162)
        goto LABEL_279;
    }
    if (v173 != v162)
    {
      v174 = *(_QWORD *)(v173 + 8);
      if (v174)
      {
        v175 = *a2;
        v176 = a2[1];
        if (v176)
        {
          v177 = (unint64_t *)(v176 + 8);
          do
            v178 = __ldxr(v177);
          while (__stxr(v178 + 1, v177));
        }
        v179 = std::__get_sp_mut((const void *)(v174 + 792));
        std::__sp_mut::lock(v179);
        *(_QWORD *)(v174 + 792) = v175;
        v180 = *(std::__shared_weak_count **)(v174 + 800);
        *(_QWORD *)(v174 + 800) = v176;
        std::__sp_mut::unlock(v179);
        if (v180)
        {
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        v161 = *(_QWORD *)(a1 + 32);
        v162 = *(_QWORD *)(a1 + 40);
      }
    }
LABEL_279:
    if (v161 != v162)
    {
      v183 = v161;
      while (*(_WORD *)v183 != 47)
      {
        v183 += 16;
        if (v183 == v162)
          goto LABEL_287;
      }
      if (v183 != v162)
      {
        v184 = *(_QWORD *)(v183 + 8);
        if (v184)
        {
          md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v184, *a2, a2[1]);
          v161 = *(_QWORD *)(a1 + 32);
          v162 = *(_QWORD *)(a1 + 40);
        }
      }
LABEL_287:
      if (v161 != v162)
      {
        v185 = v161;
        while (*(_WORD *)v185 != 33)
        {
          v185 += 16;
          if (v185 == v162)
            goto LABEL_295;
        }
        if (v185 != v162)
        {
          v186 = *(_QWORD *)(v185 + 8);
          if (v186)
          {
            md::DaVinciGroundLayerDataSource::setStyleManager(v186, *a2, a2[1]);
            v161 = *(_QWORD *)(a1 + 32);
            v162 = *(_QWORD *)(a1 + 40);
          }
        }
LABEL_295:
        if (v161 != v162)
        {
          v187 = v161;
          while (*(_WORD *)v187 != 34)
          {
            v187 += 16;
            if (v187 == v162)
              goto LABEL_303;
          }
          if (v187 != v162)
          {
            v188 = *(_QWORD *)(v187 + 8);
            if (v188)
            {
              md::DaVinciGroundLayerDataSource::setStyleManager(v188, *a2, a2[1]);
              v161 = *(_QWORD *)(a1 + 32);
              v162 = *(_QWORD *)(a1 + 40);
            }
          }
LABEL_303:
          if (v161 != v162)
          {
            v189 = v161;
            while (*(_WORD *)v189 != 54)
            {
              v189 += 16;
              if (v189 == v162)
                goto LABEL_311;
            }
            if (v189 != v162)
            {
              v190 = *(_QWORD *)(v189 + 8);
              if (v190)
              {
                md::DaVinciGroundLayerDataSource::setStyleManager(v190, *a2, a2[1]);
                v161 = *(_QWORD *)(a1 + 32);
                v162 = *(_QWORD *)(a1 + 40);
              }
            }
LABEL_311:
            if (v161 != v162)
            {
              v191 = v161;
              while (*(_WORD *)v191 != 60)
              {
                v191 += 16;
                if (v191 == v162)
                  goto LABEL_327;
              }
              if (v191 != v162)
              {
                v192 = *(_QWORD *)(v191 + 8);
                if (v192)
                {
                  v193 = *a2;
                  v194 = a2[1];
                  if (v194)
                  {
                    v195 = (unint64_t *)(v194 + 8);
                    do
                      v196 = __ldxr(v195);
                    while (__stxr(v196 + 1, v195));
                  }
                  v197 = std::__get_sp_mut((const void *)(v192 + 776));
                  std::__sp_mut::lock(v197);
                  *(_QWORD *)(v192 + 776) = v193;
                  v198 = *(std::__shared_weak_count **)(v192 + 784);
                  *(_QWORD *)(v192 + 784) = v194;
                  std::__sp_mut::unlock(v197);
                  if (v198)
                  {
                    v199 = (unint64_t *)&v198->__shared_owners_;
                    do
                      v200 = __ldaxr(v199);
                    while (__stlxr(v200 - 1, v199));
                    if (!v200)
                    {
                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                      std::__shared_weak_count::__release_weak(v198);
                    }
                  }
                  v161 = *(_QWORD *)(a1 + 32);
                  v162 = *(_QWORD *)(a1 + 40);
                }
              }
LABEL_327:
              if (v161 != v162)
              {
                v201 = v161;
                while (*(_WORD *)v201 != 44)
                {
                  v201 += 16;
                  if (v201 == v162)
                    goto LABEL_335;
                }
                if (v201 != v162)
                {
                  v202 = *(_QWORD *)(v201 + 8);
                  if (v202)
                  {
                    md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v202, *a2, a2[1]);
                    v161 = *(_QWORD *)(a1 + 32);
                    v162 = *(_QWORD *)(a1 + 40);
                  }
                }
LABEL_335:
                if (v161 != v162)
                {
                  v203 = v161;
                  while (*(_WORD *)v203 != 45)
                  {
                    v203 += 16;
                    if (v203 == v162)
                      goto LABEL_343;
                  }
                  if (v203 != v162)
                  {
                    v204 = *(_QWORD *)(v203 + 8);
                    if (v204)
                    {
                      md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v204, *a2, a2[1]);
                      v161 = *(_QWORD *)(a1 + 32);
                      v162 = *(_QWORD *)(a1 + 40);
                    }
                  }
LABEL_343:
                  if (v161 != v162)
                  {
                    v205 = v161;
                    while (*(_WORD *)v205 != 46)
                    {
                      v205 += 16;
                      if (v205 == v162)
                        goto LABEL_351;
                    }
                    if (v205 != v162)
                    {
                      v206 = *(_QWORD *)(v205 + 8);
                      if (v206)
                      {
                        md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v206, *a2, a2[1]);
                        v161 = *(_QWORD *)(a1 + 32);
                        v162 = *(_QWORD *)(a1 + 40);
                      }
                    }
LABEL_351:
                    if (v161 != v162)
                    {
                      v207 = v161;
                      while (*(_WORD *)v207 != 48)
                      {
                        v207 += 16;
                        if (v207 == v162)
                          goto LABEL_359;
                      }
                      if (v207 != v162)
                      {
                        v208 = *(_QWORD *)(v207 + 8);
                        if (v208)
                        {
                          md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v208, *a2, a2[1]);
                          v161 = *(_QWORD *)(a1 + 32);
                          v162 = *(_QWORD *)(a1 + 40);
                        }
                      }
LABEL_359:
                      if (v161 != v162)
                      {
                        v209 = v161;
                        while (*(_WORD *)v209 != 49)
                        {
                          v209 += 16;
                          if (v209 == v162)
                            goto LABEL_367;
                        }
                        if (v209 != v162)
                        {
                          v210 = *(_QWORD *)(v209 + 8);
                          if (v210)
                          {
                            md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v210, *a2, a2[1]);
                            v161 = *(_QWORD *)(a1 + 32);
                            v162 = *(_QWORD *)(a1 + 40);
                          }
                        }
LABEL_367:
                        if (v161 != v162)
                        {
                          v211 = v161;
                          while (*(_WORD *)v211 != 50)
                          {
                            v211 += 16;
                            if (v211 == v162)
                              goto LABEL_375;
                          }
                          if (v211 != v162)
                          {
                            v212 = *(_QWORD *)(v211 + 8);
                            if (v212)
                            {
                              md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v212, *a2, a2[1]);
                              v161 = *(_QWORD *)(a1 + 32);
                              v162 = *(_QWORD *)(a1 + 40);
                            }
                          }
LABEL_375:
                          if (v161 != v162)
                          {
                            v213 = v161;
                            while (*(_WORD *)v213 != 12)
                            {
                              v213 += 16;
                              if (v213 == v162)
                                goto LABEL_383;
                            }
                            if (v213 != v162)
                            {
                              v214 = *(_QWORD *)(v213 + 8);
                              if (v214)
                              {
                                md::OverlayLayerDataSource::setStyleManager(v214, *a2, a2[1]);
                                v161 = *(_QWORD *)(a1 + 32);
                                v162 = *(_QWORD *)(a1 + 40);
                              }
                            }
LABEL_383:
                            if (v161 != v162)
                            {
                              v215 = v161;
                              while (*(_WORD *)v215 != 11)
                              {
                                v215 += 16;
                                if (v215 == v162)
                                  goto LABEL_393;
                              }
                              if (v215 != v162)
                              {
                                v216 = *(_QWORD *)(v215 + 8);
                                if (v216)
                                {
                                  md::OverlayLayerDataSource::setStyleManager(v216, *a2, a2[1]);
                                  v161 = *(_QWORD *)(a1 + 32);
                                  v162 = *(_QWORD *)(a1 + 40);
                                }
                              }
LABEL_393:
                              while (v161 != v162)
                              {
                                if (*(_WORD *)v161 == 64)
                                {
                                  if (v161 != v162)
                                  {
                                    v217 = *(_QWORD *)(v161 + 8);
                                    if (v217)
                                    {
                                      v218 = *a2;
                                      v219 = (std::__shared_weak_count *)a2[1];
                                      if (v219)
                                      {
                                        v220 = (unint64_t *)&v219->__shared_owners_;
                                        do
                                          v221 = __ldxr(v220);
                                        while (__stxr(v221 + 1, v220));
                                        v222 = (const void *)(v217 + 776);
                                        v223 = (unint64_t *)&v219->__shared_owners_;
                                        do
                                          v224 = __ldxr(v223);
                                        while (__stxr(v224 + 1, v223));
                                      }
                                      else
                                      {
                                        v222 = (const void *)(v217 + 776);
                                      }
                                      v225 = std::__get_sp_mut(v222);
                                      std::__sp_mut::lock(v225);
                                      *(_QWORD *)(v217 + 776) = v218;
                                      v226 = *(std::__shared_weak_count **)(v217 + 784);
                                      *(_QWORD *)(v217 + 784) = v219;
                                      std::__sp_mut::unlock(v225);
                                      if (v226)
                                      {
                                        v227 = (unint64_t *)&v226->__shared_owners_;
                                        do
                                          v228 = __ldaxr(v227);
                                        while (__stlxr(v228 - 1, v227));
                                        if (!v228)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                                          std::__shared_weak_count::__release_weak(v226);
                                        }
                                      }
                                      if (v219)
                                      {
                                        v229 = (unint64_t *)&v219->__shared_owners_;
                                        do
                                          v230 = __ldaxr(v229);
                                        while (__stlxr(v230 - 1, v229));
                                        if (!v230)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                                          std::__shared_weak_count::__release_weak(v219);
                                        }
                                      }
                                    }
                                  }
                                  return;
                                }
                                v161 += 16;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_19F1C0B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v9 - 80);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::TrafficLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v6 = (const void *)(a1 + 760);
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(_QWORD *)(a1 + 760) = a2;
  v10 = *(std::__shared_weak_count **)(a1 + 768);
  *(_QWORD *)(a1 + 768) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F1C0D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v6 = (const void *)(a1 + 776);
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(_QWORD *)(a1 + 776) = a2;
  v10 = *(std::__shared_weak_count **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F1C0DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v6 = (const void *)(a1 + 752);
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(_QWORD *)(a1 + 752) = a2;
  v10 = *(std::__shared_weak_count **)(a1 + 760);
  *(_QWORD *)(a1 + 760) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F1C0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::PolygonLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v6 = (const void *)(a1 + 784);
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(_QWORD *)(a1 + 784) = a2;
  v10 = *(std::__shared_weak_count **)(a1 + 792);
  *(_QWORD *)(a1 + 792) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F1C0F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::OverlayLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v6 = (const void *)(a1 + 832);
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(_QWORD *)(a1 + 832) = a2;
  v10 = *(std::__shared_weak_count **)(a1 + 840);
  *(_QWORD *)(a1 + 840) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F1C1064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL md::AnimationRunner::runAnimation(md::MapEngine **this, VKAnimation *a2)
{
  VKAnimation *v3;
  VKAnimation *v4;
  md::MapEngine *v5;
  VKAnimation *v6;

  v3 = a2;
  v4 = v3;
  v5 = *this;
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD *, VKAnimation *))(**((_QWORD **)v5 + 13) + 24))(*((_QWORD **)v5 + 13), v6);
    md::MapEngine::updateRunLoopStatus(v5);

  }
  return v5 != 0;
}

void sub_19F1C116C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1C11C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F1C127C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1C1314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKTimedAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::reset(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  objc_storeStrong((id *)(a1 + 8), a2);

}

void md::DaVinciGroundTileData::_buildTileMeshes(uint64_t a1, geo::codec::VectorTile **a2, uint64_t a3, uint64_t *a4, float32x2_t *a5)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  size_t prime;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int32 *v25;
  unint64_t v26;
  void *v27;
  __int32 *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  void *i;
  int v41;
  char v42;
  char *v43;
  _BYTE *v44;
  void *j;
  int v46;
  char v47;
  __int32 v48;
  uint64_t v49;
  __int32 v50;
  char v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int32 v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  int v77;
  int v78;
  uint64_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  void *v83;
  unint64_t v85;
  uint8x8_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  _QWORD **v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  __int128 v101;
  void *v102;
  unsigned int v103;
  int8x16_t v104;
  int8x16_t v105;
  uint64_t v106;
  int8x16_t v107;
  float32x2_t v108;
  uint64_t v109;
  float32x2_t *v110;
  _QWORD *v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x4_t v114;
  void **v115;
  size_t v116;
  size_t v117;
  uint16x4_t *v118;
  _OWORD *p_dst;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  char *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  char *v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned __int32 v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  int64_t v153;
  unsigned __int32 v154;
  unsigned __int32 v155;
  uint64_t v156;
  int64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  char *v162;
  unint64_t v163;
  char *v164;
  int v165;
  uint64_t v166;
  _OWORD *v167;
  char *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  char *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  _QWORD *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  __n128 *v245;
  uint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  __n128 v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  __n128 v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v307;
  _QWORD *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  _QWORD *v314;
  int v315;
  int v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  __n128 v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  __n128 v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  __n128 v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  _QWORD *v354;
  int v355;
  int v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  int v362;
  int v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  __n128 v367;
  unint64_t v368;
  unint64_t v369;
  _QWORD *v370;
  int v371;
  int v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  _QWORD *v380;
  int v381;
  int v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  void **v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  void **v390;
  _QWORD *v391;
  int v392;
  int v393;
  void **v394;
  char *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  __n128 v400;
  __int128 v401;
  _QWORD *v402;
  int v403;
  int v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  int v414;
  int v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  _QWORD *v424;
  int v425;
  int v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  __n128 v433;
  unint64_t v434;
  unint64_t v435;
  _QWORD *v436;
  int v437;
  int v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  _QWORD *v447;
  int v448;
  int v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  _QWORD *v458;
  int v459;
  int v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  double v464;
  double v465;
  double v466;
  double v467;
  float32x4_t v468;
  char *v469;
  unsigned int *v470;
  float32x4_t v474;
  uint64_t *v475;
  uint64_t v476;
  float32x4_t v478;
  int32x4_t v479;
  float32x4_t v480;
  _QWORD *v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  int v485;
  char *v486;
  uint64_t v487;
  uint64_t v488;
  __int32 *v490;
  double v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  double v498;
  double v499;
  unsigned int v500;
  unsigned int v501;
  double v502;
  double v503;
  double v504;
  double v505;
  double v506;
  BOOL v507;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v516;
  unint64_t v517;
  BOOL v518;
  BOOL v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unsigned int *v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  BOOL v537;
  BOOL v539;
  BOOL v541;
  BOOL v543;
  BOOL v545;
  BOOL v547;
  BOOL v549;
  BOOL v551;
  BOOL v553;
  int16x8_t v555;
  int16x8_t v556;
  int32x4_t v557;
  int32x4_t v558;
  unint64_t v559;
  const float *v560;
  unsigned int v561;
  unint64_t v562;
  int32x4_t v563;
  float *v564;
  const float *v565;
  float32x4_t v566;
  float32x4_t v567;
  uint64_t v568;
  __int16 *v569;
  __int16 *v570;
  int32x4_t *v571;
  uint64_t v572;
  float *v573;
  _DWORD *v574;
  float v575;
  float v576;
  float v577;
  uint64_t v580;
  _WORD *v581;
  _WORD *v582;
  char *v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  unsigned int v587;
  __int32 v588;
  _QWORD **v589;
  uint64_t v590;
  float *v591;
  double v592;
  double v593;
  double v594;
  double v595;
  double v596;
  unint64_t v597;
  _QWORD **v598;
  _QWORD *v599;
  _QWORD **v600;
  _QWORD *v601;
  unint64_t v602;
  _QWORD *v603;
  _QWORD *v604;
  uint64_t v605;
  _QWORD *v606;
  _QWORD *v607;
  unint64_t v608;
  unint64_t v609;
  BOOL v610;
  unint64_t v611;
  _QWORD **v612;
  _QWORD *v613;
  _QWORD **v614;
  _QWORD **v615;
  unint64_t v616;
  _QWORD *v617;
  _QWORD *v618;
  uint64_t v619;
  _QWORD **v620;
  _QWORD *v621;
  BOOL v622;
  int v623;
  float v624;
  float *v625;
  float v626;
  float v627;
  float v628;
  double v629;
  double v630;
  double v631;
  double v632;
  unsigned int v633;
  unsigned int v634;
  double v635;
  double v636;
  double v637;
  double v638;
  double v639;
  char *v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  float *v649;
  uint64_t v650;
  uint64_t v651;
  float v652;
  float v653;
  float v654;
  uint64_t v657;
  _WORD *v658;
  _WORD *v659;
  unint64_t v660;
  BOOL v661;
  BOOL v662;
  uint64_t v663;
  uint64_t v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  char *v670;
  char *v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  BOOL v679;
  BOOL v681;
  BOOL v683;
  BOOL v685;
  BOOL v687;
  BOOL v689;
  BOOL v691;
  BOOL v693;
  int16x8_t v695;
  unint64_t v696;
  int16x8_t v697;
  const float *v698;
  unsigned int v699;
  unint64_t v700;
  const float *v701;
  const float *v702;
  float *v703;
  const float *v704;
  float32x4_t v705;
  float32x4_t v706;
  uint64_t v707;
  __int16 *v708;
  __int16 *v709;
  float *v710;
  unint64_t v711;
  unint64_t v712;
  _QWORD *v713;
  int v714;
  int v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t v718;
  unint64_t v719;
  _QWORD *v720;
  int v721;
  int v722;
  unint64_t v723;
  unint64_t v724;
  char *v725;
  void **v726;
  _QWORD *v727;
  int v728;
  int v729;
  void **v730;
  char *v731;
  unint64_t v732;
  unint64_t v733;
  _QWORD *v734;
  int v735;
  int v736;
  unint64_t v737;
  unint64_t v738;
  unint64_t v739;
  unint64_t v740;
  _QWORD *v741;
  int v742;
  int v743;
  unint64_t v744;
  unint64_t v745;
  __int128 v746;
  _QWORD *v747;
  int v748;
  int v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  unint64_t v753;
  _QWORD *v754;
  int v755;
  int v756;
  unint64_t v757;
  unint64_t v758;
  __int128 v759;
  _QWORD *v760;
  int v761;
  int v762;
  unint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  _QWORD *v767;
  int v768;
  int v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unint64_t v773;
  _QWORD *v774;
  int v775;
  int v776;
  unint64_t v777;
  unint64_t v778;
  unint64_t v779;
  unint64_t v780;
  _QWORD *v781;
  int v782;
  int v783;
  uint64_t v784;
  __n128 v785;
  unint64_t v786;
  unint64_t v787;
  _QWORD *v788;
  int v789;
  int v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  __n128 v797;
  __int128 v798;
  _QWORD *v799;
  int v800;
  int v801;
  unint64_t v802;
  unint64_t v803;
  unint64_t v804;
  void **v805;
  uint64_t v806;
  uint64_t v807;
  char *v808;
  void **v809;
  _QWORD *v810;
  int v811;
  int v812;
  void **v813;
  char *v814;
  unint64_t v815;
  uint64_t v816;
  __n128 v817;
  uint64_t v818;
  uint64_t v819;
  __int128 v820;
  _QWORD *v821;
  int v822;
  int v823;
  unint64_t v824;
  unint64_t v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  __n128 v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  _QWORD *v834;
  int v835;
  int v836;
  unint64_t v837;
  unint64_t v838;
  unint64_t v839;
  uint64_t v840;
  uint64_t v841;
  __n128 v842;
  uint64_t v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  _QWORD *v847;
  int v848;
  int v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  __n128 v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  unint64_t v858;
  _QWORD *v859;
  int v860;
  int v861;
  unint64_t v862;
  unint64_t v863;
  unint64_t v864;
  unint64_t v865;
  __n128 v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  _QWORD *v871;
  int v872;
  int v873;
  unint64_t v874;
  unint64_t v875;
  unint64_t v876;
  unint64_t v877;
  __n128 v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  unint64_t v882;
  _QWORD *v883;
  int v884;
  int v885;
  unint64_t v886;
  unint64_t v887;
  uint64_t v888;
  double v889;
  double v890;
  double v891;
  double v892;
  double v893;
  char *v896;
  unsigned int *v897;
  unsigned int **v898;
  unsigned int *v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  uint64_t v903;
  unsigned int v904;
  char *v905;
  char *v906;
  unsigned int v907;
  float *v908;
  int v909;
  int v910;
  int v911;
  int v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  int v919;
  char *v920;
  uint64_t v921;
  uint64_t v922;
  float *v924;
  float v925;
  float v926;
  float v927;
  double v930;
  double v931;
  double v932;
  double v933;
  double v934;
  double v935;
  double v936;
  double v937;
  double v938;
  unsigned int v939;
  unsigned int v940;
  double v941;
  double v942;
  double v943;
  double v944;
  double v945;
  uint64_t v947;
  double v949;
  float v950;
  char *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v960;
  float *v961;
  uint64_t v962;
  float v963;
  float v964;
  float v965;
  uint64_t v968;
  _WORD *v969;
  _WORD *v970;
  char *v971;
  uint64_t v972;
  unint64_t v973;
  unsigned int v974;
  int v975;
  uint64_t v976;
  uint64_t v977;
  float *v978;
  double v979;
  double v980;
  double v981;
  double v982;
  double v983;
  unint64_t v984;
  _QWORD *v985;
  _QWORD *v986;
  _QWORD *v987;
  _QWORD *v988;
  unint64_t v989;
  _QWORD *v990;
  _QWORD *v991;
  uint64_t v992;
  _QWORD *v993;
  _QWORD *v994;
  unint64_t v995;
  unint64_t v996;
  BOOL v997;
  unint64_t v998;
  _QWORD *v999;
  _QWORD *v1000;
  _QWORD *v1001;
  _QWORD *v1002;
  unint64_t v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  uint64_t v1006;
  _QWORD *v1007;
  _QWORD *v1008;
  BOOL v1009;
  int v1010;
  float v1011;
  float v1012;
  float *v1013;
  float v1014;
  float v1015;
  float v1016;
  double v1017;
  double v1018;
  double v1019;
  double v1020;
  unsigned int v1021;
  unsigned int v1022;
  double v1023;
  double v1024;
  double v1025;
  double v1026;
  double v1027;
  _QWORD **v1029;
  uint64_t v1030;
  double v1031;
  double v1032;
  float v1033;
  char *v1034;
  uint64_t v1035;
  uint64_t v1036;
  float *v1037;
  uint64_t v1038;
  uint64_t v1041;
  uint64_t v1042;
  float *v1043;
  int v1044;
  int v1045;
  uint64_t v1046;
  float v1047;
  float v1048;
  float v1049;
  uint64_t v1052;
  _WORD *v1053;
  _WORD *v1054;
  float *v1055;
  unint64_t v1056;
  unint64_t v1057;
  _QWORD *v1058;
  int v1059;
  int v1060;
  unint64_t v1061;
  unint64_t v1062;
  unint64_t v1063;
  unint64_t v1064;
  _QWORD *v1065;
  int v1066;
  int v1067;
  unint64_t v1068;
  unint64_t v1069;
  char *v1070;
  void **v1071;
  _QWORD *v1072;
  int v1073;
  int v1074;
  void **v1075;
  char *v1076;
  unint64_t v1077;
  unint64_t v1078;
  _QWORD *v1079;
  int v1080;
  int v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  _QWORD *v1086;
  int v1087;
  int v1088;
  unint64_t v1089;
  unint64_t v1090;
  __int128 v1091;
  _QWORD *v1092;
  int v1093;
  int v1094;
  unint64_t v1095;
  unint64_t v1096;
  unint64_t v1097;
  unint64_t v1098;
  _QWORD *v1099;
  int v1100;
  int v1101;
  unint64_t v1102;
  unint64_t v1103;
  __int128 v1104;
  _QWORD *v1105;
  int v1106;
  int v1107;
  unint64_t v1108;
  unint64_t v1109;
  unint64_t v1110;
  unint64_t v1111;
  _QWORD *v1112;
  int v1113;
  int v1114;
  unint64_t v1115;
  unint64_t v1116;
  unint64_t v1117;
  unint64_t v1118;
  unint64_t v1119;
  unint64_t v1120;
  unint64_t v1121;
  _QWORD *v1122;
  int v1123;
  int v1124;
  unint64_t v1125;
  unint64_t v1126;
  int v1127;
  unint64_t v1128;
  unint64_t v1129;
  uint64_t k;
  uint64_t v1131;
  uint64_t v1132;
  float32x4_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  unint64_t *v1137;
  unint64_t v1138;
  unint64_t v1139;
  unint64_t *v1140;
  unint64_t v1141;
  std::__shared_weak_count *v1142;
  std::__shared_weak_count *v1143;
  unint64_t *v1144;
  std::__shared_weak_count *v1145;
  uint64_t v1146;
  std::__shared_weak_count *v1147;
  unint64_t *v1148;
  unint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  unint64_t **v1152;
  unint64_t v1153;
  unint64_t *v1154;
  unint64_t *v1155;
  unint64_t v1156;
  std::__shared_weak_count *v1157;
  std::__shared_weak_count *v1158;
  unint64_t *v1159;
  std::__shared_weak_count *v1160;
  uint64_t v1161;
  std::__shared_weak_count *v1162;
  unint64_t *v1163;
  unint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  void **v1167;
  unint64_t v1168;
  unint64_t *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  _QWORD *v1172;
  _QWORD *v1173;
  unint64_t *v1174;
  _QWORD *v1175;
  uint64_t v1176;
  std::__shared_weak_count *v1177;
  unint64_t *v1178;
  unint64_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  unint64_t v1182;
  unint64_t *v1183;
  unint64_t *v1184;
  unint64_t v1185;
  _QWORD *v1186;
  _QWORD *v1187;
  unint64_t *v1188;
  _QWORD *v1189;
  uint64_t v1190;
  std::__shared_weak_count *v1191;
  unint64_t *v1192;
  unint64_t v1193;
  uint64_t v1194;
  unint64_t v1195;
  unint64_t v1196;
  unint64_t *v1197;
  unint64_t *v1198;
  unint64_t v1199;
  _QWORD *v1200;
  _QWORD *v1201;
  unint64_t *v1202;
  _QWORD *v1203;
  uint64_t v1204;
  std::__shared_weak_count *v1205;
  unint64_t *v1206;
  unint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  char *v1210;
  unint64_t v1211;
  std::__shared_weak_count *v1212;
  unint64_t *v1213;
  unint64_t v1214;
  unsigned __int8 v1215;
  unsigned __int8 v1216;
  uint64_t v1217;
  unint64_t v1218;
  std::__shared_weak_count *v1219;
  unint64_t *v1220;
  unint64_t v1221;
  unint64_t *v1222;
  unint64_t v1223;
  std::__shared_weak_count *v1224;
  unint64_t *v1225;
  unint64_t v1226;
  unint64_t *v1227;
  unint64_t v1228;
  unint64_t v1229;
  unint64_t v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  std::__shared_weak_count *v1234;
  unint64_t *v1235;
  unint64_t v1236;
  char *v1237;
  _QWORD *v1238;
  unint64_t v1239;
  std::__shared_weak_count *v1240;
  unint64_t *v1241;
  unint64_t v1242;
  unsigned __int8 v1243;
  unsigned __int8 v1244;
  uint64_t v1245;
  _QWORD *v1246;
  unint64_t v1247;
  std::__shared_weak_count *v1248;
  unint64_t *v1249;
  unint64_t v1250;
  unint64_t *v1251;
  unint64_t v1252;
  std::__shared_weak_count *v1253;
  unint64_t *v1254;
  unint64_t v1255;
  unint64_t *v1256;
  unint64_t v1257;
  unint64_t v1258;
  std::__shared_weak_count *v1259;
  unint64_t *v1260;
  unint64_t v1261;
  std::__shared_weak_count *v1262;
  std::__shared_weak_count *v1263;
  unsigned int *v1264;
  unint64_t v1265;
  std::__shared_weak_count *v1266;
  unint64_t *v1267;
  unint64_t v1268;
  unint64_t v1269;
  std::__shared_weak_count *v1270;
  std::__shared_weak_count *v1271;
  unsigned int *v1272;
  unint64_t v1273;
  std::__shared_weak_count *v1274;
  unint64_t *v1275;
  unint64_t v1276;
  unint64_t v1277;
  std::__shared_weak_count *v1278;
  std::__shared_weak_count *v1279;
  unsigned int *v1280;
  unint64_t v1281;
  std::__shared_weak_count *v1282;
  unint64_t *v1283;
  unint64_t v1284;
  unint64_t v1285;
  std::__shared_weak_count *v1286;
  unint64_t *v1287;
  unint64_t v1288;
  std::__shared_weak_count *v1289;
  unint64_t *v1290;
  unint64_t v1291;
  std::__shared_weak_count *v1292;
  unint64_t *v1293;
  unint64_t v1294;
  std::__shared_weak_count *v1295;
  unint64_t *v1296;
  unint64_t v1297;
  std::__shared_weak_count *v1298;
  unint64_t *v1299;
  unint64_t v1300;
  std::__shared_weak_count *v1301;
  unint64_t *v1302;
  unint64_t v1303;
  unint64_t *v1304;
  unint64_t *v1305;
  unint64_t *v1306;
  unint64_t *v1307;
  unsigned int *v1308;
  unsigned int v1309;
  char v1310;
  char *v1311;
  unsigned int **v1312;
  unint64_t v1313;
  uint64_t *v1314;
  unint64_t v1315;
  __int128 v1316;
  char *v1317;
  unsigned int **v1318;
  unint64_t v1319;
  unint64_t v1320;
  unint64_t v1321;
  unint64_t v1322;
  char *v1323;
  char *v1324;
  uint64_t *v1325;
  unint64_t v1326;
  char *v1327;
  char *v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  unsigned int **v1333;
  std::__shared_weak_count *v1334;
  unint64_t *v1335;
  unint64_t v1336;
  std::__shared_weak_count *v1337;
  unint64_t *v1338;
  unint64_t v1339;
  uint64_t *v1340;
  unint64_t v1341;
  unsigned int *v1342;
  unsigned int v1343;
  _QWORD *v1344;
  std::__shared_weak_count *v1345;
  unint64_t *v1346;
  unint64_t v1347;
  uint64_t v1348;
  __int128 v1349;
  unint64_t *v1350;
  unint64_t v1351;
  std::__shared_weak_count *v1352;
  unint64_t *v1353;
  unint64_t v1354;
  char *v1355;
  uint64_t *v1356;
  unint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  unint64_t *v1361;
  unint64_t v1362;
  unint64_t *v1363;
  unint64_t *v1364;
  unint64_t *v1365;
  void *v1366;
  std::__shared_weak_count *v1367;
  unint64_t *v1368;
  unint64_t v1369;
  unint64_t v1370;
  unint64_t v1371;
  uint64_t *v1372;
  uint64_t **v1373;
  uint64_t *v1374;
  uint64_t v1375;
  uint64_t *v1376;
  unint64_t *v1377;
  unint64_t v1378;
  std::__shared_weak_count *v1379;
  unint64_t *v1380;
  unint64_t v1381;
  std::__shared_weak_count *v1382;
  unint64_t *v1383;
  unint64_t v1384;
  std::__shared_weak_count *v1385;
  unint64_t *v1386;
  unint64_t v1387;
  uint64_t v1388;
  unint64_t *v1389;
  void *v1390;
  unint64_t *v1391;
  unint64_t v1392;
  _QWORD *v1393;
  _QWORD *v1394;
  unint64_t *v1395;
  _QWORD *v1396;
  std::__shared_weak_count *v1397;
  unint64_t *v1398;
  unint64_t v1399;
  unint64_t v1400;
  unint64_t v1401;
  uint64_t *v1402;
  uint64_t **v1403;
  uint64_t **v1404;
  unint64_t v1405;
  uint64_t *v1406;
  uint64_t v1407;
  uint64_t *v1408;
  unint64_t *v1409;
  unint64_t v1410;
  std::__shared_weak_count *v1411;
  unint64_t *v1412;
  unint64_t v1413;
  std::__shared_weak_count *v1414;
  unint64_t *v1415;
  unint64_t v1416;
  std::__shared_weak_count *v1417;
  unint64_t *v1418;
  unint64_t v1419;
  uint64_t v1420;
  unint64_t v1421;
  unint64_t v1422;
  unint64_t *v1423;
  unint64_t v1424;
  std::__shared_weak_count *v1425;
  std::__shared_weak_count *v1426;
  unint64_t *v1427;
  _QWORD *v1428;
  std::__shared_weak_count *v1429;
  unint64_t *v1430;
  unint64_t v1431;
  unint64_t v1432;
  unint64_t v1433;
  uint64_t *v1434;
  uint64_t **v1435;
  uint64_t **v1436;
  unint64_t v1437;
  uint64_t *v1438;
  uint64_t v1439;
  uint64_t *v1440;
  unint64_t *v1441;
  unint64_t v1442;
  std::__shared_weak_count *v1443;
  unint64_t *v1444;
  unint64_t v1445;
  std::__shared_weak_count *v1446;
  unint64_t *v1447;
  unint64_t v1448;
  std::__shared_weak_count *v1449;
  unint64_t *v1450;
  unint64_t v1451;
  std::__shared_weak_count *v1452;
  unint64_t *v1453;
  unint64_t v1454;
  std::__shared_weak_count *v1455;
  unint64_t *v1456;
  unint64_t v1457;
  std::__shared_weak_count *v1458;
  unint64_t *v1459;
  unint64_t v1460;
  uint64_t *v1461;
  unint64_t v1462;
  unsigned __int8 v1463;
  uint64_t v1464;
  geo::read_write_lock *v1465;
  const char *v1466;
  malloc_zone_t *zone;
  uint64_t v1468;
  geo::read_write_lock *v1469;
  const char *v1470;
  malloc_zone_t *v1471;
  unsigned __int8 v1472;
  uint64_t v1473;
  geo::read_write_lock *v1474;
  const char *v1475;
  malloc_zone_t *v1476;
  uint64_t v1477;
  geo::read_write_lock *v1478;
  const char *v1479;
  malloc_zone_t *v1480;
  float32x2_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  __int128 v1484;
  unint64_t v1485;
  unsigned __int16 v1486;
  uint64_t v1487;
  _QWORD *v1488;
  uint64_t v1489;
  float v1490;
  float32x2_t v1491;
  float32x2_t v1492;
  float32x2_t v1493;
  float v1494;
  float v1495;
  float v1496;
  float v1497;
  float32x2_t v1498;
  unint64_t v1499;
  float32x2_t v1500;
  float32x2_t v1501;
  float32x2_t v1502;
  float32x2_t v1503;
  float32x2_t v1504;
  float32x2_t v1505;
  float v1506;
  float v1507;
  float v1508;
  uint64_t v1509;
  uint64_t v1510;
  float v1511;
  uint64_t *v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  _DWORD **v1519;
  uint64_t *v1520;
  uint64_t v1521;
  unint64_t v1522;
  _DWORD *v1523;
  int v1524;
  char v1526;
  unint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  const void *v1530;
  void *v1531;
  int64x2_t v1532;
  unint64_t v1533;
  int *v1534;
  int v1535;
  uint64_t v1536;
  unint64_t v1537;
  uint8x8_t v1538;
  unint64_t v1539;
  uint64_t ***v1540;
  uint64_t **v1541;
  unint64_t v1542;
  unint64_t v1543;
  uint64_t *v1544;
  BOOL v1545;
  uint64_t v1546;
  gss::Allocator *v1547;
  uint64_t v1548;
  uint64_t v1549;
  _QWORD *v1550;
  uint64_t v1551;
  unint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  _QWORD *v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  unint64_t v1561;
  _QWORD *v1562;
  uint64_t v1563;
  _OWORD *v1564;
  __int128 *v1565;
  uint64_t v1566;
  __int128 v1567;
  uint64_t *v1568;
  NSObject *v1569;
  gdc::Registry *v1570;
  uint64_t v1571;
  char v1572;
  uint64_t v1573;
  unsigned __int32 *v1574;
  float v1575;
  float v1576;
  float v1577;
  float v1578;
  float32x2_t v1579;
  uint64_t v1580;
  float v1581;
  float32x2_t v1582;
  float32x2_t v1584;
  float v1585;
  float v1586;
  float32x2_t v1587;
  float v1588;
  float v1589;
  float v1590;
  float32x4_t v1591;
  int8x16_t v1592;
  float v1593;
  float32x4_t v1595;
  int8x16_t v1596;
  unsigned int v1597;
  unint64_t v1598;
  unint64_t v1599;
  void **v1600;
  uint64_t v1601;
  unint64_t v1602;
  int8x8_t v1603;
  uint8x8_t v1604;
  uint64_t v1605;
  _QWORD *v1606;
  _QWORD *v1607;
  uint64_t v1608;
  unint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  _QWORD *v1612;
  uint64_t v1613;
  uint64_t v1614;
  _QWORD *n;
  uint64_t v1616;
  _QWORD *m;
  uint64_t v1618;
  unint64_t v1619;
  int8x8_t v1620;
  uint8x8_t v1621;
  _QWORD *v1622;
  _QWORD *v1623;
  uint64_t v1624;
  unint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  _QWORD *v1628;
  uint64_t v1629;
  _QWORD *v1630;
  char v1631;
  _BYTE *v1632;
  void *v1633;
  _QWORD *ii;
  uint64_t v1635;
  unint64_t v1636;
  _BYTE *v1637;
  uint64_t v1638;
  _BYTE *v1639;
  unint64_t v1640;
  uint64_t v1641;
  unint64_t v1642;
  size_t v1643;
  char *v1644;
  char *v1645;
  uint64_t v1646;
  char *v1647;
  __int128 *v1648;
  unint64_t v1649;
  __int128 v1650;
  uint64_t v1651;
  _BYTE *v1652;
  char *v1653;
  uint64_t *v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  gss::Allocator *v1659;
  uint64_t v1660;
  unint64_t *v1661;
  unint64_t v1662;
  unint64_t v1663;
  unint64_t *v1664;
  unint64_t v1665;
  unint64_t v1666;
  unint64_t v1667;
  int64_t v1668;
  char *v1669;
  char *v1670;
  unint64_t *v1671;
  unint64_t v1672;
  unint64_t v1673;
  unint64_t v1674;
  char v1675;
  void *v1676;
  uint64_t v1677;
  unint64_t v1678;
  unint64_t v1679;
  unint64_t v1680;
  char *v1681;
  __int128 v1682;
  char *v1683;
  __int128 v1684;
  uint64_t v1685;
  char *v1686;
  uint64_t v1687;
  __int128 v1688;
  char *v1689;
  _QWORD *v1690;
  int64x2_t v1691;
  char *v1692;
  char *v1693;
  char *v1694;
  std::__shared_weak_count *v1695;
  unint64_t *v1696;
  unint64_t v1697;
  void *v1698;
  std::__shared_weak_count *v1699;
  unint64_t *v1700;
  unint64_t v1701;
  std::__shared_weak_count *v1702;
  unint64_t *v1703;
  unint64_t v1704;
  std::__shared_weak_count *v1705;
  unint64_t *v1706;
  unint64_t v1707;
  void *v1708;
  std::__shared_weak_count *v1709;
  unint64_t *v1710;
  unint64_t v1711;
  std::__shared_weak_count *v1712;
  unint64_t *v1713;
  unint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  char *v1717;
  char v1718;
  _QWORD *jj;
  uint64_t v1720;
  uint64_t v1721;
  int8x8_t v1722;
  uint8x8_t v1723;
  _QWORD *v1724;
  _QWORD *v1725;
  uint64_t v1726;
  unint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  _QWORD *v1730;
  uint64_t v1731;
  _QWORD *v1732;
  char v1733;
  _QWORD *v1734;
  void *v1735;
  _QWORD *kk;
  uint64_t v1737;
  unint64_t v1738;
  char *v1739;
  _QWORD *v1740;
  char *v1741;
  uint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  unint64_t v1745;
  _BYTE *v1746;
  _QWORD *v1747;
  unint64_t v1748;
  uint64_t v1749;
  _OWORD *v1750;
  char *v1751;
  uint64_t v1752;
  __int128 v1753;
  uint64_t v1754;
  _QWORD *mm;
  uint64_t v1756;
  unint64_t v1757;
  int8x8_t v1758;
  uint8x8_t v1759;
  _QWORD *v1760;
  _QWORD *v1761;
  uint64_t v1762;
  unint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  _QWORD *v1766;
  uint64_t v1767;
  _QWORD *v1768;
  char v1769;
  _BYTE *v1770;
  void *v1771;
  _QWORD *nn;
  uint64_t v1773;
  unint64_t v1774;
  _BYTE *v1775;
  uint64_t v1776;
  _BYTE *v1777;
  unint64_t v1778;
  uint64_t v1779;
  unint64_t v1780;
  size_t v1781;
  char *v1782;
  char *v1783;
  uint64_t v1784;
  char *v1785;
  __int128 *v1786;
  unint64_t v1787;
  __int128 v1788;
  uint64_t v1789;
  _BYTE *v1790;
  char *v1791;
  uint64_t *v1792;
  uint64_t v1793;
  char *v1794;
  char v1795;
  _QWORD *i1;
  uint64_t v1797;
  uint64_t v1798;
  int8x8_t v1799;
  uint8x8_t v1800;
  _QWORD *v1801;
  _QWORD *v1802;
  uint64_t v1803;
  unint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  _QWORD *v1807;
  uint64_t v1808;
  _QWORD *v1809;
  char v1810;
  void *v1811;
  _QWORD *i2;
  uint64_t v1813;
  unint64_t v1814;
  _BYTE *v1815;
  uint64_t v1816;
  char *v1817;
  uint64_t v1818;
  uint64_t v1819;
  unint64_t v1820;
  size_t v1821;
  char *v1822;
  char *v1823;
  char *v1824;
  _QWORD *i3;
  uint64_t v1826;
  unint64_t v1827;
  uint64_t v1828;
  unint64_t v1829;
  int8x8_t v1830;
  uint8x8_t v1831;
  _QWORD *v1832;
  _QWORD *v1833;
  uint64_t v1834;
  unint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  _QWORD *v1838;
  uint64_t v1839;
  _QWORD *v1840;
  char v1841;
  _BYTE *v1842;
  unint64_t v1843;
  _QWORD *i4;
  uint64_t v1845;
  unint64_t v1846;
  _BYTE *v1847;
  uint64_t v1848;
  _BYTE *v1849;
  unint64_t v1850;
  uint64_t v1851;
  unint64_t v1852;
  size_t v1853;
  char *v1854;
  char *v1855;
  uint64_t v1856;
  __int128 *v1857;
  char *v1858;
  unint64_t v1859;
  __int128 v1860;
  uint64_t v1861;
  _BYTE *v1862;
  char *v1863;
  uint64_t *v1864;
  uint64_t v1865;
  char *v1866;
  char v1867;
  _QWORD *i5;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t *v1871;
  _QWORD *v1872;
  char v1873;
  uint64_t v1874;
  _QWORD *i6;
  uint64_t v1876;
  uint64_t *v1877;
  _QWORD *v1878;
  char v1879;
  uint64_t v1880;
  _QWORD *v1881;
  uint64_t v1882;
  uint64_t *v1883;
  _QWORD *v1884;
  char v1885;
  uint64_t v1886;
  _QWORD *v1887;
  uint64_t v1888;
  uint64_t *v1889;
  _QWORD *v1890;
  char v1891;
  uint64_t v1892;
  _QWORD *v1893;
  uint64_t v1894;
  uint64_t *v1895;
  _QWORD *v1896;
  char v1897;
  uint64_t v1898;
  _QWORD *v1899;
  uint64_t v1900;
  uint64_t *v1901;
  _QWORD *v1902;
  char v1903;
  uint64_t v1904;
  _QWORD *v1905;
  uint64_t v1906;
  uint64_t *v1907;
  _QWORD *v1908;
  char v1909;
  uint64_t v1910;
  _QWORD *v1911;
  uint64_t v1912;
  unint64_t v1913;
  _BYTE *v1914;
  uint64_t v1915;
  unint64_t v1916;
  _BYTE *v1917;
  uint64_t v1918;
  unint64_t v1919;
  _BYTE *v1920;
  uint64_t v1921;
  unint64_t v1922;
  _BYTE *v1923;
  uint64_t v1924;
  unint64_t v1925;
  _BYTE *v1926;
  uint64_t v1927;
  unint64_t v1928;
  _BYTE *v1929;
  uint64_t v1930;
  unint64_t v1931;
  _BYTE *v1932;
  uint64_t v1933;
  char *v1934;
  uint64_t v1935;
  uint64_t v1936;
  unint64_t v1937;
  size_t v1938;
  char *v1939;
  char *v1940;
  uint64_t v1941;
  uint64_t v1942;
  unint64_t v1943;
  size_t v1944;
  char *v1945;
  char *v1946;
  uint64_t v1947;
  uint64_t v1948;
  unint64_t v1949;
  size_t v1950;
  char *v1951;
  char *v1952;
  uint64_t v1953;
  uint64_t v1954;
  unint64_t v1955;
  size_t v1956;
  char *v1957;
  char *v1958;
  uint64_t v1959;
  uint64_t v1960;
  unint64_t v1961;
  size_t v1962;
  char *v1963;
  char *v1964;
  uint64_t v1965;
  uint64_t v1966;
  unint64_t v1967;
  size_t v1968;
  char *v1969;
  char *v1970;
  uint64_t v1971;
  uint64_t v1972;
  unint64_t v1973;
  size_t v1974;
  char *v1975;
  char *v1976;
  char *v1977;
  _QWORD *v1978;
  uint64_t v1979;
  char *v1980;
  char *v1981;
  _QWORD *v1982;
  uint64_t v1983;
  char *v1984;
  char *v1985;
  _QWORD *v1986;
  uint64_t v1987;
  char *v1988;
  char *v1989;
  _QWORD *v1990;
  uint64_t v1991;
  char *v1992;
  char *v1993;
  _QWORD *v1994;
  uint64_t v1995;
  char *v1996;
  char *v1997;
  _QWORD *v1998;
  uint64_t v1999;
  char *v2000;
  char *v2001;
  _QWORD *v2002;
  uint64_t v2003;
  std::__shared_weak_count *v2004;
  unint64_t *v2005;
  unint64_t v2006;
  _QWORD *v2007;
  _QWORD *v2008;
  void *v2009;
  _QWORD *v2010;
  int v2011;
  int v2012;
  unint64_t v2013;
  unint64_t v2014;
  int v2015;
  uint64_t v2016;
  int v2017;
  uint64_t v2018;
  int v2019;
  uint64_t v2020;
  int v2021;
  uint64_t v2022;
  int v2023;
  uint64_t v2024;
  int v2025;
  uint64_t v2026;
  int v2027;
  uint64_t v2028;
  int v2029;
  uint64_t v2030;
  int v2031;
  uint64_t v2032;
  void *v2033;
  unint64_t v2034;
  unsigned __int16 *v2035;
  float32x2_t *v2036;
  unint64_t v2037;
  uint64_t v2038;
  void *__p;
  uint64_t v2040;
  uint64_t *v2041;
  __int128 v2042;
  uint64_t v2043;
  unsigned int **v2044;
  uint64_t *v2045;
  _QWORD *v2046;
  geo::codec::VectorTile *v2047;
  geo::codec::VectorTile **v2048;
  __int128 v2049;
  __int128 v2050;
  float32x4_t v2051;
  __int128 v2052;
  __int128 v2053;
  __int128 v2054;
  __int128 v2055;
  float32x4_t v2056;
  unsigned int *v2057;
  float32x4_t v2058;
  int32x4_t v2059;
  float32x4_t v2060;
  unint64_t v2061;
  void *v2062;
  __n128 v2063;
  uint64_t v2064;
  __n128 v2065;
  unsigned int *v2066;
  std::__shared_weak_count *v2067;
  unsigned int *v2068;
  std::__shared_weak_count *v2069;
  __n128 __b;
  unint64_t v2071;
  unint64_t v2072;
  __int16 v2073;
  uint64_t v2074;
  __n128 v2075;
  unint64_t v2076;
  unint64_t v2077;
  __int16 v2078;
  uint64_t v2079;
  _BYTE v2080[24];
  uint64_t v2081;
  __int16 v2082;
  uint64_t v2083;
  void *v2084;
  char *v2085;
  char *v2086;
  __int16 v2087[2];
  uint64_t v2088;
  __int128 v2089;
  void *v2090[2];
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  void *v2096;
  void *v2097;
  uint64_t v2098;
  _QWORD **v2099;
  _QWORD *v2100[2];
  void *v2101[2];
  void *v2102[2];
  float v2103;
  void *v2104;
  __int32 *v2105;
  __int32 *v2106;
  double v2107;
  std::__shared_weak_count *v2108;
  void *v2109[2];
  char *v2110;
  void **v2111;
  __int16 v2112;
  uint64_t v2113;
  __n128 v2114;
  unint64_t v2115;
  unint64_t v2116;
  __int16 v2117;
  uint64_t v2118;
  __n128 v2119;
  unint64_t v2120;
  unint64_t v2121;
  __int16 v2122;
  uint64_t v2123;
  __n128 __dst;
  __int128 v2125;
  __int128 v2126;
  __n128 v2127;
  unint64_t v2128;
  unint64_t v2129;
  __int16 v2130;
  uint64_t v2131;
  __n128 v2132;
  unint64_t v2133;
  unint64_t v2134;
  __int16 v2135;
  uint64_t v2136;
  _BYTE buf[32];
  __int16 v2138;
  _BYTE v2139[44];
  int v2140;
  _BYTE v2141[12];
  __n128 v2142;
  unint64_t v2143;
  unint64_t v2144;
  __int16 v2145;
  uint64_t v2146;
  uint64_t v2147;
  unsigned int v2148;
  __int128 v2149;
  __int128 v2150;
  __int128 v2151;
  __int128 v2152;
  uint64_t v2153;
  uint64_t v2154;
  float32x4x3_t v2155;
  float32x4x3_t v2156;
  float32x4x3_t v2157;
  float32x4x3_t v2158;
  float32x4x3_t v2159;

  v2036 = a5;
  v2041 = a4;
  v2064 = a1;
  v2154 = *MEMORY[0x1E0C80C00];
  v9 = geo::codec::VectorTile::daVinciVertexCount(*a2);
  v10 = geo::codec::VectorTile::daVinciMeshCount(*a2);
  v11 = geo::codec::VectorTile::daVinciIndices(*a2);
  v2059.i64[0] = geo::codec::VectorTile::daVinciVertices(*a2);
  v2048 = a2;
  LOBYTE(v2054) = *(_BYTE *)(geo::codec::VectorTile::key(*a2) + 1);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v2053) = objc_msgSend(v12, "daVinciSmoothEdgeMinZ");
  LODWORD(v2052) = objc_msgSend(v12, "daVinciSmoothEdgeMaxZ");
  objc_msgSend(v12, "daVinciSmoothEdgeMinZAngle");
  v14 = v13;
  objc_msgSend(v12, "daVinciSmoothEdgeMaxZAngle");
  v16 = v15;

  v2105 = 0;
  v2104 = 0;
  v2106 = 0;
  LODWORD(v2040) = v10;
  v2058.i64[0] = a3;
  if (v10)
  {
    v2051.i32[0] = v9;
    v17 = 0;
    __p = 0;
    v18 = 0;
    v2061 = 0;
    v2062 = 0;
    v2033 = 0;
    v19 = 0;
    v20 = v2059.i64[0];
    v2043 = v10;
    *(_QWORD *)&v2055 = v11;
    do
    {
      v22 = geo::codec::VectorTile::daVinciMeshes(*a2);
      v24 = v22 + (v17 << 6);
      v25 = (__int32 *)(v24 + 12);
      v26 = (*(_DWORD *)(v24 + 16) + *(_DWORD *)(v24 + 12));
      v2065.n128_u64[0] = v26;
      v2063.n128_u64[0] = v24 + 12;
      if (*(_BYTE *)v24)
      {
        if (v18 >= v2062)
        {
          v30 = (v18 - (_BYTE *)__p) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            abort();
          if (((_BYTE *)v2062 - (_BYTE *)__p) >> 2 > v31)
            v31 = ((_BYTE *)v2062 - (_BYTE *)__p) >> 2;
          if ((unint64_t)((_BYTE *)v2062 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
          {
            if (v32 >> 61)
              goto LABEL_2905;
            v33 = (char *)operator new(8 * v32);
          }
          else
          {
            v33 = 0;
          }
          v38 = &v33[8 * v30];
          *(_QWORD *)v38 = 0;
          v39 = v38 + 8;
          for (i = __p; v18 != __p; v38[4] = v42)
          {
            v41 = *((_DWORD *)v18 - 2);
            v18 -= 8;
            v42 = v18[4];
            *((_DWORD *)v38 - 2) = v41;
            v38 -= 8;
            i = __p;
          }
          v2062 = &v33[8 * v32];
          if (i)
            operator delete(i);
          v18 = v39;
          v27 = v38;
          v10 = v2040;
          v26 = v2065.n128_u64[0];
          v25 = (__int32 *)v2063.n128_u64[0];
        }
        else
        {
          *(_QWORD *)v18 = 0;
          v18 += 8;
          v27 = __p;
        }
      }
      else
      {
        v28 = v2105;
        v29 = (char *)v2105 - (_BYTE *)v2104;
        if (v18 >= v2062)
        {
          v34 = (v18 - (_BYTE *)__p) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            abort();
          if (((_BYTE *)v2062 - (_BYTE *)__p) >> 2 > v35)
            v35 = ((_BYTE *)v2062 - (_BYTE *)__p) >> 2;
          if ((unint64_t)((_BYTE *)v2062 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
          {
            if (v36 >> 61)
              goto LABEL_2905;
            v37 = (char *)operator new(8 * v36);
          }
          else
          {
            v37 = 0;
          }
          v43 = &v37[8 * v34];
          *(_QWORD *)v43 = (v29 >> 4) | 0x100000000;
          v44 = v43 + 8;
          for (j = __p; v18 != __p; v43[4] = v47)
          {
            v46 = *((_DWORD *)v18 - 2);
            v18 -= 8;
            v47 = v18[4];
            *((_DWORD *)v43 - 2) = v46;
            v43 -= 8;
            j = __p;
          }
          v2062 = &v37[8 * v36];
          if (j)
            operator delete(j);
          __p = v43;
          v18 = v44;
          v26 = v2065.n128_u64[0];
          v25 = (__int32 *)v2063.n128_u64[0];
        }
        else
        {
          *(_QWORD *)v18 = (v29 >> 4) | 0x100000000;
          v18 += 8;
          v28 = v2105;
        }
        v48 = *v25;
        v49 = v22 + (v17 << 6);
        v50 = *(_DWORD *)(v49 + 4);
        v51 = *(_BYTE *)(v49 + 24);
        if (v28 >= v2106)
        {
          v53 = (__int32 *)v2104;
          v54 = ((char *)v28 - (_BYTE *)v2104) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            abort();
          v56 = (char *)v2106 - (_BYTE *)v2104;
          if (((char *)v2106 - (_BYTE *)v2104) >> 3 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v2056.i32[0] = *v25;
            v2057 = (unsigned int *)v22;
            if (v57 >> 60)
              goto LABEL_2905;
            v58 = v50;
            v59 = v57;
            v60 = (char *)operator new(16 * v57);
            v57 = v59;
            v50 = v58;
            v22 = (uint64_t)v2057;
            v48 = v2056.i32[0];
          }
          else
          {
            v60 = 0;
          }
          v61 = &v60[16 * v54];
          *(_DWORD *)v61 = v48;
          *((_DWORD *)v61 + 1) = v2065.n128_u32[0];
          *((_DWORD *)v61 + 2) = v50;
          v61[12] = v51;
          v62 = v61;
          if (v28 == v53)
          {
            v11 = v2055;
            v20 = v2059.i64[0];
          }
          else
          {
            v11 = v2055;
            v20 = v2059.i64[0];
            do
            {
              v63 = *((_QWORD *)v28 - 2);
              v28 -= 4;
              v64 = *(_QWORD *)((char *)v28 + 5);
              *((_QWORD *)v62 - 2) = v63;
              v62 -= 16;
              *(_QWORD *)(v62 + 5) = v64;
            }
            while (v28 != v53);
            v28 = v53;
          }
          v52 = (__int32 *)(v61 + 16);
          v2104 = v62;
          v2106 = (__int32 *)&v60[16 * v57];
          if (v28)
            operator delete(v28);
          v27 = __p;
          v26 = v2065.n128_u64[0];
          v25 = (__int32 *)v2063.n128_u64[0];
        }
        else
        {
          *v28 = v48;
          v28[1] = v26;
          v28[2] = v50;
          v52 = v28 + 4;
          *((_BYTE *)v28 + 12) = v51;
          v27 = __p;
          v20 = v2059.i64[0];
        }
        v2105 = v52;
        v10 = v2040;
      }
      __p = v27;
      if ((unint64_t)v19 >= v2061)
      {
        v66 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)v2033) >> 3);
        v67 = v66 + 1;
        if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v2061 - (_QWORD)v2033) >> 3) > v67)
          v67 = 0x5555555555555556 * ((uint64_t)(v2061 - (_QWORD)v2033) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2061 - (_QWORD)v2033) >> 3) >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v67;
        if (v68)
        {
          if (v68 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_2905;
          v69 = (char *)operator new(24 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * ((v19 - (_BYTE *)v2033) >> 3)];
        v65 = (int8x16_t)xmmword_19FFB3470;
        *(_OWORD *)v70 = xmmword_19FFB3470;
        *((_QWORD *)v70 + 2) = 0x80000000800000;
        if (v19 == v2033)
        {
          v73 = &v69[24 * v66];
          v72 = v2033;
        }
        else
        {
          v71 = &v69[24 * v66];
          v72 = v2033;
          do
          {
            v73 = v71 - 24;
            v65 = *(int8x16_t *)(v19 - 24);
            *((_QWORD *)v71 - 1) = *((_QWORD *)v19 - 1);
            *(int8x16_t *)(v71 - 24) = v65;
            v19 -= 24;
            v71 -= 24;
          }
          while (v19 != v2033);
        }
        v2061 = (unint64_t)&v69[24 * v68];
        v19 = v70 + 24;
        if (v72)
          operator delete(v72);
        v2033 = v73;
        v10 = v2040;
        v26 = v2065.n128_u64[0];
        v25 = (__int32 *)v2063.n128_u64[0];
      }
      else
      {
        v65 = (int8x16_t)xmmword_19FFB3470;
        *(_OWORD *)v19 = xmmword_19FFB3470;
        *((_QWORD *)v19 + 2) = 0x80000000800000;
        v19 += 24;
      }
      v74 = *v25;
      if (v74 < v26)
      {
        v75 = v26 - v74;
        v76 = (unsigned __int16 *)(v11 + 2 * v74);
        do
        {
          v78 = *v76++;
          v77 = v78;
          if (v78 != 0xFFFF)
          {
            v79 = v20 + 12 * (*(_DWORD *)(v22 + (v17 << 6) + 4) + v77);
            v65.i32[0] = *(_DWORD *)v79;
            v80 = *(float32x4_t *)(v19 - 24);
            v80.i32[3] = *(_DWORD *)v79;
            v23.i64[0] = *(_QWORD *)(v79 + 4);
            v81 = vextq_s8(vextq_s8(v65, v65, 4uLL), v23, 0xCuLL);
            v82 = (float32x4_t)v81;
            v82.i32[3] = HIDWORD(*(_OWORD *)(v19 - 24));
            v81.i32[3] = v81.i32[0];
            v65 = vbslq_s8((int8x16_t)vcgtq_f32(v80, v82), v81, *(int8x16_t *)(v19 - 24));
            *(int8x16_t *)(v19 - 24) = v65;
            *(float32x2_t *)v65.i8 = vmaxnm_f32(*(float32x2_t *)(v19 - 8), *(float32x2_t *)v23.i8);
            *((_QWORD *)v19 - 1) = v65.i64[0];
          }
          --v75;
        }
        while (v75);
      }
      ++v17;
      prime = v2043;
    }
    while (v17 != v2043);
    *(_OWORD *)v2101 = 0u;
    *(_OWORD *)v2102 = 0u;
    v2103 = 1.0;
    if (v10 == 1)
    {
      prime = 2;
      v2043 = 1;
      a3 = v2058.i64[0];
      v9 = v2051.i32[0];
LABEL_103:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v2101, prime);
      goto LABEL_104;
    }
    a3 = v2058.i64[0];
    v9 = v2051.i32[0];
  }
  else
  {
    __p = 0;
    v2033 = 0;
    prime = 0;
    *(_OWORD *)v2101 = 0u;
    *(_OWORD *)v2102 = 0u;
    v2103 = 1.0;
  }
  v2043 = prime;
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v83 = v2101[1];
    _CF = (void *)prime >= v2101[1];
    if ((void *)prime > v2101[1])
      goto LABEL_103;
  }
  else
  {
    v83 = 0;
    _CF = 1;
    if (prime)
      goto LABEL_103;
  }
  if (!_CF)
  {
    v85 = vcvtps_u32_f32((float)(unint64_t)v2102[1] / v2103);
    if ((unint64_t)v83 < 3
      || (v86 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v86.i16[0] = vaddlv_u8(v86), v86.u32[0] > 1uLL))
    {
      v85 = std::__next_prime(v85);
    }
    else
    {
      v87 = 1 << -(char)__clz(v85 - 1);
      if (v85 >= 2)
        v85 = v87;
    }
    if (prime <= v85)
      prime = v85;
    if (prime < (unint64_t)v83)
      goto LABEL_103;
  }
LABEL_104:
  if (v10)
  {
    v88 = 4;
    v89 = v2043;
    do
    {
      v90 = geo::codec::VectorTile::daVinciMeshes(*v2048);
      v91 = *(_DWORD *)(v90 + v88);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v2101, v91, (_DWORD *)(v90 + v88))+ 5) = v91;
      v88 += 64;
      --v89;
    }
    while (v89);
  }
  v92 = v2100;
  v2100[1] = 0;
  v2100[0] = 0;
  v2099 = v2100;
  v93 = geo::codec::VectorTile::explicitTextureDataCount(*v2048);
  v94 = geo::codec::VectorTile::explicitTextureData(*v2048);
  if (v93)
  {
    v95 = v94;
    v96 = v93;
    do
    {
      *(_DWORD *)buf = *(_DWORD *)v95;
      *(_DWORD *)&buf[4] = *(_DWORD *)v95 + *(unsigned __int16 *)(v95 + 4);
      *(_QWORD *)&buf[8] = v95;
      *(_DWORD *)&buf[24] = 0;
      geo::range_map<unsigned int,md::DaVinciGroundTileData::TextureMappingData,std::less<unsigned int>,std::allocator<std::pair<gm::Range<unsigned int> const,md::DaVinciGroundTileData::TextureMappingData>>>::insert((uint64_t *)&v2099, (uint64_t)buf);
      v95 += 16;
      --v96;
    }
    while (v96);
  }
  v97 = geo::codec::VectorTile::directionalXYTextureDataCount(*v2048);
  v98 = geo::codec::VectorTile::directionalXYTextureData(*v2048);
  if (v97)
  {
    v99 = v97;
    v100 = (_OWORD *)(v98 + 8);
    do
    {
      v101 = *v100;
      *(_DWORD *)buf = *((_DWORD *)v100 - 2);
      *(_DWORD *)&buf[4] = *((_DWORD *)v100 - 2) + *((unsigned __int16 *)v100 - 2);
      *(_OWORD *)&buf[8] = v101;
      *(_DWORD *)&buf[24] = 1;
      geo::range_map<unsigned int,md::DaVinciGroundTileData::TextureMappingData,std::less<unsigned int>,std::allocator<std::pair<gm::Range<unsigned int> const,md::DaVinciGroundTileData::TextureMappingData>>>::insert((uint64_t *)&v2099, (uint64_t)buf);
      v100 = (_OWORD *)((char *)v100 + 24);
      --v99;
    }
    while (v99);
  }
  v102 = (void *)geo::codec::VectorTile::daVinciIndexCount(*v2048);
  v103 = v102;
  if (v9)
  {
    v102 = operator new(12 * v9);
    v2062 = v102;
  }
  else
  {
    v2062 = 0;
  }
  v2097 = 0;
  v2096 = 0;
  v2098 = 0;
  v2093 = 0;
  v2092 = 0;
  v2094 = 0;
  v2095 = geo::codec::Allocator::instance((geo::codec::Allocator *)v102);
  v2091 = 0;
  v2089 = 0u;
  *(_OWORD *)v2090 = 0u;
  if (v9)
  {
    v106 = v2064 + 1180;
    v107 = *(int8x16_t *)(v2064 + 1180);
    v108 = *(float32x2_t *)(v2064 + 1196);
    v109 = v9;
    v110 = (float32x2_t *)((char *)v2062 + 4);
    v111 = (_QWORD *)(v2059.i64[0] + 4);
    do
    {
      v104.i32[0] = *((_DWORD *)v111 - 1);
      v112.i32[0] = v104.i32[0];
      v113 = *(float32x2_t *)v111;
      v111 = (_QWORD *)((char *)v111 + 12);
      *(float32x2_t *)v105.i8 = v113;
      v110[-1].i32[1] = v104.i32[0];
      v112.i32[1] = v113.i32[0];
      *v110 = v113;
      v110 = (float32x2_t *)((char *)v110 + 12);
      v112.i64[1] = __PAIR64__(v107.u32[3], v113.u32[1]);
      v114 = (float32x4_t)v107;
      v114.i32[3] = v104.i32[0];
      v104 = vextq_s8(vextq_s8(v104, v104, 4uLL), v105, 0xCuLL);
      v104.i32[3] = v104.i32[0];
      v107 = vbslq_s8((int8x16_t)vcgtq_f32(v114, v112), v104, v107);
      *(int8x16_t *)v106 = v107;
      v108 = vmaxnm_f32(v108, v113);
      *(float32x2_t *)(v106 + 16) = v108;
      --v109;
    }
    while (v109);
  }
  memset(buf, 0, 24);
  v2087[0] = *(_WORD *)(v2064 + 168);
  v2088 = *(_QWORD *)(v2064 + 172);
  md::debugString<geo::QuadTile>(v2109, v2087);
  if (SHIBYTE(v2110) >= 0)
    v115 = v2109;
  else
    v115 = (void **)v2109[0];
  v116 = strlen((const char *)v115);
  if (v116 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v117 = v116;
  v118 = (uint16x4_t *)v11;
  if (v116 >= 0x17)
  {
    v120 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v120 = v116 | 7;
    v121 = v120 + 1;
    p_dst = operator new(v120 + 1);
    *(_QWORD *)&v2125 = v121 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    __dst.n128_u64[1] = v117;
    a3 = v2058.i64[0];
    goto LABEL_129;
  }
  BYTE7(v2125) = v116;
  p_dst = &__dst;
  if (v116)
LABEL_129:
    memmove(p_dst, v115, v117);
  *((_BYTE *)p_dst + v117) = 0;
  md::DaVinciGroundTileData::_buildNormals((uint64_t)v2062, v9, v103, (unsigned int **)&v2104, v118, v2101, (unint64_t **)&v2096, &v2092, (float)(v14+ (float)((float)(v16 - v14)* fminf(fmaxf((float)((float)(v2054 & 0x3F) - (float)v2053)/ (float)((float)v2052 - (float)v2053), 0.0), 1.0)))* 0.017453, (std::vector<unsigned int> *)buf, v2064 + 928,
    (uint64_t)&__dst,
    (gdc::DCEL **)&v2089);
  if (SBYTE7(v2125) < 0)
  {
    operator delete((void *)__dst.n128_u64[0]);
    if ((SHIBYTE(v2110) & 0x80000000) == 0)
      goto LABEL_132;
  }
  else if ((SHIBYTE(v2110) & 0x80000000) == 0)
  {
    goto LABEL_132;
  }
  operator delete(v2109[0]);
LABEL_132:
  md::DaVinciGroundTileData::_buildIndexBuffer((char **)&__dst, (uint64_t)"DV Tile Index Data", a3, (uint64_t *)buf);
  v122 = __dst;
  __dst = 0uLL;
  v123 = *(std::__shared_weak_count **)(v2064 + 872);
  *(__n128 *)(v2064 + 864) = v122;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldaxr(p_shared_owners);
    while (__stlxr(v125 - 1, p_shared_owners));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)__dst.n128_u64[1];
  if (__dst.n128_u64[1])
  {
    v127 = (unint64_t *)(__dst.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  v2153 = 0;
  v2151 = 0u;
  v2152 = 0u;
  v2149 = 0u;
  v2150 = 0u;
  v2085 = 0;
  v2084 = 0;
  v2086 = 0;
  if ((_DWORD)v2040)
  {
    v129 = (char *)operator new(8 * v2043);
    v2086 = &v129[8 * v2043];
    v130 = v2086;
    v2084 = v129;
    v2085 = v2086;
  }
  else
  {
    v129 = 0;
    v130 = 0;
  }
  __dst.n128_u64[0] = (unint64_t)&v2149;
  v2109[0] = &v2147;
  v2147 = 0;
  v2148 = 0;
  v131 = geo::codec::VectorTile::daVinciMeshCount(*v2048);
  v132 = v131;
  v133 = v131;
  v134 = (v130 - v129) >> 3;
  if (v131 <= v134)
  {
    if (v131 < v134)
      v2085 = &v129[8 * v131];
  }
  else
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)&v2084, v131 - v134);
  }
  if (!v132)
    goto LABEL_219;
  *(_QWORD *)v2080 = &v2096;
  *(_QWORD *)buf = v2109;
  *(_QWORD *)&buf[8] = &__dst;
  *(_QWORD *)&buf[16] = v2080;
  v135 = (char *)operator new(4uLL);
  *(_DWORD *)v135 = 0;
  v136 = v135 + 4;
  v137 = geo::codec::VectorTile::daVinciMeshes(*v2048);
  v138 = *(unsigned int *)(v137 + 4);
  v139 = *(_DWORD *)(v137 + 8);
  v140 = v139 + v138;
  v2075.n128_u32[0] = *(_DWORD *)(v137 + 4);
  v2075.n128_u32[1] = v139 + v138;
  if (*(_QWORD *)(v137 + 40))
    v141 = 2;
  else
    v141 = *(_QWORD *)(v137 + 32) != 0;
  if (v139)
    v143 = *(_DWORD *)(**(_QWORD **)v2080 + 8 * (v140 - 1) + 4) - *(_DWORD *)(**(_QWORD **)v2080 + 8 * v138);
  else
    v143 = 0;
  v142 = *((unsigned int *)v2109[0] + v141);
  *(_QWORD *)v2084 = v142 | ((unint64_t)(v143 + v142) << 32);
  if (v132 < 2)
  {
    v171 = 0;
LABEL_213:
    v172 = v135;
    do
    {
      v173 = geo::codec::VectorTile::daVinciMeshes(*v2048);
      v174 = *(_DWORD *)v172;
      v172 += 4;
      v175 = *(_DWORD *)(v173 + ((unint64_t)v174 << 6) + 8)
           + *(_DWORD *)(v173 + ((unint64_t)v174 << 6) + 4);
      if (v140 <= v175)
        v140 = v175;
      v2075.n128_u32[1] = v140;
    }
    while (v172 != v136);
    goto LABEL_217;
  }
  v2060.i8[0] = v141;
  v2059.i32[0] = 0;
  v144 = 1;
  v145 = v135 + 4;
  do
  {
    v148 = geo::codec::VectorTile::daVinciMeshes(*v2048) + (v144 << 6);
    if (*(_QWORD *)(v148 + 40))
      v149 = 2;
    else
      v149 = *(_QWORD *)(v148 + 32) != 0;
    v2063.n128_u32[0] = v149;
    v150 = *(unsigned int *)(v148 + 4);
    v2065.n128_u32[0] = *(_DWORD *)(v148 + 8);
    v151 = v135;
    if (v135 != v136)
    {
      do
      {
        while (1)
        {
          v152 = geo::codec::VectorTile::daVinciMeshes(*v2048);
          if (*(_DWORD *)(v152 + ((unint64_t)*(unsigned int *)v151 << 6) + 8)
             + *(_DWORD *)(v152 + ((unint64_t)*(unsigned int *)v151 << 6) + 4) <= v150)
            break;
          v151 += 4;
          if (v151 == v136)
            goto LABEL_175;
        }
        v153 = v136 - (v151 + 4);
        if (v136 != v151 + 4)
          memmove(v151, v151 + 4, v136 - (v151 + 4));
        v136 -= 4;
      }
      while (v151 != &v151[v153]);
    }
LABEL_175:
    v154 = v2065.n128_u32[0] + v150;
    if (v135 == v151)
    {
      md::DaVinciGroundTileData::_planTileMeshVertexTransfers(std::shared_ptr<geo::codec::VectorTile> const&,std::vector<gm::Range<unsigned int>> const&,std::vector<gm::Range<unsigned int>>&,std::vector<md::DaVinciGroundTileData::TransferDetails> *,unsigned int *)::$_2::operator()((uint64_t)buf, (unsigned int *)&v2075, v2060.u8[0], v2059.i32[0]);
      v2075.n128_u32[0] = v150;
      v155 = v2065.n128_u32[0] + v150;
      v2060.i8[0] = v2063.n128_u8[0];
      v2059.i32[0] = v144;
    }
    else
    {
      v155 = v2075.n128_u32[1];
      if (v2075.n128_u32[1] <= v154)
        v155 = v2065.n128_u32[0] + v150;
    }
    v2075.n128_u32[1] = v155;
    if (v151 < v145)
    {
      *(_DWORD *)v151 = v144;
      v136 = v151 + 4;
      goto LABEL_200;
    }
    LODWORD(v2061) = v2065.n128_u32[0] + v150;
    v156 = v133;
    v157 = v136 - v135;
    v158 = (v136 - v135) >> 2;
    v159 = v158 + 1;
    if ((unint64_t)(v158 + 1) >> 62)
      abort();
    if ((v145 - v135) >> 1 > v159)
      v159 = (v145 - v135) >> 1;
    if ((unint64_t)(v145 - v135) >= 0x7FFFFFFFFFFFFFFCLL)
      v160 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v160 = v159;
    if (v160)
    {
      if (v160 >> 62)
        goto LABEL_2905;
      v161 = operator new(4 * v160);
    }
    else
    {
      v161 = 0;
    }
    v162 = &v161[4 * v158];
    *(_DWORD *)v162 = v144;
    v136 = v162 + 4;
    if (v135 == v151)
    {
      v133 = v156;
    }
    else
    {
      v163 = v151 - 4 - v135;
      if (v163 < 0xBC
        || &v161[v157 - 4 - (v163 & 0xFFFFFFFFFFFFFFFCLL)] > &v161[v157 - 4]
        || &v151[-(v163 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v151 - 4
        || (unint64_t)(v151 - &v161[v157]) < 0x20)
      {
        v164 = v151;
        v133 = v156;
      }
      else
      {
        v166 = (v163 >> 2) + 1;
        v164 = &v151[-4 * (v166 & 0x7FFFFFFFFFFFFFF8)];
        v167 = &v161[4 * v158 - 16];
        v168 = v151 - 16;
        v169 = v166 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v170 = *(_OWORD *)v168;
          *(v167 - 1) = *((_OWORD *)v168 - 1);
          *v167 = v170;
          v167 -= 2;
          v168 -= 32;
          v169 -= 8;
        }
        while (v169);
        v162 -= 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
        v133 = v156;
        if (v166 == (v166 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_197;
      }
      do
      {
        v165 = *((_DWORD *)v164 - 1);
        v164 -= 4;
        *((_DWORD *)v162 - 1) = v165;
        v162 -= 4;
      }
      while (v164 != v135);
    }
LABEL_197:
    v145 = &v161[4 * v160];
    v154 = v2061;
    if (v135)
      operator delete(v135);
    v135 = v162;
    v92 = v2100;
LABEL_200:
    if ((_DWORD)v150 != v2075.n128_u32[0])
    {
      v146 = *(_DWORD *)(**(_QWORD **)v2080 + 8 * (v150 - 1) + 4)
           - *(_DWORD *)(**(_QWORD **)v2080 + 8 * v2075.n128_u32[0]);
      v147 = v2065.n128_u32[0];
      if (!v2065.n128_u32[0])
        goto LABEL_164;
LABEL_163:
      v147 = *(_DWORD *)(**(_QWORD **)v2080 + 8 * (v154 - 1) + 4) - *(_DWORD *)(**(_QWORD **)v2080 + 8 * v150);
      goto LABEL_164;
    }
    v146 = 0;
    v147 = v2065.n128_u32[0];
    if (v2065.n128_u32[0])
      goto LABEL_163;
LABEL_164:
    *((_QWORD *)v2084 + v144++) = (v146 + *((_DWORD *)v2109[0] + v2063.n128_u32[0])) | ((unint64_t)(v147 + v146 + *((_DWORD *)v2109[0] + v2063.n128_u32[0])) << 32);
  }
  while (v144 != v133);
  if (v135 != v136)
  {
    v140 = v2075.n128_u32[1];
    LOBYTE(v141) = v2060.i8[0];
    v171 = v2059.i32[0];
    goto LABEL_213;
  }
  LOBYTE(v141) = v2060.i8[0];
  v171 = v2059.i32[0];
LABEL_217:
  md::DaVinciGroundTileData::_planTileMeshVertexTransfers(std::shared_ptr<geo::codec::VectorTile> const&,std::vector<gm::Range<unsigned int>> const&,std::vector<gm::Range<unsigned int>>&,std::vector<md::DaVinciGroundTileData::TransferDetails> *,unsigned int *)::$_2::operator()((uint64_t)buf, (unsigned int *)&v2075, v141, v171);
  a3 = v2058.i64[0];
  if (v135)
    operator delete(v135);
LABEL_219:
  if (*((_BYTE *)*v2048 + 1956) != 1)
  {
    v256 = operator new(0xF8uLL);
    v256[1] = 0;
    v256[2] = 0;
    *v256 = &off_1E42E0608;
    v257 = ggl::BufferData::BufferData((uint64_t)(v256 + 3), 8, 0, 0, 6, v2147);
    v256[29] = "DV Ground Tile Textured Vertex Data";
    v256[30] = &ggl::DaVinci::texturedCompressedVboReflection;
    v256[3] = &off_1E42B8320;
    v256[28] = &unk_1E42B8340;
    *(_QWORD *)(v2064 + 880) = v257;
    v258 = *(std::__shared_weak_count **)(v2064 + 888);
    *(_QWORD *)(v2064 + 888) = v256;
    if (v258)
    {
      v259 = (unint64_t *)&v258->__shared_owners_;
      do
        v260 = __ldaxr(v259);
      while (__stlxr(v260 - 1, v259));
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
        std::__shared_weak_count::__release_weak(v258);
      }
    }
    v261 = operator new(0xF8uLL);
    v261[1] = 0;
    v261[2] = 0;
    *v261 = &off_1E42E0640;
    v262 = ggl::BufferData::BufferData((uint64_t)(v261 + 3), 8, 0, 0, 6, HIDWORD(v2147));
    v261[29] = "DV Ground Tile DualElevation Vertex Data";
    v261[30] = &ggl::DaVinci::elevationCompressedVboReflection;
    v261[3] = &off_1E42B8360;
    v261[28] = &unk_1E42B8380;
    *(_QWORD *)(v2064 + 896) = v262;
    v263 = *(std::__shared_weak_count **)(v2064 + 904);
    *(_QWORD *)(v2064 + 904) = v261;
    if (v263)
    {
      v264 = (unint64_t *)&v263->__shared_owners_;
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    v266 = operator new(0xF8uLL);
    v266[1] = 0;
    v266[2] = 0;
    *v266 = &off_1E42E0598;
    v267 = ggl::BufferData::BufferData((uint64_t)(v266 + 3), 12, 0, 0, 6, v2148);
    v266[29] = "DV Ground Tile Distance Vertex Data";
    v266[30] = &ggl::DaVinci::distanceCompressedVboReflection;
    v266[3] = &off_1E42B82E0;
    v266[28] = &unk_1E42B8300;
    *(_QWORD *)(v2064 + 912) = v267;
    v269 = *(std::__shared_weak_count **)(v2064 + 920);
    *(_QWORD *)(v2064 + 920) = v266;
    if (v269)
    {
      v270 = (unint64_t *)&v269->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v272 = v2147;
    if (!(_DWORD)v2147)
      goto LABEL_323;
    v273 = operator new(0xE0uLL);
    v273[1] = 0;
    v273[2] = 0;
    *v273 = &off_1E42DF488;
    v274 = ggl::BufferData::BufferData((uint64_t)(v273 + 3), qword_1EE5517E8, 3, 0, 6, v272);
    v273[3] = &off_1E42B6F28;
    *(_QWORD *)(v2064 + 720) = v274;
    v275 = *(std::__shared_weak_count **)(v2064 + 728);
    *(_QWORD *)(v2064 + 728) = v273;
    if (v275)
    {
      v276 = (unint64_t *)&v275->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v278 = operator new(0xE0uLL);
    v278[1] = 0;
    v278[2] = 0;
    *v278 = &off_1E42DF4C0;
    v279 = ggl::BufferData::BufferData((uint64_t)(v278 + 3), qword_1EE5517A8, 3, 0, 6, v2147);
    v278[3] = &off_1E42B6F48;
    *(_QWORD *)(v2064 + 768) = v279;
    v280 = *(std::__shared_weak_count **)(v2064 + 776);
    *(_QWORD *)(v2064 + 776) = v278;
    if (v280)
    {
      v281 = (unint64_t *)&v280->__shared_owners_;
      do
        v282 = __ldaxr(v281);
      while (__stlxr(v282 - 1, v281));
      if (!v282)
      {
        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
        std::__shared_weak_count::__release_weak(v280);
      }
    }
    v283 = operator new(0xE0uLL);
    v283[1] = 0;
    v283[2] = 0;
    *v283 = &off_1E42DF418;
    v284 = ggl::BufferData::BufferData((uint64_t)(v283 + 3), qword_1EE551828, 3, 0, 6, v2147);
    v283[3] = &off_1E42B6EE8;
    *(_QWORD *)(v2064 + 816) = v284;
    v285 = *(std::__shared_weak_count **)(v2064 + 824);
    *(_QWORD *)(v2064 + 824) = v283;
    if (!v285)
      goto LABEL_323;
    v286 = (unint64_t *)&v285->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
      v288 = HIDWORD(v2147);
      if (HIDWORD(v2147))
      {
LABEL_324:
        v289 = operator new(0xE0uLL);
        v289[1] = 0;
        v289[2] = 0;
        *v289 = &off_1E42DF488;
        v290 = ggl::BufferData::BufferData((uint64_t)(v289 + 3), qword_1EE5517E8, 3, 0, 6, v288);
        v289[3] = &off_1E42B6F28;
        *(_QWORD *)(v2064 + 736) = v290;
        v291 = *(std::__shared_weak_count **)(v2064 + 744);
        *(_QWORD *)(v2064 + 744) = v289;
        if (v291)
        {
          v292 = (unint64_t *)&v291->__shared_owners_;
          do
            v293 = __ldaxr(v292);
          while (__stlxr(v293 - 1, v292));
          if (!v293)
          {
            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
            std::__shared_weak_count::__release_weak(v291);
          }
        }
        v294 = operator new(0xE0uLL);
        v294[1] = 0;
        v294[2] = 0;
        *v294 = &off_1E42DF4C0;
        v295 = ggl::BufferData::BufferData((uint64_t)(v294 + 3), qword_1EE5517A8, 3, 0, 6, HIDWORD(v2147));
        v294[3] = &off_1E42B6F48;
        *(_QWORD *)(v2064 + 784) = v295;
        v296 = *(std::__shared_weak_count **)(v2064 + 792);
        *(_QWORD *)(v2064 + 792) = v294;
        if (v296)
        {
          v297 = (unint64_t *)&v296->__shared_owners_;
          do
            v298 = __ldaxr(v297);
          while (__stlxr(v298 - 1, v297));
          if (!v298)
          {
            ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
            std::__shared_weak_count::__release_weak(v296);
          }
        }
        v299 = operator new(0xE0uLL);
        v299[1] = 0;
        v299[2] = 0;
        *v299 = &off_1E42DF418;
        v300 = ggl::BufferData::BufferData((uint64_t)(v299 + 3), qword_1EE551828, 3, 0, 6, HIDWORD(v2147));
        v299[3] = &off_1E42B6EE8;
        *(_QWORD *)(v2064 + 832) = v300;
        v301 = *(std::__shared_weak_count **)(v2064 + 840);
        *(_QWORD *)(v2064 + 840) = v299;
        if (v301)
        {
          v302 = (unint64_t *)&v301->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
      }
    }
    else
    {
LABEL_323:
      v288 = HIDWORD(v2147);
      if (HIDWORD(v2147))
        goto LABEL_324;
    }
    v321 = v2148;
    if (v2148)
    {
      v322 = operator new(0xE0uLL);
      v322[1] = 0;
      v322[2] = 0;
      *v322 = &off_1E42DF488;
      v323 = ggl::BufferData::BufferData((uint64_t)(v322 + 3), qword_1EE5517E8, 3, 0, 6, v321);
      v322[3] = &off_1E42B6F28;
      *(_QWORD *)(v2064 + 752) = v323;
      v324 = *(std::__shared_weak_count **)(v2064 + 760);
      *(_QWORD *)(v2064 + 760) = v322;
      if (v324)
      {
        v325 = (unint64_t *)&v324->__shared_owners_;
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
      }
      v327 = operator new(0xE0uLL);
      v327[1] = 0;
      v327[2] = 0;
      *v327 = &off_1E42DF4C0;
      v328 = ggl::BufferData::BufferData((uint64_t)(v327 + 3), qword_1EE5517A8, 3, 0, 6, v2148);
      v327[3] = &off_1E42B6F48;
      *(_QWORD *)(v2064 + 800) = v328;
      v329 = *(std::__shared_weak_count **)(v2064 + 808);
      *(_QWORD *)(v2064 + 808) = v327;
      if (v329)
      {
        v330 = (unint64_t *)&v329->__shared_owners_;
        do
          v331 = __ldaxr(v330);
        while (__stlxr(v331 - 1, v330));
        if (!v331)
        {
          ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
          std::__shared_weak_count::__release_weak(v329);
        }
      }
      v332 = operator new(0xE0uLL);
      v332[1] = 0;
      v332[2] = 0;
      *v332 = &off_1E42DF418;
      v333 = ggl::BufferData::BufferData((uint64_t)(v332 + 3), qword_1EE551828, 3, 0, 6, v2148);
      v332[3] = &off_1E42B6EE8;
      *(_QWORD *)(v2064 + 848) = v333;
      v334 = *(std::__shared_weak_count **)(v2064 + 856);
      *(_QWORD *)(v2064 + 856) = v332;
      if (v334)
      {
        v335 = (unint64_t *)&v334->__shared_owners_;
        do
          v336 = __ldaxr(v335);
        while (__stlxr(v336 - 1, v335));
        if (!v336)
        {
          ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
          std::__shared_weak_count::__release_weak(v334);
        }
      }
    }
    v337 = *(_QWORD *)(v2064 + 880);
    v2083 = 0;
    *(_OWORD *)v2080 = 0uLL;
    v338 = *(_QWORD *)(v337 + 8) * v2147;
    v268.n128_u64[0] = a3;
    v339.n128_u64[0] = a3;
    v339.n128_u64[1] = v337;
    if (v338)
    {
      if (a3 && *(_BYTE *)(v337 + 17) != 2)
      {
        v2063 = v339;
        v2065 = v268;
        v340 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
        if (v2083)
        {
          v352 = *(_QWORD *)&v2080[16];
          v353 = v2081;
          v268 = v2065;
          v339 = v2063;
          if (v2081 != *(_QWORD *)&v2080[16])
          {
            v354 = *(_QWORD **)&v2080[8];
            v355 = v2082;
            v356 = HIBYTE(v2082);
            if (*(_QWORD *)v2080 && *(_BYTE *)(*(_QWORD *)&v2080[8] + 17) != 2)
            {
              (*(void (**)(__n128, __n128))(**(_QWORD **)v2080 + 64))(v2065, v2063);
              v339 = v2063;
              v268 = v2065;
            }
            if (v355 && !v356)
            {
              v358 = v354[7];
              v357 = v354[8];
              if (v357 == v358)
                v358 = v354[10] - v354[9];
              if (v352 < v358)
                v358 = v352;
              if (v357 <= v353)
                v357 = v353;
              if (v357 == v358)
                v357 = v358 + v354[10] - v354[9];
              v354[7] = v358;
              v354[8] = v357;
            }
          }
        }
        else
        {
          v268 = v2065;
          v339 = v2063;
        }
      }
      else
      {
        v340 = *(_QWORD *)(v337 + 72);
      }
    }
    else
    {
      v340 = 0;
    }
    *(__n128 *)v2080 = v339;
    *(_QWORD *)&v2080[16] = 0;
    v2081 = v338;
    v2083 = v340;
    v2082 = 257;
    v341 = *(_QWORD *)(v2064 + 896);
    v2079 = 0;
    v2075 = 0uLL;
    v342 = *(_QWORD *)(v341 + 8) * HIDWORD(v2147);
    v343.n128_u64[0] = v268.n128_u64[0];
    v343.n128_u64[1] = v341;
    if (v342)
    {
      if (a3 && *(_BYTE *)(v341 + 17) != 2)
      {
        v2063 = v343;
        v2065 = v268;
        v344 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
        if (v2079)
        {
          v359 = v2076;
          v360 = v2077;
          v268 = v2065;
          v343 = v2063;
          if (v2077 != v2076)
          {
            v361 = (_QWORD *)v2075.n128_u64[1];
            v362 = v2078;
            v363 = HIBYTE(v2078);
            if (v2075.n128_u64[0] && *(_BYTE *)(v2075.n128_u64[1] + 17) != 2)
            {
              (*(void (**)(__n128, __n128))(*(_QWORD *)v2075.n128_u64[0] + 64))(v2065, v2063);
              v343 = v2063;
              v268 = v2065;
            }
            if (v362 && !v363)
            {
              v365 = v361[7];
              v364 = v361[8];
              if (v364 == v365)
                v365 = v361[10] - v361[9];
              if (v359 < v365)
                v365 = v359;
              if (v364 <= v360)
                v364 = v360;
              if (v364 == v365)
                v364 = v365 + v361[10] - v361[9];
              v361[7] = v365;
              v361[8] = v364;
            }
          }
        }
        else
        {
          v268 = v2065;
          v343 = v2063;
        }
      }
      else
      {
        v344 = *(_QWORD *)(v341 + 72);
      }
    }
    else
    {
      v344 = 0;
    }
    v2075 = v343;
    v2076 = 0;
    v2077 = v342;
    v2079 = v344;
    v2078 = 257;
    v345 = *(_QWORD *)(v2064 + 912);
    v2074 = 0;
    __b = 0uLL;
    v346 = *(_QWORD *)(v345 + 8) * v2148;
    v347.n128_u64[0] = v268.n128_u64[0];
    v347.n128_u64[1] = v345;
    if (v346)
    {
      if (a3 && *(_BYTE *)(v345 + 17) != 2)
      {
        v2063 = v347;
        v2065 = v268;
        v348 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
        v268 = v2065;
        v347 = v2063;
      }
      else
      {
        v348 = *(_QWORD *)(v345 + 72);
      }
    }
    else
    {
      v348 = 0;
    }
    __b = v347;
    v2071 = 0;
    v2072 = v346;
    v2074 = v348;
    v2073 = 257;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v2146 = 0;
    memset(&v2139[4], 0, 24);
    *(_QWORD *)&v2141[4] = 0;
    v2142 = 0uLL;
    __dst = 0uLL;
    v2136 = 0;
    *((_QWORD *)&v2126 + 1) = 0;
    v2127 = 0uLL;
    v2131 = 0;
    v2132 = 0uLL;
    v2109[1] = 0;
    v2109[0] = 0;
    v2123 = 0;
    v2113 = 0;
    v2114 = 0uLL;
    v2118 = 0;
    v2119 = 0uLL;
    if ((_DWORD)v2147)
    {
      v349 = *(_QWORD *)(v2064 + 720);
      if (v349)
      {
        v350 = *(_QWORD *)(v349 + 8) * v2147;
        if (v350)
        {
          if (a3 && *(_BYTE *)(v349 + 17) != 2)
          {
            v2065 = v268;
            v784 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v2064 + 720), 0, *(_QWORD *)(v349 + 8) * v2147, 1, 1);
            v268 = v2065;
            v351 = v784;
          }
          else
          {
            v351 = *(_QWORD *)(v349 + 72);
          }
        }
        else
        {
          v351 = 0;
        }
        v785.n128_u64[0] = v268.n128_u64[0];
        v785.n128_u64[1] = v349;
        if (*(_QWORD *)&v2139[4])
        {
          v786 = *(_QWORD *)&buf[16];
          v787 = *(_QWORD *)&buf[24];
          if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[16])
          {
            v788 = *(_QWORD **)&buf[8];
            v789 = v2138;
            v790 = HIBYTE(v2138);
            if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
            {
              v2065 = v268;
              v2063 = v785;
              (*(void (**)(void))(**(_QWORD **)buf + 64))();
              v785 = v2063;
              v268 = v2065;
            }
            if (v789 && !v790)
            {
              v792 = v788[7];
              v791 = v788[8];
              if (v791 == v792)
                v792 = v788[10] - v788[9];
              if (v786 < v792)
                v792 = v786;
              if (v791 <= v787)
                v791 = v787;
              if (v791 == v792)
                v791 = v792 + v788[10] - v788[9];
              v788[7] = v792;
              v788[8] = v791;
            }
          }
        }
        *(__n128 *)buf = v785;
        *(_QWORD *)&buf[16] = 0;
        *(_QWORD *)&buf[24] = v350;
        *(_QWORD *)&v2139[4] = v351;
        v2138 = 257;
      }
      v793 = *(_QWORD *)(v2064 + 768);
      if (v793)
      {
        v794 = *(_QWORD *)(v793 + 8) * v2147;
        if (v794)
        {
          if (a3 && *(_BYTE *)(v793 + 17) != 2)
          {
            v2065 = v268;
            v796 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v2064 + 768), 0, *(_QWORD *)(v793 + 8) * v2147, 1, 1);
            v268 = v2065;
            v795 = v796;
          }
          else
          {
            v795 = *(_QWORD *)(v793 + 72);
          }
        }
        else
        {
          v795 = 0;
        }
        v797.n128_u64[0] = v268.n128_u64[0];
        v797.n128_u64[1] = v793;
        if (*((_QWORD *)&v2126 + 1))
        {
          v798 = v2125;
          if (*((_QWORD *)&v2125 + 1) != (_QWORD)v2125)
          {
            v799 = (_QWORD *)__dst.n128_u64[1];
            v800 = v2126;
            v801 = BYTE1(v2126);
            if (__dst.n128_u64[0] && *(_BYTE *)(__dst.n128_u64[1] + 17) != 2)
            {
              v2065 = v268;
              v2063 = v797;
              (*(void (**)(void))(*(_QWORD *)__dst.n128_u64[0] + 64))();
              v797 = v2063;
              v268.n128_u64[0] = v2065.n128_u64[0];
            }
            if (v800 && !v801)
            {
              v803 = v799[7];
              v802 = v799[8];
              if (v802 == v803)
                v803 = v799[10] - v799[9];
              if ((unint64_t)v798 < v803)
                v803 = v798;
              if (v802 <= *((_QWORD *)&v798 + 1))
                v802 = *((_QWORD *)&v798 + 1);
              if (v802 == v803)
                v802 = v803 + v799[10] - v799[9];
              v799[7] = v803;
              v799[8] = v802;
            }
          }
        }
        __dst = v797;
        *(_QWORD *)&v2125 = 0;
        *((_QWORD *)&v2125 + 1) = v794;
        *((_QWORD *)&v2126 + 1) = v795;
        LOWORD(v2126) = 257;
      }
      v804 = *(_QWORD *)(v2064 + 816);
      if (v804)
      {
        v805 = (void **)(*(_QWORD *)(v804 + 8) * v2147);
        if (v805)
        {
          if (a3 && *(_BYTE *)(v804 + 17) != 2)
          {
            v2065.n128_u64[0] = v268.n128_u64[0];
            v807 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v2064 + 816), 0, *(_QWORD *)(v804 + 8) * v2147, 1, 1);
            v268.n128_u64[0] = v2065.n128_u64[0];
            v806 = v807;
          }
          else
          {
            v806 = *(_QWORD *)(v804 + 72);
          }
        }
        else
        {
          v806 = 0;
        }
        v268.n128_u64[1] = v804;
        if (v2113)
        {
          v808 = v2110;
          v809 = v2111;
          if (v2111 != (void **)v2110)
          {
            v810 = v2109[1];
            v811 = v2112;
            v812 = HIBYTE(v2112);
            if (v2109[0] && *((_BYTE *)v2109[1] + 17) != 2)
            {
              v2065 = v268;
              (*(void (**)(void))(*(_QWORD *)v2109[0] + 64))();
              v268 = v2065;
            }
            if (v811 && !v812)
            {
              v814 = (char *)v810[7];
              v813 = (void **)v810[8];
              if (v813 == (void **)v814)
                v814 = (char *)(v810[10] - v810[9]);
              if (v808 < v814)
                v814 = v808;
              if (v813 <= v809)
                v813 = v809;
              if (v813 == (void **)v814)
                v813 = (void **)&v814[v810[10] - v810[9]];
              v810[7] = v814;
              v810[8] = v813;
            }
          }
        }
        *(__n128 *)v2109 = v268;
        v2110 = 0;
        v2111 = v805;
        v2113 = v806;
        v2112 = 257;
      }
    }
    if (HIDWORD(v2147))
    {
      v815 = *(_QWORD *)(v2064 + 736);
      if (v815)
      {
        v816 = *(_QWORD *)(v815 + 8) * HIDWORD(v2147);
        v817.n128_u64[0] = v2058.i64[0];
        if (v816)
        {
          if (v2058.i64[0] && *(_BYTE *)(v815 + 17) != 2)
          {
            v2065.n128_u64[0] = v2058.i64[0];
            v819 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v2058.i64[0]
                                                                                                + 56))(v2058.i64[0], *(_QWORD *)(v2064 + 736), 0, *(_QWORD *)(v815 + 8) * HIDWORD(v2147), 1, 1);
            v817.n128_u64[0] = v2058.i64[0];
            v818 = v819;
          }
          else
          {
            v818 = *(_QWORD *)(v815 + 72);
          }
        }
        else
        {
          v818 = 0;
        }
        v817.n128_u64[1] = v815;
        if (*(_QWORD *)&v2141[4])
        {
          v820 = *(_OWORD *)&v2139[28];
          if (*(_QWORD *)&v2139[36] != *(_QWORD *)&v2139[28])
          {
            v821 = *(_QWORD **)&v2139[20];
            v822 = v2140;
            v823 = BYTE1(v2140);
            if (*(_QWORD *)&v2139[12] && *(_BYTE *)(*(_QWORD *)&v2139[20] + 17) != 2)
            {
              v2065 = v817;
              (*(void (**)(void))(**(_QWORD **)&v2139[12] + 64))();
              v817 = v2065;
            }
            if (v822 && !v823)
            {
              v825 = v821[7];
              v824 = v821[8];
              if (v824 == v825)
                v825 = v821[10] - v821[9];
              if ((unint64_t)v820 < v825)
                v825 = v820;
              if (v824 <= *((_QWORD *)&v820 + 1))
                v824 = *((_QWORD *)&v820 + 1);
              if (v824 == v825)
                v824 = v825 + v821[10] - v821[9];
              v821[7] = v825;
              v821[8] = v824;
            }
          }
        }
        *(__n128 *)&v2139[12] = v817;
        *(_QWORD *)&v2139[28] = 0;
        *(_QWORD *)&v2139[36] = v816;
        *(_QWORD *)&v2141[4] = v818;
        LOWORD(v2140) = 257;
      }
      v826 = *(_QWORD *)(v2064 + 784);
      if (v826)
      {
        v827 = *(_QWORD *)(v826 + 8);
        v828 = v827 * HIDWORD(v2147);
        v829.n128_u64[0] = v2058.i64[0];
        if (v828)
        {
          if (v2058.i64[0] && *(_BYTE *)(v826 + 17) != 2)
          {
            v2065.n128_u64[0] = v2058.i64[0];
            v831 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2058.i64[0]
                                                                                                 + 56))(v2058.i64[0], *(_QWORD *)(v2064 + 784), 0, v827 * HIDWORD(v2147), 1, 1);
            v829.n128_u64[0] = v2058.i64[0];
            v830 = v831;
          }
          else
          {
            v830 = *(_QWORD *)(v826 + 72);
          }
        }
        else
        {
          v830 = 0;
        }
        v829.n128_u64[1] = v826;
        if (v2131)
        {
          v832 = v2128;
          v833 = v2129;
          if (v2129 != v2128)
          {
            v834 = (_QWORD *)v2127.n128_u64[1];
            v835 = v2130;
            v836 = HIBYTE(v2130);
            if (v2127.n128_u64[0] && *(_BYTE *)(v2127.n128_u64[1] + 17) != 2)
            {
              v2065 = v829;
              (*(void (**)(void))(*(_QWORD *)v2127.n128_u64[0] + 64))();
              v829 = v2065;
            }
            if (v835 && !v836)
            {
              v838 = v834[7];
              v837 = v834[8];
              if (v837 == v838)
                v838 = v834[10] - v834[9];
              if (v832 < v838)
                v838 = v832;
              if (v837 <= v833)
                v837 = v833;
              if (v837 == v838)
                v837 = v838 + v834[10] - v834[9];
              v834[7] = v838;
              v834[8] = v837;
            }
          }
        }
        v2127 = v829;
        v2128 = 0;
        v2129 = v828;
        v2131 = v830;
        v2130 = 257;
      }
      v839 = *(_QWORD *)(v2064 + 832);
      if (v839)
      {
        v840 = *(_QWORD *)(v839 + 8);
        v841 = v840 * HIDWORD(v2147);
        v842.n128_u64[0] = v2058.i64[0];
        if (v841)
        {
          if (v2058.i64[0] && *(_BYTE *)(v839 + 17) != 2)
          {
            v2065.n128_u64[0] = v2058.i64[0];
            v844 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2058.i64[0]
                                                                                                 + 56))(v2058.i64[0], *(_QWORD *)(v2064 + 832), 0, v840 * HIDWORD(v2147), 1, 1);
            v842.n128_u64[0] = v2058.i64[0];
            v843 = v844;
          }
          else
          {
            v843 = *(_QWORD *)(v839 + 72);
          }
        }
        else
        {
          v843 = 0;
        }
        v842.n128_u64[1] = v839;
        if (v2118)
        {
          v845 = v2115;
          v846 = v2116;
          if (v2116 != v2115)
          {
            v847 = (_QWORD *)v2114.n128_u64[1];
            v848 = v2117;
            v849 = HIBYTE(v2117);
            if (v2114.n128_u64[0] && *(_BYTE *)(v2114.n128_u64[1] + 17) != 2)
            {
              v2065 = v842;
              (*(void (**)(void))(*(_QWORD *)v2114.n128_u64[0] + 64))();
              v842 = v2065;
            }
            if (v848 && !v849)
            {
              v851 = v847[7];
              v850 = v847[8];
              if (v850 == v851)
                v851 = v847[10] - v847[9];
              if (v845 < v851)
                v851 = v845;
              if (v850 <= v846)
                v850 = v846;
              if (v850 == v851)
                v850 = v851 + v847[10] - v847[9];
              v847[7] = v851;
              v847[8] = v850;
            }
          }
        }
        v2114 = v842;
        v2115 = 0;
        v2116 = v841;
        v2118 = v843;
        v2117 = 257;
      }
    }
    if (v2148)
    {
      v852 = *(_QWORD *)(v2064 + 752);
      if (v852)
      {
        v853 = *(_QWORD *)(v852 + 8) * v2148;
        v854.n128_u64[0] = v2058.i64[0];
        if (v853)
        {
          if (v2058.i64[0] && *(_BYTE *)(v852 + 17) != 2)
          {
            v2065.n128_u64[0] = v2058.i64[0];
            v856 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v2058.i64[0]
                                                                                                + 56))(v2058.i64[0], *(_QWORD *)(v2064 + 752), 0, *(_QWORD *)(v852 + 8) * v2148, 1, 1);
            v854.n128_u64[0] = v2058.i64[0];
            v855 = v856;
          }
          else
          {
            v855 = *(_QWORD *)(v852 + 72);
          }
        }
        else
        {
          v855 = 0;
        }
        v854.n128_u64[1] = v852;
        if (v2146)
        {
          v857 = v2143;
          v858 = v2144;
          if (v2144 != v2143)
          {
            v859 = (_QWORD *)v2142.n128_u64[1];
            v860 = v2145;
            v861 = HIBYTE(v2145);
            if (v2142.n128_u64[0] && *(_BYTE *)(v2142.n128_u64[1] + 17) != 2)
            {
              v2065 = v854;
              (*(void (**)(void))(*(_QWORD *)v2142.n128_u64[0] + 64))();
              v854 = v2065;
            }
            if (v860 && !v861)
            {
              v863 = v859[7];
              v862 = v859[8];
              if (v862 == v863)
                v863 = v859[10] - v859[9];
              if (v857 < v863)
                v863 = v857;
              if (v862 <= v858)
                v862 = v858;
              if (v862 == v863)
                v862 = v863 + v859[10] - v859[9];
              v859[7] = v863;
              v859[8] = v862;
            }
          }
        }
        v2142 = v854;
        v2143 = 0;
        v2144 = v853;
        v2146 = v855;
        v2145 = 257;
      }
      v864 = *(_QWORD *)(v2064 + 800);
      if (v864)
      {
        v865 = *(_QWORD *)(v864 + 8) * v2148;
        v866.n128_u64[0] = v2058.i64[0];
        if (v865)
        {
          if (v2058.i64[0] && *(_BYTE *)(v864 + 17) != 2)
          {
            v2065.n128_u64[0] = v2058.i64[0];
            v868 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v2058.i64[0]
                                                                                                + 56))(v2058.i64[0], *(_QWORD *)(v2064 + 800), 0, *(_QWORD *)(v864 + 8) * v2148, 1, 1);
            v866.n128_u64[0] = v2058.i64[0];
            v867 = v868;
          }
          else
          {
            v867 = *(_QWORD *)(v864 + 72);
          }
        }
        else
        {
          v867 = 0;
        }
        v866.n128_u64[1] = v864;
        if (v2136)
        {
          v869 = v2133;
          v870 = v2134;
          if (v2134 != v2133)
          {
            v871 = (_QWORD *)v2132.n128_u64[1];
            v872 = v2135;
            v873 = HIBYTE(v2135);
            if (v2132.n128_u64[0] && *(_BYTE *)(v2132.n128_u64[1] + 17) != 2)
            {
              v2065 = v866;
              (*(void (**)(void))(*(_QWORD *)v2132.n128_u64[0] + 64))();
              v866 = v2065;
            }
            if (v872 && !v873)
            {
              v875 = v871[7];
              v874 = v871[8];
              if (v874 == v875)
                v875 = v871[10] - v871[9];
              if (v869 < v875)
                v875 = v869;
              if (v874 <= v870)
                v874 = v870;
              if (v874 == v875)
                v874 = v875 + v871[10] - v871[9];
              v871[7] = v875;
              v871[8] = v874;
            }
          }
        }
        v2132 = v866;
        v2133 = 0;
        v2134 = v865;
        v2136 = v867;
        v2135 = 257;
      }
      v876 = *(_QWORD *)(v2064 + 848);
      if (v876)
      {
        v877 = *(_QWORD *)(v876 + 8) * v2148;
        v878.n128_u64[0] = v2058.i64[0];
        if (v877)
        {
          if (v2058.i64[0] && *(_BYTE *)(v876 + 17) != 2)
          {
            v2065.n128_u64[0] = v2058.i64[0];
            v880 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v2058.i64[0]
                                                                                                + 56))(v2058.i64[0], *(_QWORD *)(v2064 + 848), 0, *(_QWORD *)(v876 + 8) * v2148, 1, 1);
            v878.n128_u64[0] = v2058.i64[0];
            v879 = v880;
          }
          else
          {
            v879 = *(_QWORD *)(v876 + 72);
          }
        }
        else
        {
          v879 = 0;
        }
        v878.n128_u64[1] = v876;
        if (v2123)
        {
          v881 = v2120;
          v882 = v2121;
          if (v2121 != v2120)
          {
            v883 = (_QWORD *)v2119.n128_u64[1];
            v884 = v2122;
            v885 = HIBYTE(v2122);
            if (v2119.n128_u64[0] && *(_BYTE *)(v2119.n128_u64[1] + 17) != 2)
            {
              v2065 = v878;
              (*(void (**)(void))(*(_QWORD *)v2119.n128_u64[0] + 64))();
              v878 = v2065;
            }
            if (v884 && !v885)
            {
              v887 = v883[7];
              v886 = v883[8];
              if (v886 == v887)
                v887 = v883[10] - v883[9];
              if (v881 < v887)
                v887 = v881;
              if (v886 <= v882)
                v886 = v882;
              if (v886 == v887)
                v886 = v887 + v883[10] - v883[9];
              v883[7] = v887;
              v883[8] = v886;
            }
          }
        }
        v2119 = v878;
        v2120 = 0;
        v2121 = v877;
        v2123 = v879;
        v2122 = 257;
      }
    }
    v888 = 0;
    v2061 = v2092 + 8;
    v889 = 1.0;
    v890 = 3.0;
    v891 = 0.5;
    v892 = -3.0;
    v893 = -0.5;
    while (1)
    {
      v896 = (char *)&v2149 + 24 * v888;
      v897 = *(unsigned int **)v896;
      v899 = (unsigned int *)*((_QWORD *)v896 + 1);
      v898 = (unsigned int **)(v896 + 8);
      v2058.i64[0] = (uint64_t)v899;
      *(_QWORD *)&v2055 = v888;
      if (v897 != v899)
      {
        v2065.n128_u64[0] = (unint64_t)&v2126 + 48 * v888 + 8;
        v2063.n128_u64[0] = (unint64_t)&v2139[48 * v888 + 4];
        if (!(_BYTE)v888)
        {
          v2056.i64[0] = (uint64_t)*v2048;
          v971 = (char *)v2096;
          do
          {
            v973 = *v897;
            v972 = v897[1];
            v2057 = v897;
            if (v973 >= v972)
            {
              _S0 = _S11;
              _S1 = _S14;
            }
            else
            {
              v974 = v897[2];
              v975 = *(unsigned __int8 *)(v2056.i64[0] + 1956);
              v976 = (uint64_t)v2099;
              v977 = v2083;
              do
              {
                if (v975 == 1)
                {
                  v978 = (float *)((char *)v2062 + 12 * v973);
                  v979 = *v978 * 0.000000156785594;
                  v980 = v978[1] * 0.000000156785594;
                  v981 = v978[2] * 0.000000157313035;
                  switch(*(_BYTE *)(v2064 + 168))
                  {
                    case 0:
                      v982 = v980 / v979;
                      v983 = v981 / v979;
                      if (v980 / v979 < 0.0)
                        goto LABEL_1476;
                      goto LABEL_1478;
                    case 1:
                      v982 = -v979 / v980;
                      goto LABEL_1472;
                    case 2:
                      v982 = -v979 / v981;
                      v1017 = -v980;
                      goto LABEL_1475;
                    case 3:
                      v982 = v981 / v979;
                      v983 = v980 / v979;
                      if (v982 >= 0.0)
                        goto LABEL_1478;
                      goto LABEL_1476;
                    case 4:
                      v982 = v981 / v980;
                      v981 = -v979;
LABEL_1472:
                      v983 = v981 / v980;
                      if (v982 >= 0.0)
                        goto LABEL_1478;
                      goto LABEL_1476;
                    case 5:
                      v982 = -v980 / v981;
                      v1017 = -v979;
LABEL_1475:
                      v983 = v1017 / v981;
                      if (v982 >= 0.0)
                        goto LABEL_1478;
LABEL_1476:
                      v1018 = v889 + sqrt(v889 + v982 * v892) * v893;
                      break;
                    default:
                      v982 = 0.0;
                      v983 = 0.0;
LABEL_1478:
                      v1018 = sqrt(v889 + v982 * v890) * v891;
                      break;
                  }
                  _NF = v983 < 0.0;
                  v1019 = v889 + sqrt(v889 + v983 * v892) * v893;
                  v1020 = sqrt(v889 + v983 * v890) * v891;
                  if (_NF)
                    v1020 = v1019;
                  v1022 = *(_DWORD *)(v2064 + 172);
                  v1021 = *(_DWORD *)(v2064 + 176);
                  v1023 = v889 / (double)(1 << *(_BYTE *)(v2064 + 169));
                  v1024 = (double)v1021 * v1023;
                  v1025 = (double)(v1021 + 1) * v1023;
                  v1026 = (double)v1022 * v1023;
                  v1027 = (double)(v1022 + 1) * v1023;
                  if (v1025 < v1024 || v1027 < v1026)
                  {
                    v1029 = v92;
                    v1030 = v976;
                    memset_pattern16(&v2107, &unk_19FFB63B0, 0x10uLL);
                    v976 = v1030;
                    v92 = v1029;
                    v893 = -0.5;
                    v892 = -3.0;
                    v891 = 0.5;
                    v890 = 3.0;
                    v889 = 1.0;
                    v1031 = v2107;
                    v1032 = *(double *)&v2108;
                  }
                  else
                  {
                    v1031 = (v1018 - v1024) / (v1025 - v1024);
                    v1032 = (v1020 - v1026) / (v1027 - v1026);
                  }
                  v1033 = v1032;
                  _S0 = v1031;
                  _S1 = 1.0 - v1033;
                }
                else
                {
                  _S0 = 0.0;
                  if ((_QWORD **)v976 == v92)
                    goto LABEL_1437;
                  v984 = 0;
                  v985 = (_QWORD *)v976;
                  do
                  {
                    v986 = (_QWORD *)v985[1];
                    if (v986)
                    {
                      do
                      {
                        v987 = v986;
                        v986 = (_QWORD *)*v986;
                      }
                      while (v986);
                    }
                    else
                    {
                      do
                      {
                        v987 = (_QWORD *)v985[2];
                        _ZF = *v987 == (_QWORD)v985;
                        v985 = v987;
                      }
                      while (!_ZF);
                    }
                    ++v984;
                    v985 = v987;
                  }
                  while (v987 != v92);
                  v988 = (_QWORD *)v976;
                  do
                  {
                    v989 = v984 >> 1;
                    v990 = v988;
                    if (v984 != 1)
                    {
                      v992 = v984 >> 1;
                      v993 = v988;
                      do
                      {
                        v994 = (_QWORD *)v993[1];
                        if (v994)
                        {
                          do
                          {
                            v990 = v994;
                            v994 = (_QWORD *)*v994;
                          }
                          while (v994);
                        }
                        else
                        {
                          do
                          {
                            v990 = (_QWORD *)v993[2];
                            _ZF = *v990 == (_QWORD)v993;
                            v993 = v990;
                          }
                          while (!_ZF);
                        }
                        v993 = v990;
                        v507 = v992-- <= 1;
                      }
                      while (!v507);
                    }
                    if (v973 >= *((unsigned int *)v990 + 9))
                    {
                      v991 = (_QWORD *)v990[1];
                      if (v991)
                      {
                        do
                        {
                          v988 = v991;
                          v991 = (_QWORD *)*v991;
                        }
                        while (v991);
                      }
                      else
                      {
                        do
                        {
                          v988 = (_QWORD *)v990[2];
                          _ZF = *v988 == (_QWORD)v990;
                          v990 = v988;
                        }
                        while (!_ZF);
                      }
                      v989 = v984 + ~v989;
                    }
                    v984 = v989;
                  }
                  while (v989);
                  if (v988 == v92)
                  {
LABEL_1437:
                    _S1 = 0.0;
                  }
                  else
                  {
                    v995 = *((unsigned int *)v988 + 8);
                    v996 = *((unsigned int *)v988 + 9);
                    v997 = v973 < v995 || v973 >= v996;
                    _S1 = 0.0;
                    if (!v997)
                    {
                      v998 = 0;
                      v999 = (_QWORD *)v976;
                      do
                      {
                        v1000 = (_QWORD *)v999[1];
                        if (v1000)
                        {
                          do
                          {
                            v1001 = v1000;
                            v1000 = (_QWORD *)*v1000;
                          }
                          while (v1000);
                        }
                        else
                        {
                          do
                          {
                            v1001 = (_QWORD *)v999[2];
                            _ZF = *v1001 == (_QWORD)v999;
                            v999 = v1001;
                          }
                          while (!_ZF);
                        }
                        ++v998;
                        v999 = v1001;
                      }
                      while (v1001 != v92);
                      v1002 = (_QWORD *)v976;
                      do
                      {
                        v1003 = v998 >> 1;
                        v1004 = v1002;
                        if (v998 != 1)
                        {
                          v1006 = v998 >> 1;
                          v1007 = v1002;
                          do
                          {
                            v1008 = (_QWORD *)v1007[1];
                            if (v1008)
                            {
                              do
                              {
                                v1004 = v1008;
                                v1008 = (_QWORD *)*v1008;
                              }
                              while (v1008);
                            }
                            else
                            {
                              do
                              {
                                v1004 = (_QWORD *)v1007[2];
                                _ZF = *v1004 == (_QWORD)v1007;
                                v1007 = v1004;
                              }
                              while (!_ZF);
                            }
                            v1007 = v1004;
                            v507 = v1006-- <= 1;
                          }
                          while (!v507);
                        }
                        if (v973 >= *((unsigned int *)v1004 + 9))
                        {
                          v1005 = (_QWORD *)v1004[1];
                          if (v1005)
                          {
                            do
                            {
                              v1002 = v1005;
                              v1005 = (_QWORD *)*v1005;
                            }
                            while (v1005);
                          }
                          else
                          {
                            do
                            {
                              v1002 = (_QWORD *)v1004[2];
                              _ZF = *v1002 == (_QWORD)v1004;
                              v1004 = v1002;
                            }
                            while (!_ZF);
                          }
                          v1003 = v998 + ~v1003;
                        }
                        v998 = v1003;
                      }
                      while (v1003);
                      if (v1002 == v92
                        || (v973 >= *((unsigned int *)v1002 + 8)
                          ? (v1009 = v973 >= *((unsigned int *)v1002 + 9))
                          : (v1009 = 1),
                            v1009))
                      {
                        v1002 = v92;
                      }
                      v1010 = *((_DWORD *)v1002 + 14);
                      if (v1010)
                      {
                        _S0 = _S11;
                        _S1 = _S14;
                        if (v1010 == 1)
                        {
                          v1011 = *((float *)v1002 + 12);
                          v1012 = *((float *)v1002 + 13);
                          v1013 = (float *)((char *)v2062 + 12 * v973);
                          v1014 = *v1013 - *((float *)v1002 + 10);
                          v1015 = 1.0 / (float)((float)(v1011 * v1011) + (float)(v1012 * v1012));
                          v1016 = v1013[1] - *((float *)v1002 + 11);
                          _S0 = (float)-(float)((float)(v1016 * v1011) - (float)(v1014 * v1012)) * v1015;
                          _S1 = (float)((float)(v1014 * v1011) + (float)(v1016 * v1012)) * v1015;
                        }
                      }
                      else
                      {
                        v1055 = (float *)(*(_QWORD *)(v1002[5] + 8) + 8 * (v973 - *(_DWORD *)v1002[5]));
                        _S0 = *v1055;
                        _S1 = v1055[1];
                      }
                    }
                  }
                }
                v1034 = &v971[8 * v973];
                v1036 = *(unsigned int *)v1034;
                v1035 = *((unsigned int *)v1034 + 1);
                if (v1036 < v1035)
                {
                  v1037 = (float *)((char *)v2062 + 12 * v973);
                  v1038 = *(_QWORD *)v2065.n128_u64[0];
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            H3, S1
                  }
                  v1041 = *(_QWORD *)v2063.n128_u64[0];
                  v1042 = v1035 - v1036;
                  v1043 = (float *)(v2061 + 12 * v1036);
                  do
                  {
                    v1044 = (int)(float)(v1037[1] * 16804.0);
                    v1045 = *((_DWORD *)v1037 + 2);
                    v1046 = v977 + 8 * v974;
                    *(_WORD *)v1046 = (int)(float)(*v1037 * 16804.0);
                    *(_WORD *)(v1046 + 2) = v1044;
                    *(_DWORD *)(v1046 + 4) = v1045;
                    v1047 = *(v1043 - 2);
                    v1048 = *(v1043 - 1);
                    v1049 = *v1043;
                    v1043 += 3;
                    _S4 = (float)((float)(v1047 * 0.28126) / (float)(v1049 + 1.0)) + 0.5;
                    _S5 = (float)((float)(v1048 * 0.28126) / (float)(v1049 + 1.0)) + 0.5;
                    __asm
                    {
                      FCVT            H4, S4
                      FCVT            H5, S5
                    }
                    v1052 = 4 * v974;
                    v1053 = (_WORD *)(v1038 + v1052);
                    *v1053 = LOWORD(_S4);
                    v1053[1] = LOWORD(_S5);
                    v1054 = (_WORD *)(v1041 + v1052);
                    *v1054 = _H2;
                    v1054[1] = _H3;
                    ++v974;
                    --v1042;
                  }
                  while (v1042);
                }
                ++v973;
                _S14 = _S1;
                _S11 = _S0;
              }
              while (v973 != v972);
            }
            v897 = v2057 + 5;
            _S14 = _S1;
            _S11 = _S0;
          }
          while (v2057 + 5 != (unsigned int *)v2058.i64[0]);
          goto LABEL_1338;
        }
        if (v888 == 1)
        {
          v2058.i64[0] = (uint64_t)(&v2113 + 6 * v888);
          v2056.i64[0] = (uint64_t)v898;
          do
          {
            v914 = geo::codec::VectorTile::daVinciMeshes(*v2048);
            v915 = *v897;
            v916 = v897[1];
            v2057 = v897;
            v889 = 1.0;
            v890 = 3.0;
            v891 = 0.5;
            v892 = -3.0;
            v893 = -0.5;
            if (v915 < v916)
            {
              v917 = *(_QWORD *)(v914 + ((unint64_t)v897[4] << 6) + 32);
              v918 = v897[2];
              v919 = *((unsigned __int8 *)*v2048 + 1956);
              v920 = (char *)v2096;
              v921 = v2079;
              v922 = v915;
              do
              {
                _S9 = *(_DWORD *)(v917 + 4 * (v922 - v915));
                v924 = (float *)((char *)v2062 + 12 * v922);
                v926 = *v924;
                v925 = v924[1];
                v927 = v924[2];
                _H0 = 0;
                _H1 = 0;
                if (v919 == 1)
                {
                  v930 = v926 * 0.000000156785594;
                  v931 = v925 * 0.000000156785594;
                  v932 = v927 * 0.000000157313035;
                  switch(*(_BYTE *)(v2064 + 168))
                  {
                    case 0:
                      v933 = v931 / v930;
                      v934 = v932 / v930;
                      if (v931 / v930 < 0.0)
                        goto LABEL_1370;
                      goto LABEL_1372;
                    case 1:
                      v933 = -v930 / v931;
                      goto LABEL_1366;
                    case 2:
                      v933 = -v930 / v932;
                      v935 = -v931;
                      goto LABEL_1369;
                    case 3:
                      v933 = v932 / v930;
                      v934 = v931 / v930;
                      if (v933 >= 0.0)
                        goto LABEL_1372;
                      goto LABEL_1370;
                    case 4:
                      v933 = v932 / v931;
                      v932 = -v930;
LABEL_1366:
                      v934 = v932 / v931;
                      if (v933 >= 0.0)
                        goto LABEL_1372;
                      goto LABEL_1370;
                    case 5:
                      v933 = -v931 / v932;
                      v935 = -v930;
LABEL_1369:
                      v934 = v935 / v932;
                      if (v933 >= 0.0)
                        goto LABEL_1372;
LABEL_1370:
                      v936 = v889 + sqrt(v889 + v933 * v892) * v893;
                      break;
                    default:
                      v933 = 0.0;
                      v934 = 0.0;
LABEL_1372:
                      v936 = sqrt(v889 + v933 * v890) * v891;
                      break;
                  }
                  _NF = v934 < 0.0;
                  v937 = v889 + sqrt(v889 + v934 * v892) * v893;
                  v938 = sqrt(v889 + v934 * v890) * v891;
                  if (_NF)
                    v938 = v937;
                  v940 = *(_DWORD *)(v2064 + 172);
                  v939 = *(_DWORD *)(v2064 + 176);
                  v941 = v889 / (double)(1 << *(_BYTE *)(v2064 + 169));
                  v942 = (double)v939 * v941;
                  v943 = (double)(v939 + 1) * v941;
                  v944 = (double)v940 * v941;
                  v945 = (double)(v940 + 1) * v941;
                  if (v943 < v942 || v945 < v944)
                  {
                    v947 = v915;
                    memset_pattern16(&v2107, &unk_19FFB63B0, 0x10uLL);
                    v915 = v947;
                    v893 = -0.5;
                    v892 = -3.0;
                    v891 = 0.5;
                    v890 = 3.0;
                    v889 = 1.0;
                    _D1 = v2107;
                    v949 = *(double *)&v2108;
                  }
                  else
                  {
                    _D1 = (v936 - v942) / (v943 - v942);
                    v949 = (v938 - v944) / (v945 - v944);
                  }
                  v950 = v949;
                  _S0 = 1.0 - v950;
                  __asm
                  {
                    FCVT            H1, D1
                    FCVT            H0, S0
                  }
                }
                v952 = &v920[8 * v922];
                v954 = *(unsigned int *)v952;
                v953 = *((unsigned int *)v952 + 1);
                if (v954 < v953)
                {
                  v955 = *(_QWORD *)v2065.n128_u64[0];
                  v956 = *(_QWORD *)v2063.n128_u64[0];
                  v957 = *(_QWORD *)v2058.i64[0];
                  __asm
                  {
                    FCVT            H2, S9
                    FCVT            S2, H2
                  }
                  v960 = v953 - v954;
                  v961 = (float *)(v2061 + 12 * v954);
                  do
                  {
                    v962 = v921 + 8 * v918;
                    *(_WORD *)v962 = (int)(float)(v926 * 16804.0);
                    *(_WORD *)(v962 + 2) = (int)(float)(v925 * 16804.0);
                    *(float *)(v962 + 4) = v927;
                    v963 = *(v961 - 2);
                    v964 = *(v961 - 1);
                    v965 = *v961;
                    v961 += 3;
                    _S3 = (float)((float)(v963 * 0.28126) / (float)(v965 + 1.0)) + 0.5;
                    _S4 = (float)((float)(v964 * 0.28126) / (float)(v965 + 1.0)) + 0.5;
                    v968 = 4 * v918;
                    __asm { FCVT            H3, S3 }
                    v969 = (_WORD *)(v955 + v968);
                    *v969 = LOWORD(_S3);
                    __asm { FCVT            H3, S4 }
                    v969[1] = LOWORD(_S3);
                    v970 = (_WORD *)(v956 + v968);
                    *v970 = _H1;
                    v970[1] = _H0;
                    *(_DWORD *)(v957 + v968) = _S2;
                    ++v918;
                    --v960;
                  }
                  while (v960);
                }
                ++v922;
              }
              while (v922 != v916);
            }
            v897 = v2057 + 5;
          }
          while (v2057 + 5 != *(unsigned int **)v2056.i64[0]);
          _S0 = _S11;
          _S1 = _S14;
          v92 = v2100;
          goto LABEL_1338;
        }
        if (v888 == 2)
        {
          do
          {
            v900 = geo::codec::VectorTile::daVinciMeshes(*v2048);
            v901 = *v897;
            v902 = v897[1];
            v889 = 1.0;
            v890 = 3.0;
            v891 = 0.5;
            v892 = -3.0;
            v893 = -0.5;
            if (v901 < v902)
            {
              v903 = *(_QWORD *)(v900 + ((unint64_t)v897[4] << 6) + 40);
              v904 = v897[2];
              v905 = (char *)v2096;
              do
              {
                v906 = &v905[8 * v901];
                v907 = *(_DWORD *)v906;
                if (*(_DWORD *)v906 < *((_DWORD *)v906 + 1))
                {
                  v908 = (float *)((char *)v2062 + 12 * v901);
                  v909 = (int)(float)(*v908 * 65535.0);
                  v910 = (int)(float)(v908[1] * 65535.0);
                  v911 = *(_DWORD *)(v903 + 4 * (v901 - *v897));
                  do
                  {
                    v912 = *((_DWORD *)v908 + 2);
                    v913 = v2074 + 12 * v904++;
                    *(_WORD *)v913 = v909;
                    *(_WORD *)(v913 + 2) = v910;
                    *(_DWORD *)(v913 + 4) = v912;
                    *(_DWORD *)(v913 + 8) = v911;
                    ++v907;
                    v905 = (char *)v2096;
                  }
                  while (v907 < *((_DWORD *)v2096 + 2 * v901 + 1));
                  v902 = v897[1];
                }
                ++v901;
              }
              while (v901 < v902);
            }
            v897 += 5;
          }
          while (v897 != *v898);
        }
      }
      _S0 = _S11;
      _S1 = _S14;
LABEL_1338:
      v888 = v2055 + 1;
      _S14 = _S1;
      _S11 = _S0;
      if ((_QWORD)v2055 == 2)
      {
        if (v2123)
        {
          v1056 = v2120;
          v1057 = v2121;
          if (v2121 != v2120)
          {
            v1058 = (_QWORD *)v2119.n128_u64[1];
            v1059 = v2122;
            v1060 = HIBYTE(v2122);
            if (v2119.n128_u64[0] && *(_BYTE *)(v2119.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2119.n128_u64[0] + 64))();
            if (v1059 && !v1060)
            {
              v1062 = v1058[7];
              v1061 = v1058[8];
              if (v1061 == v1062)
                v1062 = v1058[10] - v1058[9];
              if (v1056 < v1062)
                v1062 = v1056;
              if (v1061 <= v1057)
                v1061 = v1057;
              if (v1061 == v1062)
                v1061 = v1062 + v1058[10] - v1058[9];
              v1058[7] = v1062;
              v1058[8] = v1061;
            }
          }
        }
        if (v2118)
        {
          v1063 = v2115;
          v1064 = v2116;
          if (v2116 != v2115)
          {
            v1065 = (_QWORD *)v2114.n128_u64[1];
            v1066 = v2117;
            v1067 = HIBYTE(v2117);
            if (v2114.n128_u64[0] && *(_BYTE *)(v2114.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2114.n128_u64[0] + 64))();
            if (v1066 && !v1067)
            {
              v1069 = v1065[7];
              v1068 = v1065[8];
              if (v1068 == v1069)
                v1069 = v1065[10] - v1065[9];
              if (v1063 < v1069)
                v1069 = v1063;
              if (v1068 <= v1064)
                v1068 = v1064;
              if (v1068 == v1069)
                v1068 = v1069 + v1065[10] - v1065[9];
              v1065[7] = v1069;
              v1065[8] = v1068;
            }
          }
        }
        if (v2113)
        {
          v1070 = v2110;
          v1071 = v2111;
          if (v2111 != (void **)v2110)
          {
            v1072 = v2109[1];
            v1073 = v2112;
            v1074 = HIBYTE(v2112);
            if (v2109[0] && *((_BYTE *)v2109[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2109[0] + 64))();
            if (v1073 && !v1074)
            {
              v1076 = (char *)v1072[7];
              v1075 = (void **)v1072[8];
              if (v1075 == (void **)v1076)
                v1076 = (char *)(v1072[10] - v1072[9]);
              if (v1070 < v1076)
                v1076 = v1070;
              if (v1075 <= v1071)
                v1075 = v1071;
              if (v1075 == (void **)v1076)
                v1075 = (void **)&v1076[v1072[10] - v1072[9]];
              v1072[7] = v1076;
              v1072[8] = v1075;
            }
          }
        }
        if (v2136)
        {
          v1077 = v2133;
          v1078 = v2134;
          if (v2134 != v2133)
          {
            v1079 = (_QWORD *)v2132.n128_u64[1];
            v1080 = v2135;
            v1081 = HIBYTE(v2135);
            if (v2132.n128_u64[0] && *(_BYTE *)(v2132.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2132.n128_u64[0] + 64))();
            if (v1080 && !v1081)
            {
              v1083 = v1079[7];
              v1082 = v1079[8];
              if (v1082 == v1083)
                v1083 = v1079[10] - v1079[9];
              if (v1077 < v1083)
                v1083 = v1077;
              if (v1082 <= v1078)
                v1082 = v1078;
              if (v1082 == v1083)
                v1082 = v1083 + v1079[10] - v1079[9];
              v1079[7] = v1083;
              v1079[8] = v1082;
            }
          }
        }
        if (v2131)
        {
          v1084 = v2128;
          v1085 = v2129;
          if (v2129 != v2128)
          {
            v1086 = (_QWORD *)v2127.n128_u64[1];
            v1087 = v2130;
            v1088 = HIBYTE(v2130);
            if (v2127.n128_u64[0] && *(_BYTE *)(v2127.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2127.n128_u64[0] + 64))();
            if (v1087 && !v1088)
            {
              v1090 = v1086[7];
              v1089 = v1086[8];
              if (v1089 == v1090)
                v1090 = v1086[10] - v1086[9];
              if (v1084 < v1090)
                v1090 = v1084;
              if (v1089 <= v1085)
                v1089 = v1085;
              if (v1089 == v1090)
                v1089 = v1090 + v1086[10] - v1086[9];
              v1086[7] = v1090;
              v1086[8] = v1089;
            }
          }
        }
        if (*((_QWORD *)&v2126 + 1))
        {
          v1091 = v2125;
          if (*((_QWORD *)&v2125 + 1) != (_QWORD)v2125)
          {
            v1092 = (_QWORD *)__dst.n128_u64[1];
            v1093 = v2126;
            v1094 = BYTE1(v2126);
            if (__dst.n128_u64[0] && *(_BYTE *)(__dst.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)__dst.n128_u64[0] + 64))();
            if (v1093 && !v1094)
            {
              v1096 = v1092[7];
              v1095 = v1092[8];
              if (v1095 == v1096)
                v1096 = v1092[10] - v1092[9];
              if ((unint64_t)v1091 < v1096)
                v1096 = v1091;
              if (v1095 <= *((_QWORD *)&v1091 + 1))
                v1095 = *((_QWORD *)&v1091 + 1);
              if (v1095 == v1096)
                v1095 = v1096 + v1092[10] - v1092[9];
              v1092[7] = v1096;
              v1092[8] = v1095;
            }
          }
        }
        if (v2146)
        {
          v1097 = v2143;
          v1098 = v2144;
          if (v2144 != v2143)
          {
            v1099 = (_QWORD *)v2142.n128_u64[1];
            v1100 = v2145;
            v1101 = HIBYTE(v2145);
            if (v2142.n128_u64[0] && *(_BYTE *)(v2142.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2142.n128_u64[0] + 64))();
            if (v1100 && !v1101)
            {
              v1103 = v1099[7];
              v1102 = v1099[8];
              if (v1102 == v1103)
                v1103 = v1099[10] - v1099[9];
              if (v1097 < v1103)
                v1103 = v1097;
              if (v1102 <= v1098)
                v1102 = v1098;
              if (v1102 == v1103)
                v1102 = v1103 + v1099[10] - v1099[9];
              v1099[7] = v1103;
              v1099[8] = v1102;
            }
          }
        }
        if (*(_QWORD *)&v2141[4])
        {
          v1104 = *(_OWORD *)&v2139[28];
          if (*(_QWORD *)&v2139[36] != *(_QWORD *)&v2139[28])
          {
            v1105 = *(_QWORD **)&v2139[20];
            v1106 = v2140;
            v1107 = BYTE1(v2140);
            if (*(_QWORD *)&v2139[12] && *(_BYTE *)(*(_QWORD *)&v2139[20] + 17) != 2)
              (*(void (**)(void))(**(_QWORD **)&v2139[12] + 64))();
            if (v1106 && !v1107)
            {
              v1109 = v1105[7];
              v1108 = v1105[8];
              if (v1108 == v1109)
                v1109 = v1105[10] - v1105[9];
              if ((unint64_t)v1104 < v1109)
                v1109 = v1104;
              if (v1108 <= *((_QWORD *)&v1104 + 1))
                v1108 = *((_QWORD *)&v1104 + 1);
              if (v1108 == v1109)
                v1108 = v1109 + v1105[10] - v1105[9];
              v1105[7] = v1109;
              v1105[8] = v1108;
            }
          }
        }
        if (*(_QWORD *)&v2139[4])
        {
          v1110 = *(_QWORD *)&buf[16];
          v1111 = *(_QWORD *)&buf[24];
          if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[16])
          {
            v1112 = *(_QWORD **)&buf[8];
            v1113 = v2138;
            v1114 = HIBYTE(v2138);
            if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
              (*(void (**)(void))(**(_QWORD **)buf + 64))();
            if (v1113 && !v1114)
            {
              v1116 = v1112[7];
              v1115 = v1112[8];
              if (v1115 == v1116)
                v1116 = v1112[10] - v1112[9];
              if (v1110 < v1116)
                v1116 = v1110;
              if (v1115 <= v1111)
                v1115 = v1111;
              if (v1115 == v1116)
                v1115 = v1116 + v1112[10] - v1112[9];
              v1112[7] = v1116;
              v1112[8] = v1115;
            }
          }
        }
        if (v2074 && v2072 != v2071)
        {
          v1117 = __b.n128_u64[1];
          if (__b.n128_u64[0] && *(_BYTE *)(__b.n128_u64[1] + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)__b.n128_u64[0] + 64))();
          if ((_BYTE)v2073 && !HIBYTE(v2073))
          {
            v1119 = *(_QWORD *)(__b.n128_u64[1] + 56);
            v1118 = *(_QWORD *)(__b.n128_u64[1] + 64);
            if (v1118 == v1119)
              v1119 = *(_QWORD *)(__b.n128_u64[1] + 80) - *(_QWORD *)(__b.n128_u64[1] + 72);
            if (v2071 < v1119)
              v1119 = v2071;
            if (v1118 <= v2072)
              v1118 = v2072;
            if (v1118 == v1119)
              v1118 = v1119 + *(_QWORD *)(__b.n128_u64[1] + 80) - *(_QWORD *)(__b.n128_u64[1] + 72);
            *(_QWORD *)(__b.n128_u64[1] + 56) = v1119;
            *(_QWORD *)(v1117 + 64) = v1118;
          }
        }
        if (v2079)
        {
          v1120 = v2076;
          v1121 = v2077;
          if (v2077 != v2076)
          {
            v1122 = (_QWORD *)v2075.n128_u64[1];
            v1123 = v2078;
            v1124 = HIBYTE(v2078);
            if (v2075.n128_u64[0] && *(_BYTE *)(v2075.n128_u64[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v2075.n128_u64[0] + 64))();
            if (v1123 && !v1124)
            {
              v1126 = v1122[7];
              v1125 = v1122[8];
              if (v1125 == v1126)
                v1126 = v1122[10] - v1122[9];
              if (v1120 < v1126)
                v1126 = v1120;
              if (v1125 <= v1121)
                v1125 = v1121;
              if (v1125 == v1126)
                v1125 = v1126 + v1122[10] - v1122[9];
              v1122[7] = v1126;
              v1122[8] = v1125;
            }
          }
        }
        if (v2083)
        {
          v779 = *(_QWORD *)&v2080[16];
          v780 = v2081;
          if (v2081 != *(_QWORD *)&v2080[16])
          {
            v781 = *(_QWORD **)&v2080[8];
            v1127 = v2082;
            v783 = HIBYTE(v2082);
            if (*(_QWORD *)v2080 && *(_BYTE *)(*(_QWORD *)&v2080[8] + 17) != 2)
              (*(void (**)(void))(**(_QWORD **)v2080 + 64))();
            if (v1127)
              goto LABEL_1676;
          }
        }
        goto LABEL_1686;
      }
    }
  }
  v176 = operator new(0xF8uLL);
  v176[1] = 0;
  v176[2] = 0;
  *v176 = &off_1E42E04F0;
  v177 = ggl::BufferData::BufferData((uint64_t)(v176 + 3), 12, 0, 0, 6, v2147);
  v176[29] = "DV Ground Tile Textured Vertex Data";
  v176[30] = &ggl::DaVinci::texturedVboReflection;
  v176[3] = &off_1E42B81E0;
  v176[28] = &unk_1E42B8200;
  *(_QWORD *)(v2064 + 880) = v177;
  v178 = *(std::__shared_weak_count **)(v2064 + 888);
  *(_QWORD *)(v2064 + 888) = v176;
  if (v178)
  {
    v179 = (unint64_t *)&v178->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = operator new(0xF8uLL);
  v181[1] = 0;
  v181[2] = 0;
  *v181 = &off_1E42E0528;
  v182 = ggl::BufferData::BufferData((uint64_t)(v181 + 3), 12, 0, 0, 6, HIDWORD(v2147));
  v181[29] = "DV Ground Tile DualElevation Vertex Data";
  v181[30] = &ggl::DaVinci::elevationVboReflection;
  v181[3] = &off_1E42B8220;
  v181[28] = &unk_1E42B8240;
  *(_QWORD *)(v2064 + 896) = v182;
  v183 = *(std::__shared_weak_count **)(v2064 + 904);
  *(_QWORD *)(v2064 + 904) = v181;
  if (v183)
  {
    v184 = (unint64_t *)&v183->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = *(std::__shared_weak_count **)(v2064 + 920);
  *(_QWORD *)(v2064 + 912) = 0;
  *(_QWORD *)(v2064 + 920) = 0;
  if (v186)
  {
    v187 = (unint64_t *)&v186->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = operator new(0xE0uLL);
  v189[1] = 0;
  v189[2] = 0;
  v189[3] = &off_1E42B5748;
  *v189 = &off_1E42DF488;
  v190 = v2147;
  v191 = qword_1EE5517E8;
  v189[4] = qword_1EE5517E8;
  v2065.n128_u32[0] = 769;
  *((_DWORD *)v189 + 10) = 769;
  v189[6] = 0;
  v189[7] = 0;
  v189[8] = 0;
  v189[9] = v191 * v190;
  v192 = 0uLL;
  *((_OWORD *)v189 + 5) = 0u;
  *((_OWORD *)v189 + 6) = 0u;
  v189[14] = 0;
  if ((v190 & 1) == 0)
  {
    v192 = 0uLL;
    if (v2015)
    {
      v2016 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2016, "GeoGL", 0xA3D02C1100000005);
      v192 = 0uLL;
    }
  }
  v189[15] = ggl::Allocator::instance(void)::alloc;
  v189[16] = 0;
  *((_OWORD *)v189 + 11) = v192;
  *((_OWORD *)v189 + 12) = v192;
  v189[26] = 0;
  v189[27] = -1;
  *((_OWORD *)v189 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v189 + 10) = v192;
  *((_DWORD *)v189 + 34) = 0;
  v189[3] = &off_1E42B6F28;
  *(_QWORD *)(v2064 + 720) = v189 + 3;
  v193 = *(std::__shared_weak_count **)(v2064 + 728);
  *(_QWORD *)(v2064 + 728) = v189;
  if (v193)
  {
    v194 = (unint64_t *)&v193->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = operator new(0xE0uLL);
  v196[1] = 0;
  v196[2] = 0;
  *v196 = &off_1E42DF4C0;
  v196[3] = &off_1E42B5748;
  v197 = v2147;
  v198 = qword_1EE5517A8;
  v196[4] = qword_1EE5517A8;
  *((_DWORD *)v196 + 10) = v2065.n128_u32[0];
  v196[6] = 0;
  v196[7] = 0;
  v196[8] = 0;
  v196[9] = v198 * v197;
  v199 = 0uLL;
  *((_OWORD *)v196 + 5) = 0u;
  *((_OWORD *)v196 + 6) = 0u;
  v196[14] = 0;
  if ((v197 & 1) == 0)
  {
    v199 = 0uLL;
    if (v2017)
    {
      v2018 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2018, "GeoGL", 0xA3D02C1100000005);
      v199 = 0uLL;
    }
  }
  v196[15] = ggl::Allocator::instance(void)::alloc;
  v196[16] = 0;
  *((_OWORD *)v196 + 11) = v199;
  *((_OWORD *)v196 + 12) = v199;
  v196[26] = 0;
  v196[27] = -1;
  *((_OWORD *)v196 + 10) = v199;
  *((_OWORD *)v196 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v196 + 34) = 0;
  v196[3] = &off_1E42B6F48;
  *(_QWORD *)(v2064 + 768) = v196 + 3;
  v200 = *(std::__shared_weak_count **)(v2064 + 776);
  *(_QWORD *)(v2064 + 776) = v196;
  if (v200)
  {
    v201 = (unint64_t *)&v200->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = operator new(0xE0uLL);
  v203[1] = 0;
  v203[2] = 0;
  *v203 = &off_1E42DF418;
  v203[3] = &off_1E42B5748;
  v204 = v2147;
  v205 = qword_1EE551828;
  v203[4] = qword_1EE551828;
  *((_DWORD *)v203 + 10) = v2065.n128_u32[0];
  v203[6] = 0;
  v203[7] = 0;
  v203[8] = 0;
  v203[9] = v205 * v204;
  v206 = 0uLL;
  *((_OWORD *)v203 + 5) = 0u;
  *((_OWORD *)v203 + 6) = 0u;
  v203[14] = 0;
  if ((v204 & 1) == 0)
  {
    v206 = 0uLL;
    if (v2019)
    {
      v2020 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2020, "GeoGL", 0xA3D02C1100000005);
      v206 = 0uLL;
    }
  }
  v203[15] = ggl::Allocator::instance(void)::alloc;
  v203[16] = 0;
  *((_OWORD *)v203 + 11) = v206;
  *((_OWORD *)v203 + 12) = v206;
  v203[26] = 0;
  v203[27] = -1;
  *((_OWORD *)v203 + 10) = v206;
  *((_OWORD *)v203 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v203 + 34) = 0;
  v203[3] = &off_1E42B6EE8;
  *(_QWORD *)(v2064 + 816) = v203 + 3;
  v207 = *(std::__shared_weak_count **)(v2064 + 824);
  *(_QWORD *)(v2064 + 824) = v203;
  if (v207)
  {
    v208 = (unint64_t *)&v207->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = operator new(0xE0uLL);
  v210[1] = 0;
  v210[2] = 0;
  *v210 = &off_1E42DF488;
  v210[3] = &off_1E42B5748;
  v211 = HIDWORD(v2147);
  v212 = qword_1EE5517E8;
  v210[4] = qword_1EE5517E8;
  *((_DWORD *)v210 + 10) = v2065.n128_u32[0];
  v210[6] = 0;
  v210[7] = 0;
  v210[8] = 0;
  v210[9] = v212 * v211;
  v213 = 0uLL;
  *((_OWORD *)v210 + 5) = 0u;
  *((_OWORD *)v210 + 6) = 0u;
  v210[14] = 0;
  if ((v211 & 1) == 0)
  {
    v213 = 0uLL;
    if (v2021)
    {
      v2022 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2022, "GeoGL", 0xA3D02C1100000005);
      v213 = 0uLL;
    }
  }
  v210[15] = ggl::Allocator::instance(void)::alloc;
  v210[16] = 0;
  *((_OWORD *)v210 + 11) = v213;
  *((_OWORD *)v210 + 12) = v213;
  v210[26] = 0;
  v210[27] = -1;
  *((_OWORD *)v210 + 10) = v213;
  *((_OWORD *)v210 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v210 + 34) = 0;
  v210[3] = &off_1E42B6F28;
  *(_QWORD *)(v2064 + 736) = v210 + 3;
  v214 = *(std::__shared_weak_count **)(v2064 + 744);
  *(_QWORD *)(v2064 + 744) = v210;
  if (v214)
  {
    v215 = (unint64_t *)&v214->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = operator new(0xE0uLL);
  v217[1] = 0;
  v217[2] = 0;
  *v217 = &off_1E42DF4C0;
  v217[3] = &off_1E42B5748;
  v218 = HIDWORD(v2147);
  v219 = qword_1EE5517A8;
  v217[4] = qword_1EE5517A8;
  *((_DWORD *)v217 + 10) = v2065.n128_u32[0];
  v217[6] = 0;
  v217[7] = 0;
  v217[8] = 0;
  v217[9] = v219 * v218;
  v220 = 0uLL;
  *((_OWORD *)v217 + 5) = 0u;
  *((_OWORD *)v217 + 6) = 0u;
  v217[14] = 0;
  if ((v218 & 1) == 0)
  {
    v220 = 0uLL;
    if (v2023)
    {
      v2024 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2024, "GeoGL", 0xA3D02C1100000005);
      v220 = 0uLL;
    }
  }
  v217[15] = ggl::Allocator::instance(void)::alloc;
  v217[16] = 0;
  *((_OWORD *)v217 + 11) = v220;
  *((_OWORD *)v217 + 12) = v220;
  v217[26] = 0;
  v217[27] = -1;
  *((_OWORD *)v217 + 10) = v220;
  *((_OWORD *)v217 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v217 + 34) = 0;
  v217[3] = &off_1E42B6F48;
  *(_QWORD *)(v2064 + 784) = v217 + 3;
  v221 = *(std::__shared_weak_count **)(v2064 + 792);
  *(_QWORD *)(v2064 + 792) = v217;
  if (v221)
  {
    v222 = (unint64_t *)&v221->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = operator new(0xE0uLL);
  v224[1] = 0;
  v224[2] = 0;
  *v224 = &off_1E42DF418;
  v224[3] = &off_1E42B5748;
  v225 = HIDWORD(v2147);
  v226 = qword_1EE551828;
  v224[4] = qword_1EE551828;
  *((_DWORD *)v224 + 10) = v2065.n128_u32[0];
  v224[6] = 0;
  v224[7] = 0;
  v224[8] = 0;
  v224[9] = v226 * v225;
  v227 = 0uLL;
  *((_OWORD *)v224 + 5) = 0u;
  *((_OWORD *)v224 + 6) = 0u;
  v224[14] = 0;
  if ((v225 & 1) == 0)
  {
    v227 = 0uLL;
    if (v2025)
    {
      v2026 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2026, "GeoGL", 0xA3D02C1100000005);
      v227 = 0uLL;
    }
  }
  v224[15] = ggl::Allocator::instance(void)::alloc;
  v224[16] = 0;
  *((_OWORD *)v224 + 11) = v227;
  *((_OWORD *)v224 + 12) = v227;
  v224[26] = 0;
  v224[27] = -1;
  *((_OWORD *)v224 + 10) = v227;
  *((_OWORD *)v224 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v224 + 34) = 0;
  v224[3] = &off_1E42B6EE8;
  *(_QWORD *)(v2064 + 832) = v224 + 3;
  v228 = *(std::__shared_weak_count **)(v2064 + 840);
  *(_QWORD *)(v2064 + 840) = v224;
  if (v228)
  {
    v229 = (unint64_t *)&v228->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = operator new(0xE0uLL);
  v231[1] = 0;
  v231[2] = 0;
  *v231 = &off_1E42DF488;
  v231[3] = &off_1E42B5748;
  v232 = v2148;
  v233 = qword_1EE5517E8;
  v231[4] = qword_1EE5517E8;
  *((_DWORD *)v231 + 10) = v2065.n128_u32[0];
  v231[6] = 0;
  v231[7] = 0;
  v231[8] = 0;
  v231[9] = v233 * v232;
  v234 = 0uLL;
  *((_OWORD *)v231 + 5) = 0u;
  *((_OWORD *)v231 + 6) = 0u;
  v231[14] = 0;
  if ((v232 & 1) == 0)
  {
    v234 = 0uLL;
    if (v2027)
    {
      v2028 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2028, "GeoGL", 0xA3D02C1100000005);
      v234 = 0uLL;
    }
  }
  v231[15] = ggl::Allocator::instance(void)::alloc;
  v231[16] = 0;
  *((_OWORD *)v231 + 11) = v234;
  *((_OWORD *)v231 + 12) = v234;
  v231[26] = 0;
  v231[27] = -1;
  *((_OWORD *)v231 + 10) = v234;
  *((_OWORD *)v231 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v231 + 34) = 0;
  v231[3] = &off_1E42B6F28;
  *(_QWORD *)(v2064 + 752) = v231 + 3;
  v235 = *(std::__shared_weak_count **)(v2064 + 760);
  *(_QWORD *)(v2064 + 760) = v231;
  if (v235)
  {
    v236 = (unint64_t *)&v235->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = operator new(0xE0uLL);
  v238[1] = 0;
  v238[2] = 0;
  *v238 = &off_1E42DF4C0;
  v238[3] = &off_1E42B5748;
  v239 = v2148;
  v240 = qword_1EE5517A8;
  v238[4] = qword_1EE5517A8;
  *((_DWORD *)v238 + 10) = v2065.n128_u32[0];
  v238[6] = 0;
  v238[7] = 0;
  v238[8] = 0;
  v238[9] = v240 * v239;
  v241 = 0uLL;
  *((_OWORD *)v238 + 5) = 0u;
  *((_OWORD *)v238 + 6) = 0u;
  v238[14] = 0;
  if ((v239 & 1) == 0)
  {
    v241 = 0uLL;
    if (v2029)
    {
      v2030 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2030, "GeoGL", 0xA3D02C1100000005);
      v241 = 0uLL;
    }
  }
  v238[15] = ggl::Allocator::instance(void)::alloc;
  v238[16] = 0;
  *((_OWORD *)v238 + 11) = v241;
  *((_OWORD *)v238 + 12) = v241;
  v238[26] = 0;
  v238[27] = -1;
  *((_OWORD *)v238 + 10) = v241;
  *((_OWORD *)v238 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v238 + 34) = 0;
  v238[3] = &off_1E42B6F48;
  *(_QWORD *)(v2064 + 800) = v238 + 3;
  v242 = *(std::__shared_weak_count **)(v2064 + 808);
  *(_QWORD *)(v2064 + 808) = v238;
  if (v242)
  {
    v243 = (unint64_t *)&v242->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = (__n128 *)operator new(0xE0uLL);
  v245->n128_u64[1] = 0;
  v245[1].n128_u64[0] = 0;
  v245->n128_u64[0] = (unint64_t)&off_1E42DF418;
  v245[1].n128_u64[1] = (unint64_t)&off_1E42B5748;
  v246 = v2148;
  v247 = qword_1EE551828;
  v245[2].n128_u64[0] = qword_1EE551828;
  v245[2].n128_u32[2] = v2065.n128_u32[0];
  v245[3].n128_u64[0] = 0;
  v245[3].n128_u64[1] = 0;
  v245[4].n128_u64[0] = 0;
  v245[4].n128_u64[1] = v247 * v246;
  _Q0 = 0uLL;
  v245[5] = 0u;
  v245[6] = 0u;
  v245[7].n128_u64[0] = 0;
  if ((v246 & 1) == 0)
  {
    _Q0 = 0uLL;
    if (v2031)
    {
      v2032 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2032, "GeoGL", 0xA3D02C1100000005);
      _Q0 = 0uLL;
    }
  }
  v245[7].n128_u64[1] = ggl::Allocator::instance(void)::alloc;
  v245[8].n128_u64[0] = 0;
  v245[11] = _Q0;
  v245[12] = _Q0;
  v245[13].n128_u64[0] = 0;
  v245[13].n128_u64[1] = -1;
  v245[10] = _Q0;
  _Q0.n128_u64[1] = 850045863;
  v245[9] = (__n128)xmmword_19FFB2DD0;
  v245[8].n128_u32[2] = 0;
  v245[1].n128_u64[1] = (unint64_t)&off_1E42B6EE8;
  *(_QWORD *)(v2064 + 848) = (char *)v245 + 24;
  v249 = *(std::__shared_weak_count **)(v2064 + 856);
  *(_QWORD *)(v2064 + 856) = v245;
  if (v249)
  {
    v250 = (unint64_t *)&v249->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = *(_QWORD *)(v2064 + 880);
  v2083 = 0;
  *(_OWORD *)v2080 = 0uLL;
  v253 = *(_QWORD *)(v252 + 8) * v2147;
  _Q0.n128_u64[0] = a3;
  v254.n128_u64[0] = a3;
  v254.n128_u64[1] = v252;
  if (v253)
  {
    if (a3 && *(_BYTE *)(v252 + 17) != 2)
    {
      v2063 = v254;
      v2065 = _Q0;
      v255 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
      if (v2083)
      {
        v312 = *(_QWORD *)&v2080[16];
        v313 = v2081;
        _Q0 = v2065;
        v254 = v2063;
        if (v2081 != *(_QWORD *)&v2080[16])
        {
          v314 = *(_QWORD **)&v2080[8];
          v315 = v2082;
          v316 = HIBYTE(v2082);
          if (*(_QWORD *)v2080 && *(_BYTE *)(*(_QWORD *)&v2080[8] + 17) != 2)
          {
            (*(void (**)(__n128, __n128))(**(_QWORD **)v2080 + 64))(v2065, v2063);
            v254 = v2063;
            _Q0 = v2065;
          }
          if (v315 && !v316)
          {
            v318 = v314[7];
            v317 = v314[8];
            if (v317 == v318)
              v318 = v314[10] - v314[9];
            if (v312 < v318)
              v318 = v312;
            if (v317 <= v313)
              v317 = v313;
            if (v317 == v318)
              v317 = v318 + v314[10] - v314[9];
            v314[7] = v318;
            v314[8] = v317;
          }
        }
      }
      else
      {
        _Q0 = v2065;
        v254 = v2063;
      }
    }
    else
    {
      v255 = *(_QWORD *)(v252 + 72);
    }
  }
  else
  {
    v255 = 0;
  }
  *(__n128 *)v2080 = v254;
  *(_QWORD *)&v2080[16] = 0;
  v2081 = v253;
  v2083 = v255;
  v2082 = 257;
  v304 = *(_QWORD *)(v2064 + 896);
  v2079 = 0;
  v2075 = 0uLL;
  v305 = *(_QWORD *)(v304 + 8) * HIDWORD(v2147);
  _Q1.n128_u64[0] = _Q0.n128_u64[0];
  _Q1.n128_u64[1] = v304;
  if (v305)
  {
    if (a3 && *(_BYTE *)(v304 + 17) != 2)
    {
      v2063 = _Q1;
      v2065 = _Q0;
      v307 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
      if (v2079)
      {
        v319 = v2076;
        v320 = v2077;
        _Q1 = v2063;
        if (v2077 == v2076)
        {
          _Q0 = v2065;
        }
        else
        {
          v2010 = (_QWORD *)v2075.n128_u64[1];
          v2011 = v2078;
          v2012 = HIBYTE(v2078);
          if (v2075.n128_u64[0] && *(_BYTE *)(v2075.n128_u64[1] + 17) != 2)
          {
            (*(void (**)(void))(*(_QWORD *)v2075.n128_u64[0] + 64))();
            _Q1 = v2063;
          }
          _Q0 = v2065;
          if (v2011 && !v2012)
          {
            v2014 = v2010[7];
            v2013 = v2010[8];
            if (v2013 == v2014)
              v2014 = v2010[10] - v2010[9];
            if (v319 < v2014)
              v2014 = v319;
            if (v2013 <= v320)
              v2013 = v320;
            if (v2013 == v2014)
              v2013 = v2014 + v2010[10] - v2010[9];
            v2010[7] = v2014;
            v2010[8] = v2013;
          }
        }
      }
      else
      {
        _Q0 = v2065;
        _Q1 = v2063;
      }
    }
    else
    {
      v307 = *(_QWORD *)(v304 + 72);
    }
  }
  else
  {
    v307 = 0;
  }
  v2075 = _Q1;
  v2076 = 0;
  v2077 = v305;
  v2079 = v307;
  v2078 = 257;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  v2146 = 0;
  memset(&v2139[4], 0, 24);
  *(_QWORD *)&v2141[4] = 0;
  v2142 = 0uLL;
  __dst = 0uLL;
  v2136 = 0;
  *((_QWORD *)&v2126 + 1) = 0;
  v2127 = 0uLL;
  v2131 = 0;
  v2132 = 0uLL;
  v2109[1] = 0;
  v2109[0] = 0;
  v2123 = 0;
  v2113 = 0;
  v2114 = 0uLL;
  v2118 = 0;
  v2119 = 0uLL;
  v308 = (_QWORD *)v2064;
  if (*(_QWORD *)(v2064 + 880))
  {
    v309 = *(_QWORD *)(v2064 + 720);
    v310 = *(_QWORD *)(v309 + 8) * v2147;
    if (v310)
    {
      if (a3 && *(_BYTE *)(v309 + 17) != 2)
      {
        v2065 = _Q0;
        v366 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v2064 + 720), 0, *(_QWORD *)(v309 + 8) * v2147, 1, 1);
        _Q0 = v2065;
        v311 = v366;
      }
      else
      {
        v311 = *(_QWORD *)(v309 + 72);
      }
    }
    else
    {
      v311 = 0;
    }
    v367.n128_u64[0] = _Q0.n128_u64[0];
    v367.n128_u64[1] = v309;
    if (*(_QWORD *)&v2139[4])
    {
      v368 = *(_QWORD *)&buf[16];
      v369 = *(_QWORD *)&buf[24];
      if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[16])
      {
        v370 = *(_QWORD **)&buf[8];
        v371 = v2138;
        v372 = HIBYTE(v2138);
        if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
        {
          v2065 = _Q0;
          v2063 = v367;
          (*(void (**)(void))(**(_QWORD **)buf + 64))();
          v367 = v2063;
          _Q0 = v2065;
        }
        if (v371 && !v372)
        {
          v374 = v370[7];
          v373 = v370[8];
          if (v373 == v374)
            v374 = v370[10] - v370[9];
          if (v368 < v374)
            v374 = v368;
          if (v373 <= v369)
            v373 = v369;
          if (v373 == v374)
            v373 = v374 + v370[10] - v370[9];
          v370[7] = v374;
          v370[8] = v373;
        }
      }
    }
    *(__n128 *)buf = v367;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[24] = v310;
    *(_QWORD *)&v2139[4] = v311;
    v2138 = 257;
    v375 = *(_QWORD *)(v2064 + 768);
    v376 = *(_QWORD *)(v375 + 8) * v2147;
    if (v376)
    {
      if (v2058.i64[0] && *(_BYTE *)(v375 + 17) != 2)
      {
        v2065 = _Q0;
        v378 = (*(uint64_t (**)(void))(*(_QWORD *)v2058.i64[0] + 56))();
        _Q0 = v2065;
        v377 = v378;
      }
      else
      {
        v377 = *(_QWORD *)(v375 + 72);
      }
    }
    else
    {
      v377 = 0;
    }
    _Q1.n128_u64[0] = _Q0.n128_u64[0];
    _Q1.n128_u64[1] = v375;
    if (*((_QWORD *)&v2126 + 1))
    {
      v379 = v2125;
      if (*((_QWORD *)&v2125 + 1) != (_QWORD)v2125)
      {
        v380 = (_QWORD *)__dst.n128_u64[1];
        v381 = v2126;
        v382 = BYTE1(v2126);
        if (__dst.n128_u64[0] && *(_BYTE *)(__dst.n128_u64[1] + 17) != 2)
        {
          v2065 = _Q0;
          v2063 = _Q1;
          (*(void (**)(void))(*(_QWORD *)__dst.n128_u64[0] + 64))();
          _Q1 = v2063;
          _Q0.n128_u64[0] = v2065.n128_u64[0];
        }
        if (v381 && !v382)
        {
          v384 = v380[7];
          v383 = v380[8];
          if (v383 == v384)
            v384 = v380[10] - v380[9];
          if ((unint64_t)v379 < v384)
            v384 = v379;
          if (v383 <= *((_QWORD *)&v379 + 1))
            v383 = *((_QWORD *)&v379 + 1);
          if (v383 == v384)
            v383 = v384 + v380[10] - v380[9];
          v380[7] = v384;
          v380[8] = v383;
        }
      }
    }
    __dst = _Q1;
    *(_QWORD *)&v2125 = 0;
    *((_QWORD *)&v2125 + 1) = v376;
    *((_QWORD *)&v2126 + 1) = v377;
    LOWORD(v2126) = 257;
    v385 = *(_QWORD *)(v2064 + 816);
    v386 = (void **)(*(_QWORD *)(v385 + 8) * v2147);
    if (v386)
    {
      if (v2058.i64[0] && *(_BYTE *)(v385 + 17) != 2)
      {
        v2065.n128_u64[0] = _Q0.n128_u64[0];
        v388 = (*(uint64_t (**)(void))(*(_QWORD *)v2058.i64[0] + 56))();
        _Q0.n128_u64[0] = v2065.n128_u64[0];
        v387 = v388;
      }
      else
      {
        v387 = *(_QWORD *)(v385 + 72);
      }
    }
    else
    {
      v387 = 0;
    }
    _Q0.n128_u64[1] = v385;
    if (v2113)
    {
      v389 = v2110;
      v390 = v2111;
      if (v2111 != (void **)v2110)
      {
        v391 = v2109[1];
        v392 = v2112;
        v393 = HIBYTE(v2112);
        if (v2109[0] && *((_BYTE *)v2109[1] + 17) != 2)
        {
          v2065 = _Q0;
          (*(void (**)(void))(*(_QWORD *)v2109[0] + 64))();
          _Q0 = v2065;
        }
        if (v392 && !v393)
        {
          v395 = (char *)v391[7];
          v394 = (void **)v391[8];
          if (v394 == (void **)v395)
            v395 = (char *)(v391[10] - v391[9]);
          if (v389 < v395)
            v395 = v389;
          if (v394 <= v390)
            v394 = v390;
          if (v394 == (void **)v395)
            v394 = (void **)&v395[v391[10] - v391[9]];
          v391[7] = v395;
          v391[8] = v394;
        }
      }
    }
    *(__n128 *)v2109 = _Q0;
    v2110 = 0;
    v2111 = v386;
    v2113 = v387;
    v2112 = 257;
    v308 = (_QWORD *)v2064;
    a3 = v2058.i64[0];
  }
  if (v308[112])
  {
    v396 = v308[92];
    v397 = *(_QWORD *)(v396 + 8) * HIDWORD(v2147);
    _Q0 = (__n128)(unint64_t)a3;
    if (v397)
    {
      if (a3 && *(_BYTE *)(v396 + 17) != 2)
      {
        v2065 = (__n128)(unint64_t)a3;
        v399 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v308[92], 0, *(_QWORD *)(v396 + 8) * HIDWORD(v2147), 1, 1);
        _Q0 = (__n128)(unint64_t)a3;
        v398 = v399;
      }
      else
      {
        v398 = *(_QWORD *)(v396 + 72);
      }
    }
    else
    {
      v398 = 0;
    }
    v400.n128_u64[0] = _Q0.n128_u64[0];
    v400.n128_u64[1] = v396;
    if (*(_QWORD *)&v2141[4])
    {
      v401 = *(_OWORD *)&v2139[28];
      if (*(_QWORD *)&v2139[36] != *(_QWORD *)&v2139[28])
      {
        v402 = *(_QWORD **)&v2139[20];
        v403 = v2140;
        v404 = BYTE1(v2140);
        if (*(_QWORD *)&v2139[12] && *(_BYTE *)(*(_QWORD *)&v2139[20] + 17) != 2)
        {
          v2065 = _Q0;
          v2063 = v400;
          (*(void (**)(void))(**(_QWORD **)&v2139[12] + 64))();
          v400 = v2063;
          _Q0 = v2065;
        }
        if (v403 && !v404)
        {
          v406 = v402[7];
          v405 = v402[8];
          if (v405 == v406)
            v406 = v402[10] - v402[9];
          if ((unint64_t)v401 < v406)
            v406 = v401;
          if (v405 <= *((_QWORD *)&v401 + 1))
            v405 = *((_QWORD *)&v401 + 1);
          if (v405 == v406)
            v405 = v406 + v402[10] - v402[9];
          v402[7] = v406;
          v402[8] = v405;
        }
      }
    }
    *(__n128 *)&v2139[12] = v400;
    *(_QWORD *)&v2139[28] = 0;
    *(_QWORD *)&v2139[36] = v397;
    *(_QWORD *)&v2141[4] = v398;
    LOWORD(v2140) = 257;
    v407 = *(_QWORD *)(v2064 + 784);
    v408 = *(_QWORD *)(v407 + 8) * HIDWORD(v2147);
    if (v408)
    {
      if (v2058.i64[0] && *(_BYTE *)(v407 + 17) != 2)
      {
        v2065 = _Q0;
        v410 = (*(uint64_t (**)(void))(*(_QWORD *)v2058.i64[0] + 56))();
        _Q0 = v2065;
        v409 = v410;
      }
      else
      {
        v409 = *(_QWORD *)(v407 + 72);
      }
    }
    else
    {
      v409 = 0;
    }
    _Q1.n128_u64[0] = _Q0.n128_u64[0];
    _Q1.n128_u64[1] = v407;
    if (v2131)
    {
      v411 = v2128;
      v412 = v2129;
      if (v2129 != v2128)
      {
        v413 = (_QWORD *)v2127.n128_u64[1];
        v414 = v2130;
        v415 = HIBYTE(v2130);
        if (v2127.n128_u64[0] && *(_BYTE *)(v2127.n128_u64[1] + 17) != 2)
        {
          v2065 = _Q0;
          v2063 = _Q1;
          (*(void (**)(void))(*(_QWORD *)v2127.n128_u64[0] + 64))();
          _Q1 = v2063;
          _Q0.n128_u64[0] = v2065.n128_u64[0];
        }
        if (v414 && !v415)
        {
          v417 = v413[7];
          v416 = v413[8];
          if (v416 == v417)
            v417 = v413[10] - v413[9];
          if (v411 < v417)
            v417 = v411;
          if (v416 <= v412)
            v416 = v412;
          if (v416 == v417)
            v416 = v417 + v413[10] - v413[9];
          v413[7] = v417;
          v413[8] = v416;
        }
      }
    }
    v2127 = _Q1;
    v2128 = 0;
    v2129 = v408;
    v2131 = v409;
    v2130 = 257;
    v418 = *(_QWORD *)(v2064 + 832);
    v419 = *(_QWORD *)(v418 + 8) * HIDWORD(v2147);
    if (v419)
    {
      if (v2058.i64[0] && *(_BYTE *)(v418 + 17) != 2)
      {
        v2065.n128_u64[0] = _Q0.n128_u64[0];
        v421 = (*(uint64_t (**)(void))(*(_QWORD *)v2058.i64[0] + 56))();
        _Q0.n128_u64[0] = v2065.n128_u64[0];
        v420 = v421;
      }
      else
      {
        v420 = *(_QWORD *)(v418 + 72);
      }
    }
    else
    {
      v420 = 0;
    }
    _Q0.n128_u64[1] = v418;
    if (v2118)
    {
      v422 = v2115;
      v423 = v2116;
      if (v2116 != v2115)
      {
        v424 = (_QWORD *)v2114.n128_u64[1];
        v425 = v2117;
        v426 = HIBYTE(v2117);
        if (v2114.n128_u64[0] && *(_BYTE *)(v2114.n128_u64[1] + 17) != 2)
        {
          v2065 = _Q0;
          (*(void (**)(void))(*(_QWORD *)v2114.n128_u64[0] + 64))();
          _Q0 = v2065;
        }
        if (v425 && !v426)
        {
          v428 = v424[7];
          v427 = v424[8];
          if (v427 == v428)
            v428 = v424[10] - v424[9];
          if (v422 < v428)
            v428 = v422;
          if (v427 <= v423)
            v427 = v423;
          if (v427 == v428)
            v427 = v428 + v424[10] - v424[9];
          v424[7] = v428;
          v424[8] = v427;
        }
      }
    }
    v2114 = _Q0;
    v2115 = 0;
    v2116 = v419;
    v2118 = v420;
    v2117 = 257;
    v308 = (_QWORD *)v2064;
    a3 = v2058.i64[0];
  }
  if (v308[114])
  {
    v429 = *(_QWORD *)(v2064 + 752);
    v430 = *(_QWORD *)(v429 + 8) * v2148;
    _Q0 = (__n128)(unint64_t)a3;
    if (v430)
    {
      if (a3 && *(_BYTE *)(v429 + 17) != 2)
      {
        v2065 = (__n128)(unint64_t)a3;
        v432 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v2064 + 752), 0, *(_QWORD *)(v429 + 8) * v2148, 1, 1);
        _Q0 = (__n128)(unint64_t)a3;
        v431 = v432;
      }
      else
      {
        v431 = *(_QWORD *)(v429 + 72);
      }
    }
    else
    {
      v431 = 0;
    }
    v433.n128_u64[0] = _Q0.n128_u64[0];
    v433.n128_u64[1] = v429;
    if (v2146)
    {
      v434 = v2143;
      v435 = v2144;
      if (v2144 != v2143)
      {
        v436 = (_QWORD *)v2142.n128_u64[1];
        v437 = v2145;
        v438 = HIBYTE(v2145);
        if (v2142.n128_u64[0] && *(_BYTE *)(v2142.n128_u64[1] + 17) != 2)
        {
          v2065 = _Q0;
          v2063 = v433;
          (*(void (**)(void))(*(_QWORD *)v2142.n128_u64[0] + 64))();
          v433 = v2063;
          _Q0 = v2065;
        }
        if (v437 && !v438)
        {
          v440 = v436[7];
          v439 = v436[8];
          if (v439 == v440)
            v440 = v436[10] - v436[9];
          if (v434 < v440)
            v440 = v434;
          if (v439 <= v435)
            v439 = v435;
          if (v439 == v440)
            v439 = v440 + v436[10] - v436[9];
          v436[7] = v440;
          v436[8] = v439;
        }
      }
    }
    v2142 = v433;
    v2143 = 0;
    v2144 = v430;
    v2146 = v431;
    v2145 = 257;
    v441 = *(_QWORD *)(v2064 + 800);
    v442 = *(_QWORD *)(v441 + 8) * v2148;
    if (v442)
    {
      if (v2058.i64[0] && *(_BYTE *)(v441 + 17) != 2)
      {
        v2065 = _Q0;
        v444 = (*(uint64_t (**)(void))(*(_QWORD *)v2058.i64[0] + 56))();
        _Q0 = v2065;
        v443 = v444;
      }
      else
      {
        v443 = *(_QWORD *)(v441 + 72);
      }
    }
    else
    {
      v443 = 0;
    }
    _Q1.n128_u64[0] = _Q0.n128_u64[0];
    _Q1.n128_u64[1] = v441;
    if (v2136)
    {
      v445 = v2133;
      v446 = v2134;
      if (v2134 != v2133)
      {
        v447 = (_QWORD *)v2132.n128_u64[1];
        v448 = v2135;
        v449 = HIBYTE(v2135);
        if (v2132.n128_u64[0] && *(_BYTE *)(v2132.n128_u64[1] + 17) != 2)
        {
          v2065 = _Q0;
          v2063 = _Q1;
          (*(void (**)(void))(*(_QWORD *)v2132.n128_u64[0] + 64))();
          _Q1 = v2063;
          _Q0.n128_u64[0] = v2065.n128_u64[0];
        }
        if (v448 && !v449)
        {
          v451 = v447[7];
          v450 = v447[8];
          if (v450 == v451)
            v451 = v447[10] - v447[9];
          if (v445 < v451)
            v451 = v445;
          if (v450 <= v446)
            v450 = v446;
          if (v450 == v451)
            v450 = v451 + v447[10] - v447[9];
          v447[7] = v451;
          v447[8] = v450;
        }
      }
    }
    v2132 = _Q1;
    v2133 = 0;
    v2134 = v442;
    v2136 = v443;
    v2135 = 257;
    v452 = *(_QWORD *)(v2064 + 848);
    v453 = *(_QWORD *)(v452 + 8) * v2148;
    if (v453)
    {
      if (v2058.i64[0] && *(_BYTE *)(v452 + 17) != 2)
      {
        v2065.n128_u64[0] = _Q0.n128_u64[0];
        v455 = (*(uint64_t (**)(void))(*(_QWORD *)v2058.i64[0] + 56))();
        _Q0.n128_u64[0] = v2065.n128_u64[0];
        v454 = v455;
      }
      else
      {
        v454 = *(_QWORD *)(v452 + 72);
      }
    }
    else
    {
      v454 = 0;
    }
    _Q0.n128_u64[1] = v452;
    if (v2123)
    {
      v456 = v2120;
      v457 = v2121;
      if (v2121 != v2120)
      {
        v458 = (_QWORD *)v2119.n128_u64[1];
        v459 = v2122;
        v460 = HIBYTE(v2122);
        if (v2119.n128_u64[0] && *(_BYTE *)(v2119.n128_u64[1] + 17) != 2)
        {
          v2065 = _Q0;
          (*(void (**)(void))(*(_QWORD *)v2119.n128_u64[0] + 64))();
          _Q0 = v2065;
        }
        if (v459 && !v460)
        {
          v462 = v458[7];
          v461 = v458[8];
          if (v461 == v462)
            v462 = v458[10] - v458[9];
          if (v456 < v462)
            v462 = v456;
          if (v461 <= v457)
            v461 = v457;
          if (v461 == v462)
            v461 = v462 + v458[10] - v458[9];
          v458[7] = v462;
          v458[8] = v461;
        }
      }
    }
    v2119 = _Q0;
    v2120 = 0;
    v2121 = v453;
    v2123 = v454;
    v2122 = 257;
  }
  v463 = 0;
  *(_QWORD *)&v2052 = v2092;
  v2061 = v2092 + 8;
  v464 = 3.0;
  v465 = 0.5;
  v466 = -3.0;
  v467 = -0.5;
  v468.i64[0] = 0x3F0000003F000000;
  v468.i64[1] = 0x3F0000003F000000;
  do
  {
    v469 = (char *)&v2149 + 24 * v463;
    v470 = *(unsigned int **)v469;
    v2044 = (unsigned int **)(v469 + 8);
    *(_QWORD *)&v2049 = *((_QWORD *)v469 + 1);
    *(_QWORD *)&v2042 = v463;
    if (*(_QWORD *)v469 != (_QWORD)v2049)
    {
      v2065.n128_u64[0] = (unint64_t)&v2126 + 48 * v463 + 8;
      v2063.n128_u64[0] = (unint64_t)&v2139[48 * v463 + 4];
      __asm { FMOV            V22.4S, #1.0 }
      v474 = (float32x4_t)vdupq_n_s32(0x3E90019Du);
      v2056 = _Q22;
      v2051 = v474;
      if (!(_BYTE)v463)
      {
        v2047 = *v2048;
        v583 = (char *)v2096;
        v2059.i64[0] = (uint64_t)v2096;
        while (1)
        {
          v585 = *v470;
          v584 = v470[1];
          *(_QWORD *)&v2053 = v470;
          if (v585 < v584)
            break;
LABEL_773:
          v470 = (unsigned int *)(v2053 + 20);
          if ((_QWORD)v2053 + 20 == (_QWORD)v2049)
            goto LABEL_642;
        }
        v586 = 0;
        v587 = v470[2];
        v588 = *((unsigned __int8 *)v2047 + 1956);
        v589 = v2099;
        v590 = v2083;
        v2057 = (unsigned int *)(v2083 + 4);
        v2058.i64[0] = v2083 + 8;
        *(_QWORD *)&v2055 = 12 * v585;
        *(_QWORD *)&v2054 = 12 * v585 + 12;
        v2060.i32[0] = *((unsigned __int8 *)v2047 + 1956);
        while (2)
        {
          if (v588 == 1)
          {
            v591 = (float *)((char *)v2062 + 12 * v585);
            v592 = *v591 * 0.000000156785594;
            v593 = v591[1] * 0.000000156785594;
            v594 = v591[2] * 0.000000157313035;
            switch(*(_BYTE *)(v2064 + 168))
            {
              case 0:
                v595 = v593 / v592;
                v596 = v594 / v592;
                if (v593 / v592 < 0.0)
                  goto LABEL_861;
                goto LABEL_863;
              case 1:
                v595 = -v592 / v593;
                goto LABEL_857;
              case 2:
                v595 = -v592 / v594;
                v629 = -v593;
                goto LABEL_860;
              case 3:
                v595 = v594 / v592;
                v596 = v593 / v592;
                if (v595 >= 0.0)
                  goto LABEL_863;
                goto LABEL_861;
              case 4:
                v595 = v594 / v593;
                v594 = -v592;
LABEL_857:
                v596 = v594 / v593;
                if (v595 >= 0.0)
                  goto LABEL_863;
                goto LABEL_861;
              case 5:
                v595 = -v593 / v594;
                v629 = -v592;
LABEL_860:
                v596 = v629 / v594;
                if (v595 >= 0.0)
                  goto LABEL_863;
LABEL_861:
                v630 = sqrt(v595 * v466 + 1.0) * v467 + 1.0;
                break;
              default:
                v595 = 0.0;
                v596 = 0.0;
LABEL_863:
                v630 = sqrt(v595 * v464 + 1.0) * v465;
                break;
            }
            _NF = v596 < 0.0;
            v631 = sqrt(v596 * v466 + 1.0) * v467 + 1.0;
            v632 = sqrt(v596 * v464 + 1.0) * v465;
            if (_NF)
              v632 = v631;
            v634 = *(_DWORD *)(v2064 + 172);
            v633 = *(_DWORD *)(v2064 + 176);
            v635 = 1.0 / (double)(1 << *(_BYTE *)(v2064 + 169));
            v636 = (double)v633 * v635;
            v637 = (double)(v633 + 1) * v635;
            v638 = (double)v634 * v635;
            v639 = (double)(v634 + 1) * v635;
            if (v637 < v636 || v639 < v638)
            {
              memset_pattern16(&__b, &unk_19FFB63B0, 0x10uLL);
              v588 = v2060.i32[0];
              v583 = (char *)v2059.i64[0];
              v474 = v2051;
              _Q22 = v2056;
              v468.i64[0] = 0x3F0000003F000000;
              v468.i64[1] = 0x3F0000003F000000;
              v467 = -0.5;
              v466 = -3.0;
              v465 = 0.5;
              v464 = 3.0;
              _Q0.n128_u64[0] = __b.n128_u64[1];
              _Q1.n128_u64[0] = __b.n128_u64[0];
            }
            else
            {
              _Q1.n128_f64[0] = (v630 - v636) / (v637 - v636);
              _Q0.n128_f64[0] = (v632 - v638) / (v639 - v638);
            }
            _Q0.n128_f32[0] = _Q0.n128_f64[0];
            _S14 = _Q1.n128_f64[0];
            _S11 = 1.0 - _Q0.n128_f32[0];
          }
          else
          {
            _Q1.n128_f32[0] = _S14;
            _S14 = 0.0;
            if (v589 == v2100)
              goto LABEL_822;
            _Q0.n128_f32[0] = _S11;
            v597 = 0;
            v598 = v589;
            do
            {
              v599 = v598[1];
              if (v599)
              {
                do
                {
                  v600 = (_QWORD **)v599;
                  v599 = (_QWORD *)*v599;
                }
                while (v599);
              }
              else
              {
                do
                {
                  v600 = (_QWORD **)v598[2];
                  _ZF = *v600 == v598;
                  v598 = v600;
                }
                while (!_ZF);
              }
              ++v597;
              v598 = v600;
            }
            while (v600 != v2100);
            v601 = v589;
            do
            {
              v602 = v597 >> 1;
              v603 = v601;
              if (v597 != 1)
              {
                v605 = v597 >> 1;
                v606 = v601;
                do
                {
                  v607 = (_QWORD *)v606[1];
                  if (v607)
                  {
                    do
                    {
                      v603 = v607;
                      v607 = (_QWORD *)*v607;
                    }
                    while (v607);
                  }
                  else
                  {
                    do
                    {
                      v603 = (_QWORD *)v606[2];
                      _ZF = *v603 == (_QWORD)v606;
                      v606 = v603;
                    }
                    while (!_ZF);
                  }
                  v606 = v603;
                  v507 = v605-- <= 1;
                }
                while (!v507);
              }
              if (v585 >= *((unsigned int *)v603 + 9))
              {
                v604 = (_QWORD *)v603[1];
                if (v604)
                {
                  do
                  {
                    v601 = v604;
                    v604 = (_QWORD *)*v604;
                  }
                  while (v604);
                }
                else
                {
                  do
                  {
                    v601 = (_QWORD *)v603[2];
                    _ZF = *v601 == (_QWORD)v603;
                    v603 = v601;
                  }
                  while (!_ZF);
                }
                v602 = v597 + ~v602;
              }
              v597 = v602;
            }
            while (v602);
            if (v601 == v2100)
            {
LABEL_822:
              _S11 = 0.0;
            }
            else
            {
              v608 = *((unsigned int *)v601 + 8);
              v609 = *((unsigned int *)v601 + 9);
              v610 = v585 < v608 || v585 >= v609;
              _S11 = 0.0;
              if (!v610)
              {
                v611 = 0;
                v612 = v589;
                do
                {
                  v613 = v612[1];
                  if (v613)
                  {
                    do
                    {
                      v614 = (_QWORD **)v613;
                      v613 = (_QWORD *)*v613;
                    }
                    while (v613);
                  }
                  else
                  {
                    do
                    {
                      v614 = (_QWORD **)v612[2];
                      _ZF = *v614 == v612;
                      v612 = v614;
                    }
                    while (!_ZF);
                  }
                  ++v611;
                  v612 = v614;
                }
                while (v614 != v2100);
                v615 = v589;
                do
                {
                  v616 = v611 >> 1;
                  v617 = v615;
                  if (v611 != 1)
                  {
                    v619 = v611 >> 1;
                    v620 = v615;
                    do
                    {
                      v621 = v620[1];
                      if (v621)
                      {
                        do
                        {
                          v617 = v621;
                          v621 = (_QWORD *)*v621;
                        }
                        while (v621);
                      }
                      else
                      {
                        do
                        {
                          v617 = v620[2];
                          _ZF = *v617 == (_QWORD)v620;
                          v620 = (_QWORD **)v617;
                        }
                        while (!_ZF);
                      }
                      v620 = (_QWORD **)v617;
                      v507 = v619-- <= 1;
                    }
                    while (!v507);
                  }
                  if (v585 >= *((unsigned int *)v617 + 9))
                  {
                    v618 = (_QWORD *)v617[1];
                    if (v618)
                    {
                      do
                      {
                        v615 = (_QWORD **)v618;
                        v618 = (_QWORD *)*v618;
                      }
                      while (v618);
                    }
                    else
                    {
                      do
                      {
                        v615 = (_QWORD **)v617[2];
                        _ZF = *v615 == v617;
                        v617 = v615;
                      }
                      while (!_ZF);
                    }
                    v616 = v611 + ~v616;
                  }
                  v611 = v616;
                }
                while (v616);
                if (v615 == v2100
                  || (v585 >= *((unsigned int *)v615 + 8) ? (v622 = v585 >= *((unsigned int *)v615 + 9)) : (v622 = 1),
                      v622))
                {
                  v615 = v2100;
                }
                v623 = *((_DWORD *)v615 + 14);
                if (v623)
                {
                  _S14 = _Q1.n128_f32[0];
                  _S11 = _Q0.n128_f32[0];
                  if (v623 == 1)
                  {
                    v624 = *((float *)v615 + 12);
                    _Q1.n128_u32[0] = *((_DWORD *)v615 + 13);
                    v625 = (float *)((char *)v2062 + 12 * v585);
                    v626 = *v625 - *((float *)v615 + 10);
                    v627 = 1.0 / (float)((float)(v624 * v624) + (float)(_Q1.n128_f32[0] * _Q1.n128_f32[0]));
                    v628 = v625[1] - *((float *)v615 + 11);
                    _S14 = (float)-(float)((float)(v628 * v624) - (float)(v626 * _Q1.n128_f32[0])) * v627;
                    _Q0.n128_f32[0] = (float)(v626 * v624) + (float)(v628 * _Q1.n128_f32[0]);
                    _S11 = _Q0.n128_f32[0] * v627;
                  }
                }
                else
                {
                  v710 = (float *)(v615[5][1] + 8 * (v585 - *(_DWORD *)v615[5]));
                  _S14 = *v710;
                  _S11 = v710[1];
                }
              }
            }
          }
          v641 = &v583[8 * v585];
          v642 = *(unsigned int *)v641;
          v643 = *((unsigned int *)v641 + 1);
          if (v642 < v643)
          {
            v644 = (char *)v2062 + 12 * v585;
            v645 = *(_QWORD *)v2065.n128_u64[0];
            __asm
            {
              FCVT            H0, S14
              FCVT            H1, S11
            }
            v646 = *(_QWORD *)v2063.n128_u64[0];
            v647 = v643 - v642;
            if ((unint64_t)(v643 - v642) <= 0x1F)
              goto LABEL_875;
            v660 = ~v642 + v643;
            v661 = __CFADD__(v587, (_DWORD)v660);
            v662 = !is_mul_ok(v660, 0xCuLL);
            v663 = 4 * v587;
            v664 = 4 * v660;
            v665 = v646 + v663;
            if (v646 + v663 + 2 + 4 * v660 < v646 + v663 + 2)
              goto LABEL_875;
            if (v665 + v664 < v665)
              goto LABEL_875;
            v666 = v645 + v663;
            if (v666 + 2 + v664 < v666 + 2)
              goto LABEL_875;
            if (v666 + v664 < v666)
              goto LABEL_875;
            v667 = 12 * v587;
            v668 = 3 * v660;
            v669 = v590 + v667;
            if (v590 + v667 + 12 * v660 < v590 + v667
              || v2058.i64[0] + v667 + v668 * 4 < (unint64_t)(v2058.i64[0] + v667)
              || v661
              || HIDWORD(v660)
              || &v2057[(unint64_t)v667 / 4 + v668] < &v2057[(unint64_t)v667 / 4]
              || v662)
            {
              goto LABEL_875;
            }
            v670 = (char *)v2062 + 12 * v586 + v2055;
            v671 = (char *)v2062 + 12 * v586 + v2054;
            v672 = v587 + v643 - v642;
            v673 = v590 + 12 * v672;
            v672 *= 4;
            v674 = v645 + v672;
            v675 = v646 + v672;
            v676 = v2052 + 12 * v642;
            v677 = v2052 + 12 * v643;
            v679 = (unint64_t)v670 < v645 + v672 && v666 < (unint64_t)v671;
            v681 = (unint64_t)v670 < v675 && v665 < (unint64_t)v671;
            v683 = v676 < v673 && v669 < v677;
            v685 = v676 < v674 && v666 < v677;
            v687 = v676 < v675 && v665 < v677;
            v689 = v669 < v674 && v666 < v673;
            v691 = v669 < v675 && v665 < v673;
            v693 = v666 < v675 && v665 < v674;
            if (v669 < (unint64_t)v671 && (unint64_t)v670 < v673)
            {
              v583 = (char *)v2059.i64[0];
              v588 = v2060.i32[0];
              goto LABEL_875;
            }
            v583 = (char *)v2059.i64[0];
            v588 = v2060.i32[0];
            if (v679 || v681 || v683 || v685 || v687 || v689 || v691 || v693)
            {
LABEL_875:
              v648 = v643 - v642;
              v649 = (float *)(v2061 + 12 * v642);
              do
              {
                v650 = v590 + 12 * v587;
                v651 = *(_QWORD *)v644;
                *(_DWORD *)(v650 + 8) = *((_DWORD *)v644 + 2);
                *(_QWORD *)v650 = v651;
                v652 = *(v649 - 2);
                v653 = *(v649 - 1);
                v654 = *v649;
                v649 += 3;
                _S2 = (float)((float)(v652 * 0.28126) / (float)(v654 + 1.0)) + 0.5;
                _S3 = (float)((float)(v653 * 0.28126) / (float)(v654 + 1.0)) + 0.5;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            H3, S3
                }
                v657 = 4 * v587;
                v658 = (_WORD *)(v645 + v657);
                *v658 = LOWORD(_S2);
                v658[1] = LOWORD(_S3);
                v659 = (_WORD *)(v646 + v657);
                *v659 = _Q0.n128_u16[0];
                v659[1] = _Q1.n128_u16[0];
                ++v587;
                --v648;
              }
              while (v648);
            }
            else
            {
              v695 = vdupq_lane_s16((int16x4_t)_Q0.n128_u64[0], 0);
              v696 = v647 & 0xFFFFFFFFFFFFFFF8;
              v697 = vdupq_lane_s16((int16x4_t)_Q1.n128_u64[0], 0);
              v698 = (const float *)(v2052 + 12 * v642);
              v699 = v587;
              v700 = v647 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v701 = (const float *)((char *)v2062 + 12 * v585);
                v2155.val[0] = vld1q_dup_f32(v701++);
                v702 = (const float *)(v644 + 8);
                v703 = (float *)(v590 + 12 * v699);
                v2155.val[1] = vld1q_dup_f32(v701);
                v2155.val[2] = vld1q_dup_f32(v702);
                vst3q_f32(v703, v2155);
                v703 += 12;
                vst3q_f32(v703, v2155);
                v704 = v698;
                v2156 = vld3q_f32(v704);
                v704 += 12;
                v2157 = vld3q_f32(v704);
                v705 = vaddq_f32(v2157.val[2], _Q22);
                v706 = vaddq_f32(v2156.val[2], _Q22);
                v2157.val[0] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32(v2156.val[0], v474), v706), v468)), vaddq_f32(vdivq_f32(vmulq_f32(v2157.val[0], v474), v705), v468));
                v2157.val[1] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32(v2156.val[1], v474), v706), v468)), vaddq_f32(vdivq_f32(vmulq_f32(v2157.val[1], v474), v705), v468));
                v707 = 4 * v699;
                v708 = (__int16 *)(v645 + v707);
                vst2q_s16(v708, *(int16x8x2_t *)v2157.val[0].f32);
                v709 = (__int16 *)(v646 + v707);
                vst2q_s16(v709, *(int16x8x2_t *)v695.i8);
                v698 += 24;
                v699 += 8;
                v700 -= 8;
              }
              while (v700);
              v587 += v696;
              if (v647 != v696)
              {
                v642 += v696;
                goto LABEL_875;
              }
            }
          }
          ++v585;
          ++v586;
          if (v585 == v584)
            goto LABEL_773;
          continue;
        }
      }
      if (v463 == 1)
      {
        v475 = &v2113 + 6 * v463;
        v2045 = v475;
        while (1)
        {
          v476 = geo::codec::VectorTile::daVinciMeshes(*v2048);
          v481 = (_QWORD *)*v470;
          v482 = v470[1];
          v464 = 3.0;
          v465 = 0.5;
          v466 = -3.0;
          v467 = -0.5;
          v468.i64[0] = 0x3F0000003F000000;
          v468.i64[1] = 0x3F0000003F000000;
          if (v481 < v482)
            break;
LABEL_647:
          v470 += 5;
          if (v470 == *v2044)
            goto LABEL_642;
        }
        v483 = *(_QWORD *)(v476 + ((unint64_t)v470[4] << 6) + 32);
        v484 = v470[2];
        v485 = *((unsigned __int8 *)*v2048 + 1956);
        v486 = (char *)v2096;
        v487 = v2079;
        v2046 = (_QWORD *)*v470;
        v2047 = (geo::codec::VectorTile *)(v2079 + 4);
        *(_QWORD *)&v2049 = v2079 + 8;
        v488 = (uint64_t)v481;
        *(_QWORD *)&v2053 = v482;
        *(_QWORD *)&v2054 = *(_QWORD *)(v476 + ((unint64_t)v470[4] << 6) + 32);
        LODWORD(v2055) = *((unsigned __int8 *)*v2048 + 1956);
        v2057 = (unsigned int *)v2096;
        while (2)
        {
          _S12 = *(_DWORD *)(v483 + 4 * (v488 - (_QWORD)v481));
          v490 = (__int32 *)((char *)v2062 + 12 * v488);
          v478.i32[0] = *v490;
          v479.i32[0] = v490[1];
          v480.i32[0] = v490[2];
          _Q0.n128_u32[0] = 0;
          _Q1.n128_u32[0] = 0;
          if (v485 == 1)
          {
            v491 = v478.f32[0] * 0.000000156785594;
            v492 = *(float *)v479.i32 * 0.000000156785594;
            v493 = v480.f32[0] * 0.000000157313035;
            switch(*(_BYTE *)(v2064 + 168))
            {
              case 0:
                v494 = v492 / v491;
                v495 = v493 / v491;
                if (v492 / v491 < 0.0)
                  goto LABEL_664;
                goto LABEL_666;
              case 1:
                v494 = -v491 / v492;
                goto LABEL_660;
              case 2:
                v494 = -v491 / v493;
                v496 = -v492;
                goto LABEL_663;
              case 3:
                v494 = v493 / v491;
                v495 = v492 / v491;
                if (v494 >= 0.0)
                  goto LABEL_666;
                goto LABEL_664;
              case 4:
                v494 = v493 / v492;
                v493 = -v491;
LABEL_660:
                v495 = v493 / v492;
                if (v494 >= 0.0)
                  goto LABEL_666;
                goto LABEL_664;
              case 5:
                v494 = -v492 / v493;
                v496 = -v491;
LABEL_663:
                v495 = v496 / v493;
                if (v494 >= 0.0)
                  goto LABEL_666;
LABEL_664:
                v497 = sqrt(v494 * v466 + 1.0) * v467 + 1.0;
                break;
              default:
                v494 = 0.0;
                v495 = 0.0;
LABEL_666:
                v497 = sqrt(v494 * v464 + 1.0) * v465;
                break;
            }
            _NF = v495 < 0.0;
            v498 = sqrt(v495 * v466 + 1.0) * v467 + 1.0;
            v499 = sqrt(v495 * v464 + 1.0) * v465;
            if (_NF)
              v499 = v498;
            v501 = *(_DWORD *)(v2064 + 172);
            v500 = *(_DWORD *)(v2064 + 176);
            v502 = 1.0 / (double)(1 << *(_BYTE *)(v2064 + 169));
            v503 = (double)v500 * v502;
            v504 = (double)(v500 + 1) * v502;
            v505 = (double)v501 * v502;
            v506 = (double)(v501 + 1) * v502;
            v507 = v504 < v503 || v506 < v505;
            if (v507)
            {
              v2059 = v479;
              v2060 = v478;
              v2058 = v480;
              memset_pattern16(&__b, &unk_19FFB63B0, 0x10uLL);
              v480 = v2058;
              v479 = v2059;
              v478 = v2060;
              v486 = (char *)v2057;
              v485 = v2055;
              v483 = v2054;
              v482 = v2053;
              v468.i64[0] = 0x3F0000003F000000;
              v468.i64[1] = 0x3F0000003F000000;
              v467 = -0.5;
              v466 = -3.0;
              v465 = 0.5;
              v464 = 3.0;
              _Q0.n128_u64[0] = __b.n128_u64[1];
              _Q1.n128_u64[0] = __b.n128_u64[0];
            }
            else
            {
              _Q1.n128_f64[0] = (v497 - v503) / (v504 - v503);
              _D2 = v506 - v505;
              _Q0.n128_f64[0] = (v499 - v505) / (v506 - v505);
            }
            _Q0.n128_f32[0] = _Q0.n128_f64[0];
            _S2 = 1.0 - _Q0.n128_f32[0];
            __asm
            {
              FCVT            H0, D1
              FCVT            H1, S2
            }
          }
          v509 = &v486[8 * v488];
          v510 = *(unsigned int *)v509;
          v511 = *((unsigned int *)v509 + 1);
          if (v510 >= v511)
            goto LABEL_650;
          v512 = *(_QWORD *)v2065.n128_u64[0];
          v513 = *(_QWORD *)v2063.n128_u64[0];
          v514 = *v475;
          __asm
          {
            FCVT            H2, S12
            FCVT            S2, H2
          }
          v516 = v511 - v510;
          if ((unint64_t)(v511 - v510) <= 0x1F)
            goto LABEL_769;
          v517 = ~v510 + v511;
          v518 = __CFADD__(v484, (_DWORD)v517);
          v519 = !is_mul_ok(v517, 0xCuLL);
          v520 = 4 * v484;
          v521 = 4 * v517;
          v522 = v513 + v520;
          if (v513 + v520 + 2 + 4 * v517 < v513 + v520 + 2 || v522 + v521 < v522)
          {
            v486 = (char *)v2057;
            goto LABEL_769;
          }
          v523 = v512 + v520;
          if (v512 + v520 + 2 + v521 >= (unint64_t)(v512 + v520 + 2) && v523 + v521 >= v523)
          {
            v524 = 12 * v484;
            v525 = 12 * v517;
            v526 = v487 + v524;
            if (v487 + v524 + 12 * v517 >= v487 + v524
              && (uint64_t)v2049 + v524 + v525 >= (unint64_t)(v2049 + v524)
              && !v518
              && !HIDWORD(v517)
              && (char *)v2047 + v524 + v525 >= (char *)v2047 + v524
              && !v519)
            {
              v527 = v470;
              v528 = v2052 + 12 * v510;
              v529 = v2052 + 12 * v511;
              v530 = v484 + v511 - v510;
              v531 = v487 + 12 * v530;
              v532 = v514 + v520;
              v533 = v514 + 4 * v530;
              v534 = v512 + 4 * v530;
              v535 = v513 + 4 * v530;
              v537 = v528 < v533 && v532 < v529;
              v539 = v528 < v534 && v523 < v529;
              v541 = v528 < v535 && v522 < v529;
              v543 = v526 < v533 && v532 < v531;
              v545 = v526 < v534 && v523 < v531;
              v547 = v526 < v535 && v522 < v531;
              v549 = v532 < v534 && v523 < v533;
              v551 = v532 < v535 && v522 < v533;
              v553 = v523 < v535 && v522 < v534;
              if (v526 < v529 && v528 < v531)
              {
                v470 = v527;
                v475 = v2045;
                v481 = v2046;
                v482 = v2053;
                goto LABEL_767;
              }
              v470 = v527;
              v481 = v2046;
              v482 = v2053;
              if (v537)
              {
                v475 = v2045;
              }
              else
              {
                v475 = v2045;
                if (!v539 && !v541 && !v543 && !v545 && !v547)
                {
                  v486 = (char *)v2057;
                  if (v549)
                  {
                    v483 = v2054;
                    v485 = v2055;
                    goto LABEL_769;
                  }
                  v485 = v2055;
                  if (v551)
                  {
                    v483 = v2054;
                    goto LABEL_769;
                  }
                  v483 = v2054;
                  if (!v553)
                  {
                    v555 = vdupq_lane_s16((int16x4_t)_Q0.n128_u64[0], 0);
                    v556 = vdupq_lane_s16((int16x4_t)_Q1.n128_u64[0], 0);
                    v557 = vdupq_lane_s32(*(int32x2_t *)&_D2, 0);
                    v2059 = v479;
                    v2060 = v478;
                    v558 = vdupq_lane_s32(*(int32x2_t *)v479.i8, 0);
                    v479 = vdupq_lane_s32(*(int32x2_t *)v478.f32, 0);
                    v559 = v516 & 0xFFFFFFFFFFFFFFF8;
                    v560 = (const float *)(v2052 + 12 * v510);
                    v561 = v484;
                    v562 = v516 & 0xFFFFFFFFFFFFFFF8;
                    v2058 = v480;
                    v563 = vdupq_lane_s32(*(int32x2_t *)v480.f32, 0);
                    do
                    {
                      v564 = (float *)(v487 + 12 * v561);
                      vst3q_f32(v564, *(float32x4x3_t *)v479.i8);
                      v564 += 12;
                      vst3q_f32(v564, *(float32x4x3_t *)v479.i8);
                      v565 = v560;
                      v2158 = vld3q_f32(v565);
                      v565 += 12;
                      v2159 = vld3q_f32(v565);
                      v566 = vaddq_f32(v2159.val[2], v2056);
                      v567 = vaddq_f32(v2158.val[2], v2056);
                      v480 = vaddq_f32(vdivq_f32(vmulq_f32(v2158.val[0], v2051), v567), v468);
                      v478 = vaddq_f32(vdivq_f32(vmulq_f32(v2158.val[1], v2051), v567), v468);
                      v2158.val[2] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v480), vaddq_f32(vdivq_f32(vmulq_f32(v2159.val[0], v2051), v566), v468));
                      v2159.val[0] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v478), vaddq_f32(vdivq_f32(vmulq_f32(v2159.val[1], v2051), v566), v468));
                      v568 = 4 * v561;
                      v569 = (__int16 *)(v512 + v568);
                      vst2q_s16(v569, *(int16x8x2_t *)v2158.val[2].f32);
                      v570 = (__int16 *)(v513 + v568);
                      vst2q_s16(v570, *(int16x8x2_t *)v555.i8);
                      v571 = (int32x4_t *)(v514 + v568);
                      *v571 = v557;
                      v571[1] = v557;
                      v560 += 24;
                      v561 += 8;
                      v562 -= 8;
                    }
                    while (v562);
                    v484 += v559;
                    if (v516 != v559)
                    {
                      v510 += v559;
                      v479 = v2059;
                      v478 = v2060;
                      v480 = v2058;
                      goto LABEL_769;
                    }
LABEL_650:
                    if (++v488 == v482)
                      goto LABEL_647;
                    continue;
                  }
LABEL_769:
                  v572 = v511 - v510;
                  v573 = (float *)(v2061 + 12 * v510);
                  do
                  {
                    v574 = (_DWORD *)(v487 + 12 * v484);
                    *v574 = v478.i32[0];
                    v574[1] = v479.i32[0];
                    v574[2] = v480.i32[0];
                    v575 = *(v573 - 2);
                    v576 = *(v573 - 1);
                    v577 = *v573;
                    v573 += 3;
                    _S3 = (float)((float)(v575 * 0.28126) / (float)(v577 + 1.0)) + 0.5;
                    _S4 = (float)((float)(v576 * 0.28126) / (float)(v577 + 1.0)) + 0.5;
                    v580 = 4 * v484;
                    __asm { FCVT            H3, S3 }
                    v581 = (_WORD *)(v512 + v580);
                    *v581 = LOWORD(_S3);
                    __asm { FCVT            H3, S4 }
                    v581[1] = LOWORD(_S3);
                    v582 = (_WORD *)(v513 + v580);
                    *v582 = _Q0.n128_u16[0];
                    v582[1] = _Q1.n128_u16[0];
                    *(_DWORD *)(v514 + v580) = LODWORD(_D2);
                    ++v484;
                    --v572;
                  }
                  while (v572);
                  goto LABEL_650;
                }
              }
            }
LABEL_767:
            v483 = v2054;
          }
          break;
        }
        v485 = v2055;
        v486 = (char *)v2057;
        goto LABEL_769;
      }
    }
LABEL_642:
    v463 = v2042 + 1;
  }
  while ((_QWORD)v2042 != 2);
  if (v2123)
  {
    v711 = v2120;
    v712 = v2121;
    if (v2121 != v2120)
    {
      v713 = (_QWORD *)v2119.n128_u64[1];
      v714 = v2122;
      v715 = HIBYTE(v2122);
      if (v2119.n128_u64[0] && *(_BYTE *)(v2119.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2119.n128_u64[0] + 64))();
      if (v714 && !v715)
      {
        v717 = v713[7];
        v716 = v713[8];
        if (v716 == v717)
          v717 = v713[10] - v713[9];
        if (v711 < v717)
          v717 = v711;
        if (v716 <= v712)
          v716 = v712;
        if (v716 == v717)
          v716 = v717 + v713[10] - v713[9];
        v713[7] = v717;
        v713[8] = v716;
      }
    }
  }
  if (v2118)
  {
    v718 = v2115;
    v719 = v2116;
    if (v2116 != v2115)
    {
      v720 = (_QWORD *)v2114.n128_u64[1];
      v721 = v2117;
      v722 = HIBYTE(v2117);
      if (v2114.n128_u64[0] && *(_BYTE *)(v2114.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2114.n128_u64[0] + 64))();
      if (v721 && !v722)
      {
        v724 = v720[7];
        v723 = v720[8];
        if (v723 == v724)
          v724 = v720[10] - v720[9];
        if (v718 < v724)
          v724 = v718;
        if (v723 <= v719)
          v723 = v719;
        if (v723 == v724)
          v723 = v724 + v720[10] - v720[9];
        v720[7] = v724;
        v720[8] = v723;
      }
    }
  }
  if (v2113)
  {
    v725 = v2110;
    v726 = v2111;
    if (v2111 != (void **)v2110)
    {
      v727 = v2109[1];
      v728 = v2112;
      v729 = HIBYTE(v2112);
      if (v2109[0] && *((_BYTE *)v2109[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2109[0] + 64))();
      if (v728 && !v729)
      {
        v731 = (char *)v727[7];
        v730 = (void **)v727[8];
        if (v730 == (void **)v731)
          v731 = (char *)(v727[10] - v727[9]);
        if (v725 < v731)
          v731 = v725;
        if (v730 <= v726)
          v730 = v726;
        if (v730 == (void **)v731)
          v730 = (void **)&v731[v727[10] - v727[9]];
        v727[7] = v731;
        v727[8] = v730;
      }
    }
  }
  if (v2136)
  {
    v732 = v2133;
    v733 = v2134;
    if (v2134 != v2133)
    {
      v734 = (_QWORD *)v2132.n128_u64[1];
      v735 = v2135;
      v736 = HIBYTE(v2135);
      if (v2132.n128_u64[0] && *(_BYTE *)(v2132.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2132.n128_u64[0] + 64))();
      if (v735 && !v736)
      {
        v738 = v734[7];
        v737 = v734[8];
        if (v737 == v738)
          v738 = v734[10] - v734[9];
        if (v732 < v738)
          v738 = v732;
        if (v737 <= v733)
          v737 = v733;
        if (v737 == v738)
          v737 = v738 + v734[10] - v734[9];
        v734[7] = v738;
        v734[8] = v737;
      }
    }
  }
  if (v2131)
  {
    v739 = v2128;
    v740 = v2129;
    if (v2129 != v2128)
    {
      v741 = (_QWORD *)v2127.n128_u64[1];
      v742 = v2130;
      v743 = HIBYTE(v2130);
      if (v2127.n128_u64[0] && *(_BYTE *)(v2127.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2127.n128_u64[0] + 64))();
      if (v742 && !v743)
      {
        v745 = v741[7];
        v744 = v741[8];
        if (v744 == v745)
          v745 = v741[10] - v741[9];
        if (v739 < v745)
          v745 = v739;
        if (v744 <= v740)
          v744 = v740;
        if (v744 == v745)
          v744 = v745 + v741[10] - v741[9];
        v741[7] = v745;
        v741[8] = v744;
      }
    }
  }
  if (*((_QWORD *)&v2126 + 1))
  {
    v746 = v2125;
    if (*((_QWORD *)&v2125 + 1) != (_QWORD)v2125)
    {
      v747 = (_QWORD *)__dst.n128_u64[1];
      v748 = v2126;
      v749 = BYTE1(v2126);
      if (__dst.n128_u64[0] && *(_BYTE *)(__dst.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)__dst.n128_u64[0] + 64))();
      if (v748 && !v749)
      {
        v751 = v747[7];
        v750 = v747[8];
        if (v750 == v751)
          v751 = v747[10] - v747[9];
        if ((unint64_t)v746 < v751)
          v751 = v746;
        if (v750 <= *((_QWORD *)&v746 + 1))
          v750 = *((_QWORD *)&v746 + 1);
        if (v750 == v751)
          v750 = v751 + v747[10] - v747[9];
        v747[7] = v751;
        v747[8] = v750;
      }
    }
  }
  if (v2146)
  {
    v752 = v2143;
    v753 = v2144;
    if (v2144 != v2143)
    {
      v754 = (_QWORD *)v2142.n128_u64[1];
      v755 = v2145;
      v756 = HIBYTE(v2145);
      if (v2142.n128_u64[0] && *(_BYTE *)(v2142.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2142.n128_u64[0] + 64))();
      if (v755 && !v756)
      {
        v758 = v754[7];
        v757 = v754[8];
        if (v757 == v758)
          v758 = v754[10] - v754[9];
        if (v752 < v758)
          v758 = v752;
        if (v757 <= v753)
          v757 = v753;
        if (v757 == v758)
          v757 = v758 + v754[10] - v754[9];
        v754[7] = v758;
        v754[8] = v757;
      }
    }
  }
  if (*(_QWORD *)&v2141[4])
  {
    v759 = *(_OWORD *)&v2139[28];
    if (*(_QWORD *)&v2139[36] != *(_QWORD *)&v2139[28])
    {
      v760 = *(_QWORD **)&v2139[20];
      v761 = v2140;
      v762 = BYTE1(v2140);
      if (*(_QWORD *)&v2139[12] && *(_BYTE *)(*(_QWORD *)&v2139[20] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)&v2139[12] + 64))();
      if (v761 && !v762)
      {
        v764 = v760[7];
        v763 = v760[8];
        if (v763 == v764)
          v764 = v760[10] - v760[9];
        if ((unint64_t)v759 < v764)
          v764 = v759;
        if (v763 <= *((_QWORD *)&v759 + 1))
          v763 = *((_QWORD *)&v759 + 1);
        if (v763 == v764)
          v763 = v764 + v760[10] - v760[9];
        v760[7] = v764;
        v760[8] = v763;
      }
    }
  }
  if (*(_QWORD *)&v2139[4])
  {
    v765 = *(_QWORD *)&buf[16];
    v766 = *(_QWORD *)&buf[24];
    if (*(_QWORD *)&buf[24] != *(_QWORD *)&buf[16])
    {
      v767 = *(_QWORD **)&buf[8];
      v768 = v2138;
      v769 = HIBYTE(v2138);
      if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)buf + 64))();
      if (v768 && !v769)
      {
        v771 = v767[7];
        v770 = v767[8];
        if (v770 == v771)
          v771 = v767[10] - v767[9];
        if (v765 < v771)
          v771 = v765;
        if (v770 <= v766)
          v770 = v766;
        if (v770 == v771)
          v770 = v771 + v767[10] - v767[9];
        v767[7] = v771;
        v767[8] = v770;
      }
    }
  }
  if (v2079)
  {
    v772 = v2076;
    v773 = v2077;
    if (v2077 != v2076)
    {
      v774 = (_QWORD *)v2075.n128_u64[1];
      v775 = v2078;
      v776 = HIBYTE(v2078);
      if (v2075.n128_u64[0] && *(_BYTE *)(v2075.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v2075.n128_u64[0] + 64))();
      if (v775 && !v776)
      {
        v778 = v774[7];
        v777 = v774[8];
        if (v777 == v778)
          v778 = v774[10] - v774[9];
        if (v772 < v778)
          v778 = v772;
        if (v777 <= v773)
          v777 = v773;
        if (v777 == v778)
          v777 = v778 + v774[10] - v774[9];
        v774[7] = v778;
        v774[8] = v777;
      }
    }
  }
  if (v2083)
  {
    v779 = *(_QWORD *)&v2080[16];
    v780 = v2081;
    if (v2081 != *(_QWORD *)&v2080[16])
    {
      v781 = *(_QWORD **)&v2080[8];
      v782 = v2082;
      v783 = HIBYTE(v2082);
      if (*(_QWORD *)v2080 && *(_BYTE *)(*(_QWORD *)&v2080[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v2080 + 64))();
      if (v782)
      {
LABEL_1676:
        if (!v783)
        {
          v1129 = v781[7];
          v1128 = v781[8];
          if (v1128 == v1129)
            v1129 = v781[10] - v781[9];
          if (v779 < v1129)
            v1129 = v779;
          if (v1128 <= v780)
            v1128 = v780;
          if (v1128 == v1129)
            v1128 = v1129 + v781[10] - v781[9];
          v781[7] = v1129;
          v781[8] = v1128;
        }
      }
    }
  }
LABEL_1686:
  if ((_DWORD)v2040)
  {
    for (k = 0; k != v2043; ++k)
    {
      v1131 = *((_QWORD *)v2084 + k);
      v1132 = geo::codec::VectorTile::daVinciMeshes(*v2048);
      v1133.i64[0] = v1131;
      v1133.i64[1] = HIDWORD(v1131);
      v2060 = v1133;
      v1134 = v1132 + (k << 6);
      v1135 = *(_QWORD *)(v1134 + 40);
      if (v1135)
        v1136 = 2;
      else
        v1136 = *(_QWORD *)(v1134 + 32) != 0;
      v2061 = *(unsigned int *)(v1134 + 12);
      v2063.n128_u64[0] = v1132 + (k << 6);
      v1137 = (unint64_t *)(v2064 + 16 * v1136 + 880);
      v2065.n128_u64[0] = v1136;
      v2059.i32[0] = *(_DWORD *)(v1134 + 16);
      if ((_DWORD)v1136)
      {
        if ((_DWORD)v1136 != 1)
        {
          v1138 = *v1137;
          v1139 = *(_QWORD *)(v2064 + 16 * v1136 + 888);
          __dst.n128_u64[0] = v1138;
          __dst.n128_u64[1] = v1139;
          if (v1139)
          {
            v1140 = (unint64_t *)(v1139 + 8);
            do
              v1141 = __ldxr(v1140);
            while (__stxr(v1141 + 1, v1140));
          }
          v2058.i64[0] = v1135;
          v1142 = (std::__shared_weak_count *)operator new(0xF8uLL);
          v1143 = v1142;
          v1142->__shared_owners_ = 0;
          v1144 = (unint64_t *)&v1142->__shared_owners_;
          v1142->__shared_weak_owners_ = 0;
          v1142->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0598;
          v1145 = v1142 + 1;
          v1146 = *(_QWORD *)(**(_QWORD **)(v1138 + 216) + 24);
          v1147 = *(std::__shared_weak_count **)(v1138 + 32);
          *(_QWORD *)buf = *(_QWORD *)(v1138 + 24);
          *(_QWORD *)&buf[8] = v1147;
          if (v1147)
          {
            v1148 = (unint64_t *)&v1147->__shared_owners_;
            do
              v1149 = __ldxr(v1148);
            while (__stxr(v1149 + 1, v1148));
            v1150 = *(_QWORD *)(**(_QWORD **)(v1138 + 216) + 24);
            ggl::BufferData::BufferData((uint64_t)&v1142[1], v1146, buf, v2060.i64[0] * v1150, v2060.i64[1] * v1150, 1);
            do
              v1151 = __ldaxr(v1148);
            while (__stlxr(v1151 - 1, v1148));
            if (!v1151)
            {
              ((void (*)(std::__shared_weak_count *))v1147->__on_zero_shared)(v1147);
              std::__shared_weak_count::__release_weak(v1147);
            }
          }
          else
          {
            ggl::BufferData::BufferData((uint64_t)&v1142[1], v1146, buf, v2060.i64[0] * v1146, v2060.i64[1] * v1146, 1);
          }
          v1143[9].__shared_weak_owners_ = (uint64_t)"DV Ground Distance Sub Vertex Data";
          v1143[10].__vftable = *(std::__shared_weak_count_vtbl **)(v1138 + 216);
          v1143[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B82E0;
          v1143[9].__shared_owners_ = (uint64_t)&unk_1E42B8300;
          v2109[0] = v1145;
          v2109[1] = v1143;
          v1210 = (char *)operator new(0xA8uLL);
          *((_QWORD *)v1210 + 1) = 0;
          *((_QWORD *)v1210 + 2) = 0;
          v2057 = (unsigned int *)(v1210 + 24);
          *(_QWORD *)v1210 = &off_1E42E4A48;
          do
            v1211 = __ldxr(v1144);
          while (__stxr(v1211 + 1, v1144));
          v2056.i64[0] = *(_QWORD *)(v2064 + 864);
          v1212 = *(std::__shared_weak_count **)(v2064 + 872);
          if (v1212)
          {
            v1213 = (unint64_t *)&v1212->__shared_owners_;
            do
              v1214 = __ldxr(v1213);
            while (__stxr(v1214 + 1, v1213));
          }
          if ((v1215 & 1) == 0
          {
            if ((v1463 & 1) == 0
            {
              ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::distanceCompressedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r;
            unk_1EE577C38 = 1;
          }
          *((_QWORD *)v1210 + 11) = 0;
          *((_QWORD *)v1210 + 7) = 0;
          *((_QWORD *)v1210 + 8) = 0;
          *((_DWORD *)v1210 + 18) = 0;
          *((_QWORD *)v1210 + 3) = &off_1E42BBC08;
          *((_QWORD *)v1210 + 4) = "DV Ground Tile Distance Sub-mesh";
          *((_QWORD *)v1210 + 5) = &unk_1E42BBC28;
          *((_QWORD *)v1210 + 6) = 0;
          *((_QWORD *)v1210 + 10) = &ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r;
          *((_QWORD *)v1210 + 12) = 0;
          *((_QWORD *)v1210 + 13) = 0;
          {
            v1464 = operator new();
            *(_QWORD *)(v1464 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v1464 + 24) = "GeoGL";
            *(_OWORD *)(v1464 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v1464 = &off_1E42B5668;
            *(_QWORD *)(v1464 + 8) = "GeoGL";
            *(_OWORD *)(v1464 + 72) = 0u;
            *(_OWORD *)(v1464 + 88) = 0u;
            *(_OWORD *)(v1464 + 104) = 0u;
            *(_OWORD *)(v1464 + 120) = 0u;
            *(_OWORD *)(v1464 + 136) = 0u;
            *(_OWORD *)(v1464 + 152) = 0u;
            *(_OWORD *)(v1464 + 168) = 0u;
            *(_OWORD *)(v1464 + 184) = 0u;
            *(_OWORD *)(v1464 + 200) = 0u;
            *(_OWORD *)(v1464 + 216) = 0u;
            *(_OWORD *)(v1464 + 232) = 0u;
            *(_QWORD *)(v1464 + 248) = 0;
            *(_OWORD *)(v1464 + 56) = 0u;
            v1465 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1464 + 56), 0);
            if ((_DWORD)v1465)
              geo::read_write_lock::logFailure(v1465, (uint64_t)"initialization", v1466);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v1464 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v1464 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v1464;
          }
          v1217 = ggl::Allocator::instance(void)::alloc;
          *((_QWORD *)v1210 + 18) = 0;
          *((_QWORD *)v1210 + 15) = 0;
          *((_QWORD *)v1210 + 16) = 0;
          *((_QWORD *)v1210 + 14) = v1217;
          {
            v1468 = operator new();
            *(_QWORD *)(v1468 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v1468 + 24) = "GeoGL";
            *(_OWORD *)(v1468 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v1468 = &off_1E42B5668;
            *(_QWORD *)(v1468 + 8) = "GeoGL";
            *(_OWORD *)(v1468 + 72) = 0u;
            *(_OWORD *)(v1468 + 88) = 0u;
            *(_OWORD *)(v1468 + 104) = 0u;
            *(_OWORD *)(v1468 + 120) = 0u;
            *(_OWORD *)(v1468 + 136) = 0u;
            *(_OWORD *)(v1468 + 152) = 0u;
            *(_OWORD *)(v1468 + 168) = 0u;
            *(_OWORD *)(v1468 + 184) = 0u;
            *(_OWORD *)(v1468 + 200) = 0u;
            *(_OWORD *)(v1468 + 216) = 0u;
            *(_OWORD *)(v1468 + 232) = 0u;
            *(_QWORD *)(v1468 + 248) = 0;
            *(_OWORD *)(v1468 + 56) = 0u;
            v1469 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1468 + 56), 0);
            if ((_DWORD)v1469)
              geo::read_write_lock::logFailure(v1469, (uint64_t)"initialization", v1470);
            v1471 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1468 + 48) = v1471;
            malloc_set_zone_name(v1471, "GeoGL");
            *(_QWORD *)(v1468 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v1468;
          }
          *((_QWORD *)v1210 + 19) = ggl::Allocator::instance(void)::alloc;
          *((_QWORD *)v1210 + 20) = 0;
          *((_QWORD *)v1210 + 17) = v1210 + 144;
          *((_QWORD *)v1210 + 3) = &off_1E42BDF38;
          *((_QWORD *)v1210 + 5) = &unk_1E42BDF58;
          *(_QWORD *)buf = v1145;
          *(_QWORD *)&buf[8] = v1143;
          do
            v1218 = __ldxr(v1144);
          while (__stxr(v1218 + 1, v1144));
          std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)(v1210 + 88), (uint64_t *)buf, (uint64_t *)&buf[16], 1uLL);
          v1219 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_1761;
          v1220 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v1221 = __ldaxr(v1220);
          while (__stlxr(v1221 - 1, v1220));
          if (!v1221)
          {
            ((void (*)(std::__shared_weak_count *))v1219->__on_zero_shared)(v1219);
            std::__shared_weak_count::__release_weak(v1219);
            if (v1212)
              goto LABEL_1762;
          }
          else
          {
LABEL_1761:
            if (v1212)
            {
LABEL_1762:
              v1222 = (unint64_t *)&v1212->__shared_owners_;
              do
                v1223 = __ldxr(v1222);
              while (__stxr(v1223 + 1, v1222));
            }
          }
          v1224 = (std::__shared_weak_count *)*((_QWORD *)v1210 + 16);
          *((_QWORD *)v1210 + 15) = v2056.i64[0];
          *((_QWORD *)v1210 + 16) = v1212;
          if (v1224)
          {
            v1225 = (unint64_t *)&v1224->__shared_owners_;
            do
              v1226 = __ldaxr(v1225);
            while (__stlxr(v1226 - 1, v1225));
            if (!v1226)
            {
              ((void (*)(std::__shared_weak_count *))v1224->__on_zero_shared)(v1224);
              std::__shared_weak_count::__release_weak(v1224);
            }
          }
          *((_QWORD *)v1210 + 3) = &off_1E42BC580;
          *((_QWORD *)v1210 + 5) = &unk_1E42BC5A0;
          v1135 = v2058.i64[0];
          if (v1212)
          {
            v1227 = (unint64_t *)&v1212->__shared_owners_;
            do
              v1228 = __ldaxr(v1227);
            while (__stlxr(v1228 - 1, v1227));
            if (!v1228)
            {
              ((void (*)(std::__shared_weak_count *))v1212->__on_zero_shared)(v1212);
              std::__shared_weak_count::__release_weak(v1212);
            }
          }
          do
            v1229 = __ldaxr(v1144);
          while (__stlxr(v1229 - 1, v1144));
          if (!v1229)
          {
            ((void (*)(std::__shared_weak_count *))v1143->__on_zero_shared)(v1143);
            std::__shared_weak_count::__release_weak(v1143);
          }
          v2068 = v2057;
          v2069 = (std::__shared_weak_count *)v1210;
          v1230 = v2065.n128_u64[0];
          v1231 = (std::__shared_weak_count *)v2109[1];
          if (v2109[1])
          {
            v1232 = (unint64_t *)((char *)v2109[1] + 8);
            do
              v1233 = __ldaxr(v1232);
            while (__stlxr(v1233 - 1, v1232));
            if (!v1233)
            {
              ((void (*)(std::__shared_weak_count *))v1231->__on_zero_shared)(v1231);
              std::__shared_weak_count::__release_weak(v1231);
            }
          }
          v1234 = (std::__shared_weak_count *)__dst.n128_u64[1];
          if (!__dst.n128_u64[1])
            goto LABEL_1905;
          v1235 = (unint64_t *)(__dst.n128_u64[1] + 8);
          do
            v1236 = __ldaxr(v1235);
          while (__stlxr(v1236 - 1, v1235));
          goto LABEL_1904;
        }
        v1152 = (unint64_t **)(v2064 + 16 * v1136 + 888);
        if (*((_BYTE *)*v2048 + 1956) == 1)
        {
          v1153 = *v1137;
          v1154 = *v1152;
          __dst.n128_u64[0] = v1153;
          __dst.n128_u64[1] = (unint64_t)v1154;
          if (v1154)
          {
            v1155 = v1154 + 1;
            do
              v1156 = __ldxr(v1155);
            while (__stxr(v1156 + 1, v1155));
          }
          v1157 = (std::__shared_weak_count *)operator new(0xF8uLL);
          v1158 = v1157;
          v1157->__shared_owners_ = 0;
          v1159 = (unint64_t *)&v1157->__shared_owners_;
          v1157->__shared_weak_owners_ = 0;
          v1157->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0528;
          v1160 = v1157 + 1;
          v1161 = *(_QWORD *)(**(_QWORD **)(v1153 + 216) + 24);
          v1162 = *(std::__shared_weak_count **)(v1153 + 32);
          *(_QWORD *)buf = *(_QWORD *)(v1153 + 24);
          *(_QWORD *)&buf[8] = v1162;
          if (v1162)
          {
            v1163 = (unint64_t *)&v1162->__shared_owners_;
            do
              v1164 = __ldxr(v1163);
            while (__stxr(v1164 + 1, v1163));
            v1165 = *(_QWORD *)(**(_QWORD **)(v1153 + 216) + 24);
            ggl::BufferData::BufferData((uint64_t)&v1157[1], v1161, buf, v2060.i64[0] * v1165, v2060.i64[1] * v1165, 1);
            do
              v1166 = __ldaxr(v1163);
            while (__stlxr(v1166 - 1, v1163));
            if (!v1166)
            {
              ((void (*)(std::__shared_weak_count *))v1162->__on_zero_shared)(v1162);
              std::__shared_weak_count::__release_weak(v1162);
            }
          }
          else
          {
            ggl::BufferData::BufferData((uint64_t)&v1157[1], v1161, buf, v2060.i64[0] * v1161, v2060.i64[1] * v1161, 1);
          }
          v1158[9].__shared_weak_owners_ = (uint64_t)"DV Ground Elevation Sub Vertex Data";
          v1158[10].__vftable = *(std::__shared_weak_count_vtbl **)(v1153 + 216);
          v1158[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8220;
          v1158[9].__shared_owners_ = (uint64_t)&unk_1E42B8240;
          v2109[0] = v1160;
          v2109[1] = v1158;
          v1237 = (char *)operator new(0xA8uLL);
          *((_QWORD *)v1237 + 1) = 0;
          *((_QWORD *)v1237 + 2) = 0;
          v2058.i64[0] = (uint64_t)(v1237 + 24);
          *(_QWORD *)v1237 = &off_1E42E4930;
          v1238 = &unk_1ECE44000;
          do
            v1239 = __ldxr(v1159);
          while (__stxr(v1239 + 1, v1159));
          v2056.i64[0] = *(_QWORD *)(v2064 + 864);
          v1240 = *(std::__shared_weak_count **)(v2064 + 872);
          if (v1240)
          {
            v1241 = (unint64_t *)&v1240->__shared_owners_;
            do
              v1242 = __ldxr(v1241);
            while (__stxr(v1242 + 1, v1241));
          }
          v2057 = (unsigned int *)v1160;
          if ((v1243 & 1) == 0
          {
            if ((v1472 & 1) == 0
            {
              ggl::MeshTyped<ggl::DaVinci::ElevationVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::elevationVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::ElevationVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevationVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE37170 = 1;
            v1238 = (_QWORD *)&unk_1ECE44000;
          }
          *((_QWORD *)v1237 + 11) = 0;
          *((_QWORD *)v1237 + 7) = 0;
          *((_QWORD *)v1237 + 8) = 0;
          *((_DWORD *)v1237 + 18) = 0;
          *((_QWORD *)v1237 + 3) = &off_1E42BBC08;
          *((_QWORD *)v1237 + 4) = "DV Ground Tile Elevation Sub-mesh";
          *((_QWORD *)v1237 + 5) = &unk_1E42BBC28;
          *((_QWORD *)v1237 + 6) = 0;
          *((_QWORD *)v1237 + 10) = &ggl::MeshTyped<ggl::DaVinci::ElevationVbo>::typedReflection(void)::r;
          *((_QWORD *)v1237 + 12) = 0;
          *((_QWORD *)v1237 + 13) = 0;
          {
            v1473 = operator new();
            *(_QWORD *)(v1473 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v1473 + 24) = "GeoGL";
            *(_OWORD *)(v1473 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v1473 = &off_1E42B5668;
            *(_QWORD *)(v1473 + 8) = "GeoGL";
            *(_OWORD *)(v1473 + 72) = 0u;
            *(_OWORD *)(v1473 + 88) = 0u;
            *(_OWORD *)(v1473 + 104) = 0u;
            *(_OWORD *)(v1473 + 120) = 0u;
            *(_OWORD *)(v1473 + 136) = 0u;
            *(_OWORD *)(v1473 + 152) = 0u;
            *(_OWORD *)(v1473 + 168) = 0u;
            *(_OWORD *)(v1473 + 184) = 0u;
            *(_OWORD *)(v1473 + 200) = 0u;
            *(_OWORD *)(v1473 + 216) = 0u;
            *(_OWORD *)(v1473 + 232) = 0u;
            *(_QWORD *)(v1473 + 248) = 0;
            *(_OWORD *)(v1473 + 56) = 0u;
            v1474 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1473 + 56), 0);
            if ((_DWORD)v1474)
              geo::read_write_lock::logFailure(v1474, (uint64_t)"initialization", v1475);
            v1476 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1473 + 48) = v1476;
            malloc_set_zone_name(v1476, "GeoGL");
            *(_QWORD *)(v1473 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v1238 = &unk_1ECE44000;
            ggl::Allocator::instance(void)::alloc = v1473;
          }
          v1245 = v1238[495];
          v1246 = v1238;
          *((_QWORD *)v1237 + 18) = 0;
          *((_QWORD *)v1237 + 15) = 0;
          *((_QWORD *)v1237 + 16) = 0;
          *((_QWORD *)v1237 + 14) = v1245;
          {
            v1477 = operator new();
            *(_QWORD *)(v1477 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v1477 + 24) = "GeoGL";
            *(_OWORD *)(v1477 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v1477 = &off_1E42B5668;
            *(_QWORD *)(v1477 + 8) = "GeoGL";
            *(_OWORD *)(v1477 + 72) = 0u;
            *(_OWORD *)(v1477 + 88) = 0u;
            *(_OWORD *)(v1477 + 104) = 0u;
            *(_OWORD *)(v1477 + 120) = 0u;
            *(_OWORD *)(v1477 + 136) = 0u;
            *(_OWORD *)(v1477 + 152) = 0u;
            *(_OWORD *)(v1477 + 168) = 0u;
            *(_OWORD *)(v1477 + 184) = 0u;
            *(_OWORD *)(v1477 + 200) = 0u;
            *(_OWORD *)(v1477 + 216) = 0u;
            *(_OWORD *)(v1477 + 232) = 0u;
            *(_QWORD *)(v1477 + 248) = 0;
            *(_OWORD *)(v1477 + 56) = 0u;
            v1478 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1477 + 56), 0);
            if ((_DWORD)v1478)
              geo::read_write_lock::logFailure(v1478, (uint64_t)"initialization", v1479);
            v1480 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1477 + 48) = v1480;
            malloc_set_zone_name(v1480, "GeoGL");
            *(_QWORD *)(v1477 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v1246 = &unk_1ECE44000;
            ggl::Allocator::instance(void)::alloc = v1477;
          }
          *((_QWORD *)v1237 + 19) = v1246[495];
          *((_QWORD *)v1237 + 20) = 0;
          *((_QWORD *)v1237 + 17) = v1237 + 144;
          *((_QWORD *)v1237 + 3) = &off_1E42BDE78;
          *((_QWORD *)v1237 + 5) = &unk_1E42BDE98;
          *(_QWORD *)buf = v2057;
          *(_QWORD *)&buf[8] = v1158;
          do
            v1247 = __ldxr(v1159);
          while (__stxr(v1247 + 1, v1159));
          std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)(v1237 + 88), (uint64_t *)buf, (uint64_t *)&buf[16], 1uLL);
          v1248 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_1803;
          v1249 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v1250 = __ldaxr(v1249);
          while (__stlxr(v1250 - 1, v1249));
          if (!v1250)
          {
            ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
            std::__shared_weak_count::__release_weak(v1248);
            if (v1240)
              goto LABEL_1804;
          }
          else
          {
LABEL_1803:
            if (v1240)
            {
LABEL_1804:
              v1251 = (unint64_t *)&v1240->__shared_owners_;
              do
                v1252 = __ldxr(v1251);
              while (__stxr(v1252 + 1, v1251));
            }
          }
          v1253 = (std::__shared_weak_count *)*((_QWORD *)v1237 + 16);
          *((_QWORD *)v1237 + 15) = v2056.i64[0];
          *((_QWORD *)v1237 + 16) = v1240;
          if (v1253)
          {
            v1254 = (unint64_t *)&v1253->__shared_owners_;
            do
              v1255 = __ldaxr(v1254);
            while (__stlxr(v1255 - 1, v1254));
            if (!v1255)
            {
              ((void (*)(std::__shared_weak_count *))v1253->__on_zero_shared)(v1253);
              std::__shared_weak_count::__release_weak(v1253);
            }
          }
          *((_QWORD *)v1237 + 3) = &off_1E42BC3D0;
          *((_QWORD *)v1237 + 5) = &unk_1E42BC3F0;
          if (v1240)
          {
            v1256 = (unint64_t *)&v1240->__shared_owners_;
            do
              v1257 = __ldaxr(v1256);
            while (__stlxr(v1257 - 1, v1256));
            if (!v1257)
            {
              ((void (*)(std::__shared_weak_count *))v1240->__on_zero_shared)(v1240);
              std::__shared_weak_count::__release_weak(v1240);
            }
          }
          do
            v1258 = __ldaxr(v1159);
          while (__stlxr(v1258 - 1, v1159));
          if (!v1258)
          {
            ((void (*)(std::__shared_weak_count *))v1158->__on_zero_shared)(v1158);
            std::__shared_weak_count::__release_weak(v1158);
          }
          v2068 = (unsigned int *)v2058.i64[0];
          v2069 = (std::__shared_weak_count *)v1237;
          v1230 = v2065.n128_u64[0];
          v1259 = (std::__shared_weak_count *)v2109[1];
          if (v2109[1])
          {
            v1260 = (unint64_t *)((char *)v2109[1] + 8);
            do
              v1261 = __ldaxr(v1260);
            while (__stlxr(v1261 - 1, v1260));
            if (!v1261)
            {
              ((void (*)(std::__shared_weak_count *))v1259->__on_zero_shared)(v1259);
              std::__shared_weak_count::__release_weak(v1259);
            }
          }
          v1234 = (std::__shared_weak_count *)__dst.n128_u64[1];
          if (!__dst.n128_u64[1])
            goto LABEL_1905;
          v1304 = (unint64_t *)(__dst.n128_u64[1] + 8);
          do
            v1236 = __ldaxr(v1304);
          while (__stlxr(v1236 - 1, v1304));
          goto LABEL_1904;
        }
        v1182 = *v1137;
        v1183 = *v1152;
        v2109[0] = (void *)v1182;
        v2109[1] = v1183;
        if (v1183)
        {
          v1184 = v1183 + 1;
          do
            v1185 = __ldxr(v1184);
          while (__stxr(v1185 + 1, v1184));
        }
        v1186 = operator new(0xF8uLL);
        v1187 = v1186;
        v1186[1] = 0;
        v1188 = v1186 + 1;
        v1186[2] = 0;
        *v1186 = &off_1E42E0640;
        v1189 = v1186 + 3;
        v1190 = *(_QWORD *)(**(_QWORD **)(v1182 + 216) + 24);
        v1191 = *(std::__shared_weak_count **)(v1182 + 32);
        *(_QWORD *)buf = *(_QWORD *)(v1182 + 24);
        *(_QWORD *)&buf[8] = v1191;
        if (v1191)
        {
          v1192 = (unint64_t *)&v1191->__shared_owners_;
          do
            v1193 = __ldxr(v1192);
          while (__stxr(v1193 + 1, v1192));
          v1194 = *(_QWORD *)(**(_QWORD **)(v1182 + 216) + 24);
          ggl::BufferData::BufferData((uint64_t)(v1186 + 3), v1190, buf, v2060.i64[0] * v1194, v2060.i64[1] * v1194, 1);
          do
            v1195 = __ldaxr(v1192);
          while (__stlxr(v1195 - 1, v1192));
          if (!v1195)
          {
            ((void (*)(std::__shared_weak_count *))v1191->__on_zero_shared)(v1191);
            std::__shared_weak_count::__release_weak(v1191);
          }
        }
        else
        {
          ggl::BufferData::BufferData((uint64_t)(v1186 + 3), v1190, buf, v2060.i64[0] * v1190, v2060.i64[1] * v1190, 1);
        }
        v1187[29] = "DV Ground Elevation Sub Vertex Data";
        v1187[30] = *(_QWORD *)(v1182 + 216);
        v1187[3] = &off_1E42B8360;
        v1187[28] = &unk_1E42B8380;
        *(_QWORD *)v2080 = v1189;
        *(_QWORD *)&v2080[8] = v1187;
        v1262 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v1263 = v1262;
        v1262->__shared_owners_ = 0;
        v1262->__shared_weak_owners_ = 0;
        v1262->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AB8;
        v1264 = (unsigned int *)&v1262[1];
        *(_QWORD *)buf = v1189;
        *(_QWORD *)&buf[8] = v1187;
        do
          v1265 = __ldxr(v1188);
        while (__stxr(v1265 + 1, v1188));
        v1266 = *(std::__shared_weak_count **)(v2064 + 872);
        __dst.n128_u64[0] = *(_QWORD *)(v2064 + 864);
        __dst.n128_u64[1] = (unint64_t)v1266;
        if (v1266)
        {
          v1267 = (unint64_t *)&v1266->__shared_owners_;
          v1230 = v2065.n128_u64[0];
          do
            v1268 = __ldxr(v1267);
          while (__stxr(v1268 + 1, v1267));
          ggl::DaVinci::ElevationCompressedMesh::ElevationCompressedMesh((uint64_t)&v1262[1], (uint64_t)"DV Ground Tile Elevation Sub-mesh", (uint64_t *)buf, (uint64_t *)&__dst);
          do
            v1269 = __ldaxr(v1267);
          while (__stlxr(v1269 - 1, v1267));
          if (!v1269)
          {
            ((void (*)(std::__shared_weak_count *))v1266->__on_zero_shared)(v1266);
            std::__shared_weak_count::__release_weak(v1266);
          }
        }
        else
        {
          ggl::DaVinci::ElevationCompressedMesh::ElevationCompressedMesh((uint64_t)&v1262[1], (uint64_t)"DV Ground Tile Elevation Sub-mesh", (uint64_t *)buf, (uint64_t *)&__dst);
          v1230 = v2065.n128_u64[0];
        }
        v1286 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v1287 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v1288 = __ldaxr(v1287);
          while (__stlxr(v1288 - 1, v1287));
          if (!v1288)
          {
            ((void (*)(std::__shared_weak_count *))v1286->__on_zero_shared)(v1286);
            std::__shared_weak_count::__release_weak(v1286);
          }
        }
        v2068 = v1264;
        v2069 = v1263;
        v1289 = *(std::__shared_weak_count **)&v2080[8];
        if (*(_QWORD *)&v2080[8])
        {
          v1290 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
          do
            v1291 = __ldaxr(v1290);
          while (__stlxr(v1291 - 1, v1290));
          if (!v1291)
          {
            ((void (*)(std::__shared_weak_count *))v1289->__on_zero_shared)(v1289);
            std::__shared_weak_count::__release_weak(v1289);
          }
        }
        v1234 = (std::__shared_weak_count *)v2109[1];
        if (!v2109[1])
          goto LABEL_1905;
        v1305 = (unint64_t *)((char *)v2109[1] + 8);
        do
          v1236 = __ldaxr(v1305);
        while (__stlxr(v1236 - 1, v1305));
      }
      else
      {
        v1167 = (void **)(v2064 + 16 * v1136 + 888);
        if (*((_BYTE *)*v2048 + 1956) == 1)
        {
          v1168 = *v1137;
          v1169 = (unint64_t *)*v1167;
          v2109[0] = (void *)v1168;
          v2109[1] = v1169;
          if (v1169)
          {
            v1170 = v1169 + 1;
            do
              v1171 = __ldxr(v1170);
            while (__stxr(v1171 + 1, v1170));
          }
          v1172 = operator new(0xF8uLL);
          v1173 = v1172;
          v1172[1] = 0;
          v1174 = v1172 + 1;
          v1172[2] = 0;
          *v1172 = &off_1E42E04F0;
          v1175 = v1172 + 3;
          v1176 = *(_QWORD *)(**(_QWORD **)(v1168 + 216) + 24);
          v1177 = *(std::__shared_weak_count **)(v1168 + 32);
          *(_QWORD *)buf = *(_QWORD *)(v1168 + 24);
          *(_QWORD *)&buf[8] = v1177;
          if (v1177)
          {
            v1178 = (unint64_t *)&v1177->__shared_owners_;
            do
              v1179 = __ldxr(v1178);
            while (__stxr(v1179 + 1, v1178));
            v1180 = *(_QWORD *)(**(_QWORD **)(v1168 + 216) + 24);
            ggl::BufferData::BufferData((uint64_t)(v1172 + 3), v1176, buf, v2060.i64[0] * v1180, v2060.i64[1] * v1180, 1);
            do
              v1181 = __ldaxr(v1178);
            while (__stlxr(v1181 - 1, v1178));
            if (!v1181)
            {
              ((void (*)(std::__shared_weak_count *))v1177->__on_zero_shared)(v1177);
              std::__shared_weak_count::__release_weak(v1177);
            }
          }
          else
          {
            ggl::BufferData::BufferData((uint64_t)(v1172 + 3), v1176, buf, v2060.i64[0] * v1176, v2060.i64[1] * v1176, 1);
          }
          v1173[29] = "DV Ground Tile Textured Sub Vertex Data";
          v1173[30] = *(_QWORD *)(v1168 + 216);
          v1173[3] = &off_1E42B81E0;
          v1173[28] = &unk_1E42B8200;
          *(_QWORD *)v2080 = v1175;
          *(_QWORD *)&v2080[8] = v1173;
          v1270 = (std::__shared_weak_count *)operator new(0xA8uLL);
          v1271 = v1270;
          v1270->__shared_owners_ = 0;
          v1270->__shared_weak_owners_ = 0;
          v1270->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E48F8;
          v1272 = (unsigned int *)&v1270[1];
          *(_QWORD *)buf = v1175;
          *(_QWORD *)&buf[8] = v1173;
          do
            v1273 = __ldxr(v1174);
          while (__stxr(v1273 + 1, v1174));
          v1274 = *(std::__shared_weak_count **)(v2064 + 872);
          __dst.n128_u64[0] = *(_QWORD *)(v2064 + 864);
          __dst.n128_u64[1] = (unint64_t)v1274;
          if (v1274)
          {
            v1275 = (unint64_t *)&v1274->__shared_owners_;
            v1230 = v2065.n128_u64[0];
            do
              v1276 = __ldxr(v1275);
            while (__stxr(v1276 + 1, v1275));
            ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)&v1270[1], (uint64_t)"DV Ground Tile Textured Sub-mesh", (uint64_t *)buf, (uint64_t *)&__dst);
            do
              v1277 = __ldaxr(v1275);
            while (__stlxr(v1277 - 1, v1275));
            if (!v1277)
            {
              ((void (*)(std::__shared_weak_count *))v1274->__on_zero_shared)(v1274);
              std::__shared_weak_count::__release_weak(v1274);
            }
          }
          else
          {
            ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)&v1270[1], (uint64_t)"DV Ground Tile Textured Sub-mesh", (uint64_t *)buf, (uint64_t *)&__dst);
            v1230 = v2065.n128_u64[0];
          }
          v1292 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v1293 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v1294 = __ldaxr(v1293);
            while (__stlxr(v1294 - 1, v1293));
            if (!v1294)
            {
              ((void (*)(std::__shared_weak_count *))v1292->__on_zero_shared)(v1292);
              std::__shared_weak_count::__release_weak(v1292);
            }
          }
          v2068 = v1272;
          v2069 = v1271;
          v1295 = *(std::__shared_weak_count **)&v2080[8];
          if (*(_QWORD *)&v2080[8])
          {
            v1296 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
            do
              v1297 = __ldaxr(v1296);
            while (__stlxr(v1297 - 1, v1296));
            if (!v1297)
            {
              ((void (*)(std::__shared_weak_count *))v1295->__on_zero_shared)(v1295);
              std::__shared_weak_count::__release_weak(v1295);
            }
          }
          v1234 = (std::__shared_weak_count *)v2109[1];
          if (!v2109[1])
            goto LABEL_1905;
          v1306 = (unint64_t *)((char *)v2109[1] + 8);
          do
            v1236 = __ldaxr(v1306);
          while (__stlxr(v1236 - 1, v1306));
        }
        else
        {
          v1196 = *v1137;
          v1197 = (unint64_t *)*v1167;
          v2109[0] = (void *)v1196;
          v2109[1] = v1197;
          if (v1197)
          {
            v1198 = v1197 + 1;
            do
              v1199 = __ldxr(v1198);
            while (__stxr(v1199 + 1, v1198));
          }
          v1200 = operator new(0xF8uLL);
          v1201 = v1200;
          v1200[1] = 0;
          v1202 = v1200 + 1;
          v1200[2] = 0;
          *v1200 = &off_1E42E0608;
          v1203 = v1200 + 3;
          v1204 = *(_QWORD *)(**(_QWORD **)(v1196 + 216) + 24);
          v1205 = *(std::__shared_weak_count **)(v1196 + 32);
          *(_QWORD *)buf = *(_QWORD *)(v1196 + 24);
          *(_QWORD *)&buf[8] = v1205;
          if (v1205)
          {
            v1206 = (unint64_t *)&v1205->__shared_owners_;
            do
              v1207 = __ldxr(v1206);
            while (__stxr(v1207 + 1, v1206));
            v1208 = *(_QWORD *)(**(_QWORD **)(v1196 + 216) + 24);
            ggl::BufferData::BufferData((uint64_t)(v1200 + 3), v1204, buf, v2060.i64[0] * v1208, v2060.i64[1] * v1208, 1);
            do
              v1209 = __ldaxr(v1206);
            while (__stlxr(v1209 - 1, v1206));
            if (!v1209)
            {
              ((void (*)(std::__shared_weak_count *))v1205->__on_zero_shared)(v1205);
              std::__shared_weak_count::__release_weak(v1205);
            }
          }
          else
          {
            ggl::BufferData::BufferData((uint64_t)(v1200 + 3), v1204, buf, v2060.i64[0] * v1204, v2060.i64[1] * v1204, 1);
          }
          v1201[29] = "DV Ground Tile Textured Sub Vertex Data";
          v1201[30] = *(_QWORD *)(v1196 + 216);
          v1201[3] = &off_1E42B8320;
          v1201[28] = &unk_1E42B8340;
          *(_QWORD *)v2080 = v1203;
          *(_QWORD *)&v2080[8] = v1201;
          v1278 = (std::__shared_weak_count *)operator new(0xA8uLL);
          v1279 = v1278;
          v1278->__shared_owners_ = 0;
          v1278->__shared_weak_owners_ = 0;
          v1278->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A80;
          v1280 = (unsigned int *)&v1278[1];
          *(_QWORD *)buf = v1203;
          *(_QWORD *)&buf[8] = v1201;
          do
            v1281 = __ldxr(v1202);
          while (__stxr(v1281 + 1, v1202));
          v1282 = *(std::__shared_weak_count **)(v2064 + 872);
          __dst.n128_u64[0] = *(_QWORD *)(v2064 + 864);
          __dst.n128_u64[1] = (unint64_t)v1282;
          if (v1282)
          {
            v1283 = (unint64_t *)&v1282->__shared_owners_;
            v1230 = v2065.n128_u64[0];
            do
              v1284 = __ldxr(v1283);
            while (__stxr(v1284 + 1, v1283));
            ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((uint64_t)&v1278[1], (uint64_t)"DV Ground Tile Textured Sub-mesh", (uint64_t *)buf, (uint64_t *)&__dst);
            do
              v1285 = __ldaxr(v1283);
            while (__stlxr(v1285 - 1, v1283));
            if (!v1285)
            {
              ((void (*)(std::__shared_weak_count *))v1282->__on_zero_shared)(v1282);
              std::__shared_weak_count::__release_weak(v1282);
            }
          }
          else
          {
            ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((uint64_t)&v1278[1], (uint64_t)"DV Ground Tile Textured Sub-mesh", (uint64_t *)buf, (uint64_t *)&__dst);
            v1230 = v2065.n128_u64[0];
          }
          v1298 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v1299 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v1300 = __ldaxr(v1299);
            while (__stlxr(v1300 - 1, v1299));
            if (!v1300)
            {
              ((void (*)(std::__shared_weak_count *))v1298->__on_zero_shared)(v1298);
              std::__shared_weak_count::__release_weak(v1298);
            }
          }
          v2068 = v1280;
          v2069 = v1279;
          v1301 = *(std::__shared_weak_count **)&v2080[8];
          if (*(_QWORD *)&v2080[8])
          {
            v1302 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
            do
              v1303 = __ldaxr(v1302);
            while (__stlxr(v1303 - 1, v1302));
            if (!v1303)
            {
              ((void (*)(std::__shared_weak_count *))v1301->__on_zero_shared)(v1301);
              std::__shared_weak_count::__release_weak(v1301);
            }
          }
          v1234 = (std::__shared_weak_count *)v2109[1];
          if (!v2109[1])
          {
LABEL_1905:
            if (v1135)
              goto LABEL_1906;
            goto LABEL_1971;
          }
          v1307 = (unint64_t *)((char *)v2109[1] + 8);
          do
            v1236 = __ldaxr(v1307);
          while (__stlxr(v1236 - 1, v1307));
        }
      }
LABEL_1904:
      if (v1236)
        goto LABEL_1905;
      ((void (*)(std::__shared_weak_count *))v1234->__on_zero_shared)(v1234);
      std::__shared_weak_count::__release_weak(v1234);
      if (v1135)
        goto LABEL_1906;
LABEL_1971:
      v2066 = v2068;
      v2067 = v2069;
      if (v2069)
      {
        v1356 = &v2069->__shared_owners_;
        do
          v1357 = __ldxr((unint64_t *)v1356);
        while (__stxr(v1357 + 1, (unint64_t *)v1356));
      }
      v1358 = *(_QWORD *)(v2064 + 16 * v1230 + 720);
      v1360 = *(_QWORD *)(v1358 + 24);
      v1359 = *(_QWORD *)(v1358 + 32);
      __dst.n128_u64[0] = v1360;
      __dst.n128_u64[1] = v1359;
      if (v1359)
      {
        v1361 = (unint64_t *)(v1359 + 8);
        do
          v1362 = __ldxr(v1361);
        while (__stxr(v1362 + 1, v1361));
      }
      if (!v1360)
        goto LABEL_2014;
      v1363 = (unint64_t *)operator new(0xE0uLL);
      v1364 = v1363;
      v1363[1] = 0;
      v1365 = v1363 + 1;
      v1363[2] = 0;
      *v1363 = (unint64_t)&off_1E42DF488;
      v1366 = v1363 + 3;
      v1367 = (std::__shared_weak_count *)__dst.n128_u64[1];
      *(_QWORD *)buf = v1360;
      *(_QWORD *)&buf[8] = __dst.n128_u64[1];
      if (__dst.n128_u64[1])
      {
        v1368 = (unint64_t *)(__dst.n128_u64[1] + 8);
        do
          v1369 = __ldxr(v1368);
        while (__stxr(v1369 + 1, v1368));
        ggl::BufferData::BufferData((uint64_t)(v1363 + 3), 4, buf, v2060.i64[0], v2060.i64[1], 1);
        do
          v1370 = __ldaxr(v1368);
        while (__stlxr(v1370 - 1, v1368));
        if (!v1370)
        {
          ((void (*)(std::__shared_weak_count *))v1367->__on_zero_shared)(v1367);
          std::__shared_weak_count::__release_weak(v1367);
        }
      }
      else
      {
        ggl::BufferData::BufferData((uint64_t)(v1363 + 3), 4, buf, v2060.i64[0], v2060.i64[1], 1);
      }
      v1364[3] = (unint64_t)&off_1E42B6F28;
      v2109[0] = v1366;
      v2109[1] = v1364;
      *(_QWORD *)v2080 = v1366;
      *(_QWORD *)&v2080[8] = v1364;
      do
        v1371 = __ldxr(v1365);
      while (__stxr(v1371 + 1, v1365));
      v1373 = (uint64_t **)(v2066 + 30);
      v1372 = (uint64_t *)*((_QWORD *)v2066 + 15);
      if (v1372)
      {
        do
        {
          v1373 = (uint64_t **)v1372;
          if (!v1372[4])
            goto LABEL_1995;
          v1372 = (uint64_t *)*v1372;
        }
        while (*v1373);
      }
      v1374 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2066 + 16) + 16))(*((_QWORD *)v2066 + 16), 56, 8);
      *v1374 = 0;
      v1374[1] = 0;
      v1374[5] = 0;
      v1374[6] = 0;
      v1374[4] = 0;
      v1374[2] = (uint64_t)v1373;
      *v1373 = v1374;
      v1375 = **((_QWORD **)v2066 + 14);
      v1376 = v1374;
      if (v1375)
      {
        *((_QWORD *)v2066 + 14) = v1375;
        v1376 = *v1373;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v2066 + 15), v1376);
      ++*((_QWORD *)v2066 + 17);
      v1364 = *(unint64_t **)&v2080[8];
      v1366 = *(void **)v2080;
      if (*(_QWORD *)&v2080[8])
      {
        v1373 = (uint64_t **)v1374;
LABEL_1995:
        v1230 = v2065.n128_u64[0];
        v1377 = v1364 + 1;
        do
          v1378 = __ldxr(v1377);
        while (__stxr(v1378 + 1, v1377));
        v1374 = (uint64_t *)v1373;
        goto LABEL_1999;
      }
      v1230 = v2065.n128_u64[0];
LABEL_1999:
      v1379 = (std::__shared_weak_count *)v1374[6];
      v1374[5] = (uint64_t)v1366;
      v1374[6] = (uint64_t)v1364;
      if (v1379)
      {
        v1380 = (unint64_t *)&v1379->__shared_owners_;
        do
          v1381 = __ldaxr(v1380);
        while (__stlxr(v1381 - 1, v1380));
        if (!v1381)
        {
          ((void (*)(std::__shared_weak_count *))v1379->__on_zero_shared)(v1379);
          std::__shared_weak_count::__release_weak(v1379);
        }
      }
      v1382 = *(std::__shared_weak_count **)&v2080[8];
      if (!*(_QWORD *)&v2080[8])
        goto LABEL_2008;
      v1383 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
      do
        v1384 = __ldaxr(v1383);
      while (__stlxr(v1384 - 1, v1383));
      if (!v1384)
      {
        ((void (*)(std::__shared_weak_count *))v1382->__on_zero_shared)(v1382);
        std::__shared_weak_count::__release_weak(v1382);
        v1385 = (std::__shared_weak_count *)v2109[1];
        if (!v2109[1])
          goto LABEL_2014;
      }
      else
      {
LABEL_2008:
        v1385 = (std::__shared_weak_count *)v2109[1];
        if (!v2109[1])
          goto LABEL_2014;
      }
      v1386 = (unint64_t *)&v1385->__shared_owners_;
      do
        v1387 = __ldaxr(v1386);
      while (__stlxr(v1387 - 1, v1386));
      if (!v1387)
      {
        ((void (*)(std::__shared_weak_count *))v1385->__on_zero_shared)(v1385);
        std::__shared_weak_count::__release_weak(v1385);
      }
LABEL_2014:
      v1388 = *(_QWORD *)(v2064 + 16 * v1230 + 768);
      v1390 = *(void **)(v1388 + 24);
      v1389 = *(unint64_t **)(v1388 + 32);
      v2109[0] = v1390;
      v2109[1] = v1389;
      if (v1389)
      {
        v1391 = v1389 + 1;
        do
          v1392 = __ldxr(v1391);
        while (__stxr(v1392 + 1, v1391));
      }
      if (!v1390)
        goto LABEL_2058;
      v1393 = operator new(0xE0uLL);
      v1394 = v1393;
      v1393[1] = 0;
      v1395 = v1393 + 1;
      v1393[2] = 0;
      *v1393 = &off_1E42DF4C0;
      v1396 = v1393 + 3;
      v1397 = (std::__shared_weak_count *)v2109[1];
      *(_QWORD *)buf = v1390;
      *(void **)&buf[8] = v2109[1];
      if (v2109[1])
      {
        v1398 = (unint64_t *)((char *)v2109[1] + 8);
        do
          v1399 = __ldxr(v1398);
        while (__stxr(v1399 + 1, v1398));
        ggl::BufferData::BufferData((uint64_t)(v1393 + 3), 4, buf, v2060.i64[0], v2060.i64[1], 1);
        do
          v1400 = __ldaxr(v1398);
        while (__stlxr(v1400 - 1, v1398));
        if (!v1400)
        {
          ((void (*)(std::__shared_weak_count *))v1397->__on_zero_shared)(v1397);
          std::__shared_weak_count::__release_weak(v1397);
        }
      }
      else
      {
        ggl::BufferData::BufferData((uint64_t)(v1393 + 3), 4, buf, v2060.i64[0], v2060.i64[1], 1);
      }
      v1394[3] = &off_1E42B6F48;
      v2075.n128_u64[0] = (unint64_t)v1396;
      v2075.n128_u64[1] = (unint64_t)v1394;
      __b.n128_u64[0] = (unint64_t)v1396;
      __b.n128_u64[1] = (unint64_t)v1394;
      do
        v1401 = __ldxr(v1395);
      while (__stxr(v1401 + 1, v1395));
      v1403 = (uint64_t **)(v2066 + 30);
      v1402 = (uint64_t *)*((_QWORD *)v2066 + 15);
      if (v1402)
      {
        while (1)
        {
          while (1)
          {
            v1404 = (uint64_t **)v1402;
            v1405 = v1402[4];
            if (v1405 < 2)
              break;
            v1402 = *v1404;
            v1403 = v1404;
            if (!*v1404)
              goto LABEL_2035;
          }
          if (v1405)
            goto LABEL_2039;
          v1402 = v1404[1];
          if (!v1402)
          {
            v1403 = v1404 + 1;
            goto LABEL_2035;
          }
        }
      }
      v1404 = (uint64_t **)(v2066 + 30);
LABEL_2035:
      v1406 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2066 + 16) + 16))(*((_QWORD *)v2066 + 16), 56, 8);
      v1406[5] = 0;
      v1406[6] = 0;
      v1406[4] = 1;
      *v1406 = 0;
      v1406[1] = 0;
      v1406[2] = (uint64_t)v1404;
      *v1403 = v1406;
      v1407 = **((_QWORD **)v2066 + 14);
      v1408 = v1406;
      if (v1407)
      {
        *((_QWORD *)v2066 + 14) = v1407;
        v1408 = *v1403;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v2066 + 15), v1408);
      ++*((_QWORD *)v2066 + 17);
      v1394 = (_QWORD *)__b.n128_u64[1];
      v1396 = (_QWORD *)__b.n128_u64[0];
      if (__b.n128_u64[1])
      {
        v1404 = (uint64_t **)v1406;
LABEL_2039:
        v1230 = v2065.n128_u64[0];
        v1409 = v1394 + 1;
        do
          v1410 = __ldxr(v1409);
        while (__stxr(v1410 + 1, v1409));
        v1406 = (uint64_t *)v1404;
        goto LABEL_2043;
      }
      v1230 = v2065.n128_u64[0];
LABEL_2043:
      v1411 = (std::__shared_weak_count *)v1406[6];
      v1406[5] = (uint64_t)v1396;
      v1406[6] = (uint64_t)v1394;
      if (v1411)
      {
        v1412 = (unint64_t *)&v1411->__shared_owners_;
        do
          v1413 = __ldaxr(v1412);
        while (__stlxr(v1413 - 1, v1412));
        if (!v1413)
        {
          ((void (*)(std::__shared_weak_count *))v1411->__on_zero_shared)(v1411);
          std::__shared_weak_count::__release_weak(v1411);
        }
      }
      v1414 = (std::__shared_weak_count *)__b.n128_u64[1];
      if (!__b.n128_u64[1])
        goto LABEL_2052;
      v1415 = (unint64_t *)(__b.n128_u64[1] + 8);
      do
        v1416 = __ldaxr(v1415);
      while (__stlxr(v1416 - 1, v1415));
      if (!v1416)
      {
        ((void (*)(std::__shared_weak_count *))v1414->__on_zero_shared)(v1414);
        std::__shared_weak_count::__release_weak(v1414);
        v1417 = (std::__shared_weak_count *)v2075.n128_u64[1];
        if (!v2075.n128_u64[1])
          goto LABEL_2058;
      }
      else
      {
LABEL_2052:
        v1417 = (std::__shared_weak_count *)v2075.n128_u64[1];
        if (!v2075.n128_u64[1])
          goto LABEL_2058;
      }
      v1418 = (unint64_t *)&v1417->__shared_owners_;
      do
        v1419 = __ldaxr(v1418);
      while (__stlxr(v1419 - 1, v1418));
      if (!v1419)
      {
        ((void (*)(std::__shared_weak_count *))v1417->__on_zero_shared)(v1417);
        std::__shared_weak_count::__release_weak(v1417);
      }
LABEL_2058:
      v1420 = *(_QWORD *)(v2064 + 16 * v1230 + 816);
      v1422 = *(_QWORD *)(v1420 + 24);
      v1421 = *(_QWORD *)(v1420 + 32);
      v2075.n128_u64[0] = v1422;
      v2075.n128_u64[1] = v1421;
      if (v1421)
      {
        v1423 = (unint64_t *)(v1421 + 8);
        do
          v1424 = __ldxr(v1423);
        while (__stxr(v1424 + 1, v1423));
      }
      if (!v1422)
      {
LABEL_2100:
        v1452 = (std::__shared_weak_count *)v2075.n128_u64[1];
        if (!v2075.n128_u64[1])
          goto LABEL_2105;
        goto LABEL_2101;
      }
      v1425 = (std::__shared_weak_count *)operator new(0xE0uLL);
      v1426 = v1425;
      v1425->__shared_owners_ = 0;
      v1427 = (unint64_t *)&v1425->__shared_owners_;
      v1425->__shared_weak_owners_ = 0;
      v1425->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF418;
      v1428 = &v1425[1].__vftable;
      v1429 = (std::__shared_weak_count *)v2075.n128_u64[1];
      *(_QWORD *)buf = v1422;
      *(_QWORD *)&buf[8] = v2075.n128_u64[1];
      if (v2075.n128_u64[1])
      {
        v1430 = (unint64_t *)(v2075.n128_u64[1] + 8);
        do
          v1431 = __ldxr(v1430);
        while (__stxr(v1431 + 1, v1430));
        ggl::BufferData::BufferData((uint64_t)&v1425[1], 4, buf, v2060.i64[0], v2060.i64[1], 1);
        do
          v1432 = __ldaxr(v1430);
        while (__stlxr(v1432 - 1, v1430));
        if (!v1432)
        {
          ((void (*)(std::__shared_weak_count *))v1429->__on_zero_shared)(v1429);
          std::__shared_weak_count::__release_weak(v1429);
        }
      }
      else
      {
        ggl::BufferData::BufferData((uint64_t)&v1425[1], 4, buf, v2060.i64[0], v2060.i64[1], 1);
      }
      v1426[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6EE8;
      v2107 = *(double *)&v1428;
      v2108 = v1426;
      *(_QWORD *)buf = v1428;
      *(_QWORD *)&buf[8] = v1426;
      do
        v1433 = __ldxr(v1427);
      while (__stxr(v1433 + 1, v1427));
      v1435 = (uint64_t **)(v2066 + 30);
      v1434 = (uint64_t *)*((_QWORD *)v2066 + 15);
      if (v1434)
      {
        while (1)
        {
          while (1)
          {
            v1436 = (uint64_t **)v1434;
            v1437 = v1434[4];
            if (v1437 < 3)
              break;
            v1434 = *v1436;
            v1435 = v1436;
            if (!*v1436)
              goto LABEL_2079;
          }
          if (v1437 == 2)
            goto LABEL_2083;
          v1434 = v1436[1];
          if (!v1434)
          {
            v1435 = v1436 + 1;
            goto LABEL_2079;
          }
        }
      }
      v1436 = (uint64_t **)(v2066 + 30);
LABEL_2079:
      v1438 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2066 + 16) + 16))(*((_QWORD *)v2066 + 16), 56, 8);
      v1438[5] = 0;
      v1438[6] = 0;
      v1438[4] = 2;
      *v1438 = 0;
      v1438[1] = 0;
      v1438[2] = (uint64_t)v1436;
      *v1435 = v1438;
      v1439 = **((_QWORD **)v2066 + 14);
      v1440 = v1438;
      if (v1439)
      {
        *((_QWORD *)v2066 + 14) = v1439;
        v1440 = *v1435;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v2066 + 15), v1440);
      ++*((_QWORD *)v2066 + 17);
      v1428 = *(_QWORD **)buf;
      v1426 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v1436 = (uint64_t **)v1438;
LABEL_2083:
        v1441 = (unint64_t *)&v1426->__shared_owners_;
        do
          v1442 = __ldxr(v1441);
        while (__stxr(v1442 + 1, v1441));
        v1438 = (uint64_t *)v1436;
      }
      v1443 = (std::__shared_weak_count *)v1438[6];
      v1438[5] = (uint64_t)v1428;
      v1438[6] = (uint64_t)v1426;
      if (!v1443)
        goto LABEL_2090;
      v1444 = (unint64_t *)&v1443->__shared_owners_;
      do
        v1445 = __ldaxr(v1444);
      while (__stlxr(v1445 - 1, v1444));
      if (!v1445)
      {
        ((void (*)(std::__shared_weak_count *))v1443->__on_zero_shared)(v1443);
        std::__shared_weak_count::__release_weak(v1443);
        v1446 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_2096;
      }
      else
      {
LABEL_2090:
        v1446 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_2096;
      }
      v1447 = (unint64_t *)&v1446->__shared_owners_;
      do
        v1448 = __ldaxr(v1447);
      while (__stlxr(v1448 - 1, v1447));
      if (!v1448)
      {
        ((void (*)(std::__shared_weak_count *))v1446->__on_zero_shared)(v1446);
        std::__shared_weak_count::__release_weak(v1446);
      }
LABEL_2096:
      v1449 = v2108;
      if (*(double *)&v2108 == 0.0)
        goto LABEL_2100;
      v1450 = (unint64_t *)&v2108->__shared_owners_;
      do
        v1451 = __ldaxr(v1450);
      while (__stlxr(v1451 - 1, v1450));
      if (v1451)
        goto LABEL_2100;
      ((void (*)(std::__shared_weak_count *))v1449->__on_zero_shared)(v1449);
      std::__shared_weak_count::__release_weak(v1449);
      v1452 = (std::__shared_weak_count *)v2075.n128_u64[1];
      if (!v2075.n128_u64[1])
        goto LABEL_2105;
LABEL_2101:
      v1453 = (unint64_t *)&v1452->__shared_owners_;
      do
        v1454 = __ldaxr(v1453);
      while (__stlxr(v1454 - 1, v1453));
      if (!v1454)
      {
        ((void (*)(std::__shared_weak_count *))v1452->__on_zero_shared)(v1452);
        std::__shared_weak_count::__release_weak(v1452);
      }
LABEL_2105:
      v1455 = (std::__shared_weak_count *)v2109[1];
      if (!v2109[1])
        goto LABEL_2109;
      v1456 = (unint64_t *)((char *)v2109[1] + 8);
      do
        v1457 = __ldaxr(v1456);
      while (__stlxr(v1457 - 1, v1456));
      if (!v1457)
      {
        ((void (*)(std::__shared_weak_count *))v1455->__on_zero_shared)(v1455);
        std::__shared_weak_count::__release_weak(v1455);
        v1458 = (std::__shared_weak_count *)__dst.n128_u64[1];
        if (__dst.n128_u64[1])
        {
LABEL_2110:
          v1459 = (unint64_t *)&v1458->__shared_owners_;
          do
            v1460 = __ldaxr(v1459);
          while (__stlxr(v1460 - 1, v1459));
          if (!v1460)
          {
            ((void (*)(std::__shared_weak_count *))v1458->__on_zero_shared)(v1458);
            std::__shared_weak_count::__release_weak(v1458);
          }
        }
      }
      else
      {
LABEL_2109:
        v1458 = (std::__shared_weak_count *)__dst.n128_u64[1];
        if (__dst.n128_u64[1])
          goto LABEL_2110;
      }
      if (v2069)
      {
        v1461 = &v2069->__shared_owners_;
        do
          v1462 = __ldaxr((unint64_t *)v1461);
        while (__stlxr(v1462 - 1, (unint64_t *)v1461));
        if (!v1462)
        {
          ((void (*)(std::__shared_weak_count *))v2067->__on_zero_shared)(v2067);
          std::__shared_weak_count::__release_weak(v2067);
        }
      }
LABEL_1906:
      v1308 = (unsigned int *)(v2059.i32[0] + v2061);
      v1309 = *(unsigned __int8 *)v2063.n128_u64[0];
      if (v1309 <= 3)
        v1310 = 0x2010403u >> (8 * v1309);
      else
        v1310 = 3;
      v1311 = (char *)v2033 + 24 * k;
      v1312 = *(unsigned int ***)(v2064 + 1032);
      v1313 = *(_QWORD *)(v2064 + 1040);
      if ((unint64_t)v1312 >= v1313)
      {
        v1318 = *(unsigned int ***)(v2064 + 1024);
        v1319 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v1312 - (char *)v1318) >> 4);
        v1320 = v1319 + 1;
        if (v1319 + 1 > 0x333333333333333)
          abort();
        v1321 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v1313 - (_QWORD)v1318) >> 4);
        if (2 * v1321 > v1320)
          v1320 = 2 * v1321;
        if (v1321 >= 0x199999999999999)
          v1322 = 0x333333333333333;
        else
          v1322 = v1320;
        if (v1322)
        {
          if (v1322 > 0x333333333333333)
            goto LABEL_2905;
          v1323 = (char *)operator new(80 * v1322);
        }
        else
        {
          v1323 = 0;
        }
        v1324 = &v1323[16 * (((char *)v1312 - (char *)v1318) >> 4)];
        *(_QWORD *)v1324 = v2068;
        *((_QWORD *)v1324 + 1) = v2069;
        if (v2069)
        {
          v1325 = &v2069->__shared_owners_;
          do
            v1326 = __ldxr((unint64_t *)v1325);
          while (__stxr(v1326 + 1, (unint64_t *)v1325));
          v1312 = *(unsigned int ***)(v2064 + 1032);
          v1318 = *(unsigned int ***)(v2064 + 1024);
        }
        v1327 = &v1323[80 * v1322];
        v1328 = &v1323[80 * v1319];
        *((_QWORD *)v1328 + 2) = v2061;
        *((_QWORD *)v1328 + 3) = v1308;
        v1328[32] = v1310;
        v1329 = *(_OWORD *)v1311;
        *(_QWORD *)(v1328 + 52) = *((_QWORD *)v1311 + 2);
        *(_OWORD *)(v1328 + 36) = v1329;
        v1328[60] = 0;
        v1328[61] = v2065.n128_u8[0];
        *((_QWORD *)v1328 + 8) = 0;
        *((_QWORD *)v1328 + 9) = 0;
        v1317 = v1324 + 80;
        if (v1312 == v1318)
        {
          *(_QWORD *)(v2064 + 1024) = v1324;
          *(_QWORD *)(v2064 + 1032) = v1317;
          *(_QWORD *)(v2064 + 1040) = v1327;
          goto LABEL_1945;
        }
        do
        {
          v1330 = *((_OWORD *)v1312 - 5);
          v1312 -= 10;
          *((_OWORD *)v1324 - 5) = v1330;
          v1324 -= 80;
          *v1312 = 0;
          v1312[1] = 0;
          v1331 = *((_OWORD *)v1312 + 1);
          v1332 = *((_OWORD *)v1312 + 2);
          *(_OWORD *)(v1324 + 46) = *(_OWORD *)((char *)v1312 + 46);
          *((_OWORD *)v1324 + 1) = v1331;
          *((_OWORD *)v1324 + 2) = v1332;
          *((_OWORD *)v1324 + 4) = *((_OWORD *)v1312 + 4);
          v1312[8] = 0;
          v1312[9] = 0;
        }
        while (v1312 != v1318);
        v1318 = *(unsigned int ***)(v2064 + 1024);
        v1333 = *(unsigned int ***)(v2064 + 1032);
        *(_QWORD *)(v2064 + 1024) = v1324;
        *(_QWORD *)(v2064 + 1032) = v1317;
        *(_QWORD *)(v2064 + 1040) = v1327;
        if (v1333 == v1318)
        {
LABEL_1945:
          if (v1318)
            operator delete(v1318);
          goto LABEL_1947;
        }
        while (2)
        {
          v1334 = (std::__shared_weak_count *)*(v1333 - 1);
          if (!v1334)
            goto LABEL_1937;
          v1335 = (unint64_t *)&v1334->__shared_owners_;
          do
            v1336 = __ldaxr(v1335);
          while (__stlxr(v1336 - 1, v1335));
          if (!v1336)
          {
            ((void (*)(std::__shared_weak_count *))v1334->__on_zero_shared)(v1334);
            std::__shared_weak_count::__release_weak(v1334);
            v1337 = (std::__shared_weak_count *)*(v1333 - 9);
            if (v1337)
            {
LABEL_1938:
              v1338 = (unint64_t *)&v1337->__shared_owners_;
              do
                v1339 = __ldaxr(v1338);
              while (__stlxr(v1339 - 1, v1338));
              if (!v1339)
              {
                ((void (*)(std::__shared_weak_count *))v1337->__on_zero_shared)(v1337);
                std::__shared_weak_count::__release_weak(v1337);
              }
            }
          }
          else
          {
LABEL_1937:
            v1337 = (std::__shared_weak_count *)*(v1333 - 9);
            if (v1337)
              goto LABEL_1938;
          }
          v1333 -= 10;
          if (v1333 == v1318)
            goto LABEL_1945;
          continue;
        }
      }
      *v1312 = v2068;
      v1312[1] = (unsigned int *)v2069;
      if (v2069)
      {
        v1314 = &v2069->__shared_owners_;
        do
          v1315 = __ldxr((unint64_t *)v1314);
        while (__stxr(v1315 + 1, (unint64_t *)v1314));
      }
      v1312[2] = (unsigned int *)v2061;
      v1312[3] = v1308;
      *((_BYTE *)v1312 + 32) = v1310;
      v1316 = *(_OWORD *)v1311;
      *(unsigned int **)((char *)v1312 + 52) = (unsigned int *)*((_QWORD *)v1311 + 2);
      *(_OWORD *)((char *)v1312 + 36) = v1316;
      *((_BYTE *)v1312 + 60) = 0;
      *((_BYTE *)v1312 + 61) = v2065.n128_u8[0];
      v1312[8] = 0;
      v1312[9] = 0;
      v1317 = (char *)(v1312 + 10);
LABEL_1947:
      *(_QWORD *)(v2064 + 1032) = v1317;
      if (!*(_BYTE *)v2063.n128_u64[0])
      {
        v1342 = (unsigned int *)((char *)__p + 8 * k);
        if (*((_BYTE *)v1342 + 4))
        {
          v1343 = *v1342;
          if (*((_BYTE *)v2090[0] + 12 * *v1342 + 8))
          {
            v1344 = operator new(0x30uLL);
            v1344[1] = 0;
            v1344[2] = 0;
            *v1344 = &off_1E42DB748;
            v1344[4] = 0;
            v1344[5] = 0;
            v1344[3] = 0;
            v1345 = (std::__shared_weak_count *)*((_QWORD *)v1317 - 1);
            *((_QWORD *)v1317 - 2) = v1344 + 3;
            *((_QWORD *)v1317 - 1) = v1344;
            if (v1345)
            {
              v1346 = (unint64_t *)&v1345->__shared_owners_;
              do
                v1347 = __ldaxr(v1346);
              while (__stlxr(v1347 - 1, v1346));
              if (!v1347)
              {
                ((void (*)(std::__shared_weak_count *))v1345->__on_zero_shared)(v1345);
                std::__shared_weak_count::__release_weak(v1345);
              }
            }
            v1348 = *(_QWORD *)(*(_QWORD *)(v2064 + 1032) - 16);
            v1349 = v2089;
            if (*((_QWORD *)&v2089 + 1))
            {
              v1350 = (unint64_t *)(*((_QWORD *)&v2089 + 1) + 8);
              do
                v1351 = __ldxr(v1350);
              while (__stxr(v1351 + 1, v1350));
            }
            v1352 = *(std::__shared_weak_count **)(v1348 + 8);
            *(_OWORD *)v1348 = v1349;
            if (v1352)
            {
              v1353 = (unint64_t *)&v1352->__shared_owners_;
              do
                v1354 = __ldaxr(v1353);
              while (__stlxr(v1354 - 1, v1353));
              if (!v1354)
              {
                ((void (*)(std::__shared_weak_count *))v1352->__on_zero_shared)(v1352);
                std::__shared_weak_count::__release_weak(v1352);
              }
            }
            v1355 = (char *)v2090[0] + 12 * v1343;
            if (!v1355[8])
            {
              std::__throw_bad_optional_access[abi:nn180100]();
              goto LABEL_2919;
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2064 + 1032) - 16) + 16) = *(_QWORD *)v1355;
          }
        }
      }
      if (v2069)
      {
        v1340 = &v2069->__shared_owners_;
        do
          v1341 = __ldaxr((unint64_t *)v1340);
        while (__stlxr(v1341 - 1, (unint64_t *)v1340));
        if (!v1341)
        {
          ((void (*)(std::__shared_weak_count *))v2069->__on_zero_shared)(v2069);
          std::__shared_weak_count::__release_weak(v2069);
        }
      }
    }
  }
  if (MapsFeature_IsEnabled_ElevatedPolygons())
    LODWORD(v2045) = GEOConfigGetBOOL();
  else
    LODWORD(v2045) = 0;
  v2034 = 0;
  LODWORD(v2042) = 134217984;
  v1481 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  while (v2034 < geo::codec::VectorTile::daVinciRenderableCount(*v2048))
  {
    v1482 = geo::codec::VectorTile::daVinciRenderables(*v2048);
    v2037 = v1482 + 48 * v2034;
    if (!*(_BYTE *)(v2037 + 45))
    {
      v1483 = geo::codec::VectorTile::daVinciAssets(*v2048);
      v1485 = v1482 + 48 * v2034;
      v1486 = *(_WORD *)(v1485 + 42);
      v2035 = (unsigned __int16 *)(v1485 + 42);
      if (*(_WORD *)(v1485 + 42))
      {
        v1487 = 0;
        v1488 = (_QWORD *)(v1483 + 40 * *(_QWORD *)(v2035 - 9) + 8);
        v2046 = v1488;
        v2047 = (geo::codec::VectorTile *)(v1483 + 40 * *(_QWORD *)(v2035 - 9));
        while (1)
        {
          v1489 = *(_QWORD *)v2037 + 48 * v1487;
          v1490 = *(float *)v1489;
          v1491 = *(float32x2_t *)(v1489 + 4);
          v1492 = *(float32x2_t *)(v1489 + 20);
          v1493 = *(float32x2_t *)(v1489 + 36);
          v1494 = *(float *)(v1489 + 12);
          v1495 = *(float *)(v1489 + 16);
          v1496 = *(float *)(v1489 + 28);
          v1497 = *(float *)(v1489 + 32);
          LODWORD(v1484) = *(_DWORD *)(v1489 + 44);
          v1498.i32[0] = *(_DWORD *)v1489;
          v1498.f32[1] = v1495;
          v1499 = __PAIR64__(LODWORD(v1496), LODWORD(v1494));
          if (v2036[8].i8[0])
          {
            v1500 = v2036[2];
            v1501 = vmla_lane_f32(vmul_n_f32(*v2036, v1490), v1500, v1498, 1);
            v1502 = v2036[4];
            v1503 = vmla_n_f32(vmla_lane_f32(vmla_n_f32(v2036[6], *v2036, v1494), v1500, (float32x2_t)__PAIR64__(LODWORD(v1496), LODWORD(v1494)), 1), v1502, *(float *)&v1484);
            v1504 = vmla_n_f32(v1501, v1502, v1497);
            v1505 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*v2036, v1491.f32[0]), v1500, v1492.f32[0]), v1502, v1493.f32[0]);
            *(float32x2_t *)&v2055 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(*v2036, v1491, 1), v1500, v1492, 1), v1502, v1493, 1);
            v1506 = v2036[1].f32[0];
            v1500.i32[0] = v2036[3].i32[0];
            v1507 = (float)(v1506 * v1490) + (float)(v1500.f32[0] * v1495);
            v1508 = v2036[5].f32[0];
            v1497 = v1507 + (float)(v1508 * v1497);
            *(float *)&v1484 = (float)((float)(v2036[7].f32[0] + (float)(v1506 * v1494)) + (float)(v1500.f32[0] * v1496))
                             + (float)(v1508 * *(float *)&v1484);
            v1498 = v1504;
            v1499 = (unint64_t)v1503;
            v1493 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v1491, v1506), v1492, v1500.f32[0]), v1493, v1508);
          }
          else
          {
            v1505 = (float32x2_t)vzip1_s32((int32x2_t)v1491, (int32x2_t)v1492);
            LODWORD(v1509) = vdup_lane_s32((int32x2_t)v1491, 1).u32[0];
            HIDWORD(v1509) = HIDWORD(*(_QWORD *)(v1489 + 20));
            *(_QWORD *)&v2055 = v1509;
          }
          if (*(_WORD *)v2047)
            break;
LABEL_2158:
          if (++v1487 >= (unint64_t)v1486)
            goto LABEL_2152;
        }
        *(float32x2_t *)&v2050 = v1498;
        v2051.i64[0] = v1499;
        v2053 = v1484;
        *(float *)&v2054 = v1497;
        v2038 = v1487;
        v1510 = 0;
        *(float32x2_t *)&v2052 = v1493;
        v1511 = v1493.f32[1];
        while (2)
        {
          v1512 = v1488;
          v1513 = v1510;
          v1514 = *(unsigned __int16 *)(*v1488 + 32 * v1510);
          v1515 = geo::codec::VectorTile::daVinciMeshes(*v2048);
          v1516 = v1515;
          v1517 = *v1512;
          v2060.i64[0] = v1513;
          v1518 = *v1512 + 32 * v1513;
          v1521 = *(_QWORD *)(v1518 + 16);
          v1520 = (uint64_t *)(v1518 + 16);
          v1519 = (_DWORD **)v1521;
          v1522 = *(unsigned __int8 *)(v1521 + 33);
          if (!*(_BYTE *)(v1521 + 33))
          {
LABEL_2182:
            LOBYTE(v1524) = 0;
LABEL_2183:
            v2056.i32[0] = 0;
            v1527 = *(_QWORD *)(v1517 + 32 * v1513 + 8);
            v1526 = 1;
LABEL_2185:
            v2058.i64[0] = v1527;
            if (v1527 > 0xFF)
              goto LABEL_2239;
            v1536 = *(_QWORD *)(v2064 + 1304);
            if (!v1536)
              goto LABEL_2239;
            v1537 = *(_QWORD *)(v1536 + 48);
            if (!v1537)
              goto LABEL_2234;
            v1538 = (uint8x8_t)vcnt_s8((int8x8_t)v1537);
            v1538.i16[0] = vaddlv_u8(v1538);
            if (v1538.u32[0] > 1uLL)
            {
              v1539 = v2058.u8[0];
              if (v1537 <= v2058.u8[0])
                v1539 = v2058.u8[0] % v1537;
            }
            else
            {
              v1539 = ((_DWORD)v1537 - 1) & v2058.u8[0];
            }
            v1540 = *(uint64_t ****)(*(_QWORD *)(v1536 + 40) + 8 * v1539);
            if (!v1540)
              goto LABEL_2234;
            v1541 = *v1540;
            if (!v1541)
              goto LABEL_2234;
            LODWORD(v2061) = v2058.u8[0];
            if (v1538.u32[0] < 2uLL)
            {
              v1542 = v1537 - 1;
              while (1)
              {
                v1544 = v1541[1];
                if (v1544 == (uint64_t *)v2058.u8[0])
                {
                  if (*((unsigned __int8 *)v1541 + 16) == v2058.u8[0])
                    goto LABEL_2232;
                }
                else if (((unint64_t)v1544 & v1542) != v1539)
                {
                  goto LABEL_2234;
                }
                v1541 = (uint64_t **)*v1541;
                if (!v1541)
                  goto LABEL_2234;
              }
            }
            while (1)
            {
              v1543 = (unint64_t)v1541[1];
              if (v1543 == v2058.u8[0])
              {
                if (*((unsigned __int8 *)v1541 + 16) == v2058.u8[0])
                {
LABEL_2232:
                  v1568 = v1541[3];
                  if (v1568)
                  {
                    v2058.i64[0] = *(_QWORD *)(v1568[6] + 8 * *(unsigned __int16 *)(v1568[13] - 2));
                    goto LABEL_2240;
                  }
LABEL_2234:
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v1569 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v1569, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v2042;
                    *(_QWORD *)&buf[4] = v2058.i64[0];
                    _os_log_impl(&dword_19F029000, v1569, OS_LOG_TYPE_ERROR, "Missing material raster with id %lld", buf, 0xCu);
                  }

LABEL_2239:
                  LODWORD(v2061) = 0;
LABEL_2240:
                  v1570 = *(gdc::Registry **)(v2064 + 1320);
                  v1571 = *(_QWORD *)(v2064 + 1024);
                  v1572 = *(_BYTE *)(v1516 + (v1514 << 6) + 24) ^ 1;
                  *(_QWORD *)buf = v1571 + 80 * v1514;
                  buf[8] = 0;
                  buf[24] = 0;
                  LOBYTE(v2138) = v1572;
                  *(_OWORD *)v2139 = xmmword_19FFB3470;
                  *(_QWORD *)&v2139[16] = 0x80000000800000;
                  *(_QWORD *)&v2139[24] = v2050;
                  *(_DWORD *)&v2139[32] = v2054;
                  *(float32x2_t *)&v2139[36] = v1505;
                  *(_QWORD *)v2141 = v2055;
                  v2140 = v2052;
                  *(float *)&v2141[8] = v1511;
                  v2142.n128_u64[0] = v2051.i64[0];
                  v2142.n128_u32[2] = v2053;
                  if (v1571)
                  {
                    v1573 = v1571 + 80 * v1514;
                    __dst.n128_u64[0] = v2050;
                    *(float32x2_t *)&v2125 = v1505;
                    *(_QWORD *)&v2126 = v2055;
                    v2127.n128_u64[0] = v2051.i64[0];
                    __dst.n128_u64[1] = v2054;
                    *((_QWORD *)&v2125 + 1) = v2052;
                    *((_QWORD *)&v2126 + 1) = LODWORD(v1511);
                    v2127.n128_u64[1] = v2053 | 0x3F80000000000000;
                    *(_OWORD *)v2080 = xmmword_19FFB3470;
                    *(_QWORD *)&v2080[16] = 0x80000000800000;
                    v2109[0] = &off_1E42D8AB0;
                    v2109[1] = v2080;
                    v2110 = (char *)&__dst;
                    v2111 = v2109;
                    v1574 = (unsigned __int32 *)(v1573 + 48);
                    v1575 = *(float *)(v1573 + 48);
                    v1576 = *(float *)(v1573 + 52);
                    v1577 = *(float *)(v1573 + 56);
                    v1578 = (float)((float)(*(float *)&v2053 + (float)(v1575 * *(float *)&v2054))
                                  + (float)(v1576 * *(float *)&v2052))
                          + (float)(v1577 * v1511);
                    *(_DWORD *)&v2080[8] = fminf(v1578, 3.4028e38);
                    *(_DWORD *)&v2080[20] = fmaxf(v1578, -3.4028e38);
                    v1579 = vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)v2051.f32, *(float32x2_t *)&v2050, v1575), v1505, v1576), *(float32x2_t *)&v2055, v1577);
                    *(float32x2_t *)v2080 = vminnm_f32(v1579, v1481);
                    *(float32x2_t *)&v2080[12] = vmaxnm_f32(v1579, (float32x2_t)0x80000000800000);
                    v1580 = v1573 + 36;
                    v1581 = *(float *)(v1573 + 36);
                    v1582 = *(float32x2_t *)(v1573 + 52);
                    *(float32x2_t *)_Q5.f32 = vmla_lane_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)v2051.f32, *(float32x2_t *)&v2050, v1581), v1505, v1582.f32[0]), *(float32x2_t *)&v2055, v1582, 1);
                    v1584 = vmul_f32(v1582, *(float32x2_t *)&v2052);
                    v1585 = (float)(*(float *)&v2053 + (float)(v1581 * *(float *)&v2054))
                          + (float)(v1584.f32[0] + v1584.f32[1]);
                    *(float32x2_t *)v2080 = vminnm_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v2080);
                    *(_DWORD *)&v2080[8] = fminf(v1585, *(float *)&v2080[8]);
                    *(_DWORD *)&v2080[20] = fmaxf(*(float *)&v2080[20], v1585);
                    *(float32x2_t *)&v2080[12] = vmaxnm_f32(*(float32x2_t *)&v2080[12], *(float32x2_t *)_Q5.f32);
                    v1586 = *(float *)(v1573 + 48);
                    _Q5.i32[0] = *(_DWORD *)(v1573 + 40);
                    v1584.i32[0] = *(_DWORD *)(v1573 + 56);
                    v1587 = vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)v2051.f32, *(float32x2_t *)&v2050, v1586), v1505, _Q5.f32[0]), *(float32x2_t *)&v2055, v1584.f32[0]);
                    v1588 = (float)((float)(*(float *)&v2053 + (float)(v1586 * *(float *)&v2054))
                                  + (float)(_Q5.f32[0] * *(float *)&v2052))
                          + (float)(v1584.f32[0] * v1511);
                    *(float32x2_t *)v2080 = vminnm_f32(v1587, *(float32x2_t *)v2080);
                    *(float32x2_t *)&v2080[12] = vmaxnm_f32(*(float32x2_t *)&v2080[12], v1587);
                    *(_DWORD *)&v2080[8] = fminf(v1588, *(float *)&v2080[8]);
                    *(_DWORD *)&v2080[20] = fmaxf(*(float *)&v2080[20], v1588);
                    v1589 = *(float *)(v1573 + 40);
                    v1590 = *(float *)(v1573 + 56);
                    v2075.n128_u32[0] = *(_DWORD *)(v1573 + 36);
                    *(unint64_t *)((char *)v2075.n128_u64 + 4) = __PAIR64__(LODWORD(v1590), LODWORD(v1589));
                    _Q5.i32[3] = *(_DWORD *)&v2080[12];
                    _Q5.f32[0] = (float)((float)(v2051.f32[0] + (float)(*(float *)&v2050 * v2075.n128_f32[0]))
                                       + (float)(v1505.f32[0] * v1589))
                               + (float)(*(float *)&v2055 * v1590);
                    *(float32x2_t *)&_Q5.i32[1] = vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)&v2127.n128_u8[4], *(float32x2_t *)&__dst.n128_u8[4], v2075.n128_f32[0]), *(float32x2_t *)((char *)&v2125 + 4), v1589), *(float32x2_t *)((char *)&v2126 + 4), v1590);
                    v1591 = *(float32x4_t *)v2080;
                    v1591.f32[3] = _Q5.f32[0];
                    v1592 = (int8x16_t)vcgtq_f32(v1591, _Q5);
                    _Q5.f32[3] = _Q5.f32[0];
                    *(int8x16_t *)v2080 = vbslq_s8(v1592, (int8x16_t)_Q5, *(int8x16_t *)v2080);
                    *(float32x2_t *)&v2080[16] = vmaxnm_f32(*(float32x2_t *)&v2080[16], *(float32x2_t *)&_Q5.i32[1]);
                    v1593 = *(float *)(v1573 + 44);
                    v2075.n128_u64[0] = *(_QWORD *)(v1573 + 48);
                    v2075.n128_f32[2] = v1593;
                    _S4 = v1505.i32[0];
                    __asm { FMLA            S5, S4, V2.S[1] }
                    _Q5.i32[3] = *(_DWORD *)&v2080[12];
                    _Q5.f32[0] = _Q5.f32[0] + (float)(*(float *)&v2055 * v1593);
                    *(float32x2_t *)&_Q5.i32[1] = vmla_n_f32(vmla_lane_f32(vmla_n_f32(*(float32x2_t *)&v2127.n128_u8[4], *(float32x2_t *)&__dst.n128_u8[4], v2075.n128_f32[0]), *(float32x2_t *)((char *)&v2125 + 4), (float32x2_t)v2075.n128_u64[0], 1), *(float32x2_t *)((char *)&v2126 + 4), v1593);
                    v1595 = *(float32x4_t *)v2080;
                    v1595.i32[3] = _Q5.i32[0];
                    v1596 = (int8x16_t)vcgtq_f32(v1595, _Q5);
                    _Q5.i32[3] = _Q5.i32[0];
                    *(int8x16_t *)v2080 = vbslq_s8(v1596, (int8x16_t)_Q5, *(int8x16_t *)v2080);
                    *(float32x2_t *)&v2080[16] = vmaxnm_f32(*(float32x2_t *)&v2080[16], *(float32x2_t *)&_Q5.i32[1]);
                    v1596.i32[0] = *(_DWORD *)(v1573 + 52);
                    v1597 = *(_DWORD *)(v1573 + 44);
                    v2075.n128_u32[0] = *(_DWORD *)(v1573 + 36);
                    *(unint64_t *)((char *)v2075.n128_u64 + 4) = __PAIR64__(v1597, v1596.u32[0]);
                    if (!v2109)
                      goto LABEL_2903;
                    (*((void (**)(void **, __n128 *))*v2111 + 6))(v2109, &v2075);
                    v1598 = *(_QWORD *)(v1580 + 4);
                    v2075.n128_u32[0] = *v1574;
                    *(unint64_t *)((char *)v2075.n128_u64 + 4) = v1598;
                    if (!v2111)
                      goto LABEL_2903;
                    (*((void (**)(void **, __n128 *))*v2111 + 6))(v2111, &v2075);
                    v1599 = *(_QWORD *)v1580;
                    v2075.n128_u32[2] = *(_DWORD *)(v1580 + 8);
                    v2075.n128_u64[0] = v1599;
                    if (!v2111)
                      goto LABEL_2903;
                    (*((void (**)(void **, __n128 *))*v2111 + 6))(v2111, &v2075);
                    v1600 = v2111;
                    if (v2111 == v2109)
                    {
                      v1600 = v2109;
                      v1601 = 4;
LABEL_2248:
                      (*((void (**)(void))*v1600 + v1601))();
                    }
                    else if (v2111)
                    {
                      v1601 = 5;
                      goto LABEL_2248;
                    }
                    *(_OWORD *)v2139 = *(_OWORD *)v2080;
                    *(_QWORD *)&v2139[16] = *(_QWORD *)&v2080[16];
                  }
                  LOBYTE(v2057) = v1526;
                  v1602 = gdc::Registry::create(v1570);
                  v2109[0] = (void *)0x6307588E3A87BAE2;
                  v2065.n128_u64[0] = (unint64_t)v1570 + 120;
                  v1603 = *(int8x8_t *)((char *)v1570 + 128);
                  if (v1603)
                  {
                    v1604 = (uint8x8_t)vcnt_s8(v1603);
                    v1604.i16[0] = vaddlv_u8(v1604);
                    if (v1604.u32[0] > 1uLL)
                    {
                      v1605 = 0x6307588E3A87BAE2;
                      if (*(_QWORD *)&v1603 <= 0x6307588E3A87BAE2uLL)
                        v1605 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v1603;
                    }
                    else
                    {
                      v1605 = (*(_QWORD *)&v1603 - 1) & 0x6307588E3A87BAE2;
                    }
                    v1606 = *(_QWORD **)(*(_QWORD *)v2065.n128_u64[0] + 8 * v1605);
                    if (v1606)
                    {
                      v1607 = (_QWORD *)*v1606;
                      if (v1607)
                      {
                        if (v1604.u32[0] < 2uLL)
                        {
                          v1608 = *(_QWORD *)&v1603 - 1;
                          while (1)
                          {
                            v1610 = v1607[1];
                            if (v1610 == 0x6307588E3A87BAE2)
                            {
                              if (v1607[2] == 0x6307588E3A87BAE2)
                                goto LABEL_2326;
                            }
                            else if ((v1610 & v1608) != v1605)
                            {
                              goto LABEL_2270;
                            }
                            v1607 = (_QWORD *)*v1607;
                            if (!v1607)
                              goto LABEL_2270;
                          }
                        }
                        do
                        {
                          v1609 = v1607[1];
                          if (v1609 == 0x6307588E3A87BAE2)
                          {
                            if (v1607[2] == 0x6307588E3A87BAE2)
                            {
LABEL_2326:
                              v1611 = v1607[3];
                              goto LABEL_2273;
                            }
                          }
                          else
                          {
                            if (v1609 >= *(_QWORD *)&v1603)
                              v1609 %= *(_QWORD *)&v1603;
                            if (v1609 != v1605)
                              break;
                          }
                          v1607 = (_QWORD *)*v1607;
                        }
                        while (v1607);
                      }
                    }
                  }
LABEL_2270:
                  v1611 = operator new();
                  *(_QWORD *)(v1611 + 16) = "md::components::MeshInstance]";
                  *(_QWORD *)(v1611 + 24) = 28;
                  *(_OWORD *)(v1611 + 32) = 0u;
                  *(_OWORD *)(v1611 + 48) = 0u;
                  *(_OWORD *)(v1611 + 64) = 0u;
                  *(_OWORD *)(v1611 + 80) = 0u;
                  *(_OWORD *)(v1611 + 96) = 0u;
                  *(_OWORD *)(v1611 + 112) = 0u;
                  *(_OWORD *)(v1611 + 128) = 0u;
                  *(_DWORD *)(v1611 + 144) = 1065353216;
                  *(_OWORD *)(v1611 + 152) = 0u;
                  *(_OWORD *)(v1611 + 168) = 0u;
                  *(_QWORD *)(v1611 + 184) = 0;
                  *(_DWORD *)(v1611 + 192) = 1065353216;
                  *(_OWORD *)(v1611 + 200) = 0u;
                  *(_OWORD *)(v1611 + 216) = 0u;
                  *(_QWORD *)(v1611 + 232) = 0;
                  *(_DWORD *)(v1611 + 240) = 1065353216;
                  *(_QWORD *)(v1611 + 8) = 0x6307588E3A87BAE2;
                  *(_QWORD *)v1611 = &off_1E42B2F58;
                  *(_QWORD *)(v1611 + 248) = v1570;
                  v1612 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)v2065.n128_u64[0], 0x6307588E3A87BAE2uLL, v2109);
                  v1613 = v1612[3];
                  v1612[3] = v1611;
                  if (v1613)
                    (*(void (**)(uint64_t))(*(_QWORD *)v1613 + 8))(v1613);
                  __dst.n128_u64[0] = 0x6307588E3A87BAE2;
                  __dst.n128_u64[1] = (unint64_t)"md::components::MeshInstance]";
                  *(_QWORD *)&v2125 = 28;
                  gdc::Registry::_registerStorageDataSignals((uint64_t)v1570, 0x6307588E3A87BAE2, (uint64_t)&__dst, (uint64_t *)(v1611 + 104));
LABEL_2273:
                  v2075.n128_u64[0] = v1602;
                  geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign((uint64_t)&__dst, (uint64_t *)(v1611 + 32), (uint64_t)&v2075, (__int128 *)buf);
                  v1614 = *(_QWORD *)(v1611 + 248);
                  if (__dst.n128_u64[1] == *(_QWORD *)(v1611 + 88))
                  {
                    for (m = *(_QWORD **)(v1611 + 176); m; m = (_QWORD *)*m)
                    {
                      v2109[0] = &v2075;
                      v2109[1] = (void *)1;
                      *(_QWORD *)v2080 = v1614;
                      v1618 = m[6];
                      if (!v1618)
                        goto LABEL_2903;
                      (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v1618 + 48))(v1618, v2080, v2109);
                    }
                  }
                  else
                  {
                    for (n = *(_QWORD **)(v1611 + 128); n; n = (_QWORD *)*n)
                    {
                      v2109[0] = &v2075;
                      v2109[1] = (void *)1;
                      *(_QWORD *)v2080 = v1614;
                      v1616 = n[6];
                      if (!v1616)
                        goto LABEL_2903;
                      (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v1616 + 48))(v1616, v2080, v2109);
                    }
                  }
                  v1619 = 0xF44C196EC679B51CLL;
                  v2109[0] = (void *)0xF44C196EC679B51CLL;
                  v1620 = *(int8x8_t *)((char *)v1570 + 128);
                  if (v1620)
                  {
                    v1621 = (uint8x8_t)vcnt_s8(v1620);
                    v1621.i16[0] = vaddlv_u8(v1621);
                    if (v1621.u32[0] > 1uLL)
                    {
                      if (*(_QWORD *)&v1620 <= 0xF44C196EC679B51CLL)
                        v1619 = 0xF44C196EC679B51CLL % *(_QWORD *)&v1620;
                    }
                    else
                    {
                      v1619 = (*(_QWORD *)&v1620 - 1) & 0xF44C196EC679B51CLL;
                    }
                    v1622 = *(_QWORD **)(*(_QWORD *)v2065.n128_u64[0] + 8 * v1619);
                    if (v1622)
                    {
                      v1623 = (_QWORD *)*v1622;
                      if (v1623)
                      {
                        if (v1621.u32[0] < 2uLL)
                        {
                          v1624 = *(_QWORD *)&v1620 - 1;
                          while (1)
                          {
                            v1626 = v1623[1];
                            if (v1626 == 0xF44C196EC679B51CLL)
                            {
                              if (v1623[2] == 0xF44C196EC679B51CLL)
                                goto LABEL_2327;
                            }
                            else if ((v1626 & v1624) != v1619)
                            {
                              goto LABEL_2301;
                            }
                            v1623 = (_QWORD *)*v1623;
                            if (!v1623)
                              goto LABEL_2301;
                          }
                        }
                        do
                        {
                          v1625 = v1623[1];
                          if (v1625 == 0xF44C196EC679B51CLL)
                          {
                            if (v1623[2] == 0xF44C196EC679B51CLL)
                            {
LABEL_2327:
                              v1627 = v1623[3];
                              goto LABEL_2304;
                            }
                          }
                          else
                          {
                            if (v1625 >= *(_QWORD *)&v1620)
                              v1625 %= *(_QWORD *)&v1620;
                            if (v1625 != v1619)
                              break;
                          }
                          v1623 = (_QWORD *)*v1623;
                        }
                        while (v1623);
                      }
                    }
                  }
LABEL_2301:
                  v1627 = operator new();
                  *(_QWORD *)(v1627 + 16) = "md::components::Visibility]";
                  *(_QWORD *)(v1627 + 24) = 26;
                  *(_OWORD *)(v1627 + 32) = 0u;
                  *(_OWORD *)(v1627 + 48) = 0u;
                  *(_OWORD *)(v1627 + 64) = 0u;
                  *(_OWORD *)(v1627 + 80) = 0u;
                  *(_OWORD *)(v1627 + 96) = 0u;
                  *(_OWORD *)(v1627 + 112) = 0u;
                  *(_OWORD *)(v1627 + 128) = 0u;
                  *(_DWORD *)(v1627 + 144) = 1065353216;
                  *(_OWORD *)(v1627 + 152) = 0u;
                  *(_OWORD *)(v1627 + 168) = 0u;
                  *(_QWORD *)(v1627 + 184) = 0;
                  *(_DWORD *)(v1627 + 192) = 1065353216;
                  *(_OWORD *)(v1627 + 200) = 0u;
                  *(_OWORD *)(v1627 + 216) = 0u;
                  *(_QWORD *)(v1627 + 232) = 0;
                  *(_DWORD *)(v1627 + 240) = 1065353216;
                  *(_QWORD *)(v1627 + 8) = 0xF44C196EC679B51CLL;
                  *(_QWORD *)v1627 = &off_1E42B2E68;
                  *(_QWORD *)(v1627 + 248) = v1570;
                  v1628 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)v2065.n128_u64[0], 0xF44C196EC679B51CLL, v2109);
                  v1629 = v1628[3];
                  v1628[3] = v1627;
                  if (v1629)
                    (*(void (**)(uint64_t))(*(_QWORD *)v1629 + 8))(v1629);
                  __dst.n128_u64[0] = 0xF44C196EC679B51CLL;
                  __dst.n128_u64[1] = (unint64_t)"md::components::Visibility]";
                  *(_QWORD *)&v2125 = 26;
                  gdc::Registry::_registerStorageDataSignals((uint64_t)v1570, 0xF44C196EC679B51CLL, (uint64_t)&__dst, (uint64_t *)(v1627 + 104));
LABEL_2304:
                  *(_QWORD *)v2080 = v1602;
                  v1630 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v1627 + 32), (uint64_t)v2080);
                  v2059.i8[0] = v1524;
                  v2063.n128_u64[0] = v1602;
                  if ((v1631 & 1) == 0)
                  {
                    v1632 = (_BYTE *)(*(_QWORD *)(v1627 + 80) + (((uint64_t)v1630 - *(_QWORD *)(v1627 + 56)) >> 3));
                    *v1632 = 1;
                    v1633 = *(void **)(v1627 + 248);
                    if (v1632 != *(_BYTE **)(v1627 + 88))
                    {
                      for (ii = *(_QWORD **)(v1627 + 128); ii; ii = (_QWORD *)*ii)
                      {
                        __dst.n128_u64[0] = (unint64_t)v2080;
                        __dst.n128_u64[1] = 1;
                        v2109[0] = v1633;
                        v1635 = ii[6];
                        if (!v1635)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1635 + 48))(v1635, v2109, &__dst);
                      }
                      goto LABEL_2433;
                    }
LABEL_2430:
                    for (jj = *(_QWORD **)(v1627 + 176); jj; jj = (_QWORD *)*jj)
                    {
                      __dst.n128_u64[0] = (unint64_t)v2080;
                      __dst.n128_u64[1] = 1;
                      v2109[0] = v1633;
                      v1720 = jj[6];
                      if (!v1720)
                        goto LABEL_2903;
                      (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1720 + 48))(v1720, v2109, &__dst);
                    }
LABEL_2433:
                    v1721 = 0x251D10CE20A5B012;
                    v2109[0] = (void *)0x251D10CE20A5B012;
                    v1722 = *(int8x8_t *)((char *)v1570 + 128);
                    if (v1722)
                    {
                      v1723 = (uint8x8_t)vcnt_s8(v1722);
                      v1723.i16[0] = vaddlv_u8(v1723);
                      if (v1723.u32[0] > 1uLL)
                      {
                        if (*(_QWORD *)&v1722 <= 0x251D10CE20A5B012uLL)
                          v1721 = 0x251D10CE20A5B012uLL % *(_QWORD *)&v1722;
                      }
                      else
                      {
                        v1721 = (*(_QWORD *)&v1722 - 1) & 0x251D10CE20A5B012;
                      }
                      v1724 = *(_QWORD **)(*(_QWORD *)v2065.n128_u64[0] + 8 * v1721);
                      if (v1724)
                      {
                        v1725 = (_QWORD *)*v1724;
                        if (v1725)
                        {
                          if (v1723.u32[0] < 2uLL)
                          {
                            v1726 = *(_QWORD *)&v1722 - 1;
                            while (1)
                            {
                              v1728 = v1725[1];
                              if (v1728 == 0x251D10CE20A5B012)
                              {
                                if (v1725[2] == 0x251D10CE20A5B012)
                                  goto LABEL_2532;
                              }
                              else if ((v1728 & v1726) != v1721)
                              {
                                goto LABEL_2453;
                              }
                              v1725 = (_QWORD *)*v1725;
                              if (!v1725)
                                goto LABEL_2453;
                            }
                          }
                          do
                          {
                            v1727 = v1725[1];
                            if (v1727 == 0x251D10CE20A5B012)
                            {
                              if (v1725[2] == 0x251D10CE20A5B012)
                              {
LABEL_2532:
                                v1729 = v1725[3];
                                goto LABEL_2456;
                              }
                            }
                            else
                            {
                              if (v1727 >= *(_QWORD *)&v1722)
                                v1727 %= *(_QWORD *)&v1722;
                              if (v1727 != v1721)
                                break;
                            }
                            v1725 = (_QWORD *)*v1725;
                          }
                          while (v1725);
                        }
                      }
                    }
LABEL_2453:
                    v1729 = operator new();
                    *(_QWORD *)(v1729 + 16) = "md::components::PendingMaterial]";
                    *(_QWORD *)(v1729 + 24) = 31;
                    *(_OWORD *)(v1729 + 32) = 0u;
                    *(_OWORD *)(v1729 + 48) = 0u;
                    *(_OWORD *)(v1729 + 64) = 0u;
                    *(_OWORD *)(v1729 + 80) = 0u;
                    *(_OWORD *)(v1729 + 96) = 0u;
                    *(_OWORD *)(v1729 + 112) = 0u;
                    *(_OWORD *)(v1729 + 128) = 0u;
                    *(_DWORD *)(v1729 + 144) = 1065353216;
                    *(_OWORD *)(v1729 + 152) = 0u;
                    *(_OWORD *)(v1729 + 168) = 0u;
                    *(_QWORD *)(v1729 + 184) = 0;
                    *(_DWORD *)(v1729 + 192) = 1065353216;
                    *(_OWORD *)(v1729 + 200) = 0u;
                    *(_OWORD *)(v1729 + 216) = 0u;
                    *(_QWORD *)(v1729 + 232) = 0;
                    *(_DWORD *)(v1729 + 240) = 1065353216;
                    *(_QWORD *)(v1729 + 8) = 0x251D10CE20A5B012;
                    *(_QWORD *)v1729 = &off_1E42B3018;
                    *(_QWORD *)(v1729 + 248) = v1570;
                    v1730 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)v2065.n128_u64[0], 0x251D10CE20A5B012uLL, v2109);
                    v1731 = v1730[3];
                    v1730[3] = v1729;
                    if (v1731)
                      (*(void (**)(uint64_t))(*(_QWORD *)v1731 + 8))(v1731);
                    __dst.n128_u64[0] = 0x251D10CE20A5B012;
                    __dst.n128_u64[1] = (unint64_t)"md::components::PendingMaterial]";
                    *(_QWORD *)&v2125 = 31;
                    gdc::Registry::_registerStorageDataSignals((uint64_t)v1570, 0x251D10CE20A5B012, (uint64_t)&__dst, (uint64_t *)(v1729 + 104));
LABEL_2456:
                    *(_QWORD *)v2080 = v1602;
                    v1732 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v1729 + 32), (uint64_t)v2080);
                    if ((v1733 & 1) == 0)
                    {
                      v1734 = (_QWORD *)((char *)v1732 + *(_QWORD *)(v1729 + 80) - *(_QWORD *)(v1729 + 56));
                      *v1734 = v2058.i64[0];
                      v1735 = *(void **)(v1729 + 248);
                      if (v1734 != *(_QWORD **)(v1729 + 88))
                      {
                        for (kk = *(_QWORD **)(v1729 + 128); kk; kk = (_QWORD *)*kk)
                        {
                          __dst.n128_u64[0] = (unint64_t)v2080;
                          __dst.n128_u64[1] = 1;
                          v2109[0] = v1735;
                          v1737 = kk[6];
                          if (!v1737)
                            goto LABEL_2903;
                          (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1737 + 48))(v1737, v2109, &__dst);
                        }
                        goto LABEL_2487;
                      }
LABEL_2484:
                      for (mm = *(_QWORD **)(v1729 + 176); mm; mm = (_QWORD *)*mm)
                      {
                        __dst.n128_u64[0] = (unint64_t)v2080;
                        __dst.n128_u64[1] = 1;
                        v2109[0] = v1735;
                        v1756 = mm[6];
                        if (!v1756)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1756 + 48))(v1756, v2109, &__dst);
                      }
LABEL_2487:
                      v1757 = 0x8217BEFF5E3814C6;
                      v2109[0] = (void *)0x8217BEFF5E3814C6;
                      v1758 = *(int8x8_t *)((char *)v1570 + 128);
                      if (v1758)
                      {
                        v1759 = (uint8x8_t)vcnt_s8(v1758);
                        v1759.i16[0] = vaddlv_u8(v1759);
                        if (v1759.u32[0] > 1uLL)
                        {
                          if (*(_QWORD *)&v1758 <= 0x8217BEFF5E3814C6)
                            v1757 = 0x8217BEFF5E3814C6 % *(_QWORD *)&v1758;
                        }
                        else
                        {
                          v1757 = (*(_QWORD *)&v1758 - 1) & 0x8217BEFF5E3814C6;
                        }
                        v1760 = *(_QWORD **)(*(_QWORD *)v2065.n128_u64[0] + 8 * v1757);
                        if (v1760)
                        {
                          v1761 = (_QWORD *)*v1760;
                          if (v1761)
                          {
                            if (v1759.u32[0] < 2uLL)
                            {
                              v1762 = *(_QWORD *)&v1758 - 1;
                              while (1)
                              {
                                v1764 = v1761[1];
                                if (v1764 == 0x8217BEFF5E3814C6)
                                {
                                  if (v1761[2] == 0x8217BEFF5E3814C6)
                                    goto LABEL_2533;
                                }
                                else if ((v1764 & v1762) != v1757)
                                {
                                  goto LABEL_2507;
                                }
                                v1761 = (_QWORD *)*v1761;
                                if (!v1761)
                                  goto LABEL_2507;
                              }
                            }
                            do
                            {
                              v1763 = v1761[1];
                              if (v1763 == 0x8217BEFF5E3814C6)
                              {
                                if (v1761[2] == 0x8217BEFF5E3814C6)
                                {
LABEL_2533:
                                  v1765 = v1761[3];
                                  goto LABEL_2510;
                                }
                              }
                              else
                              {
                                if (v1763 >= *(_QWORD *)&v1758)
                                  v1763 %= *(_QWORD *)&v1758;
                                if (v1763 != v1757)
                                  break;
                              }
                              v1761 = (_QWORD *)*v1761;
                            }
                            while (v1761);
                          }
                        }
                      }
LABEL_2507:
                      v1765 = operator new();
                      *(_QWORD *)(v1765 + 16) = "md::components::IntendedSceneLayer]";
                      *(_QWORD *)(v1765 + 24) = 34;
                      *(_OWORD *)(v1765 + 32) = 0u;
                      *(_OWORD *)(v1765 + 48) = 0u;
                      *(_OWORD *)(v1765 + 64) = 0u;
                      *(_OWORD *)(v1765 + 80) = 0u;
                      *(_OWORD *)(v1765 + 96) = 0u;
                      *(_OWORD *)(v1765 + 112) = 0u;
                      *(_OWORD *)(v1765 + 128) = 0u;
                      *(_DWORD *)(v1765 + 144) = 1065353216;
                      *(_OWORD *)(v1765 + 152) = 0u;
                      *(_OWORD *)(v1765 + 168) = 0u;
                      *(_QWORD *)(v1765 + 184) = 0;
                      *(_DWORD *)(v1765 + 192) = 1065353216;
                      *(_OWORD *)(v1765 + 200) = 0u;
                      *(_OWORD *)(v1765 + 216) = 0u;
                      *(_QWORD *)(v1765 + 232) = 0;
                      *(_DWORD *)(v1765 + 240) = 1065353216;
                      *(_QWORD *)(v1765 + 8) = 0x8217BEFF5E3814C6;
                      *(_QWORD *)v1765 = &off_1E42B3168;
                      *(_QWORD *)(v1765 + 248) = v1570;
                      v1766 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)v2065.n128_u64[0], 0x8217BEFF5E3814C6, v2109);
                      v1767 = v1766[3];
                      v1766[3] = v1765;
                      if (v1767)
                        (*(void (**)(uint64_t))(*(_QWORD *)v1767 + 8))(v1767);
                      __dst.n128_u64[0] = 0x8217BEFF5E3814C6;
                      __dst.n128_u64[1] = (unint64_t)"md::components::IntendedSceneLayer]";
                      *(_QWORD *)&v2125 = 34;
                      gdc::Registry::_registerStorageDataSignals((uint64_t)v1570, 0x8217BEFF5E3814C6, (uint64_t)&__dst, (uint64_t *)(v1765 + 104));
LABEL_2510:
                      *(_QWORD *)v2080 = v1602;
                      v1768 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v1765 + 32), (uint64_t)v2080);
                      if ((v1769 & 1) == 0)
                      {
                        v1770 = (_BYTE *)(*(_QWORD *)(v1765 + 80) + (((uint64_t)v1768 - *(_QWORD *)(v1765 + 56)) >> 3));
                        *v1770 = (_BYTE)v2057;
                        v1771 = *(void **)(v1765 + 248);
                        if (v1770 != *(_BYTE **)(v1765 + 88))
                        {
                          for (nn = *(_QWORD **)(v1765 + 128); nn; nn = (_QWORD *)*nn)
                          {
                            __dst.n128_u64[0] = (unint64_t)v2080;
                            __dst.n128_u64[1] = 1;
                            v2109[0] = v1771;
                            v1773 = nn[6];
                            if (!v1773)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1773 + 48))(v1773, v2109, &__dst);
                          }
                          goto LABEL_2552;
                        }
LABEL_2549:
                        for (i1 = *(_QWORD **)(v1765 + 176); i1; i1 = (_QWORD *)*i1)
                        {
                          __dst.n128_u64[0] = (unint64_t)v2080;
                          __dst.n128_u64[1] = 1;
                          v2109[0] = v1771;
                          v1797 = i1[6];
                          if (!v1797)
                            goto LABEL_2903;
                          (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1797 + 48))(v1797, v2109, &__dst);
                        }
LABEL_2552:
                        v1798 = 0x3FD9D9EF0A6A9A58;
                        v2109[0] = (void *)0x3FD9D9EF0A6A9A58;
                        v1799 = *(int8x8_t *)((char *)v1570 + 128);
                        if (v1799)
                        {
                          v1800 = (uint8x8_t)vcnt_s8(v1799);
                          v1800.i16[0] = vaddlv_u8(v1800);
                          if (v1800.u32[0] > 1uLL)
                          {
                            if (*(_QWORD *)&v1799 <= 0x3FD9D9EF0A6A9A58uLL)
                              v1798 = 0x3FD9D9EF0A6A9A58uLL % *(_QWORD *)&v1799;
                          }
                          else
                          {
                            v1798 = (*(_QWORD *)&v1799 - 1) & 0x3FD9D9EF0A6A9A58;
                          }
                          v1801 = *(_QWORD **)(*(_QWORD *)v2065.n128_u64[0] + 8 * v1798);
                          if (v1801)
                          {
                            v1802 = (_QWORD *)*v1801;
                            if (v1802)
                            {
                              if (v1800.u32[0] < 2uLL)
                              {
                                v1803 = *(_QWORD *)&v1799 - 1;
                                while (1)
                                {
                                  v1805 = v1802[1];
                                  if (v1805 == 0x3FD9D9EF0A6A9A58)
                                  {
                                    if (v1802[2] == 0x3FD9D9EF0A6A9A58)
                                      goto LABEL_2642;
                                  }
                                  else if ((v1805 & v1803) != v1798)
                                  {
                                    goto LABEL_2572;
                                  }
                                  v1802 = (_QWORD *)*v1802;
                                  if (!v1802)
                                    goto LABEL_2572;
                                }
                              }
                              do
                              {
                                v1804 = v1802[1];
                                if (v1804 == 0x3FD9D9EF0A6A9A58)
                                {
                                  if (v1802[2] == 0x3FD9D9EF0A6A9A58)
                                  {
LABEL_2642:
                                    v1806 = v1802[3];
                                    goto LABEL_2575;
                                  }
                                }
                                else
                                {
                                  if (v1804 >= *(_QWORD *)&v1799)
                                    v1804 %= *(_QWORD *)&v1799;
                                  if (v1804 != v1798)
                                    break;
                                }
                                v1802 = (_QWORD *)*v1802;
                              }
                              while (v1802);
                            }
                          }
                        }
LABEL_2572:
                        v1806 = operator new();
                        *(_QWORD *)(v1806 + 16) = "md::components::Collapsible]";
                        *(_QWORD *)(v1806 + 24) = 27;
                        *(_OWORD *)(v1806 + 32) = 0u;
                        *(_OWORD *)(v1806 + 48) = 0u;
                        *(_OWORD *)(v1806 + 64) = 0u;
                        *(_OWORD *)(v1806 + 80) = 0u;
                        *(_OWORD *)(v1806 + 96) = 0u;
                        *(_OWORD *)(v1806 + 112) = 0u;
                        *(_OWORD *)(v1806 + 128) = 0u;
                        *(_DWORD *)(v1806 + 144) = 1065353216;
                        *(_OWORD *)(v1806 + 152) = 0u;
                        *(_OWORD *)(v1806 + 168) = 0u;
                        *(_QWORD *)(v1806 + 184) = 0;
                        *(_DWORD *)(v1806 + 192) = 1065353216;
                        *(_OWORD *)(v1806 + 200) = 0u;
                        *(_OWORD *)(v1806 + 216) = 0u;
                        *(_QWORD *)(v1806 + 232) = 0;
                        *(_DWORD *)(v1806 + 240) = 1065353216;
                        *(_QWORD *)(v1806 + 8) = 0x3FD9D9EF0A6A9A58;
                        *(_QWORD *)v1806 = &off_1E42B2EC8;
                        *(_QWORD *)(v1806 + 248) = v1570;
                        v1807 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)v2065.n128_u64[0], 0x3FD9D9EF0A6A9A58uLL, v2109);
                        v1808 = v1807[3];
                        v1807[3] = v1806;
                        if (v1808)
                          (*(void (**)(uint64_t))(*(_QWORD *)v1808 + 8))(v1808);
                        __dst.n128_u64[0] = 0x3FD9D9EF0A6A9A58;
                        __dst.n128_u64[1] = (unint64_t)"md::components::Collapsible]";
                        *(_QWORD *)&v2125 = 27;
                        gdc::Registry::_registerStorageDataSignals((uint64_t)v1570, 0x3FD9D9EF0A6A9A58, (uint64_t)&__dst, (uint64_t *)(v1806 + 104));
LABEL_2575:
                        *(_QWORD *)v2080 = v1602;
                        v1809 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v1806 + 32), (uint64_t)v2080);
                        if ((v1810 & 1) == 0)
                        {
                          v1811 = *(void **)(v1806 + 248);
                          if (*(_QWORD *)(v1806 + 80) + (((uint64_t)v1809 - *(_QWORD *)(v1806 + 56)) >> 3) != *(_QWORD *)(v1806 + 88))
                          {
                            for (i2 = *(_QWORD **)(v1806 + 128); i2; i2 = (_QWORD *)*i2)
                            {
                              __dst.n128_u64[0] = (unint64_t)v2080;
                              __dst.n128_u64[1] = 1;
                              v2109[0] = v1811;
                              v1813 = i2[6];
                              if (!v1813)
                                goto LABEL_2903;
                              (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1813 + 48))(v1813, v2109, &__dst);
                            }
                            goto LABEL_2600;
                          }
LABEL_2597:
                          for (i3 = *(_QWORD **)(v1806 + 176); i3; i3 = (_QWORD *)*i3)
                          {
                            __dst.n128_u64[0] = (unint64_t)v2080;
                            __dst.n128_u64[1] = 1;
                            v2109[0] = v1811;
                            v1826 = i3[6];
                            if (!v1826)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, void **, __n128 *))(*(_QWORD *)v1826 + 48))(v1826, v2109, &__dst);
                          }
LABEL_2600:
                          v1827 = v1602;
                          v1715 = v1602 >> 16;
                          v1716 = HIDWORD(v1827);
                          if (!(_DWORD)v2061)
                          {
                            if (v2056.i32[0])
                              goto LABEL_2669;
                            goto LABEL_2164;
                          }
                          v1828 = *(_QWORD *)(v2064 + 1320);
                          v1829 = 0xBF279C46863538CCLL;
                          __dst.n128_u64[0] = 0xBF279C46863538CCLL;
                          v1830 = *(int8x8_t *)(v1828 + 128);
                          if (v1830)
                          {
                            v1831 = (uint8x8_t)vcnt_s8(v1830);
                            v1831.i16[0] = vaddlv_u8(v1831);
                            if (v1831.u32[0] > 1uLL)
                            {
                              if (*(_QWORD *)&v1830 <= 0xBF279C46863538CCLL)
                                v1829 = 0xBF279C46863538CCLL % *(_QWORD *)&v1830;
                            }
                            else
                            {
                              v1829 = (*(_QWORD *)&v1830 - 1) & 0xBF279C46863538CCLL;
                            }
                            v1832 = *(_QWORD **)(*(_QWORD *)(v1828 + 120) + 8 * v1829);
                            if (v1832)
                            {
                              v1833 = (_QWORD *)*v1832;
                              if (v1833)
                              {
                                if (v1831.u32[0] < 2uLL)
                                {
                                  v1834 = *(_QWORD *)&v1830 - 1;
                                  while (1)
                                  {
                                    v1836 = v1833[1];
                                    if (v1836 == 0xBF279C46863538CCLL)
                                    {
                                      if (v1833[2] == 0xBF279C46863538CCLL)
                                        goto LABEL_2649;
                                    }
                                    else if ((v1836 & v1834) != v1829)
                                    {
                                      goto LABEL_2623;
                                    }
                                    v1833 = (_QWORD *)*v1833;
                                    if (!v1833)
                                      goto LABEL_2623;
                                  }
                                }
                                do
                                {
                                  v1835 = v1833[1];
                                  if (v1835 == 0xBF279C46863538CCLL)
                                  {
                                    if (v1833[2] == 0xBF279C46863538CCLL)
                                    {
LABEL_2649:
                                      v1837 = v1833[3];
                                      goto LABEL_2626;
                                    }
                                  }
                                  else
                                  {
                                    if (v1835 >= *(_QWORD *)&v1830)
                                      v1835 %= *(_QWORD *)&v1830;
                                    if (v1835 != v1829)
                                      break;
                                  }
                                  v1833 = (_QWORD *)*v1833;
                                }
                                while (v1833);
                              }
                            }
                          }
LABEL_2623:
                          v1837 = operator new();
                          *(_QWORD *)(v1837 + 16) = "md::components::MaterialRaster]";
                          *(_QWORD *)(v1837 + 24) = 30;
                          *(_OWORD *)(v1837 + 32) = 0u;
                          *(_OWORD *)(v1837 + 48) = 0u;
                          *(_OWORD *)(v1837 + 64) = 0u;
                          *(_OWORD *)(v1837 + 80) = 0u;
                          *(_OWORD *)(v1837 + 96) = 0u;
                          *(_OWORD *)(v1837 + 112) = 0u;
                          *(_OWORD *)(v1837 + 128) = 0u;
                          *(_DWORD *)(v1837 + 144) = 1065353216;
                          *(_OWORD *)(v1837 + 152) = 0u;
                          *(_OWORD *)(v1837 + 168) = 0u;
                          *(_QWORD *)(v1837 + 184) = 0;
                          *(_DWORD *)(v1837 + 192) = 1065353216;
                          *(_OWORD *)(v1837 + 200) = 0u;
                          *(_OWORD *)(v1837 + 216) = 0u;
                          *(_QWORD *)(v1837 + 232) = 0;
                          *(_DWORD *)(v1837 + 240) = 1065353216;
                          *(_QWORD *)(v1837 + 8) = 0xBF279C46863538CCLL;
                          *(_QWORD *)v1837 = &off_1E42B2FE8;
                          *(_QWORD *)(v1837 + 248) = v1828;
                          v1838 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v1828 + 120), 0xBF279C46863538CCLL, &__dst);
                          v1839 = v1838[3];
                          v1838[3] = v1837;
                          if (v1839)
                            (*(void (**)(uint64_t))(*(_QWORD *)v1839 + 8))(v1839);
                          *(_QWORD *)buf = 0xBF279C46863538CCLL;
                          *(_QWORD *)&buf[8] = "md::components::MaterialRaster]";
                          *(_QWORD *)&buf[16] = 30;
                          gdc::Registry::_registerStorageDataSignals(v1828, 0xBF279C46863538CCLL, (uint64_t)buf, (uint64_t *)(v1837 + 104));
LABEL_2626:
                          v2109[0] = (void *)v2063.n128_u64[0];
                          v1840 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v1837 + 32), (uint64_t)v2109);
                          if ((v1841 & 1) == 0)
                          {
                            v1842 = (_BYTE *)(*(_QWORD *)(v1837 + 80) + (((uint64_t)v1840 - *(_QWORD *)(v1837 + 56)) >> 3));
                            *v1842 = v2061;
                            v1843 = *(_QWORD *)(v1837 + 248);
                            if (v1842 != *(_BYTE **)(v1837 + 88))
                            {
                              for (i4 = *(_QWORD **)(v1837 + 128); i4; i4 = (_QWORD *)*i4)
                              {
                                *(_QWORD *)buf = v2109;
                                *(_QWORD *)&buf[8] = 1;
                                __dst.n128_u64[0] = v1843;
                                v1845 = i4[6];
                                if (!v1845)
                                  goto LABEL_2903;
                                (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1845 + 48))(v1845, &__dst, buf);
                              }
LABEL_2668:
                              if ((v2056.i8[0] & 1) != 0)
                                goto LABEL_2669;
                              goto LABEL_2164;
                            }
LABEL_2665:
                            for (i5 = *(_QWORD **)(v1837 + 176); i5; i5 = (_QWORD *)*i5)
                            {
                              *(_QWORD *)buf = v2109;
                              *(_QWORD *)&buf[8] = 1;
                              __dst.n128_u64[0] = v1843;
                              v1869 = i5[6];
                              if (!v1869)
                                goto LABEL_2903;
                              (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1869 + 48))(v1869, &__dst, buf);
                            }
                            goto LABEL_2668;
                          }
                          v1847 = *(_BYTE **)(v1837 + 88);
                          v1846 = *(_QWORD *)(v1837 + 96);
                          if ((unint64_t)v1847 < v1846)
                          {
                            *v1847 = v2061;
                            v1848 = (uint64_t)(v1847 + 1);
LABEL_2664:
                            *(_QWORD *)(v1837 + 88) = v1848;
                            v1843 = *(_QWORD *)(v1837 + 248);
                            goto LABEL_2665;
                          }
                          v1849 = *(_BYTE **)(v1837 + 80);
                          v1850 = v1847 - v1849;
                          v1851 = v1847 - v1849 + 1;
                          if (v1851 < 0)
                            abort();
                          v1852 = v1846 - (_QWORD)v1849;
                          if (2 * v1852 > v1851)
                            v1851 = 2 * v1852;
                          if (v1852 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1853 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1853 = v1851;
                          if (v1853)
                            v1854 = (char *)operator new(v1853);
                          else
                            v1854 = 0;
                          v1855 = &v1854[v1850];
                          v1854[v1850] = v2061;
                          v1848 = (uint64_t)&v1854[v1850 + 1];
                          if (v1847 == v1849)
                            goto LABEL_2662;
                          if (v1850 >= 8 && (unint64_t)(v1849 - v1854) >= 0x20)
                          {
                            if (v1850 < 0x20)
                            {
                              v1856 = 0;
LABEL_2654:
                              v1861 = v1856 - (v1850 & 0xFFFFFFFFFFFFFFF8);
                              v1862 = &v1847[-v1856];
                              v1863 = &v1854[&v1847[-v1856] - v1849 - 8];
                              v1864 = (uint64_t *)(v1862 - 8);
                              do
                              {
                                v1865 = *v1864--;
                                *(_QWORD *)v1863 = v1865;
                                v1863 -= 8;
                                v1861 += 8;
                              }
                              while (v1861);
                              if (v1850 != (v1850 & 0xFFFFFFFFFFFFFFF8))
                              {
                                v1855 -= v1850 & 0xFFFFFFFFFFFFFFF8;
                                v1847 -= v1850 & 0xFFFFFFFFFFFFFFF8;
                                goto LABEL_2659;
                              }
LABEL_2661:
                              v1847 = *(_BYTE **)(v1837 + 80);
                              v1855 = v1854;
LABEL_2662:
                              *(_QWORD *)(v1837 + 80) = v1855;
                              *(_QWORD *)(v1837 + 88) = v1848;
                              *(_QWORD *)(v1837 + 96) = &v1854[v1853];
                              if (v1847)
                                operator delete(v1847);
                              goto LABEL_2664;
                            }
                            v1856 = v1850 & 0xFFFFFFFFFFFFFFE0;
                            v1857 = (__int128 *)(v1847 - 16);
                            v1858 = &v1854[v1850 - 16];
                            v1859 = v1850 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              v1860 = *v1857;
                              *((_OWORD *)v1858 - 1) = *(v1857 - 1);
                              *(_OWORD *)v1858 = v1860;
                              v1857 -= 2;
                              v1858 -= 32;
                              v1859 -= 32;
                            }
                            while (v1859);
                            if (v1850 == v1856)
                              goto LABEL_2661;
                            if ((v1850 & 0x18) != 0)
                              goto LABEL_2654;
                            v1855 -= v1856;
                            v1847 -= v1856;
                          }
LABEL_2659:
                          v1866 = v1855 - 1;
                          do
                          {
                            v1867 = *--v1847;
                            *v1866-- = v1867;
                          }
                          while (v1847 != v1849);
                          goto LABEL_2661;
                        }
                        v1815 = *(_BYTE **)(v1806 + 88);
                        v1814 = *(_QWORD *)(v1806 + 96);
                        if ((unint64_t)v1815 < v1814)
                        {
                          v1816 = (uint64_t)(v1815 + 1);
LABEL_2596:
                          *(_QWORD *)(v1806 + 88) = v1816;
                          v1811 = *(void **)(v1806 + 248);
                          goto LABEL_2597;
                        }
                        v1817 = *(char **)(v1806 + 80);
                        v1818 = v1815 - v1817;
                        v1819 = v1815 - v1817 + 1;
                        if (v1819 >= 0)
                        {
                          v1820 = v1814 - (_QWORD)v1817;
                          if (2 * v1820 > v1819)
                            v1819 = 2 * v1820;
                          if (v1820 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1821 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1821 = v1819;
                          if (v1821)
                            v1822 = (char *)operator new(v1821);
                          else
                            v1822 = 0;
                          v1823 = &v1822[v1821];
                          v1816 = (uint64_t)&v1822[v1818 + 1];
                          v1824 = (char *)(v1817 - v1815);
                          if (v1817 == v1815)
                            v1824 = 0;
                          *(_QWORD *)(v1806 + 80) = &v1822[v1818 + (_QWORD)v1824];
                          *(_QWORD *)(v1806 + 88) = v1816;
                          *(_QWORD *)(v1806 + 96) = v1823;
                          if (v1817)
                            operator delete(v1817);
                          goto LABEL_2596;
                        }
LABEL_2904:
                        abort();
                      }
                      v1775 = *(_BYTE **)(v1765 + 88);
                      v1774 = *(_QWORD *)(v1765 + 96);
                      if ((unint64_t)v1775 < v1774)
                      {
                        *v1775 = (_BYTE)v2057;
                        v1776 = (uint64_t)(v1775 + 1);
LABEL_2548:
                        *(_QWORD *)(v1765 + 88) = v1776;
                        v1771 = *(void **)(v1765 + 248);
                        v1602 = v2063.n128_u64[0];
                        goto LABEL_2549;
                      }
                      v1777 = *(_BYTE **)(v1765 + 80);
                      v1778 = v1775 - v1777;
                      v1779 = v1775 - v1777 + 1;
                      if (v1779 < 0)
                        goto LABEL_2904;
                      v1780 = v1774 - (_QWORD)v1777;
                      if (2 * v1780 > v1779)
                        v1779 = 2 * v1780;
                      if (v1780 >= 0x3FFFFFFFFFFFFFFFLL)
                        v1781 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v1781 = v1779;
                      if (v1781)
                        v1782 = (char *)operator new(v1781);
                      else
                        v1782 = 0;
                      v1783 = &v1782[v1778];
                      v1782[v1778] = (char)v2057;
                      v1776 = (uint64_t)&v1782[v1778 + 1];
                      if (v1775 == v1777)
                        goto LABEL_2546;
                      if (v1778 >= 8 && (unint64_t)(v1777 - v1782) >= 0x20)
                      {
                        if (v1778 < 0x20)
                        {
                          v1784 = 0;
LABEL_2538:
                          v1789 = v1784 - (v1778 & 0xFFFFFFFFFFFFFFF8);
                          v1790 = &v1775[-v1784];
                          v1791 = &v1782[&v1775[-v1784] - v1777 - 8];
                          v1792 = (uint64_t *)(v1790 - 8);
                          do
                          {
                            v1793 = *v1792--;
                            *(_QWORD *)v1791 = v1793;
                            v1791 -= 8;
                            v1789 += 8;
                          }
                          while (v1789);
                          if (v1778 != (v1778 & 0xFFFFFFFFFFFFFFF8))
                          {
                            v1783 -= v1778 & 0xFFFFFFFFFFFFFFF8;
                            v1775 -= v1778 & 0xFFFFFFFFFFFFFFF8;
                            goto LABEL_2543;
                          }
LABEL_2545:
                          v1783 = v1782;
LABEL_2546:
                          *(_QWORD *)(v1765 + 80) = v1783;
                          *(_QWORD *)(v1765 + 88) = v1776;
                          *(_QWORD *)(v1765 + 96) = &v1782[v1781];
                          if (v1777)
                            operator delete(v1777);
                          goto LABEL_2548;
                        }
                        v1784 = v1778 & 0xFFFFFFFFFFFFFFE0;
                        v1785 = &v1782[v1778 - 16];
                        v1786 = (__int128 *)(v1775 - 16);
                        v1787 = v1778 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v1788 = *v1786;
                          *((_OWORD *)v1785 - 1) = *(v1786 - 1);
                          *(_OWORD *)v1785 = v1788;
                          v1785 -= 32;
                          v1786 -= 2;
                          v1787 -= 32;
                        }
                        while (v1787);
                        if (v1778 == v1784)
                          goto LABEL_2545;
                        if ((v1778 & 0x18) != 0)
                          goto LABEL_2538;
                        v1783 -= v1784;
                        v1775 -= v1784;
                      }
LABEL_2543:
                      v1794 = v1783 - 1;
                      do
                      {
                        v1795 = *--v1775;
                        *v1794-- = v1795;
                      }
                      while (v1775 != v1777);
                      goto LABEL_2545;
                    }
                    v1739 = *(char **)(v1729 + 88);
                    v1738 = *(_QWORD *)(v1729 + 96);
                    if ((unint64_t)v1739 < v1738)
                    {
                      *(_QWORD *)v1739 = v2058.i64[0];
                      v1740 = v1739 + 8;
LABEL_2483:
                      *(_QWORD *)(v1729 + 88) = v1740;
                      v1735 = *(void **)(v1729 + 248);
                      v1602 = v2063.n128_u64[0];
                      goto LABEL_2484;
                    }
                    v1741 = *(char **)(v1729 + 80);
                    v1742 = (v1739 - v1741) >> 3;
                    v1743 = v1742 + 1;
                    if ((unint64_t)(v1742 + 1) >> 61)
                      goto LABEL_2904;
                    v1744 = v1738 - (_QWORD)v1741;
                    if (v1744 >> 2 > v1743)
                      v1743 = v1744 >> 2;
                    if ((unint64_t)v1744 >= 0x7FFFFFFFFFFFFFF8)
                      v1745 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v1745 = v1743;
                    if (!v1745)
                    {
                      v1746 = 0;
LABEL_2474:
                      v1747 = &v1746[8 * v1742];
                      *v1747 = v2058.i64[0];
                      v1740 = v1747 + 1;
                      if (v1739 != v1741)
                      {
                        v1748 = v1739 - 8 - v1741;
                        if (v1748 < 0x58)
                          goto LABEL_2940;
                        if ((unint64_t)(v1741 - v1746) < 0x20)
                          goto LABEL_2940;
                        v1749 = (v1748 >> 3) + 1;
                        v1750 = &v1746[8 * v1742 - 16];
                        v1751 = v1739 - 16;
                        v1752 = v1749 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v1753 = *(_OWORD *)v1751;
                          *(v1750 - 1) = *((_OWORD *)v1751 - 1);
                          *v1750 = v1753;
                          v1750 -= 2;
                          v1751 -= 32;
                          v1752 -= 4;
                        }
                        while (v1752);
                        v1747 -= v1749 & 0x3FFFFFFFFFFFFFFCLL;
                        v1739 -= 8 * (v1749 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v1749 != (v1749 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_2940:
                          do
                          {
                            v1754 = *((_QWORD *)v1739 - 1);
                            v1739 -= 8;
                            *--v1747 = v1754;
                          }
                          while (v1739 != v1741);
                        }
                      }
                      *(_QWORD *)(v1729 + 80) = v1747;
                      *(_QWORD *)(v1729 + 88) = v1740;
                      *(_QWORD *)(v1729 + 96) = &v1746[8 * v1745];
                      if (v1741)
                        operator delete(v1741);
                      goto LABEL_2483;
                    }
                    if (!(v1745 >> 61))
                    {
                      v1746 = operator new(8 * v1745);
                      goto LABEL_2474;
                    }
LABEL_2905:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  v1637 = *(_BYTE **)(v1627 + 88);
                  v1636 = *(_QWORD *)(v1627 + 96);
                  if ((unint64_t)v1637 < v1636)
                  {
                    *v1637 = 1;
                    v1638 = (uint64_t)(v1637 + 1);
LABEL_2429:
                    *(_QWORD *)(v1627 + 88) = v1638;
                    v1633 = *(void **)(v1627 + 248);
                    v1602 = v2063.n128_u64[0];
                    goto LABEL_2430;
                  }
                  v1639 = *(_BYTE **)(v1627 + 80);
                  v1640 = v1637 - v1639;
                  v1641 = v1637 - v1639 + 1;
                  if (v1641 < 0)
                    goto LABEL_2904;
                  v1642 = v1636 - (_QWORD)v1639;
                  if (2 * v1642 > v1641)
                    v1641 = 2 * v1642;
                  if (v1642 >= 0x3FFFFFFFFFFFFFFFLL)
                    v1643 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v1643 = v1641;
                  if (v1643)
                    v1644 = (char *)operator new(v1643);
                  else
                    v1644 = 0;
                  v1645 = &v1644[v1640];
                  v1644[v1640] = 1;
                  v1638 = (uint64_t)&v1644[v1640 + 1];
                  if (v1637 == v1639)
                    goto LABEL_2427;
                  if (v1640 >= 8 && (unint64_t)(v1639 - v1644) >= 0x20)
                  {
                    if (v1640 < 0x20)
                    {
                      v1646 = 0;
LABEL_2332:
                      v1651 = v1646 - (v1640 & 0xFFFFFFFFFFFFFFF8);
                      v1652 = &v1637[-v1646];
                      v1653 = &v1644[&v1637[-v1646] - v1639 - 8];
                      v1654 = (uint64_t *)(v1652 - 8);
                      do
                      {
                        v1655 = *v1654--;
                        *(_QWORD *)v1653 = v1655;
                        v1653 -= 8;
                        v1651 += 8;
                      }
                      while (v1651);
                      if (v1640 != (v1640 & 0xFFFFFFFFFFFFFFF8))
                      {
                        v1645 -= v1640 & 0xFFFFFFFFFFFFFFF8;
                        v1637 -= v1640 & 0xFFFFFFFFFFFFFFF8;
                        goto LABEL_2424;
                      }
LABEL_2426:
                      v1645 = v1644;
LABEL_2427:
                      *(_QWORD *)(v1627 + 80) = v1645;
                      *(_QWORD *)(v1627 + 88) = v1638;
                      *(_QWORD *)(v1627 + 96) = &v1644[v1643];
                      if (v1639)
                        operator delete(v1639);
                      goto LABEL_2429;
                    }
                    v1646 = v1640 & 0xFFFFFFFFFFFFFFE0;
                    v1647 = &v1644[v1640 - 16];
                    v1648 = (__int128 *)(v1637 - 16);
                    v1649 = v1640 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v1650 = *v1648;
                      *((_OWORD *)v1647 - 1) = *(v1648 - 1);
                      *(_OWORD *)v1647 = v1650;
                      v1647 -= 32;
                      v1648 -= 2;
                      v1649 -= 32;
                    }
                    while (v1649);
                    if (v1640 == v1646)
                      goto LABEL_2426;
                    if ((v1640 & 0x18) != 0)
                      goto LABEL_2332;
                    v1645 -= v1646;
                    v1637 -= v1646;
                  }
LABEL_2424:
                  v1717 = v1645 - 1;
                  do
                  {
                    v1718 = *--v1637;
                    *v1717-- = v1718;
                  }
                  while (v1637 != v1639);
                  goto LABEL_2426;
                }
              }
              else
              {
                if (v1543 >= v1537)
                  v1543 %= v1537;
                if (v1543 != v1539)
                  goto LABEL_2234;
              }
              v1541 = (uint64_t **)*v1541;
              if (!v1541)
                goto LABEL_2234;
            }
          }
          v1523 = *v1519;
          if (*v1523 == 100)
          {
            v1524 = v1523[1];
          }
          else
          {
            v1533 = 0;
            v1534 = v1523 + 2;
            do
            {
              if (v1522 - 1 == v1533)
                goto LABEL_2182;
              v1535 = *v1534;
              v1534 += 2;
              ++v1533;
            }
            while (v1535 != 100);
            v1524 = v1523[2 * v1533 + 1];
            if (v1533 >= v1522)
              goto LABEL_2183;
          }
          _ZF = v1524 > 0x17u || ((1 << v1524) & 0xB00408) == 0;
          if (_ZF)
            v1526 = 2;
          else
            v1526 = 1;
          v1527 = *(_QWORD *)(v1517 + 32 * v1513 + 8);
          if (!(_DWORD)v2045 || (v1524 | 2) != 0x1B)
          {
            v2056.i32[0] = 1;
            goto LABEL_2185;
          }
          v2059.i8[0] = v1524;
          v1528 = v1515 + (v1514 << 6);
          v1529 = *(unsigned int *)(v1528 + 56);
          if ((_DWORD)v1529)
          {
            v1530 = *(const void **)(v1528 + 48);
            v1531 = operator new(8 * v1529);
            memcpy(v1531, v1530, 8 * v1529);
            v1532 = vdupq_n_s64((unint64_t)v1531 + 8 * v1529);
          }
          else
          {
            v1531 = 0;
            v1532 = 0uLL;
          }
          v2065 = (__n128)v1532;
          v1545 = v1524 == 27;
          v1546 = *(_QWORD *)(v2064 + 1024);
          md::createFeatureAttributeSet((gss::Allocator *)v2109, v1520);
          v1547 = (gss::Allocator *)gss::FeatureAttributeSet::eraseKeyValuePair((uint64_t *)v2109, 100);
          memset(v2080, 0, sizeof(v2080));
          v1548 = gss::Allocator::instance(v1547);
          v2081 = v1548;
          v1549 = *(_QWORD *)&v2080[8];
          if (*(_QWORD *)&v2080[8] < *(_QWORD *)&v2080[16])
          {
            if (*(_QWORD *)&v2080[8])
              **(_QWORD **)&v2080[8] = 0x200000005;
            v1550 = (_QWORD *)(v1549 + 8);
            goto LABEL_2341;
          }
          v1551 = (uint64_t)(*(_QWORD *)&v2080[8] - *(_QWORD *)v2080) >> 3;
          v1552 = v1551 + 1;
          if ((unint64_t)(v1551 + 1) >> 61)
            abort();
          v1553 = *(_QWORD *)&v2080[16] - *(_QWORD *)v2080;
          if ((uint64_t)(*(_QWORD *)&v2080[16] - *(_QWORD *)v2080) >> 2 > v1552)
            v1552 = v1553 >> 2;
          if ((unint64_t)v1553 >= 0x7FFFFFFFFFFFFFF8)
            v1554 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1554 = v1552;
          if (v1554)
          {
            v1555 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1548 + 16))(v1548, 8 * v1554, 4);
            v1556 = (_QWORD *)(v1555 + 8 * v1551);
            v1557 = v1555 + 8 * v1554;
            if (v1555)
              *v1556 = 0x200000005;
          }
          else
          {
            v1557 = 0;
            v1556 = (_QWORD *)(8 * v1551);
          }
          v1558 = *(_QWORD *)&v2080[8];
          v1559 = *(_QWORD *)v2080;
          v1560 = *(_QWORD *)&v2080[8] - *(_QWORD *)v2080;
          if (*(_QWORD *)&v2080[8] == *(_QWORD *)v2080)
          {
            v1562 = v1556;
            goto LABEL_2339;
          }
          v1561 = v1560 - 8;
          if ((unint64_t)(v1560 - 8) < 0x38)
          {
            v1562 = v1556;
          }
          else
          {
            v1562 = v1556;
            if (*(_QWORD *)&v2080[8] - (_QWORD)v1556 >= 0x20uLL)
            {
              v1563 = (v1561 >> 3) + 1;
              v1564 = v1556 - 2;
              v1565 = (__int128 *)(*(_QWORD *)&v2080[8] - 16);
              v1566 = v1563 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1567 = *v1565;
                *(v1564 - 1) = *(v1565 - 1);
                *v1564 = v1567;
                v1564 -= 2;
                v1565 -= 2;
                v1566 -= 4;
              }
              while (v1566);
              v1562 = &v1556[-(v1563 & 0x3FFFFFFFFFFFFFFCLL)];
              v1558 -= 8 * (v1563 & 0x3FFFFFFFFFFFFFFCLL);
              if (v1563 == (v1563 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_2338:
                v1558 = *(_QWORD *)v2080;
LABEL_2339:
                v1550 = v1556 + 1;
                *(_QWORD *)v2080 = v1562;
                *(_QWORD *)&v2080[8] = v1556 + 1;
                v1657 = *(_QWORD *)&v2080[16];
                *(_QWORD *)&v2080[16] = v1557;
                if (v1558)
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2081 + 40))(v2081, v1558, v1657 - v1558);
LABEL_2341:
                *(_QWORD *)&v2080[8] = v1550;
                gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)v2109, (unsigned int **)v2080, (uint64_t *)&v2075);
                v1658 = *v2041;
                *(_QWORD *)&buf[7] = 0;
                *(_QWORD *)buf = 0;
                buf[15] = 1;
                gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(__b.n128_u64, v1658, (gss::FeatureAttributeSet *)&v2075, (gss::QueryOverrides *)buf);
                if (!buf[14] && *(_QWORD *)buf)
                {
                  v1660 = gss::Allocator::instance(v1659);
                  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1660 + 40))(v1660, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
                }
                v1661 = (unint64_t *)(v1546 + 80 * v1514);
                v1663 = *v1661;
                v1662 = v1661[1];
                if (v1662)
                {
                  v1664 = (unint64_t *)(v1662 + 8);
                  v1665 = v2065.n128_u64[0];
                  do
                    v1666 = __ldxr(v1664);
                  while (__stxr(v1666 + 1, v1664));
                  __dst.n128_u64[0] = v1663;
                  __dst.n128_u64[1] = v1662;
                  v2125 = *(_OWORD *)(v1546 + 80 * v1514 + 16);
                  LOBYTE(v2126) = v1545;
                  *((_QWORD *)&v2126 + 1) = v1531;
                  v2127 = v2065;
                  *(_QWORD *)buf = v1663;
                  *(_QWORD *)&buf[8] = v1662;
                  do
                    v1667 = __ldxr(v1664);
                  while (__stxr(v1667 + 1, v1664));
                }
                else
                {
                  __dst = (__n128)v1663;
                  v2125 = *(_OWORD *)(v1546 + 80 * v1514 + 16);
                  LOBYTE(v2126) = v1545;
                  *((_QWORD *)&v2126 + 1) = v1531;
                  v1665 = v2065.n128_u64[0];
                  v2127 = v2065;
                  *(_QWORD *)buf = v1663;
                  *(_QWORD *)&buf[8] = 0;
                }
                *(_OWORD *)&buf[16] = v2125;
                LOBYTE(v2138) = v2126;
                memset(&v2139[4], 0, 24);
                v1668 = v1665 - (_QWORD)v1531;
                if ((void *)v1665 != v1531)
                {
                  if (v1668 < 0)
                    abort();
                  v1669 = (char *)operator new(v1665 - (_QWORD)v1531);
                  v1670 = &v1669[8 * (v1668 >> 3)];
                  *(_QWORD *)&v2139[4] = v1669;
                  *(_QWORD *)&v2139[20] = v1670;
                  memcpy(v1669, v1531, v1668);
                  *(_QWORD *)&v2139[12] = v1670;
                }
                *(__n128 *)&v2139[28] = __b;
                if (__b.n128_u64[1])
                {
                  v1671 = (unint64_t *)(__b.n128_u64[1] + 8);
                  do
                    v1672 = __ldxr(v1671);
                  while (__stxr(v1672 + 1, v1671));
                }
                v1673 = *(_QWORD *)(v2064 + 1352);
                v1674 = *(_QWORD *)(v2064 + 1360);
                if (v1673 < v1674)
                {
                  *(_QWORD *)v1673 = v1663;
                  *(_QWORD *)(v1673 + 8) = *(_QWORD *)&buf[8];
                  *(_QWORD *)&buf[8] = 0;
                  *(_QWORD *)buf = 0;
                  v1675 = v2138;
                  *(_OWORD *)(v1673 + 16) = *(_OWORD *)&buf[16];
                  *(_BYTE *)(v1673 + 32) = v1675;
                  *(_QWORD *)(v1673 + 48) = 0;
                  *(_QWORD *)(v1673 + 56) = 0;
                  *(_QWORD *)(v1673 + 40) = 0;
                  *(_OWORD *)(v1673 + 40) = *(_OWORD *)&v2139[4];
                  *(_QWORD *)(v1673 + 56) = *(_QWORD *)&v2139[20];
                  memset(&v2139[4], 0, 24);
                  *(_OWORD *)(v1673 + 64) = *(_OWORD *)&v2139[28];
                  *(_OWORD *)&v2139[28] = 0uLL;
                  *(_QWORD *)(v2064 + 1352) = v1673 + 80;
                  v1676 = *(void **)&v2139[4];
                  if (*(_QWORD *)&v2139[4])
                    goto LABEL_2395;
                  goto LABEL_2396;
                }
                v1677 = *(_QWORD *)(v2064 + 1344);
                v1678 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v1673 - v1677) >> 4) + 1;
                if (v1678 > 0x333333333333333)
                  abort();
                v1679 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v1674 - v1677) >> 4);
                if (2 * v1679 > v1678)
                  v1678 = 2 * v1679;
                if (v1679 >= 0x199999999999999)
                  v1680 = 0x333333333333333;
                else
                  v1680 = v1678;
                if (v1680 > 0x333333333333333)
                  goto LABEL_2905;
                v1681 = (char *)operator new(80 * v1680);
                v1682 = *(_OWORD *)buf;
                v1683 = &v1681[16 * ((uint64_t)(v1673 - v1677) >> 4)];
                *(_QWORD *)&buf[8] = 0;
                *(_QWORD *)buf = 0;
                v1684 = *(_OWORD *)&buf[16];
                *(_OWORD *)v1683 = v1682;
                *((_OWORD *)v1683 + 1) = v1684;
                v1683[32] = v2138;
                *(_OWORD *)(v1683 + 40) = *(_OWORD *)&v2139[4];
                *((_QWORD *)v1683 + 7) = *(_QWORD *)&v2139[20];
                memset(&v2139[4], 0, 24);
                *((_OWORD *)v1683 + 4) = *(_OWORD *)&v2139[28];
                *(_OWORD *)&v2139[28] = 0uLL;
                if (v1673 == v1677)
                {
                  v1691 = vdupq_n_s64(v1673);
                  v1689 = &v1681[16 * ((uint64_t)(v1673 - v1677) >> 4)];
                  v1690 = (_QWORD *)v2064;
                }
                else
                {
                  v1685 = 0;
                  do
                  {
                    v1686 = &v1683[v1685];
                    v1687 = v1673 + v1685;
                    *((_OWORD *)v1686 - 5) = *(_OWORD *)(v1673 + v1685 - 80);
                    *(_QWORD *)(v1687 - 80) = 0;
                    *(_QWORD *)(v1687 - 72) = 0;
                    v1688 = *(_OWORD *)(v1673 + v1685 - 64);
                    *(v1686 - 48) = *(_BYTE *)(v1673 + v1685 - 48);
                    *((_OWORD *)v1686 - 4) = v1688;
                    *((_QWORD *)v1686 - 4) = 0;
                    *((_QWORD *)v1686 - 3) = 0;
                    *((_QWORD *)v1686 - 5) = 0;
                    *(_OWORD *)(v1686 - 40) = *(_OWORD *)(v1673 + v1685 - 40);
                    *((_QWORD *)v1686 - 3) = *(_QWORD *)(v1673 + v1685 - 24);
                    *(_QWORD *)(v1687 - 40) = 0;
                    *(_QWORD *)(v1687 - 32) = 0;
                    *(_QWORD *)(v1687 - 24) = 0;
                    *((_OWORD *)v1686 - 1) = *(_OWORD *)(v1673 + v1685 - 16);
                    *(_QWORD *)(v1687 - 16) = 0;
                    *(_QWORD *)(v1687 - 8) = 0;
                    v1685 -= 80;
                  }
                  while (v1673 + v1685 != v1677);
                  v1689 = &v1683[v1685];
                  v1690 = (_QWORD *)v2064;
                  v1691 = *(int64x2_t *)(v2064 + 1344);
                }
                v1692 = v1683 + 80;
                v1690[168] = v1689;
                v1690[169] = v1683 + 80;
                v1690[170] = &v1681[80 * v1680];
                v1694 = (char *)v1691.i64[1];
                v1693 = (char *)v1691.i64[0];
LABEL_2374:
                if (v1694 == v1693)
                {
                  if (v1693)
                    operator delete(v1693);
                  v1702 = *(std::__shared_weak_count **)&v2139[36];
                  *(_QWORD *)(v2064 + 1352) = v1692;
                  if (!v1702)
                    goto LABEL_2394;
                  v1703 = (unint64_t *)&v1702->__shared_owners_;
                  do
                    v1704 = __ldaxr(v1703);
                  while (__stlxr(v1704 - 1, v1703));
                  if (!v1704)
                  {
                    ((void (*)(std::__shared_weak_count *))v1702->__on_zero_shared)(v1702);
                    std::__shared_weak_count::__release_weak(v1702);
                    v1676 = *(void **)&v2139[4];
                    if (*(_QWORD *)&v2139[4])
                    {
LABEL_2395:
                      *(_QWORD *)&v2139[12] = v1676;
                      operator delete(v1676);
                    }
                  }
                  else
                  {
LABEL_2394:
                    v1676 = *(void **)&v2139[4];
                    if (*(_QWORD *)&v2139[4])
                      goto LABEL_2395;
                  }
LABEL_2396:
                  v1705 = *(std::__shared_weak_count **)&buf[8];
                  if (!*(_QWORD *)&buf[8])
                    goto LABEL_2400;
                  v1706 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v1707 = __ldaxr(v1706);
                  while (__stlxr(v1707 - 1, v1706));
                  if (!v1707)
                  {
                    ((void (*)(std::__shared_weak_count *))v1705->__on_zero_shared)(v1705);
                    std::__shared_weak_count::__release_weak(v1705);
                    v1708 = (void *)*((_QWORD *)&v2126 + 1);
                    if (*((_QWORD *)&v2126 + 1))
                    {
LABEL_2401:
                      v2127.n128_u64[0] = (unint64_t)v1708;
                      operator delete(v1708);
                    }
                  }
                  else
                  {
LABEL_2400:
                    v1708 = (void *)*((_QWORD *)&v2126 + 1);
                    if (*((_QWORD *)&v2126 + 1))
                      goto LABEL_2401;
                  }
                  v1709 = (std::__shared_weak_count *)__dst.n128_u64[1];
                  if (!__dst.n128_u64[1])
                    goto LABEL_2406;
                  v1710 = (unint64_t *)(__dst.n128_u64[1] + 8);
                  do
                    v1711 = __ldaxr(v1710);
                  while (__stlxr(v1711 - 1, v1710));
                  if (!v1711)
                  {
                    ((void (*)(std::__shared_weak_count *))v1709->__on_zero_shared)(v1709);
                    std::__shared_weak_count::__release_weak(v1709);
                    v1712 = (std::__shared_weak_count *)__b.n128_u64[1];
                    if (__b.n128_u64[1])
                    {
LABEL_2407:
                      v1713 = (unint64_t *)&v1712->__shared_owners_;
                      do
                        v1714 = __ldaxr(v1713);
                      while (__stlxr(v1714 - 1, v1713));
                      if (!v1714)
                      {
                        ((void (*)(std::__shared_weak_count *))v1712->__on_zero_shared)(v1712);
                        std::__shared_weak_count::__release_weak(v1712);
                      }
                    }
                  }
                  else
                  {
LABEL_2406:
                    v1712 = (std::__shared_weak_count *)__b.n128_u64[1];
                    if (__b.n128_u64[1])
                      goto LABEL_2407;
                  }
                  if (v2075.n128_u64[0])
                  {
                    v2075.n128_u64[1] = v2075.n128_u64[0];
                    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v2077
                                                                                                 + 40))(v2077, v2075.n128_u64[0], v2076 - v2075.n128_u64[0]);
                  }
                  if (*(_QWORD *)v2080)
                  {
                    *(_QWORD *)&v2080[8] = *(_QWORD *)v2080;
                    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2081 + 40))(v2081, *(_QWORD *)v2080, *(_QWORD *)&v2080[16] - *(_QWORD *)v2080);
                  }
                  if (v2109[0])
                  {
                    v2109[1] = v2109[0];
                    (*((void (**)(void **, void *, int64_t))*v2111 + 5))(v2111, v2109[0], v2110 - (char *)v2109[0]);
                  }
                  v2063.n128_u16[0] = 0;
                  LODWORD(v1715) = 0;
                  v1716 = 0xFFFFFFFFLL;
LABEL_2669:
                  v1870 = *(_QWORD *)(v2064 + 1320);
                  switch(v2059.i8[0])
                  {
                    case 0:
                      v1871 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1872 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1871 + 4, (uint64_t)v2109);
                      if ((v1873 & 1) != 0)
                      {
                        v1920 = (_BYTE *)v1871[11];
                        v1919 = v1871[12];
                        if ((unint64_t)v1920 < v1919)
                        {
                          v1921 = (uint64_t)(v1920 + 1);
LABEL_2807:
                          v1871[11] = v1921;
                          v1874 = v1871[31];
LABEL_2808:
                          v1986 = (_QWORD *)v1871[22];
                          if (!v1986)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1874;
                            v1987 = v1986[6];
                            if (!v1987)
                              break;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1987 + 48))(v1987, &__dst, buf);
                            v1986 = (_QWORD *)*v1986;
                            if (!v1986)
                              goto LABEL_2164;
                          }
LABEL_2903:
                          std::__throw_bad_function_call[abi:nn180100]();
LABEL_2919:
                          __break(1u);
                        }
                        v1946 = (char *)v1871[10];
                        v1947 = v1920 - v1946;
                        v1948 = v1920 - v1946 + 1;
                        if (v1948 >= 0)
                        {
                          v1949 = v1919 - (_QWORD)v1946;
                          if (2 * v1949 > v1948)
                            v1948 = 2 * v1949;
                          if (v1949 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1950 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1950 = v1948;
                          if (v1950)
                            v1951 = (char *)operator new(v1950);
                          else
                            v1951 = 0;
                          v1984 = &v1951[v1950];
                          v1921 = (uint64_t)&v1951[v1947 + 1];
                          v1985 = (char *)(v1946 - v1920);
                          if (v1946 == v1920)
                            v1985 = 0;
                          v1871[10] = (uint64_t)&v1951[v1947 + (_QWORD)v1985];
                          v1871[11] = v1921;
                          v1871[12] = (uint64_t)v1984;
                          if (v1946)
                            operator delete(v1946);
                          goto LABEL_2807;
                        }
LABEL_2907:
                        abort();
                      }
                      v1874 = v1871[31];
                      if (v1871[10] + (((uint64_t)v1872 - v1871[7]) >> 3) == v1871[11])
                        goto LABEL_2808;
                      for (i6 = (_QWORD *)v1871[16]; i6; i6 = (_QWORD *)*i6)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1874;
                        v1876 = i6[6];
                        if (!v1876)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1876 + 48))(v1876, &__dst, buf);
                      }
LABEL_2164:
                      v1510 = v2060.i64[0] + 1;
                      v1488 = v2046;
                      if (v2060.i64[0] + 1 >= (unint64_t)*(unsigned __int16 *)v2047)
                      {
                        v1486 = *v2035;
                        v1487 = v2038;
                        goto LABEL_2158;
                      }
                      break;
                    case 2:
                      v1883 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1884 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1883 + 4, (uint64_t)v2109);
                      if ((v1885 & 1) != 0)
                      {
                        v1917 = (_BYTE *)v1883[11];
                        v1916 = v1883[12];
                        if ((unint64_t)v1917 >= v1916)
                        {
                          v1940 = (char *)v1883[10];
                          v1941 = v1917 - v1940;
                          v1942 = v1917 - v1940 + 1;
                          if (v1942 < 0)
                            goto LABEL_2907;
                          v1943 = v1916 - (_QWORD)v1940;
                          if (2 * v1943 > v1942)
                            v1942 = 2 * v1943;
                          if (v1943 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1944 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1944 = v1942;
                          if (v1944)
                            v1945 = (char *)operator new(v1944);
                          else
                            v1945 = 0;
                          v1980 = &v1945[v1944];
                          v1918 = (uint64_t)&v1945[v1941 + 1];
                          v1981 = (char *)(v1940 - v1917);
                          if (v1940 == v1917)
                            v1981 = 0;
                          v1883[10] = (uint64_t)&v1945[v1941 + (_QWORD)v1981];
                          v1883[11] = v1918;
                          v1883[12] = (uint64_t)v1980;
                          if (v1940)
                            operator delete(v1940);
                        }
                        else
                        {
                          v1918 = (uint64_t)(v1917 + 1);
                        }
                        v1883[11] = v1918;
                        v1886 = v1883[31];
                      }
                      else
                      {
                        v1886 = v1883[31];
                        if (v1883[10] + (((uint64_t)v1884 - v1883[7]) >> 3) != v1883[11])
                        {
                          v1887 = (_QWORD *)v1883[16];
                          if (!v1887)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1886;
                            v1888 = v1887[6];
                            if (!v1888)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1888 + 48))(v1888, &__dst, buf);
                            v1887 = (_QWORD *)*v1887;
                            if (!v1887)
                              goto LABEL_2164;
                          }
                        }
                      }
                      v1982 = (_QWORD *)v1883[22];
                      if (!v1982)
                        goto LABEL_2164;
                      while (1)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1886;
                        v1983 = v1982[6];
                        if (!v1983)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1983 + 48))(v1983, &__dst, buf);
                        v1982 = (_QWORD *)*v1982;
                        if (!v1982)
                          goto LABEL_2164;
                      }
                    case 3:
                      v1895 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1896 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1895 + 4, (uint64_t)v2109);
                      if ((v1897 & 1) != 0)
                      {
                        v1926 = (_BYTE *)v1895[11];
                        v1925 = v1895[12];
                        if ((unint64_t)v1926 >= v1925)
                        {
                          v1958 = (char *)v1895[10];
                          v1959 = v1926 - v1958;
                          v1960 = v1926 - v1958 + 1;
                          if (v1960 < 0)
                            goto LABEL_2907;
                          v1961 = v1925 - (_QWORD)v1958;
                          if (2 * v1961 > v1960)
                            v1960 = 2 * v1961;
                          if (v1961 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1962 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1962 = v1960;
                          if (v1962)
                            v1963 = (char *)operator new(v1962);
                          else
                            v1963 = 0;
                          v1992 = &v1963[v1962];
                          v1927 = (uint64_t)&v1963[v1959 + 1];
                          v1993 = (char *)(v1958 - v1926);
                          if (v1958 == v1926)
                            v1993 = 0;
                          v1895[10] = (uint64_t)&v1963[v1959 + (_QWORD)v1993];
                          v1895[11] = v1927;
                          v1895[12] = (uint64_t)v1992;
                          if (v1958)
                            operator delete(v1958);
                        }
                        else
                        {
                          v1927 = (uint64_t)(v1926 + 1);
                        }
                        v1895[11] = v1927;
                        v1898 = v1895[31];
                      }
                      else
                      {
                        v1898 = v1895[31];
                        if (v1895[10] + (((uint64_t)v1896 - v1895[7]) >> 3) != v1895[11])
                        {
                          v1899 = (_QWORD *)v1895[16];
                          if (!v1899)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1898;
                            v1900 = v1899[6];
                            if (!v1900)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1900 + 48))(v1900, &__dst, buf);
                            v1899 = (_QWORD *)*v1899;
                            if (!v1899)
                              goto LABEL_2164;
                          }
                        }
                      }
                      v1994 = (_QWORD *)v1895[22];
                      if (!v1994)
                        goto LABEL_2164;
                      while (1)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1898;
                        v1995 = v1994[6];
                        if (!v1995)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1995 + 48))(v1995, &__dst, buf);
                        v1994 = (_QWORD *)*v1994;
                        if (!v1994)
                          goto LABEL_2164;
                      }
                    case 0x14:
                      v1901 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1902 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1901 + 4, (uint64_t)v2109);
                      if ((v1903 & 1) != 0)
                      {
                        v1929 = (_BYTE *)v1901[11];
                        v1928 = v1901[12];
                        if ((unint64_t)v1929 >= v1928)
                        {
                          v1964 = (char *)v1901[10];
                          v1965 = v1929 - v1964;
                          v1966 = v1929 - v1964 + 1;
                          if (v1966 < 0)
                            goto LABEL_2907;
                          v1967 = v1928 - (_QWORD)v1964;
                          if (2 * v1967 > v1966)
                            v1966 = 2 * v1967;
                          if (v1967 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1968 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1968 = v1966;
                          if (v1968)
                            v1969 = (char *)operator new(v1968);
                          else
                            v1969 = 0;
                          v1996 = &v1969[v1968];
                          v1930 = (uint64_t)&v1969[v1965 + 1];
                          v1997 = (char *)(v1964 - v1929);
                          if (v1964 == v1929)
                            v1997 = 0;
                          v1901[10] = (uint64_t)&v1969[v1965 + (_QWORD)v1997];
                          v1901[11] = v1930;
                          v1901[12] = (uint64_t)v1996;
                          if (v1964)
                            operator delete(v1964);
                        }
                        else
                        {
                          v1930 = (uint64_t)(v1929 + 1);
                        }
                        v1901[11] = v1930;
                        v1904 = v1901[31];
                      }
                      else
                      {
                        v1904 = v1901[31];
                        if (v1901[10] + (((uint64_t)v1902 - v1901[7]) >> 3) != v1901[11])
                        {
                          v1905 = (_QWORD *)v1901[16];
                          if (!v1905)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1904;
                            v1906 = v1905[6];
                            if (!v1906)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1906 + 48))(v1906, &__dst, buf);
                            v1905 = (_QWORD *)*v1905;
                            if (!v1905)
                              goto LABEL_2164;
                          }
                        }
                      }
                      v1998 = (_QWORD *)v1901[22];
                      if (!v1998)
                        goto LABEL_2164;
                      while (1)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1904;
                        v1999 = v1998[6];
                        if (!v1999)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1999 + 48))(v1999, &__dst, buf);
                        v1998 = (_QWORD *)*v1998;
                        if (!v1998)
                          goto LABEL_2164;
                      }
                    case 0x15:
                      v1907 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1908 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1907 + 4, (uint64_t)v2109);
                      if ((v1909 & 1) != 0)
                      {
                        v1932 = (_BYTE *)v1907[11];
                        v1931 = v1907[12];
                        if ((unint64_t)v1932 >= v1931)
                        {
                          v1970 = (char *)v1907[10];
                          v1971 = v1932 - v1970;
                          v1972 = v1932 - v1970 + 1;
                          if (v1972 < 0)
                            goto LABEL_2907;
                          v1973 = v1931 - (_QWORD)v1970;
                          if (2 * v1973 > v1972)
                            v1972 = 2 * v1973;
                          if (v1973 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1974 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1974 = v1972;
                          if (v1974)
                            v1975 = (char *)operator new(v1974);
                          else
                            v1975 = 0;
                          v2000 = &v1975[v1974];
                          v1933 = (uint64_t)&v1975[v1971 + 1];
                          v2001 = (char *)(v1970 - v1932);
                          if (v1970 == v1932)
                            v2001 = 0;
                          v1907[10] = (uint64_t)&v1975[v1971 + (_QWORD)v2001];
                          v1907[11] = v1933;
                          v1907[12] = (uint64_t)v2000;
                          if (v1970)
                            operator delete(v1970);
                        }
                        else
                        {
                          v1933 = (uint64_t)(v1932 + 1);
                        }
                        v1907[11] = v1933;
                        v1910 = v1907[31];
                      }
                      else
                      {
                        v1910 = v1907[31];
                        if (v1907[10] + (((uint64_t)v1908 - v1907[7]) >> 3) != v1907[11])
                        {
                          v1911 = (_QWORD *)v1907[16];
                          if (!v1911)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1910;
                            v1912 = v1911[6];
                            if (!v1912)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1912 + 48))(v1912, &__dst, buf);
                            v1911 = (_QWORD *)*v1911;
                            if (!v1911)
                              goto LABEL_2164;
                          }
                        }
                      }
                      v2002 = (_QWORD *)v1907[22];
                      if (!v2002)
                        goto LABEL_2164;
                      while (1)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1910;
                        v2003 = v2002[6];
                        if (!v2003)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v2003 + 48))(v2003, &__dst, buf);
                        v2002 = (_QWORD *)*v2002;
                        if (!v2002)
                          goto LABEL_2164;
                      }
                    case 0x17:
                      v1877 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1878 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1877 + 4, (uint64_t)v2109);
                      if ((v1879 & 1) != 0)
                      {
                        v1914 = (_BYTE *)v1877[11];
                        v1913 = v1877[12];
                        if ((unint64_t)v1914 >= v1913)
                        {
                          v1934 = (char *)v1877[10];
                          v1935 = v1914 - v1934;
                          v1936 = v1914 - v1934 + 1;
                          if (v1936 < 0)
                            goto LABEL_2907;
                          v1937 = v1913 - (_QWORD)v1934;
                          if (2 * v1937 > v1936)
                            v1936 = 2 * v1937;
                          if (v1937 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1938 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1938 = v1936;
                          if (v1938)
                            v1939 = (char *)operator new(v1938);
                          else
                            v1939 = 0;
                          v1976 = &v1939[v1938];
                          v1915 = (uint64_t)&v1939[v1935 + 1];
                          v1977 = (char *)(v1934 - v1914);
                          if (v1934 == v1914)
                            v1977 = 0;
                          v1877[10] = (uint64_t)&v1939[v1935 + (_QWORD)v1977];
                          v1877[11] = v1915;
                          v1877[12] = (uint64_t)v1976;
                          if (v1934)
                            operator delete(v1934);
                        }
                        else
                        {
                          v1915 = (uint64_t)(v1914 + 1);
                        }
                        v1877[11] = v1915;
                        v1880 = v1877[31];
                      }
                      else
                      {
                        v1880 = v1877[31];
                        if (v1877[10] + (((uint64_t)v1878 - v1877[7]) >> 3) != v1877[11])
                        {
                          v1881 = (_QWORD *)v1877[16];
                          if (!v1881)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1880;
                            v1882 = v1881[6];
                            if (!v1882)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1882 + 48))(v1882, &__dst, buf);
                            v1881 = (_QWORD *)*v1881;
                            if (!v1881)
                              goto LABEL_2164;
                          }
                        }
                      }
                      v1978 = (_QWORD *)v1877[22];
                      if (!v1978)
                        goto LABEL_2164;
                      while (1)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1880;
                        v1979 = v1978[6];
                        if (!v1979)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1979 + 48))(v1979, &__dst, buf);
                        v1978 = (_QWORD *)*v1978;
                        if (!v1978)
                          goto LABEL_2164;
                      }
                    case 0x18:
                      v1889 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>(v1870);
                      v2109[0] = (void *)(((_DWORD)v1715 << 16) | (unint64_t)(v1716 << 32) | v2063.n128_u16[0]);
                      v1890 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1889 + 4, (uint64_t)v2109);
                      if ((v1891 & 1) != 0)
                      {
                        v1923 = (_BYTE *)v1889[11];
                        v1922 = v1889[12];
                        if ((unint64_t)v1923 >= v1922)
                        {
                          v1952 = (char *)v1889[10];
                          v1953 = v1923 - v1952;
                          v1954 = v1923 - v1952 + 1;
                          if (v1954 < 0)
                            goto LABEL_2907;
                          v1955 = v1922 - (_QWORD)v1952;
                          if (2 * v1955 > v1954)
                            v1954 = 2 * v1955;
                          if (v1955 >= 0x3FFFFFFFFFFFFFFFLL)
                            v1956 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v1956 = v1954;
                          if (v1956)
                            v1957 = (char *)operator new(v1956);
                          else
                            v1957 = 0;
                          v1988 = &v1957[v1956];
                          v1924 = (uint64_t)&v1957[v1953 + 1];
                          v1989 = (char *)(v1952 - v1923);
                          if (v1952 == v1923)
                            v1989 = 0;
                          v1889[10] = (uint64_t)&v1957[v1953 + (_QWORD)v1989];
                          v1889[11] = v1924;
                          v1889[12] = (uint64_t)v1988;
                          if (v1952)
                            operator delete(v1952);
                        }
                        else
                        {
                          v1924 = (uint64_t)(v1923 + 1);
                        }
                        v1889[11] = v1924;
                        v1892 = v1889[31];
                      }
                      else
                      {
                        v1892 = v1889[31];
                        if (v1889[10] + (((uint64_t)v1890 - v1889[7]) >> 3) != v1889[11])
                        {
                          v1893 = (_QWORD *)v1889[16];
                          if (!v1893)
                            goto LABEL_2164;
                          while (1)
                          {
                            *(_QWORD *)buf = v2109;
                            *(_QWORD *)&buf[8] = 1;
                            __dst.n128_u64[0] = v1892;
                            v1894 = v1893[6];
                            if (!v1894)
                              goto LABEL_2903;
                            (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1894 + 48))(v1894, &__dst, buf);
                            v1893 = (_QWORD *)*v1893;
                            if (!v1893)
                              goto LABEL_2164;
                          }
                        }
                      }
                      v1990 = (_QWORD *)v1889[22];
                      if (!v1990)
                        goto LABEL_2164;
                      while (1)
                      {
                        *(_QWORD *)buf = v2109;
                        *(_QWORD *)&buf[8] = 1;
                        __dst.n128_u64[0] = v1892;
                        v1991 = v1990[6];
                        if (!v1991)
                          goto LABEL_2903;
                        (*(void (**)(uint64_t, __n128 *, _BYTE *))(*(_QWORD *)v1991 + 48))(v1991, &__dst, buf);
                        v1990 = (_QWORD *)*v1990;
                        if (!v1990)
                          goto LABEL_2164;
                      }
                    default:
                      goto LABEL_2164;
                  }
                  continue;
                }
                v1695 = (std::__shared_weak_count *)*((_QWORD *)v1694 - 1);
                if (!v1695)
                  goto LABEL_2379;
                v1696 = (unint64_t *)&v1695->__shared_owners_;
                do
                  v1697 = __ldaxr(v1696);
                while (__stlxr(v1697 - 1, v1696));
                if (!v1697)
                {
                  ((void (*)(std::__shared_weak_count *))v1695->__on_zero_shared)(v1695);
                  std::__shared_weak_count::__release_weak(v1695);
                  v1698 = (void *)*((_QWORD *)v1694 - 5);
                  if (v1698)
                  {
LABEL_2380:
                    *((_QWORD *)v1694 - 4) = v1698;
                    operator delete(v1698);
                  }
                }
                else
                {
LABEL_2379:
                  v1698 = (void *)*((_QWORD *)v1694 - 5);
                  if (v1698)
                    goto LABEL_2380;
                }
                v1699 = (std::__shared_weak_count *)*((_QWORD *)v1694 - 9);
                if (v1699)
                {
                  v1700 = (unint64_t *)&v1699->__shared_owners_;
                  do
                    v1701 = __ldaxr(v1700);
                  while (__stlxr(v1701 - 1, v1700));
                  if (!v1701)
                  {
                    ((void (*)(std::__shared_weak_count *))v1699->__on_zero_shared)(v1699);
                    std::__shared_weak_count::__release_weak(v1699);
                  }
                }
                v1694 -= 80;
                goto LABEL_2374;
              }
            }
          }
          break;
        }
        do
        {
          v1656 = *(_QWORD *)(v1558 - 8);
          v1558 -= 8;
          *--v1562 = v1656;
        }
        while (v1558 != v1559);
        goto LABEL_2338;
      }
    }
LABEL_2152:
    ++v2034;
  }
  if (v2084)
    operator delete(v2084);
  if ((_QWORD)v2152)
  {
    *((_QWORD *)&v2152 + 1) = v2152;
    operator delete((void *)v2152);
  }
  if (*((_QWORD *)&v2150 + 1))
  {
    *(_QWORD *)&v2151 = *((_QWORD *)&v2150 + 1);
    operator delete(*((void **)&v2150 + 1));
  }
  if ((_QWORD)v2149)
  {
    *((_QWORD *)&v2149 + 1) = v2149;
    operator delete((void *)v2149);
  }
  if (v2090[0])
  {
    v2090[1] = v2090[0];
    operator delete(v2090[0]);
  }
  v2004 = (std::__shared_weak_count *)*((_QWORD *)&v2089 + 1);
  if (*((_QWORD *)&v2089 + 1))
  {
    v2005 = (unint64_t *)(*((_QWORD *)&v2089 + 1) + 8);
    do
      v2006 = __ldaxr(v2005);
    while (__stlxr(v2006 - 1, v2005));
    if (!v2006)
    {
      ((void (*)(std::__shared_weak_count *))v2004->__on_zero_shared)(v2004);
      std::__shared_weak_count::__release_weak(v2004);
    }
  }
  if (v2092)
  {
    v2093 = v2092;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2095 + 40))(v2095, v2092, v2094 - v2092);
  }
  if (v2096)
  {
    v2097 = v2096;
    operator delete(v2096);
  }
  if (v2062)
    operator delete(v2062);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2100[0]);
  v2007 = v2102[0];
  if (v2102[0])
  {
    do
    {
      v2008 = (_QWORD *)*v2007;
      operator delete(v2007);
      v2007 = v2008;
    }
    while (v2008);
  }
  v2009 = v2101[0];
  v2101[0] = 0;
  if (v2009)
    operator delete(v2009);
  if (v2033)
    operator delete(v2033);
  if (__p)
    operator delete(__p);
  if (v2104)
  {
    v2105 = (__int32 *)v2104;
    operator delete(v2104);
  }
}

void sub_19F1CD36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ggl::BufferMemory *a14, ggl::BufferMemory *a15, void *a16, ggl::BufferMemory *a17, ggl::BufferMemory *a18, uint64_t a19, ggl::BufferMemory *a20,ggl::BufferMemory *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,ggl::BufferMemory *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;

  if (STACK[0x280])
    operator delete((void *)STACK[0x280]);
  v62 = a60;
  v63 = *(void **)(v60 - 192);
  if (v63)
  {
    *(_QWORD *)(v60 - 184) = v63;
    operator delete(v63);
    v62 = a60;
    v64 = *(void **)(v60 - 216);
    if (!v64)
    {
LABEL_5:
      v65 = *(void **)(v60 - 240);
      if (!v65)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else
  {
    v64 = *(void **)(v60 - 216);
    if (!v64)
      goto LABEL_5;
  }
  *(_QWORD *)(v60 - 208) = v64;
  operator delete(v64);
  v62 = a60;
  v65 = *(void **)(v60 - 240);
  if (!v65)
  {
LABEL_6:
    v66 = (void *)STACK[0x2C0];
    if (!STACK[0x2C0])
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v60 - 232) = v65;
  operator delete(v65);
  v62 = a60;
  v66 = (void *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_7:
    v67 = (std::__shared_weak_count *)STACK[0x2B8];
    if (!STACK[0x2B8])
      goto LABEL_17;
    goto LABEL_13;
  }
LABEL_12:
  STACK[0x2C8] = (unint64_t)v66;
  operator delete(v66);
  v62 = a60;
  v67 = (std::__shared_weak_count *)STACK[0x2B8];
  if (!STACK[0x2B8])
    goto LABEL_17;
LABEL_13:
  p_shared_owners = (unint64_t *)&v67->__shared_owners_;
  do
    v69 = __ldaxr(p_shared_owners);
  while (__stlxr(v69 - 1, p_shared_owners));
  v62 = a60;
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    v62 = a60;
  }
LABEL_17:
  v70 = STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = v70;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x2F8] + 40))(STACK[0x2F8], v70, STACK[0x2F0] - v70);
    v62 = a60;
    v71 = (void *)STACK[0x300];
    if (!STACK[0x300])
    {
LABEL_19:
      if (!v62)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else
  {
    v71 = (void *)STACK[0x300];
    if (!STACK[0x300])
      goto LABEL_19;
  }
  STACK[0x308] = (unint64_t)v71;
  operator delete(v71);
  v62 = a60;
  if (!a60)
  {
LABEL_21:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)STACK[0x320]);
    v72 = (_QWORD *)STACK[0x340];
    if (STACK[0x340])
    {
      do
      {
        v73 = (_QWORD *)*v72;
        operator delete(v72);
        v72 = v73;
      }
      while (v73);
    }
    v74 = (void *)STACK[0x330];
    STACK[0x330] = 0;
    if (v74)
    {
      operator delete(v74);
      v75 = a16;
      if (!a16)
      {
LABEL_25:
        v76 = a22;
        if (!a22)
          goto LABEL_26;
        goto LABEL_30;
      }
    }
    else
    {
      v75 = a16;
      if (!a16)
        goto LABEL_25;
    }
    operator delete(v75);
    v76 = a22;
    if (!a22)
    {
LABEL_26:
      v77 = (void *)STACK[0x358];
      if (!STACK[0x358])
        goto LABEL_27;
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v76);
    v77 = (void *)STACK[0x358];
    if (!STACK[0x358])
LABEL_27:
      _Unwind_Resume(a1);
LABEL_31:
    STACK[0x360] = (unint64_t)v77;
    operator delete(v77);
    _Unwind_Resume(a1);
  }
LABEL_20:
  operator delete(v62);
  goto LABEL_21;
}

uint64_t md::debugString<geo::QuadTile>(_BYTE *a1, _BYTE *a2)
{
  size_t v4;
  unint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[3];
  _QWORD v15[3];
  uint64_t v16;
  unint64_t v17;
  void *__p;
  char v19;
  unint64_t v20;
  int v21;
  uint64_t v22;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  md::outputDebugString(a2, v14);
  if ((v21 & 0x10) != 0)
  {
    v5 = v20;
    if (v20 < v17)
    {
      v20 = v17;
      v5 = v17;
    }
    v6 = (const void **)&v16;
  }
  else
  {
    if ((v21 & 8) == 0)
    {
      v4 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    v6 = (const void **)v15;
    v5 = v15[2];
  }
  v7 = *v6;
  v4 = v5 - (_QWORD)*v6;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v4;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v10;
    a1 = v10;
    goto LABEL_15;
  }
  a1[23] = v4;
  if (v4)
LABEL_15:
    memmove(a1, v7, v4);
LABEL_16:
  a1[v4] = 0;
  v13[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14[0] = v11;
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v22);
}

void sub_19F1CDC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundTileData::_buildIndexBuffer(char **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  __int128 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  int v33;
  unint64_t v35;
  int16x8_t *v36;
  uint64_t v37;
  int16x8_t *v38;
  int16x8_t *v39;
  unint64_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;

  v8 = a4[1] - *a4;
  v49 = v8 >> 2;
  v9 = operator new(0xF8uLL);
  v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E42E5228;
  v9[3] = &off_1E42B5748;
  v11 = (char *)(v9 + 3);
  v12 = *((_DWORD *)a4 + 6);
  v13 = (v8 >> 2);
  v14 = 4;
  if (v12 != 1)
    v14 = 1;
  if (v12)
    v15 = v14;
  else
    v15 = 2;
  v9[4] = v15;
  *((_DWORD *)v9 + 10) = 257;
  v16 = 2 * (v12 == 1);
  if (!v12)
    v16 = 1;
  v17 = v13 << v16;
  v9[6] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[9] = v13 << v16;
  v18 = 0uLL;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  v9[14] = 0;
  if ((v19 & 1) == 0)
  {
    v47 = v17;
    v48 = (char *)(v9 + 3);
    v18 = 0uLL;
    v17 = v47;
    v11 = v48;
    if (v45)
    {
      v46 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v46, "GeoGL", 0xA3D02C1100000005);
      v18 = 0uLL;
      v17 = v47;
      v11 = v48;
    }
  }
  v10[15] = ggl::Allocator::instance(void)::alloc;
  v10[16] = 0;
  *((_OWORD *)v10 + 11) = v18;
  *((_OWORD *)v10 + 12) = v18;
  v10[26] = 0;
  v10[27] = -1;
  *((_OWORD *)v10 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v10 + 10) = v18;
  *((_DWORD *)v10 + 34) = 0;
  v10[28] = &unk_1E42BD118;
  v10[29] = a2;
  *((_DWORD *)v10 + 60) = v12;
  v10[3] = &off_1E42BD0F8;
  v10[4] = v15;
  *a1 = v11;
  a1[1] = (char *)v10;
  if (!*((_DWORD *)a4 + 6))
  {
    v20 = a3;
    if ((v8 >> 2))
    {
      if (!a3 || *((_BYTE *)v10 + 41) == 2)
      {
        v21 = v10[12];
        if (!(_DWORD)v49)
          goto LABEL_41;
      }
      else
      {
        v21 = (*(uint64_t (**)(uint64_t, char *, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v11, 0, v17, 1, 1);
        if (!(_DWORD)v49)
          goto LABEL_41;
      }
      v36 = (int16x8_t *)*a4;
      if (v13 > 0xF)
      {
        v37 = (v8 >> 2) & 0xF;
        v35 = v13 - v37;
        v38 = (int16x8_t *)(v21 + 16);
        v39 = v36 + 2;
        v40 = v13 - v37;
        do
        {
          v42 = v39[-2];
          v41 = v39[-1];
          v44 = *v39;
          v43 = v39[1];
          v39 += 4;
          v38[-1] = vuzp1q_s16(v42, v41);
          *v38 = vuzp1q_s16(v44, v43);
          v38 += 2;
          v40 -= 16;
        }
        while (v40);
        if (!v37)
          goto LABEL_41;
      }
      else
      {
        v35 = 0;
      }
    }
    else
    {
      if (!(_DWORD)v49)
        return;
      v21 = 0;
      v35 = 0;
      v36 = (int16x8_t *)*a4;
    }
    do
    {
      *(_WORD *)(v21 + 2 * v35) = v36->i32[v35];
      ++v35;
    }
    while (v13 != v35);
    goto LABEL_41;
  }
  v20 = a3;
  if (!(v8 >> 2))
  {
    v21 = 0;
    if (!(_DWORD)v49)
      goto LABEL_41;
    goto LABEL_23;
  }
  if (a3 && *((_BYTE *)v10 + 41) != 2)
  {
    v21 = (*(uint64_t (**)(uint64_t, char *, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v11, 0, v17, 1, 1);
    if (!(_DWORD)v49)
      goto LABEL_41;
LABEL_23:
    v22 = 0;
    v23 = *a4;
    if (v13 < 8)
      goto LABEL_28;
    if ((unint64_t)(v21 - v23) <= 0x1F)
      goto LABEL_28;
    v24 = (v8 >> 2) & 7;
    v22 = v13 - v24;
    v25 = (_OWORD *)(v21 + 16);
    v26 = (__int128 *)(v23 + 16);
    v27 = v13 - v24;
    do
    {
      v28 = *v26;
      *(v25 - 1) = *(v26 - 1);
      *v25 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    if (v24)
    {
LABEL_28:
      v29 = v22 - v13;
      v30 = 4 * v22;
      v31 = (_DWORD *)(v21 + 4 * v22);
      v32 = (int *)(v23 + v30);
      do
      {
        v33 = *v32++;
        *v31++ = v33;
      }
      while (!__CFADD__(v29++, 1));
    }
    goto LABEL_41;
  }
  v21 = v10[12];
  if ((_DWORD)v49)
    goto LABEL_23;
LABEL_41:
  if (v21 && (v8 >> 2) && v20 && *((_BYTE *)v10 + 41) != 2)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 64))(v20);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v6) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F1CE2B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *__destroy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void `non-virtual thunk to'md::MapNavLabeler::setTrafficFeatures(md::RouteAnnotationSupport **this, NSArray *a2)
{
  md::RouteAnnotationSupport::setTrafficFeatures(this[8], a2);
}

void `non-virtual thunk to'md::StandardLabeler::setScreenLabelFeatures(uint64_t a1, void *a2)
{
  md::ScreenLabelFeatureSupport::setScreenLabelFeatures(*(_QWORD *)(a1 + 24), a2);
}

uint64_t md::CompositeLabeler::customDebugDraw(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 312))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

void md::MapNavLabeler::customDebugDraw(md::MapNavLabeler *this, id *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  double *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  double *v25;
  std::__shared_weak_count *v26;
  double v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  double *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  double *v44;
  std::__shared_weak_count *v45;
  double v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  float v50;
  int v51;
  float v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  float v58;
  unsigned __int8 v59;
  double v60;
  int32x2_t v61;
  size_t v62;
  _BYTE *v63;
  uint64_t v64;
  const void **v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  size_t v70;
  uint64_t v71;
  float64x2_t *v72;
  uint64_t v73;
  uint64_t v74;
  float64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  float64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  float32x2_t v85;
  double v90;
  float64x2_t v91;
  float64x2_t v92;
  id v93;
  unsigned int v94;
  __int128 v95;
  uint64_t v96;
  id v97;
  float32x2_t v98;
  float32x2_t v99;
  __int128 v100;
  float32x2_t v101;
  double v103;
  std::locale::__imp *v104;
  id v105;
  void *v106;
  void *v107;
  unsigned int *v108;
  float *v109;
  float v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  float v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  double v125;
  _QWORD *v126;
  unint64_t v127;
  _QWORD *v129;
  uint64_t v130;
  double *v131;
  uint64_t v132;
  uint64_t v133;
  float64x2_t *v134;
  double *v135;
  float32x2_t v136;
  float32x2_t v137;
  uint64_t v138;
  void *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  double v143;
  double v144;
  double v145;
  __double2 v146;
  double v147;
  __double2 v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  unint64_t v154;
  double *v155;
  double *v156;
  double *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  double *v162;
  double *v163;
  __int128 v164;
  _QWORD *v165;
  char *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  double *v170;
  unsigned int v171;
  double v172;
  double v173;
  double v174;
  __double2 v175;
  double v176;
  __double2 v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  unint64_t v183;
  double *v184;
  double *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  double *v190;
  double *v191;
  __int128 v192;
  _QWORD *v193;
  char *v194;
  char *v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int *v200;
  char *v201;
  unsigned int v202;
  char *v203;
  unint64_t v204;
  unsigned int *v205;
  char *v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  double v211;
  double v212;
  double v213;
  __double2 v214;
  double v215;
  __double2 v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  unint64_t v222;
  double *v223;
  double *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  double *v229;
  double v230;
  double v231;
  double v232;
  __double2 v233;
  double v234;
  __double2 v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  unint64_t v241;
  double *v242;
  double *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  double *v249;
  double *v250;
  __int128 v251;
  _QWORD *v252;
  double *v253;
  double *v254;
  __int128 v255;
  _QWORD *v256;
  _QWORD *v257;
  GEOComposedRoute *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  PolylineCoordinate v262;
  PolylineCoordinate v263;
  double v264;
  double v265;
  double v266;
  float64x2_t v267;
  float v268;
  char v269;
  char v270;
  uint64_t *v271;
  char v272;
  float v273;
  char v274;
  int v275;
  float *v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  uint64_t v285;
  double v286;
  unsigned __int8 v287;
  double v288;
  _BYTE *v289;
  uint64_t v290;
  int v291;
  int v292;
  const std::locale::facet *v293;
  char *v294;
  size_t v295;
  float64x2_t *v296;
  uint64_t v297;
  const void **v298;
  const void *v299;
  uint64_t v300;
  uint64_t v301;
  float64_t v302;
  size_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  int8x16_t *locale;
  unint64_t v309;
  uint64_t v310;
  geo::read_write_lock *v311;
  const char *v312;
  malloc_zone_t *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  geo::read_write_lock *v318;
  const char *v319;
  malloc_zone_t *zone;
  __int128 v321;
  _QWORD *v322;
  _QWORD *v323;
  float v324;
  uint64_t v325;
  int v326;
  unint64_t v327;
  GEOComposedRoute *v328;
  void *v329;
  id v330;
  float32x2_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  ggl::DebugConsole *v335;
  unsigned int v336;
  uint64_t v337;
  unsigned int *__sb;
  unsigned int __sb_4;
  std::ios_base *v340[2];
  float32x2_t v341;
  uint64_t v342;
  void *v343;
  void (**v344)(md::NavContext *__hidden);
  uint64_t v345;
  md::MapNavLabeler *v346;
  uint64_t v347;
  float32x2_t *v348;
  float *v349;
  float *v350;
  float64x2_t __p[24];
  __int128 v352;
  float64x2_t v353;
  float64x2_t v354;
  uint64_t v355;
  void (***v356)(md::NavContext *__hidden);
  _QWORD v357[49];
  int v358;
  uint64_t v359;
  int v360;
  std::ios_base *v361;
  int v362;
  uint64_t v363;
  int v364;
  unint64_t v365;
  int v366;
  float v367;
  uint64_t v368;
  uint64_t v369;
  float v370;
  uint64_t v371;
  uint64_t v372;
  float v373;
  int v374;
  float v375;
  int v376;
  float v377;
  int v378;
  float v379;
  uint64_t v380;
  uint64_t v381;
  float v382;
  uint64_t v383;
  uint64_t v384;
  float v385;
  int v386;
  float v387;
  float v388;
  float v389;
  int v390;
  float64x2_t v391;
  uint64_t v392;
  float64x2_t v393;
  uint64_t v394;
  PolylineCoordinate v395[2];
  uint64_t v396;
  float64x2_t v397;
  uint64_t v398;
  _BYTE __dst[384];
  void (***v400)(md::NavContext *__hidden);
  double v401[2];
  std::locale v402[2];
  int64_t v403;
  __int128 v404;
  uint64_t v405;

  v4 = *((_QWORD *)this + 86);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "enableEtaLabelDebugging") & 1) != 0)
    goto LABEL_6;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "enableRouteShareSectionDebugging") & 1) != 0)
  {
LABEL_5:

LABEL_6:
LABEL_7:
    v8 = *((_QWORD *)this + 3);
    v344 = &off_1E428BBF8;
    v345 = v8;
    v346 = this;
    v347 = v8 + 440;
    v348 = (float32x2_t *)((char *)this + 360);
    v334 = *((_QWORD *)this + 86);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v343 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v343, "enableEtaLabelDebugging") & 1) != 0
      || (objc_msgSend(v343, "enableEtaLabelRectDebugging") & 1) != 0
      || (objc_msgSend(v343, "enableRouteShareSectionDebugging") & 1) != 0)
    {
      v9 = 0;
      if (!*a2)
        goto LABEL_364;
    }
    else
    {
      if (!*(_BYTE *)(v334 + 448))
        goto LABEL_364;
      v9 = 1;
      if (!*a2)
        goto LABEL_364;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v10 = objc_msgSend(*a2, "debugConsoleForId:", 9);
      if (!*a2)
        goto LABEL_364;
LABEL_15:
      if ((objc_opt_respondsToSelector() & 1) == 0)
        goto LABEL_364;
      v11 = objc_msgSend(*a2, "debugConsoleForId:", 10);
      if (!v10)
        goto LABEL_364;
      v12 = v11;
      if (!v11)
        goto LABEL_364;
      ggl::DebugConsole::begin((ggl::DebugConsole *)v10);
      ggl::DebugConsole::begin((ggl::DebugConsole *)v12);
      if (*(_BYTE *)(v334 + 448))
      {
        *(_QWORD *)(v10 + 80) = 0;
        *(_QWORD *)(v12 + 80) = 0;
        *(_BYTE *)(v334 + 448) = 0;
      }
      if (v9)
      {
        ggl::DebugConsole::end(v12);
        ggl::DebugConsole::end(v10);
        goto LABEL_364;
      }
      v14 = *a2;
      objc_msgSend(v14, "sizeInPixels");
      v16 = v15;
      v18 = v17;

      v19 = v16;
      v20 = v18;
      v21 = (double *)a2[4];
      v22 = (std::__shared_weak_count *)a2[5];
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v25 = (double *)a2[4];
        v26 = (std::__shared_weak_count *)a2[5];
        v27 = v21[8];
        if (v26)
        {
          v28 = (unint64_t *)&v26->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          v30 = 0;
        }
        else
        {
          v30 = 1;
        }
        v21 = v25;
      }
      else
      {
        v26 = 0;
        v27 = v21[8];
        v30 = 1;
      }
      v31 = v27;
      v32 = *((unsigned __int8 *)v21 + 72);
      v33 = 2.0 / v19;
      v381 = 0;
      v380 = 0;
      v379 = 2.0 / v19;
      v382 = 2.0 / v20;
      v34 = v31 + -1.0;
      if (!v32)
        v34 = 1.0 - v31;
      v384 = 0;
      v383 = 0;
      v385 = v34;
      v386 = 0;
      v35 = (float)-v19 / v19;
      v387 = v35;
      v388 = (float)-v20 / v20;
      v389 = v31;
      v390 = 1065353216;
      if ((v30 & 1) == 0)
      {
        v36 = (unint64_t *)&v26->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v22)
      {
        v38 = (unint64_t *)&v22->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v40 = (double *)a2[4];
      v41 = (std::__shared_weak_count *)a2[5];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v44 = (double *)a2[4];
        v45 = (std::__shared_weak_count *)a2[5];
        v46 = v40[8];
        if (v45)
        {
          v47 = (unint64_t *)&v45->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v49 = 0;
        }
        else
        {
          v49 = 1;
        }
        v40 = v44;
      }
      else
      {
        v45 = 0;
        v46 = v40[8];
        v49 = 1;
      }
      v50 = v46;
      v51 = *((unsigned __int8 *)v40 + 72);
      v369 = 0;
      v368 = 0;
      v367 = v33;
      v370 = -2.0 / v20;
      v52 = v50 + -1.0;
      v372 = 0;
      v371 = 0;
      if (!v51)
        v52 = 1.0 - v50;
      v373 = v52;
      v374 = 0;
      v375 = v35;
      v376 = 1065353216;
      v377 = v50;
      v378 = 1065353216;
      if ((v49 & 1) == 0)
      {
        v53 = (unint64_t *)&v45->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v55 = v334;
      if (v41)
      {
        v56 = (unint64_t *)&v41->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      ggl::DebugConsole::setProjection(v10, &v367);
      *(_OWORD *)(v10 + 16) = xmmword_19FFB3BD0;
      *(_DWORD *)(v10 + 96) = -16777216;
      v335 = (ggl::DebugConsole *)v10;
      if (!objc_msgSend(v343, "enableEtaLabelDebugging"))
        goto LABEL_112;
      v58 = v18 * 0.200000003;
      *(_DWORD *)(v10 + 8) = 1101004800;
      *(float *)(v10 + 12) = v58;
      v357[11] = &unk_1E428AE08;
      v353.f64[1] = 0.0;
      std::ios_base::init((std::ios_base *)&v357[11], &v354.f64[1]);
      LODWORD(v357[29]) = -1;
      v357[28] = 0;
      v357[11] = off_1E42DA9B0;
      *(_QWORD *)&v353.f64[0] = off_1E42DA960;
      *(_QWORD *)&v354.f64[0] = off_1E42DA988;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&v354.f64[1] = off_1E42DA790;
      memset(&v357[5], 0, 24);
      {
        v317 = operator new();
        *(_QWORD *)(v317 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v317 + 24) = "VectorKitLabels";
        *(_OWORD *)(v317 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v317 = &off_1E42B5668;
        *(_QWORD *)(v317 + 8) = "VectorKitLabels";
        *(_OWORD *)(v317 + 72) = 0u;
        *(_OWORD *)(v317 + 88) = 0u;
        *(_OWORD *)(v317 + 104) = 0u;
        *(_OWORD *)(v317 + 120) = 0u;
        *(_OWORD *)(v317 + 136) = 0u;
        *(_OWORD *)(v317 + 152) = 0u;
        *(_OWORD *)(v317 + 168) = 0u;
        *(_OWORD *)(v317 + 184) = 0u;
        *(_OWORD *)(v317 + 200) = 0u;
        *(_OWORD *)(v317 + 216) = 0u;
        *(_OWORD *)(v317 + 232) = 0u;
        *(_QWORD *)(v317 + 248) = 0;
        *(_OWORD *)(v317 + 56) = 0u;
        v318 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v317 + 56), 0);
        if ((_DWORD)v318)
          geo::read_write_lock::logFailure(v318, (uint64_t)"initialization", v319);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v317 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v317 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v317;
      }
      v357[8] = mdm::Allocator::instance(void)::alloc;
      v357[9] = 0;
      LODWORD(v357[10]) = 24;
      md::LabelNavEtaLabeler::describeDebugState(v334, &v354, 0);
      if ((v357[10] & 0x10) != 0)
      {
        v64 = v357[9];
        if (v357[9] < v357[3])
        {
          v357[9] = v357[3];
          v64 = v357[3];
        }
        v65 = (const void **)&v357[2];
      }
      else
      {
        if ((v357[10] & 8) == 0)
        {
          v62 = 0;
          *(_QWORD *)&__dst[24] = v357[8];
          __dst[23] = 0;
          v63 = __dst;
          goto LABEL_88;
        }
        v65 = (const void **)&v356;
        v64 = v357[1];
      }
      v66 = *v65;
      v62 = v64 - (_QWORD)*v65;
      *(_QWORD *)&__dst[24] = v357[8];
      if (v62 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v62 >= 0x17)
      {
        v67 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v67 = v62 | 7;
        v68 = v67 + 1;
        v63 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v357[8] + 16))();
        *(_QWORD *)&__dst[16] = v68 | 0x8000000000000000;
        *(_QWORD *)__dst = v63;
        *(_QWORD *)&__dst[8] = v62;
      }
      else
      {
        __dst[23] = v62;
        v63 = __dst;
        if (!v62)
        {
LABEL_88:
          v63[v62] = 0;
          if ((__dst[23] & 0x80000000) != 0)
          {
            v70 = *(_QWORD *)&__dst[8];
            v71 = (uint64_t)v335;
            if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
              abort();
            v69 = *(_BYTE **)__dst;
          }
          else
          {
            v69 = __dst;
            v70 = __dst[23];
            v71 = (uint64_t)v335;
          }
          if (v70 >= 0x17)
          {
            v73 = (v70 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v73 = v70 | 7;
            v74 = v73 + 1;
            v72 = (float64x2_t *)operator new(v73 + 1);
            *(_QWORD *)&__p[0].f64[1] = v70;
            *(_QWORD *)&__p[1].f64[0] = v74 | 0x8000000000000000;
            *(_QWORD *)&__p[0].f64[0] = v72;
            v71 = (uint64_t)v335;
          }
          else
          {
            HIBYTE(__p[1].f64[0]) = v70;
            v72 = __p;
            if (!v70)
              goto LABEL_99;
          }
          memmove(v72, v69, v70);
LABEL_99:
          v55 = v334;
          *((_BYTE *)v72->f64 + v70) = 0;
          if (__p[1].f64[0] >= 0.0)
            v75 = COERCE_DOUBLE(__p);
          else
            v75 = __p[0].f64[0];
          if (__p[1].f64[0] >= 0.0)
            v76 = HIBYTE(__p[1].f64[0]);
          else
            v76 = *(_QWORD *)&__p[0].f64[1];
          ggl::DebugConsole::drawString(v71, *(int8x16_t **)&v75, v76, v60, v61);
          if (SHIBYTE(__p[1].f64[0]) < 0)
            operator delete(*(void **)&__p[0].f64[0]);
          if ((__dst[23] & 0x80000000) != 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)&__dst[24] + 40))(*(_QWORD *)&__dst[24], *(_QWORD *)__dst, *(_QWORD *)&__dst[16] & 0x7FFFFFFFFFFFFFFFLL);
          *(_QWORD *)&v353.f64[0] = off_1E42DA960;
          *(_QWORD *)&v354.f64[0] = off_1E42DA988;
          v357[11] = off_1E42DA9B0;
          *(_QWORD *)&v354.f64[1] = off_1E42DA790;
          if (SHIBYTE(v357[7]) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v357[8] + 40))(v357[8], v357[5], v357[7] & 0x7FFFFFFFFFFFFFFFLL);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1A1AF4D64](&v357[11]);
LABEL_112:
          ggl::DebugConsole::setProjection(v12, &v379);
          *(_DWORD *)(v12 + 104) = 1070596096;
          v77 = *(_QWORD *)(v55 + 216);
          v78 = *(_QWORD *)(v55 + 224);
          if (v77 != v78)
          {
            v79 = v77 + 8;
            do
            {
              if (*(float *)(v79 + 8) >= 0.99)
                v80 = 0;
              else
                v80 = -91;
              *(_BYTE *)(v12 + 96) = -1;
              *(_BYTE *)(v12 + 97) = v80;
              *(_WORD *)(v12 + 98) = -256;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v79 - 8);
              *(_DWORD *)(v12 + 12) = *(_DWORD *)(v79 - 4);
              v353.f64[0] = *(float64_t *)(v12 + 8);
              v81 = v353.f64[0];
              *(_DWORD *)(v12 + 8) = *(_DWORD *)v79;
              *(_DWORD *)(v12 + 12) = *(_DWORD *)(v79 + 4);
              v82 = *(_DWORD *)(v79 + 4);
              *(_DWORD *)__dst = LODWORD(v81);
              *(_DWORD *)&__dst[4] = v82;
              ggl::DebugConsole::drawLine(v12, (float *)__dst);
              ggl::DebugConsole::drawLine(v12, (float *)&v353);
              *(_DWORD *)__dst = *(_DWORD *)v79;
              *(_DWORD *)&__dst[4] = HIDWORD(v81);
              ggl::DebugConsole::drawLine(v12, (float *)__dst);
              ggl::DebugConsole::drawLine(v12, (float *)v79);
              v83 = v79 + 16;
              v79 += 24;
            }
            while (v83 != v78);
          }
          *(_DWORD *)(v12 + 96) = -16711936;
          v364 = 1;
          v363 = 0x300000000;
          v365 = 0xFFFF00FFFF000000;
          v366 = -16776961;
          v84 = v334;
          if (objc_msgSend(v343, "enableRouteShareSectionDebugging"))
          {
            *(_QWORD *)(v12 + 32) = 0x41A0000041800000;
            v85 = vdiv_f32((float32x2_t)0x4000000040000000, *(float32x2_t *)(v347 + 1064));
            __asm { FMOV            V2.2S, #-1.0 }
            v90 = *(double *)&v348[17];
            v91 = vcvtq_f64_f32(vmla_f32(_D2, v348[4], v85));
            v92 = vcvtq_f64_f32(vmla_f32(_D2, v348[5], v85));
            v353 = v91;
            v354 = v92;
            geo::Frustum<double>::Frustum((float64x2_t *)__dst, (double *)(v347 + 736), v353.f64, v90);
            v93 = *(id *)(v334 + 24);
            v94 = objc_msgSend(v93, "totalRouteCount");

            if (v94)
            {
              *(_QWORD *)&v95 = v365;
              DWORD2(v95) = v366;
              *(_OWORD *)v340 = v95;
              v96 = 1;
              do
              {
                v97 = *(id *)(v334 + 24);
                *(_QWORD *)&v353.f64[0] = MEMORY[0x1E0C809B0];
                *(_QWORD *)&v353.f64[1] = 3321888768;
                *(_QWORD *)&v354.f64[0] = ___ZN2md18LabelNavEtaLabeler9debugDrawERKNS_13LayoutContextEPNS_10NavContextE_block_invoke;
                *(_QWORD *)&v354.f64[1] = &__block_descriptor_468_ea8_444c83_ZTSZN2md18LabelNavEtaLabeler9debugDrawERKNS_13LayoutContextEPNS_10NavContextEE3__0_e60_v16__0r______PolylineCoordinate_If__PolylineCoordinate_If__8l;
                v358 = v96;
                v359 = v363;
                v360 = v364;
                v362 = (int)v340[1];
                v361 = v340[0];
                v355 = v334;
                v356 = &v344;
                memcpy(v357, __dst, 0x180uLL);
                v357[48] = v12;
                objc_msgSend(v97, "forEachSectionWithShareCount:dothis:", v96, &v353);

                v96 = (v96 + 1);
              }
              while (v96 <= v94);
            }
            v84 = v334;
          }
          if (objc_msgSend(v343, "enableRouteIntersectionTesting"))
          {
            v98 = *(float32x2_t *)(v347 + 1064);
            v99 = vmul_f32(v98, (float32x2_t)0x3F0000003F000000);
            *(float32x2_t *)&v100 = vadd_f32(v99, (float32x2_t)vdup_n_s32(0xC2C80000));
            v101 = vdiv_f32((float32x2_t)0x4000000040000000, v98);
            __asm { FMOV            V4.2S, #-1.0 }
            v341 = vadd_f32(v99, (float32x2_t)vdup_n_s32(0x42C80000u));
            *((float32x2_t *)&v100 + 1) = v341;
            v352 = v100;
            v103 = *(double *)&v348[17];
            *(float64x2_t *)__dst = vcvtq_f64_f32(vmla_f32(_D4, v101, *(float32x2_t *)&v100));
            *(float64x2_t *)&__dst[16] = vcvtq_f64_f32(vmla_f32(_D4, v101, v341));
            geo::Frustum<double>::Frustum(__p, (double *)(v347 + 736), (double *)__dst, v103);
            *(_DWORD *)(v12 + 104) = 1075838976;
            *(_DWORD *)(v12 + 96) = -16777216;
            v104 = (std::locale::__imp *)__PAIR64__(v341.u32[1], v352);
            __sb_4 = DWORD1(v352);
            *(_QWORD *)__dst = v352;
            *(float32x2_t *)(v12 + 8) = v341;
            v402[0].__locale_ = v104;
            ggl::DebugConsole::drawLine(v12, (float *)v402);
            ggl::DebugConsole::drawLine(v12, (float *)__dst);
            v402[0].__locale_ = (std::locale::__imp *)__PAIR64__(__sb_4, v341.u32[0]);
            ggl::DebugConsole::drawLine(v12, (float *)v402);
            ggl::DebugConsole::drawLine(v12, (float *)&v352 + 2);
            v105 = *(id *)(v84 + 24);
            objc_msgSend(v105, "routeInfo");
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v106, "route");
            v107 = (void *)objc_claimAutoreleasedReturnValue();

            v84 = v334;
            if (v107)
            {
              v329 = v107;
              (*(void (**)(float **__return_ptr, _QWORD, float64x2_t *, void *))(**(_QWORD **)(v334 + 40)
                                                                                          + 16))(&v349, *(_QWORD *)(v334 + 40), __p, v107);
              v109 = v349;
              v108 = (unsigned int *)v350;
              if (v349 != v350)
              {
                __sb = (unsigned int *)v350;
                while (1)
                {
                  v110 = *(float *)(v345 + 176);
                  v111 = v107;
                  v112 = v347;
                  *(_OWORD *)&v402[0].__locale_ = *(_OWORD *)(v347 + 136);
                  v403 = *(_QWORD *)(v347 + 152);
                  v404 = *(_OWORD *)(v347 + 160);
                  v405 = *(_QWORD *)(v347 + 176);
                  v113 = *(unsigned int *)v109;
                  v114 = *((_DWORD *)v109 + 2);
                  v115 = v109[3] <= 0.0 ? v114 : v114 + 1;
                  v116 = *(_QWORD *)(v334 + 40);
                  *(float *)__dst = *v109;
                  *(_DWORD *)&__dst[4] = v115;
                  if (((*(uint64_t (**)(uint64_t, float64x2_t *, id, std::locale *, _BYTE *, double *))(*(_QWORD *)v116 + 32))(v116, __p, v111, v402, __dst, v401) & 1) != 0)break;
LABEL_128:

                  v109 += 4;
                  if (v109 == (float *)v108)
                  {
                    v109 = v349;
                    v84 = v334;
                    goto LABEL_268;
                  }
                }
                v117 = v401[0];
                v118 = *(double *)(v112 + 312);
                v119 = *(float *)(v112 + 1064);
                v120 = *(_QWORD *)(v334 + 48);
                v121 = v111;
                if (!objc_msgSend(v121, "pointCount"))
                  goto LABEL_145;
                v124 = *(_QWORD **)(v120 + 16);
                v122 = v120 + 16;
                v123 = v124;
                v125 = log2((float)(v110 + v110) * ((v117 + v117) * v118) * *(double *)(v122 + 16) / v119);
                if (!v124)
                  goto LABEL_145;
                v126 = (_QWORD *)v122;
                do
                {
                  v127 = v123[4];
                  _CF = v127 >= (unint64_t)v121;
                  if (v127 >= (unint64_t)v121)
                    v129 = v123;
                  else
                    v129 = v123 + 1;
                  if (_CF)
                    v126 = v123;
                  v123 = (_QWORD *)*v129;
                }
                while (*v129);
                if (v126 != (_QWORD *)v122 && v126[4] <= (unint64_t)v121)
                {
                  v330 = v111;
                  v138 = v126[5];
                  v139 = *(void **)(v334 + 56);
                  *(_QWORD *)(v334 + 64) = v139;
                  v336 = (int)(0.5 - v125);
                  v140 = (*(_DWORD *)(v138 + 8) - *(_DWORD *)v138);
                  v141 = (v140
                        + *(unsigned int *)(*(_QWORD *)(v138 + 96) + 4 * (int)(0.5 - v125))
                        * (unint64_t)(v115 - v113 + 1)
                        - 1)
                       / v140
                       + 2;
                  v342 = v138;
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v334 + 72) - (_QWORD)v139) >> 3) < v141)
                  {
                    if (v141 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_367;
                    v142 = (char *)operator new(24 * v141);
                    *(_QWORD *)(v334 + 56) = v142;
                    *(_QWORD *)(v334 + 64) = v142;
                    *(_QWORD *)(v334 + 72) = &v142[24 * v141];
                    if (v139)
                      operator delete(v139);
                  }
                  objc_msgSend(*(id *)(v138 + 88), "pointAt:", v113);
                  if (*(_BYTE *)(v138 + 128))
                  {
                    v145 = v144 * 0.0174532925;
                    v146 = __sincos_stret(v143 * 0.0174532925);
                    v147 = 6378137.0 / sqrt(v146.__sinval * v146.__sinval * -0.00669437999 + 1.0);
                    v148 = __sincos_stret(v145);
                    v149 = v147 * v146.__cosval * v148.__cosval;
                    v150 = v147 * v146.__cosval * v148.__sinval;
                    v151 = v146.__sinval * 0.99330562 * v147;
                  }
                  else
                  {
                    GEOMapPointForCoordinate();
                    v149 = v152 / *MEMORY[0x1E0D266F8];
                    v150 = 1.0 - v153 / *(double *)(MEMORY[0x1E0D266F8] + 8);
                    v151 = 0.0;
                  }
                  v155 = *(double **)(v334 + 64);
                  v154 = *(_QWORD *)(v334 + 72);
                  if ((unint64_t)v155 >= v154)
                  {
                    v157 = *(double **)(v334 + 56);
                    v158 = 0xAAAAAAAAAAAAAAABLL * (v155 - v157) + 1;
                    if (v158 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_367;
                    v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v157) >> 3);
                    if (2 * v159 > v158)
                      v158 = 2 * v159;
                    if (v159 >= 0x555555555555555)
                      v160 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v160 = v158;
                    if (v160)
                    {
                      if (v160 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_368;
                      v161 = (char *)operator new(24 * v160);
                    }
                    else
                    {
                      v161 = 0;
                    }
                    v162 = (double *)&v161[8 * (v155 - v157)];
                    *v162 = v149;
                    v162[1] = v150;
                    v162[2] = v151;
                    v163 = v162;
                    if (v155 == v157)
                    {
                      v165 = (_QWORD *)v334;
                    }
                    else
                    {
                      do
                      {
                        v164 = *(_OWORD *)(v155 - 3);
                        *(v163 - 1) = *(v155 - 1);
                        *(_OWORD *)(v163 - 3) = v164;
                        v163 -= 3;
                        v155 -= 3;
                      }
                      while (v155 != v157);
                      v165 = (_QWORD *)v334;
                      v155 = *(double **)(v334 + 56);
                    }
                    v166 = &v161[24 * v160];
                    v156 = v162 + 3;
                    v165[7] = v163;
                    v165[8] = v162 + 3;
                    v165[9] = v166;
                    if (v155)
                      operator delete(v155);
                  }
                  else
                  {
                    *v155 = v149;
                    v155[1] = v150;
                    v156 = v155 + 3;
                    v155[2] = v151;
                  }
                  v167 = v336;
                  *(_QWORD *)(v334 + 64) = v156;
                  v168 = v113 + 1;
                  v169 = v115 - 1;
                  if (*(unsigned __int8 *)(v138 + 24) >= v336)
                  {
                    v194 = *(char **)(v138 + 56);
                    v195 = *(char **)(v138 + 64);
                    if (v195 != v194)
                    {
                      v196 = (v195 - v194) >> 2;
                      v197 = *(char **)(v138 + 56);
                      v198 = v196;
                      do
                      {
                        v199 = v198 >> 1;
                        v200 = (unsigned int *)&v197[4 * (v198 >> 1)];
                        v202 = *v200;
                        v201 = (char *)(v200 + 1);
                        v198 += ~(v198 >> 1);
                        if (v202 < v168)
                          v197 = v201;
                        else
                          v198 = v199;
                      }
                      while (v198);
                      v203 = *(char **)(v138 + 56);
                      do
                      {
                        v204 = v196 >> 1;
                        v205 = (unsigned int *)&v203[4 * (v196 >> 1)];
                        v207 = *v205;
                        v206 = (char *)(v205 + 1);
                        v196 += ~(v196 >> 1);
                        if (v169 < v207)
                          v196 = v204;
                        else
                          v203 = v206;
                      }
                      while (v196);
                      if (v197 != v195)
                      {
                        v208 = (unint64_t)(v197 - v194) >> 2;
                        v209 = v203 - v194 - 4;
                        v210 = v209 >> 2;
                        if (v208 <= (v209 >> 2))
                        {
                          v327 = v209 >> 2;
                          do
                          {
                            if (*(unsigned __int8 *)(*(_QWORD *)(v138 + 32) + v208) <= v167)
                            {
                              v332 = v208;
                              objc_msgSend(*(id *)(v138 + 88), "pointAt:", *(unsigned int *)(*(_QWORD *)(v138 + 56) + 4 * v208));
                              if (*(_BYTE *)(v138 + 128))
                              {
                                v232 = v231 * 0.0174532925;
                                v233 = __sincos_stret(v230 * 0.0174532925);
                                v234 = 6378137.0 / sqrt(v233.__sinval * v233.__sinval * -0.00669437999 + 1.0);
                                v235 = __sincos_stret(v232);
                                v236 = v234 * v233.__cosval * v235.__cosval;
                                v237 = v234 * v233.__cosval * v235.__sinval;
                                v238 = v233.__sinval * 0.99330562 * v234;
                              }
                              else
                              {
                                GEOMapPointForCoordinate();
                                v236 = v239 / *MEMORY[0x1E0D266F8];
                                v237 = 1.0 - v240 / *(double *)(MEMORY[0x1E0D266F8] + 8);
                                v238 = 0.0;
                              }
                              v242 = *(double **)(v334 + 64);
                              v241 = *(_QWORD *)(v334 + 72);
                              if ((unint64_t)v242 < v241)
                              {
                                *v242 = v236;
                                v242[1] = v237;
                                v229 = v242 + 3;
                                v242[2] = v238;
                              }
                              else
                              {
                                v243 = *(double **)(v334 + 56);
                                v244 = 0xAAAAAAAAAAAAAAABLL * (v242 - v243) + 1;
                                if (v244 > 0xAAAAAAAAAAAAAAALL)
                                  goto LABEL_367;
                                v245 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v241 - (_QWORD)v243) >> 3);
                                if (2 * v245 > v244)
                                  v244 = 2 * v245;
                                if (v245 >= 0x555555555555555)
                                  v246 = 0xAAAAAAAAAAAAAAALL;
                                else
                                  v246 = v244;
                                if (v246)
                                {
                                  v138 = v342;
                                  if (v246 > 0xAAAAAAAAAAAAAAALL)
                                    goto LABEL_368;
                                  v247 = v246;
                                  v248 = (char *)operator new(24 * v246);
                                  v246 = v247;
                                }
                                else
                                {
                                  v248 = 0;
                                  v138 = v342;
                                }
                                v249 = (double *)&v248[8 * (v242 - v243)];
                                *v249 = v236;
                                v249[1] = v237;
                                v249[2] = v238;
                                v250 = v249;
                                if (v242 == v243)
                                {
                                  v252 = (_QWORD *)v334;
                                }
                                else
                                {
                                  do
                                  {
                                    v251 = *(_OWORD *)(v242 - 3);
                                    *(v250 - 1) = *(v242 - 1);
                                    *(_OWORD *)(v250 - 3) = v251;
                                    v250 -= 3;
                                    v242 -= 3;
                                  }
                                  while (v242 != v243);
                                  v252 = (_QWORD *)v334;
                                  v242 = *(double **)(v334 + 56);
                                }
                                v229 = v249 + 3;
                                v252[7] = v250;
                                v252[8] = v249 + 3;
                                v252[9] = &v248[24 * v246];
                                if (v242)
                                  operator delete(v242);
                              }
                              v167 = v336;
                              LODWORD(v210) = v327;
                              LODWORD(v208) = v332;
                              *(_QWORD *)(v334 + 64) = v229;
                            }
                            LODWORD(v208) = v208 + 1;
                          }
                          while (v208 <= v210);
                        }
                      }
                    }
                  }
                  else if (v168 <= v169)
                  {
                    do
                    {
                      v171 = v168;
                      if (*(unsigned __int8 *)(*(_QWORD *)v138 + v168) <= v167)
                      {
                        objc_msgSend(*(id *)(v138 + 88), "pointAt:", v168);
                        v138 = v342;
                        if (*(_BYTE *)(v342 + 128))
                        {
                          v174 = v173 * 0.0174532925;
                          v175 = __sincos_stret(v172 * 0.0174532925);
                          v176 = 6378137.0 / sqrt(v175.__sinval * v175.__sinval * -0.00669437999 + 1.0);
                          v177 = __sincos_stret(v174);
                          v178 = v176 * v175.__cosval * v177.__cosval;
                          v179 = v176 * v175.__cosval * v177.__sinval;
                          v180 = v175.__sinval * 0.99330562 * v176;
                        }
                        else
                        {
                          GEOMapPointForCoordinate();
                          v178 = v181 / *MEMORY[0x1E0D266F8];
                          v179 = 1.0 - v182 / *(double *)(MEMORY[0x1E0D266F8] + 8);
                          v180 = 0.0;
                          v138 = v342;
                        }
                        v184 = *(double **)(v334 + 64);
                        v183 = *(_QWORD *)(v334 + 72);
                        if ((unint64_t)v184 < v183)
                        {
                          *v184 = v178;
                          v184[1] = v179;
                          v170 = v184 + 3;
                          v184[2] = v180;
                        }
                        else
                        {
                          v185 = *(double **)(v334 + 56);
                          v186 = 0xAAAAAAAAAAAAAAABLL * (v184 - v185) + 1;
                          if (v186 > 0xAAAAAAAAAAAAAAALL)
                            goto LABEL_367;
                          v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v183 - (_QWORD)v185) >> 3);
                          if (2 * v187 > v186)
                            v186 = 2 * v187;
                          if (v187 >= 0x555555555555555)
                            v188 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v188 = v186;
                          if (v188)
                          {
                            if (v188 > 0xAAAAAAAAAAAAAAALL)
                              goto LABEL_368;
                            v189 = (char *)operator new(24 * v188);
                          }
                          else
                          {
                            v189 = 0;
                          }
                          v190 = (double *)&v189[8 * (v184 - v185)];
                          *v190 = v178;
                          v190[1] = v179;
                          v190[2] = v180;
                          v191 = v190;
                          if (v184 == v185)
                          {
                            v193 = (_QWORD *)v334;
                            v138 = v342;
                          }
                          else
                          {
                            v138 = v342;
                            do
                            {
                              v192 = *(_OWORD *)(v184 - 3);
                              *(v191 - 1) = *(v184 - 1);
                              *(_OWORD *)(v191 - 3) = v192;
                              v191 -= 3;
                              v184 -= 3;
                            }
                            while (v184 != v185);
                            v193 = (_QWORD *)v334;
                            v184 = *(double **)(v334 + 56);
                          }
                          v170 = v190 + 3;
                          v193[7] = v191;
                          v193[8] = v190 + 3;
                          v193[9] = &v189[24 * v188];
                          if (v184)
                            operator delete(v184);
                        }
                        v167 = v336;
                        v169 = v115 - 1;
                        *(_QWORD *)(v334 + 64) = v170;
                      }
                      v168 = v171 + 1;
                    }
                    while (v171 + 1 <= v169);
                  }
                  v130 = v334;
                  v107 = v329;
                  v111 = v330;
                  if ((_DWORD)v113 == (_DWORD)v115)
                    goto LABEL_147;
                  objc_msgSend(*(id *)(v342 + 88), "pointAt:", v115);
                  if (*(_BYTE *)(v342 + 128))
                  {
                    v213 = v212 * 0.0174532925;
                    v214 = __sincos_stret(v211 * 0.0174532925);
                    v215 = 6378137.0 / sqrt(v214.__sinval * v214.__sinval * -0.00669437999 + 1.0);
                    v216 = __sincos_stret(v213);
                    v217 = v215 * v214.__cosval * v216.__cosval;
                    v218 = v215 * v214.__cosval * v216.__sinval;
                    v219 = v214.__sinval * 0.99330562 * v215;
                  }
                  else
                  {
                    GEOMapPointForCoordinate();
                    v217 = v220 / *MEMORY[0x1E0D266F8];
                    v218 = 1.0 - v221 / *(double *)(MEMORY[0x1E0D266F8] + 8);
                    v219 = 0.0;
                  }
                  v223 = *(double **)(v334 + 64);
                  v222 = *(_QWORD *)(v334 + 72);
                  if ((unint64_t)v223 >= v222)
                  {
                    v224 = *(double **)(v334 + 56);
                    v225 = 0xAAAAAAAAAAAAAAABLL * (v223 - v224) + 1;
                    if (v225 > 0xAAAAAAAAAAAAAAALL)
LABEL_367:
                      abort();
                    v226 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - (_QWORD)v224) >> 3);
                    if (2 * v226 > v225)
                      v225 = 2 * v226;
                    if (v226 >= 0x555555555555555)
                      v227 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v227 = v225;
                    if (v227)
                    {
                      if (v227 > 0xAAAAAAAAAAAAAAALL)
LABEL_368:
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      v228 = (char *)operator new(24 * v227);
                    }
                    else
                    {
                      v228 = 0;
                    }
                    v253 = (double *)&v228[8 * (v223 - v224)];
                    *v253 = v217;
                    v253[1] = v218;
                    v253[2] = v219;
                    v254 = v253;
                    if (v223 == v224)
                    {
                      v256 = (_QWORD *)v334;
                    }
                    else
                    {
                      do
                      {
                        v255 = *(_OWORD *)(v223 - 3);
                        *(v254 - 1) = *(v223 - 1);
                        *(_OWORD *)(v254 - 3) = v255;
                        v254 -= 3;
                        v223 -= 3;
                      }
                      while (v223 != v224);
                      v256 = (_QWORD *)v334;
                      v223 = *(double **)(v334 + 56);
                    }
                    v107 = v329;
                    v111 = v330;
                    v131 = v253 + 3;
                    v256[7] = v254;
                    v256[8] = v253 + 3;
                    v256[9] = &v228[24 * v227];
                    if (v223)
                      operator delete(v223);
                    v130 = v334;
                  }
                  else
                  {
                    *v223 = v217;
                    v223[1] = v218;
                    v131 = v223 + 3;
                    v223[2] = v219;
                    v130 = v334;
                    v107 = v329;
                    v111 = v330;
                  }
                }
                else
                {
LABEL_145:
                  v130 = v334;
                  v131 = *(double **)(v334 + 56);
                }
                *(_QWORD *)(v130 + 64) = v131;
LABEL_147:

                memcpy(__dst, __p, sizeof(__dst));
                v400 = &v344;
                v132 = *(_QWORD *)(v130 + 56);
                v133 = *(_QWORD *)(v130 + 64);
                v397 = *(float64x2_t *)v132;
                v398 = *(_QWORD *)(v132 + 16);
                *(_OWORD *)&v395[0].index = *(_OWORD *)(v132 + 24);
                v396 = *(_QWORD *)(v132 + 40);
                md::LabelNavEtaLabeler::intersectSimplifiedRouteSectionWithFrustum<md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,float,gm::Range<geo::PolylineCoordinate> const&,md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1)const::{lambda(gm::Matrix<double,3,1> const&,gm::Matrix<double,3,1> const&,md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1)#1}::operator()((uint64_t)__dst, &v397, (float64x2_t *)v395, (float32x2_t *)v12);
                v134 = (float64x2_t *)(v133 - 24);
                if (v132 + 24 != v133 - 24)
                {
                  v135 = (double *)(v132 + 48);
                  if ((float64x2_t *)(v132 + 48) != v134)
                  {
                    v136 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v347 + 960), *(float64x2_t *)(v347 + 864), *(double *)(v132 + 24)), *(float64x2_t *)(v347 + 896), *(double *)(v132 + 32)), *(float64x2_t *)(v347 + 928), *(double *)(v132 + 40)), 1.0/ (*(double *)(v347 + 984)+ *(double *)(v347 + 888) * *(double *)(v132 + 24)+ *(double *)(v347 + 920) * *(double *)(v132 + 32)+ *(double *)(v347 + 952) * *(double *)(v132 + 40))));
                    do
                    {
                      v137 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v347 + 960), *(float64x2_t *)(v347 + 864), *v135), *(float64x2_t *)(v347 + 896), v135[1]), *(float64x2_t *)(v347 + 928), v135[2]), 1.0/ (*(double *)(v347 + 984)+ *(double *)(v347 + 888) * *v135+ *(double *)(v347 + 920) * v135[1]+ *(double *)(v347 + 952) * v135[2])));
                      *(float32x2_t *)&v393.f64[0] = v137;
                      *(float32x2_t *)(v12 + 8) = v136;
                      ggl::DebugConsole::drawLine(v12, (float *)&v393);
                      v135 += 3;
                      v136 = v137;
                    }
                    while (v135 != (double *)v134);
                  }
                }
                v393 = *v134;
                v394 = *(_QWORD *)(v133 - 8);
                v391 = *(float64x2_t *)(v133 - 48);
                v392 = *(_QWORD *)(v133 - 32);
                if (v133 - 48 != v132)
                  md::LabelNavEtaLabeler::intersectSimplifiedRouteSectionWithFrustum<md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,float,gm::Range<geo::PolylineCoordinate> const&,md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1)const::{lambda(gm::Matrix<double,3,1> const&,gm::Matrix<double,3,1> const&,md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1)#1}::operator()((uint64_t)__dst, &v391, &v393, (float32x2_t *)v12);
                v108 = __sb;
                goto LABEL_128;
              }
LABEL_268:
              if (v109)
              {
                v350 = v109;
                operator delete(v109);
              }
            }

          }
          if (!objc_msgSend(v343, "enableEtaLabelRectDebugging")
            || (*(_QWORD *)(v12 + 32) = 0x4248000042200000,
                v257 = *(_QWORD **)(v84 + 456),
                v322 = (_QWORD *)(v84 + 464),
                v257 == (_QWORD *)(v84 + 464)))
          {
LABEL_363:
            ggl::DebugConsole::end(v12);
            ggl::DebugConsole::end((uint64_t)v335);
            *(_BYTE *)(v84 + 448) = 1;
            goto LABEL_364;
          }
          v324 = (float)(*(float *)(v345 + 176) * 12.0) * (float)(*(float *)(v345 + 176) * 12.0);
          v321 = xmmword_19FFB2E80;
          while (1)
          {
            v258 = (GEOComposedRoute *)(id)v257[4];
            v323 = v257;
            v259 = v257[5];
            v328 = v258;
            v326 = *(_DWORD *)((unint64_t)&v363 | (4
                                                        * (md::LabelNavEtaLabeler::indexForRoute((id *)v84, v258)% 3)));
            *(_DWORD *)(v12 + 96) = -16777216;
            if (*(_BYTE *)(v259 + 136))
            {
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v259 + 140);
              *(_DWORD *)(v12 + 12) = *(_DWORD *)(v259 + 144);
              *(_QWORD *)__dst = *(_QWORD *)(v12 + 8);
              v260 = *(_QWORD *)__dst;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v259 + 148);
              *(_DWORD *)(v12 + 12) = *(_DWORD *)(v259 + 152);
              *(_QWORD *)&__p[0].f64[0] = __PAIR64__(*(_DWORD *)(v259 + 152), v260);
              ggl::DebugConsole::drawLine(v12, (float *)__p);
              ggl::DebugConsole::drawLine(v12, (float *)__dst);
              LODWORD(__p[0].f64[0]) = *(_DWORD *)(v259 + 148);
              HIDWORD(__p[0].f64[0]) = HIDWORD(v260);
              ggl::DebugConsole::drawLine(v12, (float *)__p);
              v84 = v334;
              ggl::DebugConsole::drawLine(v12, (float *)(v259 + 148));
            }
            v261 = *(_QWORD *)(v259 + 352);
            v325 = *(_QWORD *)(v259 + 360);
            if (v261 != v325)
              break;
LABEL_357:

            v314 = v323;
            v315 = (_QWORD *)v323[1];
            if (v315)
            {
              do
              {
                v316 = v315;
                v315 = (_QWORD *)*v315;
              }
              while (v315);
            }
            else
            {
              do
              {
                v316 = (_QWORD *)v314[2];
                _ZF = *v316 == (_QWORD)v314;
                v314 = v316;
              }
              while (!_ZF);
            }
            v257 = v316;
            if (v316 == v322)
              goto LABEL_363;
          }
          v337 = v259 + 48;
          while (1)
          {
            v262 = *(PolylineCoordinate *)v261;
            v263 = *(PolylineCoordinate *)(v261 + 8);
            v333 = v261;
            v395[0] = (PolylineCoordinate)md::LabelNavEtaLabeler::findClosestCoordinateBetweenVertices(v84, (float64x2_t *)(v347 + 864), v328, v262, v263, *(float *)(v261 + 16));
            v264 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(v84 + 48), v328, v395);
            v267 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v347 + 960), *(float64x2_t *)(v347 + 864), v264), *(float64x2_t *)(v347 + 896), v265), *(float64x2_t *)(v347 + 928), v266), 1.0/ (*(double *)(v347 + 984)+ *(double *)(v347 + 888) * v264+ *(double *)(v347 + 920) * v265+ *(double *)(v347 + 952) * v266));
            v268 = *(float *)(v333 + 20);
            v269 = v268 < v324 ? 0 : -1;
            v270 = v268 >= v324 ? 0 : -1;
            *(_BYTE *)(v12 + 96) = v270;
            *(_BYTE *)(v12 + 97) = v269;
            *(_WORD *)(v12 + 98) = -256;
            v331 = vcvt_f32_f64(v267);
            *(float32x2_t *)(v12 + 8) = v331;
            ggl::DebugConsole::drawSymbol((float32x2_t *)v12, v326);
            v271 = *(uint64_t **)(v333 + 48);
            if (v271)
              break;
LABEL_279:
            v261 = v333 + 72;
            v84 = v334;
            if (v333 + 72 == v325)
              goto LABEL_357;
          }
          v272 = 0;
          while (1)
          {
            if (((objc_msgSend(v343, "etaLabelDebugOrientationMask", v321) >> v272) & 1) != 0)
            {
              v273 = (float)(*((float *)v271 + 6) + *((float *)v271 + 5))
                   + (float)(*((float *)v271 + 7) + *((float *)v271 + 8));
              if (v273 >= 1.0)
              {
                v275 = (int)fminf(-(float)(*(float *)(v334 + 248) - (float)(v273 * *(float *)(v334 + 248))), 254.0);
                if (v275 == 255)
                {
                  v274 = 0;
                }
                else if (v275)
                {
                  LOBYTE(v275) = 0;
                  v274 = -1;
                }
                else
                {
                  v274 = -1;
                  LOBYTE(v275) = -1;
                }
              }
              else
              {
                v274 = 0;
                LOBYTE(v275) = -1;
              }
              *(_BYTE *)(v12 + 96) = v274;
              *(_BYTE *)(v12 + 97) = v275;
              *(_WORD *)(v12 + 98) = -256;
              v276 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,gm::Box<float,2>>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>(v337, *((_BYTE *)v271 + 16), (_BYTE *)v271 + 16);
              v277 = v276[7];
              v278 = v276[5];
              if (v277 < v278)
                goto LABEL_300;
              v279 = v276[8];
              v280 = v276[6];
              if (v279 >= v280)
              {
                v284 = v331.f32[0] + v278;
                v281 = v331.f32[1] + v280;
                v283 = v331.f32[0] + v277;
                v282 = v331.f32[1] + v279;
              }
              else
              {
LABEL_300:
                v281 = 3.4028e38;
                v282 = -3.4028e38;
                v283 = -3.4028e38;
                v284 = 3.4028e38;
              }
              *(_QWORD *)&v397.f64[0] = __PAIR64__(LODWORD(v281), LODWORD(v284));
              *(_QWORD *)&v397.f64[1] = __PAIR64__(LODWORD(v282), LODWORD(v283));
              *(float *)(v12 + 8) = v284;
              *(float *)(v12 + 12) = v281;
              *(_QWORD *)__dst = *(_QWORD *)(v12 + 8);
              v285 = *(_QWORD *)__dst;
              *(float *)(v12 + 8) = v283;
              *(float *)(v12 + 12) = v282;
              *(_QWORD *)&__p[0].f64[0] = __PAIR64__(LODWORD(v282), v285);
              ggl::DebugConsole::drawLine(v12, (float *)__p);
              ggl::DebugConsole::drawLine(v12, (float *)__dst);
              *(_QWORD *)&__p[0].f64[0] = __PAIR64__(HIDWORD(v285), LODWORD(v283));
              ggl::DebugConsole::drawLine(v12, (float *)__p);
              *(float *)&v286 = ggl::DebugConsole::drawLine(v12, (float *)&v397.f64[1]);
              if (objc_msgSend(v343, "etaLabelDebugScore", v286))
                break;
            }
LABEL_289:
            ++v272;
            v271 = (uint64_t *)*v271;
            if (!v271)
              goto LABEL_279;
          }
          *(_QWORD *)&__dst[16] = off_1E42DA988;
          *(_QWORD *)&__dst[136] = &unk_1E428AE08;
          *(_QWORD *)__dst = &unk_1E428ADE0;
          *(_QWORD *)&__dst[8] = 0;
          std::ios_base::init((std::ios_base *)&__dst[136], &__dst[24]);
          *(_DWORD *)&__dst[280] = -1;
          *(_QWORD *)&__dst[272] = 0;
          *(_QWORD *)&__dst[136] = off_1E42DA9B0;
          *(_QWORD *)__dst = off_1E42DA960;
          *(_QWORD *)&__dst[16] = off_1E42DA988;
          std::streambuf::basic_streambuf();
          *(_QWORD *)&__dst[24] = off_1E42DA790;
          memset(&__dst[88], 0, 24);
          {
            v310 = operator new();
            *(_QWORD *)(v310 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v310 + 24) = "VectorKitLabels";
            *(_OWORD *)(v310 + 32) = v321;
            *(_QWORD *)v310 = &off_1E42B5668;
            *(_QWORD *)(v310 + 8) = "VectorKitLabels";
            *(_OWORD *)(v310 + 72) = 0u;
            *(_OWORD *)(v310 + 88) = 0u;
            *(_OWORD *)(v310 + 104) = 0u;
            *(_OWORD *)(v310 + 120) = 0u;
            *(_OWORD *)(v310 + 136) = 0u;
            *(_OWORD *)(v310 + 152) = 0u;
            *(_OWORD *)(v310 + 168) = 0u;
            *(_OWORD *)(v310 + 184) = 0u;
            *(_OWORD *)(v310 + 200) = 0u;
            *(_OWORD *)(v310 + 216) = 0u;
            *(_OWORD *)(v310 + 232) = 0u;
            *(_QWORD *)(v310 + 248) = 0;
            *(_OWORD *)(v310 + 56) = 0u;
            v311 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v310 + 56), 0);
            if ((_DWORD)v311)
              geo::read_write_lock::logFailure(v311, (uint64_t)"initialization", v312);
            v313 = malloc_create_zone(0, 0);
            *(_QWORD *)(v310 + 48) = v313;
            malloc_set_zone_name(v313, "VectorKitLabels");
            *(_QWORD *)(v310 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v310;
          }
          *(_QWORD *)&__dst[112] = mdm::Allocator::instance(void)::alloc;
          *(_QWORD *)&__dst[120] = 0;
          *(_DWORD *)&__dst[128] = 24;
          switch(objc_msgSend(v343, "etaLabelDebugScore"))
          {
            case 1:
            case 2:
            case 5:
            case 6:
              goto LABEL_316;
            case 3:
              if (*(float *)(v333 + 20) == 3.4028e38)
              {
                MEMORY[0x1A1AF49E0](__p, &__dst[16]);
                if (LOBYTE(__p[0].f64[0]))
                {
                  v289 = &__dst[*(_QWORD *)(*(_QWORD *)&__dst[16] - 24) + 16];
                  v290 = *((_QWORD *)v289 + 5);
                  v291 = *((_DWORD *)v289 + 2);
                  v292 = *((_DWORD *)v289 + 36);
                  if (v292 == -1)
                  {
                    std::ios_base::getloc((const std::ios_base *)&__dst[*(_QWORD *)(*(_QWORD *)&__dst[16] - 24) + 16]);
                    v293 = std::locale::use_facet(v402, MEMORY[0x1E0DE4A90]);
                    v292 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v293->__vftable[2].~facet_0)(v293, 32);
                    std::locale::~locale(v402);
                    *((_DWORD *)v289 + 36) = v292;
                  }
                  if ((v291 & 0xB0) == 0x20)
                    v294 = "";
                  else
                    v294 = "+";
                  if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v290, (uint64_t)"+", (uint64_t)v294, (uint64_t)"", (uint64_t)v289, (char)v292))std::ios_base::clear((std::ios_base *)&__dst[*(_QWORD *)(*(_QWORD *)&__dst[16] - 24) + 16], *(_DWORD *)&__dst[*(_QWORD *)(*(_QWORD *)&__dst[16] - 24) + 48] | 5);
                }
                MEMORY[0x1A1AF49EC](__p);
              }
              else
              {
LABEL_316:
                std::ostream::operator<<();
              }
              break;
            case 4:
              std::ostream::operator<<();
              break;
            default:
              break;
          }
          if ((__dst[128] & 0x10) != 0)
          {
            v297 = *(_QWORD *)&__dst[120];
            v298 = (const void **)&__dst[64];
            if (*(_QWORD *)&__dst[120] < *(_QWORD *)&__dst[72])
            {
              *(_QWORD *)&__dst[120] = *(_QWORD *)&__dst[72];
              v297 = *(_QWORD *)&__dst[72];
              v298 = (const void **)&__dst[64];
            }
          }
          else
          {
            if ((__dst[128] & 8) == 0)
            {
              v295 = 0;
              __p[1].f64[1] = *(float64_t *)&__dst[112];
              HIBYTE(__p[1].f64[0]) = 0;
              v296 = __p;
              goto LABEL_331;
            }
            v297 = *(_QWORD *)&__dst[56];
            v298 = (const void **)&__dst[40];
          }
          v299 = *v298;
          v295 = v297 - (_QWORD)*v298;
          __p[1].f64[1] = *(float64_t *)&__dst[112];
          if (v295 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v295 >= 0x17)
          {
            v300 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v295 | 7) != 0x17)
              v300 = v295 | 7;
            v301 = v300 + 1;
            v296 = (float64x2_t *)(*(uint64_t (**)(void))(**(_QWORD **)&__dst[112] + 16))();
            *(_QWORD *)&__p[0].f64[1] = v295;
            *(_QWORD *)&__p[1].f64[0] = v301 | 0x8000000000000000;
            *(_QWORD *)&__p[0].f64[0] = v296;
          }
          else
          {
            HIBYTE(__p[1].f64[0]) = v295;
            v296 = __p;
            if (!v295)
            {
LABEL_331:
              *((_BYTE *)v296->f64 + v295) = 0;
              if (SHIBYTE(__p[1].f64[0]) < 0)
              {
                v303 = *(_QWORD *)&__p[0].f64[1];
                if (*(_QWORD *)&__p[0].f64[1] > 0x7FFFFFFFFFFFFFF7uLL)
                  abort();
                v302 = __p[0].f64[0];
                if (*(_QWORD *)&__p[0].f64[1] < 0x17uLL)
                {
LABEL_333:
                  HIBYTE(v403) = v303;
                  v304 = v402;
                  if (!v303)
                  {
LABEL_341:
                    *(float *)&v288 = v284 + (float)((float)(v283 - v284) * 0.5);
                    v307 = v18 - (float)(v281 + (float)((float)(v282 - v281) * 0.5));
                    *(float *)&v307 = v307;
                    v304[v303] = 0;
                    *((_DWORD *)v335 + 2) = LODWORD(v288);
                    *((_DWORD *)v335 + 3) = LODWORD(v307);
                    if (v403 >= 0)
                      locale = (int8x16_t *)v402;
                    else
                      locale = (int8x16_t *)v402[0].__locale_;
                    if (v403 >= 0)
                      v309 = HIBYTE(v403);
                    else
                      v309 = (unint64_t)v402[1].__locale_;
                    ggl::DebugConsole::drawString((uint64_t)v335, locale, v309, v288, *(int32x2_t *)&v307);
                    if (SHIBYTE(v403) < 0)
                    {
                      operator delete(v402[0].__locale_);
                      if ((SHIBYTE(__p[1].f64[0]) & 0x80000000) == 0)
                        goto LABEL_349;
                    }
                    else if ((SHIBYTE(__p[1].f64[0]) & 0x80000000) == 0)
                    {
LABEL_349:
                      *(_QWORD *)__dst = off_1E42DA960;
                      *(_QWORD *)&__dst[16] = off_1E42DA988;
                      *(_QWORD *)&__dst[136] = off_1E42DA9B0;
                      *(_QWORD *)&__dst[24] = off_1E42DA790;
                      if ((__dst[111] & 0x80000000) != 0)
                        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)&__dst[112] + 40))(*(_QWORD *)&__dst[112], *(_QWORD *)&__dst[88], *(_QWORD *)&__dst[104] & 0x7FFFFFFFFFFFFFFFLL);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A1AF4D64](&__dst[136]);
                      goto LABEL_289;
                    }
                    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)&__p[1].f64[1] + 40))(*(_QWORD *)&__p[1].f64[1], *(_QWORD *)&__p[0].f64[0], *(_QWORD *)&__p[1].f64[0] & 0x7FFFFFFFFFFFFFFFLL);
                    goto LABEL_349;
                  }
LABEL_340:
                  memmove(v304, *(const void **)&v302, v303);
                  goto LABEL_341;
                }
              }
              else
              {
                v302 = COERCE_DOUBLE(__p);
                v303 = HIBYTE(__p[1].f64[0]);
                if (HIBYTE(__p[1].f64[0]) < 0x17uLL)
                  goto LABEL_333;
              }
              v305 = (v303 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v303 | 7) != 0x17)
                v305 = v303 | 7;
              v306 = v305 + 1;
              v304 = operator new(v305 + 1);
              v402[1].__locale_ = (std::locale::__imp *)v303;
              v403 = v306 | 0x8000000000000000;
              v402[0].__locale_ = (std::locale::__imp *)v304;
              goto LABEL_340;
            }
          }
          memmove(v296, v299, v295);
          goto LABEL_331;
        }
      }
      memmove(v63, v66, v62);
      goto LABEL_88;
    }
    v10 = 0;
    if (*a2)
      goto LABEL_15;
LABEL_364:

    return;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "enableEtaLabelRectDebugging"))
  {

    goto LABEL_5;
  }
  v13 = *(unsigned __int8 *)(v4 + 448);

  if (v13)
    goto LABEL_7;
}

void sub_19F1D04D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  unint64_t v34;

  (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x5B8] + 40))(STACK[0x5B8], STACK[0x5A0], STACK[0x5B0] & 0x7FFFFFFFFFFFFFFFLL);
  STACK[0x2A0] = v34;
  STACK[0x2B0] = v34 + 40;
  STACK[0x328] = v34 + 80;
  STACK[0x2B8] = (unint64_t)off_1E42DA790;
  if (SLOBYTE(STACK[0x30F]) < 0)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x310] + 40))(STACK[0x310], STACK[0x2F8], STACK[0x308] & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](a31);

  _Unwind_Resume(a1);
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::addProperty(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  __int16 v37;
  void *v38;
  unint64_t v39;
  void *__p;
  uint64_t v41;
  int v42;

  v37 = *a2 | (*a3 << 8);
  std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)&v38, a4);
  if (!a1[7])
    goto LABEL_39;
  v5 = (_QWORD *)a1[5];
  v6 = a1 + 6;
  if (v5 == a1 + 6)
  {
    v12 = (_QWORD *)a1[5];
  }
  else
  {
    v7 = 0;
    v8 = (_QWORD *)a1[5];
    do
    {
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      v8 = v10;
    }
    while (v10 != v6);
    v12 = (_QWORD *)a1[5];
    do
    {
      v13 = v7 >> 1;
      v14 = v12;
      if (v7 != 1)
      {
        v16 = v7 >> 1;
        v17 = v12;
        do
        {
          v19 = (_QWORD *)v17[1];
          if (v19)
          {
            do
            {
              v14 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v17[2];
              v11 = *v14 == (_QWORD)v17;
              v17 = v14;
            }
            while (!v11);
          }
          v17 = v14;
        }
        while (v16-- > 1);
      }
      if (*((unsigned __int8 *)v14 + 33) < HIBYTE(v37))
      {
        v15 = (_QWORD *)v14[1];
        if (v15)
        {
          do
          {
            v12 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v14[2];
            v11 = *v12 == (_QWORD)v14;
            v14 = v12;
          }
          while (!v11);
        }
        v13 = v7 + ~v13;
      }
      v7 = v13;
    }
    while (v13);
  }
  if (v12 == v6 || *((unsigned __int8 *)v12 + 32) >= HIBYTE(v37))
  {
    if (v12 == v5)
      goto LABEL_39;
    v20 = *v12;
    if (*v12)
    {
      do
      {
        v21 = v20;
        v20 = *(_QWORD *)(v20 + 8);
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = v12[2];
        v11 = *(_QWORD *)v21 == (_QWORD)v12;
        v12 = (_QWORD *)v21;
      }
      while (v11);
    }
    if (v37 >= *(unsigned __int8 *)(v21 + 33))
    {
LABEL_39:
      v23 = (uint64_t **)(a1 + 6);
      v22 = (uint64_t *)a1[6];
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            v24 = (uint64_t **)v22;
            v25 = *((unsigned __int8 *)v22 + 33);
            if (HIBYTE(v37) >= v25)
              break;
            v22 = *v24;
            v23 = v24;
            if (!*v24)
              goto LABEL_47;
          }
          if (v25 >= HIBYTE(v37))
            break;
          v22 = v24[1];
          if (!v22)
          {
            v23 = v24 + 1;
            goto LABEL_47;
          }
        }
      }
      else
      {
        v24 = (uint64_t **)(a1 + 6);
LABEL_47:
        v26 = (uint64_t *)operator new(0x50uLL);
        v27 = v26;
        v29 = __p;
        v28 = v41;
        v26[7] = (uint64_t)__p;
        *((_WORD *)v26 + 16) = v37;
        v30 = v38;
        v31 = v39;
        v38 = 0;
        v39 = 0;
        v26[5] = (uint64_t)v30;
        v26[6] = v31;
        v26[8] = v28;
        *((_DWORD *)v26 + 18) = v42;
        if (v28)
        {
          v32 = v29[1];
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v32 >= v31)
              v32 %= v31;
          }
          else
          {
            v32 &= v31 - 1;
          }
          v30[v32] = v26 + 7;
          __p = 0;
          v41 = 0;
        }
        *v26 = 0;
        v26[1] = 0;
        v26[2] = (uint64_t)v24;
        *v23 = v26;
        v33 = *(_QWORD *)a1[5];
        if (v33)
        {
          a1[5] = v33;
          v27 = *v23;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[6], v27);
        ++a1[7];
      }
    }
  }
  v34 = __p;
  if (__p)
  {
    do
    {
      v35 = (_QWORD *)*v34;
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
  v36 = v38;
  v38 = 0;
  if (v36)
    operator delete(v36);
}

void sub_19F1D0A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v26 = operator new(0x30uLL);
  *v26 = 0;
  v26[1] = v6;
  *((_BYTE *)v26 + 16) = *(_BYTE *)a3;
  v26[4] = 0;
  v26[5] = 0;
  v26[3] = 0;
  std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__init_with_size[abi:ne180100]<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*,std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*>((uint64_t)(v26 + 3), *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4));
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v16 = v26;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v16 = v26;
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v16 = v26;
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v26)
    {
      v25 = *(_QWORD *)(*v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7)
          v25 %= v7;
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v16 = v26;
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v16 = *v15;
  *v15 = v26;
LABEL_61:
  result = v26;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F1D0DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1D0DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint8x8_t v15;
  float **v16;
  float *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = *((float *)v10 + 4);
      if (v13 == 0.0)
        v14 = 0;
      else
        v14 = LODWORD(v13);
      if (v12)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          prime = v14;
          if (v14 >= v12)
            prime = v14 % v12;
        }
        else
        {
          prime = v14 & (v12 + 0xFFFFFFFF);
        }
        v16 = *(float ***)(*(_QWORD *)a1 + 8 * prime);
        if (v16)
        {
          v17 = *v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = *((_QWORD *)v17 + 1);
                if (v19 == v14)
                {
                  if (v17[4] == v13)
                    goto LABEL_81;
                }
                else if ((v19 & (v12 - 1)) != prime)
                {
                  goto LABEL_43;
                }
                v17 = *(float **)v17;
                if (!v17)
                  goto LABEL_43;
              }
            }
            do
            {
              v18 = *((_QWORD *)v17 + 1);
              if (v18 == v14)
              {
                if (v17[4] == v13)
                  goto LABEL_81;
              }
              else
              {
                if (v18 >= v12)
                  v18 %= v12;
                if (v18 != prime)
                  break;
              }
              v17 = *(float **)v17;
            }
            while (v17);
          }
        }
      }
LABEL_43:
      v20 = (char *)operator new(0x28uLL);
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = v14;
      *((_DWORD *)v20 + 4) = *((_DWORD *)v10 + 4);
      *(_OWORD *)(v20 + 20) = *(_OWORD *)((char *)v10 + 20);
      v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v22 = *(float *)(a1 + 32);
      if (!v12 || (float)(v22 * (float)v12) < v21)
      {
        v23 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v23 = 1;
        v24 = v23 | (2 * v12);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        if (v26 == 1)
        {
          v26 = 2;
        }
        else if ((v26 & (v26 - 1)) != 0)
        {
          v26 = std::__next_prime(v26);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v26 > v12)
          goto LABEL_55;
        if (v26 < v12)
        {
          v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
          {
            v27 = std::__next_prime(v27);
          }
          else
          {
            v29 = 1 << -(char)__clz(v27 - 1);
            if (v27 >= 2)
              v27 = v29;
          }
          if (v26 <= v27)
            v26 = v27;
          if (v26 < v12)
LABEL_55:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v26);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v14 >= v12)
            prime = v14 % v12;
          else
            prime = v14;
        }
        else
        {
          prime = ((_DWORD)v12 - 1) & v14;
        }
      }
      v30 = *(_QWORD *)a1;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v31)
      {
        *(_QWORD *)v20 = *v31;
      }
      else
      {
        *(_QWORD *)v20 = *v11;
        *v11 = v20;
        *(_QWORD *)(v30 + 8 * prime) = v11;
        if (!*(_QWORD *)v20)
          goto LABEL_80;
        v32 = *(_QWORD *)(*(_QWORD *)v20 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v32 >= v12)
            v32 %= v12;
        }
        else
        {
          v32 &= v12 - 1;
        }
        v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
      }
      *v31 = v20;
LABEL_80:
      ++*(_QWORD *)(a1 + 24);
LABEL_81:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  float *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(float **)(a2 + 16); i; i = *(float **)i)
    std::__hash_table<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::__unordered_map_hasher<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__emplace_unique_key_args<float,std::pair<float const,geo::Color<float,4,(geo::ColorSpace)0>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_19F1D11A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F1D12E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F1D12FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

float *std::__hash_table<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::__unordered_map_hasher<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__emplace_unique_key_args<float,std::pair<float const,geo::Color<float,4,(geo::ColorSpace)0>> const&>(uint64_t a1, float *a2, uint64_t a3)
{
  unint64_t v3;
  float v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  float **v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *a2;
  if (*a2 == 0.0)
    v7 = 0;
  else
    v7 = *(unsigned int *)a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 + 0xFFFFFFFF);
    }
    v10 = *(float ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (v11[4] == v6)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_26;
            }
            v11 = *(float **)v11;
            if (!v11)
              goto LABEL_26;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[4] == v6)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v3)
              break;
          }
          v11 = *(float **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_26:
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v15 + 20) = *(_OWORD *)(a3 + 4);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_29:
      *(_QWORD *)v15 = *v19;
LABEL_64:
      *v19 = v15;
      goto LABEL_65;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_40;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_40:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v3 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_29;
      }
      else
      {
        v3 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = ((_DWORD)v8 - 1) & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_29;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return (float *)v15;
}

void sub_19F1D1638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void gss::StyleSheet<gss::ScenePropertyID>::decodeStyl(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  NSObject *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  NSObject *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  NSObject *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  int v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  NSObject *v83;
  _QWORD *v84;
  _QWORD *v85;
  NSObject *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  NSObject *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  NSObject *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  char v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t **v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t *v141;
  uint64_t **v142;
  uint64_t **v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t *v146;
  NSObject *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  NSObject *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  NSObject *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  NSObject *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  geo::ibitstream *v163;
  char *v164;
  std::__shared_weak_count *v170;
  unint64_t *p_shared_owners;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int v183;
  NSObject *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  NSObject *v188;
  _QWORD *v189;
  NSObject *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  NSObject *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  NSObject *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  NSObject *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  gss::Allocator *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t *v217;
  int v218;
  uint64_t *v219;
  unsigned __int8 v220;
  uint64_t **v221;
  uint64_t *v222;
  uint64_t **v223;
  unsigned int v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  _QWORD *v231;
  char v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  NSObject *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  NSObject *v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  const char *v251;
  NSObject *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  NSObject *v256;
  _QWORD *v257;
  _QWORD *v258;
  NSObject *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  NSObject *v263;
  _QWORD *v264;
  _QWORD *v265;
  NSObject *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  NSObject *v272;
  _QWORD *v273;
  NSObject *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  NSObject *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  gss::Allocator **v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  unsigned __int16 v287;
  unsigned __int8 v288;
  int v289;
  uint64_t v290;
  uint64_t (***v291)();
  uint64_t v292;
  int v293;
  int v294;
  unsigned __int8 v295[8];
  uint64_t v296;
  int v297;
  BOOL v298;
  unsigned __int8 v299;
  unsigned __int8 v300;
  uint64_t **v301;
  uint64_t *v302;
  gss::Allocator *v303;
  uint64_t v304;
  unsigned __int8 v305;
  uint64_t **v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  _QWORD **v311;
  _QWORD *v312;
  gss::Allocator *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  gss::Allocator *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int8 v323;
  _BYTE buf[18];
  __int16 v325;
  _BYTE v326[12];
  uint64_t v327;

  v327 = *MEMORY[0x1E0C80C00];
  v312 = 0;
  v313 = (gss::Allocator *)gss::Allocator::instance((gss::Allocator *)a1);
  v314 = 0;
  v311 = &v312;
  v316 = 0;
  v317 = (gss::Allocator *)gss::Allocator::instance(v313);
  v318 = 0;
  v315 = &v316;
  v319 = a2;
  v320 = a3;
  v302 = 0;
  v303 = (gss::Allocator *)gss::Allocator::instance(v317);
  v304 = 0;
  v301 = &v302;
  v307 = 0;
  v308 = gss::Allocator::instance(v303);
  v309 = 0;
  v306 = &v307;
  v296 = a1;
  if ((gss::StylFile::parseHeader((uint64_t)&v311, a7) & 1) == 0)
  {
    GEOGetGeoCSSStyleSheetLog();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 386;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not decode STYL header.";
      _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)" STYL Parse Error Here: ", 24);
    v27 = "Could not decode STYL header.";
    v28 = 29;
    goto LABEL_107;
  }
  v14 = gss::StylFile::chapter(&v311, 1u);
  geo::ibitstream::readVarInt((uint64_t)&v321, v14);
  if (!(_BYTE)v321)
  {
    GEOGetGeoCSSStyleSheetLog();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 414;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not read stylesheet version.";
      _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)" STYL Parse Error Here: ", 24);
    v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"Could not read stylesheet version.", 34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  v297 = v322;
  v15 = *((unsigned __int8 *)v14 + 24);
  v16 = v15 + 1;
  v17 = v14[1];
  v18 = v14[2];
  v19 = v18 + ((unint64_t)(v15 + 1) >> 3);
  v20 = (v15 + 1) & 7;
  v21 = v18 + 1;
  if (v19 < v18 + 1)
  {
    if (*((_BYTE *)v14 + 24))
      v22 = v18 + 1;
    else
      v22 = v14[2];
    if (v17 < v22)
      goto LABEL_22;
    if (*((_BYTE *)v14 + 24))
    {
      if (v17 >= v21)
      {
        v23 = (((1 << (8 - v15)) - 1) & *(unsigned __int8 *)(*v14 + v18)) << v15;
        goto LABEL_33;
      }
      goto LABEL_21;
    }
    if (v17 >= v21)
    {
      LOBYTE(v23) = *(_BYTE *)(*v14 + v18);
      goto LABEL_33;
    }
LABEL_21:
    v14[2] = v19;
    *((_BYTE *)v14 + 24) = v20;
LABEL_22:
    GEOGetGeoCSSStyleSheetLog();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 417;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not read debug stylesheet flag.";
      _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)" STYL Parse Error Here: ", 24);
    v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not read debug stylesheet flag.", 37);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  if (v15 <= 7)
    v33 = v18 + 1;
  else
    v33 = v18 + 2;
  if (v17 < v33)
    goto LABEL_21;
  v38 = *v14;
  if (*((_BYTE *)v14 + 24))
  {
    v39 = *(unsigned __int8 *)(v38 + v18);
    if (v21 >= v17)
      v40 = 0;
    else
      v40 = *(unsigned __int8 *)(v38 + v21);
    v23 = ((v40 & (0xFFFF << (8 - v15))) >> (8 - v15)) | ((((1 << (8 - v15)) + 255) & v39) << v15);
    v14[2] = v21;
  }
  else
  {
    LOBYTE(v23) = *(_BYTE *)(v38 + v18);
  }
LABEL_33:
  v14[2] = v19;
  *((_BYTE *)v14 + 24) = v20;
  v298 = (v23 & 0x80) != 0;
  v41 = v19 + 2;
  if (!v20)
    v41 = v19 + 1;
  if (v17 < v41)
  {
    GEOGetGeoCSSStyleSheetLog();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 420;
      v325 = 2082;
      *(_QWORD *)v326 = "Could not read number of modes.";
      _os_log_impl(&dword_19F029000, v42, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v43 = (_QWORD *)std::ostream::operator<<();
    v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)" STYL Parse Error Here: ", 24);
    v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not read number of modes.", 31);
LABEL_103:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  v46 = v19 + 1;
  v47 = *v14;
  v48 = *(unsigned __int8 *)(*v14 + v19);
  if (v20)
  {
    if (v46 >= v17)
      v49 = 0;
    else
      v49 = *(unsigned __int8 *)(v47 + v46);
    v48 = (((v49 & (0xFFFF << (8 - v20))) >> (8 - v20)) | ((((1 << (8 - v20)) - 1) & v48) << (v16 & 7)));
  }
  v14[2] = v46;
  if (!v48)
  {
LABEL_74:
    v60 = v46 + 2;
    v61 = v46 + 3;
    if (!v20)
      v61 = v46 + 2;
    if (v17 < v61)
    {
      GEOGetGeoCSSStyleSheetLog();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 441;
        v325 = 2082;
        *(_QWORD *)v326 = "Could not read number of attributes.";
        _os_log_impl(&dword_19F029000, v62, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
      v63 = (_QWORD *)std::ostream::operator<<();
      v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" STYL Parse Error Here: ", 24);
      v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)"Could not read number of attributes.", 36);
      goto LABEL_103;
    }
    v65 = *v14;
    if (v20)
    {
      v66 = 8 - v20;
      v67 = 0xFFFF << (8 - v20);
      v68 = v46 + 1;
      if (v46 + 1 >= v17)
        v69 = 0;
      else
        v69 = *(unsigned __int8 *)(v65 + v68);
      v71 = ((v69 & v67) >> v66) | ((((1 << (8 - v20)) - 1) & *(_BYTE *)(v65 + v46)) << v20);
      v14[2] = v68;
      v73 = *(unsigned __int8 *)(v65 + v68);
      if (v60 >= v17)
        v74 = 0;
      else
        v74 = *(unsigned __int8 *)(v65 + v60);
      v72 = ((v74 & v67) >> v66) | ((((1 << (8 - v20)) + 255) & v73) << v20);
      v70 = v20;
    }
    else
    {
      v70 = 0;
      v71 = *(unsigned __int16 *)(v65 + v46);
      v72 = v71 >> 8;
    }
    v14[2] = v60;
    v75 = v60 + ((v70 + 5) >> 3);
    v76 = (v70 + 5) & 7;
    v77 = v46 + 3;
    if (v75 >= v77)
    {
      if (v20 <= 3)
        v79 = v77;
      else
        v79 = v77 + 1;
      if (v17 < v79)
        goto LABEL_113;
      if (v20)
      {
        v80 = 8 - v20;
        v81 = *(unsigned __int8 *)(v65 + v60);
        if (v77 >= v17)
          v82 = 0;
        else
          v82 = *(unsigned __int8 *)(v65 + v77);
        v78 = ((v82 & (0xFFFF << v80)) >> v80) | ((((1 << v80) + 255) & v81) << v70);
        v14[2] = v77;
LABEL_119:
        v14[2] = v75;
        *((_BYTE *)v14 + 24) = v76;
        v96 = ((_BYTE)v70 + 5) & 7;
        v97 = v75 + ((v96 + 5) >> 3);
        v98 = (v96 + 5) & 7;
        v99 = v75 + 1;
        v292 = a6;
        if (v97 >= v75 + 1)
        {
          if (v76 <= 3)
            v102 = v75 + 1;
          else
            v102 = v75 + 2;
          if (v17 >= v102)
          {
            v290 = a5;
            if (v76)
            {
              v107 = 8 - v76;
              v108 = *(unsigned __int8 *)(v65 + v75);
              if (v99 >= v17)
                v109 = 0;
              else
                v109 = *(unsigned __int8 *)(v65 + v99);
              v101 = ((v109 & (0xFFFF << v107)) >> v107) | ((((1 << v107) + 255) & v108) << v96);
              v14[2] = v99;
LABEL_143:
              v14[2] = v97;
              *((_BYTE *)v14 + 24) = v98;
              v299 = (v78 >> 3) + 1;
              v300 = (v101 >> 3) + 1;
              v287 = v71 | (unsigned __int16)((_WORD)v72 << 8);
              if (v287)
              {
                v110 = 0;
                while (1)
                {
                  v293 = v110;
                  LODWORD(v321) = 0;
                  if (!gss::decodeAttributeEncoding(v14, &v321, v299, v300, a7))
                    break;
                  v111 = *((unsigned __int8 *)v14 + 24);
                  v113 = v14[1];
                  v112 = v14[2];
                  v114 = v112 + ((unint64_t)(v111 + 5) >> 3);
                  v115 = (v111 + 5) & 7;
                  v116 = v112 + 1;
                  a5 = v290;
                  a6 = v292;
                  if (v114 >= v112 + 1)
                  {
                    if (v111 <= 3)
                      v119 = v112 + 1;
                    else
                      v119 = v112 + 2;
                    if (v113 < v119)
                    {
LABEL_224:
                      v14[2] = v114;
                      *((_BYTE *)v14 + 24) = v115;
LABEL_225:
                      GEOGetGeoCSSStyleSheetLog();
                      v155 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 452;
                        v325 = 2082;
                        *(_QWORD *)v326 = "Could not read number of bits for attribute value.";
                        _os_log_impl(&dword_19F029000, v155, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                      }

                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                      v156 = (_QWORD *)std::ostream::operator<<();
                      v157 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v156, (uint64_t)" STYL Parse Error Here: ", 24);
                      v158 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v157, (uint64_t)"Could not read number of bits for attribute value.", 50);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v158, (uint64_t)"\n", 1);
                      goto LABEL_104;
                    }
                    v120 = *v14;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v116 >= v113)
                        v121 = 0;
                      else
                        v121 = *(unsigned __int8 *)(v120 + v116);
                      v118 = ((v121 & (0xFFFF << (8 - v111))) >> (8 - v111)) | ((((1 << (8 - v111)) + 255) & *(unsigned __int8 *)(v120 + v112)) << v111);
                      v14[2] = v116;
                    }
                    else
                    {
                      LOBYTE(v118) = *(_BYTE *)(v120 + v112);
                    }
                  }
                  else
                  {
                    if (*((_BYTE *)v14 + 24))
                      v117 = v112 + 1;
                    else
                      v117 = v14[2];
                    if (v113 < v117)
                      goto LABEL_225;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v113 < v116)
                        goto LABEL_224;
                      v118 = (((1 << (8 - v111)) - 1) & *(unsigned __int8 *)(*v14 + v112)) << v111;
                    }
                    else
                    {
                      if (v113 < v116)
                        goto LABEL_224;
                      LOBYTE(v118) = *(_BYTE *)(*v14 + v112);
                    }
                  }
                  v14[2] = v114;
                  *((_BYTE *)v14 + 24) = v115;
                  v122 = v302;
                  v123 = &v302;
                  v124 = &v302;
                  if (v302)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v124 = (uint64_t **)v122;
                        v125 = *((_DWORD *)v122 + 7);
                        if (v321 >= v125)
                          break;
                        v122 = *v124;
                        v123 = v124;
                        if (!*v124)
                          goto LABEL_175;
                      }
                      if (v125 >= v321)
                        break;
                      v122 = v124[1];
                      if (!v122)
                      {
                        v123 = v124 + 1;
                        goto LABEL_175;
                      }
                    }
                    v126 = (uint64_t)v124;
                  }
                  else
                  {
LABEL_175:
                    v126 = (*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v303 + 16))(v303, 40, 8);
                    *(_DWORD *)(v126 + 28) = v321;
                    *(_BYTE *)(v126 + 32) = 0;
                    *(_QWORD *)v126 = 0;
                    *(_QWORD *)(v126 + 8) = 0;
                    *(_QWORD *)(v126 + 16) = v124;
                    *v123 = (uint64_t *)v126;
                    v127 = (uint64_t *)v126;
                    if (*v301)
                    {
                      v301 = (uint64_t **)*v301;
                      v127 = *v123;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v302, v127);
                    ++v304;
                  }
                  *(_BYTE *)(v126 + 32) = (v118 >> 3) + 1;
                  v110 = v293 + 1;
                  if ((unsigned __int16)(v293 + 1) >= v287)
                    goto LABEL_178;
                }
                GEOGetGeoCSSStyleSheetLog();
                a5 = v290;
                a6 = v292;
                v151 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 450;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not decode attribute.";
                  _os_log_impl(&dword_19F029000, v151, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v152 = (_QWORD *)std::ostream::operator<<();
                v153 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v152, (uint64_t)" STYL Parse Error Here: ", 24);
                v154 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v153, (uint64_t)"Could not decode attribute.", 27);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
LABEL_178:
              geo::ibitstream::readUIntBits(&v321, v14, 5u);
              if (!(_BYTE)v321)
              {
                GEOGetGeoCSSStyleSheetLog();
                a5 = v290;
                a6 = v292;
                v147 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 457;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not read number of bits for property id.";
                  _os_log_impl(&dword_19F029000, v147, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v148 = (_QWORD *)std::ostream::operator<<();
                v149 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v148, (uint64_t)" STYL Parse Error Here: ", 24);
                v150 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v149, (uint64_t)"Could not read number of bits for property id.", 46);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v150, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
              v305 = BYTE4(v321) + 1;
              geo::ibitstream::readUIntBits(&v321, v14, (BYTE4(v321) + 1));
              a5 = v290;
              a6 = v292;
              if (!(_BYTE)v321)
              {
                GEOGetGeoCSSStyleSheetLog();
                v159 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 460;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not read number of properties.";
                  _os_log_impl(&dword_19F029000, v159, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v160 = (_QWORD *)std::ostream::operator<<();
                v161 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)" STYL Parse Error Here: ", 24);
                v162 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)"Could not read number of properties.", 36);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
              v283 = HIDWORD(v321);
              if (HIDWORD(v321))
              {
                v128 = 0;
                while (1)
                {
                  v294 = v128;
                  geo::ibitstream::readUIntBits(&v321, v14, v305);
                  if (!(_BYTE)v321)
                    break;
                  v129 = HIDWORD(v321);
                  v130 = *((unsigned __int8 *)v14 + 24);
                  v132 = v14[1];
                  v131 = v14[2];
                  v133 = v131 + ((unint64_t)(v130 + 2) >> 3);
                  v134 = (v130 + 2) & 7;
                  v135 = v131 + 1;
                  if (v133 >= v131 + 1)
                  {
                    if (v130 <= 6)
                      v138 = v131 + 1;
                    else
                      v138 = v131 + 2;
                    if (v132 < v138)
                    {
LABEL_254:
                      v14[2] = v133;
                      *((_BYTE *)v14 + 24) = v134;
LABEL_255:
                      GEOGetGeoCSSStyleSheetLog();
                      v194 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 466;
                        v325 = 2082;
                        *(_QWORD *)v326 = "Could not read property size.";
                        _os_log_impl(&dword_19F029000, v194, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                      }

                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                      v195 = (_QWORD *)std::ostream::operator<<();
                      v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)" STYL Parse Error Here: ", 24);
                      v197 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)"Could not read property size.", 29);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n", 1);
                      goto LABEL_104;
                    }
                    v139 = *v14;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v135 >= v132)
                        v140 = 0;
                      else
                        v140 = *(unsigned __int8 *)(v139 + v135);
                      v137 = ((v140 & (0xFFFF << (8 - v130))) >> (8 - v130)) | ((((1 << (8 - v130)) + 255) & *(unsigned __int8 *)(v139 + v131)) << v130);
                      v14[2] = v135;
                    }
                    else
                    {
                      LOBYTE(v137) = *(_BYTE *)(v139 + v131);
                    }
                  }
                  else
                  {
                    if (*((_BYTE *)v14 + 24))
                      v136 = v131 + 1;
                    else
                      v136 = v14[2];
                    if (v132 < v136)
                      goto LABEL_255;
                    if (*((_BYTE *)v14 + 24))
                    {
                      if (v132 < v135)
                        goto LABEL_254;
                      v137 = (((1 << (8 - v130)) - 1) & *(unsigned __int8 *)(*v14 + v131)) << v130;
                    }
                    else
                    {
                      if (v132 < v135)
                        goto LABEL_254;
                      LOBYTE(v137) = *(_BYTE *)(*v14 + v131);
                    }
                  }
                  v14[2] = v133;
                  *((_BYTE *)v14 + 24) = v134;
                  v288 = v137;
                  if ((v137 & 0x80) == 0)
                  {
                    geo::ibitstream::readVarInt((uint64_t)&v321, v14);
                    if (!(_BYTE)v321)
                    {
                      GEOGetGeoCSSStyleSheetLog();
                      v203 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 470;
                        v325 = 2082;
                        *(_QWORD *)v326 = "Could not read property size.";
                        _os_log_impl(&dword_19F029000, v203, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                      }

                      a6 = v292;
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                      v204 = (_QWORD *)std::ostream::operator<<();
                      v205 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)" STYL Parse Error Here: ", 24);
                      v206 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v205, (uint64_t)"Could not read property size.", 29);
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v206, (uint64_t)"\n", 1);
                      goto LABEL_104;
                    }
                    v285 = v322;
                  }
                  v141 = v307;
                  v142 = &v307;
                  v143 = &v307;
                  if (v307)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v143 = (uint64_t **)v141;
                        v144 = *((_DWORD *)v141 + 7);
                        if (v129 >= v144)
                          break;
                        v141 = *v143;
                        v142 = v143;
                        if (!*v143)
                          goto LABEL_215;
                      }
                      if (v144 >= v129)
                        break;
                      v141 = v143[1];
                      if (!v141)
                      {
                        v142 = v143 + 1;
                        goto LABEL_215;
                      }
                    }
                    v145 = (uint64_t)v143;
                  }
                  else
                  {
LABEL_215:
                    v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v308 + 16))(v308, 40, 8);
                    *(_DWORD *)(v145 + 28) = v129;
                    *(_QWORD *)(v145 + 32) = 0;
                    *(_QWORD *)v145 = 0;
                    *(_QWORD *)(v145 + 8) = 0;
                    *(_QWORD *)(v145 + 16) = v143;
                    *v142 = (uint64_t *)v145;
                    v146 = (uint64_t *)v145;
                    if (*v306)
                    {
                      v306 = (uint64_t **)*v306;
                      v146 = *v142;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v307, v146);
                    ++v309;
                  }
                  *(_BYTE *)(v145 + 32) = v288 >> 6;
                  *(_DWORD *)(v145 + 36) = v285;
                  v128 = v294 + 1;
                  a6 = v292;
                  if (v294 + 1 == v283)
                    goto LABEL_231;
                }
                GEOGetGeoCSSStyleSheetLog();
                v190 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 463;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not read property id.";
                  _os_log_impl(&dword_19F029000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                a6 = v292;
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v191 = (_QWORD *)std::ostream::operator<<();
                v192 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)" STYL Parse Error Here: ", 24);
                v193 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)"Could not read property id.", 27);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)"\n", 1);
                goto LABEL_104;
              }
LABEL_231:
              v163 = (geo::ibitstream *)gss::StylFile::chapter(&v311, 0xAu);
              v164 = (char *)operator new(0x168uLL);
              *((_QWORD *)v164 + 1) = 0;
              *((_QWORD *)v164 + 2) = 0;
              *(_QWORD *)v164 = &off_1E42E5B90;
              *(_OWORD *)(v164 + 40) = 0u;
              *(_OWORD *)(v164 + 56) = 0u;
              *(_OWORD *)(v164 + 72) = 0u;
              *(_OWORD *)(v164 + 88) = 0u;
              *(_OWORD *)(v164 + 104) = 0u;
              *(_OWORD *)(v164 + 120) = 0u;
              *(_OWORD *)(v164 + 136) = 0u;
              *(_OWORD *)(v164 + 152) = 0u;
              *(_OWORD *)(v164 + 168) = 0u;
              *(_OWORD *)(v164 + 184) = 0u;
              *(_OWORD *)(v164 + 200) = 0u;
              *(_OWORD *)(v164 + 216) = 0u;
              *(_OWORD *)(v164 + 232) = 0u;
              *(_OWORD *)(v164 + 248) = 0u;
              *(_OWORD *)(v164 + 24) = 0u;
              *(_OWORD *)(v164 + 264) = 0u;
              *(_OWORD *)(v164 + 280) = 0u;
              *(_OWORD *)(v164 + 296) = 0u;
              *(_OWORD *)(v164 + 312) = 0u;
              *((_DWORD *)v164 + 29) = 1065353216;
              __asm { FMOV            V0.4S, #1.0 }
              *(_QWORD *)(v164 + 108) = _Q0;
              __asm { FMOV            V0.2S, #1.0 }
              *((_QWORD *)v164 + 28) = _Q0;
              *(_QWORD *)(v164 + 236) = 0xBF8000003F800000;
              *(_OWORD *)(v164 + 284) = xmmword_19FFB4870;
              *(_OWORD *)(v164 + 300) = xmmword_19FFB4880;
              *((_DWORD *)v164 + 79) = 1096810496;
              *(_OWORD *)(v164 + 328) = xmmword_19FFB4890;
              *(_OWORD *)(v164 + 344) = xmmword_19FFB48A0;
              v170 = *(std::__shared_weak_count **)(a1 + 128);
              *(_QWORD *)(a1 + 120) = v164 + 24;
              *(_QWORD *)(a1 + 128) = v164;
              if (v170)
              {
                p_shared_owners = (unint64_t *)&v170->__shared_owners_;
                do
                  v172 = __ldaxr(p_shared_owners);
                while (__stlxr(v172 - 1, p_shared_owners));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              if ((gss::GlobalProperties::loadFromStylChapterBitstream(*(_QWORD *)(a1 + 120), v163, (uint64_t)&v296, a7) & 1) == 0)
              {
                GEOGetGeoCSSStyleSheetLog();
                v184 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 488;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not decode global properties.";
                  _os_log_impl(&dword_19F029000, v184, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v185 = (_QWORD *)std::ostream::operator<<();
                v186 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)" STYL Parse Error Here: ", 24);
                v187 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v186, (uint64_t)"Could not decode global properties.", 35);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v187, (uint64_t)"\n", 1);
                GEOGetGeoCSSStyleSheetLog();
                v188 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 388;
                  v325 = 2082;
                  *(_QWORD *)v326 = "Could not decode global properties.";
                  _os_log_impl(&dword_19F029000, v188, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                v189 = (_QWORD *)std::ostream::operator<<();
                v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v189, (uint64_t)" STYL Parse Error Here: ", 24);
                v27 = "Could not decode global properties.";
                v28 = 35;
                goto LABEL_107;
              }
              buf[0] = 1;
              v173 = *(_QWORD *)(v290 + 24);
              if (!v173)
                goto LABEL_361;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v173 + 48))(v173, buf);
              v174 = gss::StylFile::chapter(&v311, 0x14u);
              *(_QWORD *)v295 = v174;
              v175 = v174;
              v176 = *((unsigned __int8 *)v174 + 24);
              v178 = v174[1];
              v177 = v174[2];
              v179 = v177 + ((unint64_t)(v176 + 5) >> 3);
              v180 = (v176 + 5) & 7;
              v181 = v177 + 1;
              if (v179 >= v177 + 1)
              {
                if (v176 <= 3)
                  v198 = v177 + 1;
                else
                  v198 = v177 + 2;
                if (v178 >= v198)
                {
                  v207 = *v174;
                  if (*((_BYTE *)v174 + 24))
                  {
                    v208 = *(unsigned __int8 *)(v207 + v177);
                    if (v181 >= v178)
                      v209 = 0;
                    else
                      v209 = *(unsigned __int8 *)(v207 + v181);
                    v183 = ((v209 & (0xFFFF << (8 - v176))) >> (8 - v176)) | ((((1 << (8 - v176)) + 255) & v208) << v176);
                    v174[2] = v181;
                  }
                  else
                  {
                    LOBYTE(v183) = *(_BYTE *)(v207 + v177);
                  }
LABEL_277:
                  v210 = v183 >> 3;
                  v174[2] = v179;
                  *((_BYTE *)v174 + 24) = v180;
                  v310 = v210 + 1;
                  v211 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v321, v174, v210 + 1);
                  if ((_BYTE)v321)
                  {
                    v282 = (gss::Allocator **)(a1 + 144);
                    v284 = HIDWORD(v321);
                    if (HIWORD(v321) || *(_BYTE *)(a1 + 156) || HIDWORD(v321) <= *(unsigned __int16 *)(a1 + 154))
                    {
                      if (!HIDWORD(v321))
                      {
LABEL_319:
                        if ((gss::StyleSheet<gss::ScenePropertyID>::decodeStyles(a1, &v311, (uint64_t)&v296, a4, a7) & 1) != 0)
                        {
                          v235 = gss::StylFile::chapter(&v311, 0x1Eu);
                          v236 = operator new();
                          *(_OWORD *)(v236 + 32) = 0u;
                          *(_OWORD *)(v236 + 48) = 0u;
                          *(_OWORD *)v236 = 0u;
                          *(_OWORD *)(v236 + 16) = 0u;
                          *(_DWORD *)(v236 + 64) = 1024;
                          v237 = *(_QWORD *)(a1 + 160);
                          *(_QWORD *)(a1 + 160) = v236;
                          if (v237)
                          {
                            v238 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(v237);
                            MEMORY[0x1A1AF4E00](v238, 0x1020C40FE16DC66);
                            v236 = *(_QWORD *)(a1 + 160);
                          }
                          if ((gss::StyleMatchingTree<gss::CartoStyle<gss::ScenePropertyID>>::construct(v236, v235, (uint64_t)&v296, a1 + 64, a7) & 1) != 0)
                          {
                            v90 = 1;
                            a6 = v292;
LABEL_110:
                            buf[0] = v90;
                            v91 = *(_QWORD *)(a6 + 24);
                            if (!v91)
                              goto LABEL_361;
                            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 48))(v91, buf);
                            std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v306, v307);
                            std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v301, v302);
                            std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy((uint64_t)&v315, v316);
                            std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy((uint64_t)&v311, v312);
                            return;
                          }
                          GEOGetGeoCSSStyleSheetLog();
                          v266 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 658;
                            v325 = 2082;
                            *(_QWORD *)v326 = "Could not decode style matching tree.";
                            _os_log_impl(&dword_19F029000, v266, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                          }

                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                          v267 = (_QWORD *)std::ostream::operator<<();
                          v268 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
                          v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not decode style matching tree.", 37);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
                          v270 = *(_QWORD *)(a1 + 160);
                          *(_QWORD *)(a1 + 160) = 0;
                          if (v270)
                          {
                            v271 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(v270);
                            MEMORY[0x1A1AF4E00](v271, 0x1020C40FE16DC66);
                          }
                          GEOGetGeoCSSStyleSheetLog();
                          v272 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 393;
                            v325 = 2082;
                            *(_QWORD *)v326 = "Could not decode style matching graph.";
                            _os_log_impl(&dword_19F029000, v272, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                          }

                          a6 = v292;
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                          v273 = (_QWORD *)std::ostream::operator<<();
                          v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)" STYL Parse Error Here: ", 24);
                          v251 = "Could not decode style matching graph.";
                          v249 = 38;
                        }
                        else
                        {
                          GEOGetGeoCSSStyleSheetLog();
                          v247 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 392;
                            v325 = 2082;
                            *(_QWORD *)v326 = "Could not decode styles.";
                            _os_log_impl(&dword_19F029000, v247, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                          }

                          a6 = v292;
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                          v248 = (_QWORD *)std::ostream::operator<<();
                          v249 = 24;
                          v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)" STYL Parse Error Here: ", 24);
                          v251 = "Could not decode styles.";
                        }
LABEL_346:
                        v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v250, (uint64_t)v251, v249);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"\n", 1);
LABEL_109:
                        v90 = 0;
                        goto LABEL_110;
                      }
                    }
                    else
                    {
                      v211 = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v282, HIDWORD(v321));
                    }
                    v286 = 0;
                    while (1)
                    {
                      v212 = gss::Allocator::instance(v211);
                      v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v212 + 16))(v212, 112, 8);
                      *(_QWORD *)v213 = &off_1E42E5C00;
                      *(_QWORD *)(v213 + 8) = 0;
                      *(_QWORD *)(v213 + 16) = 0;
                      *(_QWORD *)(v213 + 24) = v212;
                      *(_QWORD *)(v213 + 32) = 0;
                      *(_QWORD *)(v213 + 40) = 0;
                      *(_QWORD *)(v213 + 48) = 0;
                      *(_BYTE *)(v213 + 47) = 1;
                      *(_QWORD *)(v213 + 55) = 0;
                      *(_BYTE *)(v213 + 63) = 1;
                      *(_QWORD *)(v213 + 64) = 0;
                      *(_QWORD *)(v213 + 71) = 0;
                      *(_BYTE *)(v213 + 79) = 1;
                      *(_QWORD *)(v213 + 80) = 0;
                      *(_QWORD *)(v213 + 87) = 0;
                      *(_BYTE *)(v213 + 95) = 1;
                      *(_QWORD *)(v213 + 96) = 0;
                      *(_QWORD *)(v213 + 103) = 0;
                      *(_BYTE *)(v213 + 111) = 1;
                      *(_QWORD *)buf = v213 + 32;
                      *(_QWORD *)&buf[8] = v213;
                      v214 = *(unsigned __int16 *)(a1 + 152);
                      if (v214 != 0xFFFF
                        && !*(_BYTE *)(a1 + 156)
                        && v214 >= *(unsigned __int16 *)(a1 + 154))
                      {
                        geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v282, v214 + 1);
                        v214 = *(unsigned __int16 *)(a1 + 152);
                      }
                      v215 = *(_QWORD *)(a1 + 144);
                      v216 = (_QWORD *)(v215 + 16 * v214);
                      *v216 = v213 + 32;
                      v216[1] = v213;
                      *(_WORD *)(a1 + 152) = v214 + 1;
                      v291 = *(uint64_t (****)())(v215 + 16 * v286);
                      geo::ibitstream::readUIntBits(&v321, *(uint64_t **)v295, v305);
                      if (!(_BYTE)v321)
                      {
                        GEOGetGeoCSSStyleSheetLog();
                        v274 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315650;
                          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 223;
                          v325 = 2082;
                          *(_QWORD *)v326 = "Could not read number of properties.";
                          _os_log_impl(&dword_19F029000, v274, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                        }

                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                        v275 = (_QWORD *)std::ostream::operator<<();
                        v276 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v275, (uint64_t)" STYL Parse Error Here: ", 24);
                        v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)"Could not read number of properties.", 36);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"\n", 1);
                        goto LABEL_340;
                      }
                      v217 = *(uint64_t **)v295;
                      v289 = HIDWORD(v321);
                      if (HIDWORD(v321))
                        break;
LABEL_318:
                      v211 = (gss::Allocator *)gss::StylePropertySet<gss::ScenePropertyID>::intern(v291, v296 + 232);
                      if (++v286 == v284)
                        goto LABEL_319;
                    }
                    v218 = 0;
                    while (1)
                    {
                      geo::ibitstream::readUIntBits(&v321, v217, v305);
                      if (!(_BYTE)v321)
                      {
                        GEOGetGeoCSSStyleSheetLog();
                        v252 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315650;
                          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 226;
                          v325 = 2082;
                          *(_QWORD *)v326 = "Could not read property index.";
                          _os_log_impl(&dword_19F029000, v252, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                        }

                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                        v253 = (_QWORD *)std::ostream::operator<<();
                        v254 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)" STYL Parse Error Here: ", 24);
                        v255 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v254, (uint64_t)"Could not read property index.", 30);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)"\n", 1);
                        goto LABEL_340;
                      }
                      v219 = v307;
                      if (!v307)
                        break;
                      v220 = BYTE4(v321);
                      v221 = &v307;
                      do
                      {
                        v222 = v219;
                        v223 = v221;
                        v224 = *((_DWORD *)v219 + 7);
                        v225 = (uint64_t **)(v219 + 1);
                        if (v224 >= HIDWORD(v321))
                        {
                          v225 = (uint64_t **)v222;
                          v221 = (uint64_t **)v222;
                        }
                        v219 = *v225;
                      }
                      while (v219);
                      if (v221 == &v307)
                        break;
                      v226 = v224 >= HIDWORD(v321) ? v222 : (uint64_t *)v223;
                      if (HIDWORD(v321) < *((_DWORD *)v226 + 7))
                        break;
                      if (v224 >= HIDWORD(v321))
                        v223 = (uint64_t **)v222;
                      v227 = *((unsigned int *)v223 + 9);
                      switch(*((_BYTE *)v223 + 32))
                      {
                        case 0:
                          goto LABEL_310;
                        case 1:
                          v227 = (8 * v227);
                          goto LABEL_310;
                        case 2:
                          v227 = 1;
                          goto LABEL_310;
                        case 3:
                          geo::ibitstream::readVarInt((uint64_t)&v321, v217);
                          if (!(_BYTE)v321)
                          {
                            GEOGetGeoCSSStyleSheetLog();
                            v278 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 136315650;
                              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/Sty"
                                                   "lePropertySet.hpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 242;
                              v325 = 2082;
                              *(_QWORD *)v326 = "Could not read size of variable sized property.";
                              _os_log_impl(&dword_19F029000, v278, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                            }

                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                            v279 = (_QWORD *)std::ostream::operator<<();
                            v280 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v279, (uint64_t)" STYL Parse Error Here: ", 24);
                            v281 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)"Could not read size of variable sized property.", 47);
                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)"\n", 1);
                            goto LABEL_340;
                          }
                          v227 = 8 * v322;
                          v217 = *(uint64_t **)v295;
LABEL_310:
                          v228 = v217[2];
                          v229 = *((unsigned __int8 *)v217 + 24);
                          gss::propertyDecoderForIndex<gss::ScenePropertyID>(v220, buf);
                          v321 = v227;
                          v323 = v220;
                          if (!*(_QWORD *)&v326[4])
                            goto LABEL_361;
                          v230 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t (***)(), uint64_t *, unsigned __int8 *, uint64_t *, _QWORD *))(**(_QWORD **)&v326[4] + 48))(*(_QWORD *)&v326[4], v217, v291, &v321, &v323, &v296, a7);
                          v231 = *(_QWORD **)&v326[4];
                          if (*(_BYTE **)&v326[4] == buf)
                          {
                            v232 = v230;
                            v231 = buf;
                            v233 = 4;
                          }
                          else
                          {
                            if (!*(_QWORD *)&v326[4])
                              goto LABEL_316;
                            v232 = v230;
                            v233 = 5;
                          }
                          (*(void (**)(void))(*v231 + 8 * v233))();
                          v230 = v232;
LABEL_316:
                          v217 = *(uint64_t **)v295;
                          if ((v230 & 1) == 0)
                          {
                            GEOGetGeoCSSStyleSheetLog();
                            v256 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 136315650;
                              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/Sty"
                                                   "lePropertySet.hpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 247;
                              v325 = 2082;
                              *(_QWORD *)v326 = "Could not decode property";
                              _os_log_impl(&dword_19F029000, v256, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                            }

                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                            v257 = (_QWORD *)std::ostream::operator<<();
                            v258 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)" STYL Parse Error Here: ", 24);
                            v246 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)"Could not decode property", 25);
                            goto LABEL_339;
                          }
                          v234 = 8 * v228 + v227 + v229;
                          *(_QWORD *)(*(_QWORD *)v295 + 16) = v234 >> 3;
                          *(_BYTE *)(*(_QWORD *)v295 + 24) = v234 & 7;
                          if (++v218 == v289)
                            goto LABEL_318;
                          break;
                        default:
                          v227 = 0;
                          goto LABEL_310;
                      }
                    }
                    GEOGetGeoCSSStyleSheetLog();
                    v243 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 228;
                      v325 = 2082;
                      *(_QWORD *)v326 = "Could not find size for property.";
                      _os_log_impl(&dword_19F029000, v243, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }

                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                    v244 = (_QWORD *)std::ostream::operator<<();
                    v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)" STYL Parse Error Here: ", 24);
                    v246 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"Could not find size for property.", 33);
LABEL_339:
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v246, (uint64_t)"\n", 1);
LABEL_340:
                    GEOGetGeoCSSStyleSheetLog();
                    v259 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 507;
                      v325 = 2082;
                      *(_QWORD *)v326 = "Could not decode property set.";
                      _os_log_impl(&dword_19F029000, v259, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }

                    a6 = v292;
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                    v260 = (_QWORD *)std::ostream::operator<<();
                    v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)" STYL Parse Error Here: ", 24);
                    v262 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"Could not decode property set.", 30);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)"\n", 1);
                  }
                  else
                  {
                    GEOGetGeoCSSStyleSheetLog();
                    v239 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 503;
                      v325 = 2082;
                      *(_QWORD *)v326 = "Could not read number of property sets.";
                      _os_log_impl(&dword_19F029000, v239, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }

                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                    v240 = (_QWORD *)std::ostream::operator<<();
                    v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)" STYL Parse Error Here: ", 24);
                    v242 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"Could not read number of property sets.", 39);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)"\n", 1);
                    a6 = v292;
                  }
LABEL_343:
                  GEOGetGeoCSSStyleSheetLog();
                  v263 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 391;
                    v325 = 2082;
                    *(_QWORD *)v326 = "Could not decode property sets.";
                    _os_log_impl(&dword_19F029000, v263, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }

                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
                  v264 = (_QWORD *)std::ostream::operator<<();
                  v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)" STYL Parse Error Here: ", 24);
                  v251 = "Could not decode property sets.";
                  v249 = 31;
                  goto LABEL_346;
                }
              }
              else
              {
                if (*((_BYTE *)v174 + 24))
                  v182 = v177 + 1;
                else
                  v182 = v174[2];
                if (v178 < v182)
                  goto LABEL_263;
                if (*((_BYTE *)v174 + 24))
                {
                  v175 = v174;
                  if (v178 >= v181)
                  {
                    v183 = (((1 << (8 - v176)) - 1) & *(unsigned __int8 *)(*v174 + v177)) << v176;
                    goto LABEL_277;
                  }
                  goto LABEL_262;
                }
                v175 = v174;
                if (v178 >= v181)
                {
                  LOBYTE(v183) = *(_BYTE *)(*v174 + v177);
                  goto LABEL_277;
                }
              }
LABEL_262:
              v175[2] = v179;
              *((_BYTE *)v175 + 24) = v180;
LABEL_263:
              GEOGetGeoCSSStyleSheetLog();
              v199 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 500;
                v325 = 2082;
                *(_QWORD *)v326 = "Could not read number of bits for property set index.";
                _os_log_impl(&dword_19F029000, v199, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              a6 = v292;
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
              v200 = (_QWORD *)std::ostream::operator<<();
              v201 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)" STYL Parse Error Here: ", 24);
              v202 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)"Could not read number of bits for property set index.", 53);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v202, (uint64_t)"\n", 1);
              goto LABEL_343;
            }
LABEL_140:
            LOBYTE(v101) = *(_BYTE *)(v65 + v75);
            goto LABEL_143;
          }
        }
        else
        {
          if (v76)
            v100 = v75 + 1;
          else
            v100 = v75;
          if (v17 < v100)
            goto LABEL_132;
          if (v76)
          {
            if (v17 >= v99)
            {
              v290 = a5;
              v101 = (((1 << (8 - v76)) - 1) & *(unsigned __int8 *)(v65 + v75)) << v96;
              goto LABEL_143;
            }
            goto LABEL_131;
          }
          v14[2] = v75;
          if (v17 >= v99)
          {
            v290 = a5;
            goto LABEL_140;
          }
        }
LABEL_131:
        v14[2] = v97;
        *((_BYTE *)v14 + 24) = v98;
LABEL_132:
        GEOGetGeoCSSStyleSheetLog();
        v103 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 445;
          v325 = 2082;
          *(_QWORD *)v326 = "Could not read number of bits for client attribute.";
          _os_log_impl(&dword_19F029000, v103, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        v104 = (_QWORD *)std::ostream::operator<<();
        v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v104, (uint64_t)" STYL Parse Error Here: ", 24);
        v106 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)"Could not read number of bits for client attribute.", 51);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v106, (uint64_t)"\n", 1);
        goto LABEL_104;
      }
    }
    else
    {
      if (v20)
      {
        if (v17 >= v77)
        {
          v78 = (((1 << (8 - v20)) - 1) & *(unsigned __int8 *)(v65 + v60)) << v70;
          goto LABEL_119;
        }
LABEL_113:
        v14[2] = v75;
        *((_BYTE *)v14 + 24) = v76;
        GEOGetGeoCSSStyleSheetLog();
        v92 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 444;
          v325 = 2082;
          *(_QWORD *)v326 = "Could not read number of bits for feature attribute.";
          _os_log_impl(&dword_19F029000, v92, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        v93 = (_QWORD *)std::ostream::operator<<();
        v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)" STYL Parse Error Here: ", 24);
        v95 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)"Could not read number of bits for feature attribute.", 52);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)"\n", 1);
        goto LABEL_104;
      }
      if (v17 < v77)
        goto LABEL_113;
    }
    LOBYTE(v78) = *(_BYTE *)(v65 + v60);
    goto LABEL_119;
  }
  v50 = 0;
  v17 = v14[1];
  while (1)
  {
    v51 = v46;
    v52 = v20;
    v46 += (v20 + 1) >> 3;
    LOBYTE(v20) = (v20 + 1) & 7;
    v53 = v51 + 1;
    if (v46 < v51 + 1)
      break;
    if (v17 < v53)
      goto LABEL_69;
    if (!v52)
      goto LABEL_61;
    if (v53 >= v17)
      v55 = 0;
    else
      v55 = *(unsigned __int8 *)(v47 + v53);
    LODWORD(v51) = ((v55 & (0xFFFF << (8 - v52))) >> (8 - v52)) | ((((1 << (8 - v52)) + 255) & *(unsigned __int8 *)(v47 + v51)) << v52);
    v14[2] = v53;
LABEL_64:
    v14[2] = v46;
    *((_BYTE *)v14 + 24) = v20;
    if (v50 == 2)
    {
      *(_BYTE *)(a1 + 137) = (v51 & 0x80) != 0;
    }
    else if (v50 == 1)
    {
      *(_BYTE *)(a1 + 138) = (v51 & 0x80) != 0;
    }
    else
    {
      if (v50)
      {
        GEOGetGeoCSSStyleSheetLog();
        v83 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 435;
          v325 = 2082;
          *(_QWORD *)v326 = "Support specified for unknown map mode.";
          _os_log_impl(&dword_19F029000, v83, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        v84 = (_QWORD *)std::ostream::operator<<();
        v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)" STYL Parse Error Here: ", 24);
        v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)"Support specified for unknown map mode.", 39);
        goto LABEL_103;
      }
      *(_BYTE *)(a1 + 136) = (v51 & 0x80) != 0;
    }
    if (++v50 >= v48)
    {
      v46 = v14[2];
      v20 = *((unsigned __int8 *)v14 + 24);
      goto LABEL_74;
    }
  }
  if (v52)
    v54 = v51 + 1;
  else
    v54 = v51;
  if (v17 < v54)
    goto LABEL_70;
  if (v52)
  {
    if (v17 < v53)
      goto LABEL_69;
    LODWORD(v51) = (((1 << (8 - v52)) - 1) & *(unsigned __int8 *)(v47 + v51)) << v52;
    goto LABEL_64;
  }
  v14[2] = v51;
  if (v17 >= v53)
  {
LABEL_61:
    LOBYTE(v51) = *(_BYTE *)(v47 + v51);
    goto LABEL_64;
  }
LABEL_69:
  v14[2] = v46;
  *((_BYTE *)v14 + 24) = v20;
LABEL_70:
  GEOGetGeoCSSStyleSheetLog();
  v56 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 423;
    v325 = 2082;
    *(_QWORD *)v326 = "Could not read mode support flag.";
    _os_log_impl(&dword_19F029000, v56, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
  v57 = (_QWORD *)std::ostream::operator<<();
  v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)" STYL Parse Error Here: ", 24);
  v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"Could not read mode support flag.", 33);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)"\n", 1);
LABEL_104:
  GEOGetGeoCSSStyleSheetLog();
  v86 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 387;
    v325 = 2082;
    *(_QWORD *)v326 = "Could not decode stylesheet info.";
    _os_log_impl(&dword_19F029000, v86, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
  v87 = (_QWORD *)std::ostream::operator<<();
  v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)" STYL Parse Error Here: ", 24);
  v27 = "Could not decode stylesheet info.";
  v28 = 33;
LABEL_107:
  v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n", 1);
  buf[0] = 0;
  v89 = *(_QWORD *)(a5 + 24);
  if (v89)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v89 + 48))(v89, buf);
    goto LABEL_109;
  }
LABEL_361:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F1D43F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  gss::DecodingContext::~DecodingContext((gss::DecodingContext *)&a17);
  gss::StylFile::~StylFile((gss::StylFile *)&a30);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, a3, *a4, *a5, a6, a7);
}

uint64_t gss::propertyDecoderForIndex<gss::ScenePropertyID>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v2)();

  if (result > 0x57)
    v2 = gss::unknownPropertyDecoder<gss::ScenePropertyID>;
  else
    v2 = off_1E43148D0[(char)result];
  *a2 = &off_1E42C7030;
  a2[1] = v2;
  a2[3] = a2;
  return result;
}

uint64_t gss::floatDecoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned __int8 v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v33 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 5;
    if (!v14)
      v15 = v13 + 4;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = v26 + v13;
        v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12)
            v30 = 0;
          else
            v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        v32 = *(_DWORD *)buf;
      }
      else
      {
        v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v33) = v32;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v36 = 1024;
      v37 = 249;
      v38 = 2082;
      v39 = "Could not read float.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read float.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v36 = 1024;
      v37 = 248;
      v38 = 2082;
      v39 = "Found float with strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found float with strange number of bits.", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::idForIndex<gss::ScenePropertyID>(uint64_t result)
{
  if (result >= 0x58)
    return 88;
  else
    return result;
}

uint64_t gss::int16Decoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint8_t v32;
  __int16 v33;
  unsigned __int8 v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v34 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 16)
  {
    *(_WORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 3;
    if (!v14)
      v15 = v13 + 2;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = v27;
          v30 = v13 + 1;
          if (v13 + 1 >= v12)
            v31 = 0;
          else
            v31 = *(unsigned __int8 *)(v26 + v13 + 1);
          v32 = ((v31 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v26 + v13)) << v14);
          a1[2] = v30;
          buf[v28] = v32;
          v27 = 1;
          v13 = v30;
          v28 = 1;
        }
        while ((v29 & 1) == 0);
        v33 = *(_WORD *)buf;
      }
      else
      {
        v33 = *(_WORD *)(v26 + v13);
        a1[2] = v13 + 2;
      }
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v34) = v33;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v37 = 1024;
      v38 = 162;
      v39 = 2082;
      v40 = "Could not read int16.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read int16.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v37 = 1024;
      v38 = 161;
      v39 = 2082;
      v40 = "Found int16 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found int16 property with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::floatPairDecoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _DWORD *v48;
  unsigned __int8 v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v49 = v10;
  if (v10 == 88)
    return 1;
  if (a3 != 64)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v22 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v52 = 1024;
      v53 = 444;
      v54 = 2082;
      v55 = "Found float pair property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)":", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" STYL Parse Error Here: ", 24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Found float pair property with strange number of bits.", 54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    return 0;
  }
  *(_DWORD *)buf = 0;
  v12 = a1[1];
  v13 = a1[2];
  v14 = v13 + 4;
  v15 = *((_BYTE *)a1 + 24);
  v16 = v13 + 5;
  if (!v15)
    v16 = v13 + 4;
  if (v12 >= v16)
  {
    v27 = *a1;
    if (*((_BYTE *)a1 + 24))
    {
      v28 = 0;
      v29 = 8 - v15;
      v30 = 0xFFFF << (8 - v15);
      v31 = v27 + v13;
      do
      {
        v32 = v13 + v28 + 1;
        if (v32 >= v12)
          v33 = 0;
        else
          v33 = *(unsigned __int8 *)(v31 + v28 + 1);
        v34 = ((v33 & v30) >> v29) | ((((1 << (8 - v15)) - 1) & *(_BYTE *)(v31 + v28)) << v15);
        a1[2] = v32;
        buf[v28++] = v34;
      }
      while (v28 != 4);
      v35 = *(_DWORD *)buf;
      *(_DWORD *)buf = 0;
      v36 = v13 + 4;
      if (v12 >= v36 + 5)
      {
        v37 = 0;
        v38 = v36 + v27;
        do
        {
          v39 = v36 + v37 + 1;
          if (v39 >= v12)
            v40 = 0;
          else
            v40 = *(unsigned __int8 *)(v38 + v37 + 1);
          v41 = ((v40 & v30) >> v29) | ((((1 << (8 - v15)) - 1) & *(_BYTE *)(v38 + v37)) << v15);
          a1[2] = v39;
          buf[v37++] = v41;
        }
        while (v37 != 4);
        v42 = *(_DWORD *)buf;
        goto LABEL_38;
      }
    }
    else
    {
      v35 = *(_DWORD *)(v27 + v13);
      a1[2] = v14;
      if (v12 >= v13 + 8 + (unint64_t)(v15 != 0))
      {
        v42 = *(_DWORD *)(v27 + v14);
        a1[2] = v13 + 8;
LABEL_38:
        buf[0] = v10;
        buf[1] = 0;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
        v48 = (_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v49);
        *v48 = v35;
        v48[1] = v42;
        return 1;
      }
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v43 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v52 = 1024;
      v53 = 446;
      v54 = 2082;
      v55 = "Could not read second half of float pair.";
      _os_log_impl(&dword_19F029000, v43, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)":", 1);
    v45 = (_QWORD *)std::ostream::operator<<();
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" STYL Parse Error Here: ", 24);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Could not read second half of float pair.", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\n", 1);
    return 0;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v17 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    v52 = 1024;
    v53 = 445;
    v54 = 2082;
    v55 = "Could not read first half of float pair.";
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" STYL Parse Error Here: ", 24);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not read first half of float pair.", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::angle0To180Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  uint8_t v11;
  unsigned int v12;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[4];
  unsigned int v25;
  unsigned __int8 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v26 = v10;
  if (v10 == 88)
    return 1;
  if (a3 <= 0xA)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v29 = 1024;
      v30 = 227;
      v31 = 2082;
      v32 = "Found 0° - 180° property with too few bits.";
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found 0° - 180° property with too few bits.", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  else
  {
    v11 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (v24[0])
    {
      v12 = v25;
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = (float)v12 / (float)(1 << (a3 - 8));
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v29 = 1024;
      v30 = 228;
      v31 = 2082;
      v32 = "Could not read 0° - 180° angle.";
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read 0° - 180° angle.", 33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::angle0To90Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  uint8_t v11;
  unsigned int v12;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[4];
  unsigned int v25;
  unsigned __int8 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v26 = v10;
  if (v10 == 88)
    return 1;
  if (a3 <= 9)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v29 = 1024;
      v30 = 205;
      v31 = 2082;
      v32 = "Found 0° - 90° property with too few bits.";
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found 0° - 90° property with too few bits.", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  else
  {
    v11 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (v24[0])
    {
      v12 = v25;
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = (float)v12 / (float)(1 << (a3 - 7));
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v29 = 1024;
      v30 = 206;
      v31 = 2082;
      v32 = "Could not read 0° - 90° angle.";
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read 0° - 90° angle.", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::enumDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v11;
  uint8_t v12;
  unsigned int v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v25[4];
  unsigned int v26;
  unsigned __int8 v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = gss::idForIndex<gss::ScenePropertyID>(a5);
  v27 = v11;
  if (v11 == 88)
    return 1;
  v12 = v11;
  geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v25);
  if (v25[0])
  {
    v13 = v26;
    if (v26 <= a4)
    {
      buf[0] = v12;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v27) = v13;
    }
    else
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v14 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v30 = 1024;
        v31 = 563;
        v32 = 2082;
        v33 = "Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?";
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_DEBUG, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Warning: ", 21);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?", 92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
    }
    return 1;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v19 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    v30 = 1024;
    v31 = 557;
    v32 = 2082;
    v33 = "Could not read uint backing for enum.";
    _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read uint backing for enum.", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::BOOLDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  uint8_t v11;
  char v12;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[11];
  unsigned __int8 v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v25 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 1)
  {
    v11 = v10;
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v24);
    if (v24[0])
    {
      v12 = v24[4];
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_BYTE *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, &v25) = v12;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v27 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v28 = 1024;
      v29 = 47;
      v30 = 2082;
      v31 = "Could not read BOOLean property.";
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read BOOLean property.", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v27 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v28 = 1024;
      v29 = 46;
      v30 = 2082;
      v31 = "Found BOOLean property with strange bit count.";
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found BOOLean property with strange bit count.", 46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::fixedPointNeg1to1Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int8 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v28 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)((float)v26 / 127.5) + -1.0;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 336;
      v33 = 2082;
      v34 = "Could not read fixed point -1 to 1.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point -1 to 1.", 35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 335;
      v33 = 2082;
      v34 = "Found fixed point -1 to 1 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point -1 to 1 property with strange number of bits.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::uint8Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int8 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v28 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_BYTE *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, &v28) = v26;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 141;
      v33 = 2082;
      v34 = "Could not read uint8.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read uint8.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 140;
      v33 = 2082;
      v34 = "Found uint8 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found uint8 property with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::fixedPoint0To1Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int8 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v28 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 / 255.0;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 314;
      v33 = 2082;
      v34 = "Could not read fixed point 0 to 1.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 0 to 1.", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 313;
      v33 = 2082;
      v34 = "Found fixed point 0 to 1 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 0 to 1 property with strange number of bits.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::cameraHeadingDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::rgba8Decoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int16x4_t v37;
  float v38;
  float32x2_t v39;
  float v40;
  unsigned __int8 v41;
  int16x4_t v42;
  uint8_t buf[4];
  const char *v44;
  _BYTE v45[6];
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v41 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 5;
    if (!v14)
      v15 = v13 + 4;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = v26 + v13;
        v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12)
            v30 = 0;
          else
            v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        v32 = *(_DWORD *)buf;
      }
      else
      {
        v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      v33 = bswap32(v32);
      v38 = (float)v33 / 255.0;
      v39 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      v40 = (float)HIBYTE(v33) / 255.0;
      *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v38);
      v44 = (const char *)__PAIR64__(v35, v34);
      *(_DWORD *)v45 = v36;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v42);
      v37 = v42;
      *(int16x4_t *)geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v41) = v37;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v44 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v45 = 1024;
      *(_DWORD *)&v45[2] = 67;
      v46 = 2082;
      v47 = "Could not read RGBA color.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read RGBA color.", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v44 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v45 = 1024;
      *(_DWORD *)&v45[2] = 66;
      v46 = 2082;
      v47 = "Found RGBA color with strange bit count.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found RGBA color with strange bit count.", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::angleNeg180To180Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  uint8_t v11;
  int v12;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[4];
  int v25;
  unsigned __int8 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v26 = v10;
  if (v10 == 88)
    return 1;
  if (a3 <= 8)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v29 = 1024;
      v30 = 183;
      v31 = 2082;
      v32 = "Found -180° - 180° property with too few bits.";
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found -180° - 180° property with too few bits.", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  else
  {
    v11 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (v24[0])
    {
      v12 = v25;
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = v12 - 180;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v29 = 1024;
      v30 = 184;
      v31 = 2082;
      v32 = "Could not read -180° - 180° angle.";
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read -180° - 180° angle.", 36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::cameraAlternateFramingSourceDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 5u, a4, a6);
}

uint64_t gss::cameraTypeDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::lightOriginAltitudeDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::uint9Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::uintDecoder<gss::ScenePropertyID>(a1, a2, a3, 9u, a4, a6);
}

uint64_t gss::uintDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint8_t v17;
  int v18;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _BYTE v25[4];
  int v26;
  unsigned __int8 v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = gss::idForIndex<gss::ScenePropertyID>(a5);
  v27 = v11;
  if (v11 == 88)
    return 1;
  if (a4 <= a3)
  {
    v17 = v11;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v25);
    if (!v25[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v20 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v30 = 1024;
        v31 = 89;
        v32 = 2082;
        v33 = "Could not read unsigned integer.";
        _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Could not read unsigned integer.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
      return 0;
    }
    v18 = v26;
    buf[0] = v17;
    buf[1] = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
    *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v27) = v18;
    return 1;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v12 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    v30 = 1024;
    v31 = 88;
    v32 = 2082;
    v33 = "Found unsigned integer property with too few bits.";
    _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" STYL Parse Error Here: ", 24);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Found unsigned integer property with too few bits.", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::lightOriginAzimuthDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::fixedPoint5_3Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int8 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  v28 = v10;
  if (v10 == 88)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 * 0.125;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 270;
      v33 = 2082;
      v34 = "Could not read fixed point 5.3.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 5.3.", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 269;
      v33 = 2082;
      v34 = "Found fixed point 5.3 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 5.3 property with strange number of bits.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gdc::Registry::storage<md::erq::RenderTargetToSubmit>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x38B0ED5EA8D13426;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x38B0ED5EA8D13426;
      if (*(_QWORD *)&v3 <= 0x38B0ED5EA8D13426uLL)
        v5 = 0x38B0ED5EA8D13426uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x38B0ED5EA8D13426;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x38B0ED5EA8D13426)
            {
              if (v7[2] == 0x38B0ED5EA8D13426)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x38B0ED5EA8D13426)
          {
            if (v7[2] == 0x38B0ED5EA8D13426)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::erq::RenderTargetToSubmit]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3DF8;
  *(_QWORD *)(v11 + 8) = 0x38B0ED5EA8D13426;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x38B0ED5EA8D13426uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x38B0ED5EA8D13426;
  v15[1] = "md::erq::RenderTargetToSubmit]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x38B0ED5EA8D13426, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void md::DebugDrawLogic::runBeforeLayout(uint64_t a1, int a2, int a3, md::DebugDrawContext *this)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  int8x8_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  char *v75;
  char *v76;
  char *v77;
  void *v78;
  void *v79;
  unint64_t v80;
  _QWORD *v81;
  const void *v82;
  uint64_t v83;
  int64_t v84;
  char *v85;
  size_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  _QWORD *v94;
  const void *v95;
  const void *v96;
  int64_t v97;
  char *v98;
  size_t v99;
  char *v100;
  __int128 v101;
  _QWORD *v102;
  __int128 v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  int8x8_t v110;
  uint8x8_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t *v130;
  _QWORD *v131;
  _QWORD *v132;
  int8x8_t v134;
  uint8x8_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t *v141;
  uint64_t *v142;
  int *v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t *v156;
  uint64_t v157;
  _QWORD *v159;
  int8x8_t v160;
  uint8x8_t v161;
  unint64_t v162;
  uint64_t v163;
  int *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  BOOL v181;
  unint64_t *v182;
  uint64_t *v183;
  int *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  BOOL v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t *v214;
  uint64_t *v215;
  _QWORD *v216;
  _QWORD *v217;
  unint64_t *v219;
  uint64_t *v220;
  int *v221;
  unint64_t v222;
  unint64_t *v223;
  uint64_t *v224;
  __int128 **v225;
  uint64_t v226;
  int *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  int *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  BOOL v287;
  __int128 **v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  BOOL v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  BOOL v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  BOOL v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  __int128 **v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  BOOL v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  int *v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  BOOL v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t *v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t *v432;
  char *v433;
  unint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _BYTE v438[12];
  char v439;
  void *__p;
  char *v441;
  uint64_t v442;
  unint64_t v443;
  char *v444;
  __int128 v445;
  unint64_t *v446;

  v4 = (uint64_t *)this;
  md::DebugDrawContext::clearDebugDrawContext(this);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(uint64_t **)(v6 + 384);
  v425 = *(uint64_t **)(v6 + 392);
  if (v7 != v425)
  {
    v434 = (unint64_t *)(v4 + 15);
    v432 = v4;
    while (1)
    {
      v8 = *v7;
      *(_QWORD *)v438 = 0x70F7E7915EFF4E13;
      v427 = v8;
      v428 = (uint64_t *)(v8 + 120);
      v9 = *(int8x8_t *)(v8 + 128);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8(v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v11 = 0x70F7E7915EFF4E13;
          if (*(_QWORD *)&v9 <= 0x70F7E7915EFF4E13uLL)
            v11 = 0x70F7E7915EFF4E13uLL % *(_QWORD *)&v9;
        }
        else
        {
          v11 = (*(_QWORD *)&v9 - 1) & 0x70F7E7915EFF4E13;
        }
        v12 = *(_QWORD **)(*v428 + 8 * v11);
        if (v12)
        {
          v13 = (_QWORD *)*v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              v14 = *(_QWORD *)&v9 - 1;
              while (1)
              {
                v16 = v13[1];
                if (v16 == 0x70F7E7915EFF4E13)
                {
                  if (v13[2] == 0x70F7E7915EFF4E13)
                    goto LABEL_401;
                }
                else if ((v16 & v14) != v11)
                {
                  goto LABEL_24;
                }
                v13 = (_QWORD *)*v13;
                if (!v13)
                  goto LABEL_24;
              }
            }
            do
            {
              v15 = v13[1];
              if (v15 == 0x70F7E7915EFF4E13)
              {
                if (v13[2] == 0x70F7E7915EFF4E13)
                {
LABEL_401:
                  v17 = v13[3];
                  goto LABEL_27;
                }
              }
              else
              {
                if (v15 >= *(_QWORD *)&v9)
                  v15 %= *(_QWORD *)&v9;
                if (v15 != v11)
                  break;
              }
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_24:
      v17 = operator new();
      *(_QWORD *)(v17 + 16) = "std::vector<debugComponents::TiledDrawableContainer>]";
      *(_QWORD *)(v17 + 24) = 52;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_DWORD *)(v17 + 144) = 1065353216;
      *(_OWORD *)(v17 + 152) = 0u;
      *(_OWORD *)(v17 + 168) = 0u;
      *(_QWORD *)(v17 + 184) = 0;
      *(_DWORD *)(v17 + 192) = 1065353216;
      *(_OWORD *)(v17 + 200) = 0u;
      *(_OWORD *)(v17 + 216) = 0u;
      *(_QWORD *)(v17 + 232) = 0;
      *(_DWORD *)(v17 + 240) = 1065353216;
      *(_QWORD *)v17 = &off_1E42B44E8;
      *(_QWORD *)(v17 + 8) = 0x70F7E7915EFF4E13;
      *(_QWORD *)(v17 + 248) = v427;
      v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v428, 0x70F7E7915EFF4E13uLL, v438);
      v19 = v18[3];
      v18[3] = v17;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v443 = 0x70F7E7915EFF4E13;
      v444 = "std::vector<debugComponents::TiledDrawableContainer>]";
      *(_QWORD *)&v445 = 52;
      gdc::Registry::_registerStorageDataSignals(v427, 0x70F7E7915EFF4E13, (uint64_t)&v443, (uint64_t *)(v17 + 104));
LABEL_27:
      v20 = *(_QWORD *)(v17 + 56);
      v21 = *(_QWORD *)(v17 + 64);
      if (v20 != v21)
      {
        v22 = *(_QWORD *)(v17 + 80);
        do
        {
          v23 = *(_QWORD **)v22;
          v24 = *(_QWORD **)(v22 + 8);
          if (*(_QWORD **)v22 != v24)
          {
            do
            {
              v26 = v23[58];
              for (i = v23[59]; v26 != i; v26 += 72)
                md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v4, (unint64_t)v23, v26, (int *)(v26 + 56));
              v27 = v23[61];
              for (j = v23[62]; v27 != j; v27 += 40)
                md::DebugDrawContext::addTileLocalLines(v4, (unint64_t)v23, *(__int128 **)v27, *(__int128 **)(v27 + 8), (int *)(v27 + 24));
              v23 += 64;
            }
            while (v23 != v24);
          }
          v22 += 24;
          v20 += 8;
        }
        while (v20 != v21);
      }
      *(_QWORD *)v438 = 0xDFC23109856CD9E1;
      v29 = *(int8x8_t *)(v427 + 128);
      v426 = v7;
      if (v29)
      {
        v30 = (uint8x8_t)vcnt_s8(v29);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v31 = 0xDFC23109856CD9E1;
          if (*(_QWORD *)&v29 <= 0xDFC23109856CD9E1)
            v31 = 0xDFC23109856CD9E1 % *(_QWORD *)&v29;
        }
        else
        {
          v31 = (*(_QWORD *)&v29 - 1) & 0xDFC23109856CD9E1;
        }
        v32 = *(_QWORD **)(*v428 + 8 * v31);
        if (v32)
        {
          v33 = (_QWORD *)*v32;
          if (v33)
          {
            if (v30.u32[0] < 2uLL)
            {
              v34 = *(_QWORD *)&v29 - 1;
              while (1)
              {
                v36 = v33[1];
                if (v36 == 0xDFC23109856CD9E1)
                {
                  if (v33[2] == 0xDFC23109856CD9E1)
                    goto LABEL_402;
                }
                else if ((v36 & v34) != v31)
                {
                  goto LABEL_57;
                }
                v33 = (_QWORD *)*v33;
                if (!v33)
                  goto LABEL_57;
              }
            }
            do
            {
              v35 = v33[1];
              if (v35 == 0xDFC23109856CD9E1)
              {
                if (v33[2] == 0xDFC23109856CD9E1)
                {
LABEL_402:
                  v37 = v33[3];
                  goto LABEL_60;
                }
              }
              else
              {
                if (v35 >= *(_QWORD *)&v29)
                  v35 %= *(_QWORD *)&v29;
                if (v35 != v31)
                  break;
              }
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
        }
      }
LABEL_57:
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = "debugComponents::WorldDrawableContainer]";
      *(_QWORD *)(v37 + 24) = 39;
      *(_OWORD *)(v37 + 32) = 0u;
      *(_OWORD *)(v37 + 48) = 0u;
      *(_OWORD *)(v37 + 64) = 0u;
      *(_OWORD *)(v37 + 80) = 0u;
      *(_OWORD *)(v37 + 96) = 0u;
      *(_OWORD *)(v37 + 112) = 0u;
      *(_OWORD *)(v37 + 128) = 0u;
      *(_DWORD *)(v37 + 144) = 1065353216;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_QWORD *)(v37 + 184) = 0;
      *(_DWORD *)(v37 + 192) = 1065353216;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_QWORD *)(v37 + 232) = 0;
      *(_DWORD *)(v37 + 240) = 1065353216;
      *(_QWORD *)v37 = &off_1E42B2DD8;
      *(_QWORD *)(v37 + 8) = 0xDFC23109856CD9E1;
      *(_QWORD *)(v37 + 248) = v427;
      v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v428, 0xDFC23109856CD9E1, v438);
      v39 = v38[3];
      v38[3] = v37;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v443 = 0xDFC23109856CD9E1;
      v444 = "debugComponents::WorldDrawableContainer]";
      *(_QWORD *)&v445 = 39;
      gdc::Registry::_registerStorageDataSignals(v427, 0xDFC23109856CD9E1, (uint64_t)&v443, (uint64_t *)(v37 + 104));
LABEL_60:
      v40 = *(_QWORD *)(v37 + 56);
      v429 = *(_QWORD *)(v37 + 64);
      if (v40 != v429)
      {
        v41 = *(uint64_t **)(v37 + 80);
        do
        {
          v431 = v40;
          v43 = *v41;
          v42 = v41[1];
          if (*v41 != v42)
          {
            do
            {
              md::DebugDrawContext::addWorldDebugShape(v4, v43, (int *)(v43 + 112));
              v43 += 128;
            }
            while (v43 != v42);
          }
          v45 = v41[3];
          v44 = v41[4];
          v430 = v41;
          v436 = v44;
          while (v45 != v44)
          {
            v48 = v4[13];
            v49 = v4[14];
            v50 = v48;
            if (v48 != v49)
            {
              v51 = *(_DWORD *)(v45 + 24);
              v52 = *(unsigned __int8 *)(v45 + 36);
              if (*(_BYTE *)(v45 + 32))
              {
                v50 = v4[13];
                while (v51 != *(_DWORD *)v50
                     || v52 != *(unsigned __int8 *)(v50 + 12)
                     || !*(_BYTE *)(v50 + 8)
                     || *(float *)(v45 + 28) != *(float *)(v50 + 4))
                {
                  v50 += 40;
                  if (v50 == v49)
                    goto LABEL_85;
                }
              }
              else
              {
                v50 = v4[13];
                while (v51 != *(_DWORD *)v50 || v52 != *(unsigned __int8 *)(v50 + 12) || *(_BYTE *)(v50 + 8))
                {
                  v50 += 40;
                  if (v50 == v49)
                    goto LABEL_85;
                }
              }
            }
            if (v50 == v49)
            {
              v51 = *(_DWORD *)(v45 + 24);
LABEL_85:
              *(_DWORD *)v438 = v51;
              *(_QWORD *)&v438[4] = *(_QWORD *)(v45 + 28);
              v439 = *(_BYTE *)(v45 + 36);
              __p = 0;
              v441 = 0;
              v442 = 0;
              if (v48 == v49)
              {
                v50 = v48;
              }
              else if (v438[8])
              {
                v50 = v48;
                while (v51 != *(_DWORD *)v50
                     || v439 != *(_BYTE *)(v50 + 12)
                     || !*(_BYTE *)(v50 + 8)
                     || *(float *)&v438[4] != *(float *)(v50 + 4))
                {
                  v50 += 40;
                  if (v50 == v49)
                    goto LABEL_96;
                }
              }
              else
              {
                v50 = v48;
                while (v51 != *(_DWORD *)v50 || v439 != *(_BYTE *)(v50 + 12) || *(_BYTE *)(v50 + 8))
                {
                  v50 += 40;
                  if (v50 == v49)
                    goto LABEL_96;
                }
              }
              if (v50 == v49)
              {
LABEL_96:
                if (v49 >= *v434)
                {
                  v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v48) >> 3);
                  if (v54 + 1 > 0x666666666666666)
                    abort();
                  v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v434 - v48) >> 3);
                  v56 = 2 * v55;
                  if (2 * v55 <= v54 + 1)
                    v56 = v54 + 1;
                  if (v55 >= 0x333333333333333)
                    v57 = 0x666666666666666;
                  else
                    v57 = v56;
                  v446 = v434;
                  if (v57)
                  {
                    if (v57 > 0x666666666666666)
                      goto LABEL_556;
                    v58 = (char *)operator new(40 * v57);
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = &v58[40 * v54];
                  v443 = (unint64_t)v58;
                  v444 = v59;
                  *(_QWORD *)&v445 = v59;
                  *((_QWORD *)&v445 + 1) = &v58[40 * v57];
                  *(_DWORD *)v59 = v51;
                  *(_QWORD *)(v59 + 4) = *(_QWORD *)&v438[4];
                  v59[12] = v439;
                  *((_QWORD *)v59 + 3) = 0;
                  *((_QWORD *)v59 + 4) = 0;
                  *((_QWORD *)v59 + 2) = 0;
                  std::vector<std::vector<gm::LineSegment<float,3>>>::__init_with_size[abi:nn180100]<std::vector<gm::LineSegment<float,3>>*,std::vector<gm::LineSegment<float,3>>*>((_QWORD *)v59 + 2, 0, 0, 0);
                  v60 = v444;
                  v61 = v445 + 40;
                  v62 = (char *)v4[13];
                  v63 = (char *)v4[14];
                  if (v63 == v62)
                  {
                    v4[13] = (uint64_t)v444;
                    v4[14] = v61;
                    v4[15] = *((_QWORD *)&v445 + 1);
                  }
                  else
                  {
                    v64 = 0;
                    do
                    {
                      v65 = &v60[v64];
                      v66 = &v63[v64];
                      *((_DWORD *)v65 - 10) = *(_DWORD *)&v63[v64 - 40];
                      v67 = *(_QWORD *)&v63[v64 - 36];
                      *(v65 - 28) = v63[v64 - 28];
                      *(_QWORD *)(v65 - 36) = v67;
                      *((_QWORD *)v65 - 2) = 0;
                      *((_QWORD *)v65 - 1) = 0;
                      *((_QWORD *)v65 - 3) = 0;
                      *(_OWORD *)(v65 - 24) = *(_OWORD *)&v63[v64 - 24];
                      *((_QWORD *)v65 - 1) = *(_QWORD *)&v63[v64 - 8];
                      *((_QWORD *)v66 - 3) = 0;
                      *((_QWORD *)v66 - 2) = 0;
                      *((_QWORD *)v66 - 1) = 0;
                      v64 -= 40;
                    }
                    while (&v63[v64] != v62);
                    v63 = (char *)v4[13];
                    v68 = (char *)v4[14];
                    v4[13] = (uint64_t)&v60[v64];
                    v4[14] = v61;
                    v4[15] = *((_QWORD *)&v445 + 1);
                    while (v68 != v63)
                    {
                      v70 = *((_QWORD *)v68 - 3);
                      if (v70)
                      {
                        v71 = *((_QWORD *)v68 - 2);
                        v69 = (void *)*((_QWORD *)v68 - 3);
                        if (v71 != v70)
                        {
                          v72 = *((_QWORD *)v68 - 2);
                          do
                          {
                            v74 = *(void **)(v72 - 24);
                            v72 -= 24;
                            v73 = v74;
                            if (v74)
                            {
                              *(_QWORD *)(v71 - 16) = v73;
                              operator delete(v73);
                            }
                            v71 = v72;
                          }
                          while (v72 != v70);
                          v69 = (void *)*((_QWORD *)v68 - 3);
                        }
                        *((_QWORD *)v68 - 2) = v70;
                        operator delete(v69);
                      }
                      v68 -= 40;
                    }
                  }
                  if (v63)
                    operator delete(v63);
                  v75 = (char *)__p;
                  v4[14] = v61;
                  v50 = v61 - 40;
                  if (v75)
                  {
                    v76 = v441;
                    if (v441 != v75)
                    {
                      v77 = v441;
                      do
                      {
                        v79 = (void *)*((_QWORD *)v77 - 3);
                        v77 -= 24;
                        v78 = v79;
                        if (v79)
                        {
                          *((_QWORD *)v76 - 2) = v78;
                          operator delete(v78);
                        }
                        v76 = v77;
                      }
                      while (v77 != v75);
                    }
                    v441 = v75;
                    operator delete(v75);
                  }
                }
                else
                {
                  *(_DWORD *)v49 = v51;
                  v53 = *(_QWORD *)&v438[4];
                  *(_BYTE *)(v49 + 12) = v439;
                  *(_QWORD *)(v49 + 4) = v53;
                  *(_QWORD *)(v49 + 24) = 0;
                  *(_QWORD *)(v49 + 32) = 0;
                  *(_QWORD *)(v49 + 16) = 0;
                  std::vector<std::vector<gm::LineSegment<float,3>>>::__init_with_size[abi:nn180100]<std::vector<gm::LineSegment<float,3>>*,std::vector<gm::LineSegment<float,3>>*>((_QWORD *)(v49 + 16), 0, 0, 0);
                  v4[14] = v49 + 40;
                  v50 = v49;
                }
              }
            }
            v80 = *(_QWORD *)(v50 + 32);
            v81 = *(_QWORD **)(v50 + 24);
            if ((unint64_t)v81 >= v80)
            {
              v87 = *(_QWORD **)(v50 + 16);
              v88 = 0xAAAAAAAAAAAAAAABLL * (v81 - v87) + 1;
              if (v88 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - (_QWORD)v87) >> 3);
              if (2 * v89 > v88)
                v88 = 2 * v89;
              if (v89 >= 0x555555555555555)
                v90 = 0xAAAAAAAAAAAAAAALL;
              else
                v90 = v88;
              v446 = (unint64_t *)(v50 + 32);
              if (v90)
              {
                if (v90 > 0xAAAAAAAAAAAAAAALL)
LABEL_556:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v91 = (char *)operator new(24 * v90);
              }
              else
              {
                v91 = 0;
              }
              v92 = &v91[8 * (v81 - v87)];
              v443 = (unint64_t)v91;
              v444 = v92;
              v93 = &v91[24 * v90];
              *(_QWORD *)&v445 = v92;
              *((_QWORD *)&v445 + 1) = v93;
              *((_QWORD *)v92 + 1) = 0;
              v94 = v92 + 8;
              *((_QWORD *)v92 + 2) = 0;
              *(_QWORD *)v92 = 0;
              v96 = *(const void **)v45;
              v95 = *(const void **)(v45 + 8);
              v435 = v45;
              v97 = (int64_t)v95 - *(_QWORD *)v45;
              if (v95 != v96)
              {
                v433 = &v91[24 * v90];
                if (0xAAAAAAAAAAAAAAABLL * (v97 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v98 = (char *)operator new(v97);
                *(_QWORD *)v92 = v98;
                *v94 = v98;
                *((_QWORD *)v92 + 2) = &v98[8 * (v97 >> 3)];
                v99 = 24 * ((v97 - 24) / 0x18uLL) + 24;
                memcpy(v98, v96, v99);
                *v94 = &v98[v99];
                v4 = v432;
                v93 = v433;
              }
              v46 = v92 + 24;
              *(_QWORD *)&v445 = v92 + 24;
              if (v81 == v87)
              {
                *(_QWORD *)(v50 + 16) = v92;
                *(_QWORD *)(v50 + 24) = v46;
                *(_QWORD *)(v50 + 32) = v93;
                v47 = v435;
                goto LABEL_163;
              }
              do
              {
                v100 = v92;
                *((_QWORD *)v92 - 2) = 0;
                *((_QWORD *)v92 - 1) = 0;
                v101 = *(_OWORD *)(v81 - 3);
                v81 -= 3;
                *(_OWORD *)(v92 - 24) = v101;
                v92 -= 24;
                *((_QWORD *)v100 - 1) = v81[2];
                *v81 = 0;
                v81[1] = 0;
                v81[2] = 0;
              }
              while (v81 != v87);
              v81 = *(_QWORD **)(v50 + 16);
              v102 = *(_QWORD **)(v50 + 24);
              v103 = v445;
              *(_QWORD *)(v50 + 16) = v92;
              *(_OWORD *)(v50 + 24) = v103;
              v46 = (_QWORD *)v103;
              v47 = v435;
              if (v102 != v81)
              {
                v104 = v102;
                do
                {
                  v106 = (void *)*(v104 - 3);
                  v104 -= 3;
                  v105 = v106;
                  if (v106)
                  {
                    *(v102 - 2) = v105;
                    operator delete(v105);
                  }
                  v102 = v104;
                }
                while (v104 != v81);
LABEL_163:
                if (!v81)
                  goto LABEL_67;
LABEL_164:
                operator delete(v81);
                goto LABEL_67;
              }
              if (v81)
                goto LABEL_164;
            }
            else
            {
              *v81 = 0;
              v81[1] = 0;
              v81[2] = 0;
              v82 = *(const void **)v45;
              v83 = v45;
              v84 = *(_QWORD *)(v45 + 8) - *(_QWORD *)v45;
              if (v84)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v84 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v85 = (char *)operator new(v84);
                *v81 = v85;
                v81[1] = v85;
                v81[2] = &v85[8 * (v84 >> 3)];
                v86 = 24 * ((v84 - 24) / 0x18uLL) + 24;
                memcpy(v85, v82, v86);
                v81[1] = &v85[v86];
              }
              v46 = v81 + 3;
              *(_QWORD *)(v50 + 24) = v81 + 3;
              v47 = v83;
            }
LABEL_67:
            *(_QWORD *)(v50 + 24) = v46;
            v45 = v47 + 40;
            v44 = v436;
          }
          v41 = v430 + 6;
          v40 = v431 + 8;
        }
        while (v431 + 8 != v429);
      }
      v107 = (_QWORD *)gdc::Registry::storage<gdc::Tiled>(v427);
      v108 = 0;
      v109 = 0xCBF29CE484222325;
      do
        v109 = 0x100000001B3 * (v109 ^ aStdStringViewG_758[v108++ + 38]);
      while (v108 != 109);
      *(_QWORD *)v438 = v109;
      v110 = *(int8x8_t *)(v427 + 128);
      if (v110)
      {
        v111 = (uint8x8_t)vcnt_s8(v110);
        v111.i16[0] = vaddlv_u8(v111);
        if (v111.u32[0] > 1uLL)
        {
          v112 = v109;
          if (*(_QWORD *)&v110 <= v109)
            v112 = v109 % *(_QWORD *)&v110;
        }
        else
        {
          v112 = (*(_QWORD *)&v110 - 1) & v109;
        }
        v113 = *(_QWORD **)(*v428 + 8 * v112);
        if (v113)
        {
          v114 = (_QWORD *)*v113;
          if (v114)
          {
            if (v111.u32[0] < 2uLL)
            {
              v115 = *(_QWORD *)&v110 - 1;
              while (1)
              {
                v117 = v114[1];
                if (v117 == v109)
                {
                  if (v114[2] == v109)
                    goto LABEL_403;
                }
                else if ((v117 & v115) != v112)
                {
                  goto LABEL_189;
                }
                v114 = (_QWORD *)*v114;
                if (!v114)
                  goto LABEL_189;
              }
            }
            do
            {
              v116 = v114[1];
              if (v116 == v109)
              {
                if (v114[2] == v109)
                {
LABEL_403:
                  v119 = (_QWORD *)v114[3];
                  goto LABEL_196;
                }
              }
              else
              {
                if (v116 >= *(_QWORD *)&v110)
                  v116 %= *(_QWORD *)&v110;
                if (v116 != v112)
                  break;
              }
              v114 = (_QWORD *)*v114;
            }
            while (v114);
          }
        }
      }
LABEL_189:
      v118 = operator new();
      v119 = (_QWORD *)v118;
      v120 = 0;
      v121 = 0xCBF29CE484222325;
      do
        v121 = 0x100000001B3 * (v121 ^ aStdStringViewG_758[v120++ + 38]);
      while (v120 != 109);
      *(_QWORD *)(v118 + 16) = "std::variant<gm::Box<float, 3>, gm::Sphere<float, 3>, geo::OrientedBox<float, 3>, geo::OrientedBox<float, 2>>]";
      *(_QWORD *)(v118 + 24) = 109;
      *(_OWORD *)(v118 + 32) = 0u;
      *(_OWORD *)(v118 + 48) = 0u;
      *(_OWORD *)(v118 + 64) = 0u;
      *(_OWORD *)(v118 + 80) = 0u;
      *(_OWORD *)(v118 + 96) = 0u;
      *(_OWORD *)(v118 + 112) = 0u;
      *(_OWORD *)(v118 + 128) = 0u;
      *(_DWORD *)(v118 + 144) = 1065353216;
      *(_OWORD *)(v118 + 152) = 0u;
      *(_OWORD *)(v118 + 168) = 0u;
      *(_QWORD *)(v118 + 184) = 0;
      *(_DWORD *)(v118 + 192) = 1065353216;
      *(_OWORD *)(v118 + 200) = 0u;
      *(_OWORD *)(v118 + 216) = 0u;
      *(_QWORD *)(v118 + 232) = 0;
      *(_DWORD *)(v118 + 240) = 1065353216;
      *(_QWORD *)(v118 + 8) = v121;
      *(_QWORD *)v118 = &off_1E42B45A8;
      *(_QWORD *)(v118 + 248) = v427;
      v122 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v428, v109, v438);
      v123 = v122[3];
      v122[3] = v119;
      if (v123)
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
      v124 = 0;
      v125 = 0xCBF29CE484222325;
      do
        v125 = 0x100000001B3 * (v125 ^ aStdStringViewG_758[v124++ + 38]);
      while (v124 != 109);
      v443 = v125;
      v444 = "std::variant<gm::Box<float, 3>, gm::Sphere<float, 3>, geo::OrientedBox<float, 3>, geo::OrientedBox<float, 2>>]";
      *(_QWORD *)&v445 = 109;
      gdc::Registry::_registerStorageDataSignals(v427, v109, (uint64_t)&v443, v119 + 13);
LABEL_196:
      v126 = gdc::Registry::storage<debugComponents::DisplayOptions>(v427);
      v127 = (_QWORD *)v126;
      v128 = v126 + 32;
      v129 = (unint64_t *)v107[7];
      v130 = (uint64_t *)v107[8];
      if (v119[8] - v119[7] >= (unint64_t)((char *)v130 - (char *)v129))
        v131 = v107 + 4;
      else
        v131 = v119 + 4;
      if (*(_QWORD *)(v126 + 64) - *(_QWORD *)(v126 + 56) >= v131[4] - v131[3])
        v132 = v131;
      else
        v132 = (_QWORD *)(v126 + 32);
      if (v107 + 4 == v132 && v129 != (unint64_t *)v130)
      {
        v137 = v107[10];
        do
        {
          v228 = *((unsigned int *)v129 + 1);
          v229 = v228 >> 7;
          v230 = v119[4];
          v231 = (v119[5] - v230) >> 3;
          if (v228 >> 7 >= v231)
            goto LABEL_329;
          v232 = *(_QWORD *)(v230 + 8 * v229);
          if (!v232)
            goto LABEL_329;
          v233 = *(unsigned __int16 *)(v232 + 2 * (v228 & 0x7F));
          v235 = v119[7];
          v234 = v119[8];
          v236 = (v234 - v235) >> 3;
          if (v236 <= v233)
            goto LABEL_329;
          v237 = v235 + 8 * v233;
          if (v237 == v234 || *(_DWORD *)(v237 + 4) != (_DWORD)v228)
            goto LABEL_329;
          v239 = v127[4];
          v240 = (v127[5] - v239) >> 3;
          if (v229 >= v240)
            goto LABEL_329;
          v241 = *(_QWORD *)(v239 + 8 * v229);
          if (!v241)
            goto LABEL_329;
          v242 = *(unsigned __int16 *)(v241 + 2 * (v228 & 0x7F));
          v244 = v127[7];
          v243 = v127[8];
          v245 = (v243 - v244) >> 3;
          if (v245 <= v242)
            goto LABEL_329;
          v246 = v244 + 8 * v242;
          if (v246 == v243 || *(_DWORD *)(v246 + 4) != (_DWORD)v228)
            goto LABEL_329;
          v248 = *v129;
          v249 = HIDWORD(*v129);
          v250 = *v129 >> 39;
          if (v250 < v231
            && (v251 = *(_QWORD *)(v230 + 8 * v250)) != 0
            && (v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(v248) & 0x7F)), v236 > v252)
            && ((v253 = v235 + 8 * v252, v253 != v234) ? (v254 = *(_DWORD *)(v253 + 4) == (_DWORD)v249) : (v254 = 0),
                v254))
          {
            v255 = v119[10] + 56 * v252;
            if (v250 >= v240)
              goto LABEL_327;
          }
          else
          {
            v255 = v119[11];
            if (v250 >= v240)
              goto LABEL_327;
          }
          v256 = *(_QWORD *)(v239 + 8 * v250);
          if (v256)
          {
            v257 = *(unsigned __int16 *)(v256 + 2 * (HIDWORD(v248) & 0x7F));
            if (v245 > v257)
            {
              v258 = v244 + 8 * v257;
              if (v258 != v243 && *(_DWORD *)(v258 + 4) == (_DWORD)v249)
              {
                v226 = v128;
                v227 = (int *)(v127[10] + 16 * v257);
                goto LABEL_328;
              }
            }
          }
LABEL_327:
          v226 = v128;
          v227 = (int *)v127[11];
LABEL_328:
          md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v432, v137, v255, v227);
          v128 = v226;
LABEL_329:
          v137 += 464;
          ++v129;
        }
        while (v129 != (unint64_t *)v130);
      }
      if (v119 + 4 == v132)
      {
        v138 = (unint64_t *)v119[7];
        v139 = (uint64_t *)v119[8];
        if (v138 != (unint64_t *)v139)
        {
          v140 = v119[10];
          do
          {
            v294 = *((unsigned int *)v138 + 1);
            v295 = v294 >> 7;
            v296 = v107[4];
            v297 = (v107[5] - v296) >> 3;
            if (v294 >> 7 < v297)
            {
              v298 = *(_QWORD *)(v296 + 8 * v295);
              if (v298)
              {
                v299 = *(unsigned __int16 *)(v298 + 2 * (v294 & 0x7F));
                v301 = v107[7];
                v300 = v107[8];
                v302 = (v300 - v301) >> 3;
                if (v302 > v299)
                {
                  v303 = v301 + 8 * v299;
                  if (v303 != v300 && *(_DWORD *)(v303 + 4) == (_DWORD)v294)
                  {
                    v305 = v127[4];
                    v306 = (v127[5] - v305) >> 3;
                    if (v295 < v306)
                    {
                      v307 = *(_QWORD *)(v305 + 8 * v295);
                      if (v307)
                      {
                        v308 = *(unsigned __int16 *)(v307 + 2 * (v294 & 0x7F));
                        v310 = v127[7];
                        v309 = v127[8];
                        v311 = (v309 - v310) >> 3;
                        if (v311 > v308)
                        {
                          v312 = v310 + 8 * v308;
                          if (v312 != v309 && *(_DWORD *)(v312 + 4) == (_DWORD)v294)
                          {
                            v314 = *v138;
                            v315 = HIDWORD(*v138);
                            v316 = *v138 >> 39;
                            if (v316 < v297
                              && (v317 = *(_QWORD *)(v296 + 8 * v316)) != 0
                              && (v318 = *(unsigned __int16 *)(v317 + 2 * (HIDWORD(v314) & 0x7F)), v302 > v318)
                              && ((v319 = v301 + 8 * v318, v319 != v300)
                                ? (v320 = *(_DWORD *)(v319 + 4) == (_DWORD)v315)
                                : (v320 = 0),
                                  v320))
                            {
                              v321 = v107[10] + 464 * v318;
                            }
                            else
                            {
                              v321 = v107[11];
                            }
                            v437 = v128;
                            if (v316 < v306
                              && (v322 = *(_QWORD *)(v305 + 8 * v316)) != 0
                              && (v323 = *(unsigned __int16 *)(v322 + 2 * (HIDWORD(v314) & 0x7F)), v311 > v323)
                              && ((v324 = v310 + 8 * v323, v324 != v309)
                                ? (v325 = *(_DWORD *)(v324 + 4) == (_DWORD)v315)
                                : (v325 = 0),
                                  v325))
                            {
                              v293 = (int *)(v127[10] + 16 * v323);
                            }
                            else
                            {
                              v293 = (int *)v127[11];
                            }
                            md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v432, v321, v140, v293);
                            v128 = v437;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v140 += 56;
            ++v138;
          }
          while (v138 != (unint64_t *)v139);
        }
      }
      if ((_QWORD *)v128 == v132)
      {
        v141 = (unint64_t *)v127[7];
        v142 = (uint64_t *)v127[8];
        if (v141 != (unint64_t *)v142)
        {
          v143 = (int *)v127[10];
          do
          {
            v327 = *((unsigned int *)v141 + 1);
            v328 = v327 >> 7;
            v329 = v107[4];
            v330 = (v107[5] - v329) >> 3;
            if (v327 >> 7 >= v330)
              goto LABEL_445;
            v331 = *(_QWORD *)(v329 + 8 * v328);
            if (!v331)
              goto LABEL_445;
            v332 = *(unsigned __int16 *)(v331 + 2 * (v327 & 0x7F));
            v334 = v107[7];
            v333 = v107[8];
            v335 = (v333 - v334) >> 3;
            if (v335 <= v332)
              goto LABEL_445;
            v336 = v334 + 8 * v332;
            if (v336 == v333 || *(_DWORD *)(v336 + 4) != (_DWORD)v327)
              goto LABEL_445;
            v338 = v119[4];
            v339 = (v119[5] - v338) >> 3;
            if (v328 >= v339)
              goto LABEL_445;
            v340 = *(_QWORD *)(v338 + 8 * v328);
            if (!v340)
              goto LABEL_445;
            v341 = *(unsigned __int16 *)(v340 + 2 * (v327 & 0x7F));
            v343 = v119[7];
            v342 = v119[8];
            v344 = (v342 - v343) >> 3;
            if (v344 <= v341)
              goto LABEL_445;
            v345 = v343 + 8 * v341;
            if (v345 == v342 || *(_DWORD *)(v345 + 4) != (_DWORD)v327)
              goto LABEL_445;
            v347 = *v141;
            v348 = HIDWORD(*v141);
            v349 = *v141 >> 39;
            if (v349 < v330
              && (v350 = *(_QWORD *)(v329 + 8 * v349)) != 0
              && (v351 = *(unsigned __int16 *)(v350 + 2 * (HIDWORD(v347) & 0x7F)), v335 > v351)
              && ((v352 = v334 + 8 * v351, v352 != v333) ? (v353 = *(_DWORD *)(v352 + 4) == (_DWORD)v348) : (v353 = 0),
                  v353))
            {
              v354 = v107[10] + 464 * v351;
              if (v349 >= v339)
                goto LABEL_443;
            }
            else
            {
              v354 = v107[11];
              if (v349 >= v339)
                goto LABEL_443;
            }
            v355 = *(_QWORD *)(v338 + 8 * v349);
            if (v355)
            {
              v356 = *(unsigned __int16 *)(v355 + 2 * (HIDWORD(v347) & 0x7F));
              if (v344 > v356)
              {
                v357 = v343 + 8 * v356;
                if (v357 != v342 && *(_DWORD *)(v357 + 4) == (_DWORD)v348)
                {
                  v326 = v119[10] + 56 * v356;
                  goto LABEL_444;
                }
              }
            }
LABEL_443:
            v326 = v119[11];
LABEL_444:
            md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v432, v354, v326, v143);
LABEL_445:
            v143 += 4;
            ++v141;
          }
          while (v141 != (unint64_t *)v142);
        }
      }
      *(_QWORD *)v438 = 0x81C954A6A37E98E1;
      v134 = *(int8x8_t *)(v427 + 128);
      if (v134)
      {
        v135 = (uint8x8_t)vcnt_s8(v134);
        v135.i16[0] = vaddlv_u8(v135);
        if (v135.u32[0] > 1uLL)
        {
          v136 = 0x81C954A6A37E98E1;
          if (*(_QWORD *)&v134 <= 0x81C954A6A37E98E1)
            v136 = 0x81C954A6A37E98E1 % *(_QWORD *)&v134;
        }
        else
        {
          v136 = (*(_QWORD *)&v134 - 1) & 0x81C954A6A37E98E1;
        }
        v144 = *(_QWORD **)(*v428 + 8 * v136);
        if (v144)
        {
          v145 = (_QWORD *)*v144;
          if (v145)
          {
            if (v135.u32[0] < 2uLL)
            {
              v146 = *(_QWORD *)&v134 - 1;
              while (1)
              {
                v148 = v145[1];
                if (v148 == 0x81C954A6A37E98E1)
                {
                  if (v145[2] == 0x81C954A6A37E98E1)
                    goto LABEL_404;
                }
                else if ((v148 & v146) != v136)
                {
                  goto LABEL_233;
                }
                v145 = (_QWORD *)*v145;
                if (!v145)
                  goto LABEL_233;
              }
            }
            do
            {
              v147 = v145[1];
              if (v147 == 0x81C954A6A37E98E1)
              {
                if (v145[2] == 0x81C954A6A37E98E1)
                {
LABEL_404:
                  v149 = v145[3];
                  goto LABEL_236;
                }
              }
              else
              {
                if (v147 >= *(_QWORD *)&v134)
                  v147 %= *(_QWORD *)&v134;
                if (v147 != v136)
                  break;
              }
              v145 = (_QWORD *)*v145;
            }
            while (v145);
          }
        }
      }
LABEL_233:
      v149 = operator new();
      *(_QWORD *)(v149 + 16) = "std::variant<gm::Box<double, 3>, gm::Sphere<double, 3>, geo::OrientedBox<double, 3>>]";
      *(_QWORD *)(v149 + 24) = 84;
      *(_OWORD *)(v149 + 32) = 0u;
      *(_OWORD *)(v149 + 48) = 0u;
      *(_OWORD *)(v149 + 64) = 0u;
      *(_OWORD *)(v149 + 80) = 0u;
      *(_OWORD *)(v149 + 96) = 0u;
      *(_OWORD *)(v149 + 112) = 0u;
      *(_OWORD *)(v149 + 128) = 0u;
      *(_DWORD *)(v149 + 144) = 1065353216;
      *(_OWORD *)(v149 + 152) = 0u;
      *(_OWORD *)(v149 + 168) = 0u;
      *(_QWORD *)(v149 + 184) = 0;
      *(_DWORD *)(v149 + 192) = 1065353216;
      *(_OWORD *)(v149 + 200) = 0u;
      *(_OWORD *)(v149 + 216) = 0u;
      *(_QWORD *)(v149 + 232) = 0;
      *(_DWORD *)(v149 + 240) = 1065353216;
      *(_QWORD *)v149 = &off_1E42B4578;
      *(_QWORD *)(v149 + 8) = 0x81C954A6A37E98E1;
      *(_QWORD *)(v149 + 248) = v427;
      v150 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v428, 0x81C954A6A37E98E1, v438);
      v151 = v150[3];
      v150[3] = v149;
      if (v151)
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
      v443 = 0x81C954A6A37E98E1;
      v444 = "std::variant<gm::Box<double, 3>, gm::Sphere<double, 3>, geo::OrientedBox<double, 3>>]";
      *(_QWORD *)&v445 = 84;
      gdc::Registry::_registerStorageDataSignals(v427, 0x81C954A6A37E98E1, (uint64_t)&v443, (uint64_t *)(v149 + 104));
LABEL_236:
      v152 = gdc::Registry::storage<debugComponents::DisplayOptions>(v427);
      v153 = (_QWORD *)v152;
      v154 = v152 + 32;
      v156 = *(unint64_t **)(v149 + 56);
      v155 = *(uint64_t **)(v149 + 64);
      if (*(_QWORD *)(v152 + 64) - *(_QWORD *)(v152 + 56) >= (unint64_t)((char *)v155 - (char *)v156))
        v157 = v149 + 32;
      else
        v157 = v152 + 32;
      if (v149 + 32 == v157 && v156 != (unint64_t *)v155)
      {
        v163 = *(_QWORD *)(v149 + 80);
        do
        {
          v165 = *((unsigned int *)v156 + 1);
          v166 = v153[4];
          v167 = (v153[5] - v166) >> 3;
          if (v165 >> 7 < v167)
          {
            v168 = *(_QWORD *)(v166 + 8 * (v165 >> 7));
            if (v168)
            {
              v169 = *(unsigned __int16 *)(v168 + 2 * (v165 & 0x7F));
              v171 = v153[7];
              v170 = v153[8];
              v172 = (v170 - v171) >> 3;
              if (v172 > v169)
              {
                v173 = v171 + 8 * v169;
                if (v173 != v170 && *(_DWORD *)(v173 + 4) == (_DWORD)v165)
                {
                  v175 = *v156;
                  v176 = *v156 >> 39;
                  if (v176 < v167
                    && (v177 = *(_QWORD *)(v166 + 8 * v176)) != 0
                    && (v178 = *(unsigned __int16 *)(v177 + 2 * (HIDWORD(v175) & 0x7F)), v172 > v178)
                    && ((v179 = HIDWORD(v175), v180 = v171 + 8 * v178, v180 != v170)
                      ? (v181 = *(_DWORD *)(v180 + 4) == (_DWORD)v179)
                      : (v181 = 0),
                        v181))
                  {
                    v164 = (int *)(v153[10] + 16 * v178);
                  }
                  else
                  {
                    v164 = (int *)v153[11];
                  }
                  md::DebugDrawContext::addWorldDebugShape(v432, v163, v164);
                }
              }
            }
          }
          v163 += 112;
          ++v156;
        }
        while (v156 != (unint64_t *)v155);
      }
      if (v154 == v157)
      {
        v182 = (unint64_t *)v153[7];
        v183 = (uint64_t *)v153[8];
        if (v182 != (unint64_t *)v183)
        {
          v184 = (int *)v153[10];
          do
          {
            v186 = *((unsigned int *)v182 + 1);
            v187 = *(_QWORD *)(v149 + 32);
            v188 = (*(_QWORD *)(v149 + 40) - v187) >> 3;
            if (v186 >> 7 < v188)
            {
              v189 = *(_QWORD *)(v187 + 8 * (v186 >> 7));
              if (v189)
              {
                v190 = *(unsigned __int16 *)(v189 + 2 * (v186 & 0x7F));
                v192 = *(_QWORD *)(v149 + 56);
                v191 = *(_QWORD *)(v149 + 64);
                v193 = (v191 - v192) >> 3;
                if (v193 > v190)
                {
                  v194 = v192 + 8 * v190;
                  if (v194 != v191 && *(_DWORD *)(v194 + 4) == (_DWORD)v186)
                  {
                    v196 = *v182;
                    v197 = *v182 >> 39;
                    if (v197 < v188
                      && (v198 = *(_QWORD *)(v187 + 8 * v197)) != 0
                      && (v199 = *(unsigned __int16 *)(v198 + 2 * (HIDWORD(v196) & 0x7F)), v193 > v199)
                      && ((v200 = HIDWORD(v196), v201 = v192 + 8 * v199, v201 != v191)
                        ? (v202 = *(_DWORD *)(v201 + 4) == (_DWORD)v200)
                        : (v202 = 0),
                          v202))
                    {
                      v185 = *(_QWORD *)(v149 + 80) + 112 * v199;
                    }
                    else
                    {
                      v185 = *(_QWORD *)(v149 + 88);
                    }
                    md::DebugDrawContext::addWorldDebugShape(v432, v185, v184);
                  }
                }
              }
            }
            v184 += 4;
            ++v182;
          }
          while (v182 != (unint64_t *)v183);
        }
      }
      v159 = (_QWORD *)gdc::Registry::storage<gdc::Tiled>(v427);
      *(_QWORD *)v438 = 0x8A75A62DDED2878DLL;
      v160 = *(int8x8_t *)(v427 + 128);
      if (v160)
      {
        v161 = (uint8x8_t)vcnt_s8(v160);
        v161.i16[0] = vaddlv_u8(v161);
        if (v161.u32[0] > 1uLL)
        {
          v162 = 0x8A75A62DDED2878DLL;
          if (*(_QWORD *)&v160 <= 0x8A75A62DDED2878DLL)
            v162 = 0x8A75A62DDED2878DLL % *(_QWORD *)&v160;
        }
        else
        {
          v162 = (*(_QWORD *)&v160 - 1) & 0x8A75A62DDED2878DLL;
        }
        v203 = *(_QWORD **)(*v428 + 8 * v162);
        if (v203)
        {
          v204 = (_QWORD *)*v203;
          if (v204)
          {
            if (v161.u32[0] < 2uLL)
            {
              v205 = *(_QWORD *)&v160 - 1;
              while (1)
              {
                v207 = v204[1];
                if (v207 == 0x8A75A62DDED2878DLL)
                {
                  if (v204[2] == 0x8A75A62DDED2878DLL)
                    goto LABEL_405;
                }
                else if ((v207 & v205) != v162)
                {
                  goto LABEL_307;
                }
                v204 = (_QWORD *)*v204;
                if (!v204)
                  goto LABEL_307;
              }
            }
            do
            {
              v206 = v204[1];
              if (v206 == 0x8A75A62DDED2878DLL)
              {
                if (v204[2] == 0x8A75A62DDED2878DLL)
                {
LABEL_405:
                  v208 = v204[3];
                  goto LABEL_310;
                }
              }
              else
              {
                if (v206 >= *(_QWORD *)&v160)
                  v206 %= *(_QWORD *)&v160;
                if (v206 != v162)
                  break;
              }
              v204 = (_QWORD *)*v204;
            }
            while (v204);
          }
        }
      }
LABEL_307:
      v208 = operator new();
      *(_QWORD *)(v208 + 16) = "std::vector<gm::LineSegment<float, 3>>]";
      *(_QWORD *)(v208 + 24) = 38;
      *(_OWORD *)(v208 + 32) = 0u;
      *(_OWORD *)(v208 + 48) = 0u;
      *(_OWORD *)(v208 + 64) = 0u;
      *(_OWORD *)(v208 + 80) = 0u;
      *(_OWORD *)(v208 + 96) = 0u;
      *(_OWORD *)(v208 + 112) = 0u;
      *(_OWORD *)(v208 + 128) = 0u;
      *(_DWORD *)(v208 + 144) = 1065353216;
      *(_OWORD *)(v208 + 152) = 0u;
      *(_OWORD *)(v208 + 168) = 0u;
      *(_QWORD *)(v208 + 184) = 0;
      *(_DWORD *)(v208 + 192) = 1065353216;
      *(_OWORD *)(v208 + 200) = 0u;
      *(_OWORD *)(v208 + 216) = 0u;
      *(_QWORD *)(v208 + 232) = 0;
      *(_DWORD *)(v208 + 240) = 1065353216;
      *(_QWORD *)v208 = &off_1E42B4518;
      *(_QWORD *)(v208 + 8) = 0x8A75A62DDED2878DLL;
      *(_QWORD *)(v208 + 248) = v427;
      v209 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v428, 0x8A75A62DDED2878DLL, v438);
      v210 = v209[3];
      v209[3] = v208;
      if (v210)
        (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
      v443 = 0x8A75A62DDED2878DLL;
      v444 = "std::vector<gm::LineSegment<float, 3>>]";
      *(_QWORD *)&v445 = 38;
      gdc::Registry::_registerStorageDataSignals(v427, 0x8A75A62DDED2878DLL, (uint64_t)&v443, (uint64_t *)(v208 + 104));
LABEL_310:
      v211 = gdc::Registry::storage<debugComponents::DisplayOptions>(v427);
      v212 = (_QWORD *)v211;
      v213 = v211 + 32;
      v214 = (unint64_t *)v159[7];
      v215 = (uint64_t *)v159[8];
      if (*(_QWORD *)(v208 + 64) - *(_QWORD *)(v208 + 56) >= (unint64_t)((char *)v215 - (char *)v214))
        v216 = v159 + 4;
      else
        v216 = (_QWORD *)(v208 + 32);
      if (*(_QWORD *)(v211 + 64) - *(_QWORD *)(v211 + 56) >= v216[4] - v216[3])
        v217 = v216;
      else
        v217 = (_QWORD *)(v211 + 32);
      if (v159 + 4 == v217 && v214 != (unint64_t *)v215)
      {
        v222 = v159[10];
        do
        {
          v261 = *((unsigned int *)v214 + 1);
          v262 = v261 >> 7;
          v263 = *(_QWORD *)(v208 + 32);
          v264 = (*(_QWORD *)(v208 + 40) - v263) >> 3;
          if (v261 >> 7 >= v264)
            goto LABEL_366;
          v265 = *(_QWORD *)(v263 + 8 * v262);
          if (!v265)
            goto LABEL_366;
          v266 = *(unsigned __int16 *)(v265 + 2 * (v261 & 0x7F));
          v268 = *(_QWORD *)(v208 + 56);
          v267 = *(_QWORD *)(v208 + 64);
          v269 = (v267 - v268) >> 3;
          if (v269 <= v266)
            goto LABEL_366;
          v270 = v268 + 8 * v266;
          if (v270 == v267 || *(_DWORD *)(v270 + 4) != (_DWORD)v261)
            goto LABEL_366;
          v272 = v212[4];
          v273 = (v212[5] - v272) >> 3;
          if (v262 >= v273)
            goto LABEL_366;
          v274 = *(_QWORD *)(v272 + 8 * v262);
          if (!v274)
            goto LABEL_366;
          v275 = *(unsigned __int16 *)(v274 + 2 * (v261 & 0x7F));
          v277 = v212[7];
          v276 = v212[8];
          v278 = (v276 - v277) >> 3;
          if (v278 <= v275)
            goto LABEL_366;
          v279 = v277 + 8 * v275;
          if (v279 == v276 || *(_DWORD *)(v279 + 4) != (_DWORD)v261)
            goto LABEL_366;
          v281 = *v214;
          v282 = HIDWORD(*v214);
          v283 = *v214 >> 39;
          if (v283 < v264
            && (v284 = *(_QWORD *)(v263 + 8 * v283)) != 0
            && (v285 = *(unsigned __int16 *)(v284 + 2 * (HIDWORD(v281) & 0x7F)), v269 > v285)
            && ((v286 = v268 + 8 * v285, v286 != v267) ? (v287 = *(_DWORD *)(v286 + 4) == (_DWORD)v282) : (v287 = 0),
                v287))
          {
            v288 = (__int128 **)(*(_QWORD *)(v208 + 80) + 24 * v285);
            if (v283 >= v273)
              goto LABEL_364;
          }
          else
          {
            v288 = *(__int128 ***)(v208 + 88);
            if (v283 >= v273)
              goto LABEL_364;
          }
          v289 = *(_QWORD *)(v272 + 8 * v283);
          if (v289)
          {
            v290 = *(unsigned __int16 *)(v289 + 2 * (HIDWORD(v281) & 0x7F));
            if (v278 > v290)
            {
              v291 = v277 + 8 * v290;
              if (v291 != v276 && *(_DWORD *)(v291 + 4) == (_DWORD)v282)
              {
                v260 = (int *)(v212[10] + 16 * v290);
                goto LABEL_365;
              }
            }
          }
LABEL_364:
          v260 = (int *)v212[11];
LABEL_365:
          md::DebugDrawContext::addTileLocalLines(v432, v222, *v288, v288[1], v260);
LABEL_366:
          v222 += 464;
          ++v214;
        }
        while (v214 != (unint64_t *)v215);
      }
      v4 = v432;
      if ((_QWORD *)(v208 + 32) == v217)
      {
        v223 = *(unint64_t **)(v208 + 56);
        v224 = *(uint64_t **)(v208 + 64);
        if (v223 != (unint64_t *)v224)
        {
          v225 = (__int128 **)(*(_QWORD *)(v208 + 80) + 8);
          do
          {
            v393 = *((unsigned int *)v223 + 1);
            v394 = v393 >> 7;
            v395 = v159[4];
            v396 = (v159[5] - v395) >> 3;
            if (v393 >> 7 >= v396)
              goto LABEL_519;
            v397 = *(_QWORD *)(v395 + 8 * v394);
            if (!v397)
              goto LABEL_519;
            v398 = *(unsigned __int16 *)(v397 + 2 * (v393 & 0x7F));
            v400 = v159[7];
            v399 = v159[8];
            v401 = (v399 - v400) >> 3;
            if (v401 <= v398)
              goto LABEL_519;
            v402 = v400 + 8 * v398;
            if (v402 == v399 || *(_DWORD *)(v402 + 4) != (_DWORD)v393)
              goto LABEL_519;
            v404 = v212[4];
            v405 = (v212[5] - v404) >> 3;
            if (v394 >= v405)
              goto LABEL_519;
            v406 = *(_QWORD *)(v404 + 8 * v394);
            if (!v406)
              goto LABEL_519;
            v407 = *(unsigned __int16 *)(v406 + 2 * (v393 & 0x7F));
            v409 = v212[7];
            v408 = v212[8];
            v410 = (v408 - v409) >> 3;
            if (v410 <= v407)
              goto LABEL_519;
            v411 = v409 + 8 * v407;
            if (v411 == v408 || *(_DWORD *)(v411 + 4) != (_DWORD)v393)
              goto LABEL_519;
            v413 = *v223;
            v414 = HIDWORD(*v223);
            v415 = *v223 >> 39;
            if (v415 < v396
              && (v416 = *(_QWORD *)(v395 + 8 * v415)) != 0
              && (v417 = *(unsigned __int16 *)(v416 + 2 * (HIDWORD(v413) & 0x7F)), v401 > v417)
              && ((v418 = v400 + 8 * v417, v418 != v399) ? (v419 = *(_DWORD *)(v418 + 4) == (_DWORD)v414) : (v419 = 0),
                  v419))
            {
              v420 = v159[10] + 464 * v417;
              if (v415 >= v405)
                goto LABEL_517;
            }
            else
            {
              v420 = v159[11];
              if (v415 >= v405)
                goto LABEL_517;
            }
            v421 = *(_QWORD *)(v404 + 8 * v415);
            if (v421)
            {
              v422 = *(unsigned __int16 *)(v421 + 2 * (HIDWORD(v413) & 0x7F));
              if (v410 > v422)
              {
                v423 = v409 + 8 * v422;
                if (v423 != v408 && *(_DWORD *)(v423 + 4) == (_DWORD)v414)
                {
                  v392 = (int *)(v212[10] + 16 * v422);
                  goto LABEL_518;
                }
              }
            }
LABEL_517:
            v392 = (int *)v212[11];
LABEL_518:
            md::DebugDrawContext::addTileLocalLines(v432, v420, *(v225 - 1), *v225, v392);
LABEL_519:
            ++v223;
            v225 += 3;
          }
          while (v223 != (unint64_t *)v224);
        }
      }
      if ((_QWORD *)v213 == v217)
      {
        v219 = (unint64_t *)v212[7];
        v220 = (uint64_t *)v212[8];
        if (v219 != (unint64_t *)v220)
          break;
      }
LABEL_3:
      v7 = v426 + 1;
      if (v426 + 1 == v425)
        return;
    }
    v221 = (int *)v212[10];
    while (1)
    {
      v360 = *((unsigned int *)v219 + 1);
      v361 = v360 >> 7;
      v362 = v159[4];
      v363 = (v159[5] - v362) >> 3;
      if (v360 >> 7 >= v363)
        goto LABEL_482;
      v364 = *(_QWORD *)(v362 + 8 * v361);
      if (!v364)
        goto LABEL_482;
      v365 = *(unsigned __int16 *)(v364 + 2 * (v360 & 0x7F));
      v367 = v159[7];
      v366 = v159[8];
      v368 = (v366 - v367) >> 3;
      if (v368 <= v365)
        goto LABEL_482;
      v369 = v367 + 8 * v365;
      if (v369 == v366 || *(_DWORD *)(v369 + 4) != (_DWORD)v360)
        goto LABEL_482;
      v371 = *(_QWORD *)(v208 + 32);
      v372 = (*(_QWORD *)(v208 + 40) - v371) >> 3;
      if (v361 >= v372)
        goto LABEL_482;
      v373 = *(_QWORD *)(v371 + 8 * v361);
      if (!v373)
        goto LABEL_482;
      v374 = *(unsigned __int16 *)(v373 + 2 * (v360 & 0x7F));
      v376 = *(_QWORD *)(v208 + 56);
      v375 = *(_QWORD *)(v208 + 64);
      v377 = (v375 - v376) >> 3;
      if (v377 <= v374)
        goto LABEL_482;
      v378 = v376 + 8 * v374;
      if (v378 == v375 || *(_DWORD *)(v378 + 4) != (_DWORD)v360)
        goto LABEL_482;
      v380 = *v219;
      v381 = HIDWORD(*v219);
      v382 = *v219 >> 39;
      if (v382 < v363
        && (v383 = *(_QWORD *)(v362 + 8 * v382)) != 0
        && (v384 = *(unsigned __int16 *)(v383 + 2 * (HIDWORD(v380) & 0x7F)), v368 > v384)
        && ((v385 = v367 + 8 * v384, v385 != v366) ? (v386 = *(_DWORD *)(v385 + 4) == (_DWORD)v381) : (v386 = 0), v386))
      {
        v387 = v159[10] + 464 * v384;
        if (v382 >= v372)
          goto LABEL_480;
      }
      else
      {
        v387 = v159[11];
        if (v382 >= v372)
          goto LABEL_480;
      }
      v388 = *(_QWORD *)(v371 + 8 * v382);
      if (v388)
      {
        v389 = *(unsigned __int16 *)(v388 + 2 * (HIDWORD(v380) & 0x7F));
        if (v377 > v389)
        {
          v390 = v376 + 8 * v389;
          if (v390 != v375 && *(_DWORD *)(v390 + 4) == (_DWORD)v381)
          {
            v359 = (__int128 **)(*(_QWORD *)(v208 + 80) + 24 * v389);
            goto LABEL_481;
          }
        }
      }
LABEL_480:
      v359 = *(__int128 ***)(v208 + 88);
LABEL_481:
      md::DebugDrawContext::addTileLocalLines(v432, v387, *v359, v359[1], v221);
LABEL_482:
      v221 += 4;
      if (++v219 == (unint64_t *)v220)
        goto LABEL_3;
    }
  }
}

void sub_19F1D93B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19F1D93F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  std::pair<debugComponents::DisplayOptions,std::vector<std::vector<gm::LineSegment<float,3>>>>::~pair((uint64_t)&a26);
  std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](&a23);
  _Unwind_Resume(a1);
}

void sub_19F1D9430(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  _Unwind_Resume(a1);
}

void sub_19F1D9438(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  _Unwind_Resume(a1);
}

void sub_19F1D9440(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<arComponents::CustomBoxCreateDesc>::~__split_buffer(v1 - 128);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F1D98B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<debugComponents::DisplayOptions>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6FDCAC4BC08520E8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6FDCAC4BC08520E8;
      if (*(_QWORD *)&v3 <= 0x6FDCAC4BC08520E8uLL)
        v5 = 0x6FDCAC4BC08520E8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6FDCAC4BC08520E8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6FDCAC4BC08520E8)
            {
              if (v7[2] == 0x6FDCAC4BC08520E8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6FDCAC4BC08520E8)
          {
            if (v7[2] == 0x6FDCAC4BC08520E8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "debugComponents::DisplayOptions]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2DA8;
  *(_QWORD *)(v11 + 8) = 0x6FDCAC4BC08520E8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6FDCAC4BC08520E8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6FDCAC4BC08520E8;
  v15[1] = "debugComponents::DisplayOptions]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6FDCAC4BC08520E8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1D9AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::Tiled>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE81DE923CB05AA7DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE81DE923CB05AA7DLL;
      if (*(_QWORD *)&v3 <= 0xE81DE923CB05AA7DLL)
        v5 = 0xE81DE923CB05AA7DLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE81DE923CB05AA7DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE81DE923CB05AA7DLL)
            {
              if (v7[2] == 0xE81DE923CB05AA7DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE81DE923CB05AA7DLL)
          {
            if (v7[2] == 0xE81DE923CB05AA7DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::Tiled]";
  *(_QWORD *)(v11 + 24) = 10;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3E88;
  *(_QWORD *)(v11 + 8) = 0xE81DE923CB05AA7DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE81DE923CB05AA7DLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE81DE923CB05AA7DLL;
  v15[1] = "gdc::Tiled]";
  v15[2] = 10;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE81DE923CB05AA7DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1D9D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::DebugDrawContext::clearDebugDrawContext(md::DebugDrawContext *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t k;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t m;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char v37;
  char v38;

  if (*((_QWORD *)this + 8))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 7);
    if (v2)
    {
      do
      {
        v4 = (_QWORD *)*v2;
        v5 = v2[3];
        if (v5)
        {
          v6 = v2[4];
          v3 = (void *)v2[3];
          if (v6 != v5)
          {
            do
            {
              v8 = *(_QWORD *)(v6 - 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v6 - 16);
                v7 = *(void **)(v6 - 24);
                if (v9 != v8)
                {
                  do
                  {
                    v10 = v9 - 56;
                    v11 = *(unsigned int *)(v9 - 4);
                    if ((_DWORD)v11 != -1)
                      ((void (*)(char *, uint64_t))off_1E42F68A0[v11])(&v38, v9 - 56);
                    *(_DWORD *)(v9 - 4) = -1;
                    v9 -= 56;
                  }
                  while (v10 != v8);
                  v7 = *(void **)(v6 - 24);
                }
                *(_QWORD *)(v6 - 16) = v8;
                operator delete(v7);
              }
              v6 -= 40;
            }
            while (v6 != v5);
            v3 = (void *)v2[3];
          }
          v2[4] = v5;
          operator delete(v3);
        }
        operator delete(v2);
        v2 = v4;
      }
      while (v4);
    }
    *((_QWORD *)this + 7) = 0;
    v12 = *((_QWORD *)this + 6);
    if (v12)
    {
      for (i = 0; i != v12; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  if (*((_QWORD *)this + 3))
  {
    v14 = (_QWORD *)*((_QWORD *)this + 2);
    if (v14)
    {
      do
      {
        v25 = (_QWORD *)*v14;
        v26 = v14[3];
        if (v26)
        {
          v27 = v14[4];
          v24 = (void *)v14[3];
          if (v27 != v26)
          {
            do
            {
              v28 = *(void **)(v27 - 24);
              if (v28)
              {
                *(_QWORD *)(v27 - 16) = v28;
                operator delete(v28);
              }
              v27 -= 40;
            }
            while (v27 != v26);
            v24 = (void *)v14[3];
          }
          v14[4] = v26;
          operator delete(v24);
        }
        operator delete(v14);
        v14 = v25;
      }
      while (v25);
    }
    *((_QWORD *)this + 2) = 0;
    v15 = *((_QWORD *)this + 1);
    if (v15)
    {
      for (j = 0; j != v15; ++j)
        *(_QWORD *)(*(_QWORD *)this + 8 * j) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  v17 = *((_QWORD *)this + 10);
  for (k = *((_QWORD *)this + 11); k != v17; k -= 40)
  {
    v20 = *(_QWORD *)(k - 24);
    if (v20)
    {
      v21 = *(_QWORD *)(k - 16);
      v19 = *(void **)(k - 24);
      if (v21 != v20)
      {
        do
        {
          v22 = v21 - 112;
          v23 = *(unsigned int *)(v21 - 8);
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, uint64_t))off_1E42F6900[v23])(&v37, v21 - 112);
          *(_DWORD *)(v21 - 8) = -1;
          v21 -= 112;
        }
        while (v22 != v20);
        v19 = *(void **)(k - 24);
      }
      *(_QWORD *)(k - 16) = v20;
      operator delete(v19);
    }
  }
  *((_QWORD *)this + 11) = v17;
  v29 = *((_QWORD *)this + 13);
  for (m = *((_QWORD *)this + 14); m != v29; m -= 40)
  {
    v32 = *(_QWORD *)(m - 24);
    if (v32)
    {
      v33 = *(_QWORD *)(m - 16);
      v31 = *(void **)(m - 24);
      if (v33 != v32)
      {
        v34 = *(_QWORD *)(m - 16);
        do
        {
          v36 = *(void **)(v34 - 24);
          v34 -= 24;
          v35 = v36;
          if (v36)
          {
            *(_QWORD *)(v33 - 16) = v35;
            operator delete(v35);
          }
          v33 = v34;
        }
        while (v34 != v32);
        v31 = *(void **)(m - 24);
      }
      *(_QWORD *)(m - 16) = v32;
      operator delete(v31);
    }
  }
  *((_QWORD *)this + 14) = v29;
}

uint64_t gdc::Registry::storage<md::erq::RenderQueueToSubmit>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x17922920A08D336CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x17922920A08D336CLL;
      if (*(_QWORD *)&v3 <= 0x17922920A08D336CuLL)
        v5 = 0x17922920A08D336CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x17922920A08D336CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x17922920A08D336CLL)
            {
              if (v7[2] == 0x17922920A08D336CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x17922920A08D336CLL)
          {
            if (v7[2] == 0x17922920A08D336CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::erq::RenderQueueToSubmit]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3DC8;
  *(_QWORD *)(v11 + 8) = 0x17922920A08D336CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x17922920A08D336CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x17922920A08D336CLL;
  v15[1] = "md::erq::RenderQueueToSubmit]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x17922920A08D336CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

md::PointLabelFeature *md::PointLabelFeature::PointLabelFeature(md::PointLabelFeature *this, GeoCodecsPointFeature *a2, const md::LabelFeatureCreationParams *a3)
{
  float *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  __int128 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int *v34;
  int v35;
  char v36;
  unint64_t v37;
  int *v38;
  int v39;
  char v40;
  BOOL v41;
  NSObject *v42;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  float *v48;
  int v49;
  uint64_t v50;
  float *v51;
  int v52;
  uint64_t v53;
  uint8_t v54[48];

  labelPointFromGeoPointFeature((GeoCodecsPointFeature *)v54, (const md::LabelFeatureCreationParams *)a2, (uint64_t)a3);
  md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)this, (const md::LabelPoint *)v54);
  *(_QWORD *)this = &off_1E4292C60;
  *((_QWORD *)this + 31) = 850045863;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
  {
    v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v44)
    {
      v45 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v45, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v8 = *((_QWORD *)v6 + 299);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 43) = v8;
  *((_DWORD *)this + 92) = 1132396544;
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 48) = *((_QWORD *)a2 + 10);
  *((_BYTE *)this + 392) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 232) + 17) ^ 1;
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 404) = 0;
  *((_BYTE *)this + 408) = 0;
  *((_WORD *)this + 206) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_QWORD *)this + 58) = 0;
  *(_DWORD *)((char *)this + 393) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_BYTE *)this + 448) = 0;
  if ((v8 & 1) == 0)
  {
    v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v46)
    {
      v47 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  *((_QWORD *)this + 59) = *((_QWORD *)v6 + 299);
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 57) = (char *)this + 464;
  *((_DWORD *)this + 122) = 1;
  *((_QWORD *)this + 62) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = &off_1E42B5570;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 68) = 0;
  if ((v9 & 1) == 0)
  {
    v48 = v6;
    v6 = v48;
    if (v49)
    {
      v50 = operator new();
      *((_QWORD *)v48 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v50, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = v48;
    }
  }
  *((_QWORD *)this + 71) = *((_QWORD *)v6 + 299);
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 73) = 0;
  if ((v10 & 1) == 0)
  {
    v51 = v6;
    v6 = v51;
    if (v52)
    {
      v53 = operator new();
      *((_QWORD *)v51 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = v51;
    }
  }
  *((_QWORD *)this + 75) = *((_QWORD *)v6 + 299);
  v11 = *(_OWORD *)((char *)a2 + 120);
  *((_OWORD *)this + 38) = v11;
  *((_OWORD *)this + 39) = *(_OWORD *)((char *)a2 + 136);
  *((_WORD *)this + 320) = *((_WORD *)a2 + 76);
  *((_BYTE *)this + 642) = 0;
  *((_BYTE *)this + 646) = *((_BYTE *)a2 + 156);
  *((_BYTE *)this + 647) = *((_BYTE *)a2 + 211);
  *((_BYTE *)this + 649) = 1;
  *(_OWORD *)((char *)this + 650) = 0u;
  *((_QWORD *)this + 83) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    *((_BYTE *)this + 642) = 1;
    *((_WORD *)this + 322) = *((_WORD *)a2 + 77);
  }
  v12 = *((float *)a2 + 41);
  if (v12 == 0.0)
    v12 = 254.0;
  *((float *)this + 92) = v12;
  v13 = *((float *)a2 + 17);
  *((float *)this + 88) = v13;
  v14 = *((float *)a2 + 40);
  if (v14 == 101.0)
    v15 = v13;
  else
    v15 = *((float *)a2 + 40);
  if (v14 == 100.0)
    v15 = 253.0;
  *((float *)this + 89) = v15;
  v16 = *((float *)a2 + 42);
  if (v16 == 101.0)
    v17 = v13;
  else
    v17 = *((float *)a2 + 42);
  if (v16 == 100.0)
    v18 = 253.0;
  else
    v18 = v17;
  *((float *)this + 90) = v18;
  v19 = *((float *)a2 + 43);
  if (v19 != 101.0)
    v13 = *((float *)a2 + 43);
  if (v19 == 100.0)
    v13 = 253.0;
  *((float *)this + 91) = v13;
  *((_BYTE *)this + 648) = (_QWORD)v11 != 0;
  *((_BYTE *)this + 650) = *((_BYTE *)a2 + 207) != 0;
  v20 = *((_QWORD *)a2 + 3);
  v21 = *((_QWORD *)a2 + 4);
  if (!v21)
  {
    *((_QWORD *)this + 82) = v20;
    *((_QWORD *)this + 83) = 0;
    if (v20)
      goto LABEL_34;
LABEL_39:
    LOBYTE(v27) = 0;
LABEL_41:
    v33 = 0;
    *((_BYTE *)this + 652) = 0;
    goto LABEL_58;
  }
  v22 = (unint64_t *)(v21 + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 82) = v20;
  *((_QWORD *)this + 83) = v21;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    v20 = *((_QWORD *)this + 82);
  }
  if (!v20)
    goto LABEL_39;
LABEL_34:
  v27 = *(unsigned __int8 *)(v20 + 33);
  if (!*(_BYTE *)(v20 + 33))
  {
    LODWORD(v20) = 0;
    goto LABEL_41;
  }
  v20 = *(_QWORD *)v20;
  v28 = *(_DWORD *)v20;
  if (*(_DWORD *)v20 == 6)
  {
    v29 = 0;
LABEL_37:
    LOWORD(v31) = *(_DWORD *)(v20 + 8 * v29 + 4);
    v30 = v31 & 0xFF00;
    v31 = v31;
    v32 = 1;
  }
  else
  {
    v29 = 0;
    v34 = (int *)(v20 + 8);
    while (v27 - 1 != v29)
    {
      v35 = *v34;
      v34 += 2;
      ++v29;
      if (v35 == 6)
      {
        if (v29 < v27)
          goto LABEL_37;
        break;
      }
    }
    v31 = 0;
    v32 = 0;
    v30 = 0;
  }
  if ((v30 | v31) == 0x1BE)
    v36 = v32;
  else
    v36 = 0;
  *((_BYTE *)this + 652) = v36;
  if (v28 == 79)
  {
    v37 = 0;
LABEL_52:
    LOWORD(v20) = *(_DWORD *)(v20 + 8 * v37 + 4);
    v33 = v20 & 0xFF00;
    LODWORD(v20) = v20;
    LOBYTE(v27) = 1;
  }
  else
  {
    v37 = 0;
    v38 = (int *)(v20 + 8);
    while (v27 - 1 != v37)
    {
      v39 = *v38;
      v38 += 2;
      ++v37;
      if (v39 == 79)
      {
        if (v37 < v27)
          goto LABEL_52;
        break;
      }
    }
    LODWORD(v20) = 0;
    LOBYTE(v27) = 0;
    v33 = 0;
  }
LABEL_58:
  if ((v33 | v20) == 1)
    v40 = v27;
  else
    v40 = 0;
  *((_BYTE *)this + 651) = v40;
  if (md::DebugStreamingPOIFeatureID)
    v41 = md::DebugStreamingPOIFeatureID == *((_QWORD *)this + 62);
  else
    v41 = 0;
  if (v41)
  {
    if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
    v42 = (id)GEOGetVectorKitStreamingPOILog_log;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v54 = 0;
      _os_log_impl(&dword_19F029000, v42, OS_LOG_TYPE_DEBUG, "PointLabelFeature::PointLabelFeature", v54, 2u);
    }

  }
  return this;
}

uint64_t md::CompositeLabeler::isBackgroundLayoutDisabled(md::CompositeLabeler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 80))(*(_QWORD *)(v3 - 8));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::Labeler::isBackgroundLayoutDisabled(md::Labeler *this)
{
  return 0;
}

BOOL md::MapNavLabeler::isBackgroundLayoutDisabled(md::MapNavLabeler *this)
{
  if (((*(uint64_t (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this) & 1) != 0)
    return 1;
  if (*((_QWORD *)this + 13) && *(_QWORD *)(*((_QWORD *)this + 86) + 24))
    return *((_BYTE *)this + 580) != 0;
  return 0;
}

uint64_t md::CompositeLabeler::checkNeedsOcclusionTests(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
    return 0;
  v5 = v2 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 - 8) + 112))(*(_QWORD *)(v5 - 8), a2);
    if ((result & 1) != 0)
      break;
    v7 = v5 == v3;
    v5 += 8;
  }
  while (!v7);
  return result;
}

BOOL md::MapStandardLabeler::checkNeedsOcclusionTests(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  _BOOL8 result;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(v1 + 432);
  if (*(_BYTE *)(v2 + 20))
    v3 = *(float *)(v2 + 424) <= 15.0;
  else
    v3 = 1;
  result = 1;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1232);
    v5 = !*(_BYTE *)(v1 + 3348) || v4 == 0;
    if ((v5 || !*(_QWORD *)(v4 + 272)) && (!*(_BYTE *)(v2 + 11) || *(float *)(v2 + 32) < 17.0))
      return 0;
  }
  return result;
}

uint64_t md::MapNavLabeler::checkNeedsOcclusionTests(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
}

uint64_t md::UniLineLabelFeature::newShieldPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  double v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  void **v35;
  __int128 *v36;
  char v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  void **v43;
  __int128 *v44;
  char v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  unsigned __int8 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  md::LabelPart *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;

  v86 = 0uLL;
  v87 = 0;
  {
    v80 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v80, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v88 = mdm::Allocator::instance(void)::alloc;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    if (&v86 == (__int128 *)(a1 + 352))
    {
      v15 = *((_QWORD *)&v86 + 1);
      goto LABEL_98;
    }
    v12 = *(_QWORD *)(a1 + 352);
    v11 = *(_QWORD *)(a1 + 360);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4);
    v14 = v87;
    v15 = v86;
    if (0xAAAAAAAAAAAAAAABLL * ((v87 - (uint64_t)v86) >> 4) < v13)
    {
      if ((_QWORD)v86)
      {
        v16 = *((_QWORD *)&v86 + 1);
        if (*((_QWORD *)&v86 + 1) == (_QWORD)v86)
        {
          v17 = v86;
        }
        else
        {
          do
          {
            if (*(char *)(v16 - 25) < 0)
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v16 - 24) + 40))(*(_QWORD *)(v16 - 24), *(_QWORD *)(v16 - 48), *(_QWORD *)(v16 - 32) & 0x7FFFFFFFFFFFFFFFLL);
            v16 -= 48;
          }
          while (v16 != v15);
          v17 = v86;
        }
        *((_QWORD *)&v86 + 1) = v15;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 40))(v88, v17);
        v14 = 0;
        v86 = 0uLL;
        v87 = 0;
      }
      if (v13 > 0x555555555555555)
        goto LABEL_139;
      v47 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 4);
      v48 = 2 * v47;
      if (2 * v47 <= v13)
        v48 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4);
      v49 = v47 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v48;
      if (v49 > 0x555555555555555)
LABEL_139:
        abort();
      v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, 48 * v49, 8);
      *(_QWORD *)&v86 = v15;
      *((_QWORD *)&v86 + 1) = v15;
      v87 = v15 + 48 * v49;
      if (v12 != v11)
      {
        v50 = 0;
        do
        {
          v53 = v15 + v50;
          if (v15 + v50)
          {
            v54 = (__int128 *)(v12 + v50);
            *(_QWORD *)(v15 + v50 + 24) = *(_QWORD *)(v12 + v50 + 24);
            if (*(char *)(v12 + v50 + 23) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v53, *(void **)(v12 + v50), *(_QWORD *)(v12 + v50 + 8));
            }
            else
            {
              v51 = *v54;
              *(_QWORD *)(v53 + 16) = *((_QWORD *)v54 + 2);
              *(_OWORD *)v53 = v51;
            }
            v52 = v15 + v50;
            *(_QWORD *)(v52 + 32) = *(_QWORD *)(v12 + v50 + 32);
            *(_DWORD *)(v52 + 40) = *(_DWORD *)(v12 + v50 + 40);
            *(_BYTE *)(v52 + 44) = *(_BYTE *)(v12 + v50 + 44);
          }
          v50 += 48;
        }
        while (v12 + v50 != v11);
        v15 += v50;
      }
LABEL_81:
      *((_QWORD *)&v86 + 1) = v15;
      goto LABEL_98;
    }
    v29 = *((_QWORD *)&v86 + 1);
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v86 + 1) - v86) >> 4);
    if (v30 >= v13)
    {
      if (v12 != v11)
      {
        v39 = a5;
        v40 = 0;
        do
        {
          v43 = (void **)(v15 + v40);
          v44 = (__int128 *)(v12 + v40);
          if (v12 != v15)
          {
            v45 = *((_BYTE *)v44 + 23);
            if (*((char *)v43 + 23) < 0)
            {
              if (v45 >= 0)
                v41 = (void *)(v12 + v40);
              else
                v41 = *(void **)(v12 + v40);
              if (v45 >= 0)
                v42 = *((unsigned __int8 *)v44 + 23);
              else
                v42 = *(_QWORD *)(v12 + v40 + 8);
              v43 = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v43, v41, v42);
            }
            else if ((*((_BYTE *)v44 + 23) & 0x80) != 0)
            {
              v43 = (void **)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v43, *(void **)(v12 + v40), *(_QWORD *)(v12 + v40 + 8));
            }
            else
            {
              v46 = *v44;
              v43[2] = (void *)*((_QWORD *)v44 + 2);
              *(_OWORD *)v43 = v46;
            }
          }
          v43[4] = (void *)*((_QWORD *)v44 + 4);
          *((_BYTE *)v43 + 40) = *((_BYTE *)v44 + 40);
          *((_BYTE *)v43 + 41) = *((_BYTE *)v44 + 41);
          *((_BYTE *)v43 + 42) = *((_BYTE *)v44 + 42);
          *((_BYTE *)v43 + 43) = *((_BYTE *)v44 + 43);
          *((_BYTE *)v43 + 44) = *((_BYTE *)v44 + 44);
          v40 += 48;
        }
        while (v12 + v40 != v11);
        v15 += v40;
        v29 = *((_QWORD *)&v86 + 1);
        a5 = v39;
      }
      while (v29 != v15)
      {
        if (*(char *)(v29 - 25) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v29 - 24) + 40))(*(_QWORD *)(v29 - 24), *(_QWORD *)(v29 - 48), *(_QWORD *)(v29 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        v29 -= 48;
      }
      goto LABEL_81;
    }
    v83 = a5;
    if (*((_QWORD *)&v86 + 1) != (_QWORD)v86)
    {
      v31 = 0;
      v32 = 16 * ((uint64_t)(*((_QWORD *)&v86 + 1) - v86) >> 4);
      do
      {
        v35 = (void **)(v15 + v31);
        v36 = (__int128 *)(v12 + v31);
        if (v12 != v15)
        {
          v37 = *((_BYTE *)v36 + 23);
          if (*((char *)v35 + 23) < 0)
          {
            if (v37 >= 0)
              v33 = (void *)(v12 + v31);
            else
              v33 = *(void **)(v12 + v31);
            if (v37 >= 0)
              v34 = *((unsigned __int8 *)v36 + 23);
            else
              v34 = *(_QWORD *)(v12 + v31 + 8);
            v35 = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v35, v33, v34);
          }
          else if ((*((_BYTE *)v36 + 23) & 0x80) != 0)
          {
            v35 = (void **)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v35, *(void **)(v12 + v31), *(_QWORD *)(v12 + v31 + 8));
          }
          else
          {
            v38 = *v36;
            v35[2] = (void *)*((_QWORD *)v36 + 2);
            *(_OWORD *)v35 = v38;
          }
        }
        v35[4] = (void *)*((_QWORD *)v36 + 4);
        *((_BYTE *)v35 + 40) = *((_BYTE *)v36 + 40);
        *((_BYTE *)v35 + 41) = *((_BYTE *)v36 + 41);
        *((_BYTE *)v35 + 42) = *((_BYTE *)v36 + 42);
        *((_BYTE *)v35 + 43) = *((_BYTE *)v36 + 43);
        *((_BYTE *)v35 + 44) = *((_BYTE *)v36 + 44);
        v31 += 48;
      }
      while (v32 != v31);
      v15 = *((_QWORD *)&v86 + 1);
    }
    v55 = v12 + 48 * v30;
    v56 = v15;
    if (v55 != v11)
    {
      v57 = 0;
      do
      {
        v60 = v15 + v57;
        if (v15 + v57)
        {
          v61 = (__int128 *)(v55 + v57);
          *(_QWORD *)(v15 + v57 + 24) = *(_QWORD *)(v55 + v57 + 24);
          if (*(char *)(v55 + v57 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v60, *(void **)(v55 + v57), *(_QWORD *)(v55 + v57 + 8));
          }
          else
          {
            v58 = *v61;
            *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
            *(_OWORD *)v60 = v58;
          }
          v59 = v15 + v57;
          *(_QWORD *)(v59 + 32) = *(_QWORD *)(v55 + v57 + 32);
          *(_DWORD *)(v59 + 40) = *(_DWORD *)(v55 + v57 + 40);
          *(_BYTE *)(v59 + 44) = *(_BYTE *)(v55 + v57 + 44);
        }
        v57 += 48;
      }
      while (v55 + v57 != v11);
      v56 = v15 + v57;
    }
    v15 = v56;
    *((_QWORD *)&v86 + 1) = v56;
    a5 = v83;
  }
  else
  {
    v18 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 200))(*a5);
    v20 = v18;
    if ((*(_QWORD *)v18
       && *((_DWORD *)v18 + 10) == *(_DWORD *)(*(_QWORD *)v18 + 252)
       && (v21 = (uint64_t *)*((_QWORD *)v18 + 3)) != 0
       && (*((__int16 *)v18 + 17) & 0x80000000) == 0
       || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v18, v18[164], v19),
           *(_QWORD *)v20)
       && *((_DWORD *)v20 + 10) == *(_DWORD *)(*(_QWORD *)v20 + 252)
       && (v21 = (uint64_t *)*((_QWORD *)v20 + 3)) != 0)
      && (*((__int16 *)v20 + 17) & 0x80000000) == 0
      && (v22 = *v21) != 0
      && !*(_BYTE *)(v22 + 32))
    {
      v23 = *(_QWORD *)(v22 + 16);
    }
    else
    {
      v23 = 0;
    }
    v24 = atomic_load((unsigned __int8 *)(a2 + 3392));
    md::UniLineLabelFeature::shieldsForFeature(&v84, v23, v24 & 1);
    v25 = v86;
    if ((_QWORD)v86)
    {
      v26 = a5;
      v27 = *((_QWORD *)&v86 + 1);
      v28 = v86;
      if (*((_QWORD *)&v86 + 1) != (_QWORD)v86)
      {
        do
        {
          if (*(char *)(v27 - 25) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v27 - 24) + 40))(*(_QWORD *)(v27 - 24), *(_QWORD *)(v27 - 48), *(_QWORD *)(v27 - 32) & 0x7FFFFFFFFFFFFFFFLL);
          v27 -= 48;
        }
        while (v27 != v25);
        v28 = v86;
      }
      *((_QWORD *)&v86 + 1) = v25;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 40))(v88, v28, v87 - v28);
      a5 = v26;
    }
    v86 = v84;
    v87 = v85;
    v15 = *((_QWORD *)&v84 + 1);
  }
LABEL_98:
  if (v15 - (_QWORD)v86 == 48)
  {
    md::LabelStyle::shieldIcon((uint64_t *)&v84, a4, a2, a3, (void **)v86, 1, -1);
    if ((_QWORD)v84)
    {
      {
        v81 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v81, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 800, 8);
      md::ShieldIconLabelPart::ShieldIconLabelPart(v63, &v84, a4, a5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 176))(v63, 2);
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
      if (!*((_QWORD *)&v84 + 1))
        goto LABEL_126;
      goto LABEL_122;
    }
    v63 = 0;
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1))
    {
LABEL_122:
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v86) >> 4) < 2)
  {
    v63 = 0;
  }
  else
  {
    {
      v82 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 704, 8);
    md::MultipleShieldLabelPart::MultipleShieldLabelPart(v63, a5);
    if (v63)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 176))(v63, 2);
      v67 = *((_QWORD *)&v86 + 1);
      v66 = v86;
      if (*((_QWORD *)&v86 + 1) == (_QWORD)v86)
        goto LABEL_127;
      v68 = 0;
      do
      {
        md::LabelStyle::shieldIcon((uint64_t *)&v84, a4, a2, a3, (void **)(v66 + 48 * v68), 1, -1);
        if ((_QWORD)v84)
        {
          {
            v74 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v74, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v70 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 800, 8);
          md::ShieldIconLabelPart::ShieldIconLabelPart((uint64_t)v70, &v84, a4, a5);
          if (v70)
          {
            (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v70 + 176))(v70, 2);
            md::CompositeLabelPart::addLabelPart(v63, v70);
          }
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
        if (*((_QWORD *)&v84 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        ++v68;
        v66 = v86;
      }
      while (v68 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v86 + 1) - v86) >> 4));
    }
  }
LABEL_126:
  v67 = v86;
LABEL_127:
  if (v67)
  {
    v77 = *((_QWORD *)&v86 + 1);
    v78 = v67;
    if (*((_QWORD *)&v86 + 1) != v67)
    {
      do
      {
        if (*(char *)(v77 - 25) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v77 - 24) + 40))(*(_QWORD *)(v77 - 24), *(_QWORD *)(v77 - 48), *(_QWORD *)(v77 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        v77 -= 48;
      }
      while (v77 != v67);
      v78 = v86;
    }
    *((_QWORD *)&v86 + 1) = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 40))(v88, v78, v87 - v78);
  }
  return v63;
}

void sub_19F1DB37C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  v9 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v7, 704);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void md::LabelStyle::shieldIcon(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, char a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  md::LabelImageKey *v14;
  unsigned __int8 v15;
  uint64_t v16;
  void **v17;
  int v18;
  uint64_t v19;
  int v20;
  grl *v21;
  int v22;
  int v23;
  int v24;
  char v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  md::LabelImageKey *v41[3];
  std::__shared_weak_count *v42;

  v11 = (uint64_t)operator new(0x148uLL);
  v12 = v11;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = (unint64_t *)(v11 + 8);
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = &off_1E42DB010;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (md::LabelImageKey *)(v11 + 24);
  *(_OWORD *)(v11 + 40) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  if ((v15 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v36 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  v16 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v12 + 144) = 0;
  v17 = (void **)(v12 + 144);
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 64) = v16;
  *(_WORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = v12 + 128;
  *(_QWORD *)(v12 + 104) = v12 + 128;
  *(_QWORD *)(v12 + 112) = v12 + 128;
  *(_QWORD *)(v12 + 120) = 2;
  *(_BYTE *)(v12 + 136) = 0;
  *(_DWORD *)(v12 + 137) = 16843008;
  *(_BYTE *)(v12 + 141) = 0;
  *(_QWORD *)(v12 + 152) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  if ((v16 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v37 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  *(_QWORD *)(v12 + 168) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 181) = 0;
  *(_BYTE *)(v12 + 192) = 4;
  *(_QWORD *)(v12 + 196) = 0;
  *(_BYTE *)(v12 + 204) = 0;
  *(_QWORD *)(v12 + 212) = 0xFFFF3F800000;
  *(_WORD *)(v12 + 220) = 0;
  *(_DWORD *)(v12 + 224) = 1065353216;
  *(_QWORD *)(v12 + 320) = 0;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_QWORD *)(v12 + 288) = 0;
  v41[2] = v14;
  v42 = (std::__shared_weak_count *)v12;
  *(_BYTE *)(v12 + 136) = 1;
  *(_DWORD *)(v12 + 80) = *(_DWORD *)(a2 + 88);
  v18 = *(unsigned __int8 *)(a3 + 3360);
  if (a7 == -1)
  {
    v19 = *(_QWORD *)(a2 + 296);
    if (!v19)
    {
      v11 = md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
      v19 = *(_QWORD *)v11;
      *(_QWORD *)(a2 + 296) = *(_QWORD *)v11;
    }
    LOBYTE(a7) = *(_BYTE *)(v19 + 91);
  }
  if ((a7 - 1) > 8u)
    v20 = 0;
  else
    v20 = dword_19FFB8A88[(a7 - 1)];
  v21 = (grl *)grl::SizeGroupMin((grl *)v11);
  v22 = (int)v21;
  v23 = grl::SizeGroupMax(v21);
  v24 = v20 + v18;
  if (v20 + v18 >= v23)
    v24 = v23;
  if (v24 <= v22)
    LOBYTE(v24) = v22;
  *(_BYTE *)(v12 + 192) = v24;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a4 + 112);
  if (v17 != a5)
  {
    v25 = *((_BYTE *)a5 + 23);
    if (*(char *)(v12 + 167) < 0)
    {
      if (v25 >= 0)
        v26 = a5;
      else
        v26 = *a5;
      if (v25 >= 0)
        v27 = *((unsigned __int8 *)a5 + 23);
      else
        v27 = (size_t)a5[1];
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)(v12 + 144), v26, v27);
    }
    else if ((*((_BYTE *)a5 + 23) & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)(v12 + 144), *a5, (size_t)a5[1]);
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)a5;
      *(_QWORD *)(v12 + 160) = a5[2];
    }
  }
  *(_QWORD *)(v12 + 176) = a5[4];
  *(_DWORD *)(v12 + 184) = *((_DWORD *)a5 + 10);
  *(_BYTE *)(v12 + 188) = *((_BYTE *)a5 + 44);
  *(_BYTE *)(v12 + 139) = a6;
  v28 = *(_QWORD *)(a2 + 296);
  if (!v28)
  {
    v29 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    v28 = *v29;
    *(_QWORD *)(a2 + 296) = *v29;
  }
  *(_QWORD *)(v12 + 196) = *(_QWORD *)(v28 + 56);
  v30 = *(_QWORD *)(a3 + 264);
  v41[0] = v14;
  v41[1] = (md::LabelImageKey *)v12;
  do
    v31 = __ldxr(v13);
  while (__stxr(v31 + 1, v13));
  md::LabelImageLoader::loadImage(a1, v30, v41);
  do
    v32 = __ldaxr(v13);
  while (__stlxr(v32 - 1, v13));
  if (v32)
  {
    v33 = v42;
    if (!v42)
      return;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    v33 = v42;
    if (!v42)
      return;
  }
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_19F1DB7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

double md::LabelIconStyleMonitor::initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  size_t v14;
  uint64_t *v15;
  double result;

  *(_BYTE *)(a1 + 51) = 1;
  if (!a2)
  {
    *(_BYTE *)(a1 + 51) = 0;
    return result;
  }
  v4 = *(_QWORD *)(a2 + 272);
  if (!v4)
  {
    v5 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2);
    v4 = *v5;
    *(_QWORD *)(a2 + 272) = *v5;
  }
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(v4 + 69);
  if (*(char *)(v4 + 263) < 0)
    v6 = *(_QWORD *)(v4 + 248);
  else
    v6 = *(unsigned __int8 *)(v4 + 263);
  v7 = 80;
  if (v6)
  {
    v7 = 240;
    v8 = (_OWORD *)(v4 + 240);
  }
  else
  {
    v8 = (_OWORD *)(v4 + 80);
  }
  if (v8 == (_OWORD *)a1)
  {
LABEL_23:
    v11 = *(_QWORD *)(a2 + 296);
    if (!v11)
      goto LABEL_24;
    goto LABEL_25;
  }
  v9 = *((_BYTE *)v8 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v12 = *(void **)(v4 + v7);
    if (v9 >= 0)
      v13 = v8;
    else
      v13 = v12;
    if (v9 >= 0)
      v14 = *((unsigned __int8 *)v8 + 23);
    else
      v14 = *((_QWORD *)v8 + 1);
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)a1, v13, v14);
    goto LABEL_23;
  }
  if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)a1, *(void **)(v4 + v7), *((_QWORD *)v8 + 1));
    v11 = *(_QWORD *)(a2 + 296);
    if (v11)
      goto LABEL_25;
    goto LABEL_24;
  }
  v10 = *v8;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)a1 = v10;
  v11 = *(_QWORD *)(a2 + 296);
  if (!v11)
  {
LABEL_24:
    v15 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    v11 = *v15;
    *(_QWORD *)(a2 + 296) = *v15;
  }
LABEL_25:
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(v11 + 88);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v11 + 92);
  result = *(double *)(v11 + 64);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v11 + 56);
  return result;
}

float md::LabelStyle::iconContentScale(md::LabelStyle *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t shared_owners;
  unsigned __int8 v7;
  std::__shared_weak_count_vtbl *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  float v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v15;
  unint64_t v16;
  float *p_on_zero_shared;
  float v18;
  float *v19;

  v2 = *(std::__shared_weak_count **)this;
  if (!*(_QWORD *)this)
    goto LABEL_13;
  shared_weak_owners = (std::__shared_weak_count *)v2->__shared_weak_owners_;
  if (!shared_weak_owners || (v4 = std::__shared_weak_count::lock(shared_weak_owners)) == 0)
  {
    v2 = 0;
    goto LABEL_13;
  }
  v5 = v4;
  shared_owners = v2->__shared_owners_;
  if (shared_owners)
  {
    v2 = *(std::__shared_weak_count **)(shared_owners + 16);
    if (v2)
    {
      v7 = atomic_load((unsigned __int8 *)&v2[116]);
      if ((v7 & 1) == 0)
        std::__assoc_sub_state::wait((std::__assoc_sub_state *)v2[117].__vftable);
      v8 = v2[5].__vftable;
      v2 = (std::__shared_weak_count *)v2[5].__shared_owners_;
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
    v2 = 0;
  }
  v15 = (unint64_t *)&v5->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (!v8)
  {
LABEL_13:
    v11 = *((float *)this + 22);
    if (!v2)
      return v11;
    goto LABEL_14;
  }
  v18 = *(float *)&v8[5].__on_zero_shared;
  p_on_zero_shared = (float *)&v8[5].__on_zero_shared;
  v19 = (float *)((char *)this + 88);
  if (v18 > 0.0)
    v19 = p_on_zero_shared;
  v11 = *v19;
  if (v2)
  {
LABEL_14:
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v11;
}

