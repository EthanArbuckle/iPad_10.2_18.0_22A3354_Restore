void sub_19F467114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3EDBE6080169A53DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3EDBE6080169A53DLL;
      if (*(_QWORD *)&v3 <= 0x3EDBE6080169A53DuLL)
        v5 = 0x3EDBE6080169A53DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3EDBE6080169A53DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3EDBE6080169A53DLL)
            {
              if (v7[2] == 0x3EDBE6080169A53DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3EDBE6080169A53DLL)
          {
            if (v7[2] == 0x3EDBE6080169A53DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 73;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270CF8;
  *(_QWORD *)(v11 + 8) = 0x3EDBE6080169A53DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3EDBE6080169A53DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3EDBE6080169A53DLL;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::InjectedFeatures>]";
  v15[2] = 73;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3EDBE6080169A53DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F467650(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8E91716731470C3ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8E91716731470C3ALL;
      if (*(_QWORD *)&v3 <= 0x8E91716731470C3ALL)
        v5 = 0x8E91716731470C3ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8E91716731470C3ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8E91716731470C3ALL)
            {
              if (v7[2] == 0x8E91716731470C3ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8E91716731470C3ALL)
          {
            if (v7[2] == 0x8E91716731470C3ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42709F8;
  *(_QWORD *)(v11 + 8) = 0x8E91716731470C3ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8E91716731470C3ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8E91716731470C3ALL;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::InjectedFeatures>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8E91716731470C3ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F467878(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6A4AF42FD3B2DA7ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6A4AF42FD3B2DA7ALL;
      if (*(_QWORD *)&v3 <= 0x6A4AF42FD3B2DA7AuLL)
        v5 = 0x6A4AF42FD3B2DA7AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6A4AF42FD3B2DA7ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6A4AF42FD3B2DA7ALL)
            {
              if (v7[2] == 0x6A4AF42FD3B2DA7ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6A4AF42FD3B2DA7ALL)
          {
            if (v7[2] == 0x6A4AF42FD3B2DA7ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataActive<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270938;
  *(_QWORD *)(v11 + 8) = 0x6A4AF42FD3B2DA7ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6A4AF42FD3B2DA7AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6A4AF42FD3B2DA7ALL;
  v15[1] = "SceneComponents::LayerDataActive<md::MapDataType::InjectedFeatures>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6A4AF42FD3B2DA7ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F467C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *v10;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          *v10 = *v8;
          *v8 = v107;
          v108 = v10[1];
          v10[1] = *v9;
          goto LABEL_185;
        }
        return result;
      case 3:
        v109 = v10[2];
        v110 = *(unsigned __int8 *)(*(_QWORD *)(v109 + 384) + 169);
        v111 = *v10;
        v112 = *v8;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
        if (v110 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          if (v113 <= v110)
            return result;
          v10[2] = v112;
          *v8 = v109;
          v156 = v10[3];
          v10[3] = *v9;
          *v9 = v156;
          v157 = v10[2];
          v158 = *v10;
          if (*(unsigned __int8 *)(*(_QWORD *)(v157 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            return result;
          *v10 = v157;
          v10[2] = v158;
          v114 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v113 <= v110)
          {
            v114 = v10 + 3;
            v167 = v10[3];
            v168 = v10[1];
            *v10 = v109;
            v10[1] = v167;
            v10[2] = v111;
            v10[3] = v168;
            if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v111 + 384) + 169))
              return result;
            v10[2] = *v8;
          }
          else
          {
            v114 = v10 + 1;
            *v10 = v112;
          }
          *v8 = v111;
        }
        v108 = *v114;
        *v114 = *v9;
LABEL_185:
        *v9 = v108;
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v128 = (unint64_t)(v12 - 2) >> 1;
              v129 = v128;
              do
              {
                v130 = v129;
                if (v128 >= v129)
                {
                  v131 = (2 * v129) | 1;
                  v132 = &v10[2 * v131];
                  if (2 * v130 + 2 >= v12)
                  {
                    v136 = *v132;
                  }
                  else
                  {
                    v133 = *(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169);
                    v134 = *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169);
                    v135 = v133 > v134;
                    if (v133 <= v134)
                      v136 = *v132;
                    else
                      v136 = v132[2];
                    if (v135)
                    {
                      v132 += 2;
                      v131 = 2 * v130 + 2;
                    }
                  }
                  v137 = &v10[2 * v130];
                  v138 = *v137;
                  result = *(unsigned __int8 *)(*(_QWORD *)(*v137 + 384) + 169);
                  if (*(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169) <= result)
                  {
                    v139 = v137[1];
                    do
                    {
                      result = (unint64_t)v137;
                      v137 = v132;
                      *(_QWORD *)result = v136;
                      *(_QWORD *)(result + 8) = v132[1];
                      if (v128 < v131)
                        break;
                      v140 = (2 * v131) | 1;
                      v132 = &v10[2 * v140];
                      v131 = 2 * v131 + 2;
                      if (v131 < v12)
                      {
                        v136 = *v132;
                        if (*(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169))
                        {
                          v131 = v140;
                        }
                        else
                        {
                          v136 = v132[2];
                          v132 += 2;
                        }
                      }
                      else
                      {
                        v136 = *v132;
                        v131 = v140;
                      }
                      result = *(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(_QWORD *)(v138 + 384) + 169));
                    *v137 = v138;
                    v137[1] = v139;
                  }
                }
                v129 = v130 - 1;
              }
              while (v130);
              v141 = (unint64_t)v11 >> 4;
              do
              {
                v142 = 0;
                v143 = *v10;
                v144 = v10[1];
                v145 = v10;
                do
                {
                  v147 = &v145[2 * v142 + 2];
                  v148 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    v146 = *v147;
                    result = (unint64_t)(v147 + 2);
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v147[2] + 384) + 169))
                    {
                      v142 = v148;
                    }
                    else
                    {
                      v146 = v147[2];
                      v147 += 2;
                    }
                  }
                  else
                  {
                    v146 = *v147;
                    v142 = v148;
                  }
                  *v145 = v146;
                  v145[1] = v147[1];
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == a2 - 2)
                {
                  *v147 = v143;
                  v147[1] = v144;
                }
                else
                {
                  *v147 = *(a2 - 2);
                  v147[1] = *(a2 - 1);
                  *(a2 - 2) = v143;
                  *(a2 - 1) = v144;
                  v149 = (char *)v147 - (char *)v10 + 16;
                  if (v149 >= 17)
                  {
                    v150 = (((unint64_t)v149 >> 4) - 2) >> 1;
                    v151 = &v10[2 * v150];
                    v152 = *v151;
                    v153 = *v147;
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169))
                    {
                      v154 = v147[1];
                      do
                      {
                        v155 = v147;
                        v147 = v151;
                        *v155 = v152;
                        v155[1] = v151[1];
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[2 * v150];
                        v152 = *v151;
                      }
                      while (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v153 + 384) + 169));
                      *v147 = v153;
                      v147[1] = v154;
                    }
                  }
                }
                a2 -= 2;
                v135 = v141-- <= 2;
              }
              while (!v135);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
          if ((unint64_t)v11 >= 0x801)
          {
            v17 = *v14;
            v18 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
            v19 = *v10;
            if (v18 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            {
              if (v16 <= v18
                || (*v14 = v15,
                    *v8 = v17,
                    v26 = v14 + 1,
                    v25 = v14[1],
                    v14[1] = *v9,
                    *v9 = v25,
                    v27 = *v10,
                    *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169)))
              {
LABEL_23:
                v34 = &v10[2 * v13];
                v37 = *(v34 - 2);
                v35 = v34 - 2;
                v36 = v37;
                v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169);
                v39 = v10[2];
                v40 = *(a2 - 4);
                v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 384) + 169);
                if (v38 <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                {
                  if (v41 <= v38
                    || (*v35 = v40,
                        *(a2 - 4) = v36,
                        v43 = v35 + 1,
                        v44 = v35[1],
                        v35[1] = *(a2 - 3),
                        *(a2 - 3) = v44,
                        v45 = v10[2],
                        *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v45 + 384) + 169)))
                  {
LABEL_36:
                    v52 = &v10[2 * v13];
                    v55 = v52[2];
                    v53 = v52 + 2;
                    v54 = v55;
                    v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 384) + 169);
                    v57 = v10[4];
                    v58 = *(a2 - 6);
                    v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 384) + 169);
                    if (v56 <= *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169))
                    {
                      if (v59 > v56)
                      {
                        *v53 = v58;
                        *(a2 - 6) = v54;
                        v62 = v53 + 1;
                        v61 = v53[1];
                        v53[1] = *(a2 - 5);
                        *(a2 - 5) = v61;
                        v54 = *v53;
                        v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        v63 = v10[4];
                        if (v56 > *(unsigned __int8 *)(*(_QWORD *)(v63 + 384) + 169))
                        {
                          v10[4] = v54;
                          *v53 = v63;
                          v60 = v10 + 5;
LABEL_45:
                          v67 = *v60;
                          *v60 = *v62;
                          *v62 = v67;
                          v54 = *v53;
                          v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v59 > v56)
                      {
                        v60 = v10 + 5;
                        v10[4] = v58;
LABEL_44:
                        *(a2 - 6) = v57;
                        v62 = a2 - 5;
                        goto LABEL_45;
                      }
                      v60 = v53 + 1;
                      v64 = v53[1];
                      v65 = v10[5];
                      v10[4] = v54;
                      v10[5] = v64;
                      *v53 = v57;
                      v53[1] = v65;
                      v66 = *(a2 - 6);
                      v56 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169);
                      if (*(unsigned __int8 *)(*(_QWORD *)(v66 + 384) + 169) > v56)
                      {
                        *v53 = v66;
                        goto LABEL_44;
                      }
                      v54 = v57;
                    }
                    v68 = *v14;
                    v69 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
                    v70 = *v35;
                    if (v69 <= *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169))
                    {
                      if (v56 <= v69)
                      {
LABEL_56:
                        v78 = *v10;
                        *v10 = v68;
                        v24 = v10 + 1;
                        *v14 = v78;
                        v30 = v14 + 1;
                        goto LABEL_57;
                      }
                      *v14 = v54;
                      v73 = v14 + 1;
                      v74 = v14[1];
                      v14[1] = v53[1];
                      *v53 = v68;
                      v53[1] = v74;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                      {
                        v68 = v54;
                        goto LABEL_56;
                      }
                      *v35 = v54;
                      v71 = v35 + 1;
                      *v14 = v70;
                    }
                    else
                    {
                      if (v56 <= v69)
                      {
                        *v14 = v70;
                        v75 = v14[1];
                        v76 = v35[1];
                        *v35 = v68;
                        v35[1] = v75;
                        v14[1] = v76;
                        if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                        {
                          v68 = v70;
                          goto LABEL_56;
                        }
                        *v14 = v54;
                        *v53 = v70;
                        v72 = v53 + 1;
                        v71 = v14 + 1;
                      }
                      else
                      {
                        *v35 = v54;
                        v71 = v35 + 1;
                        *v53 = v70;
                        v72 = v53 + 1;
                      }
                      v73 = v72;
                    }
                    v77 = *v71;
                    *v71 = *v73;
                    *v73 = v77;
                    v68 = *v14;
                    goto LABEL_56;
                  }
                  v10[2] = *v35;
                  *v35 = v45;
                  v42 = v10 + 3;
                }
                else
                {
                  if (v41 <= v38)
                  {
                    v42 = v35 + 1;
                    v48 = v35[1];
                    v49 = v10[3];
                    v10[2] = v36;
                    v10[3] = v48;
                    *v35 = v39;
                    v35[1] = v49;
                    v50 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v50 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                      goto LABEL_36;
                    *v35 = v50;
                  }
                  else
                  {
                    v42 = v10 + 3;
                    v10[2] = v40;
                  }
                  *(a2 - 4) = v39;
                  v43 = a2 - 3;
                }
                v51 = *v42;
                *v42 = *v43;
                *v43 = v51;
                goto LABEL_36;
              }
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v27;
            }
            else
            {
              if (v16 <= v18)
              {
                v20 = v14 + 1;
                v31 = v14[1];
                v32 = v10[1];
                *v10 = v17;
                v10[1] = v31;
                *v14 = v19;
                v14[1] = v32;
                if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v19 + 384) + 169))
                  goto LABEL_23;
                *v14 = *v8;
              }
              else
              {
                v20 = v10 + 1;
                *v10 = v15;
              }
              *v8 = v19;
              v26 = a2 - 1;
            }
            v33 = *v20;
            *v20 = *v26;
            *v26 = v33;
            goto LABEL_23;
          }
          v21 = *v10;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169);
          v23 = *v14;
          if (v22 <= *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
          {
            if (v16 > v22)
            {
              *v10 = v15;
              *v8 = v21;
              v28 = v10[1];
              v10[1] = *v9;
              *v9 = v28;
              v21 = *v10;
              v29 = *v14;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
              {
                *v14 = v21;
                *v10 = v29;
                v24 = v14 + 1;
                v30 = v10 + 1;
LABEL_57:
                v79 = *v24;
                *v24 = *v30;
                *v30 = v79;
                v21 = *v10;
              }
            }
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_59;
LABEL_61:
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
            if (*(unsigned __int8 *)(*(_QWORD *)(*(v10 - 2) + 384) + 169) > v80)
              goto LABEL_62;
            if (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169))
            {
              v97 = v10 + 2;
              do
              {
                v10 = v97;
                if (v97 >= a2)
                  break;
                v97 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169));
            }
            else
            {
              do
              {
                v96 = v10[2];
                v10 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(v96 + 384) + 169));
            }
            v98 = a2;
            if (v10 < a2)
            {
              v98 = a2;
              do
              {
                v99 = *(v98 - 2);
                v98 -= 2;
              }
              while (v80 > *(unsigned __int8 *)(*(_QWORD *)(v99 + 384) + 169));
            }
            v100 = v7[1];
            if (v10 < v98)
            {
              v101 = *v10;
              v102 = *v98;
              do
              {
                *v10 = v102;
                *v98 = v101;
                v103 = v10[1];
                v10[1] = v98[1];
                v98[1] = v103;
                v104 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
                do
                {
                  v105 = v10[2];
                  v10 += 2;
                  v101 = v105;
                }
                while (v104 <= *(unsigned __int8 *)(*(_QWORD *)(v105 + 384) + 169));
                do
                {
                  v106 = *(v98 - 2);
                  v98 -= 2;
                  v102 = v106;
                }
                while (v104 > *(unsigned __int8 *)(*(_QWORD *)(v106 + 384) + 169));
              }
              while (v10 < v98);
            }
            if (v10 - 2 != v7)
            {
              *v7 = *(v10 - 2);
              v7[1] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 2) = v21;
            *(v10 - 1) = v100;
            continue;
          }
          if (v16 > v22)
          {
            v24 = v14 + 1;
            *v14 = v15;
LABEL_31:
            *v8 = v23;
            v30 = a2 - 1;
            goto LABEL_57;
          }
          v24 = v10 + 1;
          v46 = v10[1];
          v47 = v14[1];
          *v14 = v21;
          v14[1] = v46;
          *v10 = v23;
          v10[1] = v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v23 + 384) + 169))
          {
            *v10 = *v8;
            goto LABEL_31;
          }
          v21 = v23;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_59:
          v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
LABEL_62:
          v81 = v10[1];
          v82 = v10;
          do
          {
            v83 = v82;
            v85 = v82[2];
            v82 += 2;
            v84 = v85;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v85 + 384) + 169) > v80);
          v86 = a2;
          if (v83 == v10)
          {
            v86 = a2;
            do
            {
              if (v82 >= v86)
                break;
              v88 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v88 + 384) + 169) <= v80);
          }
          else
          {
            do
            {
              v87 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v87 + 384) + 169) <= v80);
          }
          if (v82 >= v86)
          {
            v10 = v82;
          }
          else
          {
            v89 = *v86;
            v10 = v82;
            v90 = v86;
            do
            {
              *v10 = v89;
              *v90 = v84;
              v91 = v10[1];
              v10[1] = v90[1];
              v90[1] = v91;
              v92 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
              do
              {
                v93 = v10[2];
                v10 += 2;
                v84 = v93;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v93 + 384) + 169) > v92);
              do
              {
                v94 = *(v90 - 2);
                v90 -= 2;
                v89 = v94;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v94 + 384) + 169) <= v92);
            }
            while (v10 < v90);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          *(v10 - 2) = v21;
          *(v10 - 1) = v81;
          if (v82 < v86)
            goto LABEL_83;
          v95 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v7, v10 - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v95)
              continue;
LABEL_83:
            result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v7, v10 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 2;
          if (v95)
            return result;
          goto LABEL_2;
        }
        v115 = v10 + 2;
        v117 = v10 == a2 || v115 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v117)
          {
            v118 = 0;
            v119 = v10;
            do
            {
              v121 = v115;
              v122 = v119[2];
              v123 = *v119;
              if (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v119 + 384) + 169))
              {
                v124 = v119[3];
                v125 = v118;
                do
                {
                  v126 = (char *)v10 + v125;
                  v127 = *(uint64_t *)((char *)v10 + v125 + 8);
                  *((_QWORD *)v126 + 2) = v123;
                  *((_QWORD *)v126 + 3) = v127;
                  if (!v125)
                  {
                    v120 = v10;
                    goto LABEL_125;
                  }
                  v123 = *((_QWORD *)v126 - 2);
                  v125 -= 16;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v123 + 384) + 169));
                v120 = (uint64_t *)((char *)v10 + v125 + 16);
LABEL_125:
                *v120 = v122;
                v120[1] = v124;
              }
              v115 = v121 + 2;
              v118 += 16;
              v119 = v121;
            }
            while (v121 + 2 != a2);
          }
        }
        else if (!v117)
        {
          v159 = v10 + 3;
          do
          {
            v160 = v115;
            v161 = v7[2];
            v162 = *v7;
            if (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v7 + 384) + 169))
            {
              v163 = v7[3];
              v164 = v159;
              do
              {
                v165 = v164;
                *(v164 - 1) = v162;
                v166 = *(v164 - 2);
                v164 -= 2;
                *v165 = v166;
                v162 = *(v165 - 5);
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v162 + 384) + 169));
              *(v164 - 1) = v161;
              *v164 = v163;
            }
            v115 = v160 + 2;
            v159 += 2;
            v7 = v160;
          }
          while (v160 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 2);
      v4 = *a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v6 = a1[2];
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 384) + 169);
      v8 = *a1;
      v9 = *(a2 - 2);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          v11 = a1 + 3;
          v26 = a1[3];
          v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(_QWORD *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 384) + 169))
            return 1;
          a1[2] = v28;
        }
        else
        {
          v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        v20 = a1 + 3;
        v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        v21 = a1[2];
        v22 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          v11 = a1 + 1;
LABEL_21:
          v29 = *v11;
          *v11 = *v20;
          *v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 384) + 169);
      v16 = *a1;
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          v18 = a1 + 3;
          v30 = a1[3];
          v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
            goto LABEL_26;
          a1[2] = v13;
        }
        else
        {
          v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        v24 = a1 + 3;
        v23 = a1[3];
        v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          v18 = a1 + 1;
LABEL_25:
          v32 = *v18;
          *v18 = *v24;
          *v24 = v32;
        }
      }
LABEL_26:
      v33 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v37 = *v33;
        v38 = *v12;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v12 + 384) + 169))
        {
          v39 = v33[1];
          v40 = v34;
          do
          {
            v41 = (uint64_t *)((char *)a1 + v40);
            v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              v36 = a1;
              goto LABEL_29;
            }
            v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v38 + 384) + 169));
          v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *v36 = v37;
          v36[1] = v39;
          if (++v35 == 8)
            return v33 + 2 == a2;
        }
        v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2)
          return 1;
      }
  }
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v3 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x5A88E3C88DA0DCA1;
    if (a2 <= 0x5A88E3C88DA0DCA1)
      v11 = 0x5A88E3C88DA0DCA1 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x5A88E3C88DA0DCA1;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x5A88E3C88DA0DCA1)
      {
        if (v13[2] == 0x5A88E3C88DA0DCA1)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x5A88E3C88DA0DCA1)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x5A88E3C88DA0DCA1)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x5A88E3C88DA0DCA1)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)62>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42706C0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)62>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42706C0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)62>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F5F0;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F5F0;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

void md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::reset(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  char v45;

  v2 = a1[16];
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v5 = 0;
  }
  else
  {
    v5 = v3[3];
    v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  md::FlyoverRenderResources::prunePools(v10);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  md::DaVinciGroundRenderResources::prunePools(v11);
  v12 = (gdc::Registry *)a1[15];
  if (v12)
  {
    v13 = gdc::Registry::create(v12);
    v14 = (uint64_t *)gdc::Registry::storage<md::ls::RequestReset>(a1[15]);
    v45 = 0;
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v14, v13, &v45);
    v15 = (_QWORD *)a1[18];
    v16 = (_QWORD *)a1[19];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v44 = a1[19];
      while (1)
      {
        cleanup(a1[16], a1[15], v15[1]);
        v20 = (void (***)(_QWORD))*v15;
        if (*v15)
        {
          v21 = a1[17];
          if (*(_QWORD *)(v21 + 16))
          {
            (**v20)(*v15);
            *v20 = *(void (***)(_QWORD))(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
          }
        }
        if (v19 >= v18)
          break;
        *(_QWORD *)v19 = v15[1];
        v19 += 8;
LABEL_17:
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)a1[18];
          goto LABEL_51;
        }
      }
      v22 = (v19 - v17) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v18 - v17) >> 2 > v23)
        v23 = (v18 - v17) >> 2;
      if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15[1];
      v27 = v26 + 8;
      if (v19 != v17)
      {
        v28 = v19 - 8 - v17;
        if (v28 >= 0x168)
        {
          if (&v25[v19 - v17 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v19 - v17 - 8])
          {
            v29 = v19;
          }
          else if (&v19[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
          {
            v29 = v19;
          }
          else if ((unint64_t)(v17 - v25) >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v29 = &v19[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            v32 = &v25[8 * v22 - 16];
            v33 = v19 - 16;
            v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v26 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_36;
          }
          else
          {
            v29 = v19;
          }
        }
        else
        {
          v29 = v19;
        }
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v29 != v17);
      }
LABEL_36:
      v18 = &v25[8 * v24];
      if (v17)
        operator delete(v17);
      v17 = v26;
      v19 = v27;
      v16 = (_QWORD *)v44;
      goto LABEL_17;
    }
    v19 = 0;
    v17 = 0;
LABEL_51:
    a1[19] = (uint64_t)v15;
    a1[30] = a1[29];
    a1[27] = a1[26];
    if (a1[24])
    {
      v36 = (_BYTE *)a1[23];
      if (v36)
      {
        do
        {
          if (v36[112])
            v36[112] = 0;
          v42 = *(_BYTE **)v36;
          v43 = (void *)*((_QWORD *)v36 + 4);
          if (v43 != *((void **)v36 + 6))
            free(v43);
          operator delete(v36);
          v36 = v42;
        }
        while (v42);
      }
      a1[23] = 0;
      v37 = a1[22];
      if (v37)
      {
        for (i = 0; i != v37; ++i)
          *(_QWORD *)(a1[21] + 8 * i) = 0;
      }
      a1[24] = 0;
    }
    if (v17 != v19)
    {
      v39 = a1[15];
      v40 = (unint64_t *)v17;
      do
      {
        v41 = *v40++;
        gdc::Registry::destroy(v39, v41);
      }
      while (v40 != (unint64_t *)v19);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_19F46981C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::CollectRenderablesLogicContext<md::MapDataType::Flyover>]";
  v4[3] = 60;
  v4[4] = result;
  *v4 = &off_1E42706E8;
  v4[1] = 0x57AAF780DF3EC6C0;
  *a2 = v4;
  return result;
}

void sub_19F4698F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x57AAF780DF3EC6C0 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  md::VKMRenderResourcesStore *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t **i;
  BOOL v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t **j;
  int v52;
  BOOL v53;
  unint64_t v54;
  _BOOL4 v55;
  int v56;
  _BOOL4 v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t **k;
  BOOL v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  _BOOL4 v77;
  _BOOL4 v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t **m;
  int v90;
  BOOL v91;
  unint64_t v92;
  _BOOL4 v93;
  int v94;
  _BOOL4 v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  double *v109;
  unint64_t v110;
  unint64_t v111;
  double *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void *v116;
  char *v117;
  int64_t v118;
  int64_t v119;
  unint64_t v120;
  int64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  void (***v132)(_QWORD);
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const double *v155;
  double *v156;
  double *v157;
  BOOL v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t **v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double *v210;
  uint64_t v211;
  const double *v212;
  const double *v213;
  double *v214;
  uint64_t *v215;
  uint64_t v216;
  _QWORD *v217;
  void *v218;
  unint64_t *v219;
  unint64_t v220;
  double v221;
  double v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  uint64_t *v239;
  uint64_t *v240;
  unint64_t v241;
  uint64_t *v242;
  _QWORD *v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t (***v252)(_QWORD);
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  int8x8_t v257;
  uint8x8_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  char v269;
  _BYTE *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  _BYTE *v275;
  uint64_t v276;
  _BYTE *v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  size_t v281;
  size_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  __int128 *v287;
  unint64_t v288;
  __int128 v289;
  uint64_t v290;
  _BYTE *v291;
  char *v292;
  uint64_t *v293;
  uint64_t v294;
  char *v295;
  char v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  char v310;
  unsigned int v311;
  void *v312;
  char v313;
  void *v314;
  uint64_t *v315;
  _QWORD *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t ***v348;
  char *v349;
  void *v350;
  gdc::Registry *v351;
  unint64_t v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t v355;
  char *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  int v361;
  unint64_t v362;
  uint64_t **n;
  BOOL v364;
  int v365;
  BOOL v366;
  unint64_t v367;
  _BOOL4 v368;
  _BOOL4 v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  int v378;
  unint64_t v379;
  uint64_t **ii;
  _BOOL4 v381;
  int v382;
  BOOL v383;
  unint64_t v384;
  _BOOL4 v385;
  _BOOL4 v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t *v398;
  int v399;
  uint64_t **v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t *v403;
  md::VKMRenderResourcesStore *v404;
  _QWORD *v405;
  uint64_t v406;
  char **v407;
  uint64_t v408;
  md::VKMRenderResourcesStore *v409;
  md::VKMRenderResourcesStore *v410;
  uint64_t **v411;
  std::__shared_weak_count *v412;
  uint64_t v413;
  void *__p[2];
  _BYTE v415[32];
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  gdc::Registry *v421;
  char v422;
  __int16 v423;
  char v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  __int128 v430;
  uint64_t v431;
  _QWORD v432[2];
  float64x2x2_t v433;
  float64x2x2_t v434;
  float64x2x2_t v435;
  float64x2x2_t v436;

  v5 = a1;
  v398 = *a3;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = (uint64_t **)*((_QWORD *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)v415 = 0;
  v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    v8 = v9 - 5;
  }
  v11 = (void (***)(_QWORD))v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (**v11)(v11);
  v400 = v7;
  v402 = v6;
  v392 = a4;
  v16 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(v6);
  v17 = (md::VKMRenderResourcesStore *)v16[7];
  v404 = (md::VKMRenderResourcesStore *)v16[8];
  v406 = v5;
  if (v17 != v404)
  {
    v18 = (_QWORD *)(v5 + 168);
    v407 = (char **)(v5 + 232);
    v19 = v16[10];
    v411 = (uint64_t **)(v19 + 8);
    do
    {
      v409 = v17;
      v25 = v5;
      v26 = *(_QWORD **)(v5 + 144);
      v27 = *(_QWORD **)(v25 + 152);
LABEL_20:
      while (v26 != v27)
      {
        v28 = *(_QWORD *)(*v26 + 384);
        v29 = *(std::__shared_weak_count **)(*v26 + 392);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = *(unsigned __int8 *)(*v26 + 48);
          do
            v33 = __ldxr(v30);
          while (__stxr(v33 + 1, v30));
          for (i = *(uint64_t ***)(v19 + 8); i; i = (uint64_t **)*i)
          {
LABEL_32:
            v36 = *((unsigned __int8 *)i + 48);
            v37 = *((char *)i + 48) > (char)v32;
            v38 = (unint64_t)i[4];
            if (v32 == v36)
              v37 = v28 < v38;
            if (!v37)
            {
              v39 = v38 < v28;
              if (v32 == v36)
                v40 = v39;
              else
                v40 = (char)v36 < (char)v32;
              if (!v40)
              {
                v35 = 1;
                if (v29)
                  goto LABEL_41;
                goto LABEL_48;
              }
              ++i;
            }
          }
        }
        else
        {
          v32 = *(unsigned __int8 *)(*v26 + 48);
          i = *(uint64_t ***)(v19 + 8);
          if (i)
            goto LABEL_32;
        }
        v35 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v28 + 16)) != 0;
        if (v29)
        {
LABEL_41:
          v41 = (unint64_t *)&v29->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
LABEL_48:
        if (!v35)
        {
          while (1)
          {
            v44 = v27;
            v27 -= 2;
            if (v26 == v27)
              goto LABEL_80;
            v45 = *(_QWORD *)(*v27 + 384);
            v46 = *(std::__shared_weak_count **)(*v27 + 392);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
              v49 = *(unsigned __int8 *)(*v27 + 48);
              do
                v50 = __ldxr(v47);
              while (__stxr(v50 + 1, v47));
            }
            else
            {
              v49 = *(unsigned __int8 *)(*v27 + 48);
            }
            for (j = v411; ; ++j)
            {
              do
              {
                j = (uint64_t **)*j;
                if (!j)
                {
                  v57 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v45 + 16)) != 0;
                  if (!v46)
                    goto LABEL_50;
                  goto LABEL_72;
                }
                v52 = *((unsigned __int8 *)j + 48);
                v53 = *((char *)j + 48) > (char)v49;
                v54 = (unint64_t)j[4];
                if (v49 == v52)
                  v53 = v45 < v54;
              }
              while (v53);
              v55 = v54 < v45;
              v56 = v49 == v52 ? v55 : (char)v52 < (char)v49;
              if (v56 != 1)
                break;
            }
            v57 = 1;
            if (!v46)
              goto LABEL_50;
LABEL_72:
            v58 = (unint64_t *)&v46->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
            do
              v60 = __ldaxr(v58);
            while (__stlxr(v60 - 1, v58));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
LABEL_50:
            if (v57)
            {
              v61 = *v26;
              *v26 = *(v44 - 2);
              *(v44 - 2) = v61;
              v62 = v26[1];
              v26[1] = *(v44 - 1);
              *(v44 - 1) = v62;
              v26 += 2;
              goto LABEL_20;
            }
          }
        }
        v26 += 2;
      }
LABEL_80:
      v63 = v406;
      v65 = *(_QWORD **)(v406 + 144);
      v64 = *(_QWORD *)(v406 + 152);
      if (v65 != (_QWORD *)v64)
      {
        while (1)
        {
LABEL_81:
          v66 = *(_QWORD *)(*v65 + 384);
          v67 = *(std::__shared_weak_count **)(*v65 + 392);
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            v70 = *(unsigned __int8 *)(*v65 + 48);
            do
              v71 = __ldxr(v68);
            while (__stxr(v71 + 1, v68));
            for (k = *(uint64_t ***)(v19 + 8); k; k = (uint64_t **)*k)
            {
LABEL_92:
              v74 = *((unsigned __int8 *)k + 48);
              v75 = *((char *)k + 48) > (char)v70;
              v76 = (unint64_t)k[4];
              if (v70 == v74)
                v75 = v66 < v76;
              if (!v75)
              {
                v77 = v76 < v66;
                if (v70 == v74)
                  v78 = v77;
                else
                  v78 = (char)v74 < (char)v70;
                if (!v78)
                {
                  v73 = 1;
                  if (v67)
                    goto LABEL_101;
                  goto LABEL_108;
                }
                ++k;
              }
            }
          }
          else
          {
            v70 = *(unsigned __int8 *)(*v65 + 48);
            k = *(uint64_t ***)(v19 + 8);
            if (k)
              goto LABEL_92;
          }
          v73 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v66 + 16)) != 0;
          if (v67)
          {
LABEL_101:
            v79 = (unint64_t *)&v67->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
            do
              v81 = __ldaxr(v79);
            while (__stlxr(v81 - 1, v79));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
LABEL_108:
          if (!v73)
            break;
          v65 += 2;
          if (v65 == (_QWORD *)v64)
          {
LABEL_143:
            v63 = v406;
            goto LABEL_144;
          }
        }
        do
        {
          v82 = v64;
          v64 -= 16;
          if (v65 == (_QWORD *)v64)
          {
            v64 = (unint64_t)v65;
            goto LABEL_143;
          }
          v83 = *(_QWORD *)(*(_QWORD *)v64 + 384);
          v84 = *(std::__shared_weak_count **)(*(_QWORD *)v64 + 392);
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
            v87 = *(unsigned __int8 *)(*(_QWORD *)v64 + 48);
            do
              v88 = __ldxr(v85);
            while (__stxr(v88 + 1, v85));
          }
          else
          {
            v87 = *(unsigned __int8 *)(*(_QWORD *)v64 + 48);
          }
          for (m = v411; ; ++m)
          {
            do
            {
              m = (uint64_t **)*m;
              if (!m)
              {
                v95 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v83 + 16)) != 0;
                if (!v84)
                  goto LABEL_111;
                goto LABEL_133;
              }
              v90 = *((unsigned __int8 *)m + 48);
              v91 = *((char *)m + 48) > (char)v87;
              v92 = (unint64_t)m[4];
              if (v87 == v90)
                v91 = v83 < v92;
            }
            while (v91);
            v93 = v92 < v83;
            v94 = v87 == v90 ? v93 : (char)v90 < (char)v87;
            if (v94 != 1)
              break;
          }
          v95 = 1;
          if (!v84)
            continue;
LABEL_133:
          v96 = (unint64_t *)&v84->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
          do
            v98 = __ldaxr(v96);
          while (__stlxr(v98 - 1, v96));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
LABEL_111:
          ;
        }
        while (!v95);
        v99 = *v65;
        *v65 = *(_QWORD *)(v82 - 16);
        *(_QWORD *)(v82 - 16) = v99;
        v100 = v65[1];
        v65[1] = *(_QWORD *)(v82 - 8);
        *(_QWORD *)(v82 - 8) = v100;
        v65 += 2;
        v63 = v406;
        if (v65 != (_QWORD *)v64)
          goto LABEL_81;
      }
LABEL_144:
      v101 = *(__int128 **)(v63 + 152);
      v102 = (char *)v101 - v64;
      v103 = (uint64_t)((uint64_t)v101 - v64) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v407, *(_QWORD *)(v63 + 240), v64, v101, v103);
      v104 = v406;
      if ((__int128 *)v64 == v101)
        goto LABEL_152;
      v106 = *(_QWORD *)(v406 + 144);
      v105 = *(double **)(v406 + 152);
      v107 = v64 - v106;
      v108 = (double *)(v106 + ((v64 - v106) & 0xFFFFFFFFFFFFFFF0));
      v109 = &v108[2 * v103];
      if (v109 == v105)
      {
        v113 = v406;
        goto LABEL_151;
      }
      v110 = v107 & 0xFFFFFFFFFFFFFFF0;
      v111 = (char *)v105 - &v102[v106 + (v107 & 0xFFFFFFFFFFFFFFF0)] - 16;
      if (v111 < 0x270)
        goto LABEL_147;
      v134 = v110 + (v111 & 0xFFFFFFFFFFFFFFF0);
      v135 = v106 + (v134 | 8);
      v136 = v106 + (v110 | 8);
      v137 = v134 + v106 + 16;
      v138 = &v102[v110 + v106];
      v139 = &v138[v111 & 0xFFFFFFFFFFFFFFF0];
      v140 = (unint64_t)(v139 + 8);
      v141 = (unint64_t)(v138 + 8);
      v142 = (unint64_t)(v139 + 16);
      v143 = v108 >= (double *)v139 + 1 || (unint64_t)v109 >= v135;
      v144 = !v143;
      v145 = (unint64_t)v108 >= v142 || v141 >= v135;
      v146 = !v145;
      v147 = v136 >= v140 || (unint64_t)v109 >= v137;
      v148 = !v147;
      v149 = v136 >= v142 || v141 >= v137;
      v150 = !v149;
      v151 = v136 >= v135 || (unint64_t)v108 >= v137;
      if (!v151 || v144 || v146 || v148 || v150)
      {
LABEL_147:
        v112 = v108;
        v113 = v406;
      }
      else
      {
        v152 = (v111 >> 4) + 1;
        v153 = 2 * (v152 & 0x1FFFFFFFFFFFFFFCLL);
        v112 = &v108[v153];
        v154 = v152 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v155 = &v108[2 * v103];
          v433 = vld2q_f64(v155);
          v155 += 4;
          v435 = vld2q_f64(v155);
          v156 = v108 + 8;
          vst2q_f64(v108, v433);
          v157 = v108 + 4;
          vst2q_f64(v157, v435);
          v108 = v156;
          v154 -= 4;
        }
        while (v154);
        v158 = v152 == (v152 & 0x1FFFFFFFFFFFFFFCLL);
        v113 = v406;
        if (v158)
          goto LABEL_149;
        v109 = (double *)((char *)v109 + v153 * 8);
      }
      do
      {
        *v112 = *v109;
        v112[1] = v109[1];
        v112 += 2;
        v109 += 2;
      }
      while (v109 != v105);
LABEL_149:
      v108 = v112;
LABEL_151:
      *(_QWORD *)(v113 + 152) = v108;
      v104 = v113;
LABEL_152:
      v114 = *(char **)(v104 + 232);
      v20 = *(char **)(v104 + 240);
      if (v20 != v114)
      {
        do
        {
          v115 = (char *)__p[1];
          if (__p[1] >= (void *)*(_QWORD *)v415)
          {
            v117 = (char *)__p[0];
            v118 = (char *)__p[1] - (char *)__p[0];
            v119 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 61)
              abort();
            v121 = *(_QWORD *)v415 - (unint64_t)__p[0];
            if ((uint64_t)(*(_QWORD *)v415 - (unint64_t)__p[0]) >> 2 > v120)
              v120 = v121 >> 2;
            if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
              v122 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v122 = v120;
            if (v122)
            {
              if (v122 >> 61)
LABEL_531:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v123 = operator new(8 * v122);
            }
            else
            {
              v123 = 0;
            }
            v124 = &v123[8 * v119];
            *v124 = *((_QWORD *)v114 + 1);
            v116 = v124 + 1;
            if (v115 == v117)
            {
              v117 = v115;
            }
            else
            {
              v125 = v115 - 8 - v117;
              if (v125 < 0x58)
                goto LABEL_537;
              if ((unint64_t)(v115 - &v123[v118]) < 0x20)
                goto LABEL_537;
              v126 = (v125 >> 3) + 1;
              v127 = &v123[8 * v119 - 16];
              v128 = v115 - 16;
              v129 = v126 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v130 = *(_OWORD *)v128;
                *(v127 - 1) = *((_OWORD *)v128 - 1);
                *v127 = v130;
                v127 -= 2;
                v128 -= 32;
                v129 -= 4;
              }
              while (v129);
              v124 -= v126 & 0x3FFFFFFFFFFFFFFCLL;
              v115 -= 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
              if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_537:
                do
                {
                  v131 = *((_QWORD *)v115 - 1);
                  v115 -= 8;
                  *--v124 = v131;
                }
                while (v115 != v117);
                v117 = (char *)__p[0];
              }
            }
            __p[0] = v124;
            __p[1] = v116;
            *(_QWORD *)v415 = &v123[8 * v122];
            if (v117)
              operator delete(v117);
          }
          else
          {
            *(_QWORD *)__p[1] = *((_QWORD *)v114 + 1);
            v116 = v115 + 8;
          }
          __p[1] = v116;
          v132 = *(void (****)(_QWORD))v114;
          if (*(_QWORD *)v114)
          {
            v133 = *(_QWORD *)(v406 + 136);
            if (*(_QWORD *)(v133 + 16))
            {
              (**v132)(*(_QWORD *)v114);
              *v132 = *(void (***)(_QWORD))(v133 + 40);
              *(_QWORD *)(v133 + 40) = v132;
            }
          }
          v114 += 16;
        }
        while (v114 != v20);
        v20 = *v407;
      }
      v21 = *(_QWORD *)(v406 + 144);
      v22 = *(uint64_t **)(v406 + 152);
      v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      *(_QWORD *)(v406 + 240) = v20;
      v5 = v406;
      if (v22 == (uint64_t *)v21)
        v24 = 0;
      else
        v24 = v23;
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v21, v22, v24, 1);
      v19 += 24;
      v17 = (md::VKMRenderResourcesStore *)((char *)v409 + 8);
      v411 += 3;
    }
    while ((md::VKMRenderResourcesStore *)((char *)v409 + 8) != v404);
  }
  v159 = *v400;
  v160 = v400[1];
  if (*v400 == v160)
  {
    v161 = v402;
  }
  else
  {
    v161 = v402;
    while (*v159 != 0x41D4E9297E100630)
    {
      v159 += 5;
      if (v159 == v160)
        goto LABEL_231;
    }
  }
  if (v159 != v160)
  {
    v162 = (std::__shared_weak_count *)v159[4];
    if (v162)
    {
      v163 = (unint64_t *)&v162->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
      do
        v165 = __ldaxr(v163);
      while (__stlxr(v165 - 1, v163));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
  }
LABEL_231:
  v166 = *v400;
  v167 = v400[1];
  if (*v400 != v167)
  {
    while (*v166 != 0x4EDAD23DFB014132)
    {
      v166 += 5;
      if (v166 == v167)
        goto LABEL_242;
    }
  }
  if (v166 != v167)
  {
    v168 = (std::__shared_weak_count *)v166[4];
    if (v168)
    {
      v169 = (unint64_t *)&v168->__shared_owners_;
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
      do
        v171 = __ldaxr(v169);
      while (__stlxr(v171 - 1, v169));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
  }
LABEL_242:
  v172 = *v400;
  v173 = v400[1];
  if (*v400 != v173)
  {
    while (*v172 != 0x348A0B0E758C07C2)
    {
      v172 += 5;
      if (v172 == v173)
        goto LABEL_253;
    }
  }
  if (v172 != v173)
  {
    v174 = (std::__shared_weak_count *)v172[4];
    if (v174)
    {
      v175 = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
      do
        v177 = __ldaxr(v175);
      while (__stlxr(v177 - 1, v175));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
  }
LABEL_253:
  v178 = __p[0];
  if (__p[1] != __p[0])
  {
    v179 = 0;
    v180 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v400, v161, v178[v179++]);
      v178 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v179);
    while (v180 != __p[1])
    {
      v181 = *v180++;
      gdc::Registry::destroy(v161, v181);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(v161);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::FlyoverRenderable>>(v161);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  md::LayoutContext::frameState(a2);
  v399 = *(unsigned __int8 *)(v182 + 128);
  v183 = *(uint64_t **)(v5 + 120);
  v394 = *((_QWORD *)a2 + 2);
  v184 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>((uint64_t)v183);
  v395 = v184[7];
  v393 = v184[8];
  if (v395 != v393)
  {
    v185 = (_QWORD *)v184[10];
    v403 = v183 + 15;
    v405 = (_QWORD *)(v5 + 168);
    v408 = (uint64_t)v183;
    while (1)
    {
      v186 = *(void **)(v5 + 208);
      *(_QWORD *)(v5 + 216) = v186;
      v396 = v185;
      v187 = v185[2];
      if (v187 > (uint64_t)(*(_QWORD *)(v5 + 224) - (_QWORD)v186) >> 4)
      {
        if (v187 >> 60)
          goto LABEL_534;
        v188 = 16 * v187;
        v189 = (char *)operator new(16 * v187);
        *(_QWORD *)(v5 + 208) = v189;
        *(_QWORD *)(v5 + 216) = v189;
        *(_QWORD *)(v5 + 224) = &v189[v188];
        if (v186)
          operator delete(v186);
      }
      v190 = *(_QWORD **)v394;
      v191 = *(_QWORD **)(v394 + 8);
      if (*(_QWORD **)v394 != v191)
      {
        while (*v190 != 0x41D4E9297E100630)
        {
          v190 += 5;
          if (v190 == v191)
          {
            v410 = 0;
            v192 = v396;
            goto LABEL_280;
          }
        }
      }
      v192 = v396;
      if (v190 == v191)
      {
        v410 = 0;
      }
      else
      {
        v193 = (std::__shared_weak_count *)v190[4];
        v410 = (md::VKMRenderResourcesStore *)v190[3];
        if (v193)
        {
          v194 = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
          do
            v196 = __ldaxr(v194);
          while (__stlxr(v196 - 1, v194));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
      }
LABEL_280:
      v197 = v192 + 1;
      v198 = (_QWORD *)*v192;
      v401 = v197;
      if (v198 != v197)
        break;
LABEL_263:
      v185 = v396 + 3;
      v395 += 8;
      if (v395 == v393)
        goto LABEL_463;
    }
    while (1)
    {
      v199 = v198[4];
      v200 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v405, (unsigned __int8 *)(v199 + 16));
      if (!v200)
        goto LABEL_312;
      v201 = v200;
      v203 = *(_QWORD **)(v5 + 144);
      v202 = *(_QWORD **)(v5 + 152);
      if (v203 == v202)
      {
        v204 = *(_QWORD *)(v5 + 144);
      }
      else
      {
        v204 = *(_QWORD *)(v5 + 144);
        while (*(uint64_t **)v204 != v200[16]
             || *(unsigned __int16 *)(v204 + 8) != *((unsigned __int16 *)v200 + 68)
             || *(unsigned __int16 *)(v204 + 10) != *((unsigned __int16 *)v200 + 69)
             || *(_DWORD *)(v204 + 12) != *((_DWORD *)v200 + 35))
        {
          v204 += 16;
          if ((_QWORD *)v204 == v202)
          {
            v204 = *(_QWORD *)(v5 + 152);
            break;
          }
        }
      }
      v205 = (_QWORD *)(v204 + 16);
      if ((_QWORD *)(v204 + 16) != v202)
      {
        v206 = (unint64_t)v202 - v204 - 32;
        if (v206 >= 0x30)
        {
          v207 = (v204 - (uint64_t)v203) >> 4;
          v208 = (v206 >> 4) + 1;
          v209 = 16 * (v208 & 0x1FFFFFFFFFFFFFFCLL);
          v204 += v209;
          v210 = (double *)&v203[2 * v207 + 4];
          v211 = v208 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v212 = v210 - 2;
            v434 = vld2q_f64(v212);
            v213 = v210 + 2;
            v436 = vld2q_f64(v213);
            v214 = v210 - 4;
            vst2q_f64(v214, v434);
            vst2q_f64(v210, v436);
            v210 += 8;
            v211 -= 4;
          }
          while (v211);
          if (v208 == (v208 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_301;
          v205 = (_QWORD *)((char *)v205 + v209);
        }
        do
        {
          *(_QWORD *)v204 = *v205;
          *(_QWORD *)(v204 + 8) = v205[1];
          v204 += 16;
          v205 += 2;
        }
        while (v205 != v202);
      }
LABEL_301:
      *(_QWORD *)(v5 + 152) = v204;
      v215 = v200[16];
      if (v215)
      {
        v216 = *(_QWORD *)(v5 + 136);
        if (*(_QWORD *)(v216 + 16))
        {
          (*(void (**)(uint64_t *))*v215)(v200[16]);
          *v215 = *(_QWORD *)(v216 + 40);
          *(_QWORD *)(v216 + 40) = v215;
        }
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v405, v201);
      v217 = __p[0];
      if (__p[0])
      {
        if (v415[0])
        {
          if (*((_BYTE *)__p[0] + 112))
            *((_BYTE *)__p[0] + 112) = 0;
          v218 = (void *)v217[4];
          if (v218 != (void *)v217[6])
            free(v218);
        }
        operator delete(v217);
      }
      v199 = v198[4];
LABEL_312:
      v412 = (std::__shared_weak_count *)v198[5];
      if (v412)
      {
        v219 = (unint64_t *)&v412->__shared_owners_;
        do
          v220 = __ldxr(v219);
        while (__stxr(v220 + 1, v219));
      }
      LOWORD(v430) = *(_WORD *)(v199 + 168);
      *(_QWORD *)((char *)&v430 + 4) = *(_QWORD *)(v199 + 172);
      v221 = *(double *)(v199 + 600);
      v222 = *(double *)(v199 + 608);
      md::GeometryContext::transformConstantData((double *)&v428, v398, (unsigned __int8 *)&v430, v399, v221, v222);
      v223 = *(_QWORD *)(v5 + 136);
      v224 = *((_BYTE *)v198 + 48);
      v225 = *(_QWORD *)(v223 + 40);
      if (!v225)
      {
        geo::Pool<md::FlyoverRenderable>::allocateSlab(*(uint64_t ***)(v5 + 136));
        v225 = *(_QWORD *)(v223 + 40);
      }
      *(_QWORD *)(v223 + 40) = *(_QWORD *)v225;
      md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(v225, v199, (uint64_t)v412, v224, (v399 - 1) < 3u, &v428);
      *(_QWORD *)v225 = &off_1E426F280;
      *(_QWORD *)(v225 + 384) = v199;
      *(_QWORD *)(v225 + 392) = v412;
      if (v412)
      {
        v226 = (unint64_t *)&v412->__shared_owners_;
        do
          v227 = __ldxr(v226);
        while (__stxr(v227 + 1, v226));
      }
      *(_QWORD *)v225 = &off_1E426EE88;
      v228 = gdc::Registry::create((gdc::Registry *)v183);
      v229 = v228;
      v231 = *(uint64_t **)(v5 + 216);
      v230 = *(_QWORD *)(v5 + 224);
      if ((unint64_t)v231 >= v230)
      {
        v233 = *(uint64_t **)(v5 + 208);
        v234 = ((char *)v231 - (char *)v233) >> 4;
        v235 = v234 + 1;
        if ((unint64_t)(v234 + 1) >> 60)
          goto LABEL_530;
        v236 = v230 - (_QWORD)v233;
        if (v236 >> 3 > v235)
          v235 = v236 >> 3;
        if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF0)
          v237 = 0xFFFFFFFFFFFFFFFLL;
        else
          v237 = v235;
        if (v237)
        {
          if (v237 >> 60)
            goto LABEL_531;
          v238 = (char *)operator new(16 * v237);
        }
        else
        {
          v238 = 0;
        }
        v239 = (uint64_t *)&v238[16 * v234];
        *v239 = v225;
        v239[1] = v229;
        v240 = v239;
        if (v231 != v233)
        {
          do
          {
            *((_OWORD *)v240 - 1) = *((_OWORD *)v231 - 1);
            v240 -= 2;
            v231 -= 2;
          }
          while (v231 != v233);
          v231 = *(uint64_t **)(v5 + 208);
        }
        v232 = v239 + 2;
        *(_QWORD *)(v5 + 208) = v240;
        *(_QWORD *)(v5 + 216) = v239 + 2;
        *(_QWORD *)(v5 + 224) = &v238[16 * v237];
        if (v231)
          operator delete(v231);
        v183 = (uint64_t *)v408;
      }
      else
      {
        *v231 = v225;
        v231[1] = v228;
        v232 = v231 + 2;
      }
      *(_QWORD *)(v5 + 216) = v232;
      v242 = *(uint64_t **)(v5 + 152);
      v241 = *(_QWORD *)(v5 + 160);
      if ((unint64_t)v242 >= v241)
      {
        v244 = *(uint64_t **)(v5 + 144);
        v245 = ((char *)v242 - (char *)v244) >> 4;
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 60)
LABEL_530:
          abort();
        v247 = v241 - (_QWORD)v244;
        if (v247 >> 3 > v246)
          v246 = v247 >> 3;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF0)
          v248 = 0xFFFFFFFFFFFFFFFLL;
        else
          v248 = v246;
        if (v248)
        {
          if (v248 >> 60)
            goto LABEL_531;
          v249 = (char *)operator new(16 * v248);
        }
        else
        {
          v249 = 0;
        }
        v250 = (uint64_t *)&v249[16 * v245];
        *v250 = v225;
        v250[1] = v229;
        v251 = v250;
        if (v242 != v244)
        {
          do
          {
            *((_OWORD *)v251 - 1) = *((_OWORD *)v242 - 1);
            v251 -= 2;
            v242 -= 2;
          }
          while (v242 != v244);
          v242 = *(uint64_t **)(v5 + 144);
        }
        v243 = v250 + 2;
        *(_QWORD *)(v5 + 144) = v251;
        *(_QWORD *)(v5 + 152) = v250 + 2;
        *(_QWORD *)(v5 + 160) = &v249[16 * v248];
        if (v242)
          operator delete(v242);
        v183 = (uint64_t *)v408;
      }
      else
      {
        *v242 = v225;
        v242[1] = v229;
        v243 = v242 + 2;
      }
      *(_QWORD *)(v5 + 152) = v243;
      if (v199)
        v252 = (uint64_t (***)(_QWORD))(v199 + 632);
      else
        v252 = 0;
      if (v412)
      {
        v253 = (unint64_t *)&v412->__shared_owners_;
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
      }
      v255 = (**v252)(v252);
      __p[0] = (void *)md::VKMRenderResourcesStore::createRenderableRegistryHandle(v410, v255);
      v256 = (uint64_t *)gdc::Registry::storage<md::ls::RegisterHandle>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v256, v229, __p);
      v432[0] = 0xC0EE0F99A0E95F19;
      v257 = (int8x8_t)v183[16];
      if (v257)
      {
        v258 = (uint8x8_t)vcnt_s8(v257);
        v258.i16[0] = vaddlv_u8(v258);
        if (v258.u32[0] > 1uLL)
        {
          v259 = 0xC0EE0F99A0E95F19;
          if (*(_QWORD *)&v257 <= 0xC0EE0F99A0E95F19)
            v259 = 0xC0EE0F99A0E95F19 % *(_QWORD *)&v257;
        }
        else
        {
          v259 = (*(_QWORD *)&v257 - 1) & 0xC0EE0F99A0E95F19;
        }
        v260 = *(_QWORD **)(*v403 + 8 * v259);
        if (v260)
        {
          v261 = (_QWORD *)*v260;
          if (v261)
          {
            if (v258.u32[0] < 2uLL)
            {
              v262 = *(_QWORD *)&v257 - 1;
              while (1)
              {
                v264 = v261[1];
                if (v264 == 0xC0EE0F99A0E95F19)
                {
                  if (v261[2] == 0xC0EE0F99A0E95F19)
                    goto LABEL_407;
                }
                else if ((v264 & v262) != v259)
                {
                  goto LABEL_382;
                }
                v261 = (_QWORD *)*v261;
                if (!v261)
                  goto LABEL_382;
              }
            }
            do
            {
              v263 = v261[1];
              if (v263 == 0xC0EE0F99A0E95F19)
              {
                if (v261[2] == 0xC0EE0F99A0E95F19)
                {
LABEL_407:
                  v265 = v261[3];
                  goto LABEL_385;
                }
              }
              else
              {
                if (v263 >= *(_QWORD *)&v257)
                  v263 %= *(_QWORD *)&v257;
                if (v263 != v259)
                  break;
              }
              v261 = (_QWORD *)*v261;
            }
            while (v261);
          }
        }
      }
LABEL_382:
      v265 = operator new();
      *(_QWORD *)(v265 + 16) = "md::ls::MapDataTypeT<md::MapDataType::Flyover>]";
      *(_QWORD *)(v265 + 24) = 46;
      *(_OWORD *)(v265 + 32) = 0u;
      *(_OWORD *)(v265 + 48) = 0u;
      *(_OWORD *)(v265 + 64) = 0u;
      *(_OWORD *)(v265 + 80) = 0u;
      *(_OWORD *)(v265 + 96) = 0u;
      *(_OWORD *)(v265 + 112) = 0u;
      *(_OWORD *)(v265 + 128) = 0u;
      *(_DWORD *)(v265 + 144) = 1065353216;
      *(_OWORD *)(v265 + 152) = 0u;
      *(_OWORD *)(v265 + 168) = 0u;
      *(_QWORD *)(v265 + 184) = 0;
      *(_DWORD *)(v265 + 192) = 1065353216;
      *(_OWORD *)(v265 + 200) = 0u;
      *(_OWORD *)(v265 + 216) = 0u;
      *(_QWORD *)(v265 + 232) = 0;
      *(_DWORD *)(v265 + 240) = 1065353216;
      *(_QWORD *)v265 = &off_1E4271358;
      *(_QWORD *)(v265 + 8) = 0xC0EE0F99A0E95F19;
      *(_QWORD *)(v265 + 248) = v183;
      v266 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v403, 0xC0EE0F99A0E95F19, v432);
      v267 = v266[3];
      v266[3] = v265;
      if (v267)
        (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
      __p[0] = (void *)0xC0EE0F99A0E95F19;
      __p[1] = "md::ls::MapDataTypeT<md::MapDataType::Flyover>]";
      *(_QWORD *)v415 = 46;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v183, 0xC0EE0F99A0E95F19, (uint64_t)__p, (uint64_t *)(v265 + 104));
LABEL_385:
      v431 = v229;
      v268 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v265 + 32), (uint64_t)&v431);
      if ((v269 & 1) != 0)
      {
        v275 = *(_BYTE **)(v265 + 88);
        v274 = *(_QWORD *)(v265 + 96);
        if ((unint64_t)v275 < v274)
        {
          *v275 = 0;
          v276 = (uint64_t)(v275 + 1);
LABEL_422:
          *(_QWORD *)(v265 + 88) = v276;
          v271 = *(_QWORD *)(v265 + 248);
          v183 = (uint64_t *)v408;
          goto LABEL_423;
        }
        v277 = *(_BYTE **)(v265 + 80);
        v278 = v275 - v277;
        v279 = v275 - v277 + 1;
        if (v279 < 0)
          abort();
        v280 = v274 - (_QWORD)v277;
        if (2 * v280 > v279)
          v279 = 2 * v280;
        if (v280 >= 0x3FFFFFFFFFFFFFFFLL)
          v281 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v281 = v279;
        if (v281)
        {
          v282 = v281;
          v283 = (char *)operator new(v281);
          v281 = v282;
        }
        else
        {
          v283 = 0;
        }
        v284 = &v283[v278];
        v283[v278] = 0;
        v276 = (uint64_t)&v283[v278 + 1];
        if (v275 == v277)
          goto LABEL_420;
        if (v278 >= 8 && (unint64_t)(v277 - v283) >= 0x20)
        {
          if (v278 < 0x20)
          {
            v285 = 0;
LABEL_412:
            v290 = v285 - (v278 & 0xFFFFFFFFFFFFFFF8);
            v291 = &v275[-v285];
            v292 = &v283[&v275[-v285] - v277 - 8];
            v293 = (uint64_t *)(v291 - 8);
            do
            {
              v294 = *v293--;
              *(_QWORD *)v292 = v294;
              v292 -= 8;
              v290 += 8;
            }
            while (v290);
            if (v278 != (v278 & 0xFFFFFFFFFFFFFFF8))
            {
              v284 -= v278 & 0xFFFFFFFFFFFFFFF8;
              v275 -= v278 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_417;
            }
LABEL_419:
            v284 = v283;
LABEL_420:
            *(_QWORD *)(v265 + 80) = v284;
            *(_QWORD *)(v265 + 88) = v276;
            *(_QWORD *)(v265 + 96) = &v283[v281];
            if (v277)
              operator delete(v277);
            goto LABEL_422;
          }
          v285 = v278 & 0xFFFFFFFFFFFFFFE0;
          v286 = &v283[v278 - 16];
          v287 = (__int128 *)(v275 - 16);
          v288 = v278 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v289 = *v287;
            *((_OWORD *)v286 - 1) = *(v287 - 1);
            *(_OWORD *)v286 = v289;
            v286 -= 32;
            v287 -= 2;
            v288 -= 32;
          }
          while (v288);
          if (v278 == v285)
            goto LABEL_419;
          if ((v278 & 0x18) != 0)
            goto LABEL_412;
          v284 -= v285;
          v275 -= v285;
        }
LABEL_417:
        v295 = v284 - 1;
        do
        {
          v296 = *--v275;
          *v295-- = v296;
        }
        while (v275 != v277);
        goto LABEL_419;
      }
      v270 = (_BYTE *)(*(_QWORD *)(v265 + 80) + (((uint64_t)v268 - *(_QWORD *)(v265 + 56)) >> 3));
      *v270 = 0;
      v271 = *(_QWORD *)(v265 + 248);
      if (v270 != *(_BYTE **)(v265 + 88))
      {
        v272 = *(_QWORD **)(v265 + 128);
        if (v272)
        {
          while (1)
          {
            __p[0] = &v431;
            __p[1] = (void *)1;
            v432[0] = v271;
            v273 = v272[6];
            if (!v273)
              goto LABEL_529;
            (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v273 + 48))(v273, v432, __p);
            v272 = (_QWORD *)*v272;
            if (!v272)
              goto LABEL_426;
          }
        }
        goto LABEL_426;
      }
LABEL_423:
      v297 = *(_QWORD **)(v265 + 176);
      if (v297)
      {
        while (1)
        {
          __p[0] = &v431;
          __p[1] = (void *)1;
          v432[0] = v271;
          v298 = v297[6];
          if (!v298)
            break;
          (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v298 + 48))(v298, v432, __p);
          v297 = (_QWORD *)*v297;
          if (!v297)
            goto LABEL_426;
        }
LABEL_529:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_534:
        abort();
      }
LABEL_426:
      LOWORD(__p[0]) = 75;
      v299 = (uint64_t *)gdc::Registry::storage<md::ls::MapDataTypeV>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(v299, v229, __p);
      __p[0] = (void *)((uint64_t)(*(_QWORD *)(v5 + 152) - *(_QWORD *)(v5 + 144)) >> 4);
      v300 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v300, v229, __p);
      LODWORD(__p[0]) = 0;
      *(_OWORD *)v415 = 0uLL;
      __p[1] = 0;
      v301 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablesCount>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(v301, v229, (uint64_t)__p);
      if (__p[1])
        operator delete(__p[1]);
      v302 = (uint64_t *)gdc::Registry::storage<md::ls::WillEnterView>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v302, v229);
      v303 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)75>>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v303, v229);
      __p[0] = (void *)md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(v410, (md::BaseMapTileDataRenderable *)v225);
      v304 = (uint64_t *)gdc::Registry::storage<md::ls::BaseMapTileHandle>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v304, v229, __p);
      v305 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v305, v229);
      LOBYTE(__p[0]) = *(_BYTE *)(v225 + 24);
      v306 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v306, v229, __p);
      BYTE2(v432[0]) = 0;
      LOWORD(v432[0]) = 0;
      v308 = DWORD1(v430);
      v307 = DWORD2(v430);
      v309 = vcvtmd_s64_f64(v221 * 100.0);
      v310 = BYTE1(v430);
      v311 = vcvtpd_s64_f64(v222 * 100.0);
      v421 = *(gdc::Registry **)((char *)&v430 + 4);
      v422 = BYTE1(v430);
      v423 = 0;
      v424 = 0;
      v425 = v309;
      v426 = v311;
      v427 = -1;
      v312 = (void *)md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(v410, (int *)&v421);
      if (v313)
      {
        v314 = v312;
        __p[0] = v312;
        v315 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v408);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v315, v229, __p);
        __p[0] = v314;
        v316 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)v410 + 3272, (unint64_t)v314, __p);
        ++v316[4];
        v183 = (uint64_t *)v408;
      }
      else
      {
        v317 = v428;
        v318 = v429;
        if (v429)
        {
          v319 = (unint64_t *)&v429->__shared_owners_;
          do
            v320 = __ldxr(v319);
          while (__stxr(v320 + 1, v319));
        }
        v321 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>((uint64_t)v410, v317, v318);
        if (v318)
        {
          v322 = (unint64_t *)&v318->__shared_owners_;
          do
            v323 = __ldaxr(v322);
          while (__stlxr(v323 - 1, v322));
          if (!v323)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
        }
        __p[0] = (void *)__PAIR64__(v307, v308);
        LOBYTE(__p[1]) = v310;
        *(_WORD *)((char *)&__p[1] + 1) = v432[0];
        BYTE3(__p[1]) = BYTE2(v432[0]);
        HIDWORD(__p[1]) = v309;
        *(_DWORD *)v415 = v311;
        *(_DWORD *)&v415[4] = -1;
        *(_QWORD *)&v415[8] = v321;
        std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>((float *)v410 + 2656, (int *)__p, (uint64_t)__p);
        __p[0] = v321;
        v183 = (uint64_t *)v408;
        v324 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v408);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v324, v229, __p);
      }
      v5 = v406;
      __p[0] = (void *)md::VKMRenderResourcesStore::createAssociationtemHandle(v410);
      v325 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationTileHandle>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v325, v229, __p);
      __p[0] = (void *)md::VKMRenderResourcesStore::createSharedTileMatrix((uint64_t)v410, (__int128 *)(v225 + 88));
      v326 = (uint64_t *)gdc::Registry::storage<md::ls::TileMatrix>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v326, v229, __p);
      v327 = *(_QWORD *)(v225 + 384);
      v328 = *(_OWORD *)(v327 + 424);
      v417 = *(_OWORD *)(v327 + 408);
      v418 = v328;
      v329 = *(_OWORD *)(v327 + 456);
      v419 = *(_OWORD *)(v327 + 440);
      v420 = v329;
      v330 = *(_OWORD *)(v327 + 360);
      *(_OWORD *)__p = *(_OWORD *)(v327 + 344);
      *(_OWORD *)v415 = v330;
      v331 = *(_OWORD *)(v327 + 392);
      *(_OWORD *)&v415[16] = *(_OWORD *)(v327 + 376);
      v416 = v331;
      v332 = (uint64_t *)gdc::Registry::storage<md::ls::GlobeMatrixData>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::emplace(v332, v229, (__int128 *)__p);
      if (*(unsigned __int8 *)(v225 + 24) == 255)
      {
        LOWORD(__p[0]) = *(_WORD *)(v327 + 816);
        *(void **)((char *)__p + 4) = *(void **)(v327 + 820);
        *(_OWORD *)&v415[8] = *(_OWORD *)(v327 + 840);
      }
      else
      {
        LOWORD(__p[0]) = *(_WORD *)(v327 + 168);
        *(void **)((char *)__p + 4) = *(void **)(v327 + 172);
        v415[8] = 4;
        *(_QWORD *)&v415[12] = 0;
        *(_DWORD *)&v415[20] = 0;
      }
      v333 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverOctileKey>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::emplace(v333, v229, (__int128 *)__p);
      v334 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v334, v229);
      if (!v412)
        goto LABEL_446;
      v335 = (unint64_t *)&v412->__shared_owners_;
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 - 1, v335));
      if (!v336)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
        v337 = v429;
        if (!v429)
          goto LABEL_452;
      }
      else
      {
LABEL_446:
        v337 = v429;
        if (!v429)
          goto LABEL_452;
      }
      v338 = (unint64_t *)&v337->__shared_owners_;
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
        std::__shared_weak_count::__release_weak(v337);
      }
      if (!v412)
        goto LABEL_456;
LABEL_452:
      v340 = (unint64_t *)&v412->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
        v342 = (_QWORD *)v198[1];
        if (!v342)
        {
          do
          {
LABEL_460:
            v343 = (_QWORD *)v198[2];
            v158 = *v343 == (_QWORD)v198;
            v198 = v343;
          }
          while (!v158);
          goto LABEL_282;
        }
      }
      else
      {
LABEL_456:
        v342 = (_QWORD *)v198[1];
        if (!v342)
          goto LABEL_460;
      }
      do
      {
        v343 = v342;
        v342 = (_QWORD *)*v342;
      }
      while (v342);
LABEL_282:
      v198 = v343;
      if (v343 == v401)
        goto LABEL_263;
    }
  }
LABEL_463:
  v421 = *(gdc::Registry **)(v5 + 120);
  v344 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>((uint64_t)v421);
  v345 = v344[7];
  v413 = v344[8];
  if (v345 != v413)
  {
    v346 = v344[10];
    v347 = (_QWORD *)(v5 + 168);
    v348 = (uint64_t ***)(v346 + 8);
    do
    {
      v355 = v5;
      v356 = *(char **)(v5 + 144);
      v349 = *(char **)(v355 + 152);
      if (v356 != v349)
      {
        while (1)
        {
          v357 = *(_QWORD *)(*(_QWORD *)v356 + 384);
          v358 = *(std::__shared_weak_count **)(*(_QWORD *)v356 + 392);
          if (v358)
          {
            v359 = (unint64_t *)&v358->__shared_owners_;
            do
              v360 = __ldxr(v359);
            while (__stxr(v360 + 1, v359));
            v361 = *(unsigned __int8 *)(*(_QWORD *)v356 + 48);
            do
              v362 = __ldxr(v359);
            while (__stxr(v362 + 1, v359));
            for (n = *(uint64_t ***)(v346 + 8); n; n = (uint64_t **)*n)
            {
LABEL_480:
              v365 = *((unsigned __int8 *)n + 48);
              v366 = *((char *)n + 48) > (char)v361;
              v367 = (unint64_t)n[4];
              if (v361 == v365)
                v366 = v357 < v367;
              if (!v366)
              {
                v368 = v367 < v357;
                if (v361 == v365)
                  v369 = v368;
                else
                  v369 = (char)v365 < (char)v361;
                if (!v369)
                {
                  v364 = 1;
                  if (v358)
                    goto LABEL_488;
                  goto LABEL_495;
                }
                ++n;
              }
            }
          }
          else
          {
            v361 = *(unsigned __int8 *)(*(_QWORD *)v356 + 48);
            n = *(uint64_t ***)(v346 + 8);
            if (n)
              goto LABEL_480;
          }
          v364 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v347, (unsigned __int8 *)(v357 + 16)) != 0;
          if (v358)
          {
LABEL_488:
            v370 = (unint64_t *)&v358->__shared_owners_;
            do
              v371 = __ldaxr(v370);
            while (__stlxr(v371 - 1, v370));
            if (!v371)
            {
              ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
              std::__shared_weak_count::__release_weak(v358);
            }
            do
              v372 = __ldaxr(v370);
            while (__stlxr(v372 - 1, v370));
            if (!v372)
            {
              ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
              std::__shared_weak_count::__release_weak(v358);
            }
          }
LABEL_495:
          if (!v364)
            break;
LABEL_496:
          v356 += 16;
          if (v356 == v349)
            goto LABEL_466;
        }
        while (1)
        {
          v373 = v349;
          v349 -= 16;
          if (v356 == v349)
            break;
          v374 = *(_QWORD *)(*(_QWORD *)v349 + 384);
          v375 = *(std::__shared_weak_count **)(*(_QWORD *)v349 + 392);
          if (v375)
          {
            v376 = (unint64_t *)&v375->__shared_owners_;
            do
              v377 = __ldxr(v376);
            while (__stxr(v377 + 1, v376));
            v378 = *(unsigned __int8 *)(*(_QWORD *)v349 + 48);
            do
              v379 = __ldxr(v376);
            while (__stxr(v379 + 1, v376));
            for (ii = *v348; ii; ii = (uint64_t **)*ii)
            {
LABEL_511:
              v382 = *((unsigned __int8 *)ii + 48);
              v383 = *((char *)ii + 48) > (char)v378;
              v384 = (unint64_t)ii[4];
              if (v378 == v382)
                v383 = v374 < v384;
              if (!v383)
              {
                v385 = v384 < v374;
                if (v378 == v382)
                  v386 = v385;
                else
                  v386 = (char)v382 < (char)v378;
                if (!v386)
                {
                  v381 = 1;
                  if (v375)
                    goto LABEL_520;
                  goto LABEL_498;
                }
                ++ii;
              }
            }
          }
          else
          {
            v378 = *(unsigned __int8 *)(*(_QWORD *)v349 + 48);
            ii = *v348;
            if (*v348)
              goto LABEL_511;
          }
          v381 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v347, (unsigned __int8 *)(v374 + 16)) != 0;
          if (v375)
          {
LABEL_520:
            v387 = (unint64_t *)&v375->__shared_owners_;
            do
              v388 = __ldaxr(v387);
            while (__stlxr(v388 - 1, v387));
            if (!v388)
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
            do
              v389 = __ldaxr(v387);
            while (__stlxr(v389 - 1, v387));
            if (!v389)
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
          }
LABEL_498:
          if (v381)
          {
            v390 = *(_QWORD *)v356;
            *(_QWORD *)v356 = *((_QWORD *)v373 - 2);
            *((_QWORD *)v373 - 2) = v390;
            v391 = *((_QWORD *)v356 + 1);
            *((_QWORD *)v356 + 1) = *((_QWORD *)v373 - 1);
            *((_QWORD *)v373 - 1) = v391;
            goto LABEL_496;
          }
        }
      }
      v349 = v356;
LABEL_466:
      v5 = v406;
      v350 = *(void **)(v406 + 152);
      v351 = v421;
      __p[0] = v349;
      __p[1] = v350;
      v430 = *(_OWORD *)(v406 + 208);
      v352 = gdc::Registry::create(v421);
      v353 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::FlyoverRenderable>>((uint64_t)v351);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v353, v352, __p);
      v354 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillEnterView<md::FlyoverRenderable>>((uint64_t)v351);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v354, v352, &v430);
      v346 += 24;
      v345 += 8;
      v348 += 3;
    }
    while (v345 != v413);
  }
  *v392 = *(_QWORD *)(v5 + 120);
}

void sub_19F46B9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAD537A7989D93465;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAD537A7989D93465;
      if (*(_QWORD *)&v3 <= 0xAD537A7989D93465)
        v5 = 0xAD537A7989D93465 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAD537A7989D93465;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAD537A7989D93465)
            {
              if (v7[2] == 0xAD537A7989D93465)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAD537A7989D93465)
          {
            if (v7[2] == 0xAD537A7989D93465)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 64;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270D28;
  *(_QWORD *)(v11 + 8) = 0xAD537A7989D93465;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAD537A7989D93465, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAD537A7989D93465;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::Flyover>]";
  v15[2] = 64;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAD537A7989D93465, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46BE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x41D54313046A9EA4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x41D54313046A9EA4;
      if (*(_QWORD *)&v3 <= 0x41D54313046A9EA4uLL)
        v5 = 0x41D54313046A9EA4uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x41D54313046A9EA4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x41D54313046A9EA4)
            {
              if (v7[2] == 0x41D54313046A9EA4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x41D54313046A9EA4)
          {
            if (v7[2] == 0x41D54313046A9EA4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270A28;
  *(_QWORD *)(v11 + 8) = 0x41D54313046A9EA4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x41D54313046A9EA4uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x41D54313046A9EA4;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::Flyover>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x41D54313046A9EA4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46C0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xDCB65735B104E73;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDCB65735B104E73;
      if (*(_QWORD *)&v3 <= 0xDCB65735B104E73uLL)
        v5 = 0xDCB65735B104E73uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDCB65735B104E73;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDCB65735B104E73)
            {
              if (v7[2] == 0xDCB65735B104E73)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDCB65735B104E73)
          {
            if (v7[2] == 0xDCB65735B104E73)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::WillLeaveView<md::FlyoverRenderable>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270878;
  *(_QWORD *)(v11 + 8) = 0xDCB65735B104E73;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDCB65735B104E73uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDCB65735B104E73;
  v15[1] = "SceneComponents::WillLeaveView<md::FlyoverRenderable>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDCB65735B104E73, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46C2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::WillEnterView<md::FlyoverRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBCDB6C1F639FCC2CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBCDB6C1F639FCC2CLL;
      if (*(_QWORD *)&v3 <= 0xBCDB6C1F639FCC2CLL)
        v5 = 0xBCDB6C1F639FCC2CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBCDB6C1F639FCC2CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBCDB6C1F639FCC2CLL)
            {
              if (v7[2] == 0xBCDB6C1F639FCC2CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBCDB6C1F639FCC2CLL)
          {
            if (v7[2] == 0xBCDB6C1F639FCC2CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::WillEnterView<md::FlyoverRenderable>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270848;
  *(_QWORD *)(v11 + 8) = 0xBCDB6C1F639FCC2CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBCDB6C1F639FCC2CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBCDB6C1F639FCC2CLL;
  v15[1] = "SceneComponents::WillEnterView<md::FlyoverRenderable>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBCDB6C1F639FCC2CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46C514(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

char *geo::Pool<md::FlyoverRenderable>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 400 * (_QWORD)a1[3] - 400;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    do
    {
      *(_QWORD *)v13 = v11;
      v14 = v13 - 400;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 400);
  }
  a1[5] = v11;
  return result;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA7448A9385809AE4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA7448A9385809AE4;
      if (*(_QWORD *)&v3 <= 0xA7448A9385809AE4)
        v5 = 0xA7448A9385809AE4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA7448A9385809AE4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA7448A9385809AE4)
            {
              if (v7[2] == 0xA7448A9385809AE4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA7448A9385809AE4)
          {
            if (v7[2] == 0xA7448A9385809AE4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataActive<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270968;
  *(_QWORD *)(v11 + 8) = 0xA7448A9385809AE4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA7448A9385809AE4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA7448A9385809AE4;
  v15[1] = "SceneComponents::LayerDataActive<md::MapDataType::Flyover>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA7448A9385809AE4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46CCBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xFC370D9176A00DEBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xFC370D9176A00DEBLL;
      if (*(_QWORD *)&v3 <= 0xFC370D9176A00DEBLL)
        v5 = 0xFC370D9176A00DEBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xFC370D9176A00DEBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xFC370D9176A00DEBLL)
            {
              if (v7[2] == 0xFC370D9176A00DEBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xFC370D9176A00DEBLL)
          {
            if (v7[2] == 0xFC370D9176A00DEBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileRenderableTypeT<md::FlyoverRenderable>]";
  *(_QWORD *)(v11 + 24) = 50;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42723D8;
  *(_QWORD *)(v11 + 8) = 0xFC370D9176A00DEBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xFC370D9176A00DEBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xFC370D9176A00DEBLL;
  v15[1] = "md::ls::TileRenderableTypeT<md::FlyoverRenderable>]";
  v15[2] = 50;
  gdc::Registry::_registerStorageDataSignals(a1, 0xFC370D9176A00DEBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46CEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::GlobeMatrixData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x93E8A4F5122D6D07;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x93E8A4F5122D6D07;
      if (*(_QWORD *)&v3 <= 0x93E8A4F5122D6D07)
        v5 = 0x93E8A4F5122D6D07 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x93E8A4F5122D6D07;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x93E8A4F5122D6D07)
            {
              if (v7[2] == 0x93E8A4F5122D6D07)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x93E8A4F5122D6D07)
          {
            if (v7[2] == 0x93E8A4F5122D6D07)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::GlobeMatrixData]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42719B8;
  *(_QWORD *)(v11 + 8) = 0x93E8A4F5122D6D07;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x93E8A4F5122D6D07, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x93E8A4F5122D6D07;
  v15[1] = "md::ls::GlobeMatrixData]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x93E8A4F5122D6D07, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46D10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v40 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v40);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v20 = (char *)a1[10];
      v21 = (v12 - v20) >> 7;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 57)
        goto LABEL_30;
      v23 = v11 - (_QWORD)v20;
      if (v23 >> 6 > v22)
        v22 = v23 >> 6;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80)
        v24 = 0x1FFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 57)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = (char *)operator new(v24 << 7);
      }
      else
      {
        v25 = 0;
      }
      v26 = a3[5];
      v27 = &v25[128 * v21];
      *((_OWORD *)v27 + 4) = a3[4];
      *((_OWORD *)v27 + 5) = v26;
      v28 = a3[7];
      *((_OWORD *)v27 + 6) = a3[6];
      *((_OWORD *)v27 + 7) = v28;
      v29 = a3[1];
      *(_OWORD *)v27 = *a3;
      *((_OWORD *)v27 + 1) = v29;
      v30 = a3[2];
      v31 = a3[3];
      v19 = v27 + 128;
      *((_OWORD *)v27 + 2) = v30;
      *((_OWORD *)v27 + 3) = v31;
      if (v12 != v20)
      {
        do
        {
          v32 = *((_OWORD *)v12 - 8);
          v33 = *((_OWORD *)v12 - 7);
          v34 = *((_OWORD *)v12 - 5);
          *((_OWORD *)v27 - 6) = *((_OWORD *)v12 - 6);
          *((_OWORD *)v27 - 5) = v34;
          *((_OWORD *)v27 - 8) = v32;
          *((_OWORD *)v27 - 7) = v33;
          v35 = *((_OWORD *)v12 - 4);
          v36 = *((_OWORD *)v12 - 3);
          v37 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v27 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v27 - 1) = v37;
          *((_OWORD *)v27 - 4) = v35;
          *((_OWORD *)v27 - 3) = v36;
          v27 -= 128;
          v12 -= 128;
        }
        while (v12 != v20);
        v12 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v27;
      a1[11] = (uint64_t)v19;
      a1[12] = (uint64_t)&v25[128 * v24];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *a3;
      v14 = a3[1];
      v15 = a3[3];
      *((_OWORD *)v12 + 2) = a3[2];
      *((_OWORD *)v12 + 3) = v15;
      *(_OWORD *)v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      v16 = a3[4];
      v17 = a3[5];
      v18 = a3[7];
      *((_OWORD *)v12 + 6) = a3[6];
      *((_OWORD *)v12 + 7) = v18;
      *((_OWORD *)v12 + 4) = v16;
      *((_OWORD *)v12 + 5) = v17;
      v19 = v12 + 128;
    }
    a1[11] = (uint64_t)v19;
    v8 = a1[31];
  }
  else
  {
    v7 = (_QWORD *)(a1[10] + 16 * ((_QWORD)v5 - a1[7]));
    *v7 = *(_QWORD *)a3;
    v7[1] = *((_QWORD *)a3 + 1);
    v7[2] = *((_QWORD *)a3 + 2);
    v7[3] = *((_QWORD *)a3 + 3);
    v7[4] = *((_QWORD *)a3 + 4);
    v7[5] = *((_QWORD *)a3 + 5);
    v7[6] = *((_QWORD *)a3 + 6);
    v7[7] = *((_QWORD *)a3 + 7);
    v7[8] = *((_QWORD *)a3 + 8);
    v7[9] = *((_QWORD *)a3 + 9);
    v7[10] = *((_QWORD *)a3 + 10);
    v7[11] = *((_QWORD *)a3 + 11);
    v7[12] = *((_QWORD *)a3 + 12);
    v7[13] = *((_QWORD *)a3 + 13);
    v7[14] = *((_QWORD *)a3 + 14);
    v7[15] = *((_QWORD *)a3 + 15);
    v8 = a1[31];
    if (v7 != (_QWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v42 = &v40;
          v43 = 1;
          v41 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v41, &v42);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v38 = (_QWORD *)a1[22];
  if (v38)
  {
    while (1)
    {
      v42 = &v40;
      v43 = 1;
      v41 = v8;
      v39 = v38[6];
      if (!v39)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v39 + 48))(v39, &v41, &v42);
      v38 = (_QWORD *)*v38;
      if (!v38)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::FlyoverOctileKey>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x53EA4A91D91C8985;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x53EA4A91D91C8985;
      if (*(_QWORD *)&v3 <= 0x53EA4A91D91C8985uLL)
        v5 = 0x53EA4A91D91C8985uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x53EA4A91D91C8985;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x53EA4A91D91C8985)
            {
              if (v7[2] == 0x53EA4A91D91C8985)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x53EA4A91D91C8985)
          {
            if (v7[2] == 0x53EA4A91D91C8985)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverOctileKey]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271B38;
  *(_QWORD *)(v11 + 8) = 0x53EA4A91D91C8985;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x53EA4A91D91C8985uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x53EA4A91D91C8985;
  v15[1] = "md::ls::FlyoverOctileKey]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x53EA4A91D91C8985, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46D5B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _WORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v27 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v27);
  if ((v6 & 1) != 0)
  {
    v14 = (char *)a1[11];
    v13 = a1[12];
    if ((unint64_t)v14 >= v13)
    {
      v16 = (char *)a1[10];
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v16) >> 3) + 1;
      if (v17 > 0x666666666666666)
        goto LABEL_33;
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)v16) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x333333333333333)
        v19 = 0x666666666666666;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(40 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * ((v14 - v16) >> 3)];
      *(_WORD *)v21 = *(_WORD *)a3;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)a3 + 4);
      *(_OWORD *)(v21 + 24) = *(__int128 *)((char *)a3 + 24);
      v15 = v21 + 40;
      if (v14 != v16)
      {
        v22 = 0;
        do
        {
          v23 = &v21[v22];
          *((_WORD *)v23 - 20) = *(_WORD *)&v14[v22 - 40];
          *(_QWORD *)(v23 - 36) = *(_QWORD *)&v14[v22 - 36];
          *((_OWORD *)v23 - 1) = *(_OWORD *)&v14[v22 - 16];
          v22 -= 40;
        }
        while (&v14[v22] != v16);
        v21 += v22;
        v14 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v21;
      a1[11] = (uint64_t)v15;
      a1[12] = (uint64_t)&v20[40 * v19];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_WORD *)v14 = *(_WORD *)a3;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)((char *)a3 + 4);
      *(_OWORD *)(v14 + 24) = *(__int128 *)((char *)a3 + 24);
      v15 = v14 + 40;
    }
    a1[11] = (uint64_t)v15;
  }
  else
  {
    v7 = a1[10] + 40 * (((uint64_t)v5 - a1[7]) >> 3);
    v8 = *a3;
    v9 = a3[1];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    if (v7 != a1[11])
    {
      v10 = (_QWORD *)a1[16];
      if (v10)
      {
        v11 = a1[31];
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v11;
          v12 = v10[6];
          if (!v12)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v12 + 48))(v12, &v28, &v29);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_32:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_33:
        abort();
      }
      return;
    }
  }
  v24 = (_QWORD *)a1[22];
  if (v24)
  {
    v25 = a1[31];
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v25;
      v26 = v24[6];
      if (!v26)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v26 + 48))(v26, &v28, &v29);
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
    }
    goto LABEL_32;
  }
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 40 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 40);
  v17 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  a1[11] -= 40;
  v18 = (_QWORD *)a1[28];
  if (!v18)
    return 1;
  v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v19;
    v20 = v18[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v24, v25);
    v18 = (_QWORD *)*v18;
    if (!v18)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::contains(v21, v22);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + (v7 << 7));
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v16 = *(v15 - 16);
  v15 -= 16;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  v14[13] = v15[13];
  v14[14] = v15[14];
  v14[15] = v15[15];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  v2 = (_QWORD *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(a1);
  v4 = v2[10];
  v3 = v2[11];
  v5 = v3 - v4;
  v29 = a1;
  if (v3 == v4)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new((unint64_t)v5 >> 1);
    v7 = &v6[8 * (v5 >> 4)];
    v8 = v6;
  }
  v10 = (uint64_t *)v2[7];
  v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    v11 = v8;
    while (1)
    {
      v12 = *v10;
      if (v11 >= v7)
        break;
      *(_QWORD *)v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          v27 = (unint64_t *)v8;
          do
          {
            v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    v13 = (v11 - v8) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    if ((v7 - v8) >> 2 > v14)
      v14 = (v7 - v8) >> 2;
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v13];
    *(_QWORD *)v17 = v12;
    v18 = v17 + 8;
    if (v11 != v8)
    {
      v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          v22 = (v19 >> 3) + 1;
          v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          v23 = &v16[8 * v13 - 16];
          v24 = v11 - 16;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_24;
        }
        else
        {
          v20 = v11;
        }
      }
      else
      {
        v20 = v11;
      }
      do
      {
        v21 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    v7 = &v16[8 * v15];
    if (v8)
      operator delete(v8);
    v8 = v17;
    v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
    operator delete(v8);
}

void sub_19F46E3A4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::FlyoverRenderable>>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  v2 = (_QWORD *)gdc::Registry::storage<SceneComponents::WillEnterView<md::FlyoverRenderable>>(a1);
  v4 = v2[10];
  v3 = v2[11];
  v5 = v3 - v4;
  v29 = a1;
  if (v3 == v4)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new((unint64_t)v5 >> 1);
    v7 = &v6[8 * (v5 >> 4)];
    v8 = v6;
  }
  v10 = (uint64_t *)v2[7];
  v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    v11 = v8;
    while (1)
    {
      v12 = *v10;
      if (v11 >= v7)
        break;
      *(_QWORD *)v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          v27 = (unint64_t *)v8;
          do
          {
            v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    v13 = (v11 - v8) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    if ((v7 - v8) >> 2 > v14)
      v14 = (v7 - v8) >> 2;
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v13];
    *(_QWORD *)v17 = v12;
    v18 = v17 + 8;
    if (v11 != v8)
    {
      v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          v22 = (v19 >> 3) + 1;
          v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          v23 = &v16[8 * v13 - 16];
          v24 = v11 - 16;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_24;
        }
        else
        {
          v20 = v11;
        }
      }
      else
      {
        v20 = v11;
      }
      do
      {
        v21 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    v7 = &v16[8 * v15];
    if (v8)
      operator delete(v8);
    v8 = v17;
    v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
    operator delete(v8);
}

void sub_19F46E620(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *v10;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          *v10 = *v8;
          *v8 = v107;
          v108 = v10[1];
          v10[1] = *v9;
          goto LABEL_185;
        }
        return result;
      case 3:
        v109 = v10[2];
        v110 = *(unsigned __int8 *)(*(_QWORD *)(v109 + 384) + 169);
        v111 = *v10;
        v112 = *v8;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
        if (v110 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          if (v113 <= v110)
            return result;
          v10[2] = v112;
          *v8 = v109;
          v156 = v10[3];
          v10[3] = *v9;
          *v9 = v156;
          v157 = v10[2];
          v158 = *v10;
          if (*(unsigned __int8 *)(*(_QWORD *)(v157 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            return result;
          *v10 = v157;
          v10[2] = v158;
          v114 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v113 <= v110)
          {
            v114 = v10 + 3;
            v167 = v10[3];
            v168 = v10[1];
            *v10 = v109;
            v10[1] = v167;
            v10[2] = v111;
            v10[3] = v168;
            if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v111 + 384) + 169))
              return result;
            v10[2] = *v8;
          }
          else
          {
            v114 = v10 + 1;
            *v10 = v112;
          }
          *v8 = v111;
        }
        v108 = *v114;
        *v114 = *v9;
LABEL_185:
        *v9 = v108;
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v128 = (unint64_t)(v12 - 2) >> 1;
              v129 = v128;
              do
              {
                v130 = v129;
                if (v128 >= v129)
                {
                  v131 = (2 * v129) | 1;
                  v132 = &v10[2 * v131];
                  if (2 * v130 + 2 >= v12)
                  {
                    v136 = *v132;
                  }
                  else
                  {
                    v133 = *(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169);
                    v134 = *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169);
                    v135 = v133 > v134;
                    if (v133 <= v134)
                      v136 = *v132;
                    else
                      v136 = v132[2];
                    if (v135)
                    {
                      v132 += 2;
                      v131 = 2 * v130 + 2;
                    }
                  }
                  v137 = &v10[2 * v130];
                  v138 = *v137;
                  result = *(unsigned __int8 *)(*(_QWORD *)(*v137 + 384) + 169);
                  if (*(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169) <= result)
                  {
                    v139 = v137[1];
                    do
                    {
                      result = (unint64_t)v137;
                      v137 = v132;
                      *(_QWORD *)result = v136;
                      *(_QWORD *)(result + 8) = v132[1];
                      if (v128 < v131)
                        break;
                      v140 = (2 * v131) | 1;
                      v132 = &v10[2 * v140];
                      v131 = 2 * v131 + 2;
                      if (v131 < v12)
                      {
                        v136 = *v132;
                        if (*(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169))
                        {
                          v131 = v140;
                        }
                        else
                        {
                          v136 = v132[2];
                          v132 += 2;
                        }
                      }
                      else
                      {
                        v136 = *v132;
                        v131 = v140;
                      }
                      result = *(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(_QWORD *)(v138 + 384) + 169));
                    *v137 = v138;
                    v137[1] = v139;
                  }
                }
                v129 = v130 - 1;
              }
              while (v130);
              v141 = (unint64_t)v11 >> 4;
              do
              {
                v142 = 0;
                v143 = *v10;
                v144 = v10[1];
                v145 = v10;
                do
                {
                  v147 = &v145[2 * v142 + 2];
                  v148 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    v146 = *v147;
                    result = (unint64_t)(v147 + 2);
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v147[2] + 384) + 169))
                    {
                      v142 = v148;
                    }
                    else
                    {
                      v146 = v147[2];
                      v147 += 2;
                    }
                  }
                  else
                  {
                    v146 = *v147;
                    v142 = v148;
                  }
                  *v145 = v146;
                  v145[1] = v147[1];
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == a2 - 2)
                {
                  *v147 = v143;
                  v147[1] = v144;
                }
                else
                {
                  *v147 = *(a2 - 2);
                  v147[1] = *(a2 - 1);
                  *(a2 - 2) = v143;
                  *(a2 - 1) = v144;
                  v149 = (char *)v147 - (char *)v10 + 16;
                  if (v149 >= 17)
                  {
                    v150 = (((unint64_t)v149 >> 4) - 2) >> 1;
                    v151 = &v10[2 * v150];
                    v152 = *v151;
                    v153 = *v147;
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169))
                    {
                      v154 = v147[1];
                      do
                      {
                        v155 = v147;
                        v147 = v151;
                        *v155 = v152;
                        v155[1] = v151[1];
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[2 * v150];
                        v152 = *v151;
                      }
                      while (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v153 + 384) + 169));
                      *v147 = v153;
                      v147[1] = v154;
                    }
                  }
                }
                a2 -= 2;
                v135 = v141-- <= 2;
              }
              while (!v135);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
          if ((unint64_t)v11 >= 0x801)
          {
            v17 = *v14;
            v18 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
            v19 = *v10;
            if (v18 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            {
              if (v16 <= v18
                || (*v14 = v15,
                    *v8 = v17,
                    v26 = v14 + 1,
                    v25 = v14[1],
                    v14[1] = *v9,
                    *v9 = v25,
                    v27 = *v10,
                    *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169)))
              {
LABEL_23:
                v34 = &v10[2 * v13];
                v37 = *(v34 - 2);
                v35 = v34 - 2;
                v36 = v37;
                v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169);
                v39 = v10[2];
                v40 = *(a2 - 4);
                v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 384) + 169);
                if (v38 <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                {
                  if (v41 <= v38
                    || (*v35 = v40,
                        *(a2 - 4) = v36,
                        v43 = v35 + 1,
                        v44 = v35[1],
                        v35[1] = *(a2 - 3),
                        *(a2 - 3) = v44,
                        v45 = v10[2],
                        *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v45 + 384) + 169)))
                  {
LABEL_36:
                    v52 = &v10[2 * v13];
                    v55 = v52[2];
                    v53 = v52 + 2;
                    v54 = v55;
                    v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 384) + 169);
                    v57 = v10[4];
                    v58 = *(a2 - 6);
                    v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 384) + 169);
                    if (v56 <= *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169))
                    {
                      if (v59 > v56)
                      {
                        *v53 = v58;
                        *(a2 - 6) = v54;
                        v62 = v53 + 1;
                        v61 = v53[1];
                        v53[1] = *(a2 - 5);
                        *(a2 - 5) = v61;
                        v54 = *v53;
                        v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        v63 = v10[4];
                        if (v56 > *(unsigned __int8 *)(*(_QWORD *)(v63 + 384) + 169))
                        {
                          v10[4] = v54;
                          *v53 = v63;
                          v60 = v10 + 5;
LABEL_45:
                          v67 = *v60;
                          *v60 = *v62;
                          *v62 = v67;
                          v54 = *v53;
                          v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v59 > v56)
                      {
                        v60 = v10 + 5;
                        v10[4] = v58;
LABEL_44:
                        *(a2 - 6) = v57;
                        v62 = a2 - 5;
                        goto LABEL_45;
                      }
                      v60 = v53 + 1;
                      v64 = v53[1];
                      v65 = v10[5];
                      v10[4] = v54;
                      v10[5] = v64;
                      *v53 = v57;
                      v53[1] = v65;
                      v66 = *(a2 - 6);
                      v56 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169);
                      if (*(unsigned __int8 *)(*(_QWORD *)(v66 + 384) + 169) > v56)
                      {
                        *v53 = v66;
                        goto LABEL_44;
                      }
                      v54 = v57;
                    }
                    v68 = *v14;
                    v69 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
                    v70 = *v35;
                    if (v69 <= *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169))
                    {
                      if (v56 <= v69)
                      {
LABEL_56:
                        v78 = *v10;
                        *v10 = v68;
                        v24 = v10 + 1;
                        *v14 = v78;
                        v30 = v14 + 1;
                        goto LABEL_57;
                      }
                      *v14 = v54;
                      v73 = v14 + 1;
                      v74 = v14[1];
                      v14[1] = v53[1];
                      *v53 = v68;
                      v53[1] = v74;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                      {
                        v68 = v54;
                        goto LABEL_56;
                      }
                      *v35 = v54;
                      v71 = v35 + 1;
                      *v14 = v70;
                    }
                    else
                    {
                      if (v56 <= v69)
                      {
                        *v14 = v70;
                        v75 = v14[1];
                        v76 = v35[1];
                        *v35 = v68;
                        v35[1] = v75;
                        v14[1] = v76;
                        if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                        {
                          v68 = v70;
                          goto LABEL_56;
                        }
                        *v14 = v54;
                        *v53 = v70;
                        v72 = v53 + 1;
                        v71 = v14 + 1;
                      }
                      else
                      {
                        *v35 = v54;
                        v71 = v35 + 1;
                        *v53 = v70;
                        v72 = v53 + 1;
                      }
                      v73 = v72;
                    }
                    v77 = *v71;
                    *v71 = *v73;
                    *v73 = v77;
                    v68 = *v14;
                    goto LABEL_56;
                  }
                  v10[2] = *v35;
                  *v35 = v45;
                  v42 = v10 + 3;
                }
                else
                {
                  if (v41 <= v38)
                  {
                    v42 = v35 + 1;
                    v48 = v35[1];
                    v49 = v10[3];
                    v10[2] = v36;
                    v10[3] = v48;
                    *v35 = v39;
                    v35[1] = v49;
                    v50 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v50 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                      goto LABEL_36;
                    *v35 = v50;
                  }
                  else
                  {
                    v42 = v10 + 3;
                    v10[2] = v40;
                  }
                  *(a2 - 4) = v39;
                  v43 = a2 - 3;
                }
                v51 = *v42;
                *v42 = *v43;
                *v43 = v51;
                goto LABEL_36;
              }
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v27;
            }
            else
            {
              if (v16 <= v18)
              {
                v20 = v14 + 1;
                v31 = v14[1];
                v32 = v10[1];
                *v10 = v17;
                v10[1] = v31;
                *v14 = v19;
                v14[1] = v32;
                if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v19 + 384) + 169))
                  goto LABEL_23;
                *v14 = *v8;
              }
              else
              {
                v20 = v10 + 1;
                *v10 = v15;
              }
              *v8 = v19;
              v26 = a2 - 1;
            }
            v33 = *v20;
            *v20 = *v26;
            *v26 = v33;
            goto LABEL_23;
          }
          v21 = *v10;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169);
          v23 = *v14;
          if (v22 <= *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
          {
            if (v16 > v22)
            {
              *v10 = v15;
              *v8 = v21;
              v28 = v10[1];
              v10[1] = *v9;
              *v9 = v28;
              v21 = *v10;
              v29 = *v14;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
              {
                *v14 = v21;
                *v10 = v29;
                v24 = v14 + 1;
                v30 = v10 + 1;
LABEL_57:
                v79 = *v24;
                *v24 = *v30;
                *v30 = v79;
                v21 = *v10;
              }
            }
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_59;
LABEL_61:
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
            if (*(unsigned __int8 *)(*(_QWORD *)(*(v10 - 2) + 384) + 169) > v80)
              goto LABEL_62;
            if (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169))
            {
              v97 = v10 + 2;
              do
              {
                v10 = v97;
                if (v97 >= a2)
                  break;
                v97 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169));
            }
            else
            {
              do
              {
                v96 = v10[2];
                v10 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(v96 + 384) + 169));
            }
            v98 = a2;
            if (v10 < a2)
            {
              v98 = a2;
              do
              {
                v99 = *(v98 - 2);
                v98 -= 2;
              }
              while (v80 > *(unsigned __int8 *)(*(_QWORD *)(v99 + 384) + 169));
            }
            v100 = v7[1];
            if (v10 < v98)
            {
              v101 = *v10;
              v102 = *v98;
              do
              {
                *v10 = v102;
                *v98 = v101;
                v103 = v10[1];
                v10[1] = v98[1];
                v98[1] = v103;
                v104 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
                do
                {
                  v105 = v10[2];
                  v10 += 2;
                  v101 = v105;
                }
                while (v104 <= *(unsigned __int8 *)(*(_QWORD *)(v105 + 384) + 169));
                do
                {
                  v106 = *(v98 - 2);
                  v98 -= 2;
                  v102 = v106;
                }
                while (v104 > *(unsigned __int8 *)(*(_QWORD *)(v106 + 384) + 169));
              }
              while (v10 < v98);
            }
            if (v10 - 2 != v7)
            {
              *v7 = *(v10 - 2);
              v7[1] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 2) = v21;
            *(v10 - 1) = v100;
            continue;
          }
          if (v16 > v22)
          {
            v24 = v14 + 1;
            *v14 = v15;
LABEL_31:
            *v8 = v23;
            v30 = a2 - 1;
            goto LABEL_57;
          }
          v24 = v10 + 1;
          v46 = v10[1];
          v47 = v14[1];
          *v14 = v21;
          v14[1] = v46;
          *v10 = v23;
          v10[1] = v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v23 + 384) + 169))
          {
            *v10 = *v8;
            goto LABEL_31;
          }
          v21 = v23;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_59:
          v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
LABEL_62:
          v81 = v10[1];
          v82 = v10;
          do
          {
            v83 = v82;
            v85 = v82[2];
            v82 += 2;
            v84 = v85;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v85 + 384) + 169) > v80);
          v86 = a2;
          if (v83 == v10)
          {
            v86 = a2;
            do
            {
              if (v82 >= v86)
                break;
              v88 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v88 + 384) + 169) <= v80);
          }
          else
          {
            do
            {
              v87 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v87 + 384) + 169) <= v80);
          }
          if (v82 >= v86)
          {
            v10 = v82;
          }
          else
          {
            v89 = *v86;
            v10 = v82;
            v90 = v86;
            do
            {
              *v10 = v89;
              *v90 = v84;
              v91 = v10[1];
              v10[1] = v90[1];
              v90[1] = v91;
              v92 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
              do
              {
                v93 = v10[2];
                v10 += 2;
                v84 = v93;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v93 + 384) + 169) > v92);
              do
              {
                v94 = *(v90 - 2);
                v90 -= 2;
                v89 = v94;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v94 + 384) + 169) <= v92);
            }
            while (v10 < v90);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          *(v10 - 2) = v21;
          *(v10 - 1) = v81;
          if (v82 < v86)
            goto LABEL_83;
          v95 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v7, v10 - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v95)
              continue;
LABEL_83:
            result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v7, v10 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 2;
          if (v95)
            return result;
          goto LABEL_2;
        }
        v115 = v10 + 2;
        v117 = v10 == a2 || v115 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v117)
          {
            v118 = 0;
            v119 = v10;
            do
            {
              v121 = v115;
              v122 = v119[2];
              v123 = *v119;
              if (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v119 + 384) + 169))
              {
                v124 = v119[3];
                v125 = v118;
                do
                {
                  v126 = (char *)v10 + v125;
                  v127 = *(uint64_t *)((char *)v10 + v125 + 8);
                  *((_QWORD *)v126 + 2) = v123;
                  *((_QWORD *)v126 + 3) = v127;
                  if (!v125)
                  {
                    v120 = v10;
                    goto LABEL_125;
                  }
                  v123 = *((_QWORD *)v126 - 2);
                  v125 -= 16;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v123 + 384) + 169));
                v120 = (uint64_t *)((char *)v10 + v125 + 16);
LABEL_125:
                *v120 = v122;
                v120[1] = v124;
              }
              v115 = v121 + 2;
              v118 += 16;
              v119 = v121;
            }
            while (v121 + 2 != a2);
          }
        }
        else if (!v117)
        {
          v159 = v10 + 3;
          do
          {
            v160 = v115;
            v161 = v7[2];
            v162 = *v7;
            if (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v7 + 384) + 169))
            {
              v163 = v7[3];
              v164 = v159;
              do
              {
                v165 = v164;
                *(v164 - 1) = v162;
                v166 = *(v164 - 2);
                v164 -= 2;
                *v165 = v166;
                v162 = *(v165 - 5);
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v162 + 384) + 169));
              *(v164 - 1) = v161;
              *v164 = v163;
            }
            v115 = v160 + 2;
            v159 += 2;
            v7 = v160;
          }
          while (v160 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 2);
      v4 = *a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v6 = a1[2];
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 384) + 169);
      v8 = *a1;
      v9 = *(a2 - 2);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          v11 = a1 + 3;
          v26 = a1[3];
          v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(_QWORD *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 384) + 169))
            return 1;
          a1[2] = v28;
        }
        else
        {
          v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        v20 = a1 + 3;
        v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        v21 = a1[2];
        v22 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          v11 = a1 + 1;
LABEL_21:
          v29 = *v11;
          *v11 = *v20;
          *v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 384) + 169);
      v16 = *a1;
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          v18 = a1 + 3;
          v30 = a1[3];
          v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
            goto LABEL_26;
          a1[2] = v13;
        }
        else
        {
          v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        v24 = a1 + 3;
        v23 = a1[3];
        v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          v18 = a1 + 1;
LABEL_25:
          v32 = *v18;
          *v18 = *v24;
          *v24 = v32;
        }
      }
LABEL_26:
      v33 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v37 = *v33;
        v38 = *v12;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v12 + 384) + 169))
        {
          v39 = v33[1];
          v40 = v34;
          do
          {
            v41 = (uint64_t *)((char *)a1 + v40);
            v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              v36 = a1;
              goto LABEL_29;
            }
            v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v38 + 384) + 169));
          v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *v36 = v37;
          v36[1] = v39;
          if (++v35 == 8)
            return v33 + 2 == a2;
        }
        v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2)
          return 1;
      }
  }
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v3 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x4B05BEFA631D0889;
    if (a2 <= 0x4B05BEFA631D0889)
      v11 = 0x4B05BEFA631D0889 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x4B05BEFA631D0889;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x4B05BEFA631D0889)
      {
        if (v13[2] == 0x4B05BEFA631D0889)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x4B05BEFA631D0889)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x4B05BEFA631D0889)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x4B05BEFA631D0889)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)75>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42706E8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)75>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42706E8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)75>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t *SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables(uint64_t *a1)
{
  void *v2;
  void *v3;
  _BYTE *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _BYTE *v9;
  void *v10;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (_BYTE *)a1[6];
  if (v4)
  {
    do
    {
      if (v4[112])
        v4[112] = 0;
      v9 = *(_BYTE **)v4;
      v10 = (void *)*((_QWORD *)v4 + 4);
      if (v10 != *((void **)v4 + 6))
        free(v10);
      operator delete(v4);
      v4 = v9;
    }
    while (v9);
  }
  v5 = (void *)a1[4];
  a1[4] = 0;
  if (v5)
    operator delete(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = (uint64_t)v6;
    operator delete(v6);
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    geo::Pool<md::FlyoverRenderable>::disposeElements(v7);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v7 + 8));
    MEMORY[0x1A1AF4E00](v7, 0x1020C407A7143E5);
  }
  return a1;
}

void sub_19F46F9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void geo::Pool<md::FlyoverRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F46FC70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F6A8;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F6A8;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

void md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::reset(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  char v45;

  v2 = a1[16];
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v5 = 0;
  }
  else
  {
    v5 = v3[3];
    v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  md::FlyoverRenderResources::prunePools(v10);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  md::DaVinciGroundRenderResources::prunePools(v11);
  v12 = (gdc::Registry *)a1[15];
  if (v12)
  {
    v13 = gdc::Registry::create(v12);
    v14 = (uint64_t *)gdc::Registry::storage<md::ls::RequestReset>(a1[15]);
    v45 = 0;
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v14, v13, &v45);
    v15 = (_QWORD *)a1[18];
    v16 = (_QWORD *)a1[19];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v44 = a1[19];
      while (1)
      {
        cleanup(a1[16], a1[15], v15[1]);
        v20 = (void (***)(_QWORD))*v15;
        if (*v15)
        {
          v21 = a1[17];
          if (*(_QWORD *)(v21 + 16))
          {
            (**v20)(*v15);
            *v20 = *(void (***)(_QWORD))(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
          }
        }
        if (v19 >= v18)
          break;
        *(_QWORD *)v19 = v15[1];
        v19 += 8;
LABEL_17:
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)a1[18];
          goto LABEL_51;
        }
      }
      v22 = (v19 - v17) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v18 - v17) >> 2 > v23)
        v23 = (v18 - v17) >> 2;
      if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15[1];
      v27 = v26 + 8;
      if (v19 != v17)
      {
        v28 = v19 - 8 - v17;
        if (v28 >= 0x168)
        {
          if (&v25[v19 - v17 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v19 - v17 - 8])
          {
            v29 = v19;
          }
          else if (&v19[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
          {
            v29 = v19;
          }
          else if ((unint64_t)(v17 - v25) >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v29 = &v19[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            v32 = &v25[8 * v22 - 16];
            v33 = v19 - 16;
            v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v26 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_36;
          }
          else
          {
            v29 = v19;
          }
        }
        else
        {
          v29 = v19;
        }
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v29 != v17);
      }
LABEL_36:
      v18 = &v25[8 * v24];
      if (v17)
        operator delete(v17);
      v17 = v26;
      v19 = v27;
      v16 = (_QWORD *)v44;
      goto LABEL_17;
    }
    v19 = 0;
    v17 = 0;
LABEL_51:
    a1[19] = (uint64_t)v15;
    a1[30] = a1[29];
    a1[27] = a1[26];
    if (a1[24])
    {
      v36 = (_BYTE *)a1[23];
      if (v36)
      {
        do
        {
          if (v36[112])
            v36[112] = 0;
          v42 = *(_BYTE **)v36;
          v43 = (void *)*((_QWORD *)v36 + 4);
          if (v43 != *((void **)v36 + 6))
            free(v43);
          operator delete(v36);
          v36 = v42;
        }
        while (v42);
      }
      a1[23] = 0;
      v37 = a1[22];
      if (v37)
      {
        for (i = 0; i != v37; ++i)
          *(_QWORD *)(a1[21] + 8 * i) = 0;
      }
      a1[24] = 0;
    }
    if (v17 != v19)
    {
      v39 = a1[15];
      v40 = (unint64_t *)v17;
      do
      {
        v41 = *v40++;
        gdc::Registry::destroy(v39, v41);
      }
      while (v40 != (unint64_t *)v19);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_19F470104(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::CollectRenderablesLogicContext<md::MapDataType::PolarFlyover>]";
  v4[3] = 65;
  v4[4] = result;
  *v4 = &off_1E4270710;
  v4[1] = 0x4F6DB855E2E136BALL;
  *a2 = v4;
  return result;
}

void sub_19F4701D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x4F6DB855E2E136BALL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  md::VKMRenderResourcesStore *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t **i;
  BOOL v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t **j;
  int v52;
  BOOL v53;
  unint64_t v54;
  _BOOL4 v55;
  int v56;
  _BOOL4 v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t **k;
  BOOL v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  _BOOL4 v77;
  _BOOL4 v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t **m;
  int v90;
  BOOL v91;
  unint64_t v92;
  _BOOL4 v93;
  int v94;
  _BOOL4 v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  double *v109;
  unint64_t v110;
  unint64_t v111;
  double *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void *v116;
  char *v117;
  int64_t v118;
  int64_t v119;
  unint64_t v120;
  int64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  void (***v132)(_QWORD);
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const double *v155;
  double *v156;
  double *v157;
  BOOL v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t **v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double *v210;
  uint64_t v211;
  const double *v212;
  const double *v213;
  double *v214;
  uint64_t *v215;
  uint64_t v216;
  _QWORD *v217;
  void *v218;
  unint64_t *v219;
  unint64_t v220;
  double v221;
  double v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  uint64_t *v239;
  uint64_t *v240;
  unint64_t v241;
  uint64_t *v242;
  _QWORD *v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t (***v252)(_QWORD);
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  int8x8_t v257;
  uint8x8_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  char v269;
  _BYTE *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  _BYTE *v275;
  uint64_t v276;
  _BYTE *v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  size_t v281;
  size_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  __int128 *v287;
  unint64_t v288;
  __int128 v289;
  uint64_t v290;
  _BYTE *v291;
  char *v292;
  uint64_t *v293;
  uint64_t v294;
  char *v295;
  char v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  char v310;
  unsigned int v311;
  void *v312;
  char v313;
  void *v314;
  uint64_t *v315;
  _QWORD *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t ***v348;
  char *v349;
  void *v350;
  gdc::Registry *v351;
  unint64_t v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t v355;
  char *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  int v361;
  unint64_t v362;
  uint64_t **n;
  BOOL v364;
  int v365;
  BOOL v366;
  unint64_t v367;
  _BOOL4 v368;
  _BOOL4 v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  int v378;
  unint64_t v379;
  uint64_t **ii;
  _BOOL4 v381;
  int v382;
  BOOL v383;
  unint64_t v384;
  _BOOL4 v385;
  _BOOL4 v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t *v398;
  int v399;
  uint64_t **v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t *v403;
  md::VKMRenderResourcesStore *v404;
  _QWORD *v405;
  uint64_t v406;
  char **v407;
  uint64_t v408;
  md::VKMRenderResourcesStore *v409;
  md::VKMRenderResourcesStore *v410;
  uint64_t **v411;
  std::__shared_weak_count *v412;
  uint64_t v413;
  void *__p[2];
  _BYTE v415[32];
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  gdc::Registry *v421;
  char v422;
  __int16 v423;
  char v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  __int128 v430;
  uint64_t v431;
  _QWORD v432[2];
  float64x2x2_t v433;
  float64x2x2_t v434;
  float64x2x2_t v435;
  float64x2x2_t v436;

  v5 = a1;
  v398 = *a3;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = (uint64_t **)*((_QWORD *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)v415 = 0;
  v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    v8 = v9 - 5;
  }
  v11 = (void (***)(_QWORD))v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (**v11)(v11);
  v400 = v7;
  v402 = v6;
  v392 = a4;
  v16 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(v6);
  v17 = (md::VKMRenderResourcesStore *)v16[7];
  v404 = (md::VKMRenderResourcesStore *)v16[8];
  v406 = v5;
  if (v17 != v404)
  {
    v18 = (_QWORD *)(v5 + 168);
    v407 = (char **)(v5 + 232);
    v19 = v16[10];
    v411 = (uint64_t **)(v19 + 8);
    do
    {
      v409 = v17;
      v25 = v5;
      v26 = *(_QWORD **)(v5 + 144);
      v27 = *(_QWORD **)(v25 + 152);
LABEL_20:
      while (v26 != v27)
      {
        v28 = *(_QWORD *)(*v26 + 384);
        v29 = *(std::__shared_weak_count **)(*v26 + 392);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = *(unsigned __int8 *)(*v26 + 48);
          do
            v33 = __ldxr(v30);
          while (__stxr(v33 + 1, v30));
          for (i = *(uint64_t ***)(v19 + 8); i; i = (uint64_t **)*i)
          {
LABEL_32:
            v36 = *((unsigned __int8 *)i + 48);
            v37 = *((char *)i + 48) > (char)v32;
            v38 = (unint64_t)i[4];
            if (v32 == v36)
              v37 = v28 < v38;
            if (!v37)
            {
              v39 = v38 < v28;
              if (v32 == v36)
                v40 = v39;
              else
                v40 = (char)v36 < (char)v32;
              if (!v40)
              {
                v35 = 1;
                if (v29)
                  goto LABEL_41;
                goto LABEL_48;
              }
              ++i;
            }
          }
        }
        else
        {
          v32 = *(unsigned __int8 *)(*v26 + 48);
          i = *(uint64_t ***)(v19 + 8);
          if (i)
            goto LABEL_32;
        }
        v35 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v28 + 16)) != 0;
        if (v29)
        {
LABEL_41:
          v41 = (unint64_t *)&v29->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
LABEL_48:
        if (!v35)
        {
          while (1)
          {
            v44 = v27;
            v27 -= 2;
            if (v26 == v27)
              goto LABEL_80;
            v45 = *(_QWORD *)(*v27 + 384);
            v46 = *(std::__shared_weak_count **)(*v27 + 392);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
              v49 = *(unsigned __int8 *)(*v27 + 48);
              do
                v50 = __ldxr(v47);
              while (__stxr(v50 + 1, v47));
            }
            else
            {
              v49 = *(unsigned __int8 *)(*v27 + 48);
            }
            for (j = v411; ; ++j)
            {
              do
              {
                j = (uint64_t **)*j;
                if (!j)
                {
                  v57 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v45 + 16)) != 0;
                  if (!v46)
                    goto LABEL_50;
                  goto LABEL_72;
                }
                v52 = *((unsigned __int8 *)j + 48);
                v53 = *((char *)j + 48) > (char)v49;
                v54 = (unint64_t)j[4];
                if (v49 == v52)
                  v53 = v45 < v54;
              }
              while (v53);
              v55 = v54 < v45;
              v56 = v49 == v52 ? v55 : (char)v52 < (char)v49;
              if (v56 != 1)
                break;
            }
            v57 = 1;
            if (!v46)
              goto LABEL_50;
LABEL_72:
            v58 = (unint64_t *)&v46->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
            do
              v60 = __ldaxr(v58);
            while (__stlxr(v60 - 1, v58));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
LABEL_50:
            if (v57)
            {
              v61 = *v26;
              *v26 = *(v44 - 2);
              *(v44 - 2) = v61;
              v62 = v26[1];
              v26[1] = *(v44 - 1);
              *(v44 - 1) = v62;
              v26 += 2;
              goto LABEL_20;
            }
          }
        }
        v26 += 2;
      }
LABEL_80:
      v63 = v406;
      v65 = *(_QWORD **)(v406 + 144);
      v64 = *(_QWORD *)(v406 + 152);
      if (v65 != (_QWORD *)v64)
      {
        while (1)
        {
LABEL_81:
          v66 = *(_QWORD *)(*v65 + 384);
          v67 = *(std::__shared_weak_count **)(*v65 + 392);
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            v70 = *(unsigned __int8 *)(*v65 + 48);
            do
              v71 = __ldxr(v68);
            while (__stxr(v71 + 1, v68));
            for (k = *(uint64_t ***)(v19 + 8); k; k = (uint64_t **)*k)
            {
LABEL_92:
              v74 = *((unsigned __int8 *)k + 48);
              v75 = *((char *)k + 48) > (char)v70;
              v76 = (unint64_t)k[4];
              if (v70 == v74)
                v75 = v66 < v76;
              if (!v75)
              {
                v77 = v76 < v66;
                if (v70 == v74)
                  v78 = v77;
                else
                  v78 = (char)v74 < (char)v70;
                if (!v78)
                {
                  v73 = 1;
                  if (v67)
                    goto LABEL_101;
                  goto LABEL_108;
                }
                ++k;
              }
            }
          }
          else
          {
            v70 = *(unsigned __int8 *)(*v65 + 48);
            k = *(uint64_t ***)(v19 + 8);
            if (k)
              goto LABEL_92;
          }
          v73 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v66 + 16)) != 0;
          if (v67)
          {
LABEL_101:
            v79 = (unint64_t *)&v67->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
            do
              v81 = __ldaxr(v79);
            while (__stlxr(v81 - 1, v79));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
LABEL_108:
          if (!v73)
            break;
          v65 += 2;
          if (v65 == (_QWORD *)v64)
          {
LABEL_143:
            v63 = v406;
            goto LABEL_144;
          }
        }
        do
        {
          v82 = v64;
          v64 -= 16;
          if (v65 == (_QWORD *)v64)
          {
            v64 = (unint64_t)v65;
            goto LABEL_143;
          }
          v83 = *(_QWORD *)(*(_QWORD *)v64 + 384);
          v84 = *(std::__shared_weak_count **)(*(_QWORD *)v64 + 392);
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
            v87 = *(unsigned __int8 *)(*(_QWORD *)v64 + 48);
            do
              v88 = __ldxr(v85);
            while (__stxr(v88 + 1, v85));
          }
          else
          {
            v87 = *(unsigned __int8 *)(*(_QWORD *)v64 + 48);
          }
          for (m = v411; ; ++m)
          {
            do
            {
              m = (uint64_t **)*m;
              if (!m)
              {
                v95 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v83 + 16)) != 0;
                if (!v84)
                  goto LABEL_111;
                goto LABEL_133;
              }
              v90 = *((unsigned __int8 *)m + 48);
              v91 = *((char *)m + 48) > (char)v87;
              v92 = (unint64_t)m[4];
              if (v87 == v90)
                v91 = v83 < v92;
            }
            while (v91);
            v93 = v92 < v83;
            v94 = v87 == v90 ? v93 : (char)v90 < (char)v87;
            if (v94 != 1)
              break;
          }
          v95 = 1;
          if (!v84)
            continue;
LABEL_133:
          v96 = (unint64_t *)&v84->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
          do
            v98 = __ldaxr(v96);
          while (__stlxr(v98 - 1, v96));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
LABEL_111:
          ;
        }
        while (!v95);
        v99 = *v65;
        *v65 = *(_QWORD *)(v82 - 16);
        *(_QWORD *)(v82 - 16) = v99;
        v100 = v65[1];
        v65[1] = *(_QWORD *)(v82 - 8);
        *(_QWORD *)(v82 - 8) = v100;
        v65 += 2;
        v63 = v406;
        if (v65 != (_QWORD *)v64)
          goto LABEL_81;
      }
LABEL_144:
      v101 = *(__int128 **)(v63 + 152);
      v102 = (char *)v101 - v64;
      v103 = (uint64_t)((uint64_t)v101 - v64) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v407, *(_QWORD *)(v63 + 240), v64, v101, v103);
      v104 = v406;
      if ((__int128 *)v64 == v101)
        goto LABEL_152;
      v106 = *(_QWORD *)(v406 + 144);
      v105 = *(double **)(v406 + 152);
      v107 = v64 - v106;
      v108 = (double *)(v106 + ((v64 - v106) & 0xFFFFFFFFFFFFFFF0));
      v109 = &v108[2 * v103];
      if (v109 == v105)
      {
        v113 = v406;
        goto LABEL_151;
      }
      v110 = v107 & 0xFFFFFFFFFFFFFFF0;
      v111 = (char *)v105 - &v102[v106 + (v107 & 0xFFFFFFFFFFFFFFF0)] - 16;
      if (v111 < 0x270)
        goto LABEL_147;
      v134 = v110 + (v111 & 0xFFFFFFFFFFFFFFF0);
      v135 = v106 + (v134 | 8);
      v136 = v106 + (v110 | 8);
      v137 = v134 + v106 + 16;
      v138 = &v102[v110 + v106];
      v139 = &v138[v111 & 0xFFFFFFFFFFFFFFF0];
      v140 = (unint64_t)(v139 + 8);
      v141 = (unint64_t)(v138 + 8);
      v142 = (unint64_t)(v139 + 16);
      v143 = v108 >= (double *)v139 + 1 || (unint64_t)v109 >= v135;
      v144 = !v143;
      v145 = (unint64_t)v108 >= v142 || v141 >= v135;
      v146 = !v145;
      v147 = v136 >= v140 || (unint64_t)v109 >= v137;
      v148 = !v147;
      v149 = v136 >= v142 || v141 >= v137;
      v150 = !v149;
      v151 = v136 >= v135 || (unint64_t)v108 >= v137;
      if (!v151 || v144 || v146 || v148 || v150)
      {
LABEL_147:
        v112 = v108;
        v113 = v406;
      }
      else
      {
        v152 = (v111 >> 4) + 1;
        v153 = 2 * (v152 & 0x1FFFFFFFFFFFFFFCLL);
        v112 = &v108[v153];
        v154 = v152 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v155 = &v108[2 * v103];
          v433 = vld2q_f64(v155);
          v155 += 4;
          v435 = vld2q_f64(v155);
          v156 = v108 + 8;
          vst2q_f64(v108, v433);
          v157 = v108 + 4;
          vst2q_f64(v157, v435);
          v108 = v156;
          v154 -= 4;
        }
        while (v154);
        v158 = v152 == (v152 & 0x1FFFFFFFFFFFFFFCLL);
        v113 = v406;
        if (v158)
          goto LABEL_149;
        v109 = (double *)((char *)v109 + v153 * 8);
      }
      do
      {
        *v112 = *v109;
        v112[1] = v109[1];
        v112 += 2;
        v109 += 2;
      }
      while (v109 != v105);
LABEL_149:
      v108 = v112;
LABEL_151:
      *(_QWORD *)(v113 + 152) = v108;
      v104 = v113;
LABEL_152:
      v114 = *(char **)(v104 + 232);
      v20 = *(char **)(v104 + 240);
      if (v20 != v114)
      {
        do
        {
          v115 = (char *)__p[1];
          if (__p[1] >= (void *)*(_QWORD *)v415)
          {
            v117 = (char *)__p[0];
            v118 = (char *)__p[1] - (char *)__p[0];
            v119 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 61)
              abort();
            v121 = *(_QWORD *)v415 - (unint64_t)__p[0];
            if ((uint64_t)(*(_QWORD *)v415 - (unint64_t)__p[0]) >> 2 > v120)
              v120 = v121 >> 2;
            if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
              v122 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v122 = v120;
            if (v122)
            {
              if (v122 >> 61)
LABEL_531:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v123 = operator new(8 * v122);
            }
            else
            {
              v123 = 0;
            }
            v124 = &v123[8 * v119];
            *v124 = *((_QWORD *)v114 + 1);
            v116 = v124 + 1;
            if (v115 == v117)
            {
              v117 = v115;
            }
            else
            {
              v125 = v115 - 8 - v117;
              if (v125 < 0x58)
                goto LABEL_537;
              if ((unint64_t)(v115 - &v123[v118]) < 0x20)
                goto LABEL_537;
              v126 = (v125 >> 3) + 1;
              v127 = &v123[8 * v119 - 16];
              v128 = v115 - 16;
              v129 = v126 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v130 = *(_OWORD *)v128;
                *(v127 - 1) = *((_OWORD *)v128 - 1);
                *v127 = v130;
                v127 -= 2;
                v128 -= 32;
                v129 -= 4;
              }
              while (v129);
              v124 -= v126 & 0x3FFFFFFFFFFFFFFCLL;
              v115 -= 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
              if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_537:
                do
                {
                  v131 = *((_QWORD *)v115 - 1);
                  v115 -= 8;
                  *--v124 = v131;
                }
                while (v115 != v117);
                v117 = (char *)__p[0];
              }
            }
            __p[0] = v124;
            __p[1] = v116;
            *(_QWORD *)v415 = &v123[8 * v122];
            if (v117)
              operator delete(v117);
          }
          else
          {
            *(_QWORD *)__p[1] = *((_QWORD *)v114 + 1);
            v116 = v115 + 8;
          }
          __p[1] = v116;
          v132 = *(void (****)(_QWORD))v114;
          if (*(_QWORD *)v114)
          {
            v133 = *(_QWORD *)(v406 + 136);
            if (*(_QWORD *)(v133 + 16))
            {
              (**v132)(*(_QWORD *)v114);
              *v132 = *(void (***)(_QWORD))(v133 + 40);
              *(_QWORD *)(v133 + 40) = v132;
            }
          }
          v114 += 16;
        }
        while (v114 != v20);
        v20 = *v407;
      }
      v21 = *(_QWORD *)(v406 + 144);
      v22 = *(uint64_t **)(v406 + 152);
      v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      *(_QWORD *)(v406 + 240) = v20;
      v5 = v406;
      if (v22 == (uint64_t *)v21)
        v24 = 0;
      else
        v24 = v23;
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v21, v22, v24, 1);
      v19 += 24;
      v17 = (md::VKMRenderResourcesStore *)((char *)v409 + 8);
      v411 += 3;
    }
    while ((md::VKMRenderResourcesStore *)((char *)v409 + 8) != v404);
  }
  v159 = *v400;
  v160 = v400[1];
  if (*v400 == v160)
  {
    v161 = v402;
  }
  else
  {
    v161 = v402;
    while (*v159 != 0x41D4E9297E100630)
    {
      v159 += 5;
      if (v159 == v160)
        goto LABEL_231;
    }
  }
  if (v159 != v160)
  {
    v162 = (std::__shared_weak_count *)v159[4];
    if (v162)
    {
      v163 = (unint64_t *)&v162->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
      do
        v165 = __ldaxr(v163);
      while (__stlxr(v165 - 1, v163));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
  }
LABEL_231:
  v166 = *v400;
  v167 = v400[1];
  if (*v400 != v167)
  {
    while (*v166 != 0x4EDAD23DFB014132)
    {
      v166 += 5;
      if (v166 == v167)
        goto LABEL_242;
    }
  }
  if (v166 != v167)
  {
    v168 = (std::__shared_weak_count *)v166[4];
    if (v168)
    {
      v169 = (unint64_t *)&v168->__shared_owners_;
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
      do
        v171 = __ldaxr(v169);
      while (__stlxr(v171 - 1, v169));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
  }
LABEL_242:
  v172 = *v400;
  v173 = v400[1];
  if (*v400 != v173)
  {
    while (*v172 != 0x348A0B0E758C07C2)
    {
      v172 += 5;
      if (v172 == v173)
        goto LABEL_253;
    }
  }
  if (v172 != v173)
  {
    v174 = (std::__shared_weak_count *)v172[4];
    if (v174)
    {
      v175 = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
      do
        v177 = __ldaxr(v175);
      while (__stlxr(v177 - 1, v175));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
  }
LABEL_253:
  v178 = __p[0];
  if (__p[1] != __p[0])
  {
    v179 = 0;
    v180 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v400, v161, v178[v179++]);
      v178 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v179);
    while (v180 != __p[1])
    {
      v181 = *v180++;
      gdc::Registry::destroy(v161, v181);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(v161);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::FlyoverRenderable>>(v161);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  md::LayoutContext::frameState(a2);
  v399 = *(unsigned __int8 *)(v182 + 128);
  v183 = *(uint64_t **)(v5 + 120);
  v394 = *((_QWORD *)a2 + 2);
  v184 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>((uint64_t)v183);
  v395 = v184[7];
  v393 = v184[8];
  if (v395 != v393)
  {
    v185 = (_QWORD *)v184[10];
    v403 = v183 + 15;
    v405 = (_QWORD *)(v5 + 168);
    v408 = (uint64_t)v183;
    while (1)
    {
      v186 = *(void **)(v5 + 208);
      *(_QWORD *)(v5 + 216) = v186;
      v396 = v185;
      v187 = v185[2];
      if (v187 > (uint64_t)(*(_QWORD *)(v5 + 224) - (_QWORD)v186) >> 4)
      {
        if (v187 >> 60)
          goto LABEL_534;
        v188 = 16 * v187;
        v189 = (char *)operator new(16 * v187);
        *(_QWORD *)(v5 + 208) = v189;
        *(_QWORD *)(v5 + 216) = v189;
        *(_QWORD *)(v5 + 224) = &v189[v188];
        if (v186)
          operator delete(v186);
      }
      v190 = *(_QWORD **)v394;
      v191 = *(_QWORD **)(v394 + 8);
      if (*(_QWORD **)v394 != v191)
      {
        while (*v190 != 0x41D4E9297E100630)
        {
          v190 += 5;
          if (v190 == v191)
          {
            v410 = 0;
            v192 = v396;
            goto LABEL_280;
          }
        }
      }
      v192 = v396;
      if (v190 == v191)
      {
        v410 = 0;
      }
      else
      {
        v193 = (std::__shared_weak_count *)v190[4];
        v410 = (md::VKMRenderResourcesStore *)v190[3];
        if (v193)
        {
          v194 = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
          do
            v196 = __ldaxr(v194);
          while (__stlxr(v196 - 1, v194));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
      }
LABEL_280:
      v197 = v192 + 1;
      v198 = (_QWORD *)*v192;
      v401 = v197;
      if (v198 != v197)
        break;
LABEL_263:
      v185 = v396 + 3;
      v395 += 8;
      if (v395 == v393)
        goto LABEL_463;
    }
    while (1)
    {
      v199 = v198[4];
      v200 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v405, (unsigned __int8 *)(v199 + 16));
      if (!v200)
        goto LABEL_312;
      v201 = v200;
      v203 = *(_QWORD **)(v5 + 144);
      v202 = *(_QWORD **)(v5 + 152);
      if (v203 == v202)
      {
        v204 = *(_QWORD *)(v5 + 144);
      }
      else
      {
        v204 = *(_QWORD *)(v5 + 144);
        while (*(uint64_t **)v204 != v200[16]
             || *(unsigned __int16 *)(v204 + 8) != *((unsigned __int16 *)v200 + 68)
             || *(unsigned __int16 *)(v204 + 10) != *((unsigned __int16 *)v200 + 69)
             || *(_DWORD *)(v204 + 12) != *((_DWORD *)v200 + 35))
        {
          v204 += 16;
          if ((_QWORD *)v204 == v202)
          {
            v204 = *(_QWORD *)(v5 + 152);
            break;
          }
        }
      }
      v205 = (_QWORD *)(v204 + 16);
      if ((_QWORD *)(v204 + 16) != v202)
      {
        v206 = (unint64_t)v202 - v204 - 32;
        if (v206 >= 0x30)
        {
          v207 = (v204 - (uint64_t)v203) >> 4;
          v208 = (v206 >> 4) + 1;
          v209 = 16 * (v208 & 0x1FFFFFFFFFFFFFFCLL);
          v204 += v209;
          v210 = (double *)&v203[2 * v207 + 4];
          v211 = v208 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v212 = v210 - 2;
            v434 = vld2q_f64(v212);
            v213 = v210 + 2;
            v436 = vld2q_f64(v213);
            v214 = v210 - 4;
            vst2q_f64(v214, v434);
            vst2q_f64(v210, v436);
            v210 += 8;
            v211 -= 4;
          }
          while (v211);
          if (v208 == (v208 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_301;
          v205 = (_QWORD *)((char *)v205 + v209);
        }
        do
        {
          *(_QWORD *)v204 = *v205;
          *(_QWORD *)(v204 + 8) = v205[1];
          v204 += 16;
          v205 += 2;
        }
        while (v205 != v202);
      }
LABEL_301:
      *(_QWORD *)(v5 + 152) = v204;
      v215 = v200[16];
      if (v215)
      {
        v216 = *(_QWORD *)(v5 + 136);
        if (*(_QWORD *)(v216 + 16))
        {
          (*(void (**)(uint64_t *))*v215)(v200[16]);
          *v215 = *(_QWORD *)(v216 + 40);
          *(_QWORD *)(v216 + 40) = v215;
        }
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v405, v201);
      v217 = __p[0];
      if (__p[0])
      {
        if (v415[0])
        {
          if (*((_BYTE *)__p[0] + 112))
            *((_BYTE *)__p[0] + 112) = 0;
          v218 = (void *)v217[4];
          if (v218 != (void *)v217[6])
            free(v218);
        }
        operator delete(v217);
      }
      v199 = v198[4];
LABEL_312:
      v412 = (std::__shared_weak_count *)v198[5];
      if (v412)
      {
        v219 = (unint64_t *)&v412->__shared_owners_;
        do
          v220 = __ldxr(v219);
        while (__stxr(v220 + 1, v219));
      }
      LOWORD(v430) = *(_WORD *)(v199 + 168);
      *(_QWORD *)((char *)&v430 + 4) = *(_QWORD *)(v199 + 172);
      v221 = *(double *)(v199 + 600);
      v222 = *(double *)(v199 + 608);
      md::GeometryContext::transformConstantData((double *)&v428, v398, (unsigned __int8 *)&v430, v399, v221, v222);
      v223 = *(_QWORD *)(v5 + 136);
      v224 = *((_BYTE *)v198 + 48);
      v225 = *(_QWORD *)(v223 + 40);
      if (!v225)
      {
        geo::Pool<md::FlyoverRenderable>::allocateSlab(*(uint64_t ***)(v5 + 136));
        v225 = *(_QWORD *)(v223 + 40);
      }
      *(_QWORD *)(v223 + 40) = *(_QWORD *)v225;
      md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(v225, v199, (uint64_t)v412, v224, (v399 - 1) < 3u, &v428);
      *(_QWORD *)v225 = &off_1E426F280;
      *(_QWORD *)(v225 + 384) = v199;
      *(_QWORD *)(v225 + 392) = v412;
      if (v412)
      {
        v226 = (unint64_t *)&v412->__shared_owners_;
        do
          v227 = __ldxr(v226);
        while (__stxr(v227 + 1, v226));
      }
      *(_QWORD *)v225 = &off_1E426EE88;
      v228 = gdc::Registry::create((gdc::Registry *)v183);
      v229 = v228;
      v231 = *(uint64_t **)(v5 + 216);
      v230 = *(_QWORD *)(v5 + 224);
      if ((unint64_t)v231 >= v230)
      {
        v233 = *(uint64_t **)(v5 + 208);
        v234 = ((char *)v231 - (char *)v233) >> 4;
        v235 = v234 + 1;
        if ((unint64_t)(v234 + 1) >> 60)
          goto LABEL_530;
        v236 = v230 - (_QWORD)v233;
        if (v236 >> 3 > v235)
          v235 = v236 >> 3;
        if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF0)
          v237 = 0xFFFFFFFFFFFFFFFLL;
        else
          v237 = v235;
        if (v237)
        {
          if (v237 >> 60)
            goto LABEL_531;
          v238 = (char *)operator new(16 * v237);
        }
        else
        {
          v238 = 0;
        }
        v239 = (uint64_t *)&v238[16 * v234];
        *v239 = v225;
        v239[1] = v229;
        v240 = v239;
        if (v231 != v233)
        {
          do
          {
            *((_OWORD *)v240 - 1) = *((_OWORD *)v231 - 1);
            v240 -= 2;
            v231 -= 2;
          }
          while (v231 != v233);
          v231 = *(uint64_t **)(v5 + 208);
        }
        v232 = v239 + 2;
        *(_QWORD *)(v5 + 208) = v240;
        *(_QWORD *)(v5 + 216) = v239 + 2;
        *(_QWORD *)(v5 + 224) = &v238[16 * v237];
        if (v231)
          operator delete(v231);
        v183 = (uint64_t *)v408;
      }
      else
      {
        *v231 = v225;
        v231[1] = v228;
        v232 = v231 + 2;
      }
      *(_QWORD *)(v5 + 216) = v232;
      v242 = *(uint64_t **)(v5 + 152);
      v241 = *(_QWORD *)(v5 + 160);
      if ((unint64_t)v242 >= v241)
      {
        v244 = *(uint64_t **)(v5 + 144);
        v245 = ((char *)v242 - (char *)v244) >> 4;
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 60)
LABEL_530:
          abort();
        v247 = v241 - (_QWORD)v244;
        if (v247 >> 3 > v246)
          v246 = v247 >> 3;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF0)
          v248 = 0xFFFFFFFFFFFFFFFLL;
        else
          v248 = v246;
        if (v248)
        {
          if (v248 >> 60)
            goto LABEL_531;
          v249 = (char *)operator new(16 * v248);
        }
        else
        {
          v249 = 0;
        }
        v250 = (uint64_t *)&v249[16 * v245];
        *v250 = v225;
        v250[1] = v229;
        v251 = v250;
        if (v242 != v244)
        {
          do
          {
            *((_OWORD *)v251 - 1) = *((_OWORD *)v242 - 1);
            v251 -= 2;
            v242 -= 2;
          }
          while (v242 != v244);
          v242 = *(uint64_t **)(v5 + 144);
        }
        v243 = v250 + 2;
        *(_QWORD *)(v5 + 144) = v251;
        *(_QWORD *)(v5 + 152) = v250 + 2;
        *(_QWORD *)(v5 + 160) = &v249[16 * v248];
        if (v242)
          operator delete(v242);
        v183 = (uint64_t *)v408;
      }
      else
      {
        *v242 = v225;
        v242[1] = v229;
        v243 = v242 + 2;
      }
      *(_QWORD *)(v5 + 152) = v243;
      if (v199)
        v252 = (uint64_t (***)(_QWORD))(v199 + 632);
      else
        v252 = 0;
      if (v412)
      {
        v253 = (unint64_t *)&v412->__shared_owners_;
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
      }
      v255 = (**v252)(v252);
      __p[0] = (void *)md::VKMRenderResourcesStore::createRenderableRegistryHandle(v410, v255);
      v256 = (uint64_t *)gdc::Registry::storage<md::ls::RegisterHandle>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v256, v229, __p);
      v432[0] = 0x2D8FF4589AC05429;
      v257 = (int8x8_t)v183[16];
      if (v257)
      {
        v258 = (uint8x8_t)vcnt_s8(v257);
        v258.i16[0] = vaddlv_u8(v258);
        if (v258.u32[0] > 1uLL)
        {
          v259 = 0x2D8FF4589AC05429;
          if (*(_QWORD *)&v257 <= 0x2D8FF4589AC05429uLL)
            v259 = 0x2D8FF4589AC05429uLL % *(_QWORD *)&v257;
        }
        else
        {
          v259 = (*(_QWORD *)&v257 - 1) & 0x2D8FF4589AC05429;
        }
        v260 = *(_QWORD **)(*v403 + 8 * v259);
        if (v260)
        {
          v261 = (_QWORD *)*v260;
          if (v261)
          {
            if (v258.u32[0] < 2uLL)
            {
              v262 = *(_QWORD *)&v257 - 1;
              while (1)
              {
                v264 = v261[1];
                if (v264 == 0x2D8FF4589AC05429)
                {
                  if (v261[2] == 0x2D8FF4589AC05429)
                    goto LABEL_407;
                }
                else if ((v264 & v262) != v259)
                {
                  goto LABEL_382;
                }
                v261 = (_QWORD *)*v261;
                if (!v261)
                  goto LABEL_382;
              }
            }
            do
            {
              v263 = v261[1];
              if (v263 == 0x2D8FF4589AC05429)
              {
                if (v261[2] == 0x2D8FF4589AC05429)
                {
LABEL_407:
                  v265 = v261[3];
                  goto LABEL_385;
                }
              }
              else
              {
                if (v263 >= *(_QWORD *)&v257)
                  v263 %= *(_QWORD *)&v257;
                if (v263 != v259)
                  break;
              }
              v261 = (_QWORD *)*v261;
            }
            while (v261);
          }
        }
      }
LABEL_382:
      v265 = operator new();
      *(_QWORD *)(v265 + 16) = "md::ls::MapDataTypeT<md::MapDataType::PolarFlyover>]";
      *(_QWORD *)(v265 + 24) = 51;
      *(_OWORD *)(v265 + 32) = 0u;
      *(_OWORD *)(v265 + 48) = 0u;
      *(_OWORD *)(v265 + 64) = 0u;
      *(_OWORD *)(v265 + 80) = 0u;
      *(_OWORD *)(v265 + 96) = 0u;
      *(_OWORD *)(v265 + 112) = 0u;
      *(_OWORD *)(v265 + 128) = 0u;
      *(_DWORD *)(v265 + 144) = 1065353216;
      *(_OWORD *)(v265 + 152) = 0u;
      *(_OWORD *)(v265 + 168) = 0u;
      *(_QWORD *)(v265 + 184) = 0;
      *(_DWORD *)(v265 + 192) = 1065353216;
      *(_OWORD *)(v265 + 200) = 0u;
      *(_OWORD *)(v265 + 216) = 0u;
      *(_QWORD *)(v265 + 232) = 0;
      *(_DWORD *)(v265 + 240) = 1065353216;
      *(_QWORD *)v265 = &off_1E4271388;
      *(_QWORD *)(v265 + 8) = 0x2D8FF4589AC05429;
      *(_QWORD *)(v265 + 248) = v183;
      v266 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v403, 0x2D8FF4589AC05429uLL, v432);
      v267 = v266[3];
      v266[3] = v265;
      if (v267)
        (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
      __p[0] = (void *)0x2D8FF4589AC05429;
      __p[1] = "md::ls::MapDataTypeT<md::MapDataType::PolarFlyover>]";
      *(_QWORD *)v415 = 51;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v183, 0x2D8FF4589AC05429, (uint64_t)__p, (uint64_t *)(v265 + 104));
LABEL_385:
      v431 = v229;
      v268 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v265 + 32), (uint64_t)&v431);
      if ((v269 & 1) != 0)
      {
        v275 = *(_BYTE **)(v265 + 88);
        v274 = *(_QWORD *)(v265 + 96);
        if ((unint64_t)v275 < v274)
        {
          *v275 = 0;
          v276 = (uint64_t)(v275 + 1);
LABEL_422:
          *(_QWORD *)(v265 + 88) = v276;
          v271 = *(_QWORD *)(v265 + 248);
          v183 = (uint64_t *)v408;
          goto LABEL_423;
        }
        v277 = *(_BYTE **)(v265 + 80);
        v278 = v275 - v277;
        v279 = v275 - v277 + 1;
        if (v279 < 0)
          abort();
        v280 = v274 - (_QWORD)v277;
        if (2 * v280 > v279)
          v279 = 2 * v280;
        if (v280 >= 0x3FFFFFFFFFFFFFFFLL)
          v281 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v281 = v279;
        if (v281)
        {
          v282 = v281;
          v283 = (char *)operator new(v281);
          v281 = v282;
        }
        else
        {
          v283 = 0;
        }
        v284 = &v283[v278];
        v283[v278] = 0;
        v276 = (uint64_t)&v283[v278 + 1];
        if (v275 == v277)
          goto LABEL_420;
        if (v278 >= 8 && (unint64_t)(v277 - v283) >= 0x20)
        {
          if (v278 < 0x20)
          {
            v285 = 0;
LABEL_412:
            v290 = v285 - (v278 & 0xFFFFFFFFFFFFFFF8);
            v291 = &v275[-v285];
            v292 = &v283[&v275[-v285] - v277 - 8];
            v293 = (uint64_t *)(v291 - 8);
            do
            {
              v294 = *v293--;
              *(_QWORD *)v292 = v294;
              v292 -= 8;
              v290 += 8;
            }
            while (v290);
            if (v278 != (v278 & 0xFFFFFFFFFFFFFFF8))
            {
              v284 -= v278 & 0xFFFFFFFFFFFFFFF8;
              v275 -= v278 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_417;
            }
LABEL_419:
            v284 = v283;
LABEL_420:
            *(_QWORD *)(v265 + 80) = v284;
            *(_QWORD *)(v265 + 88) = v276;
            *(_QWORD *)(v265 + 96) = &v283[v281];
            if (v277)
              operator delete(v277);
            goto LABEL_422;
          }
          v285 = v278 & 0xFFFFFFFFFFFFFFE0;
          v286 = &v283[v278 - 16];
          v287 = (__int128 *)(v275 - 16);
          v288 = v278 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v289 = *v287;
            *((_OWORD *)v286 - 1) = *(v287 - 1);
            *(_OWORD *)v286 = v289;
            v286 -= 32;
            v287 -= 2;
            v288 -= 32;
          }
          while (v288);
          if (v278 == v285)
            goto LABEL_419;
          if ((v278 & 0x18) != 0)
            goto LABEL_412;
          v284 -= v285;
          v275 -= v285;
        }
LABEL_417:
        v295 = v284 - 1;
        do
        {
          v296 = *--v275;
          *v295-- = v296;
        }
        while (v275 != v277);
        goto LABEL_419;
      }
      v270 = (_BYTE *)(*(_QWORD *)(v265 + 80) + (((uint64_t)v268 - *(_QWORD *)(v265 + 56)) >> 3));
      *v270 = 0;
      v271 = *(_QWORD *)(v265 + 248);
      if (v270 != *(_BYTE **)(v265 + 88))
      {
        v272 = *(_QWORD **)(v265 + 128);
        if (v272)
        {
          while (1)
          {
            __p[0] = &v431;
            __p[1] = (void *)1;
            v432[0] = v271;
            v273 = v272[6];
            if (!v273)
              goto LABEL_529;
            (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v273 + 48))(v273, v432, __p);
            v272 = (_QWORD *)*v272;
            if (!v272)
              goto LABEL_426;
          }
        }
        goto LABEL_426;
      }
LABEL_423:
      v297 = *(_QWORD **)(v265 + 176);
      if (v297)
      {
        while (1)
        {
          __p[0] = &v431;
          __p[1] = (void *)1;
          v432[0] = v271;
          v298 = v297[6];
          if (!v298)
            break;
          (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v298 + 48))(v298, v432, __p);
          v297 = (_QWORD *)*v297;
          if (!v297)
            goto LABEL_426;
        }
LABEL_529:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_534:
        abort();
      }
LABEL_426:
      LOWORD(__p[0]) = 79;
      v299 = (uint64_t *)gdc::Registry::storage<md::ls::MapDataTypeV>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(v299, v229, __p);
      __p[0] = (void *)((uint64_t)(*(_QWORD *)(v5 + 152) - *(_QWORD *)(v5 + 144)) >> 4);
      v300 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v300, v229, __p);
      LODWORD(__p[0]) = 0;
      *(_OWORD *)v415 = 0uLL;
      __p[1] = 0;
      v301 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablesCount>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(v301, v229, (uint64_t)__p);
      if (__p[1])
        operator delete(__p[1]);
      v302 = (uint64_t *)gdc::Registry::storage<md::ls::WillEnterView>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v302, v229);
      v303 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)79>>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v303, v229);
      __p[0] = (void *)md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(v410, (md::BaseMapTileDataRenderable *)v225);
      v304 = (uint64_t *)gdc::Registry::storage<md::ls::BaseMapTileHandle>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v304, v229, __p);
      v305 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v305, v229);
      LOBYTE(__p[0]) = *(_BYTE *)(v225 + 24);
      v306 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v306, v229, __p);
      BYTE2(v432[0]) = 0;
      LOWORD(v432[0]) = 0;
      v308 = DWORD1(v430);
      v307 = DWORD2(v430);
      v309 = vcvtmd_s64_f64(v221 * 100.0);
      v310 = BYTE1(v430);
      v311 = vcvtpd_s64_f64(v222 * 100.0);
      v421 = *(gdc::Registry **)((char *)&v430 + 4);
      v422 = BYTE1(v430);
      v423 = 0;
      v424 = 0;
      v425 = v309;
      v426 = v311;
      v427 = -1;
      v312 = (void *)md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(v410, (int *)&v421);
      if (v313)
      {
        v314 = v312;
        __p[0] = v312;
        v315 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v408);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v315, v229, __p);
        __p[0] = v314;
        v316 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)v410 + 3272, (unint64_t)v314, __p);
        ++v316[4];
        v183 = (uint64_t *)v408;
      }
      else
      {
        v317 = v428;
        v318 = v429;
        if (v429)
        {
          v319 = (unint64_t *)&v429->__shared_owners_;
          do
            v320 = __ldxr(v319);
          while (__stxr(v320 + 1, v319));
        }
        v321 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>((uint64_t)v410, v317, v318);
        if (v318)
        {
          v322 = (unint64_t *)&v318->__shared_owners_;
          do
            v323 = __ldaxr(v322);
          while (__stlxr(v323 - 1, v322));
          if (!v323)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
        }
        __p[0] = (void *)__PAIR64__(v307, v308);
        LOBYTE(__p[1]) = v310;
        *(_WORD *)((char *)&__p[1] + 1) = v432[0];
        BYTE3(__p[1]) = BYTE2(v432[0]);
        HIDWORD(__p[1]) = v309;
        *(_DWORD *)v415 = v311;
        *(_DWORD *)&v415[4] = -1;
        *(_QWORD *)&v415[8] = v321;
        std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>((float *)v410 + 2656, (int *)__p, (uint64_t)__p);
        __p[0] = v321;
        v183 = (uint64_t *)v408;
        v324 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v408);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v324, v229, __p);
      }
      v5 = v406;
      __p[0] = (void *)md::VKMRenderResourcesStore::createAssociationtemHandle(v410);
      v325 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationTileHandle>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v325, v229, __p);
      __p[0] = (void *)md::VKMRenderResourcesStore::createSharedTileMatrix((uint64_t)v410, (__int128 *)(v225 + 88));
      v326 = (uint64_t *)gdc::Registry::storage<md::ls::TileMatrix>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v326, v229, __p);
      v327 = *(_QWORD *)(v225 + 384);
      v328 = *(_OWORD *)(v327 + 424);
      v417 = *(_OWORD *)(v327 + 408);
      v418 = v328;
      v329 = *(_OWORD *)(v327 + 456);
      v419 = *(_OWORD *)(v327 + 440);
      v420 = v329;
      v330 = *(_OWORD *)(v327 + 360);
      *(_OWORD *)__p = *(_OWORD *)(v327 + 344);
      *(_OWORD *)v415 = v330;
      v331 = *(_OWORD *)(v327 + 392);
      *(_OWORD *)&v415[16] = *(_OWORD *)(v327 + 376);
      v416 = v331;
      v332 = (uint64_t *)gdc::Registry::storage<md::ls::GlobeMatrixData>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::emplace(v332, v229, (__int128 *)__p);
      if (*(unsigned __int8 *)(v225 + 24) == 255)
      {
        LOWORD(__p[0]) = *(_WORD *)(v327 + 816);
        *(void **)((char *)__p + 4) = *(void **)(v327 + 820);
        *(_OWORD *)&v415[8] = *(_OWORD *)(v327 + 840);
      }
      else
      {
        LOWORD(__p[0]) = *(_WORD *)(v327 + 168);
        *(void **)((char *)__p + 4) = *(void **)(v327 + 172);
        v415[8] = 4;
        *(_QWORD *)&v415[12] = 0;
        *(_DWORD *)&v415[20] = 0;
      }
      v333 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverOctileKey>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::emplace(v333, v229, (__int128 *)__p);
      v334 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>((uint64_t)v183);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v334, v229);
      if (!v412)
        goto LABEL_446;
      v335 = (unint64_t *)&v412->__shared_owners_;
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 - 1, v335));
      if (!v336)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
        v337 = v429;
        if (!v429)
          goto LABEL_452;
      }
      else
      {
LABEL_446:
        v337 = v429;
        if (!v429)
          goto LABEL_452;
      }
      v338 = (unint64_t *)&v337->__shared_owners_;
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
        std::__shared_weak_count::__release_weak(v337);
      }
      if (!v412)
        goto LABEL_456;
LABEL_452:
      v340 = (unint64_t *)&v412->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
        v342 = (_QWORD *)v198[1];
        if (!v342)
        {
          do
          {
LABEL_460:
            v343 = (_QWORD *)v198[2];
            v158 = *v343 == (_QWORD)v198;
            v198 = v343;
          }
          while (!v158);
          goto LABEL_282;
        }
      }
      else
      {
LABEL_456:
        v342 = (_QWORD *)v198[1];
        if (!v342)
          goto LABEL_460;
      }
      do
      {
        v343 = v342;
        v342 = (_QWORD *)*v342;
      }
      while (v342);
LABEL_282:
      v198 = v343;
      if (v343 == v401)
        goto LABEL_263;
    }
  }
LABEL_463:
  v421 = *(gdc::Registry **)(v5 + 120);
  v344 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>((uint64_t)v421);
  v345 = v344[7];
  v413 = v344[8];
  if (v345 != v413)
  {
    v346 = v344[10];
    v347 = (_QWORD *)(v5 + 168);
    v348 = (uint64_t ***)(v346 + 8);
    do
    {
      v355 = v5;
      v356 = *(char **)(v5 + 144);
      v349 = *(char **)(v355 + 152);
      if (v356 != v349)
      {
        while (1)
        {
          v357 = *(_QWORD *)(*(_QWORD *)v356 + 384);
          v358 = *(std::__shared_weak_count **)(*(_QWORD *)v356 + 392);
          if (v358)
          {
            v359 = (unint64_t *)&v358->__shared_owners_;
            do
              v360 = __ldxr(v359);
            while (__stxr(v360 + 1, v359));
            v361 = *(unsigned __int8 *)(*(_QWORD *)v356 + 48);
            do
              v362 = __ldxr(v359);
            while (__stxr(v362 + 1, v359));
            for (n = *(uint64_t ***)(v346 + 8); n; n = (uint64_t **)*n)
            {
LABEL_480:
              v365 = *((unsigned __int8 *)n + 48);
              v366 = *((char *)n + 48) > (char)v361;
              v367 = (unint64_t)n[4];
              if (v361 == v365)
                v366 = v357 < v367;
              if (!v366)
              {
                v368 = v367 < v357;
                if (v361 == v365)
                  v369 = v368;
                else
                  v369 = (char)v365 < (char)v361;
                if (!v369)
                {
                  v364 = 1;
                  if (v358)
                    goto LABEL_488;
                  goto LABEL_495;
                }
                ++n;
              }
            }
          }
          else
          {
            v361 = *(unsigned __int8 *)(*(_QWORD *)v356 + 48);
            n = *(uint64_t ***)(v346 + 8);
            if (n)
              goto LABEL_480;
          }
          v364 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v347, (unsigned __int8 *)(v357 + 16)) != 0;
          if (v358)
          {
LABEL_488:
            v370 = (unint64_t *)&v358->__shared_owners_;
            do
              v371 = __ldaxr(v370);
            while (__stlxr(v371 - 1, v370));
            if (!v371)
            {
              ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
              std::__shared_weak_count::__release_weak(v358);
            }
            do
              v372 = __ldaxr(v370);
            while (__stlxr(v372 - 1, v370));
            if (!v372)
            {
              ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
              std::__shared_weak_count::__release_weak(v358);
            }
          }
LABEL_495:
          if (!v364)
            break;
LABEL_496:
          v356 += 16;
          if (v356 == v349)
            goto LABEL_466;
        }
        while (1)
        {
          v373 = v349;
          v349 -= 16;
          if (v356 == v349)
            break;
          v374 = *(_QWORD *)(*(_QWORD *)v349 + 384);
          v375 = *(std::__shared_weak_count **)(*(_QWORD *)v349 + 392);
          if (v375)
          {
            v376 = (unint64_t *)&v375->__shared_owners_;
            do
              v377 = __ldxr(v376);
            while (__stxr(v377 + 1, v376));
            v378 = *(unsigned __int8 *)(*(_QWORD *)v349 + 48);
            do
              v379 = __ldxr(v376);
            while (__stxr(v379 + 1, v376));
            for (ii = *v348; ii; ii = (uint64_t **)*ii)
            {
LABEL_511:
              v382 = *((unsigned __int8 *)ii + 48);
              v383 = *((char *)ii + 48) > (char)v378;
              v384 = (unint64_t)ii[4];
              if (v378 == v382)
                v383 = v374 < v384;
              if (!v383)
              {
                v385 = v384 < v374;
                if (v378 == v382)
                  v386 = v385;
                else
                  v386 = (char)v382 < (char)v378;
                if (!v386)
                {
                  v381 = 1;
                  if (v375)
                    goto LABEL_520;
                  goto LABEL_498;
                }
                ++ii;
              }
            }
          }
          else
          {
            v378 = *(unsigned __int8 *)(*(_QWORD *)v349 + 48);
            ii = *v348;
            if (*v348)
              goto LABEL_511;
          }
          v381 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v347, (unsigned __int8 *)(v374 + 16)) != 0;
          if (v375)
          {
LABEL_520:
            v387 = (unint64_t *)&v375->__shared_owners_;
            do
              v388 = __ldaxr(v387);
            while (__stlxr(v388 - 1, v387));
            if (!v388)
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
            do
              v389 = __ldaxr(v387);
            while (__stlxr(v389 - 1, v387));
            if (!v389)
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
          }
LABEL_498:
          if (v381)
          {
            v390 = *(_QWORD *)v356;
            *(_QWORD *)v356 = *((_QWORD *)v373 - 2);
            *((_QWORD *)v373 - 2) = v390;
            v391 = *((_QWORD *)v356 + 1);
            *((_QWORD *)v356 + 1) = *((_QWORD *)v373 - 1);
            *((_QWORD *)v373 - 1) = v391;
            goto LABEL_496;
          }
        }
      }
      v349 = v356;
LABEL_466:
      v5 = v406;
      v350 = *(void **)(v406 + 152);
      v351 = v421;
      __p[0] = v349;
      __p[1] = v350;
      v430 = *(_OWORD *)(v406 + 208);
      v352 = gdc::Registry::create(v421);
      v353 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::FlyoverRenderable>>((uint64_t)v351);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v353, v352, __p);
      v354 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillEnterView<md::FlyoverRenderable>>((uint64_t)v351);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v354, v352, &v430);
      v346 += 24;
      v345 += 8;
      v348 += 3;
    }
    while (v345 != v413);
  }
  *v392 = *(_QWORD *)(v5 + 120);
}

void sub_19F4722D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1995DE3D010F44EDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1995DE3D010F44EDLL;
      if (*(_QWORD *)&v3 <= 0x1995DE3D010F44EDuLL)
        v5 = 0x1995DE3D010F44EDuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1995DE3D010F44EDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1995DE3D010F44EDLL)
            {
              if (v7[2] == 0x1995DE3D010F44EDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1995DE3D010F44EDLL)
          {
            if (v7[2] == 0x1995DE3D010F44EDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270D58;
  *(_QWORD *)(v11 + 8) = 0x1995DE3D010F44EDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1995DE3D010F44EDuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1995DE3D010F44EDLL;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::PolarFlyover>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1995DE3D010F44EDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F472784(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4DD1DD0D09C88526;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4DD1DD0D09C88526;
      if (*(_QWORD *)&v3 <= 0x4DD1DD0D09C88526uLL)
        v5 = 0x4DD1DD0D09C88526uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4DD1DD0D09C88526;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4DD1DD0D09C88526)
            {
              if (v7[2] == 0x4DD1DD0D09C88526)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4DD1DD0D09C88526)
          {
            if (v7[2] == 0x4DD1DD0D09C88526)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 63;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270A58;
  *(_QWORD *)(v11 + 8) = 0x4DD1DD0D09C88526;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4DD1DD0D09C88526uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4DD1DD0D09C88526;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::PolarFlyover>]";
  v15[2] = 63;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4DD1DD0D09C88526, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4729AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xFAC632E90BB7F066;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xFAC632E90BB7F066;
      if (*(_QWORD *)&v3 <= 0xFAC632E90BB7F066)
        v5 = 0xFAC632E90BB7F066 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xFAC632E90BB7F066;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xFAC632E90BB7F066)
            {
              if (v7[2] == 0xFAC632E90BB7F066)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xFAC632E90BB7F066)
          {
            if (v7[2] == 0xFAC632E90BB7F066)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataActive<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 63;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270998;
  *(_QWORD *)(v11 + 8) = 0xFAC632E90BB7F066;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xFAC632E90BB7F066, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xFAC632E90BB7F066;
  v15[1] = "SceneComponents::LayerDataActive<md::MapDataType::PolarFlyover>]";
  v15[2] = 63;
  gdc::Registry::_registerStorageDataSignals(a1, 0xFAC632E90BB7F066, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F472D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *v10;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          *v10 = *v8;
          *v8 = v107;
          v108 = v10[1];
          v10[1] = *v9;
          goto LABEL_185;
        }
        return result;
      case 3:
        v109 = v10[2];
        v110 = *(unsigned __int8 *)(*(_QWORD *)(v109 + 384) + 169);
        v111 = *v10;
        v112 = *v8;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
        if (v110 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          if (v113 <= v110)
            return result;
          v10[2] = v112;
          *v8 = v109;
          v156 = v10[3];
          v10[3] = *v9;
          *v9 = v156;
          v157 = v10[2];
          v158 = *v10;
          if (*(unsigned __int8 *)(*(_QWORD *)(v157 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            return result;
          *v10 = v157;
          v10[2] = v158;
          v114 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v113 <= v110)
          {
            v114 = v10 + 3;
            v167 = v10[3];
            v168 = v10[1];
            *v10 = v109;
            v10[1] = v167;
            v10[2] = v111;
            v10[3] = v168;
            if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v111 + 384) + 169))
              return result;
            v10[2] = *v8;
          }
          else
          {
            v114 = v10 + 1;
            *v10 = v112;
          }
          *v8 = v111;
        }
        v108 = *v114;
        *v114 = *v9;
LABEL_185:
        *v9 = v108;
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v128 = (unint64_t)(v12 - 2) >> 1;
              v129 = v128;
              do
              {
                v130 = v129;
                if (v128 >= v129)
                {
                  v131 = (2 * v129) | 1;
                  v132 = &v10[2 * v131];
                  if (2 * v130 + 2 >= v12)
                  {
                    v136 = *v132;
                  }
                  else
                  {
                    v133 = *(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169);
                    v134 = *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169);
                    v135 = v133 > v134;
                    if (v133 <= v134)
                      v136 = *v132;
                    else
                      v136 = v132[2];
                    if (v135)
                    {
                      v132 += 2;
                      v131 = 2 * v130 + 2;
                    }
                  }
                  v137 = &v10[2 * v130];
                  v138 = *v137;
                  result = *(unsigned __int8 *)(*(_QWORD *)(*v137 + 384) + 169);
                  if (*(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169) <= result)
                  {
                    v139 = v137[1];
                    do
                    {
                      result = (unint64_t)v137;
                      v137 = v132;
                      *(_QWORD *)result = v136;
                      *(_QWORD *)(result + 8) = v132[1];
                      if (v128 < v131)
                        break;
                      v140 = (2 * v131) | 1;
                      v132 = &v10[2 * v140];
                      v131 = 2 * v131 + 2;
                      if (v131 < v12)
                      {
                        v136 = *v132;
                        if (*(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169))
                        {
                          v131 = v140;
                        }
                        else
                        {
                          v136 = v132[2];
                          v132 += 2;
                        }
                      }
                      else
                      {
                        v136 = *v132;
                        v131 = v140;
                      }
                      result = *(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(_QWORD *)(v138 + 384) + 169));
                    *v137 = v138;
                    v137[1] = v139;
                  }
                }
                v129 = v130 - 1;
              }
              while (v130);
              v141 = (unint64_t)v11 >> 4;
              do
              {
                v142 = 0;
                v143 = *v10;
                v144 = v10[1];
                v145 = v10;
                do
                {
                  v147 = &v145[2 * v142 + 2];
                  v148 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    v146 = *v147;
                    result = (unint64_t)(v147 + 2);
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v147[2] + 384) + 169))
                    {
                      v142 = v148;
                    }
                    else
                    {
                      v146 = v147[2];
                      v147 += 2;
                    }
                  }
                  else
                  {
                    v146 = *v147;
                    v142 = v148;
                  }
                  *v145 = v146;
                  v145[1] = v147[1];
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == a2 - 2)
                {
                  *v147 = v143;
                  v147[1] = v144;
                }
                else
                {
                  *v147 = *(a2 - 2);
                  v147[1] = *(a2 - 1);
                  *(a2 - 2) = v143;
                  *(a2 - 1) = v144;
                  v149 = (char *)v147 - (char *)v10 + 16;
                  if (v149 >= 17)
                  {
                    v150 = (((unint64_t)v149 >> 4) - 2) >> 1;
                    v151 = &v10[2 * v150];
                    v152 = *v151;
                    v153 = *v147;
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169))
                    {
                      v154 = v147[1];
                      do
                      {
                        v155 = v147;
                        v147 = v151;
                        *v155 = v152;
                        v155[1] = v151[1];
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[2 * v150];
                        v152 = *v151;
                      }
                      while (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v153 + 384) + 169));
                      *v147 = v153;
                      v147[1] = v154;
                    }
                  }
                }
                a2 -= 2;
                v135 = v141-- <= 2;
              }
              while (!v135);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
          if ((unint64_t)v11 >= 0x801)
          {
            v17 = *v14;
            v18 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
            v19 = *v10;
            if (v18 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            {
              if (v16 <= v18
                || (*v14 = v15,
                    *v8 = v17,
                    v26 = v14 + 1,
                    v25 = v14[1],
                    v14[1] = *v9,
                    *v9 = v25,
                    v27 = *v10,
                    *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169)))
              {
LABEL_23:
                v34 = &v10[2 * v13];
                v37 = *(v34 - 2);
                v35 = v34 - 2;
                v36 = v37;
                v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169);
                v39 = v10[2];
                v40 = *(a2 - 4);
                v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 384) + 169);
                if (v38 <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                {
                  if (v41 <= v38
                    || (*v35 = v40,
                        *(a2 - 4) = v36,
                        v43 = v35 + 1,
                        v44 = v35[1],
                        v35[1] = *(a2 - 3),
                        *(a2 - 3) = v44,
                        v45 = v10[2],
                        *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v45 + 384) + 169)))
                  {
LABEL_36:
                    v52 = &v10[2 * v13];
                    v55 = v52[2];
                    v53 = v52 + 2;
                    v54 = v55;
                    v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 384) + 169);
                    v57 = v10[4];
                    v58 = *(a2 - 6);
                    v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 384) + 169);
                    if (v56 <= *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169))
                    {
                      if (v59 > v56)
                      {
                        *v53 = v58;
                        *(a2 - 6) = v54;
                        v62 = v53 + 1;
                        v61 = v53[1];
                        v53[1] = *(a2 - 5);
                        *(a2 - 5) = v61;
                        v54 = *v53;
                        v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        v63 = v10[4];
                        if (v56 > *(unsigned __int8 *)(*(_QWORD *)(v63 + 384) + 169))
                        {
                          v10[4] = v54;
                          *v53 = v63;
                          v60 = v10 + 5;
LABEL_45:
                          v67 = *v60;
                          *v60 = *v62;
                          *v62 = v67;
                          v54 = *v53;
                          v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v59 > v56)
                      {
                        v60 = v10 + 5;
                        v10[4] = v58;
LABEL_44:
                        *(a2 - 6) = v57;
                        v62 = a2 - 5;
                        goto LABEL_45;
                      }
                      v60 = v53 + 1;
                      v64 = v53[1];
                      v65 = v10[5];
                      v10[4] = v54;
                      v10[5] = v64;
                      *v53 = v57;
                      v53[1] = v65;
                      v66 = *(a2 - 6);
                      v56 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169);
                      if (*(unsigned __int8 *)(*(_QWORD *)(v66 + 384) + 169) > v56)
                      {
                        *v53 = v66;
                        goto LABEL_44;
                      }
                      v54 = v57;
                    }
                    v68 = *v14;
                    v69 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
                    v70 = *v35;
                    if (v69 <= *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169))
                    {
                      if (v56 <= v69)
                      {
LABEL_56:
                        v78 = *v10;
                        *v10 = v68;
                        v24 = v10 + 1;
                        *v14 = v78;
                        v30 = v14 + 1;
                        goto LABEL_57;
                      }
                      *v14 = v54;
                      v73 = v14 + 1;
                      v74 = v14[1];
                      v14[1] = v53[1];
                      *v53 = v68;
                      v53[1] = v74;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                      {
                        v68 = v54;
                        goto LABEL_56;
                      }
                      *v35 = v54;
                      v71 = v35 + 1;
                      *v14 = v70;
                    }
                    else
                    {
                      if (v56 <= v69)
                      {
                        *v14 = v70;
                        v75 = v14[1];
                        v76 = v35[1];
                        *v35 = v68;
                        v35[1] = v75;
                        v14[1] = v76;
                        if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                        {
                          v68 = v70;
                          goto LABEL_56;
                        }
                        *v14 = v54;
                        *v53 = v70;
                        v72 = v53 + 1;
                        v71 = v14 + 1;
                      }
                      else
                      {
                        *v35 = v54;
                        v71 = v35 + 1;
                        *v53 = v70;
                        v72 = v53 + 1;
                      }
                      v73 = v72;
                    }
                    v77 = *v71;
                    *v71 = *v73;
                    *v73 = v77;
                    v68 = *v14;
                    goto LABEL_56;
                  }
                  v10[2] = *v35;
                  *v35 = v45;
                  v42 = v10 + 3;
                }
                else
                {
                  if (v41 <= v38)
                  {
                    v42 = v35 + 1;
                    v48 = v35[1];
                    v49 = v10[3];
                    v10[2] = v36;
                    v10[3] = v48;
                    *v35 = v39;
                    v35[1] = v49;
                    v50 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v50 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                      goto LABEL_36;
                    *v35 = v50;
                  }
                  else
                  {
                    v42 = v10 + 3;
                    v10[2] = v40;
                  }
                  *(a2 - 4) = v39;
                  v43 = a2 - 3;
                }
                v51 = *v42;
                *v42 = *v43;
                *v43 = v51;
                goto LABEL_36;
              }
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v27;
            }
            else
            {
              if (v16 <= v18)
              {
                v20 = v14 + 1;
                v31 = v14[1];
                v32 = v10[1];
                *v10 = v17;
                v10[1] = v31;
                *v14 = v19;
                v14[1] = v32;
                if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v19 + 384) + 169))
                  goto LABEL_23;
                *v14 = *v8;
              }
              else
              {
                v20 = v10 + 1;
                *v10 = v15;
              }
              *v8 = v19;
              v26 = a2 - 1;
            }
            v33 = *v20;
            *v20 = *v26;
            *v26 = v33;
            goto LABEL_23;
          }
          v21 = *v10;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169);
          v23 = *v14;
          if (v22 <= *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
          {
            if (v16 > v22)
            {
              *v10 = v15;
              *v8 = v21;
              v28 = v10[1];
              v10[1] = *v9;
              *v9 = v28;
              v21 = *v10;
              v29 = *v14;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
              {
                *v14 = v21;
                *v10 = v29;
                v24 = v14 + 1;
                v30 = v10 + 1;
LABEL_57:
                v79 = *v24;
                *v24 = *v30;
                *v30 = v79;
                v21 = *v10;
              }
            }
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_59;
LABEL_61:
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
            if (*(unsigned __int8 *)(*(_QWORD *)(*(v10 - 2) + 384) + 169) > v80)
              goto LABEL_62;
            if (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169))
            {
              v97 = v10 + 2;
              do
              {
                v10 = v97;
                if (v97 >= a2)
                  break;
                v97 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169));
            }
            else
            {
              do
              {
                v96 = v10[2];
                v10 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(v96 + 384) + 169));
            }
            v98 = a2;
            if (v10 < a2)
            {
              v98 = a2;
              do
              {
                v99 = *(v98 - 2);
                v98 -= 2;
              }
              while (v80 > *(unsigned __int8 *)(*(_QWORD *)(v99 + 384) + 169));
            }
            v100 = v7[1];
            if (v10 < v98)
            {
              v101 = *v10;
              v102 = *v98;
              do
              {
                *v10 = v102;
                *v98 = v101;
                v103 = v10[1];
                v10[1] = v98[1];
                v98[1] = v103;
                v104 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
                do
                {
                  v105 = v10[2];
                  v10 += 2;
                  v101 = v105;
                }
                while (v104 <= *(unsigned __int8 *)(*(_QWORD *)(v105 + 384) + 169));
                do
                {
                  v106 = *(v98 - 2);
                  v98 -= 2;
                  v102 = v106;
                }
                while (v104 > *(unsigned __int8 *)(*(_QWORD *)(v106 + 384) + 169));
              }
              while (v10 < v98);
            }
            if (v10 - 2 != v7)
            {
              *v7 = *(v10 - 2);
              v7[1] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 2) = v21;
            *(v10 - 1) = v100;
            continue;
          }
          if (v16 > v22)
          {
            v24 = v14 + 1;
            *v14 = v15;
LABEL_31:
            *v8 = v23;
            v30 = a2 - 1;
            goto LABEL_57;
          }
          v24 = v10 + 1;
          v46 = v10[1];
          v47 = v14[1];
          *v14 = v21;
          v14[1] = v46;
          *v10 = v23;
          v10[1] = v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v23 + 384) + 169))
          {
            *v10 = *v8;
            goto LABEL_31;
          }
          v21 = v23;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_59:
          v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
LABEL_62:
          v81 = v10[1];
          v82 = v10;
          do
          {
            v83 = v82;
            v85 = v82[2];
            v82 += 2;
            v84 = v85;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v85 + 384) + 169) > v80);
          v86 = a2;
          if (v83 == v10)
          {
            v86 = a2;
            do
            {
              if (v82 >= v86)
                break;
              v88 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v88 + 384) + 169) <= v80);
          }
          else
          {
            do
            {
              v87 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v87 + 384) + 169) <= v80);
          }
          if (v82 >= v86)
          {
            v10 = v82;
          }
          else
          {
            v89 = *v86;
            v10 = v82;
            v90 = v86;
            do
            {
              *v10 = v89;
              *v90 = v84;
              v91 = v10[1];
              v10[1] = v90[1];
              v90[1] = v91;
              v92 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
              do
              {
                v93 = v10[2];
                v10 += 2;
                v84 = v93;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v93 + 384) + 169) > v92);
              do
              {
                v94 = *(v90 - 2);
                v90 -= 2;
                v89 = v94;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v94 + 384) + 169) <= v92);
            }
            while (v10 < v90);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          *(v10 - 2) = v21;
          *(v10 - 1) = v81;
          if (v82 < v86)
            goto LABEL_83;
          v95 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v7, v10 - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v95)
              continue;
LABEL_83:
            result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v7, v10 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 2;
          if (v95)
            return result;
          goto LABEL_2;
        }
        v115 = v10 + 2;
        v117 = v10 == a2 || v115 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v117)
          {
            v118 = 0;
            v119 = v10;
            do
            {
              v121 = v115;
              v122 = v119[2];
              v123 = *v119;
              if (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v119 + 384) + 169))
              {
                v124 = v119[3];
                v125 = v118;
                do
                {
                  v126 = (char *)v10 + v125;
                  v127 = *(uint64_t *)((char *)v10 + v125 + 8);
                  *((_QWORD *)v126 + 2) = v123;
                  *((_QWORD *)v126 + 3) = v127;
                  if (!v125)
                  {
                    v120 = v10;
                    goto LABEL_125;
                  }
                  v123 = *((_QWORD *)v126 - 2);
                  v125 -= 16;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v123 + 384) + 169));
                v120 = (uint64_t *)((char *)v10 + v125 + 16);
LABEL_125:
                *v120 = v122;
                v120[1] = v124;
              }
              v115 = v121 + 2;
              v118 += 16;
              v119 = v121;
            }
            while (v121 + 2 != a2);
          }
        }
        else if (!v117)
        {
          v159 = v10 + 3;
          do
          {
            v160 = v115;
            v161 = v7[2];
            v162 = *v7;
            if (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v7 + 384) + 169))
            {
              v163 = v7[3];
              v164 = v159;
              do
              {
                v165 = v164;
                *(v164 - 1) = v162;
                v166 = *(v164 - 2);
                v164 -= 2;
                *v165 = v166;
                v162 = *(v165 - 5);
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v162 + 384) + 169));
              *(v164 - 1) = v161;
              *v164 = v163;
            }
            v115 = v160 + 2;
            v159 += 2;
            v7 = v160;
          }
          while (v160 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 2);
      v4 = *a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v6 = a1[2];
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 384) + 169);
      v8 = *a1;
      v9 = *(a2 - 2);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          v11 = a1 + 3;
          v26 = a1[3];
          v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(_QWORD *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 384) + 169))
            return 1;
          a1[2] = v28;
        }
        else
        {
          v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        v20 = a1 + 3;
        v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        v21 = a1[2];
        v22 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          v11 = a1 + 1;
LABEL_21:
          v29 = *v11;
          *v11 = *v20;
          *v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 384) + 169);
      v16 = *a1;
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          v18 = a1 + 3;
          v30 = a1[3];
          v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
            goto LABEL_26;
          a1[2] = v13;
        }
        else
        {
          v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        v24 = a1 + 3;
        v23 = a1[3];
        v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          v18 = a1 + 1;
LABEL_25:
          v32 = *v18;
          *v18 = *v24;
          *v24 = v32;
        }
      }
LABEL_26:
      v33 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v37 = *v33;
        v38 = *v12;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v12 + 384) + 169))
        {
          v39 = v33[1];
          v40 = v34;
          do
          {
            v41 = (uint64_t *)((char *)a1 + v40);
            v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              v36 = a1;
              goto LABEL_29;
            }
            v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v38 + 384) + 169));
          v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *v36 = v37;
          v36[1] = v39;
          if (++v35 == 8)
            return v33 + 2 == a2;
        }
        v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2)
          return 1;
      }
  }
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v3 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0xE4007F1EDCD91179;
    if (a2 <= 0xE4007F1EDCD91179)
      v11 = 0xE4007F1EDCD91179 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0xE4007F1EDCD91179;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0xE4007F1EDCD91179)
      {
        if (v13[2] == 0xE4007F1EDCD91179)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0xE4007F1EDCD91179)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0xE4007F1EDCD91179)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0xE4007F1EDCD91179)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)79>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E4270710;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)79>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E4270710;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)79>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t ggl::crc32::compute<23ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  return ggl::crc32::crc32Table[v19 ^ a1[21]] ^ ~(v19 >> 8);
}

void ggl::EndOfWorld::BasePipelineState::~BasePipelineState(ggl::EndOfWorld::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverNightDim::QuadPipelineState::~QuadPipelineState(ggl::FlyoverNightDim::QuadPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverNightDim::QuadPipelineState::QuadPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverNightDimShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1ECE43A80 = 1;
          }
          ggl::FlyoverNightDim::QuadPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE586518 = &ggl::FlyoverNightDim::pipelineDataQuadPipelineDeviceStructs(void)::ref;
          qword_1EE586520 = 0;
          if ((v97 & 1) == 0
          {
            ggl::FlyoverNightDim::pipelineDataQuadPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverNightDim::Color::reflection(void)::reflection;
          }
          qword_1EE586528 = (uint64_t)&ggl::FlyoverNightDim::pipelineDataQuadPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE586530 = xmmword_19FFB3350;
        }
      }
      ggl::FlyoverNightDim::QuadPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverNightDim::QuadPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverNightDimShader::typedReflection(v92);
      qword_1EE5864C0 = (uint64_t)&ggl::FlyoverNightDimShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::FlyoverNightDim::pipelineStateQuadPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE586560 = 0;
        qword_1EE586568 = (uint64_t)"";
        dword_1EE586570 = 0;
        qword_1EE586578 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineAttributeBinding_0(void)::attr;
        unk_1EE586580 = 1;
      }
      qword_1EE5864C8 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineAttributeStructBinding(void)::attr;
      unk_1EE5864D0 = 1;
      qword_1EE5864D8 = 0;
      unk_1EE5864E0 = 0;
      qword_1EE5864E8 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineDeviceStructBinding(void)::ref;
      unk_1EE5864F0 = 0;
      if ((v95 & 1) == 0
      {
        ggl::FlyoverNightDim::pipelineStateQuadPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE5865A0 = 0;
        qword_1EE5865A8 = (uint64_t)"color";
        dword_1EE5865B0 = 3;
        qword_1EE5865B8 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineConstantColorBinding(void)::reflection;
        unk_1EE5865C0 = 1;
      }
      qword_1EE5864F8 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineConstantStructBinding(void)::ref;
      unk_1EE586500 = 1;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverNightDim::QuadPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B7158;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FlyoverNightDim::QuadPipelineSetup::~QuadPipelineSetup(ggl::FlyoverNightDim::QuadPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverNightDim::QuadPipelineSetup::constantDataIsEnabled(ggl::FlyoverNightDim::QuadPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::FlyoverNightDim::QuadPipelineSetup::textureIsEnabled(ggl::FlyoverNightDim::QuadPipelineSetup *this)
{
  return 0;
}

uint64_t md::NullARWalkingLabelsStateDelegate::arBackgroundTexture(md::NullARWalkingLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::transitSupport(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::externalObjectsModerator(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::externalMeshModerator(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::customFeatureSupport(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::trafficTilePool(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

void md::NullStandardLabelsStateDelegate::resourcesAtMercatorPoint(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t md::NullStandardLabelsStateDelegate::isPointInActiveRegion()
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::isRectInActiveRegion()
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::isTransitNodeAlongSelectedLine(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

void md::NullTransitLabelsStateDelegate::baseTransitLineColor(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void md::NullTransitLabelsStateDelegate::findColorForTransitLine(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
}

uint64_t md::NullNavTrafficLabelsStateDelegate::areRouteTrafficFeaturesActive(md::NullNavTrafficLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavTrafficLabelsStateDelegate::externalTrafficIncidentFeatures(md::NullNavTrafficLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::navMode(md::NullNavLabelsStateDelegate *this)
{
  return 1;
}

uint64_t md::NullNavLabelsStateDelegate::isNavActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isEtaActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isNavHighZoomActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isNavApplicationStateActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

float md::NullNavLabelsStateDelegate::currentRoadSignOffset(md::NullNavLabelsStateDelegate *this)
{
  return 0.0;
}

uint64_t md::NullNavLabelsStateDelegate::currentRouteLeg(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isNavCameraDetached(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::routeUserOffset(md::NullNavLabelsStateDelegate *this)
{
  return (uint64_t)this + 8;
}

double md::NullNavLabelsStateDelegate::routeUserOffsetInMeters(md::NullNavLabelsStateDelegate *this)
{
  return 0.0;
}

uint64_t md::NullNavLabelsStateDelegate::routeSupport(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

void md::NullNavLabelsStateDelegate::resolveRouteLegWhen(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::NullNavLabelsStateDelegate::computeRoutePositionForPOI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t md::NullNavLabelsStateDelegate::routeAnnotationFeatures(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::externalRouteWaypointFeatures(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::externalRouteFeatures(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

void md::LabelsState::~LabelsState(md::LabelsState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x81C40B8603338);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x81C40B8603338);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    MEMORY[0x1A1AF4E00](v4, 0x81C40B8603338);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x81C40B8603338);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x81C40B8603338);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1081C40FC6463CFLL);
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v8, *((_QWORD *)this + 2) - v8);
  }
}

_QWORD *md::PolygonViewConstantsFrameCache::pop(md::PolygonViewConstantsFrameCache *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t i;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v38;

  v2 = *((_QWORD *)this + 3);
  v4 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2 == ((uint64_t)v3 - *(_QWORD *)this) >> 4)
  {
    v5 = v2 + 10;
    if (v2 + 10 > (unint64_t)((uint64_t)(*((_QWORD *)this + 2) - (_QWORD)v4) >> 4))
    {
      if (v5 >> 60)
LABEL_44:
        abort();
      v6 = 16 * v5;
      v7 = (char *)operator new(16 * v5);
      v8 = &v7[16 * v2];
      v9 = &v7[v6];
      if (v3 == v4)
      {
        *(_QWORD *)this = v8;
        *((_QWORD *)this + 1) = v8;
        *((_QWORD *)this + 2) = v9;
      }
      else
      {
        v10 = &v7[16 * v2];
        do
        {
          v11 = *((_OWORD *)v3 - 1);
          v3 -= 2;
          *((_OWORD *)v10 - 1) = v11;
          v10 -= 16;
          *v3 = 0;
          v3[1] = 0;
        }
        while (v3 != v4);
        v3 = *(_QWORD **)this;
        v12 = (_QWORD *)*((_QWORD *)this + 1);
        *(_QWORD *)this = v10;
        *((_QWORD *)this + 1) = v8;
        *((_QWORD *)this + 2) = v9;
        while (v12 != v3)
        {
          v13 = (std::__shared_weak_count *)*(v12 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v12 -= 2;
        }
      }
      if (v3)
        operator delete(v3);
    }
    for (i = 0; i != 10; ++i)
    {
      v18 = operator new(0xE8uLL);
      v18[1] = 0;
      v18[2] = 0;
      *v18 = &off_1E42E2278;
      v19 = ggl::BufferData::BufferData((uint64_t)(v18 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v18[28] = ggl::Tile::View::reflection(void)::reflection;
      v18[3] = &off_1E42B97B0;
      v21 = (uint64_t *)*((_QWORD *)this + 1);
      v20 = *((_QWORD *)this + 2);
      if ((unint64_t)v21 < v20)
      {
        *v21 = v19;
        v21[1] = (uint64_t)v18;
        v17 = v21 + 2;
      }
      else
      {
        v22 = *(uint64_t **)this;
        v23 = ((uint64_t)v21 - *(_QWORD *)this) >> 4;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60)
          goto LABEL_44;
        v25 = v20 - (_QWORD)v22;
        if (v25 >> 3 > v24)
          v24 = v25 >> 3;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        *(_QWORD *)&v27 = v19;
        *((_QWORD *)&v27 + 1) = v18;
        v38 = v27;
        v28 = 16 * v26;
        v29 = (char *)operator new(16 * v26);
        v30 = &v29[16 * v23];
        v31 = &v29[v28];
        *(_OWORD *)v30 = v38;
        v17 = v30 + 16;
        if (v21 == v22)
        {
          *(_QWORD *)this = v30;
          *((_QWORD *)this + 1) = v17;
          *((_QWORD *)this + 2) = v31;
        }
        else
        {
          do
          {
            v32 = *((_OWORD *)v21 - 1);
            v21 -= 2;
            *((_OWORD *)v30 - 1) = v32;
            v30 -= 16;
            *v21 = 0;
            v21[1] = 0;
          }
          while (v21 != v22);
          v21 = *(uint64_t **)this;
          v33 = (uint64_t *)*((_QWORD *)this + 1);
          *(_QWORD *)this = v30;
          *((_QWORD *)this + 1) = v17;
          *((_QWORD *)this + 2) = v31;
          while (v33 != v21)
          {
            v34 = (std::__shared_weak_count *)*(v33 - 1);
            if (v34)
            {
              v35 = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v33 -= 2;
          }
        }
        if (v21)
          operator delete(v21);
      }
      *((_QWORD *)this + 1) = v17;
    }
    v2 = *((_QWORD *)this + 3);
    v4 = *(_QWORD **)this;
  }
  *((_QWORD *)this + 3) = v2 + 1;
  return &v4[2 * v2];
}

uint64_t md::LabelNavTrafficSupport::areRouteTrafficFeaturesActive(md::LabelNavTrafficSupport *this)
{
  return *((unsigned __int8 *)this + 152);
}

void md::LabelNavTrafficSupport::~LabelNavTrafficSupport(md::LabelNavTrafficSupport *this)
{
  md::LabelNavTrafficSupport::~LabelNavTrafficSupport(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void (***v14)(_QWORD, _QWORD);
  void (***v15)(_QWORD, _QWORD);
  uint64_t v16;
  void (***v17)(_QWORD, _QWORD);
  void (***v18)(_QWORD, _QWORD);
  void (**v19)(_QWORD, uint64_t);
  BOOL v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  *(_QWORD *)this = &off_1E429CE50;
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168) + 48) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168)
                                                                             + 88);
  *((_QWORD *)this + 20) = &off_1E42B53B0;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *((_QWORD *)this + 14);
    v4 = *((_QWORD *)this + 13);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v4, *((_QWORD *)this + 15) - v4);
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = *((_QWORD *)this + 10);
    v10 = *((_QWORD *)this + 9);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v10, *((_QWORD *)this + 11) - v10);
  }
  v14 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 5);
  if (v14)
  {
    v15 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 6);
    v16 = *((_QWORD *)this + 5);
    if (v15 != v14)
    {
      v17 = v15 - 3;
      v18 = v15 - 3;
      do
      {
        v19 = *v18;
        v18 -= 3;
        (*v19)(v17, v16);
        v20 = v17 == v14;
        v17 = v18;
      }
      while (!v20);
      v16 = *((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v16, *((_QWORD *)this + 7) - v16);
  }

  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

uint64_t geo::_retain_ptr<NSArray<VKTrafficIncidentFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B53B0;

  return a1;
}

void geo::_retain_ptr<NSArray<VKTrafficIncidentFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B53B0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::__shared_ptr_emplace[abi:nn180100]<VKTrafficIncidentFeature * {__strong}&,std::shared_ptr<md::RouteAnnotationDedupingGroup> &,std::allocator<md::TrafficIncidentLabelFeature>,0>(_QWORD *a1, void **a2, uint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E42DD700;
  v6 = (uint64_t)(a1 + 3);
  v7 = *a2;
  v13[0] = a3;
  v13[1] = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature(v6, v7, v13);
  if (a4)
  {
    v10 = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  return a1;
}

void sub_19F475A80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

BOOL VKTrafficIncidentFeatureSetLessThan::operator()(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "uniqueString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5
    && (objc_msgSend(v4, "uniqueString"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v6,
        v5,
        v6))
  {
    objc_msgSend(v3, "uniqueString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uniqueString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "compare:", v8);

    if (!v9)
    {
      v10 = objc_msgSend(v4, "isOnSelectedRoute");
      v11 = objc_msgSend(v3, "isOnSelectedRoute");
      if ((v11 & (v10 ^ 1)) != 0)
        v9 = -1;
      else
        v9 = v10 & (v11 ^ 1u);
      if (!v9)
      {
        v12 = objc_msgSend(v3, "routeRelevance");
        v13 = objc_msgSend(v4, "routeRelevance");
        if (v12 < v13)
          v9 = -1;
        else
          v9 = v12 > v13;
      }
    }
  }
  else
  {
    objc_msgSend(v3, "uniqueString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uniqueString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14 < v15)
      v9 = -1;
    else
      v9 = v14 > v15;

  }
  return v9 == -1;
}

void sub_19F475C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t *v58;
  BOOL v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *i;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  BOOL v106;
  uint64_t *v107;
  uint64_t *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  BOOL v138;
  uint64_t *v139;
  void *v140;
  uint64_t v141;
  uint64_t *v142;
  void *v143;
  uint64_t v144;
  __int128 v146;
  uint64_t *v147;
  __int128 v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  void *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  BOOL v160;
  void *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  BOOL v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v172;
  char *v173;
  int64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  BOOL v182;
  __int128 v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  __int128 v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  BOOL v204;
  uint64_t v205;
  uint64_t *v206;
  __int128 v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  BOOL v215;
  unint64_t *v216;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  void *v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  __int128 v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t *v242;
  int64_t v243;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v257;

  while (2)
  {
    v6 = a2;
LABEL_2:
    v7 = a1 + 2;
    v255 = a1;
    v242 = a1 + 4;
LABEL_3:
    v8 = (char *)v6 - (char *)v255;
    v9 = ((char *)v6 - (char *)v255) >> 4;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        (*(void (**)(_QWORD))(*(_QWORD *)*(v6 - 2) + 200))(*(v6 - 2));
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        v102 = objc_msgSend(v101, "routeOffset");
        (*(void (**)(uint64_t))(*(_QWORD *)*v255 + 200))(*v255);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        v104 = objc_msgSend(v103, "routeOffset");
        if (v102 >= v104)
        {

          if ((_DWORD)v102 != (_DWORD)v104 || *((float *)&v102 + 1) >= *((float *)&v104 + 1))
            return;
        }
        else
        {

        }
        v218 = *v255;
        *v255 = *(v6 - 2);
        *(v6 - 2) = v218;
        v219 = v255[1];
        v255[1] = *(v6 - 1);
        *(v6 - 1) = v219;
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v255, v7, v6 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v255, v7, v242, v6 - 2);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,0>(v255, v7, v242, v255 + 6, v6 - 2);
        return;
      default:
        a2 = v6;
        if (v8 <= 383)
        {
          v106 = v255 == v6 || v7 == v6;
          if ((a4 & 1) != 0)
          {
            if (v106)
              return;
            v107 = v255;
            while (1)
            {
              v108 = v107;
              v107 = v7;
              (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 200))(*v7);
              v109 = (void *)objc_claimAutoreleasedReturnValue();
              v110 = objc_msgSend(v109, "routeOffset");
              (*(void (**)(uint64_t))(*(_QWORD *)*v108 + 200))(*v108);
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              v112 = objc_msgSend(v111, "routeOffset");
              if (v110 >= v112)
              {

                if ((_DWORD)v110 != (_DWORD)v112 || *((float *)&v110 + 1) >= *((float *)&v112 + 1))
                  goto LABEL_153;
              }
              else
              {

              }
              v114 = *v7;
              v115 = v108[3];
              *v7 = 0;
              v7[1] = 0;
              while (1)
              {
                v116 = v7;
                v7 = v108;
                v117 = *(_OWORD *)v108;
                *v108 = 0;
                v108[1] = 0;
                v118 = (std::__shared_weak_count *)v116[1];
                *(_OWORD *)v116 = v117;
                if (v118)
                {
                  p_shared_owners = (unint64_t *)&v118->__shared_owners_;
                  do
                    v120 = __ldaxr(p_shared_owners);
                  while (__stlxr(v120 - 1, p_shared_owners));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
                if (v108 == v255)
                  break;
                (*(void (**)(uint64_t))(*(_QWORD *)v114 + 200))(v114);
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                v122 = objc_msgSend(v121, "routeOffset");
                v108 -= 2;
                (*(void (**)(_QWORD))(*(_QWORD *)*(v7 - 2) + 200))(*(v7 - 2));
                v123 = (void *)objc_claimAutoreleasedReturnValue();
                v124 = objc_msgSend(v123, "routeOffset");
                if (v122 < v124)
                {

                }
                else
                {

                  if ((_DWORD)v122 != (_DWORD)v124 || *((float *)&v122 + 1) >= *((float *)&v124 + 1))
                    goto LABEL_176;
                }
              }
              v7 = v255;
LABEL_176:
              v126 = (std::__shared_weak_count *)v7[1];
              *v7 = v114;
              v7[1] = v115;
              if (v126)
              {
                v127 = (unint64_t *)&v126->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
              }
LABEL_153:
              v7 = v107 + 2;
              if (v107 + 2 == a2)
                return;
            }
          }
          if (v106)
            return;
          while (1)
          {
            v220 = v255;
            v255 = v7;
            (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 200))(*v7);
            v221 = (void *)objc_claimAutoreleasedReturnValue();
            v222 = objc_msgSend(v221, "routeOffset");
            (*(void (**)(uint64_t))(*(_QWORD *)*v220 + 200))(*v220);
            v223 = (void *)objc_claimAutoreleasedReturnValue();
            v224 = objc_msgSend(v223, "routeOffset");
            if (v222 < v224)
              break;

            if ((_DWORD)v222 == (_DWORD)v224 && *((float *)&v222 + 1) < *((float *)&v224 + 1))
              goto LABEL_304;
LABEL_296:
            v7 += 2;
            if (v255 + 2 == a2)
              return;
          }

LABEL_304:
          v226 = *v7;
          v227 = v220[3];
          v228 = v7;
          *v7 = 0;
          v7[1] = 0;
          do
          {
            while (1)
            {
              v229 = v228;
              v228 = v220;
              v230 = *(_OWORD *)v220;
              *v220 = 0;
              v220[1] = 0;
              v231 = (std::__shared_weak_count *)v229[1];
              *(_OWORD *)v229 = v230;
              if (v231)
              {
                v232 = (unint64_t *)&v231->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
              (*(void (**)(uint64_t))(*(_QWORD *)v226 + 200))(v226);
              v234 = (void *)objc_claimAutoreleasedReturnValue();
              v235 = objc_msgSend(v234, "routeOffset");
              v220 -= 2;
              (*(void (**)(_QWORD))(*(_QWORD *)*(v228 - 2) + 200))(*(v228 - 2));
              v236 = (void *)objc_claimAutoreleasedReturnValue();
              v237 = objc_msgSend(v236, "routeOffset");
              if (v235 >= v237)
                break;

            }
          }
          while ((_DWORD)v235 == (_DWORD)v237 && *((float *)&v235 + 1) < *((float *)&v237 + 1));
          v239 = (std::__shared_weak_count *)v228[1];
          *v228 = v226;
          v228[1] = v227;
          if (v239)
          {
            v240 = (unint64_t *)&v239->__shared_owners_;
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }
          goto LABEL_296;
        }
        if (!a3)
        {
          if (v255 == v6)
            return;
          v129 = (v9 - 2) >> 1;
          v252 = v129;
          while (1)
          {
            v130 = v129;
            if (v252 < v129)
              goto LABEL_184;
            v131 = (2 * v129) | 1;
            v132 = &v255[2 * v131];
            if (2 * v129 + 2 >= (uint64_t)v9)
              goto LABEL_195;
            v133 = v132 + 2;
            (*(void (**)(uint64_t))(*(_QWORD *)*v132 + 200))(*v132);
            v134 = (void *)objc_claimAutoreleasedReturnValue();
            v135 = objc_msgSend(v134, "routeOffset");
            (*(void (**)(uint64_t))(*(_QWORD *)*v133 + 200))(*v133);
            v136 = (void *)objc_claimAutoreleasedReturnValue();
            v137 = objc_msgSend(v136, "routeOffset");
            if (v135 >= v137)
            {

              v138 = (_DWORD)v135 == (_DWORD)v137 && *((float *)&v135 + 1) < *((float *)&v137 + 1);
              v132 = &v255[2 * v131];
              if (!v138)
                goto LABEL_195;
            }
            else
            {

            }
            v132 = v133;
            v131 = 2 * v130 + 2;
LABEL_195:
            v139 = v132;
            (*(void (**)(uint64_t))(*(_QWORD *)*v132 + 200))(*v132);
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            v141 = objc_msgSend(v140, "routeOffset");
            v142 = &v255[2 * v130];
            (*(void (**)(uint64_t))(*(_QWORD *)*v142 + 200))(*v142);
            v143 = (void *)objc_claimAutoreleasedReturnValue();
            v144 = objc_msgSend(v143, "routeOffset");
            if (v141 < v144)
            {

              goto LABEL_184;
            }

            if ((_DWORD)v141 != (_DWORD)v144 || *((float *)&v141 + 1) >= *((float *)&v144 + 1))
            {
              v243 = v130;
              v146 = *(_OWORD *)v142;
              *v142 = 0;
              v142[1] = 0;
              v245 = v146;
              v248 = v146;
              while (1)
              {
                v147 = v139;
                v148 = *(_OWORD *)v139;
                *v139 = 0;
                v139[1] = 0;
                v149 = (std::__shared_weak_count *)v142[1];
                *(_OWORD *)v142 = v148;
                if (v149)
                {
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                if (v252 < v131)
                  goto LABEL_224;
                v152 = 2 * v131;
                v131 = (2 * v131) | 1;
                v153 = &v255[2 * v131];
                v154 = v152 + 2;
                if (v152 + 2 < (uint64_t)v9)
                {
                  v155 = v153 + 2;
                  (*(void (**)(uint64_t))(*(_QWORD *)*v153 + 200))(*v153);
                  v156 = (void *)objc_claimAutoreleasedReturnValue();
                  v157 = objc_msgSend(v156, "routeOffset");
                  (*(void (**)(uint64_t))(*(_QWORD *)*v155 + 200))(*v155);
                  v158 = (void *)objc_claimAutoreleasedReturnValue();
                  v159 = objc_msgSend(v158, "routeOffset");
                  if (v157 < v159)
                  {

LABEL_215:
                    v153 = v155;
                    v131 = v154;
                    goto LABEL_216;
                  }

                  v160 = (_DWORD)v157 == (_DWORD)v159 && *((float *)&v157 + 1) < *((float *)&v159 + 1);
                  v153 = &v255[2 * v131];
                  if (v160)
                    goto LABEL_215;
                }
LABEL_216:
                v139 = v153;
                (*(void (**)(uint64_t))(*(_QWORD *)*v153 + 200))(*v153);
                v161 = (void *)objc_claimAutoreleasedReturnValue();
                v162 = objc_msgSend(v161, "routeOffset");
                (*(void (**)(uint64_t))(*(_QWORD *)v248 + 200))(v248);
                v163 = (void *)objc_claimAutoreleasedReturnValue();
                v164 = objc_msgSend(v163, "routeOffset");
                if (v162 < v164)
                {

LABEL_224:
                  v166 = (std::__shared_weak_count *)v147[1];
                  *(_OWORD *)v147 = v245;
                  v130 = v243;
                  if (v166)
                  {
                    v167 = (unint64_t *)&v166->__shared_owners_;
                    do
                      v168 = __ldaxr(v167);
                    while (__stlxr(v168 - 1, v167));
                    if (!v168)
                    {
                      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                      std::__shared_weak_count::__release_weak(v166);
                    }
                  }
                  break;
                }

                v165 = (_DWORD)v162 == (_DWORD)v164 && *((float *)&v162 + 1) < *((float *)&v164 + 1);
                v142 = v147;
                if (v165)
                  goto LABEL_224;
              }
            }
LABEL_184:
            v129 = v130 - 1;
            if (!v130)
            {
              v169 = (unint64_t)((char *)v6 - (char *)v255) >> 4;
              v170 = v6;
              while (1)
              {
                v172 = 0;
                v173 = (char *)v255;
                v246 = *v255;
                v249 = v170;
                v253 = v255[1];
                *v255 = 0;
                v255[1] = 0;
                v174 = (unint64_t)(v169 - 2) >> 1;
                v257 = v169;
                do
                {
                  v175 = v173;
                  v173 += 16 * v172 + 16;
                  v176 = 2 * v172;
                  v172 = (2 * v172) | 1;
                  v177 = v176 + 2;
                  if (v176 + 2 < v169)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)v173 + 200))(*(_QWORD *)v173);
                    v178 = (void *)objc_claimAutoreleasedReturnValue();
                    v179 = objc_msgSend(v178, "routeOffset");
                    (*(void (**)(_QWORD))(**((_QWORD **)v173 + 2) + 200))(*((_QWORD *)v173 + 2));
                    v180 = (void *)objc_claimAutoreleasedReturnValue();
                    v181 = objc_msgSend(v180, "routeOffset");
                    if (v179 < v181)
                    {

                      v169 = v257;
LABEL_241:
                      v173 += 16;
                      v172 = v177;
                      goto LABEL_242;
                    }

                    v182 = (_DWORD)v179 == (_DWORD)v181 && *((float *)&v179 + 1) < *((float *)&v181 + 1);
                    v169 = v257;
                    if (v182)
                      goto LABEL_241;
                  }
LABEL_242:
                  v183 = *(_OWORD *)v173;
                  *(_QWORD *)v173 = 0;
                  *((_QWORD *)v173 + 1) = 0;
                  v184 = (std::__shared_weak_count *)*((_QWORD *)v175 + 1);
                  *(_OWORD *)v175 = v183;
                  if (v184)
                  {
                    v185 = (unint64_t *)&v184->__shared_owners_;
                    do
                      v186 = __ldaxr(v185);
                    while (__stlxr(v186 - 1, v185));
                    if (!v186)
                    {
                      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                      std::__shared_weak_count::__release_weak(v184);
                      v169 = v257;
                    }
                  }
                }
                while (v172 <= v174);
                v170 = v249 - 2;
                if (v173 == (char *)(v249 - 2))
                {
                  v201 = (std::__shared_weak_count *)*((_QWORD *)v173 + 1);
                  *(_QWORD *)v173 = v246;
                  *((_QWORD *)v173 + 1) = v253;
                  if (v201)
                  {
                    v202 = (unint64_t *)&v201->__shared_owners_;
                    do
                      v203 = __ldaxr(v202);
                    while (__stlxr(v203 - 1, v202));
                    goto LABEL_286;
                  }
                }
                else
                {
                  v187 = *((_OWORD *)v249 - 1);
                  *v170 = 0;
                  *(v249 - 1) = 0;
                  v188 = (std::__shared_weak_count *)*((_QWORD *)v173 + 1);
                  *(_OWORD *)v173 = v187;
                  if (v188)
                  {
                    v189 = (unint64_t *)&v188->__shared_owners_;
                    do
                      v190 = __ldaxr(v189);
                    while (__stlxr(v190 - 1, v189));
                    if (!v190)
                    {
                      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                      std::__shared_weak_count::__release_weak(v188);
                      v169 = v257;
                    }
                  }
                  v191 = (std::__shared_weak_count *)*(v249 - 1);
                  *(v249 - 2) = v246;
                  *(v249 - 1) = v253;
                  if (v191)
                  {
                    v192 = (unint64_t *)&v191->__shared_owners_;
                    do
                      v193 = __ldaxr(v192);
                    while (__stlxr(v193 - 1, v192));
                    if (!v193)
                    {
                      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                      std::__shared_weak_count::__release_weak(v191);
                      v169 = v257;
                    }
                  }
                  v194 = v173 + 16 - (char *)v255;
                  if (v194 >= 17)
                  {
                    v195 = (((unint64_t)v194 >> 4) - 2) >> 1;
                    v196 = &v255[2 * v195];
                    (*(void (**)(uint64_t))(*(_QWORD *)*v196 + 200))(*v196);
                    v197 = (void *)objc_claimAutoreleasedReturnValue();
                    v198 = objc_msgSend(v197, "routeOffset");
                    (*(void (**)(_QWORD))(**(_QWORD **)v173 + 200))(*(_QWORD *)v173);
                    v199 = (void *)objc_claimAutoreleasedReturnValue();
                    v200 = objc_msgSend(v199, "routeOffset");
                    if (v198 >= v200)
                    {

                      v204 = (_DWORD)v198 == (_DWORD)v200 && *((float *)&v198 + 1) < *((float *)&v200 + 1);
                      v169 = v257;
                      if (v204)
                        goto LABEL_270;
                    }
                    else
                    {

                      v169 = v257;
LABEL_270:
                      v205 = *(_QWORD *)v173;
                      v254 = *((_QWORD *)v173 + 1);
                      *(_QWORD *)v173 = 0;
                      *((_QWORD *)v173 + 1) = 0;
                      while (1)
                      {
                        v206 = v196;
                        v207 = *(_OWORD *)v196;
                        *v196 = 0;
                        v196[1] = 0;
                        v208 = (std::__shared_weak_count *)*((_QWORD *)v173 + 1);
                        *(_OWORD *)v173 = v207;
                        if (v208)
                        {
                          v209 = (unint64_t *)&v208->__shared_owners_;
                          do
                            v210 = __ldaxr(v209);
                          while (__stlxr(v210 - 1, v209));
                          if (!v210)
                          {
                            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                            std::__shared_weak_count::__release_weak(v208);
                            v169 = v257;
                          }
                        }
                        if (!v195)
                          break;
                        v195 = (v195 - 1) >> 1;
                        v196 = &v255[2 * v195];
                        (*(void (**)(uint64_t))(*(_QWORD *)*v196 + 200))(*v196);
                        v211 = (void *)objc_claimAutoreleasedReturnValue();
                        v212 = objc_msgSend(v211, "routeOffset");
                        (*(void (**)(uint64_t))(*(_QWORD *)v205 + 200))(v205);
                        v213 = (void *)objc_claimAutoreleasedReturnValue();
                        v214 = objc_msgSend(v213, "routeOffset");
                        if (v212 < v214)
                        {

                          v173 = (char *)v206;
                          v169 = v257;
                        }
                        else
                        {

                          v215 = (_DWORD)v212 == (_DWORD)v214 && *((float *)&v212 + 1) < *((float *)&v214 + 1);
                          v173 = (char *)v206;
                          v169 = v257;
                          if (!v215)
                            break;
                        }
                      }
                      v201 = (std::__shared_weak_count *)v206[1];
                      *v206 = v205;
                      v206[1] = v254;
                      if (v201)
                      {
                        v216 = (unint64_t *)&v201->__shared_owners_;
                        do
                          v203 = __ldaxr(v216);
                        while (__stlxr(v203 - 1, v216));
LABEL_286:
                        if (!v203)
                        {
                          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                          std::__shared_weak_count::__release_weak(v201);
                          v169 = v257;
                        }
                      }
                    }
                  }
                }
                if (v169-- <= 2)
                  return;
              }
            }
          }
        }
        v10 = &v255[2 * (v9 >> 1)];
        v11 = v6 - 2;
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(&v255[2 * (v9 >> 1)], v255, v6 - 2);
          v12 = v255;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v255, &v255[2 * (v9 >> 1)], v6 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v7, v10 - 2, v6 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v242, v10 + 2, v6 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v10 - 2, v10, v10 + 2);
          v12 = v255;
          v13 = *(_OWORD *)v255;
          *(_OWORD *)v255 = *(_OWORD *)v10;
          *(_OWORD *)v10 = v13;
        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_17;
        v14 = v12;
        (*(void (**)(_QWORD))(*(_QWORD *)*(v12 - 2) + 200))(*(v12 - 2));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "routeOffset");
        (*(void (**)(uint64_t))(*(_QWORD *)*v14 + 200))(*v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "routeOffset");
        if (v16 >= v18)
        {

          v19 = (_DWORD)v16 == (_DWORD)v18 && *((float *)&v16 + 1) < *((float *)&v18 + 1);
          v12 = v255;
          if (v19)
            goto LABEL_17;
          v60 = *v255;
          v251 = v255[1];
          *v255 = 0;
          v255[1] = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = objc_msgSend(v61, "routeOffset");
          (*(void (**)(uint64_t))(*(_QWORD *)*v11 + 200))(*v11);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = objc_msgSend(v63, "routeOffset");
          v65 = v64;
          if (v62 < v64)
          {

LABEL_83:
            a1 = v255 + 2;
            while (1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              v68 = objc_msgSend(v67, "routeOffset");
              (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              v70 = objc_msgSend(v69, "routeOffset");
              if (v68 < v70)
                break;

              a1 += 2;
              if ((_DWORD)v68 == (_DWORD)v70 && *((float *)&v68 + 1) < *((float *)&v70 + 1))
              {
                a1 -= 2;
                goto LABEL_101;
              }
            }
LABEL_100:

            goto LABEL_101;
          }

          if ((_DWORD)v62 == (_DWORD)v65)
          {
            v66.n128_u32[0] = HIDWORD(v62);
            if (*((float *)&v62 + 1) < *((float *)&v65 + 1))
              goto LABEL_83;
          }
          v72 = v255 + 2;
          do
          {
            a1 = v72;
            if (v72 >= a2)
              break;
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v60 + 200))(v60, v66);
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            v73 = objc_msgSend(v67, "routeOffset");
            (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v74 = objc_msgSend(v69, "routeOffset");
            if (v73 < v74)
              goto LABEL_100;

            v72 = a1 + 2;
          }
          while ((_DWORD)v73 != (_DWORD)v74 || *((float *)&v73 + 1) >= *((float *)&v74 + 1));
LABEL_101:
          i = a2;
          if (a1 < a2)
          {
            for (i = v11; ; i -= 2)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
              v77 = (void *)objc_claimAutoreleasedReturnValue();
              v78 = objc_msgSend(v77, "routeOffset");
              (*(void (**)(uint64_t))(*(_QWORD *)*i + 200))(*i);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              v80 = objc_msgSend(v79, "routeOffset");
              if (v78 < v80)
              {

              }
              else
              {

                if ((_DWORD)v78 != (_DWORD)v80 || *((float *)&v78 + 1) >= *((float *)&v80 + 1))
                  break;
              }
            }
          }
LABEL_110:
          if (a1 < i)
          {
            v82 = *a1;
            *a1 = *i;
            *i = v82;
            v83 = a1[1];
            a1[1] = i[1];
            i[1] = v83;
            a1 += 2;
            do
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              v85 = objc_msgSend(v84, "routeOffset");
              (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              v87 = objc_msgSend(v86, "routeOffset");
              if (v85 < v87)
                goto LABEL_126;

              a1 += 2;
            }
            while ((_DWORD)v85 != (_DWORD)v87 || *((float *)&v85 + 1) >= *((float *)&v87 + 1));
            a1 -= 2;
            while (1)
            {
              v89 = i - 2;
              while (1)
              {
                i = v89;
                (*(void (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
                v84 = (void *)objc_claimAutoreleasedReturnValue();
                v90 = objc_msgSend(v84, "routeOffset");
                (*(void (**)(uint64_t))(*(_QWORD *)*i + 200))(*i);
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                v91 = objc_msgSend(v86, "routeOffset");
                if (v90 < v91)
                  break;

                v89 = i - 2;
                if ((_DWORD)v90 != (_DWORD)v91 || *((float *)&v90 + 1) >= *((float *)&v91 + 1))
                  goto LABEL_110;
              }
LABEL_126:

            }
          }
          v93 = a1 - 2;
          if (a1 - 2 != v255)
          {
            v94 = *(_OWORD *)v93;
            *v93 = 0;
            *(a1 - 1) = 0;
            v95 = (std::__shared_weak_count *)v255[1];
            *(_OWORD *)v255 = v94;
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
          }
          a4 = 0;
          v98 = (std::__shared_weak_count *)*(a1 - 1);
          *(a1 - 2) = v60;
          *(a1 - 1) = v251;
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            a4 = 0;
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
              a4 = 0;
            }
          }
          continue;
        }

        v12 = v255;
LABEL_17:
        v20 = *v12;
        v247 = a3;
        v250 = v12[1];
        v21 = v7;
        *v12 = 0;
        v12[1] = 0;
        while (2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)*v21 + 200))(*v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "routeOffset");
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "routeOffset");
          if (v23 < v25)
          {

LABEL_19:
            v21 += 2;
            continue;
          }
          break;
        }

        if ((_DWORD)v23 == (_DWORD)v25 && *((float *)&v23 + 1) < *((float *)&v25 + 1))
          goto LABEL_19;
        if (v21 - 2 == v255)
        {
          while (v21 < v11 + 2)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)*v11 + 200))(*v11);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = objc_msgSend(v27, "routeOffset");
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = objc_msgSend(v29, "routeOffset");
            if (v32 < v33)
              goto LABEL_41;

            v11 -= 2;
            if ((_DWORD)v32 == (_DWORD)v33 && *((float *)&v32 + 1) < *((float *)&v33 + 1))
            {
LABEL_40:
              v11 += 2;
              goto LABEL_43;
            }
          }
          v11 += 2;
        }
        else
        {
          while (1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)*v11 + 200))(*v11);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v27, "routeOffset");
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = objc_msgSend(v29, "routeOffset");
            if (v28 < v30)
              break;

            v11 -= 2;
            if ((_DWORD)v28 == (_DWORD)v30 && *((float *)&v28 + 1) < *((float *)&v30 + 1))
              goto LABEL_40;
          }
LABEL_41:

        }
LABEL_43:
        a1 = v21;
        if (v21 < v11)
        {
          a1 = v21;
          v35 = v11;
          do
          {
LABEL_46:
            v36 = *a1;
            *a1 = *v35;
            *v35 = v36;
            v37 = a1[1];
            a1[1] = v35[1];
            v35[1] = v37;
            do
            {
              while (1)
              {
                v38 = a1[2];
                a1 += 2;
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 200))(v38);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                v40 = objc_msgSend(v39, "routeOffset");
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                v42 = objc_msgSend(v41, "routeOffset");
                if (v40 >= v42)
                  break;

              }
            }
            while ((_DWORD)v40 == (_DWORD)v42 && *((float *)&v40 + 1) < *((float *)&v42 + 1));
            v35 -= 2;
            do
            {
              (*(void (**)(uint64_t))(*(_QWORD *)*v35 + 200))(*v35);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = objc_msgSend(v44, "routeOffset");
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = objc_msgSend(v46, "routeOffset");
              if (v45 < v47)
              {

                if (a1 >= v35)
                  goto LABEL_61;
                goto LABEL_46;
              }

              v35 -= 2;
            }
            while ((_DWORD)v45 != (_DWORD)v47 || *((float *)&v45 + 1) >= *((float *)&v47 + 1));
            v35 += 2;
          }
          while (a1 < v35);
        }
LABEL_61:
        v49 = a1 - 2;
        v6 = a2;
        if (a1 - 2 != v255)
        {
          v50 = *(_OWORD *)v49;
          *v49 = 0;
          *(a1 - 1) = 0;
          v51 = (std::__shared_weak_count *)v255[1];
          *(_OWORD *)v255 = v50;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
        v54 = (std::__shared_weak_count *)*(a1 - 1);
        *(a1 - 2) = v20;
        *(a1 - 1) = v250;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = v21 >= v11;
        v58 = v255;
        a3 = v247;
        if (!v57)
        {
LABEL_78:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,false>(v58, a1 - 2, v247, a4 & 1);
          a4 = 0;
          continue;
        }
        v59 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(v255, a1 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a2))
        {
          v58 = v255;
          if (v59)
            goto LABEL_2;
          goto LABEL_78;
        }
        v6 = a1 - 2;
        if (!v59)
          goto LABEL_3;
        return;
    }
  }
}

void sub_19F4771DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  void *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "routeOffset");
  if (v7 >= v9)
  {

    if ((_DWORD)v7 != (_DWORD)v9 || *((float *)&v7 + 1) >= *((float *)&v9 + 1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "routeOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "routeOffset");
      if (v12 >= v14)
      {

        if ((_DWORD)v12 != (_DWORD)v14 || *((float *)&v12 + 1) >= *((float *)&v14 + 1))
          return;
      }
      else
      {

      }
      v32 = *a2;
      *a2 = *a3;
      *a3 = v32;
      v29 = a2 + 1;
      v33 = a2[1];
      a2[1] = a3[1];
      a3[1] = v33;
      (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "routeOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v36, "routeOffset");
      if (v35 >= v37)
      {

        if ((_DWORD)v35 != (_DWORD)v37 || *((float *)&v35 + 1) >= *((float *)&v37 + 1))
          return;
      }
      else
      {

      }
      v39 = *a1;
      *a1 = *a2;
      v27 = a1 + 1;
      *a2 = v39;
      goto LABEL_19;
    }
  }
  else
  {

  }
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "routeOffset");
  if (v16 < v18)
  {

LABEL_17:
    v26 = *a1;
    *a1 = *a3;
    v27 = a1 + 1;
    *a3 = v26;
    v28 = a3 + 1;
LABEL_18:
    v29 = v28;
LABEL_19:
    v30 = *v27;
    *v27 = *v29;
    *v29 = v30;
    return;
  }

  if ((_DWORD)v16 == (_DWORD)v18 && *((float *)&v16 + 1) < *((float *)&v18 + 1))
    goto LABEL_17;
  v20 = *a1;
  *a1 = *a2;
  *a2 = v20;
  v21 = a1[1];
  a1[1] = a2[1];
  a2[1] = v21;
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "routeOffset");
  if (v23 < v25)
  {

LABEL_30:
    v38 = *a2;
    *a2 = *a3;
    *a3 = v38;
    v28 = a3 + 1;
    v27 = a2 + 1;
    goto LABEL_18;
  }

  if ((_DWORD)v23 == (_DWORD)v25 && *((float *)&v23 + 1) < *((float *)&v25 + 1))
    goto LABEL_30;
}

void sub_19F477898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)*a4 + 200))(*a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "routeOffset");
  if (v9 >= v11)
  {

    if ((_DWORD)v9 != (_DWORD)v11 || *((float *)&v9 + 1) >= *((float *)&v11 + 1))
      return;
  }
  else
  {

  }
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v14 = a3[1];
  a3[1] = a4[1];
  a4[1] = v14;
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "routeOffset");
  if (v16 >= v18)
  {

    if ((_DWORD)v16 != (_DWORD)v18 || *((float *)&v16 + 1) >= *((float *)&v18 + 1))
      return;
  }
  else
  {

  }
  v20 = *a2;
  *a2 = *a3;
  *a3 = v20;
  v21 = a2[1];
  a2[1] = a3[1];
  a3[1] = v21;
  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "routeOffset");
  if (v23 < v25)
  {

LABEL_19:
    v26 = *a1;
    *a1 = *a2;
    *a2 = v26;
    v27 = a1[1];
    a1[1] = a2[1];
    a2[1] = v27;
    return;
  }

  if ((_DWORD)v23 == (_DWORD)v25 && *((float *)&v23 + 1) < *((float *)&v25 + 1))
    goto LABEL_19;
}

void sub_19F477B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)*a5 + 200))(*a5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a4 + 200))(*a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "routeOffset");
  if (v11 >= v13)
  {

    if ((_DWORD)v11 != (_DWORD)v13 || *((float *)&v11 + 1) >= *((float *)&v13 + 1))
      return;
  }
  else
  {

  }
  v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  v16 = a4[1];
  a4[1] = a5[1];
  a5[1] = v16;
  (*(void (**)(uint64_t))(*(_QWORD *)*a4 + 200))(*a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "routeOffset");
  if (v18 >= v20)
  {

    if ((_DWORD)v18 != (_DWORD)v20 || *((float *)&v18 + 1) >= *((float *)&v20 + 1))
      return;
  }
  else
  {

  }
  v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  v23 = a3[1];
  a3[1] = a4[1];
  a4[1] = v23;
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "routeOffset");
  if (v25 >= v27)
  {

    if ((_DWORD)v25 != (_DWORD)v27 || *((float *)&v25 + 1) >= *((float *)&v27 + 1))
      return;
  }
  else
  {

  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = a2[1];
  a2[1] = a3[1];
  a3[1] = v29;
  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 200))(*a2);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "routeOffset");
  (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "routeOffset");
  if (v31 < v33)
  {

LABEL_23:
    v34 = *a1;
    *a1 = *a2;
    *a2 = v34;
    v35 = a1[1];
    a1[1] = a2[1];
    a2[1] = v35;
    return;
  }

  if ((_DWORD)v31 == (_DWORD)v33 && *((float *)&v31 + 1) < *((float *)&v33 + 1))
    goto LABEL_23;
}

void sub_19F477E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      (*(void (**)(_QWORD))(*(_QWORD *)*(a2 - 2) + 200))(*(a2 - 2));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "routeOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "routeOffset");
      if (v7 >= v9)
      {

        if ((_DWORD)v7 != (_DWORD)v9 || *((float *)&v7 + 1) >= *((float *)&v9 + 1))
          return 1;
      }
      else
      {

      }
      v34 = *a1;
      *a1 = *(a2 - 2);
      *(a2 - 2) = v34;
      v35 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v35;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v36 = a2;
      break;
  }
  while (1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)*v11 + 200))(*v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "routeOffset");
    (*(void (**)(uint64_t))(*(_QWORD *)*v10 + 200))(*v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "routeOffset");
    if (v14 < v16)
      break;

    if ((_DWORD)v14 == (_DWORD)v16 && *((float *)&v14 + 1) < *((float *)&v16 + 1))
      goto LABEL_16;
    v18 = v36;
LABEL_8:
    v10 = v11;
    v11 += 2;
    if (v11 == v18)
      return 1;
  }

LABEL_16:
  v37 = *(_OWORD *)v11;
  *v11 = 0;
  v11[1] = 0;
  v19 = v11;
  while (1)
  {
    v20 = v19;
    v19 = v10;
    v21 = *(_OWORD *)v10;
    *v10 = 0;
    v10[1] = 0;
    v22 = (std::__shared_weak_count *)v20[1];
    *(_OWORD *)v20 = v21;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v19 == a1)
      break;
    (*(void (**)(_QWORD))(*(_QWORD *)v37 + 200))(v37);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "routeOffset");
    v10 = v19 - 2;
    (*(void (**)(_QWORD))(*(_QWORD *)*(v19 - 2) + 200))(*(v19 - 2));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "routeOffset");
    if (v26 < v28)
    {

    }
    else
    {

      if ((_DWORD)v26 != (_DWORD)v28 || *((float *)&v26 + 1) >= *((float *)&v28 + 1))
        goto LABEL_31;
    }
  }
  v19 = a1;
LABEL_31:
  v30 = (std::__shared_weak_count *)v19[1];
  *(_OWORD *)v19 = v37;
  v18 = v36;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (++v12 != 8)
    goto LABEL_8;
  return v11 + 2 == v36;
}

void sub_19F47822C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F47824C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F47826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKTrafficIncidentFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5130;

  return a1;
}

void geo::_retain_ptr<VKTrafficIncidentFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5130;

  JUMPOUT(0x1A1AF4E00);
}

void md::OverlayDataRequester::~OverlayDataRequester(md::OverlayDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::OverlayDataRequester::requestDataKeys(md::OverlayDataRequester *this, const gdc::SelectionContext *a2)
{
  gdc::LayerDataCollector *v2;
  uint64_t *v3;
  unsigned __int8 *v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  unsigned __int8 v13[16];
  void *v14;
  void *v15;
  char v16;
  _BYTE v17[4];
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;

  v2 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v3 = *(uint64_t **)(*((_QWORD *)a2 + 8) + 24);
  if (v3)
  {
    v6 = 0;
    do
    {
      v7 = *((_BYTE *)v3 + 17);
      v8 = (*((_DWORD *)v3 + 5) % (1 << v7) + (1 << v7)) % (1 << v7);
      v9 = *((_DWORD *)v3 + 6) % (1 << v7) + (1 << v7);
      v17[0] = *((_BYTE *)v3 + 16);
      v17[1] = v7;
      v18 = v8;
      v19 = v9 % (1 << v7);
      v21 = v6;
      if (*((float *)this + 6) <= 1.9)
        v10 = 512;
      else
        v10 = 256;
      md::TileAdjustmentHelpers::adjustTileForSize(**((_DWORD **)a2 + 8), v10, (uint64_t)v17, &v20);
      v6 = v20;
      v11 = v21;
      for (i = v20; i != v11; i += 24)
      {
        gdc::Tiled::mapDataKeyFromTile(v13, 0, i, *((_WORD *)this + 11), *((_DWORD *)this + 4));
        gdc::LayerDataCollector::addDataKey(v2, (const gdc::LayerDataRequestKey *)v13, (const QuadTile *)(v3 + 2));
        if (v16)
          v16 = 0;
        if (v14 != v15)
          free(v14);
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v6)
      operator delete(v6);
  }
}

void sub_19F4784A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
    operator delete(v3);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelText::LabelText(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v4;
  unint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  malloc_zone_t *zone;
  int v18;
  int v19;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;
  malloc_zone_t *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)result = &off_1E42AFC50;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  if ((v6 & 1) == 0)
  {
    v25 = a4;
    v27 = result;
    a4 = v25;
    result = v27;
    if (v13)
    {
      v14 = operator new();
      *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v14 + 24) = "VectorKitLabels";
      *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v14 = &off_1E42B5668;
      *(_QWORD *)(v14 + 8) = "VectorKitLabels";
      *(_OWORD *)(v14 + 72) = 0u;
      *(_OWORD *)(v14 + 88) = 0u;
      *(_OWORD *)(v14 + 104) = 0u;
      *(_OWORD *)(v14 + 120) = 0u;
      *(_OWORD *)(v14 + 136) = 0u;
      *(_OWORD *)(v14 + 152) = 0u;
      *(_OWORD *)(v14 + 168) = 0u;
      *(_OWORD *)(v14 + 184) = 0u;
      *(_OWORD *)(v14 + 200) = 0u;
      *(_OWORD *)(v14 + 216) = 0u;
      *(_OWORD *)(v14 + 232) = 0u;
      *(_QWORD *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 56) = 0u;
      v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
      if ((_DWORD)v15)
        geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v14 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v14;
      a4 = v25;
      result = v27;
    }
  }
  *(_QWORD *)(result + 56) = mdm::Allocator::instance(void)::alloc;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(result + 64) = _D0;
  *(_DWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 112) = 0;
  if ((v12 & 1) == 0)
  {
    v26 = a4;
    v28 = result;
    v24 = _D0;
    _D0 = v24;
    v19 = v18;
    a4 = v26;
    result = v28;
    if (v19)
    {
      v20 = operator new();
      *(_QWORD *)(v20 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v20 + 24) = "VectorKitLabels";
      *(_OWORD *)(v20 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v20 = &off_1E42B5668;
      *(_QWORD *)(v20 + 8) = "VectorKitLabels";
      *(_OWORD *)(v20 + 72) = 0u;
      *(_OWORD *)(v20 + 88) = 0u;
      *(_OWORD *)(v20 + 104) = 0u;
      *(_OWORD *)(v20 + 120) = 0u;
      *(_OWORD *)(v20 + 136) = 0u;
      *(_OWORD *)(v20 + 152) = 0u;
      *(_OWORD *)(v20 + 168) = 0u;
      *(_OWORD *)(v20 + 184) = 0u;
      *(_OWORD *)(v20 + 200) = 0u;
      *(_OWORD *)(v20 + 216) = 0u;
      *(_OWORD *)(v20 + 232) = 0u;
      *(_QWORD *)(v20 + 248) = 0;
      *(_OWORD *)(v20 + 56) = 0u;
      v21 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v20 + 56), 0);
      if ((_DWORD)v21)
        geo::read_write_lock::logFailure(v21, (uint64_t)"initialization", v22);
      v23 = malloc_create_zone(0, 0);
      *(_QWORD *)(v20 + 48) = v23;
      malloc_set_zone_name(v23, "VectorKitLabels");
      *(_QWORD *)(v20 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v20;
      a4 = v26;
      result = v28;
      _D0 = v24;
    }
  }
  *(_QWORD *)(result + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 128) = _D0;
  *(_DWORD *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = 0;
  *(_DWORD *)(result + 8) |= 1 << a4;
  return result;
}

uint64_t md::LabelText::LabelText(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, char a5)
{
  unint64_t *v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  uint64_t v19;
  geo::read_write_lock *v20;
  const char *v21;
  malloc_zone_t *zone;
  int v23;
  int v24;
  uint64_t v25;
  geo::read_write_lock *v26;
  const char *v27;
  malloc_zone_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = &off_1E42AFC50;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  if (a3)
  {
    v5 = (unint64_t *)(a3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  if ((v7 & 1) == 0)
  {
    v31 = a5;
    v33 = result;
    v29 = a4;
    a4 = v29;
    a5 = v31;
    v18 = v17;
    result = v33;
    if (v18)
    {
      v19 = operator new();
      *(_QWORD *)(v19 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v19 + 24) = "VectorKitLabels";
      *(_OWORD *)(v19 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v19 = &off_1E42B5668;
      *(_QWORD *)(v19 + 8) = "VectorKitLabels";
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_QWORD *)(v19 + 248) = 0;
      *(_OWORD *)(v19 + 56) = 0u;
      v20 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v19 + 56), 0);
      if ((_DWORD)v20)
        geo::read_write_lock::logFailure(v20, (uint64_t)"initialization", v21);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v19 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v19 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v19;
      a5 = v31;
      result = v33;
      a4 = v29;
    }
  }
  *(_QWORD *)(result + 56) = mdm::Allocator::instance(void)::alloc;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(result + 64) = _D0;
  *(_DWORD *)(result + 72) = 0;
  v13 = a4[1];
  *(_QWORD *)(result + 80) = *a4;
  *(_QWORD *)(result + 88) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  if ((v16 & 1) == 0)
  {
    v32 = a5;
    v34 = result;
    v30 = _D0;
    _D0 = v30;
    v24 = v23;
    a5 = v32;
    result = v34;
    if (v24)
    {
      v25 = operator new();
      *(_QWORD *)(v25 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v25 + 24) = "VectorKitLabels";
      *(_OWORD *)(v25 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v25 = &off_1E42B5668;
      *(_QWORD *)(v25 + 8) = "VectorKitLabels";
      *(_OWORD *)(v25 + 72) = 0u;
      *(_OWORD *)(v25 + 88) = 0u;
      *(_OWORD *)(v25 + 104) = 0u;
      *(_OWORD *)(v25 + 120) = 0u;
      *(_OWORD *)(v25 + 136) = 0u;
      *(_OWORD *)(v25 + 152) = 0u;
      *(_OWORD *)(v25 + 168) = 0u;
      *(_OWORD *)(v25 + 184) = 0u;
      *(_OWORD *)(v25 + 200) = 0u;
      *(_OWORD *)(v25 + 216) = 0u;
      *(_OWORD *)(v25 + 232) = 0u;
      *(_QWORD *)(v25 + 248) = 0;
      *(_OWORD *)(v25 + 56) = 0u;
      v26 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v25 + 56), 0);
      if ((_DWORD)v26)
        geo::read_write_lock::logFailure(v26, (uint64_t)"initialization", v27);
      v28 = malloc_create_zone(0, 0);
      *(_QWORD *)(v25 + 48) = v28;
      malloc_set_zone_name(v28, "VectorKitLabels");
      *(_QWORD *)(v25 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v25;
      a5 = v32;
      result = v34;
      _D0 = v30;
    }
  }
  *(_QWORD *)(result + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 128) = _D0;
  *(_DWORD *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = 1;
  *(_DWORD *)(result + 8) |= 1 << a5;
  return result;
}

uint64_t md::LabelText::LabelText(uint64_t this, const md::LabelText *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  malloc_zone_t *zone;
  int v20;
  int v21;
  uint64_t v22;
  geo::read_write_lock *v23;
  const char *v24;
  malloc_zone_t *v25;
  uint64_t v26;
  const md::LabelText *v27;
  const md::LabelText *v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)this = &off_1E42AFC50;
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  v2 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  if ((v5 & 1) == 0)
  {
    v27 = a2;
    v29 = this;
    a2 = v27;
    this = v29;
    if (v15)
    {
      v16 = operator new();
      *(_QWORD *)(v16 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v16 + 24) = "VectorKitLabels";
      *(_OWORD *)(v16 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v16 = &off_1E42B5668;
      *(_QWORD *)(v16 + 8) = "VectorKitLabels";
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_OWORD *)(v16 + 104) = 0u;
      *(_OWORD *)(v16 + 120) = 0u;
      *(_OWORD *)(v16 + 136) = 0u;
      *(_OWORD *)(v16 + 152) = 0u;
      *(_OWORD *)(v16 + 168) = 0u;
      *(_OWORD *)(v16 + 184) = 0u;
      *(_OWORD *)(v16 + 200) = 0u;
      *(_OWORD *)(v16 + 216) = 0u;
      *(_OWORD *)(v16 + 232) = 0u;
      *(_QWORD *)(v16 + 248) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v16 + 56), 0);
      if ((_DWORD)v17)
        geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v16 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v16;
      a2 = v27;
      this = v29;
    }
  }
  *(_QWORD *)(this + 56) = mdm::Allocator::instance(void)::alloc;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(this + 64) = _D0;
  *(_DWORD *)(this + 72) = 0;
  v11 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(this + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  if ((v14 & 1) == 0)
  {
    v28 = a2;
    v30 = this;
    v26 = _D0;
    _D0 = v26;
    v21 = v20;
    a2 = v28;
    this = v30;
    if (v21)
    {
      v22 = operator new();
      *(_QWORD *)(v22 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v22 + 24) = "VectorKitLabels";
      *(_OWORD *)(v22 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v22 = &off_1E42B5668;
      *(_QWORD *)(v22 + 8) = "VectorKitLabels";
      *(_OWORD *)(v22 + 72) = 0u;
      *(_OWORD *)(v22 + 88) = 0u;
      *(_OWORD *)(v22 + 104) = 0u;
      *(_OWORD *)(v22 + 120) = 0u;
      *(_OWORD *)(v22 + 136) = 0u;
      *(_OWORD *)(v22 + 152) = 0u;
      *(_OWORD *)(v22 + 168) = 0u;
      *(_OWORD *)(v22 + 184) = 0u;
      *(_OWORD *)(v22 + 200) = 0u;
      *(_OWORD *)(v22 + 216) = 0u;
      *(_OWORD *)(v22 + 232) = 0u;
      *(_QWORD *)(v22 + 248) = 0;
      *(_OWORD *)(v22 + 56) = 0u;
      v23 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v22 + 56), 0);
      if ((_DWORD)v23)
        geo::read_write_lock::logFailure(v23, (uint64_t)"initialization", v24);
      v25 = malloc_create_zone(0, 0);
      *(_QWORD *)(v22 + 48) = v25;
      malloc_set_zone_name(v25, "VectorKitLabels");
      *(_QWORD *)(v22 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v22;
      a2 = v28;
      this = v30;
      _D0 = v26;
    }
  }
  *(_QWORD *)(this + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 128) = _D0;
  *(_DWORD *)(this + 136) = 0;
  *(_BYTE *)(this + 144) = *((_BYTE *)a2 + 144);
  return this;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a1 + 112);
  return a1;
}

void md::LabelGGLResourceCopier::~LabelGGLResourceCopier(std::mutex *this)
{
  md::LabelGGLResourceCopier::~LabelGGLResourceCopier(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  unint64_t v3;

  this->__m_.__sig = (uint64_t)&off_1E429CE08;
  if (this->__m_.__opaque[48])
  {
    v2 = *(_QWORD *)&this->__m_.__opaque[32];
    v3 = *(_QWORD *)&this->__m_.__opaque[40];
    std::mutex::lock((std::mutex *)v2);
    std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v2 + 72), v3);
    std::mutex::unlock((std::mutex *)v2);
    this->__m_.__opaque[40] = 0;
    this->__m_.__opaque[48] = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)&this[2].__m_.__opaque[24]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)this[2].__m_.__opaque);
  std::mutex::~mutex(this + 1);
}

void md::LabelGGLResourceCopier::copyTextureToTexture(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  std::__shared_mutex_base *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  std::__shared_mutex_base *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  char v47;
  __int16 v48[20];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  char v63;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = (std::__shared_mutex_base *)(v8 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v8 + 104));
  v10 = *(_QWORD *)(v8 + 600);
  if (a2 < (unint64_t)((*(_QWORD *)(v8 + 608) - v10) >> 3)
    && ((v11 = *(_QWORD *)(v10 + 8 * a2)) != 0 ? (v12 = HIDWORD(a2) == HIDWORD(v11)) : (v12 = 0), v12))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v8 + 624) + 40 * v11);
    v13 = *(uint64_t **)(v8 + 632);
  }
  else
  {
    v13 = *(uint64_t **)(v8 + 632);
    v14 = v13;
  }
  std::__shared_mutex_base::unlock_shared(v9);
  if (v14 == v13 || v14 == 0)
    v16 = 0;
  else
    v16 = *v14;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = (std::__shared_mutex_base *)(v17 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v17 + 104));
  v19 = *(_QWORD *)(v17 + 600);
  if (a3 < (unint64_t)((*(_QWORD *)(v17 + 608) - v19) >> 3)
    && ((v20 = *(_QWORD *)(v19 + 8 * a3)) != 0 ? (v21 = HIDWORD(a3) == HIDWORD(v20)) : (v21 = 0), v21))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v17 + 624) + 40 * v20);
    v22 = *(uint64_t **)(v17 + 632);
  }
  else
  {
    v22 = *(uint64_t **)(v17 + 632);
    v23 = v22;
  }
  std::__shared_mutex_base::unlock_shared(v18);
  if (v23 != v22 && v23 != 0)
  {
    if (v16)
    {
      v25 = *v23;
      if (*v23)
      {
        v26 = (***(uint64_t (****)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 32));
        v27 = *(_QWORD **)(v26 + 8);
        v28 = v27[3];
        v29 = v27[4];
        v30 = v29 - v28;
        if (v29 != v28)
        {
          v31 = v26;
          v32 = 0;
          v33 = v30 >> 3;
          while (1)
          {
            v34 = *(unsigned __int8 **)(v28 + 8 * v32);
            if (*v34 == *(unsigned __int8 *)(a1 + 8))
            {
              v35 = *((_QWORD *)v34 + 1);
              v36 = v27[15];
              if (v35 < (v27[16] - v36) >> 3)
                break;
            }
            if (++v32 >= v33)
              return;
          }
          v37 = *(_QWORD *)(v36 + 8 * v35);
          if (v37)
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8 * *(unsigned __int8 *)(a1 + 9));
            if (v38)
            {
              v39 = *a4;
              v40 = *(_QWORD *)(a4 + 1);
              v41 = a4[3];
              v42 = *((_QWORD *)a4 + 2);
              v43 = a4[6];
              v44 = a4[7];
              v45 = *((_QWORD *)a4 + 4);
              v46 = a4[10];
              v47 = *((_BYTE *)a4 + 44);
              v48[0] = 3;
              v49 = 0;
              v50 = 0;
              v51 = v16;
              v52 = v25;
              v53 = v42;
              v54 = v43;
              v55 = v40;
              v56 = v41;
              v57 = v45;
              v58 = v46;
              v59 = 0;
              v60 = 0;
              v61 = v39;
              v62 = v44;
              v63 = v47;
              ggl::CommandBuffer::pushCopyItem(v38, (uint64_t)v48);
              md::LabelGGLResourceCopier::didPushCopyItem((std::mutex *)a1, **(_QWORD **)(*(_QWORD *)(v31 + 16) + 136));
            }
          }
        }
      }
    }
  }
}

void md::LabelGGLResourceCopier::copyBufferToTexture(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  std::__shared_mutex_base *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  std::__shared_mutex_base *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  char v47;
  __int16 v48[20];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = (std::__shared_mutex_base *)(v8 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v8 + 272));
  v10 = *(_QWORD *)(v8 + 696);
  if (a2 < (unint64_t)((*(_QWORD *)(v8 + 704) - v10) >> 3)
    && ((v11 = *(_QWORD *)(v10 + 8 * a2)) != 0 ? (v12 = HIDWORD(a2) == HIDWORD(v11)) : (v12 = 0), v12))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v8 + 720) + 32 * *(_QWORD *)(v10 + 8 * a2));
    v13 = *(uint64_t **)(v8 + 728);
  }
  else
  {
    v13 = *(uint64_t **)(v8 + 728);
    v14 = v13;
  }
  std::__shared_mutex_base::unlock_shared(v9);
  if (v14 == v13 || v14 == 0)
    v16 = 0;
  else
    v16 = *v14;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = (std::__shared_mutex_base *)(v17 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v17 + 104));
  v19 = *(_QWORD *)(v17 + 600);
  if (a3 < (unint64_t)((*(_QWORD *)(v17 + 608) - v19) >> 3)
    && ((v20 = *(_QWORD *)(v19 + 8 * a3)) != 0 ? (v21 = HIDWORD(a3) == HIDWORD(v20)) : (v21 = 0), v21))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v17 + 624) + 40 * v20);
    v22 = *(uint64_t **)(v17 + 632);
  }
  else
  {
    v22 = *(uint64_t **)(v17 + 632);
    v23 = v22;
  }
  std::__shared_mutex_base::unlock_shared(v18);
  if (v23 != v22 && v23 != 0)
  {
    if (v16)
    {
      v25 = *v23;
      if (*v23)
      {
        v26 = (***(uint64_t (****)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 32));
        v27 = *(_QWORD **)(v26 + 8);
        v28 = v27[3];
        v29 = v27[4];
        v30 = v29 - v28;
        if (v29 != v28)
        {
          v31 = v26;
          v32 = 0;
          v33 = v30 >> 3;
          while (1)
          {
            v34 = *(unsigned __int8 **)(v28 + 8 * v32);
            if (*v34 == *(unsigned __int8 *)(a1 + 8))
            {
              v35 = *((_QWORD *)v34 + 1);
              v36 = v27[15];
              if (v35 < (v27[16] - v36) >> 3)
                break;
            }
            if (++v32 >= v33)
              return;
          }
          v37 = *(_QWORD *)(v36 + 8 * v35);
          if (v37)
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8 * *(unsigned __int8 *)(a1 + 9));
            if (v38)
            {
              v39 = *a4;
              v40 = a4[1];
              v41 = a4[2];
              v42 = *(_QWORD *)(a4 + 3);
              v43 = a4[5];
              v44 = a4[6];
              v45 = *(_QWORD *)(a4 + 7);
              v46 = a4[9];
              v47 = *((_BYTE *)a4 + 40);
              v48[0] = 1;
              v49 = v16;
              v50 = 0;
              v51 = 0;
              v52 = v25;
              v53 = v42;
              v54 = v43;
              v55 = v45;
              v56 = v46;
              v57 = v39;
              v58 = v40;
              v59 = v41;
              v60 = 0;
              v61 = v44;
              v62 = v47;
              ggl::CommandBuffer::pushCopyItem(v38, (uint64_t)v48);
              md::LabelGGLResourceCopier::didPushCopyItem((std::mutex *)a1, **(_QWORD **)(*(_QWORD *)(v31 + 16) + 136));
            }
          }
        }
      }
    }
  }
}

void md::LabelGGLResourceCopier::uploadBuffer(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  std::__shared_mutex_base *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  _BYTE *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  _QWORD *v68;
  _BYTE v69[24];
  _BYTE *v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[24];
  _BYTE *v74;
  __int128 v75;
  uint64_t v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (std::__shared_mutex_base *)(v6 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v6 + 272));
  v8 = *(_QWORD *)(v6 + 696);
  if (a2 < (unint64_t)((*(_QWORD *)(v6 + 704) - v8) >> 3)
    && ((v9 = *(_QWORD *)(v8 + 8 * a2)) != 0 ? (v10 = HIDWORD(a2) == HIDWORD(v9)) : (v10 = 0), v10))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v6 + 720) + 32 * *(_QWORD *)(v8 + 8 * a2));
    v11 = *(uint64_t **)(v6 + 728);
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 728);
    v12 = v11;
  }
  std::__shared_mutex_base::unlock_shared(v7);
  if (v12 == v11 || v12 == 0)
    return;
  v14 = *v12;
  if (!*v12)
    return;
  v15 = *(_QWORD **)((***(uint64_t (****)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 32)) + 8);
  v16 = v15[3];
  v17 = v15[4];
  v18 = v17 - v16;
  if (v17 == v16)
    return;
  v19 = 0;
  v20 = v18 >> 3;
  while (1)
  {
    v21 = *(unsigned __int8 **)(v16 + 8 * v19);
    if (*v21 == *(unsigned __int8 *)(a1 + 8))
    {
      v22 = *((_QWORD *)v21 + 1);
      v23 = v15[15];
      if (v22 < (v15[16] - v23) >> 3)
        break;
    }
    if (++v19 >= v20)
      return;
  }
  v24 = *(_QWORD *)(v23 + 8 * v22);
  if (!v24)
    return;
  v25 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * *(unsigned __int8 *)(a1 + 9));
  if (!v25)
    return;
  v75 = *a3;
  v76 = *((_QWORD *)a3 + 2);
  v26 = v77;
  v27 = (__int128 *)*((_QWORD *)a3 + 6);
  if (v27)
  {
    if (v27 == (__int128 *)((char *)a3 + 24))
    {
      v78 = v77;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v27 + 24))(v27, v77);
      v28 = v78;
    }
    else
    {
      v28 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v27 + 16))(v27);
      v78 = v28;
    }
    v62 = *(__int128 *)((char *)a3 + 8);
    v29 = *(_QWORD *)a3;
    v65 = v75;
    v66 = v76;
    v30 = v67;
    if (v28)
    {
      if (v28 == v77)
      {
        v68 = v67;
        (*(void (**)(_QWORD *, _QWORD *))(v77[0] + 24))(v77, v67);
      }
      else
      {
        v68 = v28;
        v78 = 0;
      }
    }
    else
    {
      v68 = 0;
    }
  }
  else
  {
    v78 = 0;
    v62 = *(__int128 *)((char *)a3 + 8);
    v29 = *(_QWORD *)a3;
    v65 = *a3;
    v66 = *((_QWORD *)a3 + 2);
    v30 = v67;
    v68 = 0;
  }
  v70 = 0;
  v31 = (char *)operator new(0x40uLL);
  v32 = v31;
  *(_QWORD *)v31 = &off_1E42D0DC0;
  *(_OWORD *)(v31 + 8) = v65;
  v33 = v68;
  *((_QWORD *)v31 + 3) = v66;
  if (v33)
  {
    if (v33 == v67)
    {
      *((_QWORD *)v31 + 7) = v31 + 32;
      (*(void (**)(_QWORD *))(v67[0] + 24))(v67);
    }
    else
    {
      *((_QWORD *)v31 + 7) = v33;
      v68 = 0;
    }
  }
  else
  {
    *((_QWORD *)v31 + 7) = 0;
  }
  v70 = v32;
  *(_QWORD *)&v71 = v29;
  *((_QWORD *)&v71 + 1) = v14;
  v72 = v62;
  v34 = v73;
  v74 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v32 + 16))(v32);
  v36 = *(_QWORD *)(v25 + 240);
  v35 = *(_QWORD *)(v25 + 248);
  if (v36 < v35)
  {
    if (v36)
    {
      v37 = v72;
      *(_OWORD *)v36 = v71;
      *(_OWORD *)(v36 + 16) = v37;
      v38 = (uint64_t)v74;
      if (v74)
      {
        if (v74 == v73)
        {
          *(_QWORD *)(v36 + 56) = v36 + 32;
          (*(void (**)(_BYTE *))(*(_QWORD *)v74 + 24))(v74);
          goto LABEL_54;
        }
        v38 = (*(uint64_t (**)(void))(*(_QWORD *)v74 + 16))();
      }
      *(_QWORD *)(v36 + 56) = v38;
    }
LABEL_54:
    v47 = (_OWORD *)(v36 + 64);
    *(_QWORD *)(v25 + 240) = v36 + 64;
    goto LABEL_77;
  }
  v39 = *(_QWORD *)(v25 + 232);
  v40 = (uint64_t)(v36 - v39) >> 6;
  if ((unint64_t)(v40 + 1) >> 58)
    abort();
  v41 = v35 - v39;
  v42 = v41 >> 5;
  if (v41 >> 5 <= (unint64_t)(v40 + 1))
    v42 = v40 + 1;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0)
    v43 = 0x3FFFFFFFFFFFFFFLL;
  else
    v43 = v42;
  if (v43)
  {
    v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v25 + 256) + 16))(*(_QWORD *)(v25 + 256), v43 << 6, 8);
    v45 = (_OWORD *)(v44 + (v40 << 6));
    v43 = v44 + (v43 << 6);
    v64 = v43;
    if (v44)
    {
      v46 = v72;
      *v45 = v71;
      v45[1] = v46;
      if (v74)
      {
        if (v74 == v73)
        {
          *(_QWORD *)(v44 + (v40 << 6) + 56) = v45 + 2;
          (*(void (**)(_BYTE *))(*(_QWORD *)v74 + 24))(v74);
        }
        else
        {
          *(_QWORD *)(v44 + (v40 << 6) + 56) = (*(uint64_t (**)(void))(*(_QWORD *)v74 + 16))();
        }
      }
      else
      {
        *(_QWORD *)(v44 + (v40 << 6) + 56) = 0;
      }
    }
  }
  else
  {
    v45 = (_OWORD *)(v40 << 6);
    v64 = 0;
  }
  v47 = v45 + 4;
  v63 = v45 + 4;
  v49 = *(_QWORD *)(v25 + 232);
  v48 = *(_QWORD *)(v25 + 240);
  if (v48 == v49)
  {
    v50 = *(_QWORD *)(v25 + 240);
  }
  else
  {
    do
    {
      v51 = *(_OWORD *)(v48 - 48);
      *(v45 - 4) = *(_OWORD *)(v48 - 64);
      *(v45 - 3) = v51;
      v52 = *(_QWORD *)(v48 - 8);
      if (v52)
      {
        if (v48 - 32 == v52)
        {
          *((_QWORD *)v45 - 1) = v45 - 2;
          (*(void (**)(_QWORD))(**(_QWORD **)(v48 - 8) + 24))(*(_QWORD *)(v48 - 8));
        }
        else
        {
          *((_QWORD *)v45 - 1) = v52;
          *(_QWORD *)(v48 - 8) = 0;
        }
      }
      else
      {
        *((_QWORD *)v45 - 1) = 0;
      }
      v45 -= 4;
      v48 -= 64;
    }
    while (v48 != v49);
    v50 = *(_QWORD *)(v25 + 232);
    v48 = *(_QWORD *)(v25 + 240);
    v47 = v63;
    v43 = v64;
  }
  *(_QWORD *)(v25 + 232) = v45;
  *(_QWORD *)(v25 + 240) = v47;
  v53 = *(_QWORD *)(v25 + 248);
  *(_QWORD *)(v25 + 248) = v43;
  if (v48 != v50)
  {
    while (1)
    {
      v56 = v48 - 64;
      v54 = *(_QWORD **)(v48 - 8);
      if ((_QWORD *)(v48 - 32) == v54)
      {
        v54 = (_QWORD *)(v48 - 32);
        v55 = 4;
      }
      else
      {
        if (!v54)
          goto LABEL_70;
        v55 = 5;
      }
      (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_70:
      v48 -= 64;
      if (v56 == v50)
      {
        v48 = v50;
        break;
      }
    }
  }
  if (v48)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v25 + 256) + 40))(*(_QWORD *)(v25 + 256), v48, v53 - v48);
LABEL_77:
  *(_QWORD *)(v25 + 240) = v47;
  if (v74 == v73)
  {
    v57 = 4;
  }
  else
  {
    if (!v74)
      goto LABEL_82;
    v57 = 5;
    v34 = v74;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v57))(v34);
LABEL_82:
  v58 = v70;
  if (v70 == v69)
  {
    v59 = 4;
    v58 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_87;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_87:
  if (v68 == v67)
  {
    v60 = 4;
    goto LABEL_91;
  }
  if (v68)
  {
    v60 = 5;
    v30 = v68;
LABEL_91:
    (*(void (**)(_QWORD *))(*v30 + 8 * v60))(v30);
  }
  if (v78 == v77)
  {
    v61 = 4;
  }
  else
  {
    if (!v78)
      return;
    v61 = 5;
    v26 = v78;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v61))(v26);
}

void sub_19F479910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36)
{
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  std::__split_buffer<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator> &>::~__split_buffer((uint64_t)&a12);
  if (a36 == v38)
  {
    v41 = 4;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v41 = 5;
    v38 = a36;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v41))(v38);
LABEL_6:
  v42 = a28;
  if (a28 == &a25)
  {
    v43 = 4;
    v42 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_11;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_11:
  if (a23 == v37)
  {
    v44 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_16;
    v44 = 5;
    v37 = a23;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v44))(v37);
LABEL_16:
  v45 = *(_QWORD **)(v39 - 96);
  if (v45 == v36)
  {
    v46 = 4;
  }
  else
  {
    if (!v45)
      _Unwind_Resume(a1);
    v46 = 5;
    v36 = *(_QWORD **)(v39 - 96);
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v46))(v36);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v6 = v2 - 64;
        *(_QWORD *)(a1 + 16) = v2 - 64;
        v4 = *(_QWORD **)(v2 - 8);
        if (v4 != (_QWORD *)(v2 - 32))
          break;
        v4 = (_QWORD *)(v2 - 32);
        v5 = 4;
LABEL_4:
        (*(void (**)(void))(*v4 + 8 * v5))();
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_9;
      }
      if (v4)
      {
        v5 = 5;
        goto LABEL_4;
      }
      v2 -= 64;
    }
    while (v6 != v3);
  }
LABEL_9:
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

_QWORD *std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42D0DC0;
  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42D0DC0;
  v1 = a1 + 4;
  v2 = (_QWORD *)a1[7];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E42D0DC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (v3 == a1 + 32)
    {
      *((_QWORD *)v2 + 7) = v2 + 32;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return v2;
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  *((_QWORD *)v2 + 7) = v3;
  return v2;
}

void sub_19F479C00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::__clone(uint64_t result, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E42D0DC0;
  v3 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(result + 56);
  if (v4)
  {
    if (v4 == result + 32)
    {
      *(_QWORD *)(a2 + 56) = a2 + 32;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 56) + 24))(*(_QWORD *)(result + 56));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 56));
      *(_QWORD *)(a2 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 32;
  v3 = (char *)*((_QWORD *)__p + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void md::LabelGGLResourceCopier::didPushCopyItem(std::mutex *this, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t **opaque;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = this + 1;
  std::mutex::lock(this + 1);
  opaque = (uint64_t **)this[2].__m_.__opaque;
  v5 = *(uint64_t **)this[2].__m_.__opaque;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        opaque = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        opaque = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)this[2].__m_.__opaque;
LABEL_8:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a2;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *opaque = v9;
    v10 = *(_QWORD *)this[2].__m_.__sig;
    if (v10)
    {
      this[2].__m_.__sig = v10;
      v9 = *opaque;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)this[2].__m_.__opaque, v9);
    ++*(_QWORD *)&this[2].__m_.__opaque[8];
  }
  std::mutex::unlock(v4);
}

void sub_19F479DFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F479E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::mutex *v3;

  v3 = v2;
  std::mutex::unlock(v3);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 160));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 136));
  std::mutex::~mutex((std::mutex *)(v1 + 64));
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *a1;
  v6 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v6)
    return;
  v7 = *v6;
  if (!*v6)
    return;
  v8 = *(_QWORD *)&v2 - 1;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_22;
      }
      else if ((v9 & v8) != v4)
      {
        return;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return;
    }
  }
  while (1)
  {
    v10 = v7[1];
    if (v10 == a2)
      break;
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
    if (v10 != v4)
      return;
LABEL_16:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return;
  }
  if (v7[2] != a2)
    goto LABEL_16;
LABEL_22:
  if (v3.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v2 <= a2)
      a2 %= *(_QWORD *)&v2;
  }
  else
  {
    a2 &= v8;
  }
  v11 = *(uint64_t **)(v5 + 8 * a2);
  do
  {
    v12 = v11;
    v11 = (uint64_t *)*v11;
  }
  while (v11 != v7);
  if (v12 == a1 + 2)
    goto LABEL_39;
  v13 = v12[1];
  if (v3.u32[0] > 1uLL)
  {
    if (v13 >= *(_QWORD *)&v2)
      v13 %= *(_QWORD *)&v2;
  }
  else
  {
    v13 &= v8;
  }
  if (v13 != a2)
  {
LABEL_39:
    if (!*v7)
      goto LABEL_40;
    v14 = *(_QWORD *)(*v7 + 8);
    if (v3.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v2)
        v14 %= *(_QWORD *)&v2;
    }
    else
    {
      v14 &= v8;
    }
    if (v14 != a2)
LABEL_40:
      *(_QWORD *)(v5 + 8 * a2) = 0;
  }
  v15 = *v7;
  if (*v7)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v3.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v2)
        v16 %= *(_QWORD *)&v2;
    }
    else
    {
      v16 &= v8;
    }
    if (v16 != a2)
    {
      *(_QWORD *)(*a1 + 8 * v16) = v12;
      v15 = *v7;
    }
  }
  *v12 = v15;
  *v7 = 0;
  --a1[3];
  v17 = (uint64_t *)v7[6];
  if (v17 == v7 + 3)
  {
    v18 = 4;
    v17 = v7 + 3;
LABEL_52:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  else if (v17)
  {
    v18 = 5;
    goto LABEL_52;
  }
  operator delete(v7);
}

uint64_t md::MapEngineSignals::ThreadSafeSignal<unsigned long>::connect(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[2];
  char v55;
  _QWORD *v56;
  _QWORD v57[4];

  v57[3] = *MEMORY[0x1E0C80C00];
  std::mutex::lock((std::mutex *)a1);
  v5 = a2[3];
  if (v5)
  {
    if ((_QWORD *)v5 == a2)
    {
      v53 = v52;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v52);
      goto LABEL_6;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  v53 = (_QWORD *)v5;
LABEL_6:
  v6 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v6 >= v7)
        v2 = v6 % v7;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)(a1 + 72) + 8 * v2);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                goto LABEL_87;
            }
            else if ((v12 & (v7 - 1)) != v2)
            {
              goto LABEL_27;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_27;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              goto LABEL_87;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v2)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_27:
  v10 = operator new(0x38uLL);
  v13 = (_QWORD *)(a1 + 88);
  v54[0] = v10;
  v54[1] = a1 + 88;
  *v10 = 0;
  v10[1] = v6;
  v10[2] = v6;
  v10[6] = 0;
  v55 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 96) + 1);
  v15 = *(float *)(a1 + 104);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 80);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_64;
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 80);
LABEL_64:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7)
            v2 = v6 % v7;
          else
            v2 = v6;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        v51 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = 0;
        if (v51)
          operator delete(v51);
        v7 = 0;
        *(_QWORD *)(a1 + 80) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *(_QWORD *)(a1 + 80) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_63:
      v7 = prime;
      goto LABEL_64;
    }
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else
        {
          v29 = *(_QWORD *)(a1 + 72);
          if (*(_QWORD *)(v29 + 8 * v28))
          {
            *v23 = *i;
            v30 = 8 * v28;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 72) + v30);
            **(_QWORD **)(*(_QWORD *)(a1 + 72) + v30) = i;
          }
          else
          {
            *(_QWORD *)(v29 + 8 * v28) = v23;
            v23 = i;
            v26 = v28;
          }
        }
      }
      goto LABEL_63;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v24) = v13;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_63;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v24)
      {
        v37 = *(_QWORD *)(a1 + 72);
        if (!*(_QWORD *)(v37 + 8 * v36))
        {
          *(_QWORD *)(v37 + 8 * v36) = v23;
          goto LABEL_68;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)(a1 + 72) + v35);
        **(_QWORD **)(*(_QWORD *)(a1 + 72) + v35) = v34;
        v34 = v23;
      }
      v36 = v24;
LABEL_68:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v24 = v36;
      if (!v34)
        goto LABEL_63;
    }
  }
LABEL_77:
  v38 = *(_QWORD *)(a1 + 72);
  v39 = *(_QWORD **)(v38 + 8 * v2);
  if (v39)
  {
    *v10 = *v39;
LABEL_85:
    *v39 = v10;
    goto LABEL_86;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v38 + 8 * v2) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v40);
    goto LABEL_85;
  }
LABEL_86:
  ++*(_QWORD *)(a1 + 96);
LABEL_87:
  v41 = (uint64_t)v53;
  if (!v53)
    goto LABEL_90;
  if (v53 != v52)
  {
    v41 = (*(uint64_t (**)(void))(*v53 + 16))();
LABEL_90:
    v56 = (_QWORD *)v41;
    goto LABEL_92;
  }
  v56 = v54;
  (*(void (**)(_QWORD *, _QWORD *))(v52[0] + 24))(v52, v54);
LABEL_92:
  v42 = v10 + 3;
  if (v10 + 3 != v54)
  {
    v43 = v56;
    v44 = (_QWORD *)v10[6];
    if (v56 == v54)
    {
      if (v44 == v42)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v54[0] + 24))(v54, v57);
        (*(void (**)(_QWORD *))(*v56 + 32))(v56);
        v56 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v10[6] + 24))(v10[6], v54);
        (*(void (**)(_QWORD))(*(_QWORD *)v10[6] + 32))(v10[6]);
        v10[6] = 0;
        v56 = v54;
        (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v10 + 3);
        (*(void (**)(_QWORD *))(v57[0] + 32))(v57);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v54[0] + 24))(v54, v10 + 3);
        (*(void (**)(_QWORD *))(*v56 + 32))(v56);
        v56 = (_QWORD *)v10[6];
      }
      v10[6] = v42;
    }
    else if (v44 == v42)
    {
      (*(void (**)(_QWORD *, _QWORD *))(v10[3] + 24))(v10 + 3, v54);
      (*(void (**)(_QWORD))(*(_QWORD *)v10[6] + 32))(v10[6]);
      v10[6] = v56;
      v56 = v54;
    }
    else
    {
      v56 = (_QWORD *)v10[6];
      v10[6] = v43;
    }
  }
  v45 = v56;
  if (v56 == v54)
  {
    v46 = 4;
    v45 = v54;
  }
  else
  {
    if (!v56)
      goto LABEL_106;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_106:
  v47 = *(_QWORD *)(a1 + 64);
  v48 = v53;
  if (v53 == v52)
  {
    v49 = 4;
    v48 = v52;
    goto LABEL_110;
  }
  if (v53)
  {
    v49 = 5;
LABEL_110:
    (*(void (**)(void))(*v48 + 8 * v49))();
  }
  std::mutex::unlock((std::mutex *)a1);
  return v47;
}

void sub_19F47A780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  std::mutex *v13;
  uint64_t *v15;
  uint64_t v16;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a13);
  v15 = a12;
  if (a12 == &a9)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0E08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0E08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t **v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint8_t buf[4];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  std::mutex::lock((std::mutex *)(v2 + 64));
  v4 = *(uint64_t **)(v2 + 136);
  if (v4)
  {
    v5 = (uint64_t *)(v2 + 136);
    v6 = *(_QWORD **)(v2 + 136);
    do
    {
      v7 = v6[4];
      v8 = v7 > v3;
      if (v7 <= v3)
        v9 = v6 + 1;
      else
        v9 = v6;
      if (v8)
        v5 = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    v10 = (uint64_t *)(v2 + 136);
    v11 = *(_QWORD **)(v2 + 136);
    do
    {
      v12 = v11[4];
      v13 = v12 >= v3;
      if (v12 >= v3)
        v14 = v11;
      else
        v14 = v11 + 1;
      if (v13)
        v10 = v11;
      v11 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v10 != (uint64_t *)(v2 + 136) && v10[4] <= v3)
    {
      v15 = (uint64_t *)v10[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        v17 = v10;
        do
        {
          v16 = (uint64_t *)v17[2];
          v18 = *v16 == (_QWORD)v17;
          v17 = v16;
        }
        while (!v18);
      }
      if (*(uint64_t **)(v2 + 128) == v10)
        *(_QWORD *)(v2 + 128) = v16;
      --*(_QWORD *)(v2 + 144);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v4, v10);
      operator delete(v10);
    }
  }
  else
  {
    v5 = (uint64_t *)(v2 + 136);
  }
  v19 = *(uint64_t **)(v2 + 128);
  if (v19 != v5)
  {
    v20 = (uint64_t **)(v2 + 160);
    do
    {
      v22 = *v20;
      if (*v20)
      {
        v23 = v19[4];
        do
        {
          v24 = v22[4];
          if (v23 >= v24)
          {
            if (v24 >= v23)
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v25 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                v26 = v19[4];
                *(_DWORD *)buf = 134217984;
                v51 = v26;
                _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, "Received frame for orphaned framestamp %lu", buf, 0xCu);
              }

              v27 = *v20;
              if (*v20)
              {
                v28 = v19[4];
                v29 = (uint64_t *)(v2 + 160);
                v30 = *v20;
                do
                {
                  v31 = v30[4];
                  v32 = v31 >= v28;
                  if (v31 >= v28)
                    v33 = (uint64_t **)v30;
                  else
                    v33 = (uint64_t **)(v30 + 1);
                  if (v32)
                    v29 = v30;
                  v30 = *v33;
                }
                while (*v33);
                if (v29 != (uint64_t *)v20 && v28 >= v29[4])
                {
                  v34 = (uint64_t *)v29[1];
                  v35 = v29;
                  if (v34)
                  {
                    do
                    {
                      v36 = v34;
                      v34 = (uint64_t *)*v34;
                    }
                    while (v34);
                  }
                  else
                  {
                    do
                    {
                      v36 = (uint64_t *)v35[2];
                      v18 = *v36 == (_QWORD)v35;
                      v35 = v36;
                    }
                    while (!v18);
                  }
                  if (*(uint64_t **)(v2 + 152) == v29)
                    *(_QWORD *)(v2 + 152) = v36;
                  --*(_QWORD *)(v2 + 168);
                  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v27, v29);
                  operator delete(v29);
                }
              }
              v49 = (uint64_t *)v19[1];
              if (v49)
              {
                do
                {
                  v48 = v49;
                  v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v48 = (uint64_t *)v19[2];
                  v18 = *v48 == (_QWORD)v19;
                  v19 = v48;
                }
                while (!v18);
              }
              goto LABEL_32;
            }
            ++v22;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v37 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        v38 = v19[4];
        *(_DWORD *)buf = 134217984;
        v51 = v38;
        _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_DEBUG, "Dropped copy items for framestamp %lu", buf, 0xCu);
      }

      v39 = *v20;
      v40 = v19[4];
      v41 = (uint64_t **)(v2 + 160);
      v42 = (uint64_t **)(v2 + 160);
      if (*v20)
      {
        while (1)
        {
          while (1)
          {
            v42 = (uint64_t **)v39;
            v43 = v39[4];
            if (v40 >= v43)
              break;
            v39 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_68;
          }
          if (v43 >= v40)
            break;
          v39 = v42[1];
          if (!v39)
          {
            v41 = v42 + 1;
            goto LABEL_68;
          }
        }
      }
      else
      {
LABEL_68:
        v44 = (uint64_t *)operator new(0x28uLL);
        v44[4] = v40;
        *v44 = 0;
        v44[1] = 0;
        v44[2] = (uint64_t)v42;
        *v41 = v44;
        v45 = **(_QWORD **)(v2 + 152);
        if (v45)
        {
          *(_QWORD *)(v2 + 152) = v45;
          v44 = *v41;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v44);
        ++*(_QWORD *)(v2 + 168);
      }
      v46 = (uint64_t *)v19[1];
      v47 = v19;
      if (v46)
      {
        do
        {
          v48 = v46;
          v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v48 = (uint64_t *)v47[2];
          v18 = *v48 == (_QWORD)v47;
          v47 = v48;
        }
        while (!v18);
      }
      if (*(uint64_t **)(v2 + 128) == v19)
        *(_QWORD *)(v2 + 128) = v48;
      v21 = *(uint64_t **)(v2 + 136);
      --*(_QWORD *)(v2 + 144);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v21, v19);
      operator delete(v19);
LABEL_32:
      v19 = v48;
    }
    while (v48 != v5);
  }
  std::mutex::unlock((std::mutex *)(v2 + 64));
}

void sub_19F47ACA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t md::GridRenderLayer::layoutWithoutStyles(md::GridRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::GridRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

float gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(double a1, double a2)
{
  long double v4;
  long double v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  float64_t *v14;
  double v15;
  long double v16;
  long double v17;
  float64x2_t v18;
  long double v19;
  long double v20;
  long double v21;
  float64x2_t v22;
  long double v24;
  long double v25;
  long double v26;
  float64x2_t v27;
  long double v28;
  float v29;
  double v30;
  uint64_t v31;
  double v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float64x2_t *v60;
  uint64_t v62;
  double *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  unint64_t v69;
  float64x2_t *v70;
  double v71;
  double *f64;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double *v80;
  double v81;
  BOOL v83;
  BOOL v84;
  unint64_t v85;
  uint64_t v86;
  double *v87;
  double *v88;
  double v89;
  double *v90;
  double *v91;
  double v92;
  double *v93;
  uint64_t v94;
  double v95;
  double *v96;
  double v97;
  uint64_t v98;
  double v99;
  double *v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  long double v128;
  float64x2_t v129;
  long double v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  uint64_t v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  double v146;
  double v147;

  v4 = exp(a1 * 6.28318531 + -3.14159265);
  v5 = atan(v4);
  v6 = v5 + v5;
  v138 = v5 + v5 + -1.57079633;
  v7 = exp(a2 * 6.28318531 + -3.14159265);
  v8 = atan(v7);
  v9 = v8 + v8;
  __asm { FMOV            V1.2D, #1.0 }
  v137 = _Q1;
  if (_ZF)
  {
    v14 = &v147;
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v143 = xmmword_19FFB33B0;
    v32 = 0.0;
    v30 = 0.857142857;
    v31 = 6;
  }
  else
  {
    v14 = &v142.f64[1];
    *(double *)&v136 = v9 - v6;
    v15 = a2 - a1;
    v143 = xmmword_19FFB33B0;
    v135 = v9 + -1.57079633;
    v16 = exp((a1 + v15 * 0.142857149) * 6.28318531 + -3.14159265);
    v17 = atan(v16);
    v18.f64[0] = v138;
    v18.f64[1] = fmax(v138, v17 * 2.0 + -1.57079633);
    v132 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v138, 0);
    v133 = vdivq_f64(v137, (float64x2_t)vdupq_lane_s64(v136, 0));
    v134 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v135, 0);
    v139 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(vminnmq_f64(v134, v18), v132), v133)));
    v19 = exp((a1 + v15 * 0.285714298) * 6.28318531 + -3.14159265);
    v130 = atan(v19);
    v20 = exp((a1 + v15 * 0.428571433) * 6.28318531 + -3.14159265);
    v21 = atan(v20);
    v22.f64[0] = v130;
    v22.f64[1] = v21;
    __asm { FMOV            V1.2D, #2.0 }
    v129 = _Q1;
    v131 = (float64x2_t)vdupq_n_s64(0xBFF921FB54442D18);
    v140 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(vminnmq_f64(v134, vmaxnmq_f64(v132, vmlaq_f64(v131, _Q1, v22))), v132), v133)));
    v24 = exp((a1 + v15 * 0.571428597) * 6.28318531 + -3.14159265);
    v128 = atan(v24);
    v25 = exp((a1 + v15 * 0.714285731) * 6.28318531 + -3.14159265);
    v26 = atan(v25);
    v27.f64[0] = v128;
    v27.f64[1] = v26;
    v141 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(vminnmq_f64(v134, vmaxnmq_f64(v132, vmlaq_f64(v131, v129, v27))), v132), v133)));
    v146 = 0.857142857;
    v28 = exp((a1 + v15 * 0.857142866) * 6.28318531 + -3.14159265);
    v29 = (fmin(v135, fmax(v138, atan(v28) * 2.0 + -1.57079633)) - v138) / *(double *)&v136;
    v142.f64[0] = v29;
    v30 = 1.0;
    v31 = 7;
    v32 = *(double *)&v143;
  }
  v144 = xmmword_19FFB33C0;
  v145 = xmmword_19FFB33D0;
  *((double *)&v143 + v31) = v30;
  *v14 = 1.0;
  v33 = (double *)malloc_type_calloc(0x10uLL, 8uLL, 0x100004000313F17uLL);
  v34 = (double *)malloc_type_malloc(0x50uLL, 0x100004000313F17uLL);
  v35 = (double *)malloc_type_malloc(0x20uLL, 0x100004000313F17uLL);
  v36 = (double *)malloc_type_calloc(4uLL, 8uLL, 0x100004000313F17uLL);
  v37 = (double *)malloc_type_calloc(4uLL, 8uLL, 0x100004000313F17uLL);
  v38 = (float64x2_t *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  v39 = v38;
  v40 = 0;
  v41 = *(double *)&v143 - v32;
  v42 = *((double *)&v143 + 1) - v32;
  v38[4].f64[0] = *(double *)&v143 - v32;
  v38[4].f64[1] = v42;
  v38[8].f64[0] = v41 * v41;
  v38[8].f64[1] = v42 * v42;
  v38[12].f64[0] = v41 * (v41 * v41);
  v38[12].f64[1] = v42 * (v42 * v42);
  v43 = *(double *)&v144 - v32;
  v44 = *((double *)&v144 + 1) - v32;
  v38[5].f64[0] = *(double *)&v144 - v32;
  v38[5].f64[1] = v44;
  v38[9].f64[0] = v43 * v43;
  v38[9].f64[1] = v44 * v44;
  v38[13].f64[0] = v43 * (v43 * v43);
  v38[13].f64[1] = v44 * (v44 * v44);
  v45 = *(double *)&v145 - v32;
  v46 = *((double *)&v145 + 1) - v32;
  v38[6].f64[0] = *(double *)&v145 - v32;
  v38[6].f64[1] = v46;
  v38[10].f64[0] = v45 * v45;
  v38[10].f64[1] = v46 * v46;
  *v38 = v137;
  v38[1] = v137;
  v38[14].f64[0] = v45 * (v45 * v45);
  v38[14].f64[1] = v46 * (v46 * v46);
  v47 = v147;
  v48 = v146 - v32;
  v38[2] = v137;
  v38[3] = v137;
  v49 = v47 - v32;
  v38[7].f64[0] = v48;
  v38[7].f64[1] = v49;
  v38[11].f64[0] = v48 * v48;
  v38[11].f64[1] = v49 * v49;
  v38[15].f64[0] = v48 * (v48 * v48);
  v38[15].f64[1] = v49 * (v49 * v49);
  v50 = v37;
  do
  {
    v59 = *v50;
    v60 = &v38[v40];
    if (v50 >= v38[v40 + 4].f64 || v60 >= (float64x2_t *)(v50 + 1))
    {
      v58 = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v59, *v60, *v60), v60[2], v60[2]), v60[3], v60[3]), v60[1], v60[1]));
    }
    else
    {
      v51 = v59 + v60->f64[0] * v60->f64[0];
      *v50 = v51;
      v52 = v51 + v60->f64[1] * v60->f64[1];
      *v50 = v52;
      v53 = v52 + v60[1].f64[0] * v60[1].f64[0];
      *v50 = v53;
      v54 = v53 + v60[1].f64[1] * v60[1].f64[1];
      *v50 = v54;
      v55 = v54 + v60[2].f64[0] * v60[2].f64[0];
      *v50 = v55;
      v56 = v55 + v60[2].f64[1] * v60[2].f64[1];
      *v50 = v56;
      v57 = v56 + v60[3].f64[0] * v60[3].f64[0];
      *v50 = v57;
      v58 = v57 + v60[3].f64[1] * v60[3].f64[1];
      *v50 = v58;
    }
    *v50++ = sqrt(v58);
    v40 += 4;
  }
  while (v40 != 16);
  v62 = 0;
  v63 = v33 + 2;
  v64 = v38 + 2;
  do
  {
    *(v63 - 2) = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64[-2], *v38), v38[2], *v64), v38[1], v64[-1]), v38[3], v64[1]))/ (v37[v62]* *v37);
    *(v63 - 1) = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64[-2], v38[4]), v38[6], *v64), v38[5], v64[-1]), v38[7], v64[1]))/ (v37[v62]* v37[1]);
    *v63 = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64[-2], v38[8]), v38[10], *v64), v38[9], v64[-1]), v38[11], v64[1]))/ (v37[v62]* v37[2]);
    v65 = v64[-1];
    v66 = vmulq_f64(v64[-2], v38[12]);
    v67 = *v64;
    v68 = v64[1];
    v64 += 4;
    v63[1] = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v66, v38[14], v67), v38[13], v65), v38[15], v68))
           / (v37[v62++]
            * v37[3]);
    v63 += 4;
  }
  while (v62 != 4);
  v69 = 0;
  v70 = v38;
  do
  {
    v80 = &v36[v69 / 8 + 1];
    v81 = v36[v69 / 8];
    v83 = &v36[v69 / 8] < (double *)&v143 && v80 > (double *)&v139;
    v84 = v70 >= (float64x2_t *)v80 || &v36[v69 / 8] >= v70[4].f64;
    if (!v84 || v83)
    {
      v71 = v81 + v139.f64[0] * v70->f64[0];
      v36[v69 / 8] = v71;
      f64 = v38[v69 / 2].f64;
      v73 = v71 + v139.f64[1] * f64[1];
      v36[v69 / 8] = v73;
      v74 = v73 + v140.f64[0] * v70[1].f64[0];
      v36[v69 / 8] = v74;
      v75 = v74 + v140.f64[1] * f64[3];
      v36[v69 / 8] = v75;
      v76 = v75 + v141.f64[0] * v70[2].f64[0];
      v36[v69 / 8] = v76;
      v77 = v76 + v141.f64[1] * f64[5];
      v36[v69 / 8] = v77;
      v78 = v77 + v142.f64[0] * v70[3].f64[0];
      v36[v69 / 8] = v78;
      v79 = v78 + v142.f64[1] * f64[7];
    }
    else
    {
      v79 = vaddvq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v81, *v70, v139), v70[2], v141), v70[3], v142), v70[1], v140));
    }
    v36[v69 / 8] = v79;
    v36[v69 / 8] = v79 / v37[v69 / 8];
    v69 += 8;
    v70 += 4;
  }
  while (v69 != 32);
  v85 = 0;
  v86 = 2;
  v87 = v34;
  v88 = v33;
  do
  {
    v89 = *v88;
    *v87 = *v88;
    v90 = &v87[-v85];
    if (v85)
    {
      v89 = v89 - *v90 * *v90;
      *v87 = v89;
      if (v85 != 1)
      {
        v89 = v89 - v90[1] * v90[1];
        *v87 = v89;
        if (v85 != 2)
        {
          v89 = v89 - v90[2] * v90[2];
          *v87 = v89;
        }
      }
    }
    v92 = *v88;
    v91 = v88 + 1;
    *v87 = sqrt(fmax(v89, v92 * 0.000000001));
    if (v85 <= 2)
    {
      v93 = &v87[v85 + 1];
      if (v85)
      {
        v94 = v86;
        do
        {
          v95 = *v91;
          *v93 = *v91;
          v96 = &v93[-v85];
          v97 = v95 - *v90 * *v96;
          *v93 = v97;
          if (v85 != 1)
          {
            v97 = v97 - v90[1] * v96[1];
            *v93 = v97;
          }
          *v93 = v97 / *v87;
          v93 += v94;
          ++v91;
          ++v94;
        }
        while (v94 != 5);
      }
      else
      {
        v98 = v86;
        do
        {
          v99 = *v91++;
          *v93 = v99;
          *v93 = v99 / *v87;
          v93 += v98++;
        }
        while (v98 != 5);
      }
    }
    v87 += v85 + 2;
    v88 = &v91[v85 + 1];
    ++v86;
    ++v85;
  }
  while (v85 != 4);
  v100 = (double *)malloc_type_malloc(0x20uLL, 0x100004000313F17uLL);
  v101 = *v36;
  *v100 = *v36;
  v102 = v101 / *v34;
  *v100 = v102;
  v103 = v36[1];
  v100[1] = v103;
  v104 = v103 - v102 * v34[1];
  v100[1] = v104;
  v105 = v104 / v34[2];
  v100[1] = v105;
  v106 = v36[2];
  v100[2] = v106;
  v107 = v106 - v102 * v34[3];
  v100[2] = v107;
  v108 = v107 - v105 * v34[4];
  v100[2] = v108;
  v109 = v108 / v34[5];
  v100[2] = v109;
  v110 = v36[3];
  v100[3] = v110;
  v111 = v110 - v102 * v34[6];
  v100[3] = v111;
  v112 = v111 - v105 * v34[7];
  v100[3] = v112;
  v113 = v112 - v109 * v34[8];
  v100[3] = v113;
  v114 = v113 / v34[9];
  v100[3] = v114;
  v35[3] = v114;
  v115 = v114 / v34[9];
  v35[3] = v115;
  v116 = v100[2];
  v35[2] = v116;
  v117 = v116 - v115 * v34[8];
  v35[2] = v117;
  v118 = v117 / v34[5];
  v35[2] = v118;
  v119 = v100[1];
  v35[1] = v119;
  v120 = v119 - v118 * v34[4];
  v35[1] = v120;
  v121 = v120 - v115 * v34[7];
  v35[1] = v121;
  v122 = v121 / v34[2];
  v35[1] = v122;
  v123 = *v100;
  *v35 = *v100;
  v124 = v123 - v122 * v34[1];
  *v35 = v124;
  v125 = v124 - v118 * v34[3];
  *v35 = v125;
  v126 = v125 - v35[3] * v34[6];
  *v35 = v126;
  *v35 = v126 / *v34;
  free(v100);
  free(v33);
  free(v34);
  free(v35);
  free(v36);
  free(v37);
  free(v39);
  return 0.0;
}

uint64_t *std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = ((v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8) - 0x61C8864680B583EBLL;
  v10 = *((_QWORD *)a2 + 3);
  v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
  v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
  v13 = ((v9 << 6) + (v9 >> 2) - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)) - 0x61C8864680B583EBLL) ^ v9;
  v14 = (uint8x8_t)vcnt_s8(v2);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = ((v9 << 6) + (v9 >> 2) - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)) - 0x61C8864680B583EBLL) ^ v9;
    if (v13 >= *(_QWORD *)&v2)
      v15 = v13 % *(_QWORD *)&v2;
  }
  else
  {
    v15 = v13 & (*(_QWORD *)&v2 - 1);
  }
  v16 = *(uint64_t ***)(*a1 + 8 * v15);
  if (!v16)
    return 0;
  result = *v16;
  if (*v16)
  {
    if (v14.u32[0] < 2uLL)
    {
      v18 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v20 = result[1];
        if (v20 == v13)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && result[5] == v10)
          {
            return result;
          }
        }
        else if ((v20 & v18) != v15)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v19 = result[1];
      if (v19 == v13)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && result[5] == v10)
        {
          return result;
        }
      }
      else
      {
        if (v19 >= *(_QWORD *)&v2)
          v19 %= *(_QWORD *)&v2;
        if (v19 != v15)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__shared_ptr_emplace<md::GridTileRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GridTileRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::GridTileRenderable>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  a1[15] = 3131955885;
  v2 = a1[12];
  a1[12] = 0;
  a1[13] = &off_1E42B59B0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[9];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[9];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)a1[7];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void ggl::ConstantDataTyped<ggl::GridBase::GridView>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GridBase::GridView>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GridBase::GridView>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC338;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC2F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC2F0;
  a2[1] = v2;
  return result;
}

void md::GridRenderResources::~GridRenderResources(md::GridRenderResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::~MarkedLRUCache((uint64_t *)this + 34);
  *((_QWORD *)this + 19) = &off_1E42B59B0;
  *((_QWORD *)this + 21) = 3131955885;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v13)
    goto LABEL_25;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v16)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v16)
      goto LABEL_31;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_31:
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v19)
    goto LABEL_35;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v22)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v22)
      goto LABEL_41;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_41:
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

uint64_t *geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::~MarkedLRUCache(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  if (a1[2])
  {
    v5 = *a1;
    v6 = (uint64_t *)a1[1];
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    a1[2] = 0;
    if (v6 != a1)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        v10 = (std::__shared_weak_count *)v6[7];
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Grid::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Grid::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E21D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Grid::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E21D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::Grid::GridUVPipelineState *,std::shared_ptr<ggl::Grid::GridUVPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridUVPipelineState,ggl::Grid::GridUVPipelineState>,std::allocator<ggl::Grid::GridUVPipelineState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Grid::GridUVPipelineState *,std::shared_ptr<ggl::Grid::GridUVPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridUVPipelineState,ggl::Grid::GridUVPipelineState>,std::allocator<ggl::Grid::GridUVPipelineState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::Grid::GridPipelineState *,std::shared_ptr<ggl::Grid::GridPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridPipelineState,ggl::Grid::GridPipelineState>,std::allocator<ggl::Grid::GridPipelineState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL VKRectContainsPoint(double *a1, double *a2)
{
  double v3;

  if (*a1 > *a2)
    return 0;
  if (*a2 > a1[1])
    return 0;
  v3 = a2[1];
  return a1[2] <= v3 && v3 <= a1[3];
}

md::PolygonSection *md::PolygonSection::PolygonSection(md::PolygonSection *this, const md::PolygonSection *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;

  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E428FC30;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v5 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = &v8[8 * (v7 >> 3)];
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v8, v6, v9);
    *((_QWORD *)this + 3) = &v8[v9];
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 5);
  v10 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      abort();
    v13 = (char *)operator new(v10 - v11);
    *((_QWORD *)this + 5) = v13;
    *((_QWORD *)this + 6) = v13;
    *((_QWORD *)this + 7) = &v13[8 * (v12 >> 3)];
    v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v13, v11, v14);
    *((_QWORD *)this + 6) = &v13[v14];
  }
  std::vector<BOOL>::vector((_QWORD *)this + 8, (uint64_t)a2 + 64);
  v15 = *((_QWORD *)a2 + 13);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((_QWORD *)this + 13) = v15;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v17 = (_BYTE *)*((_QWORD *)a2 + 14);
  v16 = (_BYTE *)*((_QWORD *)a2 + 15);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      abort();
    v19 = (char *)operator new(v16 - v17);
    *((_QWORD *)this + 14) = v19;
    *((_QWORD *)this + 15) = v19;
    v20 = &v19[4 * (v18 >> 2)];
    *((_QWORD *)this + 16) = v20;
    memcpy(v19, v17, v18);
    *((_QWORD *)this + 15) = v20;
  }
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  return this;
}

void sub_19F47C21C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 24) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      abort();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void md::PolygonSection::~PolygonSection(md::PolygonSection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E428FC30;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E428FC30;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::VenueFloorGroup::VenueFloorGroup(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t *v8;
  unsigned int *FeatureAttributeSet;
  uint64_t v10;
  _QWORD *v11;
  gss::Allocator *v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  gss::Allocator *v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  const md::PolygonSection *v41;
  const md::PolygonSection *v42;
  md::PolygonSection *v43;
  const md::PolygonSection *v44;
  const md::PolygonSection *v45;
  const md::PolygonSection *v46;
  void (**v47)(const md::PolygonSection *);
  BOOL v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  unsigned __int8 v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  std::__shared_count v60;
  unsigned __int8 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  void (***v88)(char *);
  void (**v89)(char *);
  int v90;
  uint64_t v91;
  geo::read_write_lock *v92;
  const char *v93;
  malloc_zone_t *zone;
  int v95;
  uint64_t v96;
  geo::read_write_lock *v97;
  const char *v98;
  malloc_zone_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void (***v112)(uint64_t);
  void (**v113)(uint64_t);
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t *v118;
  __int128 __p;
  char *v121;
  _QWORD v122[3];
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  void (*v126)(uint64_t, uint64_t);
  void *v127;
  uint64_t *v128;
  __int128 *p_p;
  uint64_t v130;
  __int128 v131;
  char *v132;
  __int128 *v133;
  uint64_t v134;

  v8 = (uint64_t *)a1;
  v134 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 60) = a6;
  *(_QWORD *)(a1 + 64) = a5;
  FeatureAttributeSet = md::createFeatureAttributeSet((gss::Allocator *)v122, (uint64_t *)(a4 + 24));
  v10 = *a3;
  v131 = 0uLL;
  v132 = 0;
  v133 = (__int128 *)gss::Allocator::instance((gss::Allocator *)FeatureAttributeSet);
  v118 = v8;
  v11 = (_QWORD *)(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, 8, 4);
  *(_QWORD *)&v131 = v11;
  v132 = (char *)(v11 + 1);
  if (v11)
    *v11 = 65604;
  *((_QWORD *)&v131 + 1) = v11 + 1;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)v122, (unsigned int **)&v131, (uint64_t *)&v125);
  *(_QWORD *)((char *)&__p + 7) = 0;
  *(_QWORD *)&__p = 0;
  HIBYTE(__p) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v124, v10, (gss::FeatureAttributeSet *)&v125, (gss::QueryOverrides *)&__p);
  if (!BYTE14(__p) && (_QWORD)__p)
  {
    v13 = gss::Allocator::instance(v12);
    v12 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, __p, WORD6(__p));
  }
  v14 = v124;
  v124 = 0uLL;
  v15 = (std::__shared_weak_count *)v8[6];
  *(_OWORD *)(v8 + 5) = v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if ((_QWORD)v125)
  {
    *((_QWORD *)&v125 + 1) = v125;
    v12 = (gss::Allocator *)(*(uint64_t (**)(void *, _QWORD, char *))(*(_QWORD *)v127 + 40))(v127, v125, (char *)v126 - v125);
  }
  if ((_QWORD)v131)
  {
    *((_QWORD *)&v131 + 1) = v131;
    v12 = (gss::Allocator *)(*(uint64_t (**)(__int128 *, _QWORD, char *))(*(_QWORD *)v133 + 40))(v133, v131, &v132[-v131]);
  }
  v21 = *a3;
  v131 = 0uLL;
  v132 = 0;
  v133 = (__int128 *)gss::Allocator::instance(v12);
  v22 = (_QWORD *)(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, 8, 4);
  *(_QWORD *)&v131 = v22;
  v132 = (char *)(v22 + 1);
  if (v22)
    *v22 = 0x100010044;
  *((_QWORD *)&v131 + 1) = v22 + 1;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)v122, (unsigned int **)&v131, (uint64_t *)&v125);
  *(_QWORD *)((char *)&__p + 7) = 0;
  *(_QWORD *)&__p = 0;
  HIBYTE(__p) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v124, v21, (gss::FeatureAttributeSet *)&v125, (gss::QueryOverrides *)&__p);
  if (!BYTE14(__p) && (_QWORD)__p)
  {
    v24 = gss::Allocator::instance(v23);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, __p, WORD6(__p));
  }
  v25 = v124;
  v124 = 0uLL;
  v26 = (std::__shared_weak_count *)v8[4];
  *(_OWORD *)(v8 + 3) = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if ((_QWORD)v125)
  {
    *((_QWORD *)&v125 + 1) = v125;
    (*(void (**)(void *, _QWORD, char *))(*(_QWORD *)v127 + 40))(v127, v125, (char *)v126 - v125);
  }
  v115 = a2;
  if ((_QWORD)v131)
  {
    *((_QWORD *)&v131 + 1) = v131;
    (*(void (**)(__int128 *, _QWORD, char *))(*(_QWORD *)v133 + 40))(v133, v131, &v132[-v131]);
  }
  v32 = *(unsigned int *)(a4 + 100);
  v121 = 0;
  __p = 0uLL;
  if (!(_DWORD)v32)
    goto LABEL_127;
  v33 = (char *)operator new(144 * v32);
  v34 = 0;
  *(_QWORD *)&__p = v33;
  *((_QWORD *)&__p + 1) = v33;
  v121 = &v33[144 * v32];
  do
  {
    if (v33 >= v121)
    {
      v35 = 0x8E38E38E38E38E39 * ((uint64_t)&v33[-__p] >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x1C71C71C71C71C7)
        abort();
      if (0x1C71C71C71C71C72 * ((uint64_t)&v121[-__p] >> 4) > v36)
        v36 = 0x1C71C71C71C71C72 * ((uint64_t)&v121[-__p] >> 4);
      if (0x8E38E38E38E38E39 * ((uint64_t)&v121[-__p] >> 4) >= 0xE38E38E38E38E3)
        v37 = 0x1C71C71C71C71C7;
      else
        v37 = v36;
      if (v37)
      {
        if (v37 > 0x1C71C71C71C71C7)
LABEL_154:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v38 = (char *)operator new(144 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = (uint64_t)&v38[144 * v35];
      md::PolygonSection::PolygonSection(v39, (_QWORD *)a4, v34);
      v40 = &v38[144 * v37];
      v33 = (char *)(v39 + 144);
      v42 = (const md::PolygonSection *)*((_QWORD *)&__p + 1);
      v41 = (const md::PolygonSection *)__p;
      if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      {
        *(_QWORD *)&__p = v39;
        v121 = v40;
        if (!*((_QWORD *)&__p + 1))
          goto LABEL_41;
      }
      else
      {
        v43 = (md::PolygonSection *)v39;
        do
        {
          v42 = (const md::PolygonSection *)((char *)v42 - 144);
          v43 = md::PolygonSection::PolygonSection((md::PolygonSection *)((char *)v43 - 144), v42);
        }
        while (v42 != v41);
        v44 = (const md::PolygonSection *)*((_QWORD *)&__p + 1);
        v42 = (const md::PolygonSection *)__p;
        *(_QWORD *)&__p = v43;
        *((_QWORD *)&__p + 1) = v39 + 144;
        v121 = v40;
        if (v44 == v42)
        {
          if (!v42)
          {
LABEL_41:
            v8 = v118;
            goto LABEL_42;
          }
        }
        else
        {
          v45 = (const md::PolygonSection *)((char *)v44 - 144);
          v46 = (const md::PolygonSection *)((char *)v44 - 144);
          do
          {
            v47 = *(void (***)(const md::PolygonSection *))v46;
            v46 = (const md::PolygonSection *)((char *)v46 - 144);
            (*v47)(v45);
            v48 = v45 == v42;
            v45 = v46;
          }
          while (!v48);
          if (!v42)
            goto LABEL_41;
        }
      }
      operator delete(v42);
      goto LABEL_41;
    }
    md::PolygonSection::PolygonSection((uint64_t)v33, (_QWORD *)a4, v34);
    v33 += 144;
LABEL_42:
    *((_QWORD *)&__p + 1) = v33;
    ++v34;
  }
  while (v34 != v32);
  v49 = (char *)__p;
  if ((char *)__p == v33)
  {
LABEL_127:
    *((_DWORD *)v8 + 14) = 0;
    goto LABEL_128;
  }
  v50 = 0;
  v51 = __p;
  do
  {
    v50 |= ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(v51 + 88), *(float **)(v51 + 8), 1);
    v51 += 144;
  }
  while ((char *)v51 != v33);
  for (*((_DWORD *)v8 + 14) = v50; v49 != v33; v49 += 144)
  {
    v53 = *((_QWORD *)v49 + 11);
    v54 = operator new(0xF8uLL);
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = &off_1E42B5748;
    *v54 = &off_1E42DFAE0;
    v54[4] = 8;
    *((_DWORD *)v54 + 10) = 1;
    v54[6] = 0;
    v54[7] = 0;
    v54[8] = 0;
    v54[9] = 8 * v53;
    v55 = 0uLL;
    *((_OWORD *)v54 + 5) = 0u;
    *((_OWORD *)v54 + 6) = 0u;
    v54[14] = 0;
    if ((v56 & 1) == 0)
    {
      v55 = 0uLL;
      if (v90)
      {
        v91 = operator new();
        *(_QWORD *)(v91 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v91 + 24) = "GeoGL";
        *(_OWORD *)(v91 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v91 = &off_1E42B5668;
        *(_QWORD *)(v91 + 8) = "GeoGL";
        *(_OWORD *)(v91 + 72) = 0u;
        *(_OWORD *)(v91 + 88) = 0u;
        *(_OWORD *)(v91 + 104) = 0u;
        *(_OWORD *)(v91 + 120) = 0u;
        *(_OWORD *)(v91 + 136) = 0u;
        *(_OWORD *)(v91 + 152) = 0u;
        *(_OWORD *)(v91 + 168) = 0u;
        *(_OWORD *)(v91 + 184) = 0u;
        *(_OWORD *)(v91 + 200) = 0u;
        *(_OWORD *)(v91 + 216) = 0u;
        *(_OWORD *)(v91 + 232) = 0u;
        *(_QWORD *)(v91 + 248) = 0;
        *(_OWORD *)(v91 + 56) = 0u;
        v92 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v91 + 56), 0);
        if ((_DWORD)v92)
          geo::read_write_lock::logFailure(v92, (uint64_t)"initialization", v93);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v91 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v91 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v91;
        v8 = v118;
        v55 = 0uLL;
      }
    }
    v54[15] = ggl::Allocator::instance(void)::alloc;
    v54[16] = 0;
    *((_OWORD *)v54 + 11) = v55;
    *((_OWORD *)v54 + 12) = v55;
    v54[26] = 0;
    v54[27] = -1;
    *((_OWORD *)v54 + 10) = v55;
    *((_OWORD *)v54 + 9) = xmmword_19FFB2DD0;
    *((_DWORD *)v54 + 34) = 0;
    v54[3] = &off_1E42B7720;
    v54[29] = "Venue footprint vertex data";
    v54[30] = &ggl::PolygonBase::compressedVboReflection;
    v54[28] = &unk_1E42B7740;
    *(_QWORD *)&v57 = v54 + 3;
    *((_QWORD *)&v57 + 1) = v54;
    v117 = v57;
    v58 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v58->__shared_owners_ = 0;
    v59 = (unint64_t *)&v58->__shared_owners_;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    v58[1].__shared_owners_ = 2;
    LODWORD(v58[1].__shared_weak_owners_) = 257;
    v58[2].__vftable = 0;
    v58[2].__shared_owners_ = 0;
    v58[2].__shared_weak_owners_ = 0;
    v58[3].__vftable = (std::__shared_weak_count_vtbl *)(6 * v53 - 12);
    v60 = (std::__shared_count)0;
    *(_OWORD *)&v58[3].__shared_owners_ = 0u;
    v58[4].std::__shared_count = 0u;
    v58[4].__shared_weak_owners_ = 0;
    if ((v61 & 1) == 0)
    {
      v60 = (std::__shared_count)0;
      if (v95)
      {
        v96 = operator new();
        *(_QWORD *)(v96 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v96 + 24) = "GeoGL";
        *(_OWORD *)(v96 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v96 = &off_1E42B5668;
        *(_QWORD *)(v96 + 8) = "GeoGL";
        *(_OWORD *)(v96 + 72) = 0u;
        *(_OWORD *)(v96 + 88) = 0u;
        *(_OWORD *)(v96 + 104) = 0u;
        *(_OWORD *)(v96 + 120) = 0u;
        *(_OWORD *)(v96 + 136) = 0u;
        *(_OWORD *)(v96 + 152) = 0u;
        *(_OWORD *)(v96 + 168) = 0u;
        *(_OWORD *)(v96 + 184) = 0u;
        *(_OWORD *)(v96 + 200) = 0u;
        *(_OWORD *)(v96 + 216) = 0u;
        *(_OWORD *)(v96 + 232) = 0u;
        *(_QWORD *)(v96 + 248) = 0;
        *(_OWORD *)(v96 + 56) = 0u;
        v97 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v96 + 56), 0);
        if ((_DWORD)v97)
          geo::read_write_lock::logFailure(v97, (uint64_t)"initialization", v98);
        v99 = malloc_create_zone(0, 0);
        *(_QWORD *)(v96 + 48) = v99;
        malloc_set_zone_name(v99, "GeoGL");
        *(_QWORD *)(v96 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v96;
        v8 = v118;
        v60 = (std::__shared_count)0;
      }
    }
    v58[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
    v58[5].__shared_owners_ = 0;
    *((std::__shared_count *)v58 + 11) = v60;
    v58[8].std::__shared_count = v60;
    v58[8].__shared_weak_owners_ = 0;
    v58[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
    *((std::__shared_count *)v58 + 10) = v60;
    v58[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
    LODWORD(v58[5].__shared_weak_owners_) = 0;
    LODWORD(v58[10].__vftable) = 0;
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v58[1].__shared_owners_ = 2;
    v58[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v58[9].__shared_weak_owners_ = (uint64_t)"Venue footprint index data";
    *(_QWORD *)&v62 = v58 + 1;
    *((_QWORD *)&v62 + 1) = v58;
    v64 = v8[1];
    v63 = v8[2];
    if (v64 < v63)
    {
      v125 = v117;
      v131 = v62;
      ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh(v64, (uint64_t)"Venue footprint mesh", (uint64_t *)&v125, (uint64_t *)&v131);
      do
        v65 = __ldaxr(v59);
      while (__stlxr(v65 - 1, v59));
      if (v65)
      {
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
        if (!*((_QWORD *)&v125 + 1))
          goto LABEL_73;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
        if (!*((_QWORD *)&v125 + 1))
        {
LABEL_73:
          v52 = v64 + 144;
          v8[1] = v64 + 144;
          goto LABEL_74;
        }
      }
      v72 = (unint64_t *)&v66->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      goto LABEL_73;
    }
    v116 = v62;
    v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *v8) >> 4);
    v68 = v67 + 1;
    if (v67 + 1 > 0x1C71C71C71C71C7)
      abort();
    v69 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *v8) >> 4);
    if (2 * v69 > v68)
      v68 = 2 * v69;
    if (v69 >= 0xE38E38E38E38E3)
      v70 = 0x1C71C71C71C71C7;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 > 0x1C71C71C71C71C7)
        goto LABEL_154;
      v71 = (char *)operator new(144 * v70);
    }
    else
    {
      v71 = 0;
    }
    v74 = (uint64_t)&v71[144 * v67];
    v125 = v117;
    v131 = v116;
    ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh(v74, (uint64_t)"Venue footprint mesh", (uint64_t *)&v125, (uint64_t *)&v131);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
    if (!*((_QWORD *)&v131 + 1))
      goto LABEL_102;
    v76 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
      if (*((_QWORD *)&v125 + 1))
      {
LABEL_103:
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
    }
    else
    {
LABEL_102:
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
      if (*((_QWORD *)&v125 + 1))
        goto LABEL_103;
    }
    v81 = &v71[144 * v70];
    v52 = v74 + 144;
    v82 = (char *)*v118;
    v83 = (char *)v118[1];
    if (v83 != (char *)*v118)
    {
      v84 = (uint64_t)&v71[144 * v67 - 144];
      do
      {
        v83 -= 144;
        v85 = (_QWORD *)ggl::Mesh::Mesh(v84, (uint64_t)v83);
        *v85 = &off_1E42B5CC8;
        v85[2] = &unk_1E42B5CE8;
        v84 = (uint64_t)(v85 - 18);
      }
      while (v83 != v82);
      v83 = (char *)*v118;
      v86 = (char *)v118[1];
      *v118 = (uint64_t)v85;
      v118[1] = v52;
      v118[2] = (uint64_t)v81;
      v8 = v118;
      if (v86 != v83)
      {
        v87 = v86 - 144;
        v88 = (void (***)(char *))(v86 - 144);
        do
        {
          v89 = *v88;
          v88 -= 18;
          (*v89)(v87);
          v48 = v87 == v83;
          v87 = (char *)v88;
        }
        while (!v48);
      }
      if (!v83)
        goto LABEL_74;
LABEL_118:
      operator delete(v83);
      goto LABEL_74;
    }
    *v118 = v74;
    v118[1] = v52;
    v118[2] = (uint64_t)v81;
    v8 = v118;
    if (v83)
      goto LABEL_118;
LABEL_74:
    v8[1] = v52;
  }
LABEL_128:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v115 + 24))(&v130);
  *(_QWORD *)&v125 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v125 + 1) = 3221225472;
  v126 = ___ZN2md24VenueFloorMeshGeneration19_writeFootprintDataEPN3ggl6DeviceERKNSt3__16vectorINS_14PolygonSectionENS4_9allocatorIS6_EEEERNS5_INS1_11PolygonBase18CompressedMeshMeshENS7_ISD_EEEE_block_invoke;
  v127 = &__block_descriptor_48_e30_v16__0__ResourceAccessor_____8l;
  v128 = v8;
  p_p = &__p;
  *(_QWORD *)&v131 = &off_1E42C7118;
  *((_QWORD *)&v131 + 1) = MEMORY[0x1A1AF5730](&v125);
  v133 = &v131;
  v124 = 0uLL;
  (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v130 + 16))(v130, &v131, &v124);
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v133;
  if (v133 == &v131)
  {
    v104 = 4;
    v103 = &v131;
LABEL_137:
    (*(void (**)(void))(*(_QWORD *)v103 + 8 * v104))();
  }
  else if (v133)
  {
    v104 = 5;
    goto LABEL_137;
  }
  if (v130)
  {
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130);
    v106 = v130;
    v130 = 0;
    *(_QWORD *)&v131 = v106;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v105 + 48))(v105, &v131);
    v107 = v131;
    *(_QWORD *)&v131 = 0;
    if (v107)
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
    v108 = v130;
    v130 = 0;
    if (v108)
      (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  }
  v109 = __p;
  if ((_QWORD)__p)
  {
    v110 = (void *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      v111 = *((_QWORD *)&__p + 1) - 144;
      v112 = (void (***)(uint64_t))(*((_QWORD *)&__p + 1) - 144);
      do
      {
        v113 = *v112;
        v112 -= 18;
        (*v113)(v111);
        v48 = v111 == v109;
        v111 = (uint64_t)v112;
      }
      while (!v48);
      v110 = (void *)__p;
    }
    *((_QWORD *)&__p + 1) = v109;
    operator delete(v110);
  }
  if (v122[0])
  {
    v122[1] = v122[0];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v123 + 40))(v123, v122[0], v122[2] - v122[0]);
  }
  return v8;
}

void sub_19F47D264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (***__p)(void *),void (***a25)(void *),uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void **v36;
  void (***v38)(void *);
  uint64_t v39;
  std::__shared_weak_count *v40;
  void (***v41)(void *);
  void (***v42)(void *);
  void (**v43)(void *);
  BOOL v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  void (**v55)(char *);

  v38 = __p;
  if (__p)
  {
    if (a25 != __p)
    {
      v41 = a25 - 18;
      v42 = a25 - 18;
      do
      {
        v43 = *v42;
        v42 -= 18;
        (*v43)(v41);
        v44 = v41 == __p;
        v41 = v42;
      }
      while (!v44);
      v38 = __p;
    }
    operator delete(v38);
    v39 = a27;
    if (!a27)
    {
LABEL_3:
      v40 = (std::__shared_weak_count *)v36[6];
      if (!v40)
        goto LABEL_16;
LABEL_12:
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
LABEL_16:
      v47 = (std::__shared_weak_count *)v36[4];
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (char *)*v36;
      if (*v36)
      {
        v51 = (char *)v36[1];
        v52 = *v36;
        if (v51 != v50)
        {
          v53 = v51 - 144;
          v54 = v51 - 144;
          do
          {
            v55 = *(void (***)(char *))v54;
            v54 -= 144;
            (*v55)(v53);
            v44 = v53 == v50;
            v53 = v54;
          }
          while (!v44);
          v52 = *v36;
        }
        v36[1] = v50;
        operator delete(v52);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v39 = a27;
    if (!a27)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a30 + 40))(a30, v39, a29 - v39);
  v40 = (std::__shared_weak_count *)v36[6];
  if (!v40)
    goto LABEL_16;
  goto LABEL_12;
}

void md::InjectedFeaturesDataRequester::~InjectedFeaturesDataRequester(md::InjectedFeaturesDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__introsort<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t j;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t k;
  unsigned int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  __int128 v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  char v57;
  _DWORD *v58;
  _DWORD *v59;
  BOOL v60;
  __int16 v61;
  uint64_t v62;
  __int128 v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  __int128 v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  unsigned int v89;
  int v90;
  BOOL v91;
  int64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  BOOL v101;
  _BOOL4 v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  BOOL v117;
  _BOOL4 v118;
  unsigned int v119;
  BOOL v120;
  int v121;
  BOOL v122;
  int64_t v123;
  uint64_t v124;
  char v125;
  int v126;
  int v127;
  unint64_t v128;
  char v129;
  _BOOL4 v130;
  unint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int v139;
  BOOL v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  char v148;
  uint64_t v149;
  unint64_t v150;
  __int128 v151;
  unsigned int v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned int v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  char v165;
  uint64_t v166;
  __int128 v167;
  __int16 v168;
  uint64_t v169;
  int v170;

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(char *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  unsigned int v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;

  v3 = *((unsigned __int8 *)a2 + 1);
  v4 = a1[1];
  if (v3 == v4)
  {
    v5 = *((_DWORD *)a2 + 1);
    v6 = *((_DWORD *)a1 + 1);
    v7 = v5 < v6;
    if (v5 == v6)
      v7 = *((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2);
    v8 = v7;
  }
  else
  {
    v8 = v3 < v4;
  }
  v9 = *((unsigned __int8 *)a3 + 1);
  if (v9 == v3)
  {
    v10 = *((_DWORD *)a3 + 1);
    v11 = *((_DWORD *)a2 + 1);
    v12 = v10 < v11;
    if (v10 == v11)
      v12 = *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2);
    v13 = v12;
    if (!v8)
      goto LABEL_15;
LABEL_21:
    v22 = *((_DWORD *)a1 + 1);
    v21 = *((_DWORD *)a1 + 2);
    v23 = *a1;
    if (!v13)
    {
      v15 = *a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v15;
      *(_BYTE *)a2 = v23;
      *((_BYTE *)a2 + 1) = v4;
      *((_DWORD *)a2 + 1) = v22;
      *((_DWORD *)a2 + 2) = v21;
      v24 = *((unsigned __int8 *)a3 + 1);
      if (v24 == v4)
      {
        v25 = *((_DWORD *)a3 + 1);
        if (v25 == v22)
        {
          if (*((_DWORD *)a3 + 2) >= v21)
            return *(double *)&v15;
        }
        else if (v25 >= v22)
        {
          return *(double *)&v15;
        }
      }
      else if (v24 >= v4)
      {
        return *(double *)&v15;
      }
      *(_QWORD *)&v15 = *(_QWORD *)((char *)a2 + 4);
      v28 = *a3;
      *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
      *a2 = v28;
      *(_BYTE *)a3 = v23;
      *((_BYTE *)a3 + 1) = v4;
      *(_QWORD *)((char *)a3 + 4) = v15;
      return *(double *)&v15;
    }
    v15 = *a3;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)a1 = v15;
    *(_BYTE *)a3 = v23;
    *((_BYTE *)a3 + 1) = v4;
    *((_DWORD *)a3 + 1) = v22;
    *((_DWORD *)a3 + 2) = v21;
    return *(double *)&v15;
  }
  v13 = v9 < v3;
  if (v8)
    goto LABEL_21;
LABEL_15:
  if (!v13)
    return *(double *)&v15;
  v14 = *(_BYTE *)a2;
  *(_QWORD *)&v15 = *(_QWORD *)((char *)a2 + 4);
  v16 = *a3;
  *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
  *a2 = v16;
  *(_BYTE *)a3 = v14;
  *((_BYTE *)a3 + 1) = v3;
  *(_QWORD *)((char *)a3 + 4) = v15;
  v17 = *((unsigned __int8 *)a2 + 1);
  v18 = a1[1];
  if (v17 != v18)
  {
    if (v17 >= v18)
      return *(double *)&v15;
    goto LABEL_32;
  }
  v19 = *((_DWORD *)a2 + 1);
  v20 = *((_DWORD *)a1 + 1);
  if (v19 == v20)
  {
    if (*((_DWORD *)a2 + 2) >= *((_DWORD *)a1 + 2))
      return *(double *)&v15;
    goto LABEL_32;
  }
  if (v19 < v20)
  {
LABEL_32:
    v26 = *a1;
    *(_QWORD *)&v15 = *(_QWORD *)(a1 + 4);
    v27 = *a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v27;
    *(_BYTE *)a2 = v26;
    *((_BYTE *)a2 + 1) = v18;
    *(_QWORD *)((char *)a2 + 4) = v15;
  }
  return *(double *)&v15;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(uint64_t a1, char *a2, char *a3, __int128 *a4)
{
  double result;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  char v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  char v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  __int128 v26;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *((unsigned __int8 *)a4 + 1);
  v10 = a3[1];
  if (v9 == v10)
  {
    v11 = *((_DWORD *)a4 + 1);
    v12 = *((_DWORD *)a3 + 1);
    if (v11 == v12)
    {
      if (*((_DWORD *)a4 + 2) >= *((_DWORD *)a3 + 2))
        return result;
    }
    else if (v11 >= v12)
    {
      return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v13 = *a3;
  result = *(double *)(a3 + 4);
  v14 = *a4;
  *((_QWORD *)a3 + 2) = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = v14;
  *(_BYTE *)a4 = v13;
  *((_BYTE *)a4 + 1) = v10;
  *(double *)((char *)a4 + 4) = result;
  v15 = a3[1];
  v16 = a2[1];
  if (v15 == v16)
  {
    v17 = *((_DWORD *)a3 + 1);
    v18 = *((_DWORD *)a2 + 1);
    if (v17 == v18)
    {
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2))
        return result;
    }
    else if (v17 >= v18)
    {
      return result;
    }
  }
  else if (v15 >= v16)
  {
    return result;
  }
  v19 = *a2;
  result = *(double *)(a2 + 4);
  v20 = *(_OWORD *)a3;
  *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v20;
  *a3 = v19;
  a3[1] = v16;
  *(double *)(a3 + 4) = result;
  v21 = a2[1];
  v22 = *(unsigned __int8 *)(a1 + 1);
  if (v21 == v22)
  {
    v23 = *((_DWORD *)a2 + 1);
    v24 = *(_DWORD *)(a1 + 4);
    if (v23 == v24)
    {
      if (*((_DWORD *)a2 + 2) >= *(_DWORD *)(a1 + 8))
        return result;
    }
    else if (v23 >= v24)
    {
      return result;
    }
  }
  else if (v21 >= v22)
  {
    return result;
  }
  v25 = *(_BYTE *)a1;
  result = *(double *)(a1 + 4);
  v26 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v26;
  *a2 = v25;
  a2[1] = v22;
  *(double *)(a2 + 4) = result;
  return result;
}

double std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(uint64_t a1, __int128 *a2, __int128 *a3, char *a4, __int128 *a5)
{
  double result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  char v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  char v27;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  char v33;
  __int128 v34;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, (char *)a2, (char *)a3, (__int128 *)a4);
  v11 = *((unsigned __int8 *)a5 + 1);
  v12 = a4[1];
  if (v11 == v12)
  {
    v13 = *((_DWORD *)a5 + 1);
    v14 = *((_DWORD *)a4 + 1);
    if (v13 == v14)
    {
      if (*((_DWORD *)a5 + 2) >= *((_DWORD *)a4 + 2))
        return result;
    }
    else if (v13 >= v14)
    {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  v15 = *a4;
  result = *(double *)(a4 + 4);
  v16 = *a5;
  *((_QWORD *)a4 + 2) = *((_QWORD *)a5 + 2);
  *(_OWORD *)a4 = v16;
  *(_BYTE *)a5 = v15;
  *((_BYTE *)a5 + 1) = v12;
  *(double *)((char *)a5 + 4) = result;
  v17 = a4[1];
  v18 = *((unsigned __int8 *)a3 + 1);
  if (v17 == v18)
  {
    v19 = *((_DWORD *)a4 + 1);
    v20 = *((_DWORD *)a3 + 1);
    if (v19 == v20)
    {
      if (*((_DWORD *)a4 + 2) >= *((_DWORD *)a3 + 2))
        return result;
    }
    else if (v19 >= v20)
    {
      return result;
    }
  }
  else if (v17 >= v18)
  {
    return result;
  }
  v21 = *(_BYTE *)a3;
  result = *(double *)((char *)a3 + 4);
  v22 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = *((_QWORD *)a4 + 2);
  *a3 = v22;
  *a4 = v21;
  a4[1] = v18;
  *(double *)(a4 + 4) = result;
  v23 = *((unsigned __int8 *)a3 + 1);
  v24 = *((unsigned __int8 *)a2 + 1);
  if (v23 == v24)
  {
    v25 = *((_DWORD *)a3 + 1);
    v26 = *((_DWORD *)a2 + 1);
    if (v25 == v26)
    {
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2))
        return result;
    }
    else if (v25 >= v26)
    {
      return result;
    }
  }
  else if (v23 >= v24)
  {
    return result;
  }
  v27 = *(_BYTE *)a2;
  result = *(double *)((char *)a2 + 4);
  v28 = *a3;
  *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
  *a2 = v28;
  *(_BYTE *)a3 = v27;
  *((_BYTE *)a3 + 1) = v24;
  *(double *)((char *)a3 + 4) = result;
  v29 = *((unsigned __int8 *)a2 + 1);
  v30 = *(unsigned __int8 *)(a1 + 1);
  if (v29 == v30)
  {
    v31 = *((_DWORD *)a2 + 1);
    v32 = *(_DWORD *)(a1 + 4);
    if (v31 == v32)
    {
      if (*((_DWORD *)a2 + 2) >= *(_DWORD *)(a1 + 8))
        return result;
    }
    else if (v31 >= v32)
    {
      return result;
    }
  }
  else if (v29 >= v30)
  {
    return result;
  }
  v33 = *(_BYTE *)a1;
  result = *(double *)(a1 + 4);
  v34 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v34;
  *(_BYTE *)a2 = v33;
  *((_BYTE *)a2 + 1) = v30;
  *(double *)((char *)a2 + 4) = result;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int16 v29;
  uint64_t v30;
  int v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(unsigned __int8 *)(a2 - 23);
      v7 = *(unsigned __int8 *)(a1 + 1);
      if (v6 == v7)
      {
        v8 = *(_DWORD *)(a2 - 20);
        v9 = *(_DWORD *)(a1 + 4);
        if (v8 == v9)
        {
          if (*(_DWORD *)(a2 - 16) >= *(_DWORD *)(a1 + 8))
            return result;
        }
        else if (v8 >= v9)
        {
          return result;
        }
      }
      else if (v6 >= v7)
      {
        return result;
      }
      v26 = *(_BYTE *)a1;
      v27 = *(_QWORD *)(a1 + 4);
      v28 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)a1 = v28;
      *(_BYTE *)(a2 - 24) = v26;
      *(_BYTE *)(a2 - 23) = v7;
      *(_QWORD *)(a2 - 20) = v27;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, (char *)(a1 + 24), (char *)(a1 + 48), (__int128 *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (char *)(a1 + 72), (__int128 *)(a2 - 24));
      return 1;
    default:
      v10 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (2)
  {
    v15 = *(unsigned __int8 *)(v11 + 1);
    v16 = *(unsigned __int8 *)(v10 + 1);
    if (v15 == v16)
    {
      v17 = *(_DWORD *)(v11 + 4);
      v18 = *(_DWORD *)(v10 + 4);
      if (v17 == v18)
      {
        if (*(_DWORD *)(v11 + 8) >= *(_DWORD *)(v10 + 8))
          goto LABEL_10;
      }
      else if (v17 >= v18)
      {
        goto LABEL_10;
      }
    }
    else if (v15 >= v16)
    {
      goto LABEL_10;
    }
    v19 = *(_BYTE *)v11;
    v20 = *(_QWORD *)(v11 + 4);
    for (i = v12; ; i -= 24)
    {
      v22 = a1 + i;
      *(_OWORD *)(v22 + 72) = *(_OWORD *)(a1 + i + 48);
      *(_QWORD *)(v22 + 88) = *(_QWORD *)(a1 + i + 64);
      if (i == -48)
      {
        v14 = a1;
        goto LABEL_9;
      }
      v23 = *(unsigned __int8 *)(v22 + 25);
      if (v15 == v23)
        break;
      if (v15 >= v23)
        goto LABEL_27;
LABEL_21:
      ;
    }
    v24 = *(_DWORD *)(a1 + i + 28);
    v25 = (int)v20 < v24;
    if ((_DWORD)v20 == v24)
      v25 = SHIDWORD(v20) < *(_DWORD *)(a1 + i + 32);
    if (v25)
      goto LABEL_21;
LABEL_27:
    v14 = a1 + i + 48;
LABEL_9:
    *(_BYTE *)v14 = v19;
    *(_BYTE *)(v14 + 1) = v15;
    *(_WORD *)(v14 + 2) = v29;
    *(_QWORD *)(v14 + 4) = v20;
    *(_QWORD *)(v14 + 12) = v30;
    *(_DWORD *)(v14 + 20) = v31;
    if (++v13 == 8)
      return v11 + 24 == a2;
LABEL_10:
    v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 != a2)
      continue;
    return 1;
  }
}

void md::realistic::RouteRenderLayer::~RouteRenderLayer(md::realistic::RouteRenderLayer *this)
{
  md::realistic::RouteRenderLayer::~RouteRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;

  *(_QWORD *)this = &off_1E42AFFB8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 17);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 19);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 18);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v8 = *((_QWORD *)this + 37);
  if (v8)
  {
    v9 = *((_QWORD *)this + 38);
    v10 = (void *)*((_QWORD *)this + 37);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 37);
    }
    *((_QWORD *)this + 38) = v8;
    operator delete(v10);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v14)
    goto LABEL_28;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v17)
      goto LABEL_34;
  }
  else
  {
LABEL_28:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v17)
      goto LABEL_34;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_34:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v20)
    goto LABEL_38;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v23)
      goto LABEL_44;
  }
  else
  {
LABEL_38:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v23)
      goto LABEL_44;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_44:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v26)
    goto LABEL_48;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v29)
      goto LABEL_54;
  }
  else
  {
LABEL_48:
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v29)
      goto LABEL_54;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_54:
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (uint64_t *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v35)
  {
    v36 = (std::__shared_weak_count *)v35[3];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v35[1];
    v35[1] = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = *v35;
    *v35 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    MEMORY[0x1A1AF4E00](v35, 0x20C40DC1BFBCFLL);
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v41)
    goto LABEL_74;
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v44 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v44)
      goto LABEL_80;
  }
  else
  {
LABEL_74:
    v44 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v44)
      goto LABEL_80;
  }
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_80:
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v47)
    goto LABEL_84;
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v50)
      goto LABEL_90;
  }
  else
  {
LABEL_84:
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v50)
      goto LABEL_90;
  }
  v51 = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_90:
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v56 = (void *)*((_QWORD *)this + 1);
  if (v56)
  {
    *((_QWORD *)this + 2) = v56;
    operator delete(v56);
  }
}

void md::realistic::RouteRenderLayer::layout(md::realistic::RouteRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  float32x4_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  __n128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  void (***v76)(void);
  void (**v77)(void);
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char **v86;
  char **v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char **v117;
  char **v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  __int128 *v143;
  uint64_t v144;
  uint64_t (***v145)();
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __int128 *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  void (***v167)(void);
  void (**v168)(void);
  uint64_t v169;
  uint64_t v170;
  _BOOL4 v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  char **v176;
  char **v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char **v193;
  char **v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char *v206;
  __int128 *v207;
  uint64_t v208;
  ggl::RenderItem **v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  uint64_t v212;
  __int128 v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  __int128 v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  int64x2_t *v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  md::realistic::RouteRenderLayer *v257;
  __int128 v258;
  _QWORD *v259;
  int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  __int128 v267;
  _QWORD *v268;
  int v269;
  int v270;
  unint64_t v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  ggl::CommandBuffer *v280;
  uint64_t v281;
  uint64_t v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD v291[2];
  std::__shared_weak_count *v292;
  _QWORD *v293;
  std::__shared_weak_count *v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  uint64_t (**v297)();
  std::__shared_weak_count *v298;
  uint64_t *v299;
  _QWORD *v300;
  std::__shared_weak_count *v301;
  uint64_t *v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int16 v311;
  std::__shared_weak_count_vtbl *v312;
  uint64_t v313;

  v313 = *MEMORY[0x1E0C80C00];
  v283 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  v291[0] = *(_QWORD *)(*((_QWORD *)a2 + 92) + 8);
  v3 = v291[0];
  v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v3 + 376)), *(float64x2_t *)(v3 + 392));
  v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v3 + 408)), *(float64x2_t *)(v3 + 424));
  v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v3 + 440)), *(float64x2_t *)(v3 + 456));
  v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v291[0] + 472)), *(float64x2_t *)(v291[0] + 488));
  v8 = (_QWORD *)*((_QWORD *)this + 23);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = v8[1];
  v13 = (float32x4_t *)v8[9];
  *v13 = v4;
  v13[1] = v5;
  v13[2] = v6;
  v13[3] = v7;
  if (v8[8] > v12)
    v12 = v8[8];
  v8[7] = 0;
  v8[8] = v12;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = *((_QWORD *)this + 37);
  v17 = *((_QWORD *)this + 38);
  if (v16 == v17)
    return;
  v18 = *(unsigned __int8 **)(*((_QWORD *)this + 5) + 144);
  v19 = v18[8];
  if (v19 >= v18[9])
  {
    LOBYTE(v19) = 1;
    v18[8] = 1;
    v18[9] = v18[10];
  }
  v18[8] = v19 + 1;
  *(_BYTE *)(v291[0] + 1289) = v19;
  do
  {
    v20 = *(std::__shared_weak_count **)(v16 + 8);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      *(_BYTE *)(*(_QWORD *)(v16 + 16) + 28) = 1;
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(v16 + 16) + 28) = 1;
    }
    v16 += 24;
  }
  while (v16 != v17);
  if (*((_BYTE *)this + 330))
  {
    LOBYTE(v24) = 1;
  }
  else
  {
    v26 = *((_QWORD *)this + 37);
    v25 = *((_QWORD *)this + 38);
    if (v25 == v26)
    {
      LOBYTE(v27) = 0;
      goto LABEL_31;
    }
    v24 = 86 * ((v25 - v26) >> 3);
  }
  v27 = v18[8];
  if (v27 + v24 > v18[9])
  {
    LOBYTE(v27) = 1;
    v18[8] = 1;
    v18[9] = v18[10];
  }
  v18[8] = v27 + v24;
LABEL_31:
  *(_BYTE *)(v291[0] + 1288) = v27;
  *(_BYTE *)(*((_QWORD *)this + 15) + 55) = v27;
  *(_BYTE *)(*((_QWORD *)this + 17) + 55) = v27;
  *(_BYTE *)(*((_QWORD *)this + 19) + 55) = v27;
  v28 = *((_QWORD *)a2 + 92);
  v29 = operator new(0x20uLL);
  *v29 = &off_1E42D55C0;
  v29[1] = this;
  v29[2] = v291;
  v29[3] = a2;
  *((_QWORD *)&v304 + 1) = v29;
  v309 = 0uLL;
  (*(void (**)(_QWORD, __int128 *, __int128 *))(**(_QWORD **)(v28 + 32) + 16))(*(_QWORD *)(v28 + 32), &v303, &v309);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
  if (*((_QWORD *)&v309 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (__int128 *)*((_QWORD *)&v304 + 1);
  if (*((__int128 **)&v304 + 1) == &v303)
  {
    v35 = 4;
    v34 = &v303;
    goto LABEL_40;
  }
  if (*((_QWORD *)&v304 + 1))
  {
    v35 = 5;
LABEL_40:
    (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  }
  v36 = *(_QWORD **)(v283 + 8);
  v37 = v36[3];
  v38 = v36[4];
  v39 = v38 - v37;
  if (v38 == v37)
    goto LABEL_48;
  v40 = 0;
  v41 = v39 >> 3;
  while (1)
  {
    v42 = *(unsigned __int8 **)(v37 + 8 * v40);
    if (*v42 == *((unsigned __int8 *)this + 328))
    {
      v43 = *((_QWORD *)v42 + 1);
      v44 = v36[15];
      if (v43 < (v36[16] - v44) >> 3)
        break;
    }
    if (++v40 >= v41)
      goto LABEL_48;
  }
  v45 = *(_QWORD *)(v44 + 8 * v43);
  if (!v45)
LABEL_48:
    v280 = 0;
  else
    v280 = *(ggl::CommandBuffer **)(*(_QWORD *)(v45 + 24) + 8 * *((unsigned __int8 *)this + 329));
  v46 = *((_QWORD *)this + 37);
  v281 = *((_QWORD *)this + 38);
  if (v46 == v281)
    goto LABEL_240;
  while (2)
  {
    v49 = *(_QWORD **)(v283 + 8);
    v51 = v49[3];
    v50 = v49[4];
    v52 = v50 - v51;
    if (v50 == v51)
      goto LABEL_62;
    v53 = 0;
    v54 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 120) + 8);
    v55 = v52 >> 3;
    while (1)
    {
      v56 = *(unsigned __int8 **)(v51 + 8 * v53);
      if (*v56 == *(unsigned __int8 *)(v54 + 20))
      {
        v57 = *((_QWORD *)v56 + 1);
        v58 = v49[15];
        if (v57 < (v49[16] - v58) >> 3)
          break;
      }
      if (++v53 >= v55)
        goto LABEL_62;
    }
    v59 = *(_QWORD *)(v58 + 8 * v57);
    if (!v59)
LABEL_62:
      v60 = 0;
    else
      v60 = *(std::__shared_weak_count **)(*(_QWORD *)(v59 + 24) + 8 * *(unsigned __int8 *)(v54 + 21));
    v61 = *(_QWORD *)(v46 + 16);
    v62 = *(_QWORD *)(*(_QWORD *)(v61 + 208) + 64);
    v286 = v46;
    if (!v62)
      goto LABEL_157;
    v284 = *(_QWORD *)(v46 + 16);
    v285 = v60;
    v297 = &off_1E42D42E8;
    v298 = v60;
    v299 = (uint64_t *)&v297;
    v63 = *(_QWORD **)(v62 + 8);
    v287 = *(_QWORD **)(v62 + 16);
    if (v63 == v287)
    {
LABEL_154:
      v145 = &v297;
      v146 = 4;
LABEL_155:
      (*v145)[v146]();
      goto LABEL_156;
    }
    do
    {
      v66 = *v63;
      v67 = (uint64_t)v299;
      if (!v299)
        goto LABEL_72;
      if (v299 != (uint64_t *)&v297)
      {
        v67 = (*(uint64_t (**)(void))(*v299 + 16))();
LABEL_72:
        v302 = (uint64_t *)v67;
        goto LABEL_74;
      }
      v302 = (uint64_t *)&v300;
      ((void (*)(uint64_t (***)(), _QWORD **))v297[3])(&v297, &v300);
LABEL_74:
      if (!*(_BYTE *)(v66 + 400))
        goto LABEL_148;
      v69 = *(_QWORD *)(v66 + 296);
      v68 = *(_QWORD *)(v66 + 304);
      if (v68 != v69)
      {
        v70 = *(_QWORD *)(v66 + 304);
        do
        {
          v72 = *(void **)(v70 - 24);
          v70 -= 24;
          v71 = v72;
          if (v72)
          {
            *(_QWORD *)(v68 - 16) = v71;
            operator delete(v71);
          }
          v68 = v70;
        }
        while (v70 != v69);
      }
      *(_QWORD *)(v66 + 304) = v69;
      *(_QWORD *)(v66 + 280) = *(_QWORD *)(v66 + 272);
      v73 = *(_QWORD **)(v66 + 352);
      if (v73)
      {
        do
        {
          if (v73[1])
          {
            v75 = 0;
            v76 = (void (***)(void))(v73 + 2);
            do
            {
              v77 = *v76;
              v76 += 15;
              (*v77)();
              ++v75;
            }
            while (v75 < v73[1]);
          }
          v73[1] = 0;
          v73 = (_QWORD *)*v73;
        }
        while (v73);
        v74 = *(_QWORD *)(v66 + 352);
      }
      else
      {
        v74 = 0;
      }
      *(_QWORD *)(v66 + 360) = v74;
      v78 = (uint64_t)v302;
      v289 = v63;
      if (!v302)
        goto LABEL_91;
      if (v302 != (uint64_t *)&v300)
      {
        v78 = (*(uint64_t (**)(void))(*v302 + 16))();
LABEL_91:
        *((_QWORD *)&v310 + 1) = v78;
        goto LABEL_93;
      }
      *((_QWORD *)&v310 + 1) = &v309;
      ((void (*)(_QWORD **, __int128 *))v300[3])(&v300, &v309);
LABEL_93:
      if (!*(_BYTE *)(v66 + 400))
        goto LABEL_143;
      if (*(_BYTE *)(v66 + 136))
      {
        v79 = *(_QWORD *)(*(_QWORD *)(v66 + 8) + 56);
        *(_QWORD *)(v66 + 40) = v79;
        v80 = *(unsigned __int8 *)(v79 + 58) == 1;
        if (!*(_BYTE *)(v66 + 264))
          goto LABEL_98;
      }
      else
      {
        v80 = 0;
        if (!*(_BYTE *)(v66 + 264))
          goto LABEL_98;
      }
      v81 = *(_QWORD *)(*(_QWORD *)(v66 + 8) + 64);
      *(_QWORD *)(v66 + 168) = v81;
      if (*(_BYTE *)(v81 + 58) == 1)
        v80 = 1;
LABEL_98:
      v83 = *(uint64_t **)(v66 + 376);
      v82 = *(uint64_t **)(v66 + 384);
      if (v83 != v82)
      {
        v84 = 0;
        while (1)
        {
          v85 = *v83;
          if (*(_BYTE *)(*v83 + 48))
          {
            if (*(_QWORD *)(v85 + 88) != v84)
            {
              if (v84)
              {
                v86 = ggl::Batcher::commit((__int128 **)(v66 + 272), 0xC8u, v30);
                if (v86[1] != *v86)
                {
                  v87 = v86;
                  if (*(_BYTE *)(v66 + 136))
                  {
                    v89 = *(_QWORD *)(v66 + 24);
                    v88 = *(_QWORD *)(v66 + 32);
                    v90 = *(_OWORD *)(v66 + 88);
                    v305 = *(_OWORD *)(v66 + 72);
                    v306 = v90;
                    v91 = *(_OWORD *)(v66 + 120);
                    v307 = *(_OWORD *)(v66 + 104);
                    v308 = v91;
                    v92 = *(_OWORD *)(v66 + 56);
                    v303 = *(_OWORD *)(v66 + 40);
                    v304 = v92;
                    v93 = *(_QWORD **)(v66 + 360);
                    v94 = v93[1];
                    if (v94 == *(_QWORD *)(v66 + 368))
                    {
                      v93 = (_QWORD *)*v93;
                      if (!v93)
                      {
                        v93 = malloc_type_malloc(120 * v94 + 16, 0xB644C221uLL);
                        *v93 = 0;
                        v93[1] = 0;
                        **(_QWORD **)(v66 + 360) = v93;
                      }
                      *(_QWORD *)(v66 + 360) = v93;
                      v94 = v93[1];
                    }
                    v95 = &v93[15 * v94];
                    v93[1] = v94 + 1;
                    v95[2] = &off_1E42B59B0;
                    v95[3] = v89;
                    v95 += 2;
                    v95[2] = v88;
                    v96 = v307;
                    v97 = v308;
                    v98 = v306;
                    *(_OWORD *)(v95 + 7) = v305;
                    v99 = v303;
                    *(_OWORD *)(v95 + 5) = v304;
                    *(_OWORD *)(v95 + 3) = v99;
                    *(_OWORD *)(v95 + 13) = v97;
                    *(_OWORD *)(v95 + 11) = v96;
                    *(_OWORD *)(v95 + 9) = v98;
                    v95[8] = v84;
                    v100 = *v87;
                    v95[11] = *v87;
                    v95[12] = (v87[1] - v100) >> 4;
                    LODWORD(v295) = 0;
                    *(_QWORD *)&v303 = v95;
                    if (!*((_QWORD *)&v310 + 1))
                      goto LABEL_345;
                    (*(void (**)(_QWORD, _QWORD **, __int128 *))(**((_QWORD **)&v310 + 1) + 48))(*((_QWORD *)&v310 + 1), &v295, &v303);
                  }
                  if (*(_BYTE *)(v66 + 264))
                  {
                    v101 = *(_OWORD *)(v66 + 200);
                    v102 = *(_OWORD *)(v66 + 232);
                    v103 = *(_OWORD *)(v66 + 248);
                    v306 = *(_OWORD *)(v66 + 216);
                    v307 = v102;
                    v308 = v103;
                    v104 = *(_OWORD *)(v66 + 184);
                    v303 = *(_OWORD *)(v66 + 168);
                    v106 = *(_QWORD *)(v66 + 152);
                    v105 = *(_QWORD *)(v66 + 160);
                    v304 = v104;
                    v305 = v101;
                    v107 = *(_QWORD **)(v66 + 360);
                    v108 = v107[1];
                    if (v108 == *(_QWORD *)(v66 + 368))
                    {
                      v107 = (_QWORD *)*v107;
                      if (!v107)
                      {
                        v107 = malloc_type_malloc(120 * v108 + 16, 0xB644C221uLL);
                        *v107 = 0;
                        v107[1] = 0;
                        **(_QWORD **)(v66 + 360) = v107;
                      }
                      *(_QWORD *)(v66 + 360) = v107;
                      v108 = v107[1];
                    }
                    v109 = &v107[15 * v108];
                    v107[1] = v108 + 1;
                    v109[2] = &off_1E42B59B0;
                    v109[3] = v106;
                    v109 += 2;
                    v109[2] = v105;
                    v110 = v307;
                    v111 = v308;
                    v112 = v306;
                    *(_OWORD *)(v109 + 7) = v305;
                    v113 = v303;
                    *(_OWORD *)(v109 + 5) = v304;
                    *(_OWORD *)(v109 + 3) = v113;
                    *(_OWORD *)(v109 + 13) = v111;
                    *(_OWORD *)(v109 + 11) = v110;
                    *(_OWORD *)(v109 + 9) = v112;
                    v109[8] = v84;
                    v114 = *v87;
                    v109[11] = *v87;
                    v109[12] = (v87[1] - v114) >> 4;
                    LODWORD(v295) = 1;
                    *(_QWORD *)&v303 = v109;
                    if (!*((_QWORD *)&v310 + 1))
                      goto LABEL_345;
                    (*(void (**)(_QWORD, _QWORD **, __int128 *))(**((_QWORD **)&v310 + 1) + 48))(*((_QWORD *)&v310 + 1), &v295, &v303);
                  }
                }
              }
              v85 = *v83;
              v84 = *(_QWORD *)(*v83 + 88);
            }
            v115 = 32;
            if (v80)
            {
              v116 = v85 + 32;
            }
            else
            {
              v115 = 16;
              v116 = v85 + 16;
            }
            if (*(_QWORD *)(v116 + 8) != *(_QWORD *)(v85 + v115))
              gm::MultiRange<unsigned long>::push_back((char **)(v66 + 272), (_OWORD *)v116);
          }
          if (++v83 == v82)
            goto LABEL_128;
        }
      }
      v84 = 0;
LABEL_128:
      v117 = ggl::Batcher::commit((__int128 **)(v66 + 272), 0xC8u, v30);
      if (v117[1] != *v117)
      {
        v118 = v117;
        if (*(_BYTE *)(v66 + 136))
        {
          v119 = *(_QWORD *)(v66 + 24);
          v120 = *(_QWORD *)(v66 + 32);
          v121 = *(_OWORD *)(v66 + 72);
          v122 = *(_OWORD *)(v66 + 104);
          v306 = *(_OWORD *)(v66 + 88);
          v307 = v122;
          v308 = *(_OWORD *)(v66 + 120);
          v304 = *(_OWORD *)(v66 + 56);
          v305 = v121;
          v303 = *(_OWORD *)(v66 + 40);
          v123 = *(_QWORD **)(v66 + 360);
          v124 = v123[1];
          if (v124 == *(_QWORD *)(v66 + 368))
          {
            v123 = (_QWORD *)*v123;
            if (!v123)
            {
              v123 = malloc_type_malloc(120 * v124 + 16, 0xB644C221uLL);
              *v123 = 0;
              v123[1] = 0;
              **(_QWORD **)(v66 + 360) = v123;
            }
            *(_QWORD *)(v66 + 360) = v123;
            v124 = v123[1];
          }
          v125 = &v123[15 * v124];
          v123[1] = v124 + 1;
          v125[2] = &off_1E42B59B0;
          v125[3] = v119;
          v125 += 2;
          v125[2] = v120;
          v126 = v307;
          v127 = v308;
          v128 = v306;
          *(_OWORD *)(v125 + 7) = v305;
          v129 = v303;
          *(_OWORD *)(v125 + 5) = v304;
          *(_OWORD *)(v125 + 3) = v129;
          *(_OWORD *)(v125 + 13) = v127;
          *(_OWORD *)(v125 + 11) = v126;
          *(_OWORD *)(v125 + 9) = v128;
          v125[8] = v84;
          v130 = *v118;
          v125[11] = *v118;
          v125[12] = (v118[1] - v130) >> 4;
          LODWORD(v295) = 0;
          *(_QWORD *)&v303 = v125;
          if (!*((_QWORD *)&v310 + 1))
          {
LABEL_345:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
          (*(void (**)(_QWORD, _QWORD **, __int128 *))(**((_QWORD **)&v310 + 1) + 48))(*((_QWORD *)&v310 + 1), &v295, &v303);
        }
        if (*(_BYTE *)(v66 + 264))
        {
          v131 = *(_QWORD *)(v66 + 152);
          v132 = *(_QWORD *)(v66 + 160);
          v133 = *(_OWORD *)(v66 + 200);
          v134 = *(_OWORD *)(v66 + 232);
          v306 = *(_OWORD *)(v66 + 216);
          v307 = v134;
          v308 = *(_OWORD *)(v66 + 248);
          v303 = *(_OWORD *)(v66 + 168);
          v304 = *(_OWORD *)(v66 + 184);
          v305 = v133;
          v135 = *(_QWORD **)(v66 + 360);
          v136 = v135[1];
          if (v136 == *(_QWORD *)(v66 + 368))
          {
            v135 = (_QWORD *)*v135;
            if (!v135)
            {
              v135 = malloc_type_malloc(120 * v136 + 16, 0xB644C221uLL);
              *v135 = 0;
              v135[1] = 0;
              **(_QWORD **)(v66 + 360) = v135;
            }
            *(_QWORD *)(v66 + 360) = v135;
            v136 = v135[1];
          }
          v137 = &v135[15 * v136];
          v135[1] = v136 + 1;
          v137[2] = &off_1E42B59B0;
          v137[3] = v131;
          v137 += 2;
          v137[2] = v132;
          v138 = v307;
          v139 = v308;
          v140 = v306;
          *(_OWORD *)(v137 + 7) = v305;
          v141 = v303;
          *(_OWORD *)(v137 + 5) = v304;
          *(_OWORD *)(v137 + 3) = v141;
          *(_OWORD *)(v137 + 13) = v139;
          *(_OWORD *)(v137 + 11) = v138;
          *(_OWORD *)(v137 + 9) = v140;
          v137[8] = v84;
          v142 = *v118;
          v137[11] = *v118;
          v137[12] = (v118[1] - v142) >> 4;
          LODWORD(v295) = 1;
          *(_QWORD *)&v303 = v137;
          if (!*((_QWORD *)&v310 + 1))
            goto LABEL_345;
          (*(void (**)(_QWORD, _QWORD **, __int128 *))(**((_QWORD **)&v310 + 1) + 48))(*((_QWORD *)&v310 + 1), &v295, &v303);
        }
      }
LABEL_143:
      v143 = (__int128 *)*((_QWORD *)&v310 + 1);
      if (*((__int128 **)&v310 + 1) == &v309)
      {
        v143 = &v309;
        v144 = 4;
        v63 = v289;
      }
      else
      {
        v63 = v289;
        if (!*((_QWORD *)&v310 + 1))
          goto LABEL_148;
        v144 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_148:
      v64 = v302;
      if (v302 == (uint64_t *)&v300)
      {
        v64 = (uint64_t *)&v300;
        v65 = 4;
LABEL_67:
        (*(void (**)(void))(*v64 + 8 * v65))();
        goto LABEL_68;
      }
      if (v302)
      {
        v65 = 5;
        goto LABEL_67;
      }
LABEL_68:
      ++v63;
    }
    while (v63 != v287);
    v145 = (uint64_t (***)())v299;
    if (v299 == (uint64_t *)&v297)
      goto LABEL_154;
    if (v299)
    {
      v146 = 5;
      goto LABEL_155;
    }
LABEL_156:
    v60 = v285;
    v46 = v286;
    v61 = v284;
LABEL_157:
    if (*(_BYTE *)(v61 + 28))
    {
      v147 = *(_QWORD *)(*(_QWORD *)(v61 + 216) + 40);
      if (v147)
      {
        v148 = v46;
        *(_QWORD *)&v303 = &off_1E42D4378;
        *((_QWORD *)&v303 + 1) = v60;
        v149 = v60;
        *((_QWORD *)&v304 + 1) = &v303;
        md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(*(_QWORD **)(v147 + 8), *(_QWORD **)(v147 + 16), &v303, 0xC8u, v30);
        v150 = (__int128 *)*((_QWORD *)&v304 + 1);
        if (*((__int128 **)&v304 + 1) == &v303)
        {
          v150 = &v303;
          v151 = 4;
LABEL_163:
          (*(void (**)(void))(*(_QWORD *)v150 + 8 * v151))();
        }
        else if (*((_QWORD *)&v304 + 1))
        {
          v151 = 5;
          goto LABEL_163;
        }
        v46 = v148;
        v60 = v149;
      }
    }
    v152 = *(_QWORD **)(v61 + 200);
    v153 = v152[2];
    if (!v153 || !*(_BYTE *)(*(_QWORD *)(*v152 + 40) + 64))
      goto LABEL_54;
    v297 = &off_1E42D4330;
    v298 = v60;
    v299 = (uint64_t *)&v297;
    v154 = *(_QWORD **)(v153 + 8);
    v290 = *(_QWORD **)(v153 + 16);
    if (v154 == v290)
    {
LABEL_51:
      v47 = &v297;
      v48 = 4;
      goto LABEL_52;
    }
    while (2)
    {
      v157 = *v154;
      v158 = (uint64_t)v299;
      if (v299)
      {
        if (v299 != (uint64_t *)&v297)
        {
          v158 = (*(uint64_t (**)(void))(*v299 + 16))();
          goto LABEL_175;
        }
        v302 = (uint64_t *)&v300;
        ((void (*)(uint64_t (***)(), _QWORD **))v297[3])(&v297, &v300);
      }
      else
      {
LABEL_175:
        v302 = (uint64_t *)v158;
      }
      if (*(_BYTE *)(v157 + 272))
      {
        v160 = *(_QWORD *)(v157 + 168);
        v159 = *(_QWORD *)(v157 + 176);
        if (v159 != v160)
        {
          v161 = *(_QWORD *)(v157 + 176);
          do
          {
            v163 = *(void **)(v161 - 24);
            v161 -= 24;
            v162 = v163;
            if (v163)
            {
              *(_QWORD *)(v159 - 16) = v162;
              operator delete(v162);
            }
            v159 = v161;
          }
          while (v161 != v160);
        }
        *(_QWORD *)(v157 + 176) = v160;
        *(_QWORD *)(v157 + 152) = *(_QWORD *)(v157 + 144);
        v164 = *(_QWORD **)(v157 + 224);
        if (v164)
        {
          do
          {
            if (v164[1])
            {
              v166 = 0;
              v167 = (void (***)(void))(v164 + 2);
              do
              {
                v168 = *v167;
                v167 += 15;
                (*v168)();
                ++v166;
              }
              while (v166 < v164[1]);
            }
            v164[1] = 0;
            v164 = (_QWORD *)*v164;
          }
          while (v164);
          v165 = *(_QWORD *)(v157 + 224);
        }
        else
        {
          v165 = 0;
        }
        *(_QWORD *)(v157 + 232) = v165;
        v169 = (uint64_t)v302;
        if (v302)
        {
          if (v302 != (uint64_t *)&v300)
          {
            v169 = (*(uint64_t (**)(void))(*v302 + 16))();
            goto LABEL_194;
          }
          *((_QWORD *)&v310 + 1) = &v309;
          ((void (*)(_QWORD **, __int128 *))v300[3])(&v300, &v309);
        }
        else
        {
LABEL_194:
          *((_QWORD *)&v310 + 1) = v169;
        }
        if (*(_BYTE *)(v157 + 272))
        {
          v288 = v154;
          if (*(_BYTE *)(v157 + 136))
          {
            v170 = *(_QWORD *)(*(_QWORD *)(v157 + 8) + 56);
            *(_QWORD *)(v157 + 40) = v170;
            v171 = *(unsigned __int8 *)(v170 + 58) == 1;
          }
          else
          {
            v171 = 0;
          }
          v172 = *(uint64_t **)(v157 + 248);
          v173 = *(uint64_t **)(v157 + 256);
          if (v172 != v173)
          {
            v174 = 0;
            while (1)
            {
              v175 = *v172;
              if (*(_BYTE *)(*v172 + 48))
              {
                if (*(_QWORD *)(v175 + 88) != v174)
                {
                  if (v174)
                  {
                    v176 = ggl::Batcher::commit((__int128 **)(v157 + 144), 0xC8u, v30);
                    if (v176[1] != *v176)
                    {
                      if (*(_BYTE *)(v157 + 136))
                      {
                        v177 = v176;
                        v179 = *(_QWORD *)(v157 + 24);
                        v178 = *(_QWORD *)(v157 + 32);
                        v180 = *(_OWORD *)(v157 + 88);
                        v305 = *(_OWORD *)(v157 + 72);
                        v306 = v180;
                        v181 = *(_OWORD *)(v157 + 120);
                        v307 = *(_OWORD *)(v157 + 104);
                        v308 = v181;
                        v182 = *(_OWORD *)(v157 + 56);
                        v303 = *(_OWORD *)(v157 + 40);
                        v304 = v182;
                        v183 = *(_QWORD **)(v157 + 232);
                        v184 = v183[1];
                        if (v184 == *(_QWORD *)(v157 + 240))
                        {
                          v183 = (_QWORD *)*v183;
                          if (!v183)
                          {
                            v183 = malloc_type_malloc(120 * v184 + 16, 0xB644C221uLL);
                            *v183 = 0;
                            v183[1] = 0;
                            **(_QWORD **)(v157 + 232) = v183;
                          }
                          *(_QWORD *)(v157 + 232) = v183;
                          v184 = v183[1];
                        }
                        v185 = &v183[15 * v184];
                        v183[1] = v184 + 1;
                        v185[2] = &off_1E42B59B0;
                        v185[3] = v179;
                        v185 += 2;
                        v185[2] = v178;
                        v186 = v307;
                        v187 = v308;
                        v188 = v306;
                        *(_OWORD *)(v185 + 7) = v305;
                        v189 = v303;
                        *(_OWORD *)(v185 + 5) = v304;
                        *(_OWORD *)(v185 + 3) = v189;
                        *(_OWORD *)(v185 + 13) = v187;
                        *(_OWORD *)(v185 + 11) = v186;
                        *(_OWORD *)(v185 + 9) = v188;
                        v185[8] = v174;
                        v190 = *v177;
                        v185[11] = *v177;
                        v185[12] = (v177[1] - v190) >> 4;
                        LODWORD(v295) = 0;
                        *(_QWORD *)&v303 = v185;
                        if (!*((_QWORD *)&v310 + 1))
                          goto LABEL_345;
                        (*(void (**)(_QWORD, _QWORD **, __int128 *))(**((_QWORD **)&v310 + 1) + 48))(*((_QWORD *)&v310 + 1), &v295, &v303);
                      }
                    }
                  }
                  v175 = *v172;
                  v174 = *(_QWORD *)(*v172 + 88);
                }
                v191 = 32;
                if (v171)
                {
                  v192 = v175 + 32;
                }
                else
                {
                  v191 = 16;
                  v192 = v175 + 16;
                }
                if (*(_QWORD *)(v192 + 8) != *(_QWORD *)(v175 + v191))
                  gm::MultiRange<unsigned long>::push_back((char **)(v157 + 144), (_OWORD *)v192);
              }
              if (++v172 == v173)
                goto LABEL_221;
            }
          }
          v174 = 0;
LABEL_221:
          v193 = ggl::Batcher::commit((__int128 **)(v157 + 144), 0xC8u, v30);
          v154 = v288;
          if (v193[1] != *v193)
          {
            if (*(_BYTE *)(v157 + 136))
            {
              v194 = v193;
              v195 = *(_QWORD *)(v157 + 24);
              v196 = *(_QWORD *)(v157 + 32);
              v197 = *(_OWORD *)(v157 + 72);
              v198 = *(_OWORD *)(v157 + 104);
              v306 = *(_OWORD *)(v157 + 88);
              v307 = v198;
              v308 = *(_OWORD *)(v157 + 120);
              v304 = *(_OWORD *)(v157 + 56);
              v305 = v197;
              v303 = *(_OWORD *)(v157 + 40);
              v199 = *(_QWORD **)(v157 + 232);
              v200 = v199[1];
              if (v200 == *(_QWORD *)(v157 + 240))
              {
                v199 = (_QWORD *)*v199;
                if (!v199)
                {
                  v199 = malloc_type_malloc(120 * v200 + 16, 0xB644C221uLL);
                  *v199 = 0;
                  v199[1] = 0;
                  **(_QWORD **)(v157 + 232) = v199;
                }
                *(_QWORD *)(v157 + 232) = v199;
                v200 = v199[1];
              }
              v201 = &v199[15 * v200];
              v199[1] = v200 + 1;
              v201[2] = &off_1E42B59B0;
              v201[3] = v195;
              v201 += 2;
              v201[2] = v196;
              v202 = v307;
              v203 = v308;
              v204 = v306;
              *(_OWORD *)(v201 + 7) = v305;
              v205 = v303;
              *(_OWORD *)(v201 + 5) = v304;
              *(_OWORD *)(v201 + 3) = v205;
              *(_OWORD *)(v201 + 13) = v203;
              *(_OWORD *)(v201 + 11) = v202;
              *(_OWORD *)(v201 + 9) = v204;
              v201[8] = v174;
              v206 = *v194;
              v201[11] = *v194;
              v201[12] = (v194[1] - v206) >> 4;
              LODWORD(v295) = 0;
              *(_QWORD *)&v303 = v201;
              if (!*((_QWORD *)&v310 + 1))
                goto LABEL_345;
              (*(void (**)(_QWORD, _QWORD **, __int128 *))(**((_QWORD **)&v310 + 1) + 48))(*((_QWORD *)&v310 + 1), &v295, &v303);
              v154 = v288;
            }
          }
        }
        v207 = (__int128 *)*((_QWORD *)&v310 + 1);
        if (*((__int128 **)&v310 + 1) == &v309)
        {
          v207 = &v309;
          v208 = 4;
LABEL_233:
          (*(void (**)(void))(*(_QWORD *)v207 + 8 * v208))();
        }
        else if (*((_QWORD *)&v310 + 1))
        {
          v208 = 5;
          goto LABEL_233;
        }
      }
      v155 = v302;
      if (v302 == (uint64_t *)&v300)
      {
        v155 = (uint64_t *)&v300;
        v156 = 4;
        goto LABEL_170;
      }
      if (v302)
      {
        v156 = 5;
LABEL_170:
        (*(void (**)(void))(*v155 + 8 * v156))();
      }
      if (++v154 != v290)
        continue;
      break;
    }
    v47 = (uint64_t (***)())v299;
    if (v299 == (uint64_t *)&v297)
      goto LABEL_51;
    if (v299)
    {
      v48 = 5;
LABEL_52:
      (*v47)[v48]();
    }
    v46 = v286;
LABEL_54:
    v46 += 24;
    if (v46 != v281)
      continue;
    break;
  }
LABEL_240:
  if (*((_BYTE *)this + 330) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 24) + 32))
  {
    v209 = (ggl::RenderItem **)*((_QWORD *)this + 22);
    if (!v209)
    {
      v210 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v210->__shared_owners_ = 0;
      v211 = (unint64_t *)&v210->__shared_owners_;
      v210->__shared_weak_owners_ = 0;
      v210->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
      ggl::BufferData::BufferData((uint64_t)&v210[1], 8, 0, 0, 6, 4);
      v210[9].__shared_weak_owners_ = (uint64_t)"/route/element/clear/vdata";
      v210[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
      v210[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B74E0;
      v210[9].__shared_owners_ = (uint64_t)&unk_1E42B7500;
      v295 = &v210[1].__vftable;
      v296 = v210;
      v303 = 0uLL;
      v212 = 4 * v210[1].__shared_owners_;
      *(_QWORD *)&v213 = 0;
      *((_QWORD *)&v213 + 1) = v210 + 1;
      v214 = v210[4].__vftable;
      v303 = v213;
      *(_QWORD *)&v304 = 0;
      *((_QWORD *)&v304 + 1) = v212;
      *((_QWORD *)&v305 + 1) = v214;
      LOWORD(v305) = 1;
      *(_OWORD *)&v214->~__shared_weak_count = xmmword_19FFB33E0;
      *(_OWORD *)&v214->__on_zero_shared = xmmword_19FFB33F0;
      v215 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v215->__shared_owners_ = 0;
      v216 = (unint64_t *)&v215->__shared_owners_;
      v215->__shared_weak_owners_ = 0;
      v215->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      ggl::BufferData::BufferData((uint64_t)&v215[1], 2, 1, 0, 6, 6);
      LODWORD(v215[10].__vftable) = 0;
      v215[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v215[1].__shared_owners_ = 2;
      v215[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v215[9].__shared_weak_owners_ = (uint64_t)"/route/element/clear/idata";
      v293 = &v215[1].__vftable;
      v294 = v215;
      v309 = 0uLL;
      *(_QWORD *)&v217 = 0;
      *((_QWORD *)&v217 + 1) = v215 + 1;
      v218 = v215[4].__vftable;
      v309 = v217;
      v310 = xmmword_19FFB3400;
      v312 = v218;
      v311 = 1;
      v218->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
      LODWORD(v218->~__shared_weak_count_0) = 3;
      v219 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v220 = v219;
      v219->__shared_owners_ = 0;
      v221 = (unint64_t *)&v219->__shared_owners_;
      v219->__shared_weak_owners_ = 0;
      v219->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5A8;
      v222 = &v219[1].__vftable;
      v300 = &v210[1].__vftable;
      v301 = v210;
      do
        v223 = __ldxr(v211);
      while (__stxr(v223 + 1, v211));
      v297 = (uint64_t (**)())&v215[1];
      v298 = v215;
      do
        v224 = __ldxr(v216);
      while (__stxr(v224 + 1, v216));
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)&v219[1], (uint64_t)"/route/element/clear/mesh", (uint64_t *)&v300, (uint64_t *)&v297);
      do
        v225 = __ldaxr(v216);
      while (__stlxr(v225 - 1, v216));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
      v226 = v301;
      if (v301)
      {
        v227 = (unint64_t *)&v301->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      v291[1] = v222;
      v292 = v220;
      v230 = *((_QWORD *)this + 13);
      v229 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
      if (v229)
      {
        v231 = (unint64_t *)&v229->__shared_owners_;
        do
          v232 = __ldxr(v231);
        while (__stxr(v232 + 1, v231));
      }
      v300 = (_QWORD *)v230;
      v301 = v229;
      v233 = (_QWORD *)operator new();
      v234 = v233;
      if (v229)
      {
        v235 = (unint64_t *)&v229->__shared_owners_;
        do
          v236 = __ldxr(v235);
        while (__stxr(v236 + 1, v235));
        ggl::PipelineSetup::PipelineSetup(v233, v230, (uint64_t)v229);
        v237 = (unint64_t *)&v229->__shared_owners_;
        do
          v238 = __ldaxr(v237);
        while (__stlxr(v238 - 1, v237));
        if (!v238)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      else
      {
        ggl::PipelineSetup::PipelineSetup(v233, v230, 0);
      }
      *v234 = &off_1E42BAA88;
      v239 = (int64x2_t *)operator new();
      v240 = *((_QWORD *)this + 19);
      v239->i64[0] = (uint64_t)&off_1E42B59B0;
      v239[1].i64[0] = (uint64_t)"";
      v239[1].i64[1] = v240;
      v239[2].i64[0] = (uint64_t)v234;
      v239[2].i32[2] = 0;
      v239[3].i32[2] = 1065353216;
      v239[4].i64[0] = (uint64_t)v222;
      v239[4].i64[1] = 0;
      v239[5].i64[0] = 0;
      v239[5].i64[1] = 0;
      v239[6] = vdupq_n_s64(1uLL);
      v239[7].i64[0] = 0;
      v239[3].i64[0] = 5;
      v239[5].i64[0] = (v293[6] - v293[5]) / v293[1];
      v239[6].i64[0] = 1;
      v241 = (_QWORD *)operator new();
      do
        v242 = __ldxr(v221);
      while (__stxr(v242 + 1, v221));
      *v241 = v239;
      v241[1] = v234;
      v241[2] = v222;
      v241[3] = v220;
      do
        v243 = __ldxr(v221);
      while (__stxr(v243 + 1, v221));
      v244 = (uint64_t *)*((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v241;
      if (v244)
      {
        v245 = (std::__shared_weak_count *)v244[3];
        if (v245)
        {
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
        v248 = v244[1];
        v244[1] = 0;
        if (v248)
          (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
        v249 = *v244;
        *v244 = 0;
        if (v249)
          (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
        MEMORY[0x1A1AF4E00](v244, 0x20C40DC1BFBCFLL);
      }
      do
        v250 = __ldaxr(v221);
      while (__stlxr(v250 - 1, v221));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
      v251 = v301;
      if (v301)
      {
        v252 = (unint64_t *)&v301->__shared_owners_;
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      v254 = v292;
      if (v292)
      {
        v255 = (unint64_t *)&v292->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = this;
      if (v312)
      {
        v258 = v310;
        if (*((_QWORD *)&v310 + 1) != (_QWORD)v310)
        {
          v259 = (_QWORD *)*((_QWORD *)&v309 + 1);
          v260 = v311;
          v261 = HIBYTE(v311);
          if ((_QWORD)v309)
          {
            v257 = this;
            if (*(_BYTE *)(*((_QWORD *)&v309 + 1) + 17) != 2)
            {
              (*(void (**)(void))(*(_QWORD *)v309 + 64))();
              v257 = this;
            }
          }
          if (v260 && !v261)
          {
            v263 = v259[7];
            v262 = v259[8];
            if (v262 == v263)
              v263 = v259[10] - v259[9];
            if ((unint64_t)v258 < v263)
              v263 = v258;
            if (v262 <= *((_QWORD *)&v258 + 1))
              v262 = *((_QWORD *)&v258 + 1);
            if (v262 == v263)
              v262 = v263 + v259[10] - v259[9];
            v259[7] = v263;
            v259[8] = v262;
            v257 = this;
          }
        }
      }
      v264 = v294;
      if (v294)
      {
        v265 = (unint64_t *)&v294->__shared_owners_;
        do
          v266 = __ldaxr(v265);
        while (__stlxr(v266 - 1, v265));
        v257 = this;
        if (!v266)
        {
          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
          std::__shared_weak_count::__release_weak(v264);
          v257 = this;
        }
      }
      if (*((_QWORD *)&v305 + 1))
      {
        v267 = v304;
        if (*((_QWORD *)&v304 + 1) != (_QWORD)v304)
        {
          v268 = (_QWORD *)*((_QWORD *)&v303 + 1);
          v269 = v305;
          v270 = BYTE1(v305);
          if ((_QWORD)v303)
          {
            v257 = this;
            if (*(_BYTE *)(*((_QWORD *)&v303 + 1) + 17) != 2)
            {
              (*(void (**)(void))(*(_QWORD *)v303 + 64))();
              v257 = this;
            }
          }
          if (v269 && !v270)
          {
            v272 = v268[7];
            v271 = v268[8];
            if (v271 == v272)
              v272 = v268[10] - v268[9];
            if ((unint64_t)v267 < v272)
              v272 = v267;
            if (v271 <= *((_QWORD *)&v267 + 1))
              v271 = *((_QWORD *)&v267 + 1);
            if (v271 == v272)
              v271 = v272 + v268[10] - v268[9];
            v268[7] = v272;
            v268[8] = v271;
            v257 = this;
          }
        }
      }
      v273 = v296;
      if (v296)
      {
        v274 = (unint64_t *)&v296->__shared_owners_;
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        v257 = this;
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
          v257 = this;
        }
      }
      v209 = (ggl::RenderItem **)*((_QWORD *)v257 + 22);
    }
    ggl::CommandBuffer::pushRenderItem((uint64_t)v280, *v209);
  }
  v276 = *((_QWORD *)v280 + 9);
  v277 = (uint64_t *)*((_QWORD *)v280 + 10);
  v278 = 126 - 2 * __clz((uint64_t)((uint64_t)v277 - v276) >> 3);
  if (v277 == (uint64_t *)v276)
    v279 = 0;
  else
    v279 = v278;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v276, v277, v279, 1);
}

void sub_19F4802BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v37 - 160));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_19F480338(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F480344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;

  v36 = *(_QWORD **)(v34 - 136);
  if (v36 == (_QWORD *)(v34 - 160))
  {
    v37 = 4;
    v36 = (_QWORD *)(v34 - 160);
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  v38 = a34;
  if (a34 == &a31)
  {
    v39 = 4;
    v38 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_11;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_11:
  v40 = a30;
  if (a30 == &a27)
  {
    v41 = 4;
    v40 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_16;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos2Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D55C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D55C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  ResourceAccessor *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 296);
  v4 = *(_QWORD *)(v2 + 304);
  if (v3 != v4)
  {
    v6 = *a2;
    v7 = 1;
    do
    {
      v8 = *(std::__shared_weak_count **)(v3 + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (*(_BYTE *)(*(_QWORD *)(v11 + 40) + 64))
        v12 = 0;
      else
        v12 = v7;
      if (!*(_BYTE *)(*(_QWORD *)(v11 + 40) + 64))
        ++v7;
      *(_DWORD *)v11 = v12;
      altitude::Route::cull((md::realistic::RouteRenderLayer **)v11, **(altitude::View ***)(a1 + 16), *(karo::graphics::Viewport **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 736) + 24), v6);
      if (v8)
      {
        v13 = (unint64_t *)&v8->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
}

uint64_t **std::unique_ptr<ggl::Drawable>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = v2[1];
    v2[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *v2;
    *v2 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::StenciledAlphaClear::ClearPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StenciledAlphaClear::ClearPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::StenciledAlphaClear::ClearPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverManeuver::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF5A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverManeuver::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF5A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverManeuver::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverTraffic::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverTraffic::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverTraffic::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoute::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoute::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverRoute::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture2D>::__shared_ptr_default_delete<ggl::Texture2D,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture2D>::__shared_ptr_default_delete<ggl::Texture2D,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::realistic::RouteRenderLayer::loadStylesheet(md::realistic::RouteRenderLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  gss::Allocator *v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _BYTE v43[15];
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  _BYTE v49[15];
  char v50;

  if (!*((_QWORD *)this + 20))
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 128);
    v3 = *(_QWORD *)(v2 + 608);
    v4 = *(_QWORD *)(v2 + 616);
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 20) = v3;
    *((_QWORD *)this + 21) = v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v3 = *((_QWORD *)this + 20);
    }
    if (v3)
    {
      v10 = gss::Allocator::instance(this);
      v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 8, 4);
      v12 = v11;
      if (v11)
        *v11 = 0xB00000005;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = v10;
      v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 8, 4);
      v45 = v13;
      v46 = v13;
      v47 = (char *)(v13 + 1);
      if (v13)
        *v13 = *v12;
      v46 = v13 + 1;
      gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v45);
      if (v12)
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v10 + 40))(v10, v12, 8);
      memset(v43, 0, sizeof(v43));
      v44 = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v39, *((_QWORD *)this + 20), (gss::FeatureAttributeSet *)&v45, (gss::QueryOverrides *)v43);
      v14 = v39;
      v39 = 0uLL;
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
      *(_OWORD *)((char *)this + 248) = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v43, 0x10002u) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v39, *((_QWORD *)this + 20), (gss::FeatureAttributeSet *)&v45, (gss::QueryOverrides *)v43);
      v21 = v39;
      v39 = 0uLL;
      v22 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
      *(_OWORD *)((char *)this + 232) = v21;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *((_QWORD *)this + 20);
      md::TrafficStyleAttributes((gss::Allocator *)&v39, 1);
      memset(v49, 0, sizeof(v49));
      v50 = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v42, v28, (gss::FeatureAttributeSet *)&v39, (gss::QueryOverrides *)v49);
      if (!v49[14] && *(_QWORD *)v49)
      {
        v30 = gss::Allocator::instance(v29);
        v29 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v30 + 40))(v30, *(_QWORD *)v49, *(unsigned __int16 *)&v49[12]);
      }
      v31 = v42;
      v42 = 0uLL;
      v32 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
      *(_OWORD *)((char *)this + 216) = v31;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if ((_QWORD)v39)
      {
        *((_QWORD *)&v39 + 1) = v39;
        v29 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, v39, v40 - v39);
      }
      if (!v43[14] && *(_QWORD *)v43)
      {
        v38 = gss::Allocator::instance(v29);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 40))(v38, *(_QWORD *)v43, *(unsigned __int16 *)&v43[12]);
      }
      if (v45)
      {
        v46 = v45;
        (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v48 + 40))(v48, v45, v47 - (char *)v45);
      }
    }
  }
}

void sub_19F481368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v20 - 48));
  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a15);
  if (a17)
  {
    a18 = a17;
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 40))(a20);
  }
  _Unwind_Resume(a1);
}

void md::realistic::RouteRenderLayer::removeRouteData(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD __s2[2];
  char v49;

  v4 = (_QWORD *)a1[37];
  v3 = (_QWORD *)a1[38];
  if (v4 == v3)
    goto LABEL_96;
  while (*v4 != a2)
  {
    v4 += 3;
    if (v4 == v3)
      goto LABEL_96;
  }
  v5 = (_QWORD *)v4[2];
  if (v5)
  {
    v6 = (_QWORD *)v5[13];
    v7 = (_QWORD *)v5[14];
    if (v6 != v7)
    {
      do
      {
        if (*v6)
          (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
        ++v6;
      }
      while (v6 != v7);
      v6 = (_QWORD *)v5[13];
    }
    v5[14] = v6;
    v8 = (_QWORD *)v5[25];
    if (!v8)
      goto LABEL_47;
    v9 = *(_QWORD *)(*(_QWORD *)(v8[1] + 40) + 128);
    v49 = 14;
    strcpy((char *)__s2, "routeAnimation");
    v10 = *(_QWORD **)(v9 + 232);
    v11 = *(_QWORD **)(v9 + 240);
    if (v10 == v11)
    {
LABEL_40:
      v20 = v8[2];
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v8[2] = 0;
      v21 = v8[7];
      v8[7] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = (void *)v8[3];
      if (v22)
      {
        v8[4] = v22;
        operator delete(v22);
      }
      MEMORY[0x1A1AF4E00](v8, 0x1020C40ECFF1FB5);
LABEL_47:
      v23 = (_QWORD *)v5[26];
      if (v23)
      {
        v24 = v23[8];
        v23[8] = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v23[3] = v23[2];
        v23[6] = v23[5];
        v25 = v23[10];
        v23[10] = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v26 = v23[9];
        v23[9] = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        v27 = v23[8];
        v23[8] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v28 = (void *)v23[5];
        if (v28)
        {
          v23[6] = v28;
          operator delete(v28);
        }
        v29 = (void *)v23[2];
        if (v29)
        {
          v23[3] = v29;
          operator delete(v29);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C40ADF5E449);
      }
      v30 = (_QWORD *)v5[27];
      if (v30)
      {
        v30[3] = v30[2];
        v31 = v30[5];
        v30[5] = 0;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v32 = v30[5];
          v30[5] = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
        v33 = (void *)v30[2];
        if (v33)
        {
          v30[3] = v33;
          operator delete(v33);
        }
        MEMORY[0x1A1AF4E00](v30, 0x20C40A759441BLL);
      }
      v34 = (void *)v5[22];
      if (v34)
      {
        v5[23] = v34;
        operator delete(v34);
      }
      v35 = (void *)v5[19];
      if (v35)
      {
        v5[20] = v35;
        operator delete(v35);
      }
      v36 = (void *)v5[13];
      if (v36)
      {
        v5[14] = v36;
        operator delete(v36);
      }
      v37 = (void *)v5[10];
      if (v37)
      {
        v5[11] = v37;
        operator delete(v37);
      }
      v38 = (void *)v5[7];
      if (v38)
      {
        v5[8] = v38;
        operator delete(v38);
      }
      MEMORY[0x1A1AF4E00](v5, 0x10A0C40FFFC3140);
      v3 = (_QWORD *)a1[38];
      goto LABEL_79;
    }
    while (1)
    {
      v12 = *((unsigned __int8 *)v10 + 39);
      if ((v12 & 0x80u) == 0)
        v13 = *((unsigned __int8 *)v10 + 39);
      else
        v13 = v10[3];
      if (v13 != 14)
        goto LABEL_16;
      v14 = (const void **)(v10 + 2);
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*v14, __s2, v10[3]))
          goto LABEL_26;
LABEL_16:
        v10 += 5;
        if (v10 == v11)
          goto LABEL_40;
      }
      else
      {
        if (*((_BYTE *)v10 + 39))
        {
          v15 = (unsigned __int8 *)__s2;
          while (*(unsigned __int8 *)v14 == *v15)
          {
            v14 = (const void **)((char *)v14 + 1);
            ++v15;
            if (!--v12)
              goto LABEL_26;
          }
          goto LABEL_16;
        }
LABEL_26:
        if (*v10)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
          v11 = *(_QWORD **)(v9 + 240);
        }
        if (v10 + 5 == v11)
        {
          v17 = v10;
        }
        else
        {
          v16 = v10;
          do
          {
            *(_OWORD *)v16 = *(_OWORD *)(v16 + 5);
            v19 = (void **)(v16 + 2);
            if (*((char *)v16 + 39) < 0)
              operator delete(*v19);
            *(_OWORD *)v19 = *(_OWORD *)(v16 + 7);
            v16[4] = v16[9];
            *((_BYTE *)v16 + 79) = 0;
            *((_BYTE *)v16 + 56) = 0;
            v17 = v16 + 5;
            v18 = v16 + 10;
            v16 += 5;
          }
          while (v18 != v11);
          v11 = *(_QWORD **)(v9 + 240);
        }
        while (v11 != v17)
        {
          if (*((char *)v11 - 1) < 0)
            operator delete((void *)*(v11 - 3));
          v11 -= 5;
        }
        *(_QWORD *)(v9 + 240) = v17;
        v11 = v17;
        if (v10 == v17)
          goto LABEL_40;
      }
    }
  }
LABEL_79:
  v39 = v4 + 3;
  if (v4 + 3 != v3)
  {
    do
    {
      v40 = *(_OWORD *)v39;
      *v39 = 0;
      v39[1] = 0;
      v41 = (std::__shared_weak_count *)v4[1];
      *(_OWORD *)v4 = v40;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v4[2] = v39[2];
      v39 += 3;
      v4 += 3;
    }
    while (v39 != v3);
    v3 = (_QWORD *)a1[38];
  }
  while (v3 != v4)
  {
    v44 = (std::__shared_weak_count *)*(v3 - 2);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v3 -= 3;
  }
  a1[38] = v4;
LABEL_96:
  v47 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 128) + 856) + 88);
  if (v47)
  {
    LOBYTE(__s2[0]) = 7;
    md::MapEngine::setNeedsTick(v47, __s2);
  }
}

void md::CartographicRenderer::~CartographicRenderer(md::CartographicRenderer *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E4298B50;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5[0] = &off_1E42D04C0;
  v6 = v5;
  geo::TaskQueue::barrierSync(v2, v5);
  v3 = v6;
  if (v6 == v5)
  {
    v4 = 4;
    v3 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  md::Renderer::~Renderer(this);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E4298B50;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5[0] = &off_1E42D04C0;
  v6 = v5;
  geo::TaskQueue::barrierSync(v2, v5);
  v3 = v6;
  if (v6 == v5)
  {
    v4 = 4;
    v3 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  md::Renderer::~Renderer(this);
  MEMORY[0x1A1AF4E00]();
}

void sub_19F4819B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  md::Renderer *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  md::Renderer::~Renderer(v13);
  _Unwind_Resume(a1);
}

void sub_19F481AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  md::Renderer *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  md::Renderer::~Renderer(v13);
  _Unwind_Resume(a1);
}

_QWORD *md::CartographicRenderer::prune(_QWORD *result, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **i;

  v2 = (_QWORD **)result[5];
  for (i = (_QWORD **)result[6]; v2 != i; ++v2)
  {
    result = *v2;
    if (*v2)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 56))(result, a2);
  }
  return result;
}

uint64_t md::CartographicRenderer::type(md::CartographicRenderer *this)
{
  return 0;
}

_QWORD *md::CartographicRenderer::layoutRenderLayers(_QWORD *this, md::LayoutContext *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **i;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 **)this[5];
  for (i = (unsigned __int8 **)this[6]; v2 != i; ++v2)
  {
    v6 = *v2;
    if (!*v2 || v6[33])
      continue;
    v7 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 24);
    md::RenderLayer::lock(*v2, v7, (uint64_t)a2);
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 8);
    v9 = operator new(0x20uLL);
    *v9 = &off_1E42D19D8;
    v9[1] = v6;
    v9[2] = a2;
    v9[3] = v7;
    v16 = v9;
    geo::TaskQueue::async(&v13, v8, v15);
    v10 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    this = v16;
    if (v16 == v15)
    {
      this = v15;
      v5 = 4;
    }
    else
    {
      if (!v16)
        continue;
      v5 = 5;
    }
    this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v5))();
  }
  return this;
}

void sub_19F481CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicRenderer::onLayoutStart(md::CartographicRenderer *this, md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::CartographicRenderer *, md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

uint64_t ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19F481D24);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void std::__function::__func<md::CartographicRenderer::~CartographicRenderer()::$_0,std::allocator<md::CartographicRenderer::~CartographicRenderer()::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicRenderer::~CartographicRenderer()::$_0,std::allocator<md::CartographicRenderer::~CartographicRenderer()::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D04C0;
  return result;
}

void std::__function::__func<md::CartographicRenderer::~CartographicRenderer()::$_0,std::allocator<md::CartographicRenderer::~CartographicRenderer()::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D04C0;
}

void sub_19F48202C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_19F4820C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F48271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v4);
  _Unwind_Resume(a1);
}

void sub_19F4827B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::LegacyTrafficLayerDataSource::~LegacyTrafficLayerDataSource(id *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *this = off_1E429DEE0;
  v2 = (std::__shared_weak_count *)this[96];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *this = off_1E429DEE0;
  v2 = (std::__shared_weak_count *)this[96];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)this);
  JUMPOUT(0x1A1AF4E00);
}

void md::LegacyTrafficLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  gss::Allocator *v45;
  uint64_t v46;
  void *v47;
  int v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int32x4_t v55;
  uint64_t v56;
  void *v57;
  zilch::TrafficSkeletonTile *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  gss::Allocator *v66;
  _QWORD *v67;
  __int128 v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  zilch::TrafficSkeletonTile *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t (***v87)();
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  _QWORD v135[9];
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _QWORD v139[8];
  int32x4_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, _QWORD *);
  void (*v145)(uint64_t);
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  gss::Allocator *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t (*v153)(uint64_t, _QWORD *);
  void (*v154)(uint64_t);
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t, _QWORD *);
  void (*v163)(uint64_t);
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  uint64_t v169;
  __n128 (*v170)(uint64_t, uint64_t);
  void (*v171)(uint64_t);
  const char *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  char v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  unint64_t v189;
  __int16 v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  int32x4_t __b;
  unint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196[3];
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206[3];
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  int8x8_t *v216;
  std::__shared_weak_count *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t (**v220)();
  uint64_t v221;
  uint64_t (***v222)();
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    while (*(_WORD *)v8 != 17)
    {
      v8 += 48;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9 || *(_QWORD *)(v8 + 32) != 1)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_16:
    v218 = v11;
    v219 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v218 = v11;
  v219 = v12;
  v15 = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  v18 = *a3;
  v19 = a3[1];
  if (*a3 != v19)
  {
    while (*(_WORD *)v18 != 16)
    {
      v18 += 48;
      if (v18 == v19)
        goto LABEL_31;
    }
  }
  if (v18 == v19 || *(_QWORD *)(v18 + 32) != 1)
  {
LABEL_31:
    v21 = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(int8x8_t **)(v20 + 112);
  v22 = *(std::__shared_weak_count **)(v20 + 120);
  if (!v22)
  {
LABEL_32:
    v216 = v21;
    v217 = 0;
    goto LABEL_33;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v216 = v21;
  v217 = v22;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 - 1, v25));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_33:
  if (v218)
    v28 = v216 == 0;
  else
    v28 = 1;
  if (!v28)
  {
    sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
    std::__sp_mut::lock(sp_mut);
    v30 = *(std::__shared_weak_count **)(a1 + 768);
    v214 = *(_QWORD *)(a1 + 760);
    v215 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    std::__sp_mut::unlock(sp_mut);
    v33 = *a3;
    v34 = a3[1];
    if (*a3 != v34)
    {
      while (*(_WORD *)v33 != 9)
      {
        v33 += 48;
        if (v33 == v34)
          goto LABEL_57;
      }
    }
    if (v33 == v34 || *(_QWORD *)(v33 + 32) != 1)
    {
LABEL_57:
      v36 = 0;
    }
    else
    {
      v35 = *(_QWORD *)(v33 + 24);
      v36 = *(_QWORD *)(v35 + 112);
      v37 = *(std::__shared_weak_count **)(v35 + 120);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v212 = v36;
        v213 = v37;
        v40 = (unint64_t *)&v37->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
LABEL_59:
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(*(id *)(a1 + 776), "gglDevice") + 24))(&v211);
        v132 = a2;
        v43 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v43->__shared_owners_ = 0;
        v43->__shared_weak_owners_ = 0;
        v43->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
        v44 = ggl::BufferData::BufferData((uint64_t)&v43[1], qword_1EE54ADE0, 2, 1, 6, 1);
        v43[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        v43[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
        v209 = v44;
        v210 = v43;
        md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v207);
        memset(v206, 0, sizeof(v206));
        gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v206);
        v202 = 0;
        v203 = &v202;
        v204 = 0x2020000000;
        v205 = 0;
        v198 = 0;
        v199 = &v198;
        v200 = 0x2020000000;
        v201 = 0;
        md::trafficStyleAttributes(v196, *(geo::codec::VectorTile **)(v212 + 144));
        *(_QWORD *)((char *)&v168 + 7) = 0;
        *(_QWORD *)&v168 = 0;
        HIBYTE(v168) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v194, v214, (gss::FeatureAttributeSet *)v196, (gss::QueryOverrides *)&v168);
        if (!BYTE14(v168) && (_QWORD)v168)
        {
          v46 = gss::Allocator::instance(v45);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v46 + 40))(v46, v168, WORD6(v168));
        }
        memset_pattern16(&__b, &unk_19FFB6380, 0x10uLL);
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v47, "loadGreenTraffic");

        v49 = v194;
        if (v194)
        {
          v50 = v195;
          v191 = v194;
          v192 = v195;
          if (v195)
          {
            v51 = (unint64_t *)&v195->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          md::TrafficMeshStyle::setup(__b.i32, v49, v50, v48);
          if (v50)
          {
            v53 = (unint64_t *)&v50->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
        v55.i64[0] = 0x500000005;
        v55.i64[1] = 0x500000005;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(__b, v55)))) & 1) == 0)
        {
LABEL_149:
          v104 = v203[3];
          v105 = v199[3];
          v106 = operator new(0x328uLL);
          v106[1] = 0;
          v106[2] = 0;
          *v106 = &off_1E42DB588;
          *(_QWORD *)&v168 = v104;
          v159 = v105;
          md::TrafficTileData::TrafficTileData(v106 + 3, v132, &v209, (uint64_t *)&v168, &v159, (uint64_t)v196, (uint64_t)v206);
          if (v159)
            (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
          if ((_QWORD)v168)
            (*(void (**)(_QWORD))(*(_QWORD *)v168 + 8))(v168);
          *a4 = v106 + 3;
          a4[1] = v106;
          v107 = v195;
          if (v195)
          {
            v108 = (unint64_t *)&v195->__shared_owners_;
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          if (v196[0])
          {
            v196[1] = v196[0];
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v197 + 40))(v197, v196[0], v196[2] - v196[0]);
          }
          _Block_object_dispose(&v198, 8);
          _Block_object_dispose(&v202, 8);
          if (v206[0])
            operator delete(v206[0]);
          v110 = v208;
          if (v208)
          {
            v111 = (unint64_t *)&v208->__shared_owners_;
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          v113 = v210;
          if (v210)
          {
            v114 = (unint64_t *)&v210->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          if (v211)
          {
            v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v211 + 24))(v211);
            v117 = v211;
            v211 = 0;
            *(_QWORD *)&v168 = v117;
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v116 + 48))(v116, &v168);
            v118 = v168;
            *(_QWORD *)&v168 = 0;
            if (v118)
              (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
            v119 = v211;
            v211 = 0;
            if (v119)
              (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
          }
          v120 = v213;
          if (v213)
          {
            v121 = (unint64_t *)&v213->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          v123 = v215;
          if (v215)
          {
            v124 = (unint64_t *)&v215->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              v70 = v123;
              goto LABEL_187;
            }
          }
          goto LABEL_188;
        }
        *(_QWORD *)&v168 = 0;
        *((_QWORD *)&v168 + 1) = &v168;
        v169 = 0x11812000000;
        v170 = __Block_byref_object_copy__736;
        v171 = __Block_byref_object_dispose__737;
        v172 = "";
        v173 = 0u;
        v174 = 0u;
        v175 = 0u;
        v176 = 0u;
        v177 = 0u;
        v178 = 0u;
        v179 = 3;
        v181 = 0;
        v180 = 0;
        v182 = -1054867456;
        v183 = 0;
        v184 = 0xFFFFFFF6FFFFFFFFLL;
        v185 = -1054867456;
        v186 = 0u;
        v187 = 0u;
        v188 = 0;
        v189 = 0xFFFFFFFF00000000;
        v190 = 0;
        v159 = 0;
        v160 = &v159;
        v161 = 0x5812000000;
        v162 = __Block_byref_object_copy__5_739;
        v163 = __Block_byref_object_dispose__6_740;
        v164 = 0u;
        v165 = 0u;
        v166 = 0;
        v167 = 1065353216;
        v150 = 0;
        v151 = (uint64_t *)&v150;
        v152 = 0x5812000000;
        v153 = __Block_byref_object_copy__7_741;
        v154 = __Block_byref_object_dispose__8_742;
        v155 = 0u;
        v156 = 0u;
        v157 = 0;
        v158 = 1065353216;
        v141 = 0;
        v142 = &v141;
        v143 = 0x5812000000;
        v144 = __Block_byref_object_copy__9;
        v145 = __Block_byref_object_dispose__10;
        v146 = 0u;
        v147 = 0u;
        v148 = 0;
        v149 = 1065353216;
        v56 = MEMORY[0x1E0C809B0];
        v139[0] = MEMORY[0x1E0C809B0];
        v139[1] = 3221225472;
        v139[2] = ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke;
        v139[3] = &unk_1E42EAEE8;
        v140 = __b;
        v139[4] = &v168;
        v139[5] = &v159;
        v139[6] = &v150;
        v139[7] = &v141;
        v57 = (void *)MEMORY[0x1A1AF5730](v139);
        v58 = *(zilch::TrafficSkeletonTile **)(v218 + 144);
        v59 = *(std::__shared_weak_count **)(v218 + 152);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          do
            v62 = __ldaxr(v60);
          while (__stlxr(v62 - 1, v60));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (zilch::TrafficSkeletonTile::size(v58))
          v63 = zilch::TrafficSkeletonTile::operator[]();
        else
          v63 = 0;
        v71 = v212;
        v72 = v218;
        v73 = *(zilch::TrafficSkeletonTile **)(v218 + 144);
        v74 = *(std::__shared_weak_count **)(v218 + 152);
        v220 = (uint64_t (**)())v73;
        v221 = (uint64_t)v74;
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = zilch::TrafficSkeletonTile::size(v73);
        md::buildTrafficMesh(v71, (uint64_t)&__b, v72, v63, 0, v77, v216, v57, &v214, v48, 4u);
        if (v74)
        {
          v78 = (unint64_t *)&v74->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        md::TrafficAccum::flushToRibbonCollection(*((_QWORD *)&v168 + 1) + 48, (uint64_t)&__b, v160 + 6, v151 + 6, v142 + 6);
        v135[0] = v56;
        v135[1] = 3321888768;
        v135[2] = ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_3;
        v135[3] = &unk_1E42E9FF8;
        v135[4] = &v202;
        v135[5] = &v159;
        v135[8] = v209;
        v136 = v210;
        if (v210)
        {
          v80 = (unint64_t *)&v210->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v137 = v207;
        v138 = v208;
        if (v208)
        {
          v82 = (unint64_t *)&v208->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        v135[6] = &v198;
        v135[7] = &v150;
        v222 = 0;
        v220 = &off_1E42C7118;
        v221 = MEMORY[0x1A1AF5730](v135);
        v222 = &v220;
        v133 = 0;
        v134 = 0;
        (*(void (**)(uint64_t, uint64_t (***)(), uint64_t *))(*(_QWORD *)v211 + 16))(v211, &v220, &v133);
        v84 = v134;
        if (v134)
        {
          v85 = (unint64_t *)&v134->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = v222;
        if (v222 == &v220)
        {
          v88 = 4;
          v87 = &v220;
        }
        else
        {
          if (!v222)
            goto LABEL_115;
          v88 = 5;
        }
        (*v87)[v88]();
LABEL_115:
        v89 = v138;
        if (v138)
        {
          v90 = (unint64_t *)&v138->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = v136;
        if (v136)
        {
          v93 = (unint64_t *)&v136->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }

        _Block_object_dispose(&v141, 8);
        std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v147 + 1));
        v95 = (void *)*((_QWORD *)&v146 + 1);
        *((_QWORD *)&v146 + 1) = 0;
        if (v95)
          operator delete(v95);
        _Block_object_dispose(&v150, 8);
        std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v156 + 1));
        v96 = (void *)*((_QWORD *)&v155 + 1);
        *((_QWORD *)&v155 + 1) = 0;
        if (v96)
          operator delete(v96);
        _Block_object_dispose(&v159, 8);
        std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v165 + 1));
        v97 = (void *)*((_QWORD *)&v164 + 1);
        *((_QWORD *)&v164 + 1) = 0;
        if (v97)
          operator delete(v97);
        _Block_object_dispose(&v168, 8);
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
        if (*((_QWORD *)&v187 + 1))
        {
          v99 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
        if (*((_QWORD *)&v186 + 1))
        {
          v102 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        if (*((_QWORD *)&v177 + 1))
        {
          *(_QWORD *)&v178 = *((_QWORD *)&v177 + 1);
          operator delete(*((void **)&v177 + 1));
        }
        if ((_QWORD)v176)
        {
          *((_QWORD *)&v176 + 1) = v176;
          operator delete((void *)v176);
        }
        if (*((_QWORD *)&v174 + 1))
        {
          *(_QWORD *)&v175 = *((_QWORD *)&v174 + 1);
          operator delete(*((void **)&v174 + 1));
        }
        if ((_QWORD)v173)
        {
          *((_QWORD *)&v173 + 1) = v173;
          operator delete((void *)v173);
        }
        goto LABEL_149;
      }
    }
    v212 = v36;
    v213 = 0;
    goto LABEL_59;
  }
  if (*(_BYTE *)(a1 + 784) || !*(_BYTE *)(a1 + 785))
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    v64 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v64->__shared_owners_ = 0;
    v65 = (unint64_t *)&v64->__shared_owners_;
    v64->__shared_weak_owners_ = 0;
    v64->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
    v66 = (gss::Allocator *)ggl::BufferData::BufferData((uint64_t)&v64[1], qword_1EE54ADE0, 2, 1, 6, 1);
    v64[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
    v64[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
    v150 = v66;
    v151 = (uint64_t *)v64;
    v168 = 0uLL;
    v169 = 0;
    v170 = (__n128 (*)(uint64_t, uint64_t))gss::Allocator::instance(v66);
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v67 = operator new(0x328uLL);
    v67[1] = 0;
    v67[2] = 0;
    *v67 = &off_1E42DB588;
    v141 = 0;
    v202 = 0;
    md::TrafficTileData::TrafficTileData(v67 + 3, a2, (uint64_t *)&v150, &v141, &v202, (uint64_t)&v168, (uint64_t)&v159);
    if (v202)
      (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
    if (v141)
      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
    *(_QWORD *)&v68 = v67 + 3;
    *((_QWORD *)&v68 + 1) = v67;
    *(_OWORD *)a4 = v68;
    if ((_QWORD)v168)
    {
      *((_QWORD *)&v168 + 1) = v168;
      (*(void (**)(__n128 (*)(uint64_t, uint64_t), _QWORD, uint64_t))(*(_QWORD *)v170 + 40))(v170, v168, v169 - v168);
    }
    do
      v69 = __ldaxr(v65);
    while (__stlxr(v69 - 1, v65));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      v70 = v64;
LABEL_187:
      std::__shared_weak_count::__release_weak(v70);
    }
  }
LABEL_188:
  v126 = v217;
  if (v217)
  {
    v127 = (unint64_t *)&v217->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v219;
  if (v219)
  {
    v130 = (unint64_t *)&v219->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
}

void sub_19F4836D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  std::__shared_weak_count *v72;
  uint64_t v73;
  void *v75;

  if (STACK[0x378])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x378] + 8))(STACK[0x378]);
  if (a37)
    (*(void (**)(uint64_t))(*(_QWORD *)a37 + 8))(a37);
  std::__shared_weak_count::~__shared_weak_count(v72);
  operator delete(v75);
  if (a70)
  {
    a71 = a70;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)STACK[0x200] + 40))(STACK[0x200], a70, a72 - a70);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v73 - 168);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v73 - 152);
  _Unwind_Resume(a1);
}

void sub_19F483914()
{
  JUMPOUT(0x19F4838ECLL);
}

BOOL md::LegacyTrafficLayerDataSource::updateRequest(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  _BOOL8 result;

  result = md::TrafficLayerDataSource::updateRequest(a1, a2, a3, a4);
  *(_BYTE *)(a1 + 784) = result;
  return result;
}

uint64_t md::LegacyTrafficLayerDataSource::useOptionalResources(md::LegacyTrafficLayerDataSource *this)
{
  return 0;
}

__n128 __Block_byref_object_copy__736(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v2 = *(_OWORD *)(a2 + 144);
  v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  result = *(__n128 *)(a2 + 224);
  v5 = *(_OWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v5;
  *(_OWORD *)(a1 + 256) = v6;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

void __Block_byref_object_dispose__737(uint64_t a1)
{
  md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__5_739(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__6_740(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__7_741(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__8_742(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

void ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke(_OWORD *a1, std::__shared_weak_count **this, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, char a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, char a15, uint64_t a16, char a17)
{
  int v24;
  geo::codec *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  __int128 v34;
  _QWORD v35[4];
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count **v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  float v44;
  __int128 v45;
  int v46;
  char v47;
  char v48;
  char v49;
  unint64_t v50;

  v24 = (int)a3;
  v50 = 0;
  v27 = geo::codec::multiSectionFeatureCharacteristicPoints(this, (GeoCodecsRoadFeature *)&v50, a3);
  if (v50)
  {
    v28 = 0;
    v29 = 0;
    while (*((_DWORD *)v27 + 25 * v28 + 2) != a4)
    {
      v28 = v29 + 1;
      v29 = v28;
      v30 = v28;
      if (v50 <= v28)
        goto LABEL_8;
    }
    v30 = v29;
  }
  else
  {
    v30 = 0;
    v28 = 0;
  }
LABEL_8:
  if (v28 == v50)
  {
    v31 = 0;
    v30 = 0;
  }
  else
  {
    v32 = v30 + 1;
    do
    {
      v31 = v32;
      if (v50 <= v32)
        break;
      v33 = *((_DWORD *)v27 + 25 * v32++ + 2);
    }
    while (v33 == a4);
  }
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_2;
  v35[3] = &unk_1E42EAEC0;
  v47 = a17;
  v48 = a8;
  v41 = a5;
  v42 = a6;
  v43 = a4;
  v44 = a9;
  v49 = a15;
  v38 = this;
  v39 = a7;
  v34 = a1[3];
  v45 = a1[4];
  v36 = a1[2];
  v37 = v34;
  v46 = v24;
  v40 = a16;
  md::splitRoadSectionByZ(a11, a14, (uint64_t)v27 + 100 * v30, v31 - v30, v35, a9, a10);
}

uint64_t ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  char v9[24];
  char v10;

  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1[5] + 8);
  v9[0] = 0;
  v10 = 0;
  md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::RibbonLayer((uint64_t)v4, a2, *(uint64_t **)(v5 + 64), a1 + 8, a1 + 10, v9);
  *v4 = &off_1E42956C8;
  v4[19] = 0;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v4;
  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1[7] + 8);
  v9[0] = 0;
  v10 = 0;
  result = md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::RibbonLayer(v6, a2, *(uint64_t **)(v7 + 64), a1 + 8, a1 + 10, v9);
  *v6 = &off_1E42935E8;
  v6[20] = 0;
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v6;
  return result;
}

void sub_19F483EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C4095CD5A37);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        v4 = (_QWORD *)v2[7];
        v5 = v2[6];
        if (v4 != v3)
        {
          do
          {
            v8 = (void (***)(_QWORD, uint64_t))*--v4;
            v7 = v8;
            *v4 = 0;
            if (v8)
            {
              (**v7)(v7, v5);
              {
                v10 = operator new();
                *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v10 + 24) = "VectorKitLabels";
                *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v10 = &off_1E42B5668;
                *(_QWORD *)(v10 + 8) = "VectorKitLabels";
                *(_OWORD *)(v10 + 72) = 0u;
                *(_OWORD *)(v10 + 88) = 0u;
                *(_OWORD *)(v10 + 104) = 0u;
                *(_OWORD *)(v10 + 120) = 0u;
                *(_OWORD *)(v10 + 136) = 0u;
                *(_OWORD *)(v10 + 152) = 0u;
                *(_OWORD *)(v10 + 168) = 0u;
                *(_OWORD *)(v10 + 184) = 0u;
                *(_OWORD *)(v10 + 200) = 0u;
                *(_OWORD *)(v10 + 216) = 0u;
                *(_OWORD *)(v10 + 232) = 0u;
                *(_QWORD *)(v10 + 248) = 0;
                v16 = v10;
                *(_OWORD *)(v10 + 56) = 0u;
                v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
                if ((_DWORD)v11)
                  geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
            }
          }
          while (v4 != v3);
          v5 = v2[6];
        }
        v2[7] = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[9] + 40))(v2[9], v5, v2[8] - v5);
      }
      v13 = (std::__shared_weak_count *)v2[3];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__shared_ptr_emplace<md::TrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TrafficTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *__copy_helper_block_ea8_64c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE80c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_64c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE80c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  void (***v67)(_QWORD);
  void (***v68)(_QWORD);
  unsigned __int8 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  unsigned __int8 v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t *v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t *v139;
  std::vector<unsigned int>::pointer begin;
  char *v141;
  int64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t *v148;
  int64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t *v166;
  _QWORD *v167;
  void (***v168)(_QWORD, uint64_t);
  void (***v169)(_QWORD, uint64_t);
  unsigned __int8 v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  void (***v175)(_QWORD, uint64_t);
  void (***v176)(_QWORD, uint64_t);
  unsigned __int8 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (***v181)(_QWORD);
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  std::vector<unsigned int>::pointer v185;
  char *v186;
  int64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  uint64_t *v194;
  int64_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  malloc_zone_t *v213;
  void (***v214)(_QWORD, uint64_t);
  void (***v215)(_QWORD, uint64_t);
  unsigned __int8 v216;
  uint64_t v217;
  geo::read_write_lock *v218;
  const char *v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  void (***v223)(_QWORD, uint64_t);
  void (***v224)(_QWORD, uint64_t);
  unsigned __int8 v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _OWORD *v246;
  __int128 *v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  _QWORD *v252;
  void (***v253)(_QWORD);
  void (***v254)(_QWORD);
  unsigned __int8 v255;
  uint64_t v256;
  unsigned __int8 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int8x16_t *v263;
  unint64_t v264;
  uint64_t v265;
  void **v266;
  uint64_t v267;
  void *v268;
  unint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  unint64_t v283;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  _QWORD *v297;
  _QWORD *v298;
  void (***v299)(_QWORD, uint64_t);
  void (***v300)(_QWORD, uint64_t);
  unsigned __int8 v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  void (***v305)(_QWORD, uint64_t);
  void (***v306)(_QWORD, uint64_t);
  unsigned __int8 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  void (***v314)(_QWORD, uint64_t);
  void (***v315)(_QWORD, uint64_t);
  unsigned __int8 v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  geo::read_write_lock *v322;
  const char *v323;
  malloc_zone_t *zone;
  unsigned __int8 v325;
  unsigned __int8 v326;
  unsigned __int8 v327;
  int v328;
  char v329;
  int64_t v330;
  char *v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;
  _QWORD *v337;
  _QWORD **v338;
  _QWORD **v339;
  char *v340;
  _QWORD *v341;
  _QWORD **v342;
  _QWORD **v343;
  unint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  unint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  _BYTE *v353;
  char *v354;
  unint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  _OWORD *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  gdc::GlobeTileGrid *v363;
  gdc::GlobeTileGrid *v364;
  gdc::GlobeTileGrid *v365;
  uint64_t v366;
  char *v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  gdc::GlobeTileGrid *v375;
  uint64_t v376;
  float *v377;
  float v378;
  unsigned int v379;
  float v380;
  unsigned int v381;
  float *v382;
  float v383;
  float v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  char *v390;
  unint64_t *v391;
  __int128 v392;
  unsigned __int8 v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  std::__shared_count v396;
  unsigned __int8 v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unsigned __int8 v401;
  uint64_t v402;
  unsigned __int8 v403;
  uint64_t v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t *v416;
  _QWORD *v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  _BYTE *v424;
  uint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  _OWORD *v429;
  uint64_t *v430;
  uint64_t v431;
  __int128 v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  _QWORD *v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *end;
  unint64_t *v459;
  unint64_t v460;
  _QWORD *v461;
  int v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  unsigned __int8 v466;
  int v467;
  uint64_t v468;
  geo::read_write_lock *v469;
  const char *v470;
  malloc_zone_t *v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  geo::read_write_lock *v475;
  const char *v476;
  malloc_zone_t *v477;
  uint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  uint64_t v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t **v490;
  uint64_t **v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  __int128 v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int *v507;
  unsigned int *v508;
  __int128 v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t *v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unsigned int v520;
  unint64_t v521;
  float v522;
  float *v523;
  float v524;
  uint64_t v525;
  uint64_t v526;
  float v527;
  float v528;
  float v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float v534;
  unint64_t v535;
  int v536;
  unint64_t v537;
  uint64_t v538;
  _WORD *v539;
  uint64_t v540;
  unint64_t v541;
  int16x4_t *v542;
  __int16 v543;
  int16x4_t v544;
  unint64_t v545;
  __int16 v546;
  __int16 v547;
  _WORD *v548;
  uint64_t v549;
  unint64_t v550;
  int64x2_t v551;
  int64x2_t v552;
  __int16 *v553;
  unint64_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int64x2_t v561;
  int64x2_t v562;
  unint64_t v563;
  unint64_t v564;
  unsigned __int8 v565;
  _QWORD *v566;
  _QWORD *v567;
  _QWORD *v568;
  void (***v569)(_QWORD, _QWORD *);
  void (***v570)(_QWORD, _QWORD *);
  unsigned __int8 v571;
  uint64_t v572;
  unsigned int *v573;
  unsigned int *value;
  std::vector<unsigned int>::pointer v575;
  int v576;
  int v577;
  unsigned int *v578;
  unsigned int *v579;
  unint64_t v580;
  unint64_t v581;
  _QWORD *v582;
  int v583;
  int v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t result;
  uint64_t v589;
  uint64_t *v593;
  uint64_t *v594;
  gdc::GlobeTileGrid **v595;
  void **v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  char *v603;
  const QuadTile *v604;
  uint64_t v605;
  uint64_t *v606;
  char *v607;
  uint64_t v608;
  char *v609;
  uint64_t *v610;
  uint64_t v611;
  _QWORD **v612;
  unint64_t v613;
  uint64_t **v614;
  uint64_t v615;
  void **v616;
  char *v617;
  uint64_t *__src;
  uint64_t *__srca;
  int64x2_t __srcb;
  std::vector<unsigned int> v621;
  void *v622;
  std::__shared_weak_count *v623;
  uint64_t v624;
  std::vector<unsigned int> __p;
  unsigned int *v626;
  __int16 v627;
  uint64_t v628;
  unint64_t v629;
  __int128 v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  float v635;
  uint64_t v636;
  int16x8x2_t v637;

  v636 = *MEMORY[0x1E0C80C00];
  v594 = a3;
  if (a3)
  {
    v8 = 0;
    v593 = 0;
    v600 = 0;
    while (1)
    {
      v10 = v8;
      v630 = 0uLL;
      {
        v318 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v318, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v12 = (unint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v631 = mdm::Allocator::instance(void)::alloc;
      v632 = 0;
      {
        v319 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v319, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v633 = mdm::Allocator::instance(void)::alloc;
      v634 = 0;
      v635 = 1.0;
      v14 = (uint64_t *)v594[6];
      v15 = (uint64_t *)v594[7];
      while (v14 != v15)
      {
        v16 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v14 + 88), *(float **)(*v14 + 72), 0);
        v17 = v16;
        v18 = v16;
        v6 = *((_QWORD *)&v630 + 1);
        if (*((_QWORD *)&v630 + 1))
        {
          v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v630 + 8));
          v19.i16[0] = vaddlv_u8(v19);
          if (v19.u32[0] > 1uLL)
          {
            v12 = v16;
            if (*((_QWORD *)&v630 + 1) <= (unint64_t)v16)
              v12 = (unint64_t)v16 % *((_QWORD *)&v630 + 1);
          }
          else
          {
            v12 = (DWORD2(v630) - 1) & v16;
          }
          v20 = *(uint64_t **)(v630 + 8 * v12);
          if (v20)
          {
            v21 = *v20;
            if (*v20)
            {
              if (v19.u32[0] < 2uLL)
              {
                while (1)
                {
                  v23 = *(_QWORD *)(v21 + 8);
                  if (v23 == v16)
                  {
                    if (*(_DWORD *)(v21 + 16) == v16)
                      goto LABEL_91;
                  }
                  else if ((v23 & (*((_QWORD *)&v630 + 1) - 1)) != v12)
                  {
                    goto LABEL_31;
                  }
                  v21 = *(_QWORD *)v21;
                  if (!v21)
                    goto LABEL_31;
                }
              }
              do
              {
                v22 = *(_QWORD *)(v21 + 8);
                if (v22 == v16)
                {
                  if (*(_DWORD *)(v21 + 16) == v16)
                    goto LABEL_91;
                }
                else
                {
                  if (v22 >= *((_QWORD *)&v630 + 1))
                    v22 %= *((_QWORD *)&v630 + 1);
                  if (v22 != v12)
                    break;
                }
                v21 = *(_QWORD *)v21;
              }
              while (v21);
            }
          }
        }
LABEL_31:
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v633 + 16))(v633, 56, 8);
        __p.__begin_ = (std::vector<unsigned int>::pointer)v21;
        __p.__end_ = (std::vector<unsigned int>::pointer)&v633;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = v18;
        *(_DWORD *)(v21 + 16) = v17;
        *(_QWORD *)(v21 + 32) = 0;
        *(_QWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        {
          v79 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v21 + 48) = mdm::Allocator::instance(void)::alloc;
        LOBYTE(__p.__end_cap_.__value_) = 1;
        v25 = (float)(v634 + 1);
        if (!v6 || (float)(v635 * (float)v6) < v25)
        {
          v26 = (v6 & (v6 - 1)) != 0;
          if (v6 < 3)
            v26 = 1;
          v27 = v26 | (2 * v6);
          v28 = vcvtps_u32_f32(v25 / v635);
          if (v27 <= v28)
            prime = v28;
          else
            prime = v27;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v6 = *((_QWORD *)&v630 + 1);
          if (prime <= *((_QWORD *)&v630 + 1))
          {
            if (prime < *((_QWORD *)&v630 + 1))
            {
              v40 = vcvtps_u32_f32((float)v634 / v635);
              if (*((_QWORD *)&v630 + 1) < 3uLL
                || (v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v630 + 8)),
                    v41.i16[0] = vaddlv_u8(v41),
                    v41.u32[0] > 1uLL))
              {
                v40 = std::__next_prime(v40);
              }
              else
              {
                v42 = 1 << -(char)__clz(v40 - 1);
                if (v40 >= 2)
                  v40 = v42;
              }
              if (prime <= v40)
                prime = v40;
              if (prime >= v6)
              {
                v6 = *((_QWORD *)&v630 + 1);
              }
              else
              {
                if (prime)
                  goto LABEL_44;
                v78 = v630;
                *(_QWORD *)&v630 = 0;
                if (v78)
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v631 + 40))(v631, v78, 8 * *((_QWORD *)&v630 + 1));
                v6 = 0;
                *((_QWORD *)&v630 + 1) = 0;
              }
            }
LABEL_68:
            if ((v6 & (v6 - 1)) != 0)
            {
              if (v6 <= v18)
                v12 = v18 % v6;
              else
                v12 = v18;
            }
            else
            {
              v12 = ((_DWORD)v6 - 1) & v18;
            }
            goto LABEL_81;
          }
LABEL_44:
          v30 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(*(_QWORD *)v631 + 16))(v631, 8 * prime, 8);
          v31 = v630;
          *(_QWORD *)&v630 = v30;
          if (v31)
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v631 + 40))(v631, v31, 8 * *((_QWORD *)&v630 + 1));
          v32 = 0;
          *((_QWORD *)&v630 + 1) = prime;
          do
            *(_QWORD *)(v630 + 8 * v32++) = 0;
          while (prime != v32);
          v33 = (_QWORD **)v632;
          if (!v632)
            goto LABEL_67;
          v34 = *(_QWORD *)(v632 + 8);
          v35 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v36 = v34 & v35;
            *(_QWORD *)(v630 + 8 * v36) = &v632;
            for (i = *v33; *v33; i = *v33)
            {
              v38 = i[1] & v35;
              if (v38 == v36)
              {
                v33 = (_QWORD **)i;
              }
              else if (*(_QWORD *)(v630 + 8 * v38))
              {
                *v33 = (_QWORD *)*i;
                v39 = 8 * v38;
                *i = **(_QWORD **)(v630 + v39);
                **(_QWORD **)(v630 + v39) = i;
              }
              else
              {
                *(_QWORD *)(v630 + 8 * v38) = v33;
                v33 = (_QWORD **)i;
                v36 = v38;
              }
            }
            goto LABEL_67;
          }
          if (v34 >= prime)
            v34 %= prime;
          *(_QWORD *)(v630 + 8 * v34) = &v632;
          v43 = *v33;
          if (!*v33)
          {
LABEL_67:
            v6 = prime;
            goto LABEL_68;
          }
          while (2)
          {
            v45 = v43[1];
            if (v45 >= prime)
              v45 %= prime;
            if (v45 != v34)
            {
              if (!*(_QWORD *)(v630 + 8 * v45))
              {
                *(_QWORD *)(v630 + 8 * v45) = v33;
LABEL_72:
                v33 = (_QWORD **)v43;
                v43 = (_QWORD *)*v43;
                v34 = v45;
                if (!v43)
                  goto LABEL_67;
                continue;
              }
              *v33 = (_QWORD *)*v43;
              v44 = 8 * v45;
              *v43 = **(_QWORD **)(v630 + v44);
              **(_QWORD **)(v630 + v44) = v43;
              v43 = v33;
            }
            break;
          }
          v45 = v34;
          goto LABEL_72;
        }
LABEL_81:
        v46 = *(uint64_t **)(v630 + 8 * v12);
        if (v46)
        {
          *(_QWORD *)v21 = *v46;
LABEL_89:
          *v46 = v21;
          goto LABEL_90;
        }
        *(_QWORD *)v21 = v632;
        v632 = v21;
        *(_QWORD *)(v630 + 8 * v12) = &v632;
        if (*(_QWORD *)v21)
        {
          v47 = *(_QWORD *)(*(_QWORD *)v21 + 8);
          if ((v6 & (v6 - 1)) != 0)
          {
            if (v47 >= v6)
              v47 %= v6;
          }
          else
          {
            v47 &= v6 - 1;
          }
          v46 = (uint64_t *)(v630 + 8 * v47);
          goto LABEL_89;
        }
LABEL_90:
        ++v634;
LABEL_91:
        v48 = *(_QWORD **)(v21 + 32);
        v49 = *(_QWORD *)(v21 + 40);
        if ((unint64_t)v48 < v49)
        {
          if (v48)
          {
            v50 = *v14;
            *v14 = 0;
            *v48 = v50;
          }
          v12 = (unint64_t)(v48 + 1);
          goto LABEL_9;
        }
        v51 = *(_QWORD *)(v21 + 24);
        v52 = ((uint64_t)v48 - v51) >> 3;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61)
          abort();
        v54 = v49 - v51;
        if (v54 >> 2 > v53)
          v53 = v54 >> 2;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 48) + 16))(*(_QWORD *)(v21 + 48), 8 * v55, 8);
          v57 = (_QWORD *)(v56 + 8 * v52);
          v58 = v56 + 8 * v55;
          if (v56)
          {
            v59 = *v14;
            *v14 = 0;
            *v57 = v59;
          }
        }
        else
        {
          v58 = 0;
          v57 = (_QWORD *)(8 * v52);
        }
        v12 = (unint64_t)(v57 + 1);
        v60 = *(_QWORD **)(v21 + 24);
        v61 = *(_QWORD *)(v21 + 32);
        if ((_QWORD *)v61 == v60)
        {
          *(_QWORD *)(v21 + 24) = v57;
          *(_QWORD *)(v21 + 32) = v12;
          v6 = *(_QWORD *)(v21 + 40);
          *(_QWORD *)(v21 + 40) = v58;
          goto LABEL_118;
        }
        v62 = v61 - (_QWORD)v60 - 8;
        if (v62 <= 0x47
          || (v63 = v62 >> 3, v61 - 8 * v63 - 8 < (unint64_t)v57) && (unint64_t)&v57[-v63 - 1] < v61)
        {
          v64 = *(_QWORD **)(v21 + 32);
          do
          {
LABEL_109:
            v65 = *--v64;
            *v64 = 0;
            *--v57 = v65;
          }
          while (v64 != v60);
          goto LABEL_110;
        }
        v71 = v63 + 1;
        v72 = (v63 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v64 = (_QWORD *)(v61 - 8 * v72);
        v73 = v57 - 2;
        v74 = (__int128 *)(v61 - 32);
        v75 = v72;
        do
        {
          v77 = *v74;
          v76 = v74[1];
          *v74 = 0uLL;
          v74[1] = 0uLL;
          v74 -= 2;
          *(v73 - 1) = v77;
          *v73 = v76;
          v73 -= 2;
          v75 -= 4;
        }
        while (v75);
        v57 -= v72;
        if (v71 != v72)
          goto LABEL_109;
LABEL_110:
        v61 = *(_QWORD *)(v21 + 24);
        v66 = *(_QWORD **)(v21 + 32);
        *(_QWORD *)(v21 + 24) = v57;
        *(_QWORD *)(v21 + 32) = v12;
        v6 = *(_QWORD *)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v58;
        while (v66 != (_QWORD *)v61)
        {
          v68 = (void (***)(_QWORD))*--v66;
          v67 = v68;
          *v66 = 0;
          if (v68)
          {
            (**v67)(v67);
            {
              v70 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v70, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v67, 104);
          }
        }
LABEL_118:
        if (v61)
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v21 + 48) + 40))(*(_QWORD *)(v21 + 48), v61, v6 - v61);
LABEL_9:
        *(_QWORD *)(v21 + 32) = v12;
        ++v14;
      }
      v80 = operator new();
      v81 = 0uLL;
      *(_OWORD *)(v80 + 144) = 0u;
      *(_QWORD *)v80 = &off_1E42AF188;
      *(_QWORD *)(v80 + 8) = 0;
      *(_QWORD *)(v80 + 64) = 0;
      *(_QWORD *)(v80 + 40) = 0;
      *(_QWORD *)(v80 + 48) = 0;
      *(_QWORD *)(v80 + 32) = "";
      *(_DWORD *)(v80 + 56) = 0;
      *(_DWORD *)(v80 + 72) = 1065353216;
      *(_OWORD *)(v80 + 80) = 0u;
      *(_OWORD *)(v80 + 96) = 0u;
      *(int64x2_t *)(v80 + 112) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v80 + 128) = 0;
      *(_QWORD *)(v80 + 16) = &off_1E42AF548;
      *(_BYTE *)(v80 + 136) = 1;
      *(_OWORD *)(v80 + 160) = 0u;
      *(_OWORD *)(v80 + 176) = 0u;
      if ((v82 & 1) == 0)
      {
        v81 = 0uLL;
        if (v320)
        {
          v321 = operator new();
          *(_QWORD *)(v321 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v321 + 24) = "GeoGL";
          *(_OWORD *)(v321 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v321 = &off_1E42B5668;
          *(_QWORD *)(v321 + 8) = "GeoGL";
          *(_OWORD *)(v321 + 72) = 0u;
          *(_OWORD *)(v321 + 88) = 0u;
          *(_OWORD *)(v321 + 104) = 0u;
          *(_OWORD *)(v321 + 120) = 0u;
          *(_OWORD *)(v321 + 136) = 0u;
          *(_OWORD *)(v321 + 152) = 0u;
          *(_OWORD *)(v321 + 168) = 0u;
          *(_OWORD *)(v321 + 184) = 0u;
          *(_OWORD *)(v321 + 200) = 0u;
          *(_OWORD *)(v321 + 216) = 0u;
          *(_OWORD *)(v321 + 232) = 0u;
          *(_QWORD *)(v321 + 248) = 0;
          *(_OWORD *)(v321 + 56) = 0u;
          v322 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v321 + 56), 0);
          if ((_DWORD)v322)
            geo::read_write_lock::logFailure(v322, (uint64_t)"initialization", v323);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v321 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v321 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v321;
          v81 = 0uLL;
        }
      }
      *(_QWORD *)(v80 + 192) = ggl::Allocator::instance(void)::alloc;
      *(_OWORD *)(v80 + 200) = v81;
      *(_OWORD *)(v80 + 216) = v81;
      *(_QWORD *)(v80 + 232) = 0;
      *(_QWORD *)(v80 + 240) = 32;
      v83 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
      *v83 = 0;
      v83[1] = 0;
      *(_QWORD *)(v80 + 224) = v83;
      *(_QWORD *)(v80 + 232) = v83;
      *(_QWORD *)(v80 + 256) = 0;
      *(_QWORD *)(v80 + 264) = 0;
      *(_QWORD *)(v80 + 248) = 0;
      *(_BYTE *)(v80 + 272) = 1;
      *(_QWORD *)v80 = &off_1E428C740;
      *(_QWORD *)(v80 + 280) = v594[2];
      v84 = v594[3];
      *(_QWORD *)(v80 + 288) = v84;
      if (v84)
      {
        v85 = (unint64_t *)(v84 + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = v594[4];
      *(_DWORD *)(v80 + 304) = *((_DWORD *)v594 + 10);
      *(_QWORD *)(v80 + 296) = v87;
      *(_QWORD *)v80 = &off_1E42956A8;
      *(_QWORD *)(v80 + 312) = 0;
      v88 = (_QWORD *)operator new();
      if ((v89 & 1) == 0
      {
        if ((v325 & 1) == 0
        {
          if ((v327 & 1) == 0
          {
            ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::OptimizedTraffic::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43C68 = 1;
        }
        ggl::OptimizedTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::typedReflection(void)::r;
        unk_1ECE395C0 = &ggl::OptimizedTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
        qword_1ECE395C8 = 0;
        if ((v326 & 1) == 0
        {
          ggl::OptimizedTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1ECE395F8 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE39600 = (uint64_t)ggl::OptimizedTraffic::Style::reflection(void)::reflection;
        }
        qword_1ECE395D0 = (uint64_t)&ggl::OptimizedTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
        unk_1ECE395D8 = xmmword_19FFB3410;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v88, (uint64_t)&ggl::OptimizedTraffic::BasePipelineSetup::typedReflection(void)::ref);
      *v88 = &off_1E42B8890;
      v90 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v90->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v90->__shared_owners_;
      v90->__shared_weak_owners_ = 0;
      v90->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19F0;
      v92 = ggl::BufferData::BufferData((uint64_t)&v90[1], qword_1EE5649A8, 2, 1, 6, 1);
      v90[9].__shared_owners_ = (uint64_t)ggl::OptimizedTraffic::Style::reflection(void)::reflection;
      v90[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9290;
      v93 = v88[8];
      *(_QWORD *)(v93 + 32) = v92;
      *(_QWORD *)(v93 + 40) = 0;
      v94 = v88[20];
      do
        v95 = __ldxr(p_shared_owners);
      while (__stxr(v95 + 1, p_shared_owners));
      v96 = *(std::__shared_weak_count **)(v94 + 40);
      *(_QWORD *)(v94 + 32) = v92;
      *(_QWORD *)(v94 + 40) = v90;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      do
        v99 = __ldaxr(p_shared_owners);
      while (__stlxr(v99 - 1, p_shared_owners));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      v100 = (uint64_t *)v88[8];
      v100[1] = 0;
      v101 = *a4;
      *v100 = *a4;
      v102 = (_QWORD *)v88[20];
      v103 = a4[1];
      v8 = v10;
      if (v103)
      {
        v104 = (unint64_t *)(v103 + 8);
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
      v106 = (std::__shared_weak_count *)v102[1];
      *v102 = v101;
      v102[1] = v103;
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = v88[8];
      *(_QWORD *)(v109 + 24) = 0;
      v110 = *a5;
      *(_QWORD *)(v109 + 16) = *a5;
      v111 = v88[20];
      v112 = a5[1];
      if (v112)
      {
        v113 = (unint64_t *)(v112 + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v115 = *(std::__shared_weak_count **)(v111 + 24);
      *(_QWORD *)(v111 + 16) = v110;
      *(_QWORD *)(v111 + 24) = v112;
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = *(_QWORD *)(v80 + 312);
      *(_QWORD *)(v80 + 312) = v88;
      if (v118)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
        v88 = *(_QWORD **)(v80 + 312);
      }
      *(_QWORD *)(v80 + 48) = v88;
      if (v600 < v593)
      {
        *v600 = v80;
        v119 = v600 + 1;
        goto LABEL_192;
      }
      v6 = v600 - v10;
      v120 = v6 + 1;
      if ((v6 + 1) >> 61)
        abort();
      if (((char *)v593 - (char *)v10) >> 2 > v120)
        v120 = ((char *)v593 - (char *)v10) >> 2;
      if ((unint64_t)((char *)v593 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
        v121 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v121 = v120;
      if (v121)
      {
        if (v121 >> 61)
LABEL_752:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v122 = (char *)operator new(8 * v121);
      }
      else
      {
        v122 = 0;
      }
      v123 = (uint64_t *)&v122[8 * v6];
      *v123 = v80;
      v124 = v123 + 1;
      v125 = v10;
      if (v600 != v10)
      {
        v126 = (char *)(v600 - 1) - (char *)v10;
        if (v126 >= 0x58)
        {
          if ((unint64_t)((char *)v10 - v122) >= 0x20)
          {
            v128 = (v126 >> 3) + 1;
            v127 = &v600[-(v128 & 0x3FFFFFFFFFFFFFFCLL)];
            v129 = &v122[8 * v6 - 16];
            v130 = v600 - 2;
            v131 = v128 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v132 = *(_OWORD *)v130;
              *((_OWORD *)v129 - 1) = *((_OWORD *)v130 - 1);
              *(_OWORD *)v129 = v132;
              v129 -= 32;
              v130 -= 4;
              v131 -= 4;
            }
            while (v131);
            v123 -= v128 & 0x3FFFFFFFFFFFFFFCLL;
            v125 = v10;
            if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_189;
          }
          else
          {
            v127 = v600;
            v125 = v10;
          }
        }
        else
        {
          v127 = v600;
          v125 = v10;
        }
        do
        {
          v133 = *--v127;
          *--v123 = v133;
        }
        while (v127 != v125);
      }
LABEL_189:
      v593 = (uint64_t *)&v122[8 * v121];
      if (v125)
        operator delete(v125);
      v8 = v123;
      v119 = v124;
LABEL_192:
      v600 = v119;
      __src = v8;
      v608 = v632;
      if (v632)
      {
        v134 = 0;
        v135 = 0;
        v136 = 0;
        while (1)
        {
          v137 = operator new();
          *(_QWORD *)(v137 + 96) = 0;
          *(_OWORD *)(v137 + 64) = 0u;
          *(_OWORD *)(v137 + 80) = 0u;
          *(_OWORD *)(v137 + 32) = 0u;
          *(_OWORD *)(v137 + 48) = 0u;
          *(_OWORD *)v137 = 0u;
          *(_OWORD *)(v137 + 16) = 0u;
          *(_BYTE *)(v137 + 48) = 1;
          *(_QWORD *)(v137 + 56) = 0;
          *(_QWORD *)(v137 + 64) = 0;
          *(_QWORD *)(v137 + 72) = 0;
          {
            v260 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v260, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          *(_QWORD *)(v137 + 80) = mdm::Allocator::instance(void)::alloc;
          *(_DWORD *)(v137 + 96) = 0;
          __p.__begin_ = (std::vector<unsigned int>::pointer)v137;
          if (v136 < (uint64_t *)v135)
          {
            __p.__begin_ = 0;
            *v136 = v137;
            v139 = v136 + 1;
            begin = __p.__begin_;
            if (!__p.__begin_)
              goto LABEL_252;
LABEL_240:
            v172 = (_QWORD *)*((_QWORD *)begin + 7);
            if (v172)
            {
              v173 = (_QWORD *)*((_QWORD *)begin + 8);
              v174 = *((_QWORD *)begin + 7);
              if (v173 != v172)
              {
                do
                {
                  v176 = (void (***)(_QWORD, uint64_t))*--v173;
                  v175 = v176;
                  *v173 = 0;
                  if (v176)
                  {
                    (**v175)(v175, v174);
                    if ((v177 & 1) == 0
                    {
                      v178 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v178, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v175, 104);
                  }
                }
                while (v173 != v172);
                v174 = *((_QWORD *)begin + 7);
              }
              *((_QWORD *)begin + 8) = v172;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)begin + 10) + 40))(*((_QWORD *)begin + 10), v174, *((_QWORD *)begin + 9) - v174);
            }
            MEMORY[0x1A1AF4E00](begin, 0x1020C4010FC18DELL);
            goto LABEL_252;
          }
          v141 = v135;
          v142 = (char *)v136 - (char *)v134;
          v143 = v136 - v134;
          v144 = v143 + 1;
          if ((unint64_t)(v143 + 1) >> 61)
            abort();
          v145 = v141 - (char *)v134;
          v146 = (v141 - (char *)v134) >> 2;
          if (v146 > v144)
            v144 = v146;
          v6 = v145 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v144;
          if (v6)
          {
            if (v6 >> 61)
              goto LABEL_752;
            v147 = (char *)operator new(8 * v6);
          }
          else
          {
            v147 = 0;
          }
          v148 = (uint64_t *)&v147[8 * v143];
          __p.__begin_ = 0;
          *v148 = v137;
          v139 = v148 + 1;
          v149 = (char *)v136 - (char *)v134;
          if (v136 != v134)
            break;
LABEL_237:
          v135 = &v147[8 * v6];
          if (v134)
            operator delete(v134);
          v134 = v148;
          begin = __p.__begin_;
          if (__p.__begin_)
            goto LABEL_240;
LABEL_252:
          *(_DWORD *)(*(v139 - 1) + 96) = *(_DWORD *)(v608 + 16);
          v179 = *(_QWORD *)(v608 + 24);
          v615 = *(_QWORD *)(v608 + 32);
          if (v179 != v615)
          {
            v180 = 0;
            while (1)
            {
              v181 = *(void (****)(_QWORD))v179;
              v182 = *(_QWORD *)(*(_QWORD *)v179 + 88);
              if ((unint64_t)(v182 + v180) <= 0x5999)
              {
                v6 = *(v139 - 1);
                goto LABEL_317;
              }
              v183 = operator new();
              *(_QWORD *)(v183 + 96) = 0;
              *(_OWORD *)(v183 + 64) = 0u;
              *(_OWORD *)(v183 + 80) = 0u;
              *(_OWORD *)(v183 + 32) = 0u;
              *(_OWORD *)(v183 + 48) = 0u;
              *(_OWORD *)v183 = 0u;
              *(_OWORD *)(v183 + 16) = 0u;
              *(_BYTE *)(v183 + 48) = 1;
              *(_QWORD *)(v183 + 56) = 0;
              *(_QWORD *)(v183 + 64) = 0;
              *(_QWORD *)(v183 + 72) = 0;
              {
                v259 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v259, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              *(_QWORD *)(v183 + 80) = mdm::Allocator::instance(void)::alloc;
              *(_DWORD *)(v183 + 96) = 0;
              __p.__begin_ = (std::vector<unsigned int>::pointer)v183;
              if (v139 >= (uint64_t *)v135)
                break;
              __p.__begin_ = 0;
              *v139++ = v183;
              v185 = __p.__begin_;
              if (__p.__begin_)
                goto LABEL_304;
LABEL_316:
              v180 = 0;
              v6 = *(v139 - 1);
              *(_DWORD *)(v6 + 96) = *(_DWORD *)(v608 + 16);
              v181 = *(void (****)(_QWORD))v179;
              v182 = *(_QWORD *)(*(_QWORD *)v179 + 88);
LABEL_317:
              *(_QWORD *)v179 = 0;
              v227 = *(_QWORD **)(v6 + 64);
              v228 = *(_QWORD *)(v6 + 72);
              if ((unint64_t)v227 < v228)
              {
                if (v227)
                {
                  *v227 = v181;
                  v181 = 0;
                }
                v229 = v227 + 1;
                goto LABEL_354;
              }
              v230 = *(_QWORD *)(v6 + 56);
              v231 = ((uint64_t)v227 - v230) >> 3;
              v232 = v231 + 1;
              if ((unint64_t)(v231 + 1) >> 61)
                abort();
              v233 = v228 - v230;
              if (v233 >> 2 > v232)
                v232 = v233 >> 2;
              if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF8)
                v234 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v234 = v232;
              if (v234)
              {
                v235 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 16))(*(_QWORD *)(v6 + 80), 8 * v234, 8);
                v236 = (_QWORD *)(v235 + 8 * v231);
                v237 = v235 + 8 * v234;
                if (v235)
                {
                  *v236 = v181;
                  v181 = 0;
                }
              }
              else
              {
                v237 = 0;
                v236 = (_QWORD *)(8 * v231);
              }
              v229 = v236 + 1;
              v238 = *(_QWORD **)(v6 + 56);
              v239 = *(_QWORD *)(v6 + 64);
              if ((_QWORD *)v239 == v238)
              {
                *(_QWORD *)(v6 + 56) = v236;
                *(_QWORD *)(v6 + 64) = v229;
                v611 = *(_QWORD *)(v6 + 72);
                *(_QWORD *)(v6 + 72) = v237;
                if (!v239)
                  goto LABEL_354;
                goto LABEL_353;
              }
              v240 = v239 - (_QWORD)v238 - 8;
              v606 = v134;
              if (v240 <= 0x47
                || ((v241 = v240 >> 3, v239 - 8 * v241 - 8 < (unint64_t)v236)
                  ? (_CF = (unint64_t)&v236[-v241 - 1] >= v239)
                  : (_CF = 1),
                    !_CF))
              {
                v245 = *(_QWORD **)(v6 + 64);
                do
                {
LABEL_343:
                  v251 = *--v245;
                  *v245 = 0;
                  *--v236 = v251;
                }
                while (v245 != v238);
                goto LABEL_344;
              }
              v243 = v241 + 1;
              v244 = (v241 + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v245 = (_QWORD *)(v239 - 8 * v244);
              v246 = v236 - 2;
              v247 = (__int128 *)(v239 - 32);
              v248 = v244;
              do
              {
                v250 = *v247;
                v249 = v247[1];
                *v247 = 0uLL;
                v247[1] = 0uLL;
                v247 -= 2;
                *(v246 - 1) = v250;
                *v246 = v249;
                v246 -= 2;
                v248 -= 4;
              }
              while (v248);
              v236 -= v244;
              if (v243 != v244)
                goto LABEL_343;
LABEL_344:
              v239 = *(_QWORD *)(v6 + 56);
              v252 = *(_QWORD **)(v6 + 64);
              *(_QWORD *)(v6 + 56) = v236;
              *(_QWORD *)(v6 + 64) = v229;
              v611 = *(_QWORD *)(v6 + 72);
              *(_QWORD *)(v6 + 72) = v237;
              if (v252 == (_QWORD *)v239)
              {
                v134 = v606;
                if (!v239)
                  goto LABEL_354;
              }
              else
              {
                v603 = v135;
                do
                {
                  v254 = (void (***)(_QWORD))*--v252;
                  v253 = v254;
                  *v252 = 0;
                  if (v254)
                  {
                    (**v253)(v253);
                    if ((v255 & 1) == 0
                    {
                      v256 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v256, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v253, 104);
                  }
                }
                while (v252 != (_QWORD *)v239);
                v134 = v606;
                v135 = v603;
                if (!v239)
                  goto LABEL_354;
              }
LABEL_353:
              (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v239, v611 - v239);
LABEL_354:
              *(_QWORD *)(v6 + 64) = v229;
              v8 = __src;
              if (v181)
              {
                (**v181)(v181);
                {
                  v258 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v258, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v181, 104);
              }
              v180 += v182;
              v179 += 8;
              if (v179 == v615)
                goto LABEL_195;
            }
            v186 = v135;
            v187 = (char *)v139 - (char *)v134;
            v188 = v139 - v134;
            v189 = v188 + 1;
            if ((unint64_t)(v188 + 1) >> 61)
              abort();
            v190 = v186 - (char *)v134;
            v191 = (v186 - (char *)v134) >> 2;
            if (v191 > v189)
              v189 = v191;
            if (v190 >= 0x7FFFFFFFFFFFFFF8)
              v192 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v192 = v189;
            if (v192)
            {
              if (v192 >> 61)
                goto LABEL_752;
              v193 = (char *)operator new(8 * v192);
            }
            else
            {
              v193 = 0;
            }
            v194 = (uint64_t *)&v193[8 * v188];
            __p.__begin_ = 0;
            *v194 = v183;
            v610 = v194 + 1;
            v195 = (char *)v139 - (char *)v134;
            if (v139 != v134)
            {
              v196 = v195 - 8;
              if ((unint64_t)(v195 - 8) < 0x138)
              {
                v197 = v139;
                goto LABEL_275;
              }
              v199 = v196 & 0xFFFFFFFFFFFFFFF8;
              if ((uint64_t *)((char *)v139 - (v196 & 0xFFFFFFFFFFFFFFF8) - 8) > v139 - 1)
              {
                v197 = v139;
                goto LABEL_275;
              }
              if (&v193[v187 - 8 - v199] > &v193[v187 - 8])
              {
                v197 = v139;
                goto LABEL_275;
              }
              v200 = v196 >> 3;
              if (&v139[-v200 - 1] < v194)
              {
                v201 = (unint64_t)&v193[v187 - v199 - 8];
                v197 = v139;
                if (v201 < (unint64_t)v139)
                  goto LABEL_763;
              }
              v202 = v200 + 1;
              v197 = &v139[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
              v203 = &v193[8 * v188 - 16];
              v204 = v139 - 4;
              v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v207 = *(_OWORD *)v204;
                v206 = *((_OWORD *)v204 + 1);
                *(_OWORD *)v204 = 0uLL;
                *((_OWORD *)v204 + 1) = 0uLL;
                v204 -= 4;
                *((_OWORD *)v203 - 1) = v207;
                *(_OWORD *)v203 = v206;
                v203 -= 32;
                v205 -= 4;
              }
              while (v205);
              v194 -= v202 & 0x3FFFFFFFFFFFFFFCLL;
              if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_763:
                do
                {
LABEL_275:
                  v198 = *--v197;
                  *v197 = 0;
                  *--v194 = v198;
                }
                while (v197 != v134);
              }
              do
              {
                v210 = *--v139;
                v209 = v210;
                *v139 = 0;
                if (v210)
                {
                  v211 = *(_QWORD **)(v209 + 56);
                  if (v211)
                  {
                    v212 = *(_QWORD **)(v209 + 64);
                    v208 = *(_QWORD *)(v209 + 56);
                    if (v212 != v211)
                    {
                      do
                      {
                        v215 = (void (***)(_QWORD, uint64_t))*--v212;
                        v214 = v215;
                        *v212 = 0;
                        if (v215)
                        {
                          (**v214)(v214, v208);
                          if ((v216 & 1) == 0
                          {
                            v217 = operator new();
                            *(_QWORD *)(v217 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v217 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v217 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v217 = &off_1E42B5668;
                            *(_QWORD *)(v217 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v217 + 72) = 0u;
                            *(_OWORD *)(v217 + 88) = 0u;
                            *(_OWORD *)(v217 + 104) = 0u;
                            *(_OWORD *)(v217 + 120) = 0u;
                            *(_OWORD *)(v217 + 136) = 0u;
                            *(_OWORD *)(v217 + 152) = 0u;
                            *(_OWORD *)(v217 + 168) = 0u;
                            *(_OWORD *)(v217 + 184) = 0u;
                            *(_OWORD *)(v217 + 200) = 0u;
                            *(_OWORD *)(v217 + 216) = 0u;
                            *(_OWORD *)(v217 + 232) = 0u;
                            *(_QWORD *)(v217 + 248) = 0;
                            v605 = v217;
                            *(_OWORD *)(v217 + 56) = 0u;
                            v218 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v217 + 56), 0);
                            if ((_DWORD)v218)
                              geo::read_write_lock::logFailure(v218, (uint64_t)"initialization", v219);
                            v213 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v605 + 48) = v213;
                            malloc_set_zone_name(v213, "VectorKitLabels");
                            *(_QWORD *)(v605 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v605;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v214, 104);
                        }
                      }
                      while (v212 != v211);
                      v208 = *(_QWORD *)(v209 + 56);
                    }
                    *(_QWORD *)(v209 + 64) = v211;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v209 + 80) + 40))(*(_QWORD *)(v209 + 80), v208, *(_QWORD *)(v209 + 72) - v208);
                  }
                  MEMORY[0x1A1AF4E00](v209, 0x1020C4010FC18DELL);
                }
              }
              while (v139 != v134);
            }
            v135 = &v193[8 * v192];
            if (v134)
              operator delete(v134);
            v134 = v194;
            v139 = v610;
            v185 = __p.__begin_;
            if (!__p.__begin_)
              goto LABEL_316;
LABEL_304:
            v220 = (_QWORD *)*((_QWORD *)v185 + 7);
            if (v220)
            {
              v221 = (_QWORD *)*((_QWORD *)v185 + 8);
              v222 = *((_QWORD *)v185 + 7);
              if (v221 != v220)
              {
                do
                {
                  v224 = (void (***)(_QWORD, uint64_t))*--v221;
                  v223 = v224;
                  *v221 = 0;
                  if (v224)
                  {
                    (**v223)(v223, v222);
                    if ((v225 & 1) == 0
                    {
                      v226 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v226, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v223, 104);
                  }
                }
                while (v221 != v220);
                v222 = *((_QWORD *)v185 + 7);
              }
              *((_QWORD *)v185 + 8) = v220;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v185 + 10) + 40))(*((_QWORD *)v185 + 10), v222, *((_QWORD *)v185 + 9) - v222);
            }
            MEMORY[0x1A1AF4E00](v185, 0x1020C4010FC18DELL);
            goto LABEL_316;
          }
          v8 = __src;
LABEL_195:
          v136 = v139;
          v608 = *(_QWORD *)v608;
          if (!v608)
            goto LABEL_371;
        }
        v150 = v149 - 8;
        if ((unint64_t)(v149 - 8) < 0x138)
        {
          v151 = v136;
          goto LABEL_213;
        }
        v153 = v150 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v136 - (v150 & 0xFFFFFFFFFFFFFFF8) - 8) > v136 - 1)
        {
          v151 = v136;
          goto LABEL_213;
        }
        if (&v147[v142 - 8 - v153] > &v147[v142 - 8])
        {
          v151 = v136;
          goto LABEL_213;
        }
        v154 = v150 >> 3;
        if (&v136[-v154 - 1] < v148)
        {
          v155 = (unint64_t)&v147[v142 - v153 - 8];
          v151 = v136;
          if (v155 < (unint64_t)v136)
            goto LABEL_764;
        }
        v156 = v154 + 1;
        v151 = &v136[-(v156 & 0x3FFFFFFFFFFFFFFCLL)];
        v157 = &v147[8 * v143 - 16];
        v158 = v136 - 4;
        v159 = v156 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v161 = *(_OWORD *)v158;
          v160 = *((_OWORD *)v158 + 1);
          *(_OWORD *)v158 = 0uLL;
          *((_OWORD *)v158 + 1) = 0uLL;
          v158 -= 4;
          *((_OWORD *)v157 - 1) = v161;
          *(_OWORD *)v157 = v160;
          v157 -= 32;
          v159 -= 4;
        }
        while (v159);
        v148 -= v156 & 0x3FFFFFFFFFFFFFFCLL;
        if (v156 != (v156 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_764:
          do
          {
LABEL_213:
            v152 = *--v151;
            *v151 = 0;
            *--v148 = v152;
          }
          while (v151 != v134);
        }
        do
        {
          v164 = *--v136;
          v163 = v164;
          *v136 = 0;
          if (v164)
          {
            v165 = *(_QWORD **)(v163 + 56);
            if (v165)
            {
              v166 = v134;
              v167 = *(_QWORD **)(v163 + 64);
              v162 = *(_QWORD *)(v163 + 56);
              if (v167 != v165)
              {
                do
                {
                  v169 = (void (***)(_QWORD, uint64_t))*--v167;
                  v168 = v169;
                  *v167 = 0;
                  if (v169)
                  {
                    (**v168)(v168, v162);
                    if ((v170 & 1) == 0
                    {
                      v171 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v171, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v168, 104);
                  }
                }
                while (v167 != v165);
                v162 = *(_QWORD *)(v163 + 56);
              }
              *(_QWORD *)(v163 + 64) = v165;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v163 + 80) + 40))(*(_QWORD *)(v163 + 80), v162, *(_QWORD *)(v163 + 72) - v162);
              v134 = v166;
            }
            MEMORY[0x1A1AF4E00](v163, 0x1020C4010FC18DELL);
          }
        }
        while (v136 != v134);
        goto LABEL_237;
      }
      v139 = 0;
      v134 = 0;
LABEL_371:
      v261 = *(v600 - 1);
      v262 = *(_QWORD *)(v261 + 248);
      v263 = *(int8x16_t **)(v261 + 256);
      v264 = 126 - 2 * __clz(((uint64_t)v263->i64 - v262) >> 3);
      if (v263 == (int8x16_t *)v262)
        v265 = 0;
      else
        v265 = v264;
      std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v262, v263, v265, 1);
      v266 = (void **)v134;
      if (v134 == v139)
      {
        if (!v139)
          goto LABEL_4;
      }
      else
      {
        do
        {
          v6 = *(v600 - 1);
          v268 = *v266;
          *v266 = 0;
          v622 = v268;
          v270 = *(_QWORD **)(v6 + 256);
          v269 = *(_QWORD *)(v6 + 264);
          if ((unint64_t)v270 >= v269)
          {
            v272 = *(_QWORD *)(v6 + 248);
            v273 = (char *)v270 - v272;
            v274 = ((uint64_t)v270 - v272) >> 3;
            if ((unint64_t)(v274 + 1) >> 61)
              abort();
            v616 = v266;
            v275 = v269 - v272;
            v276 = v275 >> 2;
            if (v275 >> 2 <= (unint64_t)(v274 + 1))
              v276 = v274 + 1;
            if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8)
              v277 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v277 = v276;
            if (v277)
            {
              if (v277 >> 61)
                goto LABEL_752;
              v278 = (char *)operator new(8 * v277);
            }
            else
            {
              v278 = 0;
            }
            v279 = &v278[8 * v274];
            v280 = &v278[8 * v277];
            v622 = 0;
            *(_QWORD *)v279 = v268;
            v271 = v279 + 8;
            v281 = *(char **)(v6 + 248);
            v282 = *(char **)(v6 + 256);
            if (v282 == v281)
            {
              *(_QWORD *)(v6 + 248) = v279;
              *(_QWORD *)(v6 + 256) = v271;
              *(_QWORD *)(v6 + 264) = v280;
            }
            else
            {
              v283 = v282 - v281 - 8;
              if (v283 <= 0x77)
                goto LABEL_765;
              if (&v282[-(v283 & 0xFFFFFFFFFFFFFFF8) - 8] < v279
                && &v273[(_QWORD)v278 - (v283 & 0xFFFFFFFFFFFFFFF8) - 8] < v282)
              {
                goto LABEL_765;
              }
              v285 = (v283 >> 3) + 1;
              v286 = &v278[8 * v274 - 16];
              v287 = v282 - 32;
              v288 = v285 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v290 = *(_OWORD *)v287;
                v289 = *((_OWORD *)v287 + 1);
                *(_OWORD *)v287 = 0uLL;
                *((_OWORD *)v287 + 1) = 0uLL;
                v287 -= 32;
                *((_OWORD *)v286 - 1) = v290;
                *(_OWORD *)v286 = v289;
                v286 -= 32;
                v288 -= 4;
              }
              while (v288);
              v279 -= 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
              v282 -= 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
              if (v285 != (v285 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_765:
                do
                {
                  v291 = *((_QWORD *)v282 - 1);
                  v282 -= 8;
                  *(_QWORD *)v282 = 0;
                  *((_QWORD *)v279 - 1) = v291;
                  v279 -= 8;
                }
                while (v282 != v281);
              }
              v282 = *(char **)(v6 + 248);
              v292 = *(char **)(v6 + 256);
              *(_QWORD *)(v6 + 248) = v279;
              *(_QWORD *)(v6 + 256) = v271;
              *(_QWORD *)(v6 + 264) = v280;
              while (v292 != v282)
              {
                v295 = *((_QWORD *)v292 - 1);
                v292 -= 8;
                v294 = v295;
                *(_QWORD *)v292 = 0;
                if (v295)
                {
                  v296 = v134;
                  v297 = *(_QWORD **)(v294 + 56);
                  if (v297)
                  {
                    v298 = *(_QWORD **)(v294 + 64);
                    v293 = *(_QWORD *)(v294 + 56);
                    if (v298 != v297)
                    {
                      do
                      {
                        v300 = (void (***)(_QWORD, uint64_t))*--v298;
                        v299 = v300;
                        *v298 = 0;
                        if (v300)
                        {
                          (**v299)(v299, v293);
                          if ((v301 & 1) == 0
                          {
                            v302 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v302, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v299, 104);
                        }
                      }
                      while (v298 != v297);
                      v293 = *(_QWORD *)(v294 + 56);
                    }
                    *(_QWORD *)(v294 + 64) = v297;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v294 + 80) + 40))(*(_QWORD *)(v294 + 80), v293, *(_QWORD *)(v294 + 72) - v293);
                  }
                  MEMORY[0x1A1AF4E00](v294, 0x1020C4010FC18DELL);
                  v134 = v296;
                }
              }
            }
            if (v282)
              operator delete(v282);
            v266 = v616;
          }
          else
          {
            v622 = 0;
            *v270 = v268;
            v271 = v270 + 1;
          }
          *(_QWORD *)(v6 + 256) = v271;
          v303 = v622;
          v622 = 0;
          if (v303)
          {
            v304 = v303[7];
            if (v304)
            {
              v6 = v303[8];
              v267 = v303[7];
              if (v6 != v304)
              {
                do
                {
                  v306 = *(void (****)(_QWORD, uint64_t))(v6 - 8);
                  v6 -= 8;
                  v305 = v306;
                  *(_QWORD *)v6 = 0;
                  if (v306)
                  {
                    (**v305)(v305, v267);
                    if ((v307 & 1) == 0
                    {
                      v308 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v308, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v305, 104);
                  }
                }
                while (v6 != v304);
                v267 = v303[7];
              }
              v303[8] = v304;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v303[10] + 40))(v303[10], v267, v303[9] - v267);
            }
            MEMORY[0x1A1AF4E00](v303, 0x1020C4010FC18DELL);
          }
          ++v266;
          v8 = __src;
        }
        while (v266 != (void **)v139);
        if (!v134)
          goto LABEL_4;
        do
        {
          v311 = *--v139;
          v310 = v311;
          *v139 = 0;
          if (v311)
          {
            v312 = *(_QWORD **)(v310 + 56);
            if (v312)
            {
              v313 = *(_QWORD **)(v310 + 64);
              v309 = *(_QWORD *)(v310 + 56);
              if (v313 != v312)
              {
                do
                {
                  v315 = (void (***)(_QWORD, uint64_t))*--v313;
                  v314 = v315;
                  *v313 = 0;
                  if (v315)
                  {
                    (**v314)(v314, v309);
                    if ((v316 & 1) == 0
                    {
                      v317 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v317, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v314, 104);
                  }
                }
                while (v313 != v312);
                v309 = *(_QWORD *)(v310 + 56);
              }
              *(_QWORD *)(v310 + 64) = v312;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v310 + 80) + 40))(*(_QWORD *)(v310 + 80), v309, *(_QWORD *)(v310 + 72) - v309);
            }
            MEMORY[0x1A1AF4E00](v310, 0x1020C4010FC18DELL);
            v8 = __src;
          }
        }
        while (v139 != v134);
      }
      operator delete(v134);
LABEL_4:
      std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v630);
      v9 = a1;
      v594 = (uint64_t *)*v594;
      if (!v594)
        goto LABEL_469;
    }
  }
  v9 = a1;
  v8 = 0;
  v600 = 0;
LABEL_469:
  __srca = v8;
  v328 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v329 = *a6;
    v7 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v329 = 0;
  }
  *(_QWORD *)v9 = &off_1E42AF3C8;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  v330 = (char *)v600 - (char *)__srca;
  if (v600 == __srca)
  {
    v607 = 0;
    v333 = 0;
  }
  else
  {
    if (v330 < 0)
      abort();
    v331 = (char *)operator new((char *)v600 - (char *)__srca);
    *(_QWORD *)(v9 + 8) = v331;
    *(_QWORD *)(v9 + 16) = v331;
    v332 = &v331[8 * (v330 >> 3)];
    *(_QWORD *)(v9 + 24) = v332;
    v333 = v331;
    memcpy(v331, __srca, v330);
    v607 = v332;
    *(_QWORD *)(v9 + 16) = v332;
  }
  *(_OWORD *)(v9 + 32) = 0u;
  *(_QWORD *)(v9 + 72) = 0;
  *(_BYTE *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  *(_OWORD *)(v9 + 48) = 0u;
  v596 = (void **)(v9 + 32);
  *(_BYTE *)(v9 + 64) = 0;
  if (v328)
  {
    *(_BYTE *)(v9 + 80) = v329;
    *(_BYTE *)(v9 + 81) = v6;
    *(_QWORD *)(v9 + 84) = v7;
    *(_BYTE *)(v9 + 104) = 1;
  }
  v595 = (gdc::GlobeTileGrid **)(v9 + 72);
  if (v333 == v607)
  {
    v335 = 0;
    v336 = 0;
    goto LABEL_545;
  }
  v334 = v333;
  v604 = (const QuadTile *)(v9 + 80);
  v335 = 0;
  v336 = 0;
  v617 = 0;
  while (2)
  {
    v609 = v334;
    v337 = *(_QWORD **)v334;
    v337[1] = v9;
    v339 = (_QWORD **)v337[31];
    v338 = (_QWORD **)v337[32];
    v612 = v338;
    while (v339 != v338)
    {
      v341 = *v339;
      v341[1] = **v339;
      v341[3] = v341[2];
      v341[5] = v341[4];
      v630 = 0uLL;
      v631 = 0;
      memset(&__p, 0, sizeof(__p));
      v343 = (_QWORD **)v341[7];
      v342 = (_QWORD **)v341[8];
      if (v343 != v342)
      {
        do
        {
          v347 = *v343;
          v622 = (void *)1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v347, &v630, &__p, (uint64_t *)&v622);
          if ((unint64_t)v622 >= 2)
          {
            v348 = 4 * ((uint64_t)v622 - 1);
            if (v348 < 0x10000)
            {
              v344 = v347[1] + v348;
              v345 = v347[3] + 6 * ((uint64_t)v622 - 1);
            }
            else
            {
              v344 = v347[1];
              v345 = v347[3];
            }
            v347[2] = v344;
            v347[4] = v345;
            v347[6] = v347[5];
          }
          v346 = *v343++;
          v341[1] = v346[2] + v341[1] - v346[1];
          v341[3] = v346[4] + v341[3] - v346[3];
          v341[5] = v346[6] + v341[5] - v346[5];
        }
        while (v343 != v342);
        if (__p.__begin_)
          operator delete(__p.__begin_);
      }
      if ((_QWORD)v630)
        operator delete((void *)v630);
      v349 = *v339;
      v9 = a1;
      if (v336 < v617)
      {
        *(_QWORD *)v336 = v349;
        v340 = v336 + 8;
        goto LABEL_483;
      }
      v350 = (v336 - v335) >> 3;
      v351 = v350 + 1;
      if ((unint64_t)(v350 + 1) >> 61)
        abort();
      if ((v617 - v335) >> 2 > v351)
        v351 = (v617 - v335) >> 2;
      if ((unint64_t)(v617 - v335) >= 0x7FFFFFFFFFFFFFF8)
        v352 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v352 = v351;
      if (v352)
      {
        if (v352 >> 61)
          goto LABEL_752;
        v353 = operator new(8 * v352);
      }
      else
      {
        v353 = 0;
      }
      v354 = &v353[8 * v350];
      *(_QWORD *)v354 = v349;
      v340 = v354 + 8;
      if (v336 != v335)
      {
        v355 = v336 - 8 - v335;
        if (v355 < 0x168
          || &v353[v336 - v335 - 8 - (v355 & 0xFFFFFFFFFFFFFFF8)] > &v353[v336 - v335 - 8]
          || &v336[-(v355 & 0xFFFFFFFFFFFFFFF8) - 8] > v336 - 8
          || (unint64_t)(v335 - v353) < 0x20)
        {
          v356 = v336;
        }
        else
        {
          v358 = (v355 >> 3) + 1;
          v356 = &v336[-8 * (v358 & 0x3FFFFFFFFFFFFFFCLL)];
          v359 = &v353[8 * v350 - 16];
          v360 = v336 - 16;
          v361 = v358 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v362 = *(_OWORD *)v360;
            *(v359 - 1) = *((_OWORD *)v360 - 1);
            *v359 = v362;
            v359 -= 2;
            v360 -= 32;
            v361 -= 4;
          }
          while (v361);
          v354 -= 8 * (v358 & 0x3FFFFFFFFFFFFFFCLL);
          if (v358 == (v358 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_512;
        }
        do
        {
          v357 = *((_QWORD *)v356 - 1);
          v356 -= 8;
          *((_QWORD *)v354 - 1) = v357;
          v354 -= 8;
        }
        while (v356 != v335);
      }
LABEL_512:
      v617 = &v353[8 * v352];
      if (v335)
        operator delete(v335);
      v335 = v354;
      v9 = a1;
LABEL_483:
      ++v339;
      v336 = v340;
      v338 = v612;
    }
    v334 = v609 + 8;
    if (v609 + 8 != v607)
      continue;
    break;
  }
  if (!*(_BYTE *)(v9 + 64))
    goto LABEL_545;
  v363 = (gdc::GlobeTileGrid *)operator new();
  v364 = v363;
  if (*(_BYTE *)(v9 + 104))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v363, v604);
    v365 = *v595;
    *v595 = v364;
    if (v365)
    {
      v366 = *((_QWORD *)v365 + 323);
      if (v366)
        MEMORY[0x1A1AF4DE8](v366, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v365, 0x1020C4007FF0C4BLL);
      v364 = *v595;
    }
    *((_QWORD *)v364 + 323) = operator new[]();
    if (v335 != v336)
    {
      v367 = v335;
      do
      {
        v368 = *(uint64_t **)(*(_QWORD *)v367 + 56);
        v369 = *(uint64_t **)(*(_QWORD *)v367 + 64);
        while (v368 != v369)
        {
          v370 = *v368;
          v371 = *(_QWORD *)(*v368 + 80);
          if (v371)
          {
            v372 = *(_QWORD *)(v370 + 88);
            if (v372)
            {
              v373 = 0;
              v374 = *(_QWORD *)(v370 + 72);
              v375 = *v595;
              v376 = *((_QWORD *)*v595 + 323);
              v377 = (float *)(v374 + 4);
              do
              {
                v378 = *((float *)v375 + 648) * *(float *)(v371 + 4 * v373);
                v379 = vcvts_n_u32_f32(*(v377 - 1), 2uLL);
                if (v379 >= 3)
                  v379 = 3;
                v380 = *v377;
                v377 += 2;
                v381 = vcvts_n_u32_f32(v380, 2uLL);
                if (v381 >= 3)
                  v381 = 3;
                v382 = (float *)(v376 + 8 * (v379 | (4 * v381)));
                v383 = fminf(v378, *v382);
                v384 = fmaxf(v382[1], v378);
                *v382 = v383;
                v382[1] = v384;
                ++v373;
              }
              while (v372 > v373);
            }
          }
          ++v368;
        }
        v367 += 8;
      }
      while (v367 != v336);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v595);
LABEL_545:
    v385 = 0;
    v386 = 0;
    v387 = 0;
    v388 = 0;
    v389 = (v336 - v335) >> 3;
    v598 = v389;
    while (2)
    {
      if (v386 == v389
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v335[8 * v386] + 8) + v388 - **(_QWORD **)&v335[8 * v386]) >= 0x10000)
      {
        v613 = v386;
        v390 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v390 + 1) = 0;
        v391 = (unint64_t *)(v390 + 8);
        *((_QWORD *)v390 + 2) = 0;
        *(_QWORD *)v390 = &off_1E42DFFE8;
        *((_QWORD *)v390 + 3) = &off_1E42B5748;
        *((_QWORD *)v390 + 4) = 48;
        *((_DWORD *)v390 + 10) = 1;
        *((_QWORD *)v390 + 6) = 0;
        *((_QWORD *)v390 + 7) = 0;
        *((_QWORD *)v390 + 8) = 0;
        *((_QWORD *)v390 + 9) = 48 * v388;
        v392 = 0uLL;
        *((_OWORD *)v390 + 5) = 0u;
        *((_OWORD *)v390 + 6) = 0u;
        *((_QWORD *)v390 + 14) = 0;
        if ((v393 & 1) == 0)
        {
          v392 = 0uLL;
          if (v462)
          {
            v463 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v463, "GeoGL", 0xA3D02C1100000005);
            v392 = 0uLL;
          }
        }
        *((_QWORD *)v390 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v390 + 16) = 0;
        *((_OWORD *)v390 + 11) = v392;
        *((_OWORD *)v390 + 12) = v392;
        *((_QWORD *)v390 + 26) = 0;
        *((_QWORD *)v390 + 27) = -1;
        *((_OWORD *)v390 + 10) = v392;
        *((_OWORD *)v390 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v390 + 34) = 0;
        *((_QWORD *)v390 + 3) = &off_1E42B7CA0;
        *((_QWORD *)v390 + 29) = "BatchType/VData";
        *((_QWORD *)v390 + 30) = &ggl::OptimizedTraffic::defaultVboReflection;
        *((_QWORD *)v390 + 28) = &unk_1E42B7CC0;
        __p.__begin_ = (std::vector<unsigned int>::pointer)(v390 + 24);
        __p.__end_ = (std::vector<unsigned int>::pointer)v390;
        v394 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v394->__shared_owners_ = 0;
        v395 = (unint64_t *)&v394->__shared_owners_;
        v394->__shared_weak_owners_ = 0;
        v394[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v394->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v394[1].__shared_owners_ = 2;
        LODWORD(v394[1].__shared_weak_owners_) = 257;
        v394[2].__vftable = 0;
        v394[2].__shared_owners_ = 0;
        v394[2].__shared_weak_owners_ = 0;
        v394[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v387);
        v396 = (std::__shared_count)0;
        *(_OWORD *)&v394[3].__shared_owners_ = 0u;
        v394[4].std::__shared_count = 0u;
        v394[4].__shared_weak_owners_ = 0;
        if ((v397 & 1) == 0)
        {
          v396 = (std::__shared_count)0;
          if (v464)
          {
            v465 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v465, "GeoGL", 0xA3D02C1100000005);
            v396 = (std::__shared_count)0;
          }
        }
        v394[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v394[5].__shared_owners_ = 0;
        *((std::__shared_count *)v394 + 11) = v396;
        v394[8].std::__shared_count = v396;
        v394[8].__shared_weak_owners_ = 0;
        v394[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v394 + 10) = v396;
        v394[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v394[5].__shared_weak_owners_) = 0;
        LODWORD(v394[10].__vftable) = 0;
        v394[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v394[1].__shared_owners_ = 2;
        v394[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v394[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v622 = &v394[1];
        v623 = v394;
        v398 = operator new();
        do
          v399 = __ldxr(v391);
        while (__stxr(v399 + 1, v391));
        do
          v400 = __ldxr(v395);
        while (__stxr(v400 + 1, v395));
        if ((v401 & 1) == 0
        {
          if ((v466 & 1) == 0
          {
            ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::OptimizedTraffic::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43C68 = 1;
        }
        *(_QWORD *)(v398 + 32) = 0;
        *(_QWORD *)(v398 + 40) = 0;
        *(_DWORD *)(v398 + 48) = 0;
        *(_QWORD *)v398 = &off_1E42BBC08;
        *(_QWORD *)(v398 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v398 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v398 + 24) = 0;
        *(_QWORD *)(v398 + 56) = &ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v398 + 64) = 0;
        v402 = v398 + 64;
        *(_QWORD *)(v398 + 72) = 0;
        *(_QWORD *)(v398 + 80) = 0;
        if ((v403 & 1) == 0)
        {
          v402 = v398 + 64;
          if (v467)
          {
            v468 = operator new();
            *(_QWORD *)(v468 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v468 + 24) = "GeoGL";
            *(_OWORD *)(v468 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v468 = &off_1E42B5668;
            *(_QWORD *)(v468 + 8) = "GeoGL";
            *(_OWORD *)(v468 + 72) = 0u;
            *(_OWORD *)(v468 + 88) = 0u;
            *(_OWORD *)(v468 + 104) = 0u;
            *(_OWORD *)(v468 + 120) = 0u;
            *(_OWORD *)(v468 + 136) = 0u;
            *(_OWORD *)(v468 + 152) = 0u;
            *(_OWORD *)(v468 + 168) = 0u;
            *(_OWORD *)(v468 + 184) = 0u;
            *(_OWORD *)(v468 + 200) = 0u;
            *(_OWORD *)(v468 + 216) = 0u;
            *(_OWORD *)(v468 + 232) = 0u;
            *(_QWORD *)(v468 + 248) = 0;
            *(_OWORD *)(v468 + 56) = 0u;
            v469 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v468 + 56), 0);
            if ((_DWORD)v469)
              geo::read_write_lock::logFailure(v469, (uint64_t)"initialization", v470);
            v471 = malloc_create_zone(0, 0);
            *(_QWORD *)(v468 + 48) = v471;
            malloc_set_zone_name(v471, "GeoGL");
            *(_QWORD *)(v468 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v468;
            v402 = v398 + 64;
          }
        }
        v404 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v398 + 120) = 0;
        *(_QWORD *)(v398 + 96) = 0;
        *(_QWORD *)(v398 + 104) = 0;
        *(_QWORD *)(v398 + 88) = v404;
        if ((v404 & 1) == 0)
        {
          v589 = v402;
          v402 = v589;
          if (v472)
          {
            v473 = operator new();
            *(_QWORD *)(v473 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v473 + 24) = "GeoGL";
            *(_OWORD *)(v473 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v473 = &off_1E42B5668;
            *(_QWORD *)(v473 + 8) = "GeoGL";
            *(_OWORD *)(v473 + 72) = 0u;
            *(_OWORD *)(v473 + 88) = 0u;
            *(_OWORD *)(v473 + 104) = 0u;
            *(_OWORD *)(v473 + 120) = 0u;
            *(_OWORD *)(v473 + 136) = 0u;
            *(_OWORD *)(v473 + 152) = 0u;
            *(_OWORD *)(v473 + 168) = 0u;
            *(_OWORD *)(v473 + 184) = 0u;
            *(_OWORD *)(v473 + 200) = 0u;
            *(_OWORD *)(v473 + 216) = 0u;
            *(_OWORD *)(v473 + 232) = 0u;
            *(_QWORD *)(v473 + 248) = 0;
            v474 = v473;
            *(_OWORD *)(v473 + 56) = 0u;
            v475 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v473 + 56), 0);
            if ((_DWORD)v475)
              geo::read_write_lock::logFailure(v475, (uint64_t)"initialization", v476);
            v477 = malloc_create_zone(0, 0);
            *(_QWORD *)(v474 + 48) = v477;
            malloc_set_zone_name(v477, "GeoGL");
            *(_QWORD *)(v474 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v474;
            v402 = v589;
          }
        }
        *(_QWORD *)(v398 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v398 + 136) = 0;
        *(_QWORD *)(v398 + 112) = v398 + 120;
        *(_QWORD *)v398 = &off_1E42BD938;
        *(_QWORD *)(v398 + 16) = &unk_1E42BD958;
        *(_QWORD *)&v630 = v390 + 24;
        *((_QWORD *)&v630 + 1) = v390;
        do
          v405 = __ldxr(v391);
        while (__stxr(v405 + 1, v391));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v402, (uint64_t *)&v630, (uint64_t *)&v631, 1uLL);
        v406 = (std::__shared_weak_count *)*((_QWORD *)&v630 + 1);
        v9 = a1;
        if (*((_QWORD *)&v630 + 1))
        {
          v407 = (unint64_t *)(*((_QWORD *)&v630 + 1) + 8);
          do
            v408 = __ldaxr(v407);
          while (__stlxr(v408 - 1, v407));
          if (!v408)
          {
            ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
            std::__shared_weak_count::__release_weak(v406);
          }
        }
        do
          v409 = __ldxr(v395);
        while (__stxr(v409 + 1, v395));
        v410 = *(std::__shared_weak_count **)(v398 + 104);
        *(_QWORD *)(v398 + 96) = v394 + 1;
        *(_QWORD *)(v398 + 104) = v394;
        if (v410)
        {
          v411 = (unint64_t *)&v410->__shared_owners_;
          do
            v412 = __ldaxr(v411);
          while (__stlxr(v412 - 1, v411));
          if (!v412)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
        *(_QWORD *)v398 = &off_1E42B88E0;
        *(_QWORD *)(v398 + 16) = &unk_1E42B8900;
        do
          v413 = __ldaxr(v395);
        while (__stlxr(v413 - 1, v395));
        if (!v413)
        {
          ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
          std::__shared_weak_count::__release_weak(v394);
        }
        do
          v414 = __ldaxr(v391);
        while (__stlxr(v414 - 1, v391));
        if (!v414)
        {
          (*(void (**)(char *))(*(_QWORD *)v390 + 16))(v390);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v390);
        }
        v416 = *(uint64_t **)(a1 + 40);
        v415 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v416 < v415)
        {
          *v416 = v398;
          v417 = v416 + 1;
          goto LABEL_601;
        }
        v418 = (uint64_t *)*v596;
        v419 = (char *)v416 - (_BYTE *)*v596;
        v420 = v419 >> 3;
        v421 = (v419 >> 3) + 1;
        if (v421 >> 61)
          abort();
        v422 = v415 - (_QWORD)v418;
        if (v422 >> 2 > v421)
          v421 = v422 >> 2;
        if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v421;
        if (v423)
        {
          if (v423 >> 61)
            goto LABEL_752;
          v424 = operator new(8 * v423);
        }
        else
        {
          v424 = 0;
        }
        v425 = (uint64_t *)&v424[8 * v420];
        *v425 = v398;
        v417 = v425 + 1;
        if (v416 == v418)
        {
          v418 = v416;
          v9 = a1;
        }
        else
        {
          v426 = (char *)(v416 - 1) - (char *)v418;
          if (v426 >= 0x58)
          {
            v427 = (char *)v416 - &v424[v419];
            v9 = a1;
            if (v427 < 0x20)
              goto LABEL_597;
            v428 = (v426 >> 3) + 1;
            v429 = &v424[8 * v420 - 16];
            v430 = v416 - 2;
            v431 = v428 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v432 = *(_OWORD *)v430;
              *(v429 - 1) = *((_OWORD *)v430 - 1);
              *v429 = v432;
              v429 -= 2;
              v430 -= 4;
              v431 -= 4;
            }
            while (v431);
            v425 -= v428 & 0x3FFFFFFFFFFFFFFCLL;
            v416 -= v428 & 0x3FFFFFFFFFFFFFFCLL;
            if (v428 != (v428 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_597;
          }
          else
          {
            v9 = a1;
            do
            {
LABEL_597:
              v433 = *--v416;
              *--v425 = v433;
            }
            while (v416 != v418);
            v418 = (uint64_t *)*v596;
          }
        }
        *(_QWORD *)(v9 + 32) = v425;
        *(_QWORD *)(v9 + 40) = v417;
        *(_QWORD *)(v9 + 48) = &v424[8 * v423];
        if (v418)
          operator delete(v418);
LABEL_601:
        *(_QWORD *)(v9 + 40) = v417;
        v386 = v613;
        if (v385 < v613)
        {
          v434 = 0;
          v435 = v385;
          do
          {
            v436 = *(_QWORD *)&v335[8 * v435];
            v437 = *(_QWORD *)(v436 + 32);
            v438 = v437 + v434;
            v439 = *(_QWORD *)(v436 + 40) + v434;
            *(_QWORD *)(v436 + 32) = v438;
            *(_QWORD *)(v436 + 40) = v439;
            v434 = v439 - v437;
            ++v435;
          }
          while (v613 != v435);
          v440 = 0;
          do
          {
            v441 = *(uint64_t **)&v335[8 * v385];
            v442 = *v441;
            v443 = *v441 + v440;
            v444 = v441[1] + v440;
            *v441 = v443;
            v441[1] = v444;
            v445 = v441[2];
            v446 = v445 + v434;
            v447 = v441[3] + v434;
            v441[2] = v446;
            v441[3] = v447;
            v441[11] = v398;
            v448 = (_QWORD *)v441[7];
            v449 = (_QWORD *)v441[8];
            if (v448 != v449)
            {
              v450 = v441[4];
              do
              {
                v451 = (_QWORD *)*v448++;
                v452 = v451[2] - v451[1];
                v451[1] = v443;
                v443 += v452;
                v453 = v451[4] - v451[3];
                v451[2] = v443;
                v451[3] = v446;
                v446 += v453;
                v454 = v451[6] - v451[5];
                v451[4] = v446;
                v451[5] = v450;
                v450 += v454;
                v451[6] = v450;
              }
              while (v448 != v449);
            }
            v440 = v444 - v442;
            v434 = v447 - v445;
            ++v385;
          }
          while (v385 != v613);
        }
        v455 = v623;
        v389 = v598;
        if (!v623)
          goto LABEL_614;
        v456 = (unint64_t *)&v623->__shared_owners_;
        do
          v457 = __ldaxr(v456);
        while (__stlxr(v457 - 1, v456));
        if (!v457)
        {
          ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
          std::__shared_weak_count::__release_weak(v455);
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
          {
LABEL_615:
            v459 = (unint64_t *)&end->__shared_owners_;
            do
              v460 = __ldaxr(v459);
            while (__stlxr(v460 - 1, v459));
            if (!v460)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
        }
        else
        {
LABEL_614:
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
            goto LABEL_615;
        }
        v388 = 0;
        v387 = 0;
        v385 = v613;
      }
      if (v386 < v389)
      {
        v461 = *(_QWORD **)&v335[8 * v386];
        v388 = v461[1] + v388 - *v461;
        v387 = v461[3] + v387 + v461[5] - (v461[2] + v461[4]);
      }
      if (++v386 <= v389)
        continue;
      break;
    }
    if (v335)
      operator delete(v335);
    if (__srca)
      operator delete(__srca);
    *(_QWORD *)v9 = &off_1E428C8A0;
    *(_QWORD *)(v9 + 112) = *a4;
    v478 = a4[1];
    *(_QWORD *)(v9 + 120) = v478;
    if (v478)
    {
      v479 = (unint64_t *)(v478 + 8);
      do
        v480 = __ldxr(v479);
      while (__stxr(v480 + 1, v479));
    }
    *(_QWORD *)(v9 + 128) = *a5;
    v481 = a5[1];
    *(_QWORD *)(v9 + 136) = v481;
    if (v481)
    {
      v482 = (unint64_t *)(v481 + 8);
      do
        v483 = __ldxr(v482);
      while (__stxr(v483 + 1, v482));
    }
    *(_QWORD *)(v9 + 144) = 0;
    v484 = *(_QWORD *)(v9 + 8);
    v597 = *(_QWORD *)(v9 + 16);
    if (v484 != v597)
    {
      __asm
      {
        FMOV            V8.2S, #-1.0
        FMOV            V11.2S, #1.0
      }
      __srcb = vdupq_n_s64(8uLL);
      do
      {
        v599 = v484;
        v491 = *(uint64_t ***)(*(_QWORD *)v484 + 248);
        v490 = *(uint64_t ***)(*(_QWORD *)v484 + 256);
        v614 = v490;
        while (v491 != v490)
        {
          v492 = 0;
          v493 = *v491;
          v494 = **(_QWORD **)((*v491)[11] + 64);
          v495 = **v491;
          v496 = (*v491)[1];
          v630 = 0uLL;
          v497 = *(_QWORD *)(v494 + 8);
          v498 = v497 * v495;
          v499 = v497 * v496;
          if (v497 * v496 != v497 * v495)
          {
            if (a2 && *(_BYTE *)(v494 + 17) != 2)
              v492 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v494, v498, v497 * v496, 1, 1);
            else
              v492 = *(_QWORD *)(v494 + 72) + v498;
          }
          *(_QWORD *)&v500 = a2;
          *((_QWORD *)&v500 + 1) = v494;
          v630 = v500;
          v631 = v498;
          v632 = v499;
          v634 = v492;
          LOWORD(v633) = 257;
          v501 = v493[2];
          v503 = v493[4];
          v502 = v493[5];
          if (v502 == v503)
          {
            v502 = v493[3];
          }
          else
          {
            if (v503 < v501)
              v501 = v493[4];
            if (v493[3] > v502)
              v502 = v493[3];
          }
          v504 = 0;
          v505 = *(_QWORD *)(v493[11] + 96);
          __p.__begin_ = 0;
          __p.__end_ = 0;
          v506 = *(_QWORD *)(v505 + 8);
          v507 = (unsigned int *)(v506 * v501);
          v508 = (unsigned int *)(v506 * v502);
          if (v506 * v502 != v506 * v501)
          {
            if (a2 && *(_BYTE *)(v505 + 17) != 2)
              v504 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v505, v506 * v501, v508, 1, 1);
            else
              v504 = (uint64_t)v507 + *(_QWORD *)(v505 + 72);
          }
          *(_QWORD *)&v509 = a2;
          *((_QWORD *)&v509 + 1) = v505;
          *(_OWORD *)&__p.__begin_ = v509;
          __p.__end_cap_.__value_ = v507;
          v626 = v508;
          v628 = v504;
          v627 = 257;
          v510 = v493[2];
          v511 = v493[4];
          v622 = 0;
          v623 = 0;
          v624 = 0;
          memset(&v621, 0, sizeof(v621));
          v512 = (uint64_t *)v493[7];
          v513 = (uint64_t *)v493[8];
          v514 = v493 + 7;
          if (v512 != v513)
          {
            v515 = v504 + 2 * v511 - 2 * v501;
            v516 = v504 + 2 * v510 - 2 * v501;
            while (1)
            {
              v518 = *v512;
              v519 = *(_QWORD *)(*v512 + 16);
              if (v519 != *(_QWORD *)(*v512 + 8))
                break;
              v517 = *(_QWORD *)(*v512 + 16);
LABEL_676:
              v492 += 48 * (v517 - v519);
              v516 += 2 * (*(_QWORD *)(v518 + 32) - *(_QWORD *)(v518 + 24));
              v515 += 2 * (*(_QWORD *)(v518 + 48) - *(_QWORD *)(v518 + 40));
              if (++v512 == v513)
                goto LABEL_700;
            }
            v629 = 1;
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v518, &v622, &v621, (uint64_t *)&v629);
            v521 = v629;
            if (v629 >= 2)
            {
              LOBYTE(v520) = *(_BYTE *)(v518 + 96);
              v522 = (float)v520;
              v523 = (float *)((char *)v622 + 8);
              v524 = 0.0;
              v525 = v492;
              v526 = 1;
              do
              {
                v528 = *(v523 - 1);
                v527 = *v523;
                v529 = *(v523 - 2);
                v530 = v523[1];
                v531 = *v523 - v529;
                *(float *)(v525 + 12) = v530;
                *(float *)(v525 + 16) = v524;
                *(float *)(v525 + 60) = v530;
                *(float *)(v525 + 64) = v524;
                *(float *)(v525 + 112) = v524;
                *(float *)(v525 + 160) = v524;
                v532 = sqrtf((float)(v531 * v531) + (float)((float)(v530 - v528) * (float)(v530 - v528)));
                v533 = v531 / v532;
                v524 = v532 + v524;
                *(float *)v525 = v529;
                *(float *)(v525 + 4) = v528;
                *(float *)(v525 + 8) = v527;
                *(float *)(v525 + 20) = v524;
                *(float *)(v525 + 24) = v533;
                *(float *)(v525 + 48) = v529;
                *(float *)(v525 + 52) = v528;
                *(float *)(v525 + 56) = v527;
                v534 = (float)(v530 - v528) / v532;
                *(float *)(v525 + 28) = v534;
                *(float *)(v525 + 32) = v522;
                *(float *)(v525 + 68) = v524;
                *(float *)(v525 + 72) = v533;
                *(float *)(v525 + 96) = v529;
                *(float *)(v525 + 100) = v528;
                *(float *)(v525 + 76) = v534;
                *(float *)(v525 + 80) = v522;
                *(float *)(v525 + 104) = v527;
                *(float *)(v525 + 108) = v530;
                *(float *)(v525 + 144) = v529;
                *(float *)(v525 + 148) = v528;
                *(float *)(v525 + 116) = v524;
                *(float *)(v525 + 120) = v533;
                *(float *)(v525 + 152) = v527;
                *(float *)(v525 + 156) = v530;
                *(float *)(v525 + 164) = v524;
                *(float *)(v525 + 168) = v533;
                *(float *)(v525 + 124) = v534;
                *(float *)(v525 + 128) = v522;
                *(_QWORD *)(v525 + 40) = _D8;
                *(_QWORD *)(v525 + 88) = 0x3F800000BF800000;
                ++v526;
                *(float *)(v525 + 172) = v534;
                *(float *)(v525 + 176) = v522;
                *(_QWORD *)(v525 + 136) = 0xBF8000003F800000;
                *(_QWORD *)(v525 + 184) = _D11;
                v523 += 2;
                v525 += 192;
              }
              while (v521 != v526);
              if (v521 >= 2)
              {
                v535 = *(_QWORD *)(v518 + 8);
                v536 = v535;
                v537 = v521 - 1;
                if (v521 == 2)
                {
                  v538 = 1;
                  v539 = (_WORD *)v516;
LABEL_688:
                  v545 = v521 - v538;
                  do
                  {
                    *v539 = v536;
                    v539[1] = v536 + 1;
                    v546 = v536 + 2;
                    v539[2] = v536 + 2;
                    v539[3] = v536 + 1;
                    v547 = v536 + 3;
                    v536 += 4;
                    v539[4] = v547;
                    v539[5] = v546;
                    v539 += 6;
                    --v545;
                  }
                  while (v545);
                }
                else
                {
                  v540 = 0;
                  v541 = v537 & 0xFFFFFFFFFFFFFFFELL;
                  v542 = (int16x4_t *)(v516 + 14);
                  do
                  {
                    v542[-2].i16[1] = v535 + 4 * v540;
                    v543 = v535 + 4 * v540 + 5;
                    v542->i16[0] = v543;
                    v542->i16[1] = v535 + 4 * v540 + 6;
                    v542->i16[2] = v543;
                    v542->i16[3] = v535 + 4 * v540 + 7;
                    v544 = vadd_s16(vdup_n_s16((int)v535 + 4 * (int)v540), (int16x4_t)0x4000200030001);
                    v542[-2].i16[3] = v544.i16[2];
                    v542[-2].i16[2] = v544.i16[0];
                    v542[-1] = v544;
                    v542[1].i16[0] = v535 + 4 * v540 + 6;
                    v540 += 2;
                    v542 += 3;
                  }
                  while (v541 != v540);
                  if (v537 != v541)
                  {
                    v538 = v537 | 1;
                    v536 = 4 * (v537 & 0xFFFFFFFE) + v535;
                    v539 = (_WORD *)(v516 + 12 * (v537 & 0xFFFFFFFFFFFFFFFELL));
                    goto LABEL_688;
                  }
                }
                if (*(_QWORD *)(v518 + 48) != *(_QWORD *)(v518 + 40))
                {
                  if (v521 > 8)
                  {
                    v550 = v537 & 0xFFFFFFFFFFFFFFF8;
                    v551 = vdupq_n_s64(v535 + 65532);
                    v552 = vdupq_n_s64(v535);
                    v553 = (__int16 *)v515;
                    v554 = v537 & 0xFFFFFFFFFFFFFFF8;
                    v555 = (int64x2_t)xmmword_19FFB2DB0;
                    v556 = (int64x2_t)xmmword_19FFB3440;
                    v557 = (int64x2_t)xmmword_19FFB3430;
                    v558 = (int64x2_t)xmmword_19FFB3420;
                    v548 = (_WORD *)(v515 + 4 * (v537 & 0xFFFFFFFFFFFFFFF8));
                    do
                    {
                      v559 = vshlq_n_s64(v556, 2uLL);
                      v560 = vshlq_n_s64(v555, 2uLL);
                      v561 = vshlq_n_s64(v558, 2uLL);
                      v562 = vshlq_n_s64(v557, 2uLL);
                      v637.val[0] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v551, v560), (int32x4_t)vaddq_s64(v551, v559)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v551, v562), (int32x4_t)vaddq_s64(v551, v561)));
                      v637.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v560, v552), (int32x4_t)vaddq_s64(v559, v552)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v562, v552), (int32x4_t)vaddq_s64(v561, v552)));
                      vst2q_s16(v553, v637);
                      v553 += 16;
                      v557 = vaddq_s64(v557, __srcb);
                      v556 = vaddq_s64(v556, __srcb);
                      v555 = vaddq_s64(v555, __srcb);
                      v558 = vaddq_s64(v558, __srcb);
                      v554 -= 8;
                    }
                    while (v554);
                    if (v537 != v550)
                    {
                      v549 = v550 | 1;
                      goto LABEL_697;
                    }
                  }
                  else
                  {
                    v548 = (_WORD *)v515;
                    v549 = 1;
LABEL_697:
                    v563 = v521 - v549;
                    v564 = v535 + 4 * v549;
                    do
                    {
                      *v548 = v564 - 4;
                      v548[1] = v564;
                      v564 += 4;
                      v548 += 2;
                      --v563;
                    }
                    while (v563);
                  }
                }
              }
            }
            v518 = *v512;
            v519 = *(_QWORD *)(*v512 + 8);
            v517 = *(_QWORD *)(*v512 + 16);
            goto LABEL_676;
          }
LABEL_700:
          {
            v587 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v587, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v566 = (_QWORD *)*v514;
          if (*v514)
          {
            v567 = (_QWORD *)v493[8];
            v568 = (_QWORD *)*v514;
            if (v567 != v566)
            {
              do
              {
                v570 = (void (***)(_QWORD, _QWORD *))*--v567;
                v569 = v570;
                *v567 = 0;
                if (v570)
                {
                  (**v569)(v569, v568);
                  if ((v571 & 1) == 0
                  {
                    v572 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v572, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v569, 104);
                }
              }
              while (v567 != v566);
              v568 = (_QWORD *)*v514;
            }
            v493[8] = (uint64_t)v566;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v493[10] + 40))(v493[10], v568, v493[9] - (_QWORD)v568);
            *v514 = 0;
            v493[8] = 0;
            v493[9] = 0;
          }
          *v514 = 0;
          v493[8] = 0;
          v493[9] = 0;
          if (v621.__begin_)
            operator delete(v621.__begin_);
          if (v622)
            operator delete(v622);
          if (v628)
          {
            value = __p.__end_cap_.__value_;
            v573 = v626;
            if (v626 != __p.__end_cap_.__value_)
            {
              v575 = __p.__end_;
              v576 = v627;
              v577 = HIBYTE(v627);
              if (__p.__begin_ && *((_BYTE *)__p.__end_ + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)__p.__begin_ + 64))();
              if (v576 && !v577)
              {
                v578 = (unsigned int *)*((_QWORD *)v575 + 7);
                v579 = (unsigned int *)*((_QWORD *)v575 + 8);
                if (v579 == v578)
                  v578 = (unsigned int *)(*((_QWORD *)v575 + 10) - *((_QWORD *)v575 + 9));
                if (value < v578)
                  v578 = value;
                if (v579 <= v573)
                  v579 = v573;
                if (v579 == v578)
                  v579 = (unsigned int *)((char *)v578 + *((_QWORD *)v575 + 10) - *((_QWORD *)v575 + 9));
                *((_QWORD *)v575 + 7) = v578;
                *((_QWORD *)v575 + 8) = v579;
              }
            }
          }
          if (v634)
          {
            v581 = v631;
            v580 = v632;
            if (v632 != v631)
            {
              v582 = (_QWORD *)*((_QWORD *)&v630 + 1);
              v583 = v633;
              v584 = BYTE1(v633);
              if ((_QWORD)v630 && *(_BYTE *)(*((_QWORD *)&v630 + 1) + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)v630 + 64))();
              if (v583 && !v584)
              {
                v585 = v582[7];
                v586 = v582[8];
                if (v586 == v585)
                  v585 = v582[10] - v582[9];
                if (v581 < v585)
                  v585 = v581;
                if (v586 <= v580)
                  v586 = v580;
                if (v586 == v585)
                  v586 = v585 + v582[10] - v582[9];
                v582[7] = v585;
                v582[8] = v586;
              }
            }
          }
          ++v491;
          v490 = v614;
        }
        v484 = v599 + 8;
      }
      while (v599 + 8 != v597);
    }
    return a1;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19F487C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t *a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45)
{
  uint64_t v45;
  void *v46;
  void *v48;
  void *v49;

  MEMORY[0x1A1AF4E00](v45, 0x1020C4007FF0C4BLL);
  if (v46)
    operator delete(v46);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a20);
  v48 = *a21;
  if (*a21)
  {
    *(_QWORD *)(a26 + 40) = v48;
    operator delete(v48);
  }
  v49 = *a19;
  if (*a19)
  {
    *(_QWORD *)(a26 + 16) = v49;
    operator delete(v49);
    if (!a37)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a37)
  {
    goto LABEL_3;
  }
  operator delete(a37);
  goto LABEL_3;
}

uint64_t md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::RibbonLayer(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  int64x2_t v16;
  unsigned __int8 v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  ggl::SolidTraffic::BasePipelineSetup **v23;
  ggl::SolidTraffic::BasePipelineSetup *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  ggl::SolidTraffic::BasePipelineSetup *v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  float v97;
  _BOOL8 v98;
  unint64_t v99;
  unint64_t v100;
  int8x8_t prime;
  void *v102;
  void *v103;
  uint64_t v104;
  _QWORD **v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *i;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint8x8_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  void (***v140)(_QWORD);
  void (***v141)(_QWORD);
  unsigned __int8 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  __int128 *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  _OWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t *v169;
  std::vector<unsigned int>::pointer begin;
  int64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t *v175;
  int64_t v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  void (***v185)(_QWORD, uint64_t);
  void (***v186)(_QWORD, uint64_t);
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (***v191)(_QWORD, uint64_t);
  void (***v192)(_QWORD, uint64_t);
  unsigned __int8 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void (***v197)(_QWORD);
  uint64_t v198;
  uint64_t v199;
  unsigned __int8 v200;
  std::vector<unsigned int>::pointer v201;
  int64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t *v207;
  int64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  malloc_zone_t *v217;
  void (***v218)(_QWORD, uint64_t);
  void (***v219)(_QWORD, uint64_t);
  unsigned __int8 v220;
  uint64_t v221;
  geo::read_write_lock *v222;
  const char *v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  void (***v227)(_QWORD, uint64_t);
  void (***v228)(_QWORD, uint64_t);
  unsigned __int8 v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  BOOL v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  _OWORD *v250;
  __int128 *v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  _QWORD *v256;
  unsigned __int8 v257;
  uint64_t v258;
  void (***v259)(_QWORD);
  void (***v260)(_QWORD);
  unsigned __int8 v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  uint64_t *v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t *v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int8x16_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t *v292;
  _QWORD *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  unint64_t v305;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t *v319;
  _QWORD *v320;
  void (***v321)(_QWORD, uint64_t);
  void (***v322)(_QWORD, uint64_t);
  unsigned __int8 v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  void (***v327)(_QWORD, uint64_t);
  void (***v328)(_QWORD, uint64_t);
  unsigned __int8 v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void (***v335)(_QWORD, uint64_t);
  void (***v336)(_QWORD, uint64_t);
  unsigned __int8 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  geo::read_write_lock *v343;
  const char *v344;
  malloc_zone_t *zone;
  unsigned __int8 v346;
  unsigned __int8 v347;
  unsigned __int8 v348;
  int v349;
  char v350;
  int64_t v351;
  _QWORD *v352;
  _QWORD *v353;
  char *v354;
  _QWORD *v355;
  char *v356;
  char *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD **v360;
  _QWORD **v361;
  _QWORD *v362;
  _QWORD **v363;
  _QWORD **v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  unint64_t v368;
  uint64_t v369;
  char *v370;
  float *v371;
  float v372;
  uint64_t v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  uint64_t v381;
  float *v382;
  uint64_t v383;
  uint64_t v384;
  double v385;
  float v386;
  float v387;
  unint64_t v388;
  float v389;
  float v390;
  uint64_t v391;
  float *v392;
  float v393;
  float v394;
  float *v395;
  uint64_t v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  double v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  char *v410;
  unint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  _OWORD *v415;
  char *v416;
  uint64_t v417;
  __int128 v418;
  gdc::GlobeTileGrid *v419;
  gdc::GlobeTileGrid *v420;
  gdc::GlobeTileGrid *v421;
  uint64_t v422;
  char *v423;
  uint64_t *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  gdc::GlobeTileGrid *v431;
  uint64_t v432;
  float *v433;
  float v434;
  unsigned int v435;
  float v436;
  unsigned int v437;
  float *v438;
  float v439;
  float v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  std::__shared_count v449;
  unsigned __int8 v450;
  char *v451;
  unint64_t *v452;
  __int128 v453;
  unsigned __int8 v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t v463;
  char *v464;
  _QWORD *v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  unint64_t v471;
  _BYTE *v472;
  uint64_t *v473;
  unint64_t v474;
  uint64_t v475;
  _OWORD *v476;
  char *v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  std::__shared_weak_count *end;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  _QWORD *v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  void *v513;
  uint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  float v521;
  uint64_t **v522;
  uint64_t **v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  __int128 v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  std::__shared_weak_count **v543;
  std::__shared_weak_count **v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  std::__shared_weak_count *v548;
  uint64_t shared_weak_owners;
  int8x16_t v550;
  unint64_t v551;
  char *v552;
  unsigned int *v553;
  unint64_t v554;
  unint64_t v555;
  float v556;
  float32x2_t v557;
  int8x16_t v558;
  int32x4_t *v559;
  float32x4_t v560;
  unint64_t v561;
  float32x4_t v562;
  const float *i32;
  int32x4_t v564;
  int32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  unint64_t v572;
  float32x2_t *v573;
  float32x2_t v574;
  float32x2_t v575;
  double v576;
  float v577;
  float *v578;
  float v579;
  uint64_t v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  float v586;
  unsigned int v587;
  float *v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  int32x2_t v592;
  float *v593;
  float v594;
  float v595;
  float *v596;
  unint64_t v597;
  float v598;
  float32x2_t v599;
  unint64_t v600;
  float v601;
  float v602;
  float v603;
  float v604;
  unsigned int v605;
  float *v606;
  float v607;
  float v608;
  float v609;
  float v610;
  float v611;
  float v612;
  float v613;
  float v614;
  float v615;
  double v616;
  float v617;
  float v618;
  float32x2_t v619;
  float v620;
  float v621;
  unint64_t v622;
  float v623;
  uint64_t v624;
  float32x2_t v625;
  __float2 v626;
  __float2 v627;
  __float2 v628;
  float *v629;
  float *v630;
  float v631;
  float v632;
  float v633;
  float v634;
  float v635;
  float v636;
  float v637;
  float v638;
  float v639;
  unint64_t shared_owners;
  unint64_t v641;
  unint64_t v642;
  int16x8_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  _WORD *v647;
  uint64_t v648;
  unint64_t v649;
  unint64_t v650;
  _WORD *v651;
  __int16 v652;
  unint64_t v653;
  __int16 v654;
  __int16 v655;
  unint64_t v656;
  uint64_t v657;
  _WORD *v658;
  unint64_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  __int16 *v664;
  unint64_t v665;
  int64x2_t v666;
  unint64_t v667;
  unint64_t v668;
  unsigned __int8 v669;
  _QWORD *v670;
  _QWORD *v671;
  _QWORD *v672;
  void (***v673)(_QWORD, _QWORD *);
  void (***v674)(_QWORD, _QWORD *);
  unsigned __int8 v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  _QWORD *v679;
  int v680;
  int v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  _QWORD *v686;
  int v687;
  int v688;
  unint64_t v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t result;
  uint64_t v693;
  uint64_t v694;
  uint64_t **v695;
  _QWORD *v697;
  uint64_t **v698;
  uint64_t *v699;
  std::__shared_weak_count **v700;
  std::__shared_weak_count **v701;
  uint64_t v702;
  uint64_t v703;
  const QuadTile *v704;
  uint64_t v705;
  void **v707;
  unint64_t v708;
  _QWORD *v709;
  _QWORD *v711;
  uint64_t *v714;
  gdc::GlobeTileGrid **v715;
  uint64_t *v716;
  _QWORD **v717;
  float v718;
  _QWORD *v719;
  std::vector<unsigned int>::pointer v720;
  char *v721;
  uint64_t *v722;
  char *v723;
  float v724;
  uint64_t *v725;
  char *v726;
  float v727;
  uint64_t *v728;
  _QWORD *v729;
  float v730;
  uint64_t *v731;
  uint64_t v732;
  _QWORD **v733;
  unint64_t v734;
  float v735;
  uint64_t v736;
  int32x2_t v737;
  float v738;
  unint64_t v739;
  void *v740;
  float v741;
  float v742;
  float v743;
  char *v744;
  uint64_t v745;
  uint64_t *v746;
  float v747;
  float v748;
  __int32 v749;
  float v750;
  std::vector<unsigned int> v751;
  void *v752[3];
  __int128 v753;
  unint64_t v754;
  unint64_t v755;
  __int16 v756;
  uint64_t v757;
  __int128 v758;
  unint64_t v759;
  unint64_t v760;
  __int16 v761;
  uint64_t v762;
  void *__p;
  std::__shared_weak_count *v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  _BYTE v768[32];
  __int128 v769;
  uint64_t v770;
  std::vector<unsigned int> v771;
  float32x2_t v772;
  std::__compressed_pair<unsigned int *> v773;
  __int128 v774;
  uint64_t v775;
  __int16 v776;
  unint64_t v777;
  uint64_t v778[3];
  int16x8x2_t v779;
  float32x4x2_t v780;

  v716 = a3;
  v8 = 0;
  if (a3)
  {
    v722 = 0;
    v714 = 0;
    while (1)
    {
      v764 = 0;
      __p = 0;
      {
        v339 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v339, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v765 = (unint64_t)mdm::Allocator::instance(void)::alloc;
      {
        v340 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v340, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v766 = (unint64_t)mdm::Allocator::instance(void)::alloc;
      LODWORD(v767) = 1065353216;
      v11 = (uint64_t *)v716[6];
      v12 = (uint64_t *)v716[7];
      v13 = (uint64_t *)v8;
      if (v11 != v12)
        break;
LABEL_8:
      v14 = operator new();
      *(_QWORD *)v14 = &off_1E42AF168;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 64) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 32) = "";
      *(_DWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 72) = 1065353216;
      v15 = 0uLL;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      v16 = vdupq_n_s64(1uLL);
      *(int64x2_t *)(v14 + 112) = v16;
      *(_QWORD *)(v14 + 128) = 0;
      *(_QWORD *)(v14 + 16) = &off_1E42AF548;
      *(_BYTE *)(v14 + 136) = 1;
      *(_QWORD *)(v14 + 192) = 0;
      *(_QWORD *)(v14 + 168) = 0;
      *(_QWORD *)(v14 + 176) = 0;
      *(_QWORD *)(v14 + 160) = "";
      *(_DWORD *)(v14 + 184) = 0;
      *(_DWORD *)(v14 + 200) = 1065353216;
      *(_OWORD *)(v14 + 208) = 0u;
      *(_OWORD *)(v14 + 224) = 0u;
      *(int64x2_t *)(v14 + 240) = v16;
      *(_QWORD *)(v14 + 256) = 0;
      *(_QWORD *)(v14 + 144) = &off_1E42AF548;
      *(_BYTE *)(v14 + 264) = 1;
      *(_OWORD *)(v14 + 272) = 0u;
      *(_OWORD *)(v14 + 288) = 0u;
      *(_OWORD *)(v14 + 304) = 0u;
      if ((v17 & 1) == 0)
      {
        v15 = 0uLL;
        if (v341)
        {
          v342 = operator new();
          *(_QWORD *)(v342 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v342 + 24) = "GeoGL";
          *(_OWORD *)(v342 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v342 = &off_1E42B5668;
          *(_QWORD *)(v342 + 8) = "GeoGL";
          *(_OWORD *)(v342 + 72) = 0u;
          *(_OWORD *)(v342 + 88) = 0u;
          *(_OWORD *)(v342 + 104) = 0u;
          *(_OWORD *)(v342 + 120) = 0u;
          *(_OWORD *)(v342 + 136) = 0u;
          *(_OWORD *)(v342 + 152) = 0u;
          *(_OWORD *)(v342 + 168) = 0u;
          *(_OWORD *)(v342 + 184) = 0u;
          *(_OWORD *)(v342 + 200) = 0u;
          *(_OWORD *)(v342 + 216) = 0u;
          *(_OWORD *)(v342 + 232) = 0u;
          *(_QWORD *)(v342 + 248) = 0;
          *(_OWORD *)(v342 + 56) = 0u;
          v343 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v342 + 56), 0);
          if ((_DWORD)v343)
            geo::read_write_lock::logFailure(v343, (uint64_t)"initialization", v344);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v342 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v342 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v342;
          v15 = 0uLL;
        }
      }
      *(_QWORD *)(v14 + 320) = ggl::Allocator::instance(void)::alloc;
      *(_OWORD *)(v14 + 328) = v15;
      *(_OWORD *)(v14 + 344) = v15;
      *(_QWORD *)(v14 + 360) = 0;
      *(_QWORD *)(v14 + 368) = 32;
      v18 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
      *v18 = 0;
      v18[1] = 0;
      *(_QWORD *)(v14 + 352) = v18;
      *(_QWORD *)(v14 + 360) = v18;
      *(_QWORD *)(v14 + 384) = 0;
      *(_QWORD *)(v14 + 392) = 0;
      *(_QWORD *)(v14 + 376) = 0;
      *(_BYTE *)(v14 + 400) = 1;
      *(_QWORD *)v14 = &off_1E428C720;
      *(_QWORD *)(v14 + 408) = v716[2];
      v19 = v716[3];
      *(_QWORD *)(v14 + 416) = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = v716[4];
      *(_DWORD *)(v14 + 432) = *((_DWORD *)v716 + 10);
      *(_QWORD *)(v14 + 424) = v22;
      *(_QWORD *)v14 = &off_1E42935C8;
      v23 = (ggl::SolidTraffic::BasePipelineSetup **)(v14 + 440);
      *(_QWORD *)(v14 + 440) = 0;
      *(_QWORD *)(v14 + 448) = 0;
      v24 = (ggl::SolidTraffic::BasePipelineSetup *)operator new();
      ggl::SolidTraffic::BasePipelineSetup::BasePipelineSetup(v24);
      v25 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v25->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      v25->__shared_weak_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1088;
      v27 = ggl::BufferData::BufferData((uint64_t)&v25[1], qword_1EE5583D8, 2, 1, 6, 1);
      v25[9].__shared_owners_ = (uint64_t)ggl::TrafficBase::Style::reflection(void)::reflection;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8CF0;
      v28 = *((_QWORD *)v24 + 8);
      *(_QWORD *)(v28 + 32) = v27;
      *(_QWORD *)(v28 + 40) = 0;
      v29 = *((_QWORD *)v24 + 20);
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v31 = *(std::__shared_weak_count **)(v29 + 40);
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v25;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      v35 = (uint64_t *)*((_QWORD *)v24 + 8);
      v35[1] = 0;
      v36 = *a4;
      *v35 = *a4;
      v37 = (_QWORD *)*((_QWORD *)v24 + 20);
      v38 = a4[1];
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = (std::__shared_weak_count *)v37[1];
      *v37 = v36;
      v37[1] = v38;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = *((_QWORD *)v24 + 8);
      *(_QWORD *)(v44 + 24) = 0;
      v45 = *a5;
      *(_QWORD *)(v44 + 16) = *a5;
      v46 = *((_QWORD *)v24 + 20);
      v47 = a5[1];
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = *(std::__shared_weak_count **)(v46 + 24);
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = v47;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (_QWORD *)operator new();
      if ((v54 & 1) == 0
      {
        if ((v346 & 1) == 0
        {
          if ((v348 & 1) == 0
          {
            ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TrafficBase::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43B40 = 1;
        }
        ggl::TrafficGlow::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE38E88 = &ggl::TrafficGlow::pipelineDataBasePipelineDeviceStructs(void)::ref;
        qword_1ECE38E90 = 0;
        if ((v347 & 1) == 0
        {
          ggl::TrafficGlow::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE38EC0 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE38EC8 = (uint64_t)ggl::TrafficGlow::Style::reflection(void)::reflection;
        }
        qword_1ECE38E98 = (uint64_t)&ggl::TrafficGlow::pipelineDataBasePipelineConstantStructs(void)::ref;
        unk_1ECE38EA0 = xmmword_19FFB3410;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v53, (uint64_t)&ggl::TrafficGlow::BasePipelineSetup::typedReflection(void)::ref);
      *v53 = &off_1E42B5FB8;
      v55 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v55->__shared_owners_ = 0;
      v56 = (unint64_t *)&v55->__shared_owners_;
      v55->__shared_weak_owners_ = 0;
      v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E10C0;
      v6 = (unint64_t)ggl::TrafficGlow::Style::reflection(void)::reflection;
      v57 = ggl::BufferData::BufferData((uint64_t)&v55[1], qword_1EE552B28, 2, 1, 6, 1);
      v55[9].__shared_owners_ = (uint64_t)ggl::TrafficGlow::Style::reflection(void)::reflection;
      v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8D10;
      v58 = v53[8];
      *(_QWORD *)(v58 + 32) = v57;
      *(_QWORD *)(v58 + 40) = 0;
      v59 = v53[20];
      do
        v60 = __ldxr(v56);
      while (__stxr(v60 + 1, v56));
      v61 = *(std::__shared_weak_count **)(v59 + 40);
      *(_QWORD *)(v59 + 32) = v57;
      *(_QWORD *)(v59 + 40) = v55;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      do
        v64 = __ldaxr(v56);
      while (__stlxr(v64 - 1, v56));
      v8 = (unint64_t)v13;
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v65 = (uint64_t *)v53[8];
      v65[1] = 0;
      v66 = *a4;
      *v65 = *a4;
      v67 = (_QWORD *)v53[20];
      v68 = a4[1];
      if (v68)
      {
        v69 = (unint64_t *)(v68 + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = (std::__shared_weak_count *)v67[1];
      *v67 = v66;
      v67[1] = v68;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v53[8];
      *(_QWORD *)(v74 + 24) = 0;
      v75 = *a5;
      *(_QWORD *)(v74 + 16) = *a5;
      v76 = v53[20];
      v77 = a5[1];
      if (v77)
      {
        v78 = (unint64_t *)(v77 + 8);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      v80 = *(std::__shared_weak_count **)(v76 + 24);
      *(_QWORD *)(v76 + 16) = v75;
      *(_QWORD *)(v76 + 24) = v77;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = *v23;
      *v23 = v24;
      if (v83)
        (*(void (**)(ggl::SolidTraffic::BasePipelineSetup *))(*(_QWORD *)v83 + 8))(v83);
      v84 = *(_QWORD *)(v14 + 448);
      *(_QWORD *)(v14 + 448) = v53;
      if (v84)
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
      *(_QWORD *)(v14 + 176) = *(_QWORD *)(v14 + 440);
      if (v722 < v714)
      {
        *v722 = v14;
        v85 = v722 + 1;
        goto LABEL_222;
      }
      v153 = v722 - v13;
      v154 = v153 + 1;
      if ((unint64_t)(v153 + 1) >> 61)
        abort();
      if (((char *)v714 - (char *)v13) >> 2 > v154)
        v154 = ((char *)v714 - (char *)v13) >> 2;
      if ((unint64_t)((char *)v714 - (char *)v13) >= 0x7FFFFFFFFFFFFFF8)
        v155 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v155 = v154;
      if (v155)
      {
        if (v155 >> 61)
          goto LABEL_838;
        v156 = operator new(8 * v155);
      }
      else
      {
        v156 = 0;
      }
      v6 = (unint64_t)&v156[8 * v153];
      *(_QWORD *)v6 = v14;
      v85 = (uint64_t *)(v6 + 8);
      if (v722 != v13)
      {
        v157 = (char *)(v722 - 1) - (char *)v13;
        if (v157 >= 0x58)
        {
          if ((unint64_t)((char *)v13 - v156) >= 0x20)
          {
            v159 = (v157 >> 3) + 1;
            v158 = &v722[-(v159 & 0x3FFFFFFFFFFFFFFCLL)];
            v160 = &v156[8 * v153 - 16];
            v161 = v722 - 2;
            v162 = v159 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v163 = *(_OWORD *)v161;
              *(v160 - 1) = *((_OWORD *)v161 - 1);
              *v160 = v163;
              v160 -= 2;
              v161 -= 4;
              v162 -= 4;
            }
            while (v162);
            v6 -= 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
            if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_219;
          }
          else
          {
            v158 = v722;
          }
        }
        else
        {
          v158 = v722;
        }
        do
        {
          v164 = *--v158;
          *(_QWORD *)(v6 - 8) = v164;
          v6 -= 8;
        }
        while (v158 != v13);
      }
LABEL_219:
      v714 = (uint64_t *)&v156[8 * v155];
      if (v13)
        operator delete(v13);
      v8 = v6;
LABEL_222:
      v722 = v85;
      v739 = v8;
      v728 = (uint64_t *)*((_QWORD *)&v765 + 1);
      if (*((_QWORD *)&v765 + 1))
      {
        v165 = 0;
        v744 = 0;
        v166 = 0;
        while (1)
        {
          v167 = operator new();
          *(_QWORD *)(v167 + 96) = 0;
          *(_OWORD *)(v167 + 64) = 0u;
          *(_OWORD *)(v167 + 80) = 0u;
          *(_OWORD *)(v167 + 32) = 0u;
          *(_OWORD *)(v167 + 48) = 0u;
          *(_OWORD *)v167 = 0u;
          *(_OWORD *)(v167 + 16) = 0u;
          *(_BYTE *)(v167 + 48) = 1;
          *(_QWORD *)(v167 + 56) = 0;
          *(_QWORD *)(v167 + 64) = 0;
          *(_QWORD *)(v167 + 72) = 0;
          {
            v282 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v282, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          *(_QWORD *)(v167 + 80) = mdm::Allocator::instance(void)::alloc;
          *(_DWORD *)(v167 + 96) = 0;
          v771.__begin_ = (std::vector<unsigned int>::pointer)v167;
          if (v166 < (uint64_t *)v744)
          {
            v771.__begin_ = 0;
            *v166 = v167;
            v169 = v166 + 1;
            begin = v771.__begin_;
            if (!v771.__begin_)
              goto LABEL_274;
LABEL_262:
            v189 = *((_QWORD *)begin + 7);
            if (v189)
            {
              v6 = *((_QWORD *)begin + 8);
              v190 = *((_QWORD *)begin + 7);
              if (v6 != v189)
              {
                do
                {
                  v192 = *(void (****)(_QWORD, uint64_t))(v6 - 8);
                  v6 -= 8;
                  v191 = v192;
                  *(_QWORD *)v6 = 0;
                  if (v192)
                  {
                    (**v191)(v191, v190);
                    if ((v193 & 1) == 0
                    {
                      v194 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v194, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v191, 104);
                  }
                }
                while (v6 != v189);
                v190 = *((_QWORD *)begin + 7);
                v8 = v739;
              }
              *((_QWORD *)begin + 8) = v189;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)begin + 10) + 40))(*((_QWORD *)begin + 10), v190, *((_QWORD *)begin + 9) - v190);
            }
            MEMORY[0x1A1AF4E00](begin, 0x1020C4010FC18DELL);
            goto LABEL_274;
          }
          v171 = (char *)v166 - (char *)v165;
          v172 = v166 - v165;
          v173 = v172 + 1;
          if ((unint64_t)(v172 + 1) >> 61)
            abort();
          if ((v744 - (char *)v165) >> 2 > v173)
            v173 = (v744 - (char *)v165) >> 2;
          if ((unint64_t)(v744 - (char *)v165) >= 0x7FFFFFFFFFFFFFF8)
            v6 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v6 = v173;
          if (v6)
          {
            if (v6 >> 61)
              goto LABEL_838;
            v174 = (char *)operator new(8 * v6);
          }
          else
          {
            v174 = 0;
          }
          v175 = (uint64_t *)&v174[8 * v172];
          v771.__begin_ = 0;
          *v175 = v167;
          v169 = v175 + 1;
          v176 = (char *)v166 - (char *)v165;
          if (v166 == v165)
          {
            v8 = v739;
            goto LABEL_259;
          }
          v177 = v176 - 8;
          if ((unint64_t)(v176 - 8) < 0x138)
          {
            v178 = v166;
            goto LABEL_242;
          }
          v273 = v177 & 0xFFFFFFFFFFFFFFF8;
          if ((uint64_t *)((char *)v166 - (v177 & 0xFFFFFFFFFFFFFFF8) - 8) > v166 - 1)
            break;
          if (&v174[v171 - 8 - v273] > &v174[v171 - 8])
          {
            v178 = v166;
            goto LABEL_242;
          }
          v274 = v177 >> 3;
          if (&v166[-v274 - 1] < v175)
          {
            v275 = (unint64_t)&v174[v171 - v273 - 8];
            v178 = v166;
            if (v275 < (unint64_t)v166)
              goto LABEL_242;
          }
          v276 = v274 + 1;
          v178 = &v166[-(v276 & 0x3FFFFFFFFFFFFFFCLL)];
          v277 = &v174[8 * v172 - 16];
          v278 = v166 - 4;
          v279 = v276 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v281 = *(_OWORD *)v278;
            v280 = *((_OWORD *)v278 + 1);
            *(_OWORD *)v278 = 0uLL;
            *((_OWORD *)v278 + 1) = 0uLL;
            v278 -= 4;
            *((_OWORD *)v277 - 1) = v281;
            *(_OWORD *)v277 = v280;
            v277 -= 32;
            v279 -= 4;
          }
          while (v279);
          v175 -= v276 & 0x3FFFFFFFFFFFFFFCLL;
          if (v276 != (v276 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_242;
LABEL_243:
          v8 = v739;
          do
          {
            v182 = *--v166;
            v181 = v182;
            *v166 = 0;
            if (v182)
            {
              v183 = *(_QWORD **)(v181 + 56);
              if (v183)
              {
                v184 = *(_QWORD **)(v181 + 64);
                v180 = *(_QWORD *)(v181 + 56);
                if (v184 != v183)
                {
                  do
                  {
                    v186 = (void (***)(_QWORD, uint64_t))*--v184;
                    v185 = v186;
                    *v184 = 0;
                    if (v186)
                    {
                      (**v185)(v185, v180);
                      if ((v187 & 1) == 0
                      {
                        v188 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v188, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v185, 104);
                    }
                  }
                  while (v184 != v183);
                  v180 = *(_QWORD *)(v181 + 56);
                  v8 = v739;
                }
                *(_QWORD *)(v181 + 64) = v183;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v181 + 80) + 40))(*(_QWORD *)(v181 + 80), v180, *(_QWORD *)(v181 + 72) - v180);
              }
              MEMORY[0x1A1AF4E00](v181, 0x1020C4010FC18DELL);
            }
          }
          while (v166 != v165);
LABEL_259:
          v744 = &v174[8 * v6];
          if (v165)
            operator delete(v165);
          v165 = v175;
          begin = v771.__begin_;
          if (v771.__begin_)
            goto LABEL_262;
LABEL_274:
          *(_DWORD *)(*(v169 - 1) + 96) = *((_DWORD *)v728 + 4);
          v195 = v728[3];
          v736 = v728[4];
          if (v195 != v736)
          {
            v196 = 0;
            while (1)
            {
              v197 = *(void (****)(_QWORD))v195;
              v198 = *(_QWORD *)(*(_QWORD *)v195 + 88);
              if ((unint64_t)(v198 + v196) <= 0x5999)
              {
                v6 = *(v169 - 1);
                goto LABEL_332;
              }
              v199 = operator new();
              *(_QWORD *)(v199 + 96) = 0;
              *(_OWORD *)(v199 + 64) = 0u;
              *(_OWORD *)(v199 + 80) = 0u;
              *(_OWORD *)(v199 + 32) = 0u;
              *(_OWORD *)(v199 + 48) = 0u;
              *(_OWORD *)v199 = 0u;
              *(_OWORD *)(v199 + 16) = 0u;
              *(_BYTE *)(v199 + 48) = 1;
              *(_QWORD *)(v199 + 56) = 0;
              *(_QWORD *)(v199 + 64) = 0;
              *(_QWORD *)(v199 + 72) = 0;
              {
                v272 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v272, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              *(_QWORD *)(v199 + 80) = mdm::Allocator::instance(void)::alloc;
              *(_DWORD *)(v199 + 96) = 0;
              v771.__begin_ = (std::vector<unsigned int>::pointer)v199;
              if (v169 >= (uint64_t *)v744)
                break;
              v771.__begin_ = 0;
              *v169++ = v199;
              v201 = v771.__begin_;
              if (v771.__begin_)
                goto LABEL_319;
LABEL_331:
              v196 = 0;
              v6 = *(v169 - 1);
              *(_DWORD *)(v6 + 96) = *((_DWORD *)v728 + 4);
              v197 = *(void (****)(_QWORD))v195;
              v198 = *(_QWORD *)(*(_QWORD *)v195 + 88);
LABEL_332:
              *(_QWORD *)v195 = 0;
              v231 = *(_QWORD **)(v6 + 64);
              v232 = *(_QWORD *)(v6 + 72);
              if ((unint64_t)v231 < v232)
              {
                if (v231)
                {
                  *v231 = v197;
                  v197 = 0;
                }
                v233 = v231 + 1;
                goto LABEL_362;
              }
              v234 = *(_QWORD *)(v6 + 56);
              v235 = ((uint64_t)v231 - v234) >> 3;
              v236 = v235 + 1;
              if ((unint64_t)(v235 + 1) >> 61)
                abort();
              v237 = v232 - v234;
              if (v237 >> 2 > v236)
                v236 = v237 >> 2;
              if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
                v238 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v238 = v236;
              if (v238)
              {
                v239 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 16))(*(_QWORD *)(v6 + 80), 8 * v238, 8);
                v240 = (_QWORD *)(v239 + 8 * v235);
                v241 = v239 + 8 * v238;
                if (v239)
                {
                  *v240 = v197;
                  v197 = 0;
                }
              }
              else
              {
                v241 = 0;
                v240 = (_QWORD *)(8 * v235);
              }
              v8 = v739;
              v233 = v240 + 1;
              v242 = *(_QWORD **)(v6 + 56);
              v243 = *(_QWORD *)(v6 + 64);
              if ((_QWORD *)v243 == v242)
              {
                *(_QWORD *)(v6 + 56) = v240;
                *(_QWORD *)(v6 + 64) = v233;
                v732 = *(_QWORD *)(v6 + 72);
                *(_QWORD *)(v6 + 72) = v241;
                if (!v243)
                  goto LABEL_362;
                goto LABEL_361;
              }
              v244 = v243 - (_QWORD)v242 - 8;
              v725 = v165;
              if (v244 <= 0x47
                || ((v245 = v244 >> 3, v243 - 8 * v245 - 8 < (unint64_t)v240)
                  ? (v246 = (unint64_t)&v240[-v245 - 1] >= v243)
                  : (v246 = 1),
                    !v246))
              {
                v249 = *(_QWORD **)(v6 + 64);
                do
                {
LABEL_358:
                  v255 = *--v249;
                  *v249 = 0;
                  *--v240 = v255;
                }
                while (v249 != v242);
                goto LABEL_359;
              }
              v247 = v245 + 1;
              v248 = (v245 + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v249 = (_QWORD *)(v243 - 8 * v248);
              v250 = v240 - 2;
              v251 = (__int128 *)(v243 - 32);
              v252 = v248;
              do
              {
                v254 = *v251;
                v253 = v251[1];
                *v251 = 0uLL;
                v251[1] = 0uLL;
                v251 -= 2;
                *(v250 - 1) = v254;
                *v250 = v253;
                v250 -= 2;
                v252 -= 4;
              }
              while (v252);
              v240 -= v248;
              if (v247 != v248)
                goto LABEL_358;
LABEL_359:
              v243 = *(_QWORD *)(v6 + 56);
              v256 = *(_QWORD **)(v6 + 64);
              *(_QWORD *)(v6 + 56) = v240;
              *(_QWORD *)(v6 + 64) = v233;
              v732 = *(_QWORD *)(v6 + 72);
              *(_QWORD *)(v6 + 72) = v241;
              if (v256 != (_QWORD *)v243)
              {
                do
                {
                  v260 = (void (***)(_QWORD))*--v256;
                  v259 = v260;
                  *v256 = 0;
                  if (v260)
                  {
                    (**v259)(v259);
                    if ((v261 & 1) == 0
                    {
                      v262 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v262, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v259, 104);
                  }
                }
                while (v256 != (_QWORD *)v243);
                v8 = v739;
                v165 = v725;
                if (!v243)
                  goto LABEL_362;
LABEL_361:
                (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v243, v732 - v243);
                goto LABEL_362;
              }
              v165 = v725;
              if (v243)
                goto LABEL_361;
LABEL_362:
              *(_QWORD *)(v6 + 64) = v233;
              if (v197)
              {
                (**v197)(v197);
                {
                  v258 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v258, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v197, 104);
              }
              v196 += v198;
              v195 += 8;
              if (v195 == v736)
                goto LABEL_224;
            }
            v202 = (char *)v169 - (char *)v165;
            v203 = v169 - v165;
            v204 = v203 + 1;
            if ((unint64_t)(v203 + 1) >> 61)
              abort();
            if ((v744 - (char *)v165) >> 2 > v204)
              v204 = (v744 - (char *)v165) >> 2;
            if ((unint64_t)(v744 - (char *)v165) >= 0x7FFFFFFFFFFFFFF8)
              v205 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v205 = v204;
            if (v205)
            {
              if (v205 >> 61)
                goto LABEL_838;
              v206 = (char *)operator new(8 * v205);
            }
            else
            {
              v206 = 0;
            }
            v207 = (uint64_t *)&v206[8 * v203];
            v771.__begin_ = 0;
            *v207 = v199;
            v731 = v207 + 1;
            v208 = (char *)v169 - (char *)v165;
            if (v169 == v165)
            {
              v8 = v739;
            }
            else
            {
              v209 = v208 - 8;
              if ((unint64_t)(v208 - 8) < 0x138)
              {
                v210 = v169;
                goto LABEL_297;
              }
              v263 = v209 & 0xFFFFFFFFFFFFFFF8;
              if ((uint64_t *)((char *)v169 - (v209 & 0xFFFFFFFFFFFFFFF8) - 8) > v169 - 1)
              {
                v210 = v169;
                goto LABEL_297;
              }
              if (&v206[v202 - 8 - v263] > &v206[v202 - 8])
              {
                v210 = v169;
                goto LABEL_297;
              }
              v264 = v209 >> 3;
              if (&v169[-v264 - 1] < v207)
              {
                v265 = (unint64_t)&v206[v202 - v263 - 8];
                v210 = v169;
                if (v265 < (unint64_t)v169)
                  goto LABEL_849;
              }
              v266 = v264 + 1;
              v210 = &v169[-(v266 & 0x3FFFFFFFFFFFFFFCLL)];
              v267 = &v206[8 * v203 - 16];
              v268 = v169 - 4;
              v269 = v266 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v271 = *(_OWORD *)v268;
                v270 = *((_OWORD *)v268 + 1);
                *(_OWORD *)v268 = 0uLL;
                *((_OWORD *)v268 + 1) = 0uLL;
                v268 -= 4;
                *((_OWORD *)v267 - 1) = v271;
                *(_OWORD *)v267 = v270;
                v267 -= 32;
                v269 -= 4;
              }
              while (v269);
              v207 -= v266 & 0x3FFFFFFFFFFFFFFCLL;
              if (v266 != (v266 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_849:
                do
                {
LABEL_297:
                  v211 = *--v210;
                  *v210 = 0;
                  *--v207 = v211;
                }
                while (v210 != v165);
              }
              v8 = v739;
              do
              {
                v214 = *--v169;
                v213 = v214;
                *v169 = 0;
                if (v214)
                {
                  v215 = *(_QWORD **)(v213 + 56);
                  if (v215)
                  {
                    v216 = *(_QWORD **)(v213 + 64);
                    v212 = *(_QWORD *)(v213 + 56);
                    if (v216 != v215)
                    {
                      do
                      {
                        v219 = (void (***)(_QWORD, uint64_t))*--v216;
                        v218 = v219;
                        *v216 = 0;
                        if (v219)
                        {
                          (**v218)(v218, v212);
                          if ((v220 & 1) == 0
                          {
                            v221 = operator new();
                            *(_QWORD *)(v221 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v221 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v221 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v221 = &off_1E42B5668;
                            *(_QWORD *)(v221 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v221 + 72) = 0u;
                            *(_OWORD *)(v221 + 88) = 0u;
                            *(_OWORD *)(v221 + 104) = 0u;
                            *(_OWORD *)(v221 + 120) = 0u;
                            *(_OWORD *)(v221 + 136) = 0u;
                            *(_OWORD *)(v221 + 152) = 0u;
                            *(_OWORD *)(v221 + 168) = 0u;
                            *(_OWORD *)(v221 + 184) = 0u;
                            *(_OWORD *)(v221 + 200) = 0u;
                            *(_OWORD *)(v221 + 216) = 0u;
                            *(_OWORD *)(v221 + 232) = 0u;
                            *(_QWORD *)(v221 + 248) = 0;
                            v745 = v221;
                            *(_OWORD *)(v221 + 56) = 0u;
                            v222 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v221 + 56), 0);
                            if ((_DWORD)v222)
                              geo::read_write_lock::logFailure(v222, (uint64_t)"initialization", v223);
                            v217 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v745 + 48) = v217;
                            malloc_set_zone_name(v217, "VectorKitLabels");
                            *(_QWORD *)(v745 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v745;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v218, 104);
                        }
                      }
                      while (v216 != v215);
                      v212 = *(_QWORD *)(v213 + 56);
                      v8 = v739;
                    }
                    *(_QWORD *)(v213 + 64) = v215;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v213 + 80) + 40))(*(_QWORD *)(v213 + 80), v212, *(_QWORD *)(v213 + 72) - v212);
                  }
                  MEMORY[0x1A1AF4E00](v213, 0x1020C4010FC18DELL);
                }
              }
              while (v169 != v165);
            }
            v744 = &v206[8 * v205];
            if (v165)
              operator delete(v165);
            v165 = v207;
            v169 = v731;
            v201 = v771.__begin_;
            if (!v771.__begin_)
              goto LABEL_331;
LABEL_319:
            v224 = (_QWORD *)*((_QWORD *)v201 + 7);
            if (v224)
            {
              v225 = (_QWORD *)*((_QWORD *)v201 + 8);
              v226 = *((_QWORD *)v201 + 7);
              if (v225 != v224)
              {
                do
                {
                  v228 = (void (***)(_QWORD, uint64_t))*--v225;
                  v227 = v228;
                  *v225 = 0;
                  if (v228)
                  {
                    (**v227)(v227, v226);
                    if ((v229 & 1) == 0
                    {
                      v230 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v230, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v227, 104);
                  }
                }
                while (v225 != v224);
                v226 = *((_QWORD *)v201 + 7);
                v8 = v739;
              }
              *((_QWORD *)v201 + 8) = v224;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v201 + 10) + 40))(*((_QWORD *)v201 + 10), v226, *((_QWORD *)v201 + 9) - v226);
            }
            MEMORY[0x1A1AF4E00](v201, 0x1020C4010FC18DELL);
            goto LABEL_331;
          }
LABEL_224:
          v166 = v169;
          v728 = (uint64_t *)*v728;
          if (!v728)
            goto LABEL_401;
        }
        v178 = v166;
        do
        {
LABEL_242:
          v179 = *--v178;
          *v178 = 0;
          *--v175 = v179;
        }
        while (v178 != v165);
        goto LABEL_243;
      }
      v169 = 0;
      v165 = 0;
LABEL_401:
      v283 = *(v722 - 1);
      v284 = *(_QWORD *)(v283 + 376);
      v285 = *(int8x16_t **)(v283 + 384);
      v286 = 126 - 2 * __clz(((uint64_t)v285->i64 - v284) >> 3);
      if (v285 == (int8x16_t *)v284)
        v287 = 0;
      else
        v287 = v286;
      std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v284, v285, v287, 1);
      v288 = v165;
      if (v165 == v169)
      {
        if (!v169)
          goto LABEL_4;
      }
      else
      {
        do
        {
          v6 = *(v722 - 1);
          v290 = *v288;
          *v288 = 0;
          *(_QWORD *)&v758 = v290;
          v292 = *(uint64_t **)(v6 + 384);
          v291 = *(_QWORD *)(v6 + 392);
          if ((unint64_t)v292 >= v291)
          {
            v294 = *(_QWORD *)(v6 + 376);
            v295 = (char *)v292 - v294;
            v296 = ((uint64_t)v292 - v294) >> 3;
            if ((unint64_t)(v296 + 1) >> 61)
              abort();
            v297 = v291 - v294;
            v298 = v297 >> 2;
            if (v297 >> 2 <= (unint64_t)(v296 + 1))
              v298 = v296 + 1;
            if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF8)
              v299 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v299 = v298;
            v746 = v288;
            if (v299)
            {
              if (v299 >> 61)
                goto LABEL_838;
              v300 = (char *)operator new(8 * v299);
            }
            else
            {
              v300 = 0;
            }
            v301 = &v300[8 * v296];
            v302 = &v300[8 * v299];
            *(_QWORD *)&v758 = 0;
            *(_QWORD *)v301 = v290;
            v293 = v301 + 8;
            v303 = *(char **)(v6 + 376);
            v304 = *(char **)(v6 + 384);
            if (v304 == v303)
            {
              *(_QWORD *)(v6 + 376) = v301;
              *(_QWORD *)(v6 + 384) = v293;
              *(_QWORD *)(v6 + 392) = v302;
              v8 = v739;
            }
            else
            {
              v305 = v304 - v303 - 8;
              v8 = v739;
              if (v305 <= 0x77)
                goto LABEL_850;
              if (&v304[-(v305 & 0xFFFFFFFFFFFFFFF8) - 8] < v301
                && &v295[(_QWORD)v300 - (v305 & 0xFFFFFFFFFFFFFFF8) - 8] < v304)
              {
                goto LABEL_850;
              }
              v307 = (v305 >> 3) + 1;
              v308 = &v300[8 * v296 - 16];
              v309 = v304 - 32;
              v310 = v307 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v312 = *(_OWORD *)v309;
                v311 = *((_OWORD *)v309 + 1);
                *(_OWORD *)v309 = 0uLL;
                *((_OWORD *)v309 + 1) = 0uLL;
                v309 -= 32;
                *((_OWORD *)v308 - 1) = v312;
                *(_OWORD *)v308 = v311;
                v308 -= 32;
                v310 -= 4;
              }
              while (v310);
              v301 -= 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
              v304 -= 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
              if (v307 != (v307 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_850:
                do
                {
                  v313 = *((_QWORD *)v304 - 1);
                  v304 -= 8;
                  *(_QWORD *)v304 = 0;
                  *((_QWORD *)v301 - 1) = v313;
                  v301 -= 8;
                }
                while (v304 != v303);
              }
              v304 = *(char **)(v6 + 376);
              v314 = *(char **)(v6 + 384);
              *(_QWORD *)(v6 + 376) = v301;
              *(_QWORD *)(v6 + 384) = v293;
              *(_QWORD *)(v6 + 392) = v302;
              while (v314 != v304)
              {
                v317 = *((_QWORD *)v314 - 1);
                v314 -= 8;
                v316 = v317;
                *(_QWORD *)v314 = 0;
                if (v317)
                {
                  v318 = *(_QWORD **)(v316 + 56);
                  if (v318)
                  {
                    v319 = v165;
                    v320 = *(_QWORD **)(v316 + 64);
                    v315 = *(_QWORD *)(v316 + 56);
                    if (v320 != v318)
                    {
                      do
                      {
                        v322 = (void (***)(_QWORD, uint64_t))*--v320;
                        v321 = v322;
                        *v320 = 0;
                        if (v322)
                        {
                          (**v321)(v321, v315);
                          if ((v323 & 1) == 0
                          {
                            v324 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v324, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v321, 104);
                        }
                      }
                      while (v320 != v318);
                      v315 = *(_QWORD *)(v316 + 56);
                      v8 = v739;
                    }
                    *(_QWORD *)(v316 + 64) = v318;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v316 + 80) + 40))(*(_QWORD *)(v316 + 80), v315, *(_QWORD *)(v316 + 72) - v315);
                    v165 = v319;
                  }
                  MEMORY[0x1A1AF4E00](v316, 0x1020C4010FC18DELL);
                }
              }
            }
            if (v304)
              operator delete(v304);
            v288 = v746;
          }
          else
          {
            *(_QWORD *)&v758 = 0;
            *v292 = v290;
            v293 = v292 + 1;
            v8 = v739;
          }
          *(_QWORD *)(v6 + 384) = v293;
          v325 = v758;
          *(_QWORD *)&v758 = 0;
          if (v325)
          {
            v6 = *(_QWORD *)(v325 + 56);
            if (v6)
            {
              v326 = *(_QWORD **)(v325 + 64);
              v289 = *(_QWORD *)(v325 + 56);
              if (v326 != (_QWORD *)v6)
              {
                do
                {
                  v328 = (void (***)(_QWORD, uint64_t))*--v326;
                  v327 = v328;
                  *v326 = 0;
                  if (v328)
                  {
                    (**v327)(v327, v289);
                    if ((v329 & 1) == 0
                    {
                      v330 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v330, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v327, 104);
                  }
                }
                while (v326 != (_QWORD *)v6);
                v289 = *(_QWORD *)(v325 + 56);
                v8 = v739;
              }
              *(_QWORD *)(v325 + 64) = v6;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v325 + 80) + 40))(*(_QWORD *)(v325 + 80), v289, *(_QWORD *)(v325 + 72) - v289);
            }
            MEMORY[0x1A1AF4E00](v325, 0x1020C4010FC18DELL);
          }
          ++v288;
        }
        while (v288 != v169);
        if (!v165)
          goto LABEL_4;
        do
        {
          v333 = *--v169;
          v332 = v333;
          *v169 = 0;
          if (v333)
          {
            v334 = *(_QWORD *)(v332 + 56);
            if (v334)
            {
              v6 = *(_QWORD *)(v332 + 64);
              v331 = *(_QWORD *)(v332 + 56);
              if (v6 != v334)
              {
                do
                {
                  v336 = *(void (****)(_QWORD, uint64_t))(v6 - 8);
                  v6 -= 8;
                  v335 = v336;
                  *(_QWORD *)v6 = 0;
                  if (v336)
                  {
                    (**v335)(v335, v331);
                    if ((v337 & 1) == 0
                    {
                      v338 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v338, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v335, 104);
                  }
                }
                while (v6 != v334);
                v331 = *(_QWORD *)(v332 + 56);
                v8 = v739;
              }
              *(_QWORD *)(v332 + 64) = v334;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v332 + 80) + 40))(*(_QWORD *)(v332 + 80), v331, *(_QWORD *)(v332 + 72) - v331);
            }
            MEMORY[0x1A1AF4E00](v332, 0x1020C4010FC18DELL);
          }
        }
        while (v169 != v165);
      }
      operator delete(v165);
LABEL_4:
      std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&__p);
      v716 = (uint64_t *)*v716;
      if (!v716)
        goto LABEL_499;
    }
    while (1)
    {
      v87 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v11 + 88), *(float **)(*v11 + 72), 0);
      v88 = v87;
      v89 = v87;
      v90 = (unint64_t)v764;
      if (v764)
      {
        v91 = (uint8x8_t)vcnt_s8((int8x8_t)v764);
        v91.i16[0] = vaddlv_u8(v91);
        if (v91.u32[0] > 1uLL)
        {
          v8 = v87;
          if ((unint64_t)v764 <= v87)
            v8 = v87 % (unint64_t)v764;
        }
        else
        {
          v8 = ((_DWORD)v764 - 1) & v87;
        }
        v92 = (uint64_t *)*((_QWORD *)__p + v8);
        if (v92)
        {
          v93 = *v92;
          if (*v92)
          {
            if (v91.u32[0] < 2uLL)
            {
              while (1)
              {
                v95 = *(_QWORD *)(v93 + 8);
                if (v95 == v87)
                {
                  if (*(_DWORD *)(v93 + 16) == v87)
                    goto LABEL_93;
                }
                else if ((v95 & ((unint64_t)&v764[-1].__shared_weak_owners_ + 7)) != v8)
                {
                  goto LABEL_94;
                }
                v93 = *(_QWORD *)v93;
                if (!v93)
                  goto LABEL_94;
              }
            }
            do
            {
              v94 = *(_QWORD *)(v93 + 8);
              if (v94 == v87)
              {
                if (*(_DWORD *)(v93 + 16) == v87)
                {
LABEL_93:
                  v8 = (unint64_t)v13;
                  goto LABEL_154;
                }
              }
              else
              {
                if (v94 >= (unint64_t)v764)
                  v94 %= (unint64_t)v764;
                if (v94 != v8)
                  break;
              }
              v93 = *(_QWORD *)v93;
            }
            while (v93);
          }
        }
      }
LABEL_94:
      v93 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v766 + 16))(v766, 56, 8);
      v771.__begin_ = (std::vector<unsigned int>::pointer)v93;
      v771.__end_ = (std::vector<unsigned int>::pointer)&v766;
      *(_QWORD *)v93 = 0;
      *(_QWORD *)(v93 + 8) = v89;
      *(_DWORD *)(v93 + 16) = v88;
      *(_QWORD *)(v93 + 32) = 0;
      *(_QWORD *)(v93 + 40) = 0;
      *(_QWORD *)(v93 + 24) = 0;
      {
        v152 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v152, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v93 + 48) = mdm::Allocator::instance(void)::alloc;
      LOBYTE(v771.__end_cap_.__value_) = 1;
      v97 = (float)(unint64_t)(*((_QWORD *)&v766 + 1) + 1);
      if (!v90 || (float)(*(float *)&v767 * (float)v90) < v97)
        break;
LABEL_144:
      v118 = (uint64_t *)*((_QWORD *)__p + v8);
      if (v118)
      {
        *(_QWORD *)v93 = *v118;
        v8 = (unint64_t)v13;
LABEL_152:
        *v118 = v93;
        goto LABEL_153;
      }
      *(_QWORD *)v93 = *((_QWORD *)&v765 + 1);
      *((_QWORD *)&v765 + 1) = v93;
      *((_QWORD *)__p + v8) = (char *)&v765 + 8;
      v8 = (unint64_t)v13;
      if (*(_QWORD *)v93)
      {
        v119 = *(_QWORD *)(*(_QWORD *)v93 + 8);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v119 >= v90)
            v119 %= v90;
        }
        else
        {
          v119 &= v90 - 1;
        }
        v118 = (uint64_t *)((char *)__p + 8 * v119);
        goto LABEL_152;
      }
LABEL_153:
      ++*((_QWORD *)&v766 + 1);
LABEL_154:
      v120 = *(_QWORD **)(v93 + 32);
      v121 = *(_QWORD *)(v93 + 40);
      if ((unint64_t)v120 < v121)
      {
        if (v120)
        {
          v122 = *v11;
          *v11 = 0;
          *v120 = v122;
        }
        v86 = v120 + 1;
        goto LABEL_72;
      }
      v123 = *(_QWORD *)(v93 + 24);
      v124 = ((uint64_t)v120 - v123) >> 3;
      v125 = v124 + 1;
      if ((unint64_t)(v124 + 1) >> 61)
        abort();
      v126 = v121 - v123;
      if (v126 >> 2 > v125)
        v125 = v126 >> 2;
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
        v127 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v127 = v125;
      if (v127)
      {
        v128 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v93 + 48) + 16))(*(_QWORD *)(v93 + 48), 8 * v127, 8);
        v129 = (_QWORD *)(v128 + 8 * v124);
        v130 = v128 + 8 * v127;
        if (v128)
        {
          v131 = *v11;
          *v11 = 0;
          *v129 = v131;
        }
      }
      else
      {
        v130 = 0;
        v129 = (_QWORD *)(8 * v124);
      }
      v86 = v129 + 1;
      v132 = *(_QWORD **)(v93 + 24);
      v133 = *(_QWORD *)(v93 + 32);
      if ((_QWORD *)v133 == v132)
      {
        *(_QWORD *)(v93 + 24) = v129;
        *(_QWORD *)(v93 + 32) = v86;
        v139 = *(_QWORD *)(v93 + 40);
        *(_QWORD *)(v93 + 40) = v130;
        goto LABEL_183;
      }
      v134 = v133 - (_QWORD)v132 - 8;
      v8 = (unint64_t)v13;
      if (v134 > 0x47
        && ((v135 = v134 >> 3, v133 - 8 * v135 - 8 >= (unint64_t)v129)
         || (unint64_t)&v129[-v135 - 1] >= v133))
      {
        v144 = v135 + 1;
        v145 = (v135 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v136 = (_QWORD *)(v133 - 8 * v145);
        v146 = v129 - 2;
        v147 = (__int128 *)(v133 - 32);
        v148 = v145;
        do
        {
          v150 = *v147;
          v149 = v147[1];
          *v147 = 0uLL;
          v147[1] = 0uLL;
          v147 -= 2;
          *(v146 - 1) = v150;
          *v146 = v149;
          v146 -= 2;
          v148 -= 4;
        }
        while (v148);
        v129 -= v145;
        if (v144 == v145)
          goto LABEL_173;
      }
      else
      {
        v136 = *(_QWORD **)(v93 + 32);
      }
      do
      {
        v137 = *--v136;
        *v136 = 0;
        *--v129 = v137;
      }
      while (v136 != v132);
LABEL_173:
      v133 = *(_QWORD *)(v93 + 24);
      v138 = *(_QWORD **)(v93 + 32);
      *(_QWORD *)(v93 + 24) = v129;
      *(_QWORD *)(v93 + 32) = v86;
      v139 = *(_QWORD *)(v93 + 40);
      *(_QWORD *)(v93 + 40) = v130;
      if (v138 == (_QWORD *)v133)
      {
        if (!v133)
          goto LABEL_72;
LABEL_184:
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v93 + 48) + 40))(*(_QWORD *)(v93 + 48), v133, v139 - v133);
        goto LABEL_72;
      }
      do
      {
        v141 = (void (***)(_QWORD))*--v138;
        v140 = v141;
        *v138 = 0;
        if (v141)
        {
          (**v140)(v140);
          {
            v143 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v143, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v140, 104);
        }
      }
      while (v138 != (_QWORD *)v133);
LABEL_183:
      v8 = (unint64_t)v13;
      if (v133)
        goto LABEL_184;
LABEL_72:
      *(_QWORD *)(v93 + 32) = v86;
      if (++v11 == v12)
        goto LABEL_8;
    }
    v98 = (v90 & (v90 - 1)) != 0;
    if (v90 < 3)
      v98 = 1;
    v99 = v98 | (2 * v90);
    v100 = vcvtps_u32_f32(v97 / *(float *)&v767);
    if (v99 <= v100)
      prime = (int8x8_t)v100;
    else
      prime = (int8x8_t)v99;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v90 = (unint64_t)v764;
    if (*(_QWORD *)&prime <= (unint64_t)v764)
    {
      if (*(_QWORD *)&prime >= (unint64_t)v764)
        goto LABEL_131;
      v112 = vcvtps_u32_f32((float)*((unint64_t *)&v766 + 1) / *(float *)&v767);
      if ((unint64_t)v764 < 3
        || (v113 = (uint8x8_t)vcnt_s8((int8x8_t)v764), v113.i16[0] = vaddlv_u8(v113), v113.u32[0] > 1uLL))
      {
        v112 = std::__next_prime(v112);
      }
      else
      {
        v114 = 1 << -(char)__clz(v112 - 1);
        if (v112 >= 2)
          v112 = v114;
      }
      if (*(_QWORD *)&prime <= v112)
        prime = (int8x8_t)v112;
      if (*(_QWORD *)&prime >= v90)
      {
        v90 = (unint64_t)v764;
LABEL_131:
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v90 <= v89)
            v8 = v89 % v90;
          else
            v8 = v89;
        }
        else
        {
          v8 = ((_DWORD)v90 - 1) & v89;
        }
        goto LABEL_144;
      }
      if (!*(_QWORD *)&prime)
      {
        v151 = __p;
        __p = 0;
        if (v151)
          (*(void (**)(_QWORD, void *, uint64_t))(*(_QWORD *)v765 + 40))(v765, v151, 8 * (_QWORD)v764);
        v90 = 0;
        v764 = 0;
        goto LABEL_131;
      }
    }
    v102 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v765 + 16))(v765, 8 * *(_QWORD *)&prime, 8);
    v103 = __p;
    __p = v102;
    if (v103)
      (*(void (**)(_QWORD, void *, uint64_t))(*(_QWORD *)v765 + 40))(v765, v103, 8 * (_QWORD)v764);
    v104 = 0;
    v764 = (std::__shared_weak_count *)prime;
    do
      *((_QWORD *)__p + v104++) = 0;
    while (*(_QWORD *)&prime != v104);
    v105 = (_QWORD **)*((_QWORD *)&v765 + 1);
    if (!*((_QWORD *)&v765 + 1))
    {
LABEL_130:
      v90 = (unint64_t)prime;
      goto LABEL_131;
    }
    v106 = *(_QWORD *)(*((_QWORD *)&v765 + 1) + 8);
    v107 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v108 = v106 & v107;
      *((_QWORD *)__p + v108) = (char *)&v765 + 8;
      for (i = *v105; *v105; i = *v105)
      {
        v110 = i[1] & v107;
        if (v110 == v108)
        {
          v105 = (_QWORD **)i;
        }
        else if (*((_QWORD *)__p + v110))
        {
          *v105 = (_QWORD *)*i;
          v111 = 8 * v110;
          *i = **(_QWORD **)((char *)__p + v111);
          **(_QWORD **)((char *)__p + v111) = i;
        }
        else
        {
          *((_QWORD *)__p + v110) = v105;
          v105 = (_QWORD **)i;
          v108 = v110;
        }
      }
      goto LABEL_130;
    }
    if (v106 >= *(_QWORD *)&prime)
      v106 %= *(_QWORD *)&prime;
    *((_QWORD *)__p + v106) = (char *)&v765 + 8;
    v115 = *v105;
    if (!*v105)
      goto LABEL_130;
    while (1)
    {
      v117 = v115[1];
      if (v117 >= *(_QWORD *)&prime)
        v117 %= *(_QWORD *)&prime;
      if (v117 != v106)
      {
        if (!*((_QWORD *)__p + v117))
        {
          *((_QWORD *)__p + v117) = v105;
          goto LABEL_135;
        }
        *v105 = (_QWORD *)*v115;
        v116 = 8 * v117;
        *v115 = **(_QWORD **)((char *)__p + v116);
        **(_QWORD **)((char *)__p + v116) = v115;
        v115 = v105;
      }
      v117 = v106;
LABEL_135:
      v105 = (_QWORD **)v115;
      v115 = (_QWORD *)*v115;
      v106 = v117;
      if (!v115)
        goto LABEL_130;
    }
  }
  v722 = 0;
LABEL_499:
  v349 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v350 = *a6;
    v7 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v350 = 0;
  }
  *a1 = &off_1E42AF3A8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v351 = (int64_t)v722 - v8;
  if (v722 == (uint64_t *)v8)
  {
    v709 = 0;
    v355 = 0;
    v353 = a1;
  }
  else
  {
    if (v351 < 0)
      abort();
    v352 = operator new((size_t)v722 - v8);
    v353 = a1;
    a1[1] = v352;
    a1[2] = v352;
    v354 = (char *)&v352[v351 >> 3];
    a1[3] = v354;
    v355 = v352;
    memcpy(v352, (const void *)v8, v351);
    v709 = v354;
    a1[2] = v354;
  }
  *((_OWORD *)v353 + 2) = 0u;
  v353[10] = 0;
  v715 = (gdc::GlobeTileGrid **)(v353 + 10);
  *((_BYTE *)v353 + 88) = 0;
  *((_BYTE *)v353 + 112) = 0;
  *((_OWORD *)v353 + 3) = 0u;
  v707 = (void **)(v353 + 4);
  *(_OWORD *)((char *)v353 + 57) = 0u;
  if (v349)
  {
    *((_BYTE *)v353 + 88) = v350;
    *((_BYTE *)v353 + 89) = v6;
    *(_QWORD *)((char *)v353 + 92) = v7;
    *((_BYTE *)v353 + 112) = 1;
  }
  v740 = (void *)v8;
  if (v355 == v709)
  {
    v356 = 0;
    v357 = 0;
    goto LABEL_602;
  }
  v704 = (const QuadTile *)(v353 + 11);
  v356 = 0;
  v357 = 0;
  v726 = 0;
  v358 = a1;
  while (2)
  {
    v711 = v355;
    v359 = (_QWORD *)*v355;
    v359[1] = v358;
    v361 = (_QWORD **)v359[47];
    v360 = (_QWORD **)v359[48];
    v717 = v360;
LABEL_514:
    if (v361 != v360)
    {
      v719 = v361;
      v721 = v357;
      v723 = v356;
      v362 = *v361;
      v362[1] = **v361;
      v362[3] = v362[2];
      v362[5] = v362[4];
      v764 = 0;
      __p = 0;
      *(_QWORD *)&v765 = 0;
      memset(&v771, 0, sizeof(v771));
      v364 = (_QWORD **)v362[7];
      v363 = (_QWORD **)v362[8];
      if (v364 == v363)
        goto LABEL_552;
      v729 = v362;
      v733 = (_QWORD **)v362[8];
LABEL_520:
      v367 = *v364;
      *(_QWORD *)&v758 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v367, &__p, &v771, (uint64_t *)&v758);
      v368 = v758;
      v369 = v758 - 2;
      if ((unint64_t)v758 < 2)
        goto LABEL_519;
      v370 = (char *)__p;
      v371 = (float *)((char *)__p + 8);
      v372 = *(float *)__p;
      v373 = 1;
      while (1)
      {
        if (vabds_f32(*v371, v372) >= 1.0e-10)
        {
          v378 = v371[1] - *((float *)__p + 1);
          goto LABEL_528;
        }
        v374 = *((float *)__p + 1);
        v375 = v371[1];
        if (vabds_f32(v375, v374) >= 1.0e-10)
          break;
        ++v373;
        v371 += 2;
        if ((_QWORD)v758 == v373)
        {
          v376 = 0.0;
          v377 = 1.0;
          goto LABEL_529;
        }
      }
      v378 = v375 - v374;
LABEL_528:
      v379 = *v371 - v372;
      v380 = 1.0 / sqrtf((float)(v379 * v379) + (float)(v378 * v378));
      v377 = v380 * v379;
      v376 = v380 * v378;
LABEL_529:
      v381 = v758 - 1;
      if ((unint64_t)(v758 - 1) < 2)
      {
        v403 = 8;
        goto LABEL_549;
      }
      v382 = (float *)((char *)__p + 16);
      v383 = 1;
      v384 = 2;
      while (1)
      {
        v389 = v377;
        v390 = v376;
        v391 = v383 + 1;
        if (v383 + 1 < v368)
        {
          v392 = (float *)&v370[8 * v383];
          v393 = *v392;
          v394 = v392[1];
          v395 = v382;
          v396 = v369;
          while (vabds_f32(*v395, v393) < 1.0e-10)
          {
            v397 = v395[1];
            if (vabds_f32(v397, v394) >= 1.0e-10)
              goto LABEL_543;
            v395 += 2;
            if (!--v396)
              goto LABEL_544;
          }
          v397 = v395[1];
LABEL_543:
          v398 = v397 - v394;
          v399 = *v395 - v393;
          v400 = 1.0 / sqrtf((float)(v399 * v399) + (float)(v398 * v398));
          v377 = v400 * v399;
          v376 = v400 * v398;
        }
LABEL_544:
        v401 = atan2f(v376, v377);
        v386 = v401 - atan2f(v390, v389);
        v402 = v386;
        if (v386 > 3.14159265)
        {
          v385 = -6.28318531;
        }
        else
        {
          if (v402 >= -3.14159265)
            goto LABEL_533;
          v385 = 6.28318531;
        }
        v386 = v402 + v385;
LABEL_533:
        v387 = fmaxf(ceilf(fabsf(v386) * 1.2732), 1.0);
        v388 = 2;
        if ((unint64_t)v387 >= 2)
          v388 = 2 * (unint64_t)v387;
        v384 += v388;
        --v369;
        v382 += 2;
        v383 = v391;
        if (v391 == v381)
        {
          v403 = v384 + 6;
          v246 = (unint64_t)(v384 + 6) >= 0x10000;
          v358 = a1;
          v362 = v729;
          if (v246)
          {
            v367[2] = v367[1];
            v365 = v367[3];
          }
          else
          {
LABEL_549:
            v404 = 3 * v403 + v367[3];
            v367[2] = v367[1] + v403;
            v365 = v404 - 6;
          }
          v363 = v733;
          v367[4] = v365;
          v367[6] = v367[5];
LABEL_519:
          v366 = *v364++;
          v362[1] = v366[2] + v362[1] - v366[1];
          v362[3] = v366[4] + v362[3] - v366[3];
          v362[5] = v366[6] + v362[5] - v366[5];
          if (v364 != v363)
            goto LABEL_520;
          if (v771.__begin_)
            operator delete(v771.__begin_);
LABEL_552:
          v356 = v723;
          if (__p)
            operator delete(__p);
          v405 = *v719;
          if (v721 < v726)
          {
            *(_QWORD *)v721 = v405;
            v357 = v721 + 8;
          }
          else
          {
            v406 = (v721 - v723) >> 3;
            v407 = v406 + 1;
            if ((unint64_t)(v406 + 1) >> 61)
              abort();
            if ((v726 - v723) >> 2 > v407)
              v407 = (v726 - v723) >> 2;
            if ((unint64_t)(v726 - v723) >= 0x7FFFFFFFFFFFFFF8)
              v408 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v408 = v407;
            if (v408)
            {
              if (!(v408 >> 61))
              {
                v409 = operator new(8 * v408);
                goto LABEL_565;
              }
LABEL_838:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v409 = 0;
LABEL_565:
            v410 = &v409[8 * v406];
            *(_QWORD *)v410 = v405;
            v357 = v410 + 8;
            if (v721 != v723)
            {
              v411 = v721 - 8 - v723;
              if (v411 < 0x168
                || &v409[v721 - v723 - 8 - (v411 & 0xFFFFFFFFFFFFFFF8)] > &v409[v721 - v723 - 8]
                || &v721[-(v411 & 0xFFFFFFFFFFFFFFF8) - 8] > v721 - 8
                || (unint64_t)(v723 - v409) < 0x20)
              {
                v412 = v721;
              }
              else
              {
                v414 = (v411 >> 3) + 1;
                v412 = &v721[-8 * (v414 & 0x3FFFFFFFFFFFFFFCLL)];
                v415 = &v409[8 * v406 - 16];
                v416 = v721 - 16;
                v417 = v414 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v418 = *(_OWORD *)v416;
                  *(v415 - 1) = *((_OWORD *)v416 - 1);
                  *v415 = v418;
                  v415 -= 2;
                  v416 -= 32;
                  v417 -= 4;
                }
                while (v417);
                v410 -= 8 * (v414 & 0x3FFFFFFFFFFFFFFCLL);
                if (v414 == (v414 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_569;
              }
              do
              {
                v413 = *((_QWORD *)v412 - 1);
                v412 -= 8;
                *((_QWORD *)v410 - 1) = v413;
                v410 -= 8;
              }
              while (v412 != v723);
            }
LABEL_569:
            v726 = &v409[8 * v408];
            if (v723)
              operator delete(v723);
            v356 = v410;
            v358 = a1;
          }
          v361 = (_QWORD **)(v719 + 1);
          v360 = v717;
          goto LABEL_514;
        }
      }
    }
    v355 = v711 + 1;
    if (v711 + 1 != v709)
      continue;
    break;
  }
  if (!*((_BYTE *)v358 + 72))
    goto LABEL_602;
  v419 = (gdc::GlobeTileGrid *)operator new();
  v420 = v419;
  if (!*((_BYTE *)v358 + 112))
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  gdc::GlobeTileGrid::GlobeTileGrid(v419, v704);
  v421 = *v715;
  *v715 = v420;
  if (v421)
  {
    v422 = *((_QWORD *)v421 + 323);
    if (v422)
      MEMORY[0x1A1AF4DE8](v422, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v421, 0x1020C4007FF0C4BLL);
    v420 = *v715;
  }
  *((_QWORD *)v420 + 323) = operator new[]();
  if (v356 != v357)
  {
    v423 = v356;
    do
    {
      v424 = *(uint64_t **)(*(_QWORD *)v423 + 56);
      v425 = *(uint64_t **)(*(_QWORD *)v423 + 64);
      while (v424 != v425)
      {
        v426 = *v424;
        v427 = *(_QWORD *)(*v424 + 80);
        if (v427)
        {
          v428 = *(_QWORD *)(v426 + 88);
          if (v428)
          {
            v429 = 0;
            v430 = *(_QWORD *)(v426 + 72);
            v431 = *v715;
            v432 = *((_QWORD *)*v715 + 323);
            v433 = (float *)(v430 + 4);
            do
            {
              v434 = *((float *)v431 + 648) * *(float *)(v427 + 4 * v429);
              v435 = vcvts_n_u32_f32(*(v433 - 1), 2uLL);
              if (v435 >= 3)
                v435 = 3;
              v436 = *v433;
              v433 += 2;
              v437 = vcvts_n_u32_f32(v436, 2uLL);
              if (v437 >= 3)
                v437 = 3;
              v438 = (float *)(v432 + 8 * (v435 | (4 * v437)));
              v439 = fminf(v434, *v438);
              v440 = fmaxf(v438[1], v434);
              *v438 = v439;
              v438[1] = v440;
              ++v429;
            }
            while (v428 > v429);
          }
        }
        ++v424;
      }
      v423 += 8;
    }
    while (v423 != v357);
  }
  gdc::GlobeTileGrid::endBuildingHeightRange(*v715);
LABEL_602:
  v441 = 0;
  v442 = 0;
  v443 = 0;
  v444 = 0;
  v445 = v356;
  v446 = (v357 - v356) >> 3;
  v734 = v446;
  do
  {
    if (v442 == v446
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v445[8 * v442] + 8) + v444 - **(_QWORD **)&v445[8 * v442]) >= 0x10000)
    {
      v447 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v447->__shared_owners_ = 0;
      v448 = (unint64_t *)&v447->__shared_owners_;
      v447->__shared_weak_owners_ = 0;
      v447->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB50;
      v447[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v447[1].__shared_owners_ = 20;
      LODWORD(v447[1].__shared_weak_owners_) = 1;
      v447[2].__vftable = 0;
      v447[2].__shared_owners_ = 0;
      v447[2].__shared_weak_owners_ = 0;
      v447[3].__vftable = (std::__shared_weak_count_vtbl *)(20 * v444);
      v449 = (std::__shared_count)0;
      *(_OWORD *)&v447[3].__shared_owners_ = 0u;
      v447[4].std::__shared_count = 0u;
      v447[4].__shared_weak_owners_ = 0;
      if ((v450 & 1) == 0)
      {
        v449 = (std::__shared_count)0;
        if (v509)
        {
          v510 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v510, "GeoGL", 0xA3D02C1100000005);
          v449 = (std::__shared_count)0;
        }
      }
      v447[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
      v447[5].__shared_owners_ = 0;
      *((std::__shared_count *)v447 + 11) = v449;
      v447[8].std::__shared_count = v449;
      v447[8].__shared_weak_owners_ = 0;
      v447[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v447 + 10) = v449;
      v447[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v447[5].__shared_weak_owners_) = 0;
      v447[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B77A0;
      v447[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v447[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::TrafficBase::defaultVboReflection;
      v447[9].__shared_owners_ = (uint64_t)&unk_1E42B77C0;
      __p = &v447[1];
      v764 = v447;
      v451 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v451 + 1) = 0;
      v452 = (unint64_t *)(v451 + 8);
      *((_QWORD *)v451 + 2) = 0;
      *((_QWORD *)v451 + 3) = &off_1E42B5748;
      *(_QWORD *)v451 = &off_1E42DF1E8;
      *((_QWORD *)v451 + 4) = 2;
      *((_DWORD *)v451 + 10) = 257;
      *((_QWORD *)v451 + 6) = 0;
      *((_QWORD *)v451 + 7) = 0;
      *((_QWORD *)v451 + 8) = 0;
      *((_QWORD *)v451 + 9) = 2 * v443;
      v453 = 0uLL;
      *((_OWORD *)v451 + 5) = 0u;
      *((_OWORD *)v451 + 6) = 0u;
      *((_QWORD *)v451 + 14) = 0;
      if ((v454 & 1) == 0)
      {
        v453 = 0uLL;
        if (v511)
        {
          v512 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v512, "GeoGL", 0xA3D02C1100000005);
          v453 = 0uLL;
        }
      }
      *((_QWORD *)v451 + 15) = ggl::Allocator::instance(void)::alloc;
      *((_QWORD *)v451 + 16) = 0;
      *((_OWORD *)v451 + 11) = v453;
      *((_OWORD *)v451 + 12) = v453;
      *((_QWORD *)v451 + 26) = 0;
      *((_QWORD *)v451 + 27) = -1;
      *((_OWORD *)v451 + 10) = v453;
      *((_OWORD *)v451 + 9) = xmmword_19FFB2DD0;
      *((_DWORD *)v451 + 34) = 0;
      *((_DWORD *)v451 + 60) = 0;
      *((_QWORD *)v451 + 3) = &off_1E42B6B88;
      *((_QWORD *)v451 + 4) = 2;
      *((_QWORD *)v451 + 28) = &unk_1E42B6BA8;
      *((_QWORD *)v451 + 29) = "BatchType/IData";
      v771.__begin_ = (std::vector<unsigned int>::pointer)(v451 + 24);
      v771.__end_ = (std::vector<unsigned int>::pointer)v451;
      v455 = operator new();
      v456 = v455;
      *(_QWORD *)&v758 = v447 + 1;
      *((_QWORD *)&v758 + 1) = v447;
      do
        v457 = __ldxr(v448);
      while (__stxr(v457 + 1, v448));
      *(_QWORD *)&v753 = v451 + 24;
      *((_QWORD *)&v753 + 1) = v451;
      do
        v458 = __ldxr(v452);
      while (__stxr(v458 + 1, v452));
      ggl::TrafficBase::BaseMesh::BaseMesh(v455, (uint64_t)"BatchType/Mesh", (uint64_t *)&v758, (uint64_t *)&v753);
      do
        v459 = __ldaxr(v452);
      while (__stlxr(v459 - 1, v452));
      if (v459)
      {
        v460 = (std::__shared_weak_count *)*((_QWORD *)&v758 + 1);
        if (!*((_QWORD *)&v758 + 1))
          goto LABEL_622;
      }
      else
      {
        (*(void (**)(char *))(*(_QWORD *)v451 + 16))(v451);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v451);
        v460 = (std::__shared_weak_count *)*((_QWORD *)&v758 + 1);
        if (!*((_QWORD *)&v758 + 1))
          goto LABEL_622;
      }
      v461 = (unint64_t *)&v460->__shared_owners_;
      do
        v462 = __ldaxr(v461);
      while (__stlxr(v462 - 1, v461));
      if (!v462)
      {
        ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
        std::__shared_weak_count::__release_weak(v460);
      }
LABEL_622:
      v464 = (char *)a1[5];
      v463 = a1[6];
      if ((unint64_t)v464 >= v463)
      {
        v466 = (char *)*v707;
        v467 = v464 - (_BYTE *)*v707;
        v468 = v467 >> 3;
        v469 = (v467 >> 3) + 1;
        if (v469 >> 61)
          abort();
        v470 = v463 - (_QWORD)v466;
        if (v470 >> 2 > v469)
          v469 = v470 >> 2;
        if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFF8)
          v471 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v471 = v469;
        if (v471)
        {
          if (v471 >> 61)
            goto LABEL_838;
          v472 = operator new(8 * v471);
        }
        else
        {
          v472 = 0;
        }
        v473 = (uint64_t *)&v472[8 * v468];
        *v473 = v456;
        v465 = v473 + 1;
        if (v464 == v466)
        {
          v466 = v464;
        }
        else
        {
          v474 = v464 - 8 - v466;
          if (v474 < 0x58)
            goto LABEL_851;
          if ((unint64_t)(v464 - &v472[v467]) < 0x20)
            goto LABEL_851;
          v475 = (v474 >> 3) + 1;
          v476 = &v472[8 * v468 - 16];
          v477 = v464 - 16;
          v478 = v475 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v479 = *(_OWORD *)v477;
            *(v476 - 1) = *((_OWORD *)v477 - 1);
            *v476 = v479;
            v476 -= 2;
            v477 -= 32;
            v478 -= 4;
          }
          while (v478);
          v473 -= v475 & 0x3FFFFFFFFFFFFFFCLL;
          v464 -= 8 * (v475 & 0x3FFFFFFFFFFFFFFCLL);
          if (v475 != (v475 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_851:
            do
            {
              v480 = *((_QWORD *)v464 - 1);
              v464 -= 8;
              *--v473 = v480;
            }
            while (v464 != v466);
            v466 = (char *)*v707;
          }
        }
        a1[4] = v473;
        a1[5] = v465;
        a1[6] = &v472[8 * v471];
        if (v466)
          operator delete(v466);
      }
      else
      {
        *(_QWORD *)v464 = v456;
        v465 = v464 + 8;
      }
      a1[5] = v465;
      v446 = v734;
      if (v441 < v442)
      {
        v481 = 0;
        v482 = v441;
        do
        {
          v483 = *(_QWORD *)&v445[8 * v482];
          v484 = *(_QWORD *)(v483 + 32);
          v485 = v484 + v481;
          v486 = *(_QWORD *)(v483 + 40) + v481;
          *(_QWORD *)(v483 + 32) = v485;
          *(_QWORD *)(v483 + 40) = v486;
          v481 = v486 - v484;
          ++v482;
        }
        while (v442 != v482);
        v487 = 0;
        do
        {
          v488 = *(uint64_t **)&v445[8 * v441];
          v489 = *v488;
          v490 = *v488 + v487;
          v491 = v488[1] + v487;
          *v488 = v490;
          v488[1] = v491;
          v492 = v488[2];
          v493 = v492 + v481;
          v494 = v488[3] + v481;
          v488[2] = v493;
          v488[3] = v494;
          v488[11] = v456;
          v495 = (_QWORD *)v488[7];
          v496 = (_QWORD *)v488[8];
          if (v495 != v496)
          {
            v497 = v488[4];
            do
            {
              v498 = (_QWORD *)*v495++;
              v499 = v498[2] - v498[1];
              v498[1] = v490;
              v490 += v499;
              v500 = v498[4] - v498[3];
              v498[2] = v490;
              v498[3] = v493;
              v493 += v500;
              v501 = v498[6] - v498[5];
              v498[4] = v493;
              v498[5] = v497;
              v497 += v501;
              v498[6] = v497;
            }
            while (v495 != v496);
          }
          v487 = v491 - v489;
          v481 = v494 - v492;
          ++v441;
        }
        while (v441 != v442);
      }
      end = (std::__shared_weak_count *)v771.__end_;
      if (!v771.__end_)
        goto LABEL_658;
      v503 = (unint64_t *)(v771.__end_ + 2);
      do
        v504 = __ldaxr(v503);
      while (__stlxr(v504 - 1, v503));
      if (!v504)
      {
        ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
        std::__shared_weak_count::__release_weak(end);
        v505 = v764;
        if (v764)
          goto LABEL_659;
      }
      else
      {
LABEL_658:
        v505 = v764;
        if (v764)
        {
LABEL_659:
          v506 = (unint64_t *)&v505->__shared_owners_;
          do
            v507 = __ldaxr(v506);
          while (__stlxr(v507 - 1, v506));
          if (!v507)
          {
            ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
            std::__shared_weak_count::__release_weak(v505);
          }
        }
      }
      v444 = 0;
      v443 = 0;
      v441 = v442;
    }
    if (v442 < v446)
    {
      v508 = *(_QWORD **)&v445[8 * v442];
      v444 = v508[1] + v444 - *v508;
      v443 = v508[3] + v443 + v508[5] - (v508[2] + v508[4]);
    }
    ++v442;
  }
  while (v442 <= v446);
  v513 = a1;
  if (v445)
    operator delete(v445);
  if (v740)
    operator delete(v740);
  *a1 = &off_1E428C880;
  a1[15] = *a4;
  v514 = a4[1];
  a1[16] = v514;
  if (v514)
  {
    v515 = (unint64_t *)(v514 + 8);
    do
      v516 = __ldxr(v515);
    while (__stxr(v516 + 1, v515));
  }
  a1[17] = *a5;
  v517 = a5[1];
  a1[18] = v517;
  if (v517)
  {
    v518 = (unint64_t *)(v517 + 8);
    do
      v519 = __ldxr(v518);
    while (__stxr(v519 + 1, v518));
  }
  a1[19] = 0;
  v520 = a1[1];
  v693 = a1[2];
  if (v520 != v693)
  {
    v521 = 1.0;
    do
    {
      v523 = *(uint64_t ***)(*(_QWORD *)v520 + 376);
      v522 = *(uint64_t ***)(*(_QWORD *)v520 + 384);
      v694 = v520;
      v695 = v522;
      while (v523 != v522)
      {
        v524 = 0;
        v525 = **(_QWORD **)((*v523)[11] + 64);
        v699 = *v523;
        v526 = **v523;
        v527 = (*v523)[1];
        v758 = 0uLL;
        v528 = *(_QWORD *)(v525 + 8);
        v529 = v528 * v526;
        v530 = v528 * v527;
        if (v528 * v527 != v528 * v526)
        {
          if (a2 && *(_BYTE *)(v525 + 17) != 2)
            v524 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v525, v529, v528 * v527, 1, 1);
          else
            v524 = *(_QWORD *)(v525 + 72) + v529;
        }
        v698 = v523;
        *(_QWORD *)&v531 = a2;
        *((_QWORD *)&v531 + 1) = v525;
        v758 = v531;
        v759 = v529;
        v760 = v530;
        v762 = v524;
        v761 = 257;
        v532 = v699[2];
        v534 = v699[4];
        v533 = v699[5];
        if (v533 == v534)
        {
          v533 = v699[3];
        }
        else
        {
          if (v534 < v532)
            v532 = v699[4];
          if (v699[3] > v533)
            v533 = v699[3];
        }
        v535 = 0;
        v536 = *(_QWORD *)(v699[11] + 96);
        v753 = 0uLL;
        v537 = *(_QWORD *)(v536 + 8);
        v538 = v537 * v532;
        v539 = v537 * v533;
        if (v537 * v533 != v537 * v532)
        {
          if (a2 && *(_BYTE *)(v536 + 17) != 2)
            v535 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v536, v537 * v532, v539, 1, 1);
          else
            v535 = *(_QWORD *)(v536 + 72) + v538;
        }
        *(_QWORD *)&v540 = a2;
        *((_QWORD *)&v540 + 1) = v536;
        v753 = v540;
        v754 = v538;
        v755 = v539;
        v757 = v535;
        v756 = 257;
        v541 = v699[2];
        v542 = v699[4];
        memset(v752, 0, sizeof(v752));
        memset(&v751, 0, sizeof(v751));
        v543 = (std::__shared_weak_count **)v699[7];
        v697 = v699 + 7;
        v544 = (std::__shared_weak_count **)v699[8];
        if (v543 != v544)
        {
          v545 = v535 + 2 * v542 - 2 * v532;
          v546 = v535 + 2 * v541 - 2 * v532;
          v700 = (std::__shared_weak_count **)v699[8];
          while (1)
          {
            v548 = *v543;
            __p = v513;
            v764 = v548;
            v765 = xmmword_19FFB2F80;
            v766 = xmmword_19FFB3450;
            v767 = xmmword_19FFB2FB0;
            *(_OWORD *)v768 = xmmword_19FFB2F60;
            *(_OWORD *)&v768[16] = xmmword_19FFB2F70;
            v769 = xmmword_19FFB3460;
            v778[0] = v524;
            shared_weak_owners = v548->__shared_weak_owners_;
            if (shared_weak_owners != v548->__shared_owners_)
              break;
            v547 = v548->__shared_weak_owners_;
LABEL_707:
            v524 += 20 * (v547 - shared_weak_owners);
            v546 += 2 * (v548[1].__shared_owners_ - (unint64_t)v548[1].__vftable);
            v545 += 2 * ((uint64_t)v548[2].__vftable - v548[1].__shared_weak_owners_);
            if (++v543 == v544)
              goto LABEL_786;
          }
          v777 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v548, v752, &v751, (uint64_t *)&v777);
          v551 = v777;
          if (v777 >= 2)
          {
            v708 = v777 - 2;
            v701 = v543;
            v552 = (char *)v752[0];
            v720 = v751.__begin_;
            v770 = v524;
            v553 = *(unsigned int **)v752[0];
            v554 = v777 - 1;
            if (v777 >= 9)
            {
              v555 = v554 & 0xFFFFFFFFFFFFFFF8;
              v550.i64[1] = *(_QWORD *)v752[0];
              v558 = (int8x16_t)vdupq_lane_s32((int32x2_t)v553, 0);
              v559 = (int32x4_t *)((char *)v752[0] + 40);
              v560 = 0uLL;
              v561 = v554 & 0xFFFFFFFFFFFFFFF8;
              v562 = 0uLL;
              do
              {
                i32 = (const float *)v559[-2].i32;
                v780 = vld2q_f32(i32);
                v565 = *v559;
                v564 = v559[1];
                v559 += 4;
                v566 = (float32x4_t)vuzp1q_s32(v565, v564);
                v567 = (float32x4_t)vuzp2q_s32(v565, v564);
                v568 = vsubq_f32(v780.val[0], (float32x4_t)vextq_s8(v558, (int8x16_t)v780.val[0], 0xCuLL));
                v569 = vsubq_f32(v566, (float32x4_t)vextq_s8((int8x16_t)v780.val[0], (int8x16_t)v566, 0xCuLL));
                v570 = vsubq_f32(v780.val[1], (float32x4_t)vextq_s8(v550, (int8x16_t)v780.val[1], 0xCuLL));
                v780.val[0] = vsubq_f32(v567, (float32x4_t)vextq_s8((int8x16_t)v780.val[1], (int8x16_t)v567, 0xCuLL));
                v560 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v568, v568), v570, v570)), v560);
                v562 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v569, v569), v780.val[0], v780.val[0])), v562);
                v550 = (int8x16_t)v567;
                v558 = (int8x16_t)v566;
                v561 -= 8;
              }
              while (v561);
              v571 = vaddq_f32(v562, v560);
              v556 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v571, v571));
              if (v554 != v555)
              {
                v557 = (float32x2_t)vextq_s8((int8x16_t)v564, (int8x16_t)v564, 8uLL).u64[0];
                goto LABEL_716;
              }
            }
            else
            {
              v555 = 0;
              v556 = 0.0;
              v557 = *(float32x2_t *)v752[0];
LABEL_716:
              v572 = ~v555 + v777;
              v573 = (float32x2_t *)((char *)v752[0] + 8 * v555 + 8);
              do
              {
                v574 = *v573++;
                v575 = vsub_f32(v574, v557);
                v556 = sqrtf(vaddv_f32(vmul_f32(v575, v575))) + v556;
                v557 = v574;
                --v572;
              }
              while (v572);
            }
            v576 = v556;
            v577 = v521 / v556;
            if (v576 <= 1.0e-10)
              v577 = 0.0;
            v718 = v577;
            v578 = (float *)((char *)v752[0] + 8);
            v579 = sqrtf((float)((float)(*((float *)v752[0] + 2) - *(float *)&v553)* (float)(*((float *)v752[0] + 2) - *(float *)&v553))+ (float)((float)(*((float *)v752[0] + 3) - *((float *)&v553 + 1))* (float)(*((float *)v752[0] + 3) - *((float *)&v553 + 1))));
            v580 = 1;
            while (vabds_f32(*v578, *(float *)&v553) < 1.0e-10)
            {
              v581 = v578[1];
              if (vabds_f32(v581, *((float *)&v553 + 1)) >= 1.0e-10)
                goto LABEL_726;
              ++v580;
              v578 += 2;
              if (v777 == v580)
              {
                v582 = 0.0;
                v583 = 1.0;
                goto LABEL_727;
              }
            }
            v581 = v578[1];
LABEL_726:
            v584 = v581 - *((float *)&v553 + 1);
            v585 = *v578 - *(float *)&v553;
            v586 = v521 / sqrtf((float)(v585 * v585) + (float)(v584 * v584));
            v583 = v586 * v585;
            v582 = v586 * v584;
LABEL_727:
            v741 = v583;
            v747 = v582;
            v702 = v546;
            v703 = v545;
            v705 = v524;
            v737 = (int32x2_t)__PAIR64__(LODWORD(v582), LODWORD(v583));
            *(float *)&v587 = -v582;
            v771.__begin_ = (std::vector<unsigned int>::pointer)*v751.__begin_;
            v771.__end_ = v553;
            *(float *)&v773.__value_ = -v582;
            *((float *)&v773.__value_ + 1) = v583;
            v776 = 1;
            *(float *)&v771.__end_cap_.__value_ = (float)-v582 - v583;
            *((float *)&v771.__end_cap_.__value_ + 1) = v583 - v582;
            v772.f32[0] = v582 - v583;
            v772.f32[1] = -(float)(v582 + v583);
            v774 = xmmword_19FFB2F80;
            v775 = 0;
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
            LOBYTE(v776) = 0;
            v771.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v741), v587);
            v772.f32[0] = v747;
            v772.f32[1] = -v741;
            v774 = xmmword_19FFB2FB0;
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
            if (v554 < 2)
            {
              v591 = v551 - 1;
            }
            else
            {
              v588 = (float *)(v552 + 16);
              v589 = v708;
              v590 = 1;
              do
              {
                v592 = v737;
                v771.__begin_ = (std::vector<unsigned int>::pointer)v720[v590];
                v593 = (float *)&v552[8 * v590];
                v594 = *v593;
                v595 = v593[1];
                if (++v590 >= v551)
                {
LABEL_736:
                  v599 = (float32x2_t)vdup_lane_s32(v737, 1);
                  v600 = (unint64_t)v737;
                  v601 = *(float *)v737.i32;
                }
                else
                {
                  v596 = v588;
                  v597 = v589;
                  while (vabds_f32(*v596, v594) < 1.0e-10)
                  {
                    v598 = v596[1];
                    if (vabds_f32(v598, v595) >= 1.0e-10)
                      goto LABEL_738;
                    v596 += 2;
                    if (!--v597)
                      goto LABEL_736;
                  }
                  v598 = v596[1];
LABEL_738:
                  v602 = v598 - v595;
                  v603 = *v596 - v594;
                  v604 = v521 / sqrtf((float)(v603 * v603) + (float)(v602 * v602));
                  v601 = v604 * v603;
                  *(float *)&v605 = v604 * v602;
                  v600 = __PAIR64__(v604 * v602, LODWORD(v601));
                  v599 = (float32x2_t)__PAIR64__(v737.u32[1], v605);
                }
                v606 = (float *)&v552[8 * v590];
                v607 = v601 + *(float *)v737.i32;
                v608 = vaddv_f32(v599);
                v609 = (float)(v607 * v607) + (float)(v608 * v608);
                v737 = (int32x2_t)v600;
                v730 = *v606;
                v727 = v606[1];
                v724 = *(float *)v592.i32;
                if (v609 <= 0.0)
                {
                  v612 = *(float *)&v592.i32[1];
                  v611 = *(float *)v592.i32;
                }
                else
                {
                  v610 = v521 / sqrtf(v609);
                  v611 = -(float)(v608 * v610);
                  v612 = v610 * v607;
                }
                v613 = v599.f32[1];
                v771.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v595), LODWORD(v594));
                v735 = v579;
                *(float *)&v775 = v579;
                *((float *)&v775 + 1) = v579 * v718;
                v774 = xmmword_19FFB2FB0;
                v773.__value_ = (unsigned int *)__PAIR64__(LODWORD(v612), LODWORD(v611));
                HIBYTE(v776) = 1;
                v742 = v599.f32[0];
                v748 = v601;
                v614 = atan2f(v599.f32[0], v601);
                v615 = v614 - atan2f(v613, v724);
                v616 = v615;
                if (v615 <= 3.14159265)
                {
                  v617 = -1.0;
                  if (v616 < -3.14159265)
                    v615 = v616 + 6.28318531;
                }
                else
                {
                  v615 = v616 + -6.28318531;
                  v617 = -1.0;
                }
                v618 = sqrtf(fmaxf(-(float)(v617+ (float)((float)((float)(v611 * v748) + (float)(v612 * v742))* (float)((float)(v611 * v748) + (float)(v612 * v742)))), 0.1));
                v619.f32[0] = v611 / v618;
                v620 = v612 / v618;
                v621 = fabsf(v615);
                v622 = (unint64_t)fmaxf(ceilf(v621 * 1.2732), v521);
                if (v622 < 2)
                {
                  v771.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v620), v619.u32[0]);
                  v772.f32[0] = -v619.f32[0];
                  v772.f32[1] = -v620;
                  md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
                }
                else
                {
                  v623 = v521 / (float)((float)v622 + v617);
                  v624 = 0;
                  if (v621 >= 1.5708)
                  {
                    do
                    {
                      v627 = __sincosf_stret((float)((float)(v623 * (float)(int)v624) + -0.5) * v615);
                      *(float *)&v773.__value_ = -(float)((float)(v612 * v627.__sinval) - (float)(v611 * v627.__cosval));
                      *((float *)&v773.__value_ + 1) = (float)(v611 * v627.__sinval) + (float)(v612 * v627.__cosval);
                      v771.__end_cap_ = v773;
                      v772.f32[0] = -(float)((float)(v611 * v627.__cosval) - (float)(v612 * v627.__sinval));
                      v772.f32[1] = -*((float *)&v773.__value_ + 1);
                      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
                      HIBYTE(v776) = 0;
                      ++v624;
                    }
                    while (v622 != v624);
                  }
                  else if (v615 >= 0.0)
                  {
                    v743 = v620;
                    v749 = v619.i32[0];
                    do
                    {
                      v628 = __sincosf_stret((float)((float)(v623 * (float)(int)v624) + -0.5) * v615);
                      *(float *)&v773.__value_ = -(float)((float)(v612 * v628.__sinval) - (float)(v611 * v628.__cosval));
                      *((float *)&v773.__value_ + 1) = (float)(v611 * v628.__sinval) + (float)(v612 * v628.__cosval);
                      v771.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v743), v749);
                      v772.f32[0] = -(float)((float)(v611 * v628.__cosval) - (float)(v612 * v628.__sinval));
                      v772.f32[1] = -*((float *)&v773.__value_ + 1);
                      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
                      ++v624;
                    }
                    while (v622 != v624);
                  }
                  else
                  {
                    v619.f32[1] = v620;
                    v625 = vneg_f32(v619);
                    do
                    {
                      v626 = __sincosf_stret((float)((float)(v623 * (float)(int)v624) + -0.5) * v615);
                      *(float *)&v773.__value_ = -(float)((float)(v612 * v626.__sinval) - (float)(v611 * v626.__cosval));
                      *((float *)&v773.__value_ + 1) = (float)(v611 * v626.__sinval) + (float)(v612 * v626.__cosval);
                      v771.__end_cap_ = v773;
                      v772 = v625;
                      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
                      ++v624;
                    }
                    while (v622 != v624);
                  }
                }
                v579 = sqrtf((float)((float)(v730 - v594) * (float)(v730 - v594))+ (float)((float)(v727 - v595) * (float)(v727 - v595)))+ v735;
                --v589;
                v588 += 2;
                v591 = v551 - 1;
                v521 = 1.0;
              }
              while (v590 != v554);
            }
            v629 = (float *)&v552[8 * v591];
            v630 = (float *)&v552[8 * v708];
            v631 = *v629;
            v524 = v705;
            if (vabds_f32(*v629, *v630) >= 1.0e-10)
            {
              v633 = v629[1];
              v636 = v633 - v630[1];
              v513 = a1;
              v544 = v700;
              v543 = v701;
              v546 = v702;
              v545 = v703;
            }
            else
            {
              v632 = v630[1];
              v633 = v629[1];
              v513 = a1;
              v544 = v700;
              v543 = v701;
              v546 = v702;
              v545 = v703;
              if (vabds_f32(v633, v632) < 1.0e-10)
              {
                v635 = *(float *)&v737.i32[1];
                v634 = *(float *)v737.i32;
                goto LABEL_764;
              }
              v636 = v633 - v632;
            }
            v637 = v631 - *v630;
            v638 = v521 / sqrtf((float)(v637 * v637) + (float)(v636 * v636));
            v639 = v638 * v637;
            v635 = v638 * v636;
            v634 = v639;
LABEL_764:
            v750 = v635;
            *(float *)&v771.__end_cap_.__value_ = -v635;
            *((float *)&v771.__end_cap_.__value_ + 1) = v634;
            v738 = v634;
            v772.f32[0] = v635;
            v772.f32[1] = -v634;
            HIBYTE(v776) = 0;
            v771.__begin_ = (std::vector<unsigned int>::pointer)v720[v591];
            v771.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v633), LODWORD(v631));
            *(float *)&v773.__value_ = -v635;
            *((float *)&v773.__value_ + 1) = v634;
            *(float *)&v775 = v579;
            *((float *)&v775 + 1) = v579 * v718;
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
            LOBYTE(v776) = 1;
            *(float *)&v771.__end_cap_.__value_ = v738 - v750;
            *((float *)&v771.__end_cap_.__value_ + 1) = v750 + v738;
            v772.f32[0] = v750 + v738;
            v772.f32[1] = v750 - v738;
            v774 = *(_OWORD *)&v768[8];
            md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex((uint64_t)&__p, v778, (uint64_t)&v771);
            shared_owners = v548->__shared_owners_;
            v641 = v548->__shared_weak_owners_ - shared_owners;
            v642 = v641 >> 1;
            v643.i64[0] = 0x1000100010001;
            v643.i64[1] = 0x1000100010001;
            if (v641 >= 4)
            {
              v644 = v548->__shared_owners_;
              v645 = 2;
              if (v642 > 2)
                v645 = v642;
              if (v645 >= 3)
              {
                v648 = 0;
                v649 = v645 - 1;
                v650 = (v645 - 1) & 0xFFFFFFFFFFFFFFFELL;
                v651 = (_WORD *)(v546 + 12);
                do
                {
                  v652 = shared_owners + 2 * v648;
                  *(v651 - 6) = v652;
                  *v651 = v652 + 2;
                  *(v651 - 5) = v652 + 1;
                  v651[1] = v652 + 3;
                  *(v651 - 4) = v652 + 2;
                  v651[2] = v652 + 4;
                  *(v651 - 3) = v652 + 1;
                  v651[3] = v652 + 3;
                  *(v651 - 2) = v652 + 3;
                  v651[4] = v652 + 5;
                  v648 += 2;
                  *(v651 - 1) = v652 + 2;
                  v651[5] = v652 + 4;
                  v651 += 12;
                }
                while (v650 != v648);
                if (v649 != v650)
                {
                  v646 = v649 | 1;
                  LODWORD(v644) = 2 * v650 + shared_owners;
                  v647 = (_WORD *)(v546 + 12 * v650);
                  goto LABEL_773;
                }
              }
              else
              {
                v646 = 1;
                v647 = (_WORD *)v546;
LABEL_773:
                v653 = v645 - v646;
                do
                {
                  *v647 = v644;
                  v654 = v644 + 1;
                  v647[1] = v644 + 1;
                  v655 = v644 + 3;
                  LODWORD(v644) = v644 + 2;
                  v647[2] = v644;
                  v647[3] = v654;
                  v647[4] = v655;
                  v647[5] = v644;
                  v647 += 6;
                  --v653;
                }
                while (v653);
              }
            }
            if (v548[2].__vftable != (std::__shared_weak_count_vtbl *)v548[1].__shared_weak_owners_ && v642 - 1 >= 3)
            {
              v656 = v642 - 3;
              if (v642 - 3 >= 8)
              {
                v659 = v656 & 0xFFFFFFFFFFFFFFF8;
                v660 = (int64x2_t)xmmword_19FFB2FD0;
                v661 = (int64x2_t)xmmword_19FFB2FE0;
                v662 = (int64x2_t)xmmword_19FFB2FF0;
                v663 = (int64x2_t)xmmword_19FFB3000;
                v664 = (__int16 *)v545;
                v665 = v656 & 0xFFFFFFFFFFFFFFF8;
                v666 = vdupq_n_s64(shared_owners);
                do
                {
                  v779.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v666, vaddq_s64(v663, v663)), (int32x4_t)vaddq_s64(v666, vaddq_s64(v662, v662))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v666, vaddq_s64(v661, v661)), (int32x4_t)vaddq_s64(v666, vaddq_s64(v660, v660))));
                  v779.val[0] = vaddq_s16(v779.val[1], v643);
                  vst2q_s16(v664, v779);
                  v664 += 16;
                  v779.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                  v661 = vaddq_s64(v661, (int64x2_t)v779.val[0]);
                  v662 = vaddq_s64(v662, (int64x2_t)v779.val[0]);
                  v663 = vaddq_s64(v663, (int64x2_t)v779.val[0]);
                  v660 = vaddq_s64(v660, (int64x2_t)v779.val[0]);
                  v665 -= 8;
                }
                while (v665);
                if (v656 != v659)
                {
                  v657 = v659 | 2;
                  v658 = (_WORD *)(v545 + 4 * (v656 & 0xFFFFFFFFFFFFFFF8));
                  goto LABEL_783;
                }
              }
              else
              {
                v657 = 2;
                v658 = (_WORD *)v545;
LABEL_783:
                v667 = ~v657 + v642;
                v668 = shared_owners + 2 * v657;
                do
                {
                  *v658 = v668 - 2;
                  v658[1] = v668;
                  v668 += 2;
                  v658 += 2;
                  --v667;
                }
                while (v667);
              }
            }
          }
          v548 = *v543;
          shared_weak_owners = (*v543)->__shared_owners_;
          v547 = (*v543)->__shared_weak_owners_;
          goto LABEL_707;
        }
LABEL_786:
        {
          v691 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v691, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v670 = (_QWORD *)*v697;
        if (*v697)
        {
          v671 = (_QWORD *)v699[8];
          v672 = (_QWORD *)*v697;
          if (v671 != v670)
          {
            do
            {
              v674 = (void (***)(_QWORD, _QWORD *))*--v671;
              v673 = v674;
              *v671 = 0;
              if (v674)
              {
                (**v673)(v673, v672);
                {
                  v676 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v676, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v673, 104);
              }
            }
            while (v671 != v670);
            v672 = (_QWORD *)*v697;
          }
          v699[8] = (uint64_t)v670;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v699[10] + 40))(v699[10], v672, v699[9] - (_QWORD)v672);
          *v697 = 0;
          v699[8] = 0;
          v699[9] = 0;
          v513 = a1;
        }
        *v697 = 0;
        v699[8] = 0;
        v699[9] = 0;
        if (v751.__begin_)
          operator delete(v751.__begin_);
        if (v752[0])
          operator delete(v752[0]);
        if (v757)
        {
          v678 = v754;
          v677 = v755;
          if (v755 != v754)
          {
            v679 = (_QWORD *)*((_QWORD *)&v753 + 1);
            v680 = v756;
            v681 = HIBYTE(v756);
            if ((_QWORD)v753 && *(_BYTE *)(*((_QWORD *)&v753 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v753 + 64))(v753, v757);
            if (v680 && !v681)
            {
              v682 = v679[7];
              v683 = v679[8];
              if (v683 == v682)
                v682 = v679[10] - v679[9];
              if (v678 < v682)
                v682 = v678;
              if (v683 <= v677)
                v683 = v677;
              if (v683 == v682)
                v683 = v682 + v679[10] - v679[9];
              v679[7] = v682;
              v679[8] = v683;
            }
          }
        }
        if (v762)
        {
          v685 = v759;
          v684 = v760;
          if (v760 != v759)
          {
            v686 = (_QWORD *)*((_QWORD *)&v758 + 1);
            v687 = v761;
            v688 = HIBYTE(v761);
            if ((_QWORD)v758 && *(_BYTE *)(*((_QWORD *)&v758 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v758 + 64))(v758, v762);
            if (v687 && !v688)
            {
              v689 = v686[7];
              v690 = v686[8];
              if (v690 == v689)
                v689 = v686[10] - v686[9];
              if (v685 < v689)
                v689 = v685;
              if (v690 <= v684)
                v690 = v684;
              if (v690 == v689)
                v690 = v689 + v686[10] - v686[9];
              v686[7] = v689;
              v686[8] = v690;
            }
          }
        }
        v523 = v698 + 1;
        v522 = v695;
      }
      v520 = v694 + 8;
    }
    while (v694 + 8 != v693);
  }
  return (uint64_t)v513;
}

void sub_19F48C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t v53;
  void *v54;
  void *v56;
  void *v57;

  MEMORY[0x1A1AF4E00](v53, 0x1020C4007FF0C4BLL);
  if (v54)
    operator delete(v54);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a39);
  v56 = *a29;
  if (*a29)
  {
    *(_QWORD *)(a28 + 40) = v56;
    operator delete(v56);
  }
  v57 = *a24;
  if (*a24)
  {
    *(_QWORD *)(a28 + 16) = v57;
    operator delete(v57);
    if (!a53)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a53)
  {
    goto LABEL_3;
  }
  operator delete(a53);
  goto LABEL_3;
}

void md::SolidTrafficLayer::~SolidTrafficLayer(md::SolidTrafficLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C880;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C880;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF3A8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[10];
  a1[10] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C880;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C880;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(uint64_t a1, _QWORD *a2, std::vector<unsigned int> *a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer begin;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t i;
  _DWORD *v17;

  *a4 = 1;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9)
      a2[1] = *a2 + 8 * v8;
  }
  else
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)a2, v8 - v9);
    v8 = *(_QWORD *)(a1 + 88);
  }
  begin = a3->__begin_;
  v11 = a3->__end_ - a3->__begin_;
  if (v8 <= v11)
  {
    if (v8 < v11)
      a3->__end_ = &begin[v8];
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v8 - v11);
    begin = a3->__begin_;
    v8 = *(_QWORD *)(a1 + 88);
  }
  v12 = (_DWORD *)*a2;
  v13 = *(_DWORD **)(a1 + 72);
  *v12 = *v13;
  v12[1] = v13[1];
  *begin = 0;
  if (v8 >= 2)
  {
    v14 = *a4;
    v15 = v13 + 2;
    for (i = 1; i < v8; ++i)
    {
      v17 = &v12[2 * v14];
      if (*(_QWORD *)v15 != *((_QWORD *)v17 - 1))
      {
        begin[v14++] = i;
        *a4 = v14;
        *v17 = *v15;
        v17[1] = v15[1];
        v8 = *(_QWORD *)(a1 + 88);
      }
      v15 += 2;
    }
  }
}

uint64_t ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 104);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 104);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 104);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 104);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 104);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 104);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 104);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 104);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 104);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 104);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 104);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 104);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 104);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 104);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 104);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 104);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v14;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          v8 = (void (***)(_QWORD, uint64_t))*--v4;
          v7 = v8;
          *v4 = 0;
          if (v8)
          {
            (**v7)(v7, v5);
            {
              v14 = v3;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v3 = v14;
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
          }
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v5, *(_QWORD *)(v2 + 72) - v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C4010FC18DELL);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, uint64_t);
  void (***v9)(_QWORD, uint64_t);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      v5 = (_QWORD *)v2[3];
      if (v5)
      {
        v6 = (_QWORD *)v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, uint64_t))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 104);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = (uint64_t)v5;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, v2[5] - v3);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 56);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v14, 8 * a1[1]);
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 104);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 104);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 104);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

void md::PilledTrafficLayer::~PilledTrafficLayer(md::PilledTrafficLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C8A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C8A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF3C8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C8A0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C8A0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFFE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFFE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 104);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 104);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 104);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 104);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 104);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 104);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 104);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 104);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 104);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 104);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 104);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 104);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 104);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 104);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 104);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 104);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 104);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 104);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

void ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_2(uint64_t a1, int a2, char *a3, int a4, int a5, float a6, float a7, double a8, int8x16_t a9)
{
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v25;
  uint64_t v26;
  float32x2_t *v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  int v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(a1 + 124))
    goto LABEL_32;
  if (*(unsigned __int8 *)(v16 + 144) != *(unsigned __int8 *)(a1 + 125))
    goto LABEL_32;
  if (*(_DWORD *)(v16 + 148) != *(_DWORD *)(a1 + 88))
    goto LABEL_32;
  if (*(unsigned __int8 *)(v16 + 272) != *(unsigned __int8 *)(a1 + 126))
    goto LABEL_32;
  v17 = *(_DWORD *)(a1 + 92);
  if (*(_DWORD *)(v16 + 152) != v17)
    goto LABEL_32;
  v18 = *(float *)(a1 + 100);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(v16 + 168);
  if (v20)
  {
    if (*(unsigned __int8 *)(v19 + 153) != *(unsigned __int8 *)(v20 + 153))
      goto LABEL_32;
  }
  if (*(_BYTE *)(v16 + 273) && **(_QWORD **)(a1 + 72) != *(_QWORD *)(v16 + 192)
    || *(_QWORD *)(v16 + 208)
    || *(_DWORD *)(v16 + 244) != a2)
  {
    goto LABEL_32;
  }
  v21 = *(_QWORD *)(v16 + 56);
  if (*(_QWORD *)(v16 + 48) == v21)
    goto LABEL_40;
  if (v20 != v19 || *(_DWORD *)(v16 + 180) != (unint64_t)*(unsigned int *)(a1 + 96))
    goto LABEL_32;
  v22 = *(float *)(v16 + 184);
  if (v17 < 0)
  {
    if (v22 < v18 || (float)(v22 - v18) > 1.0)
    {
LABEL_32:
      md::TrafficAccum::flushToRibbonCollection(v16 + 48, a1 + 104, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48;
      v31 = *(_DWORD *)(a1 + 120);
      v32 = *(_BYTE *)(a1 + 125);
      v33 = *(_DWORD *)(a1 + 88);
      v34 = *(_DWORD *)(a1 + 92);
      v35 = *(_QWORD *)(a1 + 64);
      v36 = *(uint64_t **)(a1 + 72);
      v37 = *v36;
      v38 = (std::__shared_weak_count *)v36[1];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        v47 = 0;
        v48 = 0;
        md::TrafficAccum::reset(v30, v35, v31, v32, v33, v34, v37, (uint64_t)v38, &v47, a2, *(_BYTE *)(a1 + 126));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      else
      {
        v47 = 0;
        v48 = 0;
        md::TrafficAccum::reset(v30, v35, v31, v32, v33, v34, v37, 0, &v47, a2, *(_BYTE *)(a1 + 126));
      }
      goto LABEL_40;
    }
  }
  else if (v22 > v18 || (float)(v18 - v22) > 1.0)
  {
    goto LABEL_32;
  }
  *(float *)&a8 = ceilf(v18);
  v25 = floorf(v18);
  if (v17 <= 0)
    *(float *)&a8 = v25;
  *(double *)a9.i64 = vabds_f32(*(float *)&a8, v18);
  v26 = *(_QWORD *)(v16 + 224);
  if (*(double *)a9.i64 <= 0.01)
  {
    v28 = *(float32x2_t *)(v26 + 8 * (int)*(float *)&a8);
  }
  else
  {
    v27 = (float32x2_t *)(v26 + 8 * (int)v25);
    a8 = COERCE_DOUBLE(vsub_f32(v27[1], *v27));
    v28 = vmla_n_f32(*v27, *(float32x2_t *)&a8, v18 - v25);
  }
  v29 = vsub_f32(*(float32x2_t *)(v21 - 8), v28);
  if (vaddv_f32(vmul_f32(v29, v29)) >= 0.0001)
    goto LABEL_32;
LABEL_40:
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v43 = *(_DWORD *)(a1 + 120);
  v44 = *(_DWORD *)(a1 + 96);
  *(_QWORD *)(v42 + 168) = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(v42 + 176) = v43;
  *(_DWORD *)(v42 + 180) = v44;
  *(float *)(v42 + 184) = a7;
  if (a5)
  {
    v45 = a7;
    v46 = a6;
  }
  else
  {
    v45 = a6;
    v46 = a7;
  }
  md::TrafficAccum::addPoints((float32x2_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), a3, 0, 0, a4, *(float **)(a1 + 80), v45, v46, a8, a9);
}

void md::VenueModeSwitchLogic::~VenueModeSwitchLogic(md::VenueModeSwitchLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A6E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A6E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v7 = v6;
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v7;
  v4[2] = "md::VenueModeSwitchContext]";
  v4[3] = 26;
  v4[4] = result;
  *v4 = &off_1E42B1220;
  v4[1] = 0xB6D730E769EC7123;
  *a2 = v4;
  return result;
}

void sub_19F4924D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6D730E769EC7123 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::VenueModeSwitchLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17[0] = &off_1E42D0820;
  v17[1] = a2;
  v18 = v17;
  v15[0] = &off_1E42D0868;
  v15[1] = a2;
  v16 = v15;
  v20 = v19;
  v19[0] = &off_1E42D0868;
  v19[1] = a2;
  std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::operator()((uint64_t)v17);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
    goto LABEL_10;
  }
  if (v18)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = *(_QWORD *)(a3 + 24);
  if (v11)
  {
    if (*(_BYTE *)(a1 + 160))
    {
      v12 = *(_QWORD *)(v11 + 272);
      if (v12)
      {
        if (!**(_BYTE **)(a3 + 16))
        {
          *(_BYTE *)(a1 + 168) = *(_BYTE *)(a1 + 160);
          *(_QWORD *)(a1 + 176) = v12 + 16;
          *a4 = *(_OWORD *)(a1 + 168);
        }
      }
    }
  }
  if (!v20)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v20 + 48))(v20);
  result = v20;
  if (v20 == v19)
  {
    v14 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_19F49292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a13;
  if (a13 == &a10)
  {
    v26 = 4;
    v25 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "VenueModeSwitchLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0868;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0868;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "VenueModeSwitchLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0820;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v13 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xFBD83FDA8879FF7ELL)
      {
        if (v15[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0xFBD83FDA8879FF7ELL)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v6 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v19 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x1B8B241A8D896A1DLL)
      {
        if (v21[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x1B8B241A8D896A1DLL)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0x4927EB92E562CC46;
    if (a3 <= 0x4927EB92E562CC46)
      v25 = 0x4927EB92E562CC46 % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0x4927EB92E562CC46;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x4927EB92E562CC46)
      {
        if (v27[2] == 0x4927EB92E562CC46)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0x4927EB92E562CC46)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0x4927EB92E562CC46)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0x4927EB92E562CC46)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v7;
  result[1] = v6;
  result[2] = v5;
  result[3] = v31;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::VenueModeSwitchContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1220;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1060C400373A306);
  return a1;
}

void gdc::ManagedObjectHolder<md::VenueModeSwitchContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1220;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1060C400373A306);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::VenueModeSwitchContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t altitude::HeightMeshBuilder::computeBounds<ggl::CommonMesh::BufferPos4UV>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>)
{
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  float64x2_t v16;
  float64x2_t v17;
  __int32 *v18;
  unint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  unint64_t v42;
  float *v43;
  double v44;
  double v45;
  float v46;

  if (*(unsigned __int8 *)(result + 1) > 0xBu)
  {
    v15 = (float)(a7 + a6) * 0.5;
    *(double *)a5 = (float)(a6 - (float)(v15 + a8));
    *(float64x2_t *)(a5 + 8) = vcvtq_f64_f32(*(float32x2_t *)(a3 + 4));
    *(double *)(a5 + 24) = (float)(a7 - v15);
    *(float64x2_t *)(a5 + 32) = vcvtq_f64_f32(*(float32x2_t *)(a3 + 32 * (a2 * a2 - 1) + 4));
  }
  else
  {
    *(int64x2_t *)a5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(_OWORD *)(a5 + 16) = xmmword_19FFB2E00;
    *(int64x2_t *)(a5 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (a4)
    {
      if (a4 > 3)
      {
        v8 = a4 & 0xFFFFFFFFFFFFFFFCLL;
        v16 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v17 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v18 = (__int32 *)(a3 + 64);
        v19 = a4 & 0xFFFFFFFFFFFFFFFCLL;
        v20 = v17;
        v21 = v16;
        v22 = v17;
        v23 = v17;
        v24 = v16;
        v25 = v16;
        v26 = v17;
        v27 = v17;
        v28 = v16;
        v29 = v16;
        do
        {
          v30.i32[0] = *(v18 - 16);
          v31.i32[0] = *(v18 - 15);
          v30.i32[1] = *(v18 - 8);
          v32.i32[0] = *v18;
          v33.i32[0] = v18[1];
          v32.i32[1] = v18[8];
          v34 = vcvtq_f64_f32(v30);
          v35 = vcvtq_f64_f32(v32);
          v31.i32[1] = *(v18 - 7);
          v33.i32[1] = v18[9];
          v36 = vcvtq_f64_f32(v31);
          v37 = vcvtq_f64_f32(v33);
          v38.i32[0] = *(v18 - 14);
          v38.i32[1] = *(v18 - 6);
          v39.i32[0] = v18[2];
          v39.i32[1] = v18[10];
          v40 = vcvtq_f64_f32(v38);
          v41 = vcvtq_f64_f32(v39);
          v28 = vminnmq_f64(v28, v34);
          v29 = vminnmq_f64(v29, v35);
          v26 = vmaxnmq_f64(v26, v34);
          v27 = vmaxnmq_f64(v27, v35);
          v24 = vminnmq_f64(v24, v36);
          v25 = vminnmq_f64(v25, v37);
          v22 = vmaxnmq_f64(v22, v36);
          v23 = vmaxnmq_f64(v23, v37);
          v16 = vminnmq_f64(v16, v40);
          v21 = vminnmq_f64(v21, v41);
          v17 = vmaxnmq_f64(v17, v40);
          v20 = vmaxnmq_f64(v20, v41);
          v18 += 32;
          v19 -= 4;
        }
        while (v19);
        v14 = vminnmvq_f64(vminnmq_f64(v28, v29));
        v13 = vmaxnmvq_f64(vmaxnmq_f64(v26, v27));
        v12 = vminnmvq_f64(vminnmq_f64(v24, v25));
        v11 = vmaxnmvq_f64(vmaxnmq_f64(v22, v23));
        v9 = vminnmvq_f64(vminnmq_f64(v16, v21));
        v10 = vmaxnmvq_f64(vmaxnmq_f64(v17, v20));
        if (v8 == a4)
          goto LABEL_12;
      }
      else
      {
        v8 = 0;
        v9 = 1.79769313e308;
        v10 = -1.79769313e308;
        v11 = -1.79769313e308;
        v12 = 1.79769313e308;
        v13 = -1.79769313e308;
        v14 = 1.79769313e308;
      }
      v42 = a4 - v8;
      v43 = (float *)(a3 + 32 * v8 + 8);
      do
      {
        v44 = *(v43 - 2);
        v45 = *(v43 - 1);
        v46 = *v43;
        v43 += 8;
        v14 = fmin(v14, v44);
        v13 = fmax(v13, v44);
        v12 = fmin(v12, v45);
        v11 = fmax(v11, v45);
        v9 = fmin(v9, v46);
        v10 = fmax(v10, v46);
        --v42;
      }
      while (v42);
LABEL_12:
      *(double *)a5 = v14;
      *(double *)(a5 + 8) = v12;
      *(double *)(a5 + 16) = v9;
      *(double *)(a5 + 24) = v13;
      *(double *)(a5 + 32) = v11;
      *(double *)(a5 + 40) = v10;
    }
  }
  return result;
}

void altitude::HeightMeshBuilder::~HeightMeshBuilder(altitude::HeightMeshBuilder *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void altitude::HeightMeshBuilder::buildHeightMesh(uint64_t a1, const QuadTile *a2, unsigned int a3, unsigned int a4, float a5)
{
  unsigned int v8;
  double v9;
  _DWORD *v10;
  int v11;
  int xIdx;
  char v13;
  int yIdx;
  char type;
  unint64_t hash;
  float v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float32x2_t *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  float v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  float v101;
  float v102;
  float v103;
  float64x2_t v104;
  float64x2_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  float v120;
  _DWORD *v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float64x2_t v126;
  uint64_t v127;
  float64x2_t v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  double *v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  float v144;
  float v145;
  unsigned int v146;
  float v147;
  float32_t v148;
  float32x2_t *v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  __int16 v155;
  int v156;
  float32x2_t *v157;
  __int32 v158;
  int32x2_t v159;
  float32x2_t v165;
  int v166;
  int v167;
  unsigned int v168;
  float32x2_t *v169;
  float32x2_t *v170;
  __int32 v171;
  float32x2_t v172;
  int v173;
  float32x2_t *v174;
  float32x2_t *v175;
  __int32 v176;
  float32x2_t v177;
  int32x2_t v178;
  unsigned int v179;
  unsigned int v180;
  float32x2_t *v181;
  float32x2_t *v182;
  __int32 v183;
  float32x2_t v184;
  int v185;
  int v186;
  float32x2_t *v187;
  float32x2_t *v188;
  __int32 v189;
  int32x2_t v190;
  float32x2_t v191;
  unsigned int v192;
  float32x2_t *v193;
  float32x2_t *v194;
  __int32 v195;
  float32x2_t v196;
  unsigned int v197;
  int v198;
  float32x2_t *v199;
  float32x2_t *v200;
  __int32 v201;
  float32x2_t v202;
  int32x2_t v203;
  float32x2_t *v204;
  float32x2_t *v205;
  __int32 v206;
  float32x2_t v207;
  float v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  float64x2_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double v218;
  double v219;
  float64_t v220;
  unint64_t v221;
  float64_t v222;
  float64_t v223;
  unsigned int v224;
  int v225;
  float *v226;
  double v227;
  long double v228;
  long double v229;
  double v230;
  long double v231;
  double v232;
  __double2 v233;
  double v234;
  double v235;
  __double2 v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  BOOL v243;
  unsigned int v244;
  float v245;
  int v246;
  size_t v247;
  __float2 *v248;
  __float2 *v249;
  __float2 *v250;
  int v251;
  float v252;
  float v253;
  __float2 *v254;
  __float2 *v255;
  float v256;
  float v257;
  float v258;
  __float2 v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  _BYTE *v263;
  __float2 *v264;
  unint64_t v265;
  __float2 *v266;
  __float2 v267;
  uint64_t v268;
  _OWORD *v269;
  __float2 *v270;
  uint64_t v271;
  __int128 v272;
  unint64_t v273;
  unint64_t v274;
  float64x2_t v275;
  float64x2_t v276;
  __int32 *v277;
  unint64_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float32x2_t v289;
  float32x2_t v290;
  float32x2_t v291;
  float32x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float32x2_t v297;
  float32x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  unint64_t v301;
  float *v302;
  double v303;
  double v304;
  float v305;
  int v306;
  unsigned int v307;
  unsigned __int8 level;
  uint64_t *v309;
  float v310;
  float v311;
  uint64_t v312;
  unsigned int v313;
  float v314;
  float v315;
  float v316;
  int v317;
  NSObject *v318;
  _BOOL4 v319;
  float32_t v320;
  float32x2_t *v321;
  unsigned int v322;
  float32_t v323;
  float32x2_t *v324;
  uint64_t v325;
  float64_t v326;
  _DWORD *v327;
  double v328;
  long double v329;
  double v330;
  long double v331;
  double v332;
  __double2 v333;
  double v334;
  double v335;
  __double2 v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  float32x2_t v342;
  float32x2_t v343;
  float32x2_t v344;
  float32x2_t v345;
  unsigned int v346;
  float32x2_t *v347;
  float *v348;
  float32x2_t v349;
  float v350;
  float32x2_t v351;
  int v352;
  __float2 *v353;
  __float2 *v354;
  double *v355;
  __float2 v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  _BYTE *v360;
  __float2 *v361;
  unint64_t v362;
  __float2 *v363;
  uint64_t v364;
  _OWORD *v365;
  __float2 *v366;
  uint64_t v367;
  __int128 v368;
  __float2 v369;
  float64x2_t v370;
  float64x2_t v371;
  __int32 *v372;
  unint64_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float32x2_t v384;
  float32x2_t v385;
  float32x2_t v386;
  float32x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float32x2_t v392;
  float32x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  unint64_t v396;
  float *v397;
  double v398;
  double v399;
  float v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  unsigned int v421;
  float32x2_t *v422;
  unsigned int v423;
  float v424;
  unsigned int v425;
  float v426;
  unsigned int v427;
  float v428;
  float v429;
  float *v430;
  float *v431;
  float *v432;
  float *v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float *v445;
  float *v446;
  float *v447;
  float *v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  double *v468;
  _QWORD *v469;
  unint64_t v470;
  unint64_t v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  float v478;
  float32x2_t *v479;
  unint64_t v480;
  unint64_t v481;
  float64x2_t v482;
  float64x2_t v483;
  __int32 *v484;
  unint64_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float32x2_t v496;
  float32x2_t v497;
  float32x2_t v498;
  float32x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float32x2_t v504;
  float32x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  unint64_t v508;
  float *v509;
  double v510;
  double v511;
  float v512;
  unint64_t v513;
  float v514;
  unint64_t v515;
  unint64_t v516;
  float v517;
  uint64_t v518;
  QuadTile *v519;
  QuadTile *v520;
  double v521;
  double v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  unint64_t v530;
  double v531;
  double v532;
  unint64_t v533;
  double v534;
  double v535;
  unint64_t v536;
  double v537;
  unint64_t v538;
  unint64_t v539;
  double v540;
  unint64_t v541;
  double v542;
  uint64_t v543;
  uint64_t v544;
  double v545;
  uint64_t v546;
  double v547;
  double v548;
  unsigned int v549;
  float v550;
  double v551;
  int v552;
  float v553;
  uint64_t v554;
  double v555;
  __float2 *v556;
  float v557;
  float v559;
  float v560;
  char v561;
  char v562;
  int v563;
  int v564;
  __int16 v565;
  __int16 v566;
  uint8_t buf[16];
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  double v571;
  uint64_t v572;

  v572 = *MEMORY[0x1E0C80C00];
  LOBYTE(v8) = a2->_level;
  v9 = (double)(1 << v8);
  v10 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v8 = v10[34];
    v11 = v10[35];
    xIdx = v10[36];
    if (v8 >= 0x1F)
      v13 = 31;
    else
      v13 = v8;
    yIdx = ~(-1 << v13) - v11;
    type = -1;
  }
  else
  {
    yIdx = a2->_yIdx;
    xIdx = a2->_xIdx;
    type = a2->_type;
  }
  v561 = type;
  v562 = v8;
  v563 = yIdx;
  v564 = xIdx;
  hash = a2->_hash;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)&a2->_type;
  *(_QWORD *)(a1 + 192) = hash;
  *(_DWORD *)(a1 + 16) = a4;
  v17 = 626172.136 / v9;
  v559 = -3.4028e38;
  v560 = 3.4028e38;
  if (a4 < 2)
  {
    altitude::HeightMeshBuilder::allocateMeshData((altitude::HeightMeshBuilder *)a1, a3, 1);
    v39 = a1;
    v40 = *(_QWORD *)(a1 + 24);
    v41 = *(_QWORD *)(v40 + 48) - *(_QWORD *)(v40 + 40);
    v42 = *(_QWORD *)(v40 + 8);
    v43 = v41 / v42 * v42;
    v44 = v41 % v42;
    if ((*(_BYTE *)(v40 + 16) & 2) == 0)
    {
      v45 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v45 != -1)
      {
        *(_QWORD *)&v568.f64[0] = &v566;
        *(_QWORD *)buf = &v568;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        v39 = a1;
      }
    }
    v538 = v43;
    v554 = v41;
    if (v41 == v44)
      v46 = 0;
    else
      v46 = *(_QWORD *)(v40 + 72);
    v520 = (QuadTile *)a2;
    altitude::HeightMeshBuilder::generateMesh<ggl::CommonMesh::BufferPos4UV>(v39, (uint64_t)a2, (uint64_t)&v561, a3, v46, &v560, &v559, a5, v32, v33, v34, v35, v36, v37, v38);
    v60 = a3 * a3;
    v61 = v46 + 32 * ((a3 * a3) & 0xFFFD);
    *(_QWORD *)v61 = *(_QWORD *)v46;
    *(float *)(v61 + 8) = *(float *)(v46 + 8) - v17;
    v62 = *(float *)(v46 + 20) + 0.015625;
    *(_QWORD *)(v61 + 12) = *(_QWORD *)(v46 + 12);
    *(float *)(v61 + 20) = v62;
    v63 = a3 * a3;
    if (a3 >= 2)
    {
      v64 = 0;
      v65 = a3 - 1;
      v63 = a3 * a3;
      do
      {
        v566 = v64;
        v565 = v63;
        LOWORD(v568.f64[0]) = ++v64;
        *(_WORD *)buf = ++v63;
        v66 = v46 + 32 * (unsigned __int16)v64;
        v67 = v46 + 32 * (unsigned __int16)v63;
        *(_QWORD *)v67 = *(_QWORD *)v66;
        *(float *)(v67 + 8) = *(float *)(v66 + 8) - v17;
        v68 = *(float *)(v66 + 20) + 0.015625;
        *(_QWORD *)(v67 + 12) = *(_QWORD *)(v66 + 12);
        *(float *)(v67 + 20) = v68;
        --v65;
      }
      while (v65);
    }
    v543 = v40;
    v69 = a3 - 1;
    v70 = v63 + 1;
    v71 = v46 + 32 * (unsigned __int16)(a3 - 1);
    v72 = v46 + 32 * (unsigned __int16)(v63 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v71;
    v73 = *(_DWORD *)(v71 + 12);
    *(float *)(v72 + 8) = *(float *)(v71 + 8) - v17;
    *(_DWORD *)(v72 + 12) = v73;
    v74 = *(_DWORD *)(v71 + 20);
    v75 = (v60 - 1);
    *(float *)(v72 + 16) = *(float *)(v71 + 16) + -0.015625;
    *(_DWORD *)(v72 + 20) = v74;
    if (a3 >= 2)
    {
      v76 = a3 - 1;
      v77 = a3 - 1;
      do
      {
        v566 = v77;
        v565 = v70;
        v77 += a3;
        LOWORD(v568.f64[0]) = v77;
        *(_WORD *)buf = ++v70;
        v78 = v46 + 32 * (unsigned __int16)v77;
        v79 = v46 + 32 * (unsigned __int16)v70;
        *(_QWORD *)v79 = *(_QWORD *)v78;
        v80 = *(_DWORD *)(v78 + 12);
        *(float *)(v79 + 8) = *(float *)(v78 + 8) - v17;
        *(_DWORD *)(v79 + 12) = v80;
        v81 = *(_DWORD *)(v78 + 20);
        *(float *)(v79 + 16) = *(float *)(v78 + 16) + -0.015625;
        *(_DWORD *)(v79 + 20) = v81;
        --v76;
      }
      while (v76);
    }
    v82 = v70 + 1;
    v83 = v46 + 32 * (unsigned __int16)(v60 - 1);
    v84 = v46 + 32 * (unsigned __int16)(v70 + 1);
    *(_QWORD *)v84 = *(_QWORD *)v83;
    *(float *)(v84 + 8) = *(float *)(v83 + 8) - v17;
    v85 = *(float *)(v83 + 20) + -0.015625;
    *(_QWORD *)(v84 + 12) = *(_QWORD *)(v83 + 12);
    *(float *)(v84 + 20) = v85;
    if (a3 >= 2)
    {
      v86 = a3 - 1;
      v87 = v60 - 1;
      do
      {
        v566 = v87;
        v565 = v82;
        LOWORD(v568.f64[0]) = --v87;
        *(_WORD *)buf = ++v82;
        v88 = v46 + 32 * (unsigned __int16)v87;
        v89 = v46 + 32 * (unsigned __int16)v82;
        *(_QWORD *)v89 = *(_QWORD *)v88;
        *(float *)(v89 + 8) = *(float *)(v88 + 8) - v17;
        v90 = *(float *)(v88 + 20) + -0.015625;
        *(_QWORD *)(v89 + 12) = *(_QWORD *)(v88 + 12);
        *(float *)(v89 + 20) = v90;
        --v86;
      }
      while (v86);
    }
    v91 = v60 - a3;
    v92 = v82 + 1;
    v93 = v46 + 32 * (unsigned __int16)(v60 - a3);
    v94 = v46 + 32 * (unsigned __int16)(v82 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v93;
    v95 = *(_DWORD *)(v93 + 12);
    *(float *)(v94 + 8) = *(float *)(v93 + 8) - v17;
    *(_DWORD *)(v94 + 12) = v95;
    v96 = *(_DWORD *)(v93 + 20);
    *(float *)(v94 + 16) = *(float *)(v93 + 16) + 0.015625;
    *(_DWORD *)(v94 + 20) = v96;
    if (a3 >= 2)
    {
      do
      {
        v566 = v91;
        v565 = v92;
        v91 -= a3;
        LOWORD(v568.f64[0]) = v91;
        *(_WORD *)buf = ++v92;
        v97 = v46 + 32 * (unsigned __int16)v91;
        v98 = v46 + 32 * (unsigned __int16)v92;
        *(_QWORD *)v98 = *(_QWORD *)v97;
        v99 = *(_DWORD *)(v97 + 12);
        *(float *)(v98 + 8) = *(float *)(v97 + 8) - v17;
        *(_DWORD *)(v98 + 12) = v99;
        v100 = *(_DWORD *)(v97 + 20);
        *(float *)(v98 + 16) = *(float *)(v97 + 16) + 0.015625;
        *(_DWORD *)(v98 + 20) = v100;
        --v69;
      }
      while (v69);
    }
    v102 = v559;
    v101 = v560;
    v103 = (float)(v559 + v560) * 0.5;
    altitude::HeightMeshBuilder::constructGeocentricFrameForTile((altitude::HeightMeshBuilder *)&v568, v520, v103);
    v104 = v569;
    *(float64x2_t *)(a1 + 72) = v568;
    *(double *)(a1 + 120) = v571;
    v105 = v570;
    *(float64x2_t *)(a1 + 88) = v104;
    *(float64x2_t *)(a1 + 104) = v105;
    altitude::HeightMeshBuilder::generateSmercCoordinates<ggl::CommonMesh::BufferPos4UV>(*(_BYTE *)(a1 + 200), (uint64_t)v520, (double *)(a1 + 72), a3, v46, (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) - *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40))/ *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v103);
    v28 = v538;
    v25 = v543;
    if (v520->_level > 0xBu)
    {
      v114 = *(float *)(v46 + 4);
      v110 = *(float *)(v46 + 8);
      v116 = v46 + 32 * v75;
      v112 = *(float *)(v116 + 4);
      v111 = *(float *)(v116 + 8);
      v113 = (float)(v102 - v103);
      v115 = (float)(v101 - (float)(v103 + v17));
      v109 = (double *)a1;
      goto LABEL_41;
    }
    v106 = *(_QWORD **)(a1 + 24);
    v107 = v106[6] - v106[5];
    v108 = v106[1];
    v109 = (double *)a1;
    if (v108 > v107)
    {
      v110 = 1.79769313e308;
      v111 = -1.79769313e308;
      v112 = -1.79769313e308;
      v113 = -1.79769313e308;
      v114 = 1.79769313e308;
      v115 = 1.79769313e308;
LABEL_41:
      v118 = v44;
      v117 = v554;
      goto LABEL_117;
    }
    v139 = v107 / v108;
    v118 = v44;
    v117 = v554;
    if (v139 >= 4)
    {
      v140 = v139 & 0xFFFFFFFFFFFFFFFCLL;
      v275 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v276 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v277 = (__int32 *)(v46 + 64);
      v278 = v139 & 0xFFFFFFFFFFFFFFFCLL;
      v279 = v276;
      v280 = v275;
      v281 = v276;
      v282 = v276;
      v283 = v275;
      v284 = v275;
      v285 = v276;
      v286 = v276;
      v287 = v275;
      v288 = v275;
      do
      {
        v289.i32[0] = *(v277 - 16);
        v290.i32[0] = *(v277 - 15);
        v289.i32[1] = *(v277 - 8);
        v291.i32[0] = *v277;
        v292.i32[0] = v277[1];
        v291.i32[1] = v277[8];
        v293 = vcvtq_f64_f32(v289);
        v294 = vcvtq_f64_f32(v291);
        v290.i32[1] = *(v277 - 7);
        v292.i32[1] = v277[9];
        v295 = vcvtq_f64_f32(v290);
        v296 = vcvtq_f64_f32(v292);
        v297.i32[0] = *(v277 - 14);
        v297.i32[1] = *(v277 - 6);
        v298.i32[0] = v277[2];
        v298.i32[1] = v277[10];
        v299 = vcvtq_f64_f32(v297);
        v300 = vcvtq_f64_f32(v298);
        v287 = vminnmq_f64(v287, v293);
        v288 = vminnmq_f64(v288, v294);
        v285 = vmaxnmq_f64(v285, v293);
        v286 = vmaxnmq_f64(v286, v294);
        v283 = vminnmq_f64(v283, v295);
        v284 = vminnmq_f64(v284, v296);
        v281 = vmaxnmq_f64(v281, v295);
        v282 = vmaxnmq_f64(v282, v296);
        v275 = vminnmq_f64(v275, v299);
        v280 = vminnmq_f64(v280, v300);
        v276 = vmaxnmq_f64(v276, v299);
        v279 = vmaxnmq_f64(v279, v300);
        v277 += 32;
        v278 -= 4;
      }
      while (v278);
      v115 = vminnmvq_f64(vminnmq_f64(v287, v288));
      v113 = vmaxnmvq_f64(vmaxnmq_f64(v285, v286));
      v114 = vminnmvq_f64(vminnmq_f64(v283, v284));
      v112 = vmaxnmvq_f64(vmaxnmq_f64(v281, v282));
      v110 = vminnmvq_f64(vminnmq_f64(v275, v280));
      v111 = vmaxnmvq_f64(vmaxnmq_f64(v276, v279));
      if (v139 == v140)
      {
LABEL_117:
        v109[16] = v115;
        v109[17] = v114;
        v109[18] = v110;
        v109[19] = v113;
        v109[20] = v112;
        v109[21] = v111;
        if (v117 != v118)
          goto LABEL_209;
        return;
      }
    }
    else
    {
      v140 = 0;
      v110 = 1.79769313e308;
      v111 = -1.79769313e308;
      v112 = -1.79769313e308;
      v114 = 1.79769313e308;
      v113 = -1.79769313e308;
      v115 = 1.79769313e308;
    }
    v301 = v139 - v140;
    v302 = (float *)(v46 + 32 * v140 + 8);
    do
    {
      v303 = *(v302 - 2);
      v304 = *(v302 - 1);
      v305 = *v302;
      v302 += 8;
      v115 = fmin(v115, v303);
      v113 = fmax(v113, v303);
      v114 = fmin(v114, v304);
      v112 = fmax(v112, v304);
      v110 = fmin(v110, v305);
      v111 = fmax(v111, v305);
      --v301;
    }
    while (v301);
    goto LABEL_117;
  }
  if (a4 == 3)
  {
    altitude::HeightMeshBuilder::allocateMeshData((altitude::HeightMeshBuilder *)a1, a3, 0);
    v54 = a1;
    v25 = *(_QWORD *)(a1 + 24);
    v55 = *(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40);
    v56 = *(_QWORD *)(v25 + 8);
    v28 = v55 / v56 * v56;
    v57 = v55 % v56;
    if ((*(_BYTE *)(v25 + 16) & 2) == 0)
    {
      v58 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v58 != -1)
      {
        *(_QWORD *)&v568.f64[0] = &v566;
        *(_QWORD *)buf = &v568;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        v54 = a1;
      }
    }
    if (v55 == v57)
      v59 = 0;
    else
      v59 = *(_QWORD *)(v25 + 72);
    altitude::HeightMeshBuilder::generateMesh<ggl::CommonMesh::BufferPos4UV>(v54, (uint64_t)a2, (uint64_t)&v561, a3, v59, &v560, &v559, a5, v47, v48, v49, v50, v51, v52, v53);
    v124 = v559;
    v123 = v560;
    v125 = (float)(v559 + v560) * 0.5;
    altitude::HeightMeshBuilder::constructGeocentricFrameForTile((altitude::HeightMeshBuilder *)&v568, a2, v125);
    v126 = v569;
    *(float64x2_t *)(v54 + 72) = v568;
    v127 = v54 + 72;
    *(double *)(v127 + 48) = v571;
    v128 = v570;
    *(float64x2_t *)(v127 + 16) = v126;
    *(float64x2_t *)(v127 + 32) = v128;
    altitude::HeightMeshBuilder::generateSmercCoordinates<ggl::CommonMesh::BufferPos4UV>(*(_BYTE *)(v127 + 128), (uint64_t)a2, (double *)v127, a3, v59, (*(_QWORD *)(*(_QWORD *)(v127 - 48) + 48) - *(_QWORD *)(*(_QWORD *)(v127 - 48) + 40))/ *(_QWORD *)(*(_QWORD *)(v127 - 48) + 8), v125);
    if (a2->_level > 0xBu)
    {
      v137 = *(float *)(v59 + 4);
      v133 = *(float *)(v59 + 8);
      v141 = v59 + 32 * (a3 * a3 - 1);
      v135 = *(float *)(v141 + 4);
      v134 = *(float *)(v141 + 8);
      v136 = (float)(v124 - v125);
      v138 = (float)(v123 - (float)(v125 + v17));
      v132 = (double *)a1;
      goto LABEL_184;
    }
    v129 = *(_QWORD **)(v127 - 48);
    v130 = v129[6] - v129[5];
    v131 = v129[1];
    v132 = (double *)a1;
    if (v131 > v130)
    {
      v133 = 1.79769313e308;
      v134 = -1.79769313e308;
      v135 = -1.79769313e308;
      v136 = -1.79769313e308;
      v137 = 1.79769313e308;
      v138 = 1.79769313e308;
      goto LABEL_184;
    }
    v273 = v130 / v131;
    if (v273 >= 4)
    {
      v274 = v273 & 0xFFFFFFFFFFFFFFFCLL;
      v370 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v371 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v372 = (__int32 *)(v59 + 64);
      v373 = v273 & 0xFFFFFFFFFFFFFFFCLL;
      v374 = v371;
      v375 = v370;
      v376 = v371;
      v377 = v371;
      v378 = v370;
      v379 = v370;
      v380 = v371;
      v381 = v371;
      v382 = v370;
      v383 = v370;
      do
      {
        v384.i32[0] = *(v372 - 16);
        v385.i32[0] = *(v372 - 15);
        v384.i32[1] = *(v372 - 8);
        v386.i32[0] = *v372;
        v387.i32[0] = v372[1];
        v386.i32[1] = v372[8];
        v388 = vcvtq_f64_f32(v384);
        v389 = vcvtq_f64_f32(v386);
        v385.i32[1] = *(v372 - 7);
        v387.i32[1] = v372[9];
        v390 = vcvtq_f64_f32(v385);
        v391 = vcvtq_f64_f32(v387);
        v392.i32[0] = *(v372 - 14);
        v392.i32[1] = *(v372 - 6);
        v393.i32[0] = v372[2];
        v393.i32[1] = v372[10];
        v394 = vcvtq_f64_f32(v392);
        v395 = vcvtq_f64_f32(v393);
        v382 = vminnmq_f64(v382, v388);
        v383 = vminnmq_f64(v383, v389);
        v380 = vmaxnmq_f64(v380, v388);
        v381 = vmaxnmq_f64(v381, v389);
        v378 = vminnmq_f64(v378, v390);
        v379 = vminnmq_f64(v379, v391);
        v376 = vmaxnmq_f64(v376, v390);
        v377 = vmaxnmq_f64(v377, v391);
        v370 = vminnmq_f64(v370, v394);
        v375 = vminnmq_f64(v375, v395);
        v371 = vmaxnmq_f64(v371, v394);
        v374 = vmaxnmq_f64(v374, v395);
        v372 += 32;
        v373 -= 4;
      }
      while (v373);
      v138 = vminnmvq_f64(vminnmq_f64(v382, v383));
      v136 = vmaxnmvq_f64(vmaxnmq_f64(v380, v381));
      v137 = vminnmvq_f64(vminnmq_f64(v378, v379));
      v135 = vmaxnmvq_f64(vmaxnmq_f64(v376, v377));
      v133 = vminnmvq_f64(vminnmq_f64(v370, v375));
      v134 = vmaxnmvq_f64(vmaxnmq_f64(v371, v374));
      if (v273 == v274)
      {
LABEL_184:
        v132[16] = v138;
        v132[17] = v137;
        v132[18] = v133;
        v132[19] = v136;
        v132[20] = v135;
        v132[21] = v134;
        if (v59 && v55 != v57)
          goto LABEL_209;
        return;
      }
    }
    else
    {
      v274 = 0;
      v133 = 1.79769313e308;
      v134 = -1.79769313e308;
      v135 = -1.79769313e308;
      v137 = 1.79769313e308;
      v136 = -1.79769313e308;
      v138 = 1.79769313e308;
    }
    v396 = v273 - v274;
    v397 = (float *)(v59 + 32 * v274 + 8);
    do
    {
      v398 = *(v397 - 2);
      v399 = *(v397 - 1);
      v400 = *v397;
      v397 += 8;
      v138 = fmin(v138, v398);
      v136 = fmax(v136, v398);
      v137 = fmin(v137, v399);
      v135 = fmax(v135, v399);
      v133 = fmin(v133, v400);
      v134 = fmax(v134, v400);
      --v396;
    }
    while (v396);
    goto LABEL_184;
  }
  if (a4 != 2)
    return;
  altitude::HeightMeshBuilder::allocateMeshData((altitude::HeightMeshBuilder *)a1, a3, 1);
  v24 = a1;
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(v25 + 48) - *(_QWORD *)(v25 + 40);
  v27 = *(_QWORD *)(v25 + 8);
  v28 = v26 / v27 * v27;
  v29 = v26 % v27;
  if ((*(_BYTE *)(v25 + 16) & 2) == 0)
  {
    v30 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v30 != -1)
    {
      *(_QWORD *)&v568.f64[0] = &v566;
      *(_QWORD *)buf = &v568;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      v24 = a1;
    }
  }
  v515 = v29;
  v516 = v26;
  v519 = (QuadTile *)a2;
  if (v26 == v29)
    v31 = 0;
  else
    v31 = *(float32x2_t **)(v25 + 72);
  v119 = a3 - 1;
  v120 = 1.0 / (float)(a3 - 1);
  v517 = v17;
  if (!*(_QWORD *)v24)
  {
    if (a3)
    {
      v539 = v28;
      v544 = v25;
      v142 = 0;
      v143 = 0;
      v145 = v559;
      v144 = v560;
      do
      {
        v146 = 0;
        v147 = v120 * (float)v143;
        do
        {
          v148 = v120 * (float)v146;
          v144 = fminf(v144, a5);
          v145 = fmaxf(v145, a5);
          v149 = &v31[4 * v142 + 4 * v146];
          v149->f32[0] = v148;
          v149->f32[1] = v147;
          v149[1].f32[0] = a5;
          v149[1].i32[1] = 1065353216;
          v149[2].f32[0] = v148;
          v149[2].f32[1] = v147;
          v149[3].f32[0] = (float)(v146 & 1);
          v149[3].f32[1] = (float)(v143 & 1);
          ++v146;
        }
        while (a3 != v146);
        v142 += v146;
        ++v143;
      }
      while (v143 != a3);
LABEL_59:
      v559 = v145;
      v560 = v144;
      v28 = v539;
      v25 = v544;
      v17 = v517;
      if (a3 == 1)
        goto LABEL_64;
    }
    goto LABEL_60;
  }
  v121 = *(_DWORD **)(*(_QWORD *)v24 + 16);
  if (!v121)
  {
    v122 = 4295000000.0;
    if (!a3)
      goto LABEL_60;
    goto LABEL_120;
  }
  v122 = (float)(*v121 - 1);
  if (a3)
  {
LABEL_120:
    v539 = v28;
    v544 = v25;
    v306 = 0;
    v307 = 0;
    level = a2->_level;
    v557 = v122 / (float)(1 << (level - v562));
    v553 = (float)(a2->_xIdx - (v564 << (level - v562)));
    v550 = (float)(~(-1 << level) - a2->_yIdx + ((v563 + (-1 << v562) + 1) << (level - v562)));
    v145 = v559;
    v144 = v560;
    v309 = (uint64_t *)a1;
    while (1)
    {
      v310 = v120 * (float)v307;
      v311 = (float)(v307 & 1);
      v312 = *v309;
      if (*v309)
        break;
      v322 = 0;
      do
      {
        v323 = v120 * (float)v322;
        v144 = fminf(v144, a5);
        v145 = fmaxf(v145, a5);
        v324 = &v31[4 * v306 + 4 * v322];
        v324->f32[0] = v323;
        v324->f32[1] = v310;
        v324[1].f32[0] = a5;
        v324[1].i32[1] = 1065353216;
        v324[2].f32[0] = v323;
        v324[2].f32[1] = v310;
        v324[3].f32[0] = (float)(v322 & 1);
        v324[3].f32[1] = v311;
        ++v322;
      }
      while (a3 != v322);
      v306 += v322;
LABEL_122:
      if (++v307 == a3)
        goto LABEL_59;
    }
    v313 = 0;
    v314 = (float)(v310 + v550) * v557;
    while (1)
    {
      v315 = v120 * (float)v313;
      LODWORD(v568.f64[0]) = 0;
      if (!v312)
        goto LABEL_135;
      v316 = (float)(v315 + v553) * v557;
      v317 = *(_DWORD *)(v312 + 132);
      if (v317 == 16)
        break;
      if (v317 == 8)
      {
        karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v312, (float *)&v568, v316, v314, v18, v19, v20, v21, v22, v23);
LABEL_134:
        v309 = (uint64_t *)a1;
        goto LABEL_135;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v318 = GEOGetVectorKitVKDefaultLog_log;
      v319 = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
      v309 = (uint64_t *)a1;
      if (v319)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v318, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
        goto LABEL_134;
      }
LABEL_135:
      v320 = *(float *)v568.f64 + a5;
      v144 = fminf(v144, *(float *)v568.f64 + a5);
      v145 = fmaxf(*(float *)v568.f64 + a5, v145);
      v321 = &v31[4 * v306 + 4 * v313];
      v321->f32[0] = v315;
      v321->f32[1] = v310;
      v321[1].f32[0] = v320;
      v321[1].i32[1] = 1065353216;
      v321[2].f32[0] = v315;
      v321[2].f32[1] = v310;
      v321[3].f32[0] = (float)(v313 & 1);
      v321[3].f32[1] = v311;
      if (v119 == v313)
      {
        v306 += v313 + 1;
        goto LABEL_122;
      }
      v312 = *v309;
      ++v313;
    }
    karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v312, (float *)&v568, v316, v314, v18, v19, v20, v21, v22, v23);
    goto LABEL_134;
  }
LABEL_60:
  v150 = 0;
  v151 = 0;
  do
  {
    v152 = v150;
    v153 = a3 - 1;
    do
    {
      LOWORD(v568.f64[0]) = v152;
      v154 = v152 + 1;
      *(_WORD *)buf = v152 + 1;
      v155 = v152 + a3;
      v566 = v155 + 1;
      v565 = v155;
      v152 = v154;
      --v153;
    }
    while (v153);
    ++v151;
    v150 += a3;
  }
  while (v151 != v119);
LABEL_64:
  v156 = a3 * a3;
  v157 = &v31[4 * ((a3 * a3) & 0xFFFD)];
  *v157 = *v31;
  v158 = v31[1].i32[1];
  v157[1].f32[0] = v31[1].f32[0] - v17;
  v157[1].i32[1] = v158;
  v159 = vdup_n_s32(0xBF7D70A4);
  __asm { FMOV            V8.2S, #1.0 }
  v165 = vsub_f32(_D8, v31[3]);
  v157[2] = (float32x2_t)v159;
  v157[3] = v165;
  v166 = a3 * a3;
  if (a3 >= 2)
  {
    v167 = 0;
    v168 = a3 - 1;
    v166 = a3 * a3;
    do
    {
      v566 = v167;
      v565 = v166;
      LOWORD(v568.f64[0]) = ++v167;
      *(_WORD *)buf = ++v166;
      v169 = &v31[4 * (unsigned __int16)v167];
      v170 = &v31[4 * (unsigned __int16)v166];
      *v170 = *v169;
      v171 = v169[1].i32[1];
      v170[1].f32[0] = v169[1].f32[0] - v17;
      v170[1].i32[1] = v171;
      v172 = vsub_f32(_D8, v169[3]);
      v170[2] = (float32x2_t)v159;
      v170[3] = v172;
      --v168;
    }
    while (v168);
  }
  v518 = (v156 - 1);
  v173 = v166 + 1;
  v174 = &v31[4 * (unsigned __int16)(a3 - 1)];
  v175 = &v31[4 * (unsigned __int16)(v166 + 1)];
  *v175 = *v174;
  v176 = v174[1].i32[1];
  v175[1].f32[0] = v174[1].f32[0] - v17;
  v175[1].i32[1] = v176;
  v177 = vsub_f32(_D8, v174[3]);
  v175[2] = (float32x2_t)v159;
  v175[3] = v177;
  if (a3 >= 2)
  {
    v178 = vdup_n_s32(0xBF7D70A4);
    v179 = a3 - 1;
    v180 = a3 - 1;
    do
    {
      v566 = v180;
      v565 = v173;
      v180 += a3;
      LOWORD(v568.f64[0]) = v180;
      *(_WORD *)buf = ++v173;
      v181 = &v31[4 * (unsigned __int16)v180];
      v182 = &v31[4 * (unsigned __int16)v173];
      *v182 = *v181;
      v183 = v181[1].i32[1];
      v182[1].f32[0] = v181[1].f32[0] - v17;
      v182[1].i32[1] = v183;
      v184 = vsub_f32(_D8, v181[3]);
      v182[2] = (float32x2_t)v178;
      v182[3] = v184;
      --v179;
    }
    while (v179);
  }
  v185 = v173 + 1;
  v186 = v156 - 1;
  v187 = &v31[4 * (unsigned __int16)(v156 - 1)];
  v188 = &v31[4 * (unsigned __int16)(v173 + 1)];
  *v188 = *v187;
  v189 = v187[1].i32[1];
  v190 = vdup_n_s32(0xBF7D70A4);
  v188[1].f32[0] = v187[1].f32[0] - v17;
  v188[1].i32[1] = v189;
  v191 = vsub_f32(_D8, v187[3]);
  v188[2] = (float32x2_t)v190;
  v188[3] = v191;
  if (a3 >= 2)
  {
    v192 = a3 - 1;
    do
    {
      v566 = v186;
      v565 = v185;
      LOWORD(v568.f64[0]) = --v186;
      *(_WORD *)buf = ++v185;
      v193 = &v31[4 * (unsigned __int16)v186];
      v194 = &v31[4 * (unsigned __int16)v185];
      *v194 = *v193;
      v195 = v193[1].i32[1];
      v194[1].f32[0] = v193[1].f32[0] - v17;
      v194[1].i32[1] = v195;
      v196 = vsub_f32(_D8, v193[3]);
      v194[2] = (float32x2_t)v190;
      v194[3] = v196;
      --v192;
    }
    while (v192);
  }
  v197 = v156 - a3;
  v198 = v185 + 1;
  v199 = &v31[4 * (unsigned __int16)(v156 - a3)];
  v200 = &v31[4 * (unsigned __int16)v198];
  *v200 = *v199;
  v201 = v199[1].i32[1];
  v200[1].f32[0] = v199[1].f32[0] - v17;
  v200[1].i32[1] = v201;
  v202 = vsub_f32(_D8, v199[3]);
  v200[2] = (float32x2_t)v190;
  v200[3] = v202;
  if (a3 >= 2)
  {
    v203 = vdup_n_s32(0xBF7D70A4);
    do
    {
      v566 = v197;
      v565 = v198;
      v197 -= a3;
      LOWORD(v568.f64[0]) = v197;
      *(_WORD *)buf = ++v198;
      v204 = &v31[4 * (unsigned __int16)v197];
      v205 = &v31[4 * (unsigned __int16)v198];
      *v205 = *v204;
      v206 = v204[1].i32[1];
      v205[1].f32[0] = v204[1].f32[0] - v17;
      v205[1].i32[1] = v206;
      v207 = vsub_f32(_D8, v204[3]);
      v205[2] = (float32x2_t)v203;
      v205[3] = v207;
      --v119;
    }
    while (v119);
  }
  v208 = (float)(v559 + v560) * 0.5;
  altitude::HeightMeshBuilder::constructGeocentricFrameForTile((altitude::HeightMeshBuilder *)&v568, v519, v208);
  v210 = v569;
  v209 = v570;
  *(float64x2_t *)(a1 + 104) = v570;
  v211 = v571;
  *(double *)(a1 + 120) = v571;
  v212 = v568;
  *(float64x2_t *)(a1 + 72) = v568;
  *(float64x2_t *)(a1 + 88) = v210;
  v213 = *(_QWORD **)(a1 + 24);
  v215 = v213[5];
  v214 = v213[6];
  v216 = v214 - v215;
  v217 = v213[1];
  v218 = v210.f64[1];
  v219 = v209.f64[1];
  v220 = v212.f64[1];
  v221 = (v214 - v215) / v217;
  v555 = v209.f64[0];
  v551 = v211;
  v548 = v210.f64[0];
  if (*(_BYTE *)(a1 + 200))
  {
    if (v217 <= v216)
    {
      v222 = -(vmulq_f64(v210, v209).f64[0] - v212.f64[1] * v209.f64[1]);
      v223 = vmulq_f64(v212, v209).f64[0] - v212.f64[1] * v210.f64[1];
      v224 = 1;
      v225 = 1 << v519->_level;
      v529 = (double)v519->_xIdx;
      v532 = v222 + v222;
      v527 = (double)(v225 + ~v519->_yIdx);
      v535 = v223 + v223;
      v540 = -(v212.f64[0] * v209.f64[1] - v210.f64[0] * v210.f64[1])
           - (v212.f64[0] * v209.f64[1]
            - v210.f64[0] * v210.f64[1]);
      v523 = v540 * v211 + (v223 + v223) * v210.f64[1];
      v525 = 6.28318531 / (double)v225;
      v522 = -(v212.f64[1] - (v209.f64[1] + v209.f64[1]) * v222);
      v226 = (float *)&v31[1] + 1;
      v545 = v212.f64[0];
      do
      {
        v227 = *(v226 - 1);
        v228 = (v226[1] + v529) * v525;
        v229 = exp((v226[2] + v527) * v525 + -3.14159265);
        v230 = atan(v229) * 2.0 + -1.57079633;
        v231 = fmod(v228, 6.28318531);
        v232 = fmod(v231 + 6.28318531, 6.28318531) + -3.14159265;
        v233 = __sincos_stret(v230);
        v234 = 6378137.0 / sqrt(v233.__sinval * v233.__sinval * -0.00669437999 + 1.0);
        v235 = (v234 + v227) * v233.__cosval;
        v236 = __sincos_stret(v232);
        v237 = v235 * v236.__cosval;
        v238 = v235 * v236.__sinval;
        v239 = (v227 + v234 * 0.99330562) * v233.__sinval;
        v240 = -(v237 * v219 - v239 * v218) - (v237 * v219 - v239 * v218);
        v241 = -(v239 * v555 - v238 * v219) - (v239 * v555 - v238 * v219);
        v242 = -(v238 * v218 - v237 * v555) - (v238 * v218 - v237 * v555);
        *(float *)&v237 = v235 * v236.__cosval
                        - v545
                        + (v240 - v540) * v219
                        + (v241 - v532) * v551
                        + (v535 - v242) * v555;
        *(float *)&v238 = v522 + v235 * v236.__sinval + v240 * v551 + v242 * v218 - (v523 + v241 * v219);
        *(float *)&v239 = v239 - v548 + (v242 - v535) * v551 + (v241 - v532) * v555 + (v540 - v240) * v218;
        *(v226 - 3) = *(float *)&v237;
        *(v226 - 2) = *(float *)&v238;
        *(v226 - 1) = *(float *)&v239;
        *v226 = 1.0;
        v226 += 8;
        v243 = v221 > v224++;
      }
      while (v243);
    }
    goto LABEL_196;
  }
  v244 = v519->_level;
  if (v244 > 0xB)
  {
    v325 = 0;
    v326 = -(vmulq_f64(v210, v209).f64[0] - v212.f64[1] * v209.f64[1]);
    v209.f64[0] = vmulq_f64(v212, v209).f64[0] - v212.f64[1] * v210.f64[1];
    v537 = v209.f64[0] + v209.f64[0];
    v542 = v326 + v326;
    v514 = v208;
    v531 = (double)v519->_xIdx;
    v534 = v208;
    v528 = (double)((1 << v244) + ~v519->_yIdx);
    v526 = 6.28318531 / (double)(1 << v244);
    v547 = -(v212.f64[0] * v209.f64[1] - v210.f64[0] * v210.f64[1])
         - (v212.f64[0] * v209.f64[1]
          - v210.f64[0] * v210.f64[1]);
    v524 = v547 * v211;
    v521 = -(v209.f64[0] * v210.f64[1] - v326 * v209.f64[1]);
    v327 = (_DWORD *)v568.f64 + 1;
    do
    {
      v328 = v220;
      v329 = exp(((float)(v325 >> 1) + v528) * v526 + -3.14159265);
      v330 = atan(v329) * 2.0 + -1.57079633;
      v331 = fmod(((double)(v325 & 1) + v531) * v526, 6.28318531);
      v332 = fmod(v331 + 6.28318531, 6.28318531) + -3.14159265;
      v333 = __sincos_stret(v330);
      v334 = 6378137.0 / sqrt(v333.__sinval * v333.__sinval * -0.00669437999 + 1.0);
      v335 = (v334 + v534) * v333.__cosval;
      v336 = __sincos_stret(v332);
      v220 = v328;
      v337 = v335 * v336.__sinval;
      v338 = (v534 + v334 * 0.99330562) * v333.__sinval;
      v339 = -(v335 * v336.__cosval * v219 - v338 * v218);
      v340 = -(v338 * v555 - v337 * v219) - (v338 * v555 - v337 * v219);
      v341 = -(v337 * v218 - v335 * v336.__cosval * v555) - (v337 * v218 - v335 * v336.__cosval * v555);
      *(float *)&v337 = v335 * v336.__sinval + v341 * v218 - (v328 + v524 + v340 * v219) + (v521 + v339 * v551) * 2.0;
      *(float *)&v341 = v338 - v548 + (v341 - v537) * v551 + (v340 - v542) * v555 + (v547 - v339 * 2.0) * v218;
      *(v327 - 1) = LODWORD(v337);
      *v327 = LODWORD(v341);
      ++v325;
      v327 += 2;
    }
    while (v325 != 4);
    if (v217 <= v216)
    {
      v342 = *(float32x2_t *)&v568.f64[0];
      v343 = vsub_f32(*(float32x2_t *)&v568.f64[1], *(float32x2_t *)&v568.f64[0]);
      v344 = *(float32x2_t *)&v569.f64[0];
      v345 = vsub_f32(*(float32x2_t *)&v569.f64[1], *(float32x2_t *)&v569.f64[0]);
      v346 = 1;
      v347 = v31;
      do
      {
        v348 = (float *)v347;
        v349 = vld1_dup_f32(v348++);
        v350 = *v348;
        v347->f32[0] = v347[1].f32[0] - v514;
        v351 = vmla_f32(v342, v343, v349);
        *(float32x2_t *)v348 = vmla_n_f32(v351, vsub_f32(vmla_f32(v344, v345, v349), v351), v350);
        v347[1].i32[1] = 1065353216;
        v347 += 4;
        v243 = v221 > v346++;
      }
      while (v243);
    }
    goto LABEL_196;
  }
  v533 = v213[1];
  v536 = v214 - v215;
  v530 = (v214 - v215) / v217;
  v541 = v28;
  v546 = v25;
  v245 = 6.2832 / (float)(1 << v244);
  v246 = a3 >> 1;
  v247 = (v246 + 2);
  v248 = (__float2 *)operator new(v247 * 8);
  v249 = &v248[v247];
  v250 = (__float2 *)operator new(v247 * 8);
  v556 = &v250[v247];
  v251 = -1;
  v549 = v519->_xIdx;
  v252 = (float)(~(-1 << v244) - v519->_yIdx);
  v253 = 1.0 / (float)((float)v246 + -1.0);
  v254 = v248;
  v552 = v246;
  do
  {
    v256 = expf((float)((float)(v252 + (float)(v253 * (float)v251)) * v245) + -3.1416);
    v257 = atanf(v256);
    v258 = (float)(v257 + v257) + -1.57079633;
    v259 = __sincosf_stret(v258);
    if (v254 < v249)
    {
      *v254 = v259;
      v255 = v254 + 1;
      goto LABEL_84;
    }
    v260 = v254 - v248;
    v261 = v260 + 1;
    if ((unint64_t)(v260 + 1) >> 61)
LABEL_213:
      abort();
    if (((char *)v249 - (char *)v248) >> 2 > v261)
      v261 = ((char *)v249 - (char *)v248) >> 2;
    if ((unint64_t)((char *)v249 - (char *)v248) >= 0x7FFFFFFFFFFFFFF8)
      v262 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v262 = v261;
    if (v262)
    {
      if (v262 >> 61)
LABEL_214:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v263 = operator new(8 * v262);
    }
    else
    {
      v263 = 0;
    }
    v264 = (__float2 *)&v263[8 * v260];
    v249 = (__float2 *)&v263[8 * v262];
    *v264 = v259;
    v255 = v264 + 1;
    if (v254 == v248)
    {
LABEL_104:
      operator delete(v248);
      goto LABEL_105;
    }
    v265 = (char *)&v254[-1] - (char *)v248;
    if (v265 < 0x168
      || &v263[(char *)v254 - (char *)v248 - 8 - (v265 & 0xFFFFFFFFFFFFFFF8)] > &v263[(char *)v254 - (char *)v248 - 8]
      || (__float2 *)((char *)&v254[-1] - (v265 & 0xFFFFFFFFFFFFFFF8)) > &v254[-1]
      || (unint64_t)((char *)v248 - v263) < 0x20)
    {
      v266 = v254;
      do
      {
LABEL_102:
        v267 = v266[-1];
        --v266;
        v264[-1] = v267;
        --v264;
      }
      while (v266 != v248);
      goto LABEL_103;
    }
    v268 = (v265 >> 3) + 1;
    v266 = &v254[-(v268 & 0x3FFFFFFFFFFFFFFCLL)];
    v269 = &v263[8 * v260 - 16];
    v270 = v254 - 2;
    v271 = v268 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v272 = *(_OWORD *)&v270->__sinval;
      *(v269 - 1) = *(_OWORD *)&v270[-2].__sinval;
      *v269 = v272;
      v269 -= 2;
      v270 -= 4;
      v271 -= 4;
    }
    while (v271);
    v264 -= v268 & 0x3FFFFFFFFFFFFFFCLL;
    if (v268 != (v268 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_102;
LABEL_103:
    if (v248)
      goto LABEL_104;
LABEL_105:
    v248 = v264;
    v246 = v552;
LABEL_84:
    v254 = v255;
    _ZF = v251++ == v246;
  }
  while (!_ZF);
  v352 = -1;
  v353 = v250;
  do
  {
    v356 = __sincosf_stret((float)((float)((float)v549 + (float)(v253 * (float)v352)) * v245) + -3.1416);
    if (v353 < v556)
    {
      *v353 = v356;
      v354 = v353 + 1;
      v355 = (double *)a1;
      goto LABEL_148;
    }
    v357 = v353 - v250;
    v358 = v357 + 1;
    if ((unint64_t)(v357 + 1) >> 61)
      goto LABEL_213;
    if (((char *)v556 - (char *)v250) >> 2 > v358)
      v358 = ((char *)v556 - (char *)v250) >> 2;
    if ((unint64_t)((char *)v556 - (char *)v250) >= 0x7FFFFFFFFFFFFFF8)
      v359 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v359 = v358;
    if (v359)
    {
      if (v359 >> 61)
        goto LABEL_214;
      v360 = operator new(8 * v359);
    }
    else
    {
      v360 = 0;
    }
    v361 = (__float2 *)&v360[8 * v357];
    v556 = (__float2 *)&v360[8 * v359];
    *v361 = v356;
    v354 = v361 + 1;
    if (v353 == v250)
    {
LABEL_174:
      operator delete(v250);
      goto LABEL_175;
    }
    v362 = (char *)&v353[-1] - (char *)v250;
    if (v362 < 0x168)
    {
      v363 = v353;
      goto LABEL_172;
    }
    if (&v360[(char *)v353 - (char *)v250 - 8 - (v362 & 0xFFFFFFFFFFFFFFF8)] > &v360[(char *)v353 - (char *)v250 - 8])
    {
      v363 = v353;
      goto LABEL_172;
    }
    if ((__float2 *)((char *)&v353[-1] - (v362 & 0xFFFFFFFFFFFFFFF8)) > &v353[-1])
    {
      v363 = v353;
      do
      {
LABEL_172:
        v369 = v363[-1];
        --v363;
        v361[-1] = v369;
        --v361;
      }
      while (v363 != v250);
      goto LABEL_173;
    }
    if ((unint64_t)((char *)v250 - v360) < 0x20)
    {
      v363 = v353;
      goto LABEL_172;
    }
    v364 = (v362 >> 3) + 1;
    v363 = &v353[-(v364 & 0x3FFFFFFFFFFFFFFCLL)];
    v365 = &v360[8 * v357 - 16];
    v366 = v353 - 2;
    v367 = v364 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v368 = *(_OWORD *)&v366->__sinval;
      *(v365 - 1) = *(_OWORD *)&v366[-2].__sinval;
      *v365 = v368;
      v365 -= 2;
      v366 -= 4;
      v367 -= 4;
    }
    while (v367);
    v361 -= v364 & 0x3FFFFFFFFFFFFFFCLL;
    if (v364 != (v364 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_172;
LABEL_173:
    if (v250)
      goto LABEL_174;
LABEL_175:
    v250 = v361;
    v355 = (double *)a1;
    v246 = v552;
LABEL_148:
    v353 = v354;
    _ZF = v352++ == v246;
  }
  while (!_ZF);
  if (v533 <= v536)
  {
    v401 = v355[13];
    v402 = v355[14];
    v403 = v355[15];
    v404 = v355[11];
    v405 = v355[12];
    v406 = v355[9];
    v407 = v355[10];
    v408 = -(v404 * v401 - v407 * v402) - (v404 * v401 - v407 * v402);
    v409 = -(v406 * v402 - v404 * v405) - (v406 * v402 - v404 * v405);
    v410 = -(v407 * v405 - v406 * v401) - (v407 * v405 - v406 * v401);
    v411 = -(v406 + v408 * v403 + v409 * v402 - v410 * v401);
    v412 = -(v404 + v408 * v401 + v410 * v403 - v409 * v405);
    v413 = v411;
    v414 = v412;
    v415 = v405;
    v416 = v401;
    v417 = v402;
    v418 = v403;
    v419 = v407 - v408 * v402 + v409 * v403 + v410 * v405;
    v420 = (float)(v246 - 1);
    v421 = v246 - 2;
    v422 = v31 + 1;
    v423 = 1;
    v28 = v541;
    v25 = v546;
    do
    {
      v424 = v422[-1].f32[1] * v420;
      v425 = v424;
      if (v424 >= v421)
        v425 = v246 - 2;
      v426 = v422[-1].f32[0] * v420;
      v427 = v426;
      if (v426 >= v421)
        v427 = v246 - 2;
      v428 = v426 - (float)v427;
      v429 = v424 - (float)v425;
      v430 = (float *)&v248[v425];
      v431 = (float *)&v248[v425 + 1];
      v432 = (float *)&v248[v425 + 2];
      v433 = (float *)&v248[v425 + 3];
      v434 = v430[1];
      v435 = v431[1];
      v436 = v432[1];
      v437 = v433[1];
      v438 = v429 * v429;
      v439 = v429 * 0.5;
      v440 = (float)(*v431 + (float)((float)(*v432 - *v430) * v439))
           + (float)((float)((float)((float)((float)(*v430 + *v430) + (float)(*v431 * -5.0)) + (float)(*v432 * 4.0))
                           - *v433)
                   * (float)(v438 * 0.5));
      v441 = (float)(v435 + (float)((float)(v436 - v434) * v439))
           + (float)((float)((float)((float)((float)(v434 + v434) + (float)(v435 * -5.0)) + (float)(v436 * 4.0)) - v437)
                   * (float)(v438 * 0.5));
      v442 = v439 * v438;
      v443 = v440 + (float)((float)((float)(*v433 - *v430) + (float)((float)(*v431 - *v432) * 3.0)) * v442);
      v444 = v441 + (float)((float)((float)(v437 - v434) + (float)((float)(v435 - v436) * 3.0)) * v442);
      v445 = (float *)&v250[v427];
      v446 = (float *)&v250[v427 + 1];
      v447 = (float *)&v250[v427 + 2];
      v448 = (float *)&v250[v427 + 3];
      v449 = v445[1];
      v450 = v446[1];
      v451 = v447[1];
      v452 = v448[1];
      v453 = v428 * v428;
      v454 = v428 * 0.5;
      v455 = (float)(*v446 + (float)((float)(*v447 - *v445) * v454))
           + (float)((float)((float)((float)((float)(*v445 + *v445) + (float)(*v446 * -5.0)) + (float)(*v447 * 4.0))
                           - *v448)
                   * (float)(v453 * 0.5));
      v456 = (float)(v450 + (float)((float)(v451 - v449) * v454))
           + (float)((float)((float)((float)((float)(v449 + v449) + (float)(v450 * -5.0)) + (float)(v451 * 4.0)) - v452)
                   * (float)(v453 * 0.5));
      v457 = v454 * v453;
      v458 = v455 + (float)((float)((float)(*v448 - *v445) + (float)((float)(*v446 - *v447) * 3.0)) * v457);
      v459 = v456 + (float)((float)((float)(v452 - v449) + (float)((float)(v450 - v451) * 3.0)) * v457);
      v460 = 6378137.0 / sqrt((float)((float)(v443 * v443) * -0.0066944) + 1.0);
      v461 = (float)(v422->f32[0] + v460) * v444;
      v462 = v461 * v459;
      v463 = v461 * v458;
      v464 = (v422->f32[0] + v460 * 0.99330562) * v443;
      v465 = (float)-(float)((float)(v463 * v415) - (float)(v462 * v416))
           - (float)((float)(v463 * v415) - (float)(v462 * v416));
      v466 = (float)-(float)((float)(v464 * v416) - (float)(v463 * v417))
           - (float)((float)(v464 * v416) - (float)(v463 * v417));
      v467 = (float)-(float)((float)(v462 * v417) - (float)(v464 * v415))
           - (float)((float)(v462 * v417) - (float)(v464 * v415));
      v422[-1].f32[0] = (float)((float)((float)(v462 + v413) - (float)(v465 * v416)) + (float)(v466 * v418))
                      + (float)(v467 * v417);
      v422[-1].f32[1] = -(float)((float)(v466 * v417)
                               - (float)((float)((float)(v463 - v419) + (float)(v465 * v415)) + (float)(v467 * v418)));
      v422->f32[0] = (float)((float)((float)(v464 + v414) + (float)(v465 * v418)) + (float)(v466 * v416))
                   - (float)(v467 * v415);
      v422->i32[1] = 1065353216;
      v422 += 4;
      v243 = v530 > v423++;
    }
    while (v243);
  }
  else
  {
    v28 = v541;
    v25 = v546;
    if (!v250)
      goto LABEL_194;
  }
  operator delete(v250);
LABEL_194:
  if (v248)
    operator delete(v248);
LABEL_196:
  if (v519->_level > 0xBu)
  {
    v478 = (float)(v560 + v559) * 0.5;
    v473 = v31->f32[1];
    v475 = v31[1].f32[0];
    v479 = &v31[4 * v518];
    v476 = v479->f32[1];
    v477 = v479[1].f32[0];
    v472 = (float)(v559 - v478);
    v474 = (float)(v560 - (float)(v478 + v517));
    v468 = (double *)a1;
    goto LABEL_207;
  }
  v468 = (double *)a1;
  v469 = *(_QWORD **)(a1 + 24);
  v470 = v469[6] - v469[5];
  v471 = v469[1];
  if (v471 > v470)
  {
    v472 = -1.79769313e308;
    v473 = 1.79769313e308;
    v474 = 1.79769313e308;
    v475 = 1.79769313e308;
    v476 = -1.79769313e308;
    v477 = -1.79769313e308;
    goto LABEL_207;
  }
  v480 = v470 / v471;
  if (v480 < 4)
  {
    v481 = 0;
    v475 = 1.79769313e308;
    v477 = -1.79769313e308;
    v476 = -1.79769313e308;
    v473 = 1.79769313e308;
    v472 = -1.79769313e308;
    v474 = 1.79769313e308;
    goto LABEL_205;
  }
  v481 = v480 & 0xFFFFFFFFFFFFFFFCLL;
  v482 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v483 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v484 = (__int32 *)&v31[8];
  v485 = v480 & 0xFFFFFFFFFFFFFFFCLL;
  v486 = v483;
  v487 = v482;
  v488 = v483;
  v489 = v483;
  v490 = v482;
  v491 = v482;
  v492 = v483;
  v493 = v483;
  v494 = v482;
  v495 = v482;
  do
  {
    v496.i32[0] = *(v484 - 16);
    v497.i32[0] = *(v484 - 15);
    v496.i32[1] = *(v484 - 8);
    v498.i32[0] = *v484;
    v499.i32[0] = v484[1];
    v498.i32[1] = v484[8];
    v500 = vcvtq_f64_f32(v496);
    v501 = vcvtq_f64_f32(v498);
    v497.i32[1] = *(v484 - 7);
    v499.i32[1] = v484[9];
    v502 = vcvtq_f64_f32(v497);
    v503 = vcvtq_f64_f32(v499);
    v504.i32[0] = *(v484 - 14);
    v504.i32[1] = *(v484 - 6);
    v505.i32[0] = v484[2];
    v505.i32[1] = v484[10];
    v506 = vcvtq_f64_f32(v504);
    v507 = vcvtq_f64_f32(v505);
    v494 = vminnmq_f64(v494, v500);
    v495 = vminnmq_f64(v495, v501);
    v492 = vmaxnmq_f64(v492, v500);
    v493 = vmaxnmq_f64(v493, v501);
    v490 = vminnmq_f64(v490, v502);
    v491 = vminnmq_f64(v491, v503);
    v488 = vmaxnmq_f64(v488, v502);
    v489 = vmaxnmq_f64(v489, v503);
    v482 = vminnmq_f64(v482, v506);
    v487 = vminnmq_f64(v487, v507);
    v483 = vmaxnmq_f64(v483, v506);
    v486 = vmaxnmq_f64(v486, v507);
    v484 += 32;
    v485 -= 4;
  }
  while (v485);
  v474 = vminnmvq_f64(vminnmq_f64(v494, v495));
  v472 = vmaxnmvq_f64(vmaxnmq_f64(v492, v493));
  v473 = vminnmvq_f64(vminnmq_f64(v490, v491));
  v476 = vmaxnmvq_f64(vmaxnmq_f64(v488, v489));
  v475 = vminnmvq_f64(vminnmq_f64(v482, v487));
  v477 = vmaxnmvq_f64(vmaxnmq_f64(v483, v486));
  if (v480 != v481)
  {
LABEL_205:
    v508 = v480 - v481;
    v509 = (float *)&v31[4 * v481 + 1];
    do
    {
      v510 = *(v509 - 2);
      v511 = *(v509 - 1);
      v512 = *v509;
      v509 += 8;
      v474 = fmin(v474, v510);
      v472 = fmax(v472, v510);
      v473 = fmin(v473, v511);
      v476 = fmax(v476, v511);
      v475 = fmin(v475, v512);
      v477 = fmax(v477, v512);
      --v508;
    }
    while (v508);
  }
LABEL_207:
  v468[16] = v474;
  v468[17] = v473;
  v468[18] = v475;
  v468[19] = v472;
  v468[20] = v476;
  v468[21] = v477;
  if (v31 && v516 != v515)
  {
LABEL_209:
    v513 = *(_QWORD *)(v25 + 64);
    if (v513 <= v28)
      v513 = v28;
    *(_QWORD *)(v25 + 56) = 0;
    *(_QWORD *)(v25 + 64) = v513;
  }
}

void altitude::HeightMeshBuilder::allocateMeshData(altitude::HeightMeshBuilder *this, int a2, int a3)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  char ***v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  __int16 v29;

  v4 = *((_DWORD *)this + 4);
  v5 = 2 * (a2 - 1) * (a2 - 1);
  v6 = 8 * (a2 - 1);
  if (!a3)
    v6 = 0;
  v7 = (3 * (v5 + v6));
  v8 = ((a2 + 4) * a2);
  if (v4)
    v9 = v4 == 3;
  else
    v9 = 1;
  if (v9)
    v10 = &ggl::CommonMesh::bufferPos4UVReflection;
  else
    v10 = &ggl::TileBaseSurface::p3T2T2BufferReflection;
  v11 = operator new(0xF8uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42DE7A0;
  v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), (uint64_t)(*v10)[3], 0, 0, 7, v8);
  v11[3] = &off_1E42B5A70;
  v11[28] = &unk_1E42B5A90;
  v11[29] = "/render/tilebasic/vertexdata";
  v11[30] = v10;
  *(_QWORD *)&v13 = v12;
  *((_QWORD *)&v13 + 1) = v11;
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *(_OWORD *)((char *)this + 24) = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (_BYTE *)*((_QWORD *)this + 5);
  if (v7 > (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v17) >> 1)
  {
    v18 = (_BYTE *)*((_QWORD *)this + 6);
    v19 = (char *)operator new(2 * v7);
    v20 = v18 - v17;
    v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFELL];
    v22 = v21;
    if (v18 == v17)
      goto LABEL_23;
    if ((unint64_t)(v20 - 2) >= 0x1E)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFELL)] - v19) >= 0x20)
      {
        v23 = v20 >> 1;
        v24 = ((unint64_t)(v20 - 2) >> 1) + 1;
        v25 = &v19[2 * v23 - 16];
        v26 = (__int128 *)(v18 - 16);
        v27 = v24 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v28 = *v26;
          *((_OWORD *)v25 - 1) = *(v26 - 1);
          *(_OWORD *)v25 = v28;
          v25 -= 32;
          v26 -= 2;
          v27 -= 16;
        }
        while (v27);
        v22 = &v21[-2 * (v24 & 0xFFFFFFFFFFFFFFF0)];
        v18 -= 2 * (v24 & 0xFFFFFFFFFFFFFFF0);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_23:
          *((_QWORD *)this + 5) = v22;
          *((_QWORD *)this + 6) = v21;
          *((_QWORD *)this + 7) = &v19[2 * v7];
          if (v17)
            operator delete(v17);
          goto LABEL_25;
        }
      }
    }
    else
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      v29 = *((_WORD *)v18 - 1);
      v18 -= 2;
      *((_WORD *)v22 - 1) = v29;
      v22 -= 2;
    }
    while (v18 != v17);
    goto LABEL_23;
  }
LABEL_25:
  *((_DWORD *)this + 16) = 3 * v5;
}

void altitude::HeightMeshBuilder::constructGeocentricFrameForTile(altitude::HeightMeshBuilder *this, const QuadTile *a2, float a3)
{
  int v4;
  double v5;
  double v6;
  double v7;
  long double v8;
  long double v9;
  double v10;
  long double v11;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;

  v4 = 1 << a2->_level;
  v5 = a3;
  v6 = a3 + 1.0;
  v7 = 6.28318531 / (double)v4;
  v8 = v7 * ((double)a2->_xIdx + 0.5);
  v9 = exp(v7 * ((double)(v4 + ~a2->_yIdx) + 0.5) + -3.14159265);
  v10 = atan(v9) * 2.0 + -1.57079633;
  v11 = fmod(v8, 6.28318531);
  v12 = fmod(v11 + 6.28318531, 6.28318531) + -3.14159265;
  v13 = __sincos_stret(v10);
  v14 = 6378137.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
  v15 = (v14 + v5) * v13.__cosval;
  v16 = __sincos_stret(v12);
  v17 = (v14 * 0.99330562 + v5) * v13.__sinval;
  v18 = (v14 + v6) * v13.__cosval;
  v19 = -(v15 * v16.__cosval - v18 * v16.__cosval);
  v20 = -(v15 * v16.__sinval - v18 * v16.__sinval);
  v21 = -(v17 - (v14 * 0.99330562 + v6) * v13.__sinval);
  v22 = 1.0 / sqrt(v19 * v19 + v20 * v20 + v21 * v21);
  v23 = v22 * v19;
  v24 = v22 * v20;
  v25 = v22 * v21;
  v26 = -(v23 * (v22 * v21));
  v27 = -(v24 * v25);
  v28 = v24 * v24 + v23 * v23;
  v29 = 1.0 / sqrt(v28);
  v30 = -(v24 * v29);
  v31 = v29 * v23;
  v32 = 1.0 / sqrt(v27 * v27 + v26 * v26 + v28 * v28);
  v33 = v32 * v26;
  v34 = v32 * v27;
  v35 = v32 * v28;
  v36 = v35 + v31 + v23;
  if (v36 <= 0.0)
  {
    if (v23 <= v31 || v23 <= v35)
    {
      v46 = v31 <= v35;
      v47 = sqrt(1.0 - (v31 + v23) + v35);
      v48 = 1.0 / (v47 + v47);
      v49 = (v33 + v25) * v48;
      v50 = v34 * v48;
      v51 = v47 * 0.5;
      v52 = (v24 - v30) * v48;
      v53 = sqrt(v31 + 1.0 - (v23 + v35));
      v54 = v30 + v24;
      v55 = 1.0 / (v53 + v53);
      v56 = v54 * v55;
      v39 = v53 * 0.5;
      v57 = v34 * v55;
      v58 = (v33 - v25) * v55;
      if (v46)
        v38 = v49;
      else
        v38 = v56;
      if (v46)
      {
        v39 = v50;
        v40 = v51;
      }
      else
      {
        v40 = v57;
      }
      if (v46)
        v41 = v52;
      else
        v41 = v58;
    }
    else
    {
      v42 = sqrt(v23 + 1.0 - (v31 + v35));
      v43 = v42 + v42;
      v38 = v42 * 0.5;
      v44 = v30 + v24;
      v45 = 1.0 / v43;
      v39 = v44 * (1.0 / v43);
      v40 = (v33 + v25) * v45;
      v41 = -(v34 * v45);
    }
  }
  else
  {
    v37 = 0.5 / sqrt(v36 + 1.0);
    v38 = -(v34 * v37);
    v39 = v37 * (v33 - v25);
    v40 = v37 * (v24 - v30);
    v41 = 0.25 / v37;
  }
  *(double *)this = v15 * v16.__cosval;
  *((double *)this + 1) = v15 * v16.__sinval;
  *((double *)this + 2) = v17;
  *((double *)this + 3) = v38;
  *((double *)this + 4) = v39;
  *((double *)this + 5) = v40;
  *((double *)this + 6) = v41;
}

void altitude::HeightMeshBuilder::generateMesh<ggl::CommonMesh::BufferPos4UV>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, float *a7, float a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  int v21;
  float v22;
  _DWORD *v23;
  float v24;
  int v25;
  unsigned int i;
  unsigned int v27;
  float v28;
  float v29;
  uint64_t v30;
  int v31;
  int v32;
  char **v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  char v40;
  char v41;
  int v42;
  char v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  unsigned int j;
  float v50;
  float v51;
  int v52;
  NSObject *v53;
  float v54;
  uint64_t v55;
  unsigned int v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  float v64;
  uint8_t buf[16];

  v21 = a4 - 1;
  v22 = 1.0 / (float)(a4 - 1);
  if (!*(_QWORD *)a1)
  {
    if (!a4)
      goto LABEL_11;
    v25 = 0;
    for (i = 0; i != a4; ++i)
    {
      v27 = 0;
      v28 = v22 * (float)i;
      do
      {
        v29 = v22 * (float)v27;
        *a6 = fminf(*a6, a8);
        *a7 = fmaxf(*a7, a8);
        v30 = a5 + 32 * (v25 + v27);
        *(float *)v30 = v29;
        *(float *)(v30 + 4) = v28;
        *(float *)(v30 + 8) = a8;
        *(_DWORD *)(v30 + 12) = 1065353216;
        *(float *)(v30 + 16) = v29;
        *(float *)(v30 + 20) = v28;
        ++v27;
      }
      while (a4 != v27);
      v25 += v27;
    }
LABEL_10:
    if (!v21)
      return;
    goto LABEL_11;
  }
  v23 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (!v23)
  {
    v24 = 4295000000.0;
    if (!a4)
      goto LABEL_11;
    goto LABEL_17;
  }
  v24 = (float)(*v23 - 1);
  if (a4)
  {
LABEL_17:
    v38 = 0;
    v39 = 0;
    v40 = *(_BYTE *)(a3 + 1);
    v41 = *(_BYTE *)(a2 + 1);
    v42 = *(_DWORD *)(a3 + 4) + (-1 << v40) + 1;
    v43 = v41 - v40;
    v44 = v24 / (float)(1 << v43);
    v45 = (float)(*(_DWORD *)(a2 + 8) - (*(_DWORD *)(a3 + 8) << v43));
    v46 = (float)(~(-1 << v41) - *(_DWORD *)(a2 + 4) + (v42 << v43));
    do
    {
      v47 = v22 * (float)v39;
      v48 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v59 = v39;
        for (j = 0; ; ++j)
        {
          v50 = v22 * (float)j;
          v64 = 0.0;
          if (v48)
          {
            v51 = (float)(v50 + v45) * v44;
            v52 = *(_DWORD *)(v48 + 132);
            if (v52 == 16)
            {
              karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v48, &v64, v51, (float)(v47 + v46) * v44, a10, a11, a12, a13, a14, a15);
            }
            else if (v52 == 8)
            {
              karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v48, &v64, v51, (float)(v47 + v46) * v44, a10, a11, a12, a13, a14, a15);
            }
            else
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v53 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
              }
            }
          }
          v54 = v64 + a8;
          *a6 = fminf(*a6, v64 + a8);
          *a7 = fmaxf(v54, *a7);
          v55 = a5 + 32 * (v38 + j);
          *(float *)v55 = v50;
          *(float *)(v55 + 4) = v47;
          *(float *)(v55 + 8) = v54;
          *(_DWORD *)(v55 + 12) = 1065353216;
          *(float *)(v55 + 16) = v50;
          *(float *)(v55 + 20) = v47;
          if (v21 == j)
            break;
          v48 = *(_QWORD *)a1;
        }
        v38 += j + 1;
        v39 = v59;
      }
      else
      {
        v56 = 0;
        do
        {
          v57 = v22 * (float)v56;
          *a6 = fminf(*a6, a8);
          *a7 = fmaxf(*a7, a8);
          v58 = a5 + 32 * (v38 + v56);
          *(float *)v58 = v57;
          *(float *)(v58 + 4) = v47;
          *(float *)(v58 + 8) = a8;
          *(_DWORD *)(v58 + 12) = 1065353216;
          *(float *)(v58 + 16) = v57;
          *(float *)(v58 + 20) = v47;
          ++v56;
        }
        while (a4 != v56);
        v38 += v56;
      }
      ++v39;
    }
    while (v39 != a4);
    goto LABEL_10;
  }
LABEL_11:
  v31 = 0;
  v32 = 0;
  v33 = (char **)(a1 + 40);
  do
  {
    v34 = v31;
    v35 = v21;
    do
    {
      v63 = v34;
      v36 = v34 + 1;
      v62 = v34 + 1;
      v37 = v34 + a4;
      v61 = v37 + 1;
      v60 = v37;
      v34 = v36;
      --v35;
    }
    while (v35);
    ++v32;
    v31 += a4;
  }
  while (v32 != v21);
}

void altitude::HeightMeshBuilder::generateSmercCoordinates<ggl::CommonMesh::BufferPos4UV>(char a1, uint64_t a2, double *a3, unsigned int a4, uint64_t a5, unint64_t a6, float a7)
{
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  double v19;
  long double v20;
  long double v21;
  double v22;
  long double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  __double2 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  unsigned int v36;
  float v37;
  int v38;
  size_t v39;
  __float2 *v40;
  __float2 *v41;
  __float2 *v42;
  int v43;
  float v44;
  float v45;
  __float2 *v46;
  __float2 *v47;
  BOOL v48;
  float v49;
  float v50;
  float v51;
  __float2 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  __float2 *v57;
  unint64_t v58;
  __float2 *v59;
  __float2 v60;
  uint64_t v61;
  _OWORD *v62;
  __float2 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  _DWORD *v73;
  double v74;
  long double v75;
  double v76;
  long double v77;
  double v78;
  __double2 v79;
  double v80;
  double v81;
  __double2 v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  unsigned int v92;
  float *v93;
  float32x2_t v94;
  float v95;
  float32x2_t v96;
  unint64_t v97;
  int v98;
  __float2 *v99;
  __float2 *v100;
  __float2 *v101;
  __float2 v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  __float2 *v107;
  unint64_t v108;
  __float2 *v109;
  __float2 v110;
  uint64_t v111;
  _OWORD *v112;
  __float2 *v113;
  uint64_t v114;
  __int128 v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  float v139;
  unsigned int v140;
  float v141;
  unsigned int v142;
  float v143;
  float v144;
  float *v145;
  float *v146;
  float *v147;
  float *v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float *v162;
  float *v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  unint64_t v183;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v200;
  double v201;
  double v203;
  double v204;
  unsigned int v205;
  double v206;
  double v207;
  double v208;
  double v209;
  int v210;
  double v211;
  float32x2_t v212[2];
  float32x2_t v213;
  float32x2_t v214;
  uint64_t v215;

  v8 = a5;
  v215 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a6)
    {
      v10 = a3[4];
      v11 = a3[5];
      v12 = a3[2];
      v13 = a3[3];
      v14 = a3[1];
      v204 = *a3;
      v207 = v12;
      v15 = -(*a3 * v11 - v12 * v13);
      v16 = 1;
      v17 = 1 << *(_BYTE *)(a2 + 1);
      v195 = (double)*(int *)(a2 + 8);
      v196 = -(v12 * v10 - v14 * v11) - (v12 * v10 - v14 * v11);
      v193 = (double)(v17 + ~*(_DWORD *)(a2 + 4));
      v190 = 6.28318531 / (double)v17;
      v209 = a3[6];
      v198 = -(v14 * v13 - v204 * v10) - (v14 * v13 - v204 * v10);
      v201 = v15 + v15;
      v187 = -(v14 - (v11 + v11) * -(v12 * v10 - v14 * v11));
      v188 = (v15 + v15) * v209 + v198 * v13;
      v18 = a5 + 12;
      do
      {
        v19 = *(float *)(v18 - 4);
        v20 = (*(float *)(v18 + 4) + v195) * v190;
        v21 = exp((*(float *)(v18 + 8) + v193) * v190 + -3.14159265);
        v22 = atan(v21) * 2.0 + -1.57079633;
        v23 = fmod(v20, 6.28318531);
        v24 = fmod(v23 + 6.28318531, 6.28318531) + -3.14159265;
        v25 = __sincos_stret(v22);
        v26 = 6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
        v27 = (v26 + v19) * v25.__cosval;
        v28 = __sincos_stret(v24);
        v29 = v27 * v28.__cosval;
        v30 = v27 * v28.__sinval;
        v31 = (v19 + v26 * 0.99330562) * v25.__sinval;
        v32 = -(v29 * v11 - v31 * v13) - (v29 * v11 - v31 * v13);
        v33 = -(v31 * v10 - v30 * v11) - (v31 * v10 - v30 * v11);
        v34 = -(v30 * v13 - v29 * v10) - (v30 * v13 - v29 * v10);
        *(float *)&v29 = v27 * v28.__cosval - v204 + (v32 - v201) * v11 + (v33 - v196) * v209 + (v198 - v34) * v10;
        *(float *)&v30 = v187 + v27 * v28.__sinval + v32 * v209 + v34 * v13 - (v188 + v33 * v11);
        *(float *)&v31 = v31 - v207 + (v34 - v198) * v209 + (v33 - v196) * v10 + (v201 - v32) * v13;
        *(_DWORD *)(v18 - 12) = LODWORD(v29);
        *(_DWORD *)(v18 - 8) = LODWORD(v30);
        *(_DWORD *)(v18 - 4) = LODWORD(v31);
        *(_DWORD *)v18 = 1065353216;
        v18 += 32;
        v35 = v16++;
      }
      while (v35 < a6);
    }
    return;
  }
  v36 = *(unsigned __int8 *)(a2 + 1);
  if (v36 > 0xB)
  {
    v66 = 0;
    v67 = a3[4];
    v68 = a3[5];
    v69 = a3[2];
    v70 = a3[3];
    v71 = a3[1];
    v206 = v71;
    v208 = v69;
    v72 = -(v71 * v70 - *a3 * v67);
    v197 = v72 + v72;
    v200 = -(v69 * v67 - v71 * v68) - (v69 * v67 - v71 * v68);
    v194 = v67;
    v192 = (double)*(int *)(a2 + 8);
    v191 = (double)((1 << v36) + ~*(_DWORD *)(a2 + 4));
    v189 = 6.28318531 / (double)(1 << v36);
    v211 = a3[6];
    v203 = -(*a3 * v68 - v69 * v70) - (*a3 * v68 - v69 * v70);
    v185 = v68;
    v186 = -(v72 * v70 - -(v69 * v67 - v71 * v68) * v68);
    v73 = (_DWORD *)v212 + 1;
    v74 = a7;
    do
    {
      v75 = exp(((float)(v66 >> 1) + v191) * v189 + -3.14159265);
      v76 = atan(v75) * 2.0 + -1.57079633;
      v77 = fmod(((double)(v66 & 1) + v192) * v189, 6.28318531);
      v78 = fmod(v77 + 6.28318531, 6.28318531) + -3.14159265;
      v79 = __sincos_stret(v76);
      v80 = 6378137.0 / sqrt(v79.__sinval * v79.__sinval * -0.00669437999 + 1.0);
      v81 = (v80 + v74) * v79.__cosval;
      v82 = __sincos_stret(v78);
      v83 = v81 * v82.__sinval;
      v84 = (v74 + v80 * 0.99330562) * v79.__sinval;
      v85 = -(v81 * v82.__cosval * v185 - v84 * v70);
      v86 = -(v84 * v194 - v83 * v185) - (v84 * v194 - v83 * v185);
      v87 = -(v83 * v70 - v81 * v82.__cosval * v194) - (v83 * v70 - v81 * v82.__cosval * v194);
      *(float *)&v83 = v81 * v82.__sinval + v87 * v70 - (v206 + v203 * v211 + v86 * v185) + (v186 + v85 * v211) * 2.0;
      *(float *)&v87 = v84 - v208 + (v87 - v197) * v211 + (v86 - v200) * v194 + (v203 - v85 * 2.0) * v70;
      *(v73 - 1) = LODWORD(v83);
      *v73 = LODWORD(v87);
      ++v66;
      v73 += 2;
    }
    while (v66 != 4);
    if (a6)
    {
      v88 = v212[0];
      v89 = vsub_f32(v212[1], v212[0]);
      v90 = v213;
      v91 = vsub_f32(v214, v213);
      v92 = 1;
      do
      {
        v93 = (float *)v8;
        v94 = vld1_dup_f32(v93++);
        v95 = *v93;
        *(float *)v8 = *(float *)(v8 + 8) - a7;
        v96 = vmla_f32(v88, v89, v94);
        *(float32x2_t *)v93 = vmla_n_f32(v96, vsub_f32(vmla_f32(v90, v91, v94), v96), v95);
        *(_DWORD *)(v8 + 12) = 1065353216;
        v97 = v92;
        v8 += 32;
        ++v92;
      }
      while (v97 < a6);
    }
    return;
  }
  v37 = 6.2832 / (float)(1 << v36);
  v38 = a4 >> 1;
  v39 = (a4 >> 1) + 2;
  v40 = (__float2 *)operator new(v39 * 8);
  v41 = &v40[v39];
  v42 = (__float2 *)operator new(8 * (v38 + 2));
  v43 = -1;
  v205 = *(_DWORD *)(a2 + 8);
  v44 = (float)(~(-1 << v36) - *(_DWORD *)(a2 + 4));
  v45 = 1.0 / (float)((float)v38 + -1.0);
  v46 = v40;
  v210 = v38;
  do
  {
    v49 = expf((float)((float)(v44 + (float)(v45 * (float)v43)) * v37) + -3.1416);
    v50 = atanf(v49);
    v51 = (float)(v50 + v50) + -1.57079633;
    v52 = __sincosf_stret(v51);
    if (v46 < v41)
    {
      *v46 = v52;
      v47 = v46 + 1;
      goto LABEL_9;
    }
    v53 = v46 - v40;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 61)
LABEL_86:
      abort();
    if (((char *)v41 - (char *)v40) >> 2 > v54)
      v54 = ((char *)v41 - (char *)v40) >> 2;
    if ((unint64_t)((char *)v41 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v54;
    if (v55)
    {
      if (v55 >> 61)
LABEL_87:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v56 = operator new(8 * v55);
    }
    else
    {
      v56 = 0;
    }
    v57 = (__float2 *)&v56[8 * v53];
    v41 = (__float2 *)&v56[8 * v55];
    *v57 = v52;
    v47 = v57 + 1;
    if (v46 != v40)
    {
      v58 = (char *)&v46[-1] - (char *)v40;
      if (v58 >= 0x168
        && &v56[(char *)v46 - (char *)v40 - 8 - (v58 & 0xFFFFFFFFFFFFFFF8)] <= &v56[(char *)v46 - (char *)v40 - 8]
        && (__float2 *)((char *)&v46[-1] - (v58 & 0xFFFFFFFFFFFFFFF8)) <= &v46[-1]
        && (unint64_t)((char *)v40 - v56) >= 0x20)
      {
        v61 = (v58 >> 3) + 1;
        v59 = &v46[-(v61 & 0x3FFFFFFFFFFFFFFCLL)];
        v62 = &v56[8 * v53 - 16];
        v63 = v46 - 2;
        v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *(_OWORD *)&v63->__sinval;
          *(v62 - 1) = *(_OWORD *)&v63[-2].__sinval;
          *v62 = v65;
          v62 -= 2;
          v63 -= 4;
          v64 -= 4;
        }
        while (v64);
        v57 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
        v38 = v210;
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_28:
          if (!v40)
            goto LABEL_32;
          goto LABEL_31;
        }
      }
      else
      {
        v59 = v46;
        v38 = v210;
      }
      do
      {
        v60 = v59[-1];
        --v59;
        v57[-1] = v60;
        --v57;
      }
      while (v59 != v40);
      goto LABEL_28;
    }
    v38 = v210;
LABEL_31:
    operator delete(v40);
LABEL_32:
    v40 = v57;
LABEL_9:
    v46 = v47;
    v48 = v43++ == v38;
  }
  while (!v48);
  v98 = -1;
  v99 = v42;
  v100 = &v42[v39];
  do
  {
    v102 = __sincosf_stret((float)((float)((float)v205 + (float)(v45 * (float)v98)) * v37) + -3.1416);
    if (v99 < v100)
    {
      *v99 = v102;
      v101 = v99 + 1;
      goto LABEL_45;
    }
    v103 = v99 - v42;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 61)
      goto LABEL_86;
    if (((char *)v100 - (char *)v42) >> 2 > v104)
      v104 = ((char *)v100 - (char *)v42) >> 2;
    if ((unint64_t)((char *)v100 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8)
      v105 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v105 = v104;
    if (v105)
    {
      if (v105 >> 61)
        goto LABEL_87;
      v106 = operator new(8 * v105);
    }
    else
    {
      v106 = 0;
    }
    v107 = (__float2 *)&v106[8 * v103];
    v100 = (__float2 *)&v106[8 * v105];
    *v107 = v102;
    v101 = v107 + 1;
    if (v99 != v42)
    {
      v108 = (char *)&v99[-1] - (char *)v42;
      if (v108 >= 0x168
        && &v106[(char *)v99 - (char *)v42 - 8 - (v108 & 0xFFFFFFFFFFFFFFF8)] <= &v106[(char *)v99 - (char *)v42 - 8]
        && (__float2 *)((char *)&v99[-1] - (v108 & 0xFFFFFFFFFFFFFFF8)) <= &v99[-1]
        && (unint64_t)((char *)v42 - v106) >= 0x20)
      {
        v111 = (v108 >> 3) + 1;
        v109 = &v99[-(v111 & 0x3FFFFFFFFFFFFFFCLL)];
        v112 = &v106[8 * v103 - 16];
        v113 = v99 - 2;
        v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v115 = *(_OWORD *)&v113->__sinval;
          *(v112 - 1) = *(_OWORD *)&v113[-2].__sinval;
          *v112 = v115;
          v112 -= 2;
          v113 -= 4;
          v114 -= 4;
        }
        while (v114);
        v107 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
        v38 = v210;
        if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_64:
          if (!v42)
            goto LABEL_68;
          goto LABEL_67;
        }
      }
      else
      {
        v109 = v99;
        v38 = v210;
      }
      do
      {
        v110 = v109[-1];
        --v109;
        v107[-1] = v110;
        --v107;
      }
      while (v109 != v42);
      goto LABEL_64;
    }
    v38 = v210;
LABEL_67:
    operator delete(v42);
LABEL_68:
    v42 = v107;
LABEL_45:
    v99 = v101;
    v48 = v98++ == v38;
  }
  while (!v48);
  if (a6)
  {
    v116 = a3[4];
    v117 = a3[5];
    v118 = a3[6];
    v119 = a3[2];
    v120 = a3[3];
    v121 = a3[1];
    v122 = -(*a3 * v117 - v119 * v120);
    v123 = -(v121 * v120 - *a3 * v116);
    v124 = -(v119 * v116 - v121 * v117) - (v119 * v116 - v121 * v117);
    v125 = v122 + v122;
    v126 = v123 + v123;
    v127 = -(v119 + v124 * v116 + (v123 + v123) * v118 - (v122 + v122) * v120);
    v128 = -(*a3 + v124 * v118 + (v122 + v122) * v117 - (v123 + v123) * v116);
    v129 = v127;
    v130 = v120;
    v131 = v116;
    v132 = v117;
    v133 = v118;
    v134 = v121 - v124 * v117 + v125 * v118 + v126 * v120;
    v135 = (float)(v38 - 1);
    v136 = v38 - 2;
    v137 = v8 + 8;
    v138 = 1;
    do
    {
      v139 = *(float *)(v137 - 4) * v135;
      v140 = v139;
      if (v139 >= v136)
        v140 = v38 - 2;
      v141 = *(float *)(v137 - 8) * v135;
      v142 = v141;
      if (v141 >= v136)
        v142 = v38 - 2;
      v143 = v141 - (float)v142;
      v144 = v139 - (float)v140;
      v145 = (float *)&v40[v140];
      v146 = (float *)&v40[v140 + 1];
      v147 = (float *)&v40[v140 + 2];
      v148 = (float *)&v40[v140 + 3];
      v149 = v145[1];
      v150 = v146[1];
      v151 = v147[1];
      v152 = v148[1];
      v153 = v144 * v144;
      v154 = v144 * 0.5;
      v155 = (float)(*v146 + (float)((float)(*v147 - *v145) * v154))
           + (float)((float)((float)((float)((float)(*v145 + *v145) + (float)(*v146 * -5.0)) + (float)(*v147 * 4.0))
                           - *v148)
                   * (float)(v153 * 0.5));
      v156 = (float)(v150 + (float)((float)(v151 - v149) * v154))
           + (float)((float)((float)((float)((float)(v149 + v149) + (float)(v150 * -5.0)) + (float)(v151 * 4.0)) - v152)
                   * (float)(v153 * 0.5));
      v157 = v154 * v153;
      v158 = v155 + (float)((float)((float)(*v148 - *v145) + (float)((float)(*v146 - *v147) * 3.0)) * v157);
      v159 = v156 + (float)((float)((float)(v152 - v149) + (float)((float)(v150 - v151) * 3.0)) * v157);
      v160 = (float *)&v42[v142];
      v161 = (float *)&v42[v142 + 1];
      v162 = (float *)&v42[v142 + 2];
      v163 = (float *)&v42[v142 + 3];
      v164 = v160[1];
      v165 = v161[1];
      v166 = v162[1];
      v167 = v163[1];
      v168 = v143 * v143;
      v169 = v143 * 0.5;
      v170 = (float)(*v161 + (float)((float)(*v162 - *v160) * v169))
           + (float)((float)((float)((float)((float)(*v160 + *v160) + (float)(*v161 * -5.0)) + (float)(*v162 * 4.0))
                           - *v163)
                   * (float)(v168 * 0.5));
      v171 = (float)(v165 + (float)((float)(v166 - v164) * v169))
           + (float)((float)((float)((float)((float)(v164 + v164) + (float)(v165 * -5.0)) + (float)(v166 * 4.0)) - v167)
                   * (float)(v168 * 0.5));
      v172 = v169 * v168;
      v173 = v170 + (float)((float)((float)(*v163 - *v160) + (float)((float)(*v161 - *v162) * 3.0)) * v172);
      v174 = v171 + (float)((float)((float)(v167 - v164) + (float)((float)(v165 - v166) * 3.0)) * v172);
      v175 = 6378137.0 / sqrt((float)((float)(v158 * v158) * -0.0066944) + 1.0);
      v176 = (float)(*(float *)v137 + v175) * v159;
      v177 = v176 * v174;
      v178 = v176 * v173;
      v179 = (*(float *)v137 + v175 * 0.99330562) * v158;
      v180 = (float)-(float)((float)(v178 * v130) - (float)(v177 * v131))
           - (float)((float)(v178 * v130) - (float)(v177 * v131));
      v181 = (float)-(float)((float)(v179 * v131) - (float)(v178 * v132))
           - (float)((float)(v179 * v131) - (float)(v178 * v132));
      v182 = (float)-(float)((float)(v177 * v132) - (float)(v179 * v130))
           - (float)((float)(v177 * v132) - (float)(v179 * v130));
      *(float *)(v137 - 8) = (float)((float)((float)(v177 + v128) - (float)(v180 * v131)) + (float)(v181 * v133))
                           + (float)(v182 * v132);
      *(float *)(v137 - 4) = -(float)((float)(v181 * v132)
                                    - (float)((float)((float)(v178 - v134) + (float)(v180 * v130)) + (float)(v182 * v133)));
      *(float *)v137 = (float)((float)((float)(v179 + v129) + (float)(v180 * v133)) + (float)(v181 * v131))
                     - (float)(v182 * v130);
      *(_DWORD *)(v137 + 4) = 1065353216;
      v183 = v138;
      v137 += 32;
      ++v138;
    }
    while (v183 < a6);
LABEL_82:
    operator delete(v42);
  }
  else if (v42)
  {
    goto LABEL_82;
  }
  if (v40)
    operator delete(v40);
}

void `anonymous namespace'::pushQuad(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, char **a5)
{
  _WORD *v6;
  _WORD *v7;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  unint64_t v44;
  __int128 v45;
  __int16 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  unint64_t v61;
  __int128 v62;
  __int16 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  unint64_t v78;
  __int128 v79;
  __int16 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  _OWORD *v93;
  char *v94;
  unint64_t v95;
  __int128 v96;
  __int16 v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  unint64_t v112;
  __int128 v113;
  __int16 v114;

  v6 = a4;
  v7 = a3;
  v11 = a5[1];
  v10 = a5[2];
  v12 = v11;
  if (v11 >= v10)
  {
    v14 = *a5;
    v15 = v11 - *a5;
    if (v15 <= -3)
      goto LABEL_145;
    v17 = v15 >> 1;
    v18 = v10 - v14;
    if (v18 <= (v15 >> 1) + 1)
      v19 = v17 + 1;
    else
      v19 = v18;
    if (v18 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 < 0)
        goto LABEL_146;
      v21 = operator new(2 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[2 * v17];
    v10 = &v21[2 * v20];
    *(_WORD *)v22 = *a1;
    v13 = v22 + 2;
    if (v11 != v14)
    {
      v23 = v11 - v14 - 2;
      if (v23 < 0x1E)
        goto LABEL_149;
      if (v11 - v21 - (v15 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
        goto LABEL_149;
      v24 = (v23 >> 1) + 1;
      v12 = &v11[-2 * (v24 & 0xFFFFFFFFFFFFFFF0)];
      v25 = &v21[2 * v17 - 16];
      v26 = v11 - 16;
      v27 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 16;
      }
      while (v27);
      v22 -= 2 * (v24 & 0xFFFFFFFFFFFFFFF0);
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_149:
        do
        {
          v29 = *((_WORD *)v12 - 1);
          v12 -= 2;
          *((_WORD *)v22 - 1) = v29;
          v22 -= 2;
        }
        while (v12 != v14);
      }
    }
    *a5 = v22;
    a5[1] = v13;
    a5[2] = v10;
    if (v14)
    {
      operator delete(v14);
      v10 = a5[2];
    }
    v6 = a4;
    v7 = a3;
  }
  else
  {
    *(_WORD *)v11 = *a1;
    v13 = v11 + 2;
  }
  a5[1] = v13;
  if (v13 < v10)
  {
    *(_WORD *)v13 = *a2;
    v30 = v13 + 2;
    goto LABEL_48;
  }
  v31 = *a5;
  v32 = v13 - *a5;
  if (v32 <= -3)
    goto LABEL_145;
  v33 = v32 >> 1;
  v34 = v10 - v31;
  if (v34 <= (v32 >> 1) + 1)
    v35 = v33 + 1;
  else
    v35 = v34;
  if (v34 >= 0x7FFFFFFFFFFFFFFELL)
    v36 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v36 = v35;
  if (v36)
  {
    if (v36 < 0)
      goto LABEL_146;
    v37 = operator new(2 * v36);
  }
  else
  {
    v37 = 0;
  }
  v38 = &v37[2 * v33];
  v10 = &v37[2 * v36];
  *(_WORD *)v38 = *a2;
  v30 = v38 + 2;
  if (v13 != v31)
  {
    v39 = v13 - v31 - 2;
    if (v39 < 0x1E)
    {
      v40 = v13;
      goto LABEL_45;
    }
    if (v13 - v37 - (v32 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      v40 = v13;
      do
      {
LABEL_45:
        v46 = *((_WORD *)v40 - 1);
        v40 -= 2;
        *((_WORD *)v38 - 1) = v46;
        v38 -= 2;
      }
      while (v40 != v31);
      goto LABEL_46;
    }
    v41 = (v39 >> 1) + 1;
    v40 = &v13[-2 * (v41 & 0xFFFFFFFFFFFFFFF0)];
    v42 = &v37[2 * v33 - 16];
    v43 = v13 - 16;
    v44 = v41 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v45 = *(_OWORD *)v43;
      *(v42 - 1) = *((_OWORD *)v43 - 1);
      *v42 = v45;
      v42 -= 2;
      v43 -= 32;
      v44 -= 16;
    }
    while (v44);
    v38 -= 2 * (v41 & 0xFFFFFFFFFFFFFFF0);
    if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_45;
  }
LABEL_46:
  *a5 = v38;
  a5[1] = v30;
  a5[2] = v10;
  if (v31)
  {
    operator delete(v31);
    v10 = a5[2];
  }
LABEL_48:
  a5[1] = v30;
  if (v30 < v10)
  {
    *(_WORD *)v30 = *v7;
    v47 = v30 + 2;
    goto LABEL_72;
  }
  v48 = *a5;
  v49 = v30 - *a5;
  if (v49 <= -3)
    goto LABEL_145;
  v50 = v49 >> 1;
  v51 = v10 - v48;
  if (v51 <= (v49 >> 1) + 1)
    v52 = v50 + 1;
  else
    v52 = v51;
  if (v51 >= 0x7FFFFFFFFFFFFFFELL)
    v53 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v53 = v52;
  if (v53)
  {
    if (v53 < 0)
      goto LABEL_146;
    v54 = operator new(2 * v53);
  }
  else
  {
    v54 = 0;
  }
  v55 = &v54[2 * v50];
  v10 = &v54[2 * v53];
  *(_WORD *)v55 = *v7;
  v47 = v55 + 2;
  if (v30 != v48)
  {
    v56 = v30 - v48 - 2;
    if (v56 < 0x1E)
    {
      v57 = v30;
      goto LABEL_69;
    }
    if (v30 - v54 - (v49 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      v57 = v30;
      do
      {
LABEL_69:
        v63 = *((_WORD *)v57 - 1);
        v57 -= 2;
        *((_WORD *)v55 - 1) = v63;
        v55 -= 2;
      }
      while (v57 != v48);
      goto LABEL_70;
    }
    v58 = (v56 >> 1) + 1;
    v57 = &v30[-2 * (v58 & 0xFFFFFFFFFFFFFFF0)];
    v59 = &v54[2 * v50 - 16];
    v60 = v30 - 16;
    v61 = v58 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 16;
    }
    while (v61);
    v55 -= 2 * (v58 & 0xFFFFFFFFFFFFFFF0);
    if (v58 != (v58 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_69;
  }
LABEL_70:
  *a5 = v55;
  a5[1] = v47;
  a5[2] = v10;
  if (v48)
  {
    operator delete(v48);
    v10 = a5[2];
  }
LABEL_72:
  a5[1] = v47;
  if (v47 < v10)
  {
    *(_WORD *)v47 = *v7;
    v64 = v47 + 2;
    goto LABEL_96;
  }
  v65 = *a5;
  v66 = v47 - *a5;
  if (v66 <= -3)
    goto LABEL_145;
  v67 = v66 >> 1;
  v68 = v10 - v65;
  if (v68 <= (v66 >> 1) + 1)
    v69 = v67 + 1;
  else
    v69 = v68;
  if (v68 >= 0x7FFFFFFFFFFFFFFELL)
    v70 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v70 = v69;
  if (v70)
  {
    if (v70 < 0)
      goto LABEL_146;
    v71 = operator new(2 * v70);
  }
  else
  {
    v71 = 0;
  }
  v72 = &v71[2 * v67];
  v10 = &v71[2 * v70];
  *(_WORD *)v72 = *v7;
  v64 = v72 + 2;
  if (v47 != v65)
  {
    v73 = v47 - v65 - 2;
    if (v73 < 0x1E)
    {
      v74 = v47;
      goto LABEL_93;
    }
    if (v47 - v71 - (v66 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      v74 = v47;
      do
      {
LABEL_93:
        v80 = *((_WORD *)v74 - 1);
        v74 -= 2;
        *((_WORD *)v72 - 1) = v80;
        v72 -= 2;
      }
      while (v74 != v65);
      goto LABEL_94;
    }
    v75 = (v73 >> 1) + 1;
    v74 = &v47[-2 * (v75 & 0xFFFFFFFFFFFFFFF0)];
    v76 = &v71[2 * v67 - 16];
    v77 = v47 - 16;
    v78 = v75 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      *v76 = v79;
      v76 -= 2;
      v77 -= 32;
      v78 -= 16;
    }
    while (v78);
    v72 -= 2 * (v75 & 0xFFFFFFFFFFFFFFF0);
    if (v75 != (v75 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_93;
  }
LABEL_94:
  *a5 = v72;
  a5[1] = v64;
  a5[2] = v10;
  if (v65)
  {
    operator delete(v65);
    v10 = a5[2];
  }
LABEL_96:
  a5[1] = v64;
  if (v64 < v10)
  {
    *(_WORD *)v64 = *v6;
    v81 = v64 + 2;
    goto LABEL_120;
  }
  v82 = *a5;
  v83 = v64 - *a5;
  if (v83 <= -3)
    goto LABEL_145;
  v84 = v83 >> 1;
  v85 = v10 - v82;
  if (v85 <= (v83 >> 1) + 1)
    v86 = v84 + 1;
  else
    v86 = v85;
  if (v85 >= 0x7FFFFFFFFFFFFFFELL)
    v87 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v87 = v86;
  if (v87)
  {
    if (v87 < 0)
      goto LABEL_146;
    v88 = operator new(2 * v87);
  }
  else
  {
    v88 = 0;
  }
  v89 = &v88[2 * v84];
  v10 = &v88[2 * v87];
  *(_WORD *)v89 = *v6;
  v81 = v89 + 2;
  if (v64 != v82)
  {
    v90 = v64 - v82 - 2;
    if (v90 < 0x1E)
    {
      v91 = v64;
      goto LABEL_117;
    }
    if (v64 - v88 - (v83 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      v91 = v64;
      do
      {
LABEL_117:
        v97 = *((_WORD *)v91 - 1);
        v91 -= 2;
        *((_WORD *)v89 - 1) = v97;
        v89 -= 2;
      }
      while (v91 != v82);
      goto LABEL_118;
    }
    v92 = (v90 >> 1) + 1;
    v91 = &v64[-2 * (v92 & 0xFFFFFFFFFFFFFFF0)];
    v93 = &v88[2 * v84 - 16];
    v94 = v64 - 16;
    v95 = v92 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v96 = *(_OWORD *)v94;
      *(v93 - 1) = *((_OWORD *)v94 - 1);
      *v93 = v96;
      v93 -= 2;
      v94 -= 32;
      v95 -= 16;
    }
    while (v95);
    v89 -= 2 * (v92 & 0xFFFFFFFFFFFFFFF0);
    if (v92 != (v92 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_117;
  }
LABEL_118:
  *a5 = v89;
  a5[1] = v81;
  a5[2] = v10;
  if (v82)
  {
    operator delete(v82);
    v10 = a5[2];
  }
LABEL_120:
  a5[1] = v81;
  if (v81 < v10)
  {
    *(_WORD *)v81 = *a1;
    v98 = v81 + 2;
    goto LABEL_144;
  }
  v99 = *a5;
  v100 = v81 - *a5;
  if (v100 <= -3)
LABEL_145:
    abort();
  v101 = v100 >> 1;
  v102 = v10 - v99;
  if (v102 <= (v100 >> 1) + 1)
    v103 = v101 + 1;
  else
    v103 = v102;
  if (v102 >= 0x7FFFFFFFFFFFFFFELL)
    v104 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v104 = v103;
  if (v104)
  {
    if ((v104 & 0x8000000000000000) == 0)
    {
      v105 = operator new(2 * v104);
      goto LABEL_133;
    }
LABEL_146:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v105 = 0;
LABEL_133:
  v106 = &v105[2 * v101];
  *(_WORD *)v106 = *a1;
  v98 = v106 + 2;
  if (v81 == v99)
    goto LABEL_142;
  v107 = v81 - v99 - 2;
  if (v107 < 0x1E)
  {
    v108 = v81;
    goto LABEL_141;
  }
  if (v81 - v105 - (v100 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
  {
    v108 = v81;
    do
    {
LABEL_141:
      v114 = *((_WORD *)v108 - 1);
      v108 -= 2;
      *((_WORD *)v106 - 1) = v114;
      v106 -= 2;
    }
    while (v108 != v99);
    goto LABEL_142;
  }
  v109 = (v107 >> 1) + 1;
  v108 = &v81[-2 * (v109 & 0xFFFFFFFFFFFFFFF0)];
  v110 = &v105[2 * v101 - 16];
  v111 = v81 - 16;
  v112 = v109 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v113 = *(_OWORD *)v111;
    *(v110 - 1) = *((_OWORD *)v111 - 1);
    *v110 = v113;
    v110 -= 2;
    v111 -= 32;
    v112 -= 16;
  }
  while (v112);
  v106 -= 2 * (v109 & 0xFFFFFFFFFFFFFFF0);
  if (v109 != (v109 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_141;
LABEL_142:
  *a5 = v106;
  a5[1] = v98;
  a5[2] = &v105[2 * v104];
  if (v99)
    operator delete(v99);
LABEL_144:
  a5[1] = v98;
}

uint64_t karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(uint64_t a1, float *a2, float a3, float a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  int v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t result;
  double v47;
  double v48;
  float v49;
  float v50;
  NSObject *v51;
  uint8_t v52[16];

  v14 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  do
  {
    if (!v15)
      return 0;
    v22 = *(uint64_t **)(v15 + 16);
    v24 = *v22;
    v23 = (std::__shared_weak_count *)v22[1];
    if (!v23)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v24)
        return 0;
    }
    else
    {
LABEL_11:
      if (!v24)
        return 0;
    }
    v28 = *(uint64_t **)(*(_QWORD *)(v14 + 16) + 16);
    v29 = *v28;
    v30 = (std::__shared_weak_count *)v28[1];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(_QWORD *)(v29 + 8);
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (v34)
      {
        v35 = *(int **)(v14 + 16);
        if (v35)
          goto LABEL_21;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        v35 = *(int **)(v14 + 16);
        if (v35)
        {
LABEL_21:
          v36 = *v35;
          v37 = v35[1] - 2;
          goto LABEL_24;
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)(v29 + 8);
      v35 = *(int **)(v14 + 16);
      if (v35)
        goto LABEL_21;
    }
    v36 = 0;
    v37 = -2;
LABEL_24:
    v38 = (float)(v36 - 1) - a4;
    v39 = a3;
    if (a3 >= v36 - 2)
      v39 = v36 - 2;
    if (v38 < v37)
      v37 = v38;
    v40 = v39 + v37 * v36;
    v41 = *(unsigned __int8 *)(v33 + v40);
    v42 = *(unsigned __int8 *)(v33 + v40 + 1);
    v43 = v40 + v36;
    v44 = *(unsigned __int8 *)(v33 + v43);
    v45 = *(unsigned __int8 *)(v33 + v43 + 1);
    if (!*(_BYTE *)(v14 + 156) || v41 != 255 && v42 != 255 && v44 != 255 && v45 != 255)
    {
      v49 = a3 - (float)v39;
      v50 = (float)v41 + (float)(v49 * (float)(int)(v42 - v41));
      *a2 = *(float *)(v14 + 120)
          + (float)(*(float *)(v14 + 124)
                  * truncf(truncf(v50)+ (float)((float)(v38 - (float)v37)* (float)((int)(float)((float)v44 + (float)(v49 * (float)(int)(v45 - v44))) - (int)v50))));
      return 1;
    }
    result = *(_QWORD *)(v14 + 160);
    if (!result)
      return result;
    v47 = 1.0 / (double)(1 << *(_DWORD *)(v14 + 136));
    v48 = a3;
    if (v35)
    {
      LODWORD(a5) = *v35;
      LODWORD(a6) = v35[1];
      v16 = v47 * v48 / ((double)*(unint64_t *)&a5 + -1.0);
      v17 = (double)*(unint64_t *)&a6 + -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
      {
LABEL_3:
        LODWORD(a6) = *(_DWORD *)v15;
        a6 = (double)*(unint64_t *)&a6 + -1.0;
        goto LABEL_4;
      }
    }
    else
    {
      v16 = -(v48 * v47);
      v17 = -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
        goto LABEL_3;
    }
    a6 = -1.0;
LABEL_4:
    v18 = *(_QWORD *)(result + 136);
    v19 = (double)(1 << v18);
    LODWORD(a10) = *(_DWORD *)(v14 + 140);
    LODWORD(a9) = *(_DWORD *)(v14 + 144);
    a9 = v47 * (double)*(unint64_t *)&a9;
    a10 = v47 * (double)*(unint64_t *)&a10;
    LODWORD(v10) = *(_DWORD *)(result + 144);
    v10 = (double)*(unint64_t *)&v10;
    v20 = v47 * a4 / v17;
    a5 = a9 - 1.0 / v19 * v10;
    a3 = (a5 + v16) * v19 * a6;
    a4 = (a10 - 1.0 / v19 * (double)HIDWORD(v18) + v20) * (v19 * a6);
    v21 = *(_DWORD *)(result + 132);
    v14 = *(_QWORD *)(v14 + 160);
  }
  while (v21 == 8);
  if (v21 == 16)
    return karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(result, a2, a3, a4, a5, a6, v19, 1.0 / v19, a9, a10);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v51 = GEOGetVectorKitVKDefaultLog_log;
  result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_WORD *)v52 = 0;
    _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_ERROR, "Unknown DTM format", v52, 2u);
    return 0;
  }
  return result;
}

uint64_t karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(uint64_t a1, float *a2, float a3, float a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  int v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  uint64_t result;
  double v50;
  double v51;
  float v52;
  float v53;
  NSObject *v54;
  uint8_t v55[16];

  v14 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  do
  {
    if (!v15)
      return 0;
    v22 = *(uint64_t **)(v15 + 16);
    v24 = *v22;
    v23 = (std::__shared_weak_count *)v22[1];
    if (!v23)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v24)
        return 0;
    }
    else
    {
LABEL_11:
      if (!v24)
        return 0;
    }
    v28 = *(uint64_t **)(*(_QWORD *)(v14 + 16) + 16);
    v29 = *v28;
    v30 = (std::__shared_weak_count *)v28[1];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(_QWORD *)(v29 + 8);
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (v34)
      {
        v35 = *(int **)(v14 + 16);
        if (v35)
          goto LABEL_21;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        v35 = *(int **)(v14 + 16);
        if (v35)
        {
LABEL_21:
          v36 = *v35;
          v37 = v35[1] - 2;
          goto LABEL_24;
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)(v29 + 8);
      v35 = *(int **)(v14 + 16);
      if (v35)
        goto LABEL_21;
    }
    v36 = 0;
    v37 = -2;
LABEL_24:
    v38 = (float)(v36 - 1) - a4;
    v39 = a3;
    if (a3 >= v36 - 2)
      v39 = v36 - 2;
    if (v38 < v37)
      v37 = v38;
    v40 = v39 + v37 * v36;
    v41 = *(unsigned __int16 *)(v33 + 2 * v40);
    v42 = *(unsigned __int16 *)(v33 + 2 * (v40 + 1));
    v43 = v40 + v36;
    v44 = *(unsigned __int16 *)(v33 + 2 * v43);
    v45 = *(unsigned __int16 *)(v33 + 2 * (v43 + 1));
    if (!*(_BYTE *)(v14 + 156)
      || (v41 != 0xFFFF ? (v46 = v42 == 0xFFFF) : (v46 = 1),
          !v46 ? (v47 = v44 == 0xFFFF) : (v47 = 1),
          !v47 ? (v48 = v45 == 0xFFFF) : (v48 = 1),
          !v48))
    {
      v52 = a3 - (float)v39;
      v53 = (float)v41 + (float)(v52 * (float)(int)(v42 - v41));
      *a2 = *(float *)(v14 + 120)
          + (float)(*(float *)(v14 + 124)
                  * truncf(truncf(v53)+ (float)((float)(v38 - (float)v37)* (float)((int)(float)((float)v44 + (float)(v52 * (float)(int)(v45 - v44))) - (int)v53))));
      return 1;
    }
    result = *(_QWORD *)(v14 + 160);
    if (!result)
      return result;
    v50 = 1.0 / (double)(1 << *(_DWORD *)(v14 + 136));
    v51 = a3;
    if (v35)
    {
      LODWORD(a5) = *v35;
      LODWORD(a6) = v35[1];
      v16 = v50 * v51 / ((double)*(unint64_t *)&a5 + -1.0);
      v17 = (double)*(unint64_t *)&a6 + -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
      {
LABEL_3:
        LODWORD(a6) = *(_DWORD *)v15;
        a6 = (double)*(unint64_t *)&a6 + -1.0;
        goto LABEL_4;
      }
    }
    else
    {
      v16 = -(v51 * v50);
      v17 = -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
        goto LABEL_3;
    }
    a6 = -1.0;
LABEL_4:
    v18 = *(_QWORD *)(result + 136);
    v19 = (double)(1 << v18);
    LODWORD(a10) = *(_DWORD *)(v14 + 140);
    LODWORD(a9) = *(_DWORD *)(v14 + 144);
    a9 = v50 * (double)*(unint64_t *)&a9;
    a10 = v50 * (double)*(unint64_t *)&a10;
    LODWORD(v10) = *(_DWORD *)(result + 144);
    v10 = (double)*(unint64_t *)&v10;
    v20 = v50 * a4 / v17;
    a5 = a9 - 1.0 / v19 * v10;
    a3 = (a5 + v16) * v19 * a6;
    a4 = (a10 - 1.0 / v19 * (double)HIDWORD(v18) + v20) * (v19 * a6);
    v21 = *(_DWORD *)(result + 132);
    v14 = *(_QWORD *)(v14 + 160);
  }
  while (v21 == 16);
  if (v21 == 8)
    return karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(a3, a4);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v54 = GEOGetVectorKitVKDefaultLog_log;
  result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_19F029000, v54, OS_LOG_TYPE_ERROR, "Unknown DTM format", v55, 2u);
    return 0;
  }
  return result;
}

float karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>(uint64_t a1, uint64_t a2, float *a3, float *a4, float result)
{
  uint64_t v7;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  int v37;
  unsigned __int8 v38;
  int v39;
  unsigned int v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  float v46;
  float v47;
  int v48;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_17;
  v10 = *(uint64_t **)(v7 + 16);
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (!v11)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_7:
    if (v12)
      goto LABEL_8;
LABEL_17:
    *a3 = 0.0;
    *a4 = 0.0;
    return result;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12)
    goto LABEL_17;
LABEL_8:
  v16 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 16);
  v17 = *v16;
  v18 = (std::__shared_weak_count *)v16[1];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = *(_QWORD *)(v17 + 8);
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 - 1, v19));
    if (v22)
    {
      v23 = *(int **)(a1 + 16);
      if (v23)
      {
LABEL_15:
        v24 = *v23;
        v25 = v23[1];
        goto LABEL_20;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v23 = *(int **)(a1 + 16);
      if (v23)
        goto LABEL_15;
    }
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 8);
    v23 = *(int **)(a1 + 16);
    if (v23)
      goto LABEL_15;
  }
  v24 = 0;
  v25 = 0;
LABEL_20:
  v26 = 0;
  v27 = *(unsigned __int8 *)(a2 + 1);
  v28 = v27 - *(_DWORD *)(a1 + 136);
  v29 = 1 << (v27 - *(_BYTE *)(a1 + 136));
  v30 = (~(-1 << v27) - (*(_DWORD *)(a2 + 4) + (*(_DWORD *)(a1 + 140) << (v27 - *(_BYTE *)(a1 + 136))))) * v25 / v29;
  v31 = v25 / v29 + v30;
  v32 = 0.0;
  v33 = 255.0;
  if (v30 < v31 && v24 / v29 >= 1)
  {
    v26 = 0;
    v34 = 0;
    v35 = (*(_DWORD *)(a2 + 8) - (*(_DWORD *)(a1 + 144) << v28)) * v24 / v29;
    v36 = v24 / v29 + v35;
    v37 = (v24 + ~v30) * v24;
    v38 = -1;
    do
    {
      v39 = v35;
      do
      {
        v40 = *(unsigned __int8 *)(v21 + (v37 + v39));
        v41 = v34;
        if (v40 > v34)
          v41 = *(_BYTE *)(v21 + (v37 + v39));
        v42 = v38;
        if (v40 < v38)
          v42 = *(_BYTE *)(v21 + (v37 + v39));
        v43 = v40 == 255;
        if (!v43)
        {
          v38 = v42;
          v34 = v41;
        }
        v26 |= v43;
        ++v39;
      }
      while (v39 < v36);
      v37 -= v24;
      ++v30;
    }
    while (v30 != v31);
    v33 = (float)v38;
    v32 = (float)v34;
  }
  *a3 = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v33);
  result = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v32);
  *a4 = result;
  if ((v26 & 1) != 0)
  {
    v44 = *(_QWORD *)(a1 + 160);
    if (v44)
    {
      v47 = -3.4028e38;
      v48 = 2139095039;
      v45 = *(_DWORD *)(v44 + 132);
      if (v45 == 16)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(v44, a2, (float *)&v48, &v47, result);
      }
      else if (v45 == 8)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>();
      }
      v46 = v47;
      *a3 = fminf(*a3, v47);
      result = fmaxf(v46, *a4);
      *a4 = result;
    }
  }
  return result;
}

float karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(uint64_t a1, uint64_t a2, float *a3, float *a4, float result)
{
  uint64_t v7;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float v33;
  unsigned __int16 v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  int v39;
  unsigned int v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  BOOL v43;
  uint64_t v44;
  int v45;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_17;
  v10 = *(uint64_t **)(v7 + 16);
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (!v11)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_7:
    if (v12)
      goto LABEL_8;
LABEL_17:
    *a3 = 0.0;
    *a4 = 0.0;
    return result;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12)
    goto LABEL_17;
LABEL_8:
  v16 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 16);
  v17 = *v16;
  v18 = (std::__shared_weak_count *)v16[1];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = *(_QWORD *)(v17 + 8);
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 - 1, v19));
    if (v22)
    {
      v23 = *(int **)(a1 + 16);
      if (v23)
      {
LABEL_15:
        v24 = *v23;
        v25 = v23[1];
        goto LABEL_20;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v23 = *(int **)(a1 + 16);
      if (v23)
        goto LABEL_15;
    }
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 8);
    v23 = *(int **)(a1 + 16);
    if (v23)
      goto LABEL_15;
  }
  v24 = 0;
  v25 = 0;
LABEL_20:
  v26 = 0;
  v27 = *(unsigned __int8 *)(a2 + 1);
  v28 = v27 - *(_DWORD *)(a1 + 136);
  v29 = 1 << (v27 - *(_BYTE *)(a1 + 136));
  v30 = (~(-1 << v27) - (*(_DWORD *)(a2 + 4) + (*(_DWORD *)(a1 + 140) << (v27 - *(_BYTE *)(a1 + 136))))) * v25 / v29;
  v31 = v25 / v29 + v30;
  v32 = 0.0;
  v33 = 65535.0;
  if (v30 < v31 && v24 / v29 >= 1)
  {
    v26 = 0;
    v34 = 0;
    v35 = (*(_DWORD *)(a2 + 8) - (*(_DWORD *)(a1 + 144) << v28)) * v24 / v29;
    v36 = v24 / v29 + v35;
    v37 = (v24 + ~v30) * v24;
    v38 = -1;
    do
    {
      v39 = v35;
      do
      {
        v40 = *(unsigned __int16 *)(v21 + 2 * (v37 + v39));
        v41 = v34;
        if (v40 > v34)
          v41 = *(_WORD *)(v21 + 2 * (v37 + v39));
        v42 = v38;
        if (v40 < v38)
          v42 = *(_WORD *)(v21 + 2 * (v37 + v39));
        v43 = v40 == 0xFFFF;
        if (!v43)
        {
          v38 = v42;
          v34 = v41;
        }
        v26 |= v43;
        ++v39;
      }
      while (v39 < v36);
      v37 -= v24;
      ++v30;
    }
    while (v30 != v31);
    v33 = (float)v38;
    v32 = (float)v34;
  }
  *a3 = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v33);
  result = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v32);
  *a4 = result;
  if ((v26 & 1) != 0)
  {
    v44 = *(_QWORD *)(a1 + 160);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 + 132);
      if (v45 == 16)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>();
      }
      else if (v45 == 8)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>();
      }
      *a3 = fminf(*a3, -3.4028e38);
      result = fmaxf(-3.4028e38, *a4);
      *a4 = result;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<altitude::RenderableGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::RenderableGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::RenderableGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::HeightMeshBuilder::createGlobeElement(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  int v6;
  size_t v7;
  unint64_t v8;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  char *v18;
  std::string *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  unint64_t shared_weak_owners;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 __dst;
  unint64_t v108;

  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v8 = v7 + 8;
  if (v7 + 8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v8 >= 0x17)
  {
    v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v15 = v8 | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = v7 + 8;
    v108 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    v108 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v108) = v7 + 8;
    if (!v7)
      goto LABEL_15;
  }
  if (v6 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  memmove(p_dst, v17, v7);
LABEL_15:
  strcpy((char *)p_dst + v7, "/Element");
  v18 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_1E42E6140;
  v19 = (std::string *)(v18 + 32);
  *((_QWORD *)v18 + 3) = off_1E42BE278;
  v20 = SHIBYTE(v108);
  if (SHIBYTE(v108) < 0)
  {
    std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = __dst;
    *((_QWORD *)v18 + 6) = v108;
  }
  *((_QWORD *)v18 + 3) = &off_1E42C4580;
  *((_QWORD *)v18 + 7) = 0;
  v18[64] = 1;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *((_QWORD *)v18 + 17) = 0;
  v18[144] = 1;
  *((_QWORD *)v18 + 19) = 0;
  *((_QWORD *)v18 + 20) = 0;
  *a1 = (uint64_t)(v18 + 24);
  a1[1] = (uint64_t)v18;
  if (v20 < 0)
    operator delete((void *)__dst);
  v21 = *(uint64_t **)a5;
  if (*(_QWORD *)(a5 + 8) != *(_QWORD *)a5)
  {
    v22 = *v21;
    v23 = (std::__shared_weak_count *)v21[1];
    v98 = *v21;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      v22 = **(_QWORD **)a5;
    }
    v26 = *(_QWORD *)(v22 + 8);
    v27 = *(std::__shared_weak_count **)(v22 + 16);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *a6;
    if (a6[1] == *a6)
    {
      v96 = 0;
      v31 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v31 = (std::__shared_weak_count *)v30[1];
      v96 = *v30;
      v32 = *v30;
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        v32 = **a6;
      }
      v36 = *(_QWORD *)(v32 + 8);
      v35 = *(std::__shared_weak_count **)(v32 + 16);
      if (v35)
      {
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
    }
    __asm { FMOV            V0.2S, #1.0 }
    v106 = _D0;
    v105 = 0;
    if (v26)
    {
      v44 = *(_BYTE *)(a2 + 177);
      v45 = ~(-1 << v44) - *(_DWORD *)(a2 + 180);
      v46 = *(_BYTE *)(v26 + 25);
      v47 = *(_DWORD *)(v26 + 28) + (-1 << v46) + 1;
      v48 = v44 - v46;
      v49 = 1.0 / (float)(1 << v48);
      v50 = (float)(*(_DWORD *)(a2 + 184) - (*(_DWORD *)(v26 + 32) << v48)) * v49;
      *(float *)&v106 = v49;
      *((float *)&v106 + 1) = v49;
      *(float *)&v105 = v50;
      *((float *)&v105 + 1) = (float)(v45 + (v47 << v48)) * v49;
    }
    v100 = v31;
    v101 = v27;
    v99 = v35;
    v97 = v36;
    if (v36)
      v51 = *(_QWORD *)(v36 + 48);
    else
      v51 = 0;
    v52 = *(_QWORD *)(v26 + 48);
    v53 = (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 1;
    v54 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v54->__shared_owners_ = 0;
    v55 = (unint64_t *)&v54->__shared_owners_;
    v54->__shared_weak_owners_ = 0;
    v54->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    ggl::BufferData::BufferData((uint64_t)&v54[1], 2, 1, 0, 7, v53);
    LODWORD(v54[10].__vftable) = 0;
    v54[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v54[1].__shared_owners_ = 2;
    v54[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v54[9].__shared_weak_owners_ = (uint64_t)"/render/heightmeshbuilder/indexdata";
    v56 = ((unint64_t)v54[3].__vftable - v54[2].__shared_weak_owners_) & 0xFFFFFFFFFFFFFFFELL;
    if (v56)
      v57 = v54[4].__vftable;
    else
      v57 = 0;
    memcpy(v57, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
    if (v57 && v56)
    {
      shared_weak_owners = v54[3].__shared_weak_owners_;
      if (shared_weak_owners <= v56)
        shared_weak_owners = v56;
      v54[3].__shared_owners_ = 0;
      v54[3].__shared_weak_owners_ = shared_weak_owners;
    }
    v59 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)&__dst = *(_QWORD *)(a2 + 24);
    *((_QWORD *)&__dst + 1) = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 40) + 8) + 216);
    v63 = operator new();
    v64 = v63;
    v65 = a2 + 72;
    v66 = a2 + 128;
    if (v51)
    {
      v103 = v54 + 1;
      v104 = v54;
      do
        v67 = __ldxr(v55);
      while (__stxr(v67 + 1, v55));
      altitude::FlyoverNightRenderable::FlyoverNightRenderable(v63, v62, v65, v66, (uint64_t)&__dst, (uint64_t *)&v103, v52, v51, &v106, &v105);
      do
        v68 = __ldaxr(v55);
      while (__stlxr(v68 - 1, v55));
    }
    else
    {
      v103 = v54 + 1;
      v104 = v54;
      do
        v69 = __ldxr(v55);
      while (__stxr(v69 + 1, v55));
      altitude::FlyoverRenderable::FlyoverRenderable(v63, v62, v65, v66, (uint64_t)&__dst, (uint64_t *)&v103, v52, &v106, &v105);
      do
        v68 = __ldaxr(v55);
      while (__stlxr(v68 - 1, v55));
    }
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    *(_DWORD *)(v64 + 164) = *(_DWORD *)(a2 + 64);
    *(_BYTE *)(v64 + 168) = 1;
    v70 = *a1;
    v71 = *(uint64_t **)(v70 + 104);
    if ((unint64_t)v71 >= *(_QWORD *)(v70 + 112))
    {
      v77 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v70 + 96), v98, (uint64_t)v23);
    }
    else
    {
      *v71 = 0;
      v71[1] = 0;
      if (v23)
      {
        v72 = (unint64_t *)&v23->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
        v74 = (std::__shared_weak_count *)v71[1];
        *v71 = v98;
        v71[1] = (uint64_t)v23;
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
      }
      else
      {
        *v71 = v98;
        v71[1] = 0;
      }
      v77 = (char *)(v71 + 2);
    }
    *(_QWORD *)(v70 + 104) = v77;
    if (v97)
    {
      if ((unint64_t)v77 >= *(_QWORD *)(v70 + 112))
      {
        v83 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v70 + 96), v96, (uint64_t)v100);
      }
      else
      {
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
        if (v100)
        {
          v78 = (unint64_t *)&v100->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
          v80 = (std::__shared_weak_count *)*((_QWORD *)v77 + 1);
          *(_QWORD *)v77 = v96;
          *((_QWORD *)v77 + 1) = v100;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else
        {
          *(_QWORD *)v77 = v96;
          *((_QWORD *)v77 + 1) = 0;
        }
        v83 = v77 + 16;
      }
      *(_QWORD *)(v70 + 104) = v83;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v64);
    v84 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    do
      v87 = __ldaxr(v55);
    while (__stlxr(v87 - 1, v55));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    if (v100)
    {
      v88 = (unint64_t *)&v100->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (!v99)
      goto LABEL_109;
    v90 = (unint64_t *)&v99->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      if (!v23)
        goto LABEL_113;
    }
    else
    {
LABEL_109:
      if (!v23)
        goto LABEL_113;
    }
    v92 = (unint64_t *)&v23->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v101)
        return;
      goto LABEL_114;
    }
LABEL_113:
    if (!v101)
      return;
LABEL_114:
    v94 = (unint64_t *)&v101->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E427C198;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E427C198;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  unint64_t v6;
  uint64_t *v11;
  _QWORD **v12;
  uint64_t ColorRampData;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  uint64_t (***v25)();
  BOOL v26;
  int8x8_t *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  void **v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t prime;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  size_t v56;
  size_t v57;
  size_t v58;
  _QWORD *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  int8x8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  unint64_t MaterialHandle;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t *v82;
  _QWORD *v83;
  BOOL updated;
  uint64_t (**v85)();
  char v86;
  char v87;
  uint64_t (**v88)();
  __int128 v89;
  uint64_t (***v90)();
  uint64_t (**v91)();
  __int128 v92;
  uint64_t (***v93)();
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v11 = *a6;
  v12 = *(_QWORD ***)(a1 + 24);
  ColorRampData = md::VKMRenderResourcesStore::getColorRampData(**(_QWORD **)(a1 + 8), *a5);
  if (v11)
  {
    LOBYTE(v85) = 0;
    v86 = 0;
    updated = md::MaterialRaster::updateStyleTextureIfNecessary(*v11, **(int8x8_t ***)(a1 + 32), (uint64_t)&v85, **(unsigned __int8 **)(a1 + 48), *(unsigned __int8 *)(**(_QWORD **)(a1 + 56) + 72) == 1, **(float **)(a1 + 40));
    v14 = (uint64_t *)ecs2::Runtime::_localEntity();
    v15 = *v14;
    v88 = &off_1E427E430;
    *(_QWORD *)&v89 = v16;
    *((_QWORD *)&v89 + 1) = v15;
    v90 = &v88;
    v93 = &v91;
    v91 = &off_1E427E430;
    v92 = v89;
    v94 = 0;
    ecs2::Runtime::queueCommand(v17, (uint64_t)&v91);
    if (v94 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v94])(&v87, &v91);
    v94 = -1;
    v18 = v90;
    if (v90 == &v88)
    {
      v19 = 4;
      v18 = &v88;
    }
    else
    {
      if (!v90)
      {
LABEL_28:
        v36 = *(uint64_t **)(a1 + 8);
        v37 = *v36;
        v38 = *a3;
        v39 = *(_QWORD *)(*v36 + 10288);
        if (v39)
        {
          v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
          v40.i16[0] = vaddlv_u8(v40);
          if (v40.u32[0] > 1uLL)
          {
            v6 = *a3;
            if (v38 >= v39)
              v6 = v38 % v39;
          }
          else
          {
            v6 = (v39 - 1) & v38;
          }
          v41 = *(void ***)(*(_QWORD *)(v37 + 10280) + 8 * v6);
          if (v41)
          {
            v42 = *v41;
            if (*v41)
            {
              if (v40.u32[0] < 2uLL)
              {
                while (1)
                {
                  v44 = v42[1];
                  if (v44 == v38)
                  {
                    if (v42[2] == v38)
                      goto LABEL_115;
                  }
                  else if ((v44 & (v39 - 1)) != v6)
                  {
                    goto LABEL_49;
                  }
                  v42 = (_QWORD *)*v42;
                  if (!v42)
                    goto LABEL_49;
                }
              }
              do
              {
                v43 = v42[1];
                if (v43 == v38)
                {
                  if (v42[2] == v38)
                    goto LABEL_115;
                }
                else
                {
                  if (v43 >= v39)
                    v43 %= v39;
                  if (v43 != v6)
                    break;
                }
                v42 = (_QWORD *)*v42;
              }
              while (v42);
            }
          }
        }
LABEL_49:
        v42 = operator new(0x20uLL);
        *v42 = 0;
        v42[1] = v38;
        v42[2] = v38;
        *((_BYTE *)v42 + 24) = 0;
        v45 = (float)(unint64_t)(*(_QWORD *)(v37 + 10304) + 1);
        v46 = *(float *)(v37 + 10312);
        if ((((float)(v46 * (float)v39) >= v45) & ~(v39 == 0)) != 0)
        {
LABEL_105:
          v71 = *(_QWORD *)(v37 + 10280);
          v72 = *(_QWORD **)(v71 + 8 * v6);
          if (v72)
          {
            *v42 = *v72;
          }
          else
          {
            *v42 = *(_QWORD *)(v37 + 10296);
            *(_QWORD *)(v37 + 10296) = v42;
            *(_QWORD *)(v71 + 8 * v6) = v37 + 10296;
            if (!*v42)
            {
LABEL_114:
              ++*(_QWORD *)(v37 + 10304);
LABEL_115:
              *((_BYTE *)v42 + 24) = updated;
              if (v86)
              {
                v74 = **(int8x8_t ***)(a1 + 32);
                v75 = (uint64_t)v85;
                v91 = v85;
                *(_QWORD *)&v92 = 0;
                gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v88, v74, (uint64_t *)&v91, 0);
                if (*((_BYTE *)v88 + 8) == 5)
                {
                  v76 = **(_QWORD **)(a1 + 16);
                  v91 = (uint64_t (**)())v75;
                  *(_QWORD *)&v92 = 1;
                  v77 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v76 + 232), (uint64_t *)&v91);
                  if (!v77 || (MaterialHandle = (unint64_t)v77[4]) == 0)
                  {
                    MaterialHandle = md::MaterialResourceStore::createMaterialHandle(v76, v75, 1);
                    md::MaterialResourceStore::disconnect<geo::handle<md::MaterialIDStorage>>(**(int8x8_t ***)(a1 + 16), MaterialHandle);
                  }
                  v79 = *v14;
                  v80 = *v12;
                  v81 = operator new(0x30uLL);
                  *v81 = &off_1E427E4C0;
                  v81[1] = MaterialHandle;
                  v81[2] = v75;
                  v81[3] = v75;
                  *((_WORD *)v81 + 16) = 1;
                  v81[5] = v79;
                  v93 = (uint64_t (***)())v81;
                  v94 = 0;
                  ecs2::Runtime::queueCommand(v80, (uint64_t)&v91);
                  if (v94 != -1)
                    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v94])(&v87, &v91);
                  disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
                  if (*(_BYTE *)(ColorRampData + 32))
                    *(_BYTE *)(ColorRampData + 32) = 0;
                  *(_OWORD *)ColorRampData = 0u;
                  *(_OWORD *)(ColorRampData + 16) = 0u;
                  *(_BYTE *)(ColorRampData + 32) = 1;
                }
                else
                {
                  disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
                  if (*(_BYTE *)(ColorRampData + 32))
                    *(_BYTE *)(ColorRampData + 32) = 0;
                }
                v33 = (std::__shared_weak_count *)v89;
                if ((_QWORD)v89)
                {
                  v82 = (unint64_t *)(v89 + 8);
                  do
                    v35 = __ldaxr(v82);
                  while (__stlxr(v35 - 1, v82));
                  goto LABEL_133;
                }
              }
              else
              {
                disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
                if (*(_BYTE *)(ColorRampData + 32))
                  *(_BYTE *)(ColorRampData + 32) = 0;
              }
              return;
            }
            v73 = *(_QWORD *)(*v42 + 8);
            if ((v39 & (v39 - 1)) != 0)
            {
              if (v73 >= v39)
                v73 %= v39;
            }
            else
            {
              v73 &= v39 - 1;
            }
            v72 = (_QWORD *)(*(_QWORD *)(v37 + 10280) + 8 * v73);
          }
          *v72 = v42;
          goto LABEL_114;
        }
        v47 = 1;
        if (v39 >= 3)
          v47 = (v39 & (v39 - 1)) != 0;
        v48 = v47 | (2 * v39);
        v49 = vcvtps_u32_f32(v45 / v46);
        if (v48 <= v49)
          prime = v49;
        else
          prime = v48;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v39 = *(_QWORD *)(v37 + 10288);
        }
        if (prime <= v39)
        {
          if (prime >= v39)
            goto LABEL_100;
          v63 = vcvtps_u32_f32((float)*(unint64_t *)(v37 + 10304) / *(float *)(v37 + 10312));
          if (v39 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v39), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
          {
            v63 = std::__next_prime(v63);
          }
          else
          {
            v65 = 1 << -(char)__clz(v63 - 1);
            if (v63 >= 2)
              v63 = v65;
          }
          if (prime <= v63)
            prime = v63;
          if (prime >= v39)
            goto LABEL_100;
          if (!prime)
          {
            v70 = *(void **)(v37 + 10280);
            *(_QWORD *)(v37 + 10280) = 0;
            if (v70)
              operator delete(v70);
            *(_QWORD *)(v37 + 10288) = 0;
            goto LABEL_100;
          }
        }
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v51 = operator new(8 * prime);
        v52 = *(void **)(v37 + 10280);
        *(_QWORD *)(v37 + 10280) = v51;
        if (v52)
          operator delete(v52);
        v53 = 0;
        *(_QWORD *)(v37 + 10288) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(v37 + 10280) + 8 * v53++) = 0;
        while (prime != v53);
        v54 = *(_QWORD **)(v37 + 10296);
        if (!v54)
        {
LABEL_100:
          v39 = *(_QWORD *)(v37 + 10288);
          if ((v39 & (v39 - 1)) != 0)
          {
            if (v38 >= v39)
              v6 = v38 % v39;
            else
              v6 = v38;
          }
          else
          {
            v6 = (v39 - 1) & v38;
          }
          goto LABEL_105;
        }
        v55 = v37 + 10296;
        v56 = v54[1];
        v57 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v58 = v56 & v57;
          *(_QWORD *)(*(_QWORD *)(v37 + 10280) + 8 * v58) = v55;
          while (1)
          {
            v59 = (_QWORD *)*v54;
            if (!*v54)
              break;
            v60 = v59[1] & v57;
            if (v60 == v58)
            {
              v54 = (_QWORD *)*v54;
            }
            else
            {
              v61 = *(_QWORD *)(v37 + 10280);
              if (*(_QWORD *)(v61 + 8 * v60))
              {
                *v54 = *v59;
                v62 = 8 * v60;
                *v59 = **(_QWORD **)(*(_QWORD *)(v37 + 10280) + v62);
                **(_QWORD **)(*(_QWORD *)(v37 + 10280) + v62) = v59;
              }
              else
              {
                *(_QWORD *)(v61 + 8 * v60) = v54;
                v54 = v59;
                v58 = v60;
              }
            }
          }
          goto LABEL_100;
        }
        if (v56 >= prime)
          v56 %= prime;
        *(_QWORD *)(*(_QWORD *)(v37 + 10280) + 8 * v56) = v55;
        v66 = (_QWORD *)*v54;
        if (!*v54)
          goto LABEL_100;
        while (1)
        {
          v68 = v66[1];
          if (v68 >= prime)
            v68 %= prime;
          if (v68 != v56)
          {
            v69 = *(_QWORD *)(v37 + 10280);
            if (!*(_QWORD *)(v69 + 8 * v68))
            {
              *(_QWORD *)(v69 + 8 * v68) = v54;
              goto LABEL_86;
            }
            *v54 = *v66;
            v67 = 8 * v68;
            *v66 = **(_QWORD **)(*(_QWORD *)(v37 + 10280) + v67);
            **(_QWORD **)(*(_QWORD *)(v37 + 10280) + v67) = v66;
            v66 = v54;
          }
          v68 = v56;
LABEL_86:
          v54 = v66;
          v66 = (_QWORD *)*v66;
          v56 = v68;
          if (!v66)
            goto LABEL_100;
        }
      }
      v19 = 5;
    }
    (*v18)[v19]();
    goto LABEL_28;
  }
  v20 = **(_QWORD **)(a1 + 16);
  v21 = *a4;
  v85 = (uint64_t (**)())v21;
  v22 = *(_QWORD *)(v20 + 120);
  if (v21 >= (unint64_t)((*(_QWORD *)(v20 + 128) - v22) >> 3))
    goto LABEL_15;
  v23 = *(uint64_t (***)())(v22 + 8 * v21);
  if (!v23)
    goto LABEL_16;
  if (HIDWORD(v21) != HIDWORD(v23)
    || ((v24 = *(_QWORD *)(v20 + 144),
         v25 = (uint64_t (***)())(v24 + 8 * v23),
         v25 != *(uint64_t (****)())(v20 + 152))
      ? (v26 = v24 == 0)
      : (v26 = 1),
        v26))
  {
LABEL_15:
    v23 = 0;
  }
  else
  {
    v83 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v20 + 56, v21, &v85);
    ++v83[3];
    v23 = *v25;
  }
LABEL_16:
  v27 = *(int8x8_t **)v20;
  v91 = v23;
  *(_QWORD *)&v92 = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v88, v27, (uint64_t *)&v91, 0);
  v28 = *v12;
  if (*((_BYTE *)v88 + 8) == 5)
  {
    v30 = *a4;
    v29 = a4[1];
    v31 = *(_QWORD *)ecs2::Runtime::_localEntity();
    v32 = operator new(0x30uLL);
    *v32 = &off_1E427E4C0;
    v32[1] = v30;
    v32[2] = v29;
    v32[3] = v29;
    *((_WORD *)v32 + 16) = 1;
    v32[5] = v31;
    v93 = (uint64_t (***)())v32;
    v94 = 0;
    ecs2::Runtime::queueCommand(v28, (uint64_t)&v91);
    if (v94 != -1)
      ((void (*)(uint64_t (***)(), uint64_t (***)()))off_1E42FB340[v94])(&v85, &v91);
    v28 = *v12;
  }
  disconnectColorRampTextureHandles<ecs2::Runtime>(v28, *a5);
  if (*(_BYTE *)(ColorRampData + 32))
    *(_BYTE *)(ColorRampData + 32) = 0;
  *(_OWORD *)ColorRampData = 0u;
  *(_OWORD *)(ColorRampData + 16) = 0u;
  *(_BYTE *)(ColorRampData + 32) = 1;
  v33 = (std::__shared_weak_count *)v89;
  if ((_QWORD)v89)
  {
    v34 = (unint64_t *)(v89 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
LABEL_133:
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void disconnectColorRampTextureHandles<ecs2::Runtime>(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t ColorRampData;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  int v21;
  _QWORD *v22;
  __int128 __p;
  _QWORD *v24;
  __int128 *p_p;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)*a1;
  v5 = *(_QWORD **)(*a1 + 8);
  if (v4 != v5)
  {
    while (*v4 != 0x41D4E9297E100630)
    {
      v4 += 5;
      if (v4 == v5)
        goto LABEL_12;
    }
  }
  if (v4 == v5)
  {
LABEL_12:
    v6 = 0;
  }
  else
  {
    v6 = v4[3];
    v7 = (std::__shared_weak_count *)v4[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  ColorRampData = md::VKMRenderResourcesStore::getColorRampData(v6, a2);
  if (ColorRampData)
  {
    v12 = ColorRampData;
    if (*(_BYTE *)(ColorRampData + 32))
    {
      v13 = operator new(0x10uLL);
      v14 = v13;
      *(_OWORD *)v13 = *(_OWORD *)(v12 + 16);
      v15 = v13 + 2;
      if (!*v13 && !v13[1])
      {
        operator delete(v13);
        return;
      }
      v16 = gdc::Registry::create((gdc::Registry *)a1[1]);
      *(_QWORD *)&__p = v14;
      *((_QWORD *)&__p + 1) = v15;
      v24 = v15;
      ecs2::addComponent<md::ls::TexturesToDisconnect>(a1, v16, &__p);
      if ((_QWORD)__p)
        operator delete((void *)__p);
      v20[0] = &off_1E427E280;
      v20[1] = v16 << 32;
      v21 = HIDWORD(v16);
      v22 = v20;
      *(_QWORD *)&__p = &off_1E427E280;
      p_p = &__p;
      *((_QWORD *)&__p + 1) = v16 << 32;
      LODWORD(v24) = HIDWORD(v16);
      v26 = 0;
      ecs2::Runtime::queueCommand(a1, (uint64_t)&__p);
      if (v26 != -1)
        ((void (*)(char *, __int128 *))off_1E42FB340[v26])(&v19, &__p);
      v26 = -1;
      v17 = v22;
      if (v22 == v20)
      {
        v18 = 4;
        v17 = v20;
      }
      else
      {
        if (!v22)
          return;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
    }
  }
}

void sub_19F49913C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::~BuildingMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::BuildingMaterial<ggl::Texture2D>::~BuildingMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 192))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 192))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 504))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 504))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::saturationRemapRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 504))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 504))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 504))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 504))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 528))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 528))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::brightnessRemapRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 528))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 528))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 528))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 528))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceNoColorCorrection(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 600))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetNoColorCorrection(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 600))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::minNoColorCorrection@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 600))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 600))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::maxNoColorCorrection@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 600))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 600))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 624))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 624))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 624))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 648))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BuildingMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 648))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 648))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

void std::__shared_ptr_emplace<gms::BuildingMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::BuildingMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::BuildingMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::~PBRWithColorRampMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::PBRWithColorRampMaterial<ggl::Texture2D>::~PBRWithColorRampMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::normal@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::roughnessMetallic@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::roughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 120))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 120))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 120))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 120))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 120))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::metallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 144))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 144))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 144))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 144))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 144))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 168))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 168))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 168))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 168))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 192))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 192))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 216))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10))
    v8 = HIDWORD(v10);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 384))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 384))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 408))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 408))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 552))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 552))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 552))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 552))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 576))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 576))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 624))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 624))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 672))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 672))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 672))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 672))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 672))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 672))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 696))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 696))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 696))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 696))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 720))(*(_QWORD *)(a1 + 32));
}

void std::__shared_ptr_emplace<gms::PBRWithColorRampMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::PBRWithColorRampMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::PBRWithColorRampMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::~TriPlanarMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::TriPlanarMaterial<ggl::Texture2D>::~TriPlanarMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 192))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 192))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 216))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11))
    v8 = HIDWORD(v11);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10))
    v8 = HIDWORD(v10);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceTiling(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 288))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetTiling(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 288))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::tiling@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 288))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 288))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 288))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 288))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceOffset(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 312))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetOffset(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 312))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::offset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 312))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 312))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 312))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 312))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 384))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 384))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 552))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 552))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 552))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 552))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 576))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 576))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 648))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 648))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 648))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 696))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 696))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::TriPlanarMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 696))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 696))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

void std::__shared_ptr_emplace<gms::TriPlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::TriPlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::TriPlanarMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::~PlanarMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::PlanarMaterial<ggl::Texture2D>::~PlanarMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 192))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 192))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 216))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10))
    v8 = HIDWORD(v10);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceTiling(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 288))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetTiling(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 288))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::tiling@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 288))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 288))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 288))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 288))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceOffset(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 312))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetOffset(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 312))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::offset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  char v12[4];
  float32x2_t v13;
  char v14[4];
  float32x2_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 312))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 312))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 312))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 312))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x2_t *)(a2 + 4) = vmla_n_f32(v15, vsub_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x2_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 384))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 384))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 552))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 552))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 552))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 552))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 576))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 576))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 624))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 624))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 648))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 696))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 696))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 696))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 696))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

void std::__shared_ptr_emplace<gms::PlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E55A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::PlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E55A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::PlanarMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::~PBRMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::PBRMaterial<ggl::Texture2D>::~PBRMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::normal@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::roughnessMetallic@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::roughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 120))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 120))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 120))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 120))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 120))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::metallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 144))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 144))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 144))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 144))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 144))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 168))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 168))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 168))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 168))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 192))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 192))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 192))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 216))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11))
    v8 = HIDWORD(v11);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10))
    v8 = HIDWORD(v10);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 384))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 384))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 408))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 408))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 432))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 432))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::saturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 432))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 432))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 432))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 432))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 432))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 456))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 456))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::brightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 456))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 456))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 456))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 456))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 456))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 480))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 480))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minAcceptsOverlays@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 480))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxAcceptsOverlays@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 480))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 552))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 552))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float32x4_t v10;
  float v11;
  char v12[4];
  float32x4_t v13;
  char v14[4];
  float32x4_t v15;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 552))(v7, a3);
  }
  v11 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(char *__return_ptr, float))(*(_QWORD *)v9 + 552))(v14, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v12[0] = 0;
    if (v14[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v14[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 552))(v12, a3);
  if (v14[0])
  {
LABEL_9:
    if (v12[0])
    {
      *(_BYTE *)a2 = 1;
      *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v15, vsubq_f32(v13, v15), v11);
      return result;
    }
    v10 = v15;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v12[0])
    return result;
  v10 = v13;
LABEL_16:
  *(float32x4_t *)(a2 + 4) = v10;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 576))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 576))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 624))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 624))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 624))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 648))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 648))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 648))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 672))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 672))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 672))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 672))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 672))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 672))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 696))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 696))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::PBRMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 696))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 696))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 696))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 720))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 720))(*(_QWORD *)(a1 + 32));
}

void std::__shared_ptr_emplace<gms::PBRMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::PBRMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::PBRMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::~BasicMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::BasicMaterial<ggl::Texture2D>::~BasicMaterial(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 216))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10))
    v8 = HIDWORD(v10);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceLineWidth(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetLineWidth(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::lineWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 240))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 240))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 240))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 240))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minLineWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 240))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 240))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxLineWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 240))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 240))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSpecularity(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 336))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSpecularity(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 336))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minSpecularity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 336))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 336))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxSpecularity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 336))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 336))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceShininess(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 360))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetShininess(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 360))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minShininess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 360))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 360))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxShininess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 360))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 360))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 384))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 384))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 432))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 432))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::saturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 432))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 432))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 432))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 432))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 432))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 456))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 456))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::brightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 456))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 456))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 456))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 456))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 456))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 480))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 480))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minAcceptsOverlays@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 480))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxAcceptsOverlays@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 480))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 504))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 504))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 528))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 528))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 552))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 552))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 576))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 576))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 576))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 624))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 624))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 624))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 648))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 672))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 672))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 696))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 696))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceHotAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 744))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetHotAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 744))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceColdAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 768))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetColdAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceWetAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 792))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetWetAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 792))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceDryAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 816))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetDryAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 816))(*(_QWORD *)(a1 + 32));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSsaoIntensity(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 840))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSsaoIntensity(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 840))(*(_QWORD *)(a1 + 32));
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minSsaoIntensity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 840))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 840))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxSsaoIntensity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 840))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11)
      goto LABEL_4;
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_7;
LABEL_3:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 840))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v10)
    return result;
  v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(_BYTE *)a2 = 1;
  return result;
}

void std::__shared_ptr_emplace<gms::BasicMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::BasicMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::BasicMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 48))
      {
        v3 = *(std::__shared_weak_count **)(v2 + 40);
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsClimateTint>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::NeedsClimateTint>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x11BB47B172EB0B40;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x11BB47B172EB0B40;
      if (*(_QWORD *)&v3 <= 0x11BB47B172EB0B40uLL)
        v5 = 0x11BB47B172EB0B40uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x11BB47B172EB0B40;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x11BB47B172EB0B40)
            {
              if (v7[2] == 0x11BB47B172EB0B40)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x11BB47B172EB0B40)
          {
            if (v7[2] == 0x11BB47B172EB0B40)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NeedsClimateTint]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271BC8;
  *(_QWORD *)(v11 + 8) = 0x11BB47B172EB0B40;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x11BB47B172EB0B40uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x11BB47B172EB0B40;
  v15[1] = "md::ls::NeedsClimateTint]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x11BB47B172EB0B40, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A1770(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::addComponent<md::ls::TexturesToDisconnect>(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  char v8;
  _BYTE v9[24];
  char *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v5 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_1E427F438;
  *(_OWORD *)(v6 + 8) = v7;
  *((_QWORD *)v6 + 3) = v5;
  *((_QWORD *)v6 + 4) = a2;
  v10 = v6;
  v11 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v11])(&v8, v9);
}

void sub_19F4A19C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E280;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E280;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PendingDeletion>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v4, v3, &v5);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E427F438;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E427F438;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E427F438;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = (_BYTE *)a1[1];
  v3 = (_BYTE *)a1[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v2[4] = a1[4];
  return v2;
}

void sub_19F4A1BB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *a2 = &off_1E427F438;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    a2[1] = v7;
    a2[2] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a2[3] = v8;
    result = memcpy(v7, v5, v6);
    a2[2] = v8;
  }
  a2[4] = v3[4];
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD *i;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  v3 = a1[4];
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TexturesToDisconnect>(a2);
  v6 = (_BYTE *)a1[1];
  v5 = (_BYTE *)a1[2];
  v7 = v5 - v6;
  if (v5 == v6)
  {
    v9 = 0;
    v10 = 0uLL;
  }
  else
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    v9 = &v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v7);
    *(_QWORD *)&v10 = v8;
    *((_QWORD *)&v10 + 1) = v9;
  }
  v42 = v10;
  v43 = v3;
  v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v43);
  if ((v12 & 1) != 0)
  {
    v19 = (_QWORD *)v4[11];
    v18 = v4[12];
    if ((unint64_t)v19 >= v18)
    {
      v24 = (_QWORD *)v4[10];
      v25 = 0xAAAAAAAAAAAAAAABLL * (v19 - v24) + 1;
      if (v25 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v24) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v28 = (char *)operator new(24 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * (v19 - v24)];
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = 0;
      v30 = *((_QWORD *)&v42 + 1) - v42;
      if (*((_QWORD *)&v42 + 1) != (_QWORD)v42)
      {
        if (v30 < 0)
          abort();
        v31 = (char *)operator new(*((_QWORD *)&v42 + 1) - v42);
        *(_QWORD *)v29 = v31;
        *((_QWORD *)v29 + 1) = v31;
        v32 = &v31[8 * (v30 >> 3)];
        *((_QWORD *)v29 + 2) = v32;
        memcpy(v31, (const void *)v42, v30);
        *((_QWORD *)v29 + 1) = v32;
      }
      v33 = &v28[24 * v27];
      v23 = v29 + 24;
      if (v19 == v24)
      {
        v4[10] = (uint64_t)v29;
        v4[11] = (uint64_t)v23;
        v4[12] = (uint64_t)v33;
      }
      else
      {
        do
        {
          v34 = v29;
          *((_QWORD *)v29 - 2) = 0;
          *((_QWORD *)v29 - 1) = 0;
          v35 = *(_OWORD *)(v19 - 3);
          v19 -= 3;
          *(_OWORD *)(v29 - 24) = v35;
          v29 -= 24;
          *((_QWORD *)v34 - 1) = v19[2];
          *v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
        }
        while (v19 != v24);
        v19 = (_QWORD *)v4[10];
        v36 = (_QWORD *)v4[11];
        v4[10] = (uint64_t)v29;
        v4[11] = (uint64_t)v23;
        v4[12] = (uint64_t)v33;
        if (v36 != v19)
        {
          v37 = v36;
          do
          {
            v39 = (void *)*(v37 - 3);
            v37 -= 3;
            v38 = v39;
            if (v39)
            {
              *(v36 - 2) = v38;
              operator delete(v38);
            }
            v36 = v37;
          }
          while (v37 != v19);
        }
      }
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      v20 = *((_QWORD *)&v42 + 1) - v42;
      if (*((_QWORD *)&v42 + 1) != (_QWORD)v42)
      {
        if (v20 < 0)
          abort();
        v21 = (char *)operator new(*((_QWORD *)&v42 + 1) - v42);
        *v19 = v21;
        v19[1] = v21;
        v22 = &v21[8 * (v20 >> 3)];
        v19[2] = v22;
        memcpy(v21, (const void *)v42, v20);
        v19[1] = v22;
      }
      v23 = v19 + 3;
      v4[11] = (uint64_t)(v19 + 3);
    }
    v4[11] = (uint64_t)v23;
    v15 = v4[31];
  }
  else
  {
    v13 = v4[10] + 24 * (((uint64_t)v11 - v4[7]) >> 3);
    v14 = *(void **)v13;
    if (*(_QWORD *)v13)
    {
      *(_QWORD *)(v13 + 8) = v14;
      operator delete(v14);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
    }
    *(_OWORD *)v13 = v42;
    *(_QWORD *)(v13 + 16) = v9;
    v15 = v4[31];
    if (v13 != v4[11])
    {
      v16 = (_QWORD *)v4[16];
      if (v16)
      {
        while (1)
        {
          v45 = &v43;
          v46 = 1;
          v44 = v15;
          v17 = v16[6];
          if (!v17)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v44, &v45);
          v16 = (_QWORD *)*v16;
          if (!v16)
            goto LABEL_12;
        }
LABEL_49:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
LABEL_12:
      *(_QWORD *)&v42 = 0;
      goto LABEL_46;
    }
    *(_QWORD *)&v42 = 0;
  }
  for (i = (_QWORD *)v4[22]; i; i = (_QWORD *)*i)
  {
    v45 = &v43;
    v46 = 1;
    v44 = v15;
    v41 = i[6];
    if (!v41)
      goto LABEL_49;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v41 + 48))(v41, &v44, &v45);
  }
LABEL_46:
  if ((_QWORD)v42)
    operator delete((void *)v42);
}

void sub_19F4A201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v9;
  void *v10;

  operator delete(v10);
  if (v9)
    operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TexturesToDisconnect>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9A2CF0F3E5B1FB4ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9A2CF0F3E5B1FB4ELL;
      if (*(_QWORD *)&v3 <= 0x9A2CF0F3E5B1FB4ELL)
        v5 = 0x9A2CF0F3E5B1FB4ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9A2CF0F3E5B1FB4ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9A2CF0F3E5B1FB4ELL)
            {
              if (v7[2] == 0x9A2CF0F3E5B1FB4ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9A2CF0F3E5B1FB4ELL)
          {
            if (v7[2] == 0x9A2CF0F3E5B1FB4ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TexturesToDisconnect]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272768;
  *(_QWORD *)(v11 + 8) = 0x9A2CF0F3E5B1FB4ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9A2CF0F3E5B1FB4ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9A2CF0F3E5B1FB4ELL;
  v15[1] = "md::ls::TexturesToDisconnect]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9A2CF0F3E5B1FB4ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A2278(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TexturesToDisconnect>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TexturesToDisconnect>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char **v27;
  char *v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v40 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != v15 - 24)
  {
    v16 = *(char **)(v15 - 24);
    v17 = *(_BYTE **)(v15 - 16);
    v18 = v17 - v16;
    v19 = (v17 - v16) >> 3;
    v20 = *(_QWORD *)(v14 + 16);
    v21 = *(char **)v14;
    if (v19 > (v20 - *(_QWORD *)v14) >> 3)
    {
      if (v21)
      {
        *(_QWORD *)(v14 + 8) = v21;
        operator delete(v21);
        v20 = 0;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
      }
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_41;
      v22 = v20 >> 2;
      if (v20 >> 2 <= v19)
        v22 = (v17 - v16) >> 3;
      v23 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
      v24 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v23)
        v24 = v22;
      if (v24 >> 61)
        goto LABEL_41;
      v25 = 8 * v24;
      v26 = (char *)operator new(8 * v24);
      v21 = v26;
      *(_QWORD *)v14 = v26;
      *(_QWORD *)(v14 + 8) = v26;
      *(_QWORD *)(v14 + 16) = &v26[v25];
      if (v17 != v16)
        memcpy(v26, v16, v17 - v16);
      v27 = (char **)(v14 + 8);
      goto LABEL_32;
    }
    v29 = *(char **)(v14 + 8);
    v27 = (char **)(v14 + 8);
    v28 = v29;
    v30 = v29 - v21;
    v31 = (v29 - v21) >> 3;
    if (v31 >= v19)
    {
      if (v17 == v16)
      {
LABEL_32:
        *v27 = &v21[v18];
        v15 = a1[11];
        goto LABEL_33;
      }
      v33 = v21;
      v34 = v16;
    }
    else
    {
      v32 = &v16[8 * v31];
      if (v28 != v21)
      {
        memmove(v21, v16, v30);
        v21 = *v27;
      }
      v18 = v17 - v32;
      if (v17 == v32)
        goto LABEL_32;
      v33 = v21;
      v34 = v32;
    }
    memmove(v33, v34, v18);
    goto LABEL_32;
  }
LABEL_33:
  v36 = v15 - 24;
  v35 = *(void **)(v15 - 24);
  if (v35)
  {
    *(_QWORD *)(v15 - 16) = v35;
    operator delete(v35);
  }
  a1[11] = v36;
  v37 = (_QWORD *)a1[28];
  if (v37)
  {
    v38 = a1[31];
    while (1)
    {
      v42[0] = &v40;
      v42[1] = 1;
      v41 = v38;
      v39 = v37[6];
      if (!v39)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v39 + 48))(v39, &v41, v42);
      v37 = (_QWORD *)*v37;
      if (!v37)
        return 1;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_41:
    abort();
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::TexturesToDisconnect>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427E4C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427E4C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RampMaterialData>(a2);
  v24 = *(_OWORD *)(a1 + 8);
  v25 = *(_OWORD *)(a1 + 24);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)v4[10];
      v15 = (v12 - v14) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[32 * v15];
      *(_OWORD *)v20 = v24;
      *((_OWORD *)v20 + 1) = v25;
      v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          v21 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        v12 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[32 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      v13 = v12 + 32;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = (_OWORD *)(v4[10] + 4 * ((_QWORD)v5 - v4[7]));
    *v7 = v24;
    v7[1] = v25;
    v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)v4[22];
  if (v22)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v27, &v28);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::RampMaterialData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x741786E98487217CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x741786E98487217CLL;
      if (*(_QWORD *)&v3 <= 0x741786E98487217CuLL)
        v5 = 0x741786E98487217CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x741786E98487217CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x741786E98487217CLL)
            {
              if (v7[2] == 0x741786E98487217CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x741786E98487217CLL)
          {
            if (v7[2] == 0x741786E98487217CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RampMaterialData]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271C28;
  *(_QWORD *)(v11 + 8) = 0x741786E98487217CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x741786E98487217CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x741786E98487217CLL;
  v15[1] = "md::ls::RampMaterialData]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x741786E98487217CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A29B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_OWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 16);
  *v14 = *(_OWORD *)(v15 - 32);
  v14[1] = v16;
  a1[11] -= 32;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t ggl::crc32::compute<26ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  return ggl::crc32::crc32Table[v22 ^ a1[24]] ^ ~(v22 >> 8);
}

void ggl::ManeuverPoint::Mesh::~Mesh(ggl::ManeuverPoint::Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::ManeuverPoint::Mesh::~Mesh(ggl::ManeuverPoint::Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::ManeuverPoint::Mesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::ManeuverPoint::Mesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ManeuverPoint::BasePipelineSetup::~BasePipelineSetup(ggl::ManeuverPoint::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ManeuverPoint::BasePipelineSetup::constantDataIsEnabled(ggl::ManeuverPoint::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::ManeuverPoint::BasePipelineSetup::textureIsEnabled(ggl::ManeuverPoint::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::ManeuverPoint::BasePipelineSetup::BasePipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, (uint64_t)a3);
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, 0);
  }
  *(_QWORD *)a1 = &off_1E42B65E0;
  v15 = *(uint64_t **)(a1 + 64);
  v16 = *a4;
  v17 = a4[1];
  *v15 = *a4;
  v15[1] = 0;
  v18 = *(_QWORD **)(a1 + 160);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v18[1];
  *v18 = v16;
  v18[1] = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *a5;
  v26 = a5[1];
  *(_QWORD *)(v24 + 16) = *a5;
  *(_QWORD *)(v24 + 24) = 0;
  v27 = *(_QWORD *)(a1 + 160);
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  **(_QWORD **)(a1 + 96) = a6;
  return a1;
}

void altitude::DigitalGlobeProvider::~DigitalGlobeProvider(altitude::DigitalGlobeProvider *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::DigitalGlobeProvider::request(uint64_t a1, uint64_t a2, _QWORD *a3, char *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  char v19[24];

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  altitude::MapProvider::cacheLookup((altitude::MapProvider *)v19, *(const QuadTile **)(a1 + 16), *(_DWORD *)(a1 + 24), a4);
  v9 = operator new();
  v15 = *(_OWORD *)(a1 + 8);
  v10 = karo::Job::Job(v9, a2);
  *(_QWORD *)v10 = &off_1E42C3B58;
  *(_OWORD *)(v10 + 176) = v15;
  v11 = a3[1];
  *(_QWORD *)(v10 + 192) = *a3;
  *(_QWORD *)(v10 + 200) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(v9 + 208) = 0;
  *(_QWORD *)(v9 + 232) = 0;
  *(_QWORD *)(v9 + 240) = 0;
  *(_QWORD *)(v9 + 224) = 0;
  *(_QWORD *)(v9 + 216) = v9 + 224;
  *(_QWORD *)(v9 + 248) = 0;
  *(_QWORD *)(v9 + 256) = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  altitude::DigitalGlobeProvider::requestPatch(a1, v9, v19, (uint64_t **)&__p, a5);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return v9;
}

void altitude::DigitalGlobeProvider::requestFailed(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  void *__p;
  void *v32;
  char *v33;
  char v34[4];
  int v35;
  int v36;

  v5 = *(_BYTE *)(a4 + 1);
  if (v5)
  {
    v6 = a5;
    v7 = *(_DWORD *)(a4 + 4);
    v8 = *(_DWORD *)(a4 + 8);
    v9 = *(_BYTE *)a4;
    v34[0] = *(_BYTE *)a4;
    v34[1] = v5 - 1;
    v35 = v7 >> 1;
    v36 = v8 >> 1;
    __p = 0;
    v32 = 0;
    v33 = 0;
    v11 = *a3;
    v10 = a3[1];
    v12 = v10 - *a3;
    if (v10 == *a3)
    {
      v20 = 0;
      v18 = 0;
      v16 = 0;
    }
    else
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_23;
      v15 = (char *)operator new(v12);
      v16 = v15;
      v17 = 0;
      v18 = &v15[24 * v14];
      __p = v15;
      v33 = v18;
      do
      {
        v19 = &v15[v17];
        *(_WORD *)v19 = *(_WORD *)(v11 + v17);
        *(_QWORD *)(v19 + 4) = *(_QWORD *)(v11 + v17 + 4);
        v17 += 24;
      }
      while (v11 + v17 != v10);
      v20 = &v15[v17];
      v6 = a5;
      if (&v15[v17] < v18)
      {
        *v20 = v9;
        v20[1] = v5;
        i = v20 + 24;
        *((_DWORD *)v20 + 1) = v7;
        *((_DWORD *)v20 + 2) = v8;
LABEL_20:
        v32 = i;
        altitude::DigitalGlobeProvider::requestPatch(a1, a2, v34, (uint64_t **)&__p, v6);
        if (__p)
        {
          v32 = __p;
          operator delete(__p);
        }
        return;
      }
    }
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 3) + 1;
    if (v22 <= 0xAAAAAAAAAAAAAAALL)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      if (v24 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v25 = 24 * v24;
      v26 = (char *)operator new(24 * v24);
      v27 = &v26[8 * ((v20 - v16) >> 3)];
      *v27 = v9;
      v27[1] = v5;
      *((_DWORD *)v27 + 1) = v7;
      *((_DWORD *)v27 + 2) = v8;
      for (i = v27 + 24; v20 != v16; *(_QWORD *)(v27 + 4) = *(_QWORD *)(v20 + 4))
      {
        v28 = *((_WORD *)v20 - 12);
        v20 -= 24;
        *((_WORD *)v27 - 12) = v28;
        v27 -= 24;
      }
      __p = v27;
      v33 = &v26[v25];
      if (v16)
        operator delete(v16);
      goto LABEL_20;
    }
LABEL_23:
    abort();
  }
}

void altitude::DigitalGlobeProvider::requestPatch(uint64_t a1, uint64_t a2, char *a3, uint64_t **a4, int a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  char v38;
  int64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t **v57;
  unint64_t v58;
  uint64_t **v59;
  uint64_t **v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  __int128 *v65;
  __int128 *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int64_t v75;
  void **v76;
  char *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  _QWORD *v83;
  char *i;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  uint64_t **v96;
  int v97;
  char v98;
  unsigned __int8 v99;
  uint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  void (**v103)(karo::AsyncRequestManager::RequestHandle *__hidden);
  unint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  void *__p;
  void *v111;
  _OWORD *v112;
  char v113;

  altitude::MapProvider::cacheLookup((altitude::MapProvider *)&v98, *(const QuadTile **)(a1 + 16), *(_DWORD *)(a1 + 24), a3);
  v9 = *(_DWORD *)(a1 + 24);
  if (v9 == 16)
  {
    v10 = 33;
  }
  else if (v9 == 32)
  {
    v10 = 45;
  }
  else
  {
    v10 = 7;
  }
  v11 = v99;
  v12 = HIDWORD(v100);
  if (v9 == 32 || v9 == 64)
  {
    if (v99 >= 0x20u)
      v13 = v100;
    else
      v13 = (1 << v99) + ~(_DWORD)v100;
    v14 = (char *)operator new(0x20uLL);
    v15 = v14 + 32;
    *((_QWORD *)v14 + 1) = 0;
    *(_DWORD *)v14 = v10;
    *((_DWORD *)v14 + 1) = 0;
    *((_DWORD *)v14 + 4) = v11;
    *((_DWORD *)v14 + 5) = v13;
    *((_DWORD *)v14 + 6) = v12;
    *((_DWORD *)v14 + 7) = 0;
    v16 = *(_QWORD *)(a2 + 176);
    if (!v16)
      goto LABEL_48;
  }
  else
  {
    v95 = a5;
    v96 = a4;
    v17 = v99 + 1;
    v18 = 2 * HIDWORD(v100);
    if (v99 >= 0x1Fu)
      v19 = 2 * v100;
    else
      v19 = (2 << v99) + ~(2 * v100);
    v97 = v19;
    if (v99 >= 0x1Fu)
      v20 = (2 * v100) | 1;
    else
      v20 = (2 << v99) + ((2 * v100) ^ 0xFFFFFFFE);
    v21 = (char *)operator new(0x20uLL);
    *(_DWORD *)v21 = v10;
    *(_QWORD *)(v21 + 4) = 0;
    *((_DWORD *)v21 + 3) = 0;
    *((_DWORD *)v21 + 4) = v17;
    *((_DWORD *)v21 + 5) = v19;
    *((_DWORD *)v21 + 6) = v18;
    *((_DWORD *)v21 + 7) = 0;
    v22 = (char *)operator new(0x40uLL);
    *((_DWORD *)v22 + 8) = v10;
    *(_QWORD *)(v22 + 36) = 0;
    *((_DWORD *)v22 + 11) = 0;
    *((_DWORD *)v22 + 12) = v17;
    v93 = v20;
    *((_DWORD *)v22 + 13) = v20;
    *((_DWORD *)v22 + 14) = v18;
    *((_DWORD *)v22 + 15) = 0;
    v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v21;
    *((_OWORD *)v22 + 1) = v23;
    operator delete(v21);
    v24 = (char *)operator new(0x80uLL);
    v25 = v24;
    *((_DWORD *)v24 + 16) = v10;
    v26 = v24 + 128;
    *(_QWORD *)(v24 + 68) = 0;
    *((_DWORD *)v24 + 19) = 0;
    *((_DWORD *)v24 + 20) = v17;
    v94 = v17;
    v27 = (2 * v12) | 1;
    *((_DWORD *)v24 + 21) = v97;
    *((_DWORD *)v24 + 22) = v27;
    v28 = v24 + 96;
    v29 = -32;
    *((_DWORD *)v24 + 23) = 0;
    do
    {
      v30 = &v24[v29];
      v31 = *(_OWORD *)&v22[v29 + 80];
      *((_OWORD *)v30 + 4) = *(_OWORD *)&v22[v29 + 64];
      *((_OWORD *)v30 + 5) = v31;
      v29 -= 32;
    }
    while (v29 != -96);
    v14 = v24;
    operator delete(v22);
    if (v28 >= v26)
    {
      v32 = (v28 - v25) >> 5;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 59)
        goto LABEL_113;
      if ((v26 - v25) >> 4 > v33)
        v33 = (v26 - v14) >> 4;
      if ((unint64_t)(v26 - v25) >= 0x7FFFFFFFFFFFFFE0)
        v33 = 0x7FFFFFFFFFFFFFFLL;
      if (v33 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v34 = (char *)operator new(32 * v33) + 32 * v32;
      *((_QWORD *)v34 + 1) = 0;
      *(_DWORD *)v34 = v10;
      *((_DWORD *)v34 + 1) = 0;
      *((_DWORD *)v34 + 4) = v94;
      *((_DWORD *)v34 + 5) = v93;
      *((_DWORD *)v34 + 6) = v27;
      *((_DWORD *)v34 + 7) = 0;
      v15 = v34 + 32;
      if (v28 == v25)
      {
        a4 = v96;
      }
      else
      {
        v35 = (__int128 *)(v25 + 80);
        a4 = v96;
        do
        {
          v36 = *(v35 - 1);
          v37 = *v35;
          v35 -= 2;
          *((_OWORD *)v34 - 2) = v36;
          *((_OWORD *)v34 - 1) = v37;
          v34 -= 32;
          v29 += 32;
        }
        while (v29);
      }
      operator delete(v25);
      v14 = v34;
      a5 = v95;
      v16 = *(_QWORD *)(a2 + 176);
      if (!v16)
        goto LABEL_48;
    }
    else
    {
      *((_QWORD *)v28 + 1) = 0;
      *(_DWORD *)v28 = v10;
      *((_DWORD *)v28 + 1) = 0;
      a5 = v95;
      *((_DWORD *)v28 + 4) = v94;
      *((_DWORD *)v28 + 5) = v93;
      v15 = v28 + 32;
      *((_DWORD *)v28 + 6) = v27;
      *((_DWORD *)v28 + 7) = 0;
      a4 = v96;
      v16 = *(_QWORD *)(a2 + 176);
      if (!v16)
        goto LABEL_48;
    }
  }
  if (!*(_QWORD *)(a2 + 184))
  {
LABEL_48:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 152));
    *(_DWORD *)(a2 + 160) |= 1u;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 152));
    goto LABEL_112;
  }
  *(_DWORD *)(a2 + 208) = a5;
  v38 = *(_BYTE *)(*(_QWORD *)(a2 + 192) + 28);
  v106 = 0x200000005;
  v107 = v98;
  v108 = v11;
  v109 = v100;
  v111 = 0;
  v112 = 0;
  __p = 0;
  v39 = v15 - v14;
  if (v15 != v14)
  {
    if (v39 < 0)
      goto LABEL_113;
    v40 = v39 >> 5;
    v41 = operator new(v39);
    __p = v41;
    v112 = &v41[2 * v40];
    v42 = v14;
    do
    {
      v43 = *(_OWORD *)v42;
      v44 = *((_OWORD *)v42 + 1);
      v42 += 32;
      *v41 = v43;
      v41[1] = v44;
      v41 += 2;
    }
    while (v42 != v15);
    v111 = v41;
  }
  v113 = v38;
  v45 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 88);
  v46 = atomic_load((unsigned int *)(a2 + 16));
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(&v103, v16, &v106, v45, v46, 1, 1);
  v47 = v104;
  v48 = v105;
  if (v105)
  {
    p_shared_owners = (unint64_t *)&v105->__shared_owners_;
    do
      v50 = __ldxr(p_shared_owners);
    while (__stxr(v50 + 1, p_shared_owners));
    v102 = v48;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
  }
  else
  {
    v102 = 0;
  }
  v101 = v47;
  karo::Job::addBlockingSubJob((uint64_t *)a2, &v101, -1, 0);
  v52 = v102;
  if (v102)
  {
    v53 = (unint64_t *)&v102->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v56 = (uint64_t **)(a2 + 224);
  v55 = *(uint64_t **)(a2 + 224);
  if (v55)
  {
    while (1)
    {
      while (1)
      {
        v57 = (uint64_t **)v55;
        v58 = v55[4];
        if (v47 >= v58)
          break;
        v55 = *v57;
        v56 = v57;
        if (!*v57)
          goto LABEL_62;
      }
      if (v58 >= v47)
        break;
      v55 = v57[1];
      if (!v55)
      {
        v56 = v57 + 1;
        goto LABEL_62;
      }
    }
    v60 = v57;
  }
  else
  {
    v57 = (uint64_t **)(a2 + 224);
LABEL_62:
    v59 = (uint64_t **)operator new(0x48uLL);
    v60 = v59;
    v59[4] = (uint64_t *)v47;
    v59[5] = (uint64_t *)v48;
    if (v48)
    {
      v61 = (unint64_t *)&v48->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v59[6] = 0;
    v59[7] = 0;
    v59[8] = 0;
    *v59 = 0;
    v59[1] = 0;
    v59[2] = (uint64_t *)v57;
    *v56 = (uint64_t *)v59;
    v63 = **(_QWORD **)(a2 + 216);
    v64 = (uint64_t *)v59;
    if (v63)
    {
      *(_QWORD *)(a2 + 216) = v63;
      v64 = *v56;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 224), v64);
    ++*(_QWORD *)(a2 + 232);
  }
  if (v60 + 6 == a4)
    goto LABEL_97;
  v66 = (__int128 *)*a4;
  v65 = (__int128 *)a4[1];
  v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)*a4) >> 3);
  v68 = (uint64_t)v60[8];
  v69 = (char *)v60[6];
  if (0xAAAAAAAAAAAAAAABLL * ((v68 - (uint64_t)v69) >> 3) >= v67)
  {
    v78 = v60[7];
    v76 = (void **)(v60 + 7);
    v77 = (char *)v78;
    v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - v69) >> 3);
    if (v79 >= v67)
    {
      for (i = v69; v66 != v65; v66 = (__int128 *)((char *)v66 + 24))
      {
        v85 = *v66;
        *((_QWORD *)i + 2) = *((_QWORD *)v66 + 2);
        *(_OWORD *)i = v85;
        i += 24;
      }
      v75 = i - v69;
    }
    else
    {
      v80 = (uint64_t)v66 + 24 * v79;
      if (v77 != v69)
      {
        v81 = 24 * v79;
        do
        {
          v82 = *v66;
          *((_QWORD *)v69 + 2) = *((_QWORD *)v66 + 2);
          *(_OWORD *)v69 = v82;
          v69 += 24;
          v66 = (__int128 *)((char *)v66 + 24);
          v81 -= 24;
        }
        while (v81);
        v69 = (char *)*v76;
      }
      v83 = v69;
      if ((__int128 *)v80 != v65)
      {
        v83 = v69;
        do
        {
          *(_WORD *)v83 = *(_WORD *)v80;
          *(_QWORD *)((char *)v83 + 4) = *(_QWORD *)(v80 + 4);
          v80 += 24;
          v83 += 3;
        }
        while ((__int128 *)v80 != v65);
      }
      v75 = (char *)v83 - v69;
    }
    goto LABEL_96;
  }
  if (v69)
  {
    v60[7] = (uint64_t *)v69;
    operator delete(v69);
    v68 = 0;
    v60[6] = 0;
    v60[7] = 0;
    v60[8] = 0;
  }
  if (v67 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_113;
  v70 = 0xAAAAAAAAAAAAAAABLL * (v68 >> 3);
  v71 = 2 * v70;
  if (2 * v70 <= v67)
    v71 = v67;
  v72 = v70 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v71;
  if (v72 > 0xAAAAAAAAAAAAAAALL)
LABEL_113:
    abort();
  v73 = 24 * v72;
  v69 = (char *)operator new(24 * v72);
  v60[6] = (uint64_t *)v69;
  v60[8] = (uint64_t *)&v69[v73];
  v74 = v69;
  if (v66 != v65)
  {
    v74 = v69;
    do
    {
      *(_WORD *)v74 = *(_WORD *)v66;
      *(_QWORD *)((char *)v74 + 4) = *(_QWORD *)((char *)v66 + 4);
      v66 = (__int128 *)((char *)v66 + 24);
      v74 += 3;
    }
    while (v66 != v65);
  }
  v75 = (char *)v74 - v69;
  v76 = (void **)(v60 + 7);
LABEL_96:
  *v76 = &v69[v75];
LABEL_97:
  if (v48)
  {
    v86 = (unint64_t *)&v48->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v103 = &off_1E42C2D08;
  if (v104)
  {
    v88 = (unsigned int *)(v104 + 128);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
  }
  v90 = v105;
  if (v105)
  {
    v91 = (unint64_t *)&v105->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
LABEL_112:
  operator delete(v14);
}

void karo::graphics::NoCullCullingGraph::~NoCullCullingGraph(karo::graphics::NoCullCullingGraph *this)
{
  *(_QWORD *)this = off_1E42C37C0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 6));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E42C37C0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 6));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

void karo::graphics::NoCullCullingGraph::cull(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;

  v4 = *(_QWORD **)(a1 + 40);
  v5 = (_QWORD *)(a1 + 48);
  if (v4 != (_QWORD *)(a1 + 48))
  {
    v7 = *(_QWORD **)(a4 + 8);
    while (1)
    {
      v8 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v7 >= v8)
        break;
      *v7++ = v4[4];
LABEL_34:
      *(_QWORD *)(a4 + 8) = v7;
      v26 = (_QWORD *)v4[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v4[2];
          v28 = *v27 == (_QWORD)v4;
          v4 = v27;
        }
        while (!v28);
      }
      v4 = v27;
      if (v27 == v5)
        return;
    }
    v9 = *(_BYTE **)a4;
    v10 = (uint64_t)v7 - *(_QWORD *)a4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      abort();
    v13 = v8 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = v4[4];
    v17 = v16 + 1;
    if (v7 == (_QWORD *)v9)
    {
      v9 = v7;
    }
    else
    {
      v18 = (char *)(v7 - 1) - v9;
      if (v18 < 0x168)
      {
        v19 = v7;
        goto LABEL_29;
      }
      if (&v15[v10 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v15[v10 - 8])
      {
        v19 = v7;
        goto LABEL_29;
      }
      if ((_QWORD *)((char *)v7 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
      {
        v19 = v7;
        goto LABEL_29;
      }
      if ((unint64_t)((char *)v7 - v15 - v10) < 0x20)
      {
        v19 = v7;
        goto LABEL_29;
      }
      v20 = (v18 >> 3) + 1;
      v19 = &v7[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
      v21 = &v15[8 * v11 - 16];
      v22 = (__int128 *)(v7 - 2);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v16 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_29:
          v25 = *--v19;
          *--v16 = v25;
        }
        while (v19 != (_QWORD *)v9);
        v9 = *(_BYTE **)a4;
      }
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v17;
    *(_QWORD *)(a4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
    v7 = v17;
    goto LABEL_34;
  }
}

uint64_t *karo::graphics::NoCullCullingGraph::registerElement(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = result;
  v5 = (uint64_t **)(result + 6);
  v4 = (uint64_t *)result[6];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 6);
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = *(_QWORD *)v3[5];
    if (v9)
    {
      v3[5] = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[6], v10);
    ++v3[7];
  }
  return result;
}

void karo::graphics::NoCullCullingGraph::unregisterElement(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = a1 + 6;
  v3 = (uint64_t *)a1[6];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[5] == v5)
        a1[5] = v11;
      --a1[7];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void md::MapLabeler::~MapLabeler(md::MapLabeler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E428BAA8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E4291880;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E428BAA8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E4291880;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::crc32::compute<21ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  return ggl::crc32::crc32Table[v17 ^ a1[19]] ^ ~(v17 >> 8);
}

void ggl::SDFGlyph::DefaultPipelineState::~DefaultPipelineState(ggl::SDFGlyph::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SDFGlyph::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::SDFGlyph::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SDFGlyph::DefaultPipelineSetup::constantDataIsEnabled(ggl::SDFGlyph::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::SDFGlyph::DefaultPipelineSetup::textureIsEnabled(ggl::SDFGlyph::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::SDFGlyph::HaloPipelineState::~HaloPipelineState(ggl::SDFGlyph::HaloPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SDFGlyph::HaloPipelineSetup::~HaloPipelineSetup(ggl::SDFGlyph::HaloPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SDFGlyph::HaloPipelineSetup::constantDataIsEnabled(ggl::SDFGlyph::HaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::SDFGlyph::HaloPipelineSetup::textureIsEnabled(ggl::SDFGlyph::HaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::SDFGlyph::SuperSamplePipelineState::~SuperSamplePipelineState(ggl::SDFGlyph::SuperSamplePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SDFGlyph::SuperSamplePipelineSetup::~SuperSamplePipelineSetup(ggl::SDFGlyph::SuperSamplePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SDFGlyph::SuperSamplePipelineSetup::constantDataIsEnabled(ggl::SDFGlyph::SuperSamplePipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::SDFGlyph::SuperSamplePipelineSetup::textureIsEnabled(ggl::SDFGlyph::SuperSamplePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void md::ARDebugDrawMeshBoundsLogic::~ARDebugDrawMeshBoundsLogic(md::ARDebugDrawMeshBoundsLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARDebugDrawMeshBoundsContext]";
  v4[3] = 32;
  v4[4] = result;
  *v4 = &off_1E42B1400;
  v4[1] = 0x9BE0A35B5769E59FLL;
  *a2 = v4;
  return result;
}

void sub_19F4A48D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x9BE0A35B5769E59FLL && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARDebugDrawMeshBoundsLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  id v242;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v242 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v242, "arDebugDrawMeshFeatureBounds") & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 120);
    v3 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(v2);
    v4 = (_QWORD *)gdc::Registry::storage<arComponents::MeshComponent>(v2);
    v5 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v2);
    v6 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v2);
    v241 = a1;
    v7 = *(_QWORD *)(a1 + 120);
    v8 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(v7);
    v9 = (_QWORD *)gdc::Registry::storage<arComponents::MeshDataComponent>(v7);
    v240 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v7);
    v10 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v7);
    v11 = v5 + 4;
    v12 = v6 + 4;
    v14 = v3[7];
    v13 = v3[8];
    if (v4[8] - v4[7] >= (unint64_t)(v13 - v14))
      v15 = v3 + 4;
    else
      v15 = v4 + 4;
    if (v5[8] - v5[7] < v15[4] - v15[3])
      v15 = v5 + 4;
    if (v6[8] - v6[7] >= v15[4] - v15[3])
      v16 = v15;
    else
      v16 = v6 + 4;
    if (v3 + 4 == v16 && v14 != v13)
    {
      do
      {
        v24 = *(unsigned int *)(v14 + 4);
        v25 = v24 >> 7;
        v26 = v4[4];
        if (v24 >> 7 < (v4[5] - v26) >> 3)
        {
          v27 = *(_QWORD *)(v26 + 8 * v25);
          if (v27)
          {
            v28 = v24 & 0x7F;
            v29 = *(unsigned __int16 *)(v27 + 2 * v28);
            v31 = v4[7];
            v30 = v4[8];
            if (v29 < (v30 - v31) >> 3)
            {
              v32 = v31 + 8 * v29;
              if (v32 != v30 && *(_DWORD *)(v32 + 4) == (_DWORD)v24)
              {
                v34 = v5[4];
                if (v25 < (v5[5] - v34) >> 3)
                {
                  v35 = *(_QWORD *)(v34 + 8 * v25);
                  if (v35)
                  {
                    v36 = *(unsigned __int16 *)(v35 + 2 * v28);
                    v38 = v5[7];
                    v37 = v5[8];
                    if (v36 < (v37 - v38) >> 3)
                    {
                      v39 = v38 + 8 * v36;
                      if (v39 != v37 && *(_DWORD *)(v39 + 4) == (_DWORD)v24)
                      {
                        v41 = v6[4];
                        if (v25 < (v6[5] - v41) >> 3)
                        {
                          v42 = *(_QWORD *)(v41 + 8 * v25);
                          if (v42)
                          {
                            v43 = *(unsigned __int16 *)(v42 + 2 * v28);
                            v45 = v6[7];
                            v44 = v6[8];
                            if (v43 < (v44 - v45) >> 3)
                            {
                              v46 = v45 + 8 * v43;
                              if (v46 != v44 && *(_DWORD *)(v46 + 4) == (_DWORD)v24)
                              {
                                v233 = v12;
                                v236 = v10;
                                v231 = v11;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v14);
                                v11 = v231;
                                v12 = v233;
                                v10 = v236;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v14 += 8;
      }
      while (v14 != v13);
    }
    if (v4 + 4 == v16)
    {
      v72 = v4[7];
      v73 = v4[8];
      while (v72 != v73)
      {
        v74 = *(unsigned int *)(v72 + 4);
        v75 = v74 >> 7;
        v76 = v3[4];
        if (v74 >> 7 < (v3[5] - v76) >> 3)
        {
          v77 = *(_QWORD *)(v76 + 8 * v75);
          if (v77)
          {
            v78 = v74 & 0x7F;
            v79 = *(unsigned __int16 *)(v77 + 2 * v78);
            v81 = v3[7];
            v80 = v3[8];
            if (v79 < (v80 - v81) >> 3)
            {
              v82 = v81 + 8 * v79;
              if (v82 != v80 && *(_DWORD *)(v82 + 4) == (_DWORD)v74)
              {
                v84 = v5[4];
                if (v75 < (v5[5] - v84) >> 3)
                {
                  v85 = *(_QWORD *)(v84 + 8 * v75);
                  if (v85)
                  {
                    v86 = *(unsigned __int16 *)(v85 + 2 * v78);
                    v88 = v5[7];
                    v87 = v5[8];
                    if (v86 < (v87 - v88) >> 3)
                    {
                      v89 = v88 + 8 * v86;
                      if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v74)
                      {
                        v91 = v6[4];
                        if (v75 < (v6[5] - v91) >> 3)
                        {
                          v92 = *(_QWORD *)(v91 + 8 * v75);
                          if (v92)
                          {
                            v93 = *(unsigned __int16 *)(v92 + 2 * v78);
                            v95 = v6[7];
                            v94 = v6[8];
                            if (v93 < (v94 - v95) >> 3)
                            {
                              v96 = v95 + 8 * v93;
                              if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v74)
                              {
                                v234 = v12;
                                v238 = v10;
                                v232 = v11;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v72);
                                v11 = v232;
                                v12 = v234;
                                v10 = v238;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v72 += 8;
      }
    }
    if (v11 == v16)
    {
      v98 = v5[7];
      v99 = v5[8];
      while (v98 != v99)
      {
        v100 = *(unsigned int *)(v98 + 4);
        v101 = v100 >> 7;
        v102 = v3[4];
        if (v100 >> 7 < (v3[5] - v102) >> 3)
        {
          v103 = *(_QWORD *)(v102 + 8 * v101);
          if (v103)
          {
            v104 = v100 & 0x7F;
            v105 = *(unsigned __int16 *)(v103 + 2 * v104);
            v107 = v3[7];
            v106 = v3[8];
            if (v105 < (v106 - v107) >> 3)
            {
              v108 = v107 + 8 * v105;
              if (v108 != v106 && *(_DWORD *)(v108 + 4) == (_DWORD)v100)
              {
                v110 = v4[4];
                if (v101 < (v4[5] - v110) >> 3)
                {
                  v111 = *(_QWORD *)(v110 + 8 * v101);
                  if (v111)
                  {
                    v112 = *(unsigned __int16 *)(v111 + 2 * v104);
                    v114 = v4[7];
                    v113 = v4[8];
                    if (v112 < (v113 - v114) >> 3)
                    {
                      v115 = v114 + 8 * v112;
                      if (v115 != v113 && *(_DWORD *)(v115 + 4) == (_DWORD)v100)
                      {
                        v117 = v6[4];
                        if (v101 < (v6[5] - v117) >> 3)
                        {
                          v118 = *(_QWORD *)(v117 + 8 * v101);
                          if (v118)
                          {
                            v119 = *(unsigned __int16 *)(v118 + 2 * v104);
                            v121 = v6[7];
                            v120 = v6[8];
                            if (v119 < (v120 - v121) >> 3)
                            {
                              v122 = v121 + 8 * v119;
                              if (v122 != v120 && *(_DWORD *)(v122 + 4) == (_DWORD)v100)
                              {
                                v235 = v12;
                                v239 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v98);
                                v12 = v235;
                                v10 = v239;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v98 += 8;
      }
    }
    if (v12 == v16)
    {
      v124 = v6[7];
      v125 = v6[8];
      while (v124 != v125)
      {
        v126 = *(unsigned int *)(v124 + 4);
        v127 = v126 >> 7;
        v128 = v3[4];
        if (v126 >> 7 < (v3[5] - v128) >> 3)
        {
          v129 = *(_QWORD *)(v128 + 8 * v127);
          if (v129)
          {
            v130 = v126 & 0x7F;
            v131 = *(unsigned __int16 *)(v129 + 2 * v130);
            v133 = v3[7];
            v132 = v3[8];
            if (v131 < (v132 - v133) >> 3)
            {
              v134 = v133 + 8 * v131;
              if (v134 != v132 && *(_DWORD *)(v134 + 4) == (_DWORD)v126)
              {
                v136 = v4[4];
                if (v127 < (v4[5] - v136) >> 3)
                {
                  v137 = *(_QWORD *)(v136 + 8 * v127);
                  if (v137)
                  {
                    v138 = *(unsigned __int16 *)(v137 + 2 * v130);
                    v140 = v4[7];
                    v139 = v4[8];
                    if (v138 < (v139 - v140) >> 3)
                    {
                      v141 = v140 + 8 * v138;
                      if (v141 != v139 && *(_DWORD *)(v141 + 4) == (_DWORD)v126)
                      {
                        v143 = v5[4];
                        if (v127 < (v5[5] - v143) >> 3)
                        {
                          v144 = *(_QWORD *)(v143 + 8 * v127);
                          if (v144)
                          {
                            v145 = *(unsigned __int16 *)(v144 + 2 * v130);
                            v147 = v5[7];
                            v146 = v5[8];
                            if (v145 < (v146 - v147) >> 3)
                            {
                              v148 = v147 + 8 * v145;
                              if (v148 != v146 && *(_DWORD *)(v148 + 4) == (_DWORD)v126)
                              {
                                v150 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v124);
                                v10 = v150;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v124 += 8;
      }
    }
    v18 = v10 + 4;
    v20 = v8[7];
    v19 = v8[8];
    if (v9[8] - v9[7] >= (unint64_t)(v19 - v20))
      v21 = v8 + 4;
    else
      v21 = v9 + 4;
    if (v240[8] - v240[7] < v21[4] - v21[3])
      v21 = v240 + 4;
    if (v10[8] - v10[7] >= v21[4] - v21[3])
      v22 = v21;
    else
      v22 = v10 + 4;
    if (v8 + 4 == v22 && v20 != v19)
    {
      do
      {
        v48 = *(unsigned int *)(v20 + 4);
        v49 = v48 >> 7;
        v50 = v9[4];
        if (v48 >> 7 < (v9[5] - v50) >> 3)
        {
          v51 = *(_QWORD *)(v50 + 8 * v49);
          if (v51)
          {
            v52 = v48 & 0x7F;
            v53 = *(unsigned __int16 *)(v51 + 2 * v52);
            v55 = v9[7];
            v54 = v9[8];
            if (v53 < (v54 - v55) >> 3)
            {
              v56 = v55 + 8 * v53;
              if (v56 != v54 && *(_DWORD *)(v56 + 4) == (_DWORD)v48)
              {
                v58 = v240[4];
                if (v49 < (v240[5] - v58) >> 3)
                {
                  v59 = *(_QWORD *)(v58 + 8 * v49);
                  if (v59)
                  {
                    v60 = *(unsigned __int16 *)(v59 + 2 * v52);
                    v62 = v240[7];
                    v61 = v240[8];
                    if (v60 < (v61 - v62) >> 3)
                    {
                      v63 = v62 + 8 * v60;
                      if (v63 != v61 && *(_DWORD *)(v63 + 4) == (_DWORD)v48)
                      {
                        v65 = v10[4];
                        if (v49 < (v10[5] - v65) >> 3)
                        {
                          v66 = *(_QWORD *)(v65 + 8 * v49);
                          if (v66)
                          {
                            v67 = *(unsigned __int16 *)(v66 + 2 * v52);
                            v69 = v10[7];
                            v68 = v10[8];
                            if (v67 < (v68 - v69) >> 3)
                            {
                              v70 = v69 + 8 * v67;
                              if (v70 != v68 && *(_DWORD *)(v70 + 4) == (_DWORD)v48)
                              {
                                v237 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v20);
                                v10 = v237;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v20 += 8;
      }
      while (v20 != v19);
    }
    if (v9 + 4 == v22)
    {
      v151 = v9[7];
      v152 = v9[8];
      while (v151 != v152)
      {
        v153 = *(unsigned int *)(v151 + 4);
        v154 = v153 >> 7;
        v155 = v8[4];
        if (v153 >> 7 < (v8[5] - v155) >> 3)
        {
          v156 = *(_QWORD *)(v155 + 8 * v154);
          if (v156)
          {
            v157 = v153 & 0x7F;
            v158 = *(unsigned __int16 *)(v156 + 2 * v157);
            v160 = v8[7];
            v159 = v8[8];
            if (v158 < (v159 - v160) >> 3)
            {
              v161 = v160 + 8 * v158;
              if (v161 != v159 && *(_DWORD *)(v161 + 4) == (_DWORD)v153)
              {
                v163 = v240[4];
                if (v154 < (v240[5] - v163) >> 3)
                {
                  v164 = *(_QWORD *)(v163 + 8 * v154);
                  if (v164)
                  {
                    v165 = *(unsigned __int16 *)(v164 + 2 * v157);
                    v167 = v240[7];
                    v166 = v240[8];
                    if (v165 < (v166 - v167) >> 3)
                    {
                      v168 = v167 + 8 * v165;
                      if (v168 != v166 && *(_DWORD *)(v168 + 4) == (_DWORD)v153)
                      {
                        v170 = v10[4];
                        if (v154 < (v10[5] - v170) >> 3)
                        {
                          v171 = *(_QWORD *)(v170 + 8 * v154);
                          if (v171)
                          {
                            v172 = *(unsigned __int16 *)(v171 + 2 * v157);
                            v174 = v10[7];
                            v173 = v10[8];
                            if (v172 < (v173 - v174) >> 3)
                            {
                              v175 = v174 + 8 * v172;
                              if (v175 != v173 && *(_DWORD *)(v175 + 4) == (_DWORD)v153)
                              {
                                v177 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v151);
                                v10 = v177;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v151 += 8;
      }
    }
    if (v240 + 4 == v22)
    {
      v178 = v240[7];
      v179 = v240[8];
      while (v178 != v179)
      {
        v180 = *(unsigned int *)(v178 + 4);
        v181 = v180 >> 7;
        v182 = v8[4];
        if (v180 >> 7 < (v8[5] - v182) >> 3)
        {
          v183 = *(_QWORD *)(v182 + 8 * v181);
          if (v183)
          {
            v184 = v180 & 0x7F;
            v185 = *(unsigned __int16 *)(v183 + 2 * v184);
            v187 = v8[7];
            v186 = v8[8];
            if (v185 < (v186 - v187) >> 3)
            {
              v188 = v187 + 8 * v185;
              if (v188 != v186 && *(_DWORD *)(v188 + 4) == (_DWORD)v180)
              {
                v190 = v9[4];
                if (v181 < (v9[5] - v190) >> 3)
                {
                  v191 = *(_QWORD *)(v190 + 8 * v181);
                  if (v191)
                  {
                    v192 = *(unsigned __int16 *)(v191 + 2 * v184);
                    v194 = v9[7];
                    v193 = v9[8];
                    if (v192 < (v193 - v194) >> 3)
                    {
                      v195 = v194 + 8 * v192;
                      if (v195 != v193 && *(_DWORD *)(v195 + 4) == (_DWORD)v180)
                      {
                        v197 = v10[4];
                        if (v181 < (v10[5] - v197) >> 3)
                        {
                          v198 = *(_QWORD *)(v197 + 8 * v181);
                          if (v198)
                          {
                            v199 = *(unsigned __int16 *)(v198 + 2 * v184);
                            v201 = v10[7];
                            v200 = v10[8];
                            if (v199 < (v200 - v201) >> 3)
                            {
                              v202 = v201 + 8 * v199;
                              if (v202 != v200 && *(_DWORD *)(v202 + 4) == (_DWORD)v180)
                              {
                                v204 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v178);
                                v10 = v204;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v178 += 8;
      }
    }
    if (v18 == v22)
    {
      v205 = v10[7];
      v206 = v10[8];
      while (v205 != v206)
      {
        v207 = *(unsigned int *)(v205 + 4);
        v208 = v207 >> 7;
        v209 = v8[4];
        if (v207 >> 7 < (v8[5] - v209) >> 3)
        {
          v210 = *(_QWORD *)(v209 + 8 * v208);
          if (v210)
          {
            v211 = v207 & 0x7F;
            v212 = *(unsigned __int16 *)(v210 + 2 * v211);
            v214 = v8[7];
            v213 = v8[8];
            if (v212 < (v213 - v214) >> 3)
            {
              v215 = v214 + 8 * v212;
              if (v215 != v213 && *(_DWORD *)(v215 + 4) == (_DWORD)v207)
              {
                v217 = v9[4];
                if (v208 < (v9[5] - v217) >> 3)
                {
                  v218 = *(_QWORD *)(v217 + 8 * v208);
                  if (v218)
                  {
                    v219 = *(unsigned __int16 *)(v218 + 2 * v211);
                    v221 = v9[7];
                    v220 = v9[8];
                    if (v219 < (v220 - v221) >> 3)
                    {
                      v222 = v221 + 8 * v219;
                      if (v222 != v220 && *(_DWORD *)(v222 + 4) == (_DWORD)v207)
                      {
                        v224 = v240[4];
                        if (v208 < (v240[5] - v224) >> 3)
                        {
                          v225 = *(_QWORD *)(v224 + 8 * v208);
                          if (v225)
                          {
                            v226 = *(unsigned __int16 *)(v225 + 2 * v211);
                            v228 = v240[7];
                            v227 = v240[8];
                            if (v226 < (v227 - v228) >> 3)
                            {
                              v229 = v228 + 8 * v226;
                              if (v229 != v227 && *(_DWORD *)(v229 + 4) == (_DWORD)v207)
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(_QWORD *)v205);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v205 += 8;
      }
    }
  }

}

void sub_19F4A5414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::IsVisible>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x55CAA77C36360ED8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x55CAA77C36360ED8;
      if (*(_QWORD *)&v3 <= 0x55CAA77C36360ED8uLL)
        v5 = 0x55CAA77C36360ED8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x55CAA77C36360ED8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x55CAA77C36360ED8)
            {
              if (v7[2] == 0x55CAA77C36360ED8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x55CAA77C36360ED8)
          {
            if (v7[2] == 0x55CAA77C36360ED8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::IsVisible]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2928;
  *(_QWORD *)(v11 + 8) = 0x55CAA77C36360ED8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x55CAA77C36360ED8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x55CAA77C36360ED8;
  v15[1] = "arComponents::IsVisible]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x55CAA77C36360ED8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A5720(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MeshComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x18B420914FEF5BA6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x18B420914FEF5BA6;
      if (*(_QWORD *)&v3 <= 0x18B420914FEF5BA6uLL)
        v5 = 0x18B420914FEF5BA6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x18B420914FEF5BA6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x18B420914FEF5BA6)
            {
              if (v7[2] == 0x18B420914FEF5BA6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x18B420914FEF5BA6)
          {
            if (v7[2] == 0x18B420914FEF5BA6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::MeshComponent]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1968;
  *(_QWORD *)(v11 + 8) = 0x18B420914FEF5BA6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x18B420914FEF5BA6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x18B420914FEF5BA6;
  v15[1] = "arComponents::MeshComponent]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0x18B420914FEF5BA6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A5948(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Boundary>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7130F622D05EDC68;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7130F622D05EDC68;
      if (*(_QWORD *)&v3 <= 0x7130F622D05EDC68uLL)
        v5 = 0x7130F622D05EDC68uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7130F622D05EDC68;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7130F622D05EDC68)
            {
              if (v7[2] == 0x7130F622D05EDC68)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7130F622D05EDC68)
          {
            if (v7[2] == 0x7130F622D05EDC68)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Boundary]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2808;
  *(_QWORD *)(v11 + 8) = 0x7130F622D05EDC68;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7130F622D05EDC68uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7130F622D05EDC68;
  v15[1] = "arComponents::Boundary]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7130F622D05EDC68, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A5B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::WorldTransform>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3A6FAD8338D694D6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3A6FAD8338D694D6;
      if (*(_QWORD *)&v3 <= 0x3A6FAD8338D694D6uLL)
        v5 = 0x3A6FAD8338D694D6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3A6FAD8338D694D6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3A6FAD8338D694D6)
            {
              if (v7[2] == 0x3A6FAD8338D694D6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3A6FAD8338D694D6)
          {
            if (v7[2] == 0x3A6FAD8338D694D6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::WorldTransform]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1AE8;
  *(_QWORD *)(v11 + 8) = 0x3A6FAD8338D694D6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3A6FAD8338D694D6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3A6FAD8338D694D6;
  v15[1] = "arComponents::WorldTransform]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3A6FAD8338D694D6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A5D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MeshDataComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF1DF98F0053592CELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF1DF98F0053592CELL;
      if (*(_QWORD *)&v3 <= 0xF1DF98F0053592CELL)
        v5 = 0xF1DF98F0053592CELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF1DF98F0053592CELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF1DF98F0053592CELL)
            {
              if (v7[2] == 0xF1DF98F0053592CELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF1DF98F0053592CELL)
          {
            if (v7[2] == 0xF1DF98F0053592CELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::MeshDataComponent]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1C68;
  *(_QWORD *)(v11 + 8) = 0xF1DF98F0053592CELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF1DF98F0053592CELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF1DF98F0053592CELL;
  v15[1] = "arComponents::MeshDataComponent]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF1DF98F0053592CELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A5FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  uint64_t *v28;
  __int16 v29;
  int v30;

  v4 = HIDWORD(a2);
  v5 = (_QWORD *)gdc::Registry::storage<arComponents::ShadowPipeline>(*(_QWORD *)(a1 + 120));
  v6 = a2 >> 39;
  v7 = v5[4];
  if (a2 >> 39 >= (v5[5] - v7) >> 3 || (v8 = *(_QWORD *)(v7 + 8 * v6)) == 0)
  {
    v11 = v5[8];
    goto LABEL_8;
  }
  v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
  v10 = v5[7];
  v11 = v5[8];
  if (v9 >= (v11 - v10) >> 3)
  {
LABEL_8:
    v13 = v11;
    goto LABEL_9;
  }
  v12 = v10 + 8 * v9;
  if (*(_DWORD *)(v12 + 4) == (_DWORD)v4)
    v13 = v12;
  else
    v13 = v5[8];
LABEL_9:
  v14 = (_QWORD *)gdc::Registry::storage<arComponents::StandardPipeline>(*(_QWORD *)(a1 + 120));
  v15 = v14[4];
  if (v6 >= (v14[5] - v15) >> 3 || (v16 = *(_QWORD *)(v15 + 8 * v6)) == 0)
  {
    v18 = v14[8];
    goto LABEL_16;
  }
  v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(a2) & 0x7F));
  v19 = v14[7];
  v18 = v14[8];
  if (v17 >= (v18 - v19) >> 3)
  {
LABEL_16:
    v20 = v18;
    goto LABEL_17;
  }
  v20 = v19 + 8 * v17;
  if (*(_DWORD *)(v20 + 4) != (_DWORD)v4)
    v20 = v14[8];
LABEL_17:
  if (v13 == v11)
    v21 = 65280;
  else
    v21 = 0;
  v22 = v20 == v18;
  v23 = *(_QWORD *)(a1 + 120);
  v29 = 256;
  v24 = v22 || v13 != v11;
  if (v13 == v11 && v22)
    v25 = -65536;
  else
    v25 = -16777216;
  v26 = v25 | v21;
  if (v24)
    v27 = 255;
  else
    v27 = 0;
  v30 = v26 | v27;
  v28 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v23);
  gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(v28, a2, (uint64_t)&v29);
}

uint64_t gdc::Registry::storage<arComponents::ShadowPipeline>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA3C8162527B8C964;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA3C8162527B8C964;
      if (*(_QWORD *)&v3 <= 0xA3C8162527B8C964)
        v5 = 0xA3C8162527B8C964 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA3C8162527B8C964;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA3C8162527B8C964)
            {
              if (v7[2] == 0xA3C8162527B8C964)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA3C8162527B8C964)
          {
            if (v7[2] == 0xA3C8162527B8C964)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::ShadowPipeline]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1A88;
  *(_QWORD *)(v11 + 8) = 0xA3C8162527B8C964;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA3C8162527B8C964, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA3C8162527B8C964;
  v15[1] = "arComponents::ShadowPipeline]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA3C8162527B8C964, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A6334(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::StandardPipeline>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5BD3262791F15BBDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5BD3262791F15BBDLL;
      if (*(_QWORD *)&v3 <= 0x5BD3262791F15BBDuLL)
        v5 = 0x5BD3262791F15BBDuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5BD3262791F15BBDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5BD3262791F15BBDLL)
            {
              if (v7[2] == 0x5BD3262791F15BBDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5BD3262791F15BBDLL)
          {
            if (v7[2] == 0x5BD3262791F15BBDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::StandardPipeline]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1C08;
  *(_QWORD *)(v11 + 8) = 0x5BD3262791F15BBDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5BD3262791F15BBDuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5BD3262791F15BBDLL;
  v15[1] = "arComponents::StandardPipeline]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5BD3262791F15BBDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A655C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::NeedsDebugDraw>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9B24ADCC720E2B64;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9B24ADCC720E2B64;
      if (*(_QWORD *)&v3 <= 0x9B24ADCC720E2B64)
        v5 = 0x9B24ADCC720E2B64 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9B24ADCC720E2B64;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9B24ADCC720E2B64)
            {
              if (v7[2] == 0x9B24ADCC720E2B64)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9B24ADCC720E2B64)
          {
            if (v7[2] == 0x9B24ADCC720E2B64)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::NeedsDebugDraw]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1A58;
  *(_QWORD *)(v11 + 8) = 0x9B24ADCC720E2B64;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9B24ADCC720E2B64, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9B24ADCC720E2B64;
  v15[1] = "arComponents::NeedsDebugDraw]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9B24ADCC720E2B64, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4A6784(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  uint64_t i;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v24 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v24);
  if ((v6 & 1) != 0)
  {
    v12 = (_WORD *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_BYTE *)a1[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v14) >> 1) + 1;
      if (v15 > 0x2AAAAAAAAAAAAAAALL)
        goto LABEL_26;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 1);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x1555555555555555)
        v17 = 0x2AAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17 > 0x2AAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = 6 * v17;
      v19 = (char *)operator new(6 * v17);
      v20 = &v19[2 * (((char *)v12 - v14) >> 1)];
      *(_WORD *)v20 = *(_WORD *)a3;
      *(_DWORD *)(v20 + 2) = *(_DWORD *)(a3 + 2);
      for (i = (uint64_t)(v20 + 6); v12 != (_WORD *)v14; *(_DWORD *)(v20 + 2) = *(_DWORD *)(v12 + 1))
      {
        v21 = *(v12 - 3);
        v12 -= 3;
        *((_WORD *)v20 - 3) = v21;
        v20 -= 6;
      }
      a1[10] = (uint64_t)v20;
      a1[11] = i;
      a1[12] = (uint64_t)&v19[v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v12 = *(_WORD *)a3;
      *(_DWORD *)(v12 + 1) = *(_DWORD *)(a3 + 2);
      i = (uint64_t)(v12 + 3);
    }
    a1[11] = i;
    v8 = a1[31];
  }
  else
  {
    v7 = a1[10] + 6 * (((uint64_t)v5 - a1[7]) >> 3);
    *(_WORD *)v7 = *(_WORD *)a3;
    *(_BYTE *)(v7 + 2) = *(_BYTE *)(a3 + 2);
    *(_BYTE *)(v7 + 3) = *(_BYTE *)(a3 + 3);
    *(_BYTE *)(v7 + 4) = *(_BYTE *)(a3 + 4);
    *(_BYTE *)(v7 + 5) = *(_BYTE *)(a3 + 5);
    v8 = a1[31];
    if (v7 != a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v26 = &v24;
          v27 = 1;
          v25 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v25, &v26);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_25:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)a1[22];
  if (v22)
  {
    while (1)
    {
      v26 = &v24;
      v27 = 1;
      v25 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v25, &v26);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_25;
  }
}

void gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 6 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)v14 = *(_WORD *)(v15 - 6);
  *(_BYTE *)(v14 + 2) = *(_BYTE *)(v15 - 4);
  *(_BYTE *)(v14 + 3) = *(_BYTE *)(v15 - 3);
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 - 2);
  *(_BYTE *)(v14 + 5) = *(_BYTE *)(v15 - 1);
  a1[11] -= 6;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::WorldTransform>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::WorldTransform>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 80 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v14[3] = *(v15 - 7);
  v14[4] = *(v15 - 6);
  v14[5] = *(v15 - 5);
  v14[6] = *(v15 - 4);
  v16 = *(v15 - 10);
  v15 -= 10;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::WorldTransform>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::WorldTransform>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::Boundary>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Boundary>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Boundary>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Boundary>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::MeshComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::MeshComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v32 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v17 = *(_QWORD *)(v15 - 16);
  v16 = *(_QWORD *)(v15 - 8);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)v14[1];
  *v14 = v17;
  v14[1] = v16;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[11];
  v24 = *(std::__shared_weak_count **)(v23 - 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  a1[11] = v23 - 16;
  v27 = (_QWORD *)a1[28];
  if (!v27)
    return 1;
  v28 = a1[31];
  while (1)
  {
    v34[0] = &v32;
    v34[1] = 1;
    v33 = v28;
    v29 = v27[6];
    if (!v29)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v29 + 48))(v29, &v33, v34);
    v27 = (_QWORD *)*v27;
    if (!v27)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MeshComponent>::contains(v30, v31);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::IsVisible>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::IsVisible>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::IsVisible>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::ARDebugDrawMeshBoundsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1400;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARDebugDrawMeshBoundsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1400;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARDebugDrawMeshBoundsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::RouteLineSharedResources::~RouteLineSharedResources(md::RouteLineSharedResources *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  v2 = (_QWORD *)*((_QWORD *)this + 34);
  if (v2)
  {
    while (1)
    {
      v17 = (_QWORD *)*v2;
      v18 = (std::__shared_weak_count *)v2[9];
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
          break;
      }
      v21 = v2[2];
      if (v21)
        goto LABEL_32;
LABEL_26:
      operator delete(v2);
      v2 = v17;
      if (!v17)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = v2[2];
    if (!v21)
      goto LABEL_26;
LABEL_32:
    v2[3] = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v21, v2[4] - v21);
    goto LABEL_26;
  }
LABEL_2:
  v3 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v7)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v7 + 104));
    v8 = *(std::__shared_weak_count **)(v7 + 8);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MEMORY[0x1A1AF4E00](v7, 0x1020C40AD78EA61);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
LABEL_21:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v14)
      goto LABEL_36;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_36:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v22)
    goto LABEL_40;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v25)
      goto LABEL_46;
  }
  else
  {
LABEL_40:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v25)
      goto LABEL_46;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_46:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v28)
    goto LABEL_50;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v31)
      goto LABEL_56;
  }
  else
  {
LABEL_50:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v31)
      goto LABEL_56;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_56:
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  md::RouteLineSharedRenderStates::~RouteLineSharedRenderStates(this);
}

void std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

md::RouteLineSharedResources **std::unique_ptr<md::RouteLineSharedResources>::~unique_ptr[abi:nn180100](md::RouteLineSharedResources **a1)
{
  md::RouteLineSharedResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::RouteLineSharedResources::~RouteLineSharedResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::CRouteRenderResources::~CRouteRenderResources(md::CRouteRenderResources *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  md::RouteLineSharedResources *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v6);
  v7 = (md::RouteLineSharedResources *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    md::RouteLineSharedResources::~RouteLineSharedResources(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C4049ECCB0CLL);
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v9)
    MEMORY[0x1A1AF4E00](v9, 0x1000C4049ECCB0CLL);
}

void md::RouteLayoutInfo::~RouteLayoutInfo(md::RouteLayoutInfo *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (char *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
LABEL_9:
    v8 = (char *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_20;
  }
  v9 = (char *)*((_QWORD *)this + 4);
  v10 = v8;
  if (v9 != v8)
  {
    do
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 -= 16;
    }
    while (v9 != v8);
    v10 = (char *)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v8;
  operator delete(v10);
LABEL_20:
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v15 = *((_QWORD *)this + 1);
    v16 = *(void **)this;
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v14;
    operator delete(v16);
  }
}

void md::AssetLogic::~AssetLogic(md::AssetLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428B9C8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428B9C8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x88B81689974D86F3 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x12B1E486D3040E2CLL;
    if (*(_QWORD *)&v5 <= 0x12B1E486D3040E2CuLL)
      v7 = 0x12B1E486D3040E2CuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x12B1E486D3040E2CLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x12B1E486D3040E2CLL)
      {
        if (v9[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x12B1E486D3040E2CLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x12B1E486D3040E2CLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x12B1E486D3040E2CLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_0::operator()(int8x8_t **a1, unint64_t a2, unsigned __int16 *a3)
{
  float v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int32x4_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  int8x8_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  NSObject *v88;
  BOOL v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  unsigned __int16 **v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int16 *v97;
  unsigned __int16 *v98;
  uint64_t *v99;
  unsigned int v100;
  uint64_t **v101;
  uint64_t **v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _BYTE *v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  unint64_t v120;
  uint64_t ***v121;
  uint64_t **v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  unsigned __int16 *v126;
  unsigned __int16 *v127;
  unsigned int v128;
  uint64_t *v129;
  uint64_t **v130;
  uint64_t **v131;
  unsigned int v132;
  _WORD *v133;
  uint64_t **v134;
  BOOL v136;
  float i;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int8x8_t v143;
  uint8x8_t v144;
  unint64_t v145;
  uint64_t ***v146;
  uint64_t **v147;
  uint64_t v148;
  uint64_t *v149;
  unint64_t v150;
  gdc::Registry *v151;
  __int16 v152;
  __int128 v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  gss::Allocator *v159;
  uint64_t v160;
  int8x8_t *v161;
  unint64_t *v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t *v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 *v177;
  _OWORD *v178;
  uint64_t v179;
  __int128 v180;
  unint64_t v181;
  uint64_t v182;
  int8x8_t *v183;
  char v184;
  _BYTE *v185;
  _BYTE *v186;
  _BYTE *v187;
  unint64_t v188;
  _BYTE *v189;
  unint64_t v190;
  size_t v191;
  char *v192;
  int8x8_t v193;
  char *v194;
  char *v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  __int128 *v199;
  _OWORD *v200;
  unint64_t v201;
  __int128 v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t ***v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint8x8_t v214;
  unint64_t v215;
  uint64_t ***v216;
  uint64_t **v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  uint64_t *v221;
  char *v222;
  char *v223;
  char *v224;
  __int128 v225;
  __int128 v226;
  float32x4_t v227;
  float v229;
  float v230;
  float32x4_t v231;
  float32x2_t v233;
  float v239;
  float32x4_t v240;
  int32x4_t v241;
  float32x4_t v242;
  int32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  gdc::Registry *v256;
  __int16 v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  gss::Allocator *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int8x8_t v267;
  uint8x8_t v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  int8x8_t *v277;
  unint64_t *v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  uint64_t *v287;
  char *v288;
  unint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  __int128 *v293;
  _OWORD *v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  int8x8_t *v298;
  char v299;
  _BYTE *v300;
  _BYTE *v301;
  _BYTE *v302;
  unint64_t v303;
  unint64_t v304;
  size_t v305;
  char *v306;
  int8x8_t v307;
  char *v308;
  char *v309;
  unint64_t v310;
  char *v311;
  unint64_t v312;
  __int128 *v313;
  _OWORD *v314;
  unint64_t v315;
  __int128 v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t *v319;
  char *v320;
  uint64_t v321;
  char v322;
  char *v323;
  char *v324;
  int64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t *v330;
  char *v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  __int128 v339;
  char *v340;
  char *v341;
  char *v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  char *v346;
  __int128 *v347;
  uint64_t v348;
  __int128 v349;
  char *v350;
  char v351;
  char *v352;
  __int128 v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  __int128 v359;
  __int128 v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float32x4_t v374;
  int8x16_t v375;
  float v376;
  float32x4_t v378;
  int8x16_t v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  int8x16_t *v383;
  uint64_t v384;
  int v385;
  int v386;
  float v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float32x4_t v406;
  int8x16_t v407;
  float v408;
  float32x4_t v410;
  int8x16_t v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  float32x2_t v417;
  uint64_t v418;
  int8x8_t v419;
  uint8x8_t v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  unint64_t v429;
  int8x8_t v430;
  uint8x8_t v431;
  _QWORD *v432;
  _QWORD *v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  _QWORD *v440;
  char v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char v445;
  unint64_t v446;
  float **v447;
  _QWORD *v448;
  char *v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  char *v453;
  _QWORD *v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  char *v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int8x8_t v465;
  uint8x8_t v466;
  _QWORD *v467;
  _QWORD *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  int8x8_t v479;
  uint8x8_t v480;
  unint64_t v481;
  int8x8_t v482;
  uint8x8_t v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  _QWORD *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  int8x8_t v500;
  uint8x8_t v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t *MaterialID;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int8x8_t v509;
  uint8x8_t v510;
  uint64_t ***v511;
  uint64_t **v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t *v515;
  _QWORD *v516;
  _QWORD *v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  unsigned __int16 *v524;
  uint64_t v525;
  uint64_t v526;
  char v527;
  uint64_t v528;
  int8x8_t v529;
  uint8x8_t v530;
  _QWORD *v531;
  _QWORD *v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  _QWORD *v539;
  char v540;
  _BYTE *v541;
  uint64_t v542;
  _QWORD *j;
  uint64_t v544;
  unint64_t v545;
  _BYTE *v546;
  uint64_t v547;
  _BYTE *v548;
  unint64_t v549;
  uint64_t v550;
  unint64_t v551;
  size_t v552;
  char *v553;
  char *v554;
  unint64_t v555;
  __int128 *v556;
  char *v557;
  unint64_t v558;
  __int128 v559;
  unint64_t v560;
  _BYTE *v561;
  char *v562;
  uint64_t *v563;
  uint64_t v564;
  char *v565;
  char v566;
  _QWORD *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int8x8_t v572;
  uint8x8_t v573;
  _QWORD *v574;
  _QWORD *v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int8x8_t v585;
  uint8x8_t v586;
  _QWORD *v587;
  _QWORD *v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  _QWORD *v595;
  char v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  unint64_t v600;
  _BYTE *v601;
  uint64_t v602;
  char *v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  size_t v607;
  char *v608;
  char *v609;
  char *v610;
  _QWORD *k;
  uint64_t v612;
  uint64_t **v613;
  uint64_t *v614;
  uint64_t **v615;
  int8x8_t *v616;
  unint64_t *v617;
  _QWORD *v618;
  uint64_t v619;
  unint64_t v620;
  _QWORD *v621;
  unint64_t v622;
  unint64_t v623;
  char *v624;
  char *v625;
  uint64_t *v626;
  char *v627;
  unint64_t v628;
  char *v629;
  uint64_t v630;
  uint64_t v631;
  __int128 *v632;
  _OWORD *v633;
  uint64_t v634;
  __int128 v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  char *v639;
  float *v640;
  uint64_t **v641;
  unint64_t v642;
  char v643;
  uint64_t v644;
  float *v645;
  float *v646;
  uint64_t v647;
  _QWORD *v648;
  __int128 v649;
  int v650;
  int v651;
  float *v652;
  int v653;
  _BYTE *v654;
  int v655;
  char *v656;
  char v657;
  int v658;
  BOOL v659;
  unsigned int v660;
  uint64_t *v661;
  unint64_t v662;
  unint64_t v663;
  float *v664;
  unint64_t v665;
  uint64_t v666;
  char *v667;
  char *v668;
  float *v669;
  _QWORD *v670;
  unint64_t v671;
  float *v672;
  unint64_t v673;
  unint64_t v674;
  unsigned __int16 **__p;
  char *__pa;
  char *__pb;
  uint8_t buf[16];
  _BYTE v681[20];
  __int128 v682;
  _BYTE v683[24];
  __int128 v684;
  __int128 v685;
  __int16 v686;
  char v687;
  _BYTE v688[7];
  uint64_t **v689;
  uint64_t *v690;
  uint64_t v691;
  float32x4_t v692;
  float32x2_t v693;
  _BYTE v694[12];
  _BYTE v695[48];
  float v696;
  float32x2_t v697;
  int v698;
  float32x4_t v699;
  float32x2_t v700;
  int8x16_t *v701;
  uint64_t v702;
  uint64_t vars0;

  v702 = *MEMORY[0x1E0C80C00];
  v4 = *((float *)a1 + 10);
  v5 = (_QWORD *)gdc::Registry::storage<md::components::NonTiled>((uint64_t)a1[6]);
  v6 = HIDWORD(a2);
  v665 = a2;
  v7 = a2 >> 39;
  v8 = v5[4];
  if (a2 >> 39 < (v5[5] - v8) >> 3
    && (v9 = *(_QWORD *)(v8 + 8 * v7)) != 0
    && (v10 = *(unsigned __int16 *)(v9 + 2 * (HIDWORD(a2) & 0x7F)), v12 = v5[7], v11 = v5[8], v10 < (v11 - v12) >> 3)
    && ((v13 = v12 + 8 * v10, v13 != v11) ? (_ZF = *(_DWORD *)(v13 + 4) == HIDWORD(a2)) : (_ZF = 0), _ZF))
  {
    v15 = v5[11];
    v16 = v5[10] + v10;
  }
  else
  {
    v15 = v5[11];
    v16 = v15;
  }
  v17 = (_QWORD *)gdc::Registry::storage<md::components::SubtileZone>((uint64_t)a1[6]);
  v27 = v17[4];
  if (v7 < (v17[5] - v27) >> 3
    && (v28 = *(_QWORD *)(v27 + 8 * v7)) != 0
    && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v665) & 0x7F)), v31 = v17[7],
                                                                       v30 = v17[8],
                                                                       v29 < (v30 - v31) >> 3)
    && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v6) : (v33 = 0), v33))
  {
    v34 = v17[11];
    v35 = v17[10] + v29;
  }
  else
  {
    v34 = v17[11];
    v35 = v34;
  }
  if (v35 == v34)
    v36 = 0;
  else
    v36 = (char *)v35;
  v37 = (*a1)[6];
  if (!*(_QWORD *)&v37)
    return;
  v38 = *((_QWORD *)a3 + 2);
  v39 = (uint8x8_t)vcnt_s8(v37);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = *((_QWORD *)a3 + 2);
    if (v38 >= *(_QWORD *)&v37)
      v40 = v38 % *(_QWORD *)&v37;
  }
  else
  {
    v40 = (*(_QWORD *)&v37 - 1) & v38;
  }
  v41 = (*a1)[5];
  v42 = *(_QWORD **)(*(_QWORD *)&v41 + 8 * v40);
  if (!v42)
    return;
  v43 = (_QWORD *)*v42;
  if (!*v42)
    return;
  v44 = *(_QWORD *)&v37 - 1;
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v45 = v43[1];
      if (v38 == v45)
      {
        if (v43[2] == v38)
          goto LABEL_43;
      }
      else if ((v45 & v44) != v40)
      {
        return;
      }
      v43 = (_QWORD *)*v43;
      if (!v43)
        return;
    }
  }
  while (1)
  {
    v46 = v43[1];
    if (v38 == v46)
      break;
    if (v46 >= *(_QWORD *)&v37)
      v46 %= *(_QWORD *)&v37;
    if (v46 != v40)
      return;
LABEL_35:
    v43 = (_QWORD *)*v43;
    if (!v43)
      return;
  }
  if (v43[2] != v38)
    goto LABEL_35;
LABEL_43:
  if (v39.u32[0] > 1uLL)
  {
    v47 = *((_QWORD *)a3 + 2);
    if (v38 >= *(_QWORD *)&v37)
      v47 = v38 % *(_QWORD *)&v37;
  }
  else
  {
    v47 = v44 & v38;
  }
  v48 = *(_QWORD **)(*(_QWORD *)&v41 + 8 * v47);
  if (!v48 || (v49 = (_QWORD *)*v48) == 0)
LABEL_904:
    abort();
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v50 = v49[1];
      if (v38 == v50)
      {
        if (v49[2] == v38)
          goto LABEL_55;
      }
      else if ((v50 & v44) != v47)
      {
        goto LABEL_904;
      }
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_904;
    }
  }
  while (2)
  {
    v53 = v49[1];
    if (v38 != v53)
    {
      if (v53 >= *(_QWORD *)&v37)
        v53 %= *(_QWORD *)&v37;
      if (v53 != v47)
        goto LABEL_904;
      goto LABEL_59;
    }
    if (v49[2] != v38)
    {
LABEL_59:
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_904;
      continue;
    }
    break;
  }
LABEL_55:
  v51 = v49[3];
  v660 = *(unsigned __int8 *)(v51 + 304);
  if (v660 > 0x13)
  {
    v648 = 0;
  }
  else
  {
    v52 = *(_QWORD *)(v51 + 424);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v51 + 432) - v52) >> 3) <= *a3)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v88 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v88, OS_LOG_TYPE_ERROR, "Material map index is out of range.", buf, 2u);
      }

      return;
    }
    v648 = (_QWORD *)(v52 + 40 * *a3);
  }
  v54 = *(_BYTE *)(v51 + 368) - 1;
  if (a1[4])
  {
    v55 = *(float *)(v51 + 292);
    v56 = *(float *)(v51 + 280);
    if (v55 >= v56
      && (v57 = *(float *)(v51 + 296), v58 = *(float *)(v51 + 284), v57 >= v58)
      && *(float *)(v51 + 300) >= *(float *)(v51 + 288))
    {
      v59 = fmaxf(v55 - v56, 0.0);
      v60 = fmaxf(v57 - v58, 0.0);
    }
    else
    {
      v59 = *(float *)(v51 + 448);
      v60 = *(float *)(v51 + 452);
    }
    v61 = (int)((float)(sqrtf((float)((float)((float)(*((float *)a3 + 9) * *((float *)a3 + 9))+ (float)(*((float *)a3 + 10) * *((float *)a3 + 10)))+ (float)(*((float *)a3 + 11) * *((float *)a3 + 11)))* (float)((float)((float)(*((float *)a3 + 6) * *((float *)a3 + 6))+ (float)(*((float *)a3 + 7) * *((float *)a3 + 7)))+ (float)(*((float *)a3 + 8) * *((float *)a3 + 8))))* (float)(v59 * v60))* v4+ 1.0);
    v62 = *(_QWORD **)(v51 + 352);
    v63 = (_QWORD *)(v51 + 360);
    v64 = v62;
    if (v62 != (_QWORD *)(v51 + 360))
    {
      v65 = 0;
      v66 = *(_QWORD **)(v51 + 352);
      do
      {
        v67 = (_QWORD *)v66[1];
        if (v67)
        {
          do
          {
            v68 = v67;
            v67 = (_QWORD *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (_QWORD *)v66[2];
            _ZF = *v68 == (_QWORD)v66;
            v66 = v68;
          }
          while (!_ZF);
        }
        ++v65;
        v66 = v68;
      }
      while (v68 != v63);
      v64 = *(_QWORD **)(v51 + 352);
      do
      {
        v69 = v65 >> 1;
        v70 = v64;
        if (v65 != 1)
        {
          v72 = v65 >> 1;
          v73 = v64;
          do
          {
            v74 = (_QWORD *)v73[1];
            if (v74)
            {
              do
              {
                v70 = v74;
                v74 = (_QWORD *)*v74;
              }
              while (v74);
            }
            else
            {
              do
              {
                v70 = (_QWORD *)v73[2];
                _ZF = *v70 == (_QWORD)v73;
                v73 = v70;
              }
              while (!_ZF);
            }
            v73 = v70;
            v77 = v72-- <= 1;
          }
          while (!v77);
        }
        if (*((unsigned __int16 *)v70 + 14) <= v61)
        {
          v71 = (_QWORD *)v70[1];
          if (v71)
          {
            do
            {
              v64 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v64 = (_QWORD *)v70[2];
              _ZF = *v64 == (_QWORD)v70;
              v70 = v64;
            }
            while (!_ZF);
          }
          v69 = v65 + ~v69;
        }
        v65 = v69;
      }
      while (v69);
    }
    if (v64 != v63)
    {
      v75 = *((unsigned __int16 *)v64 + 13);
      v76 = *((unsigned __int16 *)v64 + 14);
      v77 = v75 <= v61 && v76 > v61;
      if (v77)
      {
        if (v62 != v63)
        {
          v78 = 0;
          v79 = *(_QWORD **)(v51 + 352);
          do
          {
            v80 = (_QWORD *)v79[1];
            if (v80)
            {
              do
              {
                v81 = v80;
                v80 = (_QWORD *)*v80;
              }
              while (v80);
            }
            else
            {
              do
              {
                v81 = (_QWORD *)v79[2];
                _ZF = *v81 == (_QWORD)v79;
                v79 = v81;
              }
              while (!_ZF);
            }
            ++v78;
            v79 = v81;
          }
          while (v81 != v63);
          do
          {
            v82 = v78 >> 1;
            v83 = v62;
            if (v78 != 1)
            {
              v85 = v78 >> 1;
              v86 = v62;
              do
              {
                v87 = (_QWORD *)v86[1];
                if (v87)
                {
                  do
                  {
                    v83 = v87;
                    v87 = (_QWORD *)*v87;
                  }
                  while (v87);
                }
                else
                {
                  do
                  {
                    v83 = (_QWORD *)v86[2];
                    _ZF = *v83 == (_QWORD)v86;
                    v86 = v83;
                  }
                  while (!_ZF);
                }
                v86 = v83;
                v77 = v85-- <= 1;
              }
              while (!v77);
            }
            if (*((unsigned __int16 *)v83 + 14) <= v61)
            {
              v84 = (_QWORD *)v83[1];
              if (v84)
              {
                do
                {
                  v62 = v84;
                  v84 = (_QWORD *)*v84;
                }
                while (v84);
              }
              else
              {
                do
                {
                  v62 = (_QWORD *)v83[2];
                  _ZF = *v62 == (_QWORD)v83;
                  v83 = v62;
                }
                while (!_ZF);
              }
              v82 = v78 + ~v82;
            }
            v78 = v82;
          }
          while (v82);
        }
        if (v62 == v63
          || (*((unsigned __int16 *)v62 + 13) <= v61 ? (v89 = *((unsigned __int16 *)v62 + 14) > v61) : (v89 = 0), !v89))
        {
          v62 = (_QWORD *)(v51 + 360);
        }
        v54 = *((_BYTE *)v62 + 30);
      }
    }
  }
  v690 = 0;
  v691 = 0;
  v689 = &v690;
  v90 = v54;
  v637 = 16 * v54;
  v639 = v36;
  v670 = v49;
  v673 = v16;
  if (v660 >= 0x14)
  {
    v92 = v51 + 232;
    v91 = *(_QWORD *)(v51 + 232);
    if (v54 >= (unint64_t)((*(_QWORD *)(v92 + 8) - v91) >> 4))
      abort();
    v93 = *(void ***)(v91 + 16 * v54);
    v94 = (unsigned __int16 **)*v93;
    __p = (unsigned __int16 **)v93[1];
    if (*v93 != __p)
    {
      v95 = 0;
      do
      {
        v96 = v90;
        v97 = *v94;
        v98 = v94[1];
        while (v97 != v98)
        {
          v99 = v690;
          v100 = *v97;
          v101 = &v690;
LABEL_157:
          v102 = v101;
          if (v99)
          {
            do
            {
              v101 = (uint64_t **)v99;
              v103 = *((unsigned __int16 *)v99 + 13);
              if (v100 < v103)
              {
                v99 = *v101;
                goto LABEL_157;
              }
              if (v103 >= v100)
                goto LABEL_153;
              v99 = v101[1];
            }
            while (v99);
            v102 = v101 + 1;
          }
          v104 = (uint64_t *)operator new(0x20uLL);
          *((_WORD *)v104 + 13) = v100;
          *v104 = 0;
          v104[1] = 0;
          v104[2] = (uint64_t)v101;
          *v102 = v104;
          if (*v689)
          {
            v689 = (uint64_t **)*v689;
            v104 = *v102;
          }
          v105 = v690;
          _ZF = v104 == v690;
          *((_BYTE *)v104 + 24) = v104 == v690;
          if (!_ZF)
          {
            do
            {
              v106 = v104[2];
              if (*(_BYTE *)(v106 + 24))
                break;
              v107 = *(uint64_t **)(v106 + 16);
              v108 = *v107;
              if (*v107 == v106)
              {
                v111 = v107[1];
                if (!v111 || (v112 = *(unsigned __int8 *)(v111 + 24), v109 = (_BYTE *)(v111 + 24), v112))
                {
                  if (*(uint64_t **)v106 == v104)
                  {
                    v113 = v104[2];
                  }
                  else
                  {
                    v113 = *(_QWORD *)(v106 + 8);
                    v114 = *(_QWORD *)v113;
                    *(_QWORD *)(v106 + 8) = *(_QWORD *)v113;
                    if (v114)
                    {
                      *(_QWORD *)(v114 + 16) = v106;
                      v107 = *(uint64_t **)(v106 + 16);
                    }
                    *(_QWORD *)(v113 + 16) = v107;
                    *(_QWORD *)(*(_QWORD *)(v106 + 16) + 8 * (**(_QWORD **)(v106 + 16) != v106)) = v113;
                    *(_QWORD *)v113 = v106;
                    *(_QWORD *)(v106 + 16) = v113;
                    v107 = *(uint64_t **)(v113 + 16);
                    v106 = *v107;
                  }
                  *(_BYTE *)(v113 + 24) = 1;
                  *((_BYTE *)v107 + 24) = 0;
                  v117 = *(_QWORD *)(v106 + 8);
                  *v107 = v117;
                  if (v117)
                    *(_QWORD *)(v117 + 16) = v107;
                  *(_QWORD *)(v106 + 16) = v107[2];
                  *(_QWORD *)(v107[2] + 8 * (*(_QWORD *)v107[2] != (_QWORD)v107)) = v106;
                  *(_QWORD *)(v106 + 8) = v107;
                  goto LABEL_151;
                }
              }
              else if (!v108 || (v110 = *(unsigned __int8 *)(v108 + 24), v109 = (_BYTE *)(v108 + 24), v110))
              {
                if (*(uint64_t **)v106 == v104)
                {
                  v115 = v104[1];
                  *(_QWORD *)v106 = v115;
                  if (v115)
                  {
                    *(_QWORD *)(v115 + 16) = v106;
                    v107 = *(uint64_t **)(v106 + 16);
                  }
                  v104[2] = (uint64_t)v107;
                  *(_QWORD *)(*(_QWORD *)(v106 + 16) + 8 * (**(_QWORD **)(v106 + 16) != v106)) = v104;
                  v104[1] = v106;
                  *(_QWORD *)(v106 + 16) = v104;
                  v107 = (uint64_t *)v104[2];
                }
                else
                {
                  v104 = (uint64_t *)v104[2];
                }
                *((_BYTE *)v104 + 24) = 1;
                *((_BYTE *)v107 + 24) = 0;
                v106 = v107[1];
                v116 = *(uint64_t **)v106;
                v107[1] = *(_QWORD *)v106;
                if (v116)
                  v116[2] = (uint64_t)v107;
                *(_QWORD *)(v106 + 16) = v107[2];
                *(_QWORD *)(v107[2] + 8 * (*(_QWORD *)v107[2] != (_QWORD)v107)) = v106;
                *(_QWORD *)v106 = v107;
LABEL_151:
                v107[2] = v106;
                break;
              }
              *(_BYTE *)(v106 + 24) = 1;
              v104 = v107;
              *((_BYTE *)v107 + 24) = v107 == v105;
              *v109 = 1;
            }
            while (v107 != v105);
          }
          v691 = ++v95;
LABEL_153:
          ++v97;
        }
        v94 += 4;
        v49 = v670;
        v90 = v96;
      }
      while (v94 != __p);
    }
    goto LABEL_223;
  }
  v118 = *(_QWORD *)(v51 + 392);
  if (!v118)
    goto LABEL_910;
  v119 = (uint8x8_t)vcnt_s8((int8x8_t)v118);
  v119.i16[0] = vaddlv_u8(v119);
  if (v119.u32[0] > 1uLL)
  {
    v120 = v54;
    if (v118 <= v54)
      v120 = v54 % v118;
  }
  else
  {
    v120 = ((_DWORD)v118 - 1) & v54;
  }
  v121 = *(uint64_t ****)(*(_QWORD *)(v51 + 384) + 8 * v120);
  if (!v121 || (v122 = *v121) == 0)
LABEL_910:
    abort();
  if (v119.u32[0] < 2uLL)
  {
    v123 = v118 - 1;
    while (1)
    {
      v125 = v122[1];
      if (v125 == (uint64_t *)v54)
      {
        if (*((unsigned __int8 *)v122 + 16) == v54)
          goto LABEL_210;
      }
      else if (((unint64_t)v125 & v123) != v120)
      {
        goto LABEL_910;
      }
      v122 = (uint64_t **)*v122;
      if (!v122)
        goto LABEL_910;
    }
  }
  while (2)
  {
    v124 = (unint64_t)v122[1];
    if (v124 != v54)
    {
      if (v124 >= v118)
        v124 %= v118;
      if (v124 != v120)
        goto LABEL_910;
      goto LABEL_200;
    }
    if (*((unsigned __int8 *)v122 + 16) != v54)
    {
LABEL_200:
      v122 = (uint64_t **)*v122;
      if (!v122)
        goto LABEL_910;
      continue;
    }
    break;
  }
LABEL_210:
  v126 = (unsigned __int16 *)v122[3];
  v127 = (unsigned __int16 *)v122[4];
  while (v126 != v127)
  {
    v128 = *v126;
    v129 = v690;
    v130 = &v690;
LABEL_216:
    v131 = v130;
    if (v129)
    {
      do
      {
        v130 = (uint64_t **)v129;
        v132 = *((unsigned __int16 *)v129 + 13);
        if (v128 < v132)
        {
          v129 = *v130;
          goto LABEL_216;
        }
        if (v132 >= v128)
          goto LABEL_212;
        v129 = v130[1];
      }
      while (v129);
      v131 = v130 + 1;
    }
    v133 = operator new(0x20uLL);
    v133[13] = v128;
    *(_QWORD *)v133 = 0;
    *((_QWORD *)v133 + 1) = 0;
    *((_QWORD *)v133 + 2) = v130;
    *v131 = (uint64_t *)v133;
    if (*v689)
    {
      v689 = (uint64_t **)*v689;
      v133 = *v131;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v690, (uint64_t *)v133);
    ++v691;
LABEL_212:
    ++v126;
  }
LABEL_223:
  v134 = v689;
  if (v689 == &v690)
  {
LABEL_882:
    v616 = a1[3];
    v618 = (_QWORD *)*v616;
    v617 = (unint64_t *)v616[1];
    v619 = ((uint64_t)v617 - *(_QWORD *)v616) >> 3;
    v620 = (unint64_t)v616[3];
    if (v620 >= v619 + 1)
    {
LABEL_901:
      *v617 = v665;
      *(_QWORD *)&v616[1] += 8;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v690);
      return;
    }
    v621 = (_QWORD *)v616[2];
    v622 = (1 << -(char)__clz(v620 + 1));
    if (v620 >= 0xFFFFFFFFFFFFFFFELL)
      v622 = 1;
    if (v622 <= v619 + 1)
      v623 = v619 + 1;
    else
      v623 = v622;
    v624 = (char *)malloc_type_malloc(8 * v623, 0x100004000313F17uLL);
    v625 = v624;
    v626 = (uint64_t *)*v616;
    v627 = (char *)v616[1];
    if ((char *)*v616 != v627)
    {
      v628 = v627 - (char *)v626 - 8;
      if (v628 < 0x18)
      {
        v629 = v624;
      }
      else
      {
        v629 = v624;
        if ((unint64_t)(v624 - (char *)v626) >= 0x20)
        {
          v630 = (v628 >> 3) + 1;
          v631 = 8 * (v630 & 0x3FFFFFFFFFFFFFFCLL);
          v629 = &v624[v631];
          v632 = (__int128 *)(v626 + 2);
          v633 = v624 + 16;
          v634 = v630 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v635 = *v632;
            *(v633 - 1) = *(v632 - 1);
            *v633 = v635;
            v632 += 2;
            v633 += 2;
            v634 -= 4;
          }
          while (v634);
          if (v630 == (v630 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_898;
          v626 = (uint64_t *)((char *)v626 + v631);
        }
      }
      do
      {
        v636 = *v626++;
        *(_QWORD *)v629 = v636;
        v629 += 8;
      }
      while (v626 != (uint64_t *)v627);
    }
LABEL_898:
    if (v618 != v621)
      free(*(void **)v616);
    v617 = (unint64_t *)&v625[8 * v619];
    *v616 = (int8x8_t)v625;
    v616[1] = (int8x8_t)v617;
    v616[3] = (int8x8_t)v623;
    goto LABEL_901;
  }
  v644 = 0;
  v638 = v49[3];
  v640 = (float *)(a3 + 12);
  v136 = v673 == v15 || v673 == 0;
  v659 = v136;
  i = 1.0;
  while (1)
  {
    v138 = *((unsigned __int16 *)v134 + 13);
    v666 = *(_QWORD *)(v638 + 184);
    v139 = v49[3];
    v641 = v134;
    if (*(unsigned __int16 *)(v139 + 304) > 0x13u)
    {
      v142 = v139 + 232;
      v141 = *(_QWORD *)(v139 + 232);
      if (v90 >= (*(_QWORD *)(v142 + 8) - v141) >> 4)
        abort();
      v140 = (_QWORD *)(*(_QWORD *)(v141 + v637) + 72);
    }
    else
    {
      v140 = (_QWORD *)(v139 + 464);
    }
    v143 = (int8x8_t)v140[1];
    v674 = *((unsigned __int16 *)v134 + 13);
    if (!*(_QWORD *)&v143)
      goto LABEL_256;
    v144 = (uint8x8_t)vcnt_s8(v143);
    v144.i16[0] = vaddlv_u8(v144);
    if (v144.u32[0] > 1uLL)
    {
      v145 = *((unsigned __int16 *)v134 + 13);
      if (*(_QWORD *)&v143 <= v138)
        v145 = v138 % *(_QWORD *)&v143;
    }
    else
    {
      v145 = (v143.i32[0] - 1) & v138;
    }
    v146 = *(uint64_t ****)(*v140 + 8 * v145);
    if (!v146 || (v147 = *v146) == 0)
    {
LABEL_256:
      if (*((_BYTE *)a3 + 91)
        && !md::OBBIntersectsXYAABB(v640, (float *)(v666 + 80 * *((unsigned __int16 *)v134 + 13) + 36), (float *)&xmmword_19FFB3480))
      {
        goto LABEL_876;
      }
      v151 = (gdc::Registry *)a1[6];
      v699.i8[0] = 1;
      *(_OWORD *)v695 = 0uLL;
      v695[15] = 1;
      v152 = *a3;
      *(int8x16_t *)buf = vextq_s8(*(int8x16_t *)(a3 + 4), *(int8x16_t *)(a3 + 4), 8uLL);
      *(_WORD *)v681 = v152;
      v153 = *(_OWORD *)(a3 + 20);
      *(_OWORD *)&v681[4] = *(_OWORD *)v640;
      v682 = v153;
      *(_OWORD *)v683 = *(_OWORD *)(a3 + 28);
      v154 = gdc::Registry::create(v151);
      v155 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>((uint64_t)v151);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v155, v154, &v699);
      v156 = (uint64_t *)gdc::Registry::storage<md::components::ClientState>((uint64_t)v151);
      gdc::ComponentStorageWrapper<md::components::ClientState>::emplace(v156, v154, (uint64_t)v695);
      v157 = (uint64_t *)gdc::Registry::storage<md::components::SupportsDebugHighlight>((uint64_t)v151);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v157, v154);
      v158 = (uint64_t *)gdc::Registry::storage<md::components::Asset>((uint64_t)v151);
      gdc::ComponentStorageWrapper<md::components::Asset>::emplace(v158, v154, (__int128 *)buf);
      if (!v695[14] && *(_QWORD *)v695)
      {
        v160 = gss::Allocator::instance(v159);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v160 + 40))(v160, *(_QWORD *)v695, *(unsigned __int16 *)&v695[12]);
      }
      v161 = a1[1];
      v163 = (_QWORD *)*v161;
      v162 = (unint64_t *)v161[1];
      v164 = ((uint64_t)v162 - *(_QWORD *)v161) >> 3;
      v165 = (unint64_t)v161[3];
      if (v165 >= v164 + 1)
      {
LABEL_281:
        *v162 = v154;
        *(_QWORD *)&v161[1] += 8;
        v183 = a1[2];
        if (v639)
          v184 = *v639;
        else
          v184 = 0;
        v186 = (_BYTE *)*v183;
        v185 = (_BYTE *)v183[1];
        v187 = &v185[-*(_QWORD *)v183];
        v188 = (unint64_t)v183[3];
        if (v188 >= (unint64_t)(v187 + 1))
        {
LABEL_483:
          *v185 = v184;
          ++*(_QWORD *)&v183[1];
          v350 = (char *)operator new(8uLL);
          *(_QWORD *)v350 = v154;
          v352 = (char *)operator new(0x30uLL);
          v224 = v350 + 8;
          v353 = *(_OWORD *)(a3 + 20);
          *(_OWORD *)v352 = *(_OWORD *)v640;
          *((_OWORD *)v352 + 1) = v353;
          v667 = v352;
          *((_OWORD *)v352 + 2) = *(_OWORD *)(a3 + 28);
          goto LABEL_484;
        }
        v189 = (_BYTE *)v183[2];
        v190 = (1 << -(char)__clz(v188 + 1));
        if (v188 >= 0xFFFFFFFFFFFFFFFELL)
          v190 = 1;
        if (v190 <= (unint64_t)(v187 + 1))
          v191 = (size_t)(v187 + 1);
        else
          v191 = v190;
        v192 = (char *)malloc_type_malloc(v191, 0x100004077774924uLL);
        v193 = (int8x8_t)v192;
        v194 = (char *)*v183;
        v195 = (char *)v183[1];
        if ((char *)*v183 == v195)
        {
LABEL_480:
          if (v186 != v189)
            free(*(void **)v183);
          v185 = &v187[*(_QWORD *)&v193];
          *v183 = v193;
          v183[1] = (int8x8_t)&v187[*(_QWORD *)&v193];
          v183[3] = (int8x8_t)v191;
          goto LABEL_483;
        }
        v196 = v195 - v194;
        if ((unint64_t)(v195 - v194) < 8)
        {
          v197 = v192;
        }
        else
        {
          v197 = v192;
          if ((unint64_t)(v192 - v194) >= 0x20)
          {
            if (v196 < 0x20)
            {
              v198 = 0;
LABEL_300:
              v203 = v196 & 0xFFFFFFFFFFFFFFF8;
              v197 = &v192[v196 & 0xFFFFFFFFFFFFFFF8];
              v204 = v198 - (v196 & 0xFFFFFFFFFFFFFFF8);
              v205 = (uint64_t *)&v194[v198];
              v206 = &v192[v198];
              do
              {
                v207 = *v205++;
                *(_QWORD *)v206 = v207;
                v206 += 8;
                v204 += 8;
              }
              while (v204);
              if (v196 == v203)
                goto LABEL_480;
              v194 += v203;
              goto LABEL_479;
            }
            v198 = v196 & 0xFFFFFFFFFFFFFFE0;
            v199 = (__int128 *)(v194 + 16);
            v200 = v192 + 16;
            v201 = v196 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v202 = *v199;
              *(v200 - 1) = *(v199 - 1);
              *v200 = v202;
              v199 += 2;
              v200 += 2;
              v201 -= 32;
            }
            while (v201);
            if (v196 == v198)
              goto LABEL_480;
            if ((v196 & 0x18) != 0)
              goto LABEL_300;
            v194 += v198;
            v197 = &v192[v198];
          }
        }
        do
        {
LABEL_479:
          v351 = *v194++;
          *v197++ = v351;
        }
        while (v194 != v195);
        goto LABEL_480;
      }
      v166 = (_QWORD *)v161[2];
      v167 = (1 << -(char)__clz(v165 + 1));
      if (v165 >= 0xFFFFFFFFFFFFFFFELL)
        v167 = 1;
      if (v167 <= v164 + 1)
        v168 = v164 + 1;
      else
        v168 = v167;
      v169 = (char *)malloc_type_malloc(8 * v168, 0x100004000313F17uLL);
      v170 = v169;
      v171 = (uint64_t *)*v161;
      v172 = (char *)v161[1];
      if ((char *)*v161 != v172)
      {
        v173 = v172 - (char *)v171 - 8;
        if (v173 < 0x18)
        {
          v174 = v169;
        }
        else
        {
          v174 = v169;
          if ((unint64_t)(v169 - (char *)v171) >= 0x20)
          {
            v175 = (v173 >> 3) + 1;
            v176 = 8 * (v175 & 0x3FFFFFFFFFFFFFFCLL);
            v174 = &v169[v176];
            v177 = (__int128 *)(v171 + 2);
            v178 = v169 + 16;
            v179 = v175 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v180 = *v177;
              *(v178 - 1) = *(v177 - 1);
              *v178 = v180;
              v177 += 2;
              v178 += 2;
              v179 -= 4;
            }
            while (v179);
            if (v175 == (v175 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_278;
            v171 = (uint64_t *)((char *)v171 + v176);
          }
        }
        do
        {
          v182 = *v171++;
          *(_QWORD *)v174 = v182;
          v174 += 8;
        }
        while (v171 != (uint64_t *)v172);
      }
LABEL_278:
      if (v163 != v166)
        free(*(void **)v161);
      v162 = (unint64_t *)&v170[8 * v164];
      *v161 = (int8x8_t)v170;
      v161[1] = (int8x8_t)v162;
      v161[3] = (int8x8_t)v168;
      goto LABEL_281;
    }
    v148 = *(_QWORD *)&v143 - 1;
    if (v144.u32[0] < 2uLL)
    {
      while (1)
      {
        v149 = v147[1];
        if (v149 == (uint64_t *)v138)
        {
          if (*((unsigned __int16 *)v147 + 8) == (_DWORD)v138)
            goto LABEL_274;
        }
        else if (((unint64_t)v149 & v148) != v145)
        {
          goto LABEL_256;
        }
        v147 = (uint64_t **)*v147;
        if (!v147)
          goto LABEL_256;
      }
    }
    while (1)
    {
      v150 = (unint64_t)v147[1];
      if (v150 == v138)
        break;
      if (v150 >= *(_QWORD *)&v143)
        v150 %= *(_QWORD *)&v143;
      if (v150 != v145)
        goto LABEL_256;
LABEL_251:
      v147 = (uint64_t **)*v147;
      if (!v147)
        goto LABEL_256;
    }
    if (*((unsigned __int16 *)v147 + 8) != (_DWORD)v138)
      goto LABEL_251;
LABEL_274:
    if (v144.u32[0] > 1uLL)
    {
      v181 = *((unsigned __int16 *)v134 + 13);
      if (*(_QWORD *)&v143 <= v138)
        v181 = v138 % *(_QWORD *)&v143;
    }
    else
    {
      v181 = (v143.i32[0] - 1) & v138;
    }
    v208 = *(uint64_t ****)(*v140 + 8 * v181);
    if (!v208)
      goto LABEL_906;
    v209 = *v208;
    if (!v209)
      goto LABEL_906;
    if (v144.u32[0] < 2uLL)
    {
      while (1)
      {
        v210 = v209[1];
        if (v210 == (uint64_t *)v138)
        {
          if (*((unsigned __int16 *)v209 + 8) == (_DWORD)v138)
            goto LABEL_314;
        }
        else if (((unint64_t)v210 & v148) != v181)
        {
          goto LABEL_906;
        }
        v209 = (uint64_t **)*v209;
        if (!v209)
          goto LABEL_906;
      }
    }
    while (2)
    {
      v213 = (unint64_t)v209[1];
      if (v213 != v138)
      {
        if (v213 >= *(_QWORD *)&v143)
          v213 %= *(_QWORD *)&v143;
        if (v213 != v181)
          goto LABEL_906;
LABEL_318:
        v209 = (uint64_t **)*v209;
        if (!v209)
          goto LABEL_906;
        continue;
      }
      break;
    }
    if (*((unsigned __int16 *)v209 + 8) != (_DWORD)v138)
      goto LABEL_318;
LABEL_314:
    v211 = (char *)v209[4] - (char *)v209[3];
    if (!v211)
    {
      v668 = 0;
      __pa = 0;
      goto LABEL_325;
    }
    v212 = 0xF0F0F0F0F0F0F0F1 * (v211 >> 2);
    if (v212 >> 61)
LABEL_906:
      abort();
    __pa = (char *)operator new(0x8787878787878788 * (v211 >> 2));
    v668 = &__pa[8 * v212];
    v143 = (int8x8_t)v140[1];
LABEL_325:
    if (!*(_QWORD *)&v143)
      goto LABEL_905;
    v214 = (uint8x8_t)vcnt_s8(v143);
    v214.i16[0] = vaddlv_u8(v214);
    if (v214.u32[0] > 1uLL)
    {
      v215 = v138;
      if (*(_QWORD *)&v143 <= v138)
        v215 = v138 % *(_QWORD *)&v143;
    }
    else
    {
      v215 = (v143.i32[0] - 1) & v138;
    }
    v216 = *(uint64_t ****)(*v140 + 8 * v215);
    if (!v216 || (v217 = *v216) == 0)
LABEL_905:
      abort();
    if (v214.u32[0] < 2uLL)
    {
      v218 = *(_QWORD *)&v143 - 1;
      while (1)
      {
        v220 = v217[1];
        if (v220 == (uint64_t *)v138)
        {
          if (*((unsigned __int16 *)v217 + 8) == (_DWORD)v138)
            goto LABEL_345;
        }
        else if (((unint64_t)v220 & v218) != v215)
        {
          goto LABEL_905;
        }
        v217 = (uint64_t **)*v217;
        if (!v217)
          goto LABEL_905;
      }
    }
    while (2)
    {
      v219 = (unint64_t)v217[1];
      if (v219 != v138)
      {
        if (v219 >= *(_QWORD *)&v143)
          v219 %= *(_QWORD *)&v143;
        if (v219 != v215)
          goto LABEL_905;
LABEL_335:
        v217 = (uint64_t **)*v217;
        if (!v217)
          goto LABEL_905;
        continue;
      }
      break;
    }
    if (*((unsigned __int16 *)v217 + 8) != (_DWORD)v138)
      goto LABEL_335;
LABEL_345:
    v221 = v217[3];
    v661 = v217[4];
    if (v221 == v661)
    {
      v224 = __pa;
      v49 = v670;
      goto LABEL_874;
    }
    v667 = 0;
    v222 = 0;
    v223 = 0;
    v652 = (float *)(v666 + 80 * v138 + 36);
    v224 = __pa;
    while (2)
    {
      v227.i64[0] = *v221;
      v26.i32[0] = *((_DWORD *)v221 + 2);
      v25.i32[0] = *((_DWORD *)v221 + 3);
      v22.i32[0] = *((_DWORD *)v221 + 4);
      v23.i32[0] = *((_DWORD *)v221 + 5);
      v20.i32[0] = *((_DWORD *)v221 + 6);
      v18.i32[0] = *((_DWORD *)v221 + 7);
      _S0 = *((float *)v221 + 13);
      v229 = *((float *)v221 + 14);
      v230 = *((float *)v221 + 15);
      v19.i32[0] = *((_DWORD *)a3 + 14);
      *(int32x2_t *)v231.f32 = vrev64_s32(*(int32x2_t *)v221);
      v231.i32[2] = v23.i32[0];
      v21.i32[0] = *((_DWORD *)a3 + 17);
      v231.i32[3] = v23.i32[0];
      _S26 = HIDWORD(*v221);
      v233 = *(float32x2_t *)(a3 + 12);
      v227.i32[2] = v22.i32[0];
      v227.i32[3] = v22.i32[0];
      _Q19 = *((float32x4_t *)a3 + 2);
      v24.i64[0] = *((_QWORD *)a3 + 6);
      __asm { FMLA            S18, S26, V19.S[1] }
      v239 = vmlas_n_f32(_S18, *(float *)v26.i32, *(float *)v24.i32);
      v26.i32[1] = v20.i32[0];
      v240 = (float32x4_t)vzip1q_s32(v26, v26);
      v26.i64[0] = *(_QWORD *)(a3 + 30);
      v25.i32[1] = v18.i32[0];
      v241 = vuzp2q_s32(v24, vzip1q_s32(v24, v24));
      v242 = (float32x4_t)v241;
      v242.i32[1] = v19.i32[0];
      v242.i32[3] = v241.i32[0];
      v243 = vuzp2q_s32(v26, vzip1q_s32(v26, v26));
      v244 = (float32x4_t)v243;
      v244.i32[1] = v21.i32[0];
      v244.i32[3] = v243.i32[0];
      v23.i32[1] = *((_DWORD *)v221 + 8);
      v22.i32[1] = *((_DWORD *)v221 + 9);
      v20.i32[1] = *((_DWORD *)v221 + 10);
      v18.i32[1] = *((_DWORD *)v221 + 11);
      v245 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q19, (int32x4_t)_Q19), (int8x16_t)_Q19, 0xCuLL);
      v245.i32[3] = v245.i32[0];
      v246.i32[0] = vdup_lane_s32((int32x2_t)v233, 1).u32[0];
      v246.i32[1] = _Q19.i32[3];
      v246.i64[1] = __PAIR64__(v246.u32[0], v233.u32[0]);
      *(float32x2_t *)&v695[36] = vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(v233, *((float *)v221 + 12)), (float32x2_t)vext_s8(*(int8x8_t *)_Q19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL), 4uLL), _S0), *(float32x2_t *)v24.i8, v229), *(float32x2_t *)v26.i8, v230);
      v247 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v246, v227), v231, v245), v240, v242), (float32x4_t)vzip1q_s32(v25, v25), v244);
      v248 = _Q19;
      *(float32x2_t *)&v248.i32[1] = v233;
      *(float32x4_t *)&v695[4] = v247;
      v249 = vmulq_f32(v248, (float32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 1), v23, 4uLL));
      v250 = v249;
      v250.i32[0] = v249.i32[3];
      v250.i32[3] = v249.i32[0];
      v251 = vmlaq_f32(v250, (float32x4_t)vzip1q_s32(v22, vdupq_lane_s32(*(int32x2_t *)v22.i8, 1)), _Q19);
      v252 = (float32x4_t)vextq_s8(vextq_s8(v19, v19, 4uLL), (int8x16_t)v24, 0xCuLL);
      v252.i32[3] = v252.i32[0];
      v253 = vmlaq_f32(v251, (float32x4_t)vzip1q_s32(v20, vdupq_lane_s32(*(int32x2_t *)v20.i8, 1)), v252);
      v254 = (float32x4_t)vextq_s8(vextq_s8(v21, v21, 4uLL), (int8x16_t)v26, 0xCuLL);
      v254.i32[3] = v254.i32[0];
      *(float32x4_t *)&v695[20] = vmlaq_f32(v253, (float32x4_t)vzip1q_s32(v18, vdupq_lane_s32(*(int32x2_t *)v18.i8, 1)), v254);
      __asm { FMLA            S3, S0, V19.S[3] }
      *(_DWORD *)v695 = vmlas_n_f32(v239, *(float *)v25.i32, *(float *)v26.i32);
      *(float *)&v695[44] = (float)(_S3 + (float)(*(float *)v19.i32 * v229)) + (float)(*(float *)v21.i32 * v230);
      if (*((_BYTE *)a3 + 91) && !md::OBBIntersectsXYAABB((float *)v695, v652, (float *)&xmmword_19FFB3480))
        goto LABEL_349;
      v256 = (gdc::Registry *)a1[6];
      v692.i8[0] = 1;
      v699.i64[0] = 0;
      v699.i64[1] = 0x100000000000000;
      v257 = *a3;
      *(int8x16_t *)buf = vextq_s8(*(int8x16_t *)(a3 + 4), *(int8x16_t *)(a3 + 4), 8uLL);
      *(_WORD *)v681 = v257;
      *(_OWORD *)&v681[4] = *(_OWORD *)v695;
      v682 = *(_OWORD *)&v695[16];
      *(_OWORD *)v683 = *(_OWORD *)&v695[32];
      v258 = gdc::Registry::create(v256);
      v259 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>((uint64_t)v256);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v259, v258, &v692);
      v260 = (uint64_t *)gdc::Registry::storage<md::components::ClientState>((uint64_t)v256);
      gdc::ComponentStorageWrapper<md::components::ClientState>::emplace(v260, v258, (uint64_t)&v699);
      v261 = (uint64_t *)gdc::Registry::storage<md::components::SupportsDebugHighlight>((uint64_t)v256);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v261, v258);
      v262 = (uint64_t *)gdc::Registry::storage<md::components::Asset>((uint64_t)v256);
      gdc::ComponentStorageWrapper<md::components::Asset>::emplace(v262, v258, (__int128 *)buf);
      if (!v699.i8[14] && v699.i64[0])
      {
        v264 = gss::Allocator::instance(v263);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v264 + 40))(v264, v699.i64[0], v699.u16[6]);
      }
      if ((v221[8] & 2) != 0)
      {
        v265 = (uint64_t)a1[6];
        v266 = 0x3FD9D9EF0A6A9A58;
        v699.i64[0] = 0x3FD9D9EF0A6A9A58;
        v267 = *(int8x8_t *)(v265 + 128);
        if (v267)
        {
          v268 = (uint8x8_t)vcnt_s8(v267);
          v268.i16[0] = vaddlv_u8(v268);
          if (v268.u32[0] > 1uLL)
          {
            if (*(_QWORD *)&v267 <= 0x3FD9D9EF0A6A9A58uLL)
              v266 = 0x3FD9D9EF0A6A9A58uLL % *(_QWORD *)&v267;
          }
          else
          {
            v266 = (*(_QWORD *)&v267 - 1) & 0x3FD9D9EF0A6A9A58;
          }
          v269 = *(_QWORD **)(*(_QWORD *)(v265 + 120) + 8 * v266);
          if (v269)
          {
            v270 = (_QWORD *)*v269;
            if (v270)
            {
              if (v268.u32[0] < 2uLL)
              {
                v271 = *(_QWORD *)&v267 - 1;
                while (1)
                {
                  v273 = v270[1];
                  if (v273 == 0x3FD9D9EF0A6A9A58)
                  {
                    if (v270[2] == 0x3FD9D9EF0A6A9A58)
                      goto LABEL_421;
                  }
                  else if ((v273 & v271) != v266)
                  {
                    goto LABEL_376;
                  }
                  v270 = (_QWORD *)*v270;
                  if (!v270)
                    goto LABEL_376;
                }
              }
              do
              {
                v272 = v270[1];
                if (v272 == 0x3FD9D9EF0A6A9A58)
                {
                  if (v270[2] == 0x3FD9D9EF0A6A9A58)
                  {
LABEL_421:
                    v274 = v270[3];
                    goto LABEL_379;
                  }
                }
                else
                {
                  if (v272 >= *(_QWORD *)&v267)
                    v272 %= *(_QWORD *)&v267;
                  if (v272 != v266)
                    break;
                }
                v270 = (_QWORD *)*v270;
              }
              while (v270);
            }
          }
        }
LABEL_376:
        v274 = operator new();
        *(_QWORD *)(v274 + 16) = "md::components::Collapsible]";
        *(_QWORD *)(v274 + 24) = 27;
        *(_OWORD *)(v274 + 32) = 0u;
        *(_OWORD *)(v274 + 48) = 0u;
        *(_OWORD *)(v274 + 64) = 0u;
        *(_OWORD *)(v274 + 80) = 0u;
        *(_OWORD *)(v274 + 96) = 0u;
        *(_OWORD *)(v274 + 112) = 0u;
        *(_OWORD *)(v274 + 128) = 0u;
        *(_DWORD *)(v274 + 144) = 1065353216;
        *(_OWORD *)(v274 + 152) = 0u;
        *(_OWORD *)(v274 + 168) = 0u;
        *(_QWORD *)(v274 + 184) = 0;
        *(_DWORD *)(v274 + 192) = 1065353216;
        *(_OWORD *)(v274 + 200) = 0u;
        *(_OWORD *)(v274 + 216) = 0u;
        *(_QWORD *)(v274 + 232) = 0;
        *(_DWORD *)(v274 + 240) = 1065353216;
        *(_QWORD *)(v274 + 8) = 0x3FD9D9EF0A6A9A58;
        *(_QWORD *)v274 = &off_1E42B2EC8;
        *(_QWORD *)(v274 + 248) = v265;
        v275 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v265 + 120), 0x3FD9D9EF0A6A9A58uLL, &v699);
        v276 = v275[3];
        v275[3] = v274;
        if (v276)
          (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
        *(_QWORD *)buf = 0x3FD9D9EF0A6A9A58;
        *(_QWORD *)&buf[8] = "md::components::Collapsible]";
        *(_QWORD *)v681 = 27;
        gdc::Registry::_registerStorageDataSignals(v265, 0x3FD9D9EF0A6A9A58, (uint64_t)buf, (uint64_t *)(v274 + 104));
LABEL_379:
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace((uint64_t *)v274, v258);
      }
      v671 = v258;
      v663 = (unint64_t)v223;
      v277 = a1[1];
      v279 = (_QWORD *)*v277;
      v278 = (unint64_t *)v277[1];
      v280 = ((uint64_t)v278 - *(_QWORD *)v277) >> 3;
      v281 = (unint64_t)v277[3];
      if (v281 < v280 + 1)
      {
        v656 = v224;
        v282 = (_QWORD *)v277[2];
        v283 = (1 << -(char)__clz(v281 + 1));
        if (v281 >= 0xFFFFFFFFFFFFFFFELL)
          v283 = 1;
        if (v283 <= v280 + 1)
          v284 = v280 + 1;
        else
          v284 = v283;
        v285 = (char *)malloc_type_malloc(8 * v284, 0x100004000313F17uLL);
        v286 = v285;
        v287 = (uint64_t *)*v277;
        v288 = (char *)v277[1];
        if ((char *)*v277 != v288)
        {
          v289 = v288 - (char *)v287 - 8;
          if (v289 < 0x18)
          {
            v290 = v285;
            goto LABEL_394;
          }
          v290 = v285;
          if ((unint64_t)(v285 - (char *)v287) < 0x20)
          {
            do
            {
LABEL_394:
              v297 = *v287++;
              *(_QWORD *)v290 = v297;
              v290 += 8;
            }
            while (v287 != (uint64_t *)v288);
          }
          else
          {
            v291 = (v289 >> 3) + 1;
            v292 = 8 * (v291 & 0x3FFFFFFFFFFFFFFCLL);
            v290 = &v285[v292];
            v293 = (__int128 *)(v287 + 2);
            v294 = v285 + 16;
            v295 = v291 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v296 = *v293;
              *(v294 - 1) = *(v293 - 1);
              *v294 = v296;
              v293 += 2;
              v294 += 2;
              v295 -= 4;
            }
            while (v295);
            if (v291 != (v291 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v287 = (uint64_t *)((char *)v287 + v292);
              goto LABEL_394;
            }
          }
        }
        if (v279 != v282)
          free(*(void **)v277);
        v278 = (unint64_t *)&v286[8 * v280];
        *v277 = (int8x8_t)v286;
        v277[1] = (int8x8_t)v278;
        v277[3] = (int8x8_t)v284;
        v224 = v656;
      }
      *v278 = v671;
      *(_QWORD *)&v277[1] += 8;
      v298 = a1[2];
      if (v639)
        v299 = *v639;
      else
        v299 = 0;
      v301 = (_BYTE *)*v298;
      v300 = (_BYTE *)v298[1];
      v302 = &v300[-*(_QWORD *)v298];
      v303 = (unint64_t)v298[3];
      if (v303 >= (unint64_t)(v302 + 1))
        goto LABEL_427;
      v657 = v299;
      v654 = (_BYTE *)v298[2];
      v304 = (1 << -(char)__clz(v303 + 1));
      if (v303 >= 0xFFFFFFFFFFFFFFFELL)
        v304 = 1;
      if (v304 <= (unint64_t)(v302 + 1))
        v305 = (size_t)(v302 + 1);
      else
        v305 = v304;
      v306 = (char *)malloc_type_malloc(v305, 0x100004077774924uLL);
      v307 = (int8x8_t)v306;
      v308 = (char *)*v298;
      v309 = (char *)v298[1];
      if ((char *)*v298 == v309)
        goto LABEL_424;
      v310 = v309 - v308;
      if ((unint64_t)(v309 - v308) < 8)
      {
        v311 = v306;
        goto LABEL_423;
      }
      v311 = v306;
      if ((unint64_t)(v306 - v308) < 0x20)
        goto LABEL_423;
      if (v310 >= 0x20)
      {
        v312 = v310 & 0xFFFFFFFFFFFFFFE0;
        v313 = (__int128 *)(v308 + 16);
        v314 = v306 + 16;
        v315 = v310 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v316 = *v313;
          *(v314 - 1) = *(v313 - 1);
          *v314 = v316;
          v313 += 2;
          v314 += 2;
          v315 -= 32;
        }
        while (v315);
        if (v310 == v312)
          goto LABEL_424;
        if ((v310 & 0x18) != 0)
          goto LABEL_417;
        v308 += v312;
        v311 = &v306[v312];
        do
        {
LABEL_423:
          v322 = *v308++;
          *v311++ = v322;
        }
        while (v308 != v309);
        goto LABEL_424;
      }
      v312 = 0;
LABEL_417:
      v317 = v310 & 0xFFFFFFFFFFFFFFF8;
      v311 = &v306[v310 & 0xFFFFFFFFFFFFFFF8];
      v318 = v312 - (v310 & 0xFFFFFFFFFFFFFFF8);
      v319 = (uint64_t *)&v308[v312];
      v320 = &v306[v312];
      do
      {
        v321 = *v319++;
        *(_QWORD *)v320 = v321;
        v320 += 8;
        v318 += 8;
      }
      while (v318);
      if (v310 != v317)
      {
        v308 += v317;
        goto LABEL_423;
      }
LABEL_424:
      if (v301 != v654)
        free(*(void **)v298);
      v300 = &v302[*(_QWORD *)&v307];
      *v298 = v307;
      v298[1] = (int8x8_t)&v302[*(_QWORD *)&v307];
      v298[3] = (int8x8_t)v305;
      v299 = v657;
LABEL_427:
      *v300 = v299;
      ++*(_QWORD *)&v298[1];
      if (v224 < v668)
      {
        *(_QWORD *)v224 = v671;
        v323 = v224 + 8;
        v223 = (char *)v663;
        if ((unint64_t)v222 >= v663)
          goto LABEL_453;
LABEL_347:
        v225 = *(_OWORD *)v695;
        v226 = *(_OWORD *)&v695[32];
        *((_OWORD *)v222 + 1) = *(_OWORD *)&v695[16];
        *((_OWORD *)v222 + 2) = v226;
        *(_OWORD *)v222 = v225;
        v222 += 48;
        goto LABEL_348;
      }
      v324 = v224;
      v325 = v224 - __pa;
      v326 = (v224 - __pa) >> 3;
      v327 = v326 + 1;
      if ((unint64_t)(v326 + 1) >> 61)
        abort();
      if ((v668 - __pa) >> 2 > v327)
        v327 = (v668 - __pa) >> 2;
      if ((unint64_t)(v668 - __pa) >= 0x7FFFFFFFFFFFFFF8)
        v328 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v328 = v327;
      if (v328)
      {
        if (v328 >> 61)
          goto LABEL_911;
        v329 = (char *)operator new(8 * v328);
      }
      else
      {
        v329 = 0;
      }
      v330 = (unint64_t *)&v329[8 * v326];
      *v330 = v671;
      v323 = (char *)(v330 + 1);
      v331 = __pa;
      if (v324 == __pa)
      {
        v223 = (char *)v663;
      }
      else
      {
        v332 = v324 - 8 - __pa;
        if (v332 < 0x168)
        {
          v333 = v324;
          goto LABEL_448;
        }
        if (&v329[v325 - 8 - (v332 & 0xFFFFFFFFFFFFFFF8)] <= &v329[v325 - 8]
          && &v324[-(v332 & 0xFFFFFFFFFFFFFFF8) - 8] <= v324 - 8
          && (unint64_t)(v324 - &v329[v325]) >= 0x20)
        {
          v345 = (v332 >> 3) + 1;
          v333 = &v324[-8 * (v345 & 0x3FFFFFFFFFFFFFFCLL)];
          v346 = &v329[8 * v326 - 16];
          v347 = (__int128 *)(v324 - 16);
          v348 = v345 & 0x3FFFFFFFFFFFFFFCLL;
          v223 = (char *)v663;
          do
          {
            v349 = *v347;
            *((_OWORD *)v346 - 1) = *(v347 - 1);
            *(_OWORD *)v346 = v349;
            v346 -= 32;
            v347 -= 2;
            v348 -= 4;
          }
          while (v348);
          v330 -= v345 & 0x3FFFFFFFFFFFFFFCLL;
          v331 = __pa;
          if (v345 != (v345 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_449;
        }
        else
        {
          v333 = v324;
LABEL_448:
          v331 = __pa;
          v223 = (char *)v663;
          do
          {
LABEL_449:
            v334 = *((_QWORD *)v333 - 1);
            v333 -= 8;
            *--v330 = v334;
          }
          while (v333 != v331);
        }
      }
      v668 = &v329[8 * v328];
      if (v331)
        operator delete(v331);
      __pa = (char *)v330;
      if (v222 < v223)
        goto LABEL_347;
LABEL_453:
      v335 = 0xAAAAAAAAAAAAAAABLL * ((v222 - v667) >> 4) + 1;
      if (v335 > 0x555555555555555)
        abort();
      if (0x5555555555555556 * ((v223 - v667) >> 4) > v335)
        v335 = 0x5555555555555556 * ((v223 - v667) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v223 - v667) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v336 = 0x555555555555555;
      else
        v336 = v335;
      if (v336)
      {
        if (v336 > 0x555555555555555)
LABEL_911:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v337 = (char *)operator new(48 * v336);
      }
      else
      {
        v337 = 0;
      }
      v338 = &v337[16 * ((v222 - v667) >> 4)];
      v339 = *(_OWORD *)&v695[16];
      *(_OWORD *)v338 = *(_OWORD *)v695;
      *((_OWORD *)v338 + 1) = v339;
      *((_OWORD *)v338 + 2) = *(_OWORD *)&v695[32];
      if (v222 == v667)
      {
        v342 = &v337[16 * ((v222 - v667) >> 4)];
        v341 = v667;
      }
      else
      {
        v340 = &v337[16 * ((v222 - v667) >> 4)];
        v341 = v667;
        do
        {
          v342 = v340 - 48;
          v343 = *((_OWORD *)v222 - 3);
          v344 = *((_OWORD *)v222 - 1);
          *((_OWORD *)v340 - 2) = *((_OWORD *)v222 - 2);
          *((_OWORD *)v340 - 1) = v344;
          *((_OWORD *)v340 - 3) = v343;
          v222 -= 48;
          v340 -= 48;
        }
        while (v222 != v667);
      }
      v223 = &v337[48 * v336];
      v222 = v338 + 48;
      if (v341)
        operator delete(v341);
      v667 = v342;
LABEL_348:
      v224 = v323;
LABEL_349:
      v221 = (uint64_t *)((char *)v221 + 68);
      if (v221 != v661)
        continue;
      break;
    }
    v350 = __pa;
    if (v224 == __pa)
      goto LABEL_872;
LABEL_484:
    v354 = 0;
    v664 = (float *)(v666 + 80 * v674);
    __pb = v350;
    v355 = (v224 - v350) >> 3;
    v672 = v664 + 9;
    v669 = v664 + 12;
    v645 = v664 + 14;
    v646 = v664 + 13;
    if (v355 <= 1)
      v355 = 1;
    v662 = v355;
LABEL_487:
    v356 = (uint64_t)a1[6];
    v357 = *(_QWORD *)&__pb[8 * v354];
    v358 = &v667[48 * v354];
    if (!v659)
    {
      if (*((_BYTE *)a3 + 80))
      {
        v647 = *((_QWORD *)a3 + 9);
        v644 = *((_QWORD *)a3 + 9) >> 8;
        v385 = 1;
        v643 = v674;
      }
      else
      {
        v647 = 0;
        v385 = 0;
      }
      v387 = *(float *)v358;
      v386 = *((_DWORD *)v358 + 1);
      v389 = *((_DWORD *)v358 + 2);
      v388 = *((_DWORD *)v358 + 3);
      v390 = *((_DWORD *)v358 + 4);
      v391 = *((_DWORD *)v358 + 5);
      v392 = *((_DWORD *)v358 + 6);
      v650 = *((_DWORD *)v358 + 7);
      v651 = *((_DWORD *)v358 + 8);
      v653 = *((_DWORD *)v358 + 9);
      v655 = *((_DWORD *)v358 + 10);
      v658 = *((_DWORD *)v358 + 11);
      if (v666)
      {
        *(_DWORD *)buf = *(_DWORD *)v358;
        *(_DWORD *)v681 = *((_DWORD *)v358 + 3);
        *(_DWORD *)&v681[16] = *((_DWORD *)v358 + 6);
        HIDWORD(v682) = *((_DWORD *)v358 + 9);
        *(_DWORD *)&buf[4] = *((_DWORD *)v358 + 1);
        *(_DWORD *)&v681[4] = *((_DWORD *)v358 + 4);
        LODWORD(v682) = *((_DWORD *)v358 + 7);
        *(_DWORD *)v683 = *((_DWORD *)v358 + 10);
        *(_DWORD *)&buf[8] = *((_DWORD *)v358 + 2);
        *(_DWORD *)&v681[8] = *((_DWORD *)v358 + 5);
        *(_QWORD *)((char *)&v682 + 4) = *((unsigned int *)v358 + 8);
        *(_DWORD *)&v683[4] = *((_DWORD *)v358 + 11);
        *(_DWORD *)&buf[12] = 0;
        *(_DWORD *)&v681[12] = 0;
        *(_DWORD *)&v683[8] = 1065353216;
        v699 = (float32x4_t)xmmword_19FFB3470;
        v700 = (float32x2_t)0x80000000800000;
        *(_QWORD *)v695 = &off_1E42D8AB0;
        *(_QWORD *)&v695[8] = &v699;
        *(_QWORD *)&v695[16] = buf;
        *(_QWORD *)&v695[24] = v695;
        v393 = (float)((float)(*((float *)&v682 + 3) + (float)(*v669 * v387)) + (float)(*v646 * *(float *)v681))
             + (float)(*v645 * *(float *)&v681[16]);
        v394 = (float)((float)(*(float *)v683 + (float)(*v669 * *(float *)&buf[4])) + (float)(*v646 * *(float *)&v681[4]))
             + (float)(*v645 * *(float *)&v682);
        v395 = (float)((float)(*(float *)&v683[4] + (float)(*v669 * *(float *)&buf[8]))
                     + (float)(*v646 * *(float *)&v681[8]))
             + (float)(*v645 * *((float *)&v682 + 1));
        v699.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v394, 3.4028e38)), COERCE_UNSIGNED_INT(fminf(v393, 3.4028e38)));
        v699.i32[3] = fmaxf(v393, -3.4028e38);
        v700 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v395, -3.4028e38)), COERCE_UNSIGNED_INT(fmaxf(v394, -3.4028e38)));
        v396 = (float)((float)(*((float *)&v682 + 3) + (float)(*v672 * v387)) + (float)(*v646 * *(float *)v681))
             + (float)(*v645 * *(float *)&v681[16]);
        v397 = (float)((float)(*(float *)v683 + (float)(*v672 * *(float *)&buf[4])) + (float)(*v646 * *(float *)&v681[4]))
             + (float)(*v645 * *(float *)&v682);
        v398 = (float)((float)(*(float *)&v683[4] + (float)(*v672 * *(float *)&buf[8]))
                     + (float)(*v646 * *(float *)&v681[8]))
             + (float)(*v645 * *((float *)&v682 + 1));
        v699.i32[0] = fminf(v396, v699.f32[0]);
        *(uint64_t *)((char *)v699.i64 + 4) = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v395, 3.4028e38)), COERCE_UNSIGNED_INT(fminf(v397, v699.f32[1])));
        v699.i32[3] = fmaxf(v699.f32[3], v396);
        v700 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v700.f32[1], v398)), COERCE_UNSIGNED_INT(fmaxf(v700.f32[0], v397)));
        v399 = v664[10];
        v400 = (float)((float)(*((float *)&v682 + 3) + (float)(*v669 * v387)) + (float)(v399 * *(float *)v681))
             + (float)(*v645 * *(float *)&v681[16]);
        v401 = (float)((float)(*(float *)v683 + (float)(*v669 * *(float *)&buf[4])) + (float)(v399 * *(float *)&v681[4]))
             + (float)(*v645 * *(float *)&v682);
        v402 = (float)((float)(*(float *)&v683[4] + (float)(*v669 * *(float *)&buf[8]))
                     + (float)(v399 * *(float *)&v681[8]))
             + (float)(*v645 * *((float *)&v682 + 1));
        v699.i32[0] = fminf(v400, v699.f32[0]);
        *(uint64_t *)((char *)v699.i64 + 4) = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v398, v699.f32[2])), COERCE_UNSIGNED_INT(fminf(v401, v699.f32[1])));
        v699.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v699.f32[3], v400)), COERCE_UNSIGNED_INT(fminf(v402, v699.f32[2])));
        v700 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v700.f32[1], v402)), COERCE_UNSIGNED_INT(fmaxf(v700.f32[0], v401)));
        v403 = v664[10];
        v404 = *v645;
        v692.f32[0] = *v672;
        *(uint64_t *)((char *)v692.i64 + 4) = __PAIR64__(LODWORD(v404), LODWORD(v403));
        _Q5.i32[3] = v699.i32[3];
        _Q5.f32[0] = (float)((float)(*((float *)&v682 + 3) + (float)(v387 * v692.f32[0]))
                           + (float)(*(float *)v681 * v403))
                   + (float)(*(float *)&v681[16] * v404);
        *(float32x2_t *)&_Q5.i32[1] = vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)v683, *(float32x2_t *)&buf[4], v692.f32[0]), *(float32x2_t *)&v681[4], v403), *(float32x2_t *)&v682, v404);
        v406 = v699;
        v406.f32[3] = _Q5.f32[0];
        v407 = (int8x16_t)vcgtq_f32(v406, _Q5);
        _Q5.f32[3] = _Q5.f32[0];
        v699 = (float32x4_t)vbslq_s8(v407, (int8x16_t)_Q5, (int8x16_t)v699);
        v700 = vmaxnm_f32(v700, *(float32x2_t *)&_Q5.i32[1]);
        v408 = v664[11];
        v692.i64[0] = *(_QWORD *)v669;
        v692.f32[2] = v408;
        _S4 = *(_DWORD *)v681;
        __asm { FMLA            S5, S4, V2.S[1] }
        _Q5.i32[3] = v699.i32[3];
        _Q5.f32[0] = _Q5.f32[0] + (float)(*(float *)&v681[16] * v408);
        *(float32x2_t *)&_Q5.i32[1] = vmla_n_f32(vmla_lane_f32(vmla_n_f32(*(float32x2_t *)v683, *(float32x2_t *)&buf[4], v692.f32[0]), *(float32x2_t *)&v681[4], *(float32x2_t *)v692.f32, 1), *(float32x2_t *)&v682, v408);
        v410 = v699;
        v410.i32[3] = _Q5.i32[0];
        v411 = (int8x16_t)vcgtq_f32(v410, _Q5);
        _Q5.i32[3] = _Q5.i32[0];
        v699 = (float32x4_t)vbslq_s8(v411, (int8x16_t)_Q5, (int8x16_t)v699);
        v700 = vmaxnm_f32(v700, *(float32x2_t *)&_Q5.i32[1]);
        v411.i32[0] = *(__int32 *)v646;
        v412 = *((_DWORD *)v664 + 11);
        v692.f32[0] = *v672;
        *(uint64_t *)((char *)v692.i64 + 4) = __PAIR64__(v412, v411.u32[0]);
        if (!v695)
          goto LABEL_903;
        (*(void (**)(_BYTE *, float32x4_t *))(**(_QWORD **)&v695[24] + 48))(v695, &v692);
        v413 = *((_QWORD *)v664 + 5);
        v692.f32[0] = *v669;
        *(uint64_t *)((char *)v692.i64 + 4) = v413;
        if (!*(_QWORD *)&v695[24])
          goto LABEL_903;
        (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)&v695[24] + 48))(*(_QWORD *)&v695[24], &v692);
        v414 = *(_QWORD *)v672;
        v692.f32[2] = v664[11];
        v692.i64[0] = v414;
        if (!*(_QWORD *)&v695[24])
          goto LABEL_903;
        (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)&v695[24] + 48))(*(_QWORD *)&v695[24], &v692);
        v415 = *(_QWORD **)&v695[24];
        if (*(_BYTE **)&v695[24] == v695)
        {
          v415 = v695;
          v416 = 4;
LABEL_536:
          (*(void (**)(void))(*v415 + 8 * v416))();
        }
        else if (*(_QWORD *)&v695[24])
        {
          v416 = 5;
          goto LABEL_536;
        }
        v649 = (__int128)v699;
        v417 = v700;
      }
      else
      {
        v417 = (float32x2_t)0x80000000800000;
        v649 = xmmword_19FFB3470;
      }
      v429 = 0xE6F642DE3173ADE3;
      *(_QWORD *)v695 = 0xE6F642DE3173ADE3;
      v430 = *(int8x8_t *)(v356 + 128);
      if (v430)
      {
        v431 = (uint8x8_t)vcnt_s8(v430);
        v431.i16[0] = vaddlv_u8(v431);
        if (v431.u32[0] > 1uLL)
        {
          if (*(_QWORD *)&v430 <= 0xE6F642DE3173ADE3)
            v429 = 0xE6F642DE3173ADE3 % *(_QWORD *)&v430;
        }
        else
        {
          v429 = (*(_QWORD *)&v430 - 1) & 0xE6F642DE3173ADE3;
        }
        v432 = *(_QWORD **)(*(_QWORD *)(v356 + 120) + 8 * v429);
        if (v432)
        {
          v433 = (_QWORD *)*v432;
          if (v433)
          {
            if (v431.u32[0] < 2uLL)
            {
              v434 = *(_QWORD *)&v430 - 1;
              while (1)
              {
                v436 = v433[1];
                if (v436 == 0xE6F642DE3173ADE3)
                {
                  if (v433[2] == 0xE6F642DE3173ADE3)
                    goto LABEL_769;
                }
                else if ((v436 & v434) != v429)
                {
                  goto LABEL_558;
                }
                v433 = (_QWORD *)*v433;
                if (!v433)
                  goto LABEL_558;
              }
            }
            do
            {
              v435 = v433[1];
              if (v435 == 0xE6F642DE3173ADE3)
              {
                if (v433[2] == 0xE6F642DE3173ADE3)
                {
LABEL_769:
                  v437 = v433[3];
                  goto LABEL_561;
                }
              }
              else
              {
                if (v435 >= *(_QWORD *)&v430)
                  v435 %= *(_QWORD *)&v430;
                if (v435 != v429)
                  break;
              }
              v433 = (_QWORD *)*v433;
            }
            while (v433);
          }
        }
      }
LABEL_558:
      v437 = operator new();
      *(_QWORD *)(v437 + 16) = "md::components::DynamicMeshInstance]";
      *(_QWORD *)(v437 + 24) = 35;
      *(_OWORD *)(v437 + 32) = 0u;
      *(_OWORD *)(v437 + 48) = 0u;
      *(_OWORD *)(v437 + 64) = 0u;
      *(_OWORD *)(v437 + 80) = 0u;
      *(_OWORD *)(v437 + 96) = 0u;
      *(_OWORD *)(v437 + 112) = 0u;
      *(_OWORD *)(v437 + 128) = 0u;
      *(_DWORD *)(v437 + 144) = 1065353216;
      *(_OWORD *)(v437 + 152) = 0u;
      *(_OWORD *)(v437 + 168) = 0u;
      *(_QWORD *)(v437 + 184) = 0;
      *(_DWORD *)(v437 + 192) = 1065353216;
      *(_OWORD *)(v437 + 200) = 0u;
      *(_OWORD *)(v437 + 216) = 0u;
      *(_QWORD *)(v437 + 232) = 0;
      *(_DWORD *)(v437 + 240) = 1065353216;
      *(_QWORD *)(v437 + 8) = 0xE6F642DE3173ADE3;
      *(_QWORD *)v437 = &off_1E42B31C8;
      *(_QWORD *)(v437 + 248) = v356;
      v438 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v356 + 120), 0xE6F642DE3173ADE3, v695);
      v439 = v438[3];
      v438[3] = v437;
      if (v439)
        (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
      *(_QWORD *)buf = 0xE6F642DE3173ADE3;
      *(_QWORD *)&buf[8] = "md::components::DynamicMeshInstance]";
      *(_QWORD *)v681 = 35;
      gdc::Registry::_registerStorageDataSignals(v356, 0xE6F642DE3173ADE3, (uint64_t)buf, (uint64_t *)(v437 + 104));
LABEL_561:
      v699.i64[0] = v357;
      v440 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v437 + 32), (uint64_t)&v699);
      if ((v441 & 1) != 0)
      {
        v447 = *(float ***)(v437 + 88);
        v446 = *(_QWORD *)(v437 + 96);
        if ((unint64_t)v447 >= v446)
        {
          v449 = *(char **)(v437 + 80);
          v450 = 0x86BCA1AF286BCA1BLL * (((char *)v447 - v449) >> 4) + 1;
          if (v450 > 0xD79435E50D7943)
            abort();
          v451 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v446 - (_QWORD)v449) >> 4);
          if (2 * v451 > v450)
            v450 = 2 * v451;
          if (v451 >= 0x6BCA1AF286BCA1)
            v452 = 0xD79435E50D7943;
          else
            v452 = v450;
          if (v452)
          {
            if (v452 > 0xD79435E50D7943)
              goto LABEL_911;
            v453 = (char *)operator new(304 * v452);
          }
          else
          {
            v453 = 0;
          }
          v459 = &v453[16 * (((char *)v447 - v449) >> 4)];
          *(_QWORD *)v459 = v664;
          *((_QWORD *)v459 + 1) = v647 | (v644 << 8);
          v459[16] = v643;
          *(_DWORD *)(v459 + 17) = *(_DWORD *)v694;
          *((_DWORD *)v459 + 5) = *(_DWORD *)&v694[3];
          v459[24] = v385;
          *(_DWORD *)(v459 + 25) = *(_DWORD *)v688;
          *((_DWORD *)v459 + 7) = *(_DWORD *)&v688[3];
          v459[32] = 1;
          *(_WORD *)(v459 + 33) = v686;
          v459[35] = v687;
          *(_OWORD *)(v459 + 36) = v649;
          *(float32x2_t *)(v459 + 52) = v417;
          *((float *)v459 + 15) = v387;
          *((_DWORD *)v459 + 16) = v386;
          *((_DWORD *)v459 + 17) = v389;
          *((_DWORD *)v459 + 18) = v388;
          *((_DWORD *)v459 + 19) = v390;
          *((_DWORD *)v459 + 20) = v391;
          *((_DWORD *)v459 + 21) = v392;
          *((_DWORD *)v459 + 22) = v650;
          *((_DWORD *)v459 + 23) = v651;
          *((_DWORD *)v459 + 24) = v653;
          *((_DWORD *)v459 + 25) = v655;
          *((_DWORD *)v459 + 26) = v658;
          *((_QWORD *)v459 + 14) = 0x3FF0000000000000;
          *((_QWORD *)v459 + 15) = 0;
          *((_QWORD *)v459 + 16) = 0;
          *((_QWORD *)v459 + 17) = 0;
          *((_QWORD *)v459 + 18) = 0x3FF0000000000000;
          *((_QWORD *)v459 + 19) = 0;
          *((_QWORD *)v459 + 20) = 0;
          *((_QWORD *)v459 + 21) = 0;
          *((_QWORD *)v459 + 22) = 0x3FF0000000000000;
          *((_QWORD *)v459 + 23) = 0;
          *((_QWORD *)v459 + 24) = 0;
          *((_QWORD *)v459 + 25) = 0;
          v460 = v459;
          i = 1.0;
          if (v447 != (float **)v449)
          {
            do
            {
              v460 -= 304;
              v447 -= 38;
              memcpy(v460, v447, 0x130uLL);
            }
            while (v447 != (float **)v449);
            v447 = *(float ***)(v437 + 80);
          }
          v448 = v459 + 304;
          *(_QWORD *)(v437 + 80) = v460;
          *(_QWORD *)(v437 + 88) = v459 + 304;
          *(_QWORD *)(v437 + 96) = &v453[304 * v452];
          if (v447)
            operator delete(v447);
        }
        else
        {
          *v447 = v664;
          v447[1] = (float *)(v647 | (v644 << 8));
          *((_BYTE *)v447 + 16) = v643;
          *(_DWORD *)((char *)v447 + 17) = *(_DWORD *)v694;
          *((_DWORD *)v447 + 5) = *(_DWORD *)&v694[3];
          *((_BYTE *)v447 + 24) = v385;
          *(_DWORD *)((char *)v447 + 25) = *(_DWORD *)v688;
          *((_DWORD *)v447 + 7) = *(_DWORD *)&v688[3];
          *((_BYTE *)v447 + 32) = 1;
          *(_WORD *)((char *)v447 + 33) = v686;
          *((_BYTE *)v447 + 35) = v687;
          *(_OWORD *)((char *)v447 + 36) = v649;
          *(float **)((char *)v447 + 52) = (float *)v417;
          *((float *)v447 + 15) = v387;
          *((_DWORD *)v447 + 16) = v386;
          *((_DWORD *)v447 + 17) = v389;
          *((_DWORD *)v447 + 18) = v388;
          *((_DWORD *)v447 + 19) = v390;
          *((_DWORD *)v447 + 20) = v391;
          *((_DWORD *)v447 + 21) = v392;
          *((_DWORD *)v447 + 22) = v650;
          *((_DWORD *)v447 + 23) = v651;
          *((_DWORD *)v447 + 24) = v653;
          *((_DWORD *)v447 + 25) = v655;
          *((_DWORD *)v447 + 26) = v658;
          v447[14] = (float *)0x3FF0000000000000;
          v447[15] = 0;
          v447[16] = 0;
          v447[17] = 0;
          v447[18] = (float *)0x3FF0000000000000;
          v447[19] = 0;
          v447[20] = 0;
          v447[21] = 0;
          v447[22] = (float *)0x3FF0000000000000;
          v447[23] = 0;
          v448 = v447 + 38;
          v447[24] = 0;
          v447[25] = 0;
          i = 1.0;
        }
        *(_QWORD *)(v437 + 88) = v448;
        v455 = *(_QWORD *)(v437 + 248);
        v458 = *(_QWORD **)(v437 + 176);
        if (!v458)
          goto LABEL_594;
      }
      else
      {
        v442 = *(_QWORD *)(v437 + 80);
        v443 = ((uint64_t)v440 - *(_QWORD *)(v437 + 56)) >> 3;
        v444 = v442 + 304 * v443;
        *(_QWORD *)v444 = v664;
        if (*(unsigned __int8 *)(v444 + 24) != v385)
        {
          if (*(_BYTE *)(v444 + 24))
          {
            v445 = 0;
          }
          else
          {
            *(_QWORD *)(v444 + 8) = v647 | (v644 << 8);
            *(_BYTE *)(v444 + 16) = v643;
            *(_DWORD *)(v444 + 17) = *(_DWORD *)v694;
            *(_DWORD *)(v444 + 20) = *(_DWORD *)&v694[3];
            v445 = 1;
          }
          *(_BYTE *)(v444 + 24) = v445;
        }
        *(_BYTE *)(v444 + 32) = 1;
        *(_OWORD *)(v444 + 36) = v649;
        *(float32x2_t *)(v444 + 52) = v417;
        *(float *)(v444 + 60) = v387;
        *(_DWORD *)(v444 + 64) = v386;
        *(_DWORD *)(v444 + 68) = v389;
        *(_DWORD *)(v444 + 72) = v388;
        *(_DWORD *)(v444 + 76) = v390;
        *(_DWORD *)(v444 + 80) = v391;
        *(_DWORD *)(v444 + 84) = v392;
        *(_DWORD *)(v444 + 88) = v650;
        *(_DWORD *)(v444 + 92) = v651;
        *(_DWORD *)(v444 + 96) = v653;
        *(_DWORD *)(v444 + 100) = v655;
        *(_DWORD *)(v444 + 104) = v658;
        v454 = (_QWORD *)(v442 + 304 * v443);
        v454[14] = 0x3FF0000000000000;
        v454[15] = 0;
        v454[16] = 0;
        v454[17] = 0;
        v454[18] = 0x3FF0000000000000;
        v454[19] = 0;
        v454[20] = 0;
        v454[21] = 0;
        v454[22] = 0x3FF0000000000000;
        v454[23] = 0;
        v454[24] = 0;
        v454[25] = 0;
        v455 = *(_QWORD *)(v437 + 248);
        if (v444 != *(_QWORD *)(v437 + 88))
        {
          v456 = *(_QWORD **)(v437 + 128);
          for (i = 1.0; v456; v456 = (_QWORD *)*v456)
          {
            *(_QWORD *)buf = &v699;
            *(_QWORD *)&buf[8] = 1;
            *(_QWORD *)v695 = v455;
            v457 = v456[6];
            if (!v457)
              goto LABEL_903;
            (*(void (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v457 + 48))(v457, v695, buf);
          }
          goto LABEL_594;
        }
        i = 1.0;
        v458 = *(_QWORD **)(v437 + 176);
        if (!v458)
          goto LABEL_594;
      }
      do
      {
        *(_QWORD *)buf = &v699;
        *(_QWORD *)&buf[8] = 1;
        *(_QWORD *)v695 = v455;
        v461 = v458[6];
        if (!v461)
          goto LABEL_903;
        (*(void (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v461 + 48))(v461, v695, buf);
        v458 = (_QWORD *)*v458;
      }
      while (v458);
      goto LABEL_594;
    }
    *(_QWORD *)buf = v666 + 80 * v674;
    buf[8] = 0;
    v681[8] = 0;
    v681[16] = 1;
    v682 = xmmword_19FFB3470;
    *(_QWORD *)v683 = 0x80000000800000;
    v359 = *(_OWORD *)v358;
    v360 = *((_OWORD *)v358 + 2);
    v684 = *((_OWORD *)v358 + 1);
    v685 = v360;
    *(_OWORD *)&v683[8] = v359;
    if (*((_BYTE *)a3 + 80))
    {
      *(_QWORD *)&buf[8] = *((_QWORD *)a3 + 9);
      v681[0] = v674;
      v681[8] = 1;
    }
    if (v666)
    {
      *(_DWORD *)v695 = *(_DWORD *)v358;
      *(_DWORD *)&v695[16] = *((_DWORD *)v358 + 3);
      *(_DWORD *)&v695[32] = *((_DWORD *)v358 + 6);
      v696 = *((float *)v358 + 9);
      *(_DWORD *)&v695[4] = *((_DWORD *)v358 + 1);
      *(_DWORD *)&v695[20] = *((_DWORD *)v358 + 4);
      *(_DWORD *)&v695[36] = *((_DWORD *)v358 + 7);
      v697.i32[0] = *((_DWORD *)v358 + 10);
      *(_QWORD *)&v695[8] = *((unsigned int *)v358 + 2);
      *(_QWORD *)&v695[24] = *((unsigned int *)v358 + 5);
      *(_QWORD *)&v695[40] = *((unsigned int *)v358 + 8);
      v697.i32[1] = *((_DWORD *)v358 + 11);
      v698 = 1065353216;
      v692 = (float32x4_t)xmmword_19FFB3470;
      v693 = (float32x2_t)0x80000000800000;
      v699.i64[0] = (uint64_t)&off_1E42D8AB0;
      v699.i64[1] = (uint64_t)&v692;
      v700 = (float32x2_t)v695;
      v701 = (int8x16_t *)&v699;
      v361 = (float)((float)(v696 + (float)(*v669 * *(float *)v695)) + (float)(*v646 * *(float *)&v695[16]))
           + (float)(*v645 * *(float *)&v695[32]);
      v362 = (float)((float)(v697.f32[0] + (float)(*v669 * *(float *)&v695[4])) + (float)(*v646 * *(float *)&v695[20]))
           + (float)(*v645 * *(float *)&v695[36]);
      v363 = (float)((float)(v697.f32[1] + (float)(*v669 * *(float *)&v695[8])) + (float)(*v646 * *(float *)&v695[24]))
           + (float)(*v645 * *(float *)&v695[40]);
      v692.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v362, 3.4028e38)), COERCE_UNSIGNED_INT(fminf(v361, 3.4028e38)));
      v692.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v361, -3.4028e38)), COERCE_UNSIGNED_INT(fminf(v363, 3.4028e38)));
      v693 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v363, -3.4028e38)), COERCE_UNSIGNED_INT(fmaxf(v362, -3.4028e38)));
      v364 = (float)((float)(v696 + (float)(*v672 * *(float *)v695)) + (float)(*v646 * *(float *)&v695[16]))
           + (float)(*v645 * *(float *)&v695[32]);
      v365 = (float)((float)(v697.f32[0] + (float)(*v672 * *(float *)&v695[4])) + (float)(*v646 * *(float *)&v695[20]))
           + (float)(*v645 * *(float *)&v695[36]);
      v366 = (float)((float)(v697.f32[1] + (float)(*v672 * *(float *)&v695[8])) + (float)(*v646 * *(float *)&v695[24]))
           + (float)(*v645 * *(float *)&v695[40]);
      v692.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v365, v692.f32[1])), COERCE_UNSIGNED_INT(fminf(v364, v692.f32[0])));
      v692.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v692.f32[3], v364)), COERCE_UNSIGNED_INT(fminf(v366, v692.f32[2])));
      v693 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v693.f32[1], v366)), COERCE_UNSIGNED_INT(fmaxf(v693.f32[0], v365)));
      v367 = v664[10];
      v368 = (float)((float)(v696 + (float)(*v669 * *(float *)v695)) + (float)(v367 * *(float *)&v695[16]))
           + (float)(*v645 * *(float *)&v695[32]);
      v369 = (float)((float)(v697.f32[0] + (float)(*v669 * *(float *)&v695[4])) + (float)(v367 * *(float *)&v695[20]))
           + (float)(*v645 * *(float *)&v695[36]);
      v370 = (float)((float)(v697.f32[1] + (float)(*v669 * *(float *)&v695[8])) + (float)(v367 * *(float *)&v695[24]))
           + (float)(*v645 * *(float *)&v695[40]);
      v692.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v369, v692.f32[1])), COERCE_UNSIGNED_INT(fminf(v368, v692.f32[0])));
      v692.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v692.f32[3], v368)), COERCE_UNSIGNED_INT(fminf(v370, v692.f32[2])));
      v693 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v693.f32[1], v370)), COERCE_UNSIGNED_INT(fmaxf(v693.f32[0], v369)));
      v371 = v664[10];
      v372 = *v645;
      *(float *)v694 = *v672;
      *(float *)&v694[4] = v371;
      *(float *)&v694[8] = v372;
      _Q5.i32[3] = v692.i32[3];
      _Q5.f32[0] = (float)((float)(v696 + (float)(*(float *)v695 * *(float *)v694)) + (float)(*(float *)&v695[16] * v371))
                 + (float)(*(float *)&v695[32] * v372);
      *(float32x2_t *)&_Q5.i32[1] = vmla_n_f32(vmla_n_f32(vmla_n_f32(v697, *(float32x2_t *)&v695[4], *(float *)v694), *(float32x2_t *)&v695[20], v371), *(float32x2_t *)&v695[36], v372);
      v374 = v692;
      v374.f32[3] = _Q5.f32[0];
      v375 = (int8x16_t)vcgtq_f32(v374, _Q5);
      _Q5.f32[3] = _Q5.f32[0];
      v692 = (float32x4_t)vbslq_s8(v375, (int8x16_t)_Q5, (int8x16_t)v692);
      v693 = vmaxnm_f32(v693, *(float32x2_t *)&_Q5.i32[1]);
      v376 = v664[11];
      *(_QWORD *)v694 = *(_QWORD *)v669;
      *(float *)&v694[8] = v376;
      _S4 = *(_DWORD *)&v695[16];
      __asm { FMLA            S5, S4, V2.S[1] }
      _Q5.i32[3] = v692.i32[3];
      _Q5.f32[0] = _Q5.f32[0] + (float)(*(float *)&v695[32] * v376);
      *(float32x2_t *)&_Q5.i32[1] = vmla_n_f32(vmla_lane_f32(vmla_n_f32(v697, *(float32x2_t *)&v695[4], *(float *)v694), *(float32x2_t *)&v695[20], *(float32x2_t *)v694, 1), *(float32x2_t *)&v695[36], v376);
      v378 = v692;
      v378.i32[3] = _Q5.i32[0];
      v379 = (int8x16_t)vcgtq_f32(v378, _Q5);
      _Q5.i32[3] = _Q5.i32[0];
      v692 = (float32x4_t)vbslq_s8(v379, (int8x16_t)_Q5, (int8x16_t)v692);
      v693 = vmaxnm_f32(v693, *(float32x2_t *)&_Q5.i32[1]);
      v379.i32[0] = *(__int32 *)v646;
      v380 = *((_DWORD *)v664 + 11);
      *(float *)v694 = *v672;
      *(_DWORD *)&v694[4] = v379.i32[0];
      *(_DWORD *)&v694[8] = v380;
      if (&vars0 == (uint64_t *)208)
        goto LABEL_903;
      (*(void (**)(void))(v699.i64[0] + 48))();
      v381 = *((_QWORD *)v664 + 5);
      *(float *)v694 = *v669;
      *(_QWORD *)&v694[4] = v381;
      if (!v701)
        goto LABEL_903;
      (*(void (**)(int8x16_t *, _BYTE *))(v701->i64[0] + 48))(v701, v694);
      v382 = *(_QWORD *)v672;
      *(float *)&v694[8] = v664[11];
      *(_QWORD *)v694 = v382;
      if (!v701)
        goto LABEL_903;
      (*(void (**)(int8x16_t *, _BYTE *))(v701->i64[0] + 48))(v701, v694);
      v383 = v701;
      if (v701 == (int8x16_t *)&v699)
      {
        v383 = (int8x16_t *)&v699;
        v384 = 4;
LABEL_509:
        (*(void (**)(void))(v383->i64[0] + 8 * v384))();
      }
      else if (v701)
      {
        v384 = 5;
        goto LABEL_509;
      }
      v682 = (__int128)v692;
      *(float32x2_t *)v683 = v693;
    }
    v418 = 0x6307588E3A87BAE2;
    v699.i64[0] = 0x6307588E3A87BAE2;
    v419 = *(int8x8_t *)(v356 + 128);
    if (v419)
    {
      v420 = (uint8x8_t)vcnt_s8(v419);
      v420.i16[0] = vaddlv_u8(v420);
      if (v420.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v419 <= 0x6307588E3A87BAE2uLL)
          v418 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v419;
      }
      else
      {
        v418 = (*(_QWORD *)&v419 - 1) & 0x6307588E3A87BAE2;
      }
      v421 = *(_QWORD **)(*(_QWORD *)(v356 + 120) + 8 * v418);
      if (v421)
      {
        v422 = (_QWORD *)*v421;
        if (v422)
        {
          if (v420.u32[0] < 2uLL)
          {
            v423 = *(_QWORD *)&v419 - 1;
            while (1)
            {
              v425 = v422[1];
              if (v425 == 0x6307588E3A87BAE2)
              {
                if (v422[2] == 0x6307588E3A87BAE2)
                  goto LABEL_768;
              }
              else if ((v425 & v423) != v418)
              {
                goto LABEL_531;
              }
              v422 = (_QWORD *)*v422;
              if (!v422)
                goto LABEL_531;
            }
          }
          do
          {
            v424 = v422[1];
            if (v424 == 0x6307588E3A87BAE2)
            {
              if (v422[2] == 0x6307588E3A87BAE2)
              {
LABEL_768:
                v426 = v422[3];
                goto LABEL_534;
              }
            }
            else
            {
              if (v424 >= *(_QWORD *)&v419)
                v424 %= *(_QWORD *)&v419;
              if (v424 != v418)
                break;
            }
            v422 = (_QWORD *)*v422;
          }
          while (v422);
        }
      }
    }
LABEL_531:
    v426 = operator new();
    *(_QWORD *)(v426 + 16) = "md::components::MeshInstance]";
    *(_QWORD *)(v426 + 24) = 28;
    *(_OWORD *)(v426 + 32) = 0u;
    *(_OWORD *)(v426 + 48) = 0u;
    *(_OWORD *)(v426 + 64) = 0u;
    *(_OWORD *)(v426 + 80) = 0u;
    *(_OWORD *)(v426 + 96) = 0u;
    *(_OWORD *)(v426 + 112) = 0u;
    *(_OWORD *)(v426 + 128) = 0u;
    *(_DWORD *)(v426 + 144) = 1065353216;
    *(_OWORD *)(v426 + 152) = 0u;
    *(_OWORD *)(v426 + 168) = 0u;
    *(_QWORD *)(v426 + 184) = 0;
    *(_DWORD *)(v426 + 192) = 1065353216;
    *(_OWORD *)(v426 + 200) = 0u;
    *(_OWORD *)(v426 + 216) = 0u;
    *(_QWORD *)(v426 + 232) = 0;
    *(_DWORD *)(v426 + 240) = 1065353216;
    *(_QWORD *)(v426 + 8) = 0x6307588E3A87BAE2;
    *(_QWORD *)v426 = &off_1E42B2F58;
    *(_QWORD *)(v426 + 248) = v356;
    v427 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v356 + 120), 0x6307588E3A87BAE2uLL, &v699);
    v428 = v427[3];
    v427[3] = v426;
    if (v428)
      (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
    *(_QWORD *)v695 = 0x6307588E3A87BAE2;
    *(_QWORD *)&v695[8] = "md::components::MeshInstance]";
    *(_QWORD *)&v695[16] = 28;
    gdc::Registry::_registerStorageDataSignals(v356, 0x6307588E3A87BAE2, (uint64_t)v695, (uint64_t *)(v426 + 104));
LABEL_534:
    gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace((uint64_t *)v426, v357, (__int128 *)buf);
LABEL_594:
    if (*(float *)(v670[3] + 376) != i)
    {
      v462 = (uint64_t)a1[6];
      v463 = *(_QWORD *)&__pb[8 * v354];
      v699.i32[0] = *(_DWORD *)(v670[3] + 376);
      v464 = 0x3E97B8EB1BFDB5F4;
      *(_QWORD *)v695 = 0x3E97B8EB1BFDB5F4;
      v465 = *(int8x8_t *)(v462 + 128);
      if (v465)
      {
        v466 = (uint8x8_t)vcnt_s8(v465);
        v466.i16[0] = vaddlv_u8(v466);
        if (v466.u32[0] > 1uLL)
        {
          if (*(_QWORD *)&v465 <= 0x3E97B8EB1BFDB5F4uLL)
            v464 = 0x3E97B8EB1BFDB5F4uLL % *(_QWORD *)&v465;
        }
        else
        {
          v464 = (*(_QWORD *)&v465 - 1) & 0x3E97B8EB1BFDB5F4;
        }
        v467 = *(_QWORD **)(*(_QWORD *)(v462 + 120) + 8 * v464);
        if (v467)
        {
          v468 = (_QWORD *)*v467;
          if (v468)
          {
            if (v466.u32[0] < 2uLL)
            {
              v469 = *(_QWORD *)&v465 - 1;
              while (1)
              {
                v471 = v468[1];
                if (v471 == 0x3E97B8EB1BFDB5F4)
                {
                  if (v468[2] == 0x3E97B8EB1BFDB5F4)
                    goto LABEL_766;
                }
                else if ((v471 & v469) != v464)
                {
                  goto LABEL_615;
                }
                v468 = (_QWORD *)*v468;
                if (!v468)
                  goto LABEL_615;
              }
            }
            do
            {
              v470 = v468[1];
              if (v470 == 0x3E97B8EB1BFDB5F4)
              {
                if (v468[2] == 0x3E97B8EB1BFDB5F4)
                {
LABEL_766:
                  v472 = v468[3];
                  goto LABEL_618;
                }
              }
              else
              {
                if (v470 >= *(_QWORD *)&v465)
                  v470 %= *(_QWORD *)&v465;
                if (v470 != v464)
                  break;
              }
              v468 = (_QWORD *)*v468;
            }
            while (v468);
          }
        }
      }
LABEL_615:
      v472 = operator new();
      *(_QWORD *)(v472 + 16) = "md::components::PositionScaleFactor]";
      *(_QWORD *)(v472 + 24) = 35;
      *(_OWORD *)(v472 + 32) = 0u;
      *(_OWORD *)(v472 + 48) = 0u;
      *(_OWORD *)(v472 + 64) = 0u;
      *(_OWORD *)(v472 + 80) = 0u;
      *(_OWORD *)(v472 + 96) = 0u;
      *(_OWORD *)(v472 + 112) = 0u;
      *(_OWORD *)(v472 + 128) = 0u;
      *(_DWORD *)(v472 + 144) = 1065353216;
      *(_OWORD *)(v472 + 152) = 0u;
      *(_OWORD *)(v472 + 168) = 0u;
      *(_QWORD *)(v472 + 184) = 0;
      *(_DWORD *)(v472 + 192) = 1065353216;
      *(_OWORD *)(v472 + 200) = 0u;
      *(_OWORD *)(v472 + 216) = 0u;
      *(_QWORD *)(v472 + 232) = 0;
      *(_DWORD *)(v472 + 240) = 1065353216;
      *(_QWORD *)(v472 + 8) = 0x3E97B8EB1BFDB5F4;
      *(_QWORD *)v472 = &off_1E42B31F8;
      *(_QWORD *)(v472 + 248) = v462;
      v473 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v462 + 120), 0x3E97B8EB1BFDB5F4uLL, v695);
      v474 = v473[3];
      v473[3] = v472;
      if (v474)
        (*(void (**)(uint64_t))(*(_QWORD *)v474 + 8))(v474);
      *(_QWORD *)buf = 0x3E97B8EB1BFDB5F4;
      *(_QWORD *)&buf[8] = "md::components::PositionScaleFactor]";
      *(_QWORD *)v681 = 35;
      gdc::Registry::_registerStorageDataSignals(v462, 0x3E97B8EB1BFDB5F4, (uint64_t)buf, (uint64_t *)(v472 + 104));
LABEL_618:
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace((uint64_t *)v472, v463, &v699);
    }
    if (*((_BYTE *)a1 + 56) && (_DWORD)v90)
    {
      v475 = (uint64_t)a1[6];
      v476 = *(_QWORD *)&__pb[8 * v354];
      v477 = (_QWORD *)(v475 + 120);
      if ((_DWORD)v90 == 1)
      {
        v478 = 0xBD729E76E3A79E70;
        *(_QWORD *)v695 = 0xBD729E76E3A79E70;
        v479 = *(int8x8_t *)(v475 + 128);
        if (v479)
        {
          v480 = (uint8x8_t)vcnt_s8(v479);
          v480.i16[0] = vaddlv_u8(v480);
          if (v480.u32[0] > 1uLL)
          {
            if (*(_QWORD *)&v479 <= 0xBD729E76E3A79E70)
              v478 = 0xBD729E76E3A79E70 % *(_QWORD *)&v479;
          }
          else
          {
            v478 = (*(_QWORD *)&v479 - 1) & 0xBD729E76E3A79E70;
          }
          v484 = *(_QWORD **)(*v477 + 8 * v478);
          if (v484)
          {
            v485 = (_QWORD *)*v484;
            if (v485)
            {
              if (v480.u32[0] < 2uLL)
              {
                v486 = *(_QWORD *)&v479 - 1;
                while (1)
                {
                  v488 = v485[1];
                  if (v488 == 0xBD729E76E3A79E70)
                  {
                    if (v485[2] == 0xBD729E76E3A79E70)
                      goto LABEL_773;
                  }
                  else if ((v488 & v486) != v478)
                  {
                    goto LABEL_645;
                  }
                  v485 = (_QWORD *)*v485;
                  if (!v485)
                    goto LABEL_645;
                }
              }
              do
              {
                v487 = v485[1];
                if (v487 == 0xBD729E76E3A79E70)
                {
                  if (v485[2] == 0xBD729E76E3A79E70)
                  {
LABEL_773:
                    v489 = v485[3];
                    goto LABEL_648;
                  }
                }
                else
                {
                  if (v487 >= *(_QWORD *)&v479)
                    v487 %= *(_QWORD *)&v479;
                  if (v487 != v478)
                    break;
                }
                v485 = (_QWORD *)*v485;
              }
              while (v485);
            }
          }
        }
LABEL_645:
        v489 = operator new();
        *(_QWORD *)(v489 + 16) = "md::components::AlbedoTint]";
        *(_QWORD *)(v489 + 24) = 26;
        *(_OWORD *)(v489 + 32) = 0u;
        *(_OWORD *)(v489 + 48) = 0u;
        *(_OWORD *)(v489 + 64) = 0u;
        *(_OWORD *)(v489 + 80) = 0u;
        *(_OWORD *)(v489 + 96) = 0u;
        *(_OWORD *)(v489 + 112) = 0u;
        *(_OWORD *)(v489 + 128) = 0u;
        *(_DWORD *)(v489 + 144) = 1065353216;
        *(_OWORD *)(v489 + 152) = 0u;
        *(_OWORD *)(v489 + 168) = 0u;
        *(_QWORD *)(v489 + 184) = 0;
        *(_DWORD *)(v489 + 192) = 1065353216;
        *(_OWORD *)(v489 + 200) = 0u;
        *(_OWORD *)(v489 + 216) = 0u;
        *(_QWORD *)(v489 + 232) = 0;
        *(_DWORD *)(v489 + 240) = 1065353216;
        *(_QWORD *)(v489 + 8) = 0xBD729E76E3A79E70;
        *(_QWORD *)v489 = &off_1E42B2E08;
        *(_QWORD *)(v489 + 248) = v475;
        v490 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v475 + 120), 0xBD729E76E3A79E70, v695);
        v491 = v490[3];
        v490[3] = v489;
        if (v491)
          (*(void (**)(uint64_t))(*(_QWORD *)v491 + 8))(v491);
        *(_QWORD *)buf = 0xBD729E76E3A79E70;
        *(_QWORD *)&buf[8] = "md::components::AlbedoTint]";
        *(_QWORD *)v681 = 26;
        gdc::Registry::_registerStorageDataSignals(v475, 0xBD729E76E3A79E70, (uint64_t)buf, (uint64_t *)(v489 + 104));
LABEL_648:
        gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace((uint64_t *)v489, v476, (uint64_t)&kLOD1TintColor);
      }
      else
      {
        v481 = 0xBD729E76E3A79E70;
        *(_QWORD *)v695 = 0xBD729E76E3A79E70;
        v482 = *(int8x8_t *)(v475 + 128);
        if (v482)
        {
          v483 = (uint8x8_t)vcnt_s8(v482);
          v483.i16[0] = vaddlv_u8(v483);
          if (v483.u32[0] > 1uLL)
          {
            if (*(_QWORD *)&v482 <= 0xBD729E76E3A79E70)
              v481 = 0xBD729E76E3A79E70 % *(_QWORD *)&v482;
          }
          else
          {
            v481 = (*(_QWORD *)&v482 - 1) & 0xBD729E76E3A79E70;
          }
          v492 = *(_QWORD **)(*v477 + 8 * v481);
          if (v492)
          {
            v493 = (_QWORD *)*v492;
            if (v493)
            {
              if (v483.u32[0] < 2uLL)
              {
                v494 = *(_QWORD *)&v482 - 1;
                while (1)
                {
                  v496 = v493[1];
                  if (v496 == 0xBD729E76E3A79E70)
                  {
                    if (v493[2] == 0xBD729E76E3A79E70)
                      goto LABEL_774;
                  }
                  else if ((v496 & v494) != v481)
                  {
                    goto LABEL_666;
                  }
                  v493 = (_QWORD *)*v493;
                  if (!v493)
                    goto LABEL_666;
                }
              }
              do
              {
                v495 = v493[1];
                if (v495 == 0xBD729E76E3A79E70)
                {
                  if (v493[2] == 0xBD729E76E3A79E70)
                  {
LABEL_774:
                    v497 = v493[3];
                    goto LABEL_669;
                  }
                }
                else
                {
                  if (v495 >= *(_QWORD *)&v482)
                    v495 %= *(_QWORD *)&v482;
                  if (v495 != v481)
                    break;
                }
                v493 = (_QWORD *)*v493;
              }
              while (v493);
            }
          }
        }
LABEL_666:
        v497 = operator new();
        *(_QWORD *)(v497 + 16) = "md::components::AlbedoTint]";
        *(_QWORD *)(v497 + 24) = 26;
        *(_OWORD *)(v497 + 32) = 0u;
        *(_OWORD *)(v497 + 48) = 0u;
        *(_OWORD *)(v497 + 64) = 0u;
        *(_OWORD *)(v497 + 80) = 0u;
        *(_OWORD *)(v497 + 96) = 0u;
        *(_OWORD *)(v497 + 112) = 0u;
        *(_OWORD *)(v497 + 128) = 0u;
        *(_DWORD *)(v497 + 144) = 1065353216;
        *(_OWORD *)(v497 + 152) = 0u;
        *(_OWORD *)(v497 + 168) = 0u;
        *(_QWORD *)(v497 + 184) = 0;
        *(_DWORD *)(v497 + 192) = 1065353216;
        *(_OWORD *)(v497 + 200) = 0u;
        *(_OWORD *)(v497 + 216) = 0u;
        *(_QWORD *)(v497 + 232) = 0;
        *(_DWORD *)(v497 + 240) = 1065353216;
        *(_QWORD *)(v497 + 8) = 0xBD729E76E3A79E70;
        *(_QWORD *)v497 = &off_1E42B2E08;
        *(_QWORD *)(v497 + 248) = v475;
        v498 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v475 + 120), 0xBD729E76E3A79E70, v695);
        v499 = v498[3];
        v498[3] = v497;
        if (v499)
          (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
        *(_QWORD *)buf = 0xBD729E76E3A79E70;
        *(_QWORD *)&buf[8] = "md::components::AlbedoTint]";
        *(_QWORD *)v681 = 26;
        gdc::Registry::_registerStorageDataSignals(v475, 0xBD729E76E3A79E70, (uint64_t)buf, (uint64_t *)(v497 + 104));
LABEL_669:
        gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace((uint64_t *)v497, v476, (uint64_t)&kLOD2TintColor);
      }
    }
    if (v660 > 0x13)
    {
      v503 = *((_QWORD *)a3 + 1);
      v504 = v670[3];
      if (v503)
      {
        MaterialID = md::AssetData::getMaterialID(*(_QWORD *)(v504 + 232), *(_QWORD *)(v504 + 240), v90, v503, 1, v674);
      }
      else
      {
        v642 &= 0xFFFFFFFFFFFFFF00;
        MaterialID = md::AssetData::getMaterialID(*(_QWORD *)(v504 + 232), *(_QWORD *)(v504 + 240), v90, v642, 0, v674);
      }
      if (MaterialID)
        goto LABEL_678;
      goto LABEL_720;
    }
    v500 = (int8x8_t)v648[1];
    if (!*(_QWORD *)&v500)
      goto LABEL_720;
    v501 = (uint8x8_t)vcnt_s8(v500);
    v501.i16[0] = vaddlv_u8(v501);
    if (v501.u32[0] > 1uLL)
    {
      v502 = v674;
      if (*(_QWORD *)&v500 <= v674)
        v502 = v674 % *(_QWORD *)&v500;
    }
    else
    {
      v502 = (v500.i32[0] - 1) & v674;
    }
    v511 = *(uint64_t ****)(*v648 + 8 * v502);
    if (!v511)
      goto LABEL_720;
    v512 = *v511;
    if (!v512)
      goto LABEL_720;
    if (v501.u32[0] < 2uLL)
    {
      v513 = *(_QWORD *)&v500 - 1;
      while (1)
      {
        v515 = v512[1];
        if (v515 == (uint64_t *)v674)
        {
          if (*((unsigned __int16 *)v512 + 8) == (_DWORD)v674)
            goto LABEL_770;
        }
        else if (((unint64_t)v515 & v513) != v502)
        {
          goto LABEL_720;
        }
        v512 = (uint64_t **)*v512;
        if (!v512)
          goto LABEL_720;
      }
    }
    while (2)
    {
      v514 = (unint64_t)v512[1];
      if (v514 != v674)
      {
        if (v514 >= *(_QWORD *)&v500)
          v514 %= *(_QWORD *)&v500;
        if (v514 != v502)
          goto LABEL_720;
        goto LABEL_688;
      }
      if (*((unsigned __int16 *)v512 + 8) != (_DWORD)v674)
      {
LABEL_688:
        v512 = (uint64_t **)*v512;
        if (!v512)
          goto LABEL_720;
        continue;
      }
      break;
    }
LABEL_770:
    MaterialID = v512[3];
    if (!MaterialID)
      goto LABEL_720;
LABEL_678:
    v506 = (uint64_t)a1[6];
    v507 = *(_QWORD *)&__pb[8 * v354];
    v699.i64[0] = (uint64_t)MaterialID;
    v508 = 0x251D10CE20A5B012;
    *(_QWORD *)v695 = 0x251D10CE20A5B012;
    v509 = *(int8x8_t *)(v506 + 128);
    if (v509)
    {
      v510 = (uint8x8_t)vcnt_s8(v509);
      v510.i16[0] = vaddlv_u8(v510);
      if (v510.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v509 <= 0x251D10CE20A5B012uLL)
          v508 = 0x251D10CE20A5B012uLL % *(_QWORD *)&v509;
      }
      else
      {
        v508 = (*(_QWORD *)&v509 - 1) & 0x251D10CE20A5B012;
      }
      v516 = *(_QWORD **)(*(_QWORD *)(v506 + 120) + 8 * v508);
      if (v516)
      {
        v517 = (_QWORD *)*v516;
        if (v517)
        {
          if (v510.u32[0] < 2uLL)
          {
            v518 = *(_QWORD *)&v509 - 1;
            while (1)
            {
              v520 = v517[1];
              if (v520 == 0x251D10CE20A5B012)
              {
                if (v517[2] == 0x251D10CE20A5B012)
                  goto LABEL_772;
              }
              else if ((v520 & v518) != v508)
              {
                goto LABEL_716;
              }
              v517 = (_QWORD *)*v517;
              if (!v517)
                goto LABEL_716;
            }
          }
          do
          {
            v519 = v517[1];
            if (v519 == 0x251D10CE20A5B012)
            {
              if (v517[2] == 0x251D10CE20A5B012)
              {
LABEL_772:
                v521 = v517[3];
                goto LABEL_719;
              }
            }
            else
            {
              if (v519 >= *(_QWORD *)&v509)
                v519 %= *(_QWORD *)&v509;
              if (v519 != v508)
                break;
            }
            v517 = (_QWORD *)*v517;
          }
          while (v517);
        }
      }
    }
LABEL_716:
    v521 = operator new();
    *(_QWORD *)(v521 + 16) = "md::components::PendingMaterial]";
    *(_QWORD *)(v521 + 24) = 31;
    *(_OWORD *)(v521 + 32) = 0u;
    *(_OWORD *)(v521 + 48) = 0u;
    *(_OWORD *)(v521 + 64) = 0u;
    *(_OWORD *)(v521 + 80) = 0u;
    *(_OWORD *)(v521 + 96) = 0u;
    *(_OWORD *)(v521 + 112) = 0u;
    *(_OWORD *)(v521 + 128) = 0u;
    *(_DWORD *)(v521 + 144) = 1065353216;
    *(_OWORD *)(v521 + 152) = 0u;
    *(_OWORD *)(v521 + 168) = 0u;
    *(_QWORD *)(v521 + 184) = 0;
    *(_DWORD *)(v521 + 192) = 1065353216;
    *(_OWORD *)(v521 + 200) = 0u;
    *(_OWORD *)(v521 + 216) = 0u;
    *(_QWORD *)(v521 + 232) = 0;
    *(_DWORD *)(v521 + 240) = 1065353216;
    *(_QWORD *)(v521 + 8) = 0x251D10CE20A5B012;
    *(_QWORD *)v521 = &off_1E42B3018;
    *(_QWORD *)(v521 + 248) = v506;
    v522 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v506 + 120), 0x251D10CE20A5B012uLL, v695);
    v523 = v522[3];
    v522[3] = v521;
    if (v523)
      (*(void (**)(uint64_t))(*(_QWORD *)v523 + 8))(v523);
    *(_QWORD *)buf = 0x251D10CE20A5B012;
    *(_QWORD *)&buf[8] = "md::components::PendingMaterial]";
    *(_QWORD *)v681 = 31;
    gdc::Registry::_registerStorageDataSignals(v506, 0x251D10CE20A5B012, (uint64_t)buf, (uint64_t *)(v521 + 104));
LABEL_719:
    gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace((uint64_t *)v521, v507, &v699);
LABEL_720:
    v524 = a3;
    if (!*((_BYTE *)a3 + 89))
      goto LABEL_794;
    v525 = (uint64_t)a1[6];
    v526 = *(_QWORD *)&__pb[8 * v354];
    v527 = *((_BYTE *)a3 + 88);
    v528 = 0x1049843FF67503A0;
    *(_QWORD *)v695 = 0x1049843FF67503A0;
    v529 = *(int8x8_t *)(v525 + 128);
    if (v529)
    {
      v530 = (uint8x8_t)vcnt_s8(v529);
      v530.i16[0] = vaddlv_u8(v530);
      if (v530.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v529 <= 0x1049843FF67503A0uLL)
          v528 = 0x1049843FF67503A0uLL % *(_QWORD *)&v529;
      }
      else
      {
        v528 = (*(_QWORD *)&v529 - 1) & 0x1049843FF67503A0;
      }
      v531 = *(_QWORD **)(*(_QWORD *)(v525 + 120) + 8 * v528);
      if (v531)
      {
        v532 = (_QWORD *)*v531;
        if (v532)
        {
          if (v530.u32[0] < 2uLL)
          {
            v533 = *(_QWORD *)&v529 - 1;
            while (1)
            {
              v535 = v532[1];
              if (v535 == 0x1049843FF67503A0)
              {
                if (v532[2] == 0x1049843FF67503A0)
                  goto LABEL_767;
              }
              else if ((v535 & v533) != v528)
              {
                goto LABEL_741;
              }
              v532 = (_QWORD *)*v532;
              if (!v532)
                goto LABEL_741;
            }
          }
          do
          {
            v534 = v532[1];
            if (v534 == 0x1049843FF67503A0)
            {
              if (v532[2] == 0x1049843FF67503A0)
              {
LABEL_767:
                v536 = v532[3];
                goto LABEL_744;
              }
            }
            else
            {
              if (v534 >= *(_QWORD *)&v529)
                v534 %= *(_QWORD *)&v529;
              if (v534 != v528)
                break;
            }
            v532 = (_QWORD *)*v532;
          }
          while (v532);
        }
      }
    }
LABEL_741:
    v536 = operator new();
    *(_QWORD *)(v536 + 16) = "md::components::MarketMask]";
    *(_QWORD *)(v536 + 24) = 26;
    *(_OWORD *)(v536 + 32) = 0u;
    *(_OWORD *)(v536 + 48) = 0u;
    *(_OWORD *)(v536 + 64) = 0u;
    *(_OWORD *)(v536 + 80) = 0u;
    *(_OWORD *)(v536 + 96) = 0u;
    *(_OWORD *)(v536 + 112) = 0u;
    *(_OWORD *)(v536 + 128) = 0u;
    *(_DWORD *)(v536 + 144) = 1065353216;
    *(_OWORD *)(v536 + 152) = 0u;
    *(_OWORD *)(v536 + 168) = 0u;
    *(_QWORD *)(v536 + 184) = 0;
    *(_DWORD *)(v536 + 192) = 1065353216;
    *(_OWORD *)(v536 + 200) = 0u;
    *(_OWORD *)(v536 + 216) = 0u;
    *(_QWORD *)(v536 + 232) = 0;
    *(_DWORD *)(v536 + 240) = 1065353216;
    *(_QWORD *)(v536 + 8) = 0x1049843FF67503A0;
    *(_QWORD *)v536 = &off_1E42B2E38;
    *(_QWORD *)(v536 + 248) = v525;
    v537 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v525 + 120), 0x1049843FF67503A0uLL, v695);
    v538 = v537[3];
    v537[3] = v536;
    if (v538)
      (*(void (**)(uint64_t))(*(_QWORD *)v538 + 8))(v538);
    *(_QWORD *)buf = 0x1049843FF67503A0;
    *(_QWORD *)&buf[8] = "md::components::MarketMask]";
    *(_QWORD *)v681 = 26;
    gdc::Registry::_registerStorageDataSignals(v525, 0x1049843FF67503A0, (uint64_t)buf, (uint64_t *)(v536 + 104));
LABEL_744:
    v699.i64[0] = v526;
    v539 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v536 + 32), (uint64_t)&v699);
    if ((v540 & 1) != 0)
      break;
    v541 = (_BYTE *)(*(_QWORD *)(v536 + 80) + (((uint64_t)v539 - *(_QWORD *)(v536 + 56)) >> 3));
    *v541 = v527;
    v542 = *(_QWORD *)(v536 + 248);
    if (v541 == *(_BYTE **)(v536 + 88))
      goto LABEL_790;
    for (j = *(_QWORD **)(v536 + 128); j; j = (_QWORD *)*j)
    {
      *(_QWORD *)buf = &v699;
      *(_QWORD *)&buf[8] = 1;
      *(_QWORD *)v695 = v542;
      v544 = j[6];
      if (!v544)
        goto LABEL_903;
      (*(void (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v544 + 48))(v544, v695, buf);
    }
LABEL_793:
    v524 = a3;
LABEL_794:
    if (*((_BYTE *)v524 + 90))
    {
      v569 = (uint64_t)a1[6];
      v570 = *(_QWORD *)&__pb[8 * v354];
      v571 = 0x3FD9D9EF0A6A9A58;
      *(_QWORD *)v695 = 0x3FD9D9EF0A6A9A58;
      v572 = *(int8x8_t *)(v569 + 128);
      if (v572)
      {
        v573 = (uint8x8_t)vcnt_s8(v572);
        v573.i16[0] = vaddlv_u8(v573);
        if (v573.u32[0] > 1uLL)
        {
          if (*(_QWORD *)&v572 <= 0x3FD9D9EF0A6A9A58uLL)
            v571 = 0x3FD9D9EF0A6A9A58uLL % *(_QWORD *)&v572;
        }
        else
        {
          v571 = (*(_QWORD *)&v572 - 1) & 0x3FD9D9EF0A6A9A58;
        }
        v574 = *(_QWORD **)(*(_QWORD *)(v569 + 120) + 8 * v571);
        if (v574)
        {
          v575 = (_QWORD *)*v574;
          if (v575)
          {
            if (v573.u32[0] < 2uLL)
            {
              v576 = *(_QWORD *)&v572 - 1;
              while (1)
              {
                v578 = v575[1];
                if (v578 == 0x3FD9D9EF0A6A9A58)
                {
                  if (v575[2] == 0x3FD9D9EF0A6A9A58)
                    goto LABEL_870;
                }
                else if ((v578 & v576) != v571)
                {
                  goto LABEL_815;
                }
                v575 = (_QWORD *)*v575;
                if (!v575)
                  goto LABEL_815;
              }
            }
            do
            {
              v577 = v575[1];
              if (v577 == 0x3FD9D9EF0A6A9A58)
              {
                if (v575[2] == 0x3FD9D9EF0A6A9A58)
                {
LABEL_870:
                  v579 = v575[3];
                  goto LABEL_818;
                }
              }
              else
              {
                if (v577 >= *(_QWORD *)&v572)
                  v577 %= *(_QWORD *)&v572;
                if (v577 != v571)
                  break;
              }
              v575 = (_QWORD *)*v575;
            }
            while (v575);
          }
        }
      }
LABEL_815:
      v579 = operator new();
      *(_QWORD *)(v579 + 16) = "md::components::Collapsible]";
      *(_QWORD *)(v579 + 24) = 27;
      *(_OWORD *)(v579 + 32) = 0u;
      *(_OWORD *)(v579 + 48) = 0u;
      *(_OWORD *)(v579 + 64) = 0u;
      *(_OWORD *)(v579 + 80) = 0u;
      *(_OWORD *)(v579 + 96) = 0u;
      *(_OWORD *)(v579 + 112) = 0u;
      *(_OWORD *)(v579 + 128) = 0u;
      *(_DWORD *)(v579 + 144) = 1065353216;
      *(_OWORD *)(v579 + 152) = 0u;
      *(_OWORD *)(v579 + 168) = 0u;
      *(_QWORD *)(v579 + 184) = 0;
      *(_DWORD *)(v579 + 192) = 1065353216;
      *(_OWORD *)(v579 + 200) = 0u;
      *(_OWORD *)(v579 + 216) = 0u;
      *(_QWORD *)(v579 + 232) = 0;
      *(_DWORD *)(v579 + 240) = 1065353216;
      *(_QWORD *)(v579 + 8) = 0x3FD9D9EF0A6A9A58;
      *(_QWORD *)v579 = &off_1E42B2EC8;
      *(_QWORD *)(v579 + 248) = v569;
      v580 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v569 + 120), 0x3FD9D9EF0A6A9A58uLL, v695);
      v581 = v580[3];
      v580[3] = v579;
      if (v581)
        (*(void (**)(uint64_t))(*(_QWORD *)v581 + 8))(v581);
      *(_QWORD *)buf = 0x3FD9D9EF0A6A9A58;
      *(_QWORD *)&buf[8] = "md::components::Collapsible]";
      *(_QWORD *)v681 = 27;
      gdc::Registry::_registerStorageDataSignals(v569, 0x3FD9D9EF0A6A9A58, (uint64_t)buf, (uint64_t *)(v579 + 104));
LABEL_818:
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace((uint64_t *)v579, v570);
    }
    if (*((_BYTE *)a3 + 92))
    {
      v582 = (uint64_t)a1[6];
      v583 = *(_QWORD *)&__pb[8 * v354];
      v584 = 0x24CEDFE393EA39F1;
      *(_QWORD *)v695 = 0x24CEDFE393EA39F1;
      v585 = *(int8x8_t *)(v582 + 128);
      if (v585)
      {
        v586 = (uint8x8_t)vcnt_s8(v585);
        v586.i16[0] = vaddlv_u8(v586);
        if (v586.u32[0] > 1uLL)
        {
          if (*(_QWORD *)&v585 <= 0x24CEDFE393EA39F1uLL)
            v584 = 0x24CEDFE393EA39F1uLL % *(_QWORD *)&v585;
        }
        else
        {
          v584 = (*(_QWORD *)&v585 - 1) & 0x24CEDFE393EA39F1;
        }
        v587 = *(_QWORD **)(*(_QWORD *)(v582 + 120) + 8 * v584);
        if (v587)
        {
          v588 = (_QWORD *)*v587;
          if (v588)
          {
            if (v586.u32[0] < 2uLL)
            {
              v589 = *(_QWORD *)&v585 - 1;
              while (1)
              {
                v591 = v588[1];
                if (v591 == 0x24CEDFE393EA39F1)
                {
                  if (v588[2] == 0x24CEDFE393EA39F1)
                    goto LABEL_871;
                }
                else if ((v591 & v589) != v584)
                {
                  goto LABEL_840;
                }
                v588 = (_QWORD *)*v588;
                if (!v588)
                  goto LABEL_840;
              }
            }
            do
            {
              v590 = v588[1];
              if (v590 == 0x24CEDFE393EA39F1)
              {
                if (v588[2] == 0x24CEDFE393EA39F1)
                {
LABEL_871:
                  v592 = v588[3];
                  goto LABEL_843;
                }
              }
              else
              {
                if (v590 >= *(_QWORD *)&v585)
                  v590 %= *(_QWORD *)&v585;
                if (v590 != v584)
                  break;
              }
              v588 = (_QWORD *)*v588;
            }
            while (v588);
          }
        }
      }
LABEL_840:
      v592 = operator new();
      *(_QWORD *)(v592 + 16) = "md::components::HideWhenCollapsed]";
      *(_QWORD *)(v592 + 24) = 33;
      *(_OWORD *)(v592 + 32) = 0u;
      *(_OWORD *)(v592 + 48) = 0u;
      *(_OWORD *)(v592 + 64) = 0u;
      *(_OWORD *)(v592 + 80) = 0u;
      *(_OWORD *)(v592 + 96) = 0u;
      *(_OWORD *)(v592 + 112) = 0u;
      *(_OWORD *)(v592 + 128) = 0u;
      *(_DWORD *)(v592 + 144) = 1065353216;
      *(_OWORD *)(v592 + 152) = 0u;
      *(_OWORD *)(v592 + 168) = 0u;
      *(_QWORD *)(v592 + 184) = 0;
      *(_DWORD *)(v592 + 192) = 1065353216;
      *(_OWORD *)(v592 + 200) = 0u;
      *(_OWORD *)(v592 + 216) = 0u;
      *(_QWORD *)(v592 + 232) = 0;
      *(_DWORD *)(v592 + 240) = 1065353216;
      *(_QWORD *)(v592 + 8) = 0x24CEDFE393EA39F1;
      *(_QWORD *)v592 = &off_1E42B3108;
      *(_QWORD *)(v592 + 248) = v582;
      v593 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v582 + 120), 0x24CEDFE393EA39F1uLL, v695);
      v594 = v593[3];
      v593[3] = v592;
      if (v594)
        (*(void (**)(uint64_t))(*(_QWORD *)v594 + 8))(v594);
      *(_QWORD *)buf = 0x24CEDFE393EA39F1;
      *(_QWORD *)&buf[8] = "md::components::HideWhenCollapsed]";
      *(_QWORD *)v681 = 33;
      gdc::Registry::_registerStorageDataSignals(v582, 0x24CEDFE393EA39F1, (uint64_t)buf, (uint64_t *)(v592 + 104));
LABEL_843:
      v699.i64[0] = v583;
      v595 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v592 + 32), (uint64_t)&v699);
      if ((v596 & 1) != 0)
      {
        v601 = *(_BYTE **)(v592 + 88);
        v600 = *(_QWORD *)(v592 + 96);
        if ((unint64_t)v601 >= v600)
        {
          v603 = *(char **)(v592 + 80);
          v604 = v601 - v603;
          v605 = v601 - v603 + 1;
          if (v605 < 0)
            abort();
          v606 = v600 - (_QWORD)v603;
          if (2 * v606 > v605)
            v605 = 2 * v606;
          if (v606 >= 0x3FFFFFFFFFFFFFFFLL)
            v607 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v607 = v605;
          if (v607)
            v608 = (char *)operator new(v607);
          else
            v608 = 0;
          v609 = &v608[v607];
          v602 = (uint64_t)&v608[v604 + 1];
          v610 = (char *)(v603 - v601);
          if (v603 == v601)
            v610 = 0;
          *(_QWORD *)(v592 + 80) = &v608[v604 + (_QWORD)v610];
          *(_QWORD *)(v592 + 88) = v602;
          *(_QWORD *)(v592 + 96) = v609;
          if (v603)
            operator delete(v603);
        }
        else
        {
          v602 = (uint64_t)(v601 + 1);
        }
        *(_QWORD *)(v592 + 88) = v602;
        v597 = *(_QWORD *)(v592 + 248);
      }
      else
      {
        v597 = *(_QWORD *)(v592 + 248);
        if (*(_QWORD *)(v592 + 80) + (((uint64_t)v595 - *(_QWORD *)(v592 + 56)) >> 3) != *(_QWORD *)(v592 + 88))
        {
          v598 = *(_QWORD **)(v592 + 128);
          if (v598)
          {
            while (1)
            {
              *(_QWORD *)buf = &v699;
              *(_QWORD *)&buf[8] = 1;
              *(_QWORD *)v695 = v597;
              v599 = v598[6];
              if (!v599)
                goto LABEL_903;
              (*(void (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v599 + 48))(v599, v695, buf);
              v598 = (_QWORD *)*v598;
              if (!v598)
                goto LABEL_868;
            }
          }
          goto LABEL_868;
        }
      }
      for (k = *(_QWORD **)(v592 + 176); k; k = (_QWORD *)*k)
      {
        *(_QWORD *)buf = &v699;
        *(_QWORD *)&buf[8] = 1;
        *(_QWORD *)v695 = v597;
        v612 = k[6];
        if (!v612)
          goto LABEL_903;
        (*(void (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v612 + 48))(v612, v695, buf);
      }
    }
LABEL_868:
    addPreviousComponents((uint64_t)a1[6], v665, (uint64_t)a1[6], *(_QWORD *)&__pb[8 * v354++]);
    if (v354 != v662)
      goto LABEL_487;
    v224 = __pb;
LABEL_872:
    v49 = v670;
    if (v667)
      operator delete(v667);
LABEL_874:
    if (v224)
      operator delete(v224);
LABEL_876:
    v613 = v641;
    v614 = v641[1];
    if (v614)
    {
      do
      {
        v615 = (uint64_t **)v614;
        v614 = (uint64_t *)*v614;
      }
      while (v614);
    }
    else
    {
      do
      {
        v615 = (uint64_t **)v613[2];
        _ZF = *v615 == (uint64_t *)v613;
        v613 = v615;
      }
      while (!_ZF);
    }
    v134 = v615;
    if (v615 == &v690)
      goto LABEL_882;
  }
  v546 = *(_BYTE **)(v536 + 88);
  v545 = *(_QWORD *)(v536 + 96);
  if ((unint64_t)v546 >= v545)
  {
    v548 = *(_BYTE **)(v536 + 80);
    v549 = v546 - v548;
    v550 = v546 - v548 + 1;
    if (v550 < 0)
      abort();
    v551 = v545 - (_QWORD)v548;
    if (2 * v551 > v550)
      v550 = 2 * v551;
    if (v551 >= 0x3FFFFFFFFFFFFFFFLL)
      v552 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v552 = v550;
    if (v552)
      v553 = (char *)operator new(v552);
    else
      v553 = 0;
    v554 = &v553[v549];
    v553[v549] = v527;
    v547 = (uint64_t)&v553[v549 + 1];
    if (v546 == v548)
      goto LABEL_787;
    if (v549 < 8 || (unint64_t)(v548 - v553) < 0x20)
      goto LABEL_784;
    if (v549 >= 0x20)
    {
      v555 = v549 & 0xFFFFFFFFFFFFFFE0;
      v556 = (__int128 *)(v546 - 16);
      v557 = &v553[v549 - 16];
      v558 = v549 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v559 = *v556;
        *((_OWORD *)v557 - 1) = *(v556 - 1);
        *(_OWORD *)v557 = v559;
        v556 -= 2;
        v557 -= 32;
        v558 -= 32;
      }
      while (v558);
      if (v549 == v555)
        goto LABEL_786;
      if ((v549 & 0x18) == 0)
      {
        v554 -= v555;
        v546 -= v555;
        goto LABEL_784;
      }
    }
    else
    {
      v555 = 0;
    }
    v560 = v555 - (v549 & 0xFFFFFFFFFFFFFFF8);
    v561 = &v546[-v555];
    v562 = &v553[&v546[-v555] - v548 - 8];
    v563 = (uint64_t *)(v561 - 8);
    do
    {
      v564 = *v563--;
      *(_QWORD *)v562 = v564;
      v562 -= 8;
      v560 += 8;
    }
    while (v560);
    if (v549 == (v549 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_786;
    v554 -= v549 & 0xFFFFFFFFFFFFFFF8;
    v546 -= v549 & 0xFFFFFFFFFFFFFFF8;
LABEL_784:
    v565 = v554 - 1;
    do
    {
      v566 = *--v546;
      *v565-- = v566;
    }
    while (v546 != v548);
LABEL_786:
    v546 = *(_BYTE **)(v536 + 80);
    v554 = v553;
LABEL_787:
    *(_QWORD *)(v536 + 80) = v554;
    *(_QWORD *)(v536 + 88) = v547;
    *(_QWORD *)(v536 + 96) = &v553[v552];
    if (v546)
      operator delete(v546);
    goto LABEL_789;
  }
  *v546 = v527;
  v547 = (uint64_t)(v546 + 1);
LABEL_789:
  *(_QWORD *)(v536 + 88) = v547;
  v542 = *(_QWORD *)(v536 + 248);
LABEL_790:
  v567 = *(_QWORD **)(v536 + 176);
  if (!v567)
    goto LABEL_793;
  while (1)
  {
    *(_QWORD *)buf = &v699;
    *(_QWORD *)&buf[8] = 1;
    *(_QWORD *)v695 = v542;
    v568 = v567[6];
    if (!v568)
      break;
    (*(void (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v568 + 48))(v568, v695, buf);
    v567 = (_QWORD *)*v567;
    if (!v567)
      goto LABEL_793;
  }
LABEL_903:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F4AC65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a67;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a67);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C8510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C8510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t *v29;
  _QWORD *v30;
  int8x8_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  _QWORD *i;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  gdc::Registry *v65;
  unint64_t *v66;
  int8x16_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _QWORD v72[2];
  unint64_t v73;
  _QWORD v74[2];

  v3 = *a2;
  v4 = gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>(*a2);
  v5 = *(uint64_t **)(v4 + 56);
  v6 = *(uint64_t **)(v4 + 64);
  v65 = (gdc::Registry *)v3;
  if (v5 == v6)
  {
    v7 = 0;
    goto LABEL_38;
  }
  v63 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *v5;
    if (v9 < v8)
    {
      *(_QWORD *)v9 = v10;
      v9 += 8;
      goto LABEL_4;
    }
    v11 = (v9 - v7) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    if ((v8 - v7) >> 2 > v12)
      v12 = (v8 - v7) >> 2;
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    *(_QWORD *)v15 = v10;
    v16 = v15 + 8;
    if (v9 != v7)
    {
      v17 = v9 - 8 - v7;
      if (v17 >= 0x168)
      {
        if (&v14[v9 - v7 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v14[v9 - v7 - 8])
        {
          v18 = v9;
        }
        else if (&v9[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
        {
          v18 = v9;
        }
        else if ((unint64_t)(v7 - v14) >= 0x20)
        {
          v20 = (v17 >> 3) + 1;
          v18 = &v9[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
          v21 = &v14[8 * v11 - 16];
          v22 = v9 - 16;
          v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_20;
        }
        else
        {
          v18 = v9;
        }
      }
      else
      {
        v18 = v9;
      }
      do
      {
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v18 != v7);
    }
LABEL_20:
    v8 = &v14[8 * v13];
    if (v7)
      operator delete(v7);
    v7 = v15;
    v9 = v16;
LABEL_4:
    ++v5;
  }
  while (v5 != v6);
  if (v7 != v9)
  {
    v25 = (unint64_t *)v7;
    do
    {
      v26 = *v25++;
      gdc::Registry::destroy((uint64_t)v65, v26);
    }
    while (v25 != (unint64_t *)v9);
  }
  a1 = v63;
LABEL_38:
  if (!**(_BYTE **)(a1 + 16)
    || (v27 = (_QWORD *)gdc::Registry::storage<md::components::Asset>((uint64_t)v65),
        v28 = (unint64_t *)v27[7],
        v29 = (unint64_t *)v27[8],
        v28 == v29)
    || (v30 = *(_QWORD **)(a1 + 8), v31 = (int8x8_t)v30[1], !*(_QWORD *)&v31))
  {
LABEL_90:
    if (v7)
      operator delete(v7);
    return;
  }
  v32 = (uint64_t *)v27[10];
LABEL_42:
  v33 = *v32;
  v34 = (uint8x8_t)vcnt_s8(v31);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = *v32;
    if (v33 >= *(_QWORD *)&v31)
      v35 = v33 % *(_QWORD *)&v31;
  }
  else
  {
    v35 = v33 & (*(_QWORD *)&v31 - 1);
  }
  v36 = *(_QWORD **)(*v30 + 8 * v35);
  if (!v36 || (v37 = (_QWORD *)*v36) == 0)
  {
LABEL_87:
    while (1)
    {
      if (++v28 == v29)
        goto LABEL_90;
      v32 += 9;
      v31 = (int8x8_t)v30[1];
      if (v31)
        goto LABEL_42;
    }
  }
  v64 = *v28;
  if (v34.u32[0] < 2uLL)
  {
    v38 = *(_QWORD *)&v31 - 1;
    while (1)
    {
      v40 = v37[1];
      if (v33 == v40)
      {
        if (v37[2] == v33)
          goto LABEL_62;
      }
      else if ((v40 & v38) != v35)
      {
        goto LABEL_87;
      }
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_87;
    }
  }
  while (2)
  {
    v39 = v37[1];
    if (v33 != v39)
    {
      if (v39 >= *(_QWORD *)&v31)
        v39 %= *(_QWORD *)&v31;
      if (v39 != v35)
        goto LABEL_87;
      goto LABEL_51;
    }
    if (v37[2] != v33)
    {
LABEL_51:
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_87;
      continue;
    }
    break;
  }
LABEL_62:
  v41 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForDestruction<>>((uint64_t)v65);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v41, v64);
  v42 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>((uint64_t)v65);
  v73 = v64;
  v43 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v42 + 4, (uint64_t)&v73);
  if ((v44 & 1) != 0)
  {
    v49 = (_BYTE *)v42[11];
    v48 = v42[12];
    if ((unint64_t)v49 >= v48)
    {
      v51 = (char *)v42[10];
      v62 = v49 - v51;
      v52 = v49 - v51 + 1;
      if (v52 < 0)
        abort();
      v53 = v48 - (_QWORD)v51;
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0x3FFFFFFFFFFFFFFFLL)
        v52 = 0x7FFFFFFFFFFFFFFFLL;
      if (v52)
      {
        v54 = v52;
        v55 = (char *)operator new(v52);
        v52 = v54;
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[v52];
      v50 = (uint64_t)&v55[v62 + 1];
      v57 = (char *)(v51 - v49);
      if (v51 == v49)
        v57 = 0;
      v42[10] = (uint64_t)&v55[v62 + (_QWORD)v57];
      v42[11] = v50;
      v42[12] = (uint64_t)v56;
      if (v51)
        operator delete(v51);
    }
    else
    {
      v50 = (uint64_t)(v49 + 1);
    }
    v42[11] = v50;
    v45 = v42[31];
  }
  else
  {
    v45 = v42[31];
    if (v42[10] + (((uint64_t)v43 - v42[7]) >> 3) != v42[11])
    {
      for (i = (_QWORD *)v42[16]; i; i = (_QWORD *)*i)
      {
        v66 = &v73;
        v67.i64[0] = 1;
        v74[0] = v45;
        v47 = i[6];
        if (!v47)
          goto LABEL_94;
        (*(void (**)(uint64_t, _QWORD *, unint64_t **))(*(_QWORD *)v47 + 48))(v47, v74, &v66);
      }
LABEL_86:
      LOWORD(v66) = *((_WORD *)v32 + 8);
      v67 = vextq_s8(*(int8x16_t *)v32, *(int8x16_t *)v32, 8uLL);
      v68 = *(_OWORD *)((char *)v32 + 20);
      v69 = *(_OWORD *)((char *)v32 + 36);
      v70 = *(_OWORD *)((char *)v32 + 52);
      v71 = 0;
      v72[0] = 0;
      *(_QWORD *)((char *)v72 + 5) = 0;
      v60 = gdc::Registry::create(v65);
      v61 = (uint64_t *)gdc::Registry::storage<md::components::ReferencedAssetInstance>((uint64_t)v65);
      gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::emplace(v61, v60, (__int128 *)&v66);
      addPreviousComponents((uint64_t)v65, v64, (uint64_t)v65, v60);
      goto LABEL_87;
    }
  }
  v58 = (_QWORD *)v42[22];
  if (!v58)
    goto LABEL_86;
  while (1)
  {
    v66 = &v73;
    v67.i64[0] = 1;
    v74[0] = v45;
    v59 = v58[6];
    if (!v59)
      break;
    (*(void (**)(uint64_t, _QWORD *, unint64_t **))(*(_QWORD *)v59 + 48))(v59, v74, &v66);
    v58 = (_QWORD *)*v58;
    if (!v58)
      goto LABEL_86;
  }
LABEL_94:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F4ACDB8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void addPreviousComponents(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  _DWORD *v68;
  _BYTE *v69;
  _BYTE *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];
  char v89;

  v8 = (_QWORD *)gdc::Registry::storage<md::components::CustomRenderState>(a1);
  v9 = a2 >> 39;
  v10 = v8[4];
  if (a2 >> 39 < (v8[5] - v10) >> 3
    && (v11 = *(_QWORD *)(v10 + 8 * v9)) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F)), v14 = v8[7], v13 = v8[8], v12 < (v13 - v14) >> 3)
    && ((v15 = v14 + 8 * v12, v15 != v13) ? (v16 = *(_DWORD *)(v15 + 4) == HIDWORD(a2)) : (v16 = 0), v16))
  {
    v85 = v8[11];
    v17 = v8[10] + 24 * v12;
  }
  else
  {
    v17 = v8[11];
    v85 = v17;
  }
  v86 = v17;
  v87 = a4;
  v18 = (_QWORD *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a1);
  v19 = v18[4];
  if (v9 < (v18[5] - v19) >> 3
    && (v20 = *(_QWORD *)(v19 + 8 * v9)) != 0
    && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(a2) & 0x7F)), v23 = v18[7], v22 = v18[8], v21 < (v22 - v23) >> 3)
    && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == HIDWORD(a2)) : (v25 = 0), v25))
  {
    v84 = (_BYTE *)v18[11];
    v26 = (_BYTE *)(v18[10] + v21);
  }
  else
  {
    v26 = (_BYTE *)v18[11];
    v84 = v26;
  }
  v27 = (_QWORD *)gdc::Registry::storage<md::components::NonTiled>(a1);
  v28 = v27[4];
  if (v9 < (v27[5] - v28) >> 3
    && (v29 = *(_QWORD *)(v28 + 8 * v9)) != 0
    && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(a2) & 0x7F)), v32 = v27[7], v31 = v27[8], v30 < (v31 - v32) >> 3)
    && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == HIDWORD(a2)) : (v34 = 0), v34))
  {
    v82 = v27[11];
    v35 = v27[10] + v30;
  }
  else
  {
    v35 = v27[11];
    v82 = v35;
  }
  v83 = v35;
  v36 = (_QWORD *)gdc::Registry::storage<md::components::CustomZIndex>(a1);
  v37 = v36[4];
  if (v9 < (v36[5] - v37) >> 3
    && (v38 = *(_QWORD *)(v37 + 8 * v9)) != 0
    && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(a2) & 0x7F)), v41 = v36[7], v40 = v36[8], v39 < (v40 - v41) >> 3)
    && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == HIDWORD(a2)) : (v43 = 0), v43))
  {
    v44 = v36[11];
    v45 = v36[10] + 4 * v39;
  }
  else
  {
    v44 = v36[11];
    v45 = v44;
  }
  v46 = (_QWORD *)gdc::Registry::storage<md::components::OcclusionType>(a1);
  v47 = v46[4];
  if (v9 < (v46[5] - v47) >> 3
    && (v48 = *(_QWORD *)(v47 + 8 * v9)) != 0
    && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(a2) & 0x7F)), v51 = v46[7], v50 = v46[8], v49 < (v50 - v51) >> 3)
    && ((v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == HIDWORD(a2)) : (v53 = 0), v53))
  {
    v54 = HIDWORD(a2);
    v55 = (_BYTE *)v46[11];
    v56 = (_BYTE *)(v46[10] + v49);
  }
  else
  {
    v54 = HIDWORD(a2);
    v55 = (_BYTE *)v46[11];
    v56 = v55;
  }
  v57 = (_QWORD *)gdc::Registry::storage<md::components::StencilBucket>(a1);
  v58 = v57[4];
  if (v9 < (v57[5] - v58) >> 3
    && (v59 = *(_QWORD *)(v58 + 8 * v9)) != 0
    && (v60 = *(unsigned __int16 *)(v59 + 2 * (HIDWORD(a2) & 0x7F)), v62 = v57[7], v61 = v57[8], v60 < (v61 - v62) >> 3)
    && ((v63 = v62 + 8 * v60, v63 != v61) ? (v64 = *(_DWORD *)(v63 + 4) == (_DWORD)v54) : (v64 = 0), v64))
  {
    v65 = (_BYTE *)v57[11];
    v66 = (_BYTE *)(v57[10] + v60);
  }
  else
  {
    v65 = (_BYTE *)v57[11];
    v66 = v65;
  }
  if (v56 == v55)
    v67 = 0;
  else
    v67 = v56;
  if (v45 == v44)
    v68 = 0;
  else
    v68 = (_DWORD *)v45;
  if (v26 == v84)
    v69 = 0;
  else
    v69 = v26;
  if (v66 == v65)
    v70 = 0;
  else
    v70 = v66;
  if (v86 != v85 && v86)
  {
    v71 = *(std::__shared_weak_count **)(v86 + 8);
    v88[0] = *(_QWORD *)v86;
    v88[1] = (uint64_t)v71;
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(p_shared_owners);
      while (__stxr(v73 + 1, p_shared_owners));
    }
    v89 = *(_BYTE *)(v86 + 16);
    v74 = (uint64_t *)gdc::Registry::storage<md::components::CustomRenderState>(a3);
    gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(v74, v87, v88);
    if (v71)
    {
      v75 = (unint64_t *)&v71->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  if (v69)
  {
    LOBYTE(v88[0]) = *v69;
    v77 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a3);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v77, v87, v88);
  }
  if (v83 != v82 && v83)
  {
    v78 = (uint64_t *)gdc::Registry::storage<md::components::NonTiled>(a3);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v78, v87);
  }
  if (v68)
  {
    LODWORD(v88[0]) = *v68;
    v79 = (uint64_t *)gdc::Registry::storage<md::components::CustomZIndex>(a3);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v79, v87, v88);
  }
  if (v67)
  {
    LOBYTE(v88[0]) = *v67;
    v80 = (uint64_t *)gdc::Registry::storage<md::components::OcclusionType>(a3);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v80, v87, v88);
  }
  if (v70)
  {
    LOBYTE(v88[0]) = *v70;
    v81 = (uint64_t *)gdc::Registry::storage<md::components::StencilBucket>(a3);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v81, v87, v88);
  }
}

void sub_19F4AD1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::CustomZIndex>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x11C900ADCB57DAC9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x11C900ADCB57DAC9;
      if (*(_QWORD *)&v3 <= 0x11C900ADCB57DAC9uLL)
        v5 = 0x11C900ADCB57DAC9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x11C900ADCB57DAC9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x11C900ADCB57DAC9)
            {
              if (v7[2] == 0x11C900ADCB57DAC9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x11C900ADCB57DAC9)
          {
            if (v7[2] == 0x11C900ADCB57DAC9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::CustomZIndex]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2F28;
  *(_QWORD *)(v11 + 8) = 0x11C900ADCB57DAC9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x11C900ADCB57DAC9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x11C900ADCB57DAC9;
  v15[1] = "md::components::CustomZIndex]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x11C900ADCB57DAC9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4AD404(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::OcclusionType>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2CA863C195D6BB81;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2CA863C195D6BB81;
      if (*(_QWORD *)&v3 <= 0x2CA863C195D6BB81uLL)
        v5 = 0x2CA863C195D6BB81uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2CA863C195D6BB81;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2CA863C195D6BB81)
            {
              if (v7[2] == 0x2CA863C195D6BB81)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2CA863C195D6BB81)
          {
            if (v7[2] == 0x2CA863C195D6BB81)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::OcclusionType]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2F88;
  *(_QWORD *)(v11 + 8) = 0x2CA863C195D6BB81;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2CA863C195D6BB81uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2CA863C195D6BB81;
  v15[1] = "md::components::OcclusionType]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2CA863C195D6BB81, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4AD62C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::StencilBucket>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCB3B3DB6B3944ED2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCB3B3DB6B3944ED2;
      if (*(_QWORD *)&v3 <= 0xCB3B3DB6B3944ED2)
        v5 = 0xCB3B3DB6B3944ED2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCB3B3DB6B3944ED2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCB3B3DB6B3944ED2)
            {
              if (v7[2] == 0xCB3B3DB6B3944ED2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCB3B3DB6B3944ED2)
          {
            if (v7[2] == 0xCB3B3DB6B3944ED2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::StencilBucket]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2FB8;
  *(_QWORD *)(v11 + 8) = 0xCB3B3DB6B3944ED2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCB3B3DB6B3944ED2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCB3B3DB6B3944ED2;
  v15[1] = "md::components::StencilBucket]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCB3B3DB6B3944ED2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4AD854(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::StencilBucket>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::StencilBucket>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::StencilBucket>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::StencilBucket>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::OcclusionType>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::OcclusionType>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::OcclusionType>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::OcclusionType>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::CustomZIndex>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomZIndex>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::CustomZIndex>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomZIndex>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::NonTiled>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::NonTiled>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::NonTiled>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::NonTiled>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::Asset>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::Asset>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 72 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_WORD *)(v15 - 56);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 72);
  *(_WORD *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(v15 - 52);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 - 48);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 - 44);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 - 40);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 36);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 32);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 28);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 24);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 20);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 16);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 12);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 8);
  a1[11] -= 72;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Asset>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::components::Asset>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::SubtileZone>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::SubtileZone>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::SubtileZone>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::components::SubtileZone>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::Asset>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  v31 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if ((v6 & 1) != 0)
  {
    v13 = (char *)a1[11];
    v12 = a1[12];
    if ((unint64_t)v13 >= v12)
    {
      v18 = (char *)a1[10];
      v19 = 0x8E38E38E38E38E39 * ((v13 - v18) >> 3) + 1;
      if (v19 > 0x38E38E38E38E38ELL)
        goto LABEL_30;
      v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - (_QWORD)v18) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x1C71C71C71C71C7)
        v21 = 0x38E38E38E38E38ELL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 > 0x38E38E38E38E38ELL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v22 = (char *)operator new(72 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * ((v13 - v18) >> 3)];
      v24 = a3[3];
      *((_OWORD *)v23 + 2) = a3[2];
      *((_OWORD *)v23 + 3) = v24;
      *((_QWORD *)v23 + 8) = *((_QWORD *)a3 + 8);
      v25 = a3[1];
      *(_OWORD *)v23 = *a3;
      *((_OWORD *)v23 + 1) = v25;
      v17 = v23 + 72;
      if (v13 != v18)
      {
        do
        {
          *(_OWORD *)(v23 - 72) = *(_OWORD *)(v13 - 72);
          v26 = *(_OWORD *)(v13 - 56);
          v27 = *(_OWORD *)(v13 - 40);
          v28 = *(_OWORD *)(v13 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v13 - 1);
          *(_OWORD *)(v23 - 24) = v28;
          *(_OWORD *)(v23 - 40) = v27;
          *(_OWORD *)(v23 - 56) = v26;
          v23 -= 72;
          v13 -= 72;
        }
        while (v13 != v18);
        v13 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v23;
      a1[11] = (uint64_t)v17;
      a1[12] = (uint64_t)&v22[72 * v21];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_OWORD *)v13 = *a3;
      v14 = a3[1];
      v15 = a3[2];
      v16 = a3[3];
      *((_QWORD *)v13 + 8) = *((_QWORD *)a3 + 8);
      *((_OWORD *)v13 + 2) = v15;
      *((_OWORD *)v13 + 3) = v16;
      *((_OWORD *)v13 + 1) = v14;
      v17 = v13 + 72;
    }
    a1[11] = (uint64_t)v17;
    v9 = a1[31];
  }
  else
  {
    v7 = a1[10] + 72 * (((uint64_t)v5 - a1[7]) >> 3);
    v8 = *a3;
    *(_WORD *)(v7 + 16) = *((_WORD *)a3 + 8);
    *(_OWORD *)v7 = v8;
    *(_DWORD *)(v7 + 20) = *((_DWORD *)a3 + 5);
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a3 + 6);
    *(_DWORD *)(v7 + 28) = *((_DWORD *)a3 + 7);
    *(_DWORD *)(v7 + 32) = *((_DWORD *)a3 + 8);
    *(_DWORD *)(v7 + 36) = *((_DWORD *)a3 + 9);
    *(_DWORD *)(v7 + 40) = *((_DWORD *)a3 + 10);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)a3 + 11);
    *(_DWORD *)(v7 + 48) = *((_DWORD *)a3 + 12);
    *(_DWORD *)(v7 + 52) = *((_DWORD *)a3 + 13);
    *(_DWORD *)(v7 + 56) = *((_DWORD *)a3 + 14);
    *(_DWORD *)(v7 + 60) = *((_DWORD *)a3 + 15);
    *(_DWORD *)(v7 + 64) = *((_DWORD *)a3 + 16);
    v9 = a1[31];
    if (v7 != a1[11])
    {
      v10 = (_QWORD *)a1[16];
      if (v10)
      {
        while (1)
        {
          v33 = &v31;
          v34 = 1;
          v32 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v32, &v33);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v29 = (_QWORD *)a1[22];
  if (v29)
  {
    while (1)
    {
      v33 = &v31;
      v34 = 1;
      v32 = v9;
      v30 = v29[6];
      if (!v30)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v30 + 48))(v30, &v32, &v33);
      v29 = (_QWORD *)*v29;
      if (!v29)
        return;
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v23 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v23);
  if ((v6 & 1) != 0)
  {
    v12 = (_OWORD *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_OWORD *)a1[10];
      v15 = v12 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = *(_OWORD *)a3;
      v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *(v12 - 1);
          v20 -= 16;
          --v12;
        }
        while (v12 != v14);
        v12 = (_OWORD *)a1[10];
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = *(_OWORD *)a3;
      v13 = v12 + 1;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)(a1[10] + 2 * ((_QWORD)v5 - a1[7]));
    *v7 = *(_DWORD *)a3;
    v7[1] = *(_DWORD *)(a3 + 4);
    v7[2] = *(_DWORD *)(a3 + 8);
    v7[3] = *(_DWORD *)(a3 + 12);
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v25 = &v23;
          v26 = 1;
          v24 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v24, &v25);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)a1[22];
  if (v21)
  {
    while (1)
    {
      v25 = &v23;
      v26 = 1;
      v24 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v24, &v25);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::MarketMask>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::MarketMask>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::MarketMask>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::components::MarketMask>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::PendingMaterial>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::PendingMaterial>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::AlbedoTint>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::AlbedoTint>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::AlbedoTint>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::components::AlbedoTint>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 304 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 304);
  v17 = *(_OWORD *)(v15 - 288);
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 - 272);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 268);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 264);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 260);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 256);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 252);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 248);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 244);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 240);
  *(_DWORD *)(v14 + 68) = *(_DWORD *)(v15 - 236);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 - 232);
  *(_DWORD *)(v14 + 76) = *(_DWORD *)(v15 - 228);
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(v15 - 224);
  *(_DWORD *)(v14 + 84) = *(_DWORD *)(v15 - 220);
  *(_DWORD *)(v14 + 88) = *(_DWORD *)(v15 - 216);
  *(_DWORD *)(v14 + 92) = *(_DWORD *)(v15 - 212);
  *(_DWORD *)(v14 + 96) = *(_DWORD *)(v15 - 208);
  *(_DWORD *)(v14 + 100) = *(_DWORD *)(v15 - 204);
  *(_DWORD *)(v14 + 104) = *(_DWORD *)(v15 - 200);
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(v15 - 192);
  *(_QWORD *)(v14 + 120) = *(_QWORD *)(v15 - 184);
  *(_QWORD *)(v14 + 128) = *(_QWORD *)(v15 - 176);
  *(_QWORD *)(v14 + 136) = *(_QWORD *)(v15 - 168);
  *(_QWORD *)(v14 + 144) = *(_QWORD *)(v15 - 160);
  *(_QWORD *)(v14 + 152) = *(_QWORD *)(v15 - 152);
  *(_QWORD *)(v14 + 160) = *(_QWORD *)(v15 - 144);
  *(_QWORD *)(v14 + 168) = *(_QWORD *)(v15 - 136);
  *(_QWORD *)(v14 + 176) = *(_QWORD *)(v15 - 128);
  *(_QWORD *)(v14 + 184) = *(_QWORD *)(v15 - 120);
  *(_QWORD *)(v14 + 192) = *(_QWORD *)(v15 - 112);
  *(_QWORD *)(v14 + 200) = *(_QWORD *)(v15 - 104);
  *(_QWORD *)(v14 + 208) = *(_QWORD *)(v15 - 96);
  *(_QWORD *)(v14 + 216) = *(_QWORD *)(v15 - 88);
  *(_QWORD *)(v14 + 224) = *(_QWORD *)(v15 - 80);
  *(_QWORD *)(v14 + 232) = *(_QWORD *)(v15 - 72);
  *(_QWORD *)(v14 + 240) = *(_QWORD *)(v15 - 64);
  *(_QWORD *)(v14 + 248) = *(_QWORD *)(v15 - 56);
  *(_QWORD *)(v14 + 256) = *(_QWORD *)(v15 - 48);
  *(_QWORD *)(v14 + 264) = *(_QWORD *)(v15 - 40);
  *(_QWORD *)(v14 + 272) = *(_QWORD *)(v15 - 32);
  *(_QWORD *)(v14 + 280) = *(_QWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 288) = *(_QWORD *)(v15 - 16);
  *(_QWORD *)(v14 + 296) = *(_QWORD *)(v15 - 8);
  a1[11] -= 304;
  v18 = (_QWORD *)a1[28];
  if (!v18)
    return 1;
  v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v19;
    v20 = v18[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v24, v25);
    v18 = (_QWORD *)*v18;
    if (!v18)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::contains(v21, v22);
}

BOOL gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

gss::Allocator *std::__split_buffer<md::components::ClientState>::~__split_buffer(gss::Allocator *this)
{
  gss::Allocator *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v1 = this;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != v2)
  {
    do
    {
      v5 = v3 - 2;
      *((_QWORD *)v1 + 2) = v3 - 2;
      if (!*((_BYTE *)v3 - 2) && *v5)
      {
        v6 = gss::Allocator::instance(this);
        this = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(v3 - 2), *((unsigned __int16 *)v3 - 2));
        *(v3 - 2) = 0;
        v5 = (_QWORD *)*((_QWORD *)v1 + 2);
      }
      v3 = v5;
    }
    while (v5 != v2);
  }
  if (*(_QWORD *)v1)
    operator delete(*(void **)v1);
  return v1;
}

uint64_t gdc::ComponentStorageWrapper<md::components::ClientState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::ClientState>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::ClientState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::ClientState>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::ClientState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  gss::Allocator *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v25 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_QWORD *)(a1[10] + 16 * v7);
  v15 = (gss::Allocator *)geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  if (v14 != (_QWORD *)(v16 - 16))
  {
    if (!*((_BYTE *)v14 + 14) && *v14)
    {
      v17 = gss::Allocator::instance(v15);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, *v14, *((unsigned __int16 *)v14 + 6));
    }
    *(_QWORD *)((char *)v14 + 7) = 0;
    *v14 = 0;
    *((_BYTE *)v14 + 15) = 1;
    v15 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v14, v16 - 16);
    v16 = a1[11];
  }
  v18 = (_QWORD *)(v16 - 16);
  if (!*(_BYTE *)(v16 - 2))
  {
    if (*v18)
    {
      v19 = gss::Allocator::instance(v15);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 40))(v19, *(_QWORD *)(v16 - 16), *(unsigned __int16 *)(v16 - 4));
      *(_QWORD *)(v16 - 16) = 0;
    }
  }
  a1[11] = v18;
  v20 = (_QWORD *)a1[28];
  if (!v20)
    return 1;
  v21 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    v26 = v21;
    v22 = v20[6];
    if (!v22)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v22 + 48))(v22, &v26, v27);
    v20 = (_QWORD *)*v20;
    if (!v20)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::ClientState>::contains(v23, v24);
}

BOOL gdc::ComponentStorageWrapper<md::components::ClientState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,md::components::ClientState>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  gss::Allocator *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (gss::Allocator *)a1[6];
    if (v3 != v2)
    {
      do
      {
        if (!*(_BYTE *)(v3 - 2) && *(_QWORD *)(v3 - 16))
        {
          v5 = gss::Allocator::instance(v4);
          v4 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v3 - 16), *(unsigned __int16 *)(v3 - 4));
          *(_QWORD *)(v3 - 16) = 0;
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (gss::Allocator *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)*a1;
  if (*a1)
  {
    v8 = (_QWORD *)a1[1];
    v9 = (_QWORD *)*a1;
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          MEMORY[0x1A1AF4E00](v10, 0x1000C40104B78CFLL);
      }
      while (v8 != v7);
      v9 = (_QWORD *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 96 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 80);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 96);
  *(_QWORD *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 - 72);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 - 68);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 - 64);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 60);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 56);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 52);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 48);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 44);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 40);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 36);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 32);
  *(_DWORD *)(v14 + 68) = *(_DWORD *)(v15 - 28);
  v17 = *(_QWORD *)(v15 - 11);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 85) = v17;
  a1[11] -= 96;
  v18 = (_QWORD *)a1[28];
  if (!v18)
    return 1;
  v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v19;
    v20 = v18[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v24, v25);
    v18 = (_QWORD *)*v18;
    if (!v18)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::contains(v21, v22);
}

BOOL gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C85A0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8558;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8558;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::AssetContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0AF0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::AssetContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0AF0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::AssetContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::SelectedLabelLayerDataSource::~SelectedLabelLayerDataSource(md::SelectedLabelLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  md::SelectedLabelLayerDataSource *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E42A5E00;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 112);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 824));
  *(_QWORD *)this = &off_1E42990B0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = (md::SelectedLabelLayerDataSource *)*((_QWORD *)this + 100);
  if (v6 == (md::SelectedLabelLayerDataSource *)((char *)this + 776))
  {
    v7 = 4;
    v6 = (md::SelectedLabelLayerDataSource *)((char *)this + 776);
    goto LABEL_12;
  }
  if (v6)
  {
    v7 = 5;
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  md::SelectedLabelLayerDataSource *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E42A5E00;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 112);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 824));
  *(_QWORD *)this = &off_1E42990B0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = (md::SelectedLabelLayerDataSource *)*((_QWORD *)this + 100);
  if (v6 == (md::SelectedLabelLayerDataSource *)((char *)this + 776))
  {
    v7 = 4;
    v6 = (md::SelectedLabelLayerDataSource *)((char *)this + 776);
  }
  else
  {
    if (!v6)
    {
LABEL_13:
      *((_QWORD *)this + 94) = &off_1E42B4D50;

      md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
      JUMPOUT(0x1A1AF4E00);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  goto LABEL_13;
}

void md::SelectedLabelLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  _BYTE v12[8];
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 888))
    v3 = a2 == a3;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = a2;
    do
    {
      v7 = *v5;
      v8 = *(uint64_t **)(*v5 + 16);
      v9 = *((unsigned __int8 *)v8 + 8);
      v10 = *v8;
      v17 = 0;
      v18 = 0;
      v15 = v10;
      v16 = v9;
      v18 = **(_QWORD **)(a1 + 888);
      if (*(_BYTE *)(v7 + 96))
        v11 = *(_DWORD *)(v7 + 100);
      else
        v11 = 2147483646;
      gdc::ResourceKey::ResourceKey((uint64_t)v12, *(_WORD *)(a1 + 584), (uint64_t)&v15, 0x18uLL, *(_QWORD *)(v7 + 112), v11);
      gdc::LayerDataRequest::request(*v5, (uint64_t)v12, 0);
      if (v13 != v14)
        free(v13);
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void md::SelectedLabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  int32x2_t *v23;
  __int32 v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count **v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned __int8 v29;
  char *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  _QWORD v49[2];
  std::__shared_weak_count **v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[3];
  _QWORD v58[2];

  memset(__p, 0, sizeof(__p));
  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_17;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_17:
    v12 = 0;
LABEL_18:
    v55 = v12;
    v56 = 0;
    if (v12)
      goto LABEL_19;
    goto LABEL_15;
  }
  v10 = *((_QWORD *)v8 + 3);
  v12 = *(_QWORD *)(v10 + 112);
  v11 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v11)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v55 = v12;
  v56 = v11;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v12 = v55;
    if (v55)
      goto LABEL_19;
LABEL_15:
    v18 = operator new(0x2F8uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_1E42DB0F0;
    v52 = 0uLL;
    *(_QWORD *)&v19 = md::LabelLayerData::LabelLayerData(v18 + 3, a2, &v52, (uint64_t)__p);
    *((_QWORD *)&v19 + 1) = v18;
    *(_OWORD *)a4 = v19;
    v20 = v56;
    if (!v56)
      goto LABEL_59;
    goto LABEL_56;
  }
  v12 = v55;
  if (!v55)
    goto LABEL_15;
LABEL_19:
  v53 = 0;
  v54 = 0;
  v21 = *(std::__shared_weak_count **)(a1 + 816);
  if (v21)
  {
    v22 = std::__shared_weak_count::lock(v21);
    v54 = v22;
    if (v22)
    {
      v53 = *(_QWORD *)(a1 + 808);
      if (v53)
      {
        gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
        v23 = *(int32x2_t **)(a2 + 16);
        v24 = v23[1].i32[0];
        LOBYTE(v52) = -1;
        BYTE1(v52) = v24;
        *(int32x2_t *)((char *)&v52 + 4) = vrev64_s32(*v23);
        v50 = 0;
        v51 = 0;
        v25 = *(std::__shared_weak_count **)(*(_QWORD *)(v12 + 8) + 16);
        if (v25)
        {
          std::mutex::lock((std::mutex *)(a1 + 824));
          v26 = *(std::__shared_weak_count ***)(a1 + 888);
          if (!v26 || v25 != *v26)
          {
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            std::mutex::unlock((std::mutex *)(a1 + 824));
            goto LABEL_51;
          }
          v25 = *(std::__shared_weak_count **)(a1 + 896);
          if (v25)
          {
            v27 = (unint64_t *)&v25->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v50 = v26;
          v51 = v25;
          std::mutex::unlock((std::mutex *)(a1 + 824));
        }
        else
        {
          v26 = 0;
        }
        v29 = md::LabelLayerDataSource::toLabelTileType(*(unsigned __int16 *)(a1 + 32));
        v30 = (char *)operator new(0x170uLL);
        v31 = (std::__shared_weak_count *)v30;
        v32 = v12 + 144;
        *((_QWORD *)v30 + 1) = 0;
        v33 = (unint64_t *)(v30 + 8);
        *((_QWORD *)v30 + 2) = 0;
        *(_QWORD *)v30 = &off_1E42DDF88;
        v34 = v30 + 24;
        v58[0] = v26;
        v58[1] = v25;
        if (v25)
        {
          v35 = (unint64_t *)&v25->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        md::LabelTile::LabelTile((unsigned __int8 *)v30 + 24, (uint64_t)&v52, v32, v29, &v53, 0, v58, 0);
        if (v25)
        {
          v37 = (unint64_t *)&v25->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v49[0] = v34;
        v49[1] = v31;
        v39 = operator new(0x2F8uLL);
        v39[1] = 0;
        v39[2] = 0;
        *v39 = &off_1E42DB0F0;
        *(_QWORD *)a4 = md::LabelLayerData::LabelLayerData(v39 + 3, a2, v49, (uint64_t)__p);
        *(_QWORD *)(a4 + 8) = v39;
        do
          v40 = __ldaxr(v33);
        while (__stlxr(v40 - 1, v33));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        v41 = v51;
        if (v51)
        {
          v42 = (unint64_t *)&v51->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
LABEL_51:
        v22 = v54;
        if (v54)
          goto LABEL_52;
        goto LABEL_55;
      }
    }
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (v22)
  {
LABEL_52:
    v44 = (unint64_t *)&v22->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v20 = v56;
      if (!v56)
        goto LABEL_59;
      goto LABEL_56;
    }
  }
LABEL_55:
  v20 = v56;
  if (!v56)
    goto LABEL_59;
LABEL_56:
  v46 = (unint64_t *)&v20->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v48 = __p[0];
    if (__p[0])
      goto LABEL_60;
    return;
  }
LABEL_59:
  v48 = __p[0];
  if (__p[0])
LABEL_60:
    operator delete(v48);
}

void sub_19F4AFF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelLayerData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelLayerData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelLayerData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::LabelTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelTile>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unsigned __int8 v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_56;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    goto LABEL_56;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 288);
    std::mutex::lock((std::mutex *)(v6 + 568));
    v7 = *(_QWORD **)(v6 + 648);
    v8 = *(_QWORD *)(v6 + 656);
    if ((unint64_t)v7 >= v8)
    {
      v13 = *(_QWORD *)(v6 + 640);
      v14 = ((uint64_t)v7 - v13) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        abort();
      v16 = v8 - v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v15;
      if (v17)
      {
        v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 664) + 16))(*(_QWORD *)(v6 + 664), 16 * v17, 8);
        v19 = (_OWORD *)(v18 + 16 * v14);
        v20 = v18 + 16 * v17;
        if (v18)
        {
          v21 = *(_OWORD *)(a1 + 48);
          *v19 = v21;
          if (*((_QWORD *)&v21 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
        }
      }
      else
      {
        v20 = 0;
        v19 = (_OWORD *)(16 * v14);
      }
      v12 = v19 + 1;
      v24 = *(_QWORD **)(v6 + 648);
      v25 = *(_QWORD **)(v6 + 640);
      if (v24 == v25)
      {
        *(_QWORD *)(v6 + 640) = v19;
        *(_QWORD *)(v6 + 648) = v12;
        v28 = *(_QWORD *)(v6 + 656);
        *(_QWORD *)(v6 + 656) = v20;
      }
      else
      {
        do
        {
          v26 = *((_OWORD *)v24 - 1);
          v24 -= 2;
          *--v19 = v26;
          *v24 = 0;
          v24[1] = 0;
        }
        while (v24 != v25);
        v24 = *(_QWORD **)(v6 + 640);
        v27 = *(_QWORD **)(v6 + 648);
        *(_QWORD *)(v6 + 640) = v19;
        *(_QWORD *)(v6 + 648) = v12;
        v28 = *(_QWORD *)(v6 + 656);
        *(_QWORD *)(v6 + 656) = v20;
        while (v27 != v24)
        {
          v29 = (std::__shared_weak_count *)*(v27 - 1);
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v27 -= 2;
        }
      }
      if (v24)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 664) + 40))(*(_QWORD *)(v6 + 664), v24, v28 - (_QWORD)v24);
    }
    else
    {
      if (v7)
      {
        *v7 = *(_QWORD *)(a1 + 48);
        v9 = *(_QWORD *)(a1 + 56);
        v7[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
      }
      v12 = v7 + 2;
    }
    *(_QWORD *)(v6 + 648) = v12;
    v32 = atomic_load((unsigned __int8 *)(v6 + 632));
    atomic_store(1u, (unsigned __int8 *)(v6 + 632));
    std::mutex::unlock((std::mutex *)(v6 + 568));
    if ((v32 & 1) == 0)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      v35 = *(_QWORD *)(*(_QWORD *)(v5 + 152) + 112);
      do
        v36 = __ldxr(p_shared_weak_owners);
      while (__stxr(v36 + 1, p_shared_weak_owners));
      v37 = operator new(0x20uLL);
      *v37 = &off_1E42CD460;
      v37[1] = v5;
      v37[2] = v4;
      v37[3] = v6;
      v53 = v37;
      geo::TaskQueue::async(&v50, v35, v52);
      v38 = v51;
      if (v51)
      {
        v39 = (unint64_t *)&v51->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v53;
      if (v53 == v52)
      {
        v42 = 4;
        v41 = v52;
      }
      else
      {
        if (!v53)
        {
LABEL_51:
          std::__shared_weak_count::__release_weak(v4);
          goto LABEL_52;
        }
        v42 = 5;
      }
      (*(void (**)(void))(*v41 + 8 * v42))();
      goto LABEL_51;
    }
  }
LABEL_52:
  v43 = (unint64_t *)&v4->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_56:
  v45 = *(std::__shared_weak_count **)(a1 + 296);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 256, *(_QWORD **)(a1 + 264));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 224, *(_QWORD **)(a1 + 232));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 192, *(_QWORD **)(a1 + 200));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 160, *(_QWORD **)(a1 + 168));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 128, *(_QWORD **)(a1 + 136));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 96, *(_QWORD **)(a1 + 104));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 64, *(_QWORD **)(a1 + 72));
  v46 = *(std::__shared_weak_count **)(a1 + 56);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(std::__shared_weak_count **)(a1 + 40);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
}

void sub_19F4B04D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  char *v17;
  char *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
    {
LABEL_6:
      std::__shared_weak_count::__release_weak(v16);
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v23 = *(std::__shared_weak_count **)(v15 + 296);
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 256, *(_QWORD **)(v15 + 264));
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 224, *(_QWORD **)(v15 + 232));
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 192, *(_QWORD **)(v15 + 200));
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 160, *(_QWORD **)(v15 + 168));
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 128, *(_QWORD **)(v15 + 136));
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 96, *(_QWORD **)(v15 + 104));
      std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 64, *(_QWORD **)(v15 + 72));
      v24 = *(std::__shared_weak_count **)(v15 + 56);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = *(std::__shared_weak_count **)(v15 + 40);
      if (v27)
        std::__shared_weak_count::__release_weak(v27);
      _Unwind_Resume(a1);
    }
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  goto LABEL_6;
}

void md::SelectedLabelLayerDataSource::setSelectedRoadFeature(md::SelectedLabelLayerDataSource *this, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  if (a2)
  {
    v16 = a2;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v17, a3, a4);
    v21 = v16;
    v22 = v17;
    v23 = v18;
    v17 = 0uLL;
    v24 = v19;
    v25 = v20;
    *(_QWORD *)&v18 = 0;
    v19 = 0uLL;
    *(_QWORD *)&v20 = 0;
    v26 = 1;
    md::SelectedLabelLayerDataSource::resetSelectedFeatureID((uint64_t)this, (uint64_t)&v21);
    if (!v26)
      goto LABEL_5;
    if (SBYTE7(v25) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v25 + 1) + 40))(*((_QWORD *)&v25 + 1), v24, v25 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SBYTE7(v23) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SBYTE7(v20) & 0x80000000) == 0)
          goto LABEL_6;
        goto LABEL_14;
      }
    }
    else if ((SBYTE7(v23) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v23 + 1) + 40))(*((_QWORD *)&v23 + 1), v22, v23 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SBYTE7(v20) & 0x80000000) == 0)
    {
LABEL_6:
      if ((SBYTE7(v18) & 0x80000000) == 0)
        return;
LABEL_15:
      v5 = v17;
      v6 = *((_QWORD *)&v18 + 1);
      v7 = v18;
      goto LABEL_18;
    }
LABEL_14:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v20 + 1) + 40))(*((_QWORD *)&v20 + 1), v19, v20 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SBYTE7(v18) & 0x80000000) == 0)
      return;
    goto LABEL_15;
  }
  v8[0] = 0;
  v15 = 0;
  md::SelectedLabelLayerDataSource::resetSelectedFeatureID((uint64_t)this, (uint64_t)v8);
  if (!v15)
    return;
  if (SHIBYTE(v13) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v12, v13 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    return;
  }
  v5 = v9;
  v7 = v10;
  v6 = v11;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v5, v7 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_19F4B079C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<md::LabelSelectedFeatureInfo>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4B07B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::optional<md::LabelSelectedFeatureInfo>::~optional(v12 - 112);
  md::LabelSelectedFeatureInfo::~LabelSelectedFeatureInfo((md::LabelSelectedFeatureInfo *)va);
  _Unwind_Resume(a1);
}

void md::SelectedLabelLayerDataSource::resetSelectedFeatureID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;

  if (*(_BYTE *)(a2 + 72))
    v3 = a2;
  else
    v3 = 0;
  v22 = 0;
  v4 = (std::mutex *)(a1 + 824);
  std::mutex::lock((std::mutex *)(a1 + 824));
  v5 = *(_QWORD *)(a1 + 888);
  if (v3)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = v5 != v3;
  }
  else if (*(_QWORD *)v3 == *(_QWORD *)v5)
  {
    v7 = md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==((unsigned __int8 *)(v3 + 8), (unsigned __int8 *)(v5 + 8)) ^ 1;
  }
  else
  {
    v7 = 1;
  }
  if (v3)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v11 = operator new(0x60uLL);
    v9 = v11;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1E42DD038;
    v11[3] = *(_QWORD *)v3;
    v10 = v11 + 3;
    v12 = v11 + 4;
    v9[7] = *(_QWORD *)(v3 + 32);
    if (*(char *)(v3 + 31) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v12, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)(v3 + 8);
      v12[2] = *(_QWORD *)(v3 + 24);
    }
    v13 = (_QWORD **)(v9 + 8);
    v9[11] = *(_QWORD *)(v3 + 64);
    if (*(char *)(v3 + 63) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v13, *(void **)(v3 + 40), *(_QWORD *)(v3 + 48));
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)(v3 + 40);
      v9[10] = *(_QWORD *)(v3 + 56);
    }
    v22 = (std::__shared_weak_count *)v9;
  }
  std::mutex::unlock(v4);
  if (!v7)
    goto LABEL_34;
  gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)a1);
  gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(a1 + 16));
  if (v9)
  {
    v14 = v9 + 1;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 888) = v10;
  v16 = *(std::__shared_weak_count **)(a1 + 896);
  *(_QWORD *)(a1 + 896) = v9;
  if (!v16)
    goto LABEL_34;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = v22;
    if (!v22)
      return;
  }
  else
  {
LABEL_34:
    v19 = v22;
    if (!v22)
      return;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_19F4B09D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  uint64_t v10;
  void *v12;

  if (*(char *)(v10 + 55) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v10 + 56) + 40))(*(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 48) & 0x7FFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v10);
  operator delete(v12);
  std::mutex::unlock(v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::optional<md::LabelSelectedFeatureInfo>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
    }
    else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    {
      return a1;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFLL);
  }
  return a1;
}

void md::LabelSelectedFeatureInfo::~LabelSelectedFeatureInfo(md::LabelSelectedFeatureInfo *this)
{
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), *((_QWORD *)this + 1), *((_QWORD *)this + 3) & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), *((_QWORD *)this + 5), *((_QWORD *)this + 7) & 0x7FFFFFFFFFFFFFFFLL);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

void std::__shared_ptr_emplace<md::LabelSelectedFeatureInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelSelectedFeatureInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelSelectedFeatureInfo>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(char *)(result + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(result + 55) & 0x80000000) == 0)
      return result;
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 88) + 40))(*(_QWORD *)(result + 88), *(_QWORD *)(result + 64), *(_QWORD *)(result + 80) & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(v1 + 55) < 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t altitude::TileLoader::loadTileData(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v3 = *(_QWORD *)(result + 56);
  if (*(_QWORD *)(result + 64) != v3)
  {
    v6 = result;
    v7 = 0;
    v8 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 24))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      v7 = v8;
      v3 = *(_QWORD *)(v6 + 56);
      ++v8;
    }
    while (v7 < (*(_QWORD *)(v6 + 64) - v3) >> 3);
  }
  return result;
}

float altitude::TileLoader::computeBasePriorityFromPosition(uint64_t a1, double *a2)
{
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  float v28;

  v3 = a1 + 40;
  v4 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 24))(a1 + 40);
  v5 = v4[4];
  v6 = v4[5];
  v7 = v4[6];
  v8 = *(double *)(v3 + 1376);
  v9 = *(double *)(v3 + 1368);
  v10 = *(double *)(v3 + 1360);
  v11 = v4[3];
  v12 = -(v9 * v6 - v8 * v5) - (v9 * v6 - v8 * v5);
  v13 = -(v8 * v11 - v10 * v6) - (v8 * v11 - v10 * v6);
  v14 = -(v10 * v5 - v9 * v11) - (v10 * v5 - v9 * v11);
  v15 = *a2 + v13 * v6 - (v10 + *v4 + v12 * v7 + v14 * v5);
  v16 = a2[1] + v14 * v11 - (v9 + v4[1] + v12 * v6 + v13 * v7);
  v17 = a2[2] + v12 * v5 - (v8 + v4[2] + v13 * v11 + v14 * v7);
  v18 = fmin(sqrt(v15 * v15 + v16 * v16 + v17 * v17) / *(double *)(v3 + 904), 1.0);
  v19 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v20 = *a2 - *v19;
  v21 = a2[1] - v19[1];
  v22 = a2[2] - v19[2];
  v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  v24 = v23 * v20;
  v25 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v27 = v25[3];
  v26 = v25[4];
  *(float *)&v26 = fmax(-(v23 * (v21 * ((v26 + v26) * v25[5] + v27 * -2.0 * v25[6]))+ v23 * v22 * (1.0 - (v26 + v26) * v26 + v27 * -2.0 * v27)+ v24 * -(v27 * -2.0 * v25[5] - v25[6] * (v26 + v26))), 0.0);
  *(float *)&v27 = *(float *)(v3 + 1272) * 0.1;
  *(float *)&v21 = fminf(fmaxf(*(float *)&v27, 0.0), 1.0);
  v28 = powf(*(float *)&v26, *(float *)&v27 + 1.0);
  return (float)((float)(1.0 - *(float *)&v21) + (float)(v28 * *(float *)&v21))
       - (float)(v18 * (float)((float)(1.0 - *(float *)&v21) + (float)(v28 * *(float *)&v21)));
}

void md::S2ResourceDataRequester::~S2ResourceDataRequester(md::S2ResourceDataRequester *this)
{
  *(_QWORD *)this = &off_1E429F4B8;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
}

{
  *(_QWORD *)this = &off_1E429F4B8;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::S2ResourceDataRequester::setVisibleZoomRange(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(result + 28);
  if (*(_BYTE *)a2)
  {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 4);
    if (!v2)
      *(_BYTE *)(result + 28) = 1;
  }
  else if (*(_BYTE *)(result + 28))
  {
    *(_BYTE *)(result + 28) = 0;
  }
  v3 = *(unsigned __int8 *)(result + 36);
  if (*(_BYTE *)(a2 + 8))
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 12);
    if (!v3)
      *(_BYTE *)(result + 36) = 1;
  }
  else if (*(_BYTE *)(result + 36))
  {
    *(_BYTE *)(result + 36) = 0;
  }
  return result;
}

void md::S2ResourceDataRequester::createDebugNode(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const std::string::value_type *v11;
  _BYTE v12[32];
  std::string v13;
  int v14;
  _BYTE v15[32];
  std::string v16;
  int v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  std::string __p;
  int v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE v33[32];
  std::string v34;
  int v35;
  uint64_t v36[3];
  char v37[32];

  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    (*(void (**)(char *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v37, v4, *(unsigned __int16 *)(a1 + 24));
    if (v37[0])
    {
      v5 = *(_QWORD *)&v37[4];
      v37[23] = 14;
      strcpy(v37, "Download Range");
      v6 = (char *)operator new(0x80uLL);
      v36[1] = (uint64_t)(v6 + 128);
      v36[2] = (uint64_t)(v6 + 128);
      *((_QWORD *)v6 + 1) = v5;
      *((_QWORD *)v6 + 5) = 0;
      *((_QWORD *)v6 + 6) = 0;
      *((_QWORD *)v6 + 4) = 0;
      *((_QWORD *)v6 + 9) = HIDWORD(v5);
      *((_QWORD *)v6 + 12) = 0;
      *((_DWORD *)v6 + 14) = 1;
      *((_QWORD *)v6 + 13) = 0;
      *((_QWORD *)v6 + 14) = 0;
      *((_DWORD *)v6 + 30) = 1;
      v36[0] = (uint64_t)v6;
      gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, v36);
      if (v6[119] < 0)
      {
        operator delete(*((void **)v6 + 12));
        if ((v6[55] & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((v6[55] & 0x80000000) == 0)
      {
LABEL_5:
        v7 = v6;
        goto LABEL_11;
      }
      operator delete(*((void **)v6 + 4));
      goto LABEL_5;
    }
  }
  v37[23] = 14;
  strcpy(v37, "Download Range");
  memset(&v34, 0, sizeof(v34));
  v35 = 4;
  std::string::__assign_external(&v34, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v33);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 28))
      goto LABEL_12;
    goto LABEL_8;
  }
  v7 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_11:
  operator delete(v7);
  if (!*(_BYTE *)(a1 + 28))
  {
LABEL_12:
    v37[23] = 17;
    strcpy(v37, "Visible Range Min");
    memset(&__p, 0, sizeof(__p));
    v26 = 4;
    std::string::__assign_external(&__p, "None");
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 36))
        goto LABEL_14;
    }
    else if (*(_BYTE *)(a1 + 36))
    {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
LABEL_8:
  v37[23] = 17;
  strcpy(v37, "Visible Range Min");
  v8 = *(unsigned int *)(a1 + 32);
  v30 = 0;
  v31 = 0;
  v32 = 1;
  v29 = 0;
  v28 = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v27);
  if (*(_BYTE *)(a1 + 36))
  {
LABEL_14:
    v37[23] = 17;
    strcpy(v37, "Visible Range Max");
    v9 = *(unsigned int *)(a1 + 40);
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v20 = 0;
    v19 = v9;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v18);
    goto LABEL_20;
  }
LABEL_18:
  v37[23] = 17;
  strcpy(v37, "Visible Range Max");
  memset(&v16, 0, sizeof(v16));
  v17 = 4;
  std::string::__assign_external(&v16, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_20:
  v37[23] = 17;
  strcpy(v37, "gdc::ResourceType");
  v10 = *(unsigned __int16 *)(a1 + 24);
  if (v10 > 0x35)
    v11 = "<Invalid>";
  else
    v11 = off_1E42F75C0[v10];
  memset(&v13, 0, sizeof(v13));
  v14 = 4;
  std::string::__assign_external(&v13, v11);
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19F4B129C(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void **std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 8;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::TrafficAccum::reset(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t *a9, int a10, char a11)
{
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 128) = a3;
  *(_BYTE *)(a1 + 96) = a4;
  *(_DWORD *)(a1 + 100) = a5;
  *(_DWORD *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 108) = 0;
  if (a8)
  {
    v12 = (unint64_t *)(a8 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(std::__shared_weak_count **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = a7;
  *(_QWORD *)(a1 + 152) = a8;
  if (!v14)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = *a9;
    v18 = a9[1];
    if (!v18)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v17 = *a9;
    v18 = a9[1];
    if (!v18)
      goto LABEL_11;
  }
  v19 = (unint64_t *)(v18 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_11:
  v21 = *(std::__shared_weak_count **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v17;
  *(_QWORD *)(a1 + 168) = v18;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_DWORD *)(a1 + 196) = a10;
  *(_BYTE *)(a1 + 224) = a11;
}

void md::TrafficAccum::addPoints(float32x2_t **a1, char *a2, char *a3, uint64_t a4, int a5, float *a6, float a7, float a8, double a9, int8x16_t a10)
{
  float v13;
  float v14;
  BOOL v15;
  float v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  float32x2_t *v26;
  float32x2_t *v27;
  float32x2_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  float32x2_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  float32x2_t *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  float32x2_t *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  float32x2_t v75;
  unint64_t v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  float32x2_t *v91;
  uint64_t v92;
  __int128 v93;
  float32x2_t v94;
  float v95;
  unint64_t v96;
  float *v97;
  float *v98;
  float *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  float *v105;
  float32x2_t *v106;
  unint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  float *v110;
  uint64_t v111;
  __int128 v112;
  int v113;
  float *v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  unint64_t v119;
  float *v120;
  float *v121;
  float *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  float *v128;
  float32x2_t *v129;
  unint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  float *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  int v137;
  char *v138;
  int v139;
  int v140;
  float32x2_t v141;
  unint64_t v142;
  float32x2_t *v143;
  float32x2_t *v144;
  float32x2_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  float32x2_t *v152;
  unint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  float32x2_t *v156;
  uint64_t v157;
  __int128 v158;
  float32x2_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  float32x2_t *v169;
  unint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  int v176;
  int *v177;
  int v178;
  int v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  float32x2_t *v188;
  unint64_t v189;
  float32x2_t *v190;
  uint64_t v191;
  _OWORD *v192;
  char *v193;
  uint64_t v194;
  __int128 v195;
  float32x2_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  float v200;
  float32x2_t v201;
  unint64_t v202;
  float32x2_t *v203;
  float32x2_t *v204;
  float32x2_t *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  _BYTE *v211;
  float32x2_t *v212;
  float32x2_t *v213;
  unint64_t v214;
  uint64_t v215;
  _OWORD *v216;
  float32x2_t *v217;
  uint64_t v218;
  __int128 v219;
  float32x2_t v220;
  float v221;
  unint64_t v222;
  float *v223;
  float *v224;
  float *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  _BYTE *v230;
  float *v231;
  float32x2_t *v232;
  unint64_t v233;
  uint64_t v234;
  _OWORD *v235;
  float *v236;
  uint64_t v237;
  __int128 v238;
  int v239;
  float *v240;
  float *v241;
  float v242;
  float v243;
  float v244;
  unint64_t v245;
  float *v246;
  float *v247;
  float *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _BYTE *v253;
  float *v254;
  float32x2_t *v255;
  unint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  float *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  unint64_t v263;
  float32x2_t *v264;
  char *v265;
  uint64_t v266;
  float32x2_t v267;
  unint64_t v268;
  float v269;
  uint64_t v270;
  float v271;
  float *v272;
  unint64_t v273;
  float *v274;
  float *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  int8x16_t v281;
  unint64_t v282;
  int32x4_t *v283;
  float32x4_t v284;
  unint64_t v285;
  float32x4_t v286;
  const float *i32;
  int32x4_t v288;
  int32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  uint64_t v296;
  float32x2_t *v297;
  float32x2_t v298;
  float32x2_t v299;
  float v300;
  float *v301;
  float32x2_t v302;
  unint64_t v303;
  float *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  float *v310;
  unint64_t v311;
  float *v312;
  uint64_t v313;
  _OWORD *v314;
  float *v315;
  uint64_t v316;
  __int128 v317;
  int v318;
  float *v319;
  float32x2_t *v320;
  unint64_t v321;
  float *v322;
  uint64_t v323;
  _OWORD *v324;
  float *v325;
  uint64_t v326;
  __int128 v327;
  int v328;
  int v329;
  char *v332;
  char *v333;
  int v334;
  unsigned int v335;
  float32x4x2_t v339;

  v13 = ceilf(a7);
  v14 = floorf(a7);
  v15 = a7 < a8;
  if (a7 >= a8)
    v16 = v14;
  else
    v16 = v13;
  v17 = vabds_f32(v16, a7);
  v18 = floorf(a8);
  v19 = ceilf(a8);
  if (v15)
    v20 = v18;
  else
    v20 = v19;
  v21 = v18 - v13;
  v22 = v14 - v19;
  if (!v15)
    v21 = v22;
  v23 = vabds_f32(v20, a8);
  v24 = (float)(v21 + 1.0);
  v335 = v24;
  if (v17 > 0.01)
    ++v24;
  if (v23 <= 0.01)
    v25 = v24;
  else
    v25 = v24 + 1;
  v27 = *a1;
  v26 = a1[1];
  v28 = v26;
  v29 = (char *)v26 - (char *)*a1;
  v30 = v29 >> 3;
  v31 = (v29 >> 3) + v25;
  if (v31 <= a1[2] - *a1)
  {
    v34 = (char *)*a1;
    v333 = (char *)a1[1];
    goto LABEL_27;
  }
  if (v31 >> 61)
    goto LABEL_346;
  v32 = 8 * v31;
  v33 = (char *)operator new(8 * v31);
  v333 = &v33[8 * v30];
  v34 = v333;
  if (v26 != v27)
  {
    v35 = (char *)v26 - (char *)v27 - 8;
    if (v35 < 0x58)
    {
      v34 = &v33[8 * v30];
      do
      {
LABEL_24:
        v41 = v28[-1];
        --v28;
        *((float32x2_t *)v34 - 1) = v41;
        v34 -= 8;
      }
      while (v28 != v27);
      goto LABEL_25;
    }
    v34 = &v33[8 * v30];
    if ((unint64_t)((char *)v26 - v29 - v33) < 0x20)
      goto LABEL_24;
    v36 = (v35 >> 3) + 1;
    v28 = &v26[-(v36 & 0x3FFFFFFFFFFFFFFCLL)];
    v37 = &v33[8 * v30 - 16];
    v38 = (char *)&v26[-2];
    v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v34 = &v333[-8 * (v36 & 0x3FFFFFFFFFFFFFFCLL)];
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
LABEL_25:
  *a1 = (float32x2_t *)v34;
  a1[1] = (float32x2_t *)v333;
  a1[2] = (float32x2_t *)&v33[v32];
  if (v27)
  {
    operator delete(v27);
    v34 = (char *)*a1;
    v333 = (char *)a1[1];
  }
LABEL_27:
  v332 = v34;
  if (!a3)
    goto LABEL_40;
  v43 = (char *)a1[3];
  v42 = (char *)a1[4];
  v44 = (v42 - v43) >> 2;
  v45 = v44 + v25;
  if (v44 + v25 <= (unint64_t)(((char *)a1[5] - v43) >> 2))
    goto LABEL_40;
  if (v45 >> 62)
    goto LABEL_346;
  v46 = 4 * v45;
  v47 = operator new(4 * v45);
  v48 = (float32x2_t *)&v47[4 * v44];
  v49 = (char *)v48;
  if (v42 != v43)
  {
    v50 = v42 - v43 - 4;
    if (v50 < 0x2C)
    {
      v49 = &v47[4 * v44];
      do
      {
LABEL_37:
        v56 = *((_DWORD *)v42 - 1);
        v42 -= 4;
        *((_DWORD *)v49 - 1) = v56;
        v49 -= 4;
      }
      while (v42 != v43);
      goto LABEL_38;
    }
    v49 = &v47[4 * v44];
    if ((unint64_t)(v43 - v47) < 0x20)
      goto LABEL_37;
    v51 = (v50 >> 2) + 1;
    v52 = &v47[4 * v44 - 16];
    v53 = (__int128 *)(v42 - 16);
    v54 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v55 = *v53;
      *(v52 - 1) = *(v53 - 1);
      *v52 = v55;
      v52 -= 2;
      v53 -= 2;
      v54 -= 8;
    }
    while (v54);
    v49 = (char *)v48 - 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    v42 -= 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_37;
  }
LABEL_38:
  a1[3] = (float32x2_t *)v49;
  a1[4] = v48;
  a1[5] = (float32x2_t *)&v47[v46];
  if (v43)
    operator delete(v43);
LABEL_40:
  if (!a4)
    goto LABEL_53;
  v58 = (char *)a1[6];
  v57 = (char *)a1[7];
  v59 = (v57 - v58) >> 3;
  v60 = v59 + v25;
  if (v59 + v25 <= (unint64_t)(((char *)a1[8] - v58) >> 3))
    goto LABEL_53;
  if (v60 >> 61)
    goto LABEL_346;
  v61 = 8 * v60;
  v62 = operator new(8 * v60);
  v63 = (float32x2_t *)&v62[8 * v59];
  v64 = (char *)v63;
  if (v57 != v58)
  {
    v65 = v57 - v58 - 8;
    if (v65 < 0x58)
    {
      v64 = &v62[8 * v59];
      do
      {
LABEL_50:
        v71 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *((_QWORD *)v64 - 1) = v71;
        v64 -= 8;
      }
      while (v57 != v58);
      goto LABEL_51;
    }
    v64 = &v62[8 * v59];
    if ((unint64_t)(v58 - v62) < 0x20)
      goto LABEL_50;
    v66 = (v65 >> 3) + 1;
    v67 = &v62[8 * v59 - 16];
    v68 = (__int128 *)(v57 - 16);
    v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v70 = *v68;
      *(v67 - 1) = *(v68 - 1);
      *v67 = v70;
      v67 -= 2;
      v68 -= 2;
      v69 -= 4;
    }
    while (v69);
    v64 = (char *)&v63[-(v66 & 0x3FFFFFFFFFFFFFFCLL)];
    v57 -= 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_50;
  }
LABEL_51:
  a1[6] = (float32x2_t *)v64;
  a1[7] = v63;
  a1[8] = (float32x2_t *)&v62[v61];
  if (v58)
    operator delete(v58);
LABEL_53:
  if (v17 > 0.01)
  {
    v72 = (int)v14;
    v73 = v72 + 1;
    v74 = a7 - v14;
    v75 = vmla_n_f32(*(float32x2_t *)&a2[8 * v72], vsub_f32(*(float32x2_t *)&a2[8 * v72 + 8], *(float32x2_t *)&a2[8 * v72]), a7 - v14);
    v77 = a1[1];
    v76 = (unint64_t)a1[2];
    if ((unint64_t)v77 >= v76)
    {
      v79 = *a1;
      v80 = (char *)v77 - (char *)*a1;
      v81 = v80 >> 3;
      v82 = (v80 >> 3) + 1;
      if (v82 >> 61)
        goto LABEL_346;
      v83 = v76 - (_QWORD)v79;
      if (v83 >> 2 > v82)
        v82 = v83 >> 2;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
        v84 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v84 = v82;
      if (v84)
      {
        if (v84 >> 61)
          goto LABEL_347;
        v85 = operator new(8 * v84);
        v74 = a7 - v14;
      }
      else
      {
        v85 = 0;
      }
      v86 = (float32x2_t *)&v85[8 * v81];
      v87 = (float32x2_t *)&v85[8 * v84];
      *v86 = v75;
      v78 = v86 + 1;
      if (v77 == v79)
      {
        v79 = v77;
      }
      else
      {
        v88 = (char *)v77 - (char *)v79 - 8;
        if (v88 < 0x58)
          goto LABEL_350;
        if ((unint64_t)((char *)v77 - v85 - v80) < 0x20)
          goto LABEL_350;
        v89 = (v88 >> 3) + 1;
        v90 = &v85[8 * v81 - 16];
        v91 = v77 - 2;
        v92 = v89 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v93 = *(_OWORD *)v91->f32;
          *(v90 - 1) = *(_OWORD *)v91[-2].f32;
          *v90 = v93;
          v90 -= 2;
          v91 -= 4;
          v92 -= 4;
        }
        while (v92);
        v86 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
        v77 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
        if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_350:
          do
          {
            v94 = v77[-1];
            --v77;
            v86[-1] = v94;
            --v86;
          }
          while (v77 != v79);
          v79 = *a1;
        }
      }
      *a1 = v86;
      a1[1] = v78;
      a1[2] = v87;
      if (v79)
      {
        operator delete(v79);
        v74 = a7 - v14;
      }
    }
    else
    {
      *v77 = v75;
      v78 = v77 + 1;
    }
    a1[1] = v78;
    if (a3)
    {
      v95 = *(float *)&a3[4 * v72] + (float)((float)(*(float *)&a3[4 * v73] - *(float *)&a3[4 * v72]) * v74);
      v97 = (float *)a1[4];
      v96 = (unint64_t)a1[5];
      if ((unint64_t)v97 >= v96)
      {
        v99 = (float *)a1[3];
        v100 = v97 - v99;
        v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 62)
          goto LABEL_346;
        v102 = v96 - (_QWORD)v99;
        if (v102 >> 1 > v101)
          v101 = v102 >> 1;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
          v103 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          if (v103 >> 62)
            goto LABEL_347;
          v104 = operator new(4 * v103);
        }
        else
        {
          v104 = 0;
        }
        v105 = (float *)&v104[4 * v100];
        v106 = (float32x2_t *)&v104[4 * v103];
        *v105 = v95;
        v98 = v105 + 1;
        if (v97 != v99)
        {
          v107 = (char *)v97 - (char *)v99 - 4;
          if (v107 < 0x2C)
            goto LABEL_351;
          if ((unint64_t)((char *)v99 - v104) < 0x20)
            goto LABEL_351;
          v108 = (v107 >> 2) + 1;
          v109 = &v104[4 * v100 - 16];
          v110 = v97 - 4;
          v111 = v108 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v112 = *(_OWORD *)v110;
            *(v109 - 1) = *((_OWORD *)v110 - 1);
            *v109 = v112;
            v109 -= 2;
            v110 -= 8;
            v111 -= 8;
          }
          while (v111);
          v105 -= v108 & 0x7FFFFFFFFFFFFFF8;
          v97 -= v108 & 0x7FFFFFFFFFFFFFF8;
          if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_351:
            do
            {
              v113 = *((_DWORD *)v97-- - 1);
              *((_DWORD *)v105-- - 1) = v113;
            }
            while (v97 != v99);
          }
        }
        a1[3] = (float32x2_t *)v105;
        a1[4] = (float32x2_t *)v98;
        a1[5] = v106;
        if (v99)
          operator delete(v99);
      }
      else
      {
        *v97 = v95;
        v98 = v97 + 1;
      }
      a1[4] = (float32x2_t *)v98;
    }
    if (a4)
    {
      v114 = (float *)(a4 + 16 * v72);
      v115 = (float *)(a4 + 16 * v73);
      v116 = a7 - (float)(int)v72;
      v117 = *v114 + (float)((float)(*v115 - *v114) * v116);
      v118 = v114[2] + (float)((float)(v115[2] - v114[2]) * v116);
      v120 = (float *)a1[7];
      v119 = (unint64_t)a1[8];
      if ((unint64_t)v120 >= v119)
      {
        v122 = (float *)a1[6];
        v123 = ((char *)v120 - (char *)v122) >> 3;
        v124 = v123 + 1;
        if ((unint64_t)(v123 + 1) >> 61)
          goto LABEL_346;
        v125 = v119 - (_QWORD)v122;
        if (v125 >> 2 > v124)
          v124 = v125 >> 2;
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v124;
        if (v126)
        {
          if (v126 >> 61)
            goto LABEL_347;
          v127 = operator new(8 * v126);
        }
        else
        {
          v127 = 0;
        }
        v128 = (float *)&v127[8 * v123];
        v129 = (float32x2_t *)&v127[8 * v126];
        *v128 = v117;
        v128[1] = v118;
        v121 = v128 + 2;
        if (v120 == v122)
        {
          v122 = v120;
        }
        else
        {
          v130 = (char *)v120 - (char *)v122 - 8;
          if (v130 < 0x58)
            goto LABEL_352;
          if ((unint64_t)((char *)v122 - v127) < 0x20)
            goto LABEL_352;
          v131 = (v130 >> 3) + 1;
          v132 = &v127[8 * v123 - 16];
          v133 = v120 - 4;
          v134 = v131 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v135 = *(_OWORD *)v133;
            *(v132 - 1) = *((_OWORD *)v133 - 1);
            *v132 = v135;
            v132 -= 2;
            v133 -= 8;
            v134 -= 4;
          }
          while (v134);
          v128 -= 2 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
          v120 -= 2 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
          if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_352:
            do
            {
              v136 = *((_QWORD *)v120 - 1);
              v120 -= 2;
              *((_QWORD *)v128 - 1) = v136;
              v128 -= 2;
            }
            while (v120 != v122);
            v122 = (float *)a1[6];
          }
        }
        a1[6] = (float32x2_t *)v128;
        a1[7] = (float32x2_t *)v121;
        a1[8] = v129;
        if (v122)
          operator delete(v122);
      }
      else
      {
        *v120 = v117;
        v120[1] = v118;
        v121 = v120 + 2;
      }
      a1[7] = (float32x2_t *)v121;
    }
  }
  if (v335)
  {
    v137 = 0;
    v334 = (int)v16;
    while (1)
    {
      if (a7 < a8)
        v139 = v137;
      else
        v139 = -v137;
      v140 = v139 + v334;
      v141 = *(float32x2_t *)&a2[8 * v139 + 8 * v334];
      v143 = a1[1];
      v142 = (unint64_t)a1[2];
      if ((unint64_t)v143 >= v142)
      {
        v145 = *a1;
        v146 = (char *)v143 - (char *)*a1;
        v147 = v146 >> 3;
        v148 = (v146 >> 3) + 1;
        if (v148 >> 61)
          goto LABEL_346;
        v149 = v142 - (_QWORD)v145;
        if (v149 >> 2 > v148)
          v148 = v149 >> 2;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
          v150 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v150 = v148;
        if (v150)
        {
          if (v150 >> 61)
            goto LABEL_347;
          v151 = operator new(8 * v150);
        }
        else
        {
          v151 = 0;
        }
        v152 = (float32x2_t *)&v151[8 * v147];
        *v152 = v141;
        v144 = v152 + 1;
        if (v143 == v145)
        {
          v145 = v143;
        }
        else
        {
          v153 = (char *)&v143[-1] - (char *)v145;
          if (v153 < 0x58)
            goto LABEL_353;
          if ((unint64_t)((char *)v143 - &v151[v146]) < 0x20)
            goto LABEL_353;
          v154 = (v153 >> 3) + 1;
          v155 = &v151[8 * v147 - 16];
          v156 = v143 - 2;
          v157 = v154 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v158 = *(_OWORD *)v156->f32;
            *(v155 - 1) = *(_OWORD *)v156[-2].f32;
            *v155 = v158;
            v155 -= 2;
            v156 -= 4;
            v157 -= 4;
          }
          while (v157);
          v152 -= v154 & 0x3FFFFFFFFFFFFFFCLL;
          v143 -= v154 & 0x3FFFFFFFFFFFFFFCLL;
          if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_353:
            do
            {
              v159 = v143[-1];
              --v143;
              v152[-1] = v159;
              --v152;
            }
            while (v143 != v145);
            v145 = *a1;
          }
        }
        *a1 = v152;
        a1[1] = v144;
        a1[2] = (float32x2_t *)&v151[8 * v150];
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v143 = v141;
        v144 = v143 + 1;
      }
      a1[1] = v144;
      if (a3)
      {
        v161 = (char *)a1[4];
        v160 = (unint64_t)a1[5];
        if ((unint64_t)v161 >= v160)
        {
          v163 = (char *)a1[3];
          v164 = (v161 - v163) >> 2;
          v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62)
            goto LABEL_346;
          v166 = v160 - (_QWORD)v163;
          if (v166 >> 1 > v165)
            v165 = v166 >> 1;
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
            v167 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v167 = v165;
          if (v167)
          {
            if (v167 >> 62)
              goto LABEL_347;
            v168 = operator new(4 * v167);
          }
          else
          {
            v168 = 0;
          }
          v169 = (float32x2_t *)&v168[4 * v164];
          v169->i32[0] = *(_DWORD *)&a3[4 * v140];
          v162 = (char *)v169 + 4;
          if (v161 != v163)
          {
            v170 = v161 - 4 - v163;
            if (v170 < 0x2C)
              goto LABEL_354;
            if ((unint64_t)(v163 - v168) < 0x20)
              goto LABEL_354;
            v171 = (v170 >> 2) + 1;
            v172 = &v168[4 * v164 - 16];
            v173 = v161 - 16;
            v174 = v171 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v175 = *(_OWORD *)v173;
              *(v172 - 1) = *((_OWORD *)v173 - 1);
              *v172 = v175;
              v172 -= 2;
              v173 -= 32;
              v174 -= 8;
            }
            while (v174);
            v169 = (float32x2_t *)((char *)v169 - 4 * (v171 & 0x7FFFFFFFFFFFFFF8));
            v161 -= 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
            if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_354:
              do
              {
                v176 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                v169[-1].i32[1] = v176;
                v169 = (float32x2_t *)((char *)v169 - 4);
              }
              while (v161 != v163);
            }
          }
          a1[3] = v169;
          a1[4] = (float32x2_t *)v162;
          a1[5] = (float32x2_t *)&v168[4 * v167];
          if (v163)
            operator delete(v163);
        }
        else
        {
          *(_DWORD *)v161 = *(_DWORD *)&a3[4 * v140];
          v162 = v161 + 4;
        }
        a1[4] = (float32x2_t *)v162;
      }
      if (a4)
        break;
LABEL_129:
      if (++v137 == v335)
        goto LABEL_203;
    }
    v177 = (int *)(a4 + 16 * v140);
    v178 = *v177;
    v179 = v177[2];
    v181 = (char *)a1[7];
    v180 = (unint64_t)a1[8];
    if ((unint64_t)v181 < v180)
    {
      *(_DWORD *)v181 = v178;
      *((_DWORD *)v181 + 1) = v179;
      v138 = v181 + 8;
LABEL_128:
      a1[7] = (float32x2_t *)v138;
      goto LABEL_129;
    }
    v182 = (char *)a1[6];
    v183 = (v181 - v182) >> 3;
    v184 = v183 + 1;
    if ((unint64_t)(v183 + 1) >> 61)
      goto LABEL_346;
    v185 = v180 - (_QWORD)v182;
    if (v185 >> 2 > v184)
      v184 = v185 >> 2;
    if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
      v186 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v186 = v184;
    if (v186)
    {
      if (v186 >> 61)
        goto LABEL_347;
      v187 = operator new(8 * v186);
    }
    else
    {
      v187 = 0;
    }
    v188 = (float32x2_t *)&v187[8 * v183];
    v188->i32[0] = v178;
    v188->i32[1] = v179;
    if (v181 == v182)
    {
      v182 = v181;
      v190 = (float32x2_t *)&v187[8 * v183];
      goto LABEL_201;
    }
    v189 = v181 - 8 - v182;
    if (v189 >= 0x58)
    {
      v190 = (float32x2_t *)&v187[8 * v183];
      if ((unint64_t)(v182 - v187) >= 0x20)
      {
        v191 = (v189 >> 3) + 1;
        v192 = &v187[8 * v183 - 16];
        v193 = v181 - 16;
        v194 = v191 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v195 = *(_OWORD *)v193;
          *(v192 - 1) = *((_OWORD *)v193 - 1);
          *v192 = v195;
          v192 -= 2;
          v193 -= 32;
          v194 -= 4;
        }
        while (v194);
        v190 = &v188[-(v191 & 0x3FFFFFFFFFFFFFFCLL)];
        v181 -= 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
        if (v191 == (v191 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_201;
      }
    }
    else
    {
      v190 = (float32x2_t *)&v187[8 * v183];
    }
    do
    {
      v196 = *(float32x2_t *)(v181 - 8);
      v181 -= 8;
      v190[-1] = v196;
      --v190;
    }
    while (v181 != v182);
    v182 = (char *)a1[6];
LABEL_201:
    v138 = (char *)&v188[1];
    a1[6] = v190;
    a1[7] = v188 + 1;
    a1[8] = (float32x2_t *)&v187[8 * v186];
    if (v182)
      operator delete(v182);
    goto LABEL_128;
  }
LABEL_203:
  v197 = v332;
  if (v23 > 0.01)
  {
    v198 = (int)v18;
    v199 = v198 + 1;
    v200 = a8 - v18;
    v201 = vmla_n_f32(*(float32x2_t *)&a2[8 * v198], vsub_f32(*(float32x2_t *)&a2[8 * v198 + 8], *(float32x2_t *)&a2[8 * v198]), a8 - v18);
    v203 = a1[1];
    v202 = (unint64_t)a1[2];
    if ((unint64_t)v203 >= v202)
    {
      v205 = *a1;
      v206 = (char *)v203 - (char *)*a1;
      v207 = v206 >> 3;
      v208 = (v206 >> 3) + 1;
      if (v208 >> 61)
        goto LABEL_346;
      v209 = v202 - (_QWORD)v205;
      if (v209 >> 2 > v208)
        v208 = v209 >> 2;
      if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFF8)
        v210 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v210 = v208;
      if (v210)
      {
        if (v210 >> 61)
          goto LABEL_347;
        v211 = operator new(8 * v210);
        v200 = a8 - v18;
      }
      else
      {
        v211 = 0;
      }
      v212 = (float32x2_t *)&v211[8 * v207];
      v213 = (float32x2_t *)&v211[8 * v210];
      *v212 = v201;
      v204 = v212 + 1;
      if (v203 == v205)
      {
        v205 = v203;
      }
      else
      {
        v214 = (char *)v203 - (char *)v205 - 8;
        if (v214 < 0x58)
          goto LABEL_355;
        if ((unint64_t)((char *)v203 - v211 - v206) < 0x20)
          goto LABEL_355;
        v215 = (v214 >> 3) + 1;
        v216 = &v211[8 * v207 - 16];
        v217 = v203 - 2;
        v218 = v215 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v219 = *(_OWORD *)v217->f32;
          *(v216 - 1) = *(_OWORD *)v217[-2].f32;
          *v216 = v219;
          v216 -= 2;
          v217 -= 4;
          v218 -= 4;
        }
        while (v218);
        v212 -= v215 & 0x3FFFFFFFFFFFFFFCLL;
        v203 -= v215 & 0x3FFFFFFFFFFFFFFCLL;
        if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_355:
          do
          {
            v220 = v203[-1];
            --v203;
            v212[-1] = v220;
            --v212;
          }
          while (v203 != v205);
          v205 = *a1;
        }
      }
      *a1 = v212;
      a1[1] = v204;
      a1[2] = v213;
      if (v205)
      {
        operator delete(v205);
        v200 = a8 - v18;
      }
      v197 = v332;
    }
    else
    {
      *v203 = v201;
      v204 = v203 + 1;
    }
    a1[1] = v204;
    if (a3)
    {
      v221 = *(float *)&a3[4 * v198] + (float)((float)(*(float *)&a3[4 * v199] - *(float *)&a3[4 * v198]) * v200);
      v223 = (float *)a1[4];
      v222 = (unint64_t)a1[5];
      if ((unint64_t)v223 >= v222)
      {
        v225 = (float *)a1[3];
        v226 = v223 - v225;
        v227 = v226 + 1;
        if ((unint64_t)(v226 + 1) >> 62)
          goto LABEL_346;
        v228 = v222 - (_QWORD)v225;
        if (v228 >> 1 > v227)
          v227 = v228 >> 1;
        if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL)
          v229 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v229 = v227;
        if (v229)
        {
          if (v229 >> 62)
            goto LABEL_347;
          v230 = operator new(4 * v229);
        }
        else
        {
          v230 = 0;
        }
        v231 = (float *)&v230[4 * v226];
        v232 = (float32x2_t *)&v230[4 * v229];
        *v231 = v221;
        v224 = v231 + 1;
        if (v223 != v225)
        {
          v233 = (char *)v223 - (char *)v225 - 4;
          if (v233 < 0x2C)
            goto LABEL_356;
          if ((unint64_t)((char *)v225 - v230) < 0x20)
            goto LABEL_356;
          v234 = (v233 >> 2) + 1;
          v235 = &v230[4 * v226 - 16];
          v236 = v223 - 4;
          v237 = v234 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v238 = *(_OWORD *)v236;
            *(v235 - 1) = *((_OWORD *)v236 - 1);
            *v235 = v238;
            v235 -= 2;
            v236 -= 8;
            v237 -= 8;
          }
          while (v237);
          v231 -= v234 & 0x7FFFFFFFFFFFFFF8;
          v223 -= v234 & 0x7FFFFFFFFFFFFFF8;
          if (v234 != (v234 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_356:
            do
            {
              v239 = *((_DWORD *)v223-- - 1);
              *((_DWORD *)v231-- - 1) = v239;
            }
            while (v223 != v225);
          }
        }
        a1[3] = (float32x2_t *)v231;
        a1[4] = (float32x2_t *)v224;
        a1[5] = v232;
        if (v225)
          operator delete(v225);
        v197 = v332;
      }
      else
      {
        *v223 = v221;
        v224 = v223 + 1;
      }
      a1[4] = (float32x2_t *)v224;
    }
    if (a4)
    {
      v240 = (float *)(a4 + 16 * v198);
      v241 = (float *)(a4 + 16 * v199);
      v242 = a8 - (float)(int)v198;
      v243 = *v240 + (float)((float)(*v241 - *v240) * v242);
      v244 = v240[2] + (float)((float)(v241[2] - v240[2]) * v242);
      v246 = (float *)a1[7];
      v245 = (unint64_t)a1[8];
      if ((unint64_t)v246 >= v245)
      {
        v248 = (float *)a1[6];
        v249 = ((char *)v246 - (char *)v248) >> 3;
        v250 = v249 + 1;
        if ((unint64_t)(v249 + 1) >> 61)
          goto LABEL_346;
        v251 = v245 - (_QWORD)v248;
        if (v251 >> 2 > v250)
          v250 = v251 >> 2;
        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8)
          v252 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v252 = v250;
        if (v252)
        {
          if (v252 >> 61)
            goto LABEL_347;
          v253 = operator new(8 * v252);
        }
        else
        {
          v253 = 0;
        }
        v254 = (float *)&v253[8 * v249];
        v255 = (float32x2_t *)&v253[8 * v252];
        *v254 = v243;
        v254[1] = v244;
        v247 = v254 + 2;
        if (v246 == v248)
        {
          v248 = v246;
        }
        else
        {
          v256 = (char *)v246 - (char *)v248 - 8;
          if (v256 < 0x58)
            goto LABEL_357;
          if ((unint64_t)((char *)v248 - v253) < 0x20)
            goto LABEL_357;
          v257 = (v256 >> 3) + 1;
          v258 = &v253[8 * v249 - 16];
          v259 = v246 - 4;
          v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v261 = *(_OWORD *)v259;
            *(v258 - 1) = *((_OWORD *)v259 - 1);
            *v258 = v261;
            v258 -= 2;
            v259 -= 8;
            v260 -= 4;
          }
          while (v260);
          v254 -= 2 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
          v246 -= 2 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
          if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_357:
            do
            {
              v262 = *((_QWORD *)v246 - 1);
              v246 -= 2;
              *((_QWORD *)v254 - 1) = v262;
              v254 -= 2;
            }
            while (v246 != v248);
            v248 = (float *)a1[6];
          }
        }
        a1[6] = (float32x2_t *)v254;
        a1[7] = (float32x2_t *)v247;
        a1[8] = v255;
        if (v248)
          operator delete(v248);
      }
      else
      {
        *v246 = v243;
        v246[1] = v244;
        v247 = v246 + 2;
      }
      a1[7] = (float32x2_t *)v247;
    }
  }
  if (!a6)
    goto LABEL_343;
  v263 = (v333 - v197) >> 3;
  v264 = *a1;
  v265 = (char *)a1[1];
  v266 = (v265 - (char *)*a1) >> 3;
  if (v263 < v266 - 1)
  {
    v267 = v264[v263];
    v268 = v266 + ~v263;
    v269 = 0.0;
    if (v268 > 7)
    {
      a10.u64[1] = (unint64_t)v264[v263];
      v281 = (int8x16_t)vdupq_lane_s32((int32x2_t)v267, 0);
      v282 = v268 & 0xFFFFFFFFFFFFFFF8;
      v283 = (int32x4_t *)&v264[v263 + 5];
      v284 = 0uLL;
      v285 = v268 & 0xFFFFFFFFFFFFFFF8;
      v286 = 0uLL;
      do
      {
        i32 = (const float *)v283[-2].i32;
        v339 = vld2q_f32(i32);
        v289 = *v283;
        v288 = v283[1];
        v283 += 4;
        v290 = (float32x4_t)vuzp1q_s32(v289, v288);
        v291 = (float32x4_t)vuzp2q_s32(v289, v288);
        v292 = vsubq_f32((float32x4_t)vextq_s8(v281, (int8x16_t)v339.val[0], 0xCuLL), v339.val[0]);
        v293 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v339.val[0], (int8x16_t)v290, 0xCuLL), v290);
        v294 = vsubq_f32((float32x4_t)vextq_s8(a10, (int8x16_t)v339.val[1], 0xCuLL), v339.val[1]);
        v339.val[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v339.val[1], (int8x16_t)v291, 0xCuLL), v291);
        v284 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v292, v292), v294, v294)), v284);
        v286 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v293, v293), v339.val[0], v339.val[0])), v286);
        a10 = (int8x16_t)v291;
        v281 = (int8x16_t)v290;
        v285 -= 8;
      }
      while (v285);
      v295 = vaddq_f32(v286, v284);
      v269 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v295, v295));
      if (v268 == v282)
        goto LABEL_299;
      v270 = v263 + v282;
      v267 = (float32x2_t)vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
    }
    else
    {
      v270 = (v333 - v197) >> 3;
    }
    v296 = ~v270 + v266;
    v297 = &v264[v270 + 1];
    do
    {
      v298 = *v297++;
      v299 = vsub_f32(v267, v298);
      v269 = sqrtf(vaddv_f32(vmul_f32(v299, v299))) + v269;
      v267 = v298;
      --v296;
    }
    while (v296);
LABEL_299:
    v271 = *a6;
    v300 = 0.0;
    if (v269 > 0.000001)
      v300 = (float)(a6[1] - v271) / v269;
    v301 = (float *)a1[10];
    while (1)
    {
      v303 = (unint64_t)a1[11];
      if ((unint64_t)v301 >= v303)
        break;
      *v301 = v271;
      v272 = v301 + 1;
LABEL_303:
      a1[10] = (float32x2_t *)v272;
      v302 = vsub_f32(v264[v263], v264[v263 + 1]);
      v271 = v271 + (float)(sqrtf(vaddv_f32(vmul_f32(v302, v302))) * v300);
      v301 = v272;
      if (++v263 >= ((v265 - (char *)v264) >> 3) - 1)
        goto LABEL_282;
    }
    v304 = (float *)a1[9];
    v305 = v301 - v304;
    v306 = v305 + 1;
    if ((unint64_t)(v305 + 1) >> 62)
      goto LABEL_346;
    v307 = v303 - (_QWORD)v304;
    if (v307 >> 1 > v306)
      v306 = v307 >> 1;
    if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFFCLL)
      v308 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v308 = v306;
    if (v308)
    {
      if (v308 >> 62)
        goto LABEL_347;
      v309 = operator new(4 * v308);
    }
    else
    {
      v309 = 0;
    }
    v310 = (float *)&v309[4 * v305];
    *v310 = v271;
    v272 = v310 + 1;
    if (v301 == v304)
      goto LABEL_328;
    v311 = (char *)(v301 - 1) - (char *)v304;
    if (v311 < 0xBC)
    {
      v312 = v301;
      goto LABEL_327;
    }
    if (&v309[(char *)v301 - (char *)v304 - 4 - (v311 & 0xFFFFFFFFFFFFFFFCLL)] > &v309[(char *)v301 - (char *)v304 - 4])
    {
      v312 = v301;
    }
    else
    {
      if ((float *)((char *)v301 - (v311 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v301 - 1)
      {
        if ((unint64_t)((char *)v304 - v309) < 0x20)
        {
          v312 = v301;
          goto LABEL_327;
        }
        v313 = (v311 >> 2) + 1;
        v312 = &v301[-(v313 & 0x7FFFFFFFFFFFFFF8)];
        v314 = &v309[4 * v305 - 16];
        v315 = v301 - 4;
        v316 = v313 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v317 = *(_OWORD *)v315;
          *(v314 - 1) = *((_OWORD *)v315 - 1);
          *v314 = v317;
          v314 -= 2;
          v315 -= 8;
          v316 -= 8;
        }
        while (v316);
        v310 -= v313 & 0x7FFFFFFFFFFFFFF8;
        if (v313 != (v313 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_327;
LABEL_328:
        a1[9] = (float32x2_t *)v310;
        a1[10] = (float32x2_t *)v272;
        a1[11] = (float32x2_t *)&v309[4 * v308];
        if (v304)
        {
          operator delete(v304);
          v264 = *a1;
          v265 = (char *)a1[1];
        }
        goto LABEL_303;
      }
      v312 = v301;
    }
    do
    {
LABEL_327:
      v318 = *((_DWORD *)v312-- - 1);
      *((_DWORD *)v310-- - 1) = v318;
    }
    while (v312 != v304);
    goto LABEL_328;
  }
  v271 = *a6;
  v272 = (float *)a1[10];
LABEL_282:
  v273 = (unint64_t)a1[11];
  if ((unint64_t)v272 >= v273)
  {
    v275 = (float *)a1[9];
    v276 = v272 - v275;
    v277 = v276 + 1;
    if (!((unint64_t)(v276 + 1) >> 62))
    {
      v278 = v273 - (_QWORD)v275;
      if (v278 >> 1 > v277)
        v277 = v278 >> 1;
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL)
        v279 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v279 = v277;
      if (!v279)
      {
        v280 = 0;
LABEL_331:
        v319 = (float *)&v280[4 * v276];
        v320 = (float32x2_t *)&v280[4 * v279];
        *v319 = v271;
        v274 = v319 + 1;
        if (v272 == v275)
          goto LABEL_340;
        v321 = (char *)v272 - (char *)v275 - 4;
        if (v321 >= 0x2C)
        {
          if ((unint64_t)((char *)v275 - v280) >= 0x20)
          {
            v323 = (v321 >> 2) + 1;
            v322 = &v272[-(v323 & 0x7FFFFFFFFFFFFFF8)];
            v324 = &v280[4 * v276 - 16];
            v325 = v272 - 4;
            v326 = v323 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v327 = *(_OWORD *)v325;
              *(v324 - 1) = *((_OWORD *)v325 - 1);
              *v324 = v327;
              v324 -= 2;
              v325 -= 8;
              v326 -= 8;
            }
            while (v326);
            v319 -= v323 & 0x7FFFFFFFFFFFFFF8;
            if (v323 == (v323 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_340:
              a1[9] = (float32x2_t *)v319;
              a1[10] = (float32x2_t *)v274;
              a1[11] = v320;
              if (v275)
                operator delete(v275);
              goto LABEL_342;
            }
          }
          else
          {
            v322 = v272;
          }
        }
        else
        {
          v322 = v272;
        }
        do
        {
          v328 = *((_DWORD *)v322-- - 1);
          *((_DWORD *)v319-- - 1) = v328;
        }
        while (v322 != v275);
        goto LABEL_340;
      }
      if (!(v279 >> 62))
      {
        v280 = operator new(4 * v279);
        goto LABEL_331;
      }
LABEL_347:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_346:
    abort();
  }
  *v272 = v271;
  v274 = v272 + 1;
LABEL_342:
  a1[10] = (float32x2_t *)v274;
LABEL_343:
  v329 = *((_DWORD *)a1 + 27);
  if (!v329)
  {
    *((float *)a1 + 28) = a7;
    a1[22] = (float32x2_t *)a2;
    a1[23] = (float32x2_t *)a3;
    *((_DWORD *)a1 + 48) = a5;
  }
  *((_DWORD *)a1 + 27) = v329 + 1;
}

void md::TrafficAccum::flushToRibbonCollection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  _DWORD *v7;
  size_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  _BOOL4 v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  void *v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  void *v58;
  size_t v59;
  float v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  void *v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  float *v81;
  float *v82;
  _QWORD *v83;
  unint64_t v84;
  void (***v85)(_QWORD);
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void (***v95)(_QWORD);
  unint64_t v96;
  __n128 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (***v109)(_QWORD);
  void (***v110)(_QWORD);
  unsigned __int8 v111;
  uint64_t v112;
  void (***v113)(_QWORD);
  unsigned __int8 v114;
  float **v115;
  float *v116;
  unint64_t v117;
  uint64_t v118;
  float *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  float **v123;
  unsigned __int8 v124;
  float v125;
  _BOOL8 v126;
  unint64_t v127;
  unint64_t v128;
  size_t prime;
  void *v130;
  void *v131;
  uint64_t v132;
  float *v133;
  size_t v134;
  size_t v135;
  size_t v136;
  float *i;
  size_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  float *v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  float **v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  void (***v164)(_QWORD);
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  void (***v174)(_QWORD);
  char *v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  char *v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _OWORD *v193;
  char *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  void *v198;
  malloc_zone_t *v199;
  os_log_t v200;
  uint64_t v201;
  void (***v202)(_QWORD);
  void (***v203)(_QWORD);
  unsigned __int8 v204;
  uint64_t v205;
  geo::read_write_lock *v206;
  const char *v207;
  malloc_zone_t *v208;
  os_log_t v209;
  uint64_t v210;
  void (***v211)(_QWORD);
  void (***v212)(_QWORD);
  unsigned __int8 v213;
  uint64_t v214;
  geo::read_write_lock *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  geo::read_write_lock *v221;
  const char *v222;
  malloc_zone_t *zone;
  uint64_t v224;
  geo::read_write_lock *v225;
  const char *v226;
  malloc_zone_t *v227;
  uint64_t v228;
  uint64_t v229;
  geo::read_write_lock *v230;
  const char *v231;
  malloc_zone_t *v232;
  uint64_t v233;
  geo::read_write_lock *v234;
  const char *v235;
  malloc_zone_t *v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  void (***v240)(_QWORD);
  uint64_t v241;
  std::__shared_weak_count *v242;
  uint64_t v243;
  int v244;
  _QWORD v245[2];

  v245[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 120))
  {
    v7 = *(_DWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v6)
    {
      v12 = v6 - (_QWORD)v7;
      v13 = (v6 - (uint64_t)v7) >> 3;
      if ((unint64_t)(v6 - (_QWORD)v7) > 0x2000)
      {
        v16 = malloc_type_malloc(v6 - (_QWORD)v7, 0x100004000313F17uLL);
        if (!v16)
          return;
        v14 = v16;
      }
      else
      {
        MEMORY[0x1E0C80A78](a1);
        v14 = (_DWORD *)((char *)&v237 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v14, v12);
        if (v12 <= 0x17)
        {
          v15 = 0;
          do
          {
            *(_QWORD *)&v14[2 * v15] = *(_QWORD *)&v7[2 * v15];
            ++v15;
          }
          while (v13 != v15);
          v245[0] = v13;
          goto LABEL_11;
        }
      }
      v245[0] = 1;
      *v14 = *v7;
      v14[1] = v7[1];
      v17 = v13 - 1;
      geo::dpSimplify<gm::Matrix<float,2,1>>((uint64_t)v7, 0, v17, (uint64_t)v14, v245);
      v18 = &v7[2 * v17];
      v19 = v245[0];
      v13 = ++v245[0];
      v20 = &v14[2 * v19];
      *v20 = *v18;
      v20[1] = v18[1];
LABEL_11:
      v21 = *(unsigned __int8 *)(a1 + 96);
      v22 = *(_DWORD *)(a2 + 4 * v21);
      if (v13 <= 5)
      {
        if (v13)
        {
          v28.i64[0] = *(_QWORD *)v14;
          v29.i64[0] = *(_QWORD *)v14;
          v29.i64[1] = *(_QWORD *)v14;
          *(int32x2_t *)v30.f32 = vdup_n_s32(0x7F7FFFFFu);
          v30.i64[1] = *(_QWORD *)v14;
          v28.i64[1] = 0x80000000800000;
          v31 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v28), v29, (int8x16_t)xmmword_19FFB2E30);
          if (v13 != 1)
          {
            v32.i64[0] = *((_QWORD *)v14 + 1);
            v33.i64[0] = v32.i64[0];
            v33.i64[1] = v32.i64[0];
            v34.i64[0] = v31.i64[0];
            v34.i64[1] = v32.i64[0];
            v32.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
            v31 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v34, v32), v33, (int8x16_t)v31);
            if (v13 != 2)
            {
              v35.i64[0] = *((_QWORD *)v14 + 2);
              v36.i64[0] = v35.i64[0];
              v36.i64[1] = v35.i64[0];
              v37.i64[0] = v31.i64[0];
              v37.i64[1] = v35.i64[0];
              v35.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
              v31 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v37, v35), v36, (int8x16_t)v31);
              if (v13 != 3)
              {
                v38.i64[0] = *((_QWORD *)v14 + 3);
                v39.i64[0] = v38.i64[0];
                v39.i64[1] = v38.i64[0];
                v40.i64[0] = v31.i64[0];
                v40.i64[1] = v38.i64[0];
                v38.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
                v31 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v40, v38), v39, (int8x16_t)v31);
                if (v13 != 4)
                {
                  v41.i64[0] = *((_QWORD *)v14 + 4);
                  v42.i64[0] = v41.i64[0];
                  v42.i64[1] = v41.i64[0];
                  v43.i64[0] = v31.i64[0];
                  v43.i64[1] = v41.i64[0];
                  v41.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
                  v31 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v43, v41), v42, (int8x16_t)v31);
                }
              }
            }
          }
        }
        else
        {
          v31 = (float32x4_t)xmmword_19FFB2E30;
        }
        v60 = 0.0019531;
        if (!v22)
          v60 = 0.012;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32(v31, (float32x4_t)xmmword_19FFB3480))) & 1) == 0
          && vaddq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1), v31)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3)).f32[0] <= v60)
        {
          goto LABEL_236;
        }
      }
      v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + 153) - 1 < 2;
      v241 = 0;
      v242 = 0;
      v24 = *(_QWORD *)(a1 + 144);
      v25 = *(std::__shared_weak_count **)(a1 + 152);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v241 = v24;
        v242 = v25;
        LOBYTE(v21) = *(_BYTE *)(a1 + 96);
      }
      else
      {
        v241 = *(_QWORD *)(a1 + 144);
      }
      v44 = *(_DWORD *)(a1 + 100) == 0;
      if (*(_DWORD *)(a1 + 100))
        v45 = -1;
      else
        v45 = 1;
      *(float *)&v243 = (float)v45;
      BYTE4(v243) = v21;
      v244 = *(_DWORD *)(a1 + 196);
      if ((v22 - 1) >= 2)
      {
        if (v22 != 3)
        {
          if (v22)
          {
LABEL_231:
            v183 = v242;
            if (v242)
            {
              v184 = (unint64_t *)&v242->__shared_owners_;
              do
                v185 = __ldaxr(v184);
              while (__stlxr(v185 - 1, v184));
              if (!v185)
              {
                ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                std::__shared_weak_count::__release_weak(v183);
              }
            }
LABEL_236:
            if (v12 > 0x2000)
              free(v14);
            return;
          }
          {
            v220 = operator new();
            *(_QWORD *)(v220 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v220 + 24) = "VectorKitLabels";
            *(_OWORD *)(v220 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v220 = &off_1E42B5668;
            *(_QWORD *)(v220 + 8) = "VectorKitLabels";
            *(_OWORD *)(v220 + 72) = 0u;
            *(_OWORD *)(v220 + 88) = 0u;
            *(_OWORD *)(v220 + 104) = 0u;
            *(_OWORD *)(v220 + 120) = 0u;
            *(_OWORD *)(v220 + 136) = 0u;
            *(_OWORD *)(v220 + 152) = 0u;
            *(_OWORD *)(v220 + 168) = 0u;
            *(_OWORD *)(v220 + 184) = 0u;
            *(_OWORD *)(v220 + 200) = 0u;
            *(_OWORD *)(v220 + 216) = 0u;
            *(_OWORD *)(v220 + 232) = 0u;
            *(_QWORD *)(v220 + 248) = 0;
            *(_OWORD *)(v220 + 56) = 0u;
            v221 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v220 + 56), 0);
            if ((_DWORD)v221)
              geo::read_write_lock::logFailure(v221, (uint64_t)"initialization", v222);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v220 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v220 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v220;
          }
          v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
          v48 = v47;
          v49 = v245[0];
          *(_OWORD *)(v47 + 49) = 0u;
          *(_OWORD *)(v47 + 8) = 0u;
          *(_OWORD *)(v47 + 24) = 0u;
          *(_OWORD *)(v47 + 40) = 0u;
          *(_QWORD *)(v47 + 56) = v49;
          *(_QWORD *)v47 = off_1E42AF568;
          *(_QWORD *)(v47 + 80) = 0;
          *(_QWORD *)(v47 + 88) = 0;
          *(_QWORD *)(v47 + 72) = 0;
          if (v49)
          {
            *(_QWORD *)(v47 + 88) = v49;
            {
              v229 = operator new();
              *(_QWORD *)(v229 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v229 + 24) = "VectorKitLabels";
              *(_OWORD *)(v229 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v229 = &off_1E42B5668;
              *(_QWORD *)(v229 + 8) = "VectorKitLabels";
              *(_OWORD *)(v229 + 72) = 0u;
              *(_OWORD *)(v229 + 88) = 0u;
              *(_OWORD *)(v229 + 104) = 0u;
              *(_OWORD *)(v229 + 120) = 0u;
              *(_OWORD *)(v229 + 136) = 0u;
              *(_OWORD *)(v229 + 152) = 0u;
              *(_OWORD *)(v229 + 168) = 0u;
              *(_OWORD *)(v229 + 184) = 0u;
              *(_OWORD *)(v229 + 200) = 0u;
              *(_OWORD *)(v229 + 216) = 0u;
              *(_OWORD *)(v229 + 232) = 0u;
              *(_QWORD *)(v229 + 248) = 0;
              *(_OWORD *)(v229 + 56) = 0u;
              v230 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v229 + 56), 0);
              if ((_DWORD)v230)
                geo::read_write_lock::logFailure(v230, (uint64_t)"initialization", v231);
              v232 = malloc_create_zone(0, 0);
              *(_QWORD *)(v229 + 48) = v232;
              malloc_set_zone_name(v232, "VectorKitLabels");
              *(_QWORD *)(v229 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v229;
            }
            v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 8 * v49, 8);
            *(_QWORD *)(v48 + 72) = v51;
            *(_BYTE *)(v48 + 64) = 1;
            v52 = *(_QWORD *)(v48 + 88);
          }
          else
          {
            v52 = 0;
            v51 = 0;
          }
          *(_QWORD *)v48 = off_1E428EC30;
          v240 = (void (***)(_QWORD))v48;
          *(_BYTE *)(v48 + 96) = v23;
          memcpy(v51, v14, 8 * v52);
          v81 = std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(a3, (md::TrafficBatchKey *)&v241, (uint64_t)&v241);
          v82 = v81;
          v83 = (_QWORD *)*((_QWORD *)v81 + 7);
          v84 = *((_QWORD *)v81 + 8);
          if ((unint64_t)v83 < v84)
          {
            if (v83)
            {
              v85 = v240;
              v240 = 0;
              *v83 = v85;
            }
            v86 = v83 + 1;
LABEL_173:
            *((_QWORD *)v82 + 7) = v86;
            std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100](&v240);
            goto LABEL_231;
          }
          v87 = *((_QWORD *)v81 + 6);
          v88 = ((uint64_t)v83 - v87) >> 3;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 61)
            abort();
          v90 = v84 - v87;
          if (v90 >> 2 > v89)
            v89 = v90 >> 2;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            v92 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v81 + 9) + 16))(*((_QWORD *)v81 + 9), 8 * v91, 8);
            v93 = (_QWORD *)(v92 + 8 * v88);
            v94 = v92 + 8 * v91;
            if (v92)
            {
              v95 = v240;
              v240 = 0;
              *v93 = v95;
            }
          }
          else
          {
            v94 = 0;
            v93 = (_QWORD *)(8 * v88);
          }
          v86 = v93 + 1;
          v142 = (char *)*((_QWORD *)v82 + 6);
          v143 = (char *)*((_QWORD *)v82 + 7);
          if (v143 == v142)
          {
            *((_QWORD *)v82 + 6) = v93;
            *((_QWORD *)v82 + 7) = v86;
            v149 = *((_QWORD *)v82 + 8);
            *((_QWORD *)v82 + 8) = v94;
LABEL_171:
            if (v143)
              (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)v82 + 9) + 40))(*((_QWORD *)v82 + 9), v143, v149 - (_QWORD)v143);
            goto LABEL_173;
          }
          v144 = v143 - v142 - 8;
          if (v144 > 0x57
            && ((v145 = (v142 - v143 + 7) & 0xFFFFFFFFFFFFFFF8, &v143[v145] >= (char *)v93)
             || (char *)v93 + v145 >= v143))
          {
            v186 = (v144 >> 3) + 1;
            v146 = &v143[-8 * (v186 & 0x3FFFFFFFFFFFFFFCLL)];
            v187 = v93 - 2;
            v188 = v143 - 32;
            v189 = v186 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v191 = *(_OWORD *)v188;
              v190 = *((_OWORD *)v188 + 1);
              *(_OWORD *)v188 = 0uLL;
              *((_OWORD *)v188 + 1) = 0uLL;
              v188 -= 32;
              *(v187 - 1) = v191;
              *v187 = v190;
              v187 -= 2;
              v189 -= 4;
            }
            while (v189);
            v93 -= v186 & 0x3FFFFFFFFFFFFFFCLL;
            if (v186 == (v186 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              v143 = (char *)*((_QWORD *)v82 + 6);
              v148 = (char *)*((_QWORD *)v82 + 7);
              *((_QWORD *)v82 + 6) = v93;
              *((_QWORD *)v82 + 7) = v86;
              v149 = *((_QWORD *)v82 + 8);
              *((_QWORD *)v82 + 8) = v94;
              if (v148 != v143)
              {
                v239 = xmmword_19FFB2E80;
                do
                {
                  v203 = (void (***)(_QWORD))*((_QWORD *)v148 - 1);
                  v148 -= 8;
                  v202 = v203;
                  *(_QWORD *)v148 = 0;
                  if (v203)
                  {
                    (**v202)(v202);
                    if ((v204 & 1) == 0
                    {
                      v205 = operator new();
                      *(_QWORD *)(v205 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v205 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v205 + 32) = v239;
                      *(_QWORD *)v205 = &off_1E42B5668;
                      *(_QWORD *)(v205 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v205 + 72) = 0u;
                      *(_OWORD *)(v205 + 88) = 0u;
                      *(_OWORD *)(v205 + 104) = 0u;
                      *(_OWORD *)(v205 + 120) = 0u;
                      *(_OWORD *)(v205 + 136) = 0u;
                      *(_OWORD *)(v205 + 152) = 0u;
                      *(_OWORD *)(v205 + 168) = 0u;
                      *(_OWORD *)(v205 + 184) = 0u;
                      *(_OWORD *)(v205 + 200) = 0u;
                      *(_OWORD *)(v205 + 216) = 0u;
                      *(_OWORD *)(v205 + 232) = 0u;
                      *(_QWORD *)(v205 + 248) = 0;
                      v238 = v205;
                      *(_OWORD *)(v205 + 56) = 0u;
                      v206 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v205 + 56), 0);
                      if ((_DWORD)v206)
                        geo::read_write_lock::logFailure(v206, (uint64_t)"initialization", v207);
                      v199 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v238 + 48) = v199;
                      malloc_set_zone_name(v199, "VectorKitLabels");
                      v200 = os_log_create("com.apple.VectorKit", "Memory");
                      v201 = v238;
                      *(_QWORD *)(v238 + 256) = v200;
                      mdm::Allocator::instance(void)::alloc = v201;
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v202, 104);
                  }
                }
                while (v148 != v143);
              }
              goto LABEL_171;
            }
          }
          else
          {
            v146 = (char *)*((_QWORD *)v82 + 7);
          }
          do
          {
            v147 = *((_QWORD *)v146 - 1);
            v146 -= 8;
            *(_QWORD *)v146 = 0;
            *--v93 = v147;
          }
          while (v146 != v142);
          goto LABEL_168;
        }
        {
          v224 = operator new();
          *(_QWORD *)(v224 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v224 + 24) = "VectorKitLabels";
          *(_OWORD *)(v224 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v224 = &off_1E42B5668;
          *(_QWORD *)(v224 + 8) = "VectorKitLabels";
          *(_OWORD *)(v224 + 72) = 0u;
          *(_OWORD *)(v224 + 88) = 0u;
          *(_OWORD *)(v224 + 104) = 0u;
          *(_OWORD *)(v224 + 120) = 0u;
          *(_OWORD *)(v224 + 136) = 0u;
          *(_OWORD *)(v224 + 152) = 0u;
          *(_OWORD *)(v224 + 168) = 0u;
          *(_OWORD *)(v224 + 184) = 0u;
          *(_OWORD *)(v224 + 200) = 0u;
          *(_OWORD *)(v224 + 216) = 0u;
          *(_OWORD *)(v224 + 232) = 0u;
          *(_QWORD *)(v224 + 248) = 0;
          *(_OWORD *)(v224 + 56) = 0u;
          v225 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v224 + 56), 0);
          if ((_DWORD)v225)
            geo::read_write_lock::logFailure(v225, (uint64_t)"initialization", v226);
          v227 = malloc_create_zone(0, 0);
          *(_QWORD *)(v224 + 48) = v227;
          malloc_set_zone_name(v227, "VectorKitLabels");
          *(_QWORD *)(v224 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v224;
        }
        v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
        v63 = v62;
        v64 = v245[0];
        *(_OWORD *)(v62 + 49) = 0u;
        *(_OWORD *)(v62 + 8) = 0u;
        *(_OWORD *)(v62 + 24) = 0u;
        *(_OWORD *)(v62 + 40) = 0u;
        *(_QWORD *)(v62 + 56) = v64;
        *(_QWORD *)v62 = off_1E42AF568;
        *(_QWORD *)(v62 + 80) = 0;
        *(_QWORD *)(v62 + 88) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        if (v64)
        {
          *(_QWORD *)(v62 + 88) = v64;
          {
            v233 = operator new();
            *(_QWORD *)(v233 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v233 + 24) = "VectorKitLabels";
            *(_OWORD *)(v233 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v233 = &off_1E42B5668;
            *(_QWORD *)(v233 + 8) = "VectorKitLabels";
            *(_OWORD *)(v233 + 72) = 0u;
            *(_OWORD *)(v233 + 88) = 0u;
            *(_OWORD *)(v233 + 104) = 0u;
            *(_OWORD *)(v233 + 120) = 0u;
            *(_OWORD *)(v233 + 136) = 0u;
            *(_OWORD *)(v233 + 152) = 0u;
            *(_OWORD *)(v233 + 168) = 0u;
            *(_OWORD *)(v233 + 184) = 0u;
            *(_OWORD *)(v233 + 200) = 0u;
            *(_OWORD *)(v233 + 216) = 0u;
            *(_OWORD *)(v233 + 232) = 0u;
            *(_QWORD *)(v233 + 248) = 0;
            *(_OWORD *)(v233 + 56) = 0u;
            v234 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v233 + 56), 0);
            if ((_DWORD)v234)
              geo::read_write_lock::logFailure(v234, (uint64_t)"initialization", v235);
            v236 = malloc_create_zone(0, 0);
            *(_QWORD *)(v233 + 48) = v236;
            malloc_set_zone_name(v236, "VectorKitLabels");
            *(_QWORD *)(v233 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v233;
          }
          v66 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 8 * v64, 8);
          *(_QWORD *)(v63 + 72) = v66;
          *(_BYTE *)(v63 + 64) = 1;
          v67 = *(_QWORD *)(v63 + 88);
        }
        else
        {
          v67 = 0;
          v66 = 0;
        }
        *(_QWORD *)v63 = off_1E4294008;
        v240 = (void (***)(_QWORD))v63;
        *(_BYTE *)(v63 + 96) = v23;
        *(_DWORD *)(v63 + 100) = v44;
        memcpy(v66, v14, 8 * v67);
        v96 = md::TrafficBatchKey::hash((md::TrafficBatchKey *)&v241);
        v98 = v96;
        v99 = a5[1];
        if (v99)
        {
          v97.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v99);
          v97.n128_u16[0] = vaddlv_u8((uint8x8_t)v97.n128_u64[0]);
          v100 = v97.n128_u32[0];
          if (v97.n128_u32[0] > 1uLL)
          {
            v23 = v96;
            if (v96 >= v99)
              v23 = v96 % v99;
          }
          else
          {
            v23 = (v99 + 0x7FFFFFFFFFFFFFFFLL) & v96;
          }
          v115 = *(float ***)(*a5 + 8 * v23);
          if (v115)
          {
            v116 = *v115;
            if (*v115)
            {
              v97.n128_u32[0] = v243;
              if (v100 < 2)
              {
                while (1)
                {
                  v118 = *((_QWORD *)v116 + 1);
                  if (v118 == v96)
                  {
                    if (*((_QWORD *)v116 + 2) == v241
                      && v116[8] == *(float *)&v243
                      && *((unsigned __int8 *)v116 + 36) == BYTE4(v243)
                      && *((_DWORD *)v116 + 10) == v244)
                    {
                      goto LABEL_205;
                    }
                  }
                  else if ((v118 & (v99 - 1)) != v23)
                  {
                    goto LABEL_124;
                  }
                  v116 = *(float **)v116;
                  if (!v116)
                    goto LABEL_124;
                }
              }
              do
              {
                v117 = *((_QWORD *)v116 + 1);
                if (v117 == v96)
                {
                  if (*((_QWORD *)v116 + 2) == v241
                    && v116[8] == *(float *)&v243
                    && *((unsigned __int8 *)v116 + 36) == BYTE4(v243)
                    && *((_DWORD *)v116 + 10) == v244)
                  {
                    goto LABEL_205;
                  }
                }
                else
                {
                  if (v117 >= v99)
                    v117 %= v99;
                  if (v117 != v23)
                    break;
                }
                v116 = *(float **)v116;
              }
              while (v116);
            }
          }
        }
LABEL_124:
        v119 = (float *)operator new(0x50uLL);
        v116 = v119;
        *(_QWORD *)v119 = 0;
        *((_QWORD *)v119 + 1) = v98;
        v120 = v242;
        *((_QWORD *)v119 + 2) = v241;
        *((_QWORD *)v119 + 3) = v120;
        if (v120)
        {
          v121 = (unint64_t *)&v120->__shared_owners_;
          do
            v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
        }
        v123 = (float **)(a5 + 2);
        *((_QWORD *)v119 + 4) = v243;
        *((_DWORD *)v119 + 10) = v244;
        *((_QWORD *)v119 + 7) = 0;
        *((_QWORD *)v119 + 8) = 0;
        *((_QWORD *)v119 + 6) = 0;
        {
          v228 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v228, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *((_QWORD *)v116 + 9) = mdm::Allocator::instance(void)::alloc;
        v97.n128_f32[0] = (float)(unint64_t)(a5[3] + 1);
        v125 = *((float *)a5 + 8);
        if (v99 && (float)(v125 * (float)v99) >= v97.n128_f32[0])
        {
LABEL_195:
          v159 = *a5;
          v160 = *(float ***)(*a5 + 8 * v23);
          if (v160)
          {
            *(_QWORD *)v116 = *v160;
          }
          else
          {
            *(_QWORD *)v116 = *v123;
            *v123 = v116;
            *(_QWORD *)(v159 + 8 * v23) = v123;
            if (!*(_QWORD *)v116)
            {
LABEL_204:
              ++a5[3];
LABEL_205:
              v162 = (_QWORD *)*((_QWORD *)v116 + 7);
              v163 = *((_QWORD *)v116 + 8);
              if ((unint64_t)v162 < v163)
              {
                if (v162)
                {
                  v164 = v240;
                  v240 = 0;
                  *v162 = v164;
                }
                v165 = v162 + 1;
LABEL_230:
                *((_QWORD *)v116 + 7) = v165;
                std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100](&v240);
                goto LABEL_231;
              }
              v166 = *((_QWORD *)v116 + 6);
              v167 = ((uint64_t)v162 - v166) >> 3;
              v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 61)
                abort();
              v169 = v163 - v166;
              if (v169 >> 2 > v168)
                v168 = v169 >> 2;
              if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
                v170 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v170 = v168;
              if (v170)
              {
                v171 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**((_QWORD **)v116 + 9) + 16))(*((_QWORD *)v116 + 9), 8 * v170, 8, v97);
                v172 = (_QWORD *)(v171 + 8 * v167);
                v173 = v171 + 8 * v170;
                if (v171)
                {
                  v174 = v240;
                  v240 = 0;
                  *v172 = v174;
                }
              }
              else
              {
                v173 = 0;
                v172 = (_QWORD *)(8 * v167);
              }
              v165 = v172 + 1;
              v175 = (char *)*((_QWORD *)v116 + 6);
              v176 = (char *)*((_QWORD *)v116 + 7);
              if (v176 == v175)
              {
                *((_QWORD *)v116 + 6) = v172;
                *((_QWORD *)v116 + 7) = v165;
                v182 = *((_QWORD *)v116 + 8);
                *((_QWORD *)v116 + 8) = v173;
LABEL_228:
                if (v176)
                  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)v116 + 9) + 40))(*((_QWORD *)v116 + 9), v176, v182 - (_QWORD)v176);
                goto LABEL_230;
              }
              v177 = v176 - v175 - 8;
              if (v177 > 0x57
                && ((v178 = (v175 - v176 + 7) & 0xFFFFFFFFFFFFFFF8, &v176[v178] >= (char *)v172)
                 || (char *)v172 + v178 >= v176))
              {
                v192 = (v177 >> 3) + 1;
                v179 = &v176[-8 * (v192 & 0x3FFFFFFFFFFFFFFCLL)];
                v193 = v172 - 2;
                v194 = v176 - 32;
                v195 = v192 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v197 = *(_OWORD *)v194;
                  v196 = *((_OWORD *)v194 + 1);
                  *(_OWORD *)v194 = 0uLL;
                  *((_OWORD *)v194 + 1) = 0uLL;
                  v194 -= 32;
                  *(v193 - 1) = v197;
                  *v193 = v196;
                  v193 -= 2;
                  v195 -= 4;
                }
                while (v195);
                v172 -= v192 & 0x3FFFFFFFFFFFFFFCLL;
                if (v192 == (v192 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_225:
                  v176 = (char *)*((_QWORD *)v116 + 6);
                  v181 = (char *)*((_QWORD *)v116 + 7);
                  *((_QWORD *)v116 + 6) = v172;
                  *((_QWORD *)v116 + 7) = v165;
                  v182 = *((_QWORD *)v116 + 8);
                  *((_QWORD *)v116 + 8) = v173;
                  if (v181 != v176)
                  {
                    v239 = xmmword_19FFB2E80;
                    do
                    {
                      v212 = (void (***)(_QWORD))*((_QWORD *)v181 - 1);
                      v181 -= 8;
                      v211 = v212;
                      *(_QWORD *)v181 = 0;
                      if (v212)
                      {
                        (**v211)(v211);
                        if ((v213 & 1) == 0
                        {
                          v214 = operator new();
                          *(_QWORD *)(v214 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v214 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v214 + 32) = v239;
                          *(_QWORD *)v214 = &off_1E42B5668;
                          *(_QWORD *)(v214 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v214 + 72) = 0u;
                          *(_OWORD *)(v214 + 88) = 0u;
                          *(_OWORD *)(v214 + 104) = 0u;
                          *(_OWORD *)(v214 + 120) = 0u;
                          *(_OWORD *)(v214 + 136) = 0u;
                          *(_OWORD *)(v214 + 152) = 0u;
                          *(_OWORD *)(v214 + 168) = 0u;
                          *(_OWORD *)(v214 + 184) = 0u;
                          *(_OWORD *)(v214 + 200) = 0u;
                          *(_OWORD *)(v214 + 216) = 0u;
                          *(_OWORD *)(v214 + 232) = 0u;
                          *(_QWORD *)(v214 + 248) = 0;
                          v238 = v214;
                          *(_OWORD *)(v214 + 56) = 0u;
                          v215 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v214 + 56), 0);
                          if ((_DWORD)v215)
                            geo::read_write_lock::logFailure(v215, (uint64_t)"initialization", v216);
                          v208 = malloc_create_zone(0, 0);
                          *(_QWORD *)(v238 + 48) = v208;
                          malloc_set_zone_name(v208, "VectorKitLabels");
                          v209 = os_log_create("com.apple.VectorKit", "Memory");
                          v210 = v238;
                          *(_QWORD *)(v238 + 256) = v209;
                          mdm::Allocator::instance(void)::alloc = v210;
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v211, 104);
                      }
                    }
                    while (v181 != v176);
                  }
                  goto LABEL_228;
                }
              }
              else
              {
                v179 = (char *)*((_QWORD *)v116 + 7);
              }
              do
              {
                v180 = *((_QWORD *)v179 - 1);
                v179 -= 8;
                *(_QWORD *)v179 = 0;
                *--v172 = v180;
              }
              while (v179 != v175);
              goto LABEL_225;
            }
            v161 = *(_QWORD *)(*(_QWORD *)v116 + 8);
            if ((v99 & (v99 - 1)) != 0)
            {
              if (v161 >= v99)
                v161 %= v99;
            }
            else
            {
              v161 &= v99 - 1;
            }
            v160 = (float **)(*a5 + 8 * v161);
          }
          *v160 = v116;
          goto LABEL_204;
        }
        v126 = 1;
        if (v99 >= 3)
          v126 = (v99 & (v99 - 1)) != 0;
        v127 = v126 | (2 * v99);
        v97.n128_f32[0] = v97.n128_f32[0] / v125;
        v128 = vcvtps_u32_f32(v97.n128_f32[0]);
        if (v127 <= v128)
          prime = v128;
        else
          prime = v127;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v99 = a5[1];
        if (prime <= v99)
        {
          if (prime >= v99)
            goto LABEL_182;
          v140 = vcvtps_u32_f32((float)(unint64_t)a5[3] / *((float *)a5 + 8));
          if (v99 < 3
            || (v97.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v99),
                v97.n128_u16[0] = vaddlv_u8((uint8x8_t)v97.n128_u64[0]),
                v97.n128_u32[0] > 1uLL))
          {
            v140 = std::__next_prime(v140);
          }
          else
          {
            v141 = 1 << -(char)__clz(v140 - 1);
            if (v140 >= 2)
              v140 = v141;
          }
          if (prime <= v140)
            prime = v140;
          if (prime >= v99)
          {
            v99 = a5[1];
LABEL_182:
            if ((v99 & (v99 - 1)) != 0)
            {
              if (v98 >= v99)
                v23 = v98 % v99;
              else
                v23 = v98;
            }
            else
            {
              v23 = (v99 + 0x7FFFFFFFFFFFFFFFLL) & v98;
            }
            goto LABEL_195;
          }
          if (!prime)
          {
            v198 = (void *)*a5;
            *a5 = 0;
            if (v198)
              operator delete(v198);
            v99 = 0;
            a5[1] = 0;
            goto LABEL_182;
          }
        }
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v130 = operator new(8 * prime);
        v131 = (void *)*a5;
        *a5 = (uint64_t)v130;
        if (v131)
          operator delete(v131);
        v132 = 0;
        a5[1] = prime;
        do
          *(_QWORD *)(*a5 + 8 * v132++) = 0;
        while (prime != v132);
        v133 = *v123;
        if (!*v123)
        {
LABEL_181:
          v99 = prime;
          goto LABEL_182;
        }
        v134 = *((_QWORD *)v133 + 1);
        v135 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v136 = v134 & v135;
          *(_QWORD *)(*a5 + 8 * v136) = v123;
          for (i = *(float **)v133; *(_QWORD *)v133; i = *(float **)v133)
          {
            v138 = *((_QWORD *)i + 1) & v135;
            if (v138 == v136)
            {
              v133 = i;
            }
            else if (*(_QWORD *)(*a5 + 8 * v138))
            {
              *(_QWORD *)v133 = *(_QWORD *)i;
              v139 = 8 * v138;
              *(_QWORD *)i = **(_QWORD **)(*a5 + v139);
              **(_QWORD **)(*a5 + v139) = i;
            }
            else
            {
              *(_QWORD *)(*a5 + 8 * v138) = v133;
              v133 = i;
              v136 = v138;
            }
          }
          goto LABEL_181;
        }
        if (v134 >= prime)
          v134 %= prime;
        *(_QWORD *)(*a5 + 8 * v134) = v123;
        v156 = *(float **)v133;
        if (!*(_QWORD *)v133)
          goto LABEL_181;
        while (1)
        {
          v158 = *((_QWORD *)v156 + 1);
          if (v158 >= prime)
            v158 %= prime;
          if (v158 != v134)
          {
            if (!*(_QWORD *)(*a5 + 8 * v158))
            {
              *(_QWORD *)(*a5 + 8 * v158) = v133;
              goto LABEL_186;
            }
            *(_QWORD *)v133 = *(_QWORD *)v156;
            v157 = 8 * v158;
            *(_QWORD *)v156 = **(_QWORD **)(*a5 + v157);
            **(_QWORD **)(*a5 + v157) = v156;
            v156 = v133;
          }
          v158 = v134;
LABEL_186:
          v133 = v156;
          v156 = *(float **)v156;
          v134 = v158;
          if (!v156)
            goto LABEL_181;
        }
      }
      {
        v217 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v217, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
      v55 = v54;
      v56 = v245[0];
      *(_OWORD *)(v54 + 49) = 0u;
      *(_OWORD *)(v54 + 8) = 0u;
      *(_OWORD *)(v54 + 24) = 0u;
      *(_OWORD *)(v54 + 40) = 0u;
      *(_QWORD *)(v54 + 56) = v56;
      *(_QWORD *)v54 = off_1E42AF568;
      *(_QWORD *)(v54 + 80) = 0;
      *(_QWORD *)(v54 + 88) = 0;
      *(_QWORD *)(v54 + 72) = 0;
      if (v56)
      {
        *(_QWORD *)(v54 + 88) = v56;
        {
          v218 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v218, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 8 * v56, 8);
        *(_QWORD *)(v55 + 72) = v58;
        *(_BYTE *)(v55 + 64) = 1;
        v59 = 8 * *(_QWORD *)(v55 + 88);
      }
      else
      {
        v59 = 0;
        v58 = 0;
      }
      *(_QWORD *)v55 = off_1E42961A8;
      v240 = (void (***)(_QWORD))v55;
      *(_BYTE *)(v55 + 96) = v23;
      *(_DWORD *)(v55 + 100) = v44;
      memcpy(v58, v14, v59);
      v68 = std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(a4, (md::TrafficBatchKey *)&v241, (uint64_t)&v241);
      v69 = v68;
      v70 = (uint64_t *)*((_QWORD *)v68 + 7);
      v71 = *((_QWORD *)v68 + 8);
      if ((unint64_t)v70 < v71)
      {
        if (v70)
        {
          v240 = 0;
          *v70 = v55;
        }
        v72 = v70 + 1;
LABEL_97:
        *((_QWORD *)v69 + 7) = v72;
        v113 = v240;
        v240 = 0;
        if (v113)
        {
          (**v113)(v113);
          {
            v219 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v219, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v113, 104);
        }
        goto LABEL_231;
      }
      v73 = *((_QWORD *)v68 + 6);
      v74 = ((uint64_t)v70 - v73) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        abort();
      v76 = v71 - v73;
      if (v76 >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      if (v77)
      {
        v78 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v68 + 9) + 16))(*((_QWORD *)v68 + 9), 8 * v77, 8);
        v79 = (uint64_t *)(v78 + 8 * v74);
        v80 = v78 + 8 * v77;
        if (v78)
        {
          v240 = 0;
          *v79 = v55;
        }
      }
      else
      {
        v80 = 0;
        v79 = (uint64_t *)(8 * v74);
      }
      v72 = v79 + 1;
      v101 = (char *)*((_QWORD *)v69 + 6);
      v102 = (char *)*((_QWORD *)v69 + 7);
      if (v102 == v101)
      {
        *((_QWORD *)v69 + 6) = v79;
        *((_QWORD *)v69 + 7) = v72;
        v108 = *((_QWORD *)v69 + 8);
        *((_QWORD *)v69 + 8) = v80;
        goto LABEL_95;
      }
      v103 = v102 - v101 - 8;
      if (v103 > 0x57
        && ((v104 = (v101 - v102 + 7) & 0xFFFFFFFFFFFFFFF8, &v102[v104] >= (char *)v79) || (char *)v79 + v104 >= v102))
      {
        v150 = (v103 >> 3) + 1;
        v105 = &v102[-8 * (v150 & 0x3FFFFFFFFFFFFFFCLL)];
        v151 = v79 - 2;
        v152 = v102 - 32;
        v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v155 = *(_OWORD *)v152;
          v154 = *((_OWORD *)v152 + 1);
          *(_OWORD *)v152 = 0uLL;
          *((_OWORD *)v152 + 1) = 0uLL;
          v152 -= 32;
          *((_OWORD *)v151 - 1) = v155;
          *(_OWORD *)v151 = v154;
          v151 -= 4;
          v153 -= 4;
        }
        while (v153);
        v79 -= v150 & 0x3FFFFFFFFFFFFFFCLL;
        if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_87:
          v102 = (char *)*((_QWORD *)v69 + 6);
          v107 = (char *)*((_QWORD *)v69 + 7);
          *((_QWORD *)v69 + 6) = v79;
          *((_QWORD *)v69 + 7) = v72;
          v108 = *((_QWORD *)v69 + 8);
          *((_QWORD *)v69 + 8) = v80;
          while (v107 != v102)
          {
            v110 = (void (***)(_QWORD))*((_QWORD *)v107 - 1);
            v107 -= 8;
            v109 = v110;
            *(_QWORD *)v107 = 0;
            if (v110)
            {
              (**v109)(v109);
              {
                v112 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v112, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v109, 104);
            }
          }
LABEL_95:
          if (v102)
            (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)v69 + 9) + 40))(*((_QWORD *)v69 + 9), v102, v108 - (_QWORD)v102);
          goto LABEL_97;
        }
      }
      else
      {
        v105 = (char *)*((_QWORD *)v69 + 7);
      }
      do
      {
        v106 = *((_QWORD *)v105 - 1);
        v105 -= 8;
        *(_QWORD *)v105 = 0;
        *--v79 = v106;
      }
      while (v105 != v101);
      goto LABEL_87;
    }
  }
}

void sub_19F4B4054(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))(v2 - 136));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2 - 128);
  _Unwind_Resume(a1);
}

uint64_t geo::dpSimplify<gm::Matrix<float,2,1>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  float32x2_t v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;

  v8 = result;
  __asm { FMOV            V9.2S, #1.0 }
  while (1)
  {
    v14 = a2 + 1;
    if (a2 + 1 >= a3)
      break;
    v15 = *(float32x2_t *)(v8 + 8 * a2);
    v16 = vsub_f32(*(float32x2_t *)(v8 + 8 * a3), v15);
    v17 = vmul_f32(v16, v16);
    v18 = 0;
    if (vaddv_f32(v17) <= 1.0e-15)
    {
      v25 = 0.0;
      do
      {
        v26 = vsub_f32(*(float32x2_t *)(v8 + 8 * v14), v15);
        v26.f32[0] = vaddv_f32(vmul_f32(v26, v26));
        v24 = fmaxf(v26.f32[0], v25);
        if (v26.f32[0] > v25)
          v18 = v14;
        ++v14;
        v25 = v24;
      }
      while (a3 != v14);
    }
    else
    {
      v19 = vdiv_f32(_D9, vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17));
      v20 = 0.0;
      do
      {
        v21 = *(float32x2_t *)(v8 + 8 * v14);
        v22 = vmul_f32(vsub_f32(v21, v15), v16);
        v23 = vsub_f32(v21, vmla_n_f32(v15, v16, fminf(fmaxf(vmul_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22), v19).f32[0], 0.0), 1.0)));
        v22.f32[0] = vaddv_f32(vmul_f32(v23, v23));
        v24 = fmaxf(v22.f32[0], v20);
        if (v22.f32[0] > v20)
          v18 = v14;
        ++v14;
        v20 = v24;
      }
      while (a3 != v14);
    }
    if (v24 <= 0.00000023842)
      break;
    result = geo::dpSimplify<gm::Matrix<float,2,1>>(v8);
    v27 = (_DWORD *)(v8 + 8 * v18);
    v28 = (*a5)++;
    v29 = (_DWORD *)(a4 + 8 * v28);
    *v29 = *v27;
    v29[1] = v27[1];
    a2 = v18;
  }
  return result;
}

float *std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(uint64_t *a1, md::TrafficBatchKey *this, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  float **v12;
  float *v13;
  uint64_t v14;
  float v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float **v24;
  unsigned __int8 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  float *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  float *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  float **v49;
  unint64_t v50;
  void *v52;
  uint64_t v53;

  v7 = md::TrafficBatchKey::hash(this);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v7;
    }
    v12 = *(float ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_QWORD *)this;
        v15 = *((float *)this + 4);
        v16 = *((unsigned __int8 *)this + 20);
        v17 = *((_DWORD *)this + 6);
        if (v11 < 2)
        {
          while (1)
          {
            v19 = *((_QWORD *)v13 + 1);
            if (v19 == v7)
            {
              if (*((_QWORD *)v13 + 2) == v14
                && v13[8] == v15
                && *((unsigned __int8 *)v13 + 36) == v16
                && *((_DWORD *)v13 + 10) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v9 - 1)) != v3)
            {
              goto LABEL_29;
            }
            v13 = *(float **)v13;
            if (!v13)
              goto LABEL_29;
          }
        }
        do
        {
          v18 = *((_QWORD *)v13 + 1);
          if (v18 == v7)
          {
            if (*((_QWORD *)v13 + 2) == v14
              && v13[8] == v15
              && *((unsigned __int8 *)v13 + 36) == v16
              && *((_DWORD *)v13 + 10) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v9)
              v18 %= v9;
            if (v18 != v3)
              break;
          }
          v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_29:
  v20 = (float *)operator new(0x50uLL);
  v13 = v20;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = v8;
  v21 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v20 + 2) = *(_QWORD *)a3;
  *((_QWORD *)v20 + 3) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (float **)(a1 + 2);
  *((_QWORD *)v20 + 4) = *(_QWORD *)(a3 + 16);
  v20[10] = *(float *)(a3 + 24);
  *((_QWORD *)v20 + 7) = 0;
  *((_QWORD *)v20 + 8) = 0;
  *((_QWORD *)v20 + 6) = 0;
  {
    v53 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v13 + 9) = mdm::Allocator::instance(void)::alloc;
  v26 = (float)(unint64_t)(a1[3] + 1);
  v27 = *((float *)a1 + 8);
  if (!v9 || (float)(v27 * (float)v9) < v26)
  {
    v28 = 1;
    if (v9 >= 3)
      v28 = (v9 & (v9 - 1)) != 0;
    v29 = v28 | (2 * v9);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = a1[1];
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_70;
      v42 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v9)
      {
        v9 = a1[1];
LABEL_70:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v8;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v52 = (void *)*a1;
        *a1 = 0;
        if (v52)
          operator delete(v52);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v32 = operator new(8 * prime);
    v33 = (void *)*a1;
    *a1 = (uint64_t)v32;
    if (v33)
      operator delete(v33);
    v34 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v34++) = 0;
    while (prime != v34);
    v35 = *v24;
    if (!*v24)
    {
LABEL_69:
      v9 = prime;
      goto LABEL_70;
    }
    v36 = *((_QWORD *)v35 + 1);
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*a1 + 8 * v38) = v24;
      for (i = *(float **)v35; *(_QWORD *)v35; i = *(float **)v35)
      {
        v40 = *((_QWORD *)i + 1) & v37;
        if (v40 == v38)
        {
          v35 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v40))
        {
          *(_QWORD *)v35 = *(_QWORD *)i;
          v41 = 8 * v40;
          *(_QWORD *)i = **(_QWORD **)(*a1 + v41);
          **(_QWORD **)(*a1 + v41) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v40) = v35;
          v35 = i;
          v38 = v40;
        }
      }
      goto LABEL_69;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*a1 + 8 * v36) = v24;
    v45 = *(float **)v35;
    if (!*(_QWORD *)v35)
      goto LABEL_69;
    while (1)
    {
      v47 = *((_QWORD *)v45 + 1);
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v36)
      {
        if (!*(_QWORD *)(*a1 + 8 * v47))
        {
          *(_QWORD *)(*a1 + 8 * v47) = v35;
          goto LABEL_74;
        }
        *(_QWORD *)v35 = *(_QWORD *)v45;
        v46 = 8 * v47;
        *(_QWORD *)v45 = **(_QWORD **)(*a1 + v46);
        **(_QWORD **)(*a1 + v46) = v45;
        v45 = v35;
      }
      v47 = v36;
LABEL_74:
      v35 = v45;
      v45 = *(float **)v45;
      v36 = v47;
      if (!v45)
        goto LABEL_69;
    }
  }
LABEL_83:
  v48 = *a1;
  v49 = *(float ***)(*a1 + 8 * v3);
  if (v49)
  {
    *(_QWORD *)v13 = *v49;
LABEL_91:
    *v49 = v13;
    goto LABEL_92;
  }
  *(_QWORD *)v13 = *v24;
  *v24 = v13;
  *(_QWORD *)(v48 + 8 * v3) = v24;
  if (*(_QWORD *)v13)
  {
    v50 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v50 >= v9)
        v50 %= v9;
    }
    else
    {
      v50 &= v9 - 1;
    }
    v49 = (float **)(*a1 + 8 * v50);
    goto LABEL_91;
  }
LABEL_92:
  ++a1[3];
  return v13;
}

void sub_19F4B4788(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void (****std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(_QWORD)))(_QWORD)
{
  void (***v2)(_QWORD);
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v2, 104);
  }
  return a1;
}

float *std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(uint64_t *a1, md::TrafficBatchKey *this, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  float **v12;
  float *v13;
  uint64_t v14;
  float v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float **v24;
  unsigned __int8 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  float *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  float *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  float **v49;
  unint64_t v50;
  void *v52;
  uint64_t v53;

  v7 = md::TrafficBatchKey::hash(this);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v7;
    }
    v12 = *(float ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_QWORD *)this;
        v15 = *((float *)this + 4);
        v16 = *((unsigned __int8 *)this + 20);
        v17 = *((_DWORD *)this + 6);
        if (v11 < 2)
        {
          while (1)
          {
            v19 = *((_QWORD *)v13 + 1);
            if (v19 == v7)
            {
              if (*((_QWORD *)v13 + 2) == v14
                && v13[8] == v15
                && *((unsigned __int8 *)v13 + 36) == v16
                && *((_DWORD *)v13 + 10) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v9 - 1)) != v3)
            {
              goto LABEL_29;
            }
            v13 = *(float **)v13;
            if (!v13)
              goto LABEL_29;
          }
        }
        do
        {
          v18 = *((_QWORD *)v13 + 1);
          if (v18 == v7)
          {
            if (*((_QWORD *)v13 + 2) == v14
              && v13[8] == v15
              && *((unsigned __int8 *)v13 + 36) == v16
              && *((_DWORD *)v13 + 10) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v9)
              v18 %= v9;
            if (v18 != v3)
              break;
          }
          v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_29:
  v20 = (float *)operator new(0x50uLL);
  v13 = v20;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = v8;
  v21 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v20 + 2) = *(_QWORD *)a3;
  *((_QWORD *)v20 + 3) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (float **)(a1 + 2);
  *((_QWORD *)v20 + 4) = *(_QWORD *)(a3 + 16);
  v20[10] = *(float *)(a3 + 24);
  *((_QWORD *)v20 + 7) = 0;
  *((_QWORD *)v20 + 8) = 0;
  *((_QWORD *)v20 + 6) = 0;
  {
    v53 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v13 + 9) = mdm::Allocator::instance(void)::alloc;
  v26 = (float)(unint64_t)(a1[3] + 1);
  v27 = *((float *)a1 + 8);
  if (!v9 || (float)(v27 * (float)v9) < v26)
  {
    v28 = 1;
    if (v9 >= 3)
      v28 = (v9 & (v9 - 1)) != 0;
    v29 = v28 | (2 * v9);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = a1[1];
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_70;
      v42 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v9)
      {
        v9 = a1[1];
LABEL_70:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v8;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v52 = (void *)*a1;
        *a1 = 0;
        if (v52)
          operator delete(v52);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v32 = operator new(8 * prime);
    v33 = (void *)*a1;
    *a1 = (uint64_t)v32;
    if (v33)
      operator delete(v33);
    v34 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v34++) = 0;
    while (prime != v34);
    v35 = *v24;
    if (!*v24)
    {
LABEL_69:
      v9 = prime;
      goto LABEL_70;
    }
    v36 = *((_QWORD *)v35 + 1);
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*a1 + 8 * v38) = v24;
      for (i = *(float **)v35; *(_QWORD *)v35; i = *(float **)v35)
      {
        v40 = *((_QWORD *)i + 1) & v37;
        if (v40 == v38)
        {
          v35 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v40))
        {
          *(_QWORD *)v35 = *(_QWORD *)i;
          v41 = 8 * v40;
          *(_QWORD *)i = **(_QWORD **)(*a1 + v41);
          **(_QWORD **)(*a1 + v41) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v40) = v35;
          v35 = i;
          v38 = v40;
        }
      }
      goto LABEL_69;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*a1 + 8 * v36) = v24;
    v45 = *(float **)v35;
    if (!*(_QWORD *)v35)
      goto LABEL_69;
    while (1)
    {
      v47 = *((_QWORD *)v45 + 1);
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v36)
      {
        if (!*(_QWORD *)(*a1 + 8 * v47))
        {
          *(_QWORD *)(*a1 + 8 * v47) = v35;
          goto LABEL_74;
        }
        *(_QWORD *)v35 = *(_QWORD *)v45;
        v46 = 8 * v47;
        *(_QWORD *)v45 = **(_QWORD **)(*a1 + v46);
        **(_QWORD **)(*a1 + v46) = v45;
        v45 = v35;
      }
      v47 = v36;
LABEL_74:
      v35 = v45;
      v45 = *(float **)v45;
      v36 = v47;
      if (!v45)
        goto LABEL_69;
    }
  }
LABEL_83:
  v48 = *a1;
  v49 = *(float ***)(*a1 + 8 * v3);
  if (v49)
  {
    *(_QWORD *)v13 = *v49;
LABEL_91:
    *v49 = v13;
    goto LABEL_92;
  }
  *(_QWORD *)v13 = *v24;
  *v24 = v13;
  *(_QWORD *)(v48 + 8 * v3) = v24;
  if (*(_QWORD *)v13)
  {
    v50 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v50 >= v9)
        v50 %= v9;
    }
    else
    {
      v50 &= v9 - 1;
    }
    v49 = (float **)(*a1 + 8 * v50);
    goto LABEL_91;
  }
LABEL_92:
  ++a1[3];
  return v13;
}

void sub_19F4B4E70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v3 = (_QWORD *)__p[6];
    if (v3)
    {
      v4 = (_QWORD *)__p[7];
      v5 = __p[6];
      if (v4 != v3)
      {
        do
        {
          v7 = (void (***)(_QWORD, uint64_t))*--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              v9 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 104);
          }
        }
        while (v4 != v3);
        v5 = __p[6];
      }
      __p[7] = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)__p[9] + 40))(__p[9], v5, __p[8] - v5);
    }
    v10 = (std::__shared_weak_count *)__p[3];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    goto LABEL_20;
  }
  if (__p)
LABEL_20:
    operator delete(__p);
}

void md::CasedTrafficRibbon::~CasedTrafficRibbon(md::CasedTrafficRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::SolidTrafficRibbon::~SolidTrafficRibbon(md::SolidTrafficRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,2,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)a1 = off_1E42AF568;
  if (*(_BYTE *)(a1 + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 72), 0);
  }
  return a1;
}

void md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,2,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)a1 = off_1E42AF568;
  if (*(_BYTE *)(a1 + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 72), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::TrafficRibbon::~TrafficRibbon(md::TrafficRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::TrafficAccum::flushToRibbonCollection(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  float *v15;
  float *v16;
  double v17;
  __int128 v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  BOOL v29;
  const float *v30;
  __int128 v31;
  float *v32;
  unint64_t v33;
  const float *v34;
  float *v35;
  float *v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  double v44;
  BOOL v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t v53;
  float v54;
  float *v55;
  float *v56;
  unint64_t *v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  float *v61;
  float v62;
  uint64_t v63;
  double v64;
  float v65;
  float v66;
  double v67;
  float v68;
  float v69;
  BOOL v70;
  _QWORD *v72;
  uint64_t v73;
  float32x2_t *v74;
  uint64_t v75;
  float v76;
  float v77;
  double v78;
  float64x2_t v79;
  float v80;
  _BOOL4 v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _DWORD *v89;
  char *v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  char v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  unint64_t v124;
  unsigned __int16 *v125;
  uint64_t v126;
  void *v127;
  uint64_t *v128;
  float *v129;
  unint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t *v133;
  uint64_t v134;
  float *v135;
  float v136;
  _DWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int *v144;
  unint64_t v145;
  float *i;
  unint64_t v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  unint64_t j;
  unint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  unint64_t v165;
  unint64_t v166;
  uint8x8_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unsigned __int8 v180;
  float v181;
  float v182;
  _BOOL8 v183;
  unint64_t v184;
  unint64_t v185;
  size_t prime;
  void *v187;
  void *v188;
  uint64_t v189;
  _QWORD *v190;
  size_t v191;
  size_t v192;
  size_t v193;
  _QWORD *k;
  size_t v195;
  uint64_t v196;
  unint64_t v197;
  uint8x8_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  size_t v202;
  uint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  void (***v208)(_QWORD);
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  void (***v218)(_QWORD);
  char *v219;
  char *v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  void (***v227)(_QWORD);
  void (***v228)(_QWORD);
  unsigned __int8 v229;
  uint64_t v230;
  void (***v231)(_QWORD);
  unsigned __int8 v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  _OWORD *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t *v253;
  size_t v254;
  float *v255;
  unsigned __int8 *v256;
  void (***v257)(_QWORD);
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  unsigned __int8 v261;
  _QWORD v262[3];
  __int128 v263[2];
  _QWORD *v264;
  uint64_t *v265;
  char v266;
  uint64_t v267;
  float32x4x2_t v268;

  v256 = a5;
  v267 = *MEMORY[0x1E0C80C00];
  if (a1[15])
  {
    v5 = a1;
    v7 = *a1;
    v6 = a1[1];
    if (*a1 != v6)
    {
      v11 = v6 - v7;
      v12 = (uint64_t)(v6 - v7) >> 3;
      v13 = v12 + ((uint64_t)(v6 - v7) >> 2);
      v14 = 4 * v13;
      if (4 * v13 > 0x2000)
      {
        v16 = (float *)malloc_type_malloc(4 * v13, 0x10000403E1C8BA9uLL);
        v15 = v16;
        if (!v16)
          return;
      }
      else
      {
        MEMORY[0x1E0C80A78](a1);
        v15 = (float *)((char *)&v250 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v15, v14);
      }
      v253 = a2;
      v20 = v12 - 1;
      if (v12 <= 1)
        v21 = 1;
      else
        v21 = v12;
      if (v21 > 0x17)
      {
        v22 = 0;
        v23 = !is_mul_ok(v21 - 1, 0xCuLL);
        v24 = 3 * (v21 - 1);
        v25 = (unint64_t)&v15[v24 + 1];
        v26 = (unint64_t)&v15[v24 + 2];
        v27 = (char *)&v15[v24];
        v29 = v26 >= (unint64_t)(v15 + 2) && v25 >= (unint64_t)(v15 + 1) && v27 >= (char *)v15;
        if (!v29 || v23)
          goto LABEL_25;
        if ((unint64_t)v15 >= v7 + 8 * v21 || v7 >= (unint64_t)&v15[3 * v21])
        {
          v22 = v21 & 0xFFFFFFFFFFFFFFF8;
          v30 = (const float *)(v7 + 32);
          v31 = 0uLL;
          v32 = v15;
          v33 = v21 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v34 = v30 - 8;
            v268 = vld2q_f32(v34);
            *(float32x4x2_t *)(&v17 - 2) = vld2q_f32(v30);
            v18 = 0uLL;
            v35 = v32 + 24;
            vst3q_f32(v32, *(float32x4x3_t *)(&v31 - 2));
            v36 = v32 + 12;
            vst3q_f32(v36, *(float32x4x3_t *)(&v17 - 2));
            v30 += 16;
            v32 = v35;
            v33 -= 8;
          }
          while (v33);
          if (v21 == v22)
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      v22 = 0;
LABEL_25:
      v37 = v21 - v22;
      v38 = (char *)&v15[3 * v22 + 2];
      v39 = (uint64_t *)(v7 + 8 * v22);
      do
      {
        v40 = *v39++;
        *((_QWORD *)v38 - 1) = v40;
        *(_DWORD *)v38 = 0;
        v38 += 12;
        --v37;
      }
      while (v37);
LABEL_27:
      v41 = v5[4] == v5[3];
      v255 = v15;
      v254 = v14;
      if (!v41)
      {
        v250 = v12 - 1;
        v251 = v11;
        v252 = v12;
        v42 = 0;
        v43 = 0;
        do
        {
          v46 = v5;
          v47 = v5[3];
          v48 = *(_OWORD *)(a3 + 16);
          v263[0] = *(_OWORD *)a3;
          v263[1] = v48;
          v49 = *a4;
          v50 = (std::__shared_weak_count *)a4[1];
          v262[1] = *a4;
          v262[2] = v50;
          if (v50)
          {
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(p_shared_owners);
            while (__stxr(v52 + 1, p_shared_owners));
          }
          v53 = v7;
          v54 = md::drape(v263, v49, v50, (uint64_t)v256, *(float *)(v7 + 8 * v42), *(float *)(v7 + 8 * v42 + 4), *(float *)(v47 + 4 * v42), *((double *)v46 + 27), v17, *(double *)&v18, v19);
          v55 = &v255[3 * v42];
          v55[2] = v54;
          v56 = v55 + 2;
          if (v50)
          {
            v57 = (unint64_t *)&v50->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v44 = *v56;
          v45 = v44 <= -3.40282337e38;
          if (v44 >= 3.40282337e38)
            v45 = 1;
          v43 |= v45;
          ++v42;
          v7 = v53;
          v5 = v46;
        }
        while (v42 != v21);
        v59 = v43 & (v256[1] > 0xDu);
        v14 = v254;
        v15 = v255;
        v12 = v252;
        v11 = v251;
        v20 = v250;
        if ((v59 & 1) != 0)
        {
          if (*(_BYTE *)(a3 + 24))
          {
            if (v251 <= 8)
            {
              MEMORY[0x1E0C80A78](v16);
              v72 = (unint64_t *)((char *)&v250 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
              bzero(v72, v11);
LABEL_69:
              v84 = 0;
              do
              {
                v72[v84] = v84;
                ++v84;
              }
              while (v12 != v84);
              v262[0] = v12;
              v83 = 1;
              v85 = v14;
              if (v14 > 0x2000)
              {
LABEL_72:
                v256 = (unsigned __int8 *)malloc_type_malloc(v85, 0x10000403E1C8BA9uLL);
                if (!v256)
                {
LABEL_288:
                  if (!v83)
                    free(v72);
                  goto LABEL_290;
                }
LABEL_77:
                v252 = v85;
                v87 = *((_DWORD *)v5 + 25);
                if (v12)
                {
                  v88 = 0;
                  v89 = v256 + 8;
                  do
                  {
                    v90 = (char *)&v15[3 * v72[v88]];
                    *(v89 - 2) = *(_DWORD *)v90;
                    *(v89 - 1) = *((_DWORD *)v90 + 1);
                    *v89 = *((_DWORD *)v90 + 2);
                    v89 += 3;
                    ++v88;
                  }
                  while (v12 != v88);
                  if (v12 > 5)
                  {
LABEL_89:
                    v258 = 0u;
                    v259 = 0u;
                    v107 = v5[20];
                    v108 = v5[21];
                    if (v108)
                    {
                      v109 = (unint64_t *)(v108 + 8);
                      do
                        v110 = __ldxr(v109);
                      while (__stxr(v110 + 1, v109));
                      *(_QWORD *)&v259 = v107;
                      *((_QWORD *)&v259 + 1) = v108;
                    }
                    else
                    {
                      *(_QWORD *)&v259 = v5[20];
                    }
                    LODWORD(v251) = v83;
                    v112 = v5[18];
                    v111 = v5[19];
                    if (v111)
                    {
                      v113 = (unint64_t *)(v111 + 8);
                      do
                        v114 = __ldxr(v113);
                      while (__stxr(v114 + 1, v113));
                    }
                    *(_QWORD *)&v258 = v112;
                    *((_QWORD *)&v258 + 1) = v111;
                    v115 = *((_BYTE *)v5 + 96);
                    v116 = *((_DWORD *)v5 + 49);
                    v118 = v5[9];
                    v117 = v5[10];
                    v261 = *((_BYTE *)v5 + 224);
                    LOBYTE(v260) = v115;
                    HIDWORD(v260) = v116;
                    if ((v119 & 1) == 0
                    {
                      v246 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v246, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 128, 8);
                    v121 = v120;
                    v122 = v262[0];
                    *(_OWORD *)(v120 + 49) = 0u;
                    *(_OWORD *)(v120 + 8) = 0u;
                    *(_OWORD *)(v120 + 24) = 0u;
                    *(_OWORD *)(v120 + 40) = 0u;
                    *(_QWORD *)(v120 + 56) = v122;
                    *(_QWORD *)v120 = off_1E42AF588;
                    *(_QWORD *)(v120 + 80) = 0;
                    *(_QWORD *)(v120 + 88) = 0;
                    *(_QWORD *)(v120 + 72) = 0;
                    if (v122)
                    {
                      *(_QWORD *)(v120 + 88) = v122;
                      if ((v123 & 1) == 0
                      {
                        v248 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v248, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      *(_QWORD *)(v121 + 72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 12 * v122, 8);
                      *(_BYTE *)(v121 + 64) = 1;
                    }
                    *(_QWORD *)v121 = off_1E4298CE8;
                    *(_QWORD *)(v121 + 96) = 0;
                    v124 = v121 + 96;
                    *(_QWORD *)(v121 + 104) = 0;
                    *(_QWORD *)(v121 + 112) = 0;
                    *(_QWORD *)(v121 + 96) = operator new[]();
                    *(_QWORD *)(v121 + 104) = operator new[]();
                    if (v117 == v118)
                      v126 = 0;
                    else
                      v126 = operator new[]();
                    *(_QWORD *)(v121 + 112) = v126;
                    v257 = (void (***)(_QWORD))v121;
                    *(_BYTE *)(v121 + 120) = *((_BYTE *)v5 + 224);
                    *(_DWORD *)(v121 + 124) = v87 == 0;
                    v127 = *(void **)(v121 + 72);
                    v15 = v255;
                    v128 = v253;
                    if (v127)
                      memcpy(v127, v256, 12 * v262[0]);
                    v129 = *(float **)(v121 + 104);
                    if (v129)
                    {
                      v130 = v5[6];
                      v131 = v262[0];
                      if (v5[7] == v130)
                      {
                        if (v262[0])
                          bzero(v129, 4 * v262[0]);
                      }
                      else if (v262[0])
                      {
                        v132 = *((double *)v5 + 25);
                        v133 = v72;
                        do
                        {
                          v134 = *v133++;
                          v135 = (float *)(v130 + 8 * v134);
                          if (!v87)
                            ++v135;
                          v136 = v132 * *v135;
                          *v129++ = v136;
                          --v131;
                        }
                        while (v131);
                      }
                    }
                    v137 = *(_DWORD **)(v121 + 112);
                    if (v137)
                    {
                      v138 = v262[0];
                      if (v262[0])
                      {
                        v139 = v5[9];
                        v140 = v72;
                        do
                        {
                          v141 = *v140++;
                          *v137++ = *(_DWORD *)(v139 + 4 * v141);
                          --v138;
                        }
                        while (v138);
                      }
                    }
                    v142 = v258;
                    v144 = *(unsigned int **)(v258 + 240);
                    v143 = *(unsigned int **)(v258 + 248);
                    v145 = ((char *)v143 - (char *)v144) >> 3;
                    for (i = md::SignedDistanceFieldGenerator::_hypotCache + 129752; v144 != v143; v144 += 2)
                    {
                      v147 = ((v145 << 6) - 0x61C8864680B583EBLL + (v145 >> 2) + *v144) ^ v145;
                      v145 = (*((unsigned __int16 *)v144 + 2) - 0x61C8864680B583EBLL + (v147 << 6) + (v147 >> 2)) ^ v147;
                    }
                    v148 = *(unsigned __int16 *)(v258 + 282);
                    if (*(_WORD *)(v258 + 282))
                    {
                      v149 = 0;
                      v150 = 0;
                      v151 = 0;
                      v152 = *(_QWORD *)(v258 + 272);
                      do
                      {
                        if (v151 < v148)
                        {
                          v150 = (unsigned int *)(v152 + 4 * v151);
                          v125 = (unsigned __int16 *)(v152 + *(unsigned __int16 *)(v258 + 280) + 2 * v151);
                        }
                        v129 = (float *)((v149 << 6) - 0x61C8864680B583EBLL + (v149 >> 2));
                        v149 ^= (*v125
                               - 0x61C8864680B583EBLL
                               + ((((unint64_t)v129 + *v150) ^ v149) << 6)
                               + ((((unint64_t)v129 + *v150) ^ v149) >> 2)) ^ ((unint64_t)v129 + *v150);
                        v153 = v151 + 1;
                        if (v151 + 1 < v148)
                          ++v151;
                        else
                          v151 = *(unsigned __int16 *)(v258 + 282);
                      }
                      while (v153 < v148);
                    }
                    else
                    {
                      v149 = 0;
                    }
                    v154 = v259;
                    v156 = *(unsigned int **)(v259 + 240);
                    v155 = *(unsigned int **)(v259 + 248);
                    for (j = ((char *)v155 - (char *)v156) >> 3; v156 != v155; v156 += 2)
                    {
                      v158 = ((j << 6) - 0x61C8864680B583EBLL + (j >> 2) + *v156) ^ j;
                      j = (*((unsigned __int16 *)v156 + 2) - 0x61C8864680B583EBLL + (v158 << 6) + (v158 >> 2)) ^ v158;
                    }
                    v159 = *(unsigned __int16 *)(v259 + 282);
                    if (*(_WORD *)(v259 + 282))
                    {
                      v160 = 0;
                      v161 = 0;
                      v162 = 0;
                      v163 = *(_QWORD *)(v259 + 272);
                      do
                      {
                        if (v162 < v159)
                        {
                          v161 = (unsigned int *)(v163 + 4 * v162);
                          v129 = (float *)(v163 + *(unsigned __int16 *)(v259 + 280) + 2 * v162);
                        }
                        v160 ^= (*(unsigned __int16 *)v129
                               - 0x61C8864680B583EBLL
                               + ((((v160 << 6) - 0x61C8864680B583EBLL + (v160 >> 2) + *v161) ^ v160) << 6)
                               + ((((v160 << 6) - 0x61C8864680B583EBLL + (v160 >> 2) + *v161) ^ v160) >> 2)) ^ ((v160 << 6) - 0x61C8864680B583EBLL + (v160 >> 2) + *v161);
                        v164 = v162 + 1;
                        if (v162 + 1 < v159)
                          ++v162;
                        else
                          v162 = *(unsigned __int16 *)(v259 + 282);
                      }
                      while (v164 < v159);
                    }
                    else
                    {
                      v160 = 0;
                    }
                    v165 = v149 ^ v145 ^ (2 * v261) ^ ((v160 ^ j ^ (2 * v260)) >> 1) ^ (4 * HIDWORD(v260));
                    v166 = v128[1];
                    if (v166)
                    {
                      v167 = (uint8x8_t)vcnt_s8((int8x8_t)v166);
                      v167.i16[0] = vaddlv_u8(v167);
                      if (v167.u32[0] > 1uLL)
                      {
                        v124 = v149 ^ v145 ^ (2 * v261) ^ ((v160 ^ j ^ (2 * v260)) >> 1) ^ (4 * HIDWORD(v260));
                        if (v165 >= v166)
                          v124 = v165 % v166;
                      }
                      else
                      {
                        v124 = (v166 - 1) & v165;
                      }
                      v168 = *(_QWORD **)(*v128 + 8 * v124);
                      if (v168)
                      {
                        v169 = (_QWORD *)*v168;
                        if (*v168)
                        {
                          if (v167.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v171 = v169[1];
                              if (v171 == v165)
                              {
                                if (v169[2] == (_QWORD)v258
                                  && v169[4] == (_QWORD)v259
                                  && *((unsigned __int8 *)v169 + 56) == v261
                                  && __PAIR64__(*((_DWORD *)v169 + 13), *((unsigned __int8 *)v169 + 48)) == __PAIR64__(HIDWORD(v260), v260))
                                {
                                  goto LABEL_239;
                                }
                              }
                              else if ((v171 & (v166 - 1)) != v124)
                              {
                                goto LABEL_172;
                              }
                              v169 = (_QWORD *)*v169;
                              if (!v169)
                                goto LABEL_172;
                            }
                          }
                          do
                          {
                            v170 = v169[1];
                            if (v170 == v165)
                            {
                              if (v169[2] == (_QWORD)v258
                                && v169[4] == (_QWORD)v259
                                && *((unsigned __int8 *)v169 + 56) == v261
                                && __PAIR64__(*((_DWORD *)v169 + 13), *((unsigned __int8 *)v169 + 48)) == __PAIR64__(HIDWORD(v260), v260))
                              {
                                goto LABEL_239;
                              }
                            }
                            else
                            {
                              if (v170 >= v166)
                                v170 %= v166;
                              if (v170 != v124)
                                break;
                            }
                            v169 = (_QWORD *)*v169;
                          }
                          while (v169);
                        }
                      }
                    }
LABEL_172:
                    v172 = operator new(0x60uLL);
                    v169 = v172;
                    v173 = v128 + 2;
                    v264 = v172;
                    v265 = v128 + 2;
                    *v172 = 0;
                    v172[1] = v165;
                    v174 = *((_QWORD *)&v258 + 1);
                    v172[2] = v142;
                    v172[3] = v174;
                    if (v174)
                    {
                      v175 = (unint64_t *)(v174 + 8);
                      do
                        v176 = __ldxr(v175);
                      while (__stxr(v176 + 1, v175));
                    }
                    v177 = *((_QWORD *)&v259 + 1);
                    v172[4] = v154;
                    v172[5] = v177;
                    if (v177)
                    {
                      v178 = (unint64_t *)(v177 + 8);
                      do
                        v179 = __ldxr(v178);
                      while (__stxr(v179 + 1, v178));
                    }
                    v172[6] = v260;
                    *((_BYTE *)v172 + 56) = v261;
                    v172[9] = 0;
                    v172[10] = 0;
                    v172[8] = 0;
                    v15 = v255;
                    if ((v180 & 1) == 0
                    {
                      v247 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v247, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    v169[11] = mdm::Allocator::instance(void)::alloc;
                    v266 = 1;
                    v181 = (float)(unint64_t)(v128[3] + 1);
                    v182 = *((float *)v128 + 8);
                    if (v166 && (float)(v182 * (float)v166) >= v181)
                    {
LABEL_229:
                      v203 = *v128;
                      v204 = *(_QWORD **)(*v128 + 8 * v124);
                      if (v204)
                      {
                        *v169 = *v204;
                        i = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                      }
                      else
                      {
                        *v169 = *v173;
                        *v173 = v169;
                        *(_QWORD *)(v203 + 8 * v124) = v173;
                        i = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                        if (!*v169)
                        {
LABEL_238:
                          ++v128[3];
LABEL_239:
                          v206 = (_QWORD *)v169[9];
                          v207 = v169[10];
                          if ((unint64_t)v206 < v207)
                          {
                            if (v206)
                            {
                              v208 = v257;
                              v257 = 0;
                              *v206 = v208;
                            }
                            v209 = v206 + 1;
LABEL_272:
                            v169[9] = v209;
                            v231 = v257;
                            v257 = 0;
                            v14 = v254;
                            if (v231)
                            {
                              (**v231)(v231);
                              if ((v232 & 1) == 0
                              {
                                v249 = operator new();
                                *((_QWORD *)i + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v249, "VectorKitLabels", 0x5ED09DD50000000FLL);
                              }
                              (*(void (**)(_QWORD, void (***)(_QWORD), uint64_t))(**((_QWORD **)i + 299) + 40))(*((_QWORD *)i + 299), v231, 128);
                            }
                            v233 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
                            if (*((_QWORD *)&v259 + 1))
                            {
                              v234 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
                              do
                                v235 = __ldaxr(v234);
                              while (__stlxr(v235 - 1, v234));
                              if (!v235)
                              {
                                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                                std::__shared_weak_count::__release_weak(v233);
                              }
                            }
                            v236 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
                            if (*((_QWORD *)&v258 + 1))
                            {
                              v237 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
                              do
                                v238 = __ldaxr(v237);
                              while (__stlxr(v238 - 1, v237));
                              if (!v238)
                              {
                                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                                std::__shared_weak_count::__release_weak(v236);
                              }
                            }
                            LOBYTE(v83) = v251;
                            goto LABEL_286;
                          }
                          v210 = v169[8];
                          v211 = ((uint64_t)v206 - v210) >> 3;
                          v212 = v211 + 1;
                          if ((unint64_t)(v211 + 1) >> 61)
                            abort();
                          v213 = v207 - v210;
                          if (v213 >> 2 > v212)
                            v212 = v213 >> 2;
                          if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
                            v214 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v214 = v212;
                          if (v214)
                          {
                            v215 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v169[11] + 16))(v169[11], 8 * v214, 8);
                            v216 = (_QWORD *)(v215 + 8 * v211);
                            v217 = v215 + 8 * v214;
                            if (v215)
                            {
                              v218 = v257;
                              v257 = 0;
                              *v216 = v218;
                            }
                            i = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                          }
                          else
                          {
                            v217 = 0;
                            v216 = (_QWORD *)(8 * v211);
                          }
                          v209 = v216 + 1;
                          v219 = (char *)v169[8];
                          v220 = (char *)v169[9];
                          if (v220 == v219)
                          {
                            v169[8] = v216;
                            v169[9] = v209;
                            v226 = v169[10];
                            v169[10] = v217;
LABEL_269:
                            if (v220)
                              (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)v169[11] + 40))(v169[11], v220, v226 - (_QWORD)v220);
                            v15 = v255;
                            goto LABEL_272;
                          }
                          v221 = v220 - v219 - 8;
                          if (v221 > 0x57
                            && ((v222 = (v219 - v220 + 7) & 0xFFFFFFFFFFFFFFF8, &v220[v222] >= (char *)v216)
                             || (char *)v216 + v222 >= v220))
                          {
                            v239 = (v221 >> 3) + 1;
                            v223 = &v220[-8 * (v239 & 0x3FFFFFFFFFFFFFFCLL)];
                            v240 = v216 - 2;
                            v241 = v220 - 32;
                            v242 = v239 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v244 = *(_OWORD *)v241;
                              v243 = *((_OWORD *)v241 + 1);
                              *(_OWORD *)v241 = 0uLL;
                              *((_OWORD *)v241 + 1) = 0uLL;
                              v241 -= 32;
                              *(v240 - 1) = v244;
                              *v240 = v243;
                              v240 -= 2;
                              v242 -= 4;
                            }
                            while (v242);
                            v216 -= v239 & 0x3FFFFFFFFFFFFFFCLL;
                            if (v239 == (v239 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_260:
                              v220 = (char *)v169[8];
                              v225 = (char *)v169[9];
                              v169[8] = v216;
                              v169[9] = v209;
                              v226 = v169[10];
                              v169[10] = v217;
                              while (v225 != v220)
                              {
                                v228 = (void (***)(_QWORD))*((_QWORD *)v225 - 1);
                                v225 -= 8;
                                v227 = v228;
                                *(_QWORD *)v225 = 0;
                                if (v228)
                                {
                                  (**v227)(v227);
                                  if ((v229 & 1) == 0
                                  {
                                    v230 = operator new();
                                    *((_QWORD *)i + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v230, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                  }
                                  (*(void (**)(_QWORD, void (***)(_QWORD), uint64_t))(**((_QWORD **)i + 299) + 40))(*((_QWORD *)i + 299), v227, 128);
                                }
                              }
                              goto LABEL_269;
                            }
                          }
                          else
                          {
                            v223 = (char *)v169[9];
                          }
                          do
                          {
                            v224 = *((_QWORD *)v223 - 1);
                            v223 -= 8;
                            *(_QWORD *)v223 = 0;
                            *--v216 = v224;
                          }
                          while (v223 != v219);
                          goto LABEL_260;
                        }
                        v205 = *(_QWORD *)(*v169 + 8);
                        if ((v166 & (v166 - 1)) != 0)
                        {
                          if (v205 >= v166)
                            v205 %= v166;
                        }
                        else
                        {
                          v205 &= v166 - 1;
                        }
                        v204 = (_QWORD *)(*v128 + 8 * v205);
                      }
                      *v204 = v169;
                      goto LABEL_238;
                    }
                    v183 = 1;
                    if (v166 >= 3)
                      v183 = (v166 & (v166 - 1)) != 0;
                    v184 = v183 | (2 * v166);
                    v185 = vcvtps_u32_f32(v181 / v182);
                    if (v184 <= v185)
                      prime = v185;
                    else
                      prime = v184;
                    if (prime == 1)
                    {
                      prime = 2;
                    }
                    else if ((prime & (prime - 1)) != 0)
                    {
                      prime = std::__next_prime(prime);
                    }
                    v166 = v128[1];
                    if (prime <= v166)
                    {
                      if (prime >= v166)
                        goto LABEL_216;
                      v197 = vcvtps_u32_f32((float)(unint64_t)v128[3] / *((float *)v128 + 8));
                      if (v166 < 3
                        || (v198 = (uint8x8_t)vcnt_s8((int8x8_t)v166), v198.i16[0] = vaddlv_u8(v198), v198.u32[0] > 1uLL))
                      {
                        v197 = std::__next_prime(v197);
                      }
                      else
                      {
                        v199 = 1 << -(char)__clz(v197 - 1);
                        if (v197 >= 2)
                          v197 = v199;
                      }
                      if (prime <= v197)
                        prime = v197;
                      if (prime >= v166)
                      {
                        v166 = v128[1];
LABEL_216:
                        if ((v166 & (v166 - 1)) != 0)
                        {
                          if (v165 >= v166)
                            v124 = v165 % v166;
                          else
                            v124 = v165;
                        }
                        else
                        {
                          v124 = (v166 - 1) & v165;
                        }
                        goto LABEL_229;
                      }
                      if (!prime)
                      {
                        v245 = (void *)*v128;
                        *v128 = 0;
                        if (v245)
                          operator delete(v245);
                        v166 = 0;
                        v128[1] = 0;
                        goto LABEL_216;
                      }
                    }
                    if (prime >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v187 = operator new(8 * prime);
                    v188 = (void *)*v128;
                    *v128 = (uint64_t)v187;
                    if (v188)
                      operator delete(v188);
                    v189 = 0;
                    v128[1] = prime;
                    do
                      *(_QWORD *)(*v128 + 8 * v189++) = 0;
                    while (prime != v189);
                    v190 = (_QWORD *)*v173;
                    if (!*v173)
                    {
LABEL_215:
                      v166 = prime;
                      goto LABEL_216;
                    }
                    v191 = v190[1];
                    v192 = prime - 1;
                    if ((prime & (prime - 1)) == 0)
                    {
                      v193 = v191 & v192;
                      *(_QWORD *)(*v128 + 8 * v193) = v173;
                      for (k = (_QWORD *)*v190; *v190; k = (_QWORD *)*v190)
                      {
                        v195 = k[1] & v192;
                        if (v195 == v193)
                        {
                          v190 = k;
                        }
                        else if (*(_QWORD *)(*v128 + 8 * v195))
                        {
                          *v190 = *k;
                          v196 = 8 * v195;
                          *k = **(_QWORD **)(*v128 + v196);
                          **(_QWORD **)(*v128 + v196) = k;
                        }
                        else
                        {
                          *(_QWORD *)(*v128 + 8 * v195) = v190;
                          v190 = k;
                          v193 = v195;
                        }
                      }
                      goto LABEL_215;
                    }
                    if (v191 >= prime)
                      v191 %= prime;
                    *(_QWORD *)(*v128 + 8 * v191) = v173;
                    v200 = (_QWORD *)*v190;
                    if (!*v190)
                      goto LABEL_215;
                    while (1)
                    {
                      v202 = v200[1];
                      if (v202 >= prime)
                        v202 %= prime;
                      if (v202 != v191)
                      {
                        if (!*(_QWORD *)(*v128 + 8 * v202))
                        {
                          *(_QWORD *)(*v128 + 8 * v202) = v190;
                          goto LABEL_220;
                        }
                        *v190 = *v200;
                        v201 = 8 * v202;
                        *v200 = **(_QWORD **)(*v128 + v201);
                        **(_QWORD **)(*v128 + v201) = v200;
                        v200 = v190;
                      }
                      v202 = v191;
LABEL_220:
                      v190 = v200;
                      v200 = (_QWORD *)*v200;
                      v191 = v202;
                      if (!v200)
                        goto LABEL_215;
                    }
                  }
                  v91.i64[0] = *(_QWORD *)(v7 + 8 * *v72);
                  v92.i64[0] = v91.i64[0];
                  v92.i64[1] = v91.i64[0];
                  *(int32x2_t *)v93.f32 = vdup_n_s32(0x7F7FFFFFu);
                  v93.i64[1] = v91.i64[0];
                  v91.i64[1] = 0x80000000800000;
                  v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v93, v91), v92, (int8x16_t)xmmword_19FFB2E30);
                  if (v12 != 1)
                  {
                    v95.i64[0] = *(_QWORD *)(v7 + 8 * v72[1]);
                    v96.i64[0] = v95.i64[0];
                    v96.i64[1] = v95.i64[0];
                    v97.i64[0] = v94.i64[0];
                    v97.i64[1] = v95.i64[0];
                    v95.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
                    v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, v95), v96, (int8x16_t)v94);
                    if (v12 != 2)
                    {
                      v98.i64[0] = *(_QWORD *)(v7 + 8 * v72[2]);
                      v99.i64[0] = v98.i64[0];
                      v99.i64[1] = v98.i64[0];
                      v100.i64[0] = v94.i64[0];
                      v100.i64[1] = v98.i64[0];
                      v98.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
                      v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v100, v98), v99, (int8x16_t)v94);
                      if (v12 != 3)
                      {
                        v101.i64[0] = *(_QWORD *)(v7 + 8 * v72[3]);
                        v102.i64[0] = v101.i64[0];
                        v102.i64[1] = v101.i64[0];
                        v103.i64[0] = v94.i64[0];
                        v103.i64[1] = v101.i64[0];
                        v101.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
                        v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v103, v101), v102, (int8x16_t)v94);
                        if (v12 != 4)
                        {
                          v104.i64[0] = *(_QWORD *)(v7 + 8 * v72[4]);
                          v105.i64[0] = v104.i64[0];
                          v105.i64[1] = v104.i64[0];
                          v106.i64[0] = v94.i64[0];
                          v106.i64[1] = v104.i64[0];
                          v104.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
                          v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v106, v104), v105, (int8x16_t)v94);
                        }
                      }
                    }
                  }
                }
                else
                {
                  v94 = (float32x4_t)xmmword_19FFB2E30;
                }
                if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32(v94, (float32x4_t)xmmword_19FFB3480))) & 1) == 0
                  && vaddq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))), (float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 3)).f32[0] <= 0.0019531)
                {
LABEL_286:
                  if (v252 > 0x2000)
                    free(v256);
                  goto LABEL_288;
                }
                goto LABEL_89;
              }
LABEL_76:
              MEMORY[0x1E0C80A78](v73);
              v256 = (unsigned __int8 *)&v250 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v256, v85);
              goto LABEL_77;
            }
            v60 = 2;
            v61 = v255 + 5;
            v62 = *v255;
            if (v252 > 2)
              v60 = v252;
            v63 = v60 - 1;
            v64 = 1.0 / *((double *)v5 + 27);
            do
            {
              v65 = *(v61 - 3);
              v66 = *v61 - v65;
              v67 = v62;
              v62 = *(v61 - 2);
              v68 = sqrt((v62 - v67) * (v62 - v67) + (*(v61 - 1) - *(v61 - 4)) * (*(v61 - 1) - *(v61 - 4)));
              v69 = v66 / v68;
              v70 = v69 <= 0.0 || v69 <= 0.7;
              if (!v70 && v64 * v66 > 4.0)
                *v61 = v65;
              v61 += 3;
              --v63;
            }
            while (v63);
            if ((uint64_t)v11 >= 9)
            {
              v74 = (float32x2_t *)&v15[3 * v12 - 3];
              v75 = v20;
              do
              {
                v76 = v74[1].f32[0];
                v77 = v74[-1].f32[1] - v76;
                v78 = v64 * v77;
                v79 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v74 - 12)), vcvtq_f64_f32(*v74));
                *(float *)v79.f64 = sqrt(vaddvq_f64(vmulq_f64(v79, v79)));
                v80 = v77 / *(float *)v79.f64;
                if (v80 > 0.0 && v80 > 0.7 && v78 > 4.0)
                  v74[-1].f32[1] = v76;
                v74 = (float32x2_t *)((char *)v74 - 12);
                v70 = v75-- <= 1;
              }
              while (!v70);
            }
          }
        }
      }
      v83 = v11 <= 0x2000;
      if (v11 > 0x2000)
      {
        v72 = malloc_type_malloc(v11, 0x100004000313F17uLL);
        if (!v72)
        {
LABEL_290:
          if (v14 > 0x2000)
            free(v15);
          return;
        }
      }
      else
      {
        MEMORY[0x1E0C80A78](v16);
        v72 = (unint64_t *)((char *)&v250 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v72, v11);
        if (v11 <= 0x17)
          goto LABEL_69;
      }
      v262[0] = 1;
      *v72 = 0;
      v73 = geo::dpSimplifyViaIndexes<gm::Matrix<float,3,1>,unsigned long>((uint64_t)v15, 0, v20, (uint64_t)v72, v262);
      v86 = v262[0];
      v12 = ++v262[0];
      v72[v86] = v20;
      v85 = 12 * (v86 + 1);
      if (v85 > 0x2000)
        goto LABEL_72;
      goto LABEL_76;
    }
  }
}

void sub_19F4B709C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](v1 - 136);
  std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))(v1 - 264));
  md::DaVinciTrafficBatchKey::~DaVinciTrafficBatchKey((md::DaVinciTrafficBatchKey *)(v1 - 256));
  _Unwind_Resume(a1);
}

void sub_19F4B70E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<float,3,1>,unsigned long>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;

  v8 = result;
  v9 = (float *)(result + 12 * a3);
  v10 = result + 20;
  while (1)
  {
    v11 = a2 + 1;
    if (a2 + 1 >= a3)
      break;
    v12 = (float *)(v8 + 12 * a2);
    v13 = *v12;
    v14 = v12[1];
    v15 = *v9 - *v12;
    v16 = v9[1] - v14;
    v17 = v12[2];
    v18 = v9[2] - v17;
    v19 = (float)((float)(v15 * v15) + (float)(v16 * v16)) + (float)(v18 * v18);
    v20 = 0;
    v21 = (float *)(v10 + 12 * a2);
    if (v19 <= 1.0e-15)
    {
      v30 = 0.0;
      do
      {
        v31 = *(v21 - 2);
        v32 = *(v21 - 1);
        v33 = *v21;
        v21 += 3;
        v34 = (float)((float)((float)(v31 - v13) * (float)(v31 - v13)) + (float)((float)(v32 - v14) * (float)(v32 - v14)))
            + (float)((float)(v33 - v17) * (float)(v33 - v17));
        v29 = fmaxf(v34, v30);
        if (v34 > v30)
          v20 = v11;
        ++v11;
        v30 = v29;
      }
      while (a3 != v11);
    }
    else
    {
      v22 = 0.0;
      v23 = 1.0 / v19;
      do
      {
        v24 = *(v21 - 2);
        v25 = *(v21 - 1);
        v26 = *v21;
        v21 += 3;
        v27 = fminf(fmaxf((float)((float)((float)((float)(v24 - v13) * v15) + (float)((float)(v25 - v14) * v16))+ (float)((float)(v26 - v17) * v18))* v23, 0.0), 1.0);
        v28 = (float)((float)((float)(v24 - (float)(v13 + (float)(v27 * v15)))
                            * (float)(v24 - (float)(v13 + (float)(v27 * v15))))
                    + (float)((float)(v25 - (float)(v14 + (float)(v27 * v16)))
                            * (float)(v25 - (float)(v14 + (float)(v27 * v16)))))
            + (float)((float)(v26 - (float)(v17 + (float)(v27 * v18))) * (float)(v26 - (float)(v17 + (float)(v27 * v18))));
        v29 = fmaxf(v28, v22);
        if (v28 > v22)
          v20 = v11;
        ++v11;
        v22 = v29;
      }
      while (a3 != v11);
    }
    if (v29 <= 0.00000023842)
      break;
    result = geo::dpSimplifyViaIndexes<gm::Matrix<float,3,1>,unsigned long>(v8);
    v35 = (*a5)++;
    *(_QWORD *)(a4 + 8 * v35) = v20;
    a2 = v20;
  }
  return result;
}

void (****std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(_QWORD)))(_QWORD)
{
  void (***v2)(_QWORD);
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v2, 128);
  }
  return a1;
}

void md::DaVinciTrafficBatchKey::~DaVinciTrafficBatchKey(md::DaVinciTrafficBatchKey *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

uint64_t md::Ribbons::SmoothRibbon<gm::Matrix<float,3,1>>::~SmoothRibbon(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)a1 = off_1E42AF588;
  if (*(_BYTE *)(a1 + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 72), 0);
  }
  return a1;
}

void md::DaVinciTrafficRibbon::~DaVinciTrafficRibbon(md::DaVinciTrafficRibbon *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4298CE8;
  v2 = *((_QWORD *)this + 12);
  if (v2)
    MEMORY[0x1A1AF4DE8](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 13);
  if (v3)
    MEMORY[0x1A1AF4DE8](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    MEMORY[0x1A1AF4DE8](v4, 0x1000C8052888210);
  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v6 = operator new();
      *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v6 + 24) = "VectorKitLabels";
      *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v6 = &off_1E42B5668;
      *(_QWORD *)(v6 + 8) = "VectorKitLabels";
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_QWORD *)(v6 + 248) = 0;
      *(_OWORD *)(v6 + 56) = 0u;
      v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
      if ((_DWORD)v7)
        geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v6 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v6;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4298CE8;
  v2 = *((_QWORD *)this + 12);
  if (v2)
    MEMORY[0x1A1AF4DE8](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 13);
  if (v3)
    MEMORY[0x1A1AF4DE8](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    MEMORY[0x1A1AF4DE8](v4, 0x1000C8052888210);
  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v6 = operator new();
      *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v6 + 24) = "VectorKitLabels";
      *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v6 = &off_1E42B5668;
      *(_QWORD *)(v6 + 8) = "VectorKitLabels";
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_QWORD *)(v6 + 248) = 0;
      *(_OWORD *)(v6 + 56) = 0u;
      v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
      if ((_DWORD)v7)
        geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v6 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v6;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,3,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)a1 = off_1E42AF588;
  if (*(_BYTE *)(a1 + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 72), 0);
  }
  return a1;
}

void md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,3,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)a1 = off_1E42AF588;
  if (*(_BYTE *)(a1 + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 72), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F4B7D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4B8130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B82E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B871C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B8B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B8CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4B8D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4B8EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4B8F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B8FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4B9008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B9050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4B9AA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BA2CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BA674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BA8E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BAB60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BAD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F4BAEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BB118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BB18C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BB2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BB338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BB390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BB3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BB4C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F4BB4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BB5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4BB684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F4BB778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F4BB838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BB90C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4BBB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19F4BBD6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BBF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BC224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BC2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BC328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BC3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BC418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4BC5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BC774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BC938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BCAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BCCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BCE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BD048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BD20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4BDA84(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v3 - 80);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F4BDD08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BDD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BDDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BDDEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BDE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BE62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BE698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BECCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19F4BF6B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BF810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BF990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4BFB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4BFFA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19F4C01E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  if (v11)

  if (v10)
  _Unwind_Resume(a1);
}

void sub_19F4C02B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4C0660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C07C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4C07D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_19F4C09C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F4C0A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4C0A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C0B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C0E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)VKMapView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F4C1058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_19F4C11AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4C131C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C14A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F4C1578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F4C1638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C16EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C1798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4C1840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4C18E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4C1AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C1C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C1CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C2300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_19F4C2480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F4C2514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4C271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19F4C297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_19F4C2BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19F4C351C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  std::unordered_map<std::string,double>::~unordered_map[abi:nn180100](v30 - 168);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F4C581C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a40);

  _Unwind_Resume(a1);
}

void sub_19F4C5E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19F4C6534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4C69B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_19F4C6A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4C6ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4C6B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4C6C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4C6C98(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F4C6E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4C6EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4C6F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C7098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19F4C7184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19F4C72EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4C74F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = a12;
  if (a12 == v14)
  {
    v17 = 4;
    v16 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  _Unwind_Resume(a1);
}

void sub_19F4C8008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_19F4C82C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F4C8308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C8874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19F4C8B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4C8F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4C9FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_19F4CA110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_19F4CA23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_19F4CA2E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CA354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CA3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CA800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CA940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CA9A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F4CAED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CAF70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CAF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CAFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CB0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19F4CB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CB2C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CB434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CB5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CB714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CB7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CB8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CB9C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4CBAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4CBD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F4CBE50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CC3AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CC4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4CC5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CC718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19F4CC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4CC858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4CC8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4CC978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4CCA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4CCAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4CCD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4CCE44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

void sub_19F4CD020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4CD190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4CD510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4CD600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_19F4CD6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CD7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19F4CD87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CD928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CD9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CDFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CE06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CE100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CE16C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CE1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CE284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CE9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4CEB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4CEE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CEF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CF20C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKManifestTileGroupObserverProxy * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5270;

  return a1;
}

void geo::_retain_ptr<VKManifestTileGroupObserverProxy * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5270;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<NSSet<NSNumber *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B52F0;

  return a1;
}

void geo::_retain_ptr<NSSet<NSNumber *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B52F0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKCamera * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B54B0;

  return a1;
}

void geo::_retain_ptr<VKCamera * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B54B0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKStateCaptureHandler * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F90;

  return a1;
}

void geo::_retain_ptr<VKStateCaptureHandler * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F90;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKARWalkingCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B51F0;

  return a1;
}

void geo::_retain_ptr<VKARWalkingCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B51F0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKMuninCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5010;

  return a1;
}

void geo::_retain_ptr<VKMuninCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5010;

  JUMPOUT(0x1A1AF4E00);
}

void sub_19F4CFA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4CFB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrIN2md11LabelMarkerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrIN2md11LabelMarkerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19F4CFCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CFDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4CFEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4CFF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D0014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D015C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D02E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D043C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D0594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D0748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKMuninRoad * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A10;

  return a1;
}

void geo::_retain_ptr<VKMuninRoad * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A10;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKMuninJunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4BF0;

  return a1;
}

void geo::_retain_ptr<VKMuninJunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4BF0;

  JUMPOUT(0x1A1AF4E00);
}

void __copy_helper_block_ea8_40c131_ZTSN3geo11_retain_ptrIU8__strongP15VKMuninJunctionNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE64c127_ZTSN3geo11_retain_ptrIU8__strongP11VKMuninRoadNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(_QWORD *a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;

  a1[5] = &off_1E42B4BF0;
  a1[6] = 0;
  v4 = *(id *)(a2 + 48);
  v5 = (void *)a1[6];
  a1[6] = v4;

  a1[8] = &off_1E42B4A10;
  a1[9] = 0;
  v6 = *(id *)(a2 + 72);
  v7 = (void *)a1[9];
  a1[9] = v6;

}

void __destroy_helper_block_ea8_40c131_ZTSN3geo11_retain_ptrIU8__strongP15VKMuninJunctionNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE64c127_ZTSN3geo11_retain_ptrIU8__strongP11VKMuninRoadNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1)
{
  *(_QWORD *)(a1 + 64) = &off_1E42B4A10;

  *(_QWORD *)(a1 + 40) = &off_1E42B4BF0;
}

void sub_19F4D0994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D0A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t *std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100](uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4]);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  return a1;
}

void **std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19F4D0B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4D0C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,double>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t __Block_byref_object_copy__977(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__978(uint64_t a1)
{

}

void sub_19F4D0E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F4D1254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19F4D14BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19F4D153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D15F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D16AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F4D1ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D1E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D1F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D2040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D20EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D2198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D22EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D2454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelCategoryFilter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelCategoryFilter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelCategoryFilter>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1E42B4E90;

}

uint64_t geo::_retain_ptr<GEOPOICategoryFilter * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E90;

  return a1;
}

void geo::_retain_ptr<GEOPOICategoryFilter * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E90;

  JUMPOUT(0x1A1AF4E00);
}

void sub_19F4D25B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D262C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D26A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F4D272C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D2A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4D3B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = *(_QWORD **)(v9 - 184);
  if (v11 == (_QWORD *)(v9 - 208))
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 208);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F4D427C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{

  _Unwind_Resume(a1);
}

void sub_19F4D4608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LandmarkTileData::~LandmarkTileData(md::LandmarkTileData *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *((_QWORD *)this + 1);
    v5 = *(void **)this;
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v3;
    operator delete(v5);
  }
}

void sub_19F4D4C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  gdc::ResourceStatusContainer::~ResourceStatusContainer((gdc::ResourceStatusContainer *)va);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va1);

  _Unwind_Resume(a1);
}

void sub_19F4D4F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19F4D4FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D5074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKMapCanvas;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F4D5248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F4D5338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19F4D5708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D57D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D59C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D59D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4D5F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4D63C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19F4D64AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  void *v11;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);

  _Unwind_Resume(a1);
}

void sub_19F4D68C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  std::mutex *v14;

  std::mutex::unlock(v14);

  _Unwind_Resume(a1);
}

void sub_19F4D6AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  void *v11;
  void *v12;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);

  _Unwind_Resume(a1);
}

void sub_19F4D6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  void *v11;
  void *v12;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);

  _Unwind_Resume(a1);
}

void sub_19F4D6EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

void sub_19F4D7A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  unint64_t *p_shared_owners;
  unint64_t v33;

  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19F4D8128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F4D8170(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F4D8188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19F4D82EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F4D84D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4D8948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_19F4D89F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F4D8A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F4D8C78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F4D8C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_19F4D8E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4D8F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*a1);
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2 != (void *)a1[7])
      free(v2);
    operator delete(a1);
  }
}

void gdc::ResourceStatusContainer::~ResourceStatusContainer(gdc::ResourceStatusContainer *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*((_QWORD **)this + 7));
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void *)v2[3];
      if (v5 != (void *)v2[5])
        free(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
}

void sub_19F4D9490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

void sub_19F4D98E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,_QWORD *a24)
{
  void *v24;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;

  v26 = a24;
  if (a24)
  {
    do
    {
      v27 = (_QWORD *)*v26;
      v28 = (void *)v26[3];
      if (v28 != (void *)v26[5])
        free(v28);
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6 != (void *)v2[5])
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3 != (void *)v2[5])
        free(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<gdc::LayerDataRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::LayerDataRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::TerrainMeshProviderLogic::~TerrainMeshProviderLogic(md::TerrainMeshProviderLogic *this)
{
  md::TerrainMeshProviderLogic::~TerrainMeshProviderLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  *(_QWORD *)this = &off_1E426F780;
  v2 = (_QWORD *)*((_QWORD *)this + 28);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 23);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 18);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
    operator delete(v10);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

_QWORD *md::TerrainMeshProviderLogic::reset(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;

  v1 = this;
  if (this[19])
  {
    this = (_QWORD *)this[18];
    if (this)
    {
      do
      {
        v2 = (_QWORD *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[18] = 0;
    v3 = v1[17];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[16] + 8 * i) = 0;
    }
    v1[19] = 0;
  }
  if (v1[24])
  {
    this = (_QWORD *)v1[23];
    if (this)
    {
      do
      {
        v5 = (_QWORD *)*this;
        operator delete(this);
        this = v5;
      }
      while (v5);
    }
    v1[23] = 0;
    v6 = v1[22];
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(v1[21] + 8 * j) = 0;
    }
    v1[24] = 0;
  }
  return this;
}

_QWORD *md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  size_t prime;
  uint64_t *v6;
  int8x8_t v7;
  BOOL v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v50;
  _QWORD v51[3];
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;

  v50 = (_QWORD *)operator new();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v51, a1);
  v4 = operator new();
  prime = v51[2];
  *(_QWORD *)v4 = v51[0];
  *(_OWORD *)(v4 + 8) = 0u;
  v6 = (uint64_t *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_DWORD *)(v4 + 40) = v53;
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(int8x8_t *)(v4 + 16);
      v8 = prime >= *(_QWORD *)&v7;
      if (prime > *(_QWORD *)&v7)
        goto LABEL_17;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      if (prime)
        goto LABEL_17;
    }
    if (v8)
      goto LABEL_18;
    v9 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 32) / *(float *)(v4 + 40));
    if (*(_QWORD *)&v7 < 3uLL || (v10 = (uint8x8_t)vcnt_s8(v7), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= *(_QWORD *)&v7)
      goto LABEL_18;
    goto LABEL_17;
  }
  prime = 2;
LABEL_17:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6, prime);
LABEL_18:
  v12 = v52;
  if (!v52)
    goto LABEL_82;
  v13 = (_QWORD *)(v4 + 24);
  v14 = *(_QWORD *)(v4 + 16);
  do
  {
    while (1)
    {
      v15 = *((unsigned __int8 *)v12 + 16);
      v16 = *((unsigned __int8 *)v12 + 17);
      v17 = (v16
           - 0x61C8864680B583EBLL
           + ((v15 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)) ^ (v15 - 0x61C8864680B583EBLL);
      v18 = *((int *)v12 + 5);
      v19 = *((int *)v12 + 6);
      v20 = (v18 - 0x61C8864680B583EBLL + (v17 << 6) + (v17 >> 2)) ^ v17;
      v21 = (v19 - 0x61C8864680B583EBLL + (v20 << 6) + (v20 >> 2)) ^ v20;
      if (v14)
      {
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          v2 = (v19 - 0x61C8864680B583EBLL + (v20 << 6) + (v20 >> 2)) ^ v20;
          if (v21 >= v14)
            v2 = v21 % v14;
        }
        else
        {
          v2 = v21 & (v14 - 1);
        }
        v23 = *(uint64_t ***)(*v6 + 8 * v2);
        if (v23)
        {
          v24 = *v23;
          if (v24)
            break;
        }
      }
LABEL_44:
      v27 = operator new(0x30uLL);
      *v27 = 0;
      v27[1] = v21;
      *((_WORD *)v27 + 8) = *((_WORD *)v12 + 8);
      *(_QWORD *)((char *)v27 + 20) = *(uint64_t *)((char *)v12 + 20);
      v27[5] = v12[5];
      v28 = (float)(unint64_t)(*(_QWORD *)(v4 + 32) + 1);
      v29 = *(float *)(v4 + 40);
      if (!v14 || (float)(v29 * (float)v14) < v28)
      {
        v30 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3)
          v30 = 1;
        v31 = v30 | (2 * v14);
        v32 = vcvtps_u32_f32(v28 / v29);
        if (v31 <= v32)
          v33 = v32;
        else
          v33 = v31;
        if (v33 == 1)
        {
          v33 = 2;
        }
        else if ((v33 & (v33 - 1)) != 0)
        {
          v33 = std::__next_prime(v33);
          v14 = *(_QWORD *)(v4 + 16);
        }
        if (v33 > v14)
          goto LABEL_56;
        if (v33 < v14)
        {
          v34 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 32) / *(float *)(v4 + 40));
          if (v14 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
          {
            v34 = std::__next_prime(v34);
          }
          else
          {
            v36 = 1 << -(char)__clz(v34 - 1);
            if (v34 >= 2)
              v34 = v36;
          }
          if (v33 <= v34)
            v33 = v34;
          if (v33 < v14)
LABEL_56:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6, v33);
        }
        v14 = *(_QWORD *)(v4 + 16);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v21 >= v14)
            v2 = v21 % v14;
          else
            v2 = v21;
        }
        else
        {
          v2 = (v14 - 1) & v21;
        }
      }
      v37 = *v6;
      v38 = *(_QWORD **)(*v6 + 8 * v2);
      if (v38)
      {
        *v27 = *v38;
LABEL_80:
        *v38 = v27;
        goto LABEL_81;
      }
      *v27 = *v13;
      *v13 = v27;
      *(_QWORD *)(v37 + 8 * v2) = v13;
      if (*v27)
      {
        v39 = *(_QWORD *)(*v27 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v39 >= v14)
            v39 %= v14;
        }
        else
        {
          v39 &= v14 - 1;
        }
        v38 = (_QWORD *)(*v6 + 8 * v39);
        goto LABEL_80;
      }
LABEL_81:
      ++*(_QWORD *)(v4 + 32);
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_82;
    }
    if (v22.u32[0] < 2uLL)
    {
      while (1)
      {
        v26 = v24[1];
        if (v26 == v21)
        {
          if (__PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) == __PAIR64__(v16, v15)
            && *(uint64_t *)((char *)v24 + 20) == __PAIR64__(v19, v18))
          {
            goto LABEL_42;
          }
        }
        else if ((v26 & (v14 - 1)) != v2)
        {
          goto LABEL_44;
        }
        v24 = (uint64_t *)*v24;
        if (!v24)
          goto LABEL_44;
      }
    }
    while (1)
    {
      v25 = v24[1];
      if (v25 == v21)
        break;
      if (v25 >= v14)
        v25 %= v14;
      if (v25 != v2)
        goto LABEL_44;
LABEL_30:
      v24 = (uint64_t *)*v24;
      if (!v24)
        goto LABEL_44;
    }
    if (__PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) != __PAIR64__(v16, v15)
      || *(uint64_t *)((char *)v24 + 20) != __PAIR64__(v19, v18))
    {
      goto LABEL_30;
    }
LABEL_42:
    v12 = (uint64_t *)*v12;
  }
  while (v12);
LABEL_82:
  *(_QWORD *)(v4 + 48) = v4 + 48;
  *(_QWORD *)(v4 + 56) = v4 + 48;
  *(_QWORD *)(v4 + 64) = 0;
  v40 = v55;
  if (v55 != &v54)
  {
    v41 = 0;
    v42 = (char *)(v4 + 48);
    do
    {
      v44 = (char *)operator new(0x58uLL);
      *((_WORD *)v44 + 8) = *((_WORD *)v40 + 8);
      *(_QWORD *)(v44 + 20) = *(uint64_t *)((char *)v40 + 20);
      *((_QWORD *)v44 + 5) = v40[5];
      v45 = v40[6];
      *((_QWORD *)v44 + 6) = v45;
      if (v45)
      {
        v46 = (unint64_t *)(v45 + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        v42 = *(char **)(v4 + 48);
        v41 = *(_QWORD *)(v4 + 64);
      }
      v43 = *(_OWORD *)(v40 + 7);
      *(_OWORD *)(v44 + 72) = *(_OWORD *)(v40 + 9);
      *(_OWORD *)(v44 + 56) = v43;
      *(_QWORD *)v44 = v42;
      *((_QWORD *)v44 + 1) = v4 + 48;
      *((_QWORD *)v42 + 1) = v44;
      *(_QWORD *)(v4 + 48) = v44;
      *(_QWORD *)(v4 + 64) = ++v41;
      v40 = (uint64_t *)v40[1];
      v42 = v44;
    }
    while (v40 != &v54);
  }
  v50[2] = "md::TerrainMeshProviderContext]";
  v50[3] = 30;
  v50[4] = v4;
  *v50 = &off_1E4270670;
  v50[1] = 0x44B2D9808992962CLL;
  *a2 = v50;
  return geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(v51);
}

void sub_19F4DA104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v5);
  MEMORY[0x1A1AF4E00](v4, 0x10A0C407D9D2971);
  geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache((uint64_t *)va);
  MEMORY[0x1A1AF4E00](a4, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  if (*(_QWORD *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  if (*(_QWORD *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  if (*(_QWORD *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  if (*(_QWORD *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  if (*(_QWORD *)(a3 + 8) == 0x44B2D9808992962CLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v7 = *(uint64_t **)(a2 + 8);
    v8 = *v7;
    v9 = v7[1];
    v12[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v7, v9);
    v12[1] = v10;
    v12[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v8, v9);
    v12[3] = v11;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v12, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 100;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::TerrainMeshProviderLogic::runBeforeLayout(int8x8_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int8x8_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t i;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t *v38;
  int v39;
  int8x8_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  int8x8_t *v52;
  unsigned int v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  int8x8_t *v57;
  int v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t *v61;
  int8x8_t v62;
  int8x8_t v63;
  __int32 v64;
  __int32 v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  _WORD *v73;
  _WORD *v74;
  uint64_t *v75;
  _WORD *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned __int8 v81;
  _WORD *v82;
  _WORD *v83;
  uint64_t *v84;
  _WORD *v85;
  int32x2_t *v86;
  __int32 v87;
  uint64_t *v88;
  uint64_t *v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned __int8 v95;
  _WORD *v96;
  _WORD *v97;
  uint64_t *v98;
  _WORD *v99;
  int32x2_t *v100;
  __int32 v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned __int8 v108;
  _WORD *v109;
  _WORD *v110;
  uint64_t *v111;
  _WORD *v112;
  int32x2_t *v113;
  __int32 v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t *v121;
  int32x2_t *v122;
  __int32 v123;
  uint64_t *v124;
  uint64_t *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  int8x8_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint8x8_t v135;
  unint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  int8x8_t v160;
  unsigned __int16 *v161;
  unsigned __int16 *v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  void *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  BOOL v189;
  unsigned int v190;
  double v191;
  double v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  uint64_t v196;
  double v197;
  float v198;
  std::__shared_weak_count_vtbl *v199;
  unint64_t shared_owners;
  unint64_t v201;
  __int128 v202;
  std::__shared_weak_count_vtbl *v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  double v207;
  int v208;
  double v209;
  double v210;
  __int128 v211;
  float v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  unint64_t v219;
  float v220;
  uint64_t v221;
  __int16 v222;
  float v223;
  float v224;
  float v225;
  float v226;
  unint64_t v227;
  float v228;
  __int16 v229;
  uint64_t v230;
  _WORD *v231;
  __int16 v232;
  std::__shared_weak_count *v233;
  std::__shared_weak_count *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  char *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  __int128 v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint8x8_t v268;
  uint64_t **v269;
  uint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  float v274;
  float v275;
  _BOOL8 v276;
  unint64_t v277;
  unint64_t v278;
  size_t prime;
  unint64_t v280;
  uint8x8_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t *v293;
  std::__shared_weak_count *v294;
  __int128 v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *result;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  uint64_t v318;
  __int128 v319;
  unint64_t *v320;
  std::__shared_weak_count *v321;
  unsigned int v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t *v325;
  float v326;
  int v327;
  double v328;
  int8x8_t *v329;
  double v330;
  uint64_t *v331;
  unsigned __int8 *v332;
  unsigned __int8 v334;
  float v335;
  std::__shared_weak_count *v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  unint64_t v340;
  std::__shared_weak_count_vtbl *v341;
  __int128 v342;
  unint64_t v343;
  std::__shared_weak_count_vtbl *v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  std::__shared_weak_count *v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  __int128 v350;
  __int128 v351;
  void *__p[4];
  std::__shared_weak_count *v353;
  __int128 v354;
  __int128 v355;
  void *v356;
  _QWORD v357[3];
  _QWORD *v358;
  _QWORD v359[3];
  _QWORD *v360;
  _QWORD v361[3];
  _QWORD *v362;
  uint64_t v363;

  v363 = *MEMORY[0x1E0C80C00];
  v359[0] = &off_1E427AC38;
  v359[1] = a2;
  v360 = v359;
  v357[0] = &off_1E427AC80;
  v357[1] = a2;
  v358 = v357;
  v362 = v361;
  v361[0] = &off_1E427AC80;
  v361[1] = a2;
  std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::operator()((uint64_t)v359);
  v6 = v358;
  if (v358 == v357)
  {
    v8 = 4;
    v6 = v357;
    v7 = (_QWORD *)a4;
  }
  else
  {
    v7 = (_QWORD *)a4;
    if (!v358)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v8))();
LABEL_6:
  v9 = v360;
  if (v360 == v359)
  {
    v10 = 4;
    v9 = v359;
    goto LABEL_10;
  }
  if (v360)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v12 = a3[2];
  v11 = a3[3];
  if (!v12 || (v13 = *(_QWORD **)(v12 + 160), v13[21] == v13[20]) && v13[24] == v13[23])
  {
    if (!v11 || !*(_BYTE *)(v11 + 56))
    {
      if (a1[24])
      {
        v18 = (_QWORD *)a1[23];
        if (v18)
        {
          do
          {
            v19 = (_QWORD *)*v18;
            operator delete(v18);
            v18 = v19;
          }
          while (v19);
        }
        a1[23] = 0;
        v20 = a1[22];
        if (v20)
        {
          v21 = 0;
          do
            *(_QWORD *)(*(_QWORD *)&a1[21] + 8 * v21++) = 0;
          while (*(_QWORD *)&v20 != v21);
        }
        a1[24] = 0;
        v7 = (_QWORD *)a4;
      }
      if (a1[19])
      {
        v22 = (_QWORD *)a1[18];
        if (v22)
        {
          do
          {
            v23 = (_QWORD *)*v22;
            operator delete(v22);
            v22 = v23;
          }
          while (v23);
        }
        a1[18] = 0;
        v24 = a1[17];
        if (v24)
        {
          v25 = 0;
          do
            *(_QWORD *)(*(_QWORD *)&a1[16] + 8 * v25++) = 0;
          while (*(_QWORD *)&v24 != v25);
        }
        a1[19] = 0;
        v7 = (_QWORD *)a4;
      }
      if (v7[4])
      {
        v26 = (_QWORD *)v7[3];
        if (v26)
        {
          do
          {
            v27 = (_QWORD *)*v26;
            operator delete(v26);
            v26 = v27;
          }
          while (v27);
        }
        v7 = (_QWORD *)a4;
        *(_QWORD *)(a4 + 24) = 0;
        v28 = *(_QWORD *)(a4 + 16);
        if (v28)
        {
          for (i = 0; i != v28; ++i)
            *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * i) = 0;
        }
        *(_QWORD *)(a4 + 32) = 0;
      }
      if (v7[8])
      {
        v30 = v7 + 6;
        v31 = v7[6];
        v32 = (uint64_t *)v7[7];
        v33 = *v32;
        *(_QWORD *)(v33 + 8) = *(_QWORD *)(v31 + 8);
        **(_QWORD **)(v31 + 8) = v33;
        v7[8] = 0;
        if (v32 != v7 + 6)
        {
          do
          {
            v34 = (uint64_t *)v32[1];
            v35 = (std::__shared_weak_count *)v32[6];
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldaxr(p_shared_owners);
              while (__stlxr(v37 - 1, p_shared_owners));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            operator delete(v32);
            v32 = v34;
          }
          while (v34 != v30);
        }
      }
      goto LABEL_472;
    }
  }
  v14 = (int8x8_t *)a1[15];
  if (!v14)
    goto LABEL_472;
  v15 = v14[17];
  if (!*(_QWORD *)&v15)
    goto LABEL_472;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 43;
    if (*(_QWORD *)&v15 <= 0x2BuLL)
      v17 = 0x2Bu % *(_QWORD *)&v14[17];
  }
  else
  {
    v17 = (v15.i32[0] - 1) & 0x2BLL;
  }
  v38 = (uint64_t *)a3[1];
  v39 = *(_DWORD *)(*a3 + 88);
  v40 = v14[16];
  v41 = *(uint64_t ***)(*(_QWORD *)&v40 + 8 * v17);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_67:
    if (v16.u32[0] > 1uLL)
    {
      v45 = 77;
      if (*(_QWORD *)&v15 <= 0x4DuLL)
        v45 = 0x4Du % v15.u8[0];
    }
    else
    {
      v45 = (v15.i32[0] - 1) & 0x4DLL;
    }
    v46 = *(uint64_t ***)(*(_QWORD *)&v40 + 8 * v45);
    if (!v46)
      goto LABEL_472;
    v47 = *v46;
    if (!v47)
      goto LABEL_472;
    if (v16.u32[0] < 2uLL)
    {
      v48 = *(_QWORD *)&v15 - 1;
      while (1)
      {
        v50 = v47[1];
        if (v50 == 77)
        {
          if (*((_WORD *)v47 + 8) == 77)
            goto LABEL_87;
        }
        else if ((v50 & v48) != v45)
        {
          goto LABEL_472;
        }
        v47 = (uint64_t *)*v47;
        if (!v47)
          goto LABEL_472;
      }
    }
    while (1)
    {
      v49 = v47[1];
      if (v49 == 77)
      {
        if (*((_WORD *)v47 + 8) == 77)
          goto LABEL_87;
      }
      else
      {
        if (v49 >= *(_QWORD *)&v15)
          v49 %= *(_QWORD *)&v15;
        if (v49 != v45)
          goto LABEL_472;
      }
      v47 = (uint64_t *)*v47;
      if (!v47)
        goto LABEL_472;
    }
  }
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v44 = v42[1];
      if (v44 == 43)
      {
        if (*((_WORD *)v42 + 8) == 43)
          goto LABEL_87;
      }
      else if ((v44 & (*(_QWORD *)&v15 - 1)) != v17)
      {
        goto LABEL_67;
      }
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_67;
    }
  }
  while (1)
  {
    v43 = v42[1];
    if (v43 == 43)
      break;
    if (v43 >= *(_QWORD *)&v15)
      v43 %= *(_QWORD *)&v15;
    if (v43 != v17)
      goto LABEL_67;
LABEL_57:
    v42 = (uint64_t *)*v42;
    if (!v42)
      goto LABEL_67;
  }
  if (*((_WORD *)v42 + 8) != 43)
    goto LABEL_57;
LABEL_87:
  v52 = a1 + 16;
  v51 = a1[16];
  v53 = v39 - 2;
  v55 = a1[21];
  v54 = a1[22];
  v57 = a1 + 23;
  v56 = a1[23];
  if ((v39 - 2) >= 3)
    v58 = 43;
  else
    v58 = 77;
  v327 = v58;
  v59 = a1[17];
  v61 = a1 + 18;
  v60 = a1[18];
  v62 = a1[24];
  v63 = a1[19];
  v64 = a1[25].i32[0];
  v65 = a1[20].i32[0];
  a1[21] = v51;
  a1[22] = v59;
  *v52 = v55;
  a1[17] = v54;
  *v57 = v60;
  a1[18] = v56;
  a1[24] = v63;
  a1[19] = v62;
  a1[25].i32[0] = v65;
  a1[20].i32[0] = v64;
  if (v63)
  {
    v66 = *(_QWORD *)(*(_QWORD *)&v60 + 8);
    if ((*(_QWORD *)&v59 & (*(_QWORD *)&v59 - 1)) != 0)
    {
      if (v66 >= *(_QWORD *)&v59)
        v66 %= *(_QWORD *)&v59;
    }
    else
    {
      v66 &= *(_QWORD *)&v59 - 1;
    }
    *(_QWORD *)(*(_QWORD *)&v51 + 8 * v66) = v57;
  }
  if (v62)
  {
    v67 = *(_QWORD *)(*(_QWORD *)v61 + 8);
    if ((*(_QWORD *)&v54 & (*(_QWORD *)&v54 - 1)) != 0)
    {
      if (v67 >= *(_QWORD *)&v54)
        v67 %= *(_QWORD *)&v54;
    }
    else
    {
      v67 &= *(_QWORD *)&v54 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v52 + 8 * v67) = v61;
    v68 = (_QWORD *)*v61;
    if (*v61)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        operator delete(v68);
        v68 = v69;
      }
      while (v69);
      v54 = a1[17];
    }
    *v61 = 0;
    if (v54)
    {
      v70 = 0;
      do
        *(_QWORD *)(*(_QWORD *)v52 + 8 * v70++) = 0;
      while (*(_QWORD *)&v54 != v70);
    }
    a1[19] = 0;
  }
  v71 = *v38;
  if ((v72 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v73 = *(_WORD **)(v71 + 48);
  v74 = *(_WORD **)(v71 + 56);
  v329 = a1 + 18;
  if (v73 == v74)
  {
    v75 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v75 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v76 = v73;
    while (*v76 != 11)
    {
      v76 += 16;
      if (v76 == v74)
        goto LABEL_121;
    }
    if (v76 == v74)
    {
      v75 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v73 != 11)
      {
        v73 += 16;
        if (v73 == v74)
        {
          v73 = v74;
          break;
        }
      }
      v75 = (uint64_t *)(v73 + 4);
    }
  }
LABEL_121:
  v79 = (uint64_t *)*v75;
  v77 = v75 + 1;
  v78 = v79;
  if (v79 != v77)
  {
    do
    {
      v86 = *(int32x2_t **)(v78[4] + 32);
      v87 = v86[1].i32[0];
      LOBYTE(__p[0]) = v86[1].i32[1];
      BYTE1(__p[0]) = v87;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v86);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)&a1[16], (unsigned __int8 *)__p, (uint64_t)__p);
      v88 = (uint64_t *)v78[1];
      if (v88)
      {
        do
        {
          v89 = v88;
          v88 = (uint64_t *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (uint64_t *)v78[2];
          v90 = *v89 == (_QWORD)v78;
          v78 = v89;
        }
        while (!v90);
      }
      v78 = v89;
    }
    while (v89 != v77);
  }
  v80 = *v38;
  if ((v81 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v82 = *(_WORD **)(v80 + 48);
  v83 = *(_WORD **)(v80 + 56);
  if (v82 == v83)
  {
    v84 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v84 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v85 = v82;
    while (*v85 != 12)
    {
      v85 += 16;
      if (v85 == v83)
        goto LABEL_142;
    }
    if (v85 == v83)
    {
      v84 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v82 != 12)
      {
        v82 += 16;
        if (v82 == v83)
        {
          v82 = v83;
          break;
        }
      }
      v84 = (uint64_t *)(v82 + 4);
    }
  }
LABEL_142:
  v93 = (uint64_t *)*v84;
  v91 = v84 + 1;
  v92 = v93;
  if (v93 != v91)
  {
    do
    {
      v100 = *(int32x2_t **)(v92[4] + 32);
      v101 = v100[1].i32[0];
      LOBYTE(__p[0]) = v100[1].i32[1];
      BYTE1(__p[0]) = v101;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v100);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)&a1[16], (unsigned __int8 *)__p, (uint64_t)__p);
      v102 = (uint64_t *)v92[1];
      if (v102)
      {
        do
        {
          v103 = v102;
          v102 = (uint64_t *)*v102;
        }
        while (v102);
      }
      else
      {
        do
        {
          v103 = (uint64_t *)v92[2];
          v90 = *v103 == (_QWORD)v92;
          v92 = v103;
        }
        while (!v90);
      }
      v92 = v103;
    }
    while (v103 != v91);
  }
  v94 = *v38;
  if ((v95 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v96 = *(_WORD **)(v94 + 48);
  v97 = *(_WORD **)(v94 + 56);
  if (v96 == v97)
  {
    v98 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v98 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v99 = v96;
    while (*v99 != 71)
    {
      v99 += 16;
      if (v99 == v97)
        goto LABEL_163;
    }
    if (v99 == v97)
    {
      v98 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v96 != 71)
      {
        v96 += 16;
        if (v96 == v97)
        {
          v96 = v97;
          break;
        }
      }
      v98 = (uint64_t *)(v96 + 4);
    }
  }
LABEL_163:
  v106 = (uint64_t *)*v98;
  v104 = v98 + 1;
  v105 = v106;
  if (v106 != v104)
  {
    do
    {
      v113 = *(int32x2_t **)(v105[4] + 32);
      v114 = v113[1].i32[0];
      LOBYTE(__p[0]) = v113[1].i32[1];
      BYTE1(__p[0]) = v114;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v113);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)&a1[16], (unsigned __int8 *)__p, (uint64_t)__p);
      v115 = (uint64_t *)v105[1];
      if (v115)
      {
        do
        {
          v116 = v115;
          v115 = (uint64_t *)*v115;
        }
        while (v115);
      }
      else
      {
        do
        {
          v116 = (uint64_t *)v105[2];
          v90 = *v116 == (_QWORD)v105;
          v105 = v116;
        }
        while (!v90);
      }
      v105 = v116;
    }
    while (v116 != v104);
  }
  v107 = *v38;
  if ((v108 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v109 = *(_WORD **)(v107 + 48);
  v110 = *(_WORD **)(v107 + 56);
  v111 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v109 != v110)
  {
    v112 = v109;
    while (*v112 != 72)
    {
      v112 += 16;
      if (v112 == v110)
        goto LABEL_183;
    }
    if (v112 == v110)
    {
      v111 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v109 != 72)
      {
        v109 += 16;
        if (v109 == v110)
        {
          v109 = v110;
          break;
        }
      }
      v111 = (uint64_t *)(v109 + 4);
    }
  }
LABEL_183:
  v119 = (uint64_t *)*v111;
  v117 = v111 + 1;
  v118 = v119;
  if (v119 != v117)
  {
    do
    {
      v122 = *(int32x2_t **)(v118[4] + 32);
      v123 = v122[1].i32[0];
      LOBYTE(__p[0]) = v122[1].i32[1];
      BYTE1(__p[0]) = v123;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v122);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)&a1[16], (unsigned __int8 *)__p, (uint64_t)__p);
      v124 = (uint64_t *)v118[1];
      if (v124)
      {
        do
        {
          v125 = v124;
          v124 = (uint64_t *)*v124;
        }
        while (v124);
      }
      else
      {
        do
        {
          v125 = (uint64_t *)v118[2];
          v90 = *v125 == (_QWORD)v118;
          v118 = v125;
        }
        while (!v90);
      }
      v118 = v125;
    }
    while (v125 != v117);
  }
  v120 = (uint64_t **)*v329;
  v322 = v53;
  if (*v329)
  {
    v121 = (uint64_t *)a4;
    do
    {
      if (*((unsigned __int8 *)v120 + 17) > 0xAu)
        break;
      v120 = (uint64_t **)*v120;
    }
    while (v120);
  }
  else
  {
    v121 = (uint64_t *)a4;
  }
  v126 = (unsigned __int8 *)*v57;
  if (*v57)
  {
    v331 = v121 + 1;
    do
    {
      v127 = v126[16];
      v128 = a1[17];
      if (v128)
      {
        v129 = v126[17];
        v130 = (v129
              - 0x61C8864680B583EBLL
              + ((v127 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v127 - 0x61C8864680B583EBLL) >> 2)) ^ (v127 - 0x61C8864680B583EBLL);
        v131 = *((int *)v126 + 5);
        v132 = *((int *)v126 + 6);
        v133 = (v131 - 0x61C8864680B583EBLL + (v130 << 6) + (v130 >> 2)) ^ v130;
        v134 = (v132 - 0x61C8864680B583EBLL + (v133 << 6) + (v133 >> 2)) ^ v133;
        v135 = (uint8x8_t)vcnt_s8(v128);
        v135.i16[0] = vaddlv_u8(v135);
        if (v135.u32[0] > 1uLL)
        {
          v136 = v134;
          if (v134 >= *(_QWORD *)&v128)
            v136 = v134 % *(_QWORD *)&v128;
        }
        else
        {
          v136 = v134 & (*(_QWORD *)&v128 - 1);
        }
        v137 = *(uint64_t ***)(*(_QWORD *)v52 + 8 * v136);
        if (v137)
        {
          v138 = *v137;
          if (v138)
          {
            if (v135.u32[0] < 2uLL)
            {
              v139 = *(_QWORD *)&v128 - 1;
              while (1)
              {
                v141 = v138[1];
                if (v141 == v134)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v138 + 17), *((unsigned __int8 *)v138 + 16)) == __PAIR64__(v129, v127)
                    && *(uint64_t *)((char *)v138 + 20) == __PAIR64__(v132, v131))
                  {
                    goto LABEL_200;
                  }
                }
                else if ((v141 & v139) != v136)
                {
                  goto LABEL_224;
                }
                v138 = (uint64_t *)*v138;
                if (!v138)
                  goto LABEL_224;
              }
            }
            do
            {
              v140 = v138[1];
              if (v140 == v134)
              {
                if (__PAIR64__(*((unsigned __int8 *)v138 + 17), *((unsigned __int8 *)v138 + 16)) == __PAIR64__(v129, v127)
                  && *(uint64_t *)((char *)v138 + 20) == __PAIR64__(v132, v131))
                {
                  goto LABEL_200;
                }
              }
              else
              {
                if (v140 >= *(_QWORD *)&v128)
                  v140 %= *(_QWORD *)&v128;
                if (v140 != v136)
                  break;
              }
              v138 = (uint64_t *)*v138;
            }
            while (v138);
          }
        }
      }
LABEL_224:
      v142 = v121[2];
      v143 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(v121[1], v142, v126 + 16);
      if (v143)
      {
        v144 = (unsigned __int8 *)v121[7];
        v145 = (unsigned __int8 *)v143[5];
        if (v144 != v145)
        {
          v146 = (unsigned __int8 *)*((_QWORD *)v145 + 1);
          if (v146 != v144)
          {
            v147 = *(_QWORD *)v145;
            *(_QWORD *)(v147 + 8) = v146;
            **((_QWORD **)v145 + 1) = v147;
            v148 = *(_QWORD *)v144;
            *(_QWORD *)(v148 + 8) = v145;
            *(_QWORD *)v145 = v148;
            *(_QWORD *)v144 = v145;
            *((_QWORD *)v145 + 1) = v144;
            v144 = (unsigned __int8 *)v121[7];
          }
        }
        if (v144 != (unsigned __int8 *)(v121 + 6))
        {
          v149 = *v331;
          v150 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*v331, v142, v126 + 16);
          if (v150)
          {
            v151 = (unsigned __int8 *)v150[5];
            if (v144 != v151)
            {
              v152 = (unsigned __int8 *)*((_QWORD *)v151 + 1);
              if (v152 != v144)
              {
                v153 = *(_QWORD *)v151;
                *(_QWORD *)(v153 + 8) = v152;
                **((_QWORD **)v151 + 1) = v153;
                v154 = *(_QWORD *)v144;
                *(_QWORD *)(v154 + 8) = v151;
                *(_QWORD *)v151 = v154;
                *(_QWORD *)v144 = v151;
                *((_QWORD *)v151 + 1) = v144;
                v144 = (unsigned __int8 *)v121[7];
                v149 = v121[1];
              }
            }
          }
          else
          {
            v144 = (unsigned __int8 *)(v121 + 6);
          }
          v155 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(v149, v142, v144 + 16);
          if (v155)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v331, v155);
            if (__p[0])
              operator delete(__p[0]);
          }
          v156 = *(_QWORD *)v144;
          *(_QWORD *)(v156 + 8) = *((_QWORD *)v144 + 1);
          **((_QWORD **)v144 + 1) = v156;
          --v121[8];
          v157 = (std::__shared_weak_count *)*((_QWORD *)v144 + 6);
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          operator delete(v144);
        }
      }
LABEL_200:
      v126 = *(unsigned __int8 **)v126;
    }
    while (v126);
  }
  v160 = a1[15];
  v161 = *(unsigned __int16 **)(*(_QWORD *)&v160 + 80);
  v162 = *(unsigned __int16 **)(*(_QWORD *)&v160 + 88);
  if (v161 == v162)
  {
    v163 = v322;
  }
  else
  {
    v163 = v322;
    while (*v161 != v327)
    {
      v161 += 8;
      if (v161 == v162)
        goto LABEL_472;
    }
  }
  if (v161 == v162)
    goto LABEL_472;
  if (!v120)
    goto LABEL_472;
  v164 = (_QWORD *)*((_QWORD *)v161 + 1);
  if (!v164)
    goto LABEL_472;
  v165 = (uint64_t *)*v329;
  if (!*(_QWORD *)v329)
    goto LABEL_472;
  v324 = v121 + 1;
  v325 = v121 + 6;
  v316 = v121 + 3;
  v317 = (_QWORD *)*((_QWORD *)v161 + 1);
  while (2)
  {
    v332 = (unsigned __int8 *)(v165 + 2);
    v166 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(v121[1], v121[2], (unsigned __int8 *)v165 + 16);
    if (v166)
    {
      v167 = (uint64_t *)v121[7];
      v168 = (uint64_t *)v166[5];
      if (v167 != v168)
      {
        v169 = (uint64_t *)v168[1];
        if (v169 != v167)
        {
          v170 = *v168;
          *(_QWORD *)(v170 + 8) = v169;
          *(_QWORD *)v168[1] = v170;
          v171 = *v167;
          *(_QWORD *)(v171 + 8) = v168;
          *v168 = v171;
          *v167 = (uint64_t)v168;
          v168[1] = (uint64_t)v167;
          v167 = (uint64_t *)v121[7];
        }
      }
      if (v167 != v325)
        goto LABEL_254;
    }
    v172 = (_QWORD *)v164[1];
    if (v172 == v164)
      goto LABEL_254;
    v334 = 0;
    v173 = 0;
    while (2)
    {
      if (v163 < 3)
      {
        v175 = (void *)v172[16];
        v174 = (std::__shared_weak_count *)v172[17];
        __p[0] = v175;
        __p[1] = v174;
        if (v174)
        {
          v176 = (unint64_t *)&v174->__shared_owners_;
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        v178 = (*(uint64_t (**)(void *))(*(_QWORD *)v175 + 72))(v175);
        v179 = v178;
        if (!v178 || *(_BYTE *)(v178 + 104) == 2)
          v179 = (*(uint64_t (**)(void *))(*(_QWORD *)v175 + 80))(v175);
        if (v174)
        {
          v180 = (unint64_t *)&v174->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          goto LABEL_280;
        }
        goto LABEL_281;
      }
      v182 = (void *)v172[16];
      v174 = (std::__shared_weak_count *)v172[17];
      __p[0] = v182;
      __p[1] = v174;
      if (v174)
      {
        v183 = (unint64_t *)&v174->__shared_owners_;
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      v179 = (*(uint64_t (**)(void *))(*(_QWORD *)v182 + 72))(v182);
      if (!v174)
        goto LABEL_281;
      v185 = (unint64_t *)&v174->__shared_owners_;
      do
        v181 = __ldaxr(v185);
      while (__stlxr(v181 - 1, v185));
LABEL_280:
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
        if (v179)
          goto LABEL_282;
      }
      else
      {
LABEL_281:
        if (v179)
        {
LABEL_282:
          if (*(_BYTE *)(v179 + 104) != 2 && *(unsigned __int8 *)(v179 + 56) == *v332)
          {
            v186 = *(unsigned __int8 *)(v179 + 57);
            v187 = *(_QWORD *)(v179 + 60);
            v188 = *((unsigned __int8 *)v165 + 17);
            v189 = v188 >= v186;
            v190 = v188 - v186;
            if (v190 != 0 && v189)
            {
              if (v187 == __PAIR64__(*((int *)v165 + 6) >> v190, *((int *)v165 + 5) >> v190))
              {
LABEL_292:
                if (v186 > v334)
                {
                  v173 = v179;
                  v334 = *(_BYTE *)(v179 + 57);
                }
              }
            }
            else if (!v190 && v187 == *(uint64_t *)((char *)v165 + 20))
            {
              goto LABEL_292;
            }
          }
        }
      }
      v172 = (_QWORD *)v172[1];
      if (v172 != v164)
        continue;
      break;
    }
    if (v173)
    {
      v323 = v165;
      __powidf2();
      if (*(_QWORD *)v173 != *(_QWORD *)(v173 + 8))
      {
        v192 = v191;
        v193 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v193->__shared_owners_ = 0;
        v193->__shared_weak_owners_ = 0;
        v193->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF990;
        ggl::BufferData::BufferData((uint64_t)&v193[1], 32, 0, 0, 7, 1024);
        v193[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B75A0;
        v193[9].__shared_weak_owners_ = (uint64_t)"TerrainTileMesh VertexData";
        v193[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4UVReflection;
        v193[9].__shared_owners_ = (uint64_t)&unk_1E42B75C0;
        v346 = v193;
        v194 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v194->__shared_owners_ = 0;
        v195 = (unint64_t *)&v194->__shared_owners_;
        v194->__shared_weak_owners_ = 0;
        v194->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v196 = ggl::BufferData::BufferData((uint64_t)&v194[1], 2, 1, 0, 7, 5766);
        v199 = 0;
        LODWORD(v194[10].__vftable) = 0;
        v194[1].__shared_owners_ = 2;
        v194[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v194[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v194[9].__shared_weak_owners_ = (uint64_t)"TerrainTileMesh IndexData";
        v345 = v194;
        shared_owners = v193[1].__shared_owners_;
        v201 = (unint64_t)v193[3].__vftable - v193[2].__shared_weak_owners_;
        if (v201 != v201 % shared_owners)
          v199 = v193[4].__vftable;
        *(_QWORD *)&v202 = 0;
        *((_QWORD *)&v202 + 1) = v193 + 1;
        v342 = v202;
        v343 = v201 / shared_owners * shared_owners;
        v344 = v199;
        v320 = (unint64_t *)&v193->__shared_owners_;
        v321 = v194;
        *(_QWORD *)&v319 = v193 + 1;
        *((_QWORD *)&v319 + 1) = v193;
        if ((((unint64_t)v194[3].__vftable - v194[2].__shared_weak_owners_) & 0xFFFFFFFFFFFFFFFELL) != 0)
          v203 = v194[4].__vftable;
        else
          v203 = 0;
        v204 = 0;
        v205 = 0;
        v340 = ((unint64_t)v194[3].__vftable - v194[2].__shared_weak_owners_) & 0xFFFFFFFFFFFFFFFELL;
        v341 = v203;
        v206 = 1 << *((_BYTE *)v323 + 17);
        v330 = (double)(v206 + ~*((_DWORD *)v323 + 5));
        v207 = (double)v206;
        v208 = 1 << *(_BYTE *)(v173 + 57);
        v209 = (double)v208;
        v210 = (double)(int)HIDWORD(*(_QWORD *)(v173 + 60));
        v335 = (float)(unint64_t)(*(_QWORD *)(v173 + 32) - 1);
        *(_QWORD *)&v211 = 0;
        v318 = v196;
        *((_QWORD *)&v211 + 1) = v196;
        v212 = v192 * 0.0000000249532021;
        v339 = v211;
        v213 = 1.0;
        v214 = 1.0 / v207;
        v215 = (double)*((int *)v323 + 6);
        v216 = (double)v208;
        v217 = 1.0 / (double)v208;
        v218 = v217 * v210;
        v328 = v217 * (double)(int)(v208 + ~*(_QWORD *)(v173 + 60));
        v326 = (float)(unint64_t)(*(_QWORD *)(v173 + 40) - 1);
        do
        {
          v219 = 0;
          v220 = (float)v204 * 0.032258;
          v221 = 32 * v204;
          v222 = 32 * v204 + 32;
          v223 = (v328 - (v330 + v220) * v214) * v216;
          v224 = v326 + (float)(v223 * v326);
          do
          {
            while (1)
            {
              v225 = (float)v219 * 0.032258;
              v226 = -(v218 - v214 * (v215 + v225)) * v216;
              v227 = md::ElevationRaster::bilinearSample((uint64_t *)v173, v226 * v335, v224, v210, v213, *(float *)&v211, v209, v197, v198);
              v228 = *(float *)&v227;
              if (!HIDWORD(v227))
                v228 = 0.0;
              v229 = v219 + v221;
              v230 = (uint64_t)v199 + 32 * v219 + 32 * v221;
              *(float *)v230 = v225;
              *(float *)(v230 + 4) = v220;
              *(float *)(v230 + 8) = v228 * v212;
              *(_DWORD *)(v230 + 12) = 1065353216;
              *(float *)(v230 + 16) = v225;
              *(float *)(v230 + 20) = v220;
              if (v204 <= 0x1E && v219 < 0x1F)
                break;
              if (++v219 == 32)
                goto LABEL_302;
            }
            v231 = (_WORD *)((char *)v203 + 2 * v205);
            *v231 = v229;
            v232 = v219++ + v222;
            v231[1] = v219 + v222;
            v231[2] = v232;
            v231[3] = v219 + v221;
            v231[4] = v219 + v222;
            v205 += 6;
            v231[5] = v229;
          }
          while (v219 != 32);
LABEL_302:
          ++v204;
        }
        while (v204 != 32);
        v233 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v234 = v233;
        v233->__shared_owners_ = 0;
        v235 = (uint64_t)&v233->__shared_owners_;
        v233->__shared_weak_owners_ = 0;
        v233->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
        v236 = (uint64_t)&v233[1];
        *(_OWORD *)__p = v319;
        v121 = (uint64_t *)a4;
        do
          v237 = __ldxr(v320);
        while (__stxr(v237 + 1, v320));
        v348 = v318;
        v349 = v321;
        do
          v238 = __ldxr(v195);
        while (__stxr(v238 + 1, v195));
        ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v233[1], (uint64_t)"Terrain Tile Mesh", (uint64_t *)__p, &v348);
        v163 = v322;
        v164 = v317;
        do
          v239 = __ldaxr(v195);
        while (__stlxr(v239 - 1, v195));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
        }
        v240 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v241 = (unint64_t *)((char *)__p[1] + 8);
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        v347 = v234;
        v336 = v234;
        do
          v243 = __ldxr((unint64_t *)v235);
        while (__stxr(v243 + 1, (unint64_t *)v235));
        LOBYTE(v337) = 0;
        BYTE8(v338) = 0;
        v348 = v236;
        v349 = v234;
        do
          v244 = __ldxr((unint64_t *)v235);
        while (__stxr(v244 + 1, (unint64_t *)v235));
        v350 = v337;
        v351 = v338;
        v245 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), v332);
        if (v245)
        {
          v246 = v245;
          v247 = (uint64_t *)v245[5];
          v248 = *v247;
          *(_QWORD *)(v248 + 8) = v247[1];
          *(_QWORD *)v247[1] = v248;
          --*(_QWORD *)(a4 + 64);
          v249 = (std::__shared_weak_count *)v247[6];
          if (v249)
          {
            v250 = (unint64_t *)&v249->__shared_owners_;
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
              std::__shared_weak_count::__release_weak(v249);
            }
          }
          operator delete(v247);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v324, v246);
          if (__p[0])
            operator delete(__p[0]);
        }
        v252 = (char *)operator new(0x58uLL);
        v253 = v252;
        *((_WORD *)v252 + 8) = *((_WORD *)v323 + 8);
        *(_QWORD *)(v252 + 20) = *(uint64_t *)((char *)v323 + 20);
        v254 = v349;
        *((_QWORD *)v252 + 5) = v348;
        *((_QWORD *)v252 + 6) = v254;
        if (v254)
        {
          v255 = (unint64_t *)&v254->__shared_owners_;
          do
            v256 = __ldxr(v255);
          while (__stxr(v256 + 1, v255));
        }
        v257 = v350;
        *(_OWORD *)(v252 + 72) = v351;
        *(_OWORD *)(v252 + 56) = v257;
        v258 = *(_QWORD **)(a4 + 56);
        *(_QWORD *)v252 = v325;
        *((_QWORD *)v252 + 1) = v258;
        *v258 = v252;
        v259 = *(_QWORD *)(a4 + 64) + 1;
        *(_QWORD *)(a4 + 56) = v252;
        *(_QWORD *)(a4 + 64) = v259;
        v260 = *((unsigned __int8 *)v323 + 16);
        v261 = *((unsigned __int8 *)v323 + 17);
        v262 = (v261
              - 0x61C8864680B583EBLL
              + ((v260 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v260 - 0x61C8864680B583EBLL) >> 2)) ^ (v260 - 0x61C8864680B583EBLL);
        v263 = *((int *)v323 + 5);
        v264 = *((int *)v323 + 6);
        v265 = (v263 - 0x61C8864680B583EBLL + (v262 << 6) + (v262 >> 2)) ^ v262;
        v266 = (v264 - 0x61C8864680B583EBLL + (v265 << 6) + (v265 >> 2)) ^ v265;
        v267 = *(_QWORD *)(a4 + 16);
        if (v267)
        {
          v268 = (uint8x8_t)vcnt_s8((int8x8_t)v267);
          v268.i16[0] = vaddlv_u8(v268);
          if (v268.u32[0] > 1uLL)
          {
            v235 = (v264 - 0x61C8864680B583EBLL + (v265 << 6) + (v265 >> 2)) ^ v265;
            if (v266 >= v267)
              v235 = v266 % v267;
          }
          else
          {
            v235 = v266 & (v267 - 1);
          }
          v269 = *(uint64_t ***)(*v324 + 8 * v235);
          if (v269)
          {
            v270 = *v269;
            if (v270)
            {
              if (v268.u32[0] < 2uLL)
              {
                while (1)
                {
                  v272 = v270[1];
                  if (v272 == v266)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v270 + 17), *((unsigned __int8 *)v270 + 16)) == __PAIR64__(v261, v260)
                      && *(uint64_t *)((char *)v270 + 20) == __PAIR64__(v264, v263))
                    {
                      goto LABEL_400;
                    }
                  }
                  else if ((v272 & (v267 - 1)) != v235)
                  {
                    goto LABEL_362;
                  }
                  v270 = (uint64_t *)*v270;
                  if (!v270)
                    goto LABEL_362;
                }
              }
              do
              {
                v271 = v270[1];
                if (v271 == v266)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v270 + 17), *((unsigned __int8 *)v270 + 16)) == __PAIR64__(v261, v260)
                    && *(uint64_t *)((char *)v270 + 20) == __PAIR64__(v264, v263))
                  {
                    goto LABEL_400;
                  }
                }
                else
                {
                  if (v271 >= v267)
                    v271 %= v267;
                  if (v271 != v235)
                    break;
                }
                v270 = (uint64_t *)*v270;
              }
              while (v270);
            }
          }
        }
LABEL_362:
        v273 = operator new(0x30uLL);
        *v273 = 0;
        v273[1] = v266;
        *((_WORD *)v273 + 8) = *((_WORD *)v323 + 8);
        *(_QWORD *)((char *)v273 + 20) = *(uint64_t *)((char *)v323 + 20);
        v273[5] = v253;
        v274 = (float)(unint64_t)(*(_QWORD *)(a4 + 32) + 1);
        v275 = *(float *)(a4 + 40);
        if (!v267 || (float)(v275 * (float)v267) < v274)
        {
          v276 = (v267 & (v267 - 1)) != 0;
          if (v267 < 3)
            v276 = 1;
          v277 = v276 | (2 * v267);
          v278 = vcvtps_u32_f32(v274 / v275);
          if (v277 <= v278)
            prime = v278;
          else
            prime = v277;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v267 = *(_QWORD *)(a4 + 16);
          }
          if (prime > v267)
            goto LABEL_374;
          if (prime < v267)
          {
            v280 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 32) / *(float *)(a4 + 40));
            if (v267 < 3
              || (v281 = (uint8x8_t)vcnt_s8((int8x8_t)v267), v281.i16[0] = vaddlv_u8(v281), v281.u32[0] > 1uLL))
            {
              v280 = std::__next_prime(v280);
            }
            else
            {
              v282 = 1 << -(char)__clz(v280 - 1);
              if (v280 >= 2)
                v280 = v282;
            }
            if (prime <= v280)
              prime = v280;
            if (prime < v267)
LABEL_374:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v324, prime);
          }
          v267 = *(_QWORD *)(a4 + 16);
          if ((v267 & (v267 - 1)) != 0)
          {
            if (v266 >= v267)
              v235 = v266 % v267;
            else
              v235 = v266;
          }
          else
          {
            v235 = (v267 - 1) & v266;
          }
        }
        v283 = *v324;
        v284 = *(_QWORD **)(*v324 + 8 * v235);
        if (v284)
        {
          *v273 = *v284;
          goto LABEL_398;
        }
        *v273 = *v316;
        *v316 = v273;
        *(_QWORD *)(v283 + 8 * v235) = v316;
        if (*v273)
        {
          v285 = *(_QWORD *)(*v273 + 8);
          if ((v267 & (v267 - 1)) != 0)
          {
            if (v285 >= v267)
              v285 %= v267;
          }
          else
          {
            v285 &= v267 - 1;
          }
          v284 = (_QWORD *)(*v324 + 8 * v285);
LABEL_398:
          *v284 = v273;
        }
        ++*(_QWORD *)(a4 + 32);
LABEL_400:
        if (v254)
        {
          v286 = (unint64_t *)&v254->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
LABEL_404:
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        while (1)
        {
          v288 = *(_QWORD *)(a4 + 64);
          if (v288 <= *(_QWORD *)a4)
            break;
          v289 = *v325;
          LOWORD(__p[0]) = *(_WORD *)(*v325 + 16);
          *(void **)((char *)__p + 4) = *(void **)(v289 + 20);
          v290 = *(std::__shared_weak_count **)(v289 + 48);
          __p[3] = *(void **)(v289 + 40);
          v353 = v290;
          if (v290)
          {
            v291 = (unint64_t *)&v290->__shared_owners_;
            do
              v292 = __ldxr(v291);
            while (__stxr(v292 + 1, v291));
            v293 = *(uint64_t **)(a4 + 48);
            v294 = (std::__shared_weak_count *)v293[6];
            v288 = *(_QWORD *)(a4 + 64);
          }
          else
          {
            v294 = 0;
            v293 = (uint64_t *)v289;
          }
          v295 = *(_OWORD *)(v289 + 72);
          v354 = *(_OWORD *)(v289 + 56);
          v355 = v295;
          v296 = *v293;
          *(_QWORD *)(v296 + 8) = v293[1];
          *(_QWORD *)v293[1] = v296;
          *(_QWORD *)(a4 + 64) = v288 - 1;
          if (v294)
          {
            v297 = (unint64_t *)&v294->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
              std::__shared_weak_count::__release_weak(v294);
            }
          }
          operator delete(v293);
          v299 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), (unsigned __int8 *)__p);
          if (v299)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v356, v324, v299);
            if (v356)
              operator delete(v356);
          }
          v254 = v353;
          if (v353)
          {
            v300 = (unint64_t *)&v353->__shared_owners_;
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
              goto LABEL_404;
          }
        }
        if (v336)
        {
          v302 = (unint64_t *)&v336->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
            std::__shared_weak_count::__release_weak(v336);
          }
        }
        if (v341 && v340)
        {
          if ((_QWORD)v339 && *(_BYTE *)(*((_QWORD *)&v339 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v339 + 64))();
          v304 = *(_QWORD *)(*((_QWORD *)&v339 + 1) + 56);
          v305 = *(_QWORD *)(*((_QWORD *)&v339 + 1) + 64);
          if (v305 == v304)
            v304 = *(_QWORD *)(*((_QWORD *)&v339 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v339 + 1) + 72);
          if (v304)
            v304 = 0;
          if (v305 <= v340)
            v305 = v340;
          if (v305 == v304)
            v305 = v304 + *(_QWORD *)(*((_QWORD *)&v339 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v339 + 1) + 72);
          *(_QWORD *)(*((_QWORD *)&v339 + 1) + 56) = v304;
          *(_QWORD *)(*((_QWORD *)&v339 + 1) + 64) = v305;
        }
        if (v344 && v343)
        {
          if ((_QWORD)v342 && *(_BYTE *)(*((_QWORD *)&v342 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v342 + 64))();
          v306 = *(_QWORD *)(*((_QWORD *)&v342 + 1) + 56);
          v307 = *(_QWORD *)(*((_QWORD *)&v342 + 1) + 64);
          if (v307 == v306)
            v306 = *(_QWORD *)(*((_QWORD *)&v342 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v342 + 1) + 72);
          if (v306)
            v306 = 0;
          if (v307 <= v343)
            v307 = v343;
          if (v307 == v306)
            v307 = v306 + *(_QWORD *)(*((_QWORD *)&v342 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v342 + 1) + 72);
          *(_QWORD *)(*((_QWORD *)&v342 + 1) + 56) = v306;
          *(_QWORD *)(*((_QWORD *)&v342 + 1) + 64) = v307;
        }
        if (v345)
        {
          v308 = (unint64_t *)&v345->__shared_owners_;
          do
            v309 = __ldaxr(v308);
          while (__stlxr(v309 - 1, v308));
          if (!v309)
          {
            ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
            std::__shared_weak_count::__release_weak(v345);
          }
        }
        if (v346)
        {
          v310 = (unint64_t *)&v346->__shared_owners_;
          do
            v311 = __ldaxr(v310);
          while (__stlxr(v311 - 1, v310));
          if (!v311)
          {
            ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
            std::__shared_weak_count::__release_weak(v346);
          }
        }
        if (v347)
        {
          v312 = (unint64_t *)&v347->__shared_owners_;
          do
            v313 = __ldaxr(v312);
          while (__stlxr(v313 - 1, v312));
          if (!v313)
          {
            ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
            std::__shared_weak_count::__release_weak(v347);
          }
        }
      }
      v165 = v323;
    }
LABEL_254:
    v165 = (uint64_t *)*v165;
    if (v165)
      continue;
    break;
  }
LABEL_472:
  if (!v362)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v362 + 48))(v362);
  result = v362;
  if (v362 == v361)
  {
    v315 = 4;
    result = v361;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v315))();
  }
  else if (v362)
  {
    v315 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v315))();
  }
  return result;
}

void sub_19F4DC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56)
{
  void *v56;
  uint64_t v57;

  operator delete(v56);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a37);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a43);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v57 - 200));
  _Unwind_Resume(a1);
}

void md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TerrainMeshProviderLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *result;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v3 = *a3;
  v4 = a3[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a3 + 1);
  v7 = *((int *)a3 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= a2)
      v11 = v9 % a2;
  }
  else
  {
    v11 = v9 & (a2 - 1);
  }
  v12 = *(uint64_t ***)(a1 + 8 * v11);
  if (!v12)
    return 0;
  result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      while (1)
      {
        v15 = result[1];
        if (v15 == v9)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v15 & (a2 - 1)) != v11)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v14 = result[1];
      if (v14 == v9)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v14 >= a2)
          v14 %= a2;
        if (v14 != v11)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos4UVMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427AC80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427AC80;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TerrainMeshProviderLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427AC38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427AC38;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68)
      v3 = 0xE42D19AFCA302E68 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0xE42D19AFCA302E68)
      {
        if (v6[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0xE42D19AFCA302E68)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0xE42D19AFCA302E68)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x9F2276D081C2CB20;
    if (a2 <= 0x9F2276D081C2CB20)
      v11 = 0x9F2276D081C2CB20 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x9F2276D081C2CB20;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x9F2276D081C2CB20)
      {
        if (v13[2] == 0x9F2276D081C2CB20)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x9F2276D081C2CB20)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x9F2276D081C2CB20)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x9F2276D081C2CB20)
    return v10;
  return v10;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xADE8F13E6C18D970;
    if (a2 <= 0xADE8F13E6C18D970)
      v3 = 0xADE8F13E6C18D970 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0xADE8F13E6C18D970;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0xADE8F13E6C18D970)
      {
        if (v6[2] == 0xADE8F13E6C18D970)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0xADE8F13E6C18D970)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0xADE8F13E6C18D970)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0xADE8F13E6C18D970)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x336A901A15BB7353;
    if (a2 <= 0x336A901A15BB7353)
      v11 = 0x336A901A15BB7353 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x336A901A15BB7353;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x336A901A15BB7353)
      {
        if (v13[2] == 0x336A901A15BB7353)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x336A901A15BB7353)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x336A901A15BB7353)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x336A901A15BB7353)
    return v10;
  return v10;
}

_QWORD *geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a1[8])
  {
    v2 = a1 + 6;
    v3 = a1[6];
    v4 = (uint64_t *)a1[7];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[8] = 0;
    if (v4 != a1 + 6)
    {
      do
      {
        v10 = (uint64_t *)v4[1];
        v11 = (std::__shared_weak_count *)v4[6];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        operator delete(v4);
        v4 = v10;
      }
      while (v10 != v2);
    }
  }
  v6 = (_QWORD *)a1[3];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[1];
  a1[1] = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

_QWORD *gdc::ManagedObjectHolder<md::TerrainMeshProviderContext>::~ManagedObjectHolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E4270670;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    v3 = geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C407D9D2971);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::TerrainMeshProviderContext>::~ManagedObjectHolder(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *a1 = &off_1E4270670;
  v1 = (_QWORD *)a1[4];
  if (v1)
  {
    v2 = geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(v1);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C407D9D2971);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::TerrainMeshProviderContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::TrafficStyleAttributes(gss::Allocator *a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  gss::Allocator *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  gss::Allocator *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  gss::Allocator *v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;

  v4 = gss::Allocator::instance(a1);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 16, 4);
  v6 = v5;
  if (v5)
    *v5 = 0xA00000005;
  v5[1] = 65543;
  v33 = v4;
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 16, 4);
  v30 = v7;
  v32 = (char *)(v7 + 2);
  if (v7)
    *v7 = *v6;
  v7[1] = v6[1];
  v31 = v7 + 2;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v30);
  v8 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 40))(v4, v6, 16);
  v9 = gss::Allocator::instance(v8);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 16, 4);
  v11 = v10;
  if (v10)
    *v10 = 0xA00000005;
  v10[1] = 0x100010007;
  v29 = v9;
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 16, 4);
  v26 = v12;
  v28 = (char *)(v12 + 2);
  if (v12)
    *v12 = *v11;
  v12[1] = v11[1];
  v27 = v12 + 2;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v26);
  v13 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v9 + 40))(v9, v11, 16);
  v14 = gss::Allocator::instance(v13);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 16, 4);
  v16 = v15;
  if (v15)
    *v15 = 0xA00000005;
  v15[1] = 0x200010007;
  v25 = v14;
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 16, 4);
  v22 = v17;
  v24 = (char *)(v17 + 2);
  if (v17)
    *v17 = *v16;
  v17[1] = v16[1];
  v23 = v17 + 2;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v22);
  v18 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v14 + 40))(v14, v16, 16);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  result = gss::Allocator::instance(v18);
  *((_QWORD *)a1 + 3) = result;
  if (a2)
  {
    if (&v26 == (_QWORD **)a1)
      goto LABEL_19;
    v20 = (uint64_t)v26;
    v21 = v27;
  }
  else
  {
    if (&v30 == (_QWORD **)a1)
      goto LABEL_19;
    v20 = (uint64_t)v30;
    v21 = v31;
  }
  result = std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)a1, v20, v21, ((uint64_t)v21 - v20) >> 3);
LABEL_19:
  if (v22)
  {
    v23 = v22;
    result = (*(uint64_t (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v25 + 40))(v25, v22, v24 - (char *)v22);
  }
  if (v26)
  {
    v27 = v26;
    result = (*(uint64_t (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v29 + 40))(v29, v26, v28 - (char *)v26);
  }
  if (v30)
  {
    v31 = v30;
    return (*(uint64_t (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v33 + 40))(v33, v30, v32 - (char *)v30);
  }
  return result;
}

_QWORD *md::CoastlineRenderLayer::prune(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD **v18;
  _QWORD **v19;

  v1 = result[46];
  v2 = *(_QWORD **)(v1 + 16);
  v4 = (_QWORD **)*v2;
  v3 = (_QWORD **)v2[1];
  if ((_QWORD **)*v2 != v3)
  {
    do
    {
      result = *v4;
      if (*v4)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v3 = (_QWORD **)v2[1];
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = (_QWORD **)*v2;
  }
  v2[1] = v4;
  v5 = *(_QWORD **)(v1 + 24);
  v7 = (_QWORD **)*v5;
  v6 = (_QWORD **)v5[1];
  if ((_QWORD **)*v5 != v6)
  {
    do
    {
      result = *v7;
      if (*v7)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v6 = (_QWORD **)v5[1];
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = (_QWORD **)*v5;
  }
  v5[1] = v7;
  v8 = *(_QWORD **)(v1 + 104);
  v10 = (_QWORD **)*v8;
  v9 = (_QWORD **)v8[1];
  if ((_QWORD **)*v8 != v9)
  {
    do
    {
      result = *v10;
      if (*v10)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v9 = (_QWORD **)v8[1];
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = (_QWORD **)*v8;
  }
  v8[1] = v10;
  v11 = *(_QWORD **)(v1 + 112);
  v13 = (_QWORD **)*v11;
  v12 = (_QWORD **)v11[1];
  if ((_QWORD **)*v11 != v12)
  {
    do
    {
      result = *v13;
      if (*v13)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v12 = (_QWORD **)v11[1];
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = (_QWORD **)*v11;
  }
  v11[1] = v13;
  v14 = *(_QWORD **)v1;
  v16 = **(_QWORD ****)v1;
  v15 = *(_QWORD ***)(*(_QWORD *)v1 + 8);
  if (v16 != v15)
  {
    do
    {
      result = *v16;
      if (*v16)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v15 = (_QWORD **)v14[1];
      }
      ++v16;
    }
    while (v16 != v15);
    v16 = (_QWORD **)*v14;
  }
  v14[1] = v16;
  v17 = *(_QWORD **)(v1 + 8);
  v19 = (_QWORD **)*v17;
  v18 = (_QWORD **)v17[1];
  if ((_QWORD **)*v17 != v18)
  {
    do
    {
      result = *v19;
      if (*v19)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v18 = (_QWORD **)v17[1];
      }
      ++v19;
    }
    while (v19 != v18);
    v19 = (_QWORD **)*v17;
  }
  v17[1] = v19;
  return result;
}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0550;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0508;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0508;
  a2[1] = v2;
  return result;
}

float32x4_t *_setupRenderItems(float32x4_t *result, __int32 *a2, float32x4_t *a3, __int32 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, float a10, float32_t a11, float32_t a12, float32_t a13, float32_t a14, uint64_t a15, char a16)
{
  _QWORD *v21;
  float32x4_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  float32x4_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  float32x4_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  float32x4_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  __asm { FMOV            V6.4S, #1.0 }
  if (a5)
  {
    v21 = *(_QWORD **)(*(_QWORD *)(a5 + 64) + 32);
    v23 = v21[8];
    v22 = (float32x4_t *)v21[9];
    v22[5].f32[0] = a11;
    v22->f32[0] = a9;
    v22[4] = vsubq_f32(_Q6, *result);
    v22[3].i32[0] = *a2;
    v22[3].i32[1] = a2[1];
    v22[3].i32[2] = a2[2];
    v22[3].i32[3] = a2[3];
    v22[2].f32[0] = a12;
    v22[5].f32[3] = a14;
    v22[6].f32[0] = a13;
    v24 = v21[1];
    if (v23 > v24)
      v24 = v23;
    v21[7] = 0;
    v21[8] = v24;
  }
  if (a6)
  {
    v25 = *(_QWORD **)(*(_QWORD *)(a6 + 64) + 32);
    v27 = v25[8];
    v26 = (float32x4_t *)v25[9];
    v26[5].f32[0] = a11;
    v26->f32[0] = a9;
    v26[4] = vsubq_f32(_Q6, *result);
    v26[3].i32[0] = *a2;
    v26[3].i32[1] = a2[1];
    v26[3].i32[2] = a2[2];
    v26[3].i32[3] = a2[3];
    v26[2].f32[0] = a12;
    v26[5].f32[3] = a14;
    v26[6].f32[0] = a13;
    v28 = v25[1];
    if (v27 > v28)
      v28 = v27;
    v25[7] = 0;
    v25[8] = v28;
  }
  if (a7)
  {
    v29 = *(_QWORD **)(*(_QWORD *)(a7 + 64) + 32);
    v31 = v29[8];
    v30 = (float32x4_t *)v29[9];
    v30[5].f32[0] = a11;
    v30->f32[0] = a9;
    v30[4] = vsubq_f32(_Q6, *result);
    v30[3].i32[0] = *a2;
    v30[3].i32[1] = a2[1];
    v30[3].i32[2] = a2[2];
    v32 = v29[1];
    v30[3].i32[3] = a2[3];
    v30[2].f32[0] = a12;
    v30[5].f32[3] = a14;
    v30[6].f32[0] = a13;
    if (v31 <= v32)
      v33 = v32;
    else
      v33 = v31;
    v29[7] = 0;
    v29[8] = v33;
  }
  if ((a16 & 1) == 0)
  {
    v34 = result->f32[3] * 0.9;
    if (a5)
    {
      v35 = *(_QWORD **)(*(_QWORD *)(a5 + 64) + 32);
      v36 = v35[1];
      v38 = v35[8];
      v37 = v35[9];
      *(float *)(v37 + 84) = v34;
      *(_DWORD *)(v37 + 88) = 1065353216;
      if (v38 > v36)
        v36 = v38;
      v35[7] = 0;
      v35[8] = v36;
    }
    if (a6)
    {
      v39 = *(_QWORD **)(*(_QWORD *)(a6 + 64) + 32);
      v40 = v39[1];
      v42 = v39[8];
      v41 = v39[9];
      *(float *)(v41 + 84) = v34;
      *(_DWORD *)(v41 + 88) = 1065353216;
      if (v42 > v40)
        v40 = v42;
      v39[7] = 0;
      v39[8] = v40;
    }
    if (a7)
    {
      v43 = *(_QWORD **)(*(_QWORD *)(a7 + 64) + 32);
      v44 = v43[1];
      v46 = v43[8];
      v45 = v43[9];
      *(float *)(v45 + 84) = v34;
      *(_DWORD *)(v45 + 88) = -1082130432;
      if (v46 > v44)
        v44 = v46;
      v43[7] = 0;
      v43[8] = v44;
    }
  }
  if (a10 > 0.0 && a6 && a15)
  {
    v47 = *(_QWORD **)(*(_QWORD *)(a6 + 64) + 32);
    v48 = v47[1];
    v50 = v47[8];
    v49 = (float32x4_t *)v47[9];
    v49[4] = vsubq_f32(_Q6, *a3);
    v49[3].i32[0] = *a4;
    v49[3].i32[1] = a4[1];
    v49[3].i32[2] = a4[2];
    v49[3].i32[3] = a4[3];
    v49->f32[0] = a10 + a9;
    if (v50 <= v48)
      v51 = v48;
    else
      v51 = v50;
    v47[7] = 0;
    v47[8] = v51;
    *(_BYTE *)(a15 + 120) = 1;
    *(_QWORD *)(a15 + 32) = a6;
    if (v51 <= v48)
      v52 = v48;
    else
      v52 = v51;
    v47[8] = v52;
    *(_QWORD *)(a8 + 32) = a5;
  }
  else
  {
    if (a15)
      *(_BYTE *)(a15 + 120) = 0;
    *(_QWORD *)(a8 + 32) = a5;
  }
  return result;
}

void md::RouteLineBatch::layoutTwoPasses(md::RouteLayoutContext const&,md::RouteStyleContext const&)::$_0::operator()(uint64_t a1, uint64_t a2, float32x4_t *a3, _DWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char v30;
  char **v31;
  char *v32;

  v8 = *(_QWORD **)(a2 + 64);
  v9 = (_QWORD *)v8[4];
  v10 = v9[1];
  if (v10)
    v11 = v9[9];
  else
    v11 = 0;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *v8;
  v14 = *(_QWORD *)(*v8 + 8);
  if ((*(_BYTE *)(*v8 + 16) & 2) == 0)
  {
    v15 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v15 != -1)
    {
      v32 = &v30;
      v31 = &v32;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v14)
    v16 = *(_QWORD *)(v13 + 72);
  else
    v16 = 0;
  v17 = *(float **)a1;
  *(float *)v11 = **(float **)a1 * 0.5;
  *(_DWORD *)(v11 + 16) = a3->i32[0];
  *(_DWORD *)(v11 + 20) = a3->i32[1];
  *(_DWORD *)(v11 + 24) = a3->i32[2];
  *(_DWORD *)(v11 + 28) = a3->i32[3];
  v18 = *(float *)(*(_QWORD *)(v12 + 2592) + 48);
  v19 = 0.0;
  if (v18 != 0.0)
  {
    v20 = logf(v18 * (float)(*(float *)(*(_QWORD *)(a1 + 16) + 128) * *(float *)(v16 + 64)));
    v19 = expf(floorf(v20 * 4.0) * -0.25);
  }
  *(float *)(v11 + 32) = v19;
  if (v10)
  {
    v21 = v9[8];
    if (v21 <= v10)
      v21 = v10;
    v9[7] = 0;
    v9[8] = v21;
  }
  v22 = *(_QWORD **)(*(_QWORD *)(a2 + 64) + 48);
  v23 = v22[1];
  v24 = v22[9];
  *(_DWORD *)(v24 + 80) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 124);
  *(float *)v24 = *v17 * 0.5;
  __asm { FMOV            V1.4S, #1.0 }
  *(float32x4_t *)(v24 + 64) = vsubq_f32(_Q1, *a3);
  *(_DWORD *)(v24 + 48) = *a4;
  *(_DWORD *)(v24 + 52) = a4[1];
  *(_DWORD *)(v24 + 56) = a4[2];
  *(_DWORD *)(v24 + 60) = a4[3];
  *(_DWORD *)(v24 + 32) = **(_DWORD **)(a1 + 24);
  *(int32x2_t *)(v24 + 92) = vrev64_s32(*(int32x2_t *)(*(_QWORD *)(a1 + 32) + 248));
  if (v22[8] > v23)
    v23 = v22[8];
  v22[7] = 0;
  v22[8] = v23;
}

uint64_t setupTrafficRenderItem(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  float v27;
  int8x8_t v28;
  int8x8_t v29;
  unsigned int v30;
  uint64_t v31;
  int8x8_t v32;
  unsigned int v33;
  uint64_t v34;
  int8x8_t v35;
  unsigned int v36;
  uint64_t v37;
  int8x8_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  int8x8_t v57;
  uint64_t result;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  __int16 v75;
  _OWORD *v76;

  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 64) + 32);
  v72 = 0uLL;
  v16 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = v15;
  if (v16)
    v18 = *(_OWORD **)(v15 + 72);
  else
    v18 = 0;
  v72 = v17;
  v73 = 0;
  v74 = v16;
  v76 = v18;
  v75 = 1;
  v19 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v66 = *a2;
  *((_QWORD *)&v66 + 1) = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v68 = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  else
  {
    v68 = 0;
  }
  v69 = 0;
  v70 = 0;
  v67 = v19;
  v71 = 0;
  if (v19)
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v69);
  v71 = v19;
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    LODWORD(v19) = v71;
  }
  if ((_DWORD)v19)
  {
    *(_BYTE *)(a4 + 120) = 1;
    LOBYTE(v17) = *(_BYTE *)(a1 + 12);
    md::trafficWidthForSpeedAtZ((unint64_t)&v67, 3, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&v17)).i32[0]);
    v26 = v76;
    *(float *)v76 = v27 * a5;
    *(float *)v28.i32 = v27 * a6;
    *((_DWORD *)v26 + 45) = v28.i32[0];
    *((float *)v26 + 46) = a7;
    *((float *)v26 + 44) = a8;
    v28.i8[0] = *(_BYTE *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 0, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v28)).i32[0]);
    v30 = DWORD1(v66);
    v29.i32[0] = v66;
    *((_DWORD *)v26 + 4) = v66;
    *((_DWORD *)v26 + 5) = v30;
    v31 = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 3) = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 12) = __PAIR64__(v30, v29.u32[0]);
    *((_QWORD *)v26 + 13) = v31;
    v29.i8[0] = *(_BYTE *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 1, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v29)).i32[0]);
    v33 = DWORD1(v66);
    v32.i32[0] = v66;
    *((_DWORD *)v26 + 8) = v66;
    *((_DWORD *)v26 + 9) = v33;
    v34 = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 5) = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 14) = __PAIR64__(v33, v32.u32[0]);
    *((_QWORD *)v26 + 15) = v34;
    v32.i8[0] = *(_BYTE *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 2, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v32)).i32[0]);
    v36 = DWORD1(v66);
    v35.i32[0] = v66;
    *((_DWORD *)v26 + 12) = v66;
    *((_DWORD *)v26 + 13) = v36;
    v37 = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 7) = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 16) = __PAIR64__(v36, v35.u32[0]);
    *((_QWORD *)v26 + 17) = v37;
    v35.i8[0] = *(_BYTE *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 3, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v35)).i32[0]);
    v39 = DWORD1(v66);
    v38.i32[0] = v66;
    *((_DWORD *)v26 + 16) = v66;
    *((_DWORD *)v26 + 17) = v39;
    v40 = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 9) = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 18) = __PAIR64__(v39, v38.u32[0]);
    *((_QWORD *)v26 + 19) = v40;
    v38.i8[0] = *(_BYTE *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 4, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v38)).i32[0]);
    v42 = DWORD1(v66);
    v41 = v66;
    *((_DWORD *)v26 + 20) = v66;
    *((_DWORD *)v26 + 21) = v42;
    v43 = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 11) = *((_QWORD *)&v66 + 1);
    *((_QWORD *)v26 + 20) = __PAIR64__(v42, v41);
    *((_QWORD *)v26 + 21) = v43;
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v67);
    v45 = *a3;
    v46 = (std::__shared_weak_count *)a3[1];
    *(_QWORD *)&v66 = v45;
    *((_QWORD *)&v66 + 1) = v46;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v68 = v46;
      do
        v49 = __ldxr(v47);
      while (__stxr(v49 + 1, v47));
    }
    else
    {
      v68 = 0;
    }
    v69 = 0;
    v70 = 0;
    v67 = v45;
    v71 = 0;
    if (v45)
      LODWORD(v45) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v69);
    v71 = v45;
    if (v46)
    {
      v51 = (unint64_t *)&v46->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      LODWORD(v45) = v71;
    }
    if ((_DWORD)v45)
    {
      v44.i8[0] = *(_BYTE *)(a1 + 12);
      md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 0, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v44)).i32[0]);
      v53 = v76;
      v54 = (int8x8_t)v66;
      v76[6] = v66;
      v54.i8[0] = *(_BYTE *)(a1 + 12);
      md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 1, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v54)).i32[0]);
      v55 = (int8x8_t)v66;
      v53[7] = v66;
      v55.i8[0] = *(_BYTE *)(a1 + 12);
      md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 2, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v55)).i32[0]);
      v56 = (int8x8_t)v66;
      v53[8] = v66;
      v56.i8[0] = *(_BYTE *)(a1 + 12);
      md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 3, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v56)).i32[0]);
      v57 = (int8x8_t)v66;
      v53[9] = v66;
      v57.i8[0] = *(_BYTE *)(a1 + 12);
      md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)&v67, 4, 1, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v57)).i32[0]);
      v53[10] = v66;
    }
  }
  else
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v50 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      LOWORD(v66) = 0;
      _os_log_impl(&dword_19F029000, v50, OS_LOG_TYPE_INFO, "***RouteLine failed to setupTrafficRenderItem", (uint8_t *)&v66, 2u);
    }

  }
  result = gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v67);
  if (v76)
  {
    v60 = v73;
    v59 = v74;
    if (v74 != v73)
    {
      v61 = (_QWORD *)*((_QWORD *)&v72 + 1);
      result = v72;
      v62 = v75;
      v63 = HIBYTE(v75);
      if ((_QWORD)v72 && *(_BYTE *)(*((_QWORD *)&v72 + 1) + 17) != 2)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v72 + 64))();
      if (v62 && !v63)
      {
        v65 = v61[7];
        v64 = v61[8];
        if (v64 == v65)
          v65 = v61[10] - v61[9];
        if (v60 < v65)
          v65 = v60;
        if (v64 <= v59)
          v64 = v59;
        if (v64 == v65)
          v64 = v65 + v61[10] - v61[9];
        v61[7] = v65;
        v61[8] = v64;
      }
    }
  }
  return result;
}

void sub_19F4DDE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  v18 = a15;
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = a13;
  if (a13)
  {
    v22 = (unint64_t *)&a13->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a17);
  _Unwind_Resume(a1);
}

unint64_t md::trafficWidthForSpeedAtZ(unint64_t result, int a2, float a3)
{
  unint64_t v4;
  unsigned int v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  unsigned int v10;
  float v11;
  _BOOL4 v12;
  unsigned int v14;
  float v15;
  _BOOL4 v16;
  unsigned int v18;
  float v19;
  _BOOL4 v20;
  unsigned int v22;
  float v23;
  float v24;
  _BOOL4 v25;
  unsigned int v27;
  float v28;
  _BOOL4 v29;
  unsigned int v31;
  float v32;
  _BOOL4 v33;
  unsigned int v35;
  float v36;
  _BOOL4 v37;
  float v39;
  _BOOL4 v40;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  char v47;
  char v48;

  switch(a2)
  {
    case 0:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v5 = 23;
      else
        v5 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v7 = *v6;
        v8 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v7 != 0.0 && v7 != 1.0)
            goto LABEL_48;
        }
      }
      else
      {
        v8 = 0;
      }
      v22 = *(unsigned __int8 *)(v4 + v8 + 11);
      if (v22 != 2)
        goto LABEL_50;
LABEL_48:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x30u, v5, 0) & 1) != 0)goto LABEL_51;
      v22 = 1;
LABEL_50:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x30u, v5, v22))
        goto LABEL_98;
LABEL_51:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v24 = *v6;
        v25 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v24 != 0.0 && v24 != 1.0)
            goto LABEL_112;
        }
      }
      else
      {
        v25 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v25 + 11);
      if (v42 == 2)
      {
LABEL_112:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x30u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 48;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 48;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 1:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v10 = 23;
      else
        v10 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v11 = *v6;
        v12 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v11 != 0.0 && v11 != 1.0)
            goto LABEL_61;
        }
      }
      else
      {
        v12 = 0;
      }
      v27 = *(unsigned __int8 *)(v4 + v12 + 11);
      if (v27 != 2)
        goto LABEL_63;
LABEL_61:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x3Bu, v10, 0) & 1) != 0)goto LABEL_64;
      v27 = 1;
LABEL_63:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x3Bu, v10, v27))
        goto LABEL_98;
LABEL_64:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v28 = *v6;
        v29 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v28 != 0.0 && v28 != 1.0)
            goto LABEL_115;
        }
      }
      else
      {
        v29 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v29 + 11);
      if (v42 == 2)
      {
LABEL_115:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x3Bu, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 59;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 59;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 2:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v14 = 23;
      else
        v14 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v15 = *v6;
        v16 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v15 != 0.0 && v15 != 1.0)
            goto LABEL_74;
        }
      }
      else
      {
        v16 = 0;
      }
      v31 = *(unsigned __int8 *)(v4 + v16 + 11);
      if (v31 != 2)
        goto LABEL_76;
LABEL_74:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x46u, v14, 0) & 1) != 0)goto LABEL_77;
      v31 = 1;
LABEL_76:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x46u, v14, v31))
        goto LABEL_98;
LABEL_77:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v32 = *v6;
        v33 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v32 != 0.0 && v32 != 1.0)
            goto LABEL_118;
        }
      }
      else
      {
        v33 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v33 + 11);
      if (v42 == 2)
      {
LABEL_118:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x46u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 70;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 70;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 3:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v18 = 23;
      else
        v18 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v19 = *v6;
        v20 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v19 != 0.0 && v19 != 1.0)
            goto LABEL_87;
        }
      }
      else
      {
        v20 = 0;
      }
      v35 = *(unsigned __int8 *)(v4 + v20 + 11);
      if (v35 != 2)
        goto LABEL_89;
LABEL_87:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x51u, v18, 0) & 1) != 0)goto LABEL_90;
      v35 = 1;
LABEL_89:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x51u, v18, v35))
      {
LABEL_98:
        v23 = fminf(fmaxf(a3, 0.0), 23.0);
        if (v6)
        {
          v39 = *v6;
          v40 = *v6 == 1.0;
          if (*(_BYTE *)(v4 + 10))
          {
            if (v39 != 0.0 && v39 != 1.0)
            {
LABEL_108:
              v48 = 1;
              v47 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0xA4u, 0, (BOOL *)&v48, v23);
              v43 = v4;
              v44 = 164;
              return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
            }
          }
        }
        else
        {
          v40 = 0;
        }
        v42 = *(unsigned __int8 *)(v4 + v40 + 11);
        if (v42 != 2)
        {
          v45 = v4;
          v46 = 164;
          return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
        }
        goto LABEL_108;
      }
LABEL_90:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v36 = *v6;
        v37 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v36 != 0.0 && v36 != 1.0)
            goto LABEL_121;
        }
      }
      else
      {
        v37 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v37 + 11);
      if (v42 == 2)
      {
LABEL_121:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x51u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 81;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 81;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    default:
      return result;
  }
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::ManeuverDrawRegion::cull(float64_t **this, altitude::View *a2, karo::graphics::Viewport *a3, ResourceAccessor *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  altitude::ManeuverDrawRegion *v14;
  float64_t *v15;
  float64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  unsigned int v27;
  float *v28;
  float v29;
  uint64_t v30;
  float *v31;
  float v32;
  BOOL v33;
  unsigned int v34;
  float *v35;
  float v36;
  _BOOL4 v37;
  int v38;
  float v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  float v44;
  char *v45;
  __int128 *v46;
  uint64_t v47;
  _QWORD *v48;
  float64x2_t *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  float64x2_t v62;
  __int128 v63;
  char *v64;
  void **v65;
  void **v66;
  __int128 v67;
  void **v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float *v75;
  float v76;
  BOOL v77;
  unsigned int v78;
  float v79;
  uint64_t v80;
  float *v81;
  float v82;
  BOOL v83;
  unsigned int v84;
  float *v85;
  float v86;
  uint64_t v87;
  float *v88;
  float v89;
  unsigned int v90;
  float *v91;
  float v92;
  uint64_t v93;
  float *v94;
  float v95;
  unsigned int v96;
  float *v97;
  float v98;
  uint64_t v99;
  float *v100;
  float v101;
  unsigned int v102;
  uint64_t v103;
  __int128 v104;
  unsigned __int8 v105;
  _QWORD *v106;
  char **v107;
  uint64_t v108;
  unsigned __int8 v109;
  unint64_t v110;
  char *v111;
  _QWORD *v112;
  altitude::View *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  int64x2_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  malloc_zone_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  geo::read_write_lock *v144;
  const char *v145;
  std::__shared_weak_count_vtbl **v146;
  char v148;
  uint64_t v149;
  _QWORD *v150;
  double v151;
  int v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  void (__cdecl *v159)(std::__shared_weak_count *__hidden);
  void (__cdecl *i)(std::__shared_count *__hidden);
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  double v167;
  char *v168;
  char *v169;
  std::__shared_weak_count_vtbl *v170;
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  void (__cdecl *v172)(std::__shared_weak_count *__hidden);
  char *v173;
  _QWORD **v174;
  _QWORD **j;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  double v184;
  _BYTE *v185;
  _QWORD *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  _QWORD *v195;
  double v196;
  gdc::GlobeTileGrid *v197;
  gdc::GlobeTileGrid *v198;
  gdc::GlobeTileGrid *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  double v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  std::__shared_count v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unsigned __int8 v211;
  std::__shared_weak_count *v212;
  std::__shared_count v213;
  void *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unsigned __int8 v217;
  uint64_t v218;
  unint64_t v219;
  float64_t v220;
  unint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  unint64_t v226;
  float64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t *v237;
  _QWORD *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  _OWORD *v248;
  uint64_t *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD **v268;
  _QWORD **v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  _QWORD *v277;
  int v278;
  uint64_t v279;
  geo::read_write_lock *v280;
  const char *v281;
  malloc_zone_t *v282;
  int v283;
  uint64_t v284;
  geo::read_write_lock *v285;
  const char *v286;
  malloc_zone_t *v287;
  int v288;
  unsigned __int8 v289;
  int v290;
  uint64_t v291;
  geo::read_write_lock *v292;
  const char *v293;
  malloc_zone_t *v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  geo::read_write_lock *v298;
  const char *v299;
  malloc_zone_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  altitude::ManeuverDrawRegion *v303;
  karo::graphics::Viewport *v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t **v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  double v330;
  float64_t v331;
  float64_t v332;
  float64_t v333;
  float64_t v334;
  double v335;
  float v336;
  double v337;
  char *__ptr32 *v338;
  char *__ptr32 *v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  uint64_t v349;
  float v350;
  __int16 v351;
  _WORD *v352;
  float v353;
  double v354;
  float32_t v355;
  float32x2_t *v356;
  double v357;
  float32x2_t v358;
  float32_t v359;
  float v360;
  float32x2_t v361;
  float32_t v362;
  float32_t v363;
  float32_t v364;
  __int16 v365;
  float v366;
  double v367;
  double v368;
  double v369;
  float32_t v370;
  float32_t v371;
  float32x2_t *v372;
  float32x2_t v373;
  _WORD *v374;
  __int16 v375;
  __int16 v376;
  uint64_t v377;
  float v378;
  double v379;
  float v380;
  float v381;
  float v382;
  uint64_t v383;
  float v384;
  float32x2_t v385;
  float v386;
  float v387;
  float v388;
  uint64_t v389;
  __int16 v390;
  float v391;
  uint64_t v392;
  float32x2_t v393;
  uint64_t v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  unint64_t v429;
  __int128 v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  int v438;
  uint64_t v439;
  geo::read_write_lock *v440;
  const char *v441;
  malloc_zone_t *zone;
  uint64_t v443;
  geo::read_write_lock *v444;
  const char *v445;
  malloc_zone_t *v446;
  _Unwind_Exception *v447;
  float v448;
  float v449;
  std::__shared_weak_count_vtbl **v450;
  altitude::View *v451;
  uint64_t *v452;
  altitude::ManeuverDrawRegion *v453;
  uint64_t *v454;
  karo::graphics::Viewport *v455;
  uint64_t **v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t **v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  float64_t v477;
  float64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  float64_t v485;
  float64_t v486;
  float64_t v487;
  float64_t v488;
  void *v489;
  void *v490;
  float64_t v491;
  float64_t v492;
  uint64_t v493;
  uint64_t v494;
  float64_t v495;
  float64_t v496;
  float64_t v497;
  BOOL v498;
  std::__shared_weak_count *v499;
  float64_t v500;
  _QWORD *v501;
  std::__shared_weak_count *v502;
  float v503;
  void (__cdecl *v504)(std::__shared_count *__hidden);
  float64_t v505;
  void (__cdecl *v506[3])(std::__shared_count *__hidden);
  float64_t v507;
  std::__shared_weak_count *v508;
  _QWORD v509[2];
  unsigned __int8 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  double v517;
  uint64_t v518;
  double v519;
  double v520;
  double v521;
  uint64_t v522;
  double v523;
  double v524;
  double v525;
  uint64_t v526;
  float64x2_t v527;
  void *__p[2];
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  _BYTE v534[24];
  __int128 v535;
  __int128 v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  float64x2_t v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  float64x2_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;

  v14 = (altitude::ManeuverDrawRegion *)this;
  v563 = *MEMORY[0x1E0C80C00];
  v15 = this[1];
  md::realistic::RouteRenderLayer::loadStylesheet((md::realistic::RouteRenderLayer *)v15);
  v16 = v15[29];
  v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 30);
  v527.f64[0] = v16;
  *(_QWORD *)&v527.f64[1] = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v508 = v17;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  else
  {
    v508 = 0;
  }
  v509[1] = 0;
  v507 = v16;
  v509[0] = 0;
  v510 = 0;
  if (v16 != 0.0)
    LODWORD(v16) = (*(uint64_t (**)(float64_t, _QWORD *))(**(_QWORD **)&v16 + 48))(COERCE_FLOAT64_T(*(_QWORD *)&v16), v509);
  v510 = LOBYTE(v16);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    LODWORD(v16) = v510;
  }
  if (!LODWORD(v16))
    return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v507);
  v23 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
  v24 = *(float **)v23;
  if (*(_QWORD *)v23
    && (v25 = *v24, LODWORD(v24) = *v24 == 1.0, *(_BYTE *)(v23 + 10))
    && (v25 != 0.0 ? (_ZF = v25 == 1.0) : (_ZF = 1), !_ZF)
    || (v27 = *(unsigned __int8 *)(v23 + v24 + 11), v25 = 0.0, v27 == 2))
  {
    LOBYTE(v527.f64[0]) = 1;
    LOBYTE(v514) = 1;
    v28 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v23, 0x106u, 0, &v527);
    *(float *)&v4 = *v28
                  + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v23, 0x106u, 1u, &v514)- *v28)* v25);
  }
  else
  {
    LODWORD(v4) = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0x106u, v27, 0);
  }
  v29 = *((float *)a2 + 338);
  if (v29 >= *(float *)&v4)
  {
    v37 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
    v31 = *(float **)v30;
    if (*(_QWORD *)v30
      && (v32 = *v31, LODWORD(v31) = *v31 == 1.0, *(_BYTE *)(v30 + 10))
      && (v32 != 0.0 ? (v33 = v32 == 1.0) : (v33 = 1), !v33)
      || (v34 = *(unsigned __int8 *)(v30 + v31 + 11), v32 = 0.0, v34 == 2))
    {
      LOBYTE(v527.f64[0]) = 1;
      LOBYTE(v514) = 1;
      v35 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v30, 0x107u, 0, &v527);
      v36 = *v35
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v30, 0x107u, 1u, &v514)
                          - *v35)
                  * v32);
    }
    else
    {
      v36 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0x107u, v34, 0);
    }
    v37 = v29 > v36;
  }
  v38 = v29 >= *(float *)&v4 || v37;
  v39 = *((float *)v14 + 13);
  v451 = a2;
  if (v38 == 1)
  {
    if (v39 >= 1.0 || *((_BYTE *)v14 + 48))
      goto LABEL_84;
    v6 = 1.0;
  }
  else
  {
    if (v39 <= 0.0 || *((_BYTE *)v14 + 48))
      goto LABEL_84;
    v6 = 0.0;
  }
  *((_BYTE *)v14 + 48) = 1;
  v40 = (_QWORD *)operator new();
  *v40 = &off_1E42C3FF0;
  v40[1] = 0;
  v40[2] = 0;
  v40[3] = 0;
  v40[4] = 0xBFF0000000000000;
  v41 = operator new();
  *((_QWORD *)&v515 + 1) = 0;
  v42 = operator new(0x20uLL);
  *v42 = &off_1E42C6E28;
  v42[1] = altitude::ManeuverDrawRegion::setAlpha;
  v43 = v42 + 1;
  v42[2] = 0;
  v42[3] = v14;
  *((_QWORD *)&v515 + 1) = v42;
  v44 = *((float *)v14 + 13);
  *(_QWORD *)v41 = &off_1E42C4528;
  v45 = (char *)operator new(0x20uLL);
  *(_QWORD *)v45 = &off_1E42C6E28;
  *(_OWORD *)(v45 + 8) = *(_OWORD *)v43;
  *((_QWORD *)v45 + 3) = v43[2];
  *(_QWORD *)(v41 + 32) = v45;
  *(_QWORD *)(v41 + 40) = 0x3FD0000000000000;
  *(double *)(v41 + 48) = v44;
  *(double *)(v41 + 56) = v6;
  *(_OWORD *)(v41 + 64) = xmmword_19FFB3510;
  *(_BYTE *)(v41 + 80) = 0;
  altitude::AnimationList::addObject(v40, v41);
  v46 = (__int128 *)*((_QWORD *)&v515 + 1);
  if (*((__int128 **)&v515 + 1) == &v514)
  {
    v47 = 4;
    v46 = &v514;
  }
  else
  {
    if (!*((_QWORD *)&v515 + 1))
      goto LABEL_55;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_55:
  v48 = (_QWORD *)operator new();
  *(_QWORD *)&v527.f64[0] = &off_1E42D88B8;
  *(_QWORD *)&v527.f64[1] = v14;
  __p[1] = &v527;
  *v48 = &off_1E428B388;
  v48[1] = &off_1E42D88B8;
  v48[4] = v48 + 1;
  v48[2] = v14;
  altitude::AnimationList::addObject(v40, (uint64_t)v48);
  v49 = (float64x2_t *)__p[1];
  if (__p[1] == &v527)
  {
    v50 = 4;
    v49 = &v527;
  }
  else
  {
    if (!__p[1])
      goto LABEL_60;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&v49->f64[0] + 8 * v50))();
LABEL_60:
  v51 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v14 + 1) + 40) + 128);
  *(_QWORD *)&v527.f64[0] = v40;
  v527.f64[1] = -1.0;
  strcpy((char *)__p, "routeAnimation");
  HIBYTE(__p[1]) = 0;
  HIBYTE(v529.f64[0]) = 14;
  v52 = v51[30];
  v53 = v51[31];
  if (v52 >= v53)
  {
    v54 = v51[29];
    v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666)
      goto LABEL_432;
    v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v54) >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x333333333333333)
      v58 = 0x666666666666666;
    else
      v58 = v56;
    if (v58)
    {
      if (v58 > 0x666666666666666)
        goto LABEL_433;
      v59 = (char *)operator new(40 * v58);
    }
    else
    {
      v59 = 0;
    }
    v60 = &v59[40 * v55];
    v61 = &v59[40 * v58];
    v62 = v527;
    *((_QWORD *)v60 + 4) = *(_QWORD *)&v529.f64[0];
    v63 = *(_OWORD *)__p;
    *(float64x2_t *)v60 = v62;
    *((_OWORD *)v60 + 1) = v63;
    __p[0] = 0;
    __p[1] = 0;
    v529.f64[0] = 0.0;
    v64 = v60 + 40;
    v65 = (void **)v51[29];
    v66 = (void **)v51[30];
    if (v66 == v65)
    {
      v51[29] = v60;
      v51[30] = v64;
      v51[31] = v61;
    }
    else
    {
      do
      {
        *(_OWORD *)(v60 - 40) = *(_OWORD *)(v66 - 5);
        v67 = *(_OWORD *)(v66 - 3);
        *((_QWORD *)v60 - 1) = *(v66 - 1);
        *(_OWORD *)(v60 - 24) = v67;
        v60 -= 40;
        *(v66 - 2) = 0;
        *(v66 - 1) = 0;
        *(v66 - 3) = 0;
        v66 -= 5;
      }
      while (v66 != v65);
      v66 = (void **)v51[29];
      v68 = (void **)v51[30];
      v51[29] = v60;
      v51[30] = v64;
      v51[31] = v61;
      while (v68 != v66)
      {
        if (*((char *)v68 - 1) < 0)
          operator delete(*(v68 - 3));
        v68 -= 5;
      }
    }
    if (v66)
      operator delete(v66);
    v69 = SHIBYTE(v529.f64[0]);
    v51[30] = v64;
    a2 = v451;
    if (v69 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(float64x2_t *)v52 = v527;
    *(_OWORD *)(v52 + 16) = *(_OWORD *)__p;
    *(float64_t *)(v52 + 32) = v529.f64[0];
    v51[30] = v52 + 40;
  }
LABEL_84:
  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v14 + 40) + 40), "maneuverDisplayEnabled") & 1) == 0)
  {
    v70 = *((_QWORD *)v14 + 2);
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    *((_QWORD *)v14 + 2) = 0;
  }
  v71 = *(_QWORD *)(*(_QWORD *)v14 + 40);
  if (!*(_BYTE *)(v71 + 64))
    return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v507);
  LODWORD(v6) = *((_DWORD *)a2 + 338);
  if (!objc_msgSend(*(id *)(v71 + 40), "maneuverDisplayEnabled")
    || (v38 & 1) == 0 && !*((_BYTE *)v14 + 48))
  {
    return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v507);
  }
  v72 = *((_QWORD *)v14 + 2);
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  *((_QWORD *)v14 + 2) = 0;
  v73 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
  if ((int)*(float *)&v6 >= 0x17)
    v74 = 23;
  else
    v74 = (int)*(float *)&v6;
  v75 = *(float **)v73;
  if (*(_QWORD *)v73
    && (v76 = *v75, LODWORD(v75) = *v75 == 1.0, *(_BYTE *)(v73 + 10))
    && (v76 != 0.0 ? (v77 = v76 == 1.0) : (v77 = 1), !v77)
    || (v78 = *(unsigned __int8 *)(v73 + v75 + 11), v76 = 0.0, v78 == 2))
  {
    LOBYTE(v527.f64[0]) = 1;
    LOBYTE(v514) = 1;
    v79 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v73, 0x5Eu, v74, 0, &v527);
    *(float *)&v7 = v79
                  + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v73, 0x5Eu, v74, 1u, &v514)- v79)* v76);
  }
  else
  {
    LODWORD(v7) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0x5Eu, v74, v78, 0);
  }
  v80 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
  v81 = *(float **)v80;
  if (*(_QWORD *)v80
    && (v82 = *v81, LODWORD(v81) = *v81 == 1.0, *(_BYTE *)(v80 + 10))
    && (v82 != 0.0 ? (v83 = v82 == 1.0) : (v83 = 1), !v83)
    || (v84 = *(unsigned __int8 *)(v80 + v81 + 11), v82 = 0.0, v84 == 2))
  {
    LOBYTE(v527.f64[0]) = 1;
    LOBYTE(v514) = 1;
    v85 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0xF3u, 0, &v527);
    v86 = *v85
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0xF3u, 1u, &v514)
                        - *v85)
                * v82);
  }
  else
  {
    v86 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0xF3u, v84, 0);
  }
  v87 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
  v88 = *(float **)v87;
  if (*(_QWORD *)v87 && (v89 = *v88, LODWORD(v88) = *v88 == 1.0, *(_BYTE *)(v87 + 10)) && v89 != 0.0 && v89 != 1.0
    || (v90 = *(unsigned __int8 *)(v87 + v88 + 11), v89 = 0.0, v90 == 2))
  {
    LOBYTE(v527.f64[0]) = 1;
    LOBYTE(v514) = 1;
    v91 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v87, 0xF4u, 0, &v527);
    v92 = *v91
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v87, 0xF4u, 1u, &v514)
                        - *v91)
                * v89);
  }
  else
  {
    v92 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0xF4u, v90, 0);
  }
  v93 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
  v94 = *(float **)v93;
  if (*(_QWORD *)v93 && (v95 = *v94, LODWORD(v94) = *v94 == 1.0, *(_BYTE *)(v93 + 10)) && v95 != 0.0 && v95 != 1.0
    || (v96 = *(unsigned __int8 *)(v93 + v94 + 11), v95 = 0.0, v96 == 2))
  {
    LOBYTE(v527.f64[0]) = 1;
    LOBYTE(v514) = 1;
    v97 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v93, 0xF5u, 0, &v527);
    *(float *)&v9 = v86;
    v98 = *v97
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v93, 0xF5u, 1u, &v514)
                        - *v97)
                * v95);
  }
  else
  {
    *(float *)&v9 = v86;
    v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0xF5u, v96, 0);
  }
  v503 = v98;
  *(float *)&v10 = v92;
  LODWORD(v8) = LODWORD(v7);
  v99 = *(_QWORD *)(*(_QWORD *)&v507 + 24);
  v100 = *(float **)v99;
  if (*(_QWORD *)v99
    && (v101 = *v100, LODWORD(v100) = *v100 == 1.0, *(_BYTE *)(v99 + 10))
    && v101 != 0.0
    && v101 != 1.0
    || (v102 = *(unsigned __int8 *)(v99 + v100 + 11), v101 = 0.0, v102 == 2))
  {
    LOBYTE(v527.f64[0]) = 1;
    LOBYTE(v514) = 1;
    LODWORD(v7) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v99, 0x5Eu, v74, 0, &v527);
    *(float *)&v11 = *(float *)&v7
                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v99, 0x5Eu, v74, 1u, &v514)- *(float *)&v7)* v101);
  }
  else
  {
    LODWORD(v11) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v507 + 24), 0x5Eu, v74, v102, 0);
  }
  v103 = operator new();
  *(_QWORD *)v103 = &off_1E42AF2A8;
  *(_QWORD *)(v103 + 8) = 0;
  *(_QWORD *)(v103 + 64) = 0;
  *(_QWORD *)(v103 + 40) = 0;
  *(_QWORD *)(v103 + 48) = 0;
  *(_QWORD *)(v103 + 32) = "";
  *(_DWORD *)(v103 + 56) = 0;
  *(_DWORD *)(v103 + 72) = 1065353216;
  v104 = 0uLL;
  *(_OWORD *)(v103 + 80) = 0u;
  *(_OWORD *)(v103 + 96) = 0u;
  *(int64x2_t *)(v103 + 112) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v103 + 128) = 0;
  *(_QWORD *)(v103 + 16) = &off_1E42AF548;
  *(_BYTE *)(v103 + 136) = 1;
  *(_OWORD *)(v103 + 144) = 0u;
  *(_OWORD *)(v103 + 160) = 0u;
  *(_OWORD *)(v103 + 176) = 0u;
  v453 = v14;
  v455 = a3;
  if ((v105 & 1) == 0)
  {
    v104 = 0uLL;
    if (v438)
    {
      v439 = operator new();
      *(_QWORD *)(v439 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v439 + 24) = "GeoGL";
      *(_OWORD *)(v439 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v439 = &off_1E42B5668;
      *(_QWORD *)(v439 + 8) = "GeoGL";
      *(_OWORD *)(v439 + 72) = 0u;
      *(_OWORD *)(v439 + 88) = 0u;
      *(_OWORD *)(v439 + 104) = 0u;
      *(_OWORD *)(v439 + 120) = 0u;
      *(_OWORD *)(v439 + 136) = 0u;
      *(_OWORD *)(v439 + 152) = 0u;
      *(_OWORD *)(v439 + 168) = 0u;
      *(_OWORD *)(v439 + 184) = 0u;
      *(_OWORD *)(v439 + 200) = 0u;
      *(_OWORD *)(v439 + 216) = 0u;
      *(_OWORD *)(v439 + 232) = 0u;
      *(_QWORD *)(v439 + 248) = 0;
      *(_OWORD *)(v439 + 56) = 0u;
      v440 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v439 + 56), 0);
      if ((_DWORD)v440)
        geo::read_write_lock::logFailure(v440, (uint64_t)"initialization", v441);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v439 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v439 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v439;
      v104 = 0uLL;
    }
  }
  *(_QWORD *)(v103 + 192) = ggl::Allocator::instance(void)::alloc;
  *(_OWORD *)(v103 + 200) = v104;
  *(_OWORD *)(v103 + 216) = v104;
  *(_QWORD *)(v103 + 232) = 0;
  *(_QWORD *)(v103 + 240) = 32;
  v106 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *(_QWORD *)(v103 + 248) = 0;
  v107 = (char **)(v103 + 248);
  *v106 = 0;
  v106[1] = 0;
  *(_QWORD *)(v103 + 224) = v106;
  *(_QWORD *)(v103 + 232) = v106;
  *(_QWORD *)(v103 + 256) = 0;
  *(_QWORD *)(v103 + 264) = 0;
  *(_BYTE *)(v103 + 272) = 1;
  v108 = operator new();
  *(_OWORD *)v108 = 0u;
  *(_OWORD *)(v108 + 16) = 0u;
  *(_OWORD *)(v108 + 32) = 0u;
  *(_OWORD *)(v108 + 48) = 0u;
  *(_OWORD *)(v108 + 64) = 0u;
  *(_OWORD *)(v108 + 80) = 0u;
  *(_BYTE *)(v108 + 48) = 1;
  *(_QWORD *)(v108 + 56) = 0;
  *(_QWORD *)(v108 + 64) = 0;
  *(_QWORD *)(v108 + 72) = 0;
  {
    v443 = operator new();
    *(_QWORD *)(v443 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v443 + 24) = "VectorKitLabels";
    *(_OWORD *)(v443 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v443 = &off_1E42B5668;
    *(_QWORD *)(v443 + 8) = "VectorKitLabels";
    *(_OWORD *)(v443 + 72) = 0u;
    *(_OWORD *)(v443 + 88) = 0u;
    *(_OWORD *)(v443 + 104) = 0u;
    *(_OWORD *)(v443 + 120) = 0u;
    *(_OWORD *)(v443 + 136) = 0u;
    *(_OWORD *)(v443 + 152) = 0u;
    *(_OWORD *)(v443 + 168) = 0u;
    *(_OWORD *)(v443 + 184) = 0u;
    *(_OWORD *)(v443 + 200) = 0u;
    *(_OWORD *)(v443 + 216) = 0u;
    *(_OWORD *)(v443 + 232) = 0u;
    *(_QWORD *)(v443 + 248) = 0;
    *(_OWORD *)(v443 + 56) = 0u;
    v444 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v443 + 56), 0);
    if ((_DWORD)v444)
      geo::read_write_lock::logFailure(v444, (uint64_t)"initialization", v445);
    v446 = malloc_create_zone(0, 0);
    *(_QWORD *)(v443 + 48) = v446;
    malloc_set_zone_name(v446, "VectorKitLabels");
    *(_QWORD *)(v443 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v443;
    v14 = v453;
  }
  *(_QWORD *)(v108 + 80) = mdm::Allocator::instance(void)::alloc;
  v111 = *(char **)(v103 + 256);
  v110 = *(_QWORD *)(v103 + 264);
  if ((unint64_t)v111 >= v110)
  {
    v498 = v37;
    v114 = *v107;
    v115 = v111 - *v107;
    v116 = v115 >> 3;
    v117 = (v115 >> 3) + 1;
    if (!(v117 >> 61))
    {
      v118 = v110 - (_QWORD)v114;
      if (v118 >> 2 > v117)
        v117 = v118 >> 2;
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
        v119 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v119 = v117;
      if (!v119)
      {
        v120 = 0;
LABEL_152:
        v121 = (uint64_t *)&v120[8 * v116];
        *v121 = v108;
        v501 = v121 + 1;
        if (v111 == v114)
        {
          v124 = vdupq_n_s64((unint64_t)v111);
          v123 = v121 + 1;
LABEL_163:
          *(_QWORD *)(v103 + 248) = v121;
          *(_QWORD *)(v103 + 256) = v123;
          *(_QWORD *)(v103 + 264) = &v120[8 * v119];
          v133 = (_QWORD *)v124.i64[1];
          v132 = (_QWORD *)v124.i64[0];
          v14 = v453;
          while (v133 != v132)
          {
            v136 = *--v133;
            v135 = v136;
            *v133 = 0;
            if (v136)
            {
              v137 = *(_QWORD **)(v135 + 56);
              if (v137)
              {
                v138 = *(_QWORD **)(v135 + 64);
                v134 = *(_QWORD *)(v135 + 56);
                if (v138 != v137)
                {
                  do
                  {
                    v141 = *--v138;
                    v140 = v141;
                    *v138 = 0;
                    if (v141)
                    {
                      if ((v142 & 1) == 0
                      {
                        *(double *)&v143 = COERCE_DOUBLE(operator new());
                        *(_QWORD *)(v143 + 16) = 0x5ED09DD50000000FLL;
                        *(_QWORD *)(v143 + 24) = "VectorKitLabels";
                        *(_OWORD *)(v143 + 32) = xmmword_19FFB2E80;
                        *(_QWORD *)v143 = &off_1E42B5668;
                        *(_QWORD *)(v143 + 8) = "VectorKitLabels";
                        *(_OWORD *)(v143 + 72) = 0u;
                        *(_OWORD *)(v143 + 88) = 0u;
                        *(_OWORD *)(v143 + 104) = 0u;
                        *(_OWORD *)(v143 + 120) = 0u;
                        *(_OWORD *)(v143 + 136) = 0u;
                        *(_OWORD *)(v143 + 152) = 0u;
                        *(_OWORD *)(v143 + 168) = 0u;
                        *(_OWORD *)(v143 + 184) = 0u;
                        *(_OWORD *)(v143 + 200) = 0u;
                        *(_OWORD *)(v143 + 216) = 0u;
                        *(_OWORD *)(v143 + 232) = 0u;
                        *(_QWORD *)(v143 + 248) = 0;
                        v496 = *(double *)&v143;
                        *(_OWORD *)(v143 + 56) = 0u;
                        v144 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v143 + 56), 0);
                        if ((_DWORD)v144)
                          geo::read_write_lock::logFailure(v144, (uint64_t)"initialization", v145);
                        v139 = malloc_create_zone(0, 0);
                        *(_QWORD *)(*(_QWORD *)&v496 + 48) = v139;
                        malloc_set_zone_name(v139, "VectorKitLabels");
                        *(_QWORD *)(*(_QWORD *)&v496 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                        mdm::Allocator::instance(void)::alloc = *(_QWORD *)&v496;
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v140, 80);
                    }
                  }
                  while (v138 != v137);
                  v134 = *(_QWORD *)(v135 + 56);
                }
                *(_QWORD *)(v135 + 64) = v137;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v135 + 80) + 40))(*(_QWORD *)(v135 + 80), v134, *(_QWORD *)(v135 + 72) - v134);
                v14 = v453;
              }
              MEMORY[0x1A1AF4E00](v135, 0x1020C4097AEC518);
            }
          }
          if (v132)
            operator delete(v132);
          v113 = v451;
          LOBYTE(v37) = v498;
          v112 = v501;
          goto LABEL_184;
        }
        v122 = v111 - v114 - 8;
        if (v122 >= 0x78)
        {
          v123 = v121 + 1;
          if (&v111[-(v122 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v121
            || &v120[v115 - (v122 & 0xFFFFFFFFFFFFFFF8) - 8] >= v111)
          {
            v125 = (v122 >> 3) + 1;
            v126 = &v120[8 * v116 - 16];
            v127 = v111 - 32;
            v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v130 = *(_OWORD *)v127;
              v129 = *((_OWORD *)v127 + 1);
              *(_OWORD *)v127 = 0uLL;
              *((_OWORD *)v127 + 1) = 0uLL;
              v127 -= 32;
              *((_OWORD *)v126 - 1) = v130;
              *(_OWORD *)v126 = v129;
              v126 -= 32;
              v128 -= 4;
            }
            while (v128);
            v121 -= v125 & 0x3FFFFFFFFFFFFFFCLL;
            v111 -= 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
            if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_162;
          }
        }
        else
        {
          v123 = v121 + 1;
        }
        do
        {
          v131 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          *(_QWORD *)v111 = 0;
          *--v121 = v131;
        }
        while (v111 != v114);
LABEL_162:
        v124 = *(int64x2_t *)v107;
        goto LABEL_163;
      }
      if (!(v119 >> 61))
      {
        v120 = (char *)operator new(8 * v119);
        goto LABEL_152;
      }
LABEL_433:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_432:
    abort();
  }
  *(_QWORD *)v111 = v108;
  v112 = v111 + 8;
  v113 = v451;
LABEL_184:
  *(_QWORD *)(v103 + 256) = v112;
  *(_QWORD *)v103 = &off_1E4298E00;
  v146 = (std::__shared_weak_count_vtbl **)operator new(8uLL);
  _NF = v29 < *(float *)&v4;
  v450 = v146;
  *v146 = (std::__shared_weak_count_vtbl *)v103;
  LODWORD(v5) = *((_DWORD *)v113 + 345);
  v148 = _NF || v37;
  v149 = *(_QWORD *)(*(_QWORD *)v14 + 40);
  v150 = *(_QWORD **)v149;
  v527 = 0uLL;
  __p[0] = 0;
  v449 = *(float *)&v11
       + (float)((float)(fminf(fmaxf(*(float *)&v10 * (float)(*(float *)&v6 - *(float *)&v9), 0.0), v503) + 1.0)
               * (float)(*(float *)&v8 * 0.5));
  md::ManeuverArrowCoordinates::update((_QWORD *)(v149 + 8), v150, &v527, objc_msgSend(v150, "currentDisplayStep"), *(float *)&v5, v449);
  if ((v148 & 1) == 0)
  {
    v150 = *(_QWORD **)v149;
    v527.f64[0] = *(float64_t *)v149;
    *(_QWORD *)&v527.f64[1] = v149 + 8;
    v152 = -858993459 * ((*(_QWORD *)(v149 + 16) - *(_QWORD *)(v149 + 8)) >> 2);
    if (v152)
    {
      v153 = v152 - 1;
      v154 = (_QWORD *)(v149 + 8);
    }
    else
    {
      v153 = 0;
      v154 = 0;
      v150 = 0;
      v527 = 0uLL;
    }
    LODWORD(__p[0]) = v153;
    if (v150)
      goto LABEL_199;
LABEL_195:
    while (v153)
    {
      while (1)
      {
LABEL_199:
        if (v154)
          goto LABEL_200;
        HIDWORD(v155) = -1082130432;
        *(_QWORD *)&v514 = 0xBF80000000000000;
        v156 = 0xBF80000000000000;
LABEL_201:
        *(_QWORD *)&v511 = v156;
        if (*((float *)&v155 + 1) >= 0.0)
        {
          LODWORD(v151) = HIDWORD(v156);
          if (*((float *)&v156 + 1) >= 0.0
            && objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v453 + 40) + 40), "currentDisplayStep", v151) != v153)
          {
            altitude::ManeuverDrawRegion::assemble(v453, (uint64_t)&v527, (unsigned int *)&v514, (uint64_t)&v511, *(_QWORD *)*v107 + 56);
          }
        }
        if (!v153)
          break;
        LODWORD(__p[0]) = --v153;
        if (!v150)
          goto LABEL_195;
      }
      v154 = 0;
      v150 = 0;
      v527 = 0uLL;
      LODWORD(__p[0]) = 0;
    }
    if (v154)
    {
      v153 = 0;
LABEL_200:
      v155 = *(_QWORD *)(*v154 + 20 * v153);
      *(_QWORD *)&v514 = v155;
      v156 = *(_QWORD *)(*v154 + 20 * v153 + 8);
      goto LABEL_201;
    }
    v14 = v453;
  }
  v157 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v14 + 40) + 40), "currentDisplayStep");
  v527 = 0uLL;
  LODWORD(__p[0]) = 0;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v149 + 16) - *(_QWORD *)(v149 + 8)) >> 2) > v157)
  {
    v527.f64[0] = *(float64_t *)v149;
    *(_QWORD *)&v527.f64[1] = v149 + 8;
    LODWORD(__p[0]) = v157;
    v158 = (_QWORD *)(*(_QWORD *)(v149 + 8) + 20 * v157);
    *(_QWORD *)&v514 = *v158;
    *(_QWORD *)&v511 = v158[1];
    altitude::ManeuverDrawRegion::assemble(v14, (uint64_t)&v527, (unsigned int *)&v514, (uint64_t)&v511, *(_QWORD *)*v107 + 56);
  }
  v448 = *((float *)v451 + 345);
  v159 = (*v450)[6].~__shared_weak_count_0;
  for (i = (*v450)[6].__on_zero_shared;
        (char *)v159 != (char *)i;
        v159 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v159 + 8))
  {
    v161 = *(uint64_t **)(*(_QWORD *)v159 + 56);
    v162 = *(uint64_t **)(*(_QWORD *)v159 + 64);
    if (v161 != v162)
    {
      v163 = *((_QWORD *)v14 + 3);
      do
      {
        v164 = *v161++;
        *(_QWORD *)(v164 + 56) = v163 + 24 * *(_QWORD *)(v164 + 56);
      }
      while (v161 != v162);
    }
  }
  v165 = operator new();
  *(_QWORD *)v165 = &off_1E42AF4E8;
  *(_QWORD *)(v165 + 8) = 0;
  *(_QWORD *)(v165 + 16) = 0;
  *(_QWORD *)(v165 + 24) = 0;
  *(double *)&v166 = COERCE_DOUBLE(operator new(8uLL));
  v166->__vftable = *v450;
  *(_QWORD *)(v165 + 16) = &v166->__shared_owners_;
  *(_QWORD *)(v165 + 24) = &v166->__shared_owners_;
  *(double *)(v165 + 8) = *(double *)&v166;
  *(_OWORD *)(v165 + 32) = 0u;
  *(_QWORD *)(v165 + 72) = 0;
  *(_BYTE *)(v165 + 80) = 0;
  *(_BYTE *)(v165 + 104) = 0;
  *(_OWORD *)(v165 + 48) = 0u;
  *(_QWORD *)&v491 = v165 + 32;
  *(_BYTE *)(v165 + 64) = 0;
  v499 = (std::__shared_weak_count *)&v166->__shared_owners_;
  *(_QWORD *)&v497 = v165 + 80;
  v167 = 0.0;
  v168 = 0;
  v169 = 0;
  do
  {
    v170 = v166->__vftable;
    v170->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v165;
    v172 = v170[6].~__shared_weak_count_0;
    on_zero_shared = v170[6].__on_zero_shared;
    v502 = v166;
    v504 = on_zero_shared;
    if ((char *)v172 != (char *)on_zero_shared)
    {
      while (1)
      {
        v150 = *(_QWORD **)v172;
        v150[1] = **(_QWORD **)v172;
        v150[3] = v150[2];
        v150[5] = v150[4];
        v174 = (_QWORD **)v150[7];
        for (j = (_QWORD **)v150[8]; v174 != j; v150[5] = v176[5] + v150[5] - v176[4])
        {
          v176 = *v174++;
          v177 = v176[6];
          v178 = v176[2] + 6 * v177;
          v179 = 2 * v177 + 6;
          v176[1] = v179 + *v176;
          v176[3] = v178 + 12;
          v150[1] += v179;
          v150[3] = v176[3] + v150[3] - v176[2];
        }
        if (v168 >= v169)
          break;
        *(_QWORD *)v168 = v150;
        v173 = v168 + 8;
LABEL_221:
        v172 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v172 + 8);
        v168 = v173;
        if ((char *)v172 == (char *)on_zero_shared)
          goto LABEL_217;
      }
      v180 = (int64_t)&v168[-*(_QWORD *)&v167];
      v181 = (uint64_t)&v168[-*(_QWORD *)&v167] >> 3;
      v182 = v181 + 1;
      if ((unint64_t)(v181 + 1) >> 61)
        goto LABEL_432;
      if ((uint64_t)&v169[-*(_QWORD *)&v167] >> 2 > v182)
        v182 = (uint64_t)&v169[-*(_QWORD *)&v167] >> 2;
      if ((unint64_t)&v169[-*(_QWORD *)&v167] >= 0x7FFFFFFFFFFFFFF8)
        v183 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v183 = v182;
      if (v183)
      {
        if (v183 >> 61)
          goto LABEL_433;
        v184 = v167;
        v185 = operator new(8 * v183);
        v167 = v184;
      }
      else
      {
        v185 = 0;
      }
      v186 = &v185[8 * v181];
      *v186 = v150;
      v173 = (char *)(v186 + 1);
      if (v168 != *(char **)&v167)
      {
        v187 = (unint64_t)&v168[-*(_QWORD *)&v167 - 8];
        if (v187 >= 0x168)
        {
          if (&v185[v180 - 8 - (v187 & 0xFFFFFFFFFFFFFFF8)] > &v185[v180 - 8])
          {
            v188 = v168;
          }
          else if (&v168[-(v187 & 0xFFFFFFFFFFFFFFF8) - 8] > v168 - 8)
          {
            v188 = v168;
          }
          else if ((unint64_t)(v168 - &v185[v180]) >= 0x20)
          {
            v190 = (v187 >> 3) + 1;
            v188 = &v168[-8 * (v190 & 0x3FFFFFFFFFFFFFFCLL)];
            v191 = &v185[8 * v181 - 16];
            v192 = v168 - 16;
            v193 = v190 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v194 = *(_OWORD *)v192;
              *(v191 - 1) = *((_OWORD *)v192 - 1);
              *v191 = v194;
              v191 -= 2;
              v192 -= 32;
              v193 -= 4;
            }
            while (v193);
            v186 -= v190 & 0x3FFFFFFFFFFFFFFCLL;
            if (v190 == (v190 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_239;
          }
          else
          {
            v188 = v168;
          }
        }
        else
        {
          v188 = v168;
        }
        do
        {
          v189 = *((_QWORD *)v188 - 1);
          v188 -= 8;
          *--v186 = v189;
        }
        while (v188 != *(char **)&v167);
      }
LABEL_239:
      v169 = &v185[8 * v183];
      if (v167 != 0.0)
        operator delete(*(void **)&v167);
      v167 = *(double *)&v186;
      on_zero_shared = v504;
      goto LABEL_221;
    }
LABEL_217:
    v166 = (std::__shared_weak_count *)&v502->__shared_owners_;
  }
  while (&v502->__shared_owners_ != (uint64_t *)v499);
  v195 = (_QWORD *)&unk_1ECE44000;
  if (*(_BYTE *)(v165 + 64))
  {
    v196 = v167;
    v197 = (gdc::GlobeTileGrid *)operator new();
    if (!*(_BYTE *)(v165 + 104))
    {
      v447 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
      std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::destroy_deallocate(*(void **)&v196);
      MEMORY[0x1A1AF4E00](v150, 0x10A1C40A19070A9);
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v507);
      _Unwind_Resume(v447);
    }
    v198 = v197;
    v199 = gdc::GlobeTileGrid::GlobeTileGrid(v197, *(const QuadTile **)&v497);
    v200 = *(_QWORD *)(v165 + 72);
    *(_QWORD *)(v165 + 72) = v199;
    if (v200)
    {
      v201 = *(_QWORD *)(v200 + 2584);
      if (v201)
        MEMORY[0x1A1AF4DE8](v201, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v200, 0x1020C4007FF0C4BLL);
      v198 = *(gdc::GlobeTileGrid **)(v165 + 72);
    }
    *((_QWORD *)v198 + 323) = operator new[]();
    gdc::GlobeTileGrid::endBuildingHeightRange(*(gdc::GlobeTileGrid **)(v165 + 72));
    v167 = v196;
  }
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0.0;
  v206 = (uint64_t)&v168[-*(_QWORD *)&v167] >> 3;
  v490 = (void *)0xA3D02C1100000005;
  v505 = v167;
  v492 = *(double *)&v206;
  v500 = 0.0;
  do
  {
    if (v203 == v206
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v167 + 8 * v203) + 8)
                          + v204
                          - **(_QWORD **)(*(_QWORD *)&v167 + 8 * v203)) >= 0x10000)
    {
      v495 = v205;
      *(double *)&v207 = COERCE_DOUBLE(operator new(0xF8uLL));
      v208 = (std::__shared_count)0;
      v209 = v207;
      v207->__shared_owners_ = 0;
      v210 = (unint64_t *)&v207->__shared_owners_;
      v207->__shared_weak_owners_ = 0;
      v207[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      *(_QWORD *)&v497 = &v207[1];
      v207->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFED0;
      v207[1].__shared_owners_ = 64;
      LODWORD(v207[1].__shared_weak_owners_) = 1;
      v207[2].__vftable = 0;
      v207[2].__shared_owners_ = 0;
      v207[2].__shared_weak_owners_ = 0;
      v207[3].__vftable = (std::__shared_weak_count_vtbl *)(v204 << 6);
      *(_OWORD *)&v207[3].__shared_owners_ = 0u;
      v207[4].std::__shared_count = 0u;
      v207[4].__shared_weak_owners_ = 0;
      v502 = v207;
      if ((v211 & 1) == 0)
      {
        v209 = v502;
        v208 = (std::__shared_count)0;
        if (v278)
        {
          v279 = operator new();
          *(_QWORD *)(v279 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v279 + 24) = "GeoGL";
          *(_OWORD *)(v279 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v279 = &off_1E42B5668;
          *(_QWORD *)(v279 + 8) = "GeoGL";
          *(_OWORD *)(v279 + 72) = 0u;
          *(_OWORD *)(v279 + 88) = 0u;
          *(_OWORD *)(v279 + 104) = 0u;
          *(_OWORD *)(v279 + 120) = 0u;
          *(_OWORD *)(v279 + 136) = 0u;
          *(_OWORD *)(v279 + 152) = 0u;
          *(_OWORD *)(v279 + 168) = 0u;
          *(_OWORD *)(v279 + 184) = 0u;
          *(_OWORD *)(v279 + 200) = 0u;
          *(_OWORD *)(v279 + 216) = 0u;
          *(_OWORD *)(v279 + 232) = 0u;
          *(_QWORD *)(v279 + 248) = 0;
          *(_OWORD *)(v279 + 56) = 0u;
          v280 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v279 + 56), 0);
          if ((_DWORD)v280)
            geo::read_write_lock::logFailure(v280, (uint64_t)"initialization", v281);
          v282 = malloc_create_zone(0, 0);
          *(_QWORD *)(v279 + 48) = v282;
          malloc_set_zone_name(v282, "GeoGL");
          *(_QWORD *)(v279 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          v195 = &unk_1ECE44000;
          ggl::Allocator::instance(void)::alloc = v279;
          v208 = (std::__shared_count)0;
          v209 = v502;
        }
      }
      v209[5].__vftable = (std::__shared_weak_count_vtbl *)v195[495];
      v209[5].__shared_owners_ = 0;
      *((std::__shared_count *)v209 + 11) = v208;
      v209[8].std::__shared_count = v208;
      v209[8].__shared_weak_owners_ = 0;
      v209[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v209 + 10) = v208;
      v209[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v209[5].__shared_weak_owners_) = 0;
      v209[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7B60;
      v209[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v209[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverManeuver::defaultReflection;
      v209[9].__shared_owners_ = (uint64_t)&unk_1E42B7B80;
      v212 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v213 = (std::__shared_count)0;
      v214 = v195;
      v215 = v212;
      v212->__shared_owners_ = 0;
      v216 = (unint64_t *)&v212->__shared_owners_;
      v212->__shared_weak_owners_ = 0;
      v212[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      *(_QWORD *)&v496 = &v212[1];
      v212->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v212[1].__shared_owners_ = 2;
      LODWORD(v212[1].__shared_weak_owners_) = 257;
      v212[2].__vftable = 0;
      v212[2].__shared_owners_ = 0;
      v212[2].__shared_weak_owners_ = 0;
      v212[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * *(_QWORD *)&v495);
      *(_OWORD *)&v212[3].__shared_owners_ = 0u;
      v212[4].std::__shared_count = 0u;
      v212[4].__shared_weak_owners_ = 0;
      if ((v217 & 1) == 0)
      {
        v213 = (std::__shared_count)0;
        if (v283)
        {
          v284 = operator new();
          *(_QWORD *)(v284 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v284 + 24) = "GeoGL";
          *(_OWORD *)(v284 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v284 = &off_1E42B5668;
          *(_QWORD *)(v284 + 8) = "GeoGL";
          *(_OWORD *)(v284 + 72) = 0u;
          *(_OWORD *)(v284 + 88) = 0u;
          *(_OWORD *)(v284 + 104) = 0u;
          *(_OWORD *)(v284 + 120) = 0u;
          *(_OWORD *)(v284 + 136) = 0u;
          *(_OWORD *)(v284 + 152) = 0u;
          *(_OWORD *)(v284 + 168) = 0u;
          *(_OWORD *)(v284 + 184) = 0u;
          *(_OWORD *)(v284 + 200) = 0u;
          *(_OWORD *)(v284 + 216) = 0u;
          *(_OWORD *)(v284 + 232) = 0u;
          *(_QWORD *)(v284 + 248) = 0;
          *(_OWORD *)(v284 + 56) = 0u;
          v285 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v284 + 56), 0);
          if ((_DWORD)v285)
            geo::read_write_lock::logFailure(v285, (uint64_t)"initialization", v286);
          v287 = malloc_create_zone(0, 0);
          *(_QWORD *)(v284 + 48) = v287;
          malloc_set_zone_name(v287, "GeoGL");
          *(_QWORD *)(v284 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          v214 = &unk_1ECE44000;
          ggl::Allocator::instance(void)::alloc = v284;
          v213 = (std::__shared_count)0;
        }
      }
      v215[5].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v214 + 495);
      v215[5].__shared_owners_ = 0;
      *((std::__shared_count *)v215 + 11) = v213;
      v215[8].std::__shared_count = v213;
      v215[8].__shared_weak_owners_ = 0;
      v215[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v215 + 10) = v213;
      v215[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v215[5].__shared_weak_owners_) = 0;
      LODWORD(v215[10].__vftable) = 0;
      v215[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v215[1].__shared_owners_ = 2;
      v215[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v215[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
      v218 = operator new();
      do
        v219 = __ldxr(v210);
      while (__stxr(v219 + 1, v210));
      v220 = *(double *)&v502;
      do
        v221 = __ldxr(v216);
      while (__stxr(v221 + 1, v216));
      if ((v222 & 1) == 0)
      {
        v220 = *(double *)&v502;
        if (v288)
        {
          if ((v289 & 1) == 0
          {
            ggl::MeshTyped<ggl::FlyoverManeuver::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverManeuver::defaultReflection;
          }
          ggl::MeshTyped<ggl::FlyoverManeuver::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverManeuver::Default>::attributesReflection(void)::r;
          unk_1EE576260 = 1;
          v214 = &unk_1ECE44000;
          v220 = *(double *)&v502;
        }
      }
      *(_QWORD *)(v218 + 32) = 0;
      *(_QWORD *)(v218 + 40) = 0;
      *(_DWORD *)(v218 + 48) = 0;
      *(_QWORD *)v218 = &off_1E42BBC08;
      *(_QWORD *)(v218 + 8) = "BatchType/Mesh";
      *(_QWORD *)(v218 + 16) = &unk_1E42BBC28;
      *(_QWORD *)(v218 + 24) = 0;
      *(_QWORD *)(v218 + 56) = &ggl::MeshTyped<ggl::FlyoverManeuver::Default>::typedReflection(void)::r;
      *(_QWORD *)(v218 + 64) = 0;
      v223 = v218 + 64;
      *(_QWORD *)(v218 + 72) = 0;
      *(_QWORD *)(v218 + 80) = 0;
      if ((v224 & 1) == 0)
      {
        *(_QWORD *)&v495 = v218 + 64;
        v223 = v218 + 64;
        v220 = *(double *)&v502;
        if (v290)
        {
          v291 = operator new();
          *(_QWORD *)(v291 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v291 + 24) = "GeoGL";
          *(_OWORD *)(v291 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v291 = &off_1E42B5668;
          *(_QWORD *)(v291 + 8) = "GeoGL";
          *(_OWORD *)(v291 + 72) = 0u;
          *(_OWORD *)(v291 + 88) = 0u;
          *(_OWORD *)(v291 + 104) = 0u;
          *(_OWORD *)(v291 + 120) = 0u;
          *(_OWORD *)(v291 + 136) = 0u;
          *(_OWORD *)(v291 + 152) = 0u;
          *(_OWORD *)(v291 + 168) = 0u;
          *(_OWORD *)(v291 + 184) = 0u;
          *(_OWORD *)(v291 + 200) = 0u;
          *(_OWORD *)(v291 + 216) = 0u;
          *(_OWORD *)(v291 + 232) = 0u;
          *(_QWORD *)(v291 + 248) = 0;
          *(_OWORD *)(v291 + 56) = 0u;
          v292 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v291 + 56), 0);
          if ((_DWORD)v292)
            geo::read_write_lock::logFailure(v292, (uint64_t)"initialization", v293);
          v294 = malloc_create_zone(0, 0);
          *(_QWORD *)(v291 + 48) = v294;
          malloc_set_zone_name(v294, "GeoGL");
          *(_QWORD *)(v291 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          v214 = &unk_1ECE44000;
          ggl::Allocator::instance(void)::alloc = v291;
          v220 = *(double *)&v502;
          v223 = v218 + 64;
        }
      }
      v225 = *((_QWORD *)v214 + 495);
      *(_QWORD *)(v218 + 120) = 0;
      *(_QWORD *)(v218 + 96) = 0;
      *(_QWORD *)(v218 + 104) = 0;
      *(_QWORD *)(v218 + 88) = v225;
      if ((v225 & 1) == 0)
      {
        v495 = *(double *)&v223;
        *(double *)&v223 = v495;
        v220 = *(double *)&v502;
        if (v295)
        {
          v296 = operator new();
          *(_QWORD *)(v296 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v296 + 24) = "GeoGL";
          *(_OWORD *)(v296 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v296 = &off_1E42B5668;
          *(_QWORD *)(v296 + 8) = "GeoGL";
          *(_OWORD *)(v296 + 72) = 0u;
          *(_OWORD *)(v296 + 88) = 0u;
          *(_OWORD *)(v296 + 104) = 0u;
          *(_OWORD *)(v296 + 120) = 0u;
          *(_OWORD *)(v296 + 136) = 0u;
          *(_OWORD *)(v296 + 152) = 0u;
          *(_OWORD *)(v296 + 168) = 0u;
          *(_OWORD *)(v296 + 184) = 0u;
          *(_OWORD *)(v296 + 200) = 0u;
          *(_OWORD *)(v296 + 216) = 0u;
          *(_OWORD *)(v296 + 232) = 0u;
          *(_QWORD *)(v296 + 248) = 0;
          v297 = v296;
          *(_OWORD *)(v296 + 56) = 0u;
          v298 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v296 + 56), 0);
          if ((_DWORD)v298)
            geo::read_write_lock::logFailure(v298, (uint64_t)"initialization", v299);
          v300 = malloc_create_zone(0, 0);
          *(_QWORD *)(v297 + 48) = v300;
          malloc_set_zone_name(v300, "GeoGL");
          *(_QWORD *)(v297 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          v214 = &unk_1ECE44000;
          ggl::Allocator::instance(void)::alloc = v297;
          v220 = *(double *)&v502;
          *(double *)&v223 = v495;
        }
      }
      *(_QWORD *)(v218 + 128) = *((_QWORD *)v214 + 495);
      *(_QWORD *)(v218 + 136) = 0;
      *(_QWORD *)(v218 + 112) = v218 + 120;
      *(_QWORD *)v218 = &off_1E42BD7F8;
      *(_QWORD *)(v218 + 16) = &unk_1E42BD818;
      v527.f64[0] = v497;
      v527.f64[1] = v220;
      do
        v226 = __ldxr(v210);
      while (__stxr(v226 + 1, v210));
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v223, (uint64_t *)&v527, (uint64_t *)__p, 1uLL);
      v227 = v527.f64[1];
      v195 = (_QWORD *)&unk_1ECE44000;
      v167 = v505;
      if (*(_QWORD *)&v527.f64[1])
      {
        v228 = (unint64_t *)(*(_QWORD *)&v527.f64[1] + 8);
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v227 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v227));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v227);
          v167 = v505;
        }
      }
      do
        v230 = __ldxr(v216);
      while (__stxr(v230 + 1, v216));
      v231 = *(std::__shared_weak_count **)(v218 + 104);
      *(float64_t *)(v218 + 96) = v496;
      *(_QWORD *)(v218 + 104) = v215;
      if (v231)
      {
        v232 = (unint64_t *)&v231->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
          v167 = v505;
        }
      }
      *(_QWORD *)v218 = &off_1E42B7098;
      *(_QWORD *)(v218 + 16) = &unk_1E42B70B8;
      do
        v234 = __ldaxr(v216);
      while (__stlxr(v234 - 1, v216));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
        v167 = v505;
      }
      do
        v235 = __ldaxr(v210);
      while (__stlxr(v235 - 1, v210));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
        std::__shared_weak_count::__release_weak(v502);
        v167 = v505;
      }
      v237 = *(uint64_t **)(v165 + 40);
      v236 = *(_QWORD *)(v165 + 48);
      if ((unint64_t)v237 >= v236)
      {
        v239 = **(uint64_t ***)&v491;
        v240 = (uint64_t)v237 - **(_QWORD **)&v491;
        v241 = v240 >> 3;
        v242 = (v240 >> 3) + 1;
        if (v242 >> 61)
          goto LABEL_432;
        v243 = v236 - (_QWORD)v239;
        if (v243 >> 2 > v242)
          v242 = v243 >> 2;
        if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8)
          *(double *)&v242 = 1.49166815e-154;
        v497 = *(double *)&v242;
        if (*(double *)&v242 == 0.0)
        {
          v244 = 0;
        }
        else
        {
          *(_QWORD *)&v496 = (char *)v237 - **(_QWORD **)&v491;
          if (v242 >> 61)
            goto LABEL_433;
          v244 = operator new(8 * v242);
          v167 = v505;
          v240 = *(_QWORD *)&v496;
        }
        v245 = (uint64_t *)&v244[8 * v241];
        *v245 = v218;
        v238 = v245 + 1;
        if (v237 == v239)
        {
          v239 = v237;
        }
        else
        {
          v246 = (char *)(v237 - 1) - (char *)v239;
          if (v246 < 0x58)
            goto LABEL_445;
          if ((unint64_t)((char *)v237 - &v244[v240]) < 0x20)
            goto LABEL_445;
          v247 = (v246 >> 3) + 1;
          v248 = &v244[8 * v241 - 16];
          v249 = v237 - 2;
          v250 = v247 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v251 = *(_OWORD *)v249;
            *(v248 - 1) = *((_OWORD *)v249 - 1);
            *v248 = v251;
            v248 -= 2;
            v249 -= 4;
            v250 -= 4;
          }
          while (v250);
          v245 -= v247 & 0x3FFFFFFFFFFFFFFCLL;
          v237 -= v247 & 0x3FFFFFFFFFFFFFFCLL;
          if (v247 != (v247 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_445:
            do
            {
              v252 = *--v237;
              *--v245 = v252;
            }
            while (v237 != v239);
            v239 = **(uint64_t ***)&v491;
          }
        }
        *(_QWORD *)(v165 + 32) = v245;
        *(_QWORD *)(v165 + 40) = v238;
        *(_QWORD *)(v165 + 48) = &v244[8 * *(_QWORD *)&v497];
        if (v239)
        {
          v253 = v238;
          operator delete(v239);
          v238 = v253;
          v167 = v505;
        }
        v195 = &unk_1ECE44000;
      }
      else
      {
        *v237 = v218;
        v238 = v237 + 1;
      }
      *(_QWORD *)(v165 + 40) = v238;
      if (v202 < v203)
      {
        v254 = 0;
        v255 = v202;
        do
        {
          v256 = *(_QWORD *)(*(_QWORD *)&v167 + 8 * v255);
          v257 = *(_QWORD *)(v256 + 32);
          v258 = v257 + v254;
          v259 = *(_QWORD *)(v256 + 40) + v254;
          *(_QWORD *)(v256 + 32) = v258;
          *(_QWORD *)(v256 + 40) = v259;
          v254 = v259 - v257;
          ++v255;
        }
        while (v203 != v255);
        v260 = 0;
        do
        {
          v261 = *(uint64_t **)(*(_QWORD *)&v167 + 8 * v202);
          v262 = *v261;
          v263 = *v261 + v260;
          v264 = v261[1] + v260;
          *v261 = v263;
          v261[1] = v264;
          v265 = v261[2];
          v266 = v265 + v254;
          v267 = v261[3] + v254;
          v261[2] = v266;
          v261[3] = v267;
          v261[11] = v218;
          v268 = (_QWORD **)v261[7];
          v269 = (_QWORD **)v261[8];
          if (v268 != v269)
          {
            v270 = v261[4];
            do
            {
              v271 = *v268++;
              v272 = v271[1] - *v271;
              *v271 = v263;
              v263 += v272;
              v273 = v271[3] - v271[2];
              v271[1] = v263;
              v271[2] = v266;
              v266 += v273;
              v274 = v271[5] - v271[4];
              v271[3] = v266;
              v271[4] = v270;
              v270 += v274;
              v271[5] = v270;
            }
            while (v268 != v269);
          }
          v260 = v264 - v262;
          v254 = v267 - v265;
          ++v202;
        }
        while (v202 != v203);
      }
      do
        v275 = __ldaxr(v216);
      while (__stlxr(v275 - 1, v216));
      if (!v275)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
        v167 = v505;
      }
      do
        v276 = __ldaxr(v210);
      while (__stlxr(v276 - 1, v210));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
        std::__shared_weak_count::__release_weak(v502);
        v167 = v505;
      }
      v205 = 0.0;
      v204 = 0;
      v202 = v203;
      *(double *)&v206 = v492;
    }
    if (v203 < v206)
    {
      v277 = *(_QWORD **)(*(_QWORD *)&v167 + 8 * v203);
      v204 = v277[1] + v204 - *v277;
      *(_QWORD *)&v205 = v277[3] + *(_QWORD *)&v205 + v277[5] - (v277[2] + v277[4]);
    }
    ++v203;
  }
  while (v203 <= v206);
  if (v167 != 0.0)
    operator delete(*(void **)&v167);
  *(_QWORD *)v165 = &off_1E4298E20;
  *(_OWORD *)(v165 + 152) = 0u;
  *(_OWORD *)(v165 + 184) = 0u;
  *(_OWORD *)(v165 + 120) = 0u;
  *(_OWORD *)(v165 + 136) = 0u;
  *(_OWORD *)(v165 + 168) = 0u;
  *(_OWORD *)(v165 + 200) = 0u;
  *(_OWORD *)(v165 + 216) = 0u;
  *(_QWORD *)(v165 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(v165 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v165 + 192) = 0x3FF0000000000000;
  *(_QWORD *)(v165 + 232) = 0x3FF0000000000000;
  v301 = *(uint64_t **)(v165 + 8);
  v302 = *(uint64_t **)(v165 + 16);
  v303 = v453;
  v304 = v455;
  if (v301 != v302)
  {
    v305 = *(uint64_t **)(v165 + 8);
    do
    {
      v306 = *v305++;
      *(_QWORD *)(v306 + 8) = v165;
    }
    while (v305 != v302);
  }
  *((_QWORD *)v453 + 2) = v165;
  *(_QWORD *)(v165 + 56) = *((_QWORD *)v453 + 8);
  v307 = *(_QWORD *)v453;
  *(_QWORD *)(v165 + 208) = *(_QWORD *)(*(_QWORD *)v453 + 128);
  *(_QWORD *)(v165 + 216) = *(_QWORD *)(v307 + 136);
  *(_QWORD *)(v165 + 224) = *(_QWORD *)(v307 + 144);
  if (v301 != v302)
  {
    v452 = v302;
    do
    {
      v454 = v301;
      v309 = *(uint64_t ***)(*v301 + 248);
      v308 = *(uint64_t ***)(*v301 + 256);
      v456 = v308;
      while (v309 != v308)
      {
        v310 = *v309;
        v311 = **(_QWORD **)((*v309)[11] + 64);
        v312 = **v309;
        v313 = (*v309)[1];
        v314 = *(_QWORD *)(v311 + 8);
        v315 = v314 * v312;
        v463 = v309;
        v460 = v314 * v313;
        if (v314 * v313 == v314 * v312)
        {
          v465 = 0;
        }
        else if (v304 && *(_BYTE *)(v311 + 17) != 2)
        {
          v465 = (*(uint64_t (**)(karo::graphics::Viewport *, uint64_t, uint64_t))(*(_QWORD *)v304 + 56))(v304, v311, v315);
        }
        else
        {
          v465 = *(_QWORD *)(v311 + 72) + v315;
        }
        v316 = v310[2];
        v318 = v310[4];
        v317 = v310[5];
        if (v317 == v318)
        {
          v317 = v310[3];
        }
        else
        {
          if (v318 < v316)
            v316 = v310[4];
          if (v310[3] > v317)
            v317 = v310[3];
        }
        v319 = *(_QWORD *)(v310[11] + 96);
        v320 = *(_QWORD *)(v319 + 8);
        v461 = v315;
        v462 = v311;
        v458 = v320 * v316;
        v459 = v319;
        v457 = v320 * v317;
        if (v320 * v317 == v320 * v316)
        {
          v464 = 0;
        }
        else if (v304 && *(_BYTE *)(v319 + 17) != 2)
        {
          v464 = (*(uint64_t (**)(karo::graphics::Viewport *))(*(_QWORD *)v304 + 56))(v304);
        }
        else
        {
          v464 = *(_QWORD *)(v319 + 72) + v320 * v316;
        }
        v321 = (uint64_t *)v310[7];
        v466 = (uint64_t *)v310[8];
        if (v321 != v466)
        {
          v322 = v465;
          v323 = v464 + 2 * v310[2] - 2 * v316;
          while (1)
          {
            v467 = v321;
            v324 = *v321;
            v536 = 0uLL;
            v552 = 0uLL;
            v516 = 0uLL;
            v513 = 0uLL;
            v325 = *(_QWORD *)(v324 + 48);
            v494 = v325 - 1;
            if (v325 != 1)
              break;
LABEL_385:
            v321 = v467 + 1;
            v322 += (*(_QWORD *)(*v467 + 8) - *(_QWORD *)*v467) << 6;
            v323 += 2 * (*(_QWORD *)(*v467 + 24) - *(_QWORD *)(*v467 + 16));
            if (v467 + 1 == v466)
              goto LABEL_405;
          }
          v326 = 0;
          v327 = 0;
          v328 = 0;
          v493 = v325 - 2;
          while (2)
          {
            v329 = v328 == 0;
            if (v493 == v328)
              v329 |= 2u;
            v553 = v329;
            md::Ribbons::PolylineSegment::calculate((uint64_t)&v527, v324, v328);
            if (v328)
            {
              v330 = v543.f64[0];
              v332 = v530.f64[1];
              v331 = v530.f64[0];
              if (vabdd_f64(v530.f64[0], v543.f64[0]) >= 1.0e-10)
              {
                v334 = v531.f64[0];
                v333 = v543.f64[1];
                v335 = v544;
              }
              else
              {
                v333 = v543.f64[1];
                v334 = v531.f64[0];
                v335 = v544;
                if (vabdd_f64(v530.f64[1], v543.f64[1]) < 1.0e-10)
                {
                  v336 = 2.0;
                  v337 = 0.5;
                  v338 = &off_19FFB1000;
                  v339 = &off_19FFB1000;
                  if (vabdd_f64(v531.f64[0], v544) < 1.0e-10)
                  {
                    v535 = v515;
                    v536 = v516;
                    *(_OWORD *)&v534[8] = v514;
                    v551 = v512;
                    v552 = v513;
                    v550 = v511;
                    v527.f64[0] = v492;
                    v527.f64[1] = v491;
                    __p[0] = v490;
                    __p[1] = v489;
                    v529.f64[0] = v488;
                    v529.f64[1] = v487;
                    v530.f64[0] = v11;
                    v530.f64[1] = v9;
                    v341 = v496;
                    v340 = v497;
                    v531.f64[0] = v496;
                    v343 = *(double *)&v502;
                    v342 = v505;
                    v531.f64[1] = v505;
                    *(_QWORD *)&v532.f64[0] = v502;
                    v344 = v500;
                    v532.f64[1] = v500;
                    v533.f64[0] = v486;
                    v533.f64[1] = v485;
                    *(float64_t *)v534 = v497;
                    v537 = v484;
                    v538 = v483;
                    v539 = v482;
                    v540 = v481;
                    v541 = v480;
                    v542 = v479;
                    v543.f64[0] = v10;
                    v345 = v495;
                    v543.f64[1] = v495;
                    v544 = v8;
                    v545 = v5;
                    v546 = v4;
                    v547 = v6;
                    v548 = v7;
                    v549.f64[0] = v478;
                    v549.f64[1] = v477;
                    v553 = (int)v310;
                    v554 = v476;
                    v555 = v475;
                    v556 = v474;
                    v557 = v473;
                    v558 = v472;
                    v559 = v470;
                    v560 = v469;
                    v561 = v468;
                    v330 = v10;
                    v332 = v9;
                    v331 = v11;
                    v562 = v471;
                    goto LABEL_400;
                  }
LABEL_399:
                  v491 = v527.f64[1];
                  v492 = v527.f64[0];
                  v489 = __p[1];
                  v490 = __p[0];
                  v487 = v529.f64[1];
                  v488 = v529.f64[0];
                  v342 = v531.f64[1];
                  v344 = v532.f64[1];
                  v343 = v532.f64[0];
                  v485 = v533.f64[1];
                  v486 = v533.f64[0];
                  v340 = *(double *)v534;
                  v514 = *(_OWORD *)&v534[8];
                  v515 = v535;
                  v516 = v536;
                  v484 = v537;
                  v483 = v538;
                  v482 = v539;
                  v481 = v540;
                  v480 = v541;
                  v479 = v542;
                  v5 = v545;
                  v4 = v546;
                  v6 = v547;
                  v7 = v548;
                  v477 = v549.f64[1];
                  v478 = v549.f64[0];
                  v513 = v552;
                  v511 = v550;
                  v512 = v551;
                  LODWORD(v310) = v553;
                  v476 = v554;
                  v475 = v555;
                  v474 = v556;
                  v8 = v335;
                  v345 = v333;
                  v341 = v334;
                  v472 = v558;
                  v473 = v557;
                  v469 = v560;
                  v470 = v559;
                  v468 = v561;
                  v471 = v562;
LABEL_400:
                  *(double *)&v502 = v343;
                  v505 = v342;
                  v500 = v344;
                  v496 = v341;
                  v497 = v340;
                  if ((v310 & 1) != 0)
                  {
                    v351 = v327 + *(_DWORD *)v324;
                    v352 = (_WORD *)(v323 + 2 * v326);
                    *v352 = v351;
                    v352[1] = v351 + 1;
                    v352[2] = v351 + 2;
                    v352[3] = v351 + 1;
                    v352[4] = v351 + 3;
                    v352[5] = v351 + 2;
                    v353 = *(double *)&v534[8];
                    v354 = fminf(v353, v336) * v337;
                    v355 = v341 - *(double *)(v165 + 224);
                    v356 = (float32x2_t *)(v322 + (v327 << 6));
                    v357 = v530.f64[1];
                    v358 = vcvt_f32_f64(vsubq_f64(v530, *(float64x2_t *)(v165 + 208)));
                    *v356 = v358;
                    v356[1].f32[0] = v355;
                    v359 = v354 * v340;
                    v360 = (float)*(unint64_t *)(v324 + 72);
                    v361 = vcvt_f32_f64(vmulq_n_f64(v533, v354));
                    v356[4] = v361;
                    v356[5].f32[0] = v359;
                    v356[5].f32[1] = v360;
                    v362 = v342;
                    v363 = v343;
                    v364 = v344;
                    v356[2].f32[0] = v362;
                    v356[2].f32[1] = v363;
                    v356[3].f32[0] = v364;
                    v356[8] = v358;
                    v356[9].f32[0] = v355;
                    v356[12] = v361;
                    v356[13].f32[0] = v359;
                    v356[13].f32[1] = v360;
                    v356[10].f32[0] = v362;
                    v356[10].f32[1] = v363;
                    v356[11].f32[0] = v364;
                    v356[6] = (float32x2_t)3201092813;
                    v356[14] = (float32x2_t)1053609165;
                    v349 = *(_QWORD *)v324;
                    v365 = v327 + 2 + *(_QWORD *)v324;
                    v352[6] = v365;
                    v352[7] = v365 + 1;
                    v352[8] = v365 + 2;
                    v352[9] = v365 + 1;
                    v352[10] = v365 + 3;
                    v326 += 12;
                    v352[11] = v365 + 2;
                    v366 = *(double *)&v534[8];
                    v367 = fminf(v366, v336) * v337;
                    v368 = v367 * v340;
                    v346 = *(double *)(v165 + 208);
                    v347 = *(double *)(v165 + 216);
                    v348 = *(double *)(v165 + 224);
                    v369 = v341 - v348;
                    v370 = v530.f64[0] - v346;
                    v371 = v357 - v347;
                    *(float *)&v369 = v369;
                    v372 = (float32x2_t *)(v322 + ((v327 + 2) << 6));
                    v372->f32[0] = v370;
                    v372->f32[1] = v371;
                    v372[1].i32[0] = LODWORD(v369);
                    v350 = (float)*(unint64_t *)(v324 + 72);
                    *(float *)&v368 = v368;
                    v373 = vcvt_f32_f64(vmulq_n_f64(v533, v367));
                    v372[4] = v373;
                    v372[5].i32[0] = LODWORD(v368);
                    v372[5].f32[1] = v350;
                    v372[2].f32[0] = v362;
                    v372[2].f32[1] = v363;
                    v372[3].f32[0] = v364;
                    v372[6] = *(float32x2_t *)(v338 + 860);
                    v372[8].f32[0] = v370;
                    v372[8].f32[1] = v371;
                    v372[9].i32[0] = LODWORD(v369);
                    v372[12] = v373;
                    v372[13].i32[0] = LODWORD(v368);
                    v372[13].f32[1] = v350;
                    v372[10].f32[0] = v362;
                    v372[10].f32[1] = v363;
                    v372[11].f32[0] = v364;
                    v372[14] = *(float32x2_t *)(v339 + 862);
                    v327 += 4;
                  }
                  else
                  {
                    v346 = *(double *)(v165 + 208);
                    v347 = *(double *)(v165 + 216);
                    v348 = *(double *)(v165 + 224);
                    v349 = *(_QWORD *)v324;
                    v350 = (float)*(unint64_t *)(v324 + 72);
                  }
                  v374 = (_WORD *)(v323 + 2 * v326);
                  *v374 = v327 + v349;
                  v375 = v327 + v349 + 1;
                  v374[1] = v375;
                  v376 = v327 + v349 + 2;
                  v374[2] = v376;
                  v374[3] = v375;
                  v374[4] = v327 + v349 + 3;
                  v377 = v326 + 6;
                  v374[5] = v376;
                  v378 = *(double *)&v550;
                  v379 = fminf(v378, v336) * v337;
                  v380 = v330 - v346;
                  v381 = v345 - v347;
                  v382 = v8 - v348;
                  v383 = v322 + (v327 << 6);
                  *(float *)v383 = v380;
                  *(float *)(v383 + 4) = v381;
                  *(float *)(v383 + 8) = v382;
                  v384 = v379 * v7;
                  *(float *)(v383 + 32) = v384;
                  v385 = vcvt_f32_f64(vmulq_n_f64(v549, v379));
                  *(float32x2_t *)(v383 + 36) = v385;
                  *(float *)(v383 + 44) = v350;
                  v386 = v5;
                  v387 = v4;
                  v388 = v6;
                  *(float *)(v383 + 16) = v386;
                  *(float *)(v383 + 20) = v387;
                  *(float *)(v383 + 24) = v388;
                  *(_QWORD *)(v383 + 48) = *((_QWORD *)v338 + 430);
                  *(float *)(v383 + 64) = v380;
                  *(float *)(v383 + 68) = v381;
                  *(float *)(v383 + 72) = v382;
                  *(float *)(v383 + 96) = v384;
                  *(float32x2_t *)(v383 + 100) = v385;
                  *(float *)(v383 + 108) = v350;
                  *(float *)(v383 + 80) = v386;
                  *(float *)(v383 + 84) = v387;
                  *(float *)(v383 + 88) = v388;
                  *(_QWORD *)(v383 + 112) = *((_QWORD *)v339 + 431);
                  v389 = v327 + 2;
                  v495 = v345;
                  if ((v310 & 2) != 0)
                  {
                    v390 = v389 + v349;
                    *(_WORD *)(v323 + 2 * v377) = v390;
                    v374[7] = v390 + 1;
                    v374[8] = v390 + 2;
                    v374[9] = v390 + 1;
                    v374[10] = v390 + 3;
                    v377 = v326 + 12;
                    v374[11] = v390 + 2;
                    v391 = v8 - *(double *)(v165 + 224);
                    v392 = v322 + (v389 << 6);
                    v393 = vcvt_f32_f64(vsubq_f64(v543, *(float64x2_t *)(v165 + 208)));
                    *(float32x2_t *)v392 = v393;
                    *(float *)(v392 + 8) = v391;
                    *(float *)(v392 + 32) = v384;
                    *(float32x2_t *)(v392 + 36) = v385;
                    *(float *)(v392 + 44) = v350;
                    *(float *)(v392 + 16) = v386;
                    *(float *)(v392 + 20) = v387;
                    *(float *)(v392 + 24) = v388;
                    *(float32x2_t *)(v383 + 192) = v393;
                    *(float *)(v383 + 200) = v391;
                    *(float *)(v383 + 224) = v384;
                    *(float32x2_t *)(v383 + 228) = v385;
                    *(float *)(v383 + 236) = v350;
                    *(float *)(v383 + 208) = v386;
                    *(float *)(v383 + 212) = v387;
                    *(float *)(v383 + 216) = v388;
                    *(float32x2_t *)(v383 + 256) = v393;
                    *(float *)(v383 + 264) = v391;
                    *(float *)(v383 + 288) = v384;
                    *(float32x2_t *)(v383 + 292) = v385;
                    *(float *)(v383 + 300) = v350;
                    *(float *)(v383 + 272) = v386;
                    *(float *)(v383 + 276) = v387;
                    *(float *)(v383 + 280) = v388;
                    *(float32x2_t *)(v383 + 320) = v393;
                    *(float *)(v383 + 328) = v391;
                    *(float *)(v383 + 352) = v384;
                    *(float32x2_t *)(v383 + 356) = v385;
                    *(float *)(v383 + 364) = v350;
                    *(float *)(v383 + 336) = v386;
                    *(float *)(v383 + 340) = v387;
                    *(float *)(v383 + 344) = v388;
                    v389 = v327 + 6;
                    *(_QWORD *)(v392 + 48) = 0x3E99999ABF800000;
                    *(_QWORD *)(v383 + 240) = 0x3E99999A3F800000;
                    *(_QWORD *)(v383 + 304) = 0x3F800000BF800000;
                    __asm { FMOV            V3.2S, #1.0 }
                    *(_QWORD *)(v383 + 368) = _D3;
                  }
                  ++v328;
                  v326 = v377;
                  v327 = v389;
                  v11 = v331;
                  v9 = v332;
                  v10 = v330;
                  if (v494 == v328)
                    goto LABEL_385;
                  continue;
                }
              }
              v336 = 2.0;
              v337 = 0.5;
              v338 = &off_19FFB1000;
              v339 = &off_19FFB1000;
              goto LABEL_399;
            }
            break;
          }
          v491 = v527.f64[1];
          v492 = v527.f64[0];
          v489 = __p[1];
          v490 = __p[0];
          v487 = v529.f64[1];
          v488 = v529.f64[0];
          v332 = v530.f64[1];
          v331 = v530.f64[0];
          v342 = v531.f64[1];
          v341 = v531.f64[0];
          v344 = v532.f64[1];
          v343 = v532.f64[0];
          v485 = v533.f64[1];
          v486 = v533.f64[0];
          v515 = v535;
          v516 = v536;
          v514 = *(_OWORD *)&v534[8];
          v340 = *(double *)v534;
          v483 = v538;
          v484 = v537;
          v481 = v540;
          v482 = v539;
          v479 = v542;
          v480 = v541;
          v345 = v543.f64[1];
          v330 = v543.f64[0];
          v8 = v544;
          v5 = v545;
          v4 = v546;
          v6 = v547;
          v7 = v548;
          v477 = v549.f64[1];
          v478 = v549.f64[0];
          v512 = v551;
          v513 = v552;
          v511 = v550;
          LODWORD(v310) = v553;
          v475 = v555;
          v476 = v554;
          v473 = v557;
          v474 = v556;
          v469 = v560;
          v470 = v559;
          v468 = v561;
          v471 = v562;
          v472 = v558;
          v336 = 2.0;
          v337 = 0.5;
          v338 = &off_19FFB1000;
          v339 = &off_19FFB1000;
          goto LABEL_400;
        }
LABEL_405:
        v304 = v455;
        if (v464 && v457 != v458 && v455 && *(_BYTE *)(v459 + 17) != 2)
          (*(void (**)(karo::graphics::Viewport *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v455 + 64))(v455, v464, v459, v458, v457, 1, 1);
        if (v465 && v460 != v461 && v455 && *(_BYTE *)(v462 + 17) != 2)
          (*(void (**)(karo::graphics::Viewport *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v455 + 64))(v455, v465, v462, v461, v460, 1, 1);
        v309 = v463 + 1;
        v308 = v456;
      }
      v301 = v454 + 1;
    }
    while (v454 + 1 != v452);
    v303 = v453;
    v397 = *((_QWORD *)v453 + 2);
    v301 = *(uint64_t **)(v397 + 8);
    v398 = *(uint64_t **)(v397 + 16);
    if (v301 != v398)
    {
      v399 = v301;
      do
      {
        v400 = *v399++;
        *(_QWORD *)(v400 + 48) = *((_QWORD *)v453 + 7);
      }
      while (v399 != v398);
    }
  }
  *(_QWORD *)(*v301 + 64) = 1000;
  v401 = *((_QWORD *)v303 + 7);
  v402 = *(_QWORD *)(*(_QWORD *)(v401 + 64) + 16);
  v403 = *((double *)v451 + 10);
  v404 = *((double *)v451 + 11);
  v405 = *((double *)v451 + 12);
  v407 = *((double *)v451 + 8);
  v406 = *((double *)v451 + 9);
  v409 = *((double *)v451 + 6);
  v408 = *((double *)v451 + 7);
  v410 = -(v407 * v403 - v408 * v404) - (v407 * v403 - v408 * v404);
  v411 = -(v409 * v404 - v407 * v406) - (v409 * v404 - v407 * v406);
  v412 = -(v408 * v406 - v409 * v403) - (v408 * v406 - v409 * v403);
  v413 = -(v412 * v406 - (-(v408 - v410 * v404) - v411 * v405));
  v414 = -(v409 + v410 * v405 + v411 * v404 - v412 * v403);
  v415 = -(v407 + v410 * v403 + v412 * v405 - v411 * v406);
  v416 = v403 * -2.0;
  v417 = -(v403 * (v403 * -2.0));
  v418 = 1.0 - (v417 - v404 * (v404 * -2.0));
  v419 = v406 * -2.0;
  v420 = -(v403 * (v406 * -2.0));
  v421 = v404 * -2.0 * v405;
  v422 = v420 - v421;
  v423 = -(v404 * (v406 * -2.0));
  v424 = v405 * v416 - v404 * (v406 * -2.0);
  v425 = v421 + v420;
  v426 = v406 * -2.0 * v406 + 1.0;
  v427 = v426 - -(v404 * (v404 * -2.0));
  v428 = -(v404 * v416);
  *(double *)&v514 = v418;
  *((double *)&v514 + 1) = v425;
  *(double *)&v516 = v422;
  *((double *)&v516 + 1) = v427;
  v519 = v424;
  v520 = v428 - v405 * v419;
  *(double *)&v515 = v423 - v405 * v416;
  v517 = v405 * v419 + v428;
  v521 = v426 - v417;
  *((_QWORD *)&v515 + 1) = 0;
  v518 = 0;
  v522 = 0;
  v523 = v414;
  v524 = v413;
  v525 = v415;
  v526 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v527.f64, (double *)&v514, (double *)(*((_QWORD *)v303 + 2) + 112));
  v514 = 0uLL;
  v429 = *(_QWORD *)(v402 + 8);
  *(_QWORD *)&v430 = 0;
  *((_QWORD *)&v430 + 1) = v402;
  if (v429)
    v431 = *(_QWORD *)(v402 + 72);
  else
    v431 = 0;
  *(_OWORD *)v506 = v430;
  v514 = v430;
  *(_QWORD *)&v515 = 0;
  *((_QWORD *)&v515 + 1) = v429;
  *((_QWORD *)&v516 + 1) = v431;
  LOWORD(v516) = 1;
  *(float32x4_t *)v431 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v527), *(float64x2_t *)__p);
  *(float32x4_t *)(v431 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v529), v530);
  *(float32x4_t *)(v431 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v531), v532);
  *(float32x4_t *)(v431 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v533), *(float64x2_t *)v534);
  v432 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v303 + 40) + 40), "currentDisplayStep");
  *(float *)(v431 + 64) = v449 * (float)(v448 + v448);
  *(float *)(v431 + 68) = (float)v432;
  *(_DWORD *)(v431 + 72) = 1050253722;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v431 + 80) = _Q0;
  *(_OWORD *)(v431 + 96) = xmmword_19FFB3520;
  *(_OWORD *)(v431 + 112) = xmmword_19FFB3530;
  *(_OWORD *)(v431 + 128) = xmmword_19FFB3520;
  v434 = *(_QWORD *)(*(_QWORD *)(v401 + 64) + 32);
  v435 = *(_QWORD *)(v434 + 8);
  **(_DWORD **)(v434 + 72) = *((_DWORD *)v303 + 13);
  if (*(_QWORD *)(v434 + 64) > v435)
    v435 = *(_QWORD *)(v434 + 64);
  *(_QWORD *)(v434 + 56) = 0;
  *(_QWORD *)(v434 + 64) = v435;
  if (v429)
  {
    if (v506[0] && *((_BYTE *)v506[1] + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v506[0] + 64))();
    v436 = *((_QWORD *)v506[1] + 8);
    if (v436 <= v429)
      v436 = v429;
    *((_QWORD *)v506[1] + 7) = 0;
    *((_QWORD *)v506[1] + 8) = v436;
  }
  operator delete(v450);
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v507);
}

