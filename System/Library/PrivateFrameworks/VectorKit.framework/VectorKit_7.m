void sub_19F29A39C(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x4A0]);
  _Unwind_Resume(a1);
}

void gdc::Timer::cancel(gdc::Timer *this)
{
  std::mutex *v2;
  NSObject *v3;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = *((_QWORD *)this + 10);
  if (v3 && *((_BYTE *)this + 96))
  {
    dispatch_source_set_timer(v3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
}

BOOL gm::Box<float,2>::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t md::CompositeLabeler::startFrameLayout(uint64_t this, const md::LayoutContext *a2, float a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16);
        v3 != i;
        this = (*(uint64_t (**)(uint64_t, const md::LayoutContext *, float))(*(_QWORD *)v7 + 24))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return this;
}

uint64_t md::MapNavLabeler::startFrameLayout(uint64_t this, const md::LayoutContext *a2, float a3)
{
  *(float *)(this + 684) = a3;
  *(_WORD *)(this + 824) = 0;
  return this;
}

uint64_t md::CompositeLabeler::layoutForDisplay(uint64_t this, const md::LayoutContext *a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v5 + 56))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabeler::endFrameLayout(uint64_t this, BOOL *a2, BOOL *a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16);
        v3 != i;
        this = (*(uint64_t (**)(uint64_t, BOOL *, BOOL *))(*(_QWORD *)v7 + 72))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return this;
}

uint64_t md::StandardLabeler::layoutForDisplay(md::StandardLabeler *this, const md::LayoutContext *a2, __n128 a3)
{
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  md::Label **v8;
  md::Label **v9;
  md::Label *v10;
  uint64_t (***v11)(_QWORD, char *);
  __int16 v13;
  char v14;

  v13 = 257;
  v14 = 1;
  v5 = (uint64_t *)*((_QWORD *)this + 13);
  v6 = (uint64_t *)*((_QWORD *)this + 14);
  v4 = (char *)this + 104;
  while (v5 != v6)
  {
    v7 = *v5;
    v5 += 2;
    md::Label::layoutForDisplay(v7, *((_QWORD *)this + 3), (uint64_t)&v13);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 3382))
  {
    v8 = (md::Label **)*((_QWORD *)this + 13);
    v9 = (md::Label **)*((_QWORD *)this + 14);
    while (v8 != v9)
    {
      v10 = *v8;
      v8 += 2;
      a3.n128_u32[0] = 1148846080;
      md::Label::animate(v10, a3);
    }
  }
  (*(void (**)(md::StandardLabeler *, const md::LayoutContext *))(*(_QWORD *)this + 320))(this, a2);
  v11 = *(uint64_t (****)(_QWORD, char *))(*(_QWORD *)(*((_QWORD *)this + 3) + 168) + 72);
  return (**v11)(v11, v4);
}

void md::StandardLabeler::endFrameLayout(md::StandardLabeler *this, BOOL *a2, BOOL *a3)
{
  if (*((_QWORD *)this + 30))
    md::StandardLabeler::monitorSelectedLabelState(this, 0);
  *a2 |= *((_BYTE *)this + 370);
  *a3 |= *((_BYTE *)this + 371);
}

uint64_t md::MapNavLabeler::endFrameLayout(uint64_t this, BOOL *a2, BOOL *a3)
{
  *a2 |= *(_BYTE *)(this + 824);
  *a3 |= *(_BYTE *)(this + 825);
  return this;
}

void md::FontTrackingCache::updateForDisplay(md::FontTrackingCache *this)
{
  unint64_t v1;
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t i;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;

  if (*((_BYTE *)this + 124))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 4);
    if (v3)
    {
      v4 = (_QWORD *)((char *)this + 64);
      v49 = (uint64_t *)((char *)this + 88);
      v50 = (char *)this + 64;
      while (1)
      {
        v5 = *((char *)v3 + 39);
        if (v5 >= 0)
          v6 = v3 + 2;
        else
          v6 = (uint64_t *)v3[2];
        if (v5 >= 0)
          v7 = *((unsigned __int8 *)v3 + 39);
        else
          v7 = v3[3];
        v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v6, v7);
        v9 = v8;
        v10 = *((_QWORD *)this + 9);
        if (v10)
        {
          v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
          v11.i16[0] = vaddlv_u8(v11);
          if (v11.u32[0] > 1uLL)
          {
            v1 = v8;
            if (v8 >= v10)
              v1 = v8 % v10;
          }
          else
          {
            v1 = (v10 - 1) & v8;
          }
          v12 = *(uint64_t ***)(*v4 + 8 * v1);
          if (v12)
          {
            v13 = *v12;
            if (*v12)
            {
              if (v11.u32[0] < 2uLL)
              {
                while (1)
                {
                  v19 = v13[1];
                  if (v19 == v9)
                  {
                    v20 = *((unsigned __int8 *)v13 + 39);
                    if ((v20 & 0x80u) == 0)
                      v21 = *((unsigned __int8 *)v13 + 39);
                    else
                      v21 = v13[3];
                    if (v21 == v7)
                    {
                      v22 = (const void **)(v13 + 2);
                      if ((v20 & 0x80) != 0)
                      {
                        if (!memcmp(*v22, v6, v13[3]))
                          goto LABEL_7;
                      }
                      else
                      {
                        if (!*((_BYTE *)v13 + 39))
                          goto LABEL_7;
                        v23 = v6;
                        while (*(unsigned __int8 *)v22 == *(unsigned __int8 *)v23)
                        {
                          v22 = (const void **)((char *)v22 + 1);
                          v23 = (uint64_t *)((char *)v23 + 1);
                          if (!--v20)
                            goto LABEL_7;
                        }
                      }
                    }
                  }
                  else if ((v19 & (v10 - 1)) != v1)
                  {
                    goto LABEL_55;
                  }
                  v13 = (uint64_t *)*v13;
                  if (!v13)
                    goto LABEL_55;
                }
              }
              do
              {
                v14 = v13[1];
                if (v14 == v9)
                {
                  v15 = *((unsigned __int8 *)v13 + 39);
                  if ((v15 & 0x80u) == 0)
                    v16 = *((unsigned __int8 *)v13 + 39);
                  else
                    v16 = v13[3];
                  if (v16 == v7)
                  {
                    v17 = (const void **)(v13 + 2);
                    if ((v15 & 0x80) != 0)
                    {
                      if (!memcmp(*v17, v6, v13[3]))
                        goto LABEL_7;
                    }
                    else
                    {
                      if (!*((_BYTE *)v13 + 39))
                        goto LABEL_7;
                      v18 = v6;
                      while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v18)
                      {
                        v17 = (const void **)((char *)v17 + 1);
                        v18 = (uint64_t *)((char *)v18 + 1);
                        if (!--v15)
                          goto LABEL_7;
                      }
                    }
                  }
                }
                else
                {
                  if (v14 >= v10)
                    v14 %= v10;
                  if (v14 != v1)
                    break;
                }
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
LABEL_55:
            v4 = v50;
          }
        }
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), 176, 8);
        v25 = v24;
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = v9;
        if (*((char *)v3 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v24 + 16), (const std::string::value_type *)v3[2], v3[3]);
        }
        else
        {
          v26 = *((_OWORD *)v3 + 1);
          *(_QWORD *)(v24 + 32) = v3[4];
          *(_OWORD *)(v24 + 16) = v26;
        }
        *(_OWORD *)(v25 + 40) = *(_OWORD *)(v3 + 5);
        v27 = *(_OWORD *)(v3 + 7);
        v28 = *(_OWORD *)(v3 + 9);
        v29 = *(_OWORD *)(v3 + 11);
        *(_OWORD *)(v25 + 104) = *(_OWORD *)(v3 + 13);
        *(_OWORD *)(v25 + 88) = v29;
        *(_OWORD *)(v25 + 72) = v28;
        *(_OWORD *)(v25 + 56) = v27;
        v30 = *(_OWORD *)(v3 + 15);
        v31 = *(_OWORD *)(v3 + 17);
        v32 = *(_OWORD *)(v3 + 19);
        *(_QWORD *)(v25 + 168) = v3[21];
        *(_OWORD *)(v25 + 152) = v32;
        *(_OWORD *)(v25 + 136) = v31;
        *(_OWORD *)(v25 + 120) = v30;
        v33 = (float)(unint64_t)(*((_QWORD *)this + 13) + 1);
        v34 = *((float *)this + 28);
        if (!v10 || (float)(v34 * (float)v10) < v33)
        {
          v35 = v10 < 3 || (v10 & (v10 - 1)) != 0;
          v36 = v35 | (2 * v10);
          v37 = vcvtps_u32_f32(v33 / v34);
          if (v36 <= v37)
            prime = v37;
          else
            prime = v36;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v39 = *(int8x8_t *)((char *)this + 72);
          if (prime > *(_QWORD *)&v39)
            goto LABEL_72;
          if (prime < *(_QWORD *)&v39)
          {
            v40 = vcvtps_u32_f32((float)*((unint64_t *)this + 13) / *((float *)this + 28));
            if (*(_QWORD *)&v39 < 3uLL
              || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
            {
              v40 = std::__next_prime(v40);
            }
            else
            {
              v42 = 1 << -(char)__clz(v40 - 1);
              if (v40 >= 2)
                v40 = v42;
            }
            if (prime <= v40)
              prime = v40;
            if (prime < *(_QWORD *)&v39)
LABEL_72:
              std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)v4, prime);
          }
          v10 = *((_QWORD *)this + 9);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v9 >= v10)
              v1 = v9 % v10;
            else
              v1 = v9;
          }
          else
          {
            v1 = (v10 - 1) & v9;
          }
        }
        v43 = *(uint64_t **)(*v4 + 8 * v1);
        if (v43)
          break;
        *(_QWORD *)v25 = *v49;
        *v49 = v25;
        *(_QWORD *)(*v4 + 8 * v1) = v49;
        if (*(_QWORD *)v25)
        {
          v44 = *(_QWORD *)(*(_QWORD *)v25 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v44 >= v10)
              v44 %= v10;
          }
          else
          {
            v44 &= v10 - 1;
          }
          v43 = (uint64_t *)(*v4 + 8 * v44);
          goto LABEL_5;
        }
LABEL_6:
        ++*((_QWORD *)this + 13);
LABEL_7:
        v3 = (uint64_t *)*v3;
        v4 = v50;
        if (!v3)
          goto LABEL_95;
      }
      *(_QWORD *)v25 = *v43;
LABEL_5:
      *v43 = v25;
      goto LABEL_6;
    }
LABEL_95:
    if (*((_QWORD *)this + 6))
    {
      v45 = (uint64_t *)*((_QWORD *)this + 4);
      if (v45)
      {
        do
        {
          v48 = (uint64_t *)*v45;
          if (*((char *)v45 + 39) < 0)
            operator delete((void *)v45[2]);
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v45, 176);
          v45 = v48;
        }
        while (v48);
      }
      *((_QWORD *)this + 4) = 0;
      v46 = *((_QWORD *)this + 2);
      if (v46)
      {
        for (i = 0; i != v46; ++i)
          *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i) = 0;
      }
      *((_QWORD *)this + 6) = 0;
    }
    *((_BYTE *)this + 124) = 0;
  }
}

void sub_19F29ACE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 96) + 40))(*(_QWORD *)(v1 + 96), v2, 176);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::StandardLabeler::screenSizeDidChange(uint64_t this)
{
  *(_BYTE *)(this + 360) = 1;
  return this;
}

uint64_t md::LabelManager::tryWaitForBkgdUpdateComplete(md::LabelManager *this, unsigned int a2)
{
  int64_t v3;
  NSObject *v4;
  dispatch_time_t v5;
  intptr_t v6;
  uint64_t result;

  if (!*((_BYTE *)this + 3385))
    return 1;
  v3 = 1000000 * a2;
  v4 = *((id *)this + 27);
  v5 = dispatch_time(0, v3);
  v6 = dispatch_semaphore_wait(v4, v5);

  if (v6)
    return 0;
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 27));
  result = 1;
  if (*((_BYTE *)this + 3385))
  {
    ++*((_BYTE *)this + 3305);
    *((_WORD *)this + 1692) = 1;
  }
  return result;
}

unint64_t *ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F29B194(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19GlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6D28;
}

_QWORD *md::SkyRenderLayer::layout(md::SkyRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double *v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int64x2_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float64_t v111;
  id v112;
  double v113;
  float v114;
  float v115;
  void *v116;
  float v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  float32x4_t *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *result;
  uint64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  double *v154;
  float32x4_t v155;
  int v156;
  float32x4_t v157;
  uint64_t v158[5];
  float32x4_t *v159;
  float64x2_t v160[2];
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  double v175;
  double v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int16 v182;
  _QWORD *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _QWORD v186[3];
  _QWORD *v187;
  _QWORD v188[3];
  _QWORD *v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v186[0] = &off_1E42CC140;
  v186[1] = a2;
  v187 = v186;
  v184[0] = &off_1E42CC188;
  v184[1] = a2;
  v185 = v184;
  v189 = v188;
  v188[0] = &off_1E42CC188;
  v188[1] = a2;
  std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v186);
  v4 = v185;
  if (v185 == v184)
  {
    v5 = 4;
    v4 = v184;
  }
  else
  {
    if (!v185)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v187;
  if (v187 == v186)
  {
    v7 = 4;
    v6 = v186;
    goto LABEL_10;
  }
  if (v187)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (uint64_t *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_160;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x7C7EC6C7C111B0D0;
    if (*(_QWORD *)&v9 <= 0x7C7EC6C7C111B0D0uLL)
      v11 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x7C7EC6C7C111B0D0;
  }
  v12 = *v8;
  v13 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v13)
    goto LABEL_160;
  v14 = (_QWORD *)*v13;
  if (!*v13)
    goto LABEL_160;
  v15 = *(_QWORD *)&v9 - 1;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x7C7EC6C7C111B0D0)
      {
        if (v14[2] == 0x7C7EC6C7C111B0D0)
          goto LABEL_32;
      }
      else if ((v16 & v15) != v11)
      {
        goto LABEL_160;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_160;
    }
  }
  while (1)
  {
    v17 = v14[1];
    if (v17 == 0x7C7EC6C7C111B0D0)
      break;
    if (v17 >= *(_QWORD *)&v9)
      v17 %= *(_QWORD *)&v9;
    if (v17 != v11)
      goto LABEL_160;
LABEL_26:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_160;
  }
  if (v14[2] != 0x7C7EC6C7C111B0D0)
    goto LABEL_26;
LABEL_32:
  v18 = v14[5];
  if (*(_QWORD *)(v18 + 8) != 0x7C7EC6C7C111B0D0)
    goto LABEL_160;
  v19 = *(_QWORD *)(v18 + 32);
  if (!v19)
    goto LABEL_160;
  if (v10.u32[0] > 1uLL)
  {
    v20 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v9 <= 0x3070CB6B3C7F21D3uLL)
      v20 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v9;
  }
  else
  {
    v20 = v15 & 0x3070CB6B3C7F21D3;
  }
  v21 = *(_QWORD **)(v12 + 8 * v20);
  if (!v21)
    goto LABEL_160;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_160;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v22[1];
      if (v23 == 0x3070CB6B3C7F21D3)
      {
        if (v22[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_54;
      }
      else if ((v23 & v15) != v20)
      {
        goto LABEL_160;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_160;
    }
  }
  while (2)
  {
    v24 = v22[1];
    if (v24 != 0x3070CB6B3C7F21D3)
    {
      if (v24 >= *(_QWORD *)&v9)
        v24 %= *(_QWORD *)&v9;
      if (v24 != v20)
        goto LABEL_160;
      goto LABEL_48;
    }
    if (v22[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_48:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_160;
      continue;
    }
    break;
  }
LABEL_54:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) != 0x3070CB6B3C7F21D3)
    goto LABEL_160;
  v26 = *(_QWORD *)(v25 + 32);
  if (!v26)
    goto LABEL_160;
  if (v10.u32[0] > 1uLL)
  {
    v27 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v27 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v27 = v15 & 0x1AF456233693CD46;
  }
  v28 = *(_QWORD **)(v12 + 8 * v27);
  if (!v28)
    goto LABEL_78;
  v29 = (_QWORD *)*v28;
  if (!v29)
    goto LABEL_78;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v29[1];
      if (v30 == 0x1AF456233693CD46)
      {
        if (v29[2] == 0x1AF456233693CD46)
          goto LABEL_76;
      }
      else if ((v30 & v15) != v27)
      {
        goto LABEL_78;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_78;
    }
  }
  while (2)
  {
    v31 = v29[1];
    if (v31 != 0x1AF456233693CD46)
    {
      if (v31 >= *(_QWORD *)&v9)
        v31 %= *(_QWORD *)&v9;
      if (v31 != v27)
        goto LABEL_78;
      goto LABEL_70;
    }
    if (v29[2] != 0x1AF456233693CD46)
    {
LABEL_70:
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_78;
      continue;
    }
    break;
  }
LABEL_76:
  v32 = v29[5];
  if (*(_QWORD *)(v32 + 8) == 0x1AF456233693CD46)
  {
    v33 = *(double **)(v32 + 32);
    goto LABEL_79;
  }
LABEL_78:
  v33 = 0;
LABEL_79:
  v34 = v33[380];
  v35 = *((_QWORD *)this + 6);
  *(float *)v35 = v34;
  v36 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v37 = md::PassList::commandBufferForId(v36, *((_BYTE *)this + 56), *((_BYTE *)this + 57));
  v38 = md::PassList::commandBufferForId(v36, *((_BYTE *)this + 58), *((_BYTE *)this + 59));
  v39 = *(unsigned __int8 *)(v19 + 32);
  if (v34 < 1.0)
  {
    if (!*(_QWORD *)(v35 + 8))
    {
      v156 = *(unsigned __int8 *)(v19 + 32);
      v154 = v33;
      v40 = operator new(0xE8uLL);
      v40[1] = 0;
      v40[2] = 0;
      *v40 = &off_1E42E2128;
      v41 = v40 + 3;
      v42 = v40;
      ggl::BufferData::BufferData((uint64_t)(v40 + 3), qword_1EE55E990, 2, 1, 6, 1);
      v42[28] = ggl::Sky::Style::reflection(void)::reflection;
      v42[3] = &off_1E42B96D0;
      v43 = *((_QWORD *)this + 6);
      v44 = *(std::__shared_weak_count **)(v43 + 16);
      *(_QWORD *)(v43 + 8) = v41;
      *(_QWORD *)(v43 + 16) = v42;
      if (v44)
      {
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          v47 = v44;
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v48 = *((_QWORD *)this + 6);
      v49 = operator new(0x100uLL);
      v50 = (uint64_t *)(v48 + 8);
      v49[1] = 0;
      v49[2] = 0;
      *v49 = &off_1E42E4188;
      v51 = v49 + 3;
      v52 = *(_QWORD *)(v48 + 40);
      v53 = *(std::__shared_weak_count **)(v48 + 48);
      v54 = v49;
      ggl::Sky::SkyPipelineSetup::SkyPipelineSetup(v49 + 3, v52, v53, v50);
      v55 = *((_QWORD *)this + 6);
      v56 = *(std::__shared_weak_count **)(v55 + 32);
      *(_QWORD *)(v55 + 24) = v51;
      *(_QWORD *)(v55 + 32) = v54;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          v59 = v56;
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v60 = operator new(0xA8uLL);
      v60[1] = 0;
      v60[2] = 0;
      *v60 = &off_1E42DE5A8;
      v61 = v60 + 3;
      v62 = v60;
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh((ggl::CommonMesh::Pos2Mesh *)(v60 + 3), "/SkyMesh");
      v63 = *((_QWORD *)this + 6);
      v64 = *(std::__shared_weak_count **)(v63 + 64);
      *(_QWORD *)(v63 + 56) = v61;
      *(_QWORD *)(v63 + 64) = v62;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          v67 = v64;
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      ggl::BufferData::resize(**(ggl::BufferData ***)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 64), 4);
      v68 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 64);
      v161.f64[1] = 0.0;
      v160[0] = 0uLL;
      v69 = 4 * *(_QWORD *)(v68 + 8);
      v167 = 0.0;
      v168 = v68;
      *(_QWORD *)&v169 = v69;
      WORD4(v169) = 1;
      if (v69)
        v70 = *(_QWORD *)(v68 + 72);
      else
        v70 = 0;
      *(_QWORD *)&v170 = v70;
      ggl::BufferMemory::operator=((uint64_t *)v160, (uint64_t)&v167);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v167);
      v71 = v161.f64[1];
      **(_OWORD **)&v161.f64[1] = xmmword_19FFB3580;
      *(_OWORD *)(*(_QWORD *)&v71 + 16) = xmmword_19FFB3950;
      v72 = operator new(0xF8uLL);
      v72[1] = 0;
      v72[2] = 0;
      *v72 = &off_1E42DF1E8;
      v73 = v72 + 3;
      v74 = v72;
      ggl::BufferData::BufferData((uint64_t)(v72 + 3), 2, 1, 0, 6, 6);
      *((_DWORD *)v74 + 60) = 0;
      v74[3] = &off_1E42B6B88;
      v74[4] = 2;
      v74[28] = &unk_1E42B6BA8;
      v74[29] = "/SkyIndexData";
      v75 = *((_QWORD *)this + 6);
      v76 = *(std::__shared_weak_count **)(v75 + 80);
      *(_QWORD *)(v75 + 72) = v73;
      *(_QWORD *)(v75 + 80) = v74;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          v79 = v76;
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v80 = *(_QWORD *)(*((_QWORD *)this + 6) + 72);
      v183 = 0;
      v178 = 0;
      v179 = 0;
      v81 = 6 * *(_QWORD *)(v80 + 8);
      v167 = 0.0;
      v168 = v80;
      *(_QWORD *)&v169 = v81;
      WORD4(v169) = 1;
      if (v81)
        v82 = *(_QWORD *)(v80 + 72);
      else
        v82 = 0;
      *(_QWORD *)&v170 = v82;
      ggl::BufferMemory::operator=(&v178, (uint64_t)&v167);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v167);
      v83 = v183;
      *v183 = 0x2000200010000;
      *((_DWORD *)v83 + 2) = 3;
      v84 = (_QWORD *)*((_QWORD *)this + 6);
      v85 = v84[7];
      v86 = v84[9];
      v87 = (std::__shared_weak_count *)v84[10];
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        do
          v90 = __ldxr(v88);
        while (__stxr(v90 + 1, v88));
      }
      v91 = *(std::__shared_weak_count **)(v85 + 104);
      *(_QWORD *)(v85 + 96) = v86;
      *(_QWORD *)(v85 + 104) = v87;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          v94 = v87;
          v95 = v91;
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v95);
          v87 = v94;
        }
      }
      if (v87)
      {
        v96 = (unint64_t *)&v87->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v98 = operator new(0xF0uLL);
      v98[1] = 0;
      v98[2] = 0;
      *v98 = &off_1E42DEA08;
      v98[5] = 0;
      v98[6] = 0;
      v98[4] = 0;
      *((_DWORD *)v98 + 14) = 0;
      v98[3] = &off_1E42B5DE8;
      *(_QWORD *)((char *)v98 + 60) = 65537;
      *((_DWORD *)v98 + 17) = 0;
      v98[9] = 1;
      *((_WORD *)v98 + 40) = 0;
      *((_BYTE *)v98 + 82) = 3;
      *(_QWORD *)((char *)v98 + 91) = 0;
      *(_QWORD *)((char *)v98 + 83) = 0;
      *((_BYTE *)v98 + 99) = 0;
      *(_QWORD *)((char *)v98 + 156) = 0;
      *(_QWORD *)((char *)v98 + 148) = 0;
      *((_WORD *)v98 + 106) = 257;
      v98[27] = 0;
      v98[28] = 0;
      *((_BYTE *)v98 + 232) = 0;
      v99 = *((_QWORD *)this + 6);
      v100 = *(std::__shared_weak_count **)(v99 + 96);
      *(_QWORD *)(v99 + 88) = v98 + 3;
      *(_QWORD *)(v99 + 96) = v98;
      if (v100)
      {
        v101 = (unint64_t *)&v100->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 6) + 88) + 58) = 3;
      v103 = (int64x2_t *)operator new();
      v104 = (_QWORD *)*((_QWORD *)this + 6);
      v105 = v104[11];
      v106 = v104[3];
      v107 = v104[7];
      v103->i64[0] = (uint64_t)&off_1E42B59B0;
      v103[1].i64[0] = (uint64_t)"";
      v103[1].i64[1] = v105;
      v103[2].i64[0] = v106;
      v103[2].i32[2] = 0;
      v103[3].i64[0] = 0;
      v103[3].i32[2] = 1065353216;
      v103[4].i64[0] = v107;
      v103[4].i64[1] = 0;
      v103[5].i64[0] = 0;
      v103[5].i64[1] = 0;
      v103[6] = vdupq_n_s64(1uLL);
      v103[7].i64[0] = 0;
      v104[13] = v103;
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v178);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v160);
      v35 = *((_QWORD *)this + 6);
      v33 = v154;
      v39 = v156;
    }
    ggl::CommandBuffer::pushRenderItem(v37, *(ggl::RenderItem **)(v35 + 104));
    v108 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
    v161.f64[1] = 0.0;
    v160[0] = 0uLL;
    v109 = *(_QWORD *)(v108 + 8);
    v167 = 0.0;
    v168 = v108;
    *(_QWORD *)&v169 = v109;
    WORD4(v169) = 1;
    if (v109)
      v110 = *(_QWORD *)(v108 + 72);
    else
      v110 = 0;
    *(_QWORD *)&v170 = v110;
    ggl::BufferMemory::operator=((uint64_t *)v160, (uint64_t)&v167);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v167);
    v111 = v161.f64[1];
    *(_DWORD *)(*(_QWORD *)&v161.f64[1] + 32) = *(_DWORD *)v19;
    *(_DWORD *)(*(_QWORD *)&v111 + 36) = *(_DWORD *)(v19 + 4);
    *(_DWORD *)(*(_QWORD *)&v111 + 40) = *(_DWORD *)(v19 + 8);
    *(_DWORD *)(*(_QWORD *)&v111 + 44) = *(_DWORD *)(v19 + 12);
    *(_DWORD *)(*(_QWORD *)&v111 + 16) = *(_DWORD *)(v19 + 16);
    *(_DWORD *)(*(_QWORD *)&v111 + 20) = *(_DWORD *)(v19 + 20);
    *(_DWORD *)(*(_QWORD *)&v111 + 24) = *(_DWORD *)(v19 + 24);
    *(_DWORD *)(*(_QWORD *)&v111 + 28) = *(_DWORD *)(v19 + 28);
    v112 = *(id *)a2;
    objc_msgSend(v112, "sizeInPixels");
    v114 = v113;
    *(float *)(*(_QWORD *)&v161.f64[1] + 48) = v114;

    v115 = **((float **)this + 6);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "skyOffsetAdjustment");
    **(float **)&v161.f64[1] = v115 - v117;

    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v160);
  }
  if (v39)
  {
    if (!*(_QWORD *)(*((_QWORD *)this + 6) + 112))
    {
      v125 = operator new(0xE8uLL);
      v125[1] = 0;
      v125[2] = 0;
      *v125 = &off_1E42E2278;
      v126 = ggl::BufferData::BufferData((uint64_t)(v125 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v125[28] = ggl::Tile::View::reflection(void)::reflection;
      v125[3] = &off_1E42B97B0;
      v127 = *((_QWORD *)this + 6);
      v128 = *(std::__shared_weak_count **)(v127 + 120);
      *(_QWORD *)(v127 + 112) = v126;
      *(_QWORD *)(v127 + 120) = v125;
      if (v128)
      {
        v129 = (unint64_t *)&v128->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          v131 = v128;
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
    }
    v118 = v33[366];
    v119 = v33[367];
    v120 = v33[368];
    v121 = v33[369];
    v170 = 0u;
    v172 = 0;
    v168 = 0u;
    v169 = 0u;
    v171 = 0u;
    v174 = 0;
    v167 = v120 - v118;
    *(double *)&v170 = v121 - v119;
    v173 = v120 - v118;
    v175 = v118;
    v176 = v119;
    v177 = xmmword_19FFB33A0;
    gm::operator*<double,4,4,4>(v160[0].f64, v33 + 101, &v167);
    md::FogInfo::updateFogUniformsWithLayoutContext((uint64_t *)(*((_QWORD *)this + 6) + 160), (uint64_t)a2, &v167);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 208) + 24) = *(_QWORD *)(*((_QWORD *)this + 6) + 200);
    v157 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v160[0]), v160[1]);
    v155 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v162);
    v153 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v163), v164);
    v152 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v165), v166);
    v122 = *(_QWORD *)(*((_QWORD *)this + 6) + 112);
    v159 = 0;
    v158[0] = 0;
    v158[1] = 0;
    v123 = *(_QWORD *)(v122 + 8);
    v178 = 0;
    v179 = v122;
    v180 = 0;
    v181 = v123;
    v182 = 1;
    if (v123)
      v124 = *(_QWORD **)(v122 + 72);
    else
      v124 = 0;
    v183 = v124;
    ggl::BufferMemory::operator=(v158, (uint64_t)&v178);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v178);
    v132 = v159;
    *v159 = v157;
    v132[1] = v155;
    v132[2] = v153;
    v132[3] = v152;
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v158);
    ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 192) + 64), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 192) + 160), *(_QWORD *)(*((_QWORD *)this + 6) + 112), *(_QWORD *)(*((_QWORD *)this + 6) + 120));
    v133 = (_QWORD *)*((_QWORD *)this + 6);
    v134 = v133[24];
    v135 = v133[20];
    v136 = (std::__shared_weak_count *)v133[21];
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
      ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(_QWORD **)(v134 + 64), *(_QWORD **)(v134 + 160), v135, (uint64_t)v136);
      do
        v139 = __ldaxr(v137);
      while (__stlxr(v139 - 1, v137));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    else
    {
      ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(_QWORD **)(v134 + 64), *(_QWORD **)(v134 + 160), v135, 0);
    }
    v140 = v26 + 144;
    v141 = 144;
    if (*(unsigned __int8 *)(v26 + 320) - 1 >= 3)
    {
      v141 = 128;
      v140 = v26 + 128;
    }
    v142 = *((_QWORD *)this + 6);
    v143 = *(_QWORD *)(v26 + v141);
    v144 = *(_QWORD *)(v140 + 8);
    if (v144)
    {
      v145 = (unint64_t *)(v144 + 8);
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
    }
    v147 = *(std::__shared_weak_count **)(v142 + 184);
    *(_QWORD *)(v142 + 176) = v143;
    *(_QWORD *)(v142 + 184) = v144;
    if (v147)
    {
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 208) + 64) = *(_QWORD *)(*((_QWORD *)this + 6) + 176);
    ggl::CommandBuffer::pushRenderItem(v38, *(ggl::RenderItem **)(*((_QWORD *)this + 6) + 208));
  }
LABEL_160:
  if (!v189)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v189 + 48))(v189);
  result = v189;
  if (v189 == v188)
  {
    v151 = 4;
    result = v188;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v151))();
  }
  else if (v189)
  {
    v151 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v151))();
  }
  return result;
}

void sub_19F29C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v15 - 256));
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v15 - 144));
  _Unwind_Resume(a1);
}

void sub_19F29C094(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F29C0A0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(v2 - 120);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 144);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v2 - 184);
  if (v6 == (_QWORD *)(v2 - 208))
  {
    v7 = 4;
    v6 = (_QWORD *)(v2 - 208);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(v2 - 152);
  if (v8 == (_QWORD *)(v2 - 176))
  {
    v9 = 4;
    v8 = (_QWORD *)(v2 - 176);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 4)
  {
    if (a2)
    {
      v11 = 16 * a2;
      v12 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *v4 = 0;
          v4[1] = 0;
        }
        v4 += 2;
        v11 -= 16;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
    v7 = v6 + a2;
    if ((v6 + a2) >> 60)
      abort();
    v8 = v5 - *(_QWORD *)a1;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v9, 8);
    else
      v10 = 0;
    v13 = (_QWORD *)(v10 + 16 * v6);
    v14 = 16 * a2;
    v15 = &v13[2 * a2];
    v16 = v13;
    do
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
      }
      v16 += 2;
      v14 -= 16;
    }
    while (v14);
    v17 = v10 + 16 * v9;
    v18 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    if (v19 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v15;
      v22 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17;
    }
    else
    {
      do
      {
        v20 = *((_OWORD *)v19 - 1);
        v19 -= 2;
        *((_OWORD *)v13 - 1) = v20;
        v13 -= 2;
        *v19 = 0;
        v19[1] = 0;
      }
      while (v19 != v18);
      v19 = *(_QWORD **)a1;
      v21 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v15;
      v22 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17;
      while (v21 != v19)
      {
        v23 = (std::__shared_weak_count *)*(v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 2;
      }
    }
    if (v19)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v19, v22 - (_QWORD)v19);
  }
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay20MaskingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6398;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14MaskingOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6350;
}

uint64_t std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::MaskingOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2248;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::MaskingOverlayRenderable::SharedResources::SharedResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::MaskingOverlay::MaskingPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2200;
  a2[1] = v2;
  return result;
}

md::DaVinciGroundRenderResources *md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(md::DaVinciGroundRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  VKSharedResources *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  unsigned __int8 v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  __int128 v151;
  _QWORD *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unsigned __int8 v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  __int128 v193;
  _QWORD *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  __int128 v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  __int128 v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 v226;
  _QWORD *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  __int128 v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  _QWORD *v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  __int128 v250;
  _QWORD *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unsigned __int8 v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  _QWORD *v269;
  __int128 v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  __int128 v274;
  _QWORD *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unsigned __int8 v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  uint64_t *v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  __int128 v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  __int128 v308;
  _QWORD *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  unsigned __int8 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _OWORD *v377;
  __int128 *v378;
  uint64_t v379;
  __int128 v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _OWORD *v395;
  __int128 *v396;
  uint64_t v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  uint64_t *v407;
  unsigned __int8 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _OWORD *v424;
  __int128 *v425;
  uint64_t v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _OWORD *v442;
  __int128 *v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t *v454;
  unsigned __int8 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  _OWORD *v471;
  __int128 *v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  _OWORD *v489;
  __int128 *v490;
  uint64_t v491;
  __int128 v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t v500;
  uint64_t *v501;
  unsigned __int8 v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _OWORD *v518;
  __int128 *v519;
  uint64_t v520;
  __int128 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  _OWORD *v536;
  __int128 *v537;
  uint64_t v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t *v548;
  unsigned __int8 v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  _OWORD *v565;
  __int128 *v566;
  uint64_t v567;
  __int128 v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  _OWORD *v583;
  __int128 *v584;
  uint64_t v585;
  __int128 v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  _QWORD *v591;
  uint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t *v595;
  unsigned __int8 v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  _OWORD *v612;
  __int128 *v613;
  uint64_t v614;
  __int128 v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _OWORD *v630;
  __int128 *v631;
  uint64_t v632;
  __int128 v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  uint64_t *v642;
  unsigned __int8 v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  _OWORD *v659;
  __int128 *v660;
  uint64_t v661;
  __int128 v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  _OWORD *v677;
  __int128 *v678;
  uint64_t v679;
  __int128 v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  uint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  uint64_t *v689;
  unsigned __int8 v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v705;
  _OWORD *v706;
  __int128 *v707;
  uint64_t v708;
  __int128 v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  uint64_t v723;
  _OWORD *v724;
  __int128 *v725;
  uint64_t v726;
  __int128 v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  _QWORD *v734;
  uint64_t v735;
  uint64_t *v736;
  unsigned __int8 v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  _OWORD *v753;
  __int128 *v754;
  uint64_t v755;
  __int128 v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  _OWORD *v771;
  __int128 *v772;
  uint64_t v773;
  __int128 v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  _QWORD *v779;
  uint64_t v780;
  _QWORD *v781;
  uint64_t v782;
  uint64_t *v783;
  unsigned __int8 v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  _OWORD *v800;
  __int128 *v801;
  uint64_t v802;
  __int128 v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  unint64_t v815;
  uint64_t v816;
  uint64_t v817;
  _OWORD *v818;
  __int128 *v819;
  uint64_t v820;
  __int128 v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  _QWORD *v826;
  uint64_t v827;
  _QWORD *v828;
  uint64_t v829;
  uint64_t *v830;
  unsigned __int8 v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  _OWORD *v847;
  __int128 *v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t v864;
  _OWORD *v865;
  __int128 *v866;
  uint64_t v867;
  __int128 v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  _QWORD *v873;
  uint64_t v874;
  _QWORD *v875;
  uint64_t v876;
  uint64_t *v877;
  unsigned __int8 v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  unint64_t v891;
  uint64_t v892;
  uint64_t v893;
  _OWORD *v894;
  __int128 *v895;
  uint64_t v896;
  __int128 v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  _OWORD *v912;
  __int128 *v913;
  uint64_t v914;
  __int128 v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  _QWORD *v920;
  uint64_t v921;
  _QWORD *v922;
  uint64_t v923;
  uint64_t *v924;
  unsigned __int8 v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  unint64_t v938;
  uint64_t v939;
  uint64_t v940;
  _OWORD *v941;
  __int128 *v942;
  uint64_t v943;
  __int128 v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  unint64_t v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  _OWORD *v959;
  __int128 *v960;
  uint64_t v961;
  __int128 v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  _QWORD *v967;
  uint64_t v968;
  _QWORD *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  uint64_t *v975;
  unsigned __int8 v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  uint64_t v990;
  uint64_t v991;
  _OWORD *v992;
  __int128 *v993;
  uint64_t v994;
  __int128 v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  _OWORD *v1010;
  __int128 *v1011;
  uint64_t v1012;
  __int128 v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  _QWORD *v1018;
  uint64_t v1019;
  _QWORD *v1020;
  uint64_t v1021;
  uint64_t *v1022;
  unsigned __int8 v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  _OWORD *v1039;
  __int128 *v1040;
  uint64_t v1041;
  __int128 v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  unint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  unint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  _OWORD *v1057;
  __int128 *v1058;
  uint64_t v1059;
  __int128 v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  _QWORD *v1065;
  uint64_t v1066;
  _QWORD *v1067;
  uint64_t v1068;
  uint64_t *v1069;
  unsigned __int8 v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  _OWORD *v1086;
  __int128 *v1087;
  uint64_t v1088;
  __int128 v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  _OWORD *v1104;
  __int128 *v1105;
  uint64_t v1106;
  __int128 v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  _QWORD *v1112;
  uint64_t v1113;
  _QWORD *v1114;
  uint64_t v1115;
  uint64_t *v1116;
  unsigned __int8 v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  unint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  _OWORD *v1133;
  __int128 *v1134;
  uint64_t v1135;
  __int128 v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  unint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  _OWORD *v1151;
  __int128 *v1152;
  uint64_t v1153;
  __int128 v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  _QWORD *v1159;
  uint64_t v1160;
  _QWORD *v1161;
  uint64_t v1162;
  uint64_t *v1163;
  unsigned __int8 v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  unint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  unint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  _OWORD *v1180;
  __int128 *v1181;
  uint64_t v1182;
  __int128 v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  _OWORD *v1198;
  __int128 *v1199;
  uint64_t v1200;
  __int128 v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  _QWORD *v1206;
  uint64_t v1207;
  _QWORD *v1208;
  uint64_t v1209;
  uint64_t *v1210;
  unsigned __int8 v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  unint64_t v1223;
  unint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  _OWORD *v1227;
  __int128 *v1228;
  uint64_t v1229;
  __int128 v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  unint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  unint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  _OWORD *v1245;
  __int128 *v1246;
  uint64_t v1247;
  __int128 v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  _QWORD *v1253;
  uint64_t v1254;
  _QWORD *v1255;
  uint64_t v1256;
  uint64_t *v1257;
  unsigned __int8 v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  unint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  unint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  _OWORD *v1274;
  __int128 *v1275;
  uint64_t v1276;
  __int128 v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  unint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  _OWORD *v1292;
  __int128 *v1293;
  uint64_t v1294;
  __int128 v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  _QWORD *v1300;
  uint64_t v1301;
  _QWORD *v1302;
  uint64_t v1303;
  uint64_t *v1304;
  unsigned __int8 v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  unint64_t v1317;
  unint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  _OWORD *v1321;
  __int128 *v1322;
  uint64_t v1323;
  __int128 v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  unint64_t v1335;
  unint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  _OWORD *v1339;
  __int128 *v1340;
  uint64_t v1341;
  __int128 v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  _QWORD *v1347;
  uint64_t v1348;
  _QWORD *v1349;
  uint64_t v1350;
  uint64_t *v1351;
  unsigned __int8 v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  unint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  _OWORD *v1368;
  __int128 *v1369;
  uint64_t v1370;
  __int128 v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  unint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  unint64_t v1382;
  unint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  _OWORD *v1386;
  __int128 *v1387;
  uint64_t v1388;
  __int128 v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  _QWORD *v1394;
  uint64_t v1395;
  _QWORD *v1396;
  uint64_t v1397;
  uint64_t *v1398;
  unsigned __int8 v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  _OWORD *v1415;
  __int128 *v1416;
  uint64_t v1417;
  __int128 v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  unint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  _OWORD *v1433;
  __int128 *v1434;
  uint64_t v1435;
  __int128 v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  _QWORD *v1441;
  _QWORD *v1442;
  uint64_t v1443;
  _QWORD *v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  char *v1451;
  unsigned __int8 v1452;
  std::__shared_weak_count *v1453;
  unint64_t *v1454;
  unint64_t v1455;
  _QWORD *v1456;
  _QWORD *v1457;
  uint64_t v1458;
  std::__shared_weak_count *v1459;
  unint64_t *v1460;
  unint64_t v1461;
  _QWORD *v1462;
  unsigned __int8 v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  unint64_t *v1468;
  unint64_t v1469;
  _QWORD *v1470;
  unint64_t v1471;
  _QWORD *v1472;
  uint64_t v1473;
  unint64_t v1474;
  BOOL v1475;
  unint64_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  unint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  _OWORD *v1482;
  uint64_t v1483;
  _OWORD *v1484;
  VKSharedResources *v1485;
  _QWORD *v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  _QWORD *v1492;
  uint64_t v1493;
  unint64_t v1494;
  unint64_t v1495;
  uint64_t v1496;
  unint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  _OWORD *v1501;
  uint64_t v1502;
  _OWORD *v1503;
  _QWORD *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  std::__shared_weak_count *v1513;
  unint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  unint64_t v1517;
  unint64_t v1518;
  uint64_t v1519;
  std::__shared_weak_count *v1520;
  unint64_t *v1521;
  unint64_t v1522;
  std::__shared_weak_count *v1523;
  unint64_t *v1524;
  unint64_t v1525;
  unint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  std::__shared_weak_count *v1532;
  unint64_t *v1533;
  unint64_t v1534;
  std::__shared_weak_count *v1535;
  unint64_t *v1536;
  unint64_t v1537;
  unint64_t *v1538;
  unint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  _QWORD *v1543;
  uint64_t v1544;
  std::__shared_weak_count *v1545;
  unint64_t *v1546;
  unint64_t v1547;
  int v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  unsigned __int8 v1597;
  int v1598;
  uint64_t v1599;
  geo::read_write_lock *v1600;
  const char *v1601;
  malloc_zone_t *zone;
  _QWORD *v1603;
  int v1604;
  uint64_t v1605;
  geo::read_write_lock *v1606;
  const char *v1607;
  malloc_zone_t *v1608;
  _QWORD *v1609;
  int v1610;
  uint64_t v1611;
  geo::read_write_lock *v1612;
  const char *v1613;
  malloc_zone_t *v1614;
  _QWORD *v1615;
  int v1616;
  uint64_t v1617;
  geo::read_write_lock *v1618;
  const char *v1619;
  malloc_zone_t *v1620;
  _QWORD *v1621;
  int v1622;
  uint64_t v1623;
  geo::read_write_lock *v1624;
  const char *v1625;
  malloc_zone_t *v1626;
  int v1627;
  char *v1628;
  char *v1629;
  char *v1630;
  char *v1631;
  char *v1632;
  char *v1633;
  char *v1634;
  uint64_t *v1635;
  uint64_t *v1636;
  uint64_t *v1637;
  uint64_t *v1638;
  uint64_t *v1639;
  uint64_t *v1640;
  uint64_t *v1641;
  uint64_t *v1642;
  uint64_t *v1643;
  uint64_t *v1644;
  uint64_t *v1645;
  uint64_t *v1646;
  uint64_t *v1647;
  uint64_t *v1648;
  uint64_t *v1649;
  uint64_t *v1650;
  uint64_t *v1651;
  uint64_t *v1652;
  uint64_t *v1653;
  uint64_t *v1654;
  uint64_t *v1655;
  uint64_t *v1656;
  uint64_t *v1657;
  VKSharedResources *v1658;
  char *v1659;
  char *v1660;
  uint64_t *v1661;
  _OWORD *v1662;
  char *v1663;
  char *v1664;
  _QWORD *v1665;
  std::__shared_weak_count *v1666;
  _OWORD *v1667;
  std::__shared_weak_count *v1668;
  std::__shared_weak_count *v1669;
  std::__shared_weak_count *v1670;
  std::__shared_weak_count *v1671;
  std::__shared_weak_count *v1672;
  std::__shared_weak_count *v1673;
  std::__shared_weak_count *v1674;
  std::__shared_weak_count *v1675;
  std::__shared_weak_count *v1676;
  std::__shared_weak_count *v1677;
  std::__shared_weak_count *v1678;
  std::__shared_weak_count *v1679;
  std::__shared_weak_count *v1680;
  std::__shared_weak_count *v1681;
  std::__shared_weak_count *v1682;
  std::__shared_weak_count *v1683;
  std::__shared_weak_count *v1684;
  std::__shared_weak_count *v1685;
  __int16 v1686;
  char v1687;
  __int16 v1688;
  char v1689;
  std::__shared_weak_count *v1690;
  std::__shared_weak_count *v1691;
  std::__shared_weak_count *v1692;
  std::__shared_weak_count *v1693;
  std::__shared_weak_count *v1694;
  std::__shared_weak_count *v1695;
  std::__shared_weak_count *v1696;
  std::__shared_weak_count *v1697;
  std::__shared_weak_count *v1698;
  std::__shared_weak_count *v1699;
  std::__shared_weak_count *v1700;
  std::__shared_weak_count *v1701;
  std::__shared_weak_count *v1702;
  std::__shared_weak_count *v1703;
  std::__shared_weak_count *v1704;
  std::__shared_weak_count *v1705;
  std::__shared_weak_count *v1706;
  std::__shared_weak_count *v1707;
  std::__shared_weak_count *v1708;
  std::__shared_weak_count *v1709;
  std::__shared_weak_count *v1710;
  std::__shared_weak_count *v1711;
  std::__shared_weak_count *v1712;
  std::__shared_weak_count *v1713;
  std::__shared_weak_count *v1714;
  std::__shared_weak_count *v1715;
  std::__shared_weak_count *v1716;
  std::__shared_weak_count *v1717;
  std::__shared_weak_count *v1718;
  std::__shared_weak_count *v1719;
  std::__shared_weak_count *v1720;
  std::__shared_weak_count *v1721;
  std::__shared_weak_count *v1722;
  std::__shared_weak_count *v1723;
  std::__shared_weak_count *v1724;
  std::__shared_weak_count *v1725;
  std::__shared_weak_count *v1726;
  std::__shared_weak_count *v1727;
  std::__shared_weak_count *v1728;
  std::__shared_weak_count *v1729;
  std::__shared_weak_count *v1730;
  std::__shared_weak_count *v1731;
  __int128 v1732;
  __int128 v1733;
  __int128 v1734;
  _BYTE v1735[44];
  char v1736;
  __int16 v1737;
  char v1738;
  _QWORD **v1739;
  _QWORD *v1740;
  uint64_t v1741;
  _QWORD **v1742;
  _QWORD *v1743;
  uint64_t v1744;
  _QWORD v1745[3];
  _QWORD *v1746;
  _QWORD v1747[3];
  _QWORD *v1748;
  _QWORD v1749[3];
  _QWORD *v1750;
  _QWORD v1751[3];
  _QWORD *v1752;
  _QWORD v1753[3];
  _QWORD *v1754;
  _QWORD v1755[3];
  _QWORD *v1756;
  _QWORD v1757[3];
  _QWORD *v1758;
  _QWORD v1759[3];
  _QWORD *v1760;
  _QWORD v1761[3];
  _QWORD *v1762;
  _QWORD v1763[3];
  _QWORD *v1764;
  _QWORD v1765[3];
  _QWORD *v1766;
  _QWORD v1767[3];
  _QWORD *v1768;
  _QWORD v1769[3];
  _QWORD *v1770;
  _QWORD v1771[3];
  _QWORD *v1772;
  _QWORD v1773[3];
  _QWORD *v1774;
  _QWORD v1775[3];
  _QWORD *v1776;
  _QWORD v1777[3];
  _QWORD *v1778;
  _QWORD v1779[3];
  _QWORD *v1780;
  _QWORD v1781[3];
  _QWORD *v1782;
  _QWORD v1783[3];
  _QWORD *v1784;
  _QWORD v1785[3];
  _QWORD *v1786;
  _QWORD v1787[3];
  _QWORD *v1788;
  _QWORD v1789[3];
  _QWORD *v1790;
  _QWORD v1791[3];
  _QWORD *v1792;
  _QWORD v1793[3];
  _QWORD *v1794;
  _QWORD v1795[3];
  _QWORD *v1796;
  _QWORD v1797[3];
  _QWORD *v1798;
  _QWORD v1799[3];
  _QWORD *v1800;
  _QWORD v1801[3];
  _QWORD *v1802;
  _QWORD v1803[3];
  _QWORD *v1804;
  _QWORD v1805[3];
  _QWORD *v1806;
  _QWORD v1807[3];
  _QWORD *v1808;
  _QWORD v1809[3];
  _QWORD *v1810;
  _QWORD v1811[3];
  _QWORD *v1812;
  _QWORD v1813[3];
  _QWORD *v1814;
  _QWORD v1815[3];
  _QWORD *v1816;
  _QWORD v1817[3];
  _QWORD *v1818;
  _QWORD v1819[3];
  _QWORD *v1820;
  _QWORD v1821[3];
  _QWORD *v1822;
  _QWORD v1823[3];
  _QWORD *v1824;
  _QWORD v1825[3];
  _QWORD *v1826;
  _QWORD v1827[3];
  _QWORD *v1828;
  _QWORD v1829[3];
  _QWORD *v1830;
  _QWORD v1831[3];
  _QWORD *v1832;
  _QWORD v1833[3];
  _QWORD *v1834;
  _QWORD v1835[3];
  _QWORD *v1836;
  __int128 v1837;
  uint64_t v1838;
  uint64_t v1839;

  v1839 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  *(_OWORD *)((char *)this + 52) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  v6 = (char *)this + 104;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_BYTE *)this + 168) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  v1664 = (char *)this + 120;
  *(_OWORD *)((char *)this + 172) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 196) = 0;
  *(_QWORD *)((char *)this + 188) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)((char *)this + 204) = 0;
  *(_OWORD *)((char *)this + 292) = xmmword_19FFB3060;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = (char *)this + 224;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_BYTE *)this + 288) = 0;
  *(_QWORD *)((char *)this + 324) = 0;
  *(_QWORD *)((char *)this + 308) = 0;
  v1659 = (char *)this + 240;
  *(_QWORD *)((char *)this + 316) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  v1667 = (_OWORD *)((char *)this + 360);
  *((_QWORD *)this + 42) = (char *)this + 344;
  *((_BYTE *)this + 408) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 412) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 436) = 0;
  *(_QWORD *)((char *)this + 428) = 0;
  *(_QWORD *)((char *)this + 444) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  v1633 = (char *)this + 464;
  v1634 = (char *)this + 344;
  *((_QWORD *)this + 57) = (char *)this + 464;
  *((_BYTE *)this + 528) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *(_OWORD *)((char *)this + 532) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 556) = 0;
  *(_QWORD *)((char *)this + 548) = 0;
  v1663 = (char *)this + 480;
  *(_QWORD *)((char *)this + 564) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 74) = 0;
  v1632 = (char *)this + 584;
  *((_QWORD *)this + 72) = (char *)this + 584;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_BYTE *)this + 648) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 652) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 676) = 0;
  *(_QWORD *)((char *)this + 668) = 0;
  *(_QWORD *)((char *)this + 684) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 89) = 0;
  v1629 = (char *)this + 704;
  *((_QWORD *)this + 87) = (char *)this + 704;
  *((_BYTE *)this + 768) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 772) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 796) = 0;
  *(_QWORD *)((char *)this + 788) = 0;
  *(_QWORD *)((char *)this + 804) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_QWORD *)this + 103) = 0;
  v1630 = (char *)this + 824;
  *((_QWORD *)this + 102) = (char *)this + 824;
  *((_BYTE *)this + 888) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 892) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 916) = 0;
  *(_QWORD *)((char *)this + 908) = 0;
  *(_QWORD *)((char *)this + 924) = 0;
  *((_QWORD *)this + 119) = 0;
  *((_QWORD *)this + 118) = 0;
  v1631 = (char *)this + 944;
  *((_QWORD *)this + 117) = (char *)this + 944;
  *((_BYTE *)this + 1008) = 0;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 60) = 0u;
  v1662 = (_OWORD *)((char *)this + 840);
  *(_OWORD *)((char *)this + 1012) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 1036) = 0;
  *(_QWORD *)((char *)this + 1028) = 0;
  *(_QWORD *)((char *)this + 1044) = 0;
  *((_QWORD *)this + 134) = 0;
  *((_QWORD *)this + 133) = 0;
  v1628 = (char *)this + 1064;
  *((_QWORD *)this + 132) = (char *)this + 1064;
  v1655 = (uint64_t *)((char *)this + 1104);
  v1656 = (uint64_t *)((char *)this + 1096);
  v1654 = (uint64_t *)((char *)this + 1112);
  v1650 = (uint64_t *)((char *)this + 1128);
  v1651 = (uint64_t *)((char *)this + 1120);
  v1637 = (uint64_t *)((char *)this + 1144);
  v1638 = (uint64_t *)((char *)this + 1136);
  v1635 = (uint64_t *)((char *)this + 1160);
  v1636 = (uint64_t *)((char *)this + 1152);
  v1649 = (uint64_t *)((char *)this + 1344);
  *((_QWORD *)this + 153) = 0;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  v1657 = (uint64_t *)((char *)this + 1080);
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((_QWORD *)this + 184) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  v1647 = (uint64_t *)((char *)this + 1360);
  v1648 = (uint64_t *)((char *)this + 1352);
  v1640 = (uint64_t *)((char *)this + 1376);
  v1641 = (uint64_t *)((char *)this + 1384);
  v1645 = (uint64_t *)((char *)this + 1392);
  v1646 = (uint64_t *)((char *)this + 1368);
  v1639 = (uint64_t *)((char *)this + 1400);
  v1643 = (uint64_t *)((char *)this + 1416);
  v1644 = (uint64_t *)((char *)this + 1408);
  v1642 = (uint64_t *)((char *)this + 1424);
  v1652 = (uint64_t *)((char *)this + 1440);
  v1653 = (uint64_t *)((char *)this + 1432);
  v1658 = v5;
  v1660 = (char *)this + 224;
  v7 = operator new();
  *(_DWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)v7 = &off_1E42B63B0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(v7 + 36) = v8;
  *(_QWORD *)(v7 + 52) = 0x100000001;
  *(_DWORD *)(v7 + 60) = 0;
  *((_QWORD *)this + 185) = v7;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E42E77C8;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  *((_QWORD *)this + 186) = v9;
  v10 = operator new();
  *(_DWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E42B63B0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 36) = xmmword_19FFB4C00;
  *(_QWORD *)(v10 + 52) = 0x100000001;
  *(_DWORD *)(v10 + 60) = 0;
  *((_QWORD *)this + 187) = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E42E77C8;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  *((_QWORD *)this + 188) = v11;
  v12 = operator new();
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &off_1E42B63B0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)&v13 = 0x100000001;
  *((_QWORD *)&v13 + 1) = 0x100000001;
  *(_OWORD *)(v12 + 36) = v13;
  *(_QWORD *)(v12 + 52) = 0x100000001;
  *(_DWORD *)(v12 + 60) = 0;
  *((_QWORD *)this + 189) = v12;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E42E77C8;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v12;
  *((_QWORD *)this + 190) = v14;
  v15 = operator new();
  *(_DWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)v15 = &off_1E42B63B0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_OWORD *)(v15 + 36) = xmmword_19FFB2EA0;
  *(_QWORD *)(v15 + 52) = 0x100000001;
  *(_DWORD *)(v15 + 60) = 0;
  *((_QWORD *)this + 191) = v15;
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E42E77C8;
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = v15;
  *((_QWORD *)this + 192) = v16;
  v17 = operator new();
  *(_DWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)v17 = &off_1E42B63B0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_OWORD *)(v17 + 36) = xmmword_19FFB2EA0;
  *(_QWORD *)(v17 + 52) = 0x100000001;
  *(_DWORD *)(v17 + 60) = 0;
  *((_QWORD *)this + 193) = v17;
  v18 = (_QWORD *)operator new();
  *v18 = &off_1E42E77C8;
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = v17;
  *((_QWORD *)this + 194) = v18;
  *((_QWORD *)this + 196) = 0;
  *((_QWORD *)this + 198) = 0;
  *((_QWORD *)this + 197) = 0;
  *((_DWORD *)this + 398) = 0;
  *((_QWORD *)this + 195) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 1596) = 0xBF80000000010300;
  *((_DWORD *)this + 401) = -1082130432;
  *((_QWORD *)this + 201) = 1;
  *((_WORD *)this + 808) = 0;
  *((_BYTE *)this + 1618) = 3;
  *((_BYTE *)this + 1635) = 0;
  *(_QWORD *)((char *)this + 1627) = 0;
  *(_QWORD *)((char *)this + 1619) = 0;
  *(_QWORD *)((char *)this + 1692) = 0;
  *(_QWORD *)((char *)this + 1684) = 0;
  *((_WORD *)this + 874) = 257;
  *((_QWORD *)this + 219) = 0;
  *((_QWORD *)this + 220) = 0;
  *((_BYTE *)this + 1768) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_DWORD *)this + 452) = 0;
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 222) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 1812) = 0xBF80000000010300;
  *((_DWORD *)this + 455) = -1082130432;
  *((_QWORD *)this + 228) = 1;
  *((_WORD *)this + 916) = 0;
  *((_BYTE *)this + 1834) = 3;
  *(_QWORD *)((char *)this + 1835) = 0;
  *(_QWORD *)((char *)this + 1843) = 0;
  *((_BYTE *)this + 1851) = 0;
  *(_QWORD *)((char *)this + 1908) = 0;
  *(_QWORD *)((char *)this + 1900) = 0;
  *((_WORD *)this + 982) = 257;
  *((_BYTE *)this + 1984) = 0;
  *((_QWORD *)this + 247) = 0;
  *((_QWORD *)this + 246) = 0;
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 250) = 0;
  *((_DWORD *)this + 506) = 0;
  *((_QWORD *)this + 252) = 0;
  *((_QWORD *)this + 249) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 2028) = 256;
  *((_DWORD *)this + 509) = 0;
  *((_QWORD *)this + 255) = 1;
  *((_WORD *)this + 1024) = 0;
  *((_BYTE *)this + 2050) = 3;
  *((_BYTE *)this + 2067) = 0;
  *(_QWORD *)((char *)this + 2059) = 0;
  *(_QWORD *)((char *)this + 2051) = 0;
  *(_QWORD *)((char *)this + 2124) = 0;
  *(_QWORD *)((char *)this + 2116) = 0;
  *((_WORD *)this + 1090) = 257;
  *((_QWORD *)this + 274) = 0;
  *((_QWORD *)this + 273) = 0;
  *((_BYTE *)this + 2200) = 0;
  *((_QWORD *)this + 278) = 0;
  *((_QWORD *)this + 277) = 0;
  *((_DWORD *)this + 560) = 0;
  *((_QWORD *)this + 279) = 0;
  *((_QWORD *)this + 276) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 2244) = 0xBF80000000010300;
  *((_DWORD *)this + 563) = -1082130432;
  *((_QWORD *)this + 282) = 1;
  *((_WORD *)this + 1132) = 0;
  *((_BYTE *)this + 2266) = 3;
  *(_QWORD *)((char *)this + 2275) = 0;
  *(_QWORD *)((char *)this + 2267) = 0;
  *((_BYTE *)this + 2283) = 0;
  *(_QWORD *)((char *)this + 2340) = 0;
  *(_QWORD *)((char *)this + 2332) = 0;
  *((_WORD *)this + 1198) = 257;
  *((_QWORD *)this + 301) = 0;
  *((_QWORD *)this + 300) = 0;
  *((_BYTE *)this + 2416) = 0;
  md::DaVinciRenderStateCache::DaVinciRenderStateCache((_QWORD *)this + 303);
  v19 = 0uLL;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  if ((v20 & 1) == 0)
  {
    v19 = 0uLL;
    if (v1549)
    {
      v1550 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1550, "GeoGL", 0xA3D02C1100000005);
      v19 = 0uLL;
    }
  }
  *((_QWORD *)this + 313) = ggl::Allocator::instance(void)::alloc;
  *((_OWORD *)this + 157) = v19;
  *((_OWORD *)this + 158) = v19;
  *((_QWORD *)this + 318) = 0;
  *((_QWORD *)this + 319) = 32;
  v21 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v21 = 0;
  v21[1] = 0;
  *((_QWORD *)this + 317) = v21;
  *((_QWORD *)this + 318) = v21;
  if (v5)
  {
    -[VKSharedResources textureManager](v5, "textureManager");
    -[VKSharedResources materialTextureManager](v5, "materialTextureManager");
  }
  else
  {
    *((_OWORD *)this + 160) = 0u;
    *((_OWORD *)this + 161) = 0u;
  }
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *((_DWORD *)this + 656) = 0;
  *((_DWORD *)this + 666) = 1065353216;
  *((_QWORD *)this + 336) = 0;
  *((_QWORD *)this + 335) = 0;
  *((_QWORD *)this + 334) = (char *)this + 2680;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  v1665 = -[VKSharedResources shaderLibrary](v5, "shaderLibrary");
  v22 = v1665[10];
  v23 = *(_QWORD *)(v22 + 3392);
  v24 = *(std::__shared_weak_count **)(v22 + 3400);
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  v27 = *(_OWORD *)&a3->colorFormatsCount;
  v1733 = *(_OWORD *)a3->colorFormats;
  v1734 = v27;
  v1732 = 0uLL;
  v1735[0] = 0;
  *(_OWORD *)&v1735[4] = xmmword_19FFB3060;
  memset(&v1735[20], 0, 24);
  v1736 = 15;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v24)
  {
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    *(_QWORD *)&v1732 = v23;
    *((_QWORD *)&v1732 + 1) = v24;
  }
  else
  {
    v1732 = v23;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v30 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v30 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v30);
  v31 = v1732;
  v1732 = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_OWORD *)this = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v1734;
  *((_OWORD *)this + 1) = v1733;
  *((_OWORD *)this + 2) = v35;
  *((_OWORD *)this + 3) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 60) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 92) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 13));
  v36 = v1740;
  *((_QWORD *)this + 12) = v1739;
  *((_QWORD *)this + 13) = v36;
  v37 = v1741;
  *((_QWORD *)this + 14) = v1741;
  if (v37)
  {
    v36[2] = v6;
    v36 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 12) = v6;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v36);
  if (*((_QWORD *)&v1732 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1732 + 1) + 16))(*((_QWORD *)&v1732 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1732 + 1));
    }
  }
  if (v24)
  {
    v40 = (unint64_t *)&v24->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1730, (uint64_t)this, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v42 = v1731;
  if (v1731)
  {
    v43 = (unint64_t *)&v1731->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1728, (uint64_t)this, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v45 = v1729;
  if (v1729)
  {
    v46 = (unint64_t *)&v1729->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1726, (uint64_t)this, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v48 = v1727;
  if (v1727)
  {
    v49 = (unint64_t *)&v1727->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1724, (uint64_t)this, 1u, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v51 = v1725;
  if (v1725)
  {
    v52 = (unint64_t *)&v1725->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1722, (uint64_t)this, 0, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v54 = v1723;
  if (v1723)
  {
    v55 = (unint64_t *)&v1723->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1720, (uint64_t)this, 1u, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v57 = v1721;
  if (v1721)
  {
    v58 = (unint64_t *)&v1721->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v1665[10];
  v61 = *(_QWORD *)(v60 + 3416);
  v62 = *(std::__shared_weak_count **)(v60 + 3424);
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = *(_OWORD *)&a3->colorFormatsCount;
  v1733 = *(_OWORD *)a3->colorFormats;
  v1734 = v65;
  v1732 = 0uLL;
  v1735[0] = 0;
  *(_OWORD *)&v1735[4] = xmmword_19FFB3060;
  memset(&v1735[20], 0, 24);
  v1736 = 15;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v62)
  {
    v66 = (unint64_t *)&v62->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v61;
    *((_QWORD *)&v1732 + 1) = v62;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  else
  {
    v1732 = v61;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v71 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v71 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v71);
  v72 = v1732;
  v1732 = 0uLL;
  v73 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v72;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v1734;
  *(_OWORD *)((char *)this + 136) = v1733;
  *(_OWORD *)((char *)this + 152) = v76;
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 180) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 196) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 212) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 28));
  v77 = v1740;
  *((_QWORD *)this + 27) = v1739;
  *((_QWORD *)this + 28) = v77;
  v78 = v1741;
  *((_QWORD *)this + 29) = v1741;
  if (v78)
  {
    v77[2] = v1660;
    v77 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 27) = v1660;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v77);
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v62)
  {
    v82 = (unint64_t *)&v62->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1718, (uint64_t)v1664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v84 = v1719;
  if (v1719)
  {
    v85 = (unint64_t *)&v1719->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1716, (uint64_t)v1664, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v87 = v1717;
  if (v1717)
  {
    v88 = (unint64_t *)&v1717->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1714, (uint64_t)v1664, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v90 = v1715;
  if (v1715)
  {
    v91 = (unint64_t *)&v1715->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1712, (uint64_t)v1664, 1u, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v93 = v1713;
  if (v1713)
  {
    v94 = (unint64_t *)&v1713->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1710, (uint64_t)v1664, 0, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v96 = v1711;
  if (v1711)
  {
    v97 = (unint64_t *)&v1711->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1708, (uint64_t)v1664, 1u, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v99 = v1709;
  if (v1709)
  {
    v100 = (unint64_t *)&v1709->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1706, (uint64_t)this, 1u, 1u, 0, 0, 0, 0, 0, 0x100u, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v102 = v1707;
  if (v1707)
  {
    v103 = (unint64_t *)&v1707->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v1665[10];
  v106 = *(_QWORD *)(v105 + 3440);
  v107 = *(std::__shared_weak_count **)(v105 + 3448);
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  v110 = *(_OWORD *)&a3->colorFormatsCount;
  v1733 = *(_OWORD *)a3->colorFormats;
  v1734 = v110;
  v1732 = 0uLL;
  v1735[0] = 0;
  *(_OWORD *)&v1735[4] = xmmword_19FFB3060;
  memset(&v1735[20], 0, 24);
  v1736 = 0;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v107)
  {
    v111 = (unint64_t *)&v107->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
    v113 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v106;
    *((_QWORD *)&v1732 + 1) = v107;
    if (v113)
    {
      v114 = (unint64_t *)&v113->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
  }
  else
  {
    v1732 = v106;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v116 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v116 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v116);
  v117 = v1732;
  v1732 = 0uLL;
  v118 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_OWORD *)this + 15) = v117;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v1734;
  *((_OWORD *)this + 16) = v1733;
  *((_OWORD *)this + 17) = v121;
  *((_OWORD *)this + 18) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 300) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 316) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 332) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 43));
  v122 = v1740;
  *((_QWORD *)this + 42) = v1739;
  *((_QWORD *)this + 43) = v122;
  v123 = v1741;
  *((_QWORD *)this + 44) = v1741;
  if (v123)
  {
    v122[2] = v1634;
    v122 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 42) = v1634;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v122);
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  if (v107)
  {
    v127 = (unint64_t *)&v107->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1704, (uint64_t)v1659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v129 = v1705;
  if (v1705)
  {
    v130 = (unint64_t *)&v1705->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1702, (uint64_t)v1659, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v132 = v1703;
  if (v1703)
  {
    v133 = (unint64_t *)&v1703->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v1665[10];
  v136 = *(_QWORD *)(v135 + 3392);
  v137 = *(std::__shared_weak_count **)(v135 + 3400);
  if (v137)
  {
    v138 = (unint64_t *)&v137->__shared_owners_;
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  v140 = *(_OWORD *)&a3->colorFormatsCount;
  v1733 = *(_OWORD *)a3->colorFormats;
  v1734 = v140;
  v1732 = 0uLL;
  v1735[0] = 1;
  *(_OWORD *)&v1735[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1735[20] = 7;
  memset(&v1735[24], 0, 20);
  v1736 = 15;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v137)
  {
    v141 = (unint64_t *)&v137->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v136;
    *((_QWORD *)&v1732 + 1) = v137;
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
  }
  else
  {
    v1732 = v136;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v146 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v146 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v146);
  v147 = v1732;
  v1732 = 0uLL;
  v148 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  *v1667 = v147;
  if (v148)
  {
    v149 = (unint64_t *)&v148->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v1734;
  *(_OWORD *)((char *)this + 376) = v1733;
  *(_OWORD *)((char *)this + 392) = v151;
  *(_OWORD *)((char *)this + 408) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 420) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 436) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 452) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 58));
  v152 = v1740;
  *((_QWORD *)this + 57) = v1739;
  *((_QWORD *)this + 58) = v152;
  v153 = v1741;
  *((_QWORD *)this + 59) = v1741;
  if (v153)
  {
    v152[2] = v1633;
    v152 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 57) = v1633;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v152);
  v154 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v155 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  if (v137)
  {
    v157 = (unint64_t *)&v137->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1700, (uint64_t)v1667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v159 = v1701;
  if (v1701)
  {
    v160 = (unint64_t *)&v1701->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1698, (uint64_t)v1667, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v162 = v1699;
  if (v1699)
  {
    v163 = (unint64_t *)&v1699->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1696, (uint64_t)v1667, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v165 = v1697;
  if (v1697)
  {
    v166 = (unint64_t *)&v1697->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1694, (uint64_t)v1667, 1u, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v168 = v1695;
  if (v1695)
  {
    v169 = (unint64_t *)&v1695->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1692, (uint64_t)v1667, 0, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v171 = v1693;
  if (v1693)
  {
    v172 = (unint64_t *)&v1693->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1690, (uint64_t)v1667, 1u, 0, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v174 = v1691;
  if (v1691)
  {
    v175 = (unint64_t *)&v1691->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v1665[10];
  v178 = *(_QWORD *)(v177 + 3488);
  v179 = *(std::__shared_weak_count **)(v177 + 3496);
  if (v179)
  {
    v180 = (unint64_t *)&v179->__shared_owners_;
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
  }
  v1838 = 0;
  v1837 = 0uLL;
  if ((v182 & 1) == 0
  {
    qword_1EE58ACA8 = 1;
    qword_1EE58ACB0 = 0x1500000004;
    md::shadowMapRenderTargetFormat(void)::_renderTargetFormat = 4uLL;
  }
  v1733 = md::shadowMapRenderTargetFormat(void)::_renderTargetFormat;
  v1734 = *(_OWORD *)&qword_1EE58ACA8;
  v1732 = 0uLL;
  v1735[0] = 0;
  *(_WORD *)&v1735[1] = v1688;
  v1735[3] = v1689;
  *(_OWORD *)&v1735[4] = xmmword_19FFB3060;
  *(_OWORD *)&v1735[20] = v1837;
  *(_QWORD *)&v1735[36] = v1838;
  v1736 = 15;
  v1737 = v1686;
  v1738 = v1687;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v179)
  {
    v183 = (unint64_t *)&v179->__shared_owners_;
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
    v185 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v178;
    *((_QWORD *)&v1732 + 1) = v179;
    if (v185)
    {
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
  }
  else
  {
    v1732 = v178;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v188 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v188 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v188);
  v189 = v1732;
  v1732 = 0uLL;
  v190 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  *((_OWORD *)this + 30) = v189;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = v1734;
  *((_OWORD *)this + 31) = v1733;
  *((_OWORD *)this + 32) = v193;
  *((_OWORD *)this + 33) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 540) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 556) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 572) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 73));
  v194 = v1740;
  *((_QWORD *)this + 72) = v1739;
  *((_QWORD *)this + 73) = v194;
  v195 = v1741;
  *((_QWORD *)this + 74) = v1741;
  if (v195)
  {
    v194[2] = v1632;
    v194 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 72) = v1632;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v194);
  v196 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v197 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (v179)
  {
    v199 = (unint64_t *)&v179->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1684, (uint64_t)v1663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v201 = v1685;
  if (v1685)
  {
    v202 = (unint64_t *)&v1685->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1682, (uint64_t)v1663, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v204 = v1683;
  if (v1683)
  {
    v205 = (unint64_t *)&v1683->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1680, (uint64_t)v1663, 1u, 1u, 0, 0, 1u, 1u, 0, 1u, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v207 = v1681;
  if (v1681)
  {
    v208 = (unint64_t *)&v1681->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v1665[10];
  v211 = *(_QWORD *)(v210 + 3464);
  v212 = *(std::__shared_weak_count **)(v210 + 3472);
  if (v212)
  {
    v213 = (unint64_t *)&v212->__shared_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  v215 = *(_OWORD *)&a3->colorFormatsCount;
  v1733 = *(_OWORD *)a3->colorFormats;
  v1734 = v215;
  v1732 = 0uLL;
  v1735[0] = 1;
  *(_OWORD *)&v1735[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v1735[20] = 7;
  memset(&v1735[24], 0, 20);
  v1736 = 15;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v212)
  {
    v216 = (unint64_t *)&v212->__shared_owners_;
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
    v218 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v211;
    *((_QWORD *)&v1732 + 1) = v212;
    if (v218)
    {
      v219 = (unint64_t *)&v218->__shared_owners_;
      do
        v220 = __ldaxr(v219);
      while (__stlxr(v220 - 1, v219));
      if (!v220)
      {
        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
        std::__shared_weak_count::__release_weak(v218);
      }
    }
  }
  else
  {
    v1732 = v211;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v221 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v221 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v221);
  v222 = v1732;
  v1732 = 0uLL;
  v223 = (std::__shared_weak_count *)*((_QWORD *)this + 76);
  *(_OWORD *)((char *)this + 600) = v222;
  if (v223)
  {
    v224 = (unint64_t *)&v223->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v1734;
  *(_OWORD *)((char *)this + 616) = v1733;
  *(_OWORD *)((char *)this + 632) = v226;
  *(_OWORD *)((char *)this + 648) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 660) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 676) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 692) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 88));
  v227 = v1740;
  *((_QWORD *)this + 87) = v1739;
  *((_QWORD *)this + 88) = v227;
  v228 = v1741;
  *((_QWORD *)this + 89) = v1741;
  if (v228)
  {
    v227[2] = v1629;
    v227 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 87) = v1629;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v227);
  v229 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v230 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  if (v212)
  {
    v232 = (unint64_t *)&v212->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v234 = v1665[10];
  v235 = *(_QWORD *)(v234 + 3368);
  v236 = *(std::__shared_weak_count **)(v234 + 3376);
  if (v236)
  {
    v237 = (unint64_t *)&v236->__shared_owners_;
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
  v239 = *(_OWORD *)&a3->colorFormatsCount;
  v1733 = *(_OWORD *)a3->colorFormats;
  v1734 = v239;
  v1732 = 0uLL;
  v1735[0] = 1;
  *(_OWORD *)&v1735[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v1735[20] = 7;
  memset(&v1735[24], 0, 20);
  v1736 = 15;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v236)
  {
    v240 = (unint64_t *)&v236->__shared_owners_;
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 1, v240));
    v242 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v235;
    *((_QWORD *)&v1732 + 1) = v236;
    if (v242)
    {
      v243 = (unint64_t *)&v242->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
  }
  else
  {
    v1732 = v235;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v245 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v245 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v245);
  v246 = v1732;
  v1732 = 0uLL;
  v247 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  *((_OWORD *)this + 45) = v246;
  if (v247)
  {
    v248 = (unint64_t *)&v247->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = v1734;
  *((_OWORD *)this + 46) = v1733;
  *((_OWORD *)this + 47) = v250;
  *((_OWORD *)this + 48) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 780) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 796) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 812) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 103));
  v251 = v1740;
  *((_QWORD *)this + 102) = v1739;
  *((_QWORD *)this + 103) = v251;
  v252 = v1741;
  *((_QWORD *)this + 104) = v1741;
  if (v252)
  {
    v251[2] = v1630;
    v251 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 102) = v1630;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v251);
  v253 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v254 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  if (v236)
  {
    v256 = (unint64_t *)&v236->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v258 = v1665[10];
  v259 = *(_QWORD *)(v258 + 3512);
  v260 = *(std::__shared_weak_count **)(v258 + 3520);
  if (v260)
  {
    v261 = (unint64_t *)&v260->__shared_owners_;
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
  }
  v1838 = 0;
  v1837 = 0uLL;
  if ((v263 & 1) == 0
  {
    qword_1EE57AA50 = 1;
    qword_1EE57AA58 = 0x1500000001;
    md::gbufferRenderTargetFormat(void)::_renderTargetFormat = 3uLL;
  }
  v1733 = md::gbufferRenderTargetFormat(void)::_renderTargetFormat;
  v1734 = *(_OWORD *)&qword_1EE57AA50;
  v1732 = 0uLL;
  v1735[0] = 0;
  *(_WORD *)&v1735[1] = v1688;
  v1735[3] = v1689;
  *(_OWORD *)&v1735[4] = xmmword_19FFB3060;
  *(_OWORD *)&v1735[20] = v1837;
  *(_QWORD *)&v1735[36] = v1838;
  v1736 = 15;
  v1737 = v1686;
  v1738 = v1687;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v260)
  {
    v264 = (unint64_t *)&v260->__shared_owners_;
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
    v266 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v259;
    *((_QWORD *)&v1732 + 1) = v260;
    if (v266)
    {
      v267 = (unint64_t *)&v266->__shared_owners_;
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
  }
  else
  {
    v1732 = v259;
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v269 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v269 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v269);
  v270 = v1732;
  v1732 = 0uLL;
  v271 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  *v1662 = v270;
  if (v271)
  {
    v272 = (unint64_t *)&v271->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = v1734;
  *(_OWORD *)((char *)this + 856) = v1733;
  *(_OWORD *)((char *)this + 872) = v274;
  *(_OWORD *)((char *)this + 888) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 900) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 916) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 932) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 118));
  v275 = v1740;
  *((_QWORD *)this + 117) = v1739;
  *((_QWORD *)this + 118) = v275;
  v276 = v1741;
  *((_QWORD *)this + 119) = v1741;
  if (v276)
  {
    v275[2] = v1631;
    v275 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 117) = v1631;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v275);
  v277 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v278 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  if (v260)
  {
    v280 = (unint64_t *)&v260->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1678, (uint64_t)v1662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v282 = v1679;
  if (v1679)
  {
    v283 = (unint64_t *)&v1679->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1676, (uint64_t)v1662, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v285 = v1677;
  if (v1677)
  {
    v286 = (unint64_t *)&v1677->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1674, (uint64_t)v1662, 1u, 0, 0, 0, 0, 1u, 0, 1u, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v288 = v1675;
  if (v1675)
  {
    v289 = (unint64_t *)&v1675->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  v291 = v1665[10];
  v292 = *(_QWORD *)(v291 + 3536);
  v293 = *(std::__shared_weak_count **)(v291 + 3544);
  if (v293)
  {
    v294 = (unint64_t *)&v293->__shared_owners_;
    do
      v295 = __ldxr(v294);
    while (__stxr(v295 + 1, v294));
  }
  v1838 = 0;
  v1837 = 0uLL;
  if ((v296 & 1) == 0
  {
    qword_1EE57AA50 = 1;
    qword_1EE57AA58 = 0x1500000001;
    md::gbufferRenderTargetFormat(void)::_renderTargetFormat = 3uLL;
  }
  v1733 = md::gbufferRenderTargetFormat(void)::_renderTargetFormat;
  v1734 = *(_OWORD *)&qword_1EE57AA50;
  v1732 = 0uLL;
  v1735[0] = 0;
  *(_WORD *)&v1735[1] = v1688;
  v1735[3] = v1689;
  *(_OWORD *)&v1735[4] = xmmword_19FFB3060;
  *(_OWORD *)&v1735[20] = v1837;
  *(_QWORD *)&v1735[36] = v1838;
  v1736 = 15;
  v1737 = v1686;
  v1738 = v1687;
  v1741 = 0;
  v1740 = 0;
  v1739 = &v1740;
  if (v293)
  {
    v297 = (unint64_t *)&v293->__shared_owners_;
    do
      v298 = __ldxr(v297);
    while (__stxr(v298 + 1, v297));
    v299 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1732 = v292;
    *((_QWORD *)&v1732 + 1) = v293;
    v300 = (uint64_t *)((char *)this + 2592);
    if (v299)
    {
      v301 = (unint64_t *)&v299->__shared_owners_;
      do
        v302 = __ldaxr(v301);
      while (__stlxr(v302 - 1, v301));
      if (!v302)
      {
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
      }
    }
  }
  else
  {
    v1732 = v292;
    v300 = (uint64_t *)((char *)this + 2592);
  }
  v1744 = 0;
  v1743 = 0;
  v1742 = &v1743;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1740);
  v303 = v1743;
  v1739 = v1742;
  v1740 = v1743;
  v1741 = v1744;
  if (v1744)
  {
    v1743[2] = &v1740;
    v1742 = &v1743;
    v1743 = 0;
    v1744 = 0;
    v303 = 0;
  }
  else
  {
    v1739 = &v1740;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v303);
  v304 = v1732;
  v1732 = 0uLL;
  v305 = (std::__shared_weak_count *)*((_QWORD *)this + 121);
  *((_OWORD *)this + 60) = v304;
  if (v305)
  {
    v306 = (unint64_t *)&v305->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = v1734;
  *((_OWORD *)this + 61) = v1733;
  *((_OWORD *)this + 62) = v308;
  *((_OWORD *)this + 63) = *(_OWORD *)v1735;
  *(_OWORD *)((char *)this + 1020) = *(_OWORD *)&v1735[12];
  *(_OWORD *)((char *)this + 1036) = *(_OWORD *)&v1735[28];
  *((_BYTE *)this + 1052) = v1736;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 133));
  v309 = v1740;
  *((_QWORD *)this + 132) = v1739;
  *((_QWORD *)this + 133) = v309;
  v310 = v1741;
  *((_QWORD *)this + 134) = v1741;
  if (v310)
  {
    v309[2] = v1628;
    v309 = 0;
    v1739 = &v1740;
    v1740 = 0;
    v1741 = 0;
  }
  else
  {
    *((_QWORD *)this + 132) = v1628;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v309);
  v311 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
  if (*((_QWORD *)&v1732 + 1))
  {
    v312 = (unint64_t *)(*((_QWORD *)&v1732 + 1) + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  if (v293)
  {
    v314 = (unint64_t *)&v293->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1672, (uint64_t)v1662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v316 = v1673;
  if (v1673)
  {
    v317 = (unint64_t *)&v1673->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1670, (uint64_t)v1662, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v319 = v1671;
  if (v1671)
  {
    v320 = (unint64_t *)&v1671->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v1668, (uint64_t)v1662, 1u, 0, 0, 0, 0, 1u, 0, 1u, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v322 = v1669;
  if (v1669)
  {
    v323 = (unint64_t *)&v1669->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = operator new(0xE8uLL);
  v325[1] = 0;
  v325[2] = 0;
  *v325 = &off_1E42E2940;
  v326 = ggl::BufferData::BufferData((uint64_t)(v325 + 3), qword_1EE561338, 2, 1, 6, 1);
  v325[28] = ggl::DaVinci::GroundAtmosphere::reflection(void)::reflection;
  v325[3] = &off_1E42B9BF0;
  *((_QWORD *)this + 148) = v326;
  v327 = (std::__shared_weak_count *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = v325;
  if (v327)
  {
    v328 = (unint64_t *)&v327->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  v330 = operator new(0xE8uLL);
  v330[1] = 0;
  v330[2] = 0;
  *v330 = &off_1E42E2908;
  v331 = ggl::BufferData::BufferData((uint64_t)(v330 + 3), qword_1EE54A508, 2, 1, 6, 1);
  v330[28] = ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
  v330[3] = &off_1E42B9BD0;
  *((_QWORD *)this + 156) = v331;
  v332 = (std::__shared_weak_count *)*((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = v330;
  if (v332)
  {
    v333 = (unint64_t *)&v332->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = operator new(0xE8uLL);
  v335[1] = 0;
  v335[2] = 0;
  *v335 = &off_1E42E2860;
  v336 = ggl::BufferData::BufferData((uint64_t)(v335 + 3), qword_1EE54A648, 2, 1, 6, 1);
  v335[28] = ggl::DaVinci::StyleShadow::reflection(void)::reflection;
  v335[3] = &off_1E42B9B30;
  *((_QWORD *)this + 160) = v336;
  v337 = (std::__shared_weak_count *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = v335;
  if (v337)
  {
    v338 = (unint64_t *)&v337->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = operator new(0xE8uLL);
  v340[1] = 0;
  v340[2] = 0;
  *v340 = &off_1E42E2860;
  v341 = ggl::BufferData::BufferData((uint64_t)(v340 + 3), qword_1EE54A648, 2, 1, 6, 1);
  v340[28] = ggl::DaVinci::StyleShadow::reflection(void)::reflection;
  v340[3] = &off_1E42B9B30;
  *((_QWORD *)this + 162) = v341;
  v342 = (std::__shared_weak_count *)*((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = v340;
  if (v342)
  {
    v343 = (unint64_t *)&v342->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  v345 = operator new(0xE8uLL);
  v345[1] = 0;
  v345[2] = 0;
  *v345 = &off_1E42E2860;
  v346 = ggl::BufferData::BufferData((uint64_t)(v345 + 3), qword_1EE54A648, 2, 1, 6, 1);
  v345[28] = ggl::DaVinci::StyleShadow::reflection(void)::reflection;
  v345[3] = &off_1E42B9B30;
  *((_QWORD *)this + 164) = v346;
  v347 = (std::__shared_weak_count *)*((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = v345;
  if (v347)
  {
    v348 = (unint64_t *)&v347->__shared_owners_;
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  v350 = operator new(0xE8uLL);
  v350[1] = 0;
  v350[2] = 0;
  *v350 = &off_1E42E2860;
  v351 = ggl::BufferData::BufferData((uint64_t)(v350 + 3), qword_1EE54A648, 2, 1, 6, 1);
  v350[28] = ggl::DaVinci::StyleShadow::reflection(void)::reflection;
  v350[3] = &off_1E42B9B30;
  *((_QWORD *)this + 166) = v351;
  v352 = (std::__shared_weak_count *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = v350;
  if (v352)
  {
    v353 = (unint64_t *)&v352->__shared_owners_;
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v355 = operator new(0xE8uLL);
  v355[1] = 0;
  v355[2] = 0;
  *v355 = &off_1E42E2A90;
  v356 = ggl::BufferData::BufferData((uint64_t)(v355 + 3), qword_1EE54A5C8, 2, 1, 6, 1);
  v355[28] = ggl::DaVinci::StyleTransitionToFlat::reflection(void)::reflection;
  v355[3] = &off_1E42B9D70;
  *((_QWORD *)this + 158) = v356;
  v357 = (std::__shared_weak_count *)*((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = v355;
  if (v357)
  {
    v358 = (unint64_t *)&v357->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = (uint64_t *)operator new();
  v1835[0] = &off_1E42D3010;
  v1835[1] = this;
  v1836 = v1835;
  v1833[0] = &off_1E42D3058;
  v1834 = v1833;
  v360[1] = 0;
  v360[2] = 0;
  *v360 = 0;
  {
    v1551 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1551, "GeoGL", 0xA3D02C1100000005);
  }
  v362 = ggl::Allocator::instance(void)::alloc;
  v360[4] = 0;
  v360[3] = v362;
  v360[5] = 0;
  v360[6] = 0;
  {
    v1552 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1552, "GeoGL", 0xA3D02C1100000005);
  }
  v360[7] = ggl::Allocator::instance(void)::alloc;
  v363 = (uint64_t)v1836;
  if (!v1836)
    goto LABEL_491;
  if (v1836 != v1835)
  {
    v363 = (*(uint64_t (**)(void))(*v1836 + 16))();
LABEL_491:
    v360[11] = v363;
    goto LABEL_493;
  }
  v360[11] = (uint64_t)(v360 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1835[0] + 24))(v1835, v360 + 8);
LABEL_493:
  v364 = (uint64_t)v1834;
  if (!v1834)
  {
LABEL_496:
    v360[15] = v364;
    goto LABEL_498;
  }
  if (v1834 != v1833)
  {
    v364 = (*(uint64_t (**)(void))(*v1834 + 16))();
    goto LABEL_496;
  }
  v360[15] = (uint64_t)(v360 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1833[0] + 24))((uint64_t)v1833, v360 + 12);
LABEL_498:
  v360[16] = 8000;
  v365 = *v360;
  if ((unint64_t)(v360[2] - *v360) >> 6 > 0x7C)
    goto LABEL_511;
  v366 = v360[1];
  v367 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v360[3] + 16))(v360[3], 8000, 8);
  v368 = v366 - v365;
  v369 = v367 + ((v366 - v365) & 0xFFFFFFFFFFFFFFF8);
  v371 = *v360;
  v370 = v360[1];
  v372 = v370 - *v360;
  if (v370 == *v360)
  {
    v374 = v367 + ((v366 - v365) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_509;
  }
  v373 = v372 - 8;
  if ((unint64_t)(v372 - 8) >= 0x58)
  {
    v374 = v367 + ((v366 - v365) & 0xFFFFFFFFFFFFFFF8);
    if (v370 - ((v368 & 0xFFFFFFFFFFFFFFF8) + v367) >= 0x20)
    {
      v375 = v368 >> 3;
      v376 = (v373 >> 3) + 1;
      v377 = (_OWORD *)(v367 + 8 * v375 - 16);
      v378 = (__int128 *)(v370 - 16);
      v379 = v376 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v380 = *v378;
        *(v377 - 1) = *(v378 - 1);
        *v377 = v380;
        v377 -= 2;
        v378 -= 2;
        v379 -= 4;
      }
      while (v379);
      v374 = v369 - 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
      v370 -= 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
      if (v376 == (v376 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_508;
    }
  }
  else
  {
    v374 = v367 + ((v366 - v365) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v381 = *(_QWORD *)(v370 - 8);
    v370 -= 8;
    *(_QWORD *)(v374 - 8) = v381;
    v374 -= 8;
  }
  while (v370 != v371);
LABEL_508:
  v370 = *v360;
LABEL_509:
  *v360 = v374;
  v360[1] = v369;
  v382 = v360[2];
  v360[2] = v367 + 8000;
  if (v370)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v360[3] + 40))(v360[3], v370, v382 - v370);
LABEL_511:
  v383 = v360[4];
  if ((unint64_t)(v360[6] - v383) >> 6 > 0x7C)
    goto LABEL_524;
  v384 = v360[5];
  v385 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v360[7] + 16))(v360[7], 8000, 8);
  v386 = v384 - v383;
  v387 = v385 + ((v384 - v383) & 0xFFFFFFFFFFFFFFF8);
  v389 = v360[4];
  v388 = v360[5];
  v390 = v388 - v389;
  if (v388 == v389)
  {
    v392 = v385 + ((v384 - v383) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_522;
  }
  v391 = v390 - 8;
  if ((unint64_t)(v390 - 8) >= 0x58)
  {
    v392 = v385 + ((v384 - v383) & 0xFFFFFFFFFFFFFFF8);
    if (v388 - (v386 & 0xFFFFFFFFFFFFFFF8) - v385 >= 0x20)
    {
      v393 = v386 >> 3;
      v394 = (v391 >> 3) + 1;
      v395 = (_OWORD *)(v385 + 8 * v393 - 16);
      v396 = (__int128 *)(v388 - 16);
      v397 = v394 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v398 = *v396;
        *(v395 - 1) = *(v396 - 1);
        *v395 = v398;
        v395 -= 2;
        v396 -= 2;
        v397 -= 4;
      }
      while (v397);
      v392 = v387 - 8 * (v394 & 0x3FFFFFFFFFFFFFFCLL);
      v388 -= 8 * (v394 & 0x3FFFFFFFFFFFFFFCLL);
      if (v394 == (v394 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_521;
    }
  }
  else
  {
    v392 = v385 + ((v384 - v383) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v399 = *(_QWORD *)(v388 - 8);
    v388 -= 8;
    *(_QWORD *)(v392 - 8) = v399;
    v392 -= 8;
  }
  while (v388 != v389);
LABEL_521:
  v388 = v360[4];
LABEL_522:
  v360[4] = v392;
  v360[5] = v387;
  v400 = v360[6];
  v360[6] = v385 + 8000;
  if (v388)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v360[7] + 40))(v360[7], v388, v400 - v388);
LABEL_524:
  v401 = *v1657;
  *v1657 = (uint64_t)v360;
  if (v401)
  {
    v402 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v401);
    MEMORY[0x1A1AF4E00](v402, 0x10A0C40D234DDC7);
  }
  v403 = v1834;
  if (v1834 == v1833)
  {
    v404 = 4;
    v403 = v1833;
  }
  else
  {
    if (!v1834)
      goto LABEL_531;
    v404 = 5;
  }
  (*(void (**)(void))(*v403 + 8 * v404))();
LABEL_531:
  v405 = v1836;
  if (v1836 == v1835)
  {
    v406 = 4;
    v405 = v1835;
    goto LABEL_535;
  }
  if (v1836)
  {
    v406 = 5;
LABEL_535:
    (*(void (**)(void))(*v405 + 8 * v406))();
  }
  v407 = (uint64_t *)operator new();
  v1831[0] = &off_1E42D30A0;
  v1831[1] = this;
  v1832 = v1831;
  v1829[0] = &off_1E42D30E8;
  v1830 = v1829;
  v407[1] = 0;
  v407[2] = 0;
  *v407 = 0;
  {
    v1553 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1553, "GeoGL", 0xA3D02C1100000005);
  }
  v409 = ggl::Allocator::instance(void)::alloc;
  v407[4] = 0;
  v407[3] = v409;
  v407[5] = 0;
  v407[6] = 0;
  {
    v1554 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1554, "GeoGL", 0xA3D02C1100000005);
  }
  v407[7] = ggl::Allocator::instance(void)::alloc;
  v410 = (uint64_t)v1832;
  if (!v1832)
    goto LABEL_541;
  if (v1832 != v1831)
  {
    v410 = (*(uint64_t (**)(void))(*v1832 + 16))();
LABEL_541:
    v407[11] = v410;
    goto LABEL_543;
  }
  v407[11] = (uint64_t)(v407 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1831[0] + 24))(v1831, v407 + 8);
LABEL_543:
  v411 = (uint64_t)v1830;
  if (!v1830)
  {
LABEL_546:
    v407[15] = v411;
    goto LABEL_548;
  }
  if (v1830 != v1829)
  {
    v411 = (*(uint64_t (**)(void))(*v1830 + 16))();
    goto LABEL_546;
  }
  v407[15] = (uint64_t)(v407 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1829[0] + 24))((uint64_t)v1829, v407 + 12);
LABEL_548:
  v407[16] = 8000;
  v412 = *v407;
  if ((unint64_t)(v407[2] - *v407) >> 6 > 0x7C)
    goto LABEL_561;
  v413 = v407[1];
  v414 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407[3] + 16))(v407[3], 8000, 8);
  v415 = v413 - v412;
  v416 = v414 + ((v413 - v412) & 0xFFFFFFFFFFFFFFF8);
  v418 = *v407;
  v417 = v407[1];
  v419 = v417 - *v407;
  if (v417 == *v407)
  {
    v421 = v414 + ((v413 - v412) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_559;
  }
  v420 = v419 - 8;
  if ((unint64_t)(v419 - 8) >= 0x58)
  {
    v421 = v414 + ((v413 - v412) & 0xFFFFFFFFFFFFFFF8);
    if (v417 - (v415 & 0xFFFFFFFFFFFFFFF8) - v414 >= 0x20)
    {
      v422 = v415 >> 3;
      v423 = (v420 >> 3) + 1;
      v424 = (_OWORD *)(v414 + 8 * v422 - 16);
      v425 = (__int128 *)(v417 - 16);
      v426 = v423 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v427 = *v425;
        *(v424 - 1) = *(v425 - 1);
        *v424 = v427;
        v424 -= 2;
        v425 -= 2;
        v426 -= 4;
      }
      while (v426);
      v421 = v416 - 8 * (v423 & 0x3FFFFFFFFFFFFFFCLL);
      v417 -= 8 * (v423 & 0x3FFFFFFFFFFFFFFCLL);
      if (v423 == (v423 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_558;
    }
  }
  else
  {
    v421 = v414 + ((v413 - v412) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v428 = *(_QWORD *)(v417 - 8);
    v417 -= 8;
    *(_QWORD *)(v421 - 8) = v428;
    v421 -= 8;
  }
  while (v417 != v418);
LABEL_558:
  v417 = *v407;
LABEL_559:
  *v407 = v421;
  v407[1] = v416;
  v429 = v407[2];
  v407[2] = v414 + 8000;
  if (v417)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407[3] + 40))(v407[3], v417, v429 - v417);
LABEL_561:
  v430 = v407[4];
  if ((unint64_t)(v407[6] - v430) >> 6 > 0x7C)
    goto LABEL_574;
  v431 = v407[5];
  v432 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407[7] + 16))(v407[7], 8000, 8);
  v433 = v431 - v430;
  v434 = v432 + ((v431 - v430) & 0xFFFFFFFFFFFFFFF8);
  v436 = v407[4];
  v435 = v407[5];
  v437 = v435 - v436;
  if (v435 == v436)
  {
    v439 = v432 + ((v431 - v430) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_572;
  }
  v438 = v437 - 8;
  if ((unint64_t)(v437 - 8) >= 0x58)
  {
    v439 = v432 + ((v431 - v430) & 0xFFFFFFFFFFFFFFF8);
    if (v435 - (v433 & 0xFFFFFFFFFFFFFFF8) - v432 >= 0x20)
    {
      v440 = v433 >> 3;
      v441 = (v438 >> 3) + 1;
      v442 = (_OWORD *)(v432 + 8 * v440 - 16);
      v443 = (__int128 *)(v435 - 16);
      v444 = v441 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v445 = *v443;
        *(v442 - 1) = *(v443 - 1);
        *v442 = v445;
        v442 -= 2;
        v443 -= 2;
        v444 -= 4;
      }
      while (v444);
      v439 = v434 - 8 * (v441 & 0x3FFFFFFFFFFFFFFCLL);
      v435 -= 8 * (v441 & 0x3FFFFFFFFFFFFFFCLL);
      if (v441 == (v441 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_571;
    }
  }
  else
  {
    v439 = v432 + ((v431 - v430) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v446 = *(_QWORD *)(v435 - 8);
    v435 -= 8;
    *(_QWORD *)(v439 - 8) = v446;
    v439 -= 8;
  }
  while (v435 != v436);
LABEL_571:
  v435 = v407[4];
LABEL_572:
  v407[4] = v439;
  v407[5] = v434;
  v447 = v407[6];
  v407[6] = v432 + 8000;
  if (v435)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407[7] + 40))(v407[7], v435, v447 - v435);
LABEL_574:
  v448 = *v1656;
  *v1656 = (uint64_t)v407;
  if (v448)
  {
    v449 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v448);
    MEMORY[0x1A1AF4E00](v449, 0x10A0C40D234DDC7);
  }
  v450 = v1830;
  if (v1830 == v1829)
  {
    v451 = 4;
    v450 = v1829;
  }
  else
  {
    if (!v1830)
      goto LABEL_581;
    v451 = 5;
  }
  (*(void (**)(void))(*v450 + 8 * v451))();
LABEL_581:
  v452 = v1832;
  if (v1832 == v1831)
  {
    v453 = 4;
    v452 = v1831;
    goto LABEL_585;
  }
  if (v1832)
  {
    v453 = 5;
LABEL_585:
    (*(void (**)(void))(*v452 + 8 * v453))();
  }
  v454 = (uint64_t *)operator new();
  v1827[0] = &off_1E42D3130;
  v1827[1] = this;
  v1828 = v1827;
  v1825[0] = &off_1E42D3178;
  v1826 = v1825;
  v454[1] = 0;
  v454[2] = 0;
  *v454 = 0;
  {
    v1555 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1555, "GeoGL", 0xA3D02C1100000005);
  }
  v456 = ggl::Allocator::instance(void)::alloc;
  v454[4] = 0;
  v454[3] = v456;
  v454[5] = 0;
  v454[6] = 0;
  {
    v1556 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1556, "GeoGL", 0xA3D02C1100000005);
  }
  v454[7] = ggl::Allocator::instance(void)::alloc;
  v457 = (uint64_t)v1828;
  if (!v1828)
    goto LABEL_591;
  if (v1828 != v1827)
  {
    v457 = (*(uint64_t (**)(void))(*v1828 + 16))();
LABEL_591:
    v454[11] = v457;
    goto LABEL_593;
  }
  v454[11] = (uint64_t)(v454 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1827[0] + 24))((uint64_t)v1827, v454 + 8);
LABEL_593:
  v458 = (uint64_t)v1826;
  if (!v1826)
  {
LABEL_596:
    v454[15] = v458;
    goto LABEL_598;
  }
  if (v1826 != v1825)
  {
    v458 = (*(uint64_t (**)(void))(*v1826 + 16))();
    goto LABEL_596;
  }
  v454[15] = (uint64_t)(v454 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1825[0] + 24))((uint64_t)v1825, v454 + 12);
LABEL_598:
  v454[16] = 8000;
  v459 = *v454;
  if ((unint64_t)(v454[2] - *v454) >> 6 > 0x7C)
    goto LABEL_611;
  v460 = v454[1];
  v461 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v454[3] + 16))(v454[3], 8000, 8);
  v462 = v460 - v459;
  v463 = v461 + ((v460 - v459) & 0xFFFFFFFFFFFFFFF8);
  v465 = *v454;
  v464 = v454[1];
  v466 = v464 - *v454;
  if (v464 == *v454)
  {
    v468 = v461 + ((v460 - v459) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_609;
  }
  v467 = v466 - 8;
  if ((unint64_t)(v466 - 8) >= 0x58)
  {
    v468 = v461 + ((v460 - v459) & 0xFFFFFFFFFFFFFFF8);
    if (v464 - (v462 & 0xFFFFFFFFFFFFFFF8) - v461 >= 0x20)
    {
      v469 = v462 >> 3;
      v470 = (v467 >> 3) + 1;
      v471 = (_OWORD *)(v461 + 8 * v469 - 16);
      v472 = (__int128 *)(v464 - 16);
      v473 = v470 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v474 = *v472;
        *(v471 - 1) = *(v472 - 1);
        *v471 = v474;
        v471 -= 2;
        v472 -= 2;
        v473 -= 4;
      }
      while (v473);
      v468 = v463 - 8 * (v470 & 0x3FFFFFFFFFFFFFFCLL);
      v464 -= 8 * (v470 & 0x3FFFFFFFFFFFFFFCLL);
      if (v470 == (v470 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_608;
    }
  }
  else
  {
    v468 = v461 + ((v460 - v459) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v475 = *(_QWORD *)(v464 - 8);
    v464 -= 8;
    *(_QWORD *)(v468 - 8) = v475;
    v468 -= 8;
  }
  while (v464 != v465);
LABEL_608:
  v464 = *v454;
LABEL_609:
  *v454 = v468;
  v454[1] = v463;
  v476 = v454[2];
  v454[2] = v461 + 8000;
  if (v464)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v454[3] + 40))(v454[3], v464, v476 - v464);
LABEL_611:
  v477 = v454[4];
  if ((unint64_t)(v454[6] - v477) >> 6 > 0x7C)
    goto LABEL_624;
  v478 = v454[5];
  v479 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v454[7] + 16))(v454[7], 8000, 8);
  v480 = v478 - v477;
  v481 = v479 + ((v478 - v477) & 0xFFFFFFFFFFFFFFF8);
  v483 = v454[4];
  v482 = v454[5];
  v484 = v482 - v483;
  if (v482 == v483)
  {
    v486 = v479 + ((v478 - v477) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_622;
  }
  v485 = v484 - 8;
  if ((unint64_t)(v484 - 8) >= 0x58)
  {
    v486 = v479 + ((v478 - v477) & 0xFFFFFFFFFFFFFFF8);
    if (v482 - (v480 & 0xFFFFFFFFFFFFFFF8) - v479 >= 0x20)
    {
      v487 = v480 >> 3;
      v488 = (v485 >> 3) + 1;
      v489 = (_OWORD *)(v479 + 8 * v487 - 16);
      v490 = (__int128 *)(v482 - 16);
      v491 = v488 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v492 = *v490;
        *(v489 - 1) = *(v490 - 1);
        *v489 = v492;
        v489 -= 2;
        v490 -= 2;
        v491 -= 4;
      }
      while (v491);
      v486 = v481 - 8 * (v488 & 0x3FFFFFFFFFFFFFFCLL);
      v482 -= 8 * (v488 & 0x3FFFFFFFFFFFFFFCLL);
      if (v488 == (v488 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_621;
    }
  }
  else
  {
    v486 = v479 + ((v478 - v477) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v493 = *(_QWORD *)(v482 - 8);
    v482 -= 8;
    *(_QWORD *)(v486 - 8) = v493;
    v486 -= 8;
  }
  while (v482 != v483);
LABEL_621:
  v482 = v454[4];
LABEL_622:
  v454[4] = v486;
  v454[5] = v481;
  v494 = v454[6];
  v454[6] = v479 + 8000;
  if (v482)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v454[7] + 40))(v454[7], v482, v494 - v482);
LABEL_624:
  v495 = *v1655;
  *v1655 = (uint64_t)v454;
  if (v495)
  {
    v496 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v495);
    MEMORY[0x1A1AF4E00](v496, 0x10A0C40D234DDC7);
  }
  v497 = v1826;
  if (v1826 == v1825)
  {
    v498 = 4;
    v497 = v1825;
  }
  else
  {
    if (!v1826)
      goto LABEL_631;
    v498 = 5;
  }
  (*(void (**)(void))(*v497 + 8 * v498))();
LABEL_631:
  v499 = v1828;
  if (v1828 == v1827)
  {
    v500 = 4;
    v499 = v1827;
    goto LABEL_635;
  }
  if (v1828)
  {
    v500 = 5;
LABEL_635:
    (*(void (**)(void))(*v499 + 8 * v500))();
  }
  v501 = (uint64_t *)operator new();
  v1823[0] = &off_1E42D31C0;
  v1823[1] = this;
  v1824 = v1823;
  v1821[0] = &off_1E42D3208;
  v1822 = v1821;
  v501[1] = 0;
  v501[2] = 0;
  *v501 = 0;
  {
    v1557 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1557, "GeoGL", 0xA3D02C1100000005);
  }
  v503 = ggl::Allocator::instance(void)::alloc;
  v501[4] = 0;
  v501[3] = v503;
  v501[5] = 0;
  v501[6] = 0;
  {
    v1558 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1558, "GeoGL", 0xA3D02C1100000005);
  }
  v501[7] = ggl::Allocator::instance(void)::alloc;
  v504 = (uint64_t)v1824;
  if (!v1824)
    goto LABEL_641;
  if (v1824 != v1823)
  {
    v504 = (*(uint64_t (**)(void))(*v1824 + 16))();
LABEL_641:
    v501[11] = v504;
    goto LABEL_643;
  }
  v501[11] = (uint64_t)(v501 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1823[0] + 24))((uint64_t)v1823, v501 + 8);
LABEL_643:
  v505 = (uint64_t)v1822;
  if (!v1822)
  {
LABEL_646:
    v501[15] = v505;
    goto LABEL_648;
  }
  if (v1822 != v1821)
  {
    v505 = (*(uint64_t (**)(void))(*v1822 + 16))();
    goto LABEL_646;
  }
  v501[15] = (uint64_t)(v501 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1821[0] + 24))((uint64_t)v1821, v501 + 12);
LABEL_648:
  v501[16] = 8000;
  v506 = *v501;
  if ((unint64_t)(v501[2] - *v501) >> 6 > 0x7C)
    goto LABEL_661;
  v507 = v501[1];
  v508 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v501[3] + 16))(v501[3], 8000, 8);
  v509 = v507 - v506;
  v510 = v508 + ((v507 - v506) & 0xFFFFFFFFFFFFFFF8);
  v512 = *v501;
  v511 = v501[1];
  v513 = v511 - *v501;
  if (v511 == *v501)
  {
    v515 = v508 + ((v507 - v506) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_659;
  }
  v514 = v513 - 8;
  if ((unint64_t)(v513 - 8) >= 0x58)
  {
    v515 = v508 + ((v507 - v506) & 0xFFFFFFFFFFFFFFF8);
    if (v511 - (v509 & 0xFFFFFFFFFFFFFFF8) - v508 >= 0x20)
    {
      v516 = v509 >> 3;
      v517 = (v514 >> 3) + 1;
      v518 = (_OWORD *)(v508 + 8 * v516 - 16);
      v519 = (__int128 *)(v511 - 16);
      v520 = v517 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v521 = *v519;
        *(v518 - 1) = *(v519 - 1);
        *v518 = v521;
        v518 -= 2;
        v519 -= 2;
        v520 -= 4;
      }
      while (v520);
      v515 = v510 - 8 * (v517 & 0x3FFFFFFFFFFFFFFCLL);
      v511 -= 8 * (v517 & 0x3FFFFFFFFFFFFFFCLL);
      if (v517 == (v517 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_658;
    }
  }
  else
  {
    v515 = v508 + ((v507 - v506) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v522 = *(_QWORD *)(v511 - 8);
    v511 -= 8;
    *(_QWORD *)(v515 - 8) = v522;
    v515 -= 8;
  }
  while (v511 != v512);
LABEL_658:
  v511 = *v501;
LABEL_659:
  *v501 = v515;
  v501[1] = v510;
  v523 = v501[2];
  v501[2] = v508 + 8000;
  if (v511)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v501[3] + 40))(v501[3], v511, v523 - v511);
LABEL_661:
  v524 = v501[4];
  if ((unint64_t)(v501[6] - v524) >> 6 > 0x7C)
    goto LABEL_674;
  v525 = v501[5];
  v526 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v501[7] + 16))(v501[7], 8000, 8);
  v527 = v525 - v524;
  v528 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
  v530 = v501[4];
  v529 = v501[5];
  v531 = v529 - v530;
  if (v529 == v530)
  {
    v533 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_672;
  }
  v532 = v531 - 8;
  if ((unint64_t)(v531 - 8) >= 0x58)
  {
    v533 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
    if (v529 - (v527 & 0xFFFFFFFFFFFFFFF8) - v526 >= 0x20)
    {
      v534 = v527 >> 3;
      v535 = (v532 >> 3) + 1;
      v536 = (_OWORD *)(v526 + 8 * v534 - 16);
      v537 = (__int128 *)(v529 - 16);
      v538 = v535 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v539 = *v537;
        *(v536 - 1) = *(v537 - 1);
        *v536 = v539;
        v536 -= 2;
        v537 -= 2;
        v538 -= 4;
      }
      while (v538);
      v533 = v528 - 8 * (v535 & 0x3FFFFFFFFFFFFFFCLL);
      v529 -= 8 * (v535 & 0x3FFFFFFFFFFFFFFCLL);
      if (v535 == (v535 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_671;
    }
  }
  else
  {
    v533 = v526 + ((v525 - v524) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v540 = *(_QWORD *)(v529 - 8);
    v529 -= 8;
    *(_QWORD *)(v533 - 8) = v540;
    v533 -= 8;
  }
  while (v529 != v530);
LABEL_671:
  v529 = v501[4];
LABEL_672:
  v501[4] = v533;
  v501[5] = v528;
  v541 = v501[6];
  v501[6] = v526 + 8000;
  if (v529)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v501[7] + 40))(v501[7], v529, v541 - v529);
LABEL_674:
  v542 = *v1654;
  *v1654 = (uint64_t)v501;
  if (v542)
  {
    v543 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v542);
    MEMORY[0x1A1AF4E00](v543, 0x10A0C40D234DDC7);
  }
  v544 = v1822;
  if (v1822 == v1821)
  {
    v545 = 4;
    v544 = v1821;
  }
  else
  {
    if (!v1822)
      goto LABEL_681;
    v545 = 5;
  }
  (*(void (**)(void))(*v544 + 8 * v545))();
LABEL_681:
  v546 = v1824;
  if (v1824 == v1823)
  {
    v547 = 4;
    v546 = v1823;
    goto LABEL_685;
  }
  if (v1824)
  {
    v547 = 5;
LABEL_685:
    (*(void (**)(void))(*v546 + 8 * v547))();
  }
  v548 = (uint64_t *)operator new();
  v1819[0] = &off_1E42D3250;
  v1819[1] = this;
  v1820 = v1819;
  v1817[0] = &off_1E42D3298;
  v1818 = v1817;
  v548[1] = 0;
  v548[2] = 0;
  *v548 = 0;
  {
    v1559 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1559, "GeoGL", 0xA3D02C1100000005);
  }
  v550 = ggl::Allocator::instance(void)::alloc;
  v548[4] = 0;
  v548[3] = v550;
  v548[5] = 0;
  v548[6] = 0;
  {
    v1560 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1560, "GeoGL", 0xA3D02C1100000005);
  }
  v548[7] = ggl::Allocator::instance(void)::alloc;
  v551 = (uint64_t)v1820;
  if (!v1820)
    goto LABEL_691;
  if (v1820 != v1819)
  {
    v551 = (*(uint64_t (**)(void))(*v1820 + 16))();
LABEL_691:
    v548[11] = v551;
    goto LABEL_693;
  }
  v548[11] = (uint64_t)(v548 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1819[0] + 24))((uint64_t)v1819, v548 + 8);
LABEL_693:
  v552 = (uint64_t)v1818;
  if (!v1818)
  {
LABEL_696:
    v548[15] = v552;
    goto LABEL_698;
  }
  if (v1818 != v1817)
  {
    v552 = (*(uint64_t (**)(void))(*v1818 + 16))();
    goto LABEL_696;
  }
  v548[15] = (uint64_t)(v548 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1817[0] + 24))((uint64_t)v1817, v548 + 12);
LABEL_698:
  v548[16] = 8000;
  v553 = *v548;
  if ((unint64_t)(v548[2] - *v548) >> 6 > 0x7C)
    goto LABEL_711;
  v554 = v548[1];
  v555 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v548[3] + 16))(v548[3], 8000, 8);
  v556 = v554 - v553;
  v557 = v555 + ((v554 - v553) & 0xFFFFFFFFFFFFFFF8);
  v559 = *v548;
  v558 = v548[1];
  v560 = v558 - *v548;
  if (v558 == *v548)
  {
    v562 = v555 + ((v554 - v553) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_709;
  }
  v561 = v560 - 8;
  if ((unint64_t)(v560 - 8) >= 0x58)
  {
    v562 = v555 + ((v554 - v553) & 0xFFFFFFFFFFFFFFF8);
    if (v558 - (v556 & 0xFFFFFFFFFFFFFFF8) - v555 >= 0x20)
    {
      v563 = v556 >> 3;
      v564 = (v561 >> 3) + 1;
      v565 = (_OWORD *)(v555 + 8 * v563 - 16);
      v566 = (__int128 *)(v558 - 16);
      v567 = v564 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v568 = *v566;
        *(v565 - 1) = *(v566 - 1);
        *v565 = v568;
        v565 -= 2;
        v566 -= 2;
        v567 -= 4;
      }
      while (v567);
      v562 = v557 - 8 * (v564 & 0x3FFFFFFFFFFFFFFCLL);
      v558 -= 8 * (v564 & 0x3FFFFFFFFFFFFFFCLL);
      if (v564 == (v564 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_708;
    }
  }
  else
  {
    v562 = v555 + ((v554 - v553) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v569 = *(_QWORD *)(v558 - 8);
    v558 -= 8;
    *(_QWORD *)(v562 - 8) = v569;
    v562 -= 8;
  }
  while (v558 != v559);
LABEL_708:
  v558 = *v548;
LABEL_709:
  *v548 = v562;
  v548[1] = v557;
  v570 = v548[2];
  v548[2] = v555 + 8000;
  if (v558)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v548[3] + 40))(v548[3], v558, v570 - v558);
LABEL_711:
  v571 = v548[4];
  if ((unint64_t)(v548[6] - v571) >> 6 > 0x7C)
    goto LABEL_724;
  v572 = v548[5];
  v573 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v548[7] + 16))(v548[7], 8000, 8);
  v574 = v572 - v571;
  v575 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
  v577 = v548[4];
  v576 = v548[5];
  v578 = v576 - v577;
  if (v576 == v577)
  {
    v580 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_722;
  }
  v579 = v578 - 8;
  if ((unint64_t)(v578 - 8) >= 0x58)
  {
    v580 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
    if (v576 - (v574 & 0xFFFFFFFFFFFFFFF8) - v573 >= 0x20)
    {
      v581 = v574 >> 3;
      v582 = (v579 >> 3) + 1;
      v583 = (_OWORD *)(v573 + 8 * v581 - 16);
      v584 = (__int128 *)(v576 - 16);
      v585 = v582 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v586 = *v584;
        *(v583 - 1) = *(v584 - 1);
        *v583 = v586;
        v583 -= 2;
        v584 -= 2;
        v585 -= 4;
      }
      while (v585);
      v580 = v575 - 8 * (v582 & 0x3FFFFFFFFFFFFFFCLL);
      v576 -= 8 * (v582 & 0x3FFFFFFFFFFFFFFCLL);
      if (v582 == (v582 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_721;
    }
  }
  else
  {
    v580 = v573 + ((v572 - v571) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v587 = *(_QWORD *)(v576 - 8);
    v576 -= 8;
    *(_QWORD *)(v580 - 8) = v587;
    v580 -= 8;
  }
  while (v576 != v577);
LABEL_721:
  v576 = v548[4];
LABEL_722:
  v548[4] = v580;
  v548[5] = v575;
  v588 = v548[6];
  v548[6] = v573 + 8000;
  if (v576)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v548[7] + 40))(v548[7], v576, v588 - v576);
LABEL_724:
  v589 = *v1653;
  *v1653 = (uint64_t)v548;
  if (v589)
  {
    v590 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v589);
    MEMORY[0x1A1AF4E00](v590, 0x10A0C40D234DDC7);
  }
  v591 = v1818;
  if (v1818 == v1817)
  {
    v592 = 4;
    v591 = v1817;
  }
  else
  {
    if (!v1818)
      goto LABEL_731;
    v592 = 5;
  }
  (*(void (**)(void))(*v591 + 8 * v592))();
LABEL_731:
  v593 = v1820;
  if (v1820 == v1819)
  {
    v594 = 4;
    v593 = v1819;
    goto LABEL_735;
  }
  if (v1820)
  {
    v594 = 5;
LABEL_735:
    (*(void (**)(void))(*v593 + 8 * v594))();
  }
  v595 = (uint64_t *)operator new();
  v1815[0] = &off_1E42D32E0;
  v1815[1] = this;
  v1816 = v1815;
  v1813[0] = &off_1E42D3328;
  v1814 = v1813;
  v595[1] = 0;
  v595[2] = 0;
  *v595 = 0;
  {
    v1561 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1561, "GeoGL", 0xA3D02C1100000005);
  }
  v597 = ggl::Allocator::instance(void)::alloc;
  v595[4] = 0;
  v595[3] = v597;
  v595[5] = 0;
  v595[6] = 0;
  {
    v1562 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1562, "GeoGL", 0xA3D02C1100000005);
  }
  v595[7] = ggl::Allocator::instance(void)::alloc;
  v598 = (uint64_t)v1816;
  if (!v1816)
    goto LABEL_741;
  if (v1816 != v1815)
  {
    v598 = (*(uint64_t (**)(void))(*v1816 + 16))();
LABEL_741:
    v595[11] = v598;
    goto LABEL_743;
  }
  v595[11] = (uint64_t)(v595 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1815[0] + 24))((uint64_t)v1815, v595 + 8);
LABEL_743:
  v599 = (uint64_t)v1814;
  if (!v1814)
  {
LABEL_746:
    v595[15] = v599;
    goto LABEL_748;
  }
  if (v1814 != v1813)
  {
    v599 = (*(uint64_t (**)(void))(*v1814 + 16))();
    goto LABEL_746;
  }
  v595[15] = (uint64_t)(v595 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1813[0] + 24))((uint64_t)v1813, v595 + 12);
LABEL_748:
  v595[16] = 8000;
  v600 = *v595;
  if ((unint64_t)(v595[2] - *v595) >> 6 > 0x7C)
    goto LABEL_761;
  v601 = v595[1];
  v602 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v595[3] + 16))(v595[3], 8000, 8);
  v603 = v601 - v600;
  v604 = v602 + ((v601 - v600) & 0xFFFFFFFFFFFFFFF8);
  v606 = *v595;
  v605 = v595[1];
  v607 = v605 - *v595;
  if (v605 == *v595)
  {
    v609 = v602 + ((v601 - v600) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_759;
  }
  v608 = v607 - 8;
  if ((unint64_t)(v607 - 8) >= 0x58)
  {
    v609 = v602 + ((v601 - v600) & 0xFFFFFFFFFFFFFFF8);
    if (v605 - (v603 & 0xFFFFFFFFFFFFFFF8) - v602 >= 0x20)
    {
      v610 = v603 >> 3;
      v611 = (v608 >> 3) + 1;
      v612 = (_OWORD *)(v602 + 8 * v610 - 16);
      v613 = (__int128 *)(v605 - 16);
      v614 = v611 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v615 = *v613;
        *(v612 - 1) = *(v613 - 1);
        *v612 = v615;
        v612 -= 2;
        v613 -= 2;
        v614 -= 4;
      }
      while (v614);
      v609 = v604 - 8 * (v611 & 0x3FFFFFFFFFFFFFFCLL);
      v605 -= 8 * (v611 & 0x3FFFFFFFFFFFFFFCLL);
      if (v611 == (v611 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_758;
    }
  }
  else
  {
    v609 = v602 + ((v601 - v600) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v616 = *(_QWORD *)(v605 - 8);
    v605 -= 8;
    *(_QWORD *)(v609 - 8) = v616;
    v609 -= 8;
  }
  while (v605 != v606);
LABEL_758:
  v605 = *v595;
LABEL_759:
  *v595 = v609;
  v595[1] = v604;
  v617 = v595[2];
  v595[2] = v602 + 8000;
  if (v605)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v595[3] + 40))(v595[3], v605, v617 - v605);
LABEL_761:
  v618 = v595[4];
  if ((unint64_t)(v595[6] - v618) >> 6 > 0x7C)
    goto LABEL_774;
  v619 = v595[5];
  v620 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v595[7] + 16))(v595[7], 8000, 8);
  v621 = v619 - v618;
  v622 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
  v624 = v595[4];
  v623 = v595[5];
  v625 = v623 - v624;
  if (v623 == v624)
  {
    v627 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_772;
  }
  v626 = v625 - 8;
  if ((unint64_t)(v625 - 8) >= 0x58)
  {
    v627 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
    if (v623 - (v621 & 0xFFFFFFFFFFFFFFF8) - v620 >= 0x20)
    {
      v628 = v621 >> 3;
      v629 = (v626 >> 3) + 1;
      v630 = (_OWORD *)(v620 + 8 * v628 - 16);
      v631 = (__int128 *)(v623 - 16);
      v632 = v629 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v633 = *v631;
        *(v630 - 1) = *(v631 - 1);
        *v630 = v633;
        v630 -= 2;
        v631 -= 2;
        v632 -= 4;
      }
      while (v632);
      v627 = v622 - 8 * (v629 & 0x3FFFFFFFFFFFFFFCLL);
      v623 -= 8 * (v629 & 0x3FFFFFFFFFFFFFFCLL);
      if (v629 == (v629 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_771;
    }
  }
  else
  {
    v627 = v620 + ((v619 - v618) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v634 = *(_QWORD *)(v623 - 8);
    v623 -= 8;
    *(_QWORD *)(v627 - 8) = v634;
    v627 -= 8;
  }
  while (v623 != v624);
LABEL_771:
  v623 = v595[4];
LABEL_772:
  v595[4] = v627;
  v595[5] = v622;
  v635 = v595[6];
  v595[6] = v620 + 8000;
  if (v623)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v595[7] + 40))(v595[7], v623, v635 - v623);
LABEL_774:
  v636 = *v1652;
  *v1652 = (uint64_t)v595;
  if (v636)
  {
    v637 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v636);
    MEMORY[0x1A1AF4E00](v637, 0x10A0C40D234DDC7);
  }
  v638 = v1814;
  if (v1814 == v1813)
  {
    v639 = 4;
    v638 = v1813;
  }
  else
  {
    if (!v1814)
      goto LABEL_781;
    v639 = 5;
  }
  (*(void (**)(void))(*v638 + 8 * v639))();
LABEL_781:
  v640 = v1816;
  if (v1816 == v1815)
  {
    v641 = 4;
    v640 = v1815;
    goto LABEL_785;
  }
  if (v1816)
  {
    v641 = 5;
LABEL_785:
    (*(void (**)(void))(*v640 + 8 * v641))();
  }
  v642 = (uint64_t *)operator new();
  v1811[0] = &off_1E42D3370;
  v1811[1] = this;
  v1812 = v1811;
  v1809[0] = &off_1E42D77D8;
  v1810 = v1809;
  v642[1] = 0;
  v642[2] = 0;
  *v642 = 0;
  {
    v1563 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1563, "GeoGL", 0xA3D02C1100000005);
  }
  v644 = ggl::Allocator::instance(void)::alloc;
  v642[4] = 0;
  v642[3] = v644;
  v642[5] = 0;
  v642[6] = 0;
  {
    v1564 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1564, "GeoGL", 0xA3D02C1100000005);
  }
  v642[7] = ggl::Allocator::instance(void)::alloc;
  v645 = (uint64_t)v1812;
  if (!v1812)
    goto LABEL_791;
  if (v1812 != v1811)
  {
    v645 = (*(uint64_t (**)(void))(*v1812 + 16))();
LABEL_791:
    v642[11] = v645;
    goto LABEL_793;
  }
  v642[11] = (uint64_t)(v642 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1811[0] + 24))((uint64_t)v1811, v642 + 8);
LABEL_793:
  v646 = (uint64_t)v1810;
  if (!v1810)
  {
LABEL_796:
    v642[15] = v646;
    goto LABEL_798;
  }
  if (v1810 != v1809)
  {
    v646 = (*(uint64_t (**)(void))(*v1810 + 16))();
    goto LABEL_796;
  }
  v642[15] = (uint64_t)(v642 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1809[0] + 24))((uint64_t)v1809, v642 + 12);
LABEL_798:
  v642[16] = 2000;
  v647 = *v642;
  if ((unint64_t)(v642[2] - *v642) > 0x31F)
    goto LABEL_811;
  v648 = v642[1];
  v649 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v642[3] + 16))(v642[3], 800, 8);
  v650 = v648 - v647;
  v651 = v649 + ((v648 - v647) & 0xFFFFFFFFFFFFFFF8);
  v653 = *v642;
  v652 = v642[1];
  v654 = v652 - *v642;
  if (v652 == *v642)
  {
    v656 = v649 + ((v648 - v647) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_809;
  }
  v655 = v654 - 8;
  if ((unint64_t)(v654 - 8) >= 0x58)
  {
    v656 = v649 + ((v648 - v647) & 0xFFFFFFFFFFFFFFF8);
    if (v652 - (v650 & 0xFFFFFFFFFFFFFFF8) - v649 >= 0x20)
    {
      v657 = v650 >> 3;
      v658 = (v655 >> 3) + 1;
      v659 = (_OWORD *)(v649 + 8 * v657 - 16);
      v660 = (__int128 *)(v652 - 16);
      v661 = v658 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v662 = *v660;
        *(v659 - 1) = *(v660 - 1);
        *v659 = v662;
        v659 -= 2;
        v660 -= 2;
        v661 -= 4;
      }
      while (v661);
      v656 = v651 - 8 * (v658 & 0x3FFFFFFFFFFFFFFCLL);
      v652 -= 8 * (v658 & 0x3FFFFFFFFFFFFFFCLL);
      if (v658 == (v658 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_808;
    }
  }
  else
  {
    v656 = v649 + ((v648 - v647) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v663 = *(_QWORD *)(v652 - 8);
    v652 -= 8;
    *(_QWORD *)(v656 - 8) = v663;
    v656 -= 8;
  }
  while (v652 != v653);
LABEL_808:
  v652 = *v642;
LABEL_809:
  *v642 = v656;
  v642[1] = v651;
  v664 = v642[2];
  v642[2] = v649 + 800;
  if (v652)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v642[3] + 40))(v642[3], v652, v664 - v652);
LABEL_811:
  v665 = v642[4];
  if ((unint64_t)(v642[6] - v665) > 0x31F)
    goto LABEL_824;
  v666 = v642[5];
  v667 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v642[7] + 16))(v642[7], 800, 8);
  v668 = v666 - v665;
  v669 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
  v671 = v642[4];
  v670 = v642[5];
  v672 = v670 - v671;
  if (v670 == v671)
  {
    v674 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_822;
  }
  v673 = v672 - 8;
  if ((unint64_t)(v672 - 8) >= 0x58)
  {
    v674 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
    if (v670 - (v668 & 0xFFFFFFFFFFFFFFF8) - v667 >= 0x20)
    {
      v675 = v668 >> 3;
      v676 = (v673 >> 3) + 1;
      v677 = (_OWORD *)(v667 + 8 * v675 - 16);
      v678 = (__int128 *)(v670 - 16);
      v679 = v676 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v680 = *v678;
        *(v677 - 1) = *(v678 - 1);
        *v677 = v680;
        v677 -= 2;
        v678 -= 2;
        v679 -= 4;
      }
      while (v679);
      v674 = v669 - 8 * (v676 & 0x3FFFFFFFFFFFFFFCLL);
      v670 -= 8 * (v676 & 0x3FFFFFFFFFFFFFFCLL);
      if (v676 == (v676 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_821;
    }
  }
  else
  {
    v674 = v667 + ((v666 - v665) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v681 = *(_QWORD *)(v670 - 8);
    v670 -= 8;
    *(_QWORD *)(v674 - 8) = v681;
    v674 -= 8;
  }
  while (v670 != v671);
LABEL_821:
  v670 = v642[4];
LABEL_822:
  v642[4] = v674;
  v642[5] = v669;
  v682 = v642[6];
  v642[6] = v667 + 800;
  if (v670)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v642[7] + 40))(v642[7], v670, v682 - v670);
LABEL_824:
  v683 = *v1651;
  *v1651 = (uint64_t)v642;
  if (v683)
  {
    v684 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v683);
    MEMORY[0x1A1AF4E00](v684, 0x10A0C40D234DDC7);
  }
  v685 = v1810;
  if (v1810 == v1809)
  {
    v686 = 4;
    v685 = v1809;
  }
  else
  {
    if (!v1810)
      goto LABEL_831;
    v686 = 5;
  }
  (*(void (**)(void))(*v685 + 8 * v686))();
LABEL_831:
  v687 = v1812;
  if (v1812 == v1811)
  {
    v688 = 4;
    v687 = v1811;
    goto LABEL_835;
  }
  if (v1812)
  {
    v688 = 5;
LABEL_835:
    (*(void (**)(void))(*v687 + 8 * v688))();
  }
  v689 = (uint64_t *)operator new();
  v1807[0] = &off_1E42D33B8;
  v1807[1] = this;
  v1808 = v1807;
  v1805[0] = &off_1E42D7790;
  v1806 = v1805;
  v689[1] = 0;
  v689[2] = 0;
  *v689 = 0;
  {
    v1565 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1565, "GeoGL", 0xA3D02C1100000005);
  }
  v691 = ggl::Allocator::instance(void)::alloc;
  v689[4] = 0;
  v689[3] = v691;
  v689[5] = 0;
  v689[6] = 0;
  {
    v1566 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1566, "GeoGL", 0xA3D02C1100000005);
  }
  v689[7] = ggl::Allocator::instance(void)::alloc;
  v692 = (uint64_t)v1808;
  if (!v1808)
    goto LABEL_841;
  if (v1808 != v1807)
  {
    v692 = (*(uint64_t (**)(void))(*v1808 + 16))();
LABEL_841:
    v689[11] = v692;
    goto LABEL_843;
  }
  v689[11] = (uint64_t)(v689 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1807[0] + 24))((uint64_t)v1807, v689 + 8);
LABEL_843:
  v693 = (uint64_t)v1806;
  if (!v1806)
  {
LABEL_846:
    v689[15] = v693;
    goto LABEL_848;
  }
  if (v1806 != v1805)
  {
    v693 = (*(uint64_t (**)(void))(*v1806 + 16))();
    goto LABEL_846;
  }
  v689[15] = (uint64_t)(v689 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1805[0] + 24))((uint64_t)v1805, v689 + 12);
LABEL_848:
  v689[16] = 2000;
  v694 = *v689;
  if ((unint64_t)(v689[2] - *v689) > 0x31F)
    goto LABEL_861;
  v695 = v689[1];
  v696 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v689[3] + 16))(v689[3], 800, 8);
  v697 = v695 - v694;
  v698 = v696 + ((v695 - v694) & 0xFFFFFFFFFFFFFFF8);
  v700 = *v689;
  v699 = v689[1];
  v701 = v699 - *v689;
  if (v699 == *v689)
  {
    v703 = v696 + ((v695 - v694) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_859;
  }
  v702 = v701 - 8;
  if ((unint64_t)(v701 - 8) >= 0x58)
  {
    v703 = v696 + ((v695 - v694) & 0xFFFFFFFFFFFFFFF8);
    if (v699 - (v697 & 0xFFFFFFFFFFFFFFF8) - v696 >= 0x20)
    {
      v704 = v697 >> 3;
      v705 = (v702 >> 3) + 1;
      v706 = (_OWORD *)(v696 + 8 * v704 - 16);
      v707 = (__int128 *)(v699 - 16);
      v708 = v705 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v709 = *v707;
        *(v706 - 1) = *(v707 - 1);
        *v706 = v709;
        v706 -= 2;
        v707 -= 2;
        v708 -= 4;
      }
      while (v708);
      v703 = v698 - 8 * (v705 & 0x3FFFFFFFFFFFFFFCLL);
      v699 -= 8 * (v705 & 0x3FFFFFFFFFFFFFFCLL);
      if (v705 == (v705 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_858;
    }
  }
  else
  {
    v703 = v696 + ((v695 - v694) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v710 = *(_QWORD *)(v699 - 8);
    v699 -= 8;
    *(_QWORD *)(v703 - 8) = v710;
    v703 -= 8;
  }
  while (v699 != v700);
LABEL_858:
  v699 = *v689;
LABEL_859:
  *v689 = v703;
  v689[1] = v698;
  v711 = v689[2];
  v689[2] = v696 + 800;
  if (v699)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v689[3] + 40))(v689[3], v699, v711 - v699);
LABEL_861:
  v712 = v689[4];
  if ((unint64_t)(v689[6] - v712) > 0x31F)
    goto LABEL_874;
  v713 = v689[5];
  v714 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v689[7] + 16))(v689[7], 800, 8);
  v715 = v713 - v712;
  v716 = v714 + ((v713 - v712) & 0xFFFFFFFFFFFFFFF8);
  v718 = v689[4];
  v717 = v689[5];
  v719 = v717 - v718;
  if (v717 == v718)
  {
    v721 = v714 + ((v713 - v712) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_872;
  }
  v720 = v719 - 8;
  if ((unint64_t)(v719 - 8) >= 0x58)
  {
    v721 = v714 + ((v713 - v712) & 0xFFFFFFFFFFFFFFF8);
    if (v717 - (v715 & 0xFFFFFFFFFFFFFFF8) - v714 >= 0x20)
    {
      v722 = v715 >> 3;
      v723 = (v720 >> 3) + 1;
      v724 = (_OWORD *)(v714 + 8 * v722 - 16);
      v725 = (__int128 *)(v717 - 16);
      v726 = v723 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v727 = *v725;
        *(v724 - 1) = *(v725 - 1);
        *v724 = v727;
        v724 -= 2;
        v725 -= 2;
        v726 -= 4;
      }
      while (v726);
      v721 = v716 - 8 * (v723 & 0x3FFFFFFFFFFFFFFCLL);
      v717 -= 8 * (v723 & 0x3FFFFFFFFFFFFFFCLL);
      if (v723 == (v723 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_871;
    }
  }
  else
  {
    v721 = v714 + ((v713 - v712) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v728 = *(_QWORD *)(v717 - 8);
    v717 -= 8;
    *(_QWORD *)(v721 - 8) = v728;
    v721 -= 8;
  }
  while (v717 != v718);
LABEL_871:
  v717 = v689[4];
LABEL_872:
  v689[4] = v721;
  v689[5] = v716;
  v729 = v689[6];
  v689[6] = v714 + 800;
  if (v717)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v689[7] + 40))(v689[7], v717, v729 - v717);
LABEL_874:
  v730 = *v1650;
  *v1650 = (uint64_t)v689;
  if (v730)
  {
    v731 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v730);
    MEMORY[0x1A1AF4E00](v731, 0x10A0C40D234DDC7);
  }
  v732 = v1806;
  if (v1806 == v1805)
  {
    v733 = 4;
    v732 = v1805;
  }
  else
  {
    if (!v1806)
      goto LABEL_881;
    v733 = 5;
  }
  (*(void (**)(void))(*v732 + 8 * v733))();
LABEL_881:
  v734 = v1808;
  if (v1808 == v1807)
  {
    v735 = 4;
    v734 = v1807;
    goto LABEL_885;
  }
  if (v1808)
  {
    v735 = 5;
LABEL_885:
    (*(void (**)(void))(*v734 + 8 * v735))();
  }
  v736 = (uint64_t *)operator new();
  v1803[0] = &off_1E42D3400;
  v1804 = v1803;
  v1801[0] = &off_1E42D6A58;
  v1802 = v1801;
  v736[1] = 0;
  v736[2] = 0;
  *v736 = 0;
  {
    v1567 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1567, "GeoGL", 0xA3D02C1100000005);
  }
  v738 = ggl::Allocator::instance(void)::alloc;
  v736[4] = 0;
  v736[3] = v738;
  v736[5] = 0;
  v736[6] = 0;
  {
    v1568 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1568, "GeoGL", 0xA3D02C1100000005);
  }
  v736[7] = ggl::Allocator::instance(void)::alloc;
  v739 = (uint64_t)v1804;
  if (!v1804)
    goto LABEL_891;
  if (v1804 != v1803)
  {
    v739 = (*(uint64_t (**)(void))(*v1804 + 16))();
LABEL_891:
    v736[11] = v739;
    goto LABEL_893;
  }
  v736[11] = (uint64_t)(v736 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1803[0] + 24))((uint64_t)v1803, v736 + 8);
LABEL_893:
  v740 = (uint64_t)v1802;
  if (!v1802)
  {
LABEL_896:
    v736[15] = v740;
    goto LABEL_898;
  }
  if (v1802 != v1801)
  {
    v740 = (*(uint64_t (**)(void))(*v1802 + 16))();
    goto LABEL_896;
  }
  v736[15] = (uint64_t)(v736 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1801[0] + 24))((uint64_t)v1801, v736 + 12);
LABEL_898:
  v736[16] = 2000;
  v741 = *v736;
  if ((unint64_t)(v736[2] - *v736) > 0x31F)
    goto LABEL_911;
  v742 = v736[1];
  v743 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v736[3] + 16))(v736[3], 800, 8);
  v744 = v742 - v741;
  v745 = v743 + ((v742 - v741) & 0xFFFFFFFFFFFFFFF8);
  v747 = *v736;
  v746 = v736[1];
  v748 = v746 - *v736;
  if (v746 == *v736)
  {
    v750 = v743 + ((v742 - v741) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_909;
  }
  v749 = v748 - 8;
  if ((unint64_t)(v748 - 8) >= 0x58)
  {
    v750 = v743 + ((v742 - v741) & 0xFFFFFFFFFFFFFFF8);
    if (v746 - (v744 & 0xFFFFFFFFFFFFFFF8) - v743 >= 0x20)
    {
      v751 = v744 >> 3;
      v752 = (v749 >> 3) + 1;
      v753 = (_OWORD *)(v743 + 8 * v751 - 16);
      v754 = (__int128 *)(v746 - 16);
      v755 = v752 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v756 = *v754;
        *(v753 - 1) = *(v754 - 1);
        *v753 = v756;
        v753 -= 2;
        v754 -= 2;
        v755 -= 4;
      }
      while (v755);
      v750 = v745 - 8 * (v752 & 0x3FFFFFFFFFFFFFFCLL);
      v746 -= 8 * (v752 & 0x3FFFFFFFFFFFFFFCLL);
      if (v752 == (v752 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_908;
    }
  }
  else
  {
    v750 = v743 + ((v742 - v741) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v757 = *(_QWORD *)(v746 - 8);
    v746 -= 8;
    *(_QWORD *)(v750 - 8) = v757;
    v750 -= 8;
  }
  while (v746 != v747);
LABEL_908:
  v746 = *v736;
LABEL_909:
  *v736 = v750;
  v736[1] = v745;
  v758 = v736[2];
  v736[2] = v743 + 800;
  if (v746)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v736[3] + 40))(v736[3], v746, v758 - v746);
LABEL_911:
  v759 = v736[4];
  if ((unint64_t)(v736[6] - v759) > 0x31F)
    goto LABEL_924;
  v760 = v736[5];
  v761 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v736[7] + 16))(v736[7], 800, 8);
  v762 = v760 - v759;
  v763 = v761 + ((v760 - v759) & 0xFFFFFFFFFFFFFFF8);
  v765 = v736[4];
  v764 = v736[5];
  v766 = v764 - v765;
  if (v764 == v765)
  {
    v768 = v761 + ((v760 - v759) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_922;
  }
  v767 = v766 - 8;
  if ((unint64_t)(v766 - 8) >= 0x58)
  {
    v768 = v761 + ((v760 - v759) & 0xFFFFFFFFFFFFFFF8);
    if (v764 - (v762 & 0xFFFFFFFFFFFFFFF8) - v761 >= 0x20)
    {
      v769 = v762 >> 3;
      v770 = (v767 >> 3) + 1;
      v771 = (_OWORD *)(v761 + 8 * v769 - 16);
      v772 = (__int128 *)(v764 - 16);
      v773 = v770 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v774 = *v772;
        *(v771 - 1) = *(v772 - 1);
        *v771 = v774;
        v771 -= 2;
        v772 -= 2;
        v773 -= 4;
      }
      while (v773);
      v768 = v763 - 8 * (v770 & 0x3FFFFFFFFFFFFFFCLL);
      v764 -= 8 * (v770 & 0x3FFFFFFFFFFFFFFCLL);
      if (v770 == (v770 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_921;
    }
  }
  else
  {
    v768 = v761 + ((v760 - v759) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v775 = *(_QWORD *)(v764 - 8);
    v764 -= 8;
    *(_QWORD *)(v768 - 8) = v775;
    v768 -= 8;
  }
  while (v764 != v765);
LABEL_921:
  v764 = v736[4];
LABEL_922:
  v736[4] = v768;
  v736[5] = v763;
  v776 = v736[6];
  v736[6] = v761 + 800;
  if (v764)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v736[7] + 40))(v736[7], v764, v776 - v764);
LABEL_924:
  v777 = *v1649;
  *v1649 = (uint64_t)v736;
  if (v777)
  {
    v778 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v777);
    MEMORY[0x1A1AF4E00](v778, 0x10A0C40D234DDC7);
  }
  v779 = v1802;
  if (v1802 == v1801)
  {
    v780 = 4;
    v779 = v1801;
  }
  else
  {
    if (!v1802)
      goto LABEL_931;
    v780 = 5;
  }
  (*(void (**)(void))(*v779 + 8 * v780))();
LABEL_931:
  v781 = v1804;
  if (v1804 == v1803)
  {
    v782 = 4;
    v781 = v1803;
    goto LABEL_935;
  }
  if (v1804)
  {
    v782 = 5;
LABEL_935:
    (*(void (**)(void))(*v781 + 8 * v782))();
  }
  v783 = (uint64_t *)operator new();
  v1799[0] = &off_1E42D3448;
  v1800 = v1799;
  v1797[0] = &off_1E42D6A10;
  v1798 = v1797;
  v783[1] = 0;
  v783[2] = 0;
  *v783 = 0;
  {
    v1569 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1569, "GeoGL", 0xA3D02C1100000005);
  }
  v785 = ggl::Allocator::instance(void)::alloc;
  v783[4] = 0;
  v783[3] = v785;
  v783[5] = 0;
  v783[6] = 0;
  {
    v1570 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1570, "GeoGL", 0xA3D02C1100000005);
  }
  v783[7] = ggl::Allocator::instance(void)::alloc;
  v786 = (uint64_t)v1800;
  if (!v1800)
    goto LABEL_941;
  if (v1800 != v1799)
  {
    v786 = (*(uint64_t (**)(void))(*v1800 + 16))();
LABEL_941:
    v783[11] = v786;
    goto LABEL_943;
  }
  v783[11] = (uint64_t)(v783 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1799[0] + 24))((uint64_t)v1799, v783 + 8);
LABEL_943:
  v787 = (uint64_t)v1798;
  if (!v1798)
  {
LABEL_946:
    v783[15] = v787;
    goto LABEL_948;
  }
  if (v1798 != v1797)
  {
    v787 = (*(uint64_t (**)(void))(*v1798 + 16))();
    goto LABEL_946;
  }
  v783[15] = (uint64_t)(v783 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1797[0] + 24))((uint64_t)v1797, v783 + 12);
LABEL_948:
  v783[16] = 2000;
  v788 = *v783;
  if ((unint64_t)(v783[2] - *v783) > 0x31F)
    goto LABEL_961;
  v789 = v783[1];
  v790 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v783[3] + 16))(v783[3], 800, 8);
  v791 = v789 - v788;
  v792 = v790 + ((v789 - v788) & 0xFFFFFFFFFFFFFFF8);
  v794 = *v783;
  v793 = v783[1];
  v795 = v793 - *v783;
  if (v793 == *v783)
  {
    v797 = v790 + ((v789 - v788) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_959;
  }
  v796 = v795 - 8;
  if ((unint64_t)(v795 - 8) >= 0x58)
  {
    v797 = v790 + ((v789 - v788) & 0xFFFFFFFFFFFFFFF8);
    if (v793 - (v791 & 0xFFFFFFFFFFFFFFF8) - v790 >= 0x20)
    {
      v798 = v791 >> 3;
      v799 = (v796 >> 3) + 1;
      v800 = (_OWORD *)(v790 + 8 * v798 - 16);
      v801 = (__int128 *)(v793 - 16);
      v802 = v799 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v803 = *v801;
        *(v800 - 1) = *(v801 - 1);
        *v800 = v803;
        v800 -= 2;
        v801 -= 2;
        v802 -= 4;
      }
      while (v802);
      v797 = v792 - 8 * (v799 & 0x3FFFFFFFFFFFFFFCLL);
      v793 -= 8 * (v799 & 0x3FFFFFFFFFFFFFFCLL);
      if (v799 == (v799 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_958;
    }
  }
  else
  {
    v797 = v790 + ((v789 - v788) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v804 = *(_QWORD *)(v793 - 8);
    v793 -= 8;
    *(_QWORD *)(v797 - 8) = v804;
    v797 -= 8;
  }
  while (v793 != v794);
LABEL_958:
  v793 = *v783;
LABEL_959:
  *v783 = v797;
  v783[1] = v792;
  v805 = v783[2];
  v783[2] = v790 + 800;
  if (v793)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v783[3] + 40))(v783[3], v793, v805 - v793);
LABEL_961:
  v806 = v783[4];
  if ((unint64_t)(v783[6] - v806) > 0x31F)
    goto LABEL_974;
  v807 = v783[5];
  v808 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v783[7] + 16))(v783[7], 800, 8);
  v809 = v807 - v806;
  v810 = v808 + ((v807 - v806) & 0xFFFFFFFFFFFFFFF8);
  v812 = v783[4];
  v811 = v783[5];
  v813 = v811 - v812;
  if (v811 == v812)
  {
    v815 = v808 + ((v807 - v806) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_972;
  }
  v814 = v813 - 8;
  if ((unint64_t)(v813 - 8) >= 0x58)
  {
    v815 = v808 + ((v807 - v806) & 0xFFFFFFFFFFFFFFF8);
    if (v811 - (v809 & 0xFFFFFFFFFFFFFFF8) - v808 >= 0x20)
    {
      v816 = v809 >> 3;
      v817 = (v814 >> 3) + 1;
      v818 = (_OWORD *)(v808 + 8 * v816 - 16);
      v819 = (__int128 *)(v811 - 16);
      v820 = v817 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v821 = *v819;
        *(v818 - 1) = *(v819 - 1);
        *v818 = v821;
        v818 -= 2;
        v819 -= 2;
        v820 -= 4;
      }
      while (v820);
      v815 = v810 - 8 * (v817 & 0x3FFFFFFFFFFFFFFCLL);
      v811 -= 8 * (v817 & 0x3FFFFFFFFFFFFFFCLL);
      if (v817 == (v817 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_971;
    }
  }
  else
  {
    v815 = v808 + ((v807 - v806) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v822 = *(_QWORD *)(v811 - 8);
    v811 -= 8;
    *(_QWORD *)(v815 - 8) = v822;
    v815 -= 8;
  }
  while (v811 != v812);
LABEL_971:
  v811 = v783[4];
LABEL_972:
  v783[4] = v815;
  v783[5] = v810;
  v823 = v783[6];
  v783[6] = v808 + 800;
  if (v811)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v783[7] + 40))(v783[7], v811, v823 - v811);
LABEL_974:
  v824 = *v1648;
  *v1648 = (uint64_t)v783;
  if (v824)
  {
    v825 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v824);
    MEMORY[0x1A1AF4E00](v825, 0x10A0C40D234DDC7);
  }
  v826 = v1798;
  if (v1798 == v1797)
  {
    v827 = 4;
    v826 = v1797;
  }
  else
  {
    if (!v1798)
      goto LABEL_981;
    v827 = 5;
  }
  (*(void (**)(void))(*v826 + 8 * v827))();
LABEL_981:
  v828 = v1800;
  if (v1800 == v1799)
  {
    v829 = 4;
    v828 = v1799;
    goto LABEL_985;
  }
  if (v1800)
  {
    v829 = 5;
LABEL_985:
    (*(void (**)(void))(*v828 + 8 * v829))();
  }
  v830 = (uint64_t *)operator new();
  v1795[0] = &off_1E42D3490;
  v1796 = v1795;
  v1793[0] = &off_1E42D69C8;
  v1794 = v1793;
  v830[1] = 0;
  v830[2] = 0;
  *v830 = 0;
  {
    v1571 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1571, "GeoGL", 0xA3D02C1100000005);
  }
  v832 = ggl::Allocator::instance(void)::alloc;
  v830[4] = 0;
  v830[3] = v832;
  v830[5] = 0;
  v830[6] = 0;
  {
    v1572 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1572, "GeoGL", 0xA3D02C1100000005);
  }
  v830[7] = ggl::Allocator::instance(void)::alloc;
  v833 = (uint64_t)v1796;
  if (!v1796)
    goto LABEL_991;
  if (v1796 != v1795)
  {
    v833 = (*(uint64_t (**)(void))(*v1796 + 16))();
LABEL_991:
    v830[11] = v833;
    goto LABEL_993;
  }
  v830[11] = (uint64_t)(v830 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1795[0] + 24))((uint64_t)v1795, v830 + 8);
LABEL_993:
  v834 = (uint64_t)v1794;
  if (!v1794)
  {
LABEL_996:
    v830[15] = v834;
    goto LABEL_998;
  }
  if (v1794 != v1793)
  {
    v834 = (*(uint64_t (**)(void))(*v1794 + 16))();
    goto LABEL_996;
  }
  v830[15] = (uint64_t)(v830 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1793[0] + 24))((uint64_t)v1793, v830 + 12);
LABEL_998:
  v830[16] = 2000;
  v835 = *v830;
  if ((unint64_t)(v830[2] - *v830) > 0x31F)
    goto LABEL_1011;
  v836 = v830[1];
  v837 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v830[3] + 16))(v830[3], 800, 8);
  v838 = v836 - v835;
  v839 = v837 + ((v836 - v835) & 0xFFFFFFFFFFFFFFF8);
  v841 = *v830;
  v840 = v830[1];
  v842 = v840 - *v830;
  if (v840 == *v830)
  {
    v844 = v837 + ((v836 - v835) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1009;
  }
  v843 = v842 - 8;
  if ((unint64_t)(v842 - 8) >= 0x58)
  {
    v844 = v837 + ((v836 - v835) & 0xFFFFFFFFFFFFFFF8);
    if (v840 - (v838 & 0xFFFFFFFFFFFFFFF8) - v837 >= 0x20)
    {
      v845 = v838 >> 3;
      v846 = (v843 >> 3) + 1;
      v847 = (_OWORD *)(v837 + 8 * v845 - 16);
      v848 = (__int128 *)(v840 - 16);
      v849 = v846 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v850 = *v848;
        *(v847 - 1) = *(v848 - 1);
        *v847 = v850;
        v847 -= 2;
        v848 -= 2;
        v849 -= 4;
      }
      while (v849);
      v844 = v839 - 8 * (v846 & 0x3FFFFFFFFFFFFFFCLL);
      v840 -= 8 * (v846 & 0x3FFFFFFFFFFFFFFCLL);
      if (v846 == (v846 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1008;
    }
  }
  else
  {
    v844 = v837 + ((v836 - v835) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v851 = *(_QWORD *)(v840 - 8);
    v840 -= 8;
    *(_QWORD *)(v844 - 8) = v851;
    v844 -= 8;
  }
  while (v840 != v841);
LABEL_1008:
  v840 = *v830;
LABEL_1009:
  *v830 = v844;
  v830[1] = v839;
  v852 = v830[2];
  v830[2] = v837 + 800;
  if (v840)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v830[3] + 40))(v830[3], v840, v852 - v840);
LABEL_1011:
  v853 = v830[4];
  if ((unint64_t)(v830[6] - v853) > 0x31F)
    goto LABEL_1024;
  v854 = v830[5];
  v855 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v830[7] + 16))(v830[7], 800, 8);
  v856 = v854 - v853;
  v857 = v855 + ((v854 - v853) & 0xFFFFFFFFFFFFFFF8);
  v859 = v830[4];
  v858 = v830[5];
  v860 = v858 - v859;
  if (v858 == v859)
  {
    v862 = v855 + ((v854 - v853) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1022;
  }
  v861 = v860 - 8;
  if ((unint64_t)(v860 - 8) >= 0x58)
  {
    v862 = v855 + ((v854 - v853) & 0xFFFFFFFFFFFFFFF8);
    if (v858 - (v856 & 0xFFFFFFFFFFFFFFF8) - v855 >= 0x20)
    {
      v863 = v856 >> 3;
      v864 = (v861 >> 3) + 1;
      v865 = (_OWORD *)(v855 + 8 * v863 - 16);
      v866 = (__int128 *)(v858 - 16);
      v867 = v864 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v868 = *v866;
        *(v865 - 1) = *(v866 - 1);
        *v865 = v868;
        v865 -= 2;
        v866 -= 2;
        v867 -= 4;
      }
      while (v867);
      v862 = v857 - 8 * (v864 & 0x3FFFFFFFFFFFFFFCLL);
      v858 -= 8 * (v864 & 0x3FFFFFFFFFFFFFFCLL);
      if (v864 == (v864 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1021;
    }
  }
  else
  {
    v862 = v855 + ((v854 - v853) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v869 = *(_QWORD *)(v858 - 8);
    v858 -= 8;
    *(_QWORD *)(v862 - 8) = v869;
    v862 -= 8;
  }
  while (v858 != v859);
LABEL_1021:
  v858 = v830[4];
LABEL_1022:
  v830[4] = v862;
  v830[5] = v857;
  v870 = v830[6];
  v830[6] = v855 + 800;
  if (v858)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v830[7] + 40))(v830[7], v858, v870 - v858);
LABEL_1024:
  v871 = *v1647;
  *v1647 = (uint64_t)v830;
  if (v871)
  {
    v872 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v871);
    MEMORY[0x1A1AF4E00](v872, 0x10A0C40D234DDC7);
  }
  v873 = v1794;
  if (v1794 == v1793)
  {
    v874 = 4;
    v873 = v1793;
  }
  else
  {
    if (!v1794)
      goto LABEL_1031;
    v874 = 5;
  }
  (*(void (**)(void))(*v873 + 8 * v874))();
LABEL_1031:
  v875 = v1796;
  if (v1796 == v1795)
  {
    v876 = 4;
    v875 = v1795;
    goto LABEL_1035;
  }
  if (v1796)
  {
    v876 = 5;
LABEL_1035:
    (*(void (**)(void))(*v875 + 8 * v876))();
  }
  v877 = (uint64_t *)operator new();
  v1791[0] = &off_1E42D34D8;
  v1792 = v1791;
  v1789[0] = &off_1E42D6B30;
  v1790 = v1789;
  v877[1] = 0;
  v877[2] = 0;
  *v877 = 0;
  {
    v1573 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1573, "GeoGL", 0xA3D02C1100000005);
  }
  v879 = ggl::Allocator::instance(void)::alloc;
  v877[4] = 0;
  v877[3] = v879;
  v877[5] = 0;
  v877[6] = 0;
  {
    v1574 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1574, "GeoGL", 0xA3D02C1100000005);
  }
  v877[7] = ggl::Allocator::instance(void)::alloc;
  v880 = (uint64_t)v1792;
  if (!v1792)
    goto LABEL_1041;
  if (v1792 != v1791)
  {
    v880 = (*(uint64_t (**)(void))(*v1792 + 16))();
LABEL_1041:
    v877[11] = v880;
    goto LABEL_1043;
  }
  v877[11] = (uint64_t)(v877 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1791[0] + 24))((uint64_t)v1791, v877 + 8);
LABEL_1043:
  v881 = (uint64_t)v1790;
  if (!v1790)
  {
LABEL_1046:
    v877[15] = v881;
    goto LABEL_1048;
  }
  if (v1790 != v1789)
  {
    v881 = (*(uint64_t (**)(void))(*v1790 + 16))();
    goto LABEL_1046;
  }
  v877[15] = (uint64_t)(v877 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1789[0] + 24))((uint64_t)v1789, v877 + 12);
LABEL_1048:
  v877[16] = 2000;
  v882 = *v877;
  if ((unint64_t)(v877[2] - *v877) > 0x31F)
    goto LABEL_1061;
  v883 = v877[1];
  v884 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v877[3] + 16))(v877[3], 800, 8);
  v885 = v883 - v882;
  v886 = v884 + ((v883 - v882) & 0xFFFFFFFFFFFFFFF8);
  v888 = *v877;
  v887 = v877[1];
  v889 = v887 - *v877;
  if (v887 == *v877)
  {
    v891 = v884 + ((v883 - v882) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1059;
  }
  v890 = v889 - 8;
  if ((unint64_t)(v889 - 8) >= 0x58)
  {
    v891 = v884 + ((v883 - v882) & 0xFFFFFFFFFFFFFFF8);
    if (v887 - (v885 & 0xFFFFFFFFFFFFFFF8) - v884 >= 0x20)
    {
      v892 = v885 >> 3;
      v893 = (v890 >> 3) + 1;
      v894 = (_OWORD *)(v884 + 8 * v892 - 16);
      v895 = (__int128 *)(v887 - 16);
      v896 = v893 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v897 = *v895;
        *(v894 - 1) = *(v895 - 1);
        *v894 = v897;
        v894 -= 2;
        v895 -= 2;
        v896 -= 4;
      }
      while (v896);
      v891 = v886 - 8 * (v893 & 0x3FFFFFFFFFFFFFFCLL);
      v887 -= 8 * (v893 & 0x3FFFFFFFFFFFFFFCLL);
      if (v893 == (v893 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1058;
    }
  }
  else
  {
    v891 = v884 + ((v883 - v882) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v898 = *(_QWORD *)(v887 - 8);
    v887 -= 8;
    *(_QWORD *)(v891 - 8) = v898;
    v891 -= 8;
  }
  while (v887 != v888);
LABEL_1058:
  v887 = *v877;
LABEL_1059:
  *v877 = v891;
  v877[1] = v886;
  v899 = v877[2];
  v877[2] = v884 + 800;
  if (v887)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v877[3] + 40))(v877[3], v887, v899 - v887);
LABEL_1061:
  v900 = v877[4];
  if ((unint64_t)(v877[6] - v900) > 0x31F)
    goto LABEL_1074;
  v901 = v877[5];
  v902 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v877[7] + 16))(v877[7], 800, 8);
  v903 = v901 - v900;
  v904 = v902 + ((v901 - v900) & 0xFFFFFFFFFFFFFFF8);
  v906 = v877[4];
  v905 = v877[5];
  v907 = v905 - v906;
  if (v905 == v906)
  {
    v909 = v902 + ((v901 - v900) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1072;
  }
  v908 = v907 - 8;
  if ((unint64_t)(v907 - 8) >= 0x58)
  {
    v909 = v902 + ((v901 - v900) & 0xFFFFFFFFFFFFFFF8);
    if (v905 - (v903 & 0xFFFFFFFFFFFFFFF8) - v902 >= 0x20)
    {
      v910 = v903 >> 3;
      v911 = (v908 >> 3) + 1;
      v912 = (_OWORD *)(v902 + 8 * v910 - 16);
      v913 = (__int128 *)(v905 - 16);
      v914 = v911 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v915 = *v913;
        *(v912 - 1) = *(v913 - 1);
        *v912 = v915;
        v912 -= 2;
        v913 -= 2;
        v914 -= 4;
      }
      while (v914);
      v909 = v904 - 8 * (v911 & 0x3FFFFFFFFFFFFFFCLL);
      v905 -= 8 * (v911 & 0x3FFFFFFFFFFFFFFCLL);
      if (v911 == (v911 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1071;
    }
  }
  else
  {
    v909 = v902 + ((v901 - v900) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v916 = *(_QWORD *)(v905 - 8);
    v905 -= 8;
    *(_QWORD *)(v909 - 8) = v916;
    v909 -= 8;
  }
  while (v905 != v906);
LABEL_1071:
  v905 = v877[4];
LABEL_1072:
  v877[4] = v909;
  v877[5] = v904;
  v917 = v877[6];
  v877[6] = v902 + 800;
  if (v905)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v877[7] + 40))(v877[7], v905, v917 - v905);
LABEL_1074:
  v918 = *v1646;
  *v1646 = (uint64_t)v877;
  if (v918)
  {
    v919 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v918);
    MEMORY[0x1A1AF4E00](v919, 0x10A0C40D234DDC7);
  }
  v920 = v1790;
  if (v1790 == v1789)
  {
    v921 = 4;
    v920 = v1789;
  }
  else
  {
    if (!v1790)
      goto LABEL_1081;
    v921 = 5;
  }
  (*(void (**)(void))(*v920 + 8 * v921))();
LABEL_1081:
  v922 = v1792;
  if (v1792 == v1791)
  {
    v923 = 4;
    v922 = v1791;
    goto LABEL_1085;
  }
  if (v1792)
  {
    v923 = 5;
LABEL_1085:
    (*(void (**)(void))(*v922 + 8 * v923))();
  }
  v924 = (uint64_t *)operator new();
  v1787[0] = &off_1E42D3520;
  v1788 = v1787;
  v1785[0] = &off_1E42D6818;
  v1786 = v1785;
  v924[1] = 0;
  v924[2] = 0;
  *v924 = 0;
  {
    v1575 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1575, "GeoGL", 0xA3D02C1100000005);
  }
  v926 = ggl::Allocator::instance(void)::alloc;
  v924[4] = 0;
  v924[3] = v926;
  v924[5] = 0;
  v924[6] = 0;
  {
    v1576 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1576, "GeoGL", 0xA3D02C1100000005);
  }
  v924[7] = ggl::Allocator::instance(void)::alloc;
  v927 = (uint64_t)v1788;
  if (!v1788)
    goto LABEL_1091;
  if (v1788 != v1787)
  {
    v927 = (*(uint64_t (**)(void))(*v1788 + 16))();
LABEL_1091:
    v924[11] = v927;
    goto LABEL_1093;
  }
  v924[11] = (uint64_t)(v924 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1787[0] + 24))((uint64_t)v1787, v924 + 8);
LABEL_1093:
  v928 = (uint64_t)v1786;
  if (!v1786)
  {
LABEL_1096:
    v924[15] = v928;
    goto LABEL_1098;
  }
  if (v1786 != v1785)
  {
    v928 = (*(uint64_t (**)(void))(*v1786 + 16))();
    goto LABEL_1096;
  }
  v924[15] = (uint64_t)(v924 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1785[0] + 24))((uint64_t)v1785, v924 + 12);
LABEL_1098:
  v924[16] = 2000;
  v929 = *v924;
  if ((unint64_t)(v924[2] - *v924) > 0x31F)
    goto LABEL_1111;
  v930 = v924[1];
  v931 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v924[3] + 16))(v924[3], 800, 8);
  v932 = v930 - v929;
  v933 = v931 + ((v930 - v929) & 0xFFFFFFFFFFFFFFF8);
  v935 = *v924;
  v934 = v924[1];
  v936 = v934 - *v924;
  if (v934 == *v924)
  {
    v938 = v931 + ((v930 - v929) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1109;
  }
  v937 = v936 - 8;
  if ((unint64_t)(v936 - 8) >= 0x58)
  {
    v938 = v931 + ((v930 - v929) & 0xFFFFFFFFFFFFFFF8);
    if (v934 - (v932 & 0xFFFFFFFFFFFFFFF8) - v931 >= 0x20)
    {
      v939 = v932 >> 3;
      v940 = (v937 >> 3) + 1;
      v941 = (_OWORD *)(v931 + 8 * v939 - 16);
      v942 = (__int128 *)(v934 - 16);
      v943 = v940 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v944 = *v942;
        *(v941 - 1) = *(v942 - 1);
        *v941 = v944;
        v941 -= 2;
        v942 -= 2;
        v943 -= 4;
      }
      while (v943);
      v938 = v933 - 8 * (v940 & 0x3FFFFFFFFFFFFFFCLL);
      v934 -= 8 * (v940 & 0x3FFFFFFFFFFFFFFCLL);
      if (v940 == (v940 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1108;
    }
  }
  else
  {
    v938 = v931 + ((v930 - v929) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v945 = *(_QWORD *)(v934 - 8);
    v934 -= 8;
    *(_QWORD *)(v938 - 8) = v945;
    v938 -= 8;
  }
  while (v934 != v935);
LABEL_1108:
  v934 = *v924;
LABEL_1109:
  *v924 = v938;
  v924[1] = v933;
  v946 = v924[2];
  v924[2] = v931 + 800;
  if (v934)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v924[3] + 40))(v924[3], v934, v946 - v934);
LABEL_1111:
  v947 = v924[4];
  if ((unint64_t)(v924[6] - v947) > 0x31F)
    goto LABEL_1124;
  v948 = v924[5];
  v949 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v924[7] + 16))(v924[7], 800, 8);
  v950 = v948 - v947;
  v951 = v949 + ((v948 - v947) & 0xFFFFFFFFFFFFFFF8);
  v953 = v924[4];
  v952 = v924[5];
  v954 = v952 - v953;
  if (v952 == v953)
  {
    v956 = v949 + ((v948 - v947) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1122;
  }
  v955 = v954 - 8;
  if ((unint64_t)(v954 - 8) >= 0x58)
  {
    v956 = v949 + ((v948 - v947) & 0xFFFFFFFFFFFFFFF8);
    if (v952 - (v950 & 0xFFFFFFFFFFFFFFF8) - v949 >= 0x20)
    {
      v957 = v950 >> 3;
      v958 = (v955 >> 3) + 1;
      v959 = (_OWORD *)(v949 + 8 * v957 - 16);
      v960 = (__int128 *)(v952 - 16);
      v961 = v958 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v962 = *v960;
        *(v959 - 1) = *(v960 - 1);
        *v959 = v962;
        v959 -= 2;
        v960 -= 2;
        v961 -= 4;
      }
      while (v961);
      v956 = v951 - 8 * (v958 & 0x3FFFFFFFFFFFFFFCLL);
      v952 -= 8 * (v958 & 0x3FFFFFFFFFFFFFFCLL);
      if (v958 == (v958 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1121;
    }
  }
  else
  {
    v956 = v949 + ((v948 - v947) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v963 = *(_QWORD *)(v952 - 8);
    v952 -= 8;
    *(_QWORD *)(v956 - 8) = v963;
    v956 -= 8;
  }
  while (v952 != v953);
LABEL_1121:
  v952 = v924[4];
LABEL_1122:
  v924[4] = v956;
  v924[5] = v951;
  v964 = v924[6];
  v924[6] = v949 + 800;
  if (v952)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v924[7] + 40))(v924[7], v952, v964 - v952);
LABEL_1124:
  v965 = *v1645;
  *v1645 = (uint64_t)v924;
  if (v965)
  {
    v966 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v965);
    MEMORY[0x1A1AF4E00](v966, 0x10A0C40D234DDC7);
  }
  v967 = v1786;
  if (v1786 == v1785)
  {
    v968 = 4;
    v967 = v1785;
  }
  else
  {
    if (!v1786)
      goto LABEL_1131;
    v968 = 5;
  }
  (*(void (**)(void))(*v967 + 8 * v968))();
LABEL_1131:
  v969 = v1788;
  if (v1788 == v1787)
  {
    v970 = 4;
    v969 = v1787;
  }
  else
  {
    if (!v1788)
      goto LABEL_1136;
    v970 = 5;
  }
  (*(void (**)(void))(*v969 + 8 * v970))();
LABEL_1136:
  v971 = operator new();
  v972 = ggl::BufferData::BufferData(v971, qword_1EE54AFE0, 2, 1, 6, 1);
  *(_QWORD *)(v972 + 200) = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
  *(_QWORD *)v972 = &off_1E42B9790;
  v973 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = v972;
  if (v973)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v973 + 8))(v973);
    v972 = *((_QWORD *)this + 181);
  }
  v974 = *(_QWORD *)(v972 + 8);
  **(_DWORD **)(v972 + 72) = 1073322394;
  if (*(_QWORD *)(v972 + 64) > v974)
    v974 = *(_QWORD *)(v972 + 64);
  *(_QWORD *)(v972 + 56) = 0;
  *(_QWORD *)(v972 + 64) = v974;
  v975 = (uint64_t *)operator new();
  v1783[0] = &off_1E42D3568;
  v1784 = v1783;
  v1781[0] = &off_1E42D67D0;
  v1782 = v1781;
  v975[1] = 0;
  v975[2] = 0;
  *v975 = 0;
  {
    v1577 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1577, "GeoGL", 0xA3D02C1100000005);
  }
  v977 = ggl::Allocator::instance(void)::alloc;
  v975[4] = 0;
  v975[3] = v977;
  v975[5] = 0;
  v975[6] = 0;
  {
    v1578 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1578, "GeoGL", 0xA3D02C1100000005);
  }
  v975[7] = ggl::Allocator::instance(void)::alloc;
  v978 = (uint64_t)v1784;
  if (!v1784)
    goto LABEL_1145;
  if (v1784 != v1783)
  {
    v978 = (*(uint64_t (**)(void))(*v1784 + 16))();
LABEL_1145:
    v975[11] = v978;
    goto LABEL_1147;
  }
  v975[11] = (uint64_t)(v975 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1783[0] + 24))((uint64_t)v1783, v975 + 8);
LABEL_1147:
  v979 = (uint64_t)v1782;
  if (!v1782)
  {
LABEL_1150:
    v975[15] = v979;
    goto LABEL_1152;
  }
  if (v1782 != v1781)
  {
    v979 = (*(uint64_t (**)(void))(*v1782 + 16))();
    goto LABEL_1150;
  }
  v975[15] = (uint64_t)(v975 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1781[0] + 24))((uint64_t)v1781, v975 + 12);
LABEL_1152:
  v975[16] = 2000;
  v980 = *v975;
  if ((unint64_t)(v975[2] - *v975) > 0x31F)
    goto LABEL_1165;
  v981 = v975[1];
  v982 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v975[3] + 16))(v975[3], 800, 8);
  v983 = v981 - v980;
  v984 = v982 + ((v981 - v980) & 0xFFFFFFFFFFFFFFF8);
  v986 = *v975;
  v985 = v975[1];
  v987 = v985 - *v975;
  if (v985 == *v975)
  {
    v989 = v982 + ((v981 - v980) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1163;
  }
  v988 = v987 - 8;
  if ((unint64_t)(v987 - 8) >= 0x58)
  {
    v989 = v982 + ((v981 - v980) & 0xFFFFFFFFFFFFFFF8);
    if (v985 - (v983 & 0xFFFFFFFFFFFFFFF8) - v982 >= 0x20)
    {
      v990 = v983 >> 3;
      v991 = (v988 >> 3) + 1;
      v992 = (_OWORD *)(v982 + 8 * v990 - 16);
      v993 = (__int128 *)(v985 - 16);
      v994 = v991 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v995 = *v993;
        *(v992 - 1) = *(v993 - 1);
        *v992 = v995;
        v992 -= 2;
        v993 -= 2;
        v994 -= 4;
      }
      while (v994);
      v989 = v984 - 8 * (v991 & 0x3FFFFFFFFFFFFFFCLL);
      v985 -= 8 * (v991 & 0x3FFFFFFFFFFFFFFCLL);
      if (v991 == (v991 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1162;
    }
  }
  else
  {
    v989 = v982 + ((v981 - v980) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v996 = *(_QWORD *)(v985 - 8);
    v985 -= 8;
    *(_QWORD *)(v989 - 8) = v996;
    v989 -= 8;
  }
  while (v985 != v986);
LABEL_1162:
  v985 = *v975;
LABEL_1163:
  *v975 = v989;
  v975[1] = v984;
  v997 = v975[2];
  v975[2] = v982 + 800;
  if (v985)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v975[3] + 40))(v975[3], v985, v997 - v985);
LABEL_1165:
  v998 = v975[4];
  if ((unint64_t)(v975[6] - v998) > 0x31F)
    goto LABEL_1178;
  v999 = v975[5];
  v1000 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v975[7] + 16))(v975[7], 800, 8);
  v1001 = v999 - v998;
  v1002 = v1000 + ((v999 - v998) & 0xFFFFFFFFFFFFFFF8);
  v1004 = v975[4];
  v1003 = v975[5];
  v1005 = v1003 - v1004;
  if (v1003 == v1004)
  {
    v1007 = v1000 + ((v999 - v998) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1176;
  }
  v1006 = v1005 - 8;
  if ((unint64_t)(v1005 - 8) >= 0x58)
  {
    v1007 = v1000 + ((v999 - v998) & 0xFFFFFFFFFFFFFFF8);
    if (v1003 - (v1001 & 0xFFFFFFFFFFFFFFF8) - v1000 >= 0x20)
    {
      v1008 = v1001 >> 3;
      v1009 = (v1006 >> 3) + 1;
      v1010 = (_OWORD *)(v1000 + 8 * v1008 - 16);
      v1011 = (__int128 *)(v1003 - 16);
      v1012 = v1009 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1013 = *v1011;
        *(v1010 - 1) = *(v1011 - 1);
        *v1010 = v1013;
        v1010 -= 2;
        v1011 -= 2;
        v1012 -= 4;
      }
      while (v1012);
      v1007 = v1002 - 8 * (v1009 & 0x3FFFFFFFFFFFFFFCLL);
      v1003 -= 8 * (v1009 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1009 == (v1009 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1175;
    }
  }
  else
  {
    v1007 = v1000 + ((v999 - v998) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1014 = *(_QWORD *)(v1003 - 8);
    v1003 -= 8;
    *(_QWORD *)(v1007 - 8) = v1014;
    v1007 -= 8;
  }
  while (v1003 != v1004);
LABEL_1175:
  v1003 = v975[4];
LABEL_1176:
  v975[4] = v1007;
  v975[5] = v1002;
  v1015 = v975[6];
  v975[6] = v1000 + 800;
  if (v1003)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v975[7] + 40))(v975[7], v1003, v1015 - v1003);
LABEL_1178:
  v1016 = *v1644;
  *v1644 = (uint64_t)v975;
  if (v1016)
  {
    v1017 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1016);
    MEMORY[0x1A1AF4E00](v1017, 0x10A0C40D234DDC7);
  }
  v1018 = v1782;
  if (v1782 == v1781)
  {
    v1019 = 4;
    v1018 = v1781;
  }
  else
  {
    if (!v1782)
      goto LABEL_1185;
    v1019 = 5;
  }
  (*(void (**)(void))(*v1018 + 8 * v1019))();
LABEL_1185:
  v1020 = v1784;
  if (v1784 == v1783)
  {
    v1021 = 4;
    v1020 = v1783;
    goto LABEL_1189;
  }
  if (v1784)
  {
    v1021 = 5;
LABEL_1189:
    (*(void (**)(void))(*v1020 + 8 * v1021))();
  }
  v1022 = (uint64_t *)operator new();
  v1779[0] = &off_1E427ACC8;
  v1780 = v1779;
  v1777[0] = &off_1E427D398;
  v1778 = v1777;
  v1022[1] = 0;
  v1022[2] = 0;
  *v1022 = 0;
  {
    v1579 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1579, "GeoGL", 0xA3D02C1100000005);
  }
  v1024 = ggl::Allocator::instance(void)::alloc;
  v1022[4] = 0;
  v1022[3] = v1024;
  v1022[5] = 0;
  v1022[6] = 0;
  {
    v1580 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1580, "GeoGL", 0xA3D02C1100000005);
  }
  v1022[7] = ggl::Allocator::instance(void)::alloc;
  v1025 = (uint64_t)v1780;
  if (!v1780)
    goto LABEL_1195;
  if (v1780 != v1779)
  {
    v1025 = (*(uint64_t (**)(void))(*v1780 + 16))();
LABEL_1195:
    v1022[11] = v1025;
    goto LABEL_1197;
  }
  v1022[11] = (uint64_t)(v1022 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1779[0] + 24))((uint64_t)v1779, v1022 + 8);
LABEL_1197:
  v1026 = (uint64_t)v1778;
  if (!v1778)
  {
LABEL_1200:
    v1022[15] = v1026;
    goto LABEL_1202;
  }
  if (v1778 != v1777)
  {
    v1026 = (*(uint64_t (**)(void))(*v1778 + 16))();
    goto LABEL_1200;
  }
  v1022[15] = (uint64_t)(v1022 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1777[0] + 24))((uint64_t)v1777, v1022 + 12);
LABEL_1202:
  v1022[16] = 2000;
  v1027 = *v1022;
  if ((unint64_t)(v1022[2] - *v1022) > 0x31F)
    goto LABEL_1215;
  v1028 = v1022[1];
  v1029 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1022[3] + 16))(v1022[3], 800, 8);
  v1030 = v1028 - v1027;
  v1031 = v1029 + ((v1028 - v1027) & 0xFFFFFFFFFFFFFFF8);
  v1033 = *v1022;
  v1032 = v1022[1];
  v1034 = v1032 - *v1022;
  if (v1032 == *v1022)
  {
    v1036 = v1029 + ((v1028 - v1027) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1213;
  }
  v1035 = v1034 - 8;
  if ((unint64_t)(v1034 - 8) >= 0x58)
  {
    v1036 = v1029 + ((v1028 - v1027) & 0xFFFFFFFFFFFFFFF8);
    if (v1032 - (v1030 & 0xFFFFFFFFFFFFFFF8) - v1029 >= 0x20)
    {
      v1037 = v1030 >> 3;
      v1038 = (v1035 >> 3) + 1;
      v1039 = (_OWORD *)(v1029 + 8 * v1037 - 16);
      v1040 = (__int128 *)(v1032 - 16);
      v1041 = v1038 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1042 = *v1040;
        *(v1039 - 1) = *(v1040 - 1);
        *v1039 = v1042;
        v1039 -= 2;
        v1040 -= 2;
        v1041 -= 4;
      }
      while (v1041);
      v1036 = v1031 - 8 * (v1038 & 0x3FFFFFFFFFFFFFFCLL);
      v1032 -= 8 * (v1038 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1038 == (v1038 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1212;
    }
  }
  else
  {
    v1036 = v1029 + ((v1028 - v1027) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1043 = *(_QWORD *)(v1032 - 8);
    v1032 -= 8;
    *(_QWORD *)(v1036 - 8) = v1043;
    v1036 -= 8;
  }
  while (v1032 != v1033);
LABEL_1212:
  v1032 = *v1022;
LABEL_1213:
  *v1022 = v1036;
  v1022[1] = v1031;
  v1044 = v1022[2];
  v1022[2] = v1029 + 800;
  if (v1032)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1022[3] + 40))(v1022[3], v1032, v1044 - v1032);
LABEL_1215:
  v1045 = v1022[4];
  if ((unint64_t)(v1022[6] - v1045) > 0x31F)
    goto LABEL_1228;
  v1046 = v1022[5];
  v1047 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1022[7] + 16))(v1022[7], 800, 8);
  v1048 = v1046 - v1045;
  v1049 = v1047 + ((v1046 - v1045) & 0xFFFFFFFFFFFFFFF8);
  v1051 = v1022[4];
  v1050 = v1022[5];
  v1052 = v1050 - v1051;
  if (v1050 == v1051)
  {
    v1054 = v1047 + ((v1046 - v1045) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1226;
  }
  v1053 = v1052 - 8;
  if ((unint64_t)(v1052 - 8) >= 0x58)
  {
    v1054 = v1047 + ((v1046 - v1045) & 0xFFFFFFFFFFFFFFF8);
    if (v1050 - (v1048 & 0xFFFFFFFFFFFFFFF8) - v1047 >= 0x20)
    {
      v1055 = v1048 >> 3;
      v1056 = (v1053 >> 3) + 1;
      v1057 = (_OWORD *)(v1047 + 8 * v1055 - 16);
      v1058 = (__int128 *)(v1050 - 16);
      v1059 = v1056 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1060 = *v1058;
        *(v1057 - 1) = *(v1058 - 1);
        *v1057 = v1060;
        v1057 -= 2;
        v1058 -= 2;
        v1059 -= 4;
      }
      while (v1059);
      v1054 = v1049 - 8 * (v1056 & 0x3FFFFFFFFFFFFFFCLL);
      v1050 -= 8 * (v1056 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1056 == (v1056 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1225;
    }
  }
  else
  {
    v1054 = v1047 + ((v1046 - v1045) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1061 = *(_QWORD *)(v1050 - 8);
    v1050 -= 8;
    *(_QWORD *)(v1054 - 8) = v1061;
    v1054 -= 8;
  }
  while (v1050 != v1051);
LABEL_1225:
  v1050 = v1022[4];
LABEL_1226:
  v1022[4] = v1054;
  v1022[5] = v1049;
  v1062 = v1022[6];
  v1022[6] = v1047 + 800;
  if (v1050)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1022[7] + 40))(v1022[7], v1050, v1062 - v1050);
LABEL_1228:
  v1063 = *v1643;
  *v1643 = (uint64_t)v1022;
  if (v1063)
  {
    v1064 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1063);
    MEMORY[0x1A1AF4E00](v1064, 0x10A0C40D234DDC7);
  }
  v1065 = v1778;
  if (v1778 == v1777)
  {
    v1066 = 4;
    v1065 = v1777;
  }
  else
  {
    if (!v1778)
      goto LABEL_1235;
    v1066 = 5;
  }
  (*(void (**)(void))(*v1065 + 8 * v1066))();
LABEL_1235:
  v1067 = v1780;
  if (v1780 == v1779)
  {
    v1068 = 4;
    v1067 = v1779;
    goto LABEL_1239;
  }
  if (v1780)
  {
    v1068 = 5;
LABEL_1239:
    (*(void (**)(void))(*v1067 + 8 * v1068))();
  }
  v1069 = (uint64_t *)operator new();
  v1775[0] = &off_1E427AD10;
  v1776 = v1775;
  v1773[0] = &off_1E427D350;
  v1774 = v1773;
  v1069[1] = 0;
  v1069[2] = 0;
  *v1069 = 0;
  {
    v1581 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1581, "GeoGL", 0xA3D02C1100000005);
  }
  v1071 = ggl::Allocator::instance(void)::alloc;
  v1069[4] = 0;
  v1069[3] = v1071;
  v1069[5] = 0;
  v1069[6] = 0;
  {
    v1582 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1582, "GeoGL", 0xA3D02C1100000005);
  }
  v1069[7] = ggl::Allocator::instance(void)::alloc;
  v1072 = (uint64_t)v1776;
  if (!v1776)
    goto LABEL_1245;
  if (v1776 != v1775)
  {
    v1072 = (*(uint64_t (**)(void))(*v1776 + 16))();
LABEL_1245:
    v1069[11] = v1072;
    goto LABEL_1247;
  }
  v1069[11] = (uint64_t)(v1069 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1775[0] + 24))((uint64_t)v1775, v1069 + 8);
LABEL_1247:
  v1073 = (uint64_t)v1774;
  if (!v1774)
  {
LABEL_1250:
    v1069[15] = v1073;
    goto LABEL_1252;
  }
  if (v1774 != v1773)
  {
    v1073 = (*(uint64_t (**)(void))(*v1774 + 16))();
    goto LABEL_1250;
  }
  v1069[15] = (uint64_t)(v1069 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1773[0] + 24))((uint64_t)v1773, v1069 + 12);
LABEL_1252:
  v1069[16] = 2000;
  v1074 = *v1069;
  if ((unint64_t)(v1069[2] - *v1069) > 0x31F)
    goto LABEL_1265;
  v1075 = v1069[1];
  v1076 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1069[3] + 16))(v1069[3], 800, 8);
  v1077 = v1075 - v1074;
  v1078 = v1076 + ((v1075 - v1074) & 0xFFFFFFFFFFFFFFF8);
  v1080 = *v1069;
  v1079 = v1069[1];
  v1081 = v1079 - *v1069;
  if (v1079 == *v1069)
  {
    v1083 = v1076 + ((v1075 - v1074) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1263;
  }
  v1082 = v1081 - 8;
  if ((unint64_t)(v1081 - 8) >= 0x58)
  {
    v1083 = v1076 + ((v1075 - v1074) & 0xFFFFFFFFFFFFFFF8);
    if (v1079 - (v1077 & 0xFFFFFFFFFFFFFFF8) - v1076 >= 0x20)
    {
      v1084 = v1077 >> 3;
      v1085 = (v1082 >> 3) + 1;
      v1086 = (_OWORD *)(v1076 + 8 * v1084 - 16);
      v1087 = (__int128 *)(v1079 - 16);
      v1088 = v1085 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1089 = *v1087;
        *(v1086 - 1) = *(v1087 - 1);
        *v1086 = v1089;
        v1086 -= 2;
        v1087 -= 2;
        v1088 -= 4;
      }
      while (v1088);
      v1083 = v1078 - 8 * (v1085 & 0x3FFFFFFFFFFFFFFCLL);
      v1079 -= 8 * (v1085 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1085 == (v1085 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1262;
    }
  }
  else
  {
    v1083 = v1076 + ((v1075 - v1074) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1090 = *(_QWORD *)(v1079 - 8);
    v1079 -= 8;
    *(_QWORD *)(v1083 - 8) = v1090;
    v1083 -= 8;
  }
  while (v1079 != v1080);
LABEL_1262:
  v1079 = *v1069;
LABEL_1263:
  *v1069 = v1083;
  v1069[1] = v1078;
  v1091 = v1069[2];
  v1069[2] = v1076 + 800;
  if (v1079)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1069[3] + 40))(v1069[3], v1079, v1091 - v1079);
LABEL_1265:
  v1092 = v1069[4];
  if ((unint64_t)(v1069[6] - v1092) > 0x31F)
    goto LABEL_1278;
  v1093 = v1069[5];
  v1094 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1069[7] + 16))(v1069[7], 800, 8);
  v1095 = v1093 - v1092;
  v1096 = v1094 + ((v1093 - v1092) & 0xFFFFFFFFFFFFFFF8);
  v1098 = v1069[4];
  v1097 = v1069[5];
  v1099 = v1097 - v1098;
  if (v1097 == v1098)
  {
    v1101 = v1094 + ((v1093 - v1092) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1276;
  }
  v1100 = v1099 - 8;
  if ((unint64_t)(v1099 - 8) >= 0x58)
  {
    v1101 = v1094 + ((v1093 - v1092) & 0xFFFFFFFFFFFFFFF8);
    if (v1097 - (v1095 & 0xFFFFFFFFFFFFFFF8) - v1094 >= 0x20)
    {
      v1102 = v1095 >> 3;
      v1103 = (v1100 >> 3) + 1;
      v1104 = (_OWORD *)(v1094 + 8 * v1102 - 16);
      v1105 = (__int128 *)(v1097 - 16);
      v1106 = v1103 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1107 = *v1105;
        *(v1104 - 1) = *(v1105 - 1);
        *v1104 = v1107;
        v1104 -= 2;
        v1105 -= 2;
        v1106 -= 4;
      }
      while (v1106);
      v1101 = v1096 - 8 * (v1103 & 0x3FFFFFFFFFFFFFFCLL);
      v1097 -= 8 * (v1103 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1103 == (v1103 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1275;
    }
  }
  else
  {
    v1101 = v1094 + ((v1093 - v1092) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1108 = *(_QWORD *)(v1097 - 8);
    v1097 -= 8;
    *(_QWORD *)(v1101 - 8) = v1108;
    v1101 -= 8;
  }
  while (v1097 != v1098);
LABEL_1275:
  v1097 = v1069[4];
LABEL_1276:
  v1069[4] = v1101;
  v1069[5] = v1096;
  v1109 = v1069[6];
  v1069[6] = v1094 + 800;
  if (v1097)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1069[7] + 40))(v1069[7], v1097, v1109 - v1097);
LABEL_1278:
  v1110 = *v1642;
  *v1642 = (uint64_t)v1069;
  if (v1110)
  {
    v1111 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1110);
    MEMORY[0x1A1AF4E00](v1111, 0x10A0C40D234DDC7);
  }
  v1112 = v1774;
  if (v1774 == v1773)
  {
    v1113 = 4;
    v1112 = v1773;
  }
  else
  {
    if (!v1774)
      goto LABEL_1285;
    v1113 = 5;
  }
  (*(void (**)(void))(*v1112 + 8 * v1113))();
LABEL_1285:
  v1114 = v1776;
  if (v1776 == v1775)
  {
    v1115 = 4;
    v1114 = v1775;
    goto LABEL_1289;
  }
  if (v1776)
  {
    v1115 = 5;
LABEL_1289:
    (*(void (**)(void))(*v1114 + 8 * v1115))();
  }
  v1116 = (uint64_t *)operator new();
  v1771[0] = &off_1E427AD58;
  v1772 = v1771;
  v1769[0] = &off_1E42D6938;
  v1770 = v1769;
  v1116[1] = 0;
  v1116[2] = 0;
  *v1116 = 0;
  {
    v1583 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1583, "GeoGL", 0xA3D02C1100000005);
  }
  v1118 = ggl::Allocator::instance(void)::alloc;
  v1116[4] = 0;
  v1116[3] = v1118;
  v1116[5] = 0;
  v1116[6] = 0;
  {
    v1584 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1584, "GeoGL", 0xA3D02C1100000005);
  }
  v1116[7] = ggl::Allocator::instance(void)::alloc;
  v1119 = (uint64_t)v1772;
  if (!v1772)
    goto LABEL_1295;
  if (v1772 != v1771)
  {
    v1119 = (*(uint64_t (**)(void))(*v1772 + 16))();
LABEL_1295:
    v1116[11] = v1119;
    goto LABEL_1297;
  }
  v1116[11] = (uint64_t)(v1116 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1771[0] + 24))((uint64_t)v1771, v1116 + 8);
LABEL_1297:
  v1120 = (uint64_t)v1770;
  if (!v1770)
  {
LABEL_1300:
    v1116[15] = v1120;
    goto LABEL_1302;
  }
  if (v1770 != v1769)
  {
    v1120 = (*(uint64_t (**)(void))(*v1770 + 16))();
    goto LABEL_1300;
  }
  v1116[15] = (uint64_t)(v1116 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1769[0] + 24))((uint64_t)v1769, v1116 + 12);
LABEL_1302:
  v1116[16] = 2000;
  v1121 = *v1116;
  if ((unint64_t)(v1116[2] - *v1116) > 0x31F)
    goto LABEL_1315;
  v1122 = v1116[1];
  v1123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1116[3] + 16))(v1116[3], 800, 8);
  v1124 = v1122 - v1121;
  v1125 = v1123 + ((v1122 - v1121) & 0xFFFFFFFFFFFFFFF8);
  v1127 = *v1116;
  v1126 = v1116[1];
  v1128 = v1126 - *v1116;
  if (v1126 == *v1116)
  {
    v1130 = v1123 + ((v1122 - v1121) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1313;
  }
  v1129 = v1128 - 8;
  if ((unint64_t)(v1128 - 8) >= 0x58)
  {
    v1130 = v1123 + ((v1122 - v1121) & 0xFFFFFFFFFFFFFFF8);
    if (v1126 - (v1124 & 0xFFFFFFFFFFFFFFF8) - v1123 >= 0x20)
    {
      v1131 = v1124 >> 3;
      v1132 = (v1129 >> 3) + 1;
      v1133 = (_OWORD *)(v1123 + 8 * v1131 - 16);
      v1134 = (__int128 *)(v1126 - 16);
      v1135 = v1132 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1136 = *v1134;
        *(v1133 - 1) = *(v1134 - 1);
        *v1133 = v1136;
        v1133 -= 2;
        v1134 -= 2;
        v1135 -= 4;
      }
      while (v1135);
      v1130 = v1125 - 8 * (v1132 & 0x3FFFFFFFFFFFFFFCLL);
      v1126 -= 8 * (v1132 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1132 == (v1132 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1312;
    }
  }
  else
  {
    v1130 = v1123 + ((v1122 - v1121) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1137 = *(_QWORD *)(v1126 - 8);
    v1126 -= 8;
    *(_QWORD *)(v1130 - 8) = v1137;
    v1130 -= 8;
  }
  while (v1126 != v1127);
LABEL_1312:
  v1126 = *v1116;
LABEL_1313:
  *v1116 = v1130;
  v1116[1] = v1125;
  v1138 = v1116[2];
  v1116[2] = v1123 + 800;
  if (v1126)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1116[3] + 40))(v1116[3], v1126, v1138 - v1126);
LABEL_1315:
  v1139 = v1116[4];
  if ((unint64_t)(v1116[6] - v1139) > 0x31F)
    goto LABEL_1328;
  v1140 = v1116[5];
  v1141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1116[7] + 16))(v1116[7], 800, 8);
  v1142 = v1140 - v1139;
  v1143 = v1141 + ((v1140 - v1139) & 0xFFFFFFFFFFFFFFF8);
  v1145 = v1116[4];
  v1144 = v1116[5];
  v1146 = v1144 - v1145;
  if (v1144 == v1145)
  {
    v1148 = v1141 + ((v1140 - v1139) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1326;
  }
  v1147 = v1146 - 8;
  if ((unint64_t)(v1146 - 8) >= 0x58)
  {
    v1148 = v1141 + ((v1140 - v1139) & 0xFFFFFFFFFFFFFFF8);
    if (v1144 - (v1142 & 0xFFFFFFFFFFFFFFF8) - v1141 >= 0x20)
    {
      v1149 = v1142 >> 3;
      v1150 = (v1147 >> 3) + 1;
      v1151 = (_OWORD *)(v1141 + 8 * v1149 - 16);
      v1152 = (__int128 *)(v1144 - 16);
      v1153 = v1150 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1154 = *v1152;
        *(v1151 - 1) = *(v1152 - 1);
        *v1151 = v1154;
        v1151 -= 2;
        v1152 -= 2;
        v1153 -= 4;
      }
      while (v1153);
      v1148 = v1143 - 8 * (v1150 & 0x3FFFFFFFFFFFFFFCLL);
      v1144 -= 8 * (v1150 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1150 == (v1150 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1325;
    }
  }
  else
  {
    v1148 = v1141 + ((v1140 - v1139) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1155 = *(_QWORD *)(v1144 - 8);
    v1144 -= 8;
    *(_QWORD *)(v1148 - 8) = v1155;
    v1148 -= 8;
  }
  while (v1144 != v1145);
LABEL_1325:
  v1144 = v1116[4];
LABEL_1326:
  v1116[4] = v1148;
  v1116[5] = v1143;
  v1156 = v1116[6];
  v1116[6] = v1141 + 800;
  if (v1144)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1116[7] + 40))(v1116[7], v1144, v1156 - v1144);
LABEL_1328:
  v1157 = *v1641;
  *v1641 = (uint64_t)v1116;
  if (v1157)
  {
    v1158 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1157);
    MEMORY[0x1A1AF4E00](v1158, 0x10A0C40D234DDC7);
  }
  v1159 = v1770;
  if (v1770 == v1769)
  {
    v1160 = 4;
    v1159 = v1769;
  }
  else
  {
    if (!v1770)
      goto LABEL_1335;
    v1160 = 5;
  }
  (*(void (**)(void))(*v1159 + 8 * v1160))();
LABEL_1335:
  v1161 = v1772;
  if (v1772 == v1771)
  {
    v1162 = 4;
    v1161 = v1771;
    goto LABEL_1339;
  }
  if (v1772)
  {
    v1162 = 5;
LABEL_1339:
    (*(void (**)(void))(*v1161 + 8 * v1162))();
  }
  v1163 = (uint64_t *)operator new();
  v1767[0] = &off_1E427ADA0;
  v1768 = v1767;
  v1765[0] = &off_1E42D6860;
  v1766 = v1765;
  v1163[1] = 0;
  v1163[2] = 0;
  *v1163 = 0;
  {
    v1585 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1585, "GeoGL", 0xA3D02C1100000005);
  }
  v1165 = ggl::Allocator::instance(void)::alloc;
  v1163[4] = 0;
  v1163[3] = v1165;
  v1163[5] = 0;
  v1163[6] = 0;
  {
    v1586 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1586, "GeoGL", 0xA3D02C1100000005);
  }
  v1163[7] = ggl::Allocator::instance(void)::alloc;
  v1166 = (uint64_t)v1768;
  if (!v1768)
    goto LABEL_1345;
  if (v1768 != v1767)
  {
    v1166 = (*(uint64_t (**)(void))(*v1768 + 16))();
LABEL_1345:
    v1163[11] = v1166;
    goto LABEL_1347;
  }
  v1163[11] = (uint64_t)(v1163 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1767[0] + 24))((uint64_t)v1767, v1163 + 8);
LABEL_1347:
  v1167 = (uint64_t)v1766;
  if (!v1766)
  {
LABEL_1350:
    v1163[15] = v1167;
    goto LABEL_1352;
  }
  if (v1766 != v1765)
  {
    v1167 = (*(uint64_t (**)(void))(*v1766 + 16))();
    goto LABEL_1350;
  }
  v1163[15] = (uint64_t)(v1163 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1765[0] + 24))((uint64_t)v1765, v1163 + 12);
LABEL_1352:
  v1163[16] = 2000;
  v1168 = *v1163;
  if ((unint64_t)(v1163[2] - *v1163) > 0x31F)
    goto LABEL_1365;
  v1169 = v1163[1];
  v1170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1163[3] + 16))(v1163[3], 800, 8);
  v1171 = v1169 - v1168;
  v1172 = v1170 + ((v1169 - v1168) & 0xFFFFFFFFFFFFFFF8);
  v1174 = *v1163;
  v1173 = v1163[1];
  v1175 = v1173 - *v1163;
  if (v1173 == *v1163)
  {
    v1177 = v1170 + ((v1169 - v1168) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1363;
  }
  v1176 = v1175 - 8;
  if ((unint64_t)(v1175 - 8) >= 0x58)
  {
    v1177 = v1170 + ((v1169 - v1168) & 0xFFFFFFFFFFFFFFF8);
    if (v1173 - (v1171 & 0xFFFFFFFFFFFFFFF8) - v1170 >= 0x20)
    {
      v1178 = v1171 >> 3;
      v1179 = (v1176 >> 3) + 1;
      v1180 = (_OWORD *)(v1170 + 8 * v1178 - 16);
      v1181 = (__int128 *)(v1173 - 16);
      v1182 = v1179 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1183 = *v1181;
        *(v1180 - 1) = *(v1181 - 1);
        *v1180 = v1183;
        v1180 -= 2;
        v1181 -= 2;
        v1182 -= 4;
      }
      while (v1182);
      v1177 = v1172 - 8 * (v1179 & 0x3FFFFFFFFFFFFFFCLL);
      v1173 -= 8 * (v1179 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1179 == (v1179 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1362;
    }
  }
  else
  {
    v1177 = v1170 + ((v1169 - v1168) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1184 = *(_QWORD *)(v1173 - 8);
    v1173 -= 8;
    *(_QWORD *)(v1177 - 8) = v1184;
    v1177 -= 8;
  }
  while (v1173 != v1174);
LABEL_1362:
  v1173 = *v1163;
LABEL_1363:
  *v1163 = v1177;
  v1163[1] = v1172;
  v1185 = v1163[2];
  v1163[2] = v1170 + 800;
  if (v1173)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1163[3] + 40))(v1163[3], v1173, v1185 - v1173);
LABEL_1365:
  v1186 = v1163[4];
  if ((unint64_t)(v1163[6] - v1186) > 0x31F)
    goto LABEL_1378;
  v1187 = v1163[5];
  v1188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1163[7] + 16))(v1163[7], 800, 8);
  v1189 = v1187 - v1186;
  v1190 = v1188 + ((v1187 - v1186) & 0xFFFFFFFFFFFFFFF8);
  v1192 = v1163[4];
  v1191 = v1163[5];
  v1193 = v1191 - v1192;
  if (v1191 == v1192)
  {
    v1195 = v1188 + ((v1187 - v1186) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1376;
  }
  v1194 = v1193 - 8;
  if ((unint64_t)(v1193 - 8) >= 0x58)
  {
    v1195 = v1188 + ((v1187 - v1186) & 0xFFFFFFFFFFFFFFF8);
    if (v1191 - (v1189 & 0xFFFFFFFFFFFFFFF8) - v1188 >= 0x20)
    {
      v1196 = v1189 >> 3;
      v1197 = (v1194 >> 3) + 1;
      v1198 = (_OWORD *)(v1188 + 8 * v1196 - 16);
      v1199 = (__int128 *)(v1191 - 16);
      v1200 = v1197 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1201 = *v1199;
        *(v1198 - 1) = *(v1199 - 1);
        *v1198 = v1201;
        v1198 -= 2;
        v1199 -= 2;
        v1200 -= 4;
      }
      while (v1200);
      v1195 = v1190 - 8 * (v1197 & 0x3FFFFFFFFFFFFFFCLL);
      v1191 -= 8 * (v1197 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1197 == (v1197 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1375;
    }
  }
  else
  {
    v1195 = v1188 + ((v1187 - v1186) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1202 = *(_QWORD *)(v1191 - 8);
    v1191 -= 8;
    *(_QWORD *)(v1195 - 8) = v1202;
    v1195 -= 8;
  }
  while (v1191 != v1192);
LABEL_1375:
  v1191 = v1163[4];
LABEL_1376:
  v1163[4] = v1195;
  v1163[5] = v1190;
  v1203 = v1163[6];
  v1163[6] = v1188 + 800;
  if (v1191)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1163[7] + 40))(v1163[7], v1191, v1203 - v1191);
LABEL_1378:
  v1204 = *v1640;
  *v1640 = (uint64_t)v1163;
  if (v1204)
  {
    v1205 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1204);
    MEMORY[0x1A1AF4E00](v1205, 0x10A0C40D234DDC7);
  }
  v1206 = v1766;
  if (v1766 == v1765)
  {
    v1207 = 4;
    v1206 = v1765;
  }
  else
  {
    if (!v1766)
      goto LABEL_1385;
    v1207 = 5;
  }
  (*(void (**)(void))(*v1206 + 8 * v1207))();
LABEL_1385:
  v1208 = v1768;
  if (v1768 == v1767)
  {
    v1209 = 4;
    v1208 = v1767;
    goto LABEL_1389;
  }
  if (v1768)
  {
    v1209 = 5;
LABEL_1389:
    (*(void (**)(void))(*v1208 + 8 * v1209))();
  }
  v1210 = (uint64_t *)operator new();
  v1763[0] = &off_1E427ADE8;
  v1764 = v1763;
  v1761[0] = &off_1E42D68A8;
  v1762 = v1761;
  v1210[1] = 0;
  v1210[2] = 0;
  *v1210 = 0;
  {
    v1587 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1587, "GeoGL", 0xA3D02C1100000005);
  }
  v1212 = ggl::Allocator::instance(void)::alloc;
  v1210[4] = 0;
  v1210[3] = v1212;
  v1210[5] = 0;
  v1210[6] = 0;
  {
    v1588 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1588, "GeoGL", 0xA3D02C1100000005);
  }
  v1210[7] = ggl::Allocator::instance(void)::alloc;
  v1213 = (uint64_t)v1764;
  if (!v1764)
    goto LABEL_1395;
  if (v1764 != v1763)
  {
    v1213 = (*(uint64_t (**)(void))(*v1764 + 16))();
LABEL_1395:
    v1210[11] = v1213;
    goto LABEL_1397;
  }
  v1210[11] = (uint64_t)(v1210 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1763[0] + 24))((uint64_t)v1763, v1210 + 8);
LABEL_1397:
  v1214 = (uint64_t)v1762;
  if (!v1762)
  {
LABEL_1400:
    v1210[15] = v1214;
    goto LABEL_1402;
  }
  if (v1762 != v1761)
  {
    v1214 = (*(uint64_t (**)(void))(*v1762 + 16))();
    goto LABEL_1400;
  }
  v1210[15] = (uint64_t)(v1210 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1761[0] + 24))((uint64_t)v1761, v1210 + 12);
LABEL_1402:
  v1210[16] = 2000;
  v1215 = *v1210;
  if ((unint64_t)(v1210[2] - *v1210) > 0x31F)
    goto LABEL_1415;
  v1216 = v1210[1];
  v1217 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1210[3] + 16))(v1210[3], 800, 8);
  v1218 = v1216 - v1215;
  v1219 = v1217 + ((v1216 - v1215) & 0xFFFFFFFFFFFFFFF8);
  v1221 = *v1210;
  v1220 = v1210[1];
  v1222 = v1220 - *v1210;
  if (v1220 == *v1210)
  {
    v1224 = v1217 + ((v1216 - v1215) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1413;
  }
  v1223 = v1222 - 8;
  if ((unint64_t)(v1222 - 8) >= 0x58)
  {
    v1224 = v1217 + ((v1216 - v1215) & 0xFFFFFFFFFFFFFFF8);
    if (v1220 - (v1218 & 0xFFFFFFFFFFFFFFF8) - v1217 >= 0x20)
    {
      v1225 = v1218 >> 3;
      v1226 = (v1223 >> 3) + 1;
      v1227 = (_OWORD *)(v1217 + 8 * v1225 - 16);
      v1228 = (__int128 *)(v1220 - 16);
      v1229 = v1226 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1230 = *v1228;
        *(v1227 - 1) = *(v1228 - 1);
        *v1227 = v1230;
        v1227 -= 2;
        v1228 -= 2;
        v1229 -= 4;
      }
      while (v1229);
      v1224 = v1219 - 8 * (v1226 & 0x3FFFFFFFFFFFFFFCLL);
      v1220 -= 8 * (v1226 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1226 == (v1226 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1412;
    }
  }
  else
  {
    v1224 = v1217 + ((v1216 - v1215) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1231 = *(_QWORD *)(v1220 - 8);
    v1220 -= 8;
    *(_QWORD *)(v1224 - 8) = v1231;
    v1224 -= 8;
  }
  while (v1220 != v1221);
LABEL_1412:
  v1220 = *v1210;
LABEL_1413:
  *v1210 = v1224;
  v1210[1] = v1219;
  v1232 = v1210[2];
  v1210[2] = v1217 + 800;
  if (v1220)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1210[3] + 40))(v1210[3], v1220, v1232 - v1220);
LABEL_1415:
  v1233 = v1210[4];
  if ((unint64_t)(v1210[6] - v1233) > 0x31F)
    goto LABEL_1428;
  v1234 = v1210[5];
  v1235 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1210[7] + 16))(v1210[7], 800, 8);
  v1236 = v1234 - v1233;
  v1237 = v1235 + ((v1234 - v1233) & 0xFFFFFFFFFFFFFFF8);
  v1239 = v1210[4];
  v1238 = v1210[5];
  v1240 = v1238 - v1239;
  if (v1238 == v1239)
  {
    v1242 = v1235 + ((v1234 - v1233) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1426;
  }
  v1241 = v1240 - 8;
  if ((unint64_t)(v1240 - 8) >= 0x58)
  {
    v1242 = v1235 + ((v1234 - v1233) & 0xFFFFFFFFFFFFFFF8);
    if (v1238 - (v1236 & 0xFFFFFFFFFFFFFFF8) - v1235 >= 0x20)
    {
      v1243 = v1236 >> 3;
      v1244 = (v1241 >> 3) + 1;
      v1245 = (_OWORD *)(v1235 + 8 * v1243 - 16);
      v1246 = (__int128 *)(v1238 - 16);
      v1247 = v1244 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1248 = *v1246;
        *(v1245 - 1) = *(v1246 - 1);
        *v1245 = v1248;
        v1245 -= 2;
        v1246 -= 2;
        v1247 -= 4;
      }
      while (v1247);
      v1242 = v1237 - 8 * (v1244 & 0x3FFFFFFFFFFFFFFCLL);
      v1238 -= 8 * (v1244 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1244 == (v1244 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1425;
    }
  }
  else
  {
    v1242 = v1235 + ((v1234 - v1233) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1249 = *(_QWORD *)(v1238 - 8);
    v1238 -= 8;
    *(_QWORD *)(v1242 - 8) = v1249;
    v1242 -= 8;
  }
  while (v1238 != v1239);
LABEL_1425:
  v1238 = v1210[4];
LABEL_1426:
  v1210[4] = v1242;
  v1210[5] = v1237;
  v1250 = v1210[6];
  v1210[6] = v1235 + 800;
  if (v1238)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1210[7] + 40))(v1210[7], v1238, v1250 - v1238);
LABEL_1428:
  v1251 = *v1639;
  *v1639 = (uint64_t)v1210;
  if (v1251)
  {
    v1252 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1251);
    MEMORY[0x1A1AF4E00](v1252, 0x10A0C40D234DDC7);
  }
  v1253 = v1762;
  if (v1762 == v1761)
  {
    v1254 = 4;
    v1253 = v1761;
  }
  else
  {
    if (!v1762)
      goto LABEL_1435;
    v1254 = 5;
  }
  (*(void (**)(void))(*v1253 + 8 * v1254))();
LABEL_1435:
  v1255 = v1764;
  if (v1764 == v1763)
  {
    v1256 = 4;
    v1255 = v1763;
    goto LABEL_1439;
  }
  if (v1764)
  {
    v1256 = 5;
LABEL_1439:
    (*(void (**)(void))(*v1255 + 8 * v1256))();
  }
  v1257 = (uint64_t *)operator new();
  v1759[0] = &off_1E427AE30;
  v1760 = v1759;
  v1757[0] = &off_1E42D6AE8;
  v1758 = v1757;
  v1257[1] = 0;
  v1257[2] = 0;
  *v1257 = 0;
  {
    v1589 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1589, "GeoGL", 0xA3D02C1100000005);
  }
  v1259 = ggl::Allocator::instance(void)::alloc;
  v1257[4] = 0;
  v1257[3] = v1259;
  v1257[5] = 0;
  v1257[6] = 0;
  {
    v1590 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1590, "GeoGL", 0xA3D02C1100000005);
  }
  v1257[7] = ggl::Allocator::instance(void)::alloc;
  v1260 = (uint64_t)v1760;
  if (!v1760)
    goto LABEL_1445;
  if (v1760 != v1759)
  {
    v1260 = (*(uint64_t (**)(void))(*v1760 + 16))();
LABEL_1445:
    v1257[11] = v1260;
    goto LABEL_1447;
  }
  v1257[11] = (uint64_t)(v1257 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1759[0] + 24))((uint64_t)v1759, v1257 + 8);
LABEL_1447:
  v1261 = (uint64_t)v1758;
  if (!v1758)
  {
LABEL_1450:
    v1257[15] = v1261;
    goto LABEL_1452;
  }
  if (v1758 != v1757)
  {
    v1261 = (*(uint64_t (**)(void))(*v1758 + 16))();
    goto LABEL_1450;
  }
  v1257[15] = (uint64_t)(v1257 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1757[0] + 24))((uint64_t)v1757, v1257 + 12);
LABEL_1452:
  v1257[16] = 2000;
  v1262 = *v1257;
  if ((unint64_t)(v1257[2] - *v1257) > 0x31F)
    goto LABEL_1465;
  v1263 = v1257[1];
  v1264 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1257[3] + 16))(v1257[3], 800, 8);
  v1265 = v1263 - v1262;
  v1266 = v1264 + ((v1263 - v1262) & 0xFFFFFFFFFFFFFFF8);
  v1268 = *v1257;
  v1267 = v1257[1];
  v1269 = v1267 - *v1257;
  if (v1267 == *v1257)
  {
    v1271 = v1264 + ((v1263 - v1262) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1463;
  }
  v1270 = v1269 - 8;
  if ((unint64_t)(v1269 - 8) >= 0x58)
  {
    v1271 = v1264 + ((v1263 - v1262) & 0xFFFFFFFFFFFFFFF8);
    if (v1267 - (v1265 & 0xFFFFFFFFFFFFFFF8) - v1264 >= 0x20)
    {
      v1272 = v1265 >> 3;
      v1273 = (v1270 >> 3) + 1;
      v1274 = (_OWORD *)(v1264 + 8 * v1272 - 16);
      v1275 = (__int128 *)(v1267 - 16);
      v1276 = v1273 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1277 = *v1275;
        *(v1274 - 1) = *(v1275 - 1);
        *v1274 = v1277;
        v1274 -= 2;
        v1275 -= 2;
        v1276 -= 4;
      }
      while (v1276);
      v1271 = v1266 - 8 * (v1273 & 0x3FFFFFFFFFFFFFFCLL);
      v1267 -= 8 * (v1273 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1273 == (v1273 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1462;
    }
  }
  else
  {
    v1271 = v1264 + ((v1263 - v1262) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1278 = *(_QWORD *)(v1267 - 8);
    v1267 -= 8;
    *(_QWORD *)(v1271 - 8) = v1278;
    v1271 -= 8;
  }
  while (v1267 != v1268);
LABEL_1462:
  v1267 = *v1257;
LABEL_1463:
  *v1257 = v1271;
  v1257[1] = v1266;
  v1279 = v1257[2];
  v1257[2] = v1264 + 800;
  if (v1267)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1257[3] + 40))(v1257[3], v1267, v1279 - v1267);
LABEL_1465:
  v1280 = v1257[4];
  if ((unint64_t)(v1257[6] - v1280) > 0x31F)
    goto LABEL_1478;
  v1281 = v1257[5];
  v1282 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1257[7] + 16))(v1257[7], 800, 8);
  v1283 = v1281 - v1280;
  v1284 = v1282 + ((v1281 - v1280) & 0xFFFFFFFFFFFFFFF8);
  v1286 = v1257[4];
  v1285 = v1257[5];
  v1287 = v1285 - v1286;
  if (v1285 == v1286)
  {
    v1289 = v1282 + ((v1281 - v1280) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1476;
  }
  v1288 = v1287 - 8;
  if ((unint64_t)(v1287 - 8) >= 0x58)
  {
    v1289 = v1282 + ((v1281 - v1280) & 0xFFFFFFFFFFFFFFF8);
    if (v1285 - (v1283 & 0xFFFFFFFFFFFFFFF8) - v1282 >= 0x20)
    {
      v1290 = v1283 >> 3;
      v1291 = (v1288 >> 3) + 1;
      v1292 = (_OWORD *)(v1282 + 8 * v1290 - 16);
      v1293 = (__int128 *)(v1285 - 16);
      v1294 = v1291 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1295 = *v1293;
        *(v1292 - 1) = *(v1293 - 1);
        *v1292 = v1295;
        v1292 -= 2;
        v1293 -= 2;
        v1294 -= 4;
      }
      while (v1294);
      v1289 = v1284 - 8 * (v1291 & 0x3FFFFFFFFFFFFFFCLL);
      v1285 -= 8 * (v1291 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1291 == (v1291 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1475;
    }
  }
  else
  {
    v1289 = v1282 + ((v1281 - v1280) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1296 = *(_QWORD *)(v1285 - 8);
    v1285 -= 8;
    *(_QWORD *)(v1289 - 8) = v1296;
    v1289 -= 8;
  }
  while (v1285 != v1286);
LABEL_1475:
  v1285 = v1257[4];
LABEL_1476:
  v1257[4] = v1289;
  v1257[5] = v1284;
  v1297 = v1257[6];
  v1257[6] = v1282 + 800;
  if (v1285)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1257[7] + 40))(v1257[7], v1285, v1297 - v1285);
LABEL_1478:
  v1298 = *v1638;
  *v1638 = (uint64_t)v1257;
  if (v1298)
  {
    v1299 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1298);
    MEMORY[0x1A1AF4E00](v1299, 0x10A0C40D234DDC7);
  }
  v1300 = v1758;
  if (v1758 == v1757)
  {
    v1301 = 4;
    v1300 = v1757;
  }
  else
  {
    if (!v1758)
      goto LABEL_1485;
    v1301 = 5;
  }
  (*(void (**)(void))(*v1300 + 8 * v1301))();
LABEL_1485:
  v1302 = v1760;
  if (v1760 == v1759)
  {
    v1303 = 4;
    v1302 = v1759;
    goto LABEL_1489;
  }
  if (v1760)
  {
    v1303 = 5;
LABEL_1489:
    (*(void (**)(void))(*v1302 + 8 * v1303))();
  }
  v1304 = (uint64_t *)operator new();
  v1755[0] = &off_1E427AE78;
  v1756 = v1755;
  v1753[0] = &off_1E42D68F0;
  v1754 = v1753;
  v1304[1] = 0;
  v1304[2] = 0;
  *v1304 = 0;
  {
    v1591 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1591, "GeoGL", 0xA3D02C1100000005);
  }
  v1306 = ggl::Allocator::instance(void)::alloc;
  v1304[4] = 0;
  v1304[3] = v1306;
  v1304[5] = 0;
  v1304[6] = 0;
  {
    v1592 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1592, "GeoGL", 0xA3D02C1100000005);
  }
  v1304[7] = ggl::Allocator::instance(void)::alloc;
  v1307 = (uint64_t)v1756;
  if (!v1756)
    goto LABEL_1495;
  if (v1756 != v1755)
  {
    v1307 = (*(uint64_t (**)(void))(*v1756 + 16))();
LABEL_1495:
    v1304[11] = v1307;
    goto LABEL_1497;
  }
  v1304[11] = (uint64_t)(v1304 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1755[0] + 24))((uint64_t)v1755, v1304 + 8);
LABEL_1497:
  v1308 = (uint64_t)v1754;
  if (!v1754)
  {
LABEL_1500:
    v1304[15] = v1308;
    goto LABEL_1502;
  }
  if (v1754 != v1753)
  {
    v1308 = (*(uint64_t (**)(void))(*v1754 + 16))();
    goto LABEL_1500;
  }
  v1304[15] = (uint64_t)(v1304 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1753[0] + 24))((uint64_t)v1753, v1304 + 12);
LABEL_1502:
  v1304[16] = 2000;
  v1309 = *v1304;
  if ((unint64_t)(v1304[2] - *v1304) > 0x31F)
    goto LABEL_1515;
  v1310 = v1304[1];
  v1311 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1304[3] + 16))(v1304[3], 800, 8);
  v1312 = v1310 - v1309;
  v1313 = v1311 + ((v1310 - v1309) & 0xFFFFFFFFFFFFFFF8);
  v1315 = *v1304;
  v1314 = v1304[1];
  v1316 = v1314 - *v1304;
  if (v1314 == *v1304)
  {
    v1318 = v1311 + ((v1310 - v1309) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1513;
  }
  v1317 = v1316 - 8;
  if ((unint64_t)(v1316 - 8) >= 0x58)
  {
    v1318 = v1311 + ((v1310 - v1309) & 0xFFFFFFFFFFFFFFF8);
    if (v1314 - (v1312 & 0xFFFFFFFFFFFFFFF8) - v1311 >= 0x20)
    {
      v1319 = v1312 >> 3;
      v1320 = (v1317 >> 3) + 1;
      v1321 = (_OWORD *)(v1311 + 8 * v1319 - 16);
      v1322 = (__int128 *)(v1314 - 16);
      v1323 = v1320 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1324 = *v1322;
        *(v1321 - 1) = *(v1322 - 1);
        *v1321 = v1324;
        v1321 -= 2;
        v1322 -= 2;
        v1323 -= 4;
      }
      while (v1323);
      v1318 = v1313 - 8 * (v1320 & 0x3FFFFFFFFFFFFFFCLL);
      v1314 -= 8 * (v1320 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1320 == (v1320 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1512;
    }
  }
  else
  {
    v1318 = v1311 + ((v1310 - v1309) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1325 = *(_QWORD *)(v1314 - 8);
    v1314 -= 8;
    *(_QWORD *)(v1318 - 8) = v1325;
    v1318 -= 8;
  }
  while (v1314 != v1315);
LABEL_1512:
  v1314 = *v1304;
LABEL_1513:
  *v1304 = v1318;
  v1304[1] = v1313;
  v1326 = v1304[2];
  v1304[2] = v1311 + 800;
  if (v1314)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1304[3] + 40))(v1304[3], v1314, v1326 - v1314);
LABEL_1515:
  v1327 = v1304[4];
  if ((unint64_t)(v1304[6] - v1327) > 0x31F)
    goto LABEL_1528;
  v1328 = v1304[5];
  v1329 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1304[7] + 16))(v1304[7], 800, 8);
  v1330 = v1328 - v1327;
  v1331 = v1329 + ((v1328 - v1327) & 0xFFFFFFFFFFFFFFF8);
  v1333 = v1304[4];
  v1332 = v1304[5];
  v1334 = v1332 - v1333;
  if (v1332 == v1333)
  {
    v1336 = v1329 + ((v1328 - v1327) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1526;
  }
  v1335 = v1334 - 8;
  if ((unint64_t)(v1334 - 8) >= 0x58)
  {
    v1336 = v1329 + ((v1328 - v1327) & 0xFFFFFFFFFFFFFFF8);
    if (v1332 - (v1330 & 0xFFFFFFFFFFFFFFF8) - v1329 >= 0x20)
    {
      v1337 = v1330 >> 3;
      v1338 = (v1335 >> 3) + 1;
      v1339 = (_OWORD *)(v1329 + 8 * v1337 - 16);
      v1340 = (__int128 *)(v1332 - 16);
      v1341 = v1338 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1342 = *v1340;
        *(v1339 - 1) = *(v1340 - 1);
        *v1339 = v1342;
        v1339 -= 2;
        v1340 -= 2;
        v1341 -= 4;
      }
      while (v1341);
      v1336 = v1331 - 8 * (v1338 & 0x3FFFFFFFFFFFFFFCLL);
      v1332 -= 8 * (v1338 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1338 == (v1338 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1525;
    }
  }
  else
  {
    v1336 = v1329 + ((v1328 - v1327) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1343 = *(_QWORD *)(v1332 - 8);
    v1332 -= 8;
    *(_QWORD *)(v1336 - 8) = v1343;
    v1336 -= 8;
  }
  while (v1332 != v1333);
LABEL_1525:
  v1332 = v1304[4];
LABEL_1526:
  v1304[4] = v1336;
  v1304[5] = v1331;
  v1344 = v1304[6];
  v1304[6] = v1329 + 800;
  if (v1332)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1304[7] + 40))(v1304[7], v1332, v1344 - v1332);
LABEL_1528:
  v1345 = *v1637;
  *v1637 = (uint64_t)v1304;
  if (v1345)
  {
    v1346 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1345);
    MEMORY[0x1A1AF4E00](v1346, 0x10A0C40D234DDC7);
  }
  v1347 = v1754;
  if (v1754 == v1753)
  {
    v1348 = 4;
    v1347 = v1753;
  }
  else
  {
    if (!v1754)
      goto LABEL_1535;
    v1348 = 5;
  }
  (*(void (**)(void))(*v1347 + 8 * v1348))();
LABEL_1535:
  v1349 = v1756;
  if (v1756 == v1755)
  {
    v1350 = 4;
    v1349 = v1755;
    goto LABEL_1539;
  }
  if (v1756)
  {
    v1350 = 5;
LABEL_1539:
    (*(void (**)(void))(*v1349 + 8 * v1350))();
  }
  v1351 = (uint64_t *)operator new();
  v1751[0] = &off_1E427AEC0;
  v1752 = v1751;
  v1749[0] = &off_1E42D6AA0;
  v1750 = v1749;
  v1351[1] = 0;
  v1351[2] = 0;
  *v1351 = 0;
  {
    v1593 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1593, "GeoGL", 0xA3D02C1100000005);
  }
  v1353 = ggl::Allocator::instance(void)::alloc;
  v1351[4] = 0;
  v1351[3] = v1353;
  v1351[5] = 0;
  v1351[6] = 0;
  {
    v1594 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1594, "GeoGL", 0xA3D02C1100000005);
  }
  v1351[7] = ggl::Allocator::instance(void)::alloc;
  v1354 = (uint64_t)v1752;
  if (!v1752)
    goto LABEL_1545;
  if (v1752 != v1751)
  {
    v1354 = (*(uint64_t (**)(void))(*v1752 + 16))();
LABEL_1545:
    v1351[11] = v1354;
    goto LABEL_1547;
  }
  v1351[11] = (uint64_t)(v1351 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1751[0] + 24))((uint64_t)v1751, v1351 + 8);
LABEL_1547:
  v1355 = (uint64_t)v1750;
  if (!v1750)
  {
LABEL_1550:
    v1351[15] = v1355;
    goto LABEL_1552;
  }
  if (v1750 != v1749)
  {
    v1355 = (*(uint64_t (**)(void))(*v1750 + 16))();
    goto LABEL_1550;
  }
  v1351[15] = (uint64_t)(v1351 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1749[0] + 24))((uint64_t)v1749, v1351 + 12);
LABEL_1552:
  v1351[16] = 2000;
  v1356 = *v1351;
  if ((unint64_t)(v1351[2] - *v1351) > 0x31F)
    goto LABEL_1565;
  v1357 = v1351[1];
  v1358 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1351[3] + 16))(v1351[3], 800, 8);
  v1359 = v1357 - v1356;
  v1360 = v1358 + ((v1357 - v1356) & 0xFFFFFFFFFFFFFFF8);
  v1362 = *v1351;
  v1361 = v1351[1];
  v1363 = v1361 - *v1351;
  if (v1361 == *v1351)
  {
    v1365 = v1358 + ((v1357 - v1356) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1563;
  }
  v1364 = v1363 - 8;
  if ((unint64_t)(v1363 - 8) >= 0x58)
  {
    v1365 = v1358 + ((v1357 - v1356) & 0xFFFFFFFFFFFFFFF8);
    if (v1361 - (v1359 & 0xFFFFFFFFFFFFFFF8) - v1358 >= 0x20)
    {
      v1366 = v1359 >> 3;
      v1367 = (v1364 >> 3) + 1;
      v1368 = (_OWORD *)(v1358 + 8 * v1366 - 16);
      v1369 = (__int128 *)(v1361 - 16);
      v1370 = v1367 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1371 = *v1369;
        *(v1368 - 1) = *(v1369 - 1);
        *v1368 = v1371;
        v1368 -= 2;
        v1369 -= 2;
        v1370 -= 4;
      }
      while (v1370);
      v1365 = v1360 - 8 * (v1367 & 0x3FFFFFFFFFFFFFFCLL);
      v1361 -= 8 * (v1367 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1367 == (v1367 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1562;
    }
  }
  else
  {
    v1365 = v1358 + ((v1357 - v1356) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1372 = *(_QWORD *)(v1361 - 8);
    v1361 -= 8;
    *(_QWORD *)(v1365 - 8) = v1372;
    v1365 -= 8;
  }
  while (v1361 != v1362);
LABEL_1562:
  v1361 = *v1351;
LABEL_1563:
  *v1351 = v1365;
  v1351[1] = v1360;
  v1373 = v1351[2];
  v1351[2] = v1358 + 800;
  if (v1361)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1351[3] + 40))(v1351[3], v1361, v1373 - v1361);
LABEL_1565:
  v1374 = v1351[4];
  if ((unint64_t)(v1351[6] - v1374) > 0x31F)
    goto LABEL_1578;
  v1375 = v1351[5];
  v1376 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1351[7] + 16))(v1351[7], 800, 8);
  v1377 = v1375 - v1374;
  v1378 = v1376 + ((v1375 - v1374) & 0xFFFFFFFFFFFFFFF8);
  v1380 = v1351[4];
  v1379 = v1351[5];
  v1381 = v1379 - v1380;
  if (v1379 == v1380)
  {
    v1383 = v1376 + ((v1375 - v1374) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1576;
  }
  v1382 = v1381 - 8;
  if ((unint64_t)(v1381 - 8) >= 0x58)
  {
    v1383 = v1376 + ((v1375 - v1374) & 0xFFFFFFFFFFFFFFF8);
    if (v1379 - (v1377 & 0xFFFFFFFFFFFFFFF8) - v1376 >= 0x20)
    {
      v1384 = v1377 >> 3;
      v1385 = (v1382 >> 3) + 1;
      v1386 = (_OWORD *)(v1376 + 8 * v1384 - 16);
      v1387 = (__int128 *)(v1379 - 16);
      v1388 = v1385 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1389 = *v1387;
        *(v1386 - 1) = *(v1387 - 1);
        *v1386 = v1389;
        v1386 -= 2;
        v1387 -= 2;
        v1388 -= 4;
      }
      while (v1388);
      v1383 = v1378 - 8 * (v1385 & 0x3FFFFFFFFFFFFFFCLL);
      v1379 -= 8 * (v1385 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1385 == (v1385 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1575;
    }
  }
  else
  {
    v1383 = v1376 + ((v1375 - v1374) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1390 = *(_QWORD *)(v1379 - 8);
    v1379 -= 8;
    *(_QWORD *)(v1383 - 8) = v1390;
    v1383 -= 8;
  }
  while (v1379 != v1380);
LABEL_1575:
  v1379 = v1351[4];
LABEL_1576:
  v1351[4] = v1383;
  v1351[5] = v1378;
  v1391 = v1351[6];
  v1351[6] = v1376 + 800;
  if (v1379)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1351[7] + 40))(v1351[7], v1379, v1391 - v1379);
LABEL_1578:
  v1392 = *v1636;
  *v1636 = (uint64_t)v1351;
  if (v1392)
  {
    v1393 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1392);
    MEMORY[0x1A1AF4E00](v1393, 0x10A0C40D234DDC7);
  }
  v1394 = v1750;
  if (v1750 == v1749)
  {
    v1395 = 4;
    v1394 = v1749;
  }
  else
  {
    if (!v1750)
      goto LABEL_1585;
    v1395 = 5;
  }
  (*(void (**)(void))(*v1394 + 8 * v1395))();
LABEL_1585:
  v1396 = v1752;
  if (v1752 == v1751)
  {
    v1397 = 4;
    v1396 = v1751;
    goto LABEL_1589;
  }
  if (v1752)
  {
    v1397 = 5;
LABEL_1589:
    (*(void (**)(void))(*v1396 + 8 * v1397))();
  }
  v1398 = (uint64_t *)operator new();
  v1747[0] = &off_1E427AF08;
  v1748 = v1747;
  v1745[0] = &off_1E42D6980;
  v1746 = v1745;
  v1398[1] = 0;
  v1398[2] = 0;
  *v1398 = 0;
  {
    v1595 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1595, "GeoGL", 0xA3D02C1100000005);
  }
  v1400 = ggl::Allocator::instance(void)::alloc;
  v1398[4] = 0;
  v1398[3] = v1400;
  v1398[5] = 0;
  v1398[6] = 0;
  {
    v1596 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1596, "GeoGL", 0xA3D02C1100000005);
  }
  v1398[7] = ggl::Allocator::instance(void)::alloc;
  v1401 = (uint64_t)v1748;
  if (!v1748)
    goto LABEL_1595;
  if (v1748 != v1747)
  {
    v1401 = (*(uint64_t (**)(void))(*v1748 + 16))();
LABEL_1595:
    v1398[11] = v1401;
    goto LABEL_1597;
  }
  v1398[11] = (uint64_t)(v1398 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v1747[0] + 24))((uint64_t)v1747, v1398 + 8);
LABEL_1597:
  v1402 = (uint64_t)v1746;
  if (!v1746)
  {
LABEL_1600:
    v1398[15] = v1402;
    goto LABEL_1602;
  }
  if (v1746 != v1745)
  {
    v1402 = (*(uint64_t (**)(void))(*v1746 + 16))();
    goto LABEL_1600;
  }
  v1398[15] = (uint64_t)(v1398 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v1745[0] + 24))((uint64_t)v1745, v1398 + 12);
LABEL_1602:
  v1398[16] = 2000;
  v1403 = *v1398;
  if ((unint64_t)(v1398[2] - *v1398) > 0x31F)
    goto LABEL_1615;
  v1404 = v1398[1];
  v1405 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1398[3] + 16))(v1398[3], 800, 8);
  v1406 = v1404 - v1403;
  v1407 = v1405 + ((v1404 - v1403) & 0xFFFFFFFFFFFFFFF8);
  v1409 = *v1398;
  v1408 = v1398[1];
  v1410 = v1408 - *v1398;
  if (v1408 == *v1398)
  {
    v1412 = v1405 + ((v1404 - v1403) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1613;
  }
  v1411 = v1410 - 8;
  if ((unint64_t)(v1410 - 8) >= 0x58)
  {
    v1412 = v1405 + ((v1404 - v1403) & 0xFFFFFFFFFFFFFFF8);
    if (v1408 - (v1406 & 0xFFFFFFFFFFFFFFF8) - v1405 >= 0x20)
    {
      v1413 = v1406 >> 3;
      v1414 = (v1411 >> 3) + 1;
      v1415 = (_OWORD *)(v1405 + 8 * v1413 - 16);
      v1416 = (__int128 *)(v1408 - 16);
      v1417 = v1414 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1418 = *v1416;
        *(v1415 - 1) = *(v1416 - 1);
        *v1415 = v1418;
        v1415 -= 2;
        v1416 -= 2;
        v1417 -= 4;
      }
      while (v1417);
      v1412 = v1407 - 8 * (v1414 & 0x3FFFFFFFFFFFFFFCLL);
      v1408 -= 8 * (v1414 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1414 == (v1414 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1612;
    }
  }
  else
  {
    v1412 = v1405 + ((v1404 - v1403) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1419 = *(_QWORD *)(v1408 - 8);
    v1408 -= 8;
    *(_QWORD *)(v1412 - 8) = v1419;
    v1412 -= 8;
  }
  while (v1408 != v1409);
LABEL_1612:
  v1408 = *v1398;
LABEL_1613:
  *v1398 = v1412;
  v1398[1] = v1407;
  v1420 = v1398[2];
  v1398[2] = v1405 + 800;
  if (v1408)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1398[3] + 40))(v1398[3], v1408, v1420 - v1408);
LABEL_1615:
  v1421 = v1398[4];
  if ((unint64_t)(v1398[6] - v1421) > 0x31F)
    goto LABEL_1628;
  v1422 = v1398[5];
  v1423 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1398[7] + 16))(v1398[7], 800, 8);
  v1424 = v1422 - v1421;
  v1425 = v1423 + ((v1422 - v1421) & 0xFFFFFFFFFFFFFFF8);
  v1427 = v1398[4];
  v1426 = v1398[5];
  v1428 = v1426 - v1427;
  if (v1426 == v1427)
  {
    v1430 = v1423 + ((v1422 - v1421) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1626;
  }
  v1429 = v1428 - 8;
  if ((unint64_t)(v1428 - 8) >= 0x58)
  {
    v1430 = v1423 + ((v1422 - v1421) & 0xFFFFFFFFFFFFFFF8);
    if (v1426 - (v1424 & 0xFFFFFFFFFFFFFFF8) - v1423 >= 0x20)
    {
      v1431 = v1424 >> 3;
      v1432 = (v1429 >> 3) + 1;
      v1433 = (_OWORD *)(v1423 + 8 * v1431 - 16);
      v1434 = (__int128 *)(v1426 - 16);
      v1435 = v1432 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1436 = *v1434;
        *(v1433 - 1) = *(v1434 - 1);
        *v1433 = v1436;
        v1433 -= 2;
        v1434 -= 2;
        v1435 -= 4;
      }
      while (v1435);
      v1430 = v1425 - 8 * (v1432 & 0x3FFFFFFFFFFFFFFCLL);
      v1426 -= 8 * (v1432 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1432 == (v1432 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1625;
    }
  }
  else
  {
    v1430 = v1423 + ((v1422 - v1421) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1437 = *(_QWORD *)(v1426 - 8);
    v1426 -= 8;
    *(_QWORD *)(v1430 - 8) = v1437;
    v1430 -= 8;
  }
  while (v1426 != v1427);
LABEL_1625:
  v1426 = v1398[4];
LABEL_1626:
  v1398[4] = v1430;
  v1398[5] = v1425;
  v1438 = v1398[6];
  v1398[6] = v1423 + 800;
  if (v1426)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1398[7] + 40))(v1398[7], v1426, v1438 - v1426);
LABEL_1628:
  v1439 = *v1635;
  *v1635 = (uint64_t)v1398;
  if (v1439)
  {
    v1440 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1439);
    MEMORY[0x1A1AF4E00](v1440, 0x10A0C40D234DDC7);
  }
  v1441 = v1746;
  v1442 = &unk_1ECE44000;
  if (v1746 == v1745)
  {
    v1443 = 4;
    v1441 = v1745;
  }
  else
  {
    if (!v1746)
      goto LABEL_1635;
    v1443 = 5;
  }
  (*(void (**)(void))(*v1441 + 8 * v1443))();
LABEL_1635:
  v1444 = v1748;
  if (v1748 == v1747)
  {
    v1445 = 4;
    v1444 = v1747;
  }
  else
  {
    if (!v1748)
      goto LABEL_1640;
    v1445 = 5;
  }
  (*(void (**)(void))(*v1444 + 8 * v1445))();
LABEL_1640:
  *((_BYTE *)this + 1618) = 3;
  *((_BYTE *)this + 1616) = 0;
  *((_BYTE *)this + 1834) = 3;
  *((_WORD *)this + 916) = 256;
  v1446 = operator new();
  *(_BYTE *)v1446 = 0;
  *(_QWORD *)(v1446 + 12) = 0;
  *(_QWORD *)(v1446 + 4) = 0;
  *(_BYTE *)(v1446 + 20) = 0;
  *(_DWORD *)(v1446 + 24) = 1065353216;
  *(_BYTE *)(v1446 + 28) = 0;
  *(_DWORD *)(v1446 + 32) = 0;
  v1447 = *v300;
  *v300 = v1446;
  if (v1447)
  {
    MEMORY[0x1A1AF4E00](v1447, 0x1000C4049ECCB0CLL);
    v1446 = *v300;
  }
  *(_BYTE *)v1446 = 1;
  *(_OWORD *)(v1446 + 4) = xmmword_19FFB3590;
  *(_BYTE *)(v1446 + 28) = 0;
  *(_BYTE *)(v1446 + 20) = 1;
  *(_DWORD *)(v1446 + 24) = 1065353216;
  v1448 = v1665[6];
  v1449 = v1665[7];
  if (v1448 == v1449)
  {
LABEL_1648:
    v1450 = 0;
  }
  else
  {
    while (1)
    {
      if (*(_DWORD *)v1448 == *(_DWORD *)(v1665[14] + 16))
      {
        v1450 = *(_QWORD *)(v1448 + 8);
        if (v1450)
          break;
      }
      v1448 += 16;
      if (v1448 == v1449)
        goto LABEL_1648;
    }
  }
  v1451 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v1451 + 1) = 0;
  *((_QWORD *)v1451 + 2) = 0;
  *(_QWORD *)v1451 = &off_1E42E4118;
  if ((v1452 & 1) == 0
  {
    if ((v1597 & 1) == 0
    {
      v1627 = ggl::crc32::compute<36ul>("DownscaleTextureComputeShaderKernel");
      qword_1ECE32C98 = 0;
      unk_1ECE32CA0 = &ggl::downscaleTextureComputeShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32CA8 = 0;
      unk_1ECE32CB0 = &ggl::downscaleTextureComputeShaderFunctionBufferMapping(void)::ref;
      ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref = v1627;
      *(_DWORD *)algn_1ECE32C84 = 2;
      qword_1ECE32CB8 = 0;
      unk_1ECE32CC0 = &ggl::downscaleTextureComputeShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32C88 = (uint64_t)"DownscaleTextureComputeShader";
      unk_1ECE32C90 = 0;
      qword_1ECE32CC8 = 2;
      unk_1ECE32CD0 = &ggl::downscaleTextureComputeShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE32CE0 = 0;
      unk_1ECE32CE8 = 0;
      qword_1ECE32CD8 = 2;
    }
    ggl::DownscaleTextureComputeShaderState::typedReflection(void)::ref = (uint64_t)&ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref;
    unk_1ECE32B70 = 0;
    qword_1ECE32B78 = 2;
    unk_1ECE32B80 = &ggl::pipelineStateDownscaleTextureComputeShaderConstantStructBinding(void)::ref;
    qword_1ECE32B88 = 0;
    unk_1ECE32B90 = &ggl::pipelineStateDownscaleTextureComputeShaderDeviceStructBinding(void)::ref;
    qword_1ECE32B98 = 0;
    v1442 = (_QWORD *)&unk_1ECE44000;
  }
  *((_DWORD *)v1451 + 14) = 0;
  *((_QWORD *)v1451 + 5) = 0;
  *((_QWORD *)v1451 + 6) = 0;
  *((_QWORD *)v1451 + 8) = &ggl::DownscaleTextureComputeShaderState::typedReflection(void)::ref;
  *((_QWORD *)v1451 + 9) = v1450;
  v1451[80] = 0;
  *(_OWORD *)(v1451 + 88) = 0u;
  *(_OWORD *)(v1451 + 104) = 0u;
  *(_OWORD *)(v1451 + 120) = 0u;
  *(_OWORD *)(v1451 + 136) = 0u;
  *((_QWORD *)v1451 + 19) = 0;
  *((_QWORD *)v1451 + 3) = &off_1E42BB780;
  *((_QWORD *)v1451 + 4) = 0;
  *((_QWORD *)this + 151) = v1451 + 24;
  v1453 = (std::__shared_weak_count *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = v1451;
  if (v1453)
  {
    v1454 = (unint64_t *)&v1453->__shared_owners_;
    do
      v1455 = __ldaxr(v1454);
    while (__stlxr(v1455 - 1, v1454));
    if (!v1455)
    {
      ((void (*)(std::__shared_weak_count *))v1453->__on_zero_shared)(v1453);
      std::__shared_weak_count::__release_weak(v1453);
    }
  }
  v1456 = (_QWORD *)operator new();
  v1457 = v1456;
  v1458 = *((_QWORD *)this + 151);
  v1459 = (std::__shared_weak_count *)*((_QWORD *)this + 152);
  if (v1459)
  {
    v1460 = (unint64_t *)&v1459->__shared_owners_;
    do
      v1461 = __ldxr(v1460);
    while (__stxr(v1461 + 1, v1460));
  }
  *v1456 = &off_1E42B6098;
  v1456[1] = 0;
  v1462 = v1456 + 1;
  v1456[2] = 0;
  v1456[3] = 0;
  v1666 = v1459;
  if ((v1463 & 1) == 0)
  {
    v1462 = v1457 + 1;
    if (v1598)
    {
      v1599 = operator new();
      *(_QWORD *)(v1599 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1599 + 24) = "GeoGL";
      *(_OWORD *)(v1599 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1599 = &off_1E42B5668;
      *(_QWORD *)(v1599 + 8) = "GeoGL";
      *(_OWORD *)(v1599 + 72) = 0u;
      *(_OWORD *)(v1599 + 88) = 0u;
      *(_OWORD *)(v1599 + 104) = 0u;
      *(_OWORD *)(v1599 + 120) = 0u;
      *(_OWORD *)(v1599 + 136) = 0u;
      *(_OWORD *)(v1599 + 152) = 0u;
      *(_OWORD *)(v1599 + 168) = 0u;
      *(_OWORD *)(v1599 + 184) = 0u;
      *(_OWORD *)(v1599 + 200) = 0u;
      *(_OWORD *)(v1599 + 216) = 0u;
      *(_OWORD *)(v1599 + 232) = 0u;
      *(_QWORD *)(v1599 + 248) = 0;
      *(_OWORD *)(v1599 + 56) = 0u;
      v1600 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1599 + 56), 0);
      if ((_DWORD)v1600)
        geo::read_write_lock::logFailure(v1600, (uint64_t)"initialization", v1601);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v1599 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v1599 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v1442 = &unk_1ECE44000;
      ggl::Allocator::instance(void)::alloc = v1599;
      v1462 = v1457 + 1;
    }
  }
  v1464 = v1442[495];
  v1457[5] = 0;
  v1457[4] = v1464;
  v1457[6] = 0;
  v1457[7] = 0;
  if ((v1464 & 1) == 0)
  {
    v1603 = v1462;
    v1462 = v1603;
    if (v1604)
    {
      v1605 = operator new();
      *(_QWORD *)(v1605 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1605 + 24) = "GeoGL";
      *(_OWORD *)(v1605 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1605 = &off_1E42B5668;
      *(_QWORD *)(v1605 + 8) = "GeoGL";
      *(_OWORD *)(v1605 + 72) = 0u;
      *(_OWORD *)(v1605 + 88) = 0u;
      *(_OWORD *)(v1605 + 104) = 0u;
      *(_OWORD *)(v1605 + 120) = 0u;
      *(_OWORD *)(v1605 + 136) = 0u;
      *(_OWORD *)(v1605 + 152) = 0u;
      *(_OWORD *)(v1605 + 168) = 0u;
      *(_OWORD *)(v1605 + 184) = 0u;
      *(_OWORD *)(v1605 + 200) = 0u;
      *(_OWORD *)(v1605 + 216) = 0u;
      *(_OWORD *)(v1605 + 232) = 0u;
      *(_QWORD *)(v1605 + 248) = 0;
      *(_OWORD *)(v1605 + 56) = 0u;
      v1606 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1605 + 56), 0);
      if ((_DWORD)v1606)
        geo::read_write_lock::logFailure(v1606, (uint64_t)"initialization", v1607);
      v1608 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1605 + 48) = v1608;
      malloc_set_zone_name(v1608, "GeoGL");
      *(_QWORD *)(v1605 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v1442 = &unk_1ECE44000;
      ggl::Allocator::instance(void)::alloc = v1605;
      v1462 = v1603;
    }
  }
  v1465 = v1442[495];
  v1457[9] = 0;
  v1457[8] = v1465;
  v1457[10] = 0;
  v1457[11] = 0;
  if ((v1465 & 1) == 0)
  {
    v1609 = v1462;
    v1462 = v1609;
    if (v1610)
    {
      v1611 = operator new();
      *(_QWORD *)(v1611 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1611 + 24) = "GeoGL";
      *(_OWORD *)(v1611 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1611 = &off_1E42B5668;
      *(_QWORD *)(v1611 + 8) = "GeoGL";
      *(_OWORD *)(v1611 + 72) = 0u;
      *(_OWORD *)(v1611 + 88) = 0u;
      *(_OWORD *)(v1611 + 104) = 0u;
      *(_OWORD *)(v1611 + 120) = 0u;
      *(_OWORD *)(v1611 + 136) = 0u;
      *(_OWORD *)(v1611 + 152) = 0u;
      *(_OWORD *)(v1611 + 168) = 0u;
      *(_OWORD *)(v1611 + 184) = 0u;
      *(_OWORD *)(v1611 + 200) = 0u;
      *(_OWORD *)(v1611 + 216) = 0u;
      *(_OWORD *)(v1611 + 232) = 0u;
      *(_QWORD *)(v1611 + 248) = 0;
      *(_OWORD *)(v1611 + 56) = 0u;
      v1612 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1611 + 56), 0);
      if ((_DWORD)v1612)
        geo::read_write_lock::logFailure(v1612, (uint64_t)"initialization", v1613);
      v1614 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1611 + 48) = v1614;
      malloc_set_zone_name(v1614, "GeoGL");
      *(_QWORD *)(v1611 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v1442 = &unk_1ECE44000;
      ggl::Allocator::instance(void)::alloc = v1611;
      v1462 = v1609;
    }
  }
  v1466 = v1442[495];
  v1457[13] = 0;
  v1457[12] = v1466;
  v1457[14] = 0;
  v1457[15] = 0;
  if ((v1466 & 1) == 0)
  {
    v1615 = v1462;
    v1462 = v1615;
    if (v1616)
    {
      v1617 = operator new();
      *(_QWORD *)(v1617 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1617 + 24) = "GeoGL";
      *(_OWORD *)(v1617 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1617 = &off_1E42B5668;
      *(_QWORD *)(v1617 + 8) = "GeoGL";
      *(_OWORD *)(v1617 + 72) = 0u;
      *(_OWORD *)(v1617 + 88) = 0u;
      *(_OWORD *)(v1617 + 104) = 0u;
      *(_OWORD *)(v1617 + 120) = 0u;
      *(_OWORD *)(v1617 + 136) = 0u;
      *(_OWORD *)(v1617 + 152) = 0u;
      *(_OWORD *)(v1617 + 168) = 0u;
      *(_OWORD *)(v1617 + 184) = 0u;
      *(_OWORD *)(v1617 + 200) = 0u;
      *(_OWORD *)(v1617 + 216) = 0u;
      *(_OWORD *)(v1617 + 232) = 0u;
      *(_QWORD *)(v1617 + 248) = 0;
      *(_OWORD *)(v1617 + 56) = 0u;
      v1618 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1617 + 56), 0);
      if ((_DWORD)v1618)
        geo::read_write_lock::logFailure(v1618, (uint64_t)"initialization", v1619);
      v1620 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1617 + 48) = v1620;
      malloc_set_zone_name(v1620, "GeoGL");
      *(_QWORD *)(v1617 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v1442 = &unk_1ECE44000;
      ggl::Allocator::instance(void)::alloc = v1617;
      v1462 = v1615;
    }
  }
  v1467 = v1442[495];
  v1457[17] = 0;
  v1457[16] = v1467;
  v1457[18] = 0;
  v1457[19] = 0;
  if ((v1467 & 1) == 0)
  {
    v1621 = v1462;
    v1462 = v1621;
    if (v1622)
    {
      v1623 = operator new();
      *(_QWORD *)(v1623 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1623 + 24) = "GeoGL";
      *(_OWORD *)(v1623 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1623 = &off_1E42B5668;
      *(_QWORD *)(v1623 + 8) = "GeoGL";
      *(_OWORD *)(v1623 + 72) = 0u;
      *(_OWORD *)(v1623 + 88) = 0u;
      *(_OWORD *)(v1623 + 104) = 0u;
      *(_OWORD *)(v1623 + 120) = 0u;
      *(_OWORD *)(v1623 + 136) = 0u;
      *(_OWORD *)(v1623 + 152) = 0u;
      *(_OWORD *)(v1623 + 168) = 0u;
      *(_OWORD *)(v1623 + 184) = 0u;
      *(_OWORD *)(v1623 + 200) = 0u;
      *(_OWORD *)(v1623 + 216) = 0u;
      *(_OWORD *)(v1623 + 232) = 0u;
      *(_QWORD *)(v1623 + 248) = 0;
      *(_OWORD *)(v1623 + 56) = 0u;
      v1624 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1623 + 56), 0);
      if ((_DWORD)v1624)
        geo::read_write_lock::logFailure(v1624, (uint64_t)"initialization", v1625);
      v1626 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1623 + 48) = v1626;
      malloc_set_zone_name(v1626, "GeoGL");
      *(_QWORD *)(v1623 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v1442 = &unk_1ECE44000;
      ggl::Allocator::instance(void)::alloc = v1623;
      v1459 = v1666;
      v1462 = v1621;
    }
  }
  v1457[20] = v1442[495];
  v1457[21] = v1458;
  v1457[22] = v1459;
  if (v1459)
  {
    v1468 = (unint64_t *)&v1459->__shared_owners_;
    do
      v1469 = __ldxr(v1468);
    while (__stxr(v1469 + 1, v1468));
    v1458 = v1457[21];
  }
  v1457[23] = 0;
  v1470 = *(_QWORD **)(v1458 + 40);
  v1471 = v1470[4];
  v1732 = 0uLL;
  v1473 = v1457[1];
  v1472 = (_QWORD *)v1457[2];
  v1474 = ((uint64_t)v1472 - v1473) >> 4;
  v1475 = v1471 >= v1474;
  v1476 = v1471 - v1474;
  if (v1471 <= v1474)
  {
    v1485 = v1658;
    if (!v1475)
      v1457[2] = v1473 + 16 * v1471;
  }
  else
  {
    v1477 = v1457[3];
    if (v1476 <= (v1477 - (uint64_t)v1472) >> 4)
    {
      v1486 = &v1472[2 * v1476];
      v1487 = 16 * v1471 - 16 * v1474;
      v1485 = v1658;
      do
      {
        if (v1472)
        {
          *v1472 = 0;
          v1472[1] = 0;
        }
        v1472 += 2;
        v1487 -= 16;
      }
      while (v1487);
      v1457[2] = v1486;
    }
    else
    {
      v1661 = v1462;
      if (v1471 >> 60)
        goto LABEL_1889;
      v1478 = v1477 - v1473;
      v1479 = (v1477 - v1473) >> 3;
      if (v1479 <= v1471)
        v1479 = v1471;
      if (v1478 >= 0x7FFFFFFFFFFFFFF0)
        v1480 = 0xFFFFFFFFFFFFFFFLL;
      else
        v1480 = v1479;
      v1481 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1457[4] + 16))(v1457[4], 16 * v1480, 8);
      v1482 = (_OWORD *)(v1481 + 16 * v1474);
      v1483 = 16 * v1471 - 16 * v1474;
      v1484 = v1482;
      v1485 = v1658;
      do
      {
        if (v1484)
          *v1484 = v1732;
        ++v1484;
        v1483 -= 16;
      }
      while (v1483);
      v1489 = v1457[1];
      v1488 = v1457[2];
      if (v1488 != v1489)
      {
        do
        {
          *--v1482 = *(_OWORD *)(v1488 - 16);
          v1488 -= 16;
        }
        while (v1488 != v1489);
        v1488 = *v1661;
      }
      v1457[1] = v1482;
      v1457[2] = v1481 + 16 * v1471;
      v1490 = v1457[3];
      v1457[3] = v1481 + 16 * v1480;
      if (v1488)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1457[4] + 40))(v1457[4], v1488, v1490 - v1488);
    }
  }
  v1491 = v1470[6];
  v1732 = 0uLL;
  v1493 = v1457[5];
  v1492 = (_QWORD *)v1457[6];
  v1494 = ((uint64_t)v1492 - v1493) >> 4;
  v1495 = v1491 - v1494;
  if (v1491 <= v1494)
  {
    if (v1491 < v1494)
      v1457[6] = v1493 + 16 * v1491;
  }
  else
  {
    v1496 = v1457[7];
    if (v1495 > (v1496 - (uint64_t)v1492) >> 4)
    {
      if (!(v1491 >> 60))
      {
        v1497 = v1496 - v1493;
        v1498 = (v1496 - v1493) >> 3;
        if (v1498 <= v1491)
          v1498 = v1491;
        if (v1497 >= 0x7FFFFFFFFFFFFFF0)
          v1499 = 0xFFFFFFFFFFFFFFFLL;
        else
          v1499 = v1498;
        v1500 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1457[8] + 16))(v1457[8], 16 * v1499, 8);
        v1501 = (_OWORD *)(v1500 + 16 * v1494);
        v1502 = 16 * v1491 - 16 * v1494;
        v1503 = v1501;
        do
        {
          if (v1503)
            *v1503 = v1732;
          ++v1503;
          v1502 -= 16;
        }
        while (v1502);
        v1506 = v1500 + 16 * v1499;
        v1508 = v1457[5];
        v1507 = v1457[6];
        if (v1507 == v1508)
        {
          v1485 = v1658;
        }
        else
        {
          v1485 = v1658;
          do
          {
            *--v1501 = *(_OWORD *)(v1507 - 16);
            v1507 -= 16;
          }
          while (v1507 != v1508);
          v1507 = v1457[5];
        }
        v1457[5] = v1501;
        v1457[6] = v1500 + 16 * v1491;
        v1509 = v1457[7];
        v1457[7] = v1506;
        if (v1507)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1457[8] + 40))(v1457[8], v1507, v1509 - v1507);
        goto LABEL_1717;
      }
LABEL_1889:
      abort();
    }
    v1504 = &v1492[2 * v1495];
    v1505 = 16 * v1491 - 16 * v1494;
    do
    {
      if (v1492)
      {
        *v1492 = 0;
        v1492[1] = 0;
      }
      v1492 += 2;
      v1505 -= 16;
    }
    while (v1505);
    v1457[6] = v1504;
  }
LABEL_1717:
  v1510 = v1470[2];
  *(_QWORD *)&v1732 = 0;
  v1511 = v1457[9];
  v1512 = (v1457[10] - v1511) >> 3;
  if (v1510 <= v1512)
  {
    v1513 = v1666;
    if (v1510 < v1512)
      v1457[10] = v1511 + 8 * v1510;
  }
  else
  {
    std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append((uint64_t)(v1457 + 9), v1510 - v1512, &v1732);
    v1513 = v1666;
  }
  v1514 = (uint64_t)(v1457[6] - v1457[5]) >> 4;
  v1732 = 0uLL;
  v1515 = v1457[13];
  v1516 = v1457[14];
  v1517 = (v1516 - v1515) >> 4;
  v1518 = v1514 - v1517;
  if (v1514 <= v1517)
  {
    if (v1514 < v1517)
    {
      v1519 = v1515 + 16 * v1514;
      if (v1516 == v1519)
      {
        v1457[14] = v1519;
      }
      else
      {
        do
        {
          v1520 = *(std::__shared_weak_count **)(v1516 - 8);
          if (v1520)
          {
            v1521 = (unint64_t *)&v1520->__shared_owners_;
            do
              v1522 = __ldaxr(v1521);
            while (__stlxr(v1522 - 1, v1521));
            if (!v1522)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v1520->__on_zero_shared)(v1520, v1518);
              std::__shared_weak_count::__release_weak(v1520);
            }
          }
          v1516 -= 16;
        }
        while (v1516 != v1519);
        v1523 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
        v1457[14] = v1519;
        if (v1523)
        {
          v1524 = (unint64_t *)&v1523->__shared_owners_;
          do
            v1525 = __ldaxr(v1524);
          while (__stlxr(v1525 - 1, v1524));
          if (!v1525)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v1523->__on_zero_shared)(v1523, v1518);
            std::__shared_weak_count::__release_weak(v1523);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(v1457 + 13), v1518, &v1732);
  }
  v1526 = (uint64_t)(v1457[2] - v1457[1]) >> 4;
  v1732 = 0uLL;
  v1527 = v1457[17];
  v1528 = v1457[18];
  v1529 = (v1528 - v1527) >> 4;
  v1530 = v1526 - v1529;
  if (v1526 <= v1529)
  {
    if (v1526 < v1529)
    {
      v1531 = v1527 + 16 * v1526;
      if (v1528 == v1531)
      {
        v1457[18] = v1531;
      }
      else
      {
        do
        {
          v1532 = *(std::__shared_weak_count **)(v1528 - 8);
          if (v1532)
          {
            v1533 = (unint64_t *)&v1532->__shared_owners_;
            do
              v1534 = __ldaxr(v1533);
            while (__stlxr(v1534 - 1, v1533));
            if (!v1534)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v1532->__on_zero_shared)(v1532, v1530);
              std::__shared_weak_count::__release_weak(v1532);
            }
          }
          v1528 -= 16;
        }
        while (v1528 != v1531);
        v1535 = (std::__shared_weak_count *)*((_QWORD *)&v1732 + 1);
        v1457[18] = v1531;
        if (v1535)
        {
          v1536 = (unint64_t *)&v1535->__shared_owners_;
          do
            v1537 = __ldaxr(v1536);
          while (__stlxr(v1537 - 1, v1536));
          if (!v1537)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v1535->__on_zero_shared)(v1535, v1530);
            std::__shared_weak_count::__release_weak(v1535);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(v1457 + 17), v1530, &v1732);
  }
  if (v1513)
  {
    v1538 = (unint64_t *)&v1513->__shared_owners_;
    do
      v1539 = __ldaxr(v1538);
    while (__stlxr(v1539 - 1, v1538));
    if (!v1539)
    {
      ((void (*)(std::__shared_weak_count *))v1513->__on_zero_shared)(v1513);
      std::__shared_weak_count::__release_weak(v1513);
    }
  }
  *v1457 = &off_1E42BB760;
  v1540 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = v1457;
  if (v1540)
    (*(void (**)(uint64_t))(*(_QWORD *)v1540 + 8))(v1540);
  v1541 = -[VKSharedResources gglDevice](v1485, "gglDevice");
  v1542 = *(_QWORD *)(v1541 + 40);
  *((_DWORD *)this + 310) = *(_DWORD *)(v1541 + 48);
  *((_QWORD *)this + 154) = v1542;
  md::DaVinciGroundRenderResources::_buildDefaultStyleRaster((uint64_t)this, 0x47u, 1);
  md::DaVinciGroundRenderResources::_buildDefaultStyleRaster((uint64_t)this, 0x9Au, 3);
  md::DaVinciGroundRenderResources::_buildDefaultStyleRaster((uint64_t)this, 0x99u, 3);
  v1543 = operator new(0xE8uLL);
  v1543[1] = 0;
  v1543[2] = 0;
  *v1543 = &off_1E42E27B8;
  v1544 = ggl::BufferData::BufferData((uint64_t)(v1543 + 3), qword_1EE54A688, 2, 1, 6, 1);
  v1543[28] = ggl::DaVinci::StyleBlend::reflection(void)::reflection;
  v1543[3] = &off_1E42B9AB0;
  *((_QWORD *)this + 183) = v1544;
  v1545 = (std::__shared_weak_count *)*((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = v1543;
  if (v1545)
  {
    v1546 = (unint64_t *)&v1545->__shared_owners_;
    do
      v1547 = __ldaxr(v1546);
    while (__stlxr(v1547 - 1, v1546));
    if (!v1547)
    {
      ((void (*)(std::__shared_weak_count *))v1545->__on_zero_shared)(v1545);
      std::__shared_weak_count::__release_weak(v1545);
    }
  }

  return this;
}

void sub_19F2A66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ggl::Batcher *a18, md::DaVinciRenderStateCache *a19, ggl::Texture *a20,ggl::Texture *a21,ggl::Texture *a22,ggl::Texture *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t *a40,uint64_t *a41,uint64_t *a42,uint64_t *a43,uint64_t *a44,uint64_t *a45,uint64_t *a46,uint64_t *a47,uint64_t *a48,uint64_t *a49,uint64_t *a50,uint64_t *a51,uint64_t *a52,uint64_t *a53,uint64_t *a54,uint64_t *a55,uint64_t *a56,uint64_t *a57,uint64_t *a58,uint64_t *a59,uint64_t *a60,uint64_t *a61,uint64_t *a62,uint64_t *a63)
{
  uint64_t a64;
  void *a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;

  v75 = (_QWORD *)v73[11];
  if (v75 == v71)
  {
    v76 = 4;
  }
  else
  {
    if (!v75)
    {
      v77 = *v72;
      if (*v72)
        goto LABEL_16;
      goto LABEL_5;
    }
    v76 = 5;
    v71 = (_QWORD *)v73[11];
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v76))(v71);
  v77 = *v72;
  if (*v72)
  {
LABEL_16:
    v73[5] = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[7] + 40))(v73[7], v77, v73[6] - v77);
    v78 = *v73;
    if (!*v73)
    {
LABEL_7:
      v79 = (unint64_t *)STACK[0x4B8];
      if ((unint64_t *)STACK[0x4B8] == &STACK[0x4A0])
      {
        v80 = 4;
        v79 = &STACK[0x4A0];
      }
      else
      {
        if (!v79)
          goto LABEL_12;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_12:
      v81 = (unint64_t *)STACK[0x4D8];
      if ((unint64_t *)STACK[0x4D8] == &STACK[0x4C0])
      {
        v82 = 4;
        v81 = &STACK[0x4C0];
      }
      else
      {
        if (!v81)
          goto LABEL_21;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v73, 0x10A0C40D234DDC7);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v70 + 2744);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v70 + 2728);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v70 + 2712);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
      std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*(_QWORD **)(v70 + 2680));
      std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](a15);
      v83 = *(_QWORD *)(v70 + 2600);
      *(_QWORD *)(v70 + 2600) = 0;
      if (v83)
        MEMORY[0x1A1AF4E00](v83, 0x1000C4049ECCB0CLL);
      v84 = *a59;
      *a59 = 0;
      if (v84)
        MEMORY[0x1A1AF4E00](v84, 0x1000C4049ECCB0CLL);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a17);
      md::RenderItemPool::~RenderItemPool((md::RenderItemPool *)(v70 + 2536));
      ggl::Batcher::~Batcher(a18);
      md::DaVinciRenderStateCache::~DaVinciRenderStateCache(a19);
      ggl::Texture::~Texture(a20);
      ggl::Texture::~Texture(a21);
      ggl::Texture::~Texture(a22);
      ggl::Texture::~Texture(a23);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a24);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a25);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a26);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a27);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a28);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1240);
      v85 = *(_QWORD *)(v70 + 1456);
      *(_QWORD *)(v70 + 1456) = 0;
      if (v85)
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
      v86 = *(_QWORD *)(v70 + 1448);
      *(_QWORD *)(v70 + 1448) = 0;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      STACK[0x210] = a67 + 960;
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a57);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a58);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a47);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a48);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a49);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a44);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a50);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a46);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a45);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a51);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a52);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a53);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a54);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1104);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1088);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1072);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1056);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1040);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 1024);
      v87 = *(_QWORD *)(v70 + 1224);
      *(_QWORD *)(v70 + 1224) = 0;
      if (v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a67 + 984);
      v88 = *(_QWORD **)(v70 + 1200);
      *(_QWORD *)(v70 + 1200) = 0;
      if (v88)
      {
        *v88 = 3131955885;
        MEMORY[0x1A1AF4E00]();
      }
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x210]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v70 + 1168);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a40);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a41);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a42);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a43);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a55);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a56);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a60);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a61);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a62);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v70 + 1088));
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a63);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a29);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a69);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a30);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a64);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a70);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(STACK[0x220]);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a66);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(STACK[0x208]);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(v70);

      _Unwind_Resume(a1);
    }
LABEL_6:
    v73[1] = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[3] + 40))(v73[3], v78, v73[2] - v78);
    goto LABEL_7;
  }
LABEL_5:
  v78 = *v73;
  if (!*v73)
    goto LABEL_7;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci19RibbonPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D77D8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci18DecalPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7790;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci9StyleSSAOEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6B30;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci5StyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6AE8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci21ColorCorrectionFactorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6AA0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci20StyleGroundOcclusionEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6A58;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleRouteLineMaskEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6A10;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleEmissiveColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D69C8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18GradientParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6980;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci16PlanarParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6938;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci14ElevatedStrokeEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D68F0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci13MaterialStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D68A8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci11RibbonStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6860;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci10StyleColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6818;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile17PositionScaleInfoEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D67D0;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3568;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3520;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D34D8;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3490;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3448;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3400;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D33B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3370;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3328;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D32E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3298;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3250;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::DaVinci::GroundShadowMapPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3208;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D31C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3178;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3130;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D30E8;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D30A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::DaVinci::GroundPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3058;
}

uint64_t std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3010;
  a2[1] = v2;
  return result;
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), a1 + 40);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

void sub_19F2A89CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2A8AC0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F2A9DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, id a11, id location, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void md::AssetData::_buildAssets(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *j;
  uint64_t ***v61;
  char *v62;
  uint64_t *v63;
  __int16 v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _DWORD *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float v78;
  float v79;
  uint64_t v80;
  md::DaVinciGroundTileData *v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint16x4_t *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  uint64_t v111;
  std::__shared_count v112;
  char *v113;
  unint64_t *v114;
  uint64_t v115;
  __int128 v116;
  unsigned int *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t **v131;
  uint64_t **v132;
  uint64_t **v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  char *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v186;
  float *v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  _WORD *v192;
  float v193;
  float v194;
  float v195;
  _WORD *v198;
  uint64_t v199;
  unsigned int v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t **v211;
  uint64_t **v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t **v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  _QWORD *v245;
  int v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  _QWORD *v252;
  int v253;
  int v254;
  char *v255;
  char *v256;
  unsigned int *value;
  unsigned int *v258;
  std::vector<unsigned int>::pointer end;
  int v260;
  int v261;
  unsigned int *v262;
  unsigned int *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  void *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  int v285;
  int v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned __int16 *v298;
  unsigned int v299;
  unsigned int v300;
  float *v301;
  float v302;
  float v303;
  float v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  char *v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  char *v326;
  geo::codec::Allocator *v327;
  md::DaVinciGroundTileData *v328;
  char *v329;
  float v330;
  char *v331;
  unint64_t v332;
  uint16x4_t *v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  unsigned int v341;
  unint64_t v342;
  _QWORD *v343;
  unint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  unint64_t *v348;
  uint64_t v349;
  __int128 v350;
  char *v351;
  unint64_t *v352;
  uint64_t v353;
  __int128 v354;
  unsigned int *v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  _QWORD *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t **v371;
  uint64_t **v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t *v376;
  char *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t *v388;
  char *v389;
  std::__shared_weak_count *v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  char *v397;
  unint64_t v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  int v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  int v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int *v417;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v426;
  float *v427;
  int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  _WORD *v432;
  float v433;
  float v434;
  float v435;
  _WORD *v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  char *v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t *v452;
  uint64_t **v453;
  uint64_t **v454;
  unint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t *v458;
  char *v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t *v471;
  uint64_t **v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t *v475;
  char *v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  char *v490;
  char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _BYTE *v497;
  char *v498;
  char *v499;
  char *v500;
  unint64_t v501;
  char *v502;
  __int16 v503;
  char *v504;
  unint64_t v505;
  uint64_t v506;
  _OWORD *v507;
  char *v508;
  unint64_t v509;
  __int128 v510;
  int64_t v511;
  __int128 v512;
  unint64_t v513;
  uint8x8_t v514;
  uint64_t ***v515;
  uint64_t **v516;
  unint64_t v517;
  uint64_t *v518;
  char *v519;
  uint64_t v520;
  float v521;
  float v522;
  _BOOL8 v523;
  unint64_t v524;
  unint64_t v525;
  size_t prime;
  void *v527;
  void *v528;
  uint64_t v529;
  _QWORD *v530;
  size_t v531;
  size_t v532;
  size_t v533;
  _QWORD *k;
  size_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint8x8_t v539;
  uint64_t v540;
  int8x16_t v541;
  int v542;
  int32x2_t v543;
  int32x2_t v544;
  int32x2_t v545;
  int8x16_t v546;
  int8x16_t v547;
  uint64_t v548;
  int8x16_t v549;
  int8x16_t *v550;
  _QWORD *v551;
  uint64_t v552;
  size_t v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  char *v557;
  void **v558;
  unint64_t v559;
  void *v560;
  _OWORD *v561;
  __int128 v562;
  __int128 v563;
  char *v564;
  std::__shared_weak_count *v565;
  char *v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  _QWORD *v576;
  int v577;
  int v578;
  unint64_t v579;
  unint64_t v580;
  char *v581;
  char *v582;
  _QWORD *v583;
  int v584;
  int v585;
  char *v586;
  char *v587;
  unsigned int *v588;
  unsigned int *v589;
  std::vector<unsigned int>::pointer v590;
  int v591;
  int v592;
  unsigned int *v593;
  unsigned int *v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  uint64_t v601;
  _QWORD *v602;
  _QWORD *v603;
  void *v604;
  void *v605;
  int v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t v611;
  char *v612;
  char *v613;
  char *v614;
  char *v615;
  char *v616;
  char *v617;
  __int128 v618;
  char *v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  char **v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  _QWORD *v628;
  char *v629;
  char *v630;
  char *v631;
  _QWORD *v632;
  _QWORD *v633;
  void *v634;
  void *v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  uint64_t v642;
  char *v643;
  char *v644;
  uint64_t v645;
  unint64_t v646;
  __int128 v647;
  unint64_t *v648;
  unint64_t v649;
  char *v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  char *v655;
  char *v656;
  __int128 v657;
  unint64_t *v658;
  unint64_t v659;
  char *v660;
  __int128 v661;
  char *v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  char *v672;
  uint64_t v673;
  _QWORD *v674;
  _QWORD *v675;
  void *v676;
  void *v677;
  uint64_t *v678;
  uint64_t *v679;
  uint64_t v680;
  uint64_t v681;
  char ***v682;
  char ***v683;
  uint64_t v684;
  char **v685;
  char *v686;
  char *v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int64x2_t v693;
  int64x2_t v694;
  const double *v695;
  const double *v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  uint64_t v700;
  _QWORD *v701;
  unint64_t v702;
  unint64_t *v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v710;
  uint64_t v711;
  uint64_t *v712;
  uint64_t *v713;
  std::__shared_weak_count *v714;
  char *v715;
  std::__shared_weak_count *v716;
  std::__shared_weak_count *v717;
  char *v718;
  std::__shared_weak_count *v719;
  std::__shared_weak_count *v720;
  std::__shared_weak_count *v721;
  char *v722;
  __int128 v723;
  std::__shared_weak_count *v724;
  char *v725;
  uint64_t v726;
  char *v727;
  char *v728;
  uint64_t v729;
  unint64_t v730;
  std::__shared_weak_count *__src;
  int __srca;
  char *__srcb;
  char v735;
  __int128 v736;
  unint64_t v737;
  char *v738;
  std::__shared_weak_count *v739;
  char *v740;
  std::__shared_weak_count *v741;
  __int128 v742;
  void *v743[2];
  void *v744;
  char *v745;
  std::__shared_weak_count *v746;
  std::__shared_weak_count *v747;
  std::__shared_weak_count *v748;
  char v749;
  char v750;
  char *v751;
  std::__shared_weak_count *v752;
  std::__shared_weak_count *v753;
  std::__shared_weak_count *v754;
  void *v755[2];
  unint64_t v756;
  uint64_t v757;
  __int16 v758;
  uint64_t v759;
  void *__p[2];
  char *v761;
  char *v762;
  __int16 v763;
  uint64_t v764;
  std::vector<unsigned int> v765;
  unsigned int *v766;
  __int16 v767;
  uint64_t v768;
  __int128 v769;
  __int128 v770;
  int v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  __int128 v776;
  uint64_t v777;
  float64x2x4_t v778;
  float64x2x4_t v779;

  v3 = *a2;
  v4 = *(uint64_t **)(*a2 + 152);
  if (v4)
  {
    v7 = v4[15];
    v6 = v4[16];
    *(_WORD *)(a1 + 304) = *((_WORD *)v4 + 151);
    v8 = (_QWORD *)(a1 + 312);
    if (a1 + 312 != v3 + 160)
    {
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(v3 + 192);
      v9 = *(_QWORD **)(v3 + 176);
      v10 = *(_QWORD *)(a1 + 320);
      if (!v10)
        goto LABEL_7;
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(*v8 + 8 * i) = 0;
      v12 = *(_QWORD **)(a1 + 328);
      *(_QWORD *)(a1 + 328) = 0;
      *(_QWORD *)(a1 + 336) = 0;
      if (v12)
      {
        while (v9)
        {
          v12[2] = v9[2];
          v31 = v9[3];
          v30 = v9[4];
          if (v30)
          {
            v32 = (unint64_t *)(v30 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = (std::__shared_weak_count *)v12[4];
          v12[3] = v31;
          v12[4] = v30;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v29 = (_QWORD *)*v12;
          std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)v8, v12);
          v9 = (_QWORD *)*v9;
          v12 = v29;
          if (!v29)
            goto LABEL_7;
        }
        do
        {
          v37 = v12;
          v12 = (_QWORD *)*v12;
          v38 = (std::__shared_weak_count *)v37[4];
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          operator delete(v37);
        }
        while (v12);
      }
      else
      {
LABEL_7:
        while (v9)
        {
          v13 = operator new(0x28uLL);
          *v13 = 0;
          v13[1] = 0;
          v14 = v9[2];
          v13[2] = v14;
          v13[3] = v9[3];
          v15 = v9[4];
          v13[4] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v13[1] = v14;
          std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)v8, v13);
          v9 = (_QWORD *)*v9;
        }
      }
    }
    v702 = v6 - v7;
    v18 = (unint64_t *)v4[7];
    v19 = (unint64_t *)v4[8];
    if (v18 != v19)
    {
      v20 = (uint64_t **)(a1 + 264);
      do
      {
        v22 = *v20;
        v23 = *v18;
        v24 = (uint64_t **)(a1 + 264);
        v25 = (uint64_t **)(a1 + 264);
        if (*v20)
        {
          while (1)
          {
            while (1)
            {
              v25 = (uint64_t **)v22;
              v26 = v22[4];
              if (v23 >= v26)
                break;
              v22 = *v25;
              v24 = v25;
              if (!*v25)
                goto LABEL_24;
            }
            if (v26 >= v23)
              break;
            v22 = v25[1];
            if (!v22)
            {
              v24 = v25 + 1;
              goto LABEL_24;
            }
          }
        }
        else
        {
LABEL_24:
          v27 = (uint64_t *)operator new(0x28uLL);
          v27[4] = v23;
          *v27 = 0;
          v27[1] = 0;
          v27[2] = (uint64_t)v25;
          *v24 = v27;
          v28 = **(_QWORD **)(a1 + 256);
          if (v28)
          {
            *(_QWORD *)(a1 + 256) = v28;
            v21 = *v24;
          }
          else
          {
            v21 = v27;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 264), v21);
          ++*(_QWORD *)(a1 + 272);
        }
        ++v18;
      }
      while (v18 != v19);
    }
    *(_DWORD *)(a1 + 280) = *((_DWORD *)v4 + 69);
    *(_DWORD *)(a1 + 284) = *((_DWORD *)v4 + 70);
    *(_DWORD *)(a1 + 288) = *((_DWORD *)v4 + 71);
    *(_DWORD *)(a1 + 292) = *((_DWORD *)v4 + 72);
    *(_DWORD *)(a1 + 296) = *((_DWORD *)v4 + 73);
    *(_DWORD *)(a1 + 300) = *((_DWORD *)v4 + 74);
    *(_DWORD *)(a1 + 448) = *((_DWORD *)v4 + 66);
    *(_DWORD *)(a1 + 452) = *((_DWORD *)v4 + 67);
    *(_DWORD *)(a1 + 456) = *((_DWORD *)v4 + 68);
    v41 = (_QWORD **)(a1 + 352);
    if ((uint64_t *)(a1 + 352) != v4 + 30)
    {
      v42 = (_QWORD *)v4[30];
      v43 = v4 + 31;
      if (!*(_QWORD *)(a1 + 368))
        goto LABEL_83;
      v44 = (uint64_t **)(a1 + 360);
      v45 = *(_QWORD *)(a1 + 352);
      v46 = *(_QWORD *)(a1 + 360);
      *(_QWORD *)(a1 + 352) = a1 + 360;
      *(_QWORD *)(v46 + 16) = 0;
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
      v47 = *(_QWORD *)(v45 + 8) ? *(_QWORD **)(v45 + 8) : (_QWORD *)v45;
      if (v47)
      {
        v48 = (_QWORD *)v47[2];
        if (v48)
        {
          v49 = (_QWORD *)*v48;
          if ((_QWORD *)*v48 == v47)
          {
            *v48 = 0;
            while (1)
            {
              v670 = (_QWORD *)v48[1];
              if (!v670)
                break;
              do
              {
                v48 = v670;
                v670 = (_QWORD *)*v670;
              }
              while (v670);
            }
          }
          else
          {
            for (v48[1] = 0; v49; v49 = (_QWORD *)v48[1])
            {
              do
              {
                v48 = v49;
                v49 = (_QWORD *)*v49;
              }
              while (v49);
            }
          }
        }
        if (v42 == v43)
        {
          v57 = v42;
          v50 = v47;
        }
        else
        {
          do
          {
            v50 = v48;
            v51 = *(_DWORD *)((char *)v42 + 26);
            *(_DWORD *)((char *)v47 + 26) = v51;
            *((_BYTE *)v47 + 30) = *((_BYTE *)v42 + 30);
            v52 = *v44;
            v53 = (_QWORD *)(a1 + 360);
            v54 = (_QWORD *)(a1 + 360);
            if (*v44)
            {
              do
              {
                while (1)
                {
                  v53 = v52;
                  if (*((unsigned __int16 *)v52 + 14) <= HIWORD(v51))
                    break;
                  v52 = (uint64_t *)*v52;
                  v54 = v53;
                  if (!*v53)
                    goto LABEL_61;
                }
                v52 = (uint64_t *)v52[1];
              }
              while (v52);
              v54 = v53 + 1;
            }
LABEL_61:
            *v47 = 0;
            v47[1] = 0;
            v47[2] = v53;
            *v54 = v47;
            v55 = (_QWORD *)**v41;
            if (v55)
            {
              *v41 = v55;
              v47 = (_QWORD *)*v54;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 360), v47);
            ++*(_QWORD *)(a1 + 368);
            if (v48)
            {
              v48 = (_QWORD *)v48[2];
              if (v48)
              {
                v58 = (_QWORD *)*v48;
                if ((_QWORD *)*v48 == v50)
                {
                  *v48 = 0;
                  while (1)
                  {
                    v59 = (_QWORD *)v48[1];
                    if (!v59)
                      break;
                    do
                    {
                      v48 = v59;
                      v59 = (_QWORD *)*v59;
                    }
                    while (v59);
                  }
                }
                else
                {
                  for (v48[1] = 0; v58; v58 = (_QWORD *)v48[1])
                  {
                    do
                    {
                      v48 = v58;
                      v58 = (_QWORD *)*v58;
                    }
                    while (v58);
                  }
                }
              }
            }
            else
            {
              v48 = 0;
            }
            v56 = (_QWORD *)v42[1];
            if (v56)
            {
              do
              {
                v57 = v56;
                v56 = (_QWORD *)*v56;
              }
              while (v56);
            }
            else
            {
              do
              {
                v57 = (_QWORD *)v42[2];
                _ZF = *v57 == (_QWORD)v42;
                v42 = v57;
              }
              while (!_ZF);
            }
            if (!v50)
              break;
            v47 = v50;
            v42 = v57;
          }
          while (v57 != v43);
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v50);
        if (v48)
        {
          for (j = (_QWORD *)v48[2]; j; j = (_QWORD *)j[2])
            v48 = j;
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v48);
        }
      }
      else
      {
LABEL_83:
        v57 = v42;
      }
      if (v57 != v43)
      {
        v61 = (uint64_t ***)(a1 + 360);
        do
        {
          v62 = (char *)operator new(0x20uLL);
          v63 = (uint64_t *)v62;
          v64 = *((_WORD *)v57 + 15);
          *(_DWORD *)(v62 + 26) = *(_DWORD *)((char *)v57 + 26);
          *((_WORD *)v62 + 15) = v64;
          v65 = *v61;
          v66 = (uint64_t **)(a1 + 360);
          v67 = (uint64_t **)(a1 + 360);
          if (*v61)
          {
            do
            {
              while (1)
              {
                v66 = v65;
                if (*((unsigned __int16 *)v62 + 14) >= *((unsigned __int16 *)v65 + 14))
                  break;
                v65 = (uint64_t **)*v65;
                v67 = v66;
                if (!*v66)
                  goto LABEL_99;
              }
              v65 = (uint64_t **)v65[1];
            }
            while (v65);
            v67 = v66 + 1;
          }
LABEL_99:
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = v66;
          *v67 = (uint64_t *)v62;
          v68 = (_QWORD *)**v41;
          if (v68)
          {
            *v41 = v68;
            v63 = *v67;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 360), v63);
          ++*(_QWORD *)(a1 + 368);
          v69 = (_QWORD *)v57[1];
          if (v69)
          {
            do
            {
              v70 = v69;
              v69 = (_QWORD *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v70 = (_QWORD *)v57[2];
              _ZF = *v70 == (_QWORD)v57;
              v57 = v70;
            }
            while (!_ZF);
          }
          v57 = v70;
        }
        while (v70 != v43);
      }
    }
    v71 = *(_QWORD *)(*a2 + 144);
    v72 = (_QWORD *)a1;
    *(_QWORD *)(a1 + 176) += v71;
    v73 = operator new(0xCuLL);
    v74.i64[0] = *(_QWORD *)(a1 + 280);
    v74.i32[2] = *(_DWORD *)(a1 + 288);
    v75.i64[0] = *(_QWORD *)(a1 + 292);
    v75.i32[2] = *(_DWORD *)(a1 + 300);
    v76 = vmaxnmq_f32(vabsq_f32(v74), vabsq_f32(v75));
    v73[2] = v76.i32[2];
    *(_QWORD *)v73 = v76.i64[0];
    v77 = v76.f32[0] < v76.f32[1];
    if (fmaxf(v76.f32[0], v76.f32[1]) < v76.f32[2])
      v77 = 2;
    v699 = v73;
    v78 = *(float *)&v73[v77];
    *(float *)(a1 + 376) = v78;
    v79 = 32767.0 / v78;
    v704 = v4;
    if (*(unsigned __int16 *)(a1 + 304) > 0x13u)
    {
      v80 = v4[26];
      v707 = v4[27];
      if (v80 != v707)
      {
        v705 = (uint64_t)v4 + 276;
        while (1)
        {
          v776 = 0uLL;
          v777 = 0;
          v772 = 0;
          v773 = 0;
          v774 = 0;
          v775 = geo::codec::Allocator::instance((geo::codec::Allocator *)v73);
          v743[0] = 0;
          v743[1] = 0;
          v769 = 0u;
          v770 = 0u;
          v771 = 1065353216;
          LODWORD(v765.__begin_) = 0;
          v81 = (md::DaVinciGroundTileData *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)&v769, 0, &v765);
          *((_DWORD *)v81 + 5) = 0;
          if (*(_QWORD *)(v80 + 32) != *(_QWORD *)(v80 + 40))
          {
            v82 = *(_QWORD *)(v80 + 8);
            if (v82 != *(_QWORD *)v80)
            {
              v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - *(_QWORD *)v80) >> 2);
              if (v83 >> 61)
                abort();
              v84 = operator new(0x5555555555555558 * ((v82 - *(_QWORD *)v80) >> 2));
              *(_QWORD *)&v776 = v84;
              *((_QWORD *)&v776 + 1) = &v84[v83];
              v777 = *((_QWORD *)&v776 + 1);
              if (*(_QWORD *)(v80 + 8) != *(_QWORD *)v80)
              {
                v96 = 0;
                v97 = 1;
                do
                {
                  v98 = v97;
                  v84[v96] = v96 | ((unint64_t)v97++ << 32);
                  v96 = v98;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v80 + 8) - *(_QWORD *)v80) >> 2) > v98);
              }
            }
            md::DaVinciGroundTileData::_buildIndexBuffer((md::DaVinciGroundTileData *)&v765, a3, *(ResourceAccessor **)(v80 + 96), (const unsigned __int16 *)((*(_QWORD *)(v80 + 104) - *(_QWORD *)(v80 + 96)) >> 1));
            v95 = 0;
            v94 = 0;
            *(_OWORD *)v743 = *(_OWORD *)&v765.__begin_;
            goto LABEL_128;
          }
          v85 = md::DaVinciGroundTileData::_edgeSmoothingAngleForZ(v81);
          memset(&v765, 0, sizeof(v765));
          v87 = *(_QWORD *)v80;
          v86 = *(_QWORD *)(v80 + 8);
          v89 = *(_QWORD *)(v80 + 96);
          v88 = *(_QWORD *)(v80 + 104);
          v90 = (char *)operator new(0x10uLL);
          v91 = (unint64_t)(v88 - v89) >> 1;
          v761 = v90 + 16;
          *(_DWORD *)v90 = 0;
          *(_QWORD *)(v90 + 4) = v91;
          v90[12] = 0;
          __p[0] = v90;
          __p[1] = v90 + 16;
          v92 = *(uint16x4_t **)(v80 + 96);
          HIBYTE(v756) = 5;
          strcpy((char *)v755, "Asset");
          md::DaVinciGroundTileData::_buildNormals(v87, -1431655765 * ((unint64_t)(v86 - v87) >> 2), v91, (unsigned int **)__p, v92, &v769, (unint64_t **)&v776, &v772, v85, &v765, a1 + 208, (uint64_t)v755, 0);
          if (SHIBYTE(v756) < 0)
            break;
          v93 = __p[0];
          if (__p[0])
            goto LABEL_120;
LABEL_121:
          md::DaVinciGroundTileData::_buildIndexBuffer((char **)__p, (uint64_t)"DV Asset Indices", (uint64_t)a3, (uint64_t *)&v765);
          *(_OWORD *)v743 = *(_OWORD *)__p;
          if (v765.__begin_)
          {
            v765.__end_ = v765.__begin_;
            operator delete(v765.__begin_);
          }
          v94 = v772;
          v95 = v773;
LABEL_128:
          _ZF = v94 == v95;
          if (v94 == v95)
            v100 = (uint64_t *)(v80 + 32);
          else
            v100 = &v772;
          v101 = &v773;
          if (_ZF)
            v101 = (uint64_t *)(v80 + 40);
          v102 = *v101;
          v712 = v100;
          v103 = *v100;
          v104 = (char *)operator new(0xF8uLL);
          v105 = (unint64_t)(v102 - v103) >> 2;
          *((_QWORD *)v104 + 1) = 0;
          v106 = (unint64_t *)(v104 + 8);
          v107 = (-1431655765 * v105);
          *((_QWORD *)v104 + 2) = 0;
          *(_QWORD *)v104 = &off_1E42E0608;
          v108 = (uint64_t)(v104 + 24);
          ggl::BufferData::BufferData((uint64_t)(v104 + 24), 8, 0, 0, 6, v107);
          *((_QWORD *)v104 + 3) = &off_1E42B8320;
          *((_QWORD *)v104 + 29) = "DV Asset Textured Vertex Data";
          *((_QWORD *)v104 + 30) = &ggl::DaVinci::texturedCompressedVboReflection;
          *((_QWORD *)v104 + 28) = &unk_1E42B8340;
          v714 = (std::__shared_weak_count *)v104;
          v109 = (std::__shared_weak_count *)operator new(0xE0uLL);
          v109->__shared_owners_ = 0;
          v110 = (unint64_t *)&v109->__shared_owners_;
          v109->__shared_weak_owners_ = 0;
          v109->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
          v109[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
          __src = v109 + 1;
          v111 = qword_1EE5517A8;
          v109[1].__shared_owners_ = qword_1EE5517A8;
          LODWORD(v109[1].__shared_weak_owners_) = 769;
          v109[2].__vftable = 0;
          v109[2].__shared_owners_ = 0;
          v109[2].__shared_weak_owners_ = 0;
          v109[3].__vftable = (std::__shared_weak_count_vtbl *)(v107 * v111);
          v112 = (std::__shared_count)0;
          *(_OWORD *)&v109[3].__shared_owners_ = 0u;
          v109[4].std::__shared_count = 0u;
          v109[4].__shared_weak_owners_ = 0;
          if ((v111 & 1) == 0)
          {
            v112 = (std::__shared_count)0;
            if (v274)
            {
              v275 = operator new();
              ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v275, "GeoGL", 0xA3D02C1100000005);
              v112 = (std::__shared_count)0;
            }
          }
          v109[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
          v109[5].__shared_owners_ = 0;
          *((std::__shared_count *)v109 + 11) = v112;
          v109[8].std::__shared_count = v112;
          v109[8].__shared_weak_owners_ = 0;
          v109[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
          *((std::__shared_count *)v109 + 10) = v112;
          v109[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
          LODWORD(v109[5].__shared_weak_owners_) = 0;
          v724 = v109;
          v109[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F48;
          v113 = (char *)operator new(0xE0uLL);
          *((_QWORD *)v113 + 1) = 0;
          v114 = (unint64_t *)(v113 + 8);
          *((_QWORD *)v113 + 2) = 0;
          *(_QWORD *)v113 = &off_1E42DF488;
          *((_QWORD *)v113 + 3) = &off_1E42B5748;
          v728 = v113 + 24;
          v115 = qword_1EE5517E8;
          *((_QWORD *)v113 + 4) = qword_1EE5517E8;
          *((_DWORD *)v113 + 10) = 769;
          *((_QWORD *)v113 + 6) = 0;
          *((_QWORD *)v113 + 7) = 0;
          *((_QWORD *)v113 + 8) = 0;
          *((_QWORD *)v113 + 9) = v107 * v115;
          v116 = 0uLL;
          *((_OWORD *)v113 + 5) = 0u;
          *((_OWORD *)v113 + 6) = 0u;
          *((_QWORD *)v113 + 14) = 0;
          v719 = (std::__shared_weak_count *)v113;
          if ((v115 & 1) == 0)
          {
            v113 = (char *)v719;
            v116 = 0uLL;
            if (v276)
            {
              v277 = operator new();
              ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v277, "GeoGL", 0xA3D02C1100000005);
              v113 = (char *)v719;
              v116 = 0uLL;
            }
          }
          *((_QWORD *)v113 + 15) = ggl::Allocator::instance(void)::alloc;
          *((_QWORD *)v113 + 16) = 0;
          *((_OWORD *)v113 + 11) = v116;
          *((_OWORD *)v113 + 12) = v116;
          *((_QWORD *)v113 + 26) = 0;
          *((_QWORD *)v113 + 27) = -1;
          *((_OWORD *)v113 + 10) = v116;
          *((_OWORD *)v113 + 9) = xmmword_19FFB2DD0;
          *((_DWORD *)v113 + 34) = 0;
          *((_QWORD *)v113 + 3) = &off_1E42B6F28;
          v117 = (unsigned int *)(*((_QWORD *)v104 + 4) * v107);
          v765.__end_ = 0;
          v765.__begin_ = 0;
          if (v117)
          {
            if (!a3 || v104[41] == 2)
            {
              v118 = *((_QWORD *)v104 + 12);
            }
            else
            {
              v118 = (*(uint64_t (**)(const char *, uint64_t, _QWORD, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v108, 0, v117, 1, 1);
              v113 = (char *)v719;
            }
          }
          else
          {
            v118 = 0;
          }
          *(_QWORD *)&v119 = a3;
          *((_QWORD *)&v119 + 1) = v104 + 24;
          *(_OWORD *)&v765.__begin_ = v119;
          v765.__end_cap_.__value_ = 0;
          v766 = v117;
          v768 = v118;
          v767 = 257;
          __p[1] = 0;
          __p[0] = 0;
          v120 = v724[1].__shared_owners_ * v107;
          if (v120)
          {
            if (!a3 || BYTE1(v724[1].__shared_weak_owners_) == 2)
            {
              v121 = (uint64_t)v724[4].__vftable;
            }
            else
            {
              v121 = (*(uint64_t (**)(const char *, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, __src, 0, v724[1].__shared_owners_ * v107, 1, 1);
              v113 = (char *)v719;
            }
          }
          else
          {
            v121 = 0;
          }
          *(_QWORD *)&v122 = a3;
          *((_QWORD *)&v122 + 1) = __src;
          *(_OWORD *)__p = v122;
          v761 = 0;
          v762 = (char *)v120;
          v764 = v121;
          v763 = 257;
          v755[1] = 0;
          v755[0] = 0;
          v123 = *((_QWORD *)v113 + 4) * v107;
          if (v123)
          {
            if (!a3 || v113[41] == 2)
              v124 = *((_QWORD *)v113 + 12);
            else
              v124 = (*(uint64_t (**)(const char *, char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v728, 0, v123, 1, 1);
          }
          else
          {
            v124 = 0;
          }
          *(_QWORD *)&v125 = a3;
          *((_QWORD *)&v125 + 1) = v728;
          *(_OWORD *)v755 = v125;
          v756 = 0;
          v757 = v123;
          v759 = v124;
          v758 = 257;
          v126 = operator new(0xA8uLL);
          v126[1] = 0;
          v127 = v126 + 1;
          v126[2] = 0;
          *v126 = &off_1E42E4A80;
          v128 = std::construct_at[abi:nn180100]<ggl::DaVinci::TexturedCompressedMesh,char const(&)[14],std::shared_ptr<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>> &,std::shared_ptr<ggl::IndexData> &,ggl::DaVinci::TexturedCompressedMesh*>((uint64_t)(v126 + 3), v108, (std::__shared_weak_count *)v104, (uint64_t *)v743);
          v753 = __src;
          v754 = v724;
          do
            v129 = __ldxr(v110);
          while (__stxr(v129 + 1, v110));
          v721 = (std::__shared_weak_count *)v126;
          v131 = (uint64_t **)(v126 + 18);
          v130 = (uint64_t *)v126[18];
          v132 = (uint64_t **)(v126 + 18);
          v133 = (uint64_t **)(v126 + 18);
          v710 = v128;
          if (v130)
          {
            while (1)
            {
              while (1)
              {
                v133 = (uint64_t **)v130;
                v134 = v130[4];
                if (v134 < 2)
                  break;
                v130 = *v133;
                v132 = v133;
                if (!*v133)
                  goto LABEL_162;
              }
              if (v134)
                break;
              v130 = v133[1];
              if (!v130)
              {
                v132 = v133 + 1;
                goto LABEL_162;
              }
            }
            v138 = (uint64_t)__src;
            v139 = v724;
            goto LABEL_168;
          }
LABEL_162:
          v135 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v721[6].__shared_owners_
                                                                                 + 16))(v721[6].__shared_owners_, 56, 8);
          v135[5] = 0;
          v135[6] = 0;
          v135[4] = 1;
          *v135 = 0;
          v135[1] = 0;
          v135[2] = (uint64_t)v133;
          *v132 = v135;
          v136 = *(_QWORD *)v721[5].__shared_weak_owners_;
          v137 = v135;
          if (v136)
          {
            v721[5].__shared_weak_owners_ = v136;
            v137 = *v132;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v721[6].__vftable, v137);
          ++v721[6].__shared_weak_owners_;
          v138 = (uint64_t)v753;
          v139 = v754;
          if (v754)
          {
            v133 = (uint64_t **)v135;
LABEL_168:
            v140 = (unint64_t *)&v139->__shared_owners_;
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
            v135 = (uint64_t *)v133;
          }
          v142 = (std::__shared_weak_count *)v135[6];
          v135[5] = v138;
          v135[6] = (uint64_t)v139;
          if (!v142)
            goto LABEL_175;
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
            v145 = v754;
            if (!v754)
              goto LABEL_181;
          }
          else
          {
LABEL_175:
            v145 = v754;
            if (!v754)
              goto LABEL_181;
          }
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
LABEL_181:
          v751 = v728;
          v752 = v719;
          do
            v148 = __ldxr(v114);
          while (__stxr(v148 + 1, v114));
          v149 = *v131;
          if (*v131)
          {
            while (1)
            {
              v131 = (uint64_t **)v149;
              if (!v149[4])
                break;
              v149 = (uint64_t *)*v149;
              if (!*v131)
                goto LABEL_186;
            }
            v153 = v728;
            v154 = v719;
            goto LABEL_191;
          }
LABEL_186:
          v150 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v721[6].__shared_owners_
                                                                                 + 16))(v721[6].__shared_owners_, 56, 8);
          *v150 = 0;
          v150[1] = 0;
          v150[5] = 0;
          v150[6] = 0;
          v150[4] = 0;
          v150[2] = (uint64_t)v131;
          *v131 = v150;
          v151 = *(_QWORD *)v721[5].__shared_weak_owners_;
          v152 = v150;
          if (v151)
          {
            v721[5].__shared_weak_owners_ = v151;
            v152 = *v131;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v721[6].__vftable, v152);
          ++v721[6].__shared_weak_owners_;
          v153 = v751;
          v154 = v752;
          if (v752)
          {
            v131 = (uint64_t **)v150;
LABEL_191:
            v155 = (unint64_t *)&v154->__shared_owners_;
            do
              v156 = __ldxr(v155);
            while (__stxr(v156 + 1, v155));
            v150 = (uint64_t *)v131;
          }
          v157 = (std::__shared_weak_count *)v150[6];
          v150[5] = (uint64_t)v153;
          v150[6] = (uint64_t)v154;
          if (!v157)
            goto LABEL_198;
          v158 = (unint64_t *)&v157->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
            v160 = v752;
            if (!v752)
              goto LABEL_204;
          }
          else
          {
LABEL_198:
            v160 = v752;
            if (!v752)
              goto LABEL_204;
          }
          v161 = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
LABEL_204:
          v163 = *(_QWORD *)v80;
          v164 = *(_QWORD *)(v80 + 8);
          v165 = v164 - *(_QWORD *)v80;
          if (v164 != *(_QWORD *)v80)
          {
            v166 = 0;
            v167 = 0;
            v169 = *(_QWORD *)(v80 + 64);
            v168 = *(_QWORD *)(v80 + 72);
            v170 = 0xAAAAAAAAAAAAAAABLL * (v165 >> 2);
            v171 = v776;
            v172 = v768;
            v173 = v759;
            v174 = v764;
            do
            {
              if (v168 == v169)
              {
                _S0 = 0;
                _S1 = 0;
              }
              else
              {
                v175 = (int *)(v169 + 8 * v166);
                _S0 = *v175;
                _S1 = v175[1];
              }
              v178 = (unsigned int *)(v171 + 8 * v166);
              v180 = *v178;
              v179 = v178[1];
              if (v180 < v179)
              {
                v181 = v163 + 12 * v166;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            H1, S1
                }
                v186 = v179 - v180;
                v187 = (float *)(*v712 + 12 * v180 + 8);
                do
                {
                  v188 = (int)(float)(*(float *)(v181 + 4) * v79);
                  v189 = *(_DWORD *)(v181 + 8);
                  v190 = v172 + 8 * v167;
                  *(_WORD *)v190 = (int)(float)(*(float *)v181 * v79);
                  *(_WORD *)(v190 + 2) = v188;
                  *(_DWORD *)(v190 + 4) = v189;
                  v191 = 4 * v167;
                  v192 = (_WORD *)(v173 + v191);
                  *v192 = _H0;
                  v192[1] = _H1;
                  v193 = *(v187 - 2);
                  v194 = *(v187 - 1);
                  v195 = *v187;
                  v187 += 3;
                  _S2 = (float)((float)(v193 * 0.28126) / (float)(v195 + 1.0)) + 0.5;
                  _S3 = (float)((float)(v194 * 0.28126) / (float)(v195 + 1.0)) + 0.5;
                  __asm
                  {
                    FCVT            H2, S2
                    FCVT            H3, S3
                  }
                  v198 = (_WORD *)(v174 + v191);
                  *v198 = LOWORD(_S2);
                  v198[1] = LOWORD(_S3);
                  ++v167;
                  --v186;
                }
                while (v186);
              }
              ++v166;
            }
            while (v170 > v166);
          }
          v199 = (uint64_t)(*(_QWORD *)(v80 + 104) - *(_QWORD *)(v80 + 96)) >> 1;
          *(_QWORD *)&v736 = 0;
          *((_QWORD *)&v736 + 1) = v199;
          v200 = *(unsigned __int8 *)(v80 + 128);
          if (v200 <= 3)
            v201 = 0x2010403u >> (8 * v200);
          else
            v201 = 3;
          LOBYTE(v742) = v201;
          v750 = 0;
          v749 = 1;
          v202 = *(_QWORD *)(a1 + 192);
          if (v202 >= *(_QWORD *)(a1 + 200))
          {
            v207 = std::vector<md::Mesh>::__emplace_back_slow_path<std::shared_ptr<ggl::DaVinci::TexturedCompressedMesh> &,gm::Range<unsigned long>,ggl::PrimitiveType,gm::Box<float,3> &,md::MeshVertexFormat,BOOL>((void **)(a1 + 184), v710, v721, &v736, (char *)&v742, v705, &v750, &v749);
          }
          else
          {
            do
              v203 = __ldxr(v127);
            while (__stxr(v203 + 1, v127));
            *(_QWORD *)v202 = v710;
            *(_QWORD *)(v202 + 8) = v721;
            do
              v204 = __ldxr(v127);
            while (__stxr(v204 + 1, v127));
            *(_OWORD *)(v202 + 16) = v736;
            *(_BYTE *)(v202 + 32) = v201;
            v205 = *(_QWORD *)(v705 + 16);
            *(_OWORD *)(v202 + 36) = *(_OWORD *)v705;
            *(_QWORD *)(v202 + 52) = v205;
            *(_WORD *)(v202 + 60) = 1;
            *(_QWORD *)(v202 + 64) = 0;
            *(_QWORD *)(v202 + 72) = 0;
            do
              v206 = __ldaxr(v127);
            while (__stlxr(v206 - 1, v127));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
              std::__shared_weak_count::__release_weak(v721);
            }
            v207 = (char *)(v202 + 80);
          }
          *(_QWORD *)(a1 + 192) = v207;
          v208 = *((_QWORD *)v207 - 10);
          v747 = __src;
          v748 = v724;
          do
            v209 = __ldxr(v110);
          while (__stxr(v209 + 1, v110));
          v211 = (uint64_t **)(v208 + 120);
          v210 = *(uint64_t **)(v208 + 120);
          if (v210)
          {
            while (1)
            {
              while (1)
              {
                v212 = (uint64_t **)v210;
                v213 = v210[4];
                if (v213 < 2)
                  break;
                v210 = *v212;
                v211 = v212;
                if (!*v212)
                  goto LABEL_236;
              }
              if (v213)
                break;
              v210 = v212[1];
              if (!v210)
              {
                v211 = v212 + 1;
                goto LABEL_236;
              }
            }
            v217 = v724;
            goto LABEL_241;
          }
          v212 = (uint64_t **)(v208 + 120);
LABEL_236:
          v214 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v208 + 128) + 16))(*(_QWORD *)(v208 + 128), 56, 8);
          v214[5] = 0;
          v214[6] = 0;
          v214[4] = 1;
          *v214 = 0;
          v214[1] = 0;
          v214[2] = (uint64_t)v212;
          *v211 = v214;
          v215 = **(_QWORD **)(v208 + 112);
          v216 = v214;
          if (v215)
          {
            *(_QWORD *)(v208 + 112) = v215;
            v216 = *v211;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v208 + 120), v216);
          ++*(_QWORD *)(v208 + 136);
          __src = v747;
          v217 = v748;
          if (v748)
          {
            v212 = (uint64_t **)v214;
LABEL_241:
            v218 = (unint64_t *)&v217->__shared_owners_;
            do
              v219 = __ldxr(v218);
            while (__stxr(v219 + 1, v218));
            v214 = (uint64_t *)v212;
          }
          v220 = (std::__shared_weak_count *)v214[6];
          v214[5] = (uint64_t)__src;
          v214[6] = (uint64_t)v217;
          if (!v220)
            goto LABEL_248;
          v221 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
            v223 = v748;
            if (!v748)
              goto LABEL_254;
          }
          else
          {
LABEL_248:
            v223 = v748;
            if (!v748)
              goto LABEL_254;
          }
          v224 = (unint64_t *)&v223->__shared_owners_;
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
          }
LABEL_254:
          v226 = *(_QWORD *)(*(_QWORD *)(a1 + 192) - 80);
          v745 = v728;
          v746 = v719;
          do
            v227 = __ldxr(v114);
          while (__stxr(v227 + 1, v114));
          v229 = (uint64_t **)(v226 + 120);
          v228 = *(uint64_t **)(v226 + 120);
          if (v228)
          {
            while (1)
            {
              v229 = (uint64_t **)v228;
              if (!v228[4])
                break;
              v228 = (uint64_t *)*v228;
              if (!*v229)
                goto LABEL_259;
            }
            v233 = v719;
            goto LABEL_264;
          }
LABEL_259:
          v230 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v226 + 128) + 16))(*(_QWORD *)(v226 + 128), 56, 8);
          *v230 = 0;
          v230[1] = 0;
          v230[5] = 0;
          v230[6] = 0;
          v230[4] = 0;
          v230[2] = (uint64_t)v229;
          *v229 = v230;
          v231 = **(_QWORD **)(v226 + 112);
          v232 = v230;
          if (v231)
          {
            *(_QWORD *)(v226 + 112) = v231;
            v232 = *v229;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v226 + 120), v232);
          ++*(_QWORD *)(v226 + 136);
          v728 = v745;
          v233 = v746;
          if (v746)
          {
            v229 = (uint64_t **)v230;
LABEL_264:
            v234 = (unint64_t *)&v233->__shared_owners_;
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
            v230 = (uint64_t *)v229;
          }
          v236 = (std::__shared_weak_count *)v230[6];
          v230[5] = (uint64_t)v728;
          v230[6] = (uint64_t)v233;
          if (!v236)
            goto LABEL_271;
          v237 = (unint64_t *)&v236->__shared_owners_;
          do
            v238 = __ldaxr(v237);
          while (__stlxr(v238 - 1, v237));
          if (!v238)
          {
            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
            std::__shared_weak_count::__release_weak(v236);
            v239 = v746;
            if (!v746)
              goto LABEL_277;
          }
          else
          {
LABEL_271:
            v239 = v746;
            if (!v746)
              goto LABEL_277;
          }
          v240 = (unint64_t *)&v239->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
          do
LABEL_277:
            v242 = __ldaxr(v127);
          while (__stlxr(v242 - 1, v127));
          if (v242)
          {
            if (!v759)
              goto LABEL_297;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
            std::__shared_weak_count::__release_weak(v721);
            if (!v759)
              goto LABEL_297;
          }
          v243 = v756;
          v244 = v757;
          if (v757 != v756)
          {
            v245 = v755[1];
            v246 = v758;
            v247 = HIBYTE(v758);
            if (v755[0] && *((_BYTE *)v755[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v755[0] + 64))();
            if (v246 && !v247)
            {
              v248 = v245[7];
              v249 = v245[8];
              if (v249 == v248)
                v248 = v245[10] - v245[9];
              if (v243 < v248)
                v248 = v243;
              if (v249 <= v244)
                v249 = v244;
              if (v249 == v248)
                v249 = v248 + v245[10] - v245[9];
              v245[7] = v248;
              v245[8] = v249;
            }
          }
LABEL_297:
          if (v764)
          {
            v250 = v761;
            v251 = v762;
            if (v762 != v761)
            {
              v252 = __p[1];
              v253 = v763;
              v254 = HIBYTE(v763);
              if (__p[0] && *((_BYTE *)__p[1] + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)__p[0] + 64))();
              if (v253 && !v254)
              {
                v255 = (char *)v252[7];
                v256 = (char *)v252[8];
                if (v256 == v255)
                  v255 = (char *)(v252[10] - v252[9]);
                if (v250 < v255)
                  v255 = v250;
                if (v256 <= v251)
                  v256 = v251;
                if (v256 == v255)
                  v256 = &v255[v252[10] - v252[9]];
                v252[7] = v255;
                v252[8] = v256;
              }
            }
          }
          if (v768)
          {
            value = v765.__end_cap_.__value_;
            v258 = v766;
            if (v766 != v765.__end_cap_.__value_)
            {
              end = v765.__end_;
              v260 = v767;
              v261 = HIBYTE(v767);
              if (v765.__begin_ && *((_BYTE *)v765.__end_ + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)v765.__begin_ + 64))();
              if (v260 && !v261)
              {
                v262 = (unsigned int *)*((_QWORD *)end + 7);
                v263 = (unsigned int *)*((_QWORD *)end + 8);
                if (v263 == v262)
                  v262 = (unsigned int *)(*((_QWORD *)end + 10) - *((_QWORD *)end + 9));
                if (value < v262)
                  v262 = value;
                if (v263 <= v258)
                  v263 = v258;
                if (v263 == v262)
                  v263 = (unsigned int *)((char *)v262 + *((_QWORD *)end + 10) - *((_QWORD *)end + 9));
                *((_QWORD *)end + 7) = v262;
                *((_QWORD *)end + 8) = v263;
              }
            }
          }
          do
            v264 = __ldaxr(v114);
          while (__stlxr(v264 - 1, v114));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v719->__on_zero_shared)(v719);
            std::__shared_weak_count::__release_weak(v719);
          }
          v4 = v704;
          do
            v265 = __ldaxr(v110);
          while (__stlxr(v265 - 1, v110));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
            std::__shared_weak_count::__release_weak(v724);
          }
          do
            v266 = __ldaxr(v106);
          while (__stlxr(v266 - 1, v106));
          if (v266)
          {
            v267 = (_QWORD *)v770;
            if (!(_QWORD)v770)
              goto LABEL_340;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
            std::__shared_weak_count::__release_weak(v714);
            v267 = (_QWORD *)v770;
            if (!(_QWORD)v770)
              goto LABEL_340;
          }
          do
          {
            v268 = (_QWORD *)*v267;
            operator delete(v267);
            v267 = v268;
          }
          while (v268);
LABEL_340:
          v269 = (void *)v769;
          *(_QWORD *)&v769 = 0;
          if (v269)
            operator delete(v269);
          v270 = (std::__shared_weak_count *)v743[1];
          if (v743[1])
          {
            v271 = (unint64_t *)((char *)v743[1] + 8);
            do
              v272 = __ldaxr(v271);
            while (__stlxr(v272 - 1, v271));
            if (!v272)
            {
              ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
              std::__shared_weak_count::__release_weak(v270);
              v273 = v772;
              if (!v772)
                goto LABEL_348;
LABEL_347:
              v773 = v273;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v775 + 40))(v775, v273, v774 - v273);
              goto LABEL_348;
            }
          }
          v273 = v772;
          if (v772)
            goto LABEL_347;
LABEL_348:
          v73 = (_DWORD *)v776;
          v72 = (_QWORD *)a1;
          if ((_QWORD)v776)
            operator delete((void *)v776);
          v80 += 152;
          if (v80 == v707)
            goto LABEL_828;
        }
        operator delete(v755[0]);
        v93 = __p[0];
        if (!__p[0])
          goto LABEL_121;
LABEL_120:
        __p[1] = v93;
        operator delete(v93);
        goto LABEL_121;
      }
LABEL_828:
      v610 = (v702 >> 4);
      v611 = v72[31];
      v612 = (char *)v72[29];
      if (v610 > (v611 - (uint64_t)v612) >> 4)
      {
        v613 = *(char **)(a1 + 240);
        v614 = (char *)operator new(16 * v610);
        v615 = &v614[16 * v610];
        v616 = &v614[v613 - v612];
        if (v613 == v612)
        {
          *(_QWORD *)(a1 + 232) = v616;
          *(_QWORD *)(a1 + 240) = v616;
          *(_QWORD *)(a1 + 248) = v615;
        }
        else
        {
          v617 = &v614[v613 - v612];
          do
          {
            v618 = *((_OWORD *)v613 - 1);
            v613 -= 16;
            *((_OWORD *)v617 - 1) = v618;
            v617 -= 16;
            *(_QWORD *)v613 = 0;
            *((_QWORD *)v613 + 1) = 0;
          }
          while (v613 != v612);
          v612 = *(char **)(a1 + 232);
          v619 = *(char **)(a1 + 240);
          *(_QWORD *)(a1 + 232) = v617;
          *(_QWORD *)(a1 + 240) = v616;
          *(_QWORD *)(a1 + 248) = v615;
          while (v619 != v612)
          {
            v620 = (std::__shared_weak_count *)*((_QWORD *)v619 - 1);
            if (v620)
            {
              v621 = (unint64_t *)&v620->__shared_owners_;
              do
                v622 = __ldaxr(v621);
              while (__stlxr(v622 - 1, v621));
              if (!v622)
              {
                ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                std::__shared_weak_count::__release_weak(v620);
              }
            }
            v619 -= 16;
          }
        }
        if (v612)
          operator delete(v612);
      }
      v641 = (_QWORD *)a1;
      if ((v702 >> 4))
      {
        v642 = 0;
        v643 = *(char **)(a1 + 240);
        while (1)
        {
          v645 = v4[15];
          v646 = v641[31];
          if ((unint64_t)v643 >= v646)
          {
            v650 = (char *)v641[29];
            v651 = (v643 - v650) >> 4;
            v652 = v651 + 1;
            if ((unint64_t)(v651 + 1) >> 60)
              abort();
            v653 = v646 - (_QWORD)v650;
            if (v653 >> 3 > v652)
              v652 = v653 >> 3;
            if ((unint64_t)v653 >= 0x7FFFFFFFFFFFFFF0)
              v654 = 0xFFFFFFFFFFFFFFFLL;
            else
              v654 = v652;
            if (v654 >> 60)
              goto LABEL_946;
            v655 = (char *)operator new(16 * v654);
            v656 = &v655[16 * v651];
            v657 = *(_OWORD *)(v645 + 16 * v642);
            *(_OWORD *)v656 = v657;
            if (*((_QWORD *)&v657 + 1))
            {
              v658 = (unint64_t *)(*((_QWORD *)&v657 + 1) + 8);
              do
                v659 = __ldxr(v658);
              while (__stxr(v659 + 1, v658));
              v650 = *(char **)(a1 + 232);
              v643 = *(char **)(a1 + 240);
            }
            v660 = &v655[16 * v654];
            v644 = v656 + 16;
            if (v643 == v650)
            {
              *(_QWORD *)(a1 + 232) = v656;
              *(_QWORD *)(a1 + 240) = v644;
              *(_QWORD *)(a1 + 248) = v660;
            }
            else
            {
              do
              {
                v661 = *((_OWORD *)v643 - 1);
                v643 -= 16;
                *((_OWORD *)v656 - 1) = v661;
                v656 -= 16;
                *(_QWORD *)v643 = 0;
                *((_QWORD *)v643 + 1) = 0;
              }
              while (v643 != v650);
              v650 = *(char **)(a1 + 232);
              v662 = *(char **)(a1 + 240);
              *(_QWORD *)(a1 + 232) = v656;
              *(_QWORD *)(a1 + 240) = v644;
              *(_QWORD *)(a1 + 248) = v660;
              while (v662 != v650)
              {
                v663 = (std::__shared_weak_count *)*((_QWORD *)v662 - 1);
                if (v663)
                {
                  v664 = (unint64_t *)&v663->__shared_owners_;
                  do
                    v665 = __ldaxr(v664);
                  while (__stlxr(v665 - 1, v664));
                  if (!v665)
                  {
                    ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                    std::__shared_weak_count::__release_weak(v663);
                  }
                }
                v662 -= 16;
              }
            }
            if (v650)
              operator delete(v650);
            v641 = (_QWORD *)a1;
          }
          else
          {
            v647 = *(_OWORD *)(v645 + 16 * v642);
            *(_OWORD *)v643 = v647;
            if (*((_QWORD *)&v647 + 1))
            {
              v648 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
              do
                v649 = __ldxr(v648);
              while (__stxr(v649 + 1, v648));
            }
            v644 = v643 + 16;
          }
          v641[30] = v644;
          ++v642;
          v643 = v644;
          if (v642 == v610)
            goto LABEL_944;
        }
      }
      goto LABEL_944;
    }
    if ((v702 >> 4))
    {
      v278 = 0;
      v700 = (v702 >> 4);
      v701 = (_QWORD *)(a1 + 400);
      while (1)
      {
        v706 = v278;
        v729 = v4[15] + 16 * v278;
        v279 = *(_QWORD **)v729;
        v280 = *(_QWORD *)(*(_QWORD *)v729 + 256);
        v281 = *(_QWORD *)(*(_QWORD *)v729 + 264);
        if (v280 == v281)
        {
          v282 = 0;
          v305 = v4[15] + 16 * v278;
        }
        else
        {
          v282 = 0;
          v283 = 0;
          v284 = 0;
          do
          {
            v285 = *(_DWORD *)(v280 + 144);
            v286 = *(_DWORD *)(v280 + 148);
            if (v283 >= v284)
            {
              v287 = 0xAAAAAAAAAAAAAAABLL * ((v283 - v282) >> 3) + 1;
              if (v287 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((v284 - v282) >> 3) > v287)
                v287 = 0x5555555555555556 * ((v284 - v282) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v284 - v282) >> 3) >= 0x555555555555555)
                v288 = 0xAAAAAAAAAAAAAAALL;
              else
                v288 = v287;
              if (v288)
              {
                if (v288 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_946;
                v289 = (char *)operator new(24 * v288);
              }
              else
              {
                v289 = 0;
              }
              v290 = &v289[8 * ((v283 - v282) >> 3)];
              *(_OWORD *)v290 = xmmword_19FFB3470;
              *((_QWORD *)v290 + 2) = 0x80000000800000;
              if (v283 == v282)
              {
                v292 = &v289[8 * ((v283 - v282) >> 3)];
              }
              else
              {
                v291 = &v289[8 * ((v283 - v282) >> 3)];
                do
                {
                  v292 = v291 - 24;
                  v293 = *(_OWORD *)(v283 - 24);
                  *((_QWORD *)v291 - 1) = *((_QWORD *)v283 - 1);
                  *(_OWORD *)(v291 - 24) = v293;
                  v283 -= 24;
                  v291 -= 24;
                }
                while (v283 != v282);
              }
              v284 = &v289[24 * v288];
              v283 = v290 + 24;
              if (v282)
                operator delete(v282);
              v282 = v292;
            }
            else
            {
              *(_OWORD *)v283 = xmmword_19FFB3470;
              *((_QWORD *)v283 + 2) = 0x80000000800000;
              v283 += 24;
            }
            v294 = (v286 + v285);
            v295 = *(unsigned int *)(v280 + 144);
            if (v295 < v294)
            {
              v296 = *(_QWORD *)v729;
              v297 = v294 - v295;
              v298 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v729 + 224) + 2 * v295);
              do
              {
                v300 = *v298++;
                v299 = v300;
                if (v300 != 0xFFFFLL)
                {
                  v301 = (float *)(*(_QWORD *)(v296 + 192) + 12 * v299);
                  v302 = *((float *)v283 - 5);
                  *((float *)v283 - 6) = fminf(*v301, *((float *)v283 - 6));
                  v303 = *((float *)v283 - 4);
                  *((float *)v283 - 3) = fmaxf(*((float *)v283 - 3), *v301);
                  *((float *)v283 - 5) = fminf(v301[1], v302);
                  v304 = *((float *)v283 - 1);
                  *((float *)v283 - 2) = fmaxf(*((float *)v283 - 2), v301[1]);
                  *((float *)v283 - 4) = fminf(v301[2], v303);
                  *((float *)v283 - 1) = fmaxf(v304, v301[2]);
                }
                --v297;
              }
              while (v297);
            }
            v280 += 152;
          }
          while (v280 != v281);
          v305 = v729;
          v279 = *(_QWORD **)v729;
        }
        v307 = v279[24];
        v306 = v279[25];
        v309 = v279[28];
        v308 = v279[29];
        v310 = (v306 - v307) / 12;
        if (v306 == v307)
        {
          v718 = 0;
          goto LABEL_413;
        }
        if (v310 >= 0x1555555555555556)
          abort();
        v718 = (char *)operator new(v306 - v307);
        v311 = *(_QWORD *)(*(_QWORD *)v305 + 192);
        v312 = v310 <= 1 ? 1 : (v306 - v307) / 12;
        if (v312 <= 7)
          break;
        if ((unint64_t)v718 < v311 + 12 * v312 && v311 < (unint64_t)&v718[12 * v312])
          break;
        v314 = 0;
        v315 = v312 & 0xFFFFFFFFFFFFFFF8;
        v316 = v312 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v317 = *(_OWORD *)(v311 + v314 + 16);
          v319 = *(_OWORD *)(v311 + v314 + 64);
          v318 = *(_OWORD *)(v311 + v314 + 80);
          v320 = *(_OWORD *)(v311 + v314 + 32);
          v321 = *(_OWORD *)(v311 + v314 + 48);
          v322 = &v718[v314];
          *(_OWORD *)v322 = *(_OWORD *)(v311 + v314);
          *((_OWORD *)v322 + 1) = v317;
          *((_OWORD *)v322 + 2) = v320;
          *((_OWORD *)v322 + 3) = v321;
          *((_OWORD *)v322 + 4) = v319;
          *((_OWORD *)v322 + 5) = v318;
          v314 += 96;
          v316 -= 8;
        }
        while (v316);
        if (v312 != v315)
          goto LABEL_409;
LABEL_413:
        v769 = 0u;
        v770 = 0u;
        v771 = 1065353216;
        LODWORD(v765.__begin_) = 0;
        v327 = (geo::codec::Allocator *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)&v769, 0, &v765);
        *((_DWORD *)v327 + 5) = 0;
        v743[0] = 0;
        v743[1] = 0;
        v744 = 0;
        v772 = 0;
        v773 = 0;
        v774 = 0;
        v328 = (md::DaVinciGroundTileData *)geo::codec::Allocator::instance(v327);
        v775 = (uint64_t)v328;
        v742 = 0uLL;
        if (*(_QWORD *)(*(_QWORD *)v305 + 288) != *(_QWORD *)(*(_QWORD *)v305 + 296))
        {
          if ((unint64_t)(v306 - v307 + 11) >= 0x17)
          {
            if (v310 >> 61)
              abort();
            v329 = (char *)operator new(8 * v310);
            v743[0] = v329;
            v743[1] = &v329[8 * v310];
            v744 = v743[1];
            if (v306 == v307)
              goto LABEL_433;
          }
          else
          {
            v329 = 0;
            if (v306 == v307)
              goto LABEL_433;
          }
          if (v310 <= 1)
            v338 = 1;
          else
            v338 = (v306 - v307) / 12;
          if (v338 >= 0xE)
          {
            v340 = 0;
            v339 = 0;
            if (!((unint64_t)(v338 - 1) >> 32))
            {
              v340 = v338 & 0xFFFFFFFC;
              v541 = 0uLL;
              v542 = v338 & 0xFFFFFFFC;
              v543 = (int32x2_t)0x100000000;
              do
              {
                v544 = vadd_s32(v543, (int32x2_t)0x100000001);
                v545 = vadd_s32(v543, (int32x2_t)0x300000003);
                v546.i64[0] = v544.u32[0];
                v546.i64[1] = v544.u32[1];
                v547 = v546;
                v548 = v541.i64[1];
                v549 = vextq_s8(v541, v546, 8uLL);
                v546.i64[0] = v545.u32[0];
                v546.i64[1] = v545.u32[1];
                v541 = v546;
                v550 = (int8x16_t *)&v329[8 * v548];
                *v550 = vorrq_s8((int8x16_t)vshll_n_s32(v544, 0x20uLL), v549);
                v550[1] = vorrq_s8((int8x16_t)vshll_n_s32(v545, 0x20uLL), vextq_s8(v547, v546, 8uLL));
                v543 = vadd_s32(v543, (int32x2_t)0x400000004);
                v542 -= 4;
              }
              while (v542);
              if (v340 == (_DWORD)v338)
                goto LABEL_433;
              v339 = v541.i64[1];
            }
          }
          else
          {
            v339 = 0;
            v340 = 0;
          }
          v341 = v340 + 1;
          do
          {
            v342 = v341;
            *(_QWORD *)&v329[8 * v339] = v339 | ((unint64_t)v341++ << 32);
            v339 = v342;
          }
          while (v310 > v342);
LABEL_433:
          md::DaVinciGroundTileData::_buildIndexBuffer((md::DaVinciGroundTileData *)&v765, a3, *(ResourceAccessor **)(*(_QWORD *)v305 + 224), (const unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)v305 + 232) - *(_QWORD *)(*(_QWORD *)v305 + 224)) >> 1));
          v742 = *(_OWORD *)&v765.__begin_;
LABEL_434:
          v337 = (uint64_t *)(*(_QWORD *)v305 + 288);
          v336 = *v337;
          v335 = *(_QWORD *)(*(_QWORD *)v305 + 296);
          goto LABEL_435;
        }
        v330 = md::DaVinciGroundTileData::_edgeSmoothingAngleForZ(v328);
        memset(&v765, 0, sizeof(v765));
        v331 = (char *)operator new(0x10uLL);
        v332 = (unint64_t)(v308 - v309) >> 1;
        v761 = v331 + 16;
        *(_DWORD *)v331 = 0;
        *(_QWORD *)(v331 + 4) = v332;
        v331[12] = 0;
        __p[0] = v331;
        __p[1] = v331 + 16;
        v333 = *(uint16x4_t **)(*(_QWORD *)v305 + 224);
        HIBYTE(v756) = 5;
        strcpy((char *)v755, "Asset");
        md::DaVinciGroundTileData::_buildNormals((uint64_t)v718, (v306 - v307) / 12, v332, (unsigned int **)__p, v333, &v769, (unint64_t **)v743, &v772, v330, &v765, a1 + 208, (uint64_t)v755, 0);
        if ((SHIBYTE(v756) & 0x80000000) == 0)
        {
          v334 = __p[0];
          if (!__p[0])
            goto LABEL_420;
LABEL_419:
          __p[1] = v334;
          operator delete(v334);
          goto LABEL_420;
        }
        operator delete(v755[0]);
        v334 = __p[0];
        if (__p[0])
          goto LABEL_419;
LABEL_420:
        md::DaVinciGroundTileData::_buildIndexBuffer((char **)__p, (uint64_t)"DV Asset Indices", (uint64_t)a3, (uint64_t *)&v765);
        v742 = *(_OWORD *)__p;
        if (v765.__begin_)
        {
          v765.__end_ = v765.__begin_;
          operator delete(v765.__begin_);
        }
        v336 = v772;
        v335 = v773;
        if (v772 == v773)
          goto LABEL_434;
        v337 = &v772;
LABEL_435:
        v713 = v337;
        v343 = operator new(0xF8uLL);
        v343[1] = 0;
        v344 = v343 + 1;
        v345 = -1431655765 * ((unint64_t)(v335 - v336) >> 2);
        v343[2] = 0;
        *v343 = &off_1E42E0608;
        v346 = (uint64_t)(v343 + 3);
        ggl::BufferData::BufferData((uint64_t)(v343 + 3), 8, 0, 0, 6, v345);
        v343[3] = &off_1E42B8320;
        v343[29] = "DV Asset Textured Vertex Data";
        v343[30] = &ggl::DaVinci::texturedCompressedVboReflection;
        v343[28] = &unk_1E42B8340;
        v347 = (char *)operator new(0xE0uLL);
        *((_QWORD *)v347 + 1) = 0;
        v348 = (unint64_t *)(v347 + 8);
        *((_QWORD *)v347 + 2) = 0;
        *(_QWORD *)v347 = &off_1E42DF4C0;
        *((_QWORD *)v347 + 3) = &off_1E42B5748;
        v722 = v347 + 24;
        v349 = qword_1EE5517A8;
        *((_QWORD *)v347 + 4) = qword_1EE5517A8;
        *((_DWORD *)v347 + 10) = 769;
        *((_QWORD *)v347 + 6) = 0;
        *((_QWORD *)v347 + 7) = 0;
        *((_QWORD *)v347 + 8) = 0;
        *((_QWORD *)v347 + 9) = v345 * v349;
        v350 = 0uLL;
        *((_OWORD *)v347 + 5) = 0u;
        *((_OWORD *)v347 + 6) = 0u;
        *((_QWORD *)v347 + 14) = 0;
        if ((v349 & 1) == 0)
        {
          v350 = 0uLL;
          if (v606)
          {
            v607 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v607, "GeoGL", 0xA3D02C1100000005);
            v350 = 0uLL;
          }
        }
        v715 = v282;
        *((_QWORD *)v347 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v347 + 16) = 0;
        *((_OWORD *)v347 + 11) = v350;
        *((_OWORD *)v347 + 12) = v350;
        *((_QWORD *)v347 + 26) = 0;
        *((_QWORD *)v347 + 27) = -1;
        *((_OWORD *)v347 + 10) = v350;
        *((_OWORD *)v347 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v347 + 34) = 0;
        *((_QWORD *)v347 + 3) = &off_1E42B6F48;
        v351 = (char *)operator new(0xE0uLL);
        v708 = v343;
        *((_QWORD *)v351 + 1) = 0;
        v352 = (unint64_t *)(v351 + 8);
        *((_QWORD *)v351 + 2) = 0;
        *(_QWORD *)v351 = &off_1E42DF488;
        *((_QWORD *)v351 + 3) = &off_1E42B5748;
        v725 = v351 + 24;
        v353 = qword_1EE5517E8;
        *((_QWORD *)v351 + 4) = qword_1EE5517E8;
        *((_DWORD *)v351 + 10) = 769;
        *((_QWORD *)v351 + 6) = 0;
        *((_QWORD *)v351 + 7) = 0;
        *((_QWORD *)v351 + 8) = 0;
        *((_QWORD *)v351 + 9) = v345 * v353;
        v354 = 0uLL;
        *((_OWORD *)v351 + 5) = 0u;
        *((_OWORD *)v351 + 6) = 0u;
        *((_QWORD *)v351 + 14) = 0;
        v716 = (std::__shared_weak_count *)v351;
        if ((v353 & 1) == 0)
        {
          v354 = 0uLL;
          v351 = (char *)v716;
          if (v608)
          {
            v609 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v609, "GeoGL", 0xA3D02C1100000005);
            v354 = 0uLL;
            v351 = (char *)v716;
          }
        }
        *((_QWORD *)v351 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v351 + 16) = 0;
        *((_OWORD *)v351 + 11) = v354;
        *((_OWORD *)v351 + 12) = v354;
        *((_QWORD *)v351 + 26) = 0;
        *((_QWORD *)v351 + 27) = -1;
        *((_OWORD *)v351 + 10) = v354;
        *((_OWORD *)v351 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v351 + 34) = 0;
        *((_QWORD *)v351 + 3) = &off_1E42B6F28;
        v355 = (unsigned int *)(*((_QWORD *)v347 + 4) * v345);
        v765.__end_ = 0;
        v765.__begin_ = 0;
        if (v355)
        {
          if (!a3 || v347[41] == 2)
          {
            v356 = *((_QWORD *)v347 + 12);
          }
          else
          {
            v356 = (*(uint64_t (**)(const char *, char *, _QWORD, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v722, 0, v355, 1, 1);
            v351 = (char *)v716;
          }
        }
        else
        {
          v356 = 0;
        }
        *(_QWORD *)&v357 = a3;
        *((_QWORD *)&v357 + 1) = v347 + 24;
        *(_OWORD *)&v765.__begin_ = v357;
        v765.__end_cap_.__value_ = 0;
        v766 = v355;
        v768 = v356;
        v767 = 257;
        __p[1] = 0;
        __p[0] = 0;
        v358 = *((_QWORD *)v351 + 4) * v345;
        if (v358)
        {
          if (!a3 || v351[41] == 2)
            v359 = *((_QWORD *)v351 + 12);
          else
            v359 = (*(uint64_t (**)(const char *, char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v725, 0, *((_QWORD *)v351 + 4) * v345, 1, 1);
        }
        else
        {
          v359 = 0;
        }
        *(_QWORD *)&v360 = a3;
        *((_QWORD *)&v360 + 1) = v725;
        *(_OWORD *)__p = v360;
        v761 = 0;
        v762 = (char *)v358;
        v764 = v359;
        v763 = 257;
        v361 = *(_QWORD *)v305;
        v755[1] = 0;
        v755[0] = 0;
        v362 = v708[4] * v345;
        if (v362)
        {
          if (!a3 || *((_BYTE *)v708 + 41) == 2)
            v363 = v708[12];
          else
            v363 = (*(uint64_t (**)(const char *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v346, 0, v362, 1, 1);
        }
        else
        {
          v363 = 0;
        }
        v720 = (std::__shared_weak_count *)v347;
        *(_QWORD *)&v364 = a3;
        *((_QWORD *)&v364 + 1) = v346;
        *(_OWORD *)v755 = v364;
        v756 = 0;
        v757 = v362;
        v759 = v363;
        v758 = 257;
        v365 = operator new(0xA8uLL);
        v365[1] = 0;
        v366 = v365 + 1;
        v365[2] = 0;
        *v365 = &off_1E42E4A80;
        v711 = (uint64_t)(v365 + 3);
        std::construct_at[abi:nn180100]<ggl::DaVinci::TexturedCompressedMesh,char const(&)[14],std::shared_ptr<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>> &,std::shared_ptr<ggl::IndexData> &,ggl::DaVinci::TexturedCompressedMesh*>((uint64_t)(v365 + 3), v346, (std::__shared_weak_count *)v708, (uint64_t *)&v742);
        v703 = v344;
        v740 = v722;
        v741 = v720;
        do
          v367 = __ldxr(v348);
        while (__stxr(v367 + 1, v348));
        v717 = (std::__shared_weak_count *)v365;
        v370 = (uint64_t *)v365[18];
        v369 = (uint64_t **)(v365 + 18);
        v368 = v370;
        v371 = v369;
        v372 = v369;
        if (v370)
        {
          while (1)
          {
            while (1)
            {
              v372 = (uint64_t **)v368;
              v373 = v368[4];
              if (v373 < 2)
                break;
              v368 = *v372;
              v371 = v372;
              if (!*v372)
                goto LABEL_464;
            }
            if (v373)
              break;
            v368 = v372[1];
            if (!v368)
            {
              v371 = v372 + 1;
              goto LABEL_464;
            }
          }
          v378 = v720;
          v377 = v722;
        }
        else
        {
LABEL_464:
          v374 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v717[6].__shared_owners_
                                                                                 + 16))(v717[6].__shared_owners_, 56, 8);
          v374[5] = 0;
          v374[6] = 0;
          v374[4] = 1;
          *v374 = 0;
          v374[1] = 0;
          v374[2] = (uint64_t)v372;
          *v371 = v374;
          v375 = *(_QWORD *)v717[5].__shared_weak_owners_;
          v376 = v374;
          if (v375)
          {
            v717[5].__shared_weak_owners_ = v375;
            v376 = *v371;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v717[6].__vftable, v376);
          ++v717[6].__shared_weak_owners_;
          v377 = v740;
          v378 = v741;
          if (!v741)
          {
            v305 = v729;
            goto LABEL_473;
          }
          v372 = (uint64_t **)v374;
          v305 = v729;
        }
        v379 = (unint64_t *)&v378->__shared_owners_;
        do
          v380 = __ldxr(v379);
        while (__stxr(v380 + 1, v379));
        v374 = (uint64_t *)v372;
LABEL_473:
        v381 = (std::__shared_weak_count *)v374[6];
        v374[5] = (uint64_t)v377;
        v374[6] = (uint64_t)v378;
        if (!v381)
          goto LABEL_477;
        v382 = (unint64_t *)&v381->__shared_owners_;
        do
          v383 = __ldaxr(v382);
        while (__stlxr(v383 - 1, v382));
        if (!v383)
        {
          ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
          std::__shared_weak_count::__release_weak(v381);
          v384 = v741;
          if (v741)
          {
LABEL_478:
            v385 = (unint64_t *)&v384->__shared_owners_;
            do
              v386 = __ldaxr(v385);
            while (__stlxr(v386 - 1, v385));
            if (!v386)
            {
              ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
              std::__shared_weak_count::__release_weak(v384);
            }
          }
        }
        else
        {
LABEL_477:
          v384 = v741;
          if (v741)
            goto LABEL_478;
        }
        v738 = v725;
        v739 = v716;
        do
          v387 = __ldxr(v352);
        while (__stxr(v387 + 1, v352));
        while (1)
        {
          v388 = *v369;
          if (!*v369)
            break;
          v369 = (uint64_t **)*v369;
          if (!v388[4])
          {
            v389 = v725;
            v390 = v716;
            goto LABEL_492;
          }
        }
        v391 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v717[6].__shared_owners_
                                                                               + 16))(v717[6].__shared_owners_, 56, 8);
        *v391 = 0;
        v391[1] = 0;
        v391[5] = 0;
        v391[6] = 0;
        v391[4] = 0;
        v391[2] = (uint64_t)v369;
        *v369 = v391;
        v392 = *(_QWORD *)v717[5].__shared_weak_owners_;
        v393 = v391;
        if (v392)
        {
          v717[5].__shared_weak_owners_ = v392;
          v393 = *v369;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v717[6].__vftable, v393);
        ++v717[6].__shared_weak_owners_;
        v389 = v738;
        v390 = v739;
        if (v739)
        {
          v369 = (uint64_t **)v391;
LABEL_492:
          v394 = (unint64_t *)&v390->__shared_owners_;
          do
            v395 = __ldxr(v394);
          while (__stxr(v395 + 1, v394));
          v391 = (uint64_t *)v369;
        }
        v396 = (std::__shared_weak_count *)v391[6];
        v391[5] = (uint64_t)v389;
        v391[6] = (uint64_t)v390;
        v397 = v718;
        v398 = (unint64_t)v713;
        if (!v396)
          goto LABEL_499;
        v399 = (unint64_t *)&v396->__shared_owners_;
        do
          v400 = __ldaxr(v399);
        while (__stlxr(v400 - 1, v399));
        if (!v400)
        {
          ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
          std::__shared_weak_count::__release_weak(v396);
          v401 = v739;
          if (v739)
          {
LABEL_500:
            v402 = (unint64_t *)&v401->__shared_owners_;
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }
        }
        else
        {
LABEL_499:
          v401 = v739;
          if (v739)
            goto LABEL_500;
        }
        v736 = 0uLL;
        v737 = 0;
        std::vector<md::Mesh>::reserve((uint64_t)&v736, 0x86BCA1AF286BCA1BLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)v305 + 264) - *(_QWORD *)(*(_QWORD *)v305 + 256)) >> 3));
        v404 = *(_QWORD *)(*(_QWORD *)v305 + 256);
        if (*(_QWORD *)(*(_QWORD *)v305 + 264) != v404)
        {
          v405 = 0;
          v406 = 0;
          v407 = 0;
          do
          {
            v408 = v404 + 152 * v405;
            v409 = *(unsigned int *)(v408 + 136);
            if ((_DWORD)v409)
            {
              v410 = 0;
              v411 = *(_DWORD *)(v408 + 140);
              v412 = *(_DWORD *)(v404 + 152 * v405 + 132);
              v413 = (char *)v743[0];
              v414 = v759;
              v415 = v764;
              v416 = v768;
              do
              {
                if (v411 == -1)
                {
                  _S1 = 0;
                  _S0 = 0;
                }
                else
                {
                  v417 = (int *)(*(_QWORD *)(v361 + 320) + 8 * (v411 + v410));
                  _S0 = *v417;
                  _S1 = v417[1];
                }
                v420 = &v413[8 * (v412 + v410)];
                v422 = *(unsigned int *)v420;
                v421 = *((unsigned int *)v420 + 1);
                if (v422 < v421)
                {
                  v423 = &v397[12 * (v412 + v410)];
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                  }
                  v426 = v421 - v422;
                  v427 = (float *)(*(_QWORD *)v398 + 12 * v422 + 8);
                  do
                  {
                    v428 = (int)(float)(*((float *)v423 + 1) * v79);
                    v429 = *((_DWORD *)v423 + 2);
                    v430 = v414 + 8 * v407;
                    *(_WORD *)v430 = (int)(float)(*(float *)v423 * v79);
                    *(_WORD *)(v430 + 2) = v428;
                    *(_DWORD *)(v430 + 4) = v429;
                    v431 = 4 * v407;
                    v432 = (_WORD *)(v415 + v431);
                    *v432 = _H0;
                    v432[1] = _H1;
                    v433 = *(v427 - 2);
                    v434 = *(v427 - 1);
                    v435 = *v427;
                    v427 += 3;
                    _S2 = (float)((float)(v433 * 0.28126) / (float)(v435 + 1.0)) + 0.5;
                    _S3 = (float)((float)(v434 * 0.28126) / (float)(v435 + 1.0)) + 0.5;
                    __asm
                    {
                      FCVT            H2, S2
                      FCVT            H3, S3
                    }
                    v438 = (_WORD *)(v416 + v431);
                    *v438 = LOWORD(_S2);
                    v438[1] = LOWORD(_S3);
                    ++v407;
                    --v426;
                  }
                  while (v426);
                }
                ++v410;
              }
              while (v410 != v409);
            }
            __srca = v406;
            v439 = v404 + 152 * v405;
            v440 = (*(_DWORD *)(v439 + 148) + *(_DWORD *)(v439 + 144));
            *(_QWORD *)&v776 = *(unsigned int *)(v439 + 144);
            *((_QWORD *)&v776 + 1) = v440;
            v441 = *(unsigned __int8 *)(v439 + 128);
            if (v441 <= 3)
              v442 = 0x2010403u >> (8 * v441);
            else
              v442 = 3;
            v750 = v442;
            v443 = (uint64_t)&v715[24 * v405];
            v749 = 0;
            v735 = 1;
            v444 = *((_QWORD *)&v736 + 1);
            if (*((_QWORD *)&v736 + 1) >= v737)
            {
              v449 = std::vector<md::Mesh>::__emplace_back_slow_path<std::shared_ptr<ggl::DaVinci::TexturedCompressedMesh> &,gm::Range<unsigned long>,ggl::PrimitiveType,gm::Box<float,3> &,md::MeshVertexFormat,BOOL>((void **)&v736, v711, v717, &v776, &v750, v443, &v749, &v735);
            }
            else
            {
              do
                v445 = __ldxr(v366);
              while (__stxr(v445 + 1, v366));
              *(_QWORD *)v444 = v711;
              *(_QWORD *)(v444 + 8) = v717;
              do
                v446 = __ldxr(v366);
              while (__stxr(v446 + 1, v366));
              *(_OWORD *)(v444 + 16) = v776;
              *(_BYTE *)(v444 + 32) = v442;
              v447 = *(_QWORD *)(v443 + 16);
              *(_OWORD *)(v444 + 36) = *(_OWORD *)v443;
              *(_QWORD *)(v444 + 52) = v447;
              *(_WORD *)(v444 + 60) = 1;
              *(_QWORD *)(v444 + 64) = 0;
              *(_QWORD *)(v444 + 72) = 0;
              do
                v448 = __ldaxr(v366);
              while (__stlxr(v448 - 1, v366));
              if (!v448)
              {
                ((void (*)(std::__shared_weak_count *))v717->__on_zero_shared)(v717);
                std::__shared_weak_count::__release_weak(v717);
              }
              v449 = (char *)(v444 + 80);
            }
            *((_QWORD *)&v736 + 1) = v449;
            v450 = *((_QWORD *)v449 - 10);
            do
              v451 = __ldxr(v348);
            while (__stxr(v451 + 1, v348));
            v453 = (uint64_t **)(v450 + 120);
            v452 = *(uint64_t **)(v450 + 120);
            if (v452)
            {
              while (1)
              {
                while (1)
                {
                  v454 = (uint64_t **)v452;
                  v455 = v452[4];
                  if (v455 < 2)
                    break;
                  v452 = *v454;
                  v453 = v454;
                  if (!*v454)
                    goto LABEL_540;
                }
                if (v455)
                  break;
                v452 = v454[1];
                if (!v452)
                {
                  v453 = v454 + 1;
                  goto LABEL_540;
                }
              }
              v460 = v720;
              v459 = v722;
            }
            else
            {
              v454 = (uint64_t **)(v450 + 120);
LABEL_540:
              v456 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v450 + 128) + 16))(*(_QWORD *)(v450 + 128), 56, 8);
              v456[5] = 0;
              v456[6] = 0;
              v456[4] = 1;
              *v456 = 0;
              v456[1] = 0;
              v456[2] = (uint64_t)v454;
              *v453 = v456;
              v457 = **(_QWORD **)(v450 + 112);
              v458 = v456;
              if (v457)
              {
                *(_QWORD *)(v450 + 112) = v457;
                v458 = *v453;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v450 + 120), v458);
              ++*(_QWORD *)(v450 + 136);
              v459 = v722;
              v460 = v720;
              if (!v720)
              {
                v397 = v718;
                goto LABEL_549;
              }
              v454 = (uint64_t **)v456;
            }
            v397 = v718;
            v461 = (unint64_t *)&v460->__shared_owners_;
            do
              v462 = __ldxr(v461);
            while (__stxr(v462 + 1, v461));
            v456 = (uint64_t *)v454;
LABEL_549:
            v463 = (std::__shared_weak_count *)v456[6];
            v456[5] = (uint64_t)v459;
            v456[6] = (uint64_t)v460;
            if (!v463)
              goto LABEL_553;
            v464 = (unint64_t *)&v463->__shared_owners_;
            do
              v465 = __ldaxr(v464);
            while (__stlxr(v465 - 1, v464));
            if (!v465)
            {
              ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
              std::__shared_weak_count::__release_weak(v463);
              v466 = v720;
              if (!v720)
                goto LABEL_559;
            }
            else
            {
LABEL_553:
              v466 = v720;
              if (!v720)
                goto LABEL_559;
            }
            v467 = (unint64_t *)&v466->__shared_owners_;
            do
              v468 = __ldaxr(v467);
            while (__stlxr(v468 - 1, v467));
            if (!v468)
            {
              ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
              std::__shared_weak_count::__release_weak(v466);
            }
LABEL_559:
            v469 = *(_QWORD *)(*((_QWORD *)&v736 + 1) - 80);
            do
              v470 = __ldxr(v352);
            while (__stxr(v470 + 1, v352));
            v472 = (uint64_t **)(v469 + 120);
            v471 = *(uint64_t **)(v469 + 120);
            if (v471)
            {
              while (1)
              {
                v472 = (uint64_t **)v471;
                if (!v471[4])
                  break;
                v471 = (uint64_t *)*v471;
                if (!*v472)
                  goto LABEL_564;
              }
              v476 = v725;
              v477 = v716;
              goto LABEL_569;
            }
LABEL_564:
            v473 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v469 + 128) + 16))(*(_QWORD *)(v469 + 128), 56, 8);
            *v473 = 0;
            v473[1] = 0;
            v473[5] = 0;
            v473[6] = 0;
            v473[4] = 0;
            v473[2] = (uint64_t)v472;
            *v472 = v473;
            v474 = **(_QWORD **)(v469 + 112);
            v475 = v473;
            if (v474)
            {
              *(_QWORD *)(v469 + 112) = v474;
              v475 = *v472;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v469 + 120), v475);
            ++*(_QWORD *)(v469 + 136);
            v476 = v725;
            v477 = v716;
            if (v716)
            {
              v472 = (uint64_t **)v473;
LABEL_569:
              v478 = (unint64_t *)&v477->__shared_owners_;
              do
                v479 = __ldxr(v478);
              while (__stxr(v479 + 1, v478));
              v473 = (uint64_t *)v472;
            }
            v480 = (std::__shared_weak_count *)v473[6];
            v473[5] = (uint64_t)v476;
            v473[6] = (uint64_t)v477;
            v398 = (unint64_t)v713;
            if (!v480)
              goto LABEL_576;
            v481 = (unint64_t *)&v480->__shared_owners_;
            do
              v482 = __ldaxr(v481);
            while (__stlxr(v482 - 1, v481));
            if (!v482)
            {
              ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
              std::__shared_weak_count::__release_weak(v480);
              v483 = v716;
              if (v716)
              {
LABEL_577:
                v484 = (unint64_t *)&v483->__shared_owners_;
                do
                  v485 = __ldaxr(v484);
                while (__stlxr(v485 - 1, v484));
                if (!v485)
                {
                  ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                  std::__shared_weak_count::__release_weak(v483);
                }
              }
            }
            else
            {
LABEL_576:
              v483 = v716;
              if (v716)
                goto LABEL_577;
            }
            v406 = __srca + 1;
            v405 = (unsigned __int16)(__srca + 1);
            v404 = *(_QWORD *)(*(_QWORD *)v729 + 256);
          }
          while (0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(*(_QWORD *)v729 + 264) - v404) >> 3) > v405);
        }
        v487 = *((_QWORD *)&v736 + 1);
        v486 = v736;
        v723 = 0u;
        if (*((_QWORD *)&v736 + 1) == (_QWORD)v736)
        {
          v730 = 0;
          __srcb = 0;
          v486 = *((_QWORD *)&v736 + 1);
          goto LABEL_621;
        }
        v488 = 0;
        v489 = 0;
        v490 = 0;
        v491 = 0;
        __srcb = 0;
        do
        {
          v398 = v488 - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 4);
          if (v491 < v490)
          {
            *(_WORD *)v491 = v398;
            v491 += 2;
            goto LABEL_586;
          }
          v726 = v487;
          v492 = v491 - __srcb;
          if (v491 - __srcb <= -3)
            abort();
          v493 = v492 >> 1;
          if (v490 - __srcb <= (unint64_t)((v492 >> 1) + 1))
            v494 = v493 + 1;
          else
            v494 = v490 - __srcb;
          if ((unint64_t)(v490 - __srcb) >= 0x7FFFFFFFFFFFFFFELL)
            v495 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v495 = v494;
          if (v495)
          {
            if (v495 < 0)
              goto LABEL_946;
            v496 = v495;
            v497 = operator new(2 * v495);
            v495 = v496;
            v493 = v492 >> 1;
          }
          else
          {
            v497 = 0;
          }
          v498 = &v497[2 * v493];
          *(_WORD *)v498 = v398;
          v499 = v498 + 2;
          v500 = __srcb;
          if (v491 != __srcb)
          {
            v501 = v491 - 2 - __srcb;
            if (v501 < 0x5E
              || (v505 = v492 & 0xFFFFFFFFFFFFFFFELL,
                  &v497[(v492 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v501 & 0xFFFFFFFFFFFFFFFELL)] > &v497[(v492 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                 - 2]))
            {
              v502 = v491;
              v500 = __srcb;
              v487 = v726;
            }
            else
            {
              v487 = v726;
              if (&v491[-(v501 & 0xFFFFFFFFFFFFFFFELL) - 2] > v491 - 2)
              {
                v502 = v491;
                v500 = __srcb;
                goto LABEL_602;
              }
              if ((unint64_t)(v491 - &v497[v505]) < 0x20)
              {
                v502 = v491;
                v500 = __srcb;
                goto LABEL_602;
              }
              v506 = (v501 >> 1) + 1;
              v502 = &v491[-2 * (v506 & 0xFFFFFFFFFFFFFFF0)];
              v507 = &v497[2 * v493 - 16];
              v508 = v491 - 16;
              v509 = v506 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v510 = *(_OWORD *)v508;
                *(v507 - 1) = *((_OWORD *)v508 - 1);
                *v507 = v510;
                v507 -= 2;
                v508 -= 32;
                v509 -= 16;
              }
              while (v509);
              v498 -= 2 * (v506 & 0xFFFFFFFFFFFFFFF0);
              v500 = __srcb;
              if (v506 == (v506 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_603:
                v490 = &v497[2 * v495];
                if (v500)
                  goto LABEL_604;
                goto LABEL_606;
              }
            }
            do
            {
LABEL_602:
              v503 = *((_WORD *)v502 - 1);
              v502 -= 2;
              *((_WORD *)v498 - 1) = v503;
              v498 -= 2;
            }
            while (v502 != v500);
            goto LABEL_603;
          }
          v487 = v726;
          v490 = &v497[2 * v495];
          if (__srcb)
          {
LABEL_604:
            v491 = v499;
            v504 = v490;
            operator delete(v500);
            v490 = v504;
            v487 = *((_QWORD *)&v736 + 1);
            v486 = v736;
            __srcb = v498;
            goto LABEL_586;
          }
LABEL_606:
          __srcb = v498;
          v491 = v499;
LABEL_586:
          v488 = (unsigned __int16)++v489;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v487 - v486) >> 4) > (unsigned __int16)v489);
        v511 = v491 - __srcb;
        if (v491 == __srcb)
        {
          v730 = 0;
        }
        else
        {
          if (v511 < 0)
            abort();
          v398 = (unint64_t)operator new(v491 - __srcb);
          memcpy((void *)v398, __srcb, v511);
          *(_QWORD *)&v512 = v398;
          v730 = v398 + 2 * (v511 >> 1);
          *((_QWORD *)&v512 + 1) = v730;
          v723 = v512;
        }
LABEL_621:
        v513 = *(_QWORD *)(a1 + 392);
        if (!v513)
          goto LABEL_641;
        v514 = (uint8x8_t)vcnt_s8((int8x8_t)v513);
        v514.i16[0] = vaddlv_u8(v514);
        if (v514.u32[0] > 1uLL)
        {
          v398 = v706;
          if (v513 <= v706)
            v398 = v706 % v513;
        }
        else
        {
          v398 = (v513 - 1) & (unint64_t)v706;
        }
        v515 = *(uint64_t ****)(*(_QWORD *)(a1 + 384) + 8 * v398);
        if (!v515 || (v516 = *v515) == 0)
        {
LABEL_641:
          v519 = (char *)operator new(0x30uLL);
          *(_QWORD *)&v776 = v519;
          *((_QWORD *)&v776 + 1) = a1 + 400;
          *(_QWORD *)v519 = 0;
          *((_QWORD *)v519 + 1) = v706;
          v519[16] = v706;
          *(_OWORD *)(v519 + 24) = v723;
          v520 = a1;
          *((_QWORD *)v519 + 5) = v730;
          LOBYTE(v777) = 1;
          v521 = (float)(unint64_t)(*(_QWORD *)(a1 + 408) + 1);
          v522 = *(float *)(a1 + 416);
          v727 = v519;
          if (!v513 || (float)(v522 * (float)v513) < v521)
          {
            v523 = (v513 & (v513 - 1)) != 0;
            if (v513 < 3)
              v523 = 1;
            v524 = v523 | (2 * v513);
            v525 = vcvtps_u32_f32(v521 / v522);
            if (v524 <= v525)
              prime = v525;
            else
              prime = v524;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v513 = *(_QWORD *)(a1 + 392);
            }
            if (prime > v513)
            {
LABEL_653:
              if (prime >> 61)
LABEL_946:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v527 = operator new(8 * prime);
              v528 = *(void **)(a1 + 384);
              *(_QWORD *)(a1 + 384) = v527;
              if (v528)
                operator delete(v528);
              v529 = 0;
              *(_QWORD *)(a1 + 392) = prime;
              do
                *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v529++) = 0;
              while (prime != v529);
              v530 = (_QWORD *)*v701;
              if (!*v701)
                goto LABEL_684;
              v531 = v530[1];
              v532 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                v533 = v531 & v532;
                *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v533) = v701;
                for (k = (_QWORD *)*v530; *v530; k = (_QWORD *)*v530)
                {
                  v535 = k[1] & v532;
                  if (v535 == v533)
                  {
                    v530 = k;
                  }
                  else
                  {
                    v536 = *(_QWORD *)(a1 + 384);
                    if (*(_QWORD *)(v536 + 8 * v535))
                    {
                      *v530 = *k;
                      v537 = 8 * v535;
                      *k = **(_QWORD **)(*(_QWORD *)(a1 + 384) + v537);
                      **(_QWORD **)(*(_QWORD *)(a1 + 384) + v537) = k;
                    }
                    else
                    {
                      *(_QWORD *)(v536 + 8 * v535) = v530;
                      v530 = k;
                      v533 = v535;
                    }
                  }
                }
                goto LABEL_684;
              }
              if (v531 >= prime)
                v531 %= prime;
              *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v531) = v701;
              v551 = (_QWORD *)*v530;
              if (!*v530)
              {
LABEL_684:
                v513 = prime;
                goto LABEL_685;
              }
              while (2)
              {
                v553 = v551[1];
                if (v553 >= prime)
                  v553 %= prime;
                if (v553 != v531)
                {
                  v554 = *(_QWORD *)(a1 + 384);
                  if (!*(_QWORD *)(v554 + 8 * v553))
                  {
                    *(_QWORD *)(v554 + 8 * v553) = v530;
LABEL_689:
                    v530 = v551;
                    v551 = (_QWORD *)*v551;
                    v531 = v553;
                    if (!v551)
                      goto LABEL_684;
                    continue;
                  }
                  *v530 = *v551;
                  v552 = 8 * v553;
                  *v551 = **(_QWORD **)(*(_QWORD *)(a1 + 384) + v552);
                  **(_QWORD **)(*(_QWORD *)(a1 + 384) + v552) = v551;
                  v551 = v530;
                }
                break;
              }
              v553 = v531;
              goto LABEL_689;
            }
            if (prime < v513)
            {
              v538 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 408) / *(float *)(a1 + 416));
              if (v513 < 3
                || (v539 = (uint8x8_t)vcnt_s8((int8x8_t)v513), v539.i16[0] = vaddlv_u8(v539), v539.u32[0] > 1uLL))
              {
                v538 = std::__next_prime(v538);
              }
              else
              {
                v540 = 1 << -(char)__clz(v538 - 1);
                if (v538 >= 2)
                  v538 = v540;
              }
              if (prime <= v538)
                prime = v538;
              if (prime >= v513)
              {
                v513 = *(_QWORD *)(a1 + 392);
              }
              else
              {
                if (prime)
                  goto LABEL_653;
                v605 = *(void **)(a1 + 384);
                *(_QWORD *)(a1 + 384) = 0;
                if (v605)
                  operator delete(v605);
                v513 = 0;
                *(_QWORD *)(a1 + 392) = 0;
              }
            }
LABEL_685:
            if ((v513 & (v513 - 1)) != 0)
            {
              if (v513 <= v706)
                v398 = v706 % v513;
              else
                v398 = v706;
            }
            else
            {
              v398 = ((_DWORD)v513 - 1) & v706;
            }
          }
          v555 = *(_QWORD *)(a1 + 384);
          v556 = *(_QWORD **)(v555 + 8 * v398);
          if (v556)
          {
            v557 = v727;
            *(_QWORD *)v727 = *v556;
            v558 = (void **)(a1 + 184);
            goto LABEL_706;
          }
          v558 = (void **)(a1 + 184);
          *(_QWORD *)v727 = *v701;
          *v701 = v727;
          *(_QWORD *)(v555 + 8 * v398) = v701;
          if (*(_QWORD *)v727)
          {
            v557 = v727;
            v559 = *(_QWORD *)(*(_QWORD *)v727 + 8);
            if ((v513 & (v513 - 1)) != 0)
            {
              if (v559 >= v513)
                v559 %= v513;
            }
            else
            {
              v559 &= v513 - 1;
            }
            v556 = (_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v559);
LABEL_706:
            *v556 = v557;
          }
          ++*(_QWORD *)(a1 + 408);
          v560 = 0;
          goto LABEL_708;
        }
        if (v514.u32[0] < 2uLL)
        {
          while (1)
          {
            v518 = v516[1];
            if (v518 == (uint64_t *)v706)
            {
              if (*((unsigned __int8 *)v516 + 16) == v706)
                goto LABEL_814;
            }
            else if (((unint64_t)v518 & (v513 - 1)) != v398)
            {
              goto LABEL_641;
            }
            v516 = (uint64_t **)*v516;
            if (!v516)
              goto LABEL_641;
          }
        }
        while (2)
        {
          v517 = (unint64_t)v516[1];
          if (v517 != v706)
          {
            if (v517 >= v513)
              v517 %= v513;
            if (v517 != v398)
              goto LABEL_641;
LABEL_631:
            v516 = (uint64_t **)*v516;
            if (!v516)
              goto LABEL_641;
            continue;
          }
          break;
        }
        if (*((unsigned __int8 *)v516 + 16) != v706)
          goto LABEL_631;
LABEL_814:
        v520 = a1;
        v558 = (void **)(a1 + 184);
        v560 = (void *)v723;
LABEL_708:
        if (v560)
        {
          operator delete(v560);
          v487 = *((_QWORD *)&v736 + 1);
          v486 = v736;
        }
        if (v486 != v487)
        {
          v561 = *(_OWORD **)(v520 + 192);
          do
          {
            if ((unint64_t)v561 < *(_QWORD *)(v520 + 200))
            {
              *v561 = *(_OWORD *)v486;
              *(_QWORD *)v486 = 0;
              *(_QWORD *)(v486 + 8) = 0;
              v562 = *(_OWORD *)(v486 + 16);
              v563 = *(_OWORD *)(v486 + 32);
              *(_OWORD *)((char *)v561 + 46) = *(_OWORD *)(v486 + 46);
              v561[1] = v562;
              v561[2] = v563;
              v561[4] = *(_OWORD *)(v486 + 64);
              *(_QWORD *)(v486 + 64) = 0;
              *(_QWORD *)(v486 + 72) = 0;
              v561 += 5;
            }
            else
            {
              v561 = std::vector<md::Mesh>::__push_back_slow_path<md::Mesh>(v558, (__int128 *)v486);
            }
            *(_QWORD *)(v520 + 192) = v561;
            v486 += 80;
          }
          while (v486 != v487);
        }
        if (__srcb)
          operator delete(__srcb);
        v564 = (char *)v736;
        v565 = v717;
        if ((_QWORD)v736)
        {
          v566 = (char *)*((_QWORD *)&v736 + 1);
          if (*((_QWORD *)&v736 + 1) == (_QWORD)v736)
          {
LABEL_734:
            operator delete(v564);
            v565 = v717;
            goto LABEL_735;
          }
          while (2)
          {
            v567 = (std::__shared_weak_count *)*((_QWORD *)v566 - 1);
            if (!v567)
              goto LABEL_726;
            v568 = (unint64_t *)&v567->__shared_owners_;
            do
              v569 = __ldaxr(v568);
            while (__stlxr(v569 - 1, v568));
            if (!v569)
            {
              ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
              std::__shared_weak_count::__release_weak(v567);
              v570 = (std::__shared_weak_count *)*((_QWORD *)v566 - 9);
              if (v570)
              {
LABEL_727:
                v571 = (unint64_t *)&v570->__shared_owners_;
                do
                  v572 = __ldaxr(v571);
                while (__stlxr(v572 - 1, v571));
                if (!v572)
                {
                  ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                  std::__shared_weak_count::__release_weak(v570);
                }
              }
            }
            else
            {
LABEL_726:
              v570 = (std::__shared_weak_count *)*((_QWORD *)v566 - 9);
              if (v570)
                goto LABEL_727;
            }
            v566 -= 80;
            if (v566 == v564)
            {
              v564 = (char *)v736;
              goto LABEL_734;
            }
            continue;
          }
        }
        do
LABEL_735:
          v573 = __ldaxr(v366);
        while (__stlxr(v573 - 1, v366));
        if (!v573)
        {
          ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
          std::__shared_weak_count::__release_weak(v565);
        }
        if (v759)
        {
          v574 = v756;
          v575 = v757;
          if (v757 != v756)
          {
            v576 = v755[1];
            v577 = v758;
            v578 = HIBYTE(v758);
            if (v755[0] && *((_BYTE *)v755[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v755[0] + 64))();
            if (v577 && !v578)
            {
              v579 = v576[7];
              v580 = v576[8];
              if (v580 == v579)
                v579 = v576[10] - v576[9];
              if (v574 < v579)
                v579 = v574;
              if (v580 <= v575)
                v580 = v575;
              if (v580 == v579)
                v580 = v579 + v576[10] - v576[9];
              v576[7] = v579;
              v576[8] = v580;
            }
          }
        }
        if (v764)
        {
          v581 = v761;
          v582 = v762;
          if (v762 != v761)
          {
            v583 = __p[1];
            v584 = v763;
            v585 = HIBYTE(v763);
            if (__p[0] && *((_BYTE *)__p[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)__p[0] + 64))();
            if (v584 && !v585)
            {
              v586 = (char *)v583[7];
              v587 = (char *)v583[8];
              if (v587 == v586)
                v586 = (char *)(v583[10] - v583[9]);
              if (v581 < v586)
                v586 = v581;
              if (v587 <= v582)
                v587 = v582;
              if (v587 == v586)
                v587 = &v586[v583[10] - v583[9]];
              v583[7] = v586;
              v583[8] = v587;
            }
          }
        }
        if (v768)
        {
          v588 = v765.__end_cap_.__value_;
          v589 = v766;
          if (v766 != v765.__end_cap_.__value_)
          {
            v590 = v765.__end_;
            v591 = v767;
            v592 = HIBYTE(v767);
            if (v765.__begin_ && *((_BYTE *)v765.__end_ + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v765.__begin_ + 64))();
            if (v591 && !v592)
            {
              v593 = (unsigned int *)*((_QWORD *)v590 + 7);
              v594 = (unsigned int *)*((_QWORD *)v590 + 8);
              if (v594 == v593)
                v593 = (unsigned int *)(*((_QWORD *)v590 + 10) - *((_QWORD *)v590 + 9));
              if (v588 < v593)
                v593 = v588;
              if (v594 <= v589)
                v594 = v589;
              if (v594 == v593)
                v594 = (unsigned int *)((char *)v593 + *((_QWORD *)v590 + 10) - *((_QWORD *)v590 + 9));
              *((_QWORD *)v590 + 7) = v593;
              *((_QWORD *)v590 + 8) = v594;
            }
          }
        }
        do
          v595 = __ldaxr(v352);
        while (__stlxr(v595 - 1, v352));
        v4 = v704;
        if (!v595)
        {
          ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
          std::__shared_weak_count::__release_weak(v716);
        }
        do
          v596 = __ldaxr(v348);
        while (__stlxr(v596 - 1, v348));
        if (!v596)
        {
          ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
          std::__shared_weak_count::__release_weak(v720);
        }
        do
          v597 = __ldaxr(v703);
        while (__stlxr(v597 - 1, v703));
        if (v597)
        {
          v598 = (std::__shared_weak_count *)*((_QWORD *)&v742 + 1);
          if (!*((_QWORD *)&v742 + 1))
            goto LABEL_800;
        }
        else
        {
          (*(void (**)(_QWORD *))(*v708 + 16))(v708);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v708);
          v598 = (std::__shared_weak_count *)*((_QWORD *)&v742 + 1);
          if (!*((_QWORD *)&v742 + 1))
            goto LABEL_800;
        }
        v599 = (unint64_t *)&v598->__shared_owners_;
        do
          v600 = __ldaxr(v599);
        while (__stlxr(v600 - 1, v599));
        if (v600)
        {
LABEL_800:
          v601 = v772;
          if (v772)
            goto LABEL_801;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
          std::__shared_weak_count::__release_weak(v598);
          v601 = v772;
          if (v772)
          {
LABEL_801:
            v773 = v601;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v775 + 40))(v775, v601, v774 - v601);
          }
        }
        if (v743[0])
          operator delete(v743[0]);
        v602 = (_QWORD *)v770;
        if ((_QWORD)v770)
        {
          do
          {
            v603 = (_QWORD *)*v602;
            operator delete(v602);
            v602 = v603;
          }
          while (v603);
        }
        v604 = (void *)v769;
        *(_QWORD *)&v769 = 0;
        if (v604)
          operator delete(v604);
        v72 = (_QWORD *)a1;
        if (v718)
          operator delete(v718);
        if (v715)
          operator delete(v715);
        v278 = v706 + 1;
        if (v706 + 1 == v700)
          goto LABEL_840;
      }
      v315 = 0;
LABEL_409:
      v323 = v312 - v315;
      v324 = v311 + 8;
      v325 = 12 * v315;
      do
      {
        v326 = &v718[v325];
        *(_DWORD *)v326 = *(_DWORD *)(v324 + v325 - 8);
        *((_DWORD *)v326 + 1) = *(_DWORD *)(v324 + v325 - 4);
        *((_DWORD *)v326 + 2) = *(_DWORD *)(v324 + v325);
        v325 += 12;
        --v323;
      }
      while (v323);
      goto LABEL_413;
    }
LABEL_840:
    v623 = (char **)(v72 + 53);
    if (v72 + 53 != v4)
    {
      v625 = *v4;
      v624 = v4[1];
      v626 = 0xCCCCCCCCCCCCCCCDLL * ((v624 - *v4) >> 3);
      v627 = v72[55];
      v628 = v72;
      v629 = (char *)v72[53];
      if (0xCCCCCCCCCCCCCCCDLL * ((v627 - (uint64_t)v629) >> 3) >= v626)
      {
        v636 = (char *)v628[54];
        v637 = (v636 - v629) >> 3;
        v638 = 0xCCCCCCCCCCCCCCCDLL * v637;
        if (0xCCCCCCCCCCCCCCCDLL * v637 < v626)
        {
          if (v636 != v629)
          {
            v639 = 8 * v637;
            v640 = *v4;
            do
            {
              if ((char *)v640 != v629)
              {
                *((_DWORD *)v629 + 8) = *(_DWORD *)(v640 + 32);
                std::__hash_table<std::__hash_value_type<unsigned short,unsigned long long>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,unsigned long long>,void *> *>>(v629, *(uint64_t **)(v640 + 16));
              }
              v640 += 40;
              v629 += 40;
              v639 -= 40;
            }
            while (v639);
            v629 = *(char **)(a1 + 432);
          }
          v671 = v625 + 40 * v638;
          v672 = v629;
          if (v671 != v624)
          {
            v673 = 0;
            do
            {
              std::unordered_map<unsigned short,unsigned long long>::unordered_map((uint64_t)&v629[v673], v671 + v673);
              v673 += 40;
            }
            while (v671 + v673 != v624);
            v672 = &v629[v673];
          }
          v72 = (_QWORD *)a1;
          *(_QWORD *)(a1 + 432) = v672;
          goto LABEL_928;
        }
        if (v625 != v624)
        {
          do
          {
            if ((char *)v625 != v629)
            {
              *((_DWORD *)v629 + 8) = *(_DWORD *)(v625 + 32);
              std::__hash_table<std::__hash_value_type<unsigned short,unsigned long long>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,unsigned long long>,void *> *>>(v629, *(uint64_t **)(v625 + 16));
            }
            v625 += 40;
            v629 += 40;
          }
          while (v625 != v624);
          v636 = *(char **)(a1 + 432);
        }
        while (v636 != v629)
        {
          v674 = (_QWORD *)*((_QWORD *)v636 - 3);
          if (v674)
          {
            do
            {
              v675 = (_QWORD *)*v674;
              operator delete(v674);
              v674 = v675;
            }
            while (v675);
          }
          v677 = (void *)*((_QWORD *)v636 - 5);
          v636 -= 40;
          v676 = v677;
          *(_QWORD *)v636 = 0;
          if (v677)
            operator delete(v676);
        }
      }
      else
      {
        if (v629)
        {
          v630 = *(char **)(a1 + 432);
          v631 = v629;
          if (v630 != v629)
          {
            do
            {
              v632 = (_QWORD *)*((_QWORD *)v630 - 3);
              if (v632)
              {
                do
                {
                  v633 = (_QWORD *)*v632;
                  operator delete(v632);
                  v632 = v633;
                }
                while (v633);
              }
              v635 = (void *)*((_QWORD *)v630 - 5);
              v630 -= 40;
              v634 = v635;
              *(_QWORD *)v630 = 0;
              if (v635)
                operator delete(v634);
            }
            while (v630 != v629);
            v631 = *v623;
          }
          *(_QWORD *)(a1 + 432) = v629;
          operator delete(v631);
          v627 = 0;
          *v623 = 0;
          v623[1] = 0;
          v623[2] = 0;
        }
        if (v626 > 0x666666666666666)
          goto LABEL_954;
        v666 = 0xCCCCCCCCCCCCCCCDLL * (v627 >> 3);
        v667 = 2 * v666;
        if (2 * v666 <= v626)
          v667 = v626;
        v668 = v666 >= 0x333333333333333 ? 0x666666666666666 : v667;
        if (v668 > 0x666666666666666)
LABEL_954:
          abort();
        v629 = (char *)operator new(40 * v668);
        *(_QWORD *)(a1 + 424) = v629;
        *(_QWORD *)(a1 + 432) = v629;
        *(_QWORD *)(a1 + 440) = &v629[40 * v668];
        if (v625 != v624)
        {
          v669 = 0;
          do
          {
            std::unordered_map<unsigned short,unsigned long long>::unordered_map((uint64_t)&v629[v669], v625 + v669);
            v669 += 40;
          }
          while (v625 + v669 != v624);
          v629 += v669;
        }
      }
      *(_QWORD *)(a1 + 432) = v629;
      v72 = (_QWORD *)a1;
    }
LABEL_928:
    v678 = (uint64_t *)v72[23];
    v679 = (uint64_t *)v72[24];
    if (v678 != v679)
    {
      v680 = v72[22];
      do
      {
        v681 = *v678;
        v678 += 10;
        v680 = *(_QWORD *)(*(_QWORD *)(v681 + 96) + 48)
             + v680
             + *(_QWORD *)(**(_QWORD **)(v681 + 64) + 48)
             - *(_QWORD *)(**(_QWORD **)(v681 + 64) + 40)
             - *(_QWORD *)(*(_QWORD *)(v681 + 96) + 40);
      }
      while (v678 != v679);
      v72[22] = v680;
    }
    v682 = (char ***)v72[29];
    v683 = (char ***)v72[30];
    if (v682 != v683)
    {
      v684 = v72[22];
      do
      {
        v685 = *v682;
        v686 = **v682;
        v687 = (*v682)[1];
        if (v686 != v687)
        {
          v688 = v687 - v686 - 32;
          if (v688 > 0x7F)
          {
            v689 = (v688 >> 5) + 1;
            v690 = v689 & 3;
            if ((v689 & 3) == 0)
              v690 = 4;
            v691 = v689 - v690;
            v692 = 32 * v691;
            v693 = 0uLL;
            v694 = (int64x2_t)(unint64_t)v684;
            v695 = (const double *)(v686 + 64);
            do
            {
              v696 = v695 - 8;
              v778 = vld4q_f64(v696);
              v779 = vld4q_f64(v695);
              v694 = vaddq_s64(vsubq_s64((int64x2_t)v778.val[1], (int64x2_t)v778.val[0]), v694);
              v693 = vaddq_s64(vsubq_s64((int64x2_t)v779.val[1], (int64x2_t)v779.val[0]), v693);
              v695 += 16;
              v691 -= 4;
            }
            while (v691);
            v686 += v692;
            v684 = vaddvq_s64(vaddq_s64(v693, v694));
          }
          do
          {
            v698 = *(_QWORD *)v686;
            v697 = *((_QWORD *)v686 + 1);
            v686 += 32;
            v684 += v697 - v698;
          }
          while (v686 != v687);
          v72[22] = v684;
        }
        v684 = &v685[21][64 * (_QWORD)v685[14] + v685[17] - v685[16] + v684] - v685[20];
        v72[22] = v684;
        v682 += 2;
      }
      while (v682 != v683);
    }
LABEL_944:
    operator delete(v699);
  }
}

void sub_19F2AE044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<gm::Matrix<float,2,1>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    *(_QWORD *)(a1 + 8) = &v5[8 * a2];
  }
  else
  {
    v6 = *(_BYTE **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = v7 >> 3;
    v9 = (v7 >> 3) + a2;
    if (v9 >> 61)
      abort();
    v10 = v4 - (_QWORD)v6;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v13[8 * a2];
    if (v5 == v6)
    {
      v6 = v5;
    }
    else
    {
      v15 = v5 - v6 - 8;
      if (v15 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - &v12[v7]) < 0x20)
        goto LABEL_29;
      v16 = (v15 >> 3) + 1;
      v17 = &v12[8 * v8 - 16];
      v18 = v5 - 16;
      v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *(_OWORD *)v18;
        *((_OWORD *)v17 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v17 = v20;
        v17 -= 32;
        v18 -= 32;
        v19 -= 4;
      }
      while (v19);
      v13 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v5 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v21 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v13 - 1) = v21;
          v13 -= 8;
        }
        while (v5 != v6);
        v6 = *(_BYTE **)a1;
      }
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v12[8 * v11];
    if (v6)
      operator delete(v6);
  }
}

void std::vector<md::Mesh>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      abort();
    v4 = *(char **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 != v2)
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 5);
        v4 -= 80;
        *((_OWORD *)v9 - 5) = v10;
        v9 -= 80;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        v11 = *((_OWORD *)v4 + 1);
        v12 = *((_OWORD *)v4 + 2);
        *(_OWORD *)(v9 + 46) = *(_OWORD *)(v4 + 46);
        *((_OWORD *)v9 + 1) = v11;
        *((_OWORD *)v9 + 2) = v12;
        *((_OWORD *)v9 + 4) = *((_OWORD *)v4 + 4);
        *((_QWORD *)v4 + 8) = 0;
        *((_QWORD *)v4 + 9) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (1)
      {
        if (v13 == v2)
          goto LABEL_21;
        v14 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (!v14)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v13 - 9);
          if (!v17)
            goto LABEL_7;
        }
        else
        {
LABEL_13:
          v17 = (std::__shared_weak_count *)*((_QWORD *)v13 - 9);
          if (!v17)
            goto LABEL_7;
        }
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
LABEL_7:
        v13 -= 80;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
LABEL_21:
    if (v2)
      operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v6) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F2AED14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *md::DaVinciGroundTileData::_buildIndexBuffer(md::DaVinciGroundTileData *this, const char *a2, ResourceAccessor *a3, const unsigned __int16 *a4)
{
  unsigned int v4;
  _QWORD *v8;
  char *v9;
  __int128 v10;
  unsigned __int8 v11;
  void *v12;
  void *result;
  int v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  malloc_zone_t *zone;

  v4 = a4;
  v8 = operator new(0xF8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E5228;
  v8[3] = &off_1E42B5748;
  v9 = (char *)(v8 + 3);
  v8[4] = 2;
  *((_DWORD *)v8 + 10) = 257;
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  v8[9] = 2 * v4;
  v10 = 0uLL;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  v8[14] = 0;
  if ((v11 & 1) == 0)
  {
    v10 = 0uLL;
    if (v14)
    {
      v15 = operator new();
      *(_QWORD *)(v15 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v15 + 24) = "GeoGL";
      *(_OWORD *)(v15 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v15 = &off_1E42B5668;
      *(_QWORD *)(v15 + 8) = "GeoGL";
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_OWORD *)(v15 + 104) = 0u;
      *(_OWORD *)(v15 + 120) = 0u;
      *(_OWORD *)(v15 + 136) = 0u;
      *(_OWORD *)(v15 + 152) = 0u;
      *(_OWORD *)(v15 + 168) = 0u;
      *(_OWORD *)(v15 + 184) = 0u;
      *(_OWORD *)(v15 + 200) = 0u;
      *(_OWORD *)(v15 + 216) = 0u;
      *(_OWORD *)(v15 + 232) = 0u;
      *(_QWORD *)(v15 + 248) = 0;
      *(_OWORD *)(v15 + 56) = 0u;
      v16 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v15 + 56), 0);
      if ((_DWORD)v16)
        geo::read_write_lock::logFailure(v16, (uint64_t)"initialization", v17);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v15 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v15 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v15;
      v10 = 0uLL;
    }
  }
  v8[15] = ggl::Allocator::instance(void)::alloc;
  v8[16] = 0;
  *((_OWORD *)v8 + 11) = v10;
  *((_OWORD *)v8 + 12) = v10;
  v8[26] = 0;
  v8[27] = -1;
  *((_OWORD *)v8 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v8 + 10) = v10;
  *((_DWORD *)v8 + 34) = 0;
  v8[28] = &unk_1E42BD118;
  v8[29] = "DV Asset Indices";
  *((_DWORD *)v8 + 60) = 0;
  v8[3] = &off_1E42BD0F8;
  v8[4] = 2;
  *(_QWORD *)this = v9;
  *((_QWORD *)this + 1) = v8;
  if (!v4)
    return 0;
  if (!a2 || *((_BYTE *)v8 + 41) == 2)
    v12 = (void *)v8[12];
  else
    v12 = (void *)(*(uint64_t (**)(const char *, char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v9, 0, 2 * v4, 1, 1);
  result = memcpy(v12, a3, 2 * v4);
  if (v12 && a2 && *((_BYTE *)v8 + 41) != 2)
    return (void *)(*(uint64_t (**)(const char *, void *, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v12, v8 + 3, 0, 2 * v4, 1, 1);
  return result;
}

uint64_t *geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = result;
  if (result[2])
  {
    v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      v10 = (uint64_t **)*result;
    }
    else
    {
      v5 = 0;
      v6 = (uint64_t *)*result;
      do
      {
        v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            v8 = (uint64_t **)v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t **)v6[2];
            v9 = *v8 == v6;
            v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      v10 = (uint64_t **)*result;
      do
      {
        v11 = v5 >> 1;
        v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          v14 = v5 >> 1;
          v15 = v10;
          do
          {
            v17 = v15[1];
            if (v17)
            {
              do
              {
                v12 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v12 = v15[2];
                v9 = *v12 == (_QWORD)v15;
                v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((unsigned __int16 *)v12 + 14) < a2[1])
        {
          v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              v10 = (uint64_t **)v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v10 = (uint64_t **)v12[2];
              v9 = *v10 == v12;
              v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          v11 = v5 + ~v11;
        }
        v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((unsigned __int16 *)v10 + 13) < a2[1])
      return result;
    if (v10 != (uint64_t **)*result)
    {
      v22 = *v10;
      if (*v10)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = v10[2];
          v9 = *v23 == (_QWORD)v10;
          v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*a2 < *((unsigned __int16 *)v23 + 14))
        return result;
    }
    v24 = *v4;
    v20 = (uint64_t **)(result + 1);
    if (*v4)
    {
      v25 = a2[1];
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v24;
          v26 = *((unsigned __int16 *)v24 + 14);
          if (v25 >= v26)
            break;
          v24 = *v20;
          v4 = v20;
          if (!*v20)
            goto LABEL_54;
        }
        if (v26 >= v25)
          return result;
        v24 = v20[1];
        if (!v24)
          goto LABEL_52;
      }
    }
LABEL_54:
    v27 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v27 + 26) = *(_DWORD *)a2;
    *((_WORD *)v27 + 15) = a2[2];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = v20;
    *v4 = (uint64_t *)v27;
    v28 = *(_QWORD *)*v3;
    if (v28)
    {
      *v3 = v28;
      v29 = *v4;
    }
    else
    {
      v29 = (uint64_t *)v27;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v29);
    ++v3[2];
    return result;
  }
  v4 = (uint64_t **)(result + 1);
  v18 = result[1];
  if (!v18)
  {
    v20 = (uint64_t **)(result + 1);
    goto LABEL_54;
  }
  v19 = a2[1];
  while (1)
  {
    while (1)
    {
      v20 = (uint64_t **)v18;
      v21 = *(unsigned __int16 *)(v18 + 28);
      if (v19 >= v21)
        break;
      v18 = (uint64_t)*v20;
      v4 = v20;
      if (!*v20)
        goto LABEL_54;
    }
    if (v21 >= v19)
      return result;
    v18 = (uint64_t)v20[1];
    if (!v18)
    {
LABEL_52:
      v4 = v20 + 1;
      goto LABEL_54;
    }
  }
}

uint64_t geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert(uint64_t ***a1, unsigned __int16 *a2)
{
  uint64_t **v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;

  if (a1[2])
  {
    v4 = (uint64_t **)(a1 + 1);
    if (*a1 == (uint64_t **)(a1 + 1))
    {
      v10 = *a1;
    }
    else
    {
      v5 = 0;
      v6 = *a1;
      do
      {
        v7 = v6[1];
        if (v7)
        {
          do
          {
            v8 = (uint64_t **)v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t **)v6[2];
            v9 = *v8 == (uint64_t *)v6;
            v6 = v8;
          }
          while (!v9);
        }
        ++v5;
        v6 = v8;
      }
      while (v8 != v4);
      v10 = *a1;
      do
      {
        v11 = v5 >> 1;
        v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          v14 = v5 >> 1;
          v15 = v10;
          do
          {
            v17 = v15[1];
            if (v17)
            {
              do
              {
                v12 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v12 = v15[2];
                v9 = *v12 == (_QWORD)v15;
                v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((unsigned __int16 *)v12 + 14) < a2[1])
        {
          v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              v10 = (uint64_t **)v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v10 = (uint64_t **)v12[2];
              v9 = *v10 == v12;
              v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          v11 = v5 + ~v11;
        }
        v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((unsigned __int16 *)v10 + 13) < a2[1])
      return 0;
    if (v10 != *a1)
    {
      v22 = *v10;
      if (*v10)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = v10[2];
          v9 = *v23 == (_QWORD)v10;
          v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*a2 < *((unsigned __int16 *)v23 + 14))
        return 0;
    }
    v25 = *v4;
    v20 = (uint64_t **)(a1 + 1);
    if (*v4)
    {
      v26 = a2[1];
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v25;
          v27 = *((unsigned __int16 *)v25 + 14);
          if (v26 >= v27)
            break;
          v25 = *v20;
          v4 = v20;
          if (!*v20)
            goto LABEL_55;
        }
        if (v27 >= v26)
          return 0;
        v25 = v20[1];
        if (!v25)
          goto LABEL_53;
      }
    }
  }
  else
  {
    v4 = (uint64_t **)(a1 + 1);
    v18 = (uint64_t *)a1[1];
    if (v18)
    {
      v19 = a2[1];
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v21 = *((unsigned __int16 *)v18 + 14);
          if (v19 >= v21)
            break;
          v18 = *v20;
          v4 = v20;
          if (!*v20)
            goto LABEL_55;
        }
        if (v21 >= v19)
          return 0;
        v18 = v20[1];
        if (!v18)
        {
LABEL_53:
          v4 = v20 + 1;
          goto LABEL_55;
        }
      }
    }
    v20 = (uint64_t **)(a1 + 1);
  }
LABEL_55:
  v28 = (char *)operator new(0x20uLL);
  *(_DWORD *)(v28 + 26) = *(_DWORD *)a2;
  *((_WORD *)v28 + 15) = a2[2];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = v20;
  *v4 = (uint64_t *)v28;
  v29 = **a1;
  if (v29)
  {
    *a1 = (uint64_t **)v29;
    v30 = *v4;
  }
  else
  {
    v30 = (uint64_t *)v28;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v30);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  return 1;
}

void md::MeshRenderableLogic::reset(md::MeshRenderableLogic *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  void *v6;

  if (*((_QWORD *)this + 40))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 39);
    if (v2)
    {
      do
      {
        v5 = (_QWORD *)*v2;
        v6 = (void *)v2[3];
        if (v6)
        {
          v2[4] = v6;
          operator delete(v6);
        }
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    *((_QWORD *)this + 39) = 0;
    v3 = *((_QWORD *)this + 38);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 37) + 8 * i) = 0;
    }
    *((_QWORD *)this + 40) = 0;
  }
  *((_BYTE *)this + 416) = 1;
  geo::Pool<md::TexturedRenderable>::disposeElements((uint64_t)this + 224);
}

void md::LabelManager::clearScene(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  md::FontGlyphCache *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  md::FontGlyphCache *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::mutex *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t j;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _Unwind_Exception *v52;
  _Unwind_Exception *v53;
  std::__shared_weak_count *v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;

  if (!*(_BYTE *)(a1 + 3053) && *(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)(a1 + 3053) = 1;
    if ((_DWORD)a2)
    {
      if ((_DWORD)a2 == 3)
      {
        v4 = *(unsigned int **)(a1 + 296);
        v5 = v4[3];
        v6 = __CFADD__(v5, 1);
        v7 = v5 + 1;
        v4[3] = v7;
        if (v6)
        {
          *(_QWORD *)(v4 + 3) = 0x100000002;
          v7 = 2;
        }
        v4[4] = v7 - 1;
        atomic_store(v7, v4 + 2);
      }
    }
    else
    {
      v56 = 0;
      v57 = 0;
      md::LabelManager::setSelectedLabelMarker(a1, &v56);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 272))(*(_QWORD *)(a1 + 240));
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8 || (v54 = std::__shared_weak_count::lock(v8)) == 0)
    {
      std::__throw_bad_weak_ptr[abi:nn180100]();
      v53 = v52;
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
      _Unwind_Resume(v53);
    }
    if ((_DWORD)a2 == 1)
    {
      v9 = *(std::mutex **)(a1 + 336);
      std::mutex::lock(v9);
      md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::purge((uint64_t)&v9[3].__m_.__opaque[8]);
      md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::purge((uint64_t)&v9[5]);
      std::mutex::unlock(v9);
      v10 = *(_QWORD *)(a1 + 304);
      *(_BYTE *)(v10 + 120) = 1;
      md::FontAtlas::clearCells((md::FontAtlas *)v10);
      *(_DWORD *)(v10 + 116) = 0;
      v11 = operator new();
      v12 = md::FontGlyphCache::FontGlyphCache(v11, 1);
      v13 = *(md::FontGlyphCache **)(v10 + 128);
      *(_QWORD *)(v10 + 128) = v12;
      if (v13)
      {
        md::FontGlyphCache::~FontGlyphCache(v13);
        MEMORY[0x1A1AF4E00](v14);
      }
      v15 = operator new();
      v16 = md::FontGlyphCache::FontGlyphCache(v15, 0);
      v17 = *(md::FontGlyphCache **)(a1 + 3144);
      *(_QWORD *)(a1 + 3144) = v16;
      if (v17)
      {
        md::FontGlyphCache::~FontGlyphCache(v17);
        MEMORY[0x1A1AF4E00](v18);
      }
      v19 = *(_QWORD *)(a1 + 264);
      *(_DWORD *)(v19 + 104) = 0;
      v20 = *(uint64_t **)(v19 + 56);
      if (v20)
      {
        v21 = 0;
        do
        {
          while (!*((_BYTE *)v20 + 56))
          {
            v28 = v20[5];
            if (!v28 || *(_QWORD *)(v28 + 8) == -1)
              break;
            v20[6] = v19;
            v20 = (uint64_t *)*v20;
            ++v21;
            if (!v20)
              goto LABEL_65;
          }
          v22 = (uint64_t *)*v20;
          std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v56, (_QWORD *)(v19 + 32), v20);
          v23 = v56;
          v56 = 0;
          if (v23)
          {
            if (v58)
            {
              v24 = *(std::__shared_weak_count **)(v23 + 40);
              if (v24)
                std::__shared_weak_count::__release_weak(v24);
              v25 = *(std::__shared_weak_count **)(v23 + 24);
              if (v25)
              {
                p_shared_owners = (unint64_t *)&v25->__shared_owners_;
                do
                  v27 = __ldaxr(p_shared_owners);
                while (__stlxr(v27 - 1, p_shared_owners));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
              }
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v57 + 40))(*v57, v23, 64);
          }
          v20 = v22;
        }
        while (v22);
      }
      else
      {
        v21 = 0;
      }
LABEL_65:
      *(_DWORD *)(v19 + 100) = v21;
      std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)v19);
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 200))(*(_QWORD *)(a1 + 240));
      v29 = *(std::mutex **)(a1 + 336);
      std::mutex::lock(v29);
      md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear((uint64_t)&v29[3].__m_.__opaque[8]);
      md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear((uint64_t)&v29[5]);
      std::mutex::unlock(v29);
      if (*(_QWORD *)(a1 + 416))
      {
        v30 = *(_QWORD **)(a1 + 400);
        while (v30)
        {
          v37 = v30;
          v30 = (_QWORD *)*v30;
          v38 = (std::__shared_weak_count *)v37[3];
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 408) + 40))(*(_QWORD *)(a1 + 408), v37, 32);
        }
        *(_QWORD *)(a1 + 400) = 0;
        v31 = *(_QWORD *)(a1 + 384);
        if (v31)
        {
          for (i = 0; i != v31; ++i)
            *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * i) = 0;
        }
        *(_QWORD *)(a1 + 416) = 0;
      }
      if ((_DWORD)a2 == 2)
      {
        v33 = *(_QWORD *)(a1 + 264);
        if (*(_QWORD *)(v33 + 72))
        {
          v34 = *(_QWORD **)(v33 + 56);
          while (v34)
          {
            v41 = v34;
            v34 = (_QWORD *)*v34;
            v42 = (std::__shared_weak_count *)v41[5];
            if (v42)
              std::__shared_weak_count::__release_weak(v42);
            v43 = (std::__shared_weak_count *)v41[3];
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v33 + 64) + 40))(*(_QWORD *)(v33 + 64), v41, 64);
          }
          *(_QWORD *)(v33 + 56) = 0;
          v35 = *(_QWORD *)(v33 + 40);
          if (v35)
          {
            for (j = 0; j != v35; ++j)
              *(_QWORD *)(*(_QWORD *)(v33 + 32) + 8 * j) = 0;
          }
          *(_QWORD *)(v33 + 72) = 0;
        }
        std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)v33);
        *(_QWORD *)(v33 + 100) = 0;
        *(_QWORD *)(v33 + 92) = 0;
      }
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 240) + 104))(*(_QWORD *)(a1 + 240), a2);
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 184);
    if (v46)
      gss::StylesheetManager<gss::PropertyID>::clearCaches(v46);
    *(_BYTE *)(a1 + 3045) = 1;
    *(_BYTE *)(a1 + 3047) = 1;
    v47 = atomic_load((unsigned __int8 *)(a1 + 3058));
    if ((v47 & 1) != 0)
    {
      v48 = *(_QWORD *)(a1 + 136);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 56);
        if (v49)
        {
          v56 = a1;
          v55 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v49 + 48))(v49, &v56, &v55);
        }
      }
    }
    *(_BYTE *)(a1 + 3053) = 0;
    v50 = (unint64_t *)&v54->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_19F2AFBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (result[2])
  {
    v1 = result;
    v2 = *result;
    v3 = (uint64_t *)result[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*result + 8);
    **(_QWORD **)(v2 + 8) = v4;
    result[2] = 0;
    if (v3 != result)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        v6 = (std::__shared_weak_count *)v3[5];
        if (!v6)
          goto LABEL_9;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          v9 = (std::__shared_weak_count *)v3[3];
          if (v9)
          {
LABEL_10:
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
        else
        {
LABEL_9:
          v9 = (std::__shared_weak_count *)v3[3];
          if (v9)
            goto LABEL_10;
        }
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, 48);
        v3 = v5;
      }
      while (v5 != v1);
    }
  }
  return result;
}

uint64_t md::CompositeLabeler::clearPreviouslySelectedLabelMarker(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabeler::clearScene(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::MapStandardLabeler::clearScene(_QWORD *a1, uint64_t **a2)
{
  int v2;
  uint64_t result;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;
  malloc_zone_t *zone;
  uint64_t v24;

  v2 = (int)a2;
  result = md::StandardLabeler::clearScene((uint64_t)a1, a2);
  if (v2 != 1)
  {
    if (v2 == 3)
    {
      v6 = a1[49];
      if (*(_QWORD *)(v6 + 128) != *(_QWORD *)(v6 + 136))
        md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)(v6 + 16) + 296), (uint64_t **)(v6 + 128));
      v5 = (uint64_t **)(v6 + 240);
      if (*(_QWORD *)(v6 + 240) != *(_QWORD *)(v6 + 248))
        md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)(v6 + 16) + 296), v5);
    }
    v7 = *(_QWORD *)(a1[50] + 32);
    if (v7)
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v7 + 32))(v7, v5);
    result = operator new();
    *(_QWORD *)result = 850045863;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    if ((v8 & 1) == 0)
    {
      v24 = result;
      result = v24;
      if (v19)
      {
        v20 = operator new();
        *(_QWORD *)(v20 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v20 + 24) = "VectorKitLabels";
        *(_OWORD *)(v20 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v20 = &off_1E42B5668;
        *(_QWORD *)(v20 + 8) = "VectorKitLabels";
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        *(_OWORD *)(v20 + 136) = 0u;
        *(_OWORD *)(v20 + 152) = 0u;
        *(_OWORD *)(v20 + 168) = 0u;
        *(_OWORD *)(v20 + 184) = 0u;
        *(_OWORD *)(v20 + 200) = 0u;
        *(_OWORD *)(v20 + 216) = 0u;
        *(_OWORD *)(v20 + 232) = 0u;
        *(_QWORD *)(v20 + 248) = 0;
        *(_OWORD *)(v20 + 56) = 0u;
        v21 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v20 + 56), 0);
        if ((_DWORD)v21)
          geo::read_write_lock::logFailure(v21, (uint64_t)"initialization", v22);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v20 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v20 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v20;
        result = v24;
      }
    }
    *(_QWORD *)(result + 88) = mdm::Allocator::instance(void)::alloc;
    v9 = a1[54];
    a1[54] = result;
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 64);
      if (v10)
      {
        v11 = *(_QWORD *)(v9 + 72);
        v12 = *(_QWORD *)(v9 + 64);
        if (v11 != v10)
        {
          do
          {
            v13 = *(std::__shared_weak_count **)(v11 - 8);
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            v11 -= 16;
          }
          while (v11 != v10);
          v12 = *(_QWORD *)(v9 + 64);
        }
        *(_QWORD *)(v9 + 72) = v10;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 88) + 40))(*(_QWORD *)(v9 + 88), v12, *(_QWORD *)(v9 + 80) - v12);
      }
      std::mutex::~mutex((std::mutex *)v9);
      result = MEMORY[0x1A1AF4E00]();
    }
  }
  v14 = a1[49];
  if (*(_QWORD *)(v14 + 408))
  {
    v15 = *(_QWORD **)(v14 + 392);
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 400) + 40))(*(_QWORD *)(v14 + 400));
        v15 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(v14 + 392) = 0;
    v17 = *(_QWORD *)(v14 + 376);
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*(_QWORD *)(v14 + 368) + 8 * i) = 0;
    }
    *(_QWORD *)(v14 + 408) = 0;
  }
  return result;
}

uint64_t md::LabelPool::pruneCustomFeatureLabels(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  _BOOL4 v16;
  _BOOL4 v17;
  unsigned __int8 v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v1 = *(uint64_t **)(this + 544);
  v2 = (uint64_t *)(this + 552);
  if (v1 != (uint64_t *)(this + 552))
  {
    v3 = this;
    do
    {
      v4 = (_BYTE *)v1[6];
      if (v4[820] || v4[1251] || (v5 = atomic_load(v4 + 1297)) != 0)
      {
LABEL_8:
        v6 = (uint64_t *)v1[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v1[2];
            v8 = *v7 == (_QWORD)v1;
            v1 = v7;
          }
          while (!v8);
        }
      }
      else
      {
        v9 = v1[6];
        v10 = *(uint64_t **)(v3 + 232);
        if (v10)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 72);
          v12 = *(_DWORD *)(v9 + 48);
          do
          {
            v13 = v10[4];
            v14 = *((_DWORD *)v10 + 10);
            v15 = v12 < v14;
            if (v11 != v13)
              v15 = v11 < v13;
            if (!v15)
            {
              v16 = v14 < v12;
              if (v11 == v13)
                v17 = v16;
              else
                v17 = v13 < v11;
              if (!v17)
                goto LABEL_8;
              ++v10;
            }
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        atomic_store(0, (unsigned __int8 *)(v9 + 1242));
        v18 = atomic_load((unsigned __int8 *)(v9 + 1242));
        if ((v18 & 1) == 0)
          *(_QWORD *)(v9 + 352) = 0;
        v19 = (uint64_t *)v1[1];
        v20 = v1;
        if (v19)
        {
          do
          {
            v7 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v20[2];
            v8 = *v7 == (_QWORD)v20;
            v20 = v7;
          }
          while (!v8);
        }
        if (*(uint64_t **)(v3 + 544) == v1)
          *(_QWORD *)(v3 + 544) = v7;
        --*(_QWORD *)(v3 + 568);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 552), v1);
        v21 = (std::__shared_weak_count *)v1[7];
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        this = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v3 + 560) + 40))(*(_QWORD *)(v3 + 560), v1, 64);
      }
      v1 = v7;
    }
    while (v7 != v2);
  }
  return this;
}

void md::TransitNodeFeaturePool::resetCache(md::TransitNodeFeaturePool *this)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  double v5;
  id v6;
  uint64_t v7;

  if (!*((_QWORD *)this + 16))
  {
    v2 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = v2;
  }
  v3 = operator new();
  v4 = *((id *)this + 35);
  v5 = *((float *)this + 66);
  v6 = v4;
  *(_QWORD *)v3 = &off_1E42B4D50;
  *(_QWORD *)(v3 + 8) = v6;
  *(double *)(v3 + 24) = v5;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 32) = 4;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v3 + 72;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = v3 + 96;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  v7 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v3;
  if (v7)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v7);

}

void md::StandardLabeler::clearPreviouslySelectedLabelMarker(md::StandardLabeler *this)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *((_QWORD *)this + 32);
  if (v1)
  {
    md::Label::setPreviouslySelected(*(md::Label **)(v1 + 288), *((LabelManager **)this + 3), 0);
    v3 = *((_QWORD *)this + 6);
    if (*(_QWORD *)(v3 + 720))
    {
      v4 = *(std::__shared_weak_count **)(v3 + 728);
      *(_OWORD *)(v3 + 720) = 0u;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(v3 + 760) = 0;
      *(_BYTE *)(v3 + 758) = 1;
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 33) = 0;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t md::StandardLabeler::clearScene(uint64_t a1, uint64_t **a2)
{
  uint64_t **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t i;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t j;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
    {
      md::LabelFeaturePool::flushRemovedTiles(*(md::LabelFeaturePool **)(a1 + 64));
      goto LABEL_45;
    }
    if ((_DWORD)a2 == 3)
    {
      md::LabelCustomFeatureSupport::updateStylesForFeatures(*(md::LabelCustomFeatureSupport **)(a1 + 32));
      v3 = *(uint64_t ***)(a1 + 40);
      a2 = v3 + 1;
      if (v3[1] != v3[2])
        md::LabelFeatureStyler::styleExternalFeatures((unsigned int *)(*v3)[37], a2);
    }
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD **)(v4 + 224);
    if (v5 != (_QWORD *)(v4 + 232))
    {
      do
      {
        v6 = v5[6];
        *(_BYTE *)(v6 + 1252) = 0;
        if (!*(_BYTE *)(v6 + 1251)
          || (*(_BYTE *)(v6 + 1251) = 0, md::Label::clearAnimation((md::Label *)v6), !*(_BYTE *)(v6 + 1251)))
        {
          *(_WORD *)(v6 + 1283) = 0;
          *(_BYTE *)(v6 + 1250) = 0;
          *(_BYTE *)(v6 + 1285) = 0;
          v7 = *(_QWORD *)(v6 + 264);
          *(_QWORD *)(v6 + 264) = 0;
          if (v7)
            (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v7 + 8))(v7, a2);
          v8 = *(_QWORD *)(v6 + 272);
          *(_QWORD *)(v6 + 272) = 0;
          if (v8)
            (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v8 + 8))(v8, a2);
          v9 = *(_QWORD *)(v6 + 304);
          *(_QWORD *)(v6 + 304) = 0;
          if (v9)
            (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v9 + 8))(v9, a2);
          if (*(_QWORD *)(v6 + 288))
          {
            *(_QWORD *)(v6 + 288) = 0;
            *(_BYTE *)(v6 + 1247) = 1;
          }
        }
        v10 = (_QWORD *)v5[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v5[2];
            v12 = *v11 == (_QWORD)v5;
            v5 = v11;
          }
          while (!v12);
        }
        v5 = v11;
      }
      while (v11 != (_QWORD *)(v4 + 232));
    }
    *(_BYTE *)(v4 + 758) = 1;
  }
  else
  {
    md::LabelPool::clear(*(int64x2_t **)(a1 + 48));
  }
  v13 = *(_QWORD *)(a1 + 72);
  for (i = *(_QWORD *)(a1 + 80); i != v13; i -= 16)
  {
    v15 = *(std::__shared_weak_count **)(i - 8);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t **))v15->__on_zero_shared)(v15, a2);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  *(_QWORD *)(a1 + 80) = v13;
  v18 = *(_QWORD *)(a1 + 104);
  for (j = *(_QWORD *)(a1 + 112); j != v18; j -= 16)
  {
    v20 = *(std::__shared_weak_count **)(j - 8);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t **))v20->__on_zero_shared)(v20, a2);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  *(_QWORD *)(a1 + 112) = v18;
LABEL_45:
  v23 = *(_QWORD *)(a1 + 48);
  md::LabelPool::pruneCachedLabels(v23);
  return md::LabelPool::pruneCustomFeatureLabels(v23);
}

uint64_t md::LabelPool::pruneCachedLabels(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;

  v1 = *(uint64_t **)(this + 192);
  v2 = (uint64_t *)(this + 200);
  if (v1 != (uint64_t *)(this + 200))
  {
    v3 = this;
    do
    {
      v4 = v1[7];
      if (!v4 || *(_QWORD *)(v4 + 8) == -1)
      {
        v8 = (uint64_t *)v1[1];
        v9 = v1;
        if (v8)
        {
          do
          {
            v6 = v8;
            v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v6 = (uint64_t *)v9[2];
            v7 = *v6 == (_QWORD)v9;
            v9 = v6;
          }
          while (!v7);
        }
        if (*(uint64_t **)(v3 + 192) == v1)
          *(_QWORD *)(v3 + 192) = v6;
        --*(_QWORD *)(v3 + 216);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 200), v1);
        v10 = (std::__shared_weak_count *)v1[7];
        if (v10)
          std::__shared_weak_count::__release_weak(v10);
        this = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v3 + 208) + 40))(*(_QWORD *)(v3 + 208), v1, 64);
      }
      else
      {
        v5 = (uint64_t *)v1[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (uint64_t *)v1[2];
            v7 = *v6 == (_QWORD)v1;
            v1 = v6;
          }
          while (!v7);
        }
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
  return this;
}

void md::MapNavLabeler::clearScene(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t j;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  if (a2 == 3)
  {
    md::RouteLineSupport::restyleFeatures(*(md::RouteLineSupport **)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 56), "clearSceneIsMemoryWarning:", 0);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 56), "clearSceneIsMemoryWarning:", a2 == 1);
    if (a2 == 1)
      goto LABEL_5;
  }
  md::LabelNavEtaLabeler::clearEtaFeatures(*(md::LabelNavEtaLabeler **)(a1 + 688));
LABEL_5:
  v4 = *(_QWORD *)(a1 + 592);
  v5 = *(_QWORD *)(a1 + 584);
  while (v4 != v5)
  {
    v6 = *(std::__shared_weak_count **)(v4 - 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 -= 16;
  }
  *(_QWORD *)(a1 + 592) = v5;
  v9 = *(_QWORD *)(a1 + 624);
  v10 = *(_QWORD *)(a1 + 616);
  while (v9 != v10)
  {
    v11 = *(std::__shared_weak_count **)(v9 - 8);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 -= 16;
  }
  *(_QWORD *)(a1 + 624) = v10;
  v14 = *(void (****)(_QWORD))(a1 + 656);
  v15 = *(void (****)(_QWORD))(a1 + 648);
  if (v14 != v15)
  {
    v16 = v14 - 3;
    v17 = v14 - 3;
    do
    {
      v18 = *v17;
      v17 -= 3;
      (*v18)(v16);
      v19 = v16 == v15;
      v16 = v17;
    }
    while (!v19);
  }
  *(_QWORD *)(a1 + 656) = v15;
  v20 = *(_QWORD **)(a1 + 696);
  v21 = (_QWORD *)*v20;
  if (*(_QWORD *)(*v20 + 32))
  {
    v22 = (_QWORD *)v21[3];
    if (v22)
    {
      do
      {
        v23 = (_QWORD *)*v22;
        operator delete(v22);
        v22 = v23;
      }
      while (v23);
    }
    v21[3] = 0;
    v24 = v21[2];
    if (v24)
    {
      for (i = 0; i != v24; ++i)
        *(_QWORD *)(v21[1] + 8 * i) = 0;
    }
    v21[4] = 0;
  }
  if (v21[8])
  {
    v26 = v21[6];
    v27 = (uint64_t *)v21[7];
    v28 = *v27;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v26 + 8);
    **(_QWORD **)(v26 + 8) = v28;
    v21[8] = 0;
    if (v27 != v21 + 6)
    {
      do
      {
        v29 = (uint64_t *)v27[1];
        v27[3] = (uint64_t)&off_1E42B4D30;

        operator delete(v27);
        v27 = v29;
      }
      while (v29 != v21 + 6);
    }
  }
  v30 = (_QWORD *)v20[1];
  if (v30[4])
  {
    v31 = (_QWORD *)v30[3];
    if (v31)
    {
      do
      {
        v32 = (_QWORD *)*v31;
        operator delete(v31);
        v31 = v32;
      }
      while (v32);
    }
    v30[3] = 0;
    v33 = v30[2];
    if (v33)
    {
      for (j = 0; j != v33; ++j)
        *(_QWORD *)(v30[1] + 8 * j) = 0;
    }
    v30[4] = 0;
  }
  if (v30[8])
  {
    v35 = v30 + 6;
    v36 = v30[6];
    v37 = (uint64_t *)v30[7];
    v38 = *v37;
    *(_QWORD *)(v38 + 8) = *(_QWORD *)(v36 + 8);
    **(_QWORD **)(v36 + 8) = v38;
    v30[8] = 0;
    if (v37 != v30 + 6)
    {
      do
      {
        v39 = (uint64_t *)v37[1];
        v40 = (std::__shared_weak_count *)v37[4];
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        operator delete(v37);
        v37 = v39;
      }
      while (v39 != v35);
    }
  }
}

void md::MapNavLabeler::synchStagingWithDisplay(md::MapNavLabeler *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id *v55;
  _QWORD *v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  void (***v65)(_QWORD);
  uint64_t v66;
  void (***v67)(_QWORD);
  void (***v68)(_QWORD);
  void (**v69)(_QWORD);
  _QWORD *v70;
  id *v71;
  id *v72;
  id *v73;
  id v74;
  id *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void **v79;
  uint64_t v80;
  id v81;
  void *v82;
  void (***v83)(_QWORD);
  void (***v84)(_QWORD);
  void (**v85)(_QWORD);
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;

  v2 = *((_QWORD *)this + 78);
  v3 = *((_QWORD *)this + 77);
  while (v2 != v3)
  {
    v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v2 -= 16;
  }
  *((_QWORD *)this + 78) = v3;
  v7 = (void (***)(_QWORD))*((_QWORD *)this + 82);
  v8 = (void (***)(_QWORD))*((_QWORD *)this + 81);
  if (v7 != v8)
  {
    v9 = v7 - 3;
    v10 = v7 - 3;
    do
    {
      v11 = *v10;
      v10 -= 3;
      (*v11)(v9);
      v12 = v9 == v8;
      v9 = v10;
    }
    while (!v12);
  }
  *((_QWORD *)this + 82) = v8;
  if (*((_QWORD *)this + 13))
  {
    v13 = *((_QWORD *)this + 86);
    if (*(_QWORD *)(v13 + 24))
    {
      v14 = *(uint64_t **)(v13 + 184);
      v15 = *(uint64_t **)(v13 + 192);
      if (v14 != v15)
      {
        do
        {
          v17 = *v14;
          v16 = (std::__shared_weak_count *)v14[1];
          *(_QWORD *)&v94 = *v14;
          *((_QWORD *)&v94 + 1) = v16;
          if (v16)
          {
            v18 = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          *(_DWORD *)(v17 + 324) = *(_DWORD *)(v17 + 296);
          *(_QWORD *)(v17 + 328) = *(_QWORD *)(v17 + 300);
          if (*(_BYTE *)(v17 + 280))
          {
            *(_DWORD *)(v17 + 268) = *(_DWORD *)(v17 + 276);
            *(_BYTE *)(v17 + 280) = 0;
          }
          v20 = *(_QWORD *)(v17 + 288);
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 968))(v20);
          v21 = (_QWORD *)*((_QWORD *)this + 78);
          if ((unint64_t)v21 >= *((_QWORD *)this + 79))
          {
            v24 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)this + 616, &v94);
          }
          else
          {
            if (v21)
            {
              *v21 = v17;
              v21[1] = v16;
              if (v16)
              {
                v22 = (unint64_t *)&v16->__shared_owners_;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
            }
            v24 = v21 + 2;
          }
          *((_QWORD *)this + 78) = v24;
          if (v16)
          {
            v25 = (unint64_t *)&v16->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v14 += 2;
        }
        while (v14 != v15);
        v13 = *((_QWORD *)this + 86);
      }
      *((_BYTE *)this + 680) = *(_BYTE *)(v13 + 252);
      v94 = 0uLL;
      v27 = *(_QWORD *)(v13 + 176);
      v95 = 0;
      v96 = v27;
      v28 = *(_QWORD *)(v13 + 152);
      v29 = *(_QWORD *)(v13 + 160);
      if (v29 == v28)
      {
        v32 = 0;
        v36 = 0;
        v30 = 0;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v31 = 0;
        v32 = v30 + 8 * ((v29 - v28) >> 3);
        *(_QWORD *)&v94 = v30;
        v95 = v32;
        do
        {
          if (v30 + v31)
          {
            v33 = (_QWORD *)(v30 + v31);
            *v33 = &off_1E42B4E10;
            v33[1] = 0;
            v34 = *(id *)(v28 + v31 + 8);
            v35 = *(void **)(v30 + v31 + 8);
            v33[1] = v34;

          }
          v31 += 24;
        }
        while (v28 + v31 != v29);
        v36 = v30 + v31;
        *((_QWORD *)&v94 + 1) = v30 + v31;
      }
      if (v36 - v30 < 1)
        goto LABEL_96;
      v37 = *((_QWORD *)this + 82);
      v38 = (v36 - v30) / 24;
      v39 = *((_QWORD *)this + 81);
      v40 = (uint64_t)(v37 - v39) / 24;
      v41 = v39 + 24 * v40;
      v42 = *((_QWORD *)this + 83);
      v93 = v32;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v37) >> 3)) >= v38)
      {
        v87 = *((_QWORD *)this + 81);
        v89 = (uint64_t)(v37 - v39) / 24;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v41) >> 3)) >= v38)
        {
          v47 = v30 + 24 * v38;
          v49 = (id *)*((_QWORD *)this + 82);
        }
        else
        {
          v47 = v30 + 8 * ((uint64_t)(v37 - v41) >> 3);
          if (v47 == v36)
          {
            v49 = (id *)*((_QWORD *)this + 82);
          }
          else
          {
            v92 = v27;
            v48 = v30 + 8 * ((uint64_t)(v37 - v41) >> 3);
            v49 = (id *)*((_QWORD *)this + 82);
            do
            {
              if (v49)
              {
                *v49 = &off_1E42B4E10;
                v49[1] = 0;
                v50 = *(id *)(v48 + 8);
                v51 = v49[1];
                v49[1] = v50;

              }
              v48 += 24;
              v49 += 3;
            }
            while (v48 != v36);
            v27 = v92;
          }
          *((_QWORD *)this + 82) = v49;
          if ((uint64_t)(v37 - v41) < 1)
            goto LABEL_96;
        }
        v70 = (_QWORD *)(v41 + 24 * v38);
        v71 = &v49[-3 * v38];
        v72 = v49;
        if ((unint64_t)v71 < v37)
        {
          v86 = (_QWORD *)(v41 + 24 * v38);
          v73 = v49 + 1;
          do
          {
            if (v73 != (id *)8)
            {
              *(v73 - 1) = &off_1E42B4E10;
              *v73 = 0;
              objc_storeStrong(v73, v71[1]);
              v74 = v71[1];
              v71[1] = 0;

            }
            v71 += 3;
            v73 += 3;
          }
          while ((unint64_t)v71 < v37);
          v72 = v73 - 1;
          v70 = v86;
        }
        *((_QWORD *)this + 82) = v72;
        v32 = v93;
        if (v49 != v70)
        {
          v75 = v49 - 2;
          v76 = 24 * v89 + v87 - 16;
          v77 = 8 * (v49 - (id *)v70);
          do
          {
            objc_storeStrong(v75, *(id *)(v76 + v77));
            v78 = *(void **)(v76 + v77);
            *(_QWORD *)(v76 + v77) = 0;

            v75 -= 3;
            v77 -= 24;
          }
          while (v77);
        }
        if (v47 != v30)
        {
          v79 = (void **)(24 * v89 + v87 + 8);
          v80 = v30;
          do
          {
            v81 = *(id *)(v80 + 8);
            v82 = *v79;
            *v79 = v81;
            v79 += 3;

            v80 += 24;
          }
          while (v80 != v47);
        }
      }
      else
      {
        v43 = v40 + v38;
        if ((unint64_t)(v40 + v38) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v44 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v39) >> 3);
        if (2 * v44 > v43)
          v43 = 2 * v44;
        if (v44 >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v43;
        v91 = v27;
        if (v45)
          v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 84) + 16))(*((_QWORD *)this + 84), 24 * v45, 8);
        else
          v46 = 0;
        v88 = v46;
        v52 = v46 + 24 * v40;
        v53 = 24 * v38;
        v54 = (_QWORD *)(v52 + 24 * v38);
        v55 = (id *)(v30 + 8);
        v56 = (_QWORD *)v52;
        do
        {
          if (v56)
          {
            *v56 = &off_1E42B4E10;
            v56[1] = 0;
            v57 = *v55;
            v58 = (void *)v56[1];
            v56[1] = v57;

          }
          v56 += 3;
          v55 += 3;
          v53 -= 24;
        }
        while (v53);
        v90 = 24 * v45;
        v59 = *((_QWORD *)this + 81);
        if (v59 != v41)
        {
          v60 = v41;
          do
          {
            *(_QWORD *)(v52 - 24) = &off_1E42B4E10;
            v52 -= 24;
            *(_QWORD *)(v52 + 8) = 0;
            objc_storeStrong((id *)(v52 + 8), *(id *)(v60 - 16));
            v61 = *(void **)(v60 - 16);
            *(_QWORD *)(v60 - 16) = 0;

            v60 -= 24;
          }
          while (v60 != v59);
        }
        v62 = *((_QWORD *)this + 82);
        if (v62 != v41)
        {
          v63 = v54;
          do
          {
            *v63 = &off_1E42B4E10;
            v63 += 3;
            v54[1] = 0;
            objc_storeStrong((id *)v54 + 1, *(id *)(v41 + 8));
            v64 = *(void **)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;

            v41 += 24;
            v54 = v63;
          }
          while (v41 != v62);
          v41 = *((_QWORD *)this + 82);
          v54 = v63;
        }
        v65 = (void (***)(_QWORD))*((_QWORD *)this + 81);
        *((_QWORD *)this + 81) = v52;
        *((_QWORD *)this + 82) = v54;
        v66 = *((_QWORD *)this + 83);
        *((_QWORD *)this + 83) = v88 + v90;
        if ((void (***)(_QWORD))v41 != v65)
        {
          v67 = (void (***)(_QWORD))(v41 - 24);
          v68 = (void (***)(_QWORD))(v41 - 24);
          do
          {
            v69 = *v68;
            v68 -= 3;
            (*v69)(v67);
            v12 = v67 == v65;
            v67 = v68;
          }
          while (!v12);
        }
        v27 = v91;
        v32 = v93;
        if (v65)
          (*(void (**)(_QWORD, void (***)(_QWORD), uint64_t))(**((_QWORD **)this + 84) + 40))(*((_QWORD *)this + 84), v65, v66 - (_QWORD)v65);
      }
LABEL_96:
      if (v30)
      {
        if (v36 != v30)
        {
          v83 = (void (***)(_QWORD))(v36 - 24);
          v84 = (void (***)(_QWORD))(v36 - 24);
          do
          {
            v85 = *v84;
            v84 -= 3;
            (*v85)(v83);
            v12 = v83 == (void (***)(_QWORD))v30;
            v83 = v84;
          }
          while (!v12);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 40))(v27, v30, v32 - v30);
      }
    }
  }
}

void sub_19F2B1308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19F2B131C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::MapNavLabeler::layoutForDisplay(md::MapNavLabeler *this, const md::LayoutContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t **v15;
  float32x2_t **v16;
  float32x2_t *v17;
  unsigned int v18;
  float v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x2_t **v33;
  float32x2_t **v34;
  float32x2_t **v35;
  float32x2_t *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _OWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float32x2_t **v55;
  float32x2_t **v56;
  float32x2_t **v57;
  float32x2_t **v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __n128 v76;
  _QWORD *v77;
  _QWORD *i;
  _DWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  float *v87;
  unint64_t v88;
  float *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  float64x2_t *v102;
  double *v103;
  float v104;
  float v105;
  __int128 v106;
  float32x2_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float *v112;
  unint64_t v113;
  float *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  float *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  __int128 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *j;
  __int128 v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  uint64_t v184;
  unsigned __int8 v185;
  float v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  float *v190;
  float *v191;
  unint64_t v192;
  uint64_t v193;
  uint8_t buf[8];
  uint64_t v195;
  md::MapNavLabeler *v196;
  float64x2_t *v197;
  char *v198;
  _DWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD v201[3];
  _QWORD *v202;
  _QWORD v203[3];
  _QWORD *v204;
  _QWORD v205[3];
  _QWORD *v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 74);
  v5 = *((_QWORD *)this + 73);
  while (v4 != v5)
  {
    v6 = *(std::__shared_weak_count **)(v4 - 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 -= 16;
  }
  *((_QWORD *)this + 74) = v5;
  if (((*(uint64_t (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this) & 1) == 0
    && (!*((_QWORD *)this + 13) || !*(_QWORD *)(*((_QWORD *)this + 86) + 24))
    && (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 336) + 163) << 16 != 393216
    && !(*(unsigned int (**)(md::MapNavLabeler *))(*(_QWORD *)this + 376))(this))
  {
    return;
  }
  v204 = v203;
  v201[0] = &off_1E42CB138;
  v202 = v201;
  v203[0] = &off_1E42CB0F0;
  v206 = v205;
  v205[0] = &off_1E42CB138;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v9 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsNavLayout", (const char *)&unk_1A0189141, buf, 2u);
  }

  v10 = v202;
  if (v202 == v201)
  {
    v11 = 4;
    v10 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_23;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_23:
  v12 = v204;
  if (v204 == v203)
  {
    v13 = 4;
    v12 = v203;
  }
  else
  {
    if (!v204)
      goto LABEL_28;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_28:
  md::LabelNavLayoutContext::grabStateFromContext((md::MapNavLabeler *)((char *)this + 360), *((md::LabelManager **)this + 3), (const md::LabelLayoutContext *)(*((_QWORD *)this + 3) + 440), a2);
  v14 = *((_QWORD *)this + 3);
  *(_QWORD *)buf = &off_1E428BBF8;
  v195 = v14;
  v196 = this;
  v197 = (float64x2_t *)(v14 + 440);
  v198 = (char *)this + 360;
  if (*((_QWORD *)this + 13) && *(_QWORD *)(*((_QWORD *)this + 86) + 24))
  {
    v15 = (float32x2_t **)*((_QWORD *)this + 77);
    v16 = (float32x2_t **)*((_QWORD *)this + 78);
    if (v15 != v16)
    {
      while (1)
      {
        v17 = *v15;
        if ((*v15)[40].i8[7])
        {
          v18 = v17[40].u8[5];
          if (v17[40].i8[5])
            v18 = v17[40].i8[6] != 0;
          v17[33].i8[0] = v18 ^ 1;
          v17[33].i8[1] = v17[33].f32[1] != (float)v18;
          md::NavLabel::layoutForDisplayWithNavContext(v17, (float64x2_t **)buf);
          goto LABEL_33;
        }
        if (v17[33].i8[0])
        {
          if (v17[33].f32[1] > 0.0)
            goto LABEL_41;
        }
        else
        {
          v17[33].i8[0] = 1;
          v19 = v17[33].f32[1];
          v17[33].i8[1] = v19 != 0.0;
          if (v19 > 0.0)
LABEL_41:
            md::NavLabel::layoutForDisplayWithNavContext(v17, (float64x2_t **)buf);
        }
LABEL_33:
        v15 += 2;
        if (v15 == v16)
        {
          v20 = (char *)*((_QWORD *)this + 77);
          v15 = (float32x2_t **)*((_QWORD *)this + 78);
          goto LABEL_44;
        }
      }
    }
    v20 = (char *)*((_QWORD *)this + 77);
LABEL_44:
    if ((char *)v15 - v20 >= 1)
    {
      v21 = *((_QWORD *)this + 74);
      v22 = ((char *)v15 - v20) >> 4;
      v23 = *((_QWORD *)this + 73);
      v24 = v21 - v23;
      v25 = v23 + ((v21 - v23) & 0xFFFFFFFFFFFFFFF0);
      v26 = *((_QWORD *)this + 75);
      if (v22 > (uint64_t)(v26 - v21) >> 4)
      {
        v27 = v24 >> 4;
        v28 = (v24 >> 4) + v22;
        if (v28 >> 60)
          abort();
        v29 = v26 - v23;
        if (v29 >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
          v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 16))(*((_QWORD *)this + 76), 16 * v30, 8);
        else
          v31 = 0;
        v39 = (_QWORD *)(v31 + 16 * v27);
        v40 = &v39[2 * v22];
        v41 = v39;
        do
        {
          if (v41)
          {
            *v41 = *(_QWORD *)v20;
            v42 = *((_QWORD *)v20 + 1);
            v41[1] = v42;
            if (v42)
            {
              v43 = (unint64_t *)(v42 + 8);
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
          }
          v41 += 2;
          v20 += 16;
        }
        while (v41 != (_QWORD *)v40);
        v45 = (_QWORD *)*((_QWORD *)this + 73);
        if (v45 != (_QWORD *)v25)
        {
          v46 = (_QWORD *)v25;
          do
          {
            v47 = *((_OWORD *)v46 - 1);
            v46 -= 2;
            *((_OWORD *)v39 - 1) = v47;
            v39 -= 2;
            *v46 = 0;
            v46[1] = 0;
          }
          while (v46 != v45);
        }
        v48 = v31 + 16 * v30;
        v49 = *((_QWORD *)this + 74);
        if (v49 != v25)
        {
          do
          {
            *v40++ = *(_OWORD *)v25;
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            v25 += 16;
          }
          while (v25 != v49);
          v25 = *((_QWORD *)this + 74);
        }
        v50 = *((_QWORD *)this + 73);
        *((_QWORD *)this + 73) = v39;
        *((_QWORD *)this + 74) = v40;
        v51 = *((_QWORD *)this + 75);
        *((_QWORD *)this + 75) = v48;
        while (v25 != v50)
        {
          v52 = *(std::__shared_weak_count **)(v25 - 8);
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v25 -= 16;
        }
        if (v50)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 40))(*((_QWORD *)this + 76), v50, v51 - v50);
        goto LABEL_97;
      }
      v32 = (uint64_t)(v21 - v25) >> 4;
      if (v32 >= v22)
      {
        v33 = (float32x2_t **)&v20[16 * v22];
        v35 = (float32x2_t **)*((_QWORD *)this + 74);
LABEL_90:
        v55 = (float32x2_t **)(v25 + 16 * v22);
        v56 = &v35[-2 * v22];
        v57 = v35;
        if ((unint64_t)v56 < v21)
        {
          v58 = v56;
          v57 = v35;
          do
          {
            if (v57)
            {
              *(_OWORD *)v57 = *(_OWORD *)v58;
              *v58 = 0;
              v58[1] = 0;
            }
            v58 += 2;
            v57 += 2;
          }
          while ((unint64_t)v58 < v21);
        }
        *((_QWORD *)this + 74) = v57;
        if (v35 != v55)
        {
          do
          {
            v65 = *((_OWORD *)v56 - 1);
            v56 -= 2;
            *v56 = 0;
            v56[1] = 0;
            v66 = (std::__shared_weak_count *)*(v35 - 1);
            *((_OWORD *)v35 - 1) = v65;
            v35 -= 2;
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
          }
          while (v56 != (float32x2_t **)v25);
        }
        for (; v20 != (char *)v33; v25 += 16)
        {
          v70 = *(_QWORD *)v20;
          v69 = *((_QWORD *)v20 + 1);
          if (v69)
          {
            v71 = (unint64_t *)(v69 + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v73 = *(std::__shared_weak_count **)(v25 + 8);
          *(_QWORD *)v25 = v70;
          *(_QWORD *)(v25 + 8) = v69;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v20 += 16;
        }
        goto LABEL_97;
      }
      v33 = (float32x2_t **)&v20[16 * v32];
      if (v33 == v15)
      {
        v35 = (float32x2_t **)*((_QWORD *)this + 74);
      }
      else
      {
        v34 = (float32x2_t **)&v20[16 * v32];
        v35 = (float32x2_t **)*((_QWORD *)this + 74);
        do
        {
          if (v35)
          {
            *v35 = *v34;
            v36 = v34[1];
            v35[1] = v36;
            if (v36)
            {
              v37 = (unint64_t *)&v36[1];
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
          }
          v34 += 2;
          v35 += 2;
        }
        while (v34 != v15);
      }
      *((_QWORD *)this + 74) = v35;
      if ((uint64_t)(v21 - v25) >= 1)
        goto LABEL_90;
    }
  }
LABEL_97:
  if (((*(uint64_t (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this) & 1) == 0
    && (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 336) + 163) << 16 != 393216
    && !(*(unsigned int (**)(md::MapNavLabeler *))(*(_QWORD *)this + 376))(this))
  {
    goto LABEL_226;
  }
  v190 = 0;
  v191 = 0;
  v192 = 0;
  {
    v189 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v189, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v60 = 0xAAAAAAAAAAAAAAALL;
  v193 = mdm::Allocator::instance(void)::alloc;
  v61 = *((_QWORD *)this + 98) - *((_QWORD *)this + 97);
  v62 = 0xAAAAAAAAAAAAAAABLL * (v61 >> 3);
  v63 = v62 + 1;
  if (v62 == -1)
  {
    v64 = 0;
  }
  else
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, v61 + 24, 4);
    v190 = (float *)v64;
    v191 = (float *)v64;
    v192 = v64 + 24 * v63;
  }
  v76.n128_f32[0] = std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::AvoidanceRectWithPriority const*>,std::__wrap_iter<md::AvoidanceRectWithPriority const*>>((uint64_t *)&v190, v64, *((__int128 **)this + 97), *((__int128 **)this + 98), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 98) - *((_QWORD *)this + 97)) >> 3));
  v77 = (_QWORD *)*((_QWORD *)this + 77);
  for (i = (_QWORD *)*((_QWORD *)this + 78); v77 != i; v77 += 2)
  {
    v79 = (_DWORD *)*v77;
    v80 = (std::__shared_weak_count *)v77[1];
    v199 = (_DWORD *)*v77;
    v200 = v80;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v83 = v79[84];
    v84 = v79[85];
    v85 = v79[86];
    v86 = v79[87];
    v87 = v191;
    v88 = v192;
    if ((unint64_t)v191 >= v192)
    {
      v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3);
      v91 = v90 + 1;
      if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v192 - (_QWORD)v190) >> 3) > v91)
        v91 = 0x5555555555555556 * ((uint64_t)(v192 - (_QWORD)v190) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192 - (_QWORD)v190) >> 3) >= 0x555555555555555)
        v92 = 0xAAAAAAAAAAAAAAALL;
      else
        v92 = v91;
      if (v92)
      {
        v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v193 + 16))(v193, 24 * v92, 4, v76);
        v94 = (_DWORD *)(v93 + 24 * v90);
        v95 = v93 + 24 * v92;
        if (v93)
        {
          *v94 = v83;
          v94[1] = v84;
          v94[2] = v85;
          v94[3] = v86;
          v96 = v93 + 24 * v90;
          *(_DWORD *)(v96 + 16) = 1065353216;
          *(_BYTE *)(v96 + 20) = 0;
        }
      }
      else
      {
        v95 = 0;
        v94 = (_DWORD *)(8 * (((char *)v191 - (char *)v190) >> 3));
      }
      v98 = (uint64_t)v190;
      v97 = (uint64_t)v191;
      v99 = (uint64_t)v94;
      if (v191 != v190)
      {
        do
        {
          v76 = *(__n128 *)(v97 - 24);
          *(_QWORD *)(v99 - 8) = *(_QWORD *)(v97 - 8);
          *(__n128 *)(v99 - 24) = v76;
          v99 -= 24;
          v97 -= 24;
        }
        while (v97 != v98);
        v97 = (uint64_t)v190;
      }
      v89 = (float *)(v94 + 6);
      v190 = (float *)v99;
      v192 = v95;
      if (v97)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v193 + 40))(v193, v97, v88 - v97);
    }
    else
    {
      if (v191)
      {
        *(_DWORD *)v191 = v83;
        *((_DWORD *)v87 + 1) = v84;
        *((_DWORD *)v87 + 2) = v85;
        *((_DWORD *)v87 + 3) = v86;
        v87[4] = 1.0;
        *((_BYTE *)v87 + 20) = 0;
      }
      v89 = v87 + 6;
    }
    v191 = v89;
    if (v80)
    {
      v100 = (unint64_t *)&v80->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v80->__on_zero_shared)(v80, v76);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  v102 = v197;
  v103 = (double *)v198;
  v104 = *((float *)v198 + 30);
  v105 = *(float *)(v195 + 176);
  if (!md::LabelLayoutContext::isDistanceClipped((uint64_t)v197, (uint64_t)(v198 + 96)))
  {
    *(float *)&v106 = v105 * v104;
    if ((float)(v105 * v104) != 0.0)
    {
      v107 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v102[60], v102[54], v103[12]), v102[56], v103[13]), v102[58], v103[14]), 1.0/ (v102[61].f64[1] + v102[55].f64[1] * v103[12] + v102[57].f64[1] * v103[13] + v102[59].f64[1] * v103[14])));
      *(float *)&v106 = *(float *)&v106 * 0.5;
      v108 = v107.f32[0] - *(float *)&v106;
      v109 = v107.f32[1] - *(float *)&v106;
      v110 = v107.f32[0] + *(float *)&v106;
      v111 = v107.f32[1] + *(float *)&v106;
      v112 = v191;
      v113 = v192;
      if ((unint64_t)v191 >= v192)
      {
        v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3);
        v116 = v115 + 1;
        if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v192 - (_QWORD)v190) >> 3) > v116)
          v116 = 0x5555555555555556 * ((uint64_t)(v192 - (_QWORD)v190) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192 - (_QWORD)v190) >> 3) < 0x555555555555555)
          v60 = v116;
        if (v60)
        {
          v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v193 + 16))(v193, 24 * v60, 4);
          v118 = (float *)(v117 + 24 * v115);
          v119 = v117 + 24 * v60;
          if (v117)
          {
            *v118 = v108;
            v118[1] = v109;
            v118[2] = v110;
            v118[3] = v111;
            v120 = v117 + 24 * v115;
            *(_DWORD *)(v120 + 16) = 1065353216;
            *(_BYTE *)(v120 + 20) = 0;
          }
        }
        else
        {
          v119 = 0;
          v118 = (float *)(8 * (((char *)v191 - (char *)v190) >> 3));
        }
        v114 = v118 + 6;
        v122 = (uint64_t)v190;
        v121 = (uint64_t)v191;
        if (v191 != v190)
        {
          do
          {
            v106 = *(_OWORD *)(v121 - 24);
            *((_QWORD *)v118 - 1) = *(_QWORD *)(v121 - 8);
            *(_OWORD *)(v118 - 6) = v106;
            v118 -= 6;
            v121 -= 24;
          }
          while (v121 != v122);
          v121 = (uint64_t)v190;
        }
        v190 = v118;
        v192 = v119;
        if (v121)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v193 + 40))(v193, v121, v113 - v121);
      }
      else
      {
        if (v191)
        {
          *v191 = v108;
          v112[1] = v109;
          v112[2] = v110;
          v112[3] = v111;
          v112[4] = 1.0;
          *((_BYTE *)v112 + 20) = 0;
        }
        v114 = v112 + 6;
      }
      v191 = v114;
    }
  }
  objc_msgSend(*((id *)this + 7), "layoutWithNavContext:avoidanceRects:", buf, &v190, *(double *)&v106);
  v123 = objc_msgSend(*((id *)this + 7), "visibleSigns");
  v125 = *(uint64_t **)v123;
  v124 = *(uint64_t **)(v123 + 8);
  v126 = (uint64_t)v124 - *(_QWORD *)v123;
  if (v126 >= 1)
  {
    v127 = *((_QWORD *)this + 74);
    v128 = v126 >> 4;
    v129 = *((_QWORD *)this + 73);
    v130 = v127 - v129;
    v131 = (uint64_t *)(v129 + ((v127 - v129) & 0xFFFFFFFFFFFFFFF0));
    v132 = *((_QWORD *)this + 75);
    if (v128 <= (uint64_t)(v132 - v127) >> 4)
    {
      v139 = (uint64_t)(v127 - (_QWORD)v131) >> 4;
      if (v139 >= v128)
      {
        v140 = &v125[2 * v128];
        v142 = (uint64_t *)*((_QWORD *)this + 74);
      }
      else
      {
        v140 = &v125[2 * v139];
        if (v140 == v124)
        {
          v142 = (uint64_t *)*((_QWORD *)this + 74);
        }
        else
        {
          v141 = &v125[2 * v139];
          v142 = (uint64_t *)*((_QWORD *)this + 74);
          do
          {
            if (v142)
            {
              *v142 = *v141;
              v143 = v141[1];
              v142[1] = v143;
              if (v143)
              {
                v144 = (unint64_t *)(v143 + 8);
                do
                  v145 = __ldxr(v144);
                while (__stxr(v145 + 1, v144));
              }
            }
            v141 += 2;
            v142 += 2;
          }
          while (v141 != v124);
        }
        *((_QWORD *)this + 74) = v142;
        if ((uint64_t)(v127 - (_QWORD)v131) < 1)
          goto LABEL_224;
      }
      v162 = &v142[-2 * v128];
      v163 = v142;
      if ((unint64_t)v162 < v127)
      {
        v164 = &v142[-2 * v128];
        v163 = v142;
        do
        {
          if (v163)
          {
            *(_OWORD *)v163 = *(_OWORD *)v164;
            *v164 = 0;
            v164[1] = 0;
          }
          v164 += 2;
          v163 += 2;
        }
        while ((unint64_t)v164 < v127);
      }
      *((_QWORD *)this + 74) = v163;
      if (v142 != &v131[2 * v128])
      {
        do
        {
          v167 = *((_OWORD *)v162 - 1);
          v162 -= 2;
          *v162 = 0;
          v162[1] = 0;
          v168 = (std::__shared_weak_count *)*(v142 - 1);
          *((_OWORD *)v142 - 1) = v167;
          v142 -= 2;
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
        }
        while (v162 != v131);
      }
      for (; v125 != v140; v131 += 2)
      {
        v172 = *v125;
        v171 = v125[1];
        if (v171)
        {
          v173 = (unint64_t *)(v171 + 8);
          do
            v174 = __ldxr(v173);
          while (__stxr(v174 + 1, v173));
        }
        v175 = (std::__shared_weak_count *)v131[1];
        *v131 = v172;
        v131[1] = v171;
        if (v175)
        {
          v176 = (unint64_t *)&v175->__shared_owners_;
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        v125 += 2;
      }
    }
    else
    {
      v133 = v130 >> 4;
      v134 = (v130 >> 4) + v128;
      if (v134 >> 60)
        abort();
      v135 = v132 - v129;
      v136 = (v132 - v129) >> 3;
      if (v136 > v134)
        v134 = v136;
      if (v135 >= 0x7FFFFFFFFFFFFFF0)
        v137 = 0xFFFFFFFFFFFFFFFLL;
      else
        v137 = v134;
      if (v137)
        v138 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 16))(*((_QWORD *)this + 76), 16 * v137, 8);
      else
        v138 = 0;
      v146 = (uint64_t *)(v138 + 16 * v133);
      v147 = &v146[2 * v128];
      v148 = v146;
      do
      {
        if (v148)
        {
          *v148 = *v125;
          v149 = v125[1];
          v148[1] = v149;
          if (v149)
          {
            v150 = (unint64_t *)(v149 + 8);
            do
              v151 = __ldxr(v150);
            while (__stxr(v151 + 1, v150));
          }
        }
        v148 += 2;
        v125 += 2;
      }
      while (v148 != v147);
      v152 = (uint64_t *)*((_QWORD *)this + 73);
      if (v152 != v131)
      {
        v153 = v131;
        do
        {
          v154 = *((_OWORD *)v153 - 1);
          v153 -= 2;
          *((_OWORD *)v146 - 1) = v154;
          v146 -= 2;
          *v153 = 0;
          v153[1] = 0;
        }
        while (v153 != v152);
      }
      v155 = v138 + 16 * v137;
      v156 = (uint64_t *)*((_QWORD *)this + 74);
      if (v156 != v131)
      {
        do
        {
          *(_OWORD *)v147 = *(_OWORD *)v131;
          v147 += 2;
          *v131 = 0;
          v131[1] = 0;
          v131 += 2;
        }
        while (v131 != v156);
        v131 = (uint64_t *)*((_QWORD *)this + 74);
      }
      v157 = (uint64_t *)*((_QWORD *)this + 73);
      *((_QWORD *)this + 73) = v146;
      *((_QWORD *)this + 74) = v147;
      v158 = *((_QWORD *)this + 75);
      *((_QWORD *)this + 75) = v155;
      while (v131 != v157)
      {
        v159 = (std::__shared_weak_count *)*(v131 - 1);
        if (v159)
        {
          v160 = (unint64_t *)&v159->__shared_owners_;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        v131 -= 2;
      }
      if (v157)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 76) + 40))(*((_QWORD *)this + 76), v157, v158 - (_QWORD)v157);
    }
  }
LABEL_224:
  if (v190)
  {
    v191 = v190;
    (*(void (**)(uint64_t, float *, unint64_t))(*(_QWORD *)v193 + 40))(v193, v190, v192 - (_QWORD)v190);
  }
LABEL_226:
  v165 = (uint64_t *)*((_QWORD *)this + 73);
  for (j = (uint64_t *)*((_QWORD *)this + 74); v165 != j; v165 += 2)
  {
    v178 = *v165;
    v179 = *(_QWORD *)(*v165 + 288);
    if (!*(_BYTE *)(*(_QWORD *)(v179 + 640) + 140))
    {
      md::LabelImageLoader::enqueueIconForRendering(*(_QWORD **)(v195 + 264), (_QWORD *)(v179 + 640));
      v178 = *v165;
    }
    v180 = *((float *)this + 171);
    v181 = *(float *)(v178 + 268);
    if (*(_BYTE *)(v178 + 264))
    {
      if (v181 <= 0.0)
        continue;
      v182 = v181 + (float)(v180 * -2.5);
      *(float *)(v178 + 268) = v182;
      v183 = 0.0;
      if (v182 > 0.0)
        continue;
    }
    else
    {
      if (v181 >= *(float *)(v178 + 272))
        continue;
      v184 = *(_QWORD *)(*(_QWORD *)(v178 + 288) + 640);
      if (!v184)
        continue;
      v185 = atomic_load((unsigned __int8 *)(v184 + 143));
      if ((v185 & 1) == 0)
        continue;
      v186 = *(float *)(v178 + 268) + (float)(v180 * 2.5);
      *(float *)(v178 + 268) = v186;
      v183 = *(float *)(v178 + 272);
      if (v186 < v183)
        continue;
    }
    *(float *)(v178 + 268) = v183;
    *(_BYTE *)(v178 + 265) = 0;
  }
  if (!(*(unsigned int (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this)
    || (objc_msgSend(*((id *)this + 7), "needsLayout") & 1) == 0)
  {
    if (!*((_QWORD *)this + 13) || !*(_QWORD *)(*((_QWORD *)this + 86) + 24) || !*((_BYTE *)this + 680))
      goto LABEL_263;
    *((_BYTE *)this + 680) = 0;
  }
  *((_BYTE *)this + 824) = 1;
LABEL_263:
  if (!v206)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v206 + 48))(v206);
  v187 = v206;
  if (v206 == v205)
  {
    v188 = 4;
    v187 = v205;
  }
  else
  {
    if (!v206)
      return;
    v188 = 5;
  }
  (*(void (**)(void))(*v187 + 8 * v188))();
}

void sub_19F2B23C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a29);
  _Unwind_Resume(a1);
}

uint64_t md::LabelNavEtaLabeler::clearEtaFeatures(md::LabelNavEtaLabeler *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (**v6)(_QWORD);
  BOOL v7;
  uint64_t v8;
  uint64_t i;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  uint64_t v16;
  uint64_t k;
  void *v18;
  uint64_t result;

  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 488, *((_QWORD *)this + 62));
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 61) = (char *)this + 496;
  *((_QWORD *)this + 62) = 0;
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 520, *((_QWORD *)this + 66));
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 65) = (char *)this + 528;
  *((_QWORD *)this + 66) = 0;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 576, *((_QWORD *)this + 73));
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 72) = (char *)this + 584;
  *((_QWORD *)this + 73) = 0;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 608, *((_QWORD *)this + 77));
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 76) = (char *)this + 616;
  *((_QWORD *)this + 77) = 0;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 640, *((_QWORD *)this + 81));
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 80) = (char *)this + 648;
  *((_QWORD *)this + 81) = 0;
  std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy((uint64_t)this + 672, *((_QWORD *)this + 85));
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 84) = (char *)this + 680;
  *((_QWORD *)this + 85) = 0;
  std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,mdm::Allocator>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  *((_QWORD *)this + 33) = 0;
  std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::destroy((uint64_t)this + 352, *((_QWORD *)this + 45));
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  *((_QWORD *)this + 45) = 0;
  v3 = (void (***)(_QWORD))*((_QWORD *)this + 19);
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 20);
  if (v2 != v3)
  {
    v4 = v2 - 3;
    v5 = v2 - 3;
    do
    {
      v6 = *v5;
      v5 -= 3;
      (*v6)(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  *((_QWORD *)this + 20) = v3;
  v8 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); i != v8; i -= 16)
  {
    v10 = *(std::__shared_weak_count **)(i - 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  *((_QWORD *)this + 24) = v8;
  v13 = *((_QWORD *)this + 36);
  for (j = *((_QWORD *)this + 37); j != v13; j -= 8)
  {
    v15 = *(void **)(j - 8);

  }
  *((_QWORD *)this + 37) = v13;
  v16 = *((_QWORD *)this + 40);
  for (k = *((_QWORD *)this + 41); k != v16; k -= 8)
  {
    v18 = *(void **)(k - 8);

  }
  *((_QWORD *)this + 41) = v16;
  result = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 416, *((_QWORD *)this + 53));
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 52) = (char *)this + 424;
  *((_QWORD *)this + 53) = 0;
  *((_WORD *)this + 352) = 0;
  *((_BYTE *)this + 706) = 0;
  return result;
}

uint64_t std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a2 + 48, *(_QWORD *)(a2 + 56));

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 48);
      v6 = *(_QWORD *)(a2 + 40);
      if (v5 != v4)
      {
        do
        {
          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v5 - 32, *(_QWORD *)(v5 - 24));

          v7 = *(void **)(v5 - 48);
          v5 -= 48;

        }
        while (v5 != v4);
        v6 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(a2 + 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), v6, *(_QWORD *)(a2 + 56) - v6);
    }

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 72);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 40) = &off_1E42B4E10;

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>,mdm::Allocator>>::destroy(v3, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<GEOComposedRoute * const {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,GEOComposedRoute * const {__strong}::_retain_ptr<VKLabelNavRouteEta * {__strong},GEOComposedRoute * const {__strong}::_retain_objc_arc,GEOComposedRoute * const {__strong}::_release_objc_arc,GEOComposedRoute * const {__strong}::_hash_objc,GEOComposedRoute * const {__strong}::_equal_objc>,std::equal_to<md>,std::allocator<std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>,std::vector<std::allocator,std::pair<md,GEOComposedRoute * const {__strong}::_equal_objc>>>>,0>((uint64_t)(a2 + 4));
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 48);
  }
  return result;
}

void sub_19F2B2A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::PropertyID>::clearCaches(uint64_t a1)
{
  uint64_t v2;
  geo::read_write_lock *v3;
  const char *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t j;
  geo::read_write_lock *v8;
  const char *v9;
  geo::read_write_lock *v10;
  const char *v11;
  uint64_t *v12;
  geo::read_write_lock *v13;
  const char *v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  geo::read_write_lock *v18;
  const char *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 2528));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  if (*(_QWORD *)(v2 + 2768))
  {
    for (i = *(_QWORD **)(v2 + 2752);
          i;
          v3 = (geo::read_write_lock *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v2 + 2760)
                                                                                            + 40))(*(_QWORD *)(v2 + 2760), v52, 48))
    {
      v52 = i;
      i = (_QWORD *)*i;
      v53 = (std::__shared_weak_count *)v52[5];
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (!*((_BYTE *)v52 + 30) && v52[2])
      {
        v56 = gss::Allocator::instance(v3);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 40))(v56, v52[2], *((unsigned __int16 *)v52 + 14));
        v52[2] = 0;
      }
    }
    *(_QWORD *)(v2 + 2752) = 0;
    v6 = *(_QWORD *)(v2 + 2736);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*(_QWORD *)(v2 + 2728) + 8 * j) = 0;
    }
    *(_QWORD *)(v2 + 2768) = 0;
  }
  v8 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 2528));
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  v10 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 120));
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"write lock", v11);
  v12 = *(uint64_t **)(a1 + 56);
  if (v12)
  {
    while (1)
    {
      v20 = (std::__shared_weak_count *)v12[9];
      if (!v20)
        goto LABEL_31;
      v21 = std::__shared_weak_count::lock(v20);
      if (!v21)
        goto LABEL_31;
      v22 = v21;
      v23 = v12[8];
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (v25)
      {
        if (!v23)
          goto LABEL_31;
LABEL_28:
        v12 = (uint64_t *)*v12;
        if (!v12)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v22);
        if (v23)
          goto LABEL_28;
LABEL_31:
        v26 = *(int8x8_t *)(a1 + 40);
        v27 = v12[1];
        v28 = (uint8x8_t)vcnt_s8(v26);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          if (v27 >= *(_QWORD *)&v26)
            v27 %= *(_QWORD *)&v26;
        }
        else
        {
          v27 &= *(_QWORD *)&v26 - 1;
        }
        v29 = (uint64_t *)*v12;
        v30 = *(_QWORD *)(a1 + 32);
        v31 = *(uint64_t **)(v30 + 8 * v27);
        do
        {
          v32 = v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31 != v12);
        if (v32 == (uint64_t *)(a1 + 56))
          goto LABEL_95;
        v33 = v32[1];
        if (v28.u32[0] > 1uLL)
        {
          if (v33 >= *(_QWORD *)&v26)
            v33 %= *(_QWORD *)&v26;
        }
        else
        {
          v33 &= *(_QWORD *)&v26 - 1;
        }
        v34 = (uint64_t *)*v12;
        if (v33 != v27)
        {
LABEL_95:
          if (v29)
          {
            v35 = v29[1];
            if (v28.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&v26)
                v35 %= *(_QWORD *)&v26;
            }
            else
            {
              v35 &= *(_QWORD *)&v26 - 1;
            }
            v34 = (uint64_t *)*v12;
            if (v35 == v27)
            {
LABEL_51:
              v36 = v34[1];
              if (v28.u32[0] > 1uLL)
              {
                if (v36 >= *(_QWORD *)&v26)
                  v36 %= *(_QWORD *)&v26;
              }
              else
              {
                v36 &= *(_QWORD *)&v26 - 1;
              }
              if (v36 != v27)
              {
                *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v36) = v32;
                v34 = (uint64_t *)*v12;
              }
              goto LABEL_57;
            }
          }
          *(_QWORD *)(v30 + 8 * v27) = 0;
          v34 = (uint64_t *)*v12;
        }
        if (v34)
          goto LABEL_51;
LABEL_57:
        *v32 = (uint64_t)v34;
        *v12 = 0;
        --*(_QWORD *)(a1 + 72);
        v37 = (std::__shared_weak_count *)v12[9];
        if (v37)
          std::__shared_weak_count::__release_weak(v37);
        if (!*((_BYTE *)v12 + 62) && v12[6])
        {
          v38 = gss::Allocator::instance((gss::Allocator *)v37);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 40))(v38, v12[6], *((unsigned __int16 *)v12 + 30));
          v12[6] = 0;
        }
        v39 = v12[2];
        if (v39)
        {
          v12[3] = v39;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[5] + 40))(v12[5], v39, v12[4] - v39);
        }
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), v12, 80);
        v12 = v29;
        if (!v29)
          break;
      }
    }
  }
  v13 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 120));
  if ((_DWORD)v13)
    geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
  v15 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 320));
  if ((_DWORD)v15)
    geo::read_write_lock::logFailure(v15, (uint64_t)"write lock", v16);
  v17 = *(_QWORD **)(a1 + 88);
  if (v17 != *(_QWORD **)(a1 + 96))
  {
    while (1)
    {
      v40 = (std::__shared_weak_count *)v17[1];
      if (!v40)
        break;
      v41 = std::__shared_weak_count::lock(v40);
      if (!v41)
        break;
      v42 = v41;
      v43 = *v17;
      v44 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (v45)
      {
        if (!v43)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v42);
        if (!v43)
          break;
      }
      v17 += 2;
      v46 = *(_QWORD **)(a1 + 96);
LABEL_65:
      if (v17 == v46)
        goto LABEL_19;
    }
    v47 = v17 + 2;
    v48 = *(_QWORD **)(a1 + 96);
    if (v17 + 2 == v48)
    {
      v46 = v17;
    }
    else
    {
      do
      {
        v46 = v47;
        v49 = *(_OWORD *)v47;
        *v47 = 0;
        v47[1] = 0;
        v50 = (std::__shared_weak_count *)*(v47 - 1);
        *((_OWORD *)v47 - 1) = v49;
        if (v50)
          std::__shared_weak_count::__release_weak(v50);
        v47 += 2;
      }
      while (v46 + 2 != v48);
      v47 = *(_QWORD **)(a1 + 96);
    }
    while (v47 != v46)
    {
      v51 = (std::__shared_weak_count *)*(v47 - 1);
      if (v51)
        std::__shared_weak_count::__release_weak(v51);
      v47 -= 2;
    }
    *(_QWORD *)(a1 + 96) = v46;
    goto LABEL_65;
  }
LABEL_19:
  v18 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 320));
  if ((_DWORD)v18)
    geo::read_write_lock::logFailure(v18, (uint64_t)"unlock", v19);
}

md::SingleGEOResourceLayerDataSource *md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(md::SingleGEOResourceLayerDataSource *this, __int16 a2, __int16 a3, gdc::LayerDataStore *a4, gdc::ResourceStatusContainer *a5, geo::TaskQueue *a6, char a7, char a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = operator new();
  *(_QWORD *)v16 = &off_1E42B46F8;
  *(_QWORD *)(v16 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v16 + 16) = 850045863;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 81) = 0u;
  *(_QWORD *)(v16 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)this = off_1E42B0758;
  *((_QWORD *)this + 1) = a6;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = a5;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 38) = 850045863;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = v16;
  *((_QWORD *)this + 47) = 850045863;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 60) = 850045863;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  v20[0] = &off_1E42D5848;
  v20[1] = this;
  v21 = v20;
  gdc::Timer::setTimerCallback(v16, v20);
  v17 = v21;
  if (v21 == v20)
  {
    v18 = 4;
    v17 = v20;
    goto LABEL_5;
  }
  if (v21)
  {
    v18 = 5;
LABEL_5:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  *(_QWORD *)this = off_1E42A9120;
  *((_WORD *)this + 292) = a3;
  *((_BYTE *)this + 592) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = (char *)this + 624;
  *((_WORD *)this + 320) = a2;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 81) = (char *)this + 656;
  *((_OWORD *)this + 42) = xmmword_19FFB3820;
  *((_QWORD *)this + 86) = 0;
  *((_BYTE *)this + 696) = a7;
  *((_BYTE *)this + 697) = a8;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  return this;
}

void gdc::Timer::setTimerCallback(uint64_t a1, _QWORD *a2)
{
  NSObject *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1 + 80);
  if (v2)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1174405120;
    v7[2] = ___ZN3gdc5Timer16setTimerCallbackENSt3__18functionIFvvEEE_block_invoke;
    v7[3] = &__block_descriptor_tmp_1;
    v7[4] = a1;
    v4 = v8;
    v5 = (_QWORD *)a2[3];
    if (v5)
    {
      if (v5 == a2)
      {
        v9 = v8;
        (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v8);
      }
      else
      {
        v9 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v9 = 0;
    }
    dispatch_source_set_event_handler(v2, v7);
    dispatch_resume(*(dispatch_object_t *)(a1 + 80));
    if (v9 == v8)
    {
      v6 = 4;
    }
    else
    {
      if (!v9)
        return;
      v6 = 5;
      v4 = v9;
    }
    (*(void (**)(_QWORD *))(*v4 + 8 * v6))(v4);
  }
}

uint64_t mapDataTypeToLabelResourceType(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 13;
  result = 30;
  switch(v1)
  {
    case 0:
      result = 14;
      break;
    case 5:
      result = 9;
      break;
    case 7:
      result = 8;
      break;
    case 8:
      return result;
    case 9:
      result = 32;
      break;
    case 10:
      result = 39;
      break;
    case 11:
      result = 40;
      break;
    case 12:
      result = 10;
      break;
    case 13:
      result = 15;
      break;
    case 53:
      result = 44;
      break;
    case 56:
      result = 45;
      break;
    case 60:
    case 67:
      result = 13;
      break;
    case 61:
      result = 47;
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

void gss::StyleSheet<gss::ScenePropertyID>::styleMatchingAttributes(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  geo::read_write_lock *v37;
  const char *v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  geo::read_write_lock *v41;
  const char *v42;
  unsigned __int16 *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t **v51;
  uint64_t *v52;
  unint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  unsigned __int16 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  _QWORD *i;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  _QWORD v103[2];
  char v104;

  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::shrink_to_fit(a3);
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v102 = *(_QWORD *)a3;
  DWORD2(v102) = v7;
  WORD6(v102) = WORD2(v7);
  HIWORD(v102) = *(_WORD *)(a3 + 14);
  *(_QWORD *)(a3 + 7) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 15) = 1;
  v8 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 2528));
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"read lock", v9);
  if (WORD5(v102))
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (v13 < WORD5(v102))
      {
        v12 = (unsigned int *)(v102 + 4 * v13);
        v10 = (unsigned __int16 *)(v102 + WORD4(v102) + 2 * v13);
      }
      v11 ^= (*v10
            - 0x61C8864680B583EBLL
            + ((((v11 << 6) - 0x61C8864680B583EBLL + (v11 >> 2) + *v12) ^ v11) << 6)
            + ((((v11 << 6) - 0x61C8864680B583EBLL + (v11 >> 2) + *v12) ^ v11) >> 2)) ^ ((v11 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v11 >> 2)
                                                                                       + *v12);
      v14 = v13 + 1;
      if (v13 + 1 < WORD5(v102))
        ++v13;
      else
        v13 = WORD5(v102);
    }
    while (v14 < WORD5(v102));
    v15 = *(int8x8_t *)(a2 + 2736);
    if (!*(_QWORD *)&v15)
    {
LABEL_65:
      v37 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 2528));
      if ((_DWORD)v37)
        geo::read_write_lock::logFailure(v37, (uint64_t)"unlock", v38);
      v39 = atomic_load((unsigned __int8 *)(a2 + 2786));
      if ((v39 & 1) == 0)
        std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(a2 + 2816));
      v40 = atomic_load((unsigned __int8 *)(a2 + 2787));
      if ((v40 & 1) == 0)
      {
        *a1 = 0;
        a1[1] = 0;
        goto LABEL_196;
      }
      gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::matchAttributes(a1, **(_DWORD ***)(a2 + 160), (uint64_t)&v102, v103, (uint64_t *)(*(_QWORD *)(a2 + 160) + 8), (uint64_t *)(a2 + 64), (_QWORD *)(*(_QWORD *)(a2 + 160) + 24));
      v41 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 2528));
      if ((_DWORD)v41)
        geo::read_write_lock::logFailure(v41, (uint64_t)"write lock", v42);
      if (WORD5(v102))
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          if (v46 < WORD5(v102))
          {
            v45 = (unsigned int *)(v102 + 4 * v46);
            v43 = (unsigned __int16 *)(v102 + WORD4(v102) + 2 * v46);
          }
          v47 = ((v44 << 6) - 0x61C8864680B583EBLL + (v44 >> 2) + *v45) ^ v44;
          v44 = (*v43 - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
          v48 = v46 + 1;
          if (v46 + 1 < WORD5(v102))
            ++v46;
          else
            v46 = WORD5(v102);
        }
        while (v48 < WORD5(v102));
        v49 = *(_QWORD *)(a2 + 2736);
        if (v49)
        {
LABEL_82:
          v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
          v50.i16[0] = vaddlv_u8(v50);
          if (v50.u32[0] > 1uLL)
          {
            v3 = v44;
            if (v44 >= v49)
              v3 = v44 % v49;
          }
          else
          {
            v3 = (v49 - 1) & v44;
          }
          v51 = *(uint64_t ***)(*(_QWORD *)(a2 + 2728) + 8 * v3);
          if (v51)
          {
            v52 = *v51;
            if (v52)
            {
              v53 = v49 - 1;
              if (WORD5(v102))
              {
                v54 = (unsigned __int16 *)(v102 + WORD4(v102));
                if (v50.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v55 = v52[1];
                    if (v55 == v44)
                    {
                      if (WORD5(v102) == *((unsigned __int16 *)v52 + 13))
                      {
                        v56 = (_DWORD *)v52[2];
                        if (*(_DWORD *)v102 == *v56)
                        {
                          v57 = (unsigned __int16 *)((char *)v56 + *((unsigned __int16 *)v52 + 12));
                          if (*v54 == *v57)
                          {
                            v58 = 1;
                            do
                            {
                              if (WORD5(v102) == v58)
                                goto LABEL_194;
                              v59 = v58;
                              if (*(_DWORD *)(v102 + 4 * v58) != v56[v58])
                                break;
                              ++v58;
                            }
                            while (v54[v59] == v57[v59]);
                            if (v59 >= WORD5(v102))
                              goto LABEL_194;
                          }
                        }
                      }
                    }
                    else if ((v55 & v53) != v3)
                    {
                      goto LABEL_132;
                    }
                    v52 = (uint64_t *)*v52;
                    if (!v52)
                      goto LABEL_132;
                  }
                }
                while (1)
                {
                  v60 = v52[1];
                  if (v60 == v44)
                  {
                    if (WORD5(v102) == *((unsigned __int16 *)v52 + 13))
                    {
                      v61 = (_DWORD *)v52[2];
                      if (*(_DWORD *)v102 == *v61)
                      {
                        v62 = (unsigned __int16 *)((char *)v61 + *((unsigned __int16 *)v52 + 12));
                        if (*v54 == *v62)
                        {
                          v63 = 1;
                          do
                          {
                            if (WORD5(v102) == v63)
                              goto LABEL_194;
                            v64 = v63;
                            if (*(_DWORD *)(v102 + 4 * v63) != v61[v63])
                              break;
                            ++v63;
                          }
                          while (v54[v64] == v62[v64]);
                          if (v64 >= WORD5(v102))
                            goto LABEL_194;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v60 >= v49)
                      v60 %= v49;
                    if (v60 != v3)
                      goto LABEL_132;
                  }
                  v52 = (uint64_t *)*v52;
                  if (!v52)
                    goto LABEL_132;
                }
              }
              if (v50.u32[0] < 2uLL)
              {
                while (1)
                {
                  v65 = v52[1];
                  if (v65 == v44)
                  {
                    if (!*((_WORD *)v52 + 13))
                      goto LABEL_194;
                  }
                  else if ((v65 & v53) != v3)
                  {
                    goto LABEL_132;
                  }
                  v52 = (uint64_t *)*v52;
                  if (!v52)
                    goto LABEL_132;
                }
              }
              do
              {
                v66 = v52[1];
                if (v66 == v44)
                {
                  if (!*((_WORD *)v52 + 13))
                    goto LABEL_194;
                }
                else
                {
                  if (v66 >= v49)
                    v66 %= v49;
                  if (v66 != v3)
                    break;
                }
                v52 = (uint64_t *)*v52;
              }
              while (v52);
            }
          }
        }
      }
      else
      {
        v44 = 0;
        v49 = *(_QWORD *)(a2 + 2736);
        if (v49)
          goto LABEL_82;
      }
LABEL_132:
      v67 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 2760) + 16))(*(_QWORD *)(a2 + 2760), 48, 8);
      v103[0] = v67;
      v103[1] = a2 + 2760;
      *(_QWORD *)v67 = 0;
      *(_QWORD *)(v67 + 8) = v44;
      v68 = *((_QWORD *)&v102 + 1);
      *(_QWORD *)(v67 + 16) = v102;
      *(_DWORD *)(v67 + 24) = v68;
      *(_WORD *)(v67 + 28) = WORD2(v68);
      *(_WORD *)(v67 + 30) = HIWORD(v102);
      *(_QWORD *)&v102 = 0;
      *(_QWORD *)((char *)&v102 + 7) = 0;
      HIBYTE(v102) = 1;
      *(_QWORD *)(v67 + 32) = *a1;
      v69 = a1[1];
      *(_QWORD *)(v67 + 40) = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v104 = 1;
      v72 = (float)(unint64_t)(*(_QWORD *)(a2 + 2768) + 1);
      v73 = *(float *)(a2 + 2776);
      if (v49 && (float)(v73 * (float)v49) >= v72)
      {
LABEL_184:
        v97 = *(uint64_t **)(*(_QWORD *)(a2 + 2728) + 8 * v3);
        if (v97)
        {
          *(_QWORD *)v67 = *v97;
        }
        else
        {
          *(_QWORD *)v67 = *(_QWORD *)(a2 + 2752);
          *(_QWORD *)(a2 + 2752) = v67;
          *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v3) = a2 + 2752;
          if (!*(_QWORD *)v67)
          {
LABEL_193:
            ++*(_QWORD *)(a2 + 2768);
            goto LABEL_194;
          }
          v98 = *(_QWORD *)(*(_QWORD *)v67 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v98 >= v49)
              v98 %= v49;
          }
          else
          {
            v98 &= v49 - 1;
          }
          v97 = (uint64_t *)(*(_QWORD *)(a2 + 2728) + 8 * v98);
        }
        *v97 = v67;
        goto LABEL_193;
      }
      v74 = 1;
      if (v49 >= 3)
        v74 = (v49 & (v49 - 1)) != 0;
      v75 = v74 | (2 * v49);
      v76 = vcvtps_u32_f32(v72 / v73);
      if (v75 <= v76)
        prime = v76;
      else
        prime = v75;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v49 = *(_QWORD *)(a2 + 2736);
      if (prime <= v49)
      {
        if (prime >= v49)
          goto LABEL_171;
        v90 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 2768) / *(float *)(a2 + 2776));
        if (v49 < 3 || (v91 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v91.i16[0] = vaddlv_u8(v91), v91.u32[0] > 1uLL))
        {
          v90 = std::__next_prime(v90);
        }
        else
        {
          v92 = 1 << -(char)__clz(v90 - 1);
          if (v90 >= 2)
            v90 = v92;
        }
        if (prime <= v90)
          prime = v90;
        if (prime >= v49)
        {
          v49 = *(_QWORD *)(a2 + 2736);
LABEL_171:
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v44 >= v49)
              v3 = v44 % v49;
            else
              v3 = v44;
          }
          else
          {
            v3 = (v49 - 1) & v44;
          }
          goto LABEL_184;
        }
        if (!prime)
        {
          v101 = *(_QWORD *)(a2 + 2728);
          *(_QWORD *)(a2 + 2728) = 0;
          if (v101)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 2744) + 40))(*(_QWORD *)(a2 + 2744), v101, 8 * *(_QWORD *)(a2 + 2736));
          v49 = 0;
          *(_QWORD *)(a2 + 2736) = 0;
          goto LABEL_171;
        }
      }
      v78 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a2 + 2744) + 16))(*(_QWORD *)(a2 + 2744), 8 * prime, 8);
      v79 = *(_QWORD *)(a2 + 2728);
      *(_QWORD *)(a2 + 2728) = v78;
      if (v79)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 2744) + 40))(*(_QWORD *)(a2 + 2744), v79, 8 * *(_QWORD *)(a2 + 2736));
      v80 = 0;
      *(_QWORD *)(a2 + 2736) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v80++) = 0;
      while (prime != v80);
      v81 = *(_QWORD **)(a2 + 2752);
      if (!v81)
      {
LABEL_170:
        v49 = prime;
        goto LABEL_171;
      }
      v82 = a2 + 2752;
      v83 = v81[1];
      v84 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v85 = v83 & v84;
        *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v85) = v82;
        for (i = (_QWORD *)*v81; *v81; i = (_QWORD *)*v81)
        {
          v87 = i[1] & v84;
          if (v87 == v85)
          {
            v81 = i;
          }
          else
          {
            v88 = *(_QWORD *)(a2 + 2728);
            if (*(_QWORD *)(v88 + 8 * v87))
            {
              *v81 = *i;
              v89 = 8 * v87;
              *i = **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v89);
              **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v89) = i;
            }
            else
            {
              *(_QWORD *)(v88 + 8 * v87) = v81;
              v81 = i;
              v85 = v87;
            }
          }
        }
        goto LABEL_170;
      }
      if (v83 >= prime)
        v83 %= prime;
      *(_QWORD *)(*(_QWORD *)(a2 + 2728) + 8 * v83) = v82;
      v93 = (_QWORD *)*v81;
      if (!*v81)
        goto LABEL_170;
      while (1)
      {
        v95 = v93[1];
        if (v95 >= prime)
          v95 %= prime;
        if (v95 != v83)
        {
          v96 = *(_QWORD *)(a2 + 2728);
          if (!*(_QWORD *)(v96 + 8 * v95))
          {
            *(_QWORD *)(v96 + 8 * v95) = v81;
            goto LABEL_175;
          }
          *v81 = *v93;
          v94 = 8 * v95;
          *v93 = **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v94);
          **(_QWORD **)(*(_QWORD *)(a2 + 2728) + v94) = v93;
          v93 = v81;
        }
        v95 = v83;
LABEL_175:
        v81 = v93;
        v93 = (_QWORD *)*v93;
        v83 = v95;
        if (!v93)
          goto LABEL_170;
      }
    }
  }
  else
  {
    v11 = 0;
    v15 = *(int8x8_t *)(a2 + 2736);
    if (!*(_QWORD *)&v15)
      goto LABEL_65;
  }
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = v11;
    if (v11 >= *(_QWORD *)&v15)
      v17 = v11 % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & v11;
  }
  v18 = *(uint64_t ***)(*(_QWORD *)(a2 + 2728) + 8 * v17);
  if (!v18)
    goto LABEL_65;
  v19 = *v18;
  if (!v19)
    goto LABEL_65;
  v20 = *(_QWORD *)&v15 - 1;
  if (WORD5(v102))
  {
    v21 = (unsigned __int16 *)(v102 + WORD4(v102));
    if (v16.u32[0] < 2uLL)
    {
      while (1)
      {
        v22 = v19[1];
        if (v22 == v11)
        {
          if (WORD5(v102) == *((unsigned __int16 *)v19 + 13))
          {
            v23 = (_DWORD *)v19[2];
            if (*(_DWORD *)v102 == *v23)
            {
              v24 = (unsigned __int16 *)((char *)v23 + *((unsigned __int16 *)v19 + 12));
              if (*v21 == *v24)
              {
                v25 = 1;
                do
                {
                  if (WORD5(v102) == v25)
                    goto LABEL_34;
                  v26 = v25;
                  if (*(_DWORD *)(v102 + 4 * v25) != v23[v25])
                    break;
                  ++v25;
                }
                while (v21[v26] == v24[v26]);
                if (v26 >= WORD5(v102))
                  goto LABEL_34;
              }
            }
          }
        }
        else if ((v22 & v20) != v17)
        {
          goto LABEL_65;
        }
        v19 = (uint64_t *)*v19;
        if (!v19)
          goto LABEL_65;
      }
    }
    while (1)
    {
      v30 = v19[1];
      if (v30 == v11)
      {
        if (WORD5(v102) == *((unsigned __int16 *)v19 + 13))
        {
          v31 = (_DWORD *)v19[2];
          if (*(_DWORD *)v102 == *v31)
          {
            v32 = (unsigned __int16 *)((char *)v31 + *((unsigned __int16 *)v19 + 12));
            if (*v21 == *v32)
            {
              v33 = 1;
              do
              {
                if (WORD5(v102) == v33)
                  goto LABEL_34;
                v34 = v33;
                if (*(_DWORD *)(v102 + 4 * v33) != v31[v33])
                  break;
                ++v33;
              }
              while (v21[v34] == v32[v34]);
              if (v34 >= WORD5(v102))
                goto LABEL_34;
            }
          }
        }
      }
      else
      {
        if (v30 >= *(_QWORD *)&v15)
          v30 %= *(_QWORD *)&v15;
        if (v30 != v17)
          goto LABEL_65;
      }
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_65;
    }
  }
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v35 = v19[1];
      if (v35 == v11)
      {
        if (!*((_WORD *)v19 + 13))
          goto LABEL_34;
      }
      else if ((v35 & v20) != v17)
      {
        goto LABEL_65;
      }
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_65;
    }
  }
  while (1)
  {
    v36 = v19[1];
    if (v36 == v11)
      break;
    if (v36 >= *(_QWORD *)&v15)
      v36 %= *(_QWORD *)&v15;
    if (v36 != v17)
      goto LABEL_65;
LABEL_60:
    v19 = (uint64_t *)*v19;
    if (!v19)
      goto LABEL_65;
  }
  if (*((_WORD *)v19 + 13))
    goto LABEL_60;
LABEL_34:
  *a1 = v19[4];
  v27 = v19[5];
  a1[1] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
LABEL_194:
  v37 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 2528));
  if ((_DWORD)v37)
    geo::read_write_lock::logFailure(v37, (uint64_t)"unlock", v99);
LABEL_196:
  if (!BYTE14(v102))
  {
    if ((_QWORD)v102)
    {
      v100 = gss::Allocator::instance(v37);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v100 + 40))(v100, v102, WORD6(v102));
    }
  }
}

void sub_19F2B3F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((gss::Allocator *)&a12);
  geo::write_lock_guard::~write_lock_guard(&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a10);
  _Unwind_Resume(a1);
}

void gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::matchAttributes(_QWORD *a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7)
{
  _DWORD *v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  __int16 *v28;
  __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  _DWORD *v51;
  NSObject *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  _BYTE buf[22];
  __int16 v63;
  int v64;
  uint64_t v65;

  v11 = a2;
  v65 = *MEMORY[0x1E0C80C00];
  v13 = *a2;
  if (*a2 == 0x7FFFFFFF)
  {
LABEL_2:
    if (gss::MatchingGraphEndChain::matches((uint64_t *)(*a7 + 16 * *((unsigned __int16 *)v11 + 3)), a3))
    {
      v14 = *((unsigned __int16 *)v11 + 2);
      v15 = *a6;
      v16 = *(_QWORD *)(*a6 + 16 * v14);
      if (v16)
      {
        *a4 = *(_QWORD *)(v16 + 112);
        v17 = *(_QWORD *)(v15 + 16 * v14 + 8);
        *a1 = v16;
        a1[1] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        return;
      }
      GEOGetGeoCSSStyleSheetLog();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v63 = 1024;
        v64 = 378;
        _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "endchain with no style: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }

    }
LABEL_63:
    *a4 = 0;
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v21 = *a5;
  v22 = *(unsigned __int16 *)(a3 + 10);
  v23 = *(char **)a3;
  v24 = *(unsigned __int8 *)(a3 + 15);
  v25 = *(_QWORD *)a3 + 4 * v22;
  while (1)
  {
    v26 = (unsigned __int16 *)*((_QWORD *)v11 + 1);
    v27 = *((unsigned __int16 *)v11 + 8);
    v28 = (__int16 *)&v26[2 * v27];
    if (!*((_WORD *)v11 + 8))
      goto LABEL_19;
    v29 = (__int16 *)*((_QWORD *)v11 + 1);
    v30 = *((unsigned __int16 *)v11 + 8);
    do
    {
      v31 = v30 >> 1;
      v32 = &v29[2 * (v30 >> 1)];
      v34 = (unsigned __int16)*v32;
      v33 = (unsigned __int16 *)(v32 + 2);
      v30 += ~(v30 >> 1);
      if (v34 == 0xFFFF)
        v30 = v31;
      else
        v29 = (__int16 *)v33;
    }
    while (v30);
    if (v29 != v28 && *v29 == -1)
    {
      v11 = (_DWORD *)(v21 + 24 * (unsigned __int16)v29[1]);
      if (!(_DWORD)v22)
        goto LABEL_9;
    }
    else
    {
LABEL_19:
      v11 = 0;
      if (!(_DWORD)v22)
        goto LABEL_9;
    }
    v35 = 4 * v22;
    v36 = *(char **)a3;
    if (v24)
    {
      v37 = *(char **)a3;
      v38 = *(unsigned __int16 *)(a3 + 10);
      if (v22 >= 0x1E)
      {
        do
        {
          v41 = v38 >> 1;
          v42 = &v37[4 * (v38 >> 1)];
          v44 = *(_DWORD *)v42;
          v43 = v42 + 4;
          v38 += ~(v38 >> 1);
          if (v44 < v13)
            v37 = v43;
          else
            v38 = v41;
        }
        while (v38);
        if (v37 == (char *)v25)
          goto LABEL_9;
        if (*(_DWORD *)v37 != v13)
          goto LABEL_9;
        v45 = (unint64_t)(v37 - v23) >> 2;
        if ((_DWORD)v22 == (unsigned __int16)v45)
          goto LABEL_9;
      }
      else
      {
        v39 = 0;
        while (1)
        {
          v40 = *(_DWORD *)&v23[4 * v39];
          if (v40 >= v13)
            break;
          if (v22 == ++v39)
            goto LABEL_9;
        }
        if (v40 == v13)
          LOWORD(v45) = v39;
        else
          LOWORD(v45) = v22;
        if ((_DWORD)v22 == (unsigned __int16)v45)
          goto LABEL_9;
      }
    }
    else
    {
      while (*(_DWORD *)v36 != v13)
      {
        v36 += 4;
        v35 -= 4;
        if (!v35)
        {
          v36 = (char *)(*(_QWORD *)a3 + 4 * v22);
          break;
        }
      }
      v45 = (unint64_t)(v36 - v23) >> 2;
      if ((_DWORD)v22 == (unsigned __int16)v45)
      {
LABEL_9:
        if (!v11)
          goto LABEL_63;
        goto LABEL_10;
      }
    }
    if (!(_DWORD)v27)
      break;
    v46 = *(unsigned __int16 *)(*(_QWORD *)a3 + *(unsigned __int16 *)(a3 + 8) + 2 * (unsigned __int16)v45);
    do
    {
      v47 = v27 >> 1;
      v48 = &v26[2 * (v27 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v27 += ~(v27 >> 1);
      if (v50 < v46)
        v26 = v49;
      else
        v27 = v47;
    }
    while (v27);
    if (v26 == (unsigned __int16 *)v28 || *v26 != v46)
      break;
    v51 = (_DWORD *)(v21 + 24 * v26[1]);
    if (v11)
      goto LABEL_57;
LABEL_54:
    v11 = v51;
    if (!v51)
      goto LABEL_63;
LABEL_10:
    v13 = *v11;
    if (*v11 == 0x7FFFFFFF)
      goto LABEL_2;
  }
  v51 = 0;
  if (!v11)
    goto LABEL_54;
LABEL_57:
  if (!v51)
    goto LABEL_10;
  v61 = 0;
  gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::matchAttributes(buf, v51, a3, (char *)&v61 + 4, a5, a6, a7);
  gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::matchAttributes(&v60, v11, a3, &v61, a5, a6, a7);
  if (HIDWORD(v61) >= v61)
  {
    v53 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    *a4 = HIDWORD(v61);
    *(_OWORD *)a1 = v53;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    *a4 = v61;
    *(_OWORD *)a1 = v60;
  }
  v57 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_19F2B43F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelTile::LabelTile(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, _QWORD *a5, char a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  double v29;
  double v30;
  double v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  int v41;
  void *v42;
  int v43;
  std::__shared_weak_count *v44;
  _QWORD *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BYTE *v54;
  unsigned __int8 v55;
  unsigned int v56;
  unsigned int v57;
  int64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  uint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  geo::codec::VectorTile *v69;
  _QWORD *v70;
  unint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  uint64_t *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  _BYTE *v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t *p_shared_weak_owners;
  unint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t **v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t **v127;
  uint64_t *v128;
  uint64_t **v129;
  unint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  int v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint8x8_t v162;
  unint64_t v163;
  uint64_t **v164;
  uint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _BYTE *v172;
  _DWORD *v173;
  unint64_t v174;
  char *v175;
  int v176;
  uint64_t v177;
  _OWORD *v178;
  char *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t **v186;
  uint64_t *v187;
  uint64_t **v188;
  unint64_t v189;
  uint64_t *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t *v197;
  unint64_t v198;
  uint64_t **v199;
  uint64_t *v200;
  uint64_t **v201;
  unint64_t v202;
  uint64_t *v203;
  _QWORD *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  __int128 v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  _QWORD *v221;
  void *v222;
  unint64_t *v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  uint64_t v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  unsigned int v245;
  unint64_t v246;
  char *v247;
  uint64_t v248;
  _DWORD *v249;
  unint64_t v250;
  _DWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _DWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  _OWORD *v266;
  __int128 *v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __n128 v273;
  unint64_t v274;
  float *v275;
  uint64_t v276;
  float *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  _DWORD *v294;
  _DWORD *v295;
  uint64_t v296;
  _DWORD *v297;
  float *v298;
  unint64_t v299;
  float *v300;
  uint64_t v301;
  float *v302;
  _OWORD *v303;
  uint64_t v304;
  __int128 v305;
  int v306;
  float *v307;
  char *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _OWORD *v312;
  float *v313;
  uint64_t v314;
  __int128 v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint8x8_t v323;
  _QWORD **v324;
  _QWORD *v325;
  unint64_t v326;
  uint64_t v327;
  float v328;
  float v329;
  _BOOL8 v330;
  unint64_t v331;
  unint64_t v332;
  size_t prime;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  size_t v338;
  size_t v339;
  size_t v340;
  _QWORD *i;
  size_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint8x8_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  size_t v350;
  uint64_t v351;
  _QWORD *v352;
  unint64_t v353;
  void **v355;
  unint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  char *v363;
  char *v364;
  unint64_t v365;
  _QWORD *v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  __int128 *v370;
  _OWORD *v371;
  uint64_t v372;
  __int128 v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t sig;
  std::mutex *v381;
  unint64_t v382;
  char v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  unsigned __int8 v390;
  _BYTE *v391;
  _BYTE *v392;
  uint64_t v393;
  char *v394;
  char *v395;
  char *v396;
  __int128 v397;
  _BYTE *v398;
  int v399;
  char *v400;
  unint64_t v401;
  char *v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  _BYTE *v406;
  _DWORD *v407;
  std::__shared_weak_count *v408;
  unint64_t v409;
  char *v410;
  int v411;
  uint64_t v412;
  _OWORD *v413;
  char *v414;
  uint64_t v415;
  __int128 v416;
  unsigned __int8 v417;
  uint64_t v418;
  unsigned __int8 v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  uint64_t *v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint8x8_t v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  uint64_t v436;
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  std::mutex *v440;
  std::__shared_weak_count *v441;
  std::__shared_weak_count *v442;
  uint64_t v443;
  _QWORD *v444;
  float v445;
  float v446;
  _BOOL8 v447;
  unint64_t v448;
  unint64_t v449;
  size_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  size_t v455;
  size_t v456;
  size_t v457;
  _QWORD *j;
  size_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint8x8_t v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  size_t v467;
  uint64_t v468;
  _QWORD *v469;
  unint64_t v470;
  unsigned __int8 v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  float v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  uint64_t v482;
  unsigned __int8 *v483;
  unsigned __int8 v484;
  _QWORD *v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  _QWORD *v495;
  unint64_t v496;
  unint64_t v497;
  uint8x8_t v498;
  _QWORD *v499;
  _QWORD *v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  float v508;
  float v509;
  _BOOL8 v510;
  unint64_t v511;
  unint64_t v512;
  size_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  size_t v518;
  size_t v519;
  size_t v520;
  _QWORD *k;
  size_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint8x8_t v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  size_t v530;
  uint64_t v531;
  _QWORD *v532;
  unint64_t v533;
  std::__shared_weak_count *v534;
  uint64_t **v535;
  unint64_t *v536;
  unint64_t v537;
  unint64_t *v538;
  unint64_t v539;
  uint64_t *v540;
  uint64_t **v541;
  unint64_t v542;
  uint64_t *v543;
  _QWORD *v544;
  _QWORD *v545;
  _QWORD *v546;
  void *v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  char *v552;
  void *v553;
  unint64_t v554;
  char *v555;
  char *v556;
  char *v557;
  __int128 v558;
  _BYTE *v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  uint64_t *v570;
  unint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  unint64_t v577;
  uint64_t *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  uint64_t *v584;
  unint64_t *v585;
  unint64_t v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  uint64_t *v590;
  unint64_t *v591;
  unint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  uint64_t *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  unint64_t v602;
  uint64_t v603;
  unint64_t *v604;
  unint64_t v605;
  unsigned __int8 v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  __int128 v611;
  uint64_t v612;
  unint64_t v613;
  std::mutex *v614;
  unint64_t v615;
  _QWORD *v616;
  uint64_t v617;
  uint64_t v618;
  unsigned __int8 v621;
  _QWORD *v622;
  _QWORD *v623;
  char v624;
  unsigned __int8 v625;
  uint64_t v626;
  uint64_t v627;
  unsigned __int8 v628;
  unsigned __int8 v629;
  unsigned __int8 v630;
  unsigned __int8 v631;
  unsigned __int8 v632;
  unsigned __int8 v633;
  const FeatureStyleAttributes *v634;
  char *v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  _QWORD *v647;
  unsigned __int8 v648;
  std::__shared_weak_count *v649;
  std::__shared_weak_count *v650;
  geo::codec::VectorTile *v651;
  uint64_t v652;
  unint64_t v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  _OWORD *v667;
  __int128 *v668;
  uint64_t v669;
  __int128 v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  unint64_t *v675;
  uint64_t v676;
  unint64_t *v677;
  unint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t *v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t *v693;
  __int128 *v694;
  uint64_t v695;
  __int128 v696;
  unint64_t v697;
  uint64_t v698;
  void **v699;
  void **v700;
  void **v701;
  unint64_t v702;
  void *v703;
  uint64_t *v704;
  unint64_t *v705;
  unint64_t v706;
  uint64_t v707;
  std::__shared_weak_count *v708;
  std::__shared_weak_count *v709;
  uint64_t v710;
  unsigned __int8 v711;
  unsigned __int8 v712;
  uint64_t v713;
  unint64_t v714;
  char *v715;
  uint64_t v716;
  char *v717;
  _QWORD *v718;
  _QWORD *v719;
  uint64_t v720;
  unint64_t v721;
  _DWORD *v722;
  unint64_t v723;
  char *v724;
  char *v725;
  char *v726;
  int v727;
  int v728;
  char *n;
  int v730;
  void *v731;
  char *v732;
  size_t v733;
  unint64_t v734;
  uint64_t v735;
  unint64_t v736;
  unint64_t v737;
  unint64_t v738;
  uint64_t v739;
  unint64_t v740;
  unint64_t v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  int *v747;
  int v748;
  unint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  unint64_t v752;
  unint64_t v753;
  uint64_t v754;
  unint64_t v755;
  _DWORD *v756;
  unint64_t v757;
  int v758;
  int *v759;
  int v760;
  uint64_t v761;
  unint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  char *v766;
  char *v767;
  unint64_t v768;
  char *v769;
  int v770;
  uint64_t v771;
  unint64_t v772;
  _DWORD *v773;
  unint64_t v774;
  int v775;
  char *v776;
  int *v777;
  int v778;
  uint64_t v779;
  char *v780;
  char *v781;
  uint64_t v782;
  __int128 v783;
  int64_t v784;
  uint64_t v785;
  unint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  char *v790;
  char *v791;
  char *v792;
  unint64_t v793;
  char *v794;
  int v795;
  uint64_t v796;
  char *v797;
  char *v798;
  uint64_t v799;
  __int128 v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  _QWORD *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  _OWORD *v819;
  __int128 *v820;
  uint64_t v821;
  __int128 v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  _OWORD *v836;
  __int128 *v837;
  uint64_t v838;
  __int128 v839;
  int v840;
  uint64_t v841;
  unint64_t *v842;
  unint64_t v843;
  _DWORD *v844;
  uint64_t v845;
  unint64_t v846;
  _DWORD *v847;
  unint64_t v848;
  int v849;
  unint64_t v850;
  _DWORD *v851;
  int *v852;
  int v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  _DWORD *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  _DWORD *v862;
  uint64_t v863;
  uint64_t v864;
  _OWORD *v865;
  __int128 *v866;
  uint64_t v867;
  __int128 v868;
  int v869;
  _DWORD *v870;
  uint64_t v871;
  char *v872;
  char *v873;
  char *v874;
  char *v875;
  int v876;
  int v877;
  char *m;
  int v879;
  int64_t v880;
  char *v881;
  uint64_t v882;
  char *v883;
  int64_t v884;
  char *v885;
  char *v886;
  unint64_t v887;
  uint64_t v888;
  char *v889;
  uint64_t v890;
  char *v891;
  char *v892;
  uint64_t v893;
  uint64_t v894;
  _OWORD *v895;
  char *v896;
  uint64_t v897;
  __int128 v898;
  int v899;
  uint64_t v900;
  _QWORD *v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  uint64_t v905;
  _QWORD *v906;
  uint64_t v907;
  uint64_t v908;
  _QWORD *v909;
  _QWORD *v910;
  std::__shared_weak_count *v911;
  void *v912;
  unint64_t *v913;
  unint64_t v914;
  unint64_t *v915;
  unint64_t v916;
  uint64_t **v917;
  uint64_t *v918;
  uint64_t **v919;
  unint64_t v920;
  uint64_t *v921;
  uint64_t *v922;
  void *v923;
  _QWORD *v924;
  _QWORD *v925;
  unint64_t v926;
  unint64_t v927;
  uint64_t v928;
  uint64_t v929;
  _QWORD *v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  uint64_t v934;
  _QWORD *v935;
  __int128 v936;
  uint64_t v937;
  std::__shared_weak_count *v938;
  unint64_t *v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  geo::read_write_lock *v944;
  const char *v945;
  malloc_zone_t *zone;
  uint64_t v947;
  geo::read_write_lock *v948;
  const char *v949;
  malloc_zone_t *v950;
  uint64_t v951;
  geo::read_write_lock *v952;
  const char *v953;
  malloc_zone_t *v954;
  uint64_t v955;
  geo::read_write_lock *v956;
  const char *v957;
  malloc_zone_t *v958;
  uint64_t v959;
  geo::read_write_lock *v960;
  const char *v961;
  malloc_zone_t *v962;
  uint64_t v963;
  geo::read_write_lock *v964;
  const char *v965;
  malloc_zone_t *v966;
  uint64_t v967;
  geo::read_write_lock *v968;
  const char *v969;
  malloc_zone_t *v970;
  uint64_t v971;
  geo::read_write_lock *v972;
  const char *v973;
  malloc_zone_t *v974;
  uint64_t v975;
  geo::read_write_lock *v976;
  const char *v977;
  malloc_zone_t *v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  std::__shared_weak_count *v982;
  unint64_t *v983;
  unint64_t v984;
  uint64_t v985;
  unsigned __int8 v986;
  char *v987;
  void *v988;
  char *v989;
  char *v990;
  __int128 v991;
  _BYTE *v992;
  unint64_t v993;
  std::mutex *v994;
  _QWORD *v995;
  unsigned __int8 v998;
  _QWORD *v999;
  _QWORD *v1000;
  char v1001;
  unsigned __int8 v1002;
  uint64_t v1003;
  uint64_t v1004;
  unsigned __int8 v1005;
  char v1006;
  _QWORD *v1007;
  unsigned __int16 v1008;
  _BYTE *v1009;
  unsigned int v1010;
  _BYTE *v1011;
  unint64_t v1012;
  _BYTE *v1013;
  unint64_t v1014;
  unint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  _BYTE *v1021;
  unint64_t v1022;
  uint64_t v1023;
  _OWORD *v1024;
  __int128 *v1025;
  unint64_t v1026;
  __int128 v1027;
  char v1028;
  uint64_t v1029;
  char *v1030;
  std::__shared_weak_count *v1031;
  unint64_t *v1032;
  unint64_t v1033;
  uint64_t v1034;
  char *v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t v1038;
  _QWORD *v1039;
  _QWORD *v1040;
  _QWORD *v1041;
  _QWORD *v1042;
  md::PointLabelFeature **v1043;
  char *v1044;
  uint64_t v1045;
  std::__shared_weak_count *v1046;
  unint64_t *v1047;
  unint64_t v1048;
  unint64_t *v1049;
  unint64_t v1050;
  uint64_t *v1051;
  uint64_t *v1052;
  uint64_t *v1053;
  unint64_t v1054;
  uint64_t v1055;
  uint64_t *v1056;
  uint64_t *v1057;
  uint64_t *v1058;
  uint64_t v1059;
  uint64_t *v1060;
  _BYTE *v1061;
  int v1062;
  uint64_t v1063;
  int v1064;
  uint64_t **v1065;
  uint64_t *v1066;
  uint64_t v1067;
  _QWORD *v1068;
  void *v1069;
  unint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  char *v1074;
  void *v1075;
  unint64_t v1076;
  char *v1077;
  char *v1078;
  char *v1079;
  __int128 v1080;
  _BYTE *v1081;
  std::__shared_weak_count *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t *v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  geo::read_write_lock *v1091;
  const char *v1092;
  malloc_zone_t *v1093;
  unint64_t *v1094;
  unint64_t v1095;
  std::__shared_weak_count *v1096;
  unint64_t *v1097;
  unint64_t v1098;
  unint64_t v1099;
  unsigned __int8 v1100;
  char *v1101;
  void *v1102;
  char *v1103;
  char *v1104;
  __int128 v1105;
  _BYTE *v1106;
  unint64_t v1107;
  unint64_t v1108;
  std::mutex *v1109;
  _QWORD *v1110;
  _BYTE *v1111;
  _BYTE *v1112;
  uint64_t v1115;
  uint64_t *v1116;
  uint64_t v1117;
  unsigned __int8 v1118;
  uint64_t v1119;
  _QWORD *v1120;
  unsigned __int8 v1121;
  std::__shared_weak_count *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t **v1125;
  unint64_t v1126;
  unint64_t *v1127;
  unint64_t v1128;
  _QWORD *v1129;
  unint64_t v1130;
  unint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  unint64_t *v1137;
  unint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  __int128 v1142;
  uint64_t v1143;
  uint64_t v1144;
  std::__shared_weak_count *v1145;
  unint64_t *v1146;
  unint64_t v1147;
  unint64_t v1148;
  _QWORD *v1149;
  uint64_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  uint64_t v1153;
  unint64_t v1154;
  unint64_t v1155;
  unint64_t v1156;
  uint64_t *v1157;
  uint8x8_t v1158;
  _QWORD *v1159;
  _QWORD *v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  _QWORD *v1164;
  _QWORD *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  _QWORD *v1173;
  _QWORD *v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  _QWORD *v1179;
  _QWORD *v1180;
  _QWORD *v1181;
  std::mutex *v1182;
  std::__shared_weak_count *v1183;
  std::__shared_weak_count *v1184;
  uint64_t v1185;
  _QWORD *v1186;
  float v1187;
  float v1188;
  _BOOL8 v1189;
  unint64_t v1190;
  unint64_t v1191;
  size_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  _QWORD *v1196;
  size_t v1197;
  size_t v1198;
  size_t v1199;
  _QWORD *ii;
  size_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint8x8_t v1205;
  uint64_t v1206;
  _QWORD *v1207;
  uint64_t v1208;
  size_t v1209;
  uint64_t v1210;
  _QWORD *v1211;
  unint64_t v1212;
  unsigned __int8 v1213;
  uint64_t v1214;
  uint64_t v1215;
  unsigned __int8 v1216;
  unsigned __int8 v1217;
  unsigned __int8 v1218;
  unsigned __int8 v1219;
  uint64_t *v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  std::__shared_weak_count *v1227;
  std::__shared_weak_count *v1228;
  int v1229;
  unint64_t *v1230;
  unint64_t v1231;
  int v1232;
  int v1233;
  unint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  unint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  __int128 v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  std::__shared_weak_count *v1252;
  std::__shared_weak_count *v1253;
  uint64_t v1254;
  unint64_t v1255;
  unint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  BOOL v1259;
  unint64_t v1260;
  __int16 v1261;
  unsigned int *v1262;
  uint64_t v1263;
  unsigned int v1264;
  unsigned __int8 v1265;
  uint64_t v1266;
  uint64_t v1267;
  char *v1268;
  uint64_t v1269;
  uint64_t *v1270;
  unint64_t v1271;
  unint64_t v1272;
  int64x2_t *v1273;
  unint64_t v1274;
  int64x2_t v1275;
  uint64_t v1276;
  uint64_t **v1277;
  unint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  __int128 v1289;
  uint64_t v1290;
  uint64_t v1291;
  std::__shared_weak_count *v1292;
  unint64_t *v1293;
  unint64_t v1294;
  unint64_t *v1295;
  unint64_t v1296;
  std::__shared_weak_count *v1297;
  unint64_t *v1298;
  unint64_t v1299;
  _QWORD *v1300;
  uint64_t v1301;
  unint64_t v1302;
  unint64_t v1303;
  std::__shared_weak_count *v1304;
  std::__shared_weak_count *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  std::__shared_weak_count *v1314;
  std::__shared_weak_count *v1315;
  uint64_t *v1316;
  uint64_t *v1317;
  uint64_t v1318;
  std::__shared_weak_count *v1319;
  unint64_t *v1320;
  unint64_t v1321;
  _QWORD *v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  geo::read_write_lock *v1327;
  const char *v1328;
  malloc_zone_t *v1329;
  uint64_t v1330;
  geo::read_write_lock *v1331;
  const char *v1332;
  malloc_zone_t *v1333;
  uint64_t v1334;
  geo::read_write_lock *v1335;
  const char *v1336;
  malloc_zone_t *v1337;
  uint64_t v1338;
  geo::read_write_lock *v1339;
  const char *v1340;
  malloc_zone_t *v1341;
  uint64_t v1342;
  geo::read_write_lock *v1343;
  const char *v1344;
  malloc_zone_t *v1345;
  unint64_t v1346;
  int64_t v1347;
  uint64_t v1348;
  unint64_t *v1349;
  unint64_t v1350;
  unsigned __int8 *v1351;
  unsigned __int8 v1352;
  _QWORD *v1353;
  std::__shared_weak_count *v1354;
  unint64_t *v1355;
  unint64_t v1356;
  uint64_t v1357;
  _QWORD *v1358;
  uint64_t v1359;
  uint64_t v1360;
  _QWORD *v1361;
  _QWORD *v1362;
  unint64_t v1363;
  unint64_t v1364;
  uint8x8_t v1365;
  _QWORD *v1366;
  _QWORD *v1367;
  unint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  _QWORD *v1374;
  float v1375;
  float v1376;
  _BOOL8 v1377;
  unint64_t v1378;
  unint64_t v1379;
  size_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  _QWORD *v1384;
  size_t v1385;
  size_t v1386;
  size_t v1387;
  _QWORD *jj;
  size_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  unint64_t v1392;
  uint8x8_t v1393;
  uint64_t v1394;
  _QWORD *v1395;
  uint64_t v1396;
  size_t v1397;
  uint64_t v1398;
  _QWORD *v1399;
  unint64_t v1400;
  std::__shared_weak_count *v1401;
  unint64_t *v1402;
  unint64_t v1403;
  unint64_t *v1404;
  unint64_t v1405;
  uint64_t *v1406;
  uint64_t *v1407;
  uint64_t *v1408;
  unint64_t v1409;
  uint64_t v1410;
  _QWORD *v1411;
  uint64_t v1412;
  uint64_t *v1413;
  uint64_t v1414;
  uint64_t *v1415;
  _BYTE *v1416;
  int v1417;
  uint64_t v1418;
  int v1419;
  uint64_t **v1420;
  uint64_t *v1421;
  _QWORD *v1422;
  _QWORD *v1423;
  void *v1424;
  unint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  char *v1429;
  void *v1430;
  unint64_t v1431;
  char *v1432;
  char *v1433;
  char *v1434;
  __int128 v1435;
  _BYTE *v1436;
  std::__shared_weak_count *v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  unint64_t *v1442;
  unint64_t v1443;
  unint64_t *v1444;
  unint64_t v1445;
  _QWORD *v1446;
  _QWORD *v1447;
  std::__shared_weak_count *v1448;
  unint64_t *v1449;
  uint64_t v1450;
  unint64_t v1451;
  std::__shared_weak_count *v1452;
  unint64_t *v1453;
  unint64_t v1454;
  unint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  unint64_t *v1458;
  unint64_t v1459;
  std::__shared_weak_count *v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  unint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  _DWORD *v1472;
  unint64_t v1473;
  _DWORD *v1474;
  uint64_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  _DWORD *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  _DWORD *v1487;
  uint64_t v1488;
  _OWORD *v1489;
  __int128 *v1490;
  uint64_t v1491;
  __int128 v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  std::mutex *v1496;
  unint64_t v1497;
  uint64_t *v1498;
  unint64_t *v1499;
  unint64_t v1500;
  std::__shared_weak_count *v1501;
  unint64_t *v1502;
  unint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  unint64_t *v1507;
  unint64_t v1508;
  unsigned __int8 v1509;
  char *v1510;
  void *v1511;
  char *v1512;
  char *v1513;
  __int128 v1514;
  _BYTE *v1515;
  unint64_t v1516;
  std::mutex *v1517;
  _QWORD *v1521;
  uint64_t v1522;
  _QWORD *v1523;
  _BYTE *v1524;
  _BYTE *v1525;
  uint64_t v1528;
  uint64_t v1529;
  int8x8_t v1530;
  uint8x8_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  uint64_t ***v1536;
  uint64_t **v1537;
  uint64_t *v1538;
  unint64_t v1539;
  unsigned int v1540;
  uint64_t v1541;
  uint64_t *v1542;
  uint64_t v1543;
  uint64_t *v1544;
  unsigned __int8 v1545;
  _QWORD *v1546;
  _QWORD *v1547;
  char v1548;
  char *v1549;
  md::PointLabelFeature *v1550;
  __n128 v1551;
  __n128 v1552;
  int v1553;
  __n128 *v1554;
  uint64_t v1555;
  int8x8_t v1556;
  unint64_t v1557;
  unint64_t v1558;
  _QWORD *v1559;
  _QWORD *v1560;
  _QWORD *v1561;
  _QWORD *v1562;
  char *v1563;
  uint64_t ***v1564;
  uint64_t **v1565;
  uint64_t v1566;
  unint64_t v1567;
  uint64_t *v1568;
  float64x2_t *v1569;
  uint64_t v1570;
  uint64_t v1571;
  unint64_t v1572;
  char *v1573;
  float v1574;
  float v1575;
  float v1576;
  float v1577;
  double v1578;
  double v1579;
  double v1580;
  float32x2_t v1581;
  char *v1582;
  float *v1583;
  float32x2_t v1584;
  float32x2_t v1585;
  unint64_t *v1587;
  char *v1588;
  double v1589;
  double v1590;
  double v1591;
  double v1593;
  double v1594;
  double v1595;
  float64_t v1596;
  double v1597;
  double v1598;
  float64_t v1600;
  float64_t v1601;
  double v1602;
  float64x2_t v1603;
  double v1604;
  float64x2_t v1605;
  double v1606;
  __n128 *v1607;
  unint64_t v1608;
  unint64_t v1609;
  __n128 *v1610;
  __n128 *v1611;
  uint64_t v1612;
  unint64_t v1613;
  uint64_t v1614;
  unint64_t v1615;
  char *v1616;
  __n128 *v1617;
  char *v1618;
  unint64_t v1619;
  __n128 v1620;
  __n128 *v1621;
  std::__shared_weak_count *v1622;
  unint64_t *v1623;
  unint64_t v1624;
  unint64_t v1625;
  char *v1626;
  std::__shared_weak_count *v1627;
  unint64_t *v1628;
  unint64_t v1629;
  uint64_t v1630;
  char *v1631;
  uint64_t v1632;
  uint64_t v1633;
  md::PointLabelFeature **v1634;
  char *v1635;
  uint64_t v1636;
  std::__shared_weak_count *v1637;
  unint64_t *v1638;
  unint64_t v1639;
  unint64_t *v1640;
  unint64_t v1641;
  uint64_t **v1642;
  uint64_t *v1643;
  uint64_t **v1644;
  unint64_t v1645;
  uint64_t *v1646;
  uint64_t *v1647;
  uint64_t v1648;
  _QWORD *v1649;
  std::__shared_weak_count *v1650;
  unint64_t *v1651;
  unint64_t v1652;
  unint64_t v1653;
  unint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  char *v1657;
  void *v1658;
  unint64_t v1659;
  char *v1660;
  char *v1661;
  char *v1662;
  __int128 v1663;
  void *v1664;
  _BYTE *v1665;
  uint64_t v1666;
  std::__shared_weak_count *v1667;
  unint64_t *v1668;
  unint64_t v1669;
  std::__shared_weak_count *v1670;
  unint64_t *v1671;
  unint64_t v1672;
  _QWORD *v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  int v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  _OWORD *v1689;
  uint64_t **v1690;
  uint64_t v1691;
  _QWORD **v1692;
  _QWORD **v1693;
  _QWORD **v1694;
  uint64_t **v1695;
  uint64_t v1696;
  std::__shared_weak_count *v1697;
  _QWORD *v1698;
  md::PointLabelFeature *v1700;
  uint64_t v1701;
  unint64_t v1702;
  unint64_t v1703;
  _QWORD **v1705;
  _QWORD *v1706;
  uint64_t *v1707;
  uint64_t v1708;
  unint64_t v1709;
  unint64_t v1710;
  uint64_t *v1711;
  char *v1712;
  uint64_t *v1713;
  _QWORD *v1714;
  int v1715;
  uint64_t v1716;
  md::PointLabelFeature *v1717;
  _BOOL4 v1718;
  uint64_t v1719;
  uint64_t v1720;
  unint64_t v1721;
  uint64_t v1722;
  uint64_t **v1723;
  _BOOL4 v1724;
  uint64_t v1725;
  uint64_t *v1726;
  _BOOL4 v1727;
  uint64_t v1728;
  _QWORD *v1729;
  _BOOL4 v1730;
  _QWORD *v1731;
  uint64_t *v1732;
  uint64_t *v1733;
  uint64_t v1734;
  int64_t v1735;
  unint64_t v1736;
  char *opaque;
  uint64_t v1738;
  _QWORD *v1739;
  __n128 **v1740;
  unsigned int v1741;
  char v1742;
  uint64_t v1743;
  uint64_t v1744;
  unint64_t v1745;
  char *v1746;
  uint64_t **v1747;
  unint64_t v1748;
  uint64_t v1749;
  unint64_t v1750;
  _QWORD *v1751;
  unint64_t v1752;
  uint64_t v1753;
  float v1754;
  char v1755;
  uint64_t v1756;
  char *v1757;
  char v1758;
  int v1759;
  uint64_t v1760;
  uint64_t v1761;
  float64x2_t v1762;
  std::mutex *v1764;
  unsigned int v1765;
  int v1766;
  float **v1767;
  uint64_t *v1768;
  unint64_t v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t *v1772;
  uint64_t v1773;
  void *__src;
  unint64_t __srca;
  char *__srcb;
  void *__srcc;
  uint64_t *__srcd;
  float64x2_t *__srce;
  uint64_t v1780;
  __int16 v1781;
  uint64_t v1782;
  __int128 v1783;
  __int128 v1784;
  _BYTE v1785[27];
  _QWORD *v1786;
  std::__shared_weak_count *v1787;
  uint64_t v1788;
  __int16 v1789;
  uint64_t v1790;
  __int128 v1791;
  __int128 v1792;
  _OWORD v1793[2];
  _QWORD *v1794;
  std::__shared_weak_count *v1795;
  uint64_t v1796;
  __int16 v1797;
  uint64_t v1798;
  __int128 v1799;
  __int128 v1800;
  _BYTE v1801[27];
  _QWORD *v1802;
  std::__shared_weak_count *v1803;
  uint64_t v1804;
  __int16 v1805;
  uint64_t v1806;
  __int128 v1807;
  __int128 v1808;
  _BYTE v1809[27];
  _QWORD *v1810;
  std::__shared_weak_count *v1811;
  uint64_t v1812;
  __int16 v1813;
  uint64_t v1814;
  __int128 v1815;
  __int128 v1816;
  _BYTE v1817[27];
  _QWORD *v1818;
  std::__shared_weak_count *v1819;
  uint64_t v1820;
  __int16 v1821;
  uint64_t v1822;
  __int128 v1823;
  __int128 v1824;
  _OWORD v1825[2];
  _QWORD *v1826;
  std::__shared_weak_count *v1827;
  uint64_t v1828;
  __int16 v1829;
  uint64_t v1830;
  __int128 v1831;
  __int128 v1832;
  _OWORD v1833[2];
  _QWORD *v1834;
  std::__shared_weak_count *v1835;
  uint64_t v1836;
  __int16 v1837;
  uint64_t v1838;
  __int128 v1839;
  __int128 v1840;
  _OWORD v1841[2];
  _QWORD *v1842;
  std::__shared_weak_count *v1843;
  uint64_t v1844;
  __int16 v1845;
  uint64_t v1846;
  __int128 v1847;
  __int128 v1848;
  _OWORD v1849[2];
  _QWORD *v1850;
  std::__shared_weak_count *v1851;
  uint64_t v1852;
  __int16 v1853;
  uint64_t v1854;
  __int128 v1855;
  __int128 v1856;
  _BYTE v1857[27];
  _QWORD *v1858;
  std::__shared_weak_count *v1859;
  uint64_t v1860;
  __int16 v1861;
  uint64_t v1862;
  __int128 v1863;
  __int128 v1864;
  _BYTE v1865[27];
  uint64_t *v1866;
  std::__shared_weak_count *v1867;
  uint64_t v1868;
  __int16 v1869;
  uint64_t v1870;
  __int128 v1871;
  __int128 v1872;
  _OWORD v1873[2];
  _QWORD *v1874;
  std::__shared_weak_count *v1875;
  uint8_t buf[8];
  __int128 v1877;
  uint64_t v1878;
  __int128 v1879;
  __int128 v1880;
  _BYTE v1881[27];
  _QWORD *v1882;
  std::__shared_weak_count *v1883;
  void *v1884[2];
  void *v1885[2];
  int v1886;
  _QWORD *v1887;
  std::__shared_weak_count *v1888;
  void *__p;
  std::__shared_weak_count *v1890;
  unint64_t v1891;
  _QWORD *v1892;
  _QWORD *v1893;
  std::__shared_weak_count *v1894;
  _QWORD v1895[3];
  _QWORD *v1896;
  _QWORD v1897[3];
  _QWORD *v1898;
  _QWORD v1899[3];
  _QWORD *v1900;
  uint8_t v1901[24];
  uint64_t v1902;
  uint64_t v1903;

  v1903 = *MEMORY[0x1E0C80C00];
  *a1 = a4;
  *((_QWORD *)a1 + 1) = *a5;
  v12 = a5[1];
  *((_QWORD *)a1 + 2) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = operator new(0x38uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42DB400;
  v16 = *(_QWORD *)(a3 + 8);
  v15[3] = *(_QWORD *)a3;
  v15[4] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[5] = 0;
  v15[6] = 0;
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 3) = v15 + 3;
  *((_QWORD *)a1 + 4) = v15;
  {
    v1675 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1675, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v20 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 7) = v20;
  *((_QWORD *)a1 + 8) = 0;
  v1695 = (uint64_t **)(a1 + 48);
  *((_QWORD *)a1 + 5) = a1 + 48;
  {
    v1676 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1676, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v21 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 14) = 0;
  *((_QWORD *)a1 + 11) = v21;
  *((_QWORD *)a1 + 12) = 0;
  *((_QWORD *)a1 + 9) = a1 + 80;
  {
    v1677 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1677, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v22 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 18) = 0;
  *((_QWORD *)a1 + 15) = v22;
  *((_QWORD *)a1 + 16) = 0;
  *((_QWORD *)a1 + 13) = a1 + 112;
  {
    v1678 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1678, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v23 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 22) = 0;
  *((_QWORD *)a1 + 19) = v23;
  *((_QWORD *)a1 + 20) = 0;
  *((_QWORD *)a1 + 17) = a1 + 144;
  {
    v1679 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1679, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v24 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 26) = 0;
  v25 = (uint64_t)(a1 + 208);
  *((_QWORD *)a1 + 23) = v24;
  *((_QWORD *)a1 + 24) = 0;
  v1726 = (uint64_t *)(a1 + 176);
  *((_QWORD *)a1 + 21) = a1 + 176;
  {
    v1680 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1680, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v26 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 30) = 0;
  v27 = a1 + 240;
  *((_QWORD *)a1 + 27) = v26;
  *((_QWORD *)a1 + 28) = 0;
  v1747 = (uint64_t **)(a1 + 208);
  *((_QWORD *)a1 + 25) = v25;
  if ((v26 & 1) == 0)
  {
    v25 = (uint64_t)(a1 + 240);
    v27 = a1 + 240;
    if (v1681)
    {
      v1682 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1682, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v27 = a1 + 240;
    }
  }
  *((_QWORD *)a1 + 31) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)a1 + 32) = 0;
  *((_QWORD *)a1 + 29) = v27;
  *((_QWORD *)a1 + 33) = 0;
  *((_QWORD *)a1 + 34) = 0;
  *((_DWORD *)a1 + 70) = 0;
  *((_WORD *)a1 + 144) = *(_WORD *)a2;
  *(_QWORD *)(a1 + 292) = *(_QWORD *)(a2 + 4);
  v1689 = a1 + 312;
  v28 = 1 << *(_BYTE *)(a2 + 1);
  v29 = 1.0 / (double)v28;
  v30 = v29 * (double)*(int *)(a2 + 8);
  v31 = v29 * (double)(v28 + ~*(_DWORD *)(a2 + 4));
  *((double *)a1 + 39) = v30;
  *((double *)a1 + 40) = v31;
  *((double *)a1 + 41) = v30 + v29;
  *((double *)a1 + 42) = v31 + v29;
  v1897[0] = &off_1E42D48D0;
  v1898 = v1897;
  v1895[0] = &off_1E42D4918;
  v1896 = v1895;
  v1900 = v1899;
  v1899[0] = &off_1E42D4918;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v32 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v32))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v32, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTileDecode", (const char *)&unk_1A0189141, buf, 2u);
  }

  v33 = v1896;
  if (v1896 == v1895)
  {
    v34 = 4;
    v33 = v1895;
  }
  else
  {
    if (!v1896)
      goto LABEL_23;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_23:
  v1692 = (_QWORD **)(a1 + 72);
  v1693 = (_QWORD **)(a1 + 40);
  v1694 = (_QWORD **)(a1 + 104);
  v1690 = (uint64_t **)(a1 + 136);
  v1705 = (_QWORD **)(a1 + 168);
  v1723 = (uint64_t **)(a1 + 200);
  v35 = v1898;
  if (v1898 == v1897)
  {
    v36 = 4;
    v35 = v1897;
  }
  else
  {
    if (!v1898)
      goto LABEL_28;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_28:
  v1764 = *(std::mutex **)(*a5 + 288);
  md::LabelFeaturePool::prepareAddFeaturesForTile((uint64_t)v1764, (unint64_t **)a1 + 3);
  v1881[16] = 0;
  v37 = a1;
  *(_DWORD *)&v1881[20] = 0;
  *(_WORD *)&v1881[24] = 256;
  v1881[26] = 0;
  v1883 = 0;
  v1882 = 0;
  v38 = *(_OWORD *)(a1 + 328);
  v1880 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)v1881 = v38;
  *(_QWORD *)&v1879 = *(_QWORD *)a3;
  *((_QWORD *)&v1879 + 1) = a1;
  v39 = *((_QWORD *)a1 + 38);
  *(_QWORD *)buf = *a5;
  v1878 = v39;
  v1877 = *((_OWORD *)a1 + 18);
  v40 = atomic_load((unsigned __int8 *)(*(_QWORD *)buf + 3392));
  v1881[24] = v40 & 1;
  v1881[26] = a6;
  v41 = v37[289];
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(v42, "tileZBias");
  v1881[16] = (v41 - v43) & ~((v41 - v43) << 24 >> 31);

  v45 = (_QWORD *)*a7;
  v44 = (std::__shared_weak_count *)a7[1];
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
  }
  v48 = v1883;
  v1882 = v45;
  v1883 = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *a1;
  v52 = v51 == 11;
  v1727 = v51 == 13;
  v1724 = v51 == 5;
  LODWORD(v1691) = v51 == 7;
  HIDWORD(v1691) = v51 == 8;
  v53 = v51 == 10;
  if (v51 == 3)
    v53 = 1;
  v1730 = v53;
  v54 = &md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::daVinciTiles;
  if (v51 != 10)
  {
    if ((v51 - 9) > 8)
      v54 = &ggl::vSCompositingShaderVertShaderFunctionConstantMapping(void)::ref;
    else
      v54 = *(&off_1E42EE098 + (char)(v51 - 9));
  }
  v55 = atomic_load((unsigned __int8 *)(*a5 + 3622));
  if ((v55 & 1) != 0)
  {
    v56 = (v51 < 0x12) & (0x2164Du >> v51);
    v57 = (v51 < 0x10) & (0xC60Bu >> v51);
  }
  else
  {
    LOBYTE(v56) = 0;
    v52 = 0;
    v57 = 0;
    v1730 = 0;
    v1727 = 0;
    v1724 = 0;
    v1691 = 0;
  }
  v58 = v54
      - (_BYTE *)&md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::daVinciTiles;
  v1718 = v52;
  if ((v56 & 1) != 0 || v52)
  {
    v59 = geo::codec::VectorTile::poisCount(*(geo::codec::VectorTile **)a3);
    if (v59)
    {
      v60 = 4 * ((v51 & 0xFE) == 14);
      if (v58 != 5)
        v60 = 2;
      if (*a1 == 11)
        v61 = 3;
      else
        v61 = v60;
      v62 = (uint64_t *)geo::codec::VectorTile::pois(*(geo::codec::VectorTile **)a3);
      v1868 = *(_QWORD *)buf;
      v1869 = v1877;
      v1870 = *(_QWORD *)((char *)&v1877 + 4);
      v1871 = v1879;
      v1872 = v1880;
      v1873[0] = *(_OWORD *)v1881;
      *(_OWORD *)((char *)v1873 + 11) = *(_OWORD *)&v1881[11];
      v1874 = v1882;
      v1875 = v1883;
      if (v1883)
      {
        v63 = (unint64_t *)&v1883->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      md::LabelFeaturePool::addPointFeatures((uint64_t)v1764, (unint64_t *)a3, v62, v59, &v1868, v1723, 1, v61);
      v65 = v1875;
      if (v1875)
      {
        v66 = (unint64_t *)&v1875->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }
    v68 = (_QWORD *)geo::codec::VectorTile::removedFeatureIDs(*(geo::codec::VectorTile **)a3);
    if (*v68 != v68[1])
    {
      std::mutex::lock(v1764);
      v1735 = v58;
      v1741 = v57;
      v69 = *(geo::codec::VectorTile **)a3;
      v70 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
      if (!v70
        || *((_BYTE *)v70 + 436)
        || (*((_BYTE *)v70 + 436) = 1,
            v318 = geo::codec::VectorTile::removedFeatureIDs(v69),
            v319 = *(uint64_t **)v318,
            v1768 = *(uint64_t **)(v318 + 8),
            *(uint64_t **)v318 == v1768))
      {
LABEL_64:
        std::mutex::unlock(v1764);
        v57 = v1741;
        v58 = v1735;
        goto LABEL_65;
      }
      v1757 = &v1764[8].__m_.__opaque[16];
      while (1)
      {
        v321 = *v319;
        v320 = v319[1];
        v322 = *(_QWORD *)v1764[8].__m_.__opaque;
        if (v322)
        {
          v323 = (uint8x8_t)vcnt_s8((int8x8_t)v322);
          v323.i16[0] = vaddlv_u8(v323);
          if (v323.u32[0] > 1uLL)
          {
            v25 = *v319;
            if (v321 >= v322)
              v25 = v321 % v322;
          }
          else
          {
            v25 = (v322 - 1) & v321;
          }
          v324 = *(_QWORD ***)(v1764[8].__m_.__sig + 8 * v25);
          if (v324)
          {
            v325 = *v324;
            if (*v324)
            {
              if (v323.u32[0] < 2uLL)
              {
                while (1)
                {
                  v327 = v325[1];
                  if (v327 == v321)
                  {
                    if (v325[2] == v321)
                      goto LABEL_523;
                  }
                  else if ((v327 & (v322 - 1)) != v25)
                  {
                    goto LABEL_464;
                  }
                  v325 = (_QWORD *)*v325;
                  if (!v325)
                    goto LABEL_464;
                }
              }
              do
              {
                v326 = v325[1];
                if (v326 == v321)
                {
                  if (v325[2] == v321)
                    goto LABEL_523;
                }
                else
                {
                  if (v326 >= v322)
                    v326 %= v322;
                  if (v326 != v25)
                    break;
                }
                v325 = (_QWORD *)*v325;
              }
              while (v325);
            }
          }
        }
LABEL_464:
        v325 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[8].__m_.__opaque[24]
                                                                             + 16))(*(_QWORD *)&v1764[8].__m_.__opaque[24], 80, 8);
        v1884[0] = v325;
        v1884[1] = &v1764[8].__m_.__opaque[24];
        *v325 = 0;
        v325[1] = v321;
        v325[2] = v321;
        *(_OWORD *)(v325 + 3) = 0u;
        *(_OWORD *)(v325 + 5) = 0u;
        *(_OWORD *)(v325 + 7) = 0u;
        v325[9] = 0;
        v325[4] = v325 + 8;
        v325[5] = v325 + 8;
        v325[6] = v325 + 8;
        v325[7] = 2;
        LOBYTE(v1885[0]) = 1;
        v328 = (float)(unint64_t)(*(_QWORD *)&v1764[8].__m_.__opaque[32] + 1);
        v329 = *(float *)&v1764[8].__m_.__opaque[40];
        if (!v322 || (float)(v329 * (float)v322) < v328)
          break;
LABEL_513:
        v352 = *(_QWORD **)(v1764[8].__m_.__sig + 8 * v25);
        if (v352)
        {
          *v325 = *v352;
LABEL_521:
          *v352 = v325;
          goto LABEL_522;
        }
        *v325 = *(_QWORD *)&v1764[8].__m_.__opaque[16];
        *(_QWORD *)&v1764[8].__m_.__opaque[16] = v325;
        *(_QWORD *)(v1764[8].__m_.__sig + 8 * v25) = v1757;
        if (*v325)
        {
          v353 = *(_QWORD *)(*v325 + 8);
          if ((v322 & (v322 - 1)) != 0)
          {
            if (v353 >= v322)
              v353 %= v322;
          }
          else
          {
            v353 &= v322 - 1;
          }
          v352 = (_QWORD *)(v1764[8].__m_.__sig + 8 * v353);
          goto LABEL_521;
        }
LABEL_522:
        ++*(_QWORD *)&v1764[8].__m_.__opaque[32];
LABEL_523:
        if (md::DebugStreamingPOIFeatureID)
          _ZF = md::DebugStreamingPOIFeatureID == v321;
        else
          _ZF = 0;
        if (_ZF)
        {
          if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
          v25 = (uint64_t)(id)GEOGetVectorKitStreamingPOILog_log;
          if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEBUG))
          {
            md::HighlightHelper::debugTileToString((std::string *)v1884, *(_QWORD *)a3 + 4);
            v355 = v1884;
            if (SHIBYTE(v1885[0]) < 0)
              v355 = (void **)v1884[0];
            *(_DWORD *)v1901 = 136315394;
            *(_QWORD *)&v1901[4] = v355;
            *(_WORD *)&v1901[12] = 2048;
            *(_QWORD *)&v1901[14] = v320;
            _os_log_impl(&dword_19F029000, (os_log_t)v25, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::add removeFeatureID, tile=(%s), removeVersion=%llu", v1901, 0x16u);
            if (SHIBYTE(v1885[0]) < 0)
              operator delete(v1884[0]);
          }

        }
        v357 = v325[4];
        v356 = (unint64_t *)v325[5];
        v358 = ((uint64_t)v356 - v357) >> 3;
        v359 = v325[7];
        if (v359 >= v358 + 1)
          goto LABEL_553;
        v360 = v325[6];
        v361 = (1 << -(char)__clz(v359 + 1));
        if (v359 >= 0xFFFFFFFFFFFFFFFELL)
          v361 = 1;
        if (v361 <= v358 + 1)
          v362 = v358 + 1;
        else
          v362 = v361;
        v25 = (uint64_t)malloc_type_malloc(8 * v362, 0x100004000313F17uLL);
        v363 = (char *)v325[4];
        v364 = (char *)v325[5];
        if (v363 != v364)
        {
          v365 = v364 - v363 - 8;
          v366 = (_QWORD *)v25;
          v367 = (char *)v325[4];
          if (v365 >= 0x18)
          {
            v366 = (_QWORD *)v25;
            v367 = (char *)v325[4];
            if ((unint64_t)(v25 - (_QWORD)v363) >= 0x20)
            {
              v368 = (v365 >> 3) + 1;
              v369 = 8 * (v368 & 0x3FFFFFFFFFFFFFFCLL);
              v366 = (_QWORD *)(v25 + v369);
              v370 = (__int128 *)(v363 + 16);
              v371 = (_OWORD *)(v25 + 16);
              v372 = v368 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v373 = *v370;
                *(v371 - 1) = *(v370 - 1);
                *v371 = v373;
                v370 += 2;
                v371 += 2;
                v372 -= 4;
              }
              while (v372);
              if (v368 == (v368 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_550;
              v367 = &v363[v369];
            }
          }
          do
          {
            v374 = *(_QWORD *)v367;
            v367 += 8;
            *v366++ = v374;
          }
          while (v367 != v364);
        }
LABEL_550:
        if (v357 != v360)
          free(v363);
        v325[4] = v25;
        v356 = (unint64_t *)(v25 + 8 * v358);
        v325[7] = v362;
LABEL_553:
        *v356 = v320;
        v325[5] = v356 + 1;
        if (v320 > v325[3])
        {
          v325[3] = v320;
          v375 = &v1764[5].__m_.__opaque[40];
          while (1)
          {
            v375 = *(char **)v375;
            if (!v375)
              break;
            v376 = *((_QWORD *)v375 + 2);
            if (v376)
              v377 = v376 + 8;
            else
              v377 = 0;
            if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v377 + 8) + 160))(*(_QWORD *)(v377 + 8)) == v321)
            {
              v378 = *((_QWORD *)v375 + 2);
              if (v378)
                v379 = v378 + 8;
              else
                v379 = 0;
              md::PointLabelFeature::setPOIUpdateRemoveVersion(*(int64x2_t **)(v379 + 8), v320);
              break;
            }
          }
        }
        v319 += 2;
        if (v319 == v1768)
          goto LABEL_64;
      }
      v330 = (v322 & (v322 - 1)) != 0;
      if (v322 < 3)
        v330 = 1;
      v331 = v330 | (2 * v322);
      v332 = vcvtps_u32_f32(v328 / v329);
      if (v331 <= v332)
        prime = v332;
      else
        prime = v331;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v322 = *(_QWORD *)v1764[8].__m_.__opaque;
      if (prime <= v322)
      {
        if (prime >= v322)
          goto LABEL_500;
        v345 = vcvtps_u32_f32((float)*(unint64_t *)&v1764[8].__m_.__opaque[32] / *(float *)&v1764[8].__m_.__opaque[40]);
        if (v322 < 3 || (v346 = (uint8x8_t)vcnt_s8((int8x8_t)v322), v346.i16[0] = vaddlv_u8(v346), v346.u32[0] > 1uLL))
        {
          v345 = std::__next_prime(v345);
        }
        else
        {
          v347 = 1 << -(char)__clz(v345 - 1);
          if (v345 >= 2)
            v345 = v347;
        }
        if (prime <= v345)
          prime = v345;
        if (prime >= v322)
        {
          v322 = *(_QWORD *)v1764[8].__m_.__opaque;
LABEL_500:
          if ((v322 & (v322 - 1)) != 0)
          {
            if (v321 >= v322)
              v25 = v321 % v322;
            else
              v25 = v321;
          }
          else
          {
            v25 = (v322 - 1) & v321;
          }
          goto LABEL_513;
        }
        if (!prime)
        {
          sig = v1764[8].__m_.__sig;
          v1764[8].__m_.__sig = 0;
          if (sig)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[8].__m_.__opaque[8] + 40))(*(_QWORD *)&v1764[8].__m_.__opaque[8], sig, 8 * *(_QWORD *)v1764[8].__m_.__opaque);
          v322 = 0;
          *(_QWORD *)v1764[8].__m_.__opaque = 0;
          goto LABEL_500;
        }
      }
      v334 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)&v1764[8].__m_.__opaque[8] + 16))(*(_QWORD *)&v1764[8].__m_.__opaque[8], 8 * prime, 8);
      v335 = v1764[8].__m_.__sig;
      v1764[8].__m_.__sig = v334;
      if (v335)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[8].__m_.__opaque[8] + 40))(*(_QWORD *)&v1764[8].__m_.__opaque[8], v335, 8 * *(_QWORD *)v1764[8].__m_.__opaque);
      v336 = 0;
      *(_QWORD *)v1764[8].__m_.__opaque = prime;
      do
        *(_QWORD *)(v1764[8].__m_.__sig + 8 * v336++) = 0;
      while (prime != v336);
      v337 = *(_QWORD **)v1757;
      if (!*(_QWORD *)v1757)
      {
LABEL_499:
        v322 = prime;
        goto LABEL_500;
      }
      v338 = v337[1];
      v339 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v340 = v338 & v339;
        *(_QWORD *)(v1764[8].__m_.__sig + 8 * v340) = v1757;
        for (i = (_QWORD *)*v337; *v337; i = (_QWORD *)*v337)
        {
          v342 = i[1] & v339;
          if (v342 == v340)
          {
            v337 = i;
          }
          else
          {
            v343 = v1764[8].__m_.__sig;
            if (*(_QWORD *)(v343 + 8 * v342))
            {
              *v337 = *i;
              v344 = 8 * v342;
              *i = **(_QWORD **)(v1764[8].__m_.__sig + v344);
              **(_QWORD **)(v1764[8].__m_.__sig + v344) = i;
            }
            else
            {
              *(_QWORD *)(v343 + 8 * v342) = v337;
              v337 = i;
              v340 = v342;
            }
          }
        }
        goto LABEL_499;
      }
      if (v338 >= prime)
        v338 %= prime;
      *(_QWORD *)(v1764[8].__m_.__sig + 8 * v338) = v1757;
      v348 = (_QWORD *)*v337;
      if (!*v337)
        goto LABEL_499;
      while (1)
      {
        v350 = v348[1];
        if (v350 >= prime)
          v350 %= prime;
        if (v350 != v338)
        {
          v351 = v1764[8].__m_.__sig;
          if (!*(_QWORD *)(v351 + 8 * v350))
          {
            *(_QWORD *)(v351 + 8 * v350) = v337;
            goto LABEL_504;
          }
          *v337 = *v348;
          v349 = 8 * v350;
          *v348 = **(_QWORD **)(v1764[8].__m_.__sig + v349);
          **(_QWORD **)(v1764[8].__m_.__sig + v349) = v348;
          v348 = v337;
        }
        v350 = v338;
LABEL_504:
        v337 = v348;
        v348 = (_QWORD *)*v348;
        v338 = v350;
        if (!v348)
          goto LABEL_499;
      }
    }
  }
LABEL_65:
  if (!v57)
    goto LABEL_577;
  v71 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)a3);
  if (!v71)
    goto LABEL_577;
  v1748 = v71;
  v1715 = v51 & 0xFE;
  if (v1715 == 14)
    v72 = 5;
  else
    v72 = 2;
  v73 = 4 * ((v51 & 0xFE) == 14);
  if (v58 != 5)
    v73 = v72;
  v1742 = v73;
  v74 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)a3);
  __src = *(void **)buf;
  v1860 = *(_QWORD *)buf;
  v1861 = v1877;
  v1862 = *(_QWORD *)((char *)&v1877 + 4);
  v1863 = v1879;
  v1864 = v1880;
  *(_OWORD *)v1865 = *(_OWORD *)v1881;
  *(_OWORD *)&v1865[11] = *(_OWORD *)&v1881[11];
  v75 = v1883;
  v1866 = v1882;
  v1867 = v1883;
  if (v1883)
  {
    v76 = (unint64_t *)&v1883->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  std::mutex::lock(v1764);
  v78 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
  if (!v78)
  {
    std::mutex::unlock(v1764);
    if (v75)
      goto LABEL_333;
    goto LABEL_337;
  }
  v79 = v78;
  std::mutex::unlock(v1764);
  memset(v1901, 0, sizeof(v1901));
  {
    v1687 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1687, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v1902 = mdm::Allocator::instance(void)::alloc;
  v81 = *(_QWORD *)v1901;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) <= 0x1F)
  {
    v82 = *(_QWORD *)&v1901[8];
    v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v85 = *(_QWORD *)v1901;
    v84 = *(_QWORD *)&v1901[8];
    v86 = v83 + 24 * ((v82 - v81) / 24);
    if (*(_QWORD *)&v1901[8] != *(_QWORD *)v1901)
    {
      do
      {
        v87 = *(_OWORD *)(v84 - 24);
        *(_QWORD *)(v86 - 8) = *(_QWORD *)(v84 - 8);
        *(_OWORD *)(v86 - 24) = v87;
        v86 -= 24;
        v84 -= 24;
      }
      while (v84 != v85);
      v84 = *(_QWORD *)v1901;
    }
    *(_QWORD *)v1901 = v86;
    *(_QWORD *)&v1901[8] = v83 + 24 * ((v82 - v81) / 24);
    v88 = *(_QWORD *)&v1901[16];
    *(_QWORD *)&v1901[16] = v83 + 768;
    if (v84)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 40))(v1902, v84, v88 - v84);
  }
  *(_OWORD *)v1885 = 0u;
  *(_OWORD *)v1884 = 0u;
  v1886 = 1065353216;
  std::mutex::lock(v1764);
  v89 = geo::codec::VectorTile::tileLabelLines(*(geo::codec::VectorTile **)a3);
  v90 = 0;
  v1736 = (unint64_t)(v79 + 3);
LABEL_85:
  if (v90 < geo::codec::VectorTile::tileLabelLinesCount(*(geo::codec::VectorTile **)a3))
  {
    v1765 = v90;
    v91 = geo::codec::VectorTile::labelLineFeatureSections(*(geo::codec::VectorTile **)a3);
    if (!*(_WORD *)(v89 + 42))
      goto LABEL_84;
    v92 = v91;
    v93 = 0;
    v94 = *(_DWORD *)(v89 + 32);
    v95 = (unsigned int *)(v91 + 40 * v94);
    v96 = v1866;
    while (1)
    {
      v97 = *v95;
      v98 = v74 + 168 * *v95;
      if (v96 && (v99 = *v96) != 0)
      {
        if (*(_QWORD *)(v98 + 40) == v99)
          goto LABEL_103;
        v100 = *(unsigned __int8 *)(v98 + 74);
        if (*(_BYTE *)(v98 + 74))
        {
          v101 = *(_QWORD *)(*(_QWORD *)a3 + 3528) + 8 * *(unsigned int *)(v98 + 64);
          v102 = 8 * v100;
          v103 = (_QWORD *)v101;
          while (*v103 != v99)
          {
            ++v103;
            v102 -= 8;
            if (!v102)
            {
              v103 = (_QWORD *)(v101 + 8 * v100);
              break;
            }
          }
          if (v100 != ((uint64_t)v103 - v101) >> 3)
          {
LABEL_103:
            v104 = 1;
            goto LABEL_104;
          }
        }
      }
      else if (v74 && *(unsigned __int8 *)(v74 + 168 * v97 + 153) - 1 < 2
             || geo::codec::featureGetNativeLabelCount(v74 + 168 * v97)
             || geo::codec::featureGetNativeShieldCount(v74 + 168 * v97)
             || *(_BYTE *)(v74 + 168 * v97 + 150))
      {
        goto LABEL_103;
      }
      if (*((_BYTE *)__src + 200) != 2)
      {
        v105 = *(unsigned __int16 *)(v89 + 42);
        goto LABEL_105;
      }
      v104 = 0;
LABEL_104:
      v105 = *(unsigned __int16 *)(v89 + 42);
      if (!*((_BYTE *)v95 + 31))
      {
        if (*(_WORD *)(v89 + 42))
        {
          v106 = 0;
          v107 = (_BYTE *)(v92 + 40 * v94 + 32);
          do
          {
            if (!*v107)
            {
              v108 = *((unsigned __int16 *)v107 - 4) | (*((_DWORD *)v107 - 8) << 16);
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)v1884, v108, v108);
              v105 = *(unsigned __int16 *)(v89 + 42);
            }
            ++v106;
            v107 += 40;
          }
          while (v106 < v105);
        }
        v109 = (uint64_t *)(v74 + 168 * *v95);
        v1890 = 0;
        __p = 0;
        v1891 = 0;
        if ((v104 & 1) != 0)
        {
          md::LabelFeaturePool::addLineFeature(&v1893, (uint64_t)v1764, v109, (char **)&__p, v89, (uint64_t)&v1860, v1736, v1742);
          v110 = (uint64_t)v1893;
          v111 = v1894;
          if (v1894)
          {
            p_shared_weak_owners = &v1894->__shared_weak_owners_;
            do
              v113 = __ldxr((unint64_t *)p_shared_weak_owners);
            while (__stxr(v113 + 1, (unint64_t *)p_shared_weak_owners));
          }
          v114 = (uint64_t **)(a1 + 48);
          while (1)
          {
            v115 = *v114;
            v116 = v114;
            if (!*v114)
              break;
            while (1)
            {
              v114 = (uint64_t **)v115;
              v117 = v115[5];
              if ((unint64_t)v111 < v117)
                break;
              if (v117 >= (unint64_t)v111)
              {
                if (v111)
                  std::__shared_weak_count::__release_weak(v111);
                goto LABEL_128;
              }
              v115 = v114[1];
              if (!v115)
              {
                v116 = v114 + 1;
                goto LABEL_125;
              }
            }
          }
LABEL_125:
          v118 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 7) + 16))(*((_QWORD *)a1 + 7), 48, 8);
          v118[4] = v110;
          v118[5] = (uint64_t)v111;
          *v118 = 0;
          v118[1] = 0;
          v118[2] = (uint64_t)v114;
          *v116 = v118;
          v119 = (_QWORD *)**v1693;
          if (v119)
          {
            *v1693 = v119;
            v118 = *v116;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 6), v118);
          ++*((_QWORD *)a1 + 8);
LABEL_128:
          if (v1865[25])
          {
            v120 = v1893;
            v121 = *(_QWORD **)&v1901[8];
            if (*(_QWORD *)&v1901[8] >= *(_QWORD *)&v1901[16])
            {
              v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3);
              v134 = v133 + 1;
              if (v133 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) > v134)
                v134 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3);
              v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) >= 0x555555555555555
                   ? 0xAAAAAAAAAAAAAAALL
                   : v134;
              if (v135)
              {
                v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 16))(v1902, 24 * v135, 8);
                v137 = (_QWORD *)(v136 + 24 * v133);
                v138 = v136 + 24 * v135;
                if (v136)
                {
                  *v137 = v120;
                  v139 = v136 + 24 * v133;
                  *(_QWORD *)(v139 + 8) = 0;
                  *(_QWORD *)(v139 + 16) = 0;
                }
              }
              else
              {
                v138 = 0;
                v137 = (_QWORD *)(8 * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3));
              }
              v143 = *(_QWORD *)v1901;
              v142 = *(_QWORD *)&v1901[8];
              v144 = v137;
              if (*(_QWORD *)&v1901[8] != *(_QWORD *)v1901)
              {
                do
                {
                  v145 = *(_OWORD *)(v142 - 24);
                  *(v144 - 1) = *(_QWORD *)(v142 - 8);
                  *(_OWORD *)(v144 - 3) = v145;
                  v144 -= 3;
                  v142 -= 24;
                }
                while (v142 != v143);
                v142 = *(_QWORD *)v1901;
              }
              v122 = v137 + 3;
              *(_QWORD *)v1901 = v144;
              *(_QWORD *)&v1901[8] = v137 + 3;
              v146 = *(_QWORD *)&v1901[16];
              *(_QWORD *)&v1901[16] = v138;
              if (v142)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 40))(v1902, v142, v146 - v142);
            }
            else
            {
              if (*(_QWORD *)&v1901[8])
              {
                *(_QWORD *)(*(_QWORD *)&v1901[8] + 8) = 0;
                v121[2] = 0;
                *v121 = v120;
              }
              v122 = v121 + 3;
            }
            *(_QWORD *)&v1901[8] = v122;
            if (v122 != *(_QWORD **)v1901 && 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v122 - *(_QWORD *)v1901) >> 3) >= 0x20)
            {
              md::LabelFeatureStyler::styleLabelFeatures(*((unsigned int **)__src + 37), (char **)v1901, 1u, 1, *(_QWORD *)(*((_QWORD *)__src + 19) + 32));
              *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
              std::mutex::unlock(v1764);
              if (v1764)
              {
                std::mutex::lock(v1764);
                goto LABEL_172;
              }
LABEL_2538:
              std::__throw_system_error(1, "unique_lock::lock: references null mutex");
LABEL_2540:
              __break(1u);
              return;
            }
          }
LABEL_172:
          v124 = v1894;
          if (v1894)
          {
            v147 = &v1894->__shared_owners_;
            do
              v141 = __ldaxr((unint64_t *)v147);
            while (__stlxr(v141 - 1, (unint64_t *)v147));
LABEL_175:
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
        }
        else
        {
          md::LabelFeaturePool::addUnnamedLineFeature(&v1893, (uint64_t)v1764, v109, (char **)&__p, v89, (uint64_t)&v1860, v1736, v1742);
          v123 = (uint64_t)v1893;
          v124 = v1894;
          if (v1894)
          {
            v125 = &v1894->__shared_weak_owners_;
            do
              v126 = __ldxr((unint64_t *)v125);
            while (__stxr(v126 + 1, (unint64_t *)v125));
          }
          v127 = (uint64_t **)(a1 + 80);
          while (1)
          {
            v128 = *v127;
            v129 = v127;
            if (!*v127)
              break;
            while (1)
            {
              v127 = (uint64_t **)v128;
              v130 = v128[5];
              if ((unint64_t)v124 < v130)
                break;
              if (v130 >= (unint64_t)v124)
              {
                if (!v124)
                  goto LABEL_177;
                std::__shared_weak_count::__release_weak(v124);
                goto LABEL_159;
              }
              v128 = v127[1];
              if (!v128)
              {
                v129 = v127 + 1;
                goto LABEL_142;
              }
            }
          }
LABEL_142:
          v131 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 11) + 16))(*((_QWORD *)a1 + 11), 48, 8);
          v131[4] = v123;
          v131[5] = (uint64_t)v124;
          *v131 = 0;
          v131[1] = 0;
          v131[2] = (uint64_t)v127;
          *v129 = v131;
          v132 = (_QWORD *)**v1692;
          if (v132)
          {
            *v1692 = v132;
            v131 = *v129;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 10), v131);
          ++*((_QWORD *)a1 + 12);
          v124 = v1894;
          if (v1894)
          {
LABEL_159:
            v140 = (unint64_t *)&v124->__shared_owners_;
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            goto LABEL_175;
          }
        }
LABEL_177:
        if (__p)
          operator delete(__p);
LABEL_84:
        v90 = v1765 + 1;
        v89 += 48;
        goto LABEL_85;
      }
LABEL_105:
      ++v93;
      v95 += 10;
      if (v93 >= v105)
        goto LABEL_84;
    }
  }
  if (*(_QWORD *)v1901 != *(_QWORD *)&v1901[8])
  {
    md::LabelFeatureStyler::styleLabelFeatures(*((unsigned int **)__src + 37), (char **)v1901, 1u, 1, *(_QWORD *)(*((_QWORD *)__src + 19) + 32));
    *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
    std::mutex::unlock(v1764);
    if (!v1764)
      goto LABEL_2538;
    std::mutex::lock(v1764);
  }
  std::mutex::unlock(v1764);
  std::mutex::lock(v1764);
  LODWORD(v148) = 0;
  v1890 = 0;
  __p = 0;
  v1891 = 0;
  while (2)
  {
    if (v1866 && (v149 = *v1866) != 0)
    {
      if (*(_QWORD *)(v74 + 40) != v149)
      {
        v150 = *(unsigned __int8 *)(v74 + 74);
        if (!*(_BYTE *)(v74 + 74))
          goto LABEL_273;
        v151 = *(_QWORD *)(*(_QWORD *)a3 + 3528) + 8 * *(unsigned int *)(v74 + 64);
        v152 = 8 * v150;
        v153 = (_QWORD *)v151;
        while (*v153 != v149)
        {
          ++v153;
          v152 -= 8;
          if (!v152)
          {
            v153 = (_QWORD *)(v151 + 8 * v150);
            break;
          }
        }
        if (v150 == ((uint64_t)v153 - v151) >> 3)
          goto LABEL_273;
      }
    }
    else if ((!v74 || *(unsigned __int8 *)(v74 + 153) - 1 >= 2)
           && !geo::codec::featureGetNativeLabelCount(v74)
           && !geo::codec::featureGetNativeShieldCount(v74))
    {
LABEL_273:
      if (*((_BYTE *)__src + 200) != 2)
        goto LABEL_183;
      v154 = 0;
      goto LABEL_199;
    }
    v154 = 1;
LABEL_199:
    v155 = (char *)__p;
    v1890 = (std::__shared_weak_count *)__p;
    v156 = *(unsigned int *)(v74 + 100);
    if (!(_DWORD)v156)
      goto LABEL_183;
    v1755 = v154;
    v157 = 0;
    v1766 = v148;
    v158 = (_DWORD)v148 << 16;
    v159 = (char *)v1891;
    v160 = (char *)__p;
    do
    {
      if (v1884[1])
      {
        v161 = (v158 + v157);
        v162 = (uint8x8_t)vcnt_s8((int8x8_t)v1884[1]);
        v162.i16[0] = vaddlv_u8(v162);
        if (v162.u32[0] > 1uLL)
        {
          v163 = (v158 + v157);
          if (v1884[1] <= (void *)v161)
            v163 = v161 % (unint64_t)v1884[1];
        }
        else
        {
          v163 = (LODWORD(v1884[1]) - 1) & v161;
        }
        v164 = (uint64_t **)*((_QWORD *)v1884[0] + v163);
        if (v164)
        {
          v165 = *v164;
          if (v165)
          {
            if (v162.u32[0] < 2uLL)
            {
              while (1)
              {
                v167 = v165[1];
                if (v167 == v161)
                {
                  if (*((_DWORD *)v165 + 4) == (_DWORD)v161)
                    goto LABEL_241;
                }
                else if ((v167 & ((unint64_t)v1884[1] - 1)) != v163)
                {
                  goto LABEL_221;
                }
                v165 = (uint64_t *)*v165;
                if (!v165)
                  goto LABEL_221;
              }
            }
            do
            {
              v166 = v165[1];
              if (v166 == v161)
              {
                if (*((_DWORD *)v165 + 4) == (_DWORD)v161)
                  goto LABEL_241;
              }
              else
              {
                if ((void *)v166 >= v1884[1])
                  v166 %= (unint64_t)v1884[1];
                if (v166 != v163)
                  break;
              }
              v165 = (uint64_t *)*v165;
            }
            while (v165);
          }
        }
      }
LABEL_221:
      if (v160 >= v159)
      {
        v169 = (v160 - v155) >> 2;
        v170 = v169 + 1;
        if ((unint64_t)(v169 + 1) >> 62)
        {
          __p = v155;
          abort();
        }
        if ((v159 - v155) >> 1 > v170)
          v170 = (v159 - v155) >> 1;
        if ((unint64_t)(v159 - v155) >= 0x7FFFFFFFFFFFFFFCLL)
          v171 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v171 = v170;
        if (v171)
        {
          if (v171 >> 62)
LABEL_2486:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v172 = operator new(4 * v171);
        }
        else
        {
          v172 = 0;
        }
        v173 = &v172[4 * v169];
        *v173 = v157;
        v168 = (std::__shared_weak_count *)(v173 + 1);
        if (v160 == v155)
          goto LABEL_237;
        v174 = v160 - 4 - v155;
        if (v174 >= 0xBC)
        {
          if (&v172[v160 - v155 - 4 - (v174 & 0xFFFFFFFFFFFFFFFCLL)] > &v172[v160 - v155 - 4])
          {
            v175 = v160;
          }
          else if (&v160[-(v174 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v160 - 4)
          {
            v175 = v160;
          }
          else if ((unint64_t)(v155 - v172) >= 0x20)
          {
            v177 = (v174 >> 2) + 1;
            v175 = &v160[-4 * (v177 & 0x7FFFFFFFFFFFFFF8)];
            v178 = &v172[4 * v169 - 16];
            v179 = v160 - 16;
            v180 = v177 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v181 = *(_OWORD *)v179;
              *(v178 - 1) = *((_OWORD *)v179 - 1);
              *v178 = v181;
              v178 -= 2;
              v179 -= 32;
              v180 -= 8;
            }
            while (v180);
            v173 -= v177 & 0x7FFFFFFFFFFFFFF8;
            if (v177 == (v177 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_237;
          }
          else
          {
            v175 = v160;
          }
        }
        else
        {
          v175 = v160;
        }
        do
        {
          v176 = *((_DWORD *)v175 - 1);
          v175 -= 4;
          *--v173 = v176;
        }
        while (v175 != v155);
LABEL_237:
        v159 = &v172[4 * v171];
        v1890 = v168;
        if (v155)
          operator delete(v155);
        v155 = (char *)v173;
        goto LABEL_240;
      }
      *(_DWORD *)v160 = v157;
      v168 = (std::__shared_weak_count *)(v160 + 4);
LABEL_240:
      v1890 = v168;
      v156 = *(unsigned int *)(v74 + 100);
      v160 = (char *)v168;
LABEL_241:
      ++v157;
    }
    while (v157 < v156);
    v1891 = (unint64_t)v159;
    __p = v155;
    LODWORD(v148) = v1766;
    if (v155 != v160)
    {
      if ((v1755 & 1) != 0)
      {
        md::LabelFeaturePool::addLineFeature(&v1893, (uint64_t)v1764, (uint64_t *)v74, (char **)&__p, 0, (uint64_t)&v1860, v1736, v1742);
        v182 = (uint64_t)v1893;
        v183 = v1894;
        if (v1894)
        {
          v184 = &v1894->__shared_weak_owners_;
          do
            v185 = __ldxr((unint64_t *)v184);
          while (__stxr(v185 + 1, (unint64_t *)v184));
        }
        v186 = (uint64_t **)(a1 + 48);
        v187 = *v1695;
        v188 = (uint64_t **)(a1 + 48);
        if (*v1695)
        {
          while (1)
          {
            while (1)
            {
              v186 = (uint64_t **)v187;
              v189 = v187[5];
              if ((unint64_t)v183 >= v189)
                break;
              v187 = *v186;
              v188 = v186;
              if (!*v186)
                goto LABEL_265;
            }
            if (v189 >= (unint64_t)v183)
              break;
            v187 = v186[1];
            if (!v187)
            {
              v188 = v186 + 1;
              goto LABEL_265;
            }
          }
          if (v183)
            std::__shared_weak_count::__release_weak(v183);
        }
        else
        {
LABEL_265:
          v190 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 7) + 16))(*((_QWORD *)a1 + 7), 48, 8);
          v190[4] = v182;
          v190[5] = (uint64_t)v183;
          *v190 = 0;
          v190[1] = 0;
          v190[2] = (uint64_t)v186;
          *v188 = v190;
          v191 = (_QWORD *)**v1693;
          if (v191)
          {
            *v1693 = v191;
            v190 = *v188;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 6), v190);
          ++*((_QWORD *)a1 + 8);
        }
        if (v1865[25])
        {
          v192 = v1893;
          v193 = *(_QWORD **)&v1901[8];
          if (*(_QWORD *)&v1901[8] >= *(_QWORD *)&v1901[16])
          {
            v205 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3);
            v206 = v205 + 1;
            if (v205 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) > v206)
              v206 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3);
            v207 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) >= 0x555555555555555
                 ? 0xAAAAAAAAAAAAAAALL
                 : v206;
            if (v207)
            {
              v208 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 16))(v1902, 24 * v207, 8);
              v209 = (_QWORD *)(v208 + 24 * v205);
              v210 = v208 + 24 * v207;
              if (v208)
              {
                *v209 = v192;
                v211 = v208 + 24 * v205;
                *(_QWORD *)(v211 + 8) = 0;
                *(_QWORD *)(v211 + 16) = 0;
              }
            }
            else
            {
              v210 = 0;
              v209 = (_QWORD *)(8 * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3));
            }
            v215 = *(_QWORD *)v1901;
            v214 = *(_QWORD *)&v1901[8];
            v216 = v209;
            if (*(_QWORD *)&v1901[8] != *(_QWORD *)v1901)
            {
              do
              {
                v217 = *(_OWORD *)(v214 - 24);
                *(v216 - 1) = *(_QWORD *)(v214 - 8);
                *(_OWORD *)(v216 - 3) = v217;
                v216 -= 3;
                v214 -= 24;
              }
              while (v214 != v215);
              v214 = *(_QWORD *)v1901;
            }
            v194 = v209 + 3;
            *(_QWORD *)v1901 = v216;
            *(_QWORD *)&v1901[8] = v209 + 3;
            v218 = *(_QWORD *)&v1901[16];
            *(_QWORD *)&v1901[16] = v210;
            if (v214)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 40))(v1902, v214, v218 - v214);
          }
          else
          {
            if (*(_QWORD *)&v1901[8])
            {
              *(_QWORD *)(*(_QWORD *)&v1901[8] + 8) = 0;
              v193[2] = 0;
              *v193 = v192;
            }
            v194 = v193 + 3;
          }
          *(_QWORD *)&v1901[8] = v194;
          if (v194 != *(_QWORD **)v1901 && 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v194 - *(_QWORD *)v1901) >> 3) >= 0x20)
          {
            md::LabelFeatureStyler::styleLabelFeatures(*((unsigned int **)__src + 37), (char **)v1901, 1u, 1, *(_QWORD *)(*((_QWORD *)__src + 19) + 32));
            *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
            std::mutex::unlock(v1764);
            if (!v1764)
              goto LABEL_2538;
            std::mutex::lock(v1764);
          }
        }
        v196 = v1894;
        if (v1894)
        {
          v219 = &v1894->__shared_owners_;
          do
            v213 = __ldaxr((unint64_t *)v219);
          while (__stlxr(v213 - 1, (unint64_t *)v219));
LABEL_317:
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
      }
      else
      {
        md::LabelFeaturePool::addUnnamedLineFeature(&v1893, (uint64_t)v1764, (uint64_t *)v74, (char **)&__p, 0, (uint64_t)&v1860, v1736, v1742);
        v195 = (uint64_t)v1893;
        v196 = v1894;
        if (v1894)
        {
          v197 = &v1894->__shared_weak_owners_;
          do
            v198 = __ldxr((unint64_t *)v197);
          while (__stxr(v198 + 1, (unint64_t *)v197));
        }
        v199 = (uint64_t **)(a1 + 80);
        while (1)
        {
          v200 = *v199;
          v201 = v199;
          if (!*v199)
            break;
          while (1)
          {
            v199 = (uint64_t **)v200;
            v202 = v200[5];
            if ((unint64_t)v196 < v202)
              break;
            if (v202 >= (unint64_t)v196)
            {
              if (!v196)
                goto LABEL_183;
              std::__shared_weak_count::__release_weak(v196);
              goto LABEL_299;
            }
            v200 = v199[1];
            if (!v200)
            {
              v201 = v199 + 1;
              goto LABEL_284;
            }
          }
        }
LABEL_284:
        v203 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 11) + 16))(*((_QWORD *)a1 + 11), 48, 8);
        v203[4] = v195;
        v203[5] = (uint64_t)v196;
        *v203 = 0;
        v203[1] = 0;
        v203[2] = (uint64_t)v199;
        *v201 = v203;
        v204 = (_QWORD *)**v1692;
        if (v204)
        {
          *v1692 = v204;
          v203 = *v201;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 10), v203);
        ++*((_QWORD *)a1 + 12);
        v196 = v1894;
        if (v1894)
        {
LABEL_299:
          v212 = (unint64_t *)&v196->__shared_owners_;
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 - 1, v212));
          goto LABEL_317;
        }
      }
    }
LABEL_183:
    v148 = (v148 + 1);
    v74 += 168;
    if (v1748 > v148)
      continue;
    break;
  }
  if (*(_QWORD *)v1901 != *(_QWORD *)&v1901[8])
  {
    md::LabelFeatureStyler::styleLabelFeatures(*((unsigned int **)__src + 37), (char **)v1901, 1u, 1, *(_QWORD *)(*((_QWORD *)__src + 19) + 32));
    *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
    std::mutex::unlock(v1764);
    if (!v1764)
      goto LABEL_2538;
    std::mutex::lock(v1764);
  }
  if (__p)
    operator delete(__p);
  std::mutex::unlock(v1764);
  v220 = v1885[0];
  if (v1885[0])
  {
    do
    {
      v221 = (_QWORD *)*v220;
      operator delete(v220);
      v220 = v221;
    }
    while (v221);
  }
  v222 = v1884[0];
  v1884[0] = 0;
  if (v222)
    operator delete(v222);
  if (*(_QWORD *)v1901)
  {
    *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1902 + 40))(v1902, *(_QWORD *)v1901, *(_QWORD *)&v1901[16] - *(_QWORD *)v1901);
  }
  v75 = v1867;
  if (!v1867)
    goto LABEL_337;
LABEL_333:
  v223 = (unint64_t *)&v75->__shared_owners_;
  do
    v224 = __ldaxr(v223);
  while (__stlxr(v224 - 1, v223));
  if (!v224)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_337:
  if (v1715 == 14)
  {
    v1749 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)a3);
    if (v1749)
    {
      std::mutex::lock(v1764);
      v225 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
      if (!v225)
      {
        v381 = v1764;
        goto LABEL_576;
      }
      v226 = v225;
      if (!v225[52])
      {
        v227 = (std::__shared_weak_count *)operator new(0x100uLL);
        v227->__shared_owners_ = 0;
        v228 = (unint64_t *)&v227->__shared_owners_;
        v227->__shared_weak_owners_ = 0;
        v227->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA50;
        v229 = md::LabelTileCollisionInfo::LabelTileCollisionInfo((uint64_t)&v227[1], v1689);
        do
          v230 = __ldxr(v228);
        while (__stxr(v230 + 1, v228));
        v231 = (std::__shared_weak_count *)v226[53];
        v226[52] = v229;
        v226[53] = v227;
        if (v231)
        {
          v232 = (unint64_t *)&v231->__shared_owners_;
          do
            v233 = __ldaxr(v232);
          while (__stlxr(v233 - 1, v232));
          if (!v233)
          {
            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
            std::__shared_weak_count::__release_weak(v231);
          }
        }
        do
          v234 = __ldaxr(v228);
        while (__stlxr(v234 - 1, v228));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      v236 = v226[52];
      v235 = v226[53];
      if (v235)
      {
        v237 = (unint64_t *)(v235 + 16);
        do
          v238 = __ldxr(v237);
        while (__stxr(v238 + 1, v237));
      }
      v239 = (std::__shared_weak_count *)*((_QWORD *)a1 + 34);
      *((_QWORD *)a1 + 33) = v236;
      *((_QWORD *)a1 + 34) = v235;
      if (v239)
        std::__shared_weak_count::__release_weak(v239);
      v240 = v226[52];
      std::mutex::unlock(v1764);
      if (v240)
      {
        std::mutex::lock((std::mutex *)v240);
        if (*(_BYTE *)(v240 + 224))
          goto LABEL_575;
        *(_BYTE *)(v240 + 224) = 1;
        *(_BYTE *)(v240 + 225) = *(_BYTE *)(geo::codec::VectorTile::key(*(geo::codec::VectorTile **)a3) + 1) & 0x3F;
        v241 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)a3);
        v242 = 0;
        v1767 = (float **)(v240 + 128);
        while (1)
        {
          v1756 = v242;
          if (*(_DWORD *)(v241 + 100))
            break;
LABEL_359:
          v242 = v1756 + 1;
          v241 += 168;
          if (v1756 + 1 == v1749)
          {
            md::LabelTileCollisionInfo::simplifyPaths((md::LabelTileCollisionInfo *)v240, 0.00100000005);
LABEL_575:
            v381 = (std::mutex *)v240;
LABEL_576:
            std::mutex::unlock(v381);
            goto LABEL_577;
          }
        }
        v243 = 0;
        while (2)
        {
          v1884[0] = 0;
          *(_QWORD *)v1901 = 0;
          v244 = geo::codec::multiSectionFeaturePointsWithElevation((_QWORD *)v241, v243, v1901, v1884);
          v245 = v1884[0];
          if (v1884[0] < (void *)2)
            goto LABEL_363;
          v246 = (unint64_t)v244;
          v247 = *(char **)v1901;
          v248 = (*(_QWORD *)(v240 + 104) - *(_QWORD *)(v240 + 96)) >> 3;
          v249 = *(_DWORD **)(v240 + 200);
          v250 = *(_QWORD *)(v240 + 208);
          if ((unint64_t)v249 < v250)
          {
            if (v249)
            {
              *v249 = v248;
              v249[1] = v245;
            }
            v251 = v249 + 2;
            goto LABEL_392;
          }
          v252 = *(_QWORD *)(v240 + 192);
          v253 = ((uint64_t)v249 - v252) >> 3;
          v254 = v253 + 1;
          if ((unint64_t)(v253 + 1) >> 61)
            goto LABEL_2502;
          v255 = v250 - v252;
          if (v255 >> 2 > v254)
            v254 = v255 >> 2;
          if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8)
            v256 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v256 = v254;
          if (v256)
          {
            v257 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v240 + 216) + 16))(*(_QWORD *)(v240 + 216), 8 * v256, 4);
            v258 = (_DWORD *)(v257 + 8 * v253);
            v259 = v257 + 8 * v256;
            if (v257)
            {
              *v258 = v248;
              v258[1] = v245;
            }
          }
          else
          {
            v259 = 0;
            v258 = (_DWORD *)(8 * v253);
          }
          v261 = *(_QWORD *)(v240 + 192);
          v260 = *(_QWORD *)(v240 + 200);
          v262 = v260 - v261;
          if (v260 == v261)
          {
            v264 = v258;
            goto LABEL_390;
          }
          v263 = v262 - 8;
          if ((unint64_t)(v262 - 8) < 0x38)
          {
            v264 = v258;
          }
          else
          {
            v264 = v258;
            if ((unint64_t)(v260 - (_QWORD)v258) >= 0x20)
            {
              v265 = (v263 >> 3) + 1;
              v266 = v258 - 4;
              v267 = (__int128 *)(v260 - 16);
              v268 = v265 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v269 = *v267;
                *(v266 - 1) = *(v267 - 1);
                *v266 = v269;
                v266 -= 2;
                v267 -= 2;
                v268 -= 4;
              }
              while (v268);
              v264 = &v258[-2 * (v265 & 0x3FFFFFFFFFFFFFFCLL)];
              v260 -= 8 * (v265 & 0x3FFFFFFFFFFFFFFCLL);
              if (v265 == (v265 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_389:
                v260 = *(_QWORD *)(v240 + 192);
LABEL_390:
                v251 = v258 + 2;
                *(_QWORD *)(v240 + 192) = v264;
                *(_QWORD *)(v240 + 200) = v258 + 2;
                v271 = *(_QWORD *)(v240 + 208);
                *(_QWORD *)(v240 + 208) = v259;
                if (v260)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v240 + 216) + 40))(*(_QWORD *)(v240 + 216), v260, v271 - v260);
LABEL_392:
                *(_QWORD *)(v240 + 200) = v251;
                v272 = v245;
                v273.n128_f32[0] = std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t *)(v240 + 96), *(_QWORD *)(v240 + 104), v246, (_QWORD *)(v246 + 8 * v245), v245);
                v274 = *(_QWORD *)(v240 + 136);
                if (!v247)
                {
                  LODWORD(__p) = 0;
                  std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::insert(v1767, v274, v245, (const float *)&__p);
                  goto LABEL_363;
                }
                if (v245)
                {
                  v275 = *v1767;
                  v276 = v274 - (_QWORD)*v1767;
                  v277 = (float *)((char *)*v1767 + (v276 & 0xFFFFFFFFFFFFFFFCLL));
                  v278 = *(_QWORD *)(v240 + 144);
                  if (v245 <= (uint64_t)(v278 - v274) >> 2)
                  {
                    v284 = (uint64_t)(v274 - (_QWORD)v277) >> 2;
                    v285 = 4 * v245;
                    if (v284 >= v245)
                    {
                      v287 = &v247[4 * v245];
                      v290 = *(char **)(v240 + 136);
                    }
                    else
                    {
                      v286 = 4 * v284;
                      v287 = &v247[v286];
                      v288 = v285 - v286;
                      v289 = &v247[v286];
                      v290 = *(char **)(v240 + 136);
                      do
                      {
                        if (v290)
                          *(_DWORD *)v290 = *(_DWORD *)v289;
                        v289 += 4;
                        v290 += 4;
                        v288 -= 4;
                      }
                      while (v288);
                      *(_QWORD *)(v240 + 136) = v290;
                      if ((uint64_t)(v274 - (_QWORD)v277) < 1)
                        goto LABEL_363;
                    }
                    v291 = &v290[-v285];
                    v292 = v290;
                    while ((unint64_t)v291 < v274)
                    {
                      if (v292)
                        *(_DWORD *)v292 = *(_DWORD *)v291;
                      v291 += 4;
                      v292 += 4;
                    }
                    v293 = (char *)&v277[(unint64_t)v285 / 4];
                    *(_QWORD *)(v240 + 136) = v292;
                    if (v290 != v293)
                      memmove(&v290[-4 * ((v290 - v293) >> 2)], v277, v290 - v293);
                    if (v287 != v247)
                      memmove(v277, v247, v287 - v247);
                    goto LABEL_363;
                  }
                  v279 = v276 >> 2;
                  v280 = (v276 >> 2) + v245;
                  if (v280 >> 62)
LABEL_2502:
                    abort();
                  v281 = v278 - (_QWORD)v275;
                  if (v281 >> 1 > v280)
                    v280 = v281 >> 1;
                  if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL)
                    v282 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v282 = v280;
                  if (v282)
                    v283 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v240 + 152) + 16))(*(_QWORD *)(v240 + 152), 4 * v282, 4, v273);
                  else
                    v283 = 0;
                  v294 = (_DWORD *)(v283 + 4 * v279);
                  v295 = &v294[v272];
                  v296 = 4 * v272;
                  v297 = v294;
                  do
                  {
                    if (v297)
                      *v297 = *(_DWORD *)v247;
                    ++v297;
                    v247 += 4;
                    v296 -= 4;
                  }
                  while (v296);
                  v298 = *v1767;
                  if (*v1767 != v277)
                  {
                    v299 = (char *)v275 + (v276 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (char *)v298;
                    if (v299 < 0x3C)
                    {
                      v300 = v277;
                      goto LABEL_431;
                    }
                    v300 = v277;
                    if ((unint64_t)v275 + (v276 & 0xFFFFFFFFFFFFFFFCLL) - v283 - (v276 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                      goto LABEL_2543;
                    v301 = (v299 >> 2) + 1;
                    v300 = &v277[-(v301 & 0x7FFFFFFFFFFFFFF8)];
                    v302 = &v275[v279 - 4];
                    v303 = (_OWORD *)(v283 + 4 * v279 - 16);
                    v304 = v301 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v305 = *(_OWORD *)v302;
                      *(v303 - 1) = *((_OWORD *)v302 - 1);
                      *v303 = v305;
                      v302 -= 8;
                      v303 -= 2;
                      v304 -= 8;
                    }
                    while (v304);
                    v294 -= v301 & 0x7FFFFFFFFFFFFFF8;
                    if (v301 != (v301 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_2543:
                      do
                      {
LABEL_431:
                        v306 = *((_DWORD *)v300-- - 1);
                        *--v294 = v306;
                      }
                      while (v300 != v298);
                    }
                  }
                  v307 = *(float **)(v240 + 136);
                  if (v307 != v277)
                  {
                    v308 = (char *)v275 + (v276 & 0xFFFFFFFFFFFFFFFCLL);
                    v309 = (char *)v307 - v308 - 4;
                    if (v309 < 0x3C)
                      goto LABEL_2544;
                    if ((v276 & 0xFFFFFFFFFFFFFFFCLL) + v283 + 4 * v272 - (unint64_t)v308 < 0x20)
                      goto LABEL_2544;
                    v310 = (v309 >> 2) + 1;
                    v311 = 4 * (v310 & 0x7FFFFFFFFFFFFFF8);
                    v277 = (float *)((char *)v277 + v311);
                    v312 = (_OWORD *)(v283 + 4 * v272 + 4 * v279 + 16);
                    v313 = &v275[v279 + 4];
                    v314 = v310 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v315 = *(_OWORD *)v313;
                      *(v312 - 1) = *((_OWORD *)v313 - 1);
                      *v312 = v315;
                      v312 += 2;
                      v313 += 8;
                      v314 -= 8;
                    }
                    while (v314);
                    v295 = (_DWORD *)((char *)v295 + v311);
                    if (v310 != (v310 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_2544:
                      do
                      {
                        v316 = *(_DWORD *)v277++;
                        *v295++ = v316;
                      }
                      while (v277 != v307);
                    }
                  }
                  *(_QWORD *)(v240 + 128) = v294;
                  *(_QWORD *)(v240 + 136) = v295;
                  v317 = *(_QWORD *)(v240 + 144);
                  *(_QWORD *)(v240 + 144) = v283 + 4 * v282;
                  if (v298)
                    (*(void (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(v240 + 152) + 40))(*(_QWORD *)(v240 + 152), v298, v317 - (_QWORD)v298);
                }
LABEL_363:
                if (++v243 >= *(unsigned int *)(v241 + 100))
                  goto LABEL_359;
                continue;
              }
            }
          }
          break;
        }
        do
        {
          v270 = *(_QWORD *)(v260 - 8);
          v260 -= 8;
          *((_QWORD *)v264 - 1) = v270;
          v264 -= 2;
        }
        while (v260 != v261);
        goto LABEL_389;
      }
    }
  }
LABEL_577:
  if (!v1718 && !v1730)
    goto LABEL_951;
  v382 = geo::codec::VectorTile::physicalFeaturesCount(*(geo::codec::VectorTile **)a3);
  if (!v382)
    goto LABEL_951;
  if (*a1 == 11)
    v383 = 3;
  else
    v383 = 0;
  v1758 = v383;
  v384 = geo::codec::VectorTile::physicalFeatures(*(geo::codec::VectorTile **)a3);
  v1719 = *(_QWORD *)buf;
  v1852 = *(_QWORD *)buf;
  v1853 = v1877;
  v1854 = *(_QWORD *)((char *)&v1877 + 4);
  v1855 = v1879;
  v1856 = v1880;
  *(_OWORD *)v1857 = *(_OWORD *)v1881;
  *(_OWORD *)&v1857[11] = *(_OWORD *)&v1881[11];
  v385 = v1883;
  v1858 = v1882;
  v1859 = v1883;
  if (v1883)
  {
    v386 = (unint64_t *)&v1883->__shared_owners_;
    do
      v387 = __ldxr(v386);
    while (__stxr(v387 + 1, v386));
  }
  std::mutex::lock(v1764);
  v388 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
  if (!v388)
  {
    std::mutex::unlock(v1764);
    if (!v385)
      goto LABEL_951;
    goto LABEL_948;
  }
  v389 = v388;
  std::mutex::unlock(v1764);
  v1884[1] = 0;
  v1884[0] = 0;
  v1885[0] = 0;
  {
    v1688 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1688, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v1885[1] = (void *)mdm::Allocator::instance(void)::alloc;
  v391 = v1884[0];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v1885[0] - (char *)v1884[0]) >> 3) <= 0x1F)
  {
    v392 = v1884[1];
    v393 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v394 = (char *)v1884[1];
    v395 = (char *)v1884[0];
    v396 = (char *)(v393 + 24 * ((v392 - v391) / 24));
    if (v1884[1] != v1884[0])
    {
      do
      {
        v397 = *(_OWORD *)(v394 - 24);
        *((_QWORD *)v396 - 1) = *((_QWORD *)v394 - 1);
        *(_OWORD *)(v396 - 24) = v397;
        v396 -= 24;
        v394 -= 24;
      }
      while (v394 != v395);
      v394 = (char *)v1884[0];
    }
    v1884[0] = v396;
    v1884[1] = (void *)(v393 + 24 * ((v392 - v391) / 24));
    v398 = v1885[0];
    v1885[0] = (void *)(v393 + 768);
    if (v394)
      (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v394, v398 - v394);
  }
  std::mutex::lock(v1764);
  v1769 = v382;
  LODWORD(__srca) = 0;
  v1890 = 0;
  __p = 0;
  v1891 = 0;
  opaque = v1764[3].__m_.__opaque;
  v1731 = v389 + 20;
  while (2)
  {
    if (!*(_DWORD *)(v384 + 100))
      goto LABEL_594;
    v399 = 0;
    v400 = (char *)__p;
    v401 = v1891;
    v402 = (char *)__p;
    while (2)
    {
      if ((unint64_t)v402 < v401)
      {
        *(_DWORD *)v402 = v399;
        v402 += 4;
      }
      else
      {
        v403 = (v402 - v400) >> 2;
        v404 = v403 + 1;
        if ((unint64_t)(v403 + 1) >> 62)
        {
          __p = v400;
          abort();
        }
        if ((uint64_t)(v401 - (_QWORD)v400) >> 1 > v404)
          v404 = (uint64_t)(v401 - (_QWORD)v400) >> 1;
        if (v401 - (unint64_t)v400 >= 0x7FFFFFFFFFFFFFFCLL)
          v405 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v405 = v404;
        if (v405)
        {
          if (v405 >> 62)
            goto LABEL_2486;
          v406 = operator new(4 * v405);
        }
        else
        {
          v406 = 0;
        }
        v407 = &v406[4 * v403];
        *v407 = v399;
        v408 = (std::__shared_weak_count *)(v407 + 1);
        if (v402 != v400)
        {
          v409 = v402 - 4 - v400;
          if (v409 < 0xBC)
          {
            v410 = v402;
            goto LABEL_613;
          }
          if (&v406[v402 - v400 - 4 - (v409 & 0xFFFFFFFFFFFFFFFCLL)] > &v406[v402 - v400 - 4])
          {
            v410 = v402;
            goto LABEL_613;
          }
          if (&v402[-(v409 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v402 - 4)
          {
            v410 = v402;
            goto LABEL_613;
          }
          if ((unint64_t)(v400 - v406) < 0x20)
          {
            v410 = v402;
            goto LABEL_613;
          }
          v412 = (v409 >> 2) + 1;
          v410 = &v402[-4 * (v412 & 0x7FFFFFFFFFFFFFF8)];
          v413 = &v406[4 * v403 - 16];
          v414 = v402 - 16;
          v415 = v412 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v416 = *(_OWORD *)v414;
            *(v413 - 1) = *((_OWORD *)v414 - 1);
            *v413 = v416;
            v413 -= 2;
            v414 -= 32;
            v415 -= 8;
          }
          while (v415);
          v407 -= v412 & 0x7FFFFFFFFFFFFFF8;
          if (v412 != (v412 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_613:
              v411 = *((_DWORD *)v410 - 1);
              v410 -= 4;
              *--v407 = v411;
            }
            while (v410 != v400);
          }
        }
        v401 = (unint64_t)&v406[4 * v405];
        v1890 = v408;
        if (v400)
          operator delete(v400);
        v400 = (char *)v407;
        v402 = (char *)v408;
      }
      v1890 = (std::__shared_weak_count *)v402;
      if (++v399 < *(_DWORD *)(v384 + 100))
        continue;
      break;
    }
    v1891 = v401;
    __p = v400;
    _ZF = v400 == v402;
    v382 = v1769;
    if (_ZF)
      goto LABEL_594;
    v1892 = 0;
    {
      v573 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v573, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v418 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
    v1892 = (_QWORD *)v418;
    *(_OWORD *)(v418 + 16) = 0u;
    *(_QWORD *)v418 = 1;
    *(_QWORD *)(v418 + 8) = &off_1E4292A98;
    *(_OWORD *)(v418 + 32) = 0u;
    *(_QWORD *)(v418 + 48) = 0;
    {
      v574 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v574, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v418 + 56) = mdm::Allocator::instance(void)::alloc;
    v420 = *(std::__shared_weak_count **)(v384 + 8);
    if (v420 && (v420 = std::__shared_weak_count::lock(v420)) != 0)
      v421 = *(_QWORD *)v384;
    else
      v421 = 0;
    *(_QWORD *)(v418 + 64) = v384;
    *(_QWORD *)(v418 + 72) = v421;
    *(_QWORD *)(v418 + 80) = v420;
    *(_QWORD *)(v418 + 88) = 0;
    *(_BYTE *)(v418 + 96) = v1758;
    v422 = *(uint64_t **)(v418 + 40);
    if ((unint64_t)v422 >= *(_QWORD *)(v418 + 48))
    {
      v425 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>> const&>((uint64_t *)(v418 + 32), v418 + 64);
    }
    else
    {
      if (v422)
      {
        *v422 = v384;
        v422[1] = v421;
        v422[2] = (uint64_t)v420;
        if (v420)
        {
          v423 = (unint64_t *)&v420->__shared_owners_;
          do
            v424 = __ldxr(v423);
          while (__stxr(v424 + 1, v423));
        }
      }
      v425 = (uint64_t)(v422 + 3);
    }
    *(_QWORD *)(v418 + 40) = v425;
    v1892 = (_QWORD *)v418;
    v426 = *(unsigned __int8 *)(v418 + 96);
    v427 = *(_QWORD *)(*(_QWORD *)(v418 + 64) + 40);
    v428 = (v427 - 0x61C8864680B583EBLL + (v426 << 6) + (v426 >> 2)) ^ v426;
    v429 = *(_QWORD *)&v1764[2].__m_.__opaque[48];
    if (!v429)
      goto LABEL_675;
    v430 = (uint8x8_t)vcnt_s8((int8x8_t)v429);
    v430.i16[0] = vaddlv_u8(v430);
    if (v430.u32[0] > 1uLL)
    {
      v401 = (v427 - 0x61C8864680B583EBLL + (v426 << 6) + (v426 >> 2)) ^ v426;
      if (v428 >= v429)
        v401 = v428 % v429;
    }
    else
    {
      v401 = v428 & (v429 - 1);
    }
    v431 = *(_QWORD **)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v401);
    if (!v431 || (v432 = (_QWORD *)*v431) == 0)
    {
LABEL_675:
      v444 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[3].__m_.__opaque[8]
                                                                           + 16))(*(_QWORD *)&v1764[3].__m_.__opaque[8], 24, 8);
      *(_QWORD *)v1901 = v444;
      *(_QWORD *)&v1901[8] = (char *)v1764 + 208;
      *v444 = 0;
      v444[1] = v428;
      v444[2] = v418;
      ++*(_QWORD *)v418;
      v1901[16] = 1;
      v445 = (float)(unint64_t)(*(_QWORD *)&v1764[3].__m_.__opaque[16] + 1);
      v446 = *(float *)&v1764[3].__m_.__opaque[24];
      if (!v429 || (float)(v446 * (float)v429) < v445)
      {
        v447 = (v429 & (v429 - 1)) != 0;
        if (v429 < 3)
          v447 = 1;
        v448 = v447 | (2 * v429);
        v449 = vcvtps_u32_f32(v445 / v446);
        if (v448 <= v449)
          v450 = v449;
        else
          v450 = v448;
        if (v450 == 1)
        {
          v450 = 2;
        }
        else if ((v450 & (v450 - 1)) != 0)
        {
          v450 = std::__next_prime(v450);
        }
        v429 = *(_QWORD *)&v1764[2].__m_.__opaque[48];
        if (v450 > v429)
        {
LABEL_687:
          v451 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(_QWORD *)v1764[3].__m_.__sig + 16))(v1764[3].__m_.__sig, 8 * v450, 8);
          v452 = *(_QWORD *)&v1764[2].__m_.__opaque[40];
          *(_QWORD *)&v1764[2].__m_.__opaque[40] = v451;
          if (v452)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1764[3].__m_.__sig + 40))(v1764[3].__m_.__sig, v452, 8 * *(_QWORD *)&v1764[2].__m_.__opaque[48]);
          v453 = 0;
          *(_QWORD *)&v1764[2].__m_.__opaque[48] = v450;
          do
            *(_QWORD *)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v453++) = 0;
          while (v450 != v453);
          v454 = *(_QWORD **)opaque;
          if (!*(_QWORD *)opaque)
            goto LABEL_710;
          v455 = v454[1];
          v456 = v450 - 1;
          if ((v450 & (v450 - 1)) == 0)
          {
            v457 = v455 & v456;
            *(_QWORD *)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v457) = opaque;
            for (j = (_QWORD *)*v454; *v454; j = (_QWORD *)*v454)
            {
              v459 = j[1] & v456;
              if (v459 == v457)
              {
                v454 = j;
              }
              else
              {
                v460 = *(_QWORD *)&v1764[2].__m_.__opaque[40];
                if (*(_QWORD *)(v460 + 8 * v459))
                {
                  *v454 = *j;
                  v461 = 8 * v459;
                  *j = **(_QWORD **)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + v461);
                  **(_QWORD **)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + v461) = j;
                }
                else
                {
                  *(_QWORD *)(v460 + 8 * v459) = v454;
                  v454 = j;
                  v457 = v459;
                }
              }
            }
            goto LABEL_710;
          }
          if (v455 >= v450)
            v455 %= v450;
          *(_QWORD *)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v455) = opaque;
          v465 = (_QWORD *)*v454;
          if (!*v454)
          {
LABEL_710:
            v429 = v450;
            goto LABEL_711;
          }
          while (2)
          {
            v467 = v465[1];
            if (v467 >= v450)
              v467 %= v450;
            if (v467 != v455)
            {
              v468 = *(_QWORD *)&v1764[2].__m_.__opaque[40];
              if (!*(_QWORD *)(v468 + 8 * v467))
              {
                *(_QWORD *)(v468 + 8 * v467) = v454;
LABEL_715:
                v454 = v465;
                v465 = (_QWORD *)*v465;
                v455 = v467;
                if (!v465)
                  goto LABEL_710;
                continue;
              }
              *v454 = *v465;
              v466 = 8 * v467;
              *v465 = **(_QWORD **)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + v466);
              **(_QWORD **)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + v466) = v465;
              v465 = v454;
            }
            break;
          }
          v467 = v455;
          goto LABEL_715;
        }
        if (v450 < v429)
        {
          v462 = vcvtps_u32_f32((float)*(unint64_t *)&v1764[3].__m_.__opaque[16] / *(float *)&v1764[3].__m_.__opaque[24]);
          if (v429 < 3
            || (v463 = (uint8x8_t)vcnt_s8((int8x8_t)v429), v463.i16[0] = vaddlv_u8(v463), v463.u32[0] > 1uLL))
          {
            v462 = std::__next_prime(v462);
          }
          else
          {
            v464 = 1 << -(char)__clz(v462 - 1);
            if (v462 >= 2)
              v462 = v464;
          }
          if (v450 <= v462)
            v450 = v462;
          if (v450 >= v429)
          {
            v429 = *(_QWORD *)&v1764[2].__m_.__opaque[48];
          }
          else
          {
            if (v450)
              goto LABEL_687;
            v563 = *(_QWORD *)&v1764[2].__m_.__opaque[40];
            *(_QWORD *)&v1764[2].__m_.__opaque[40] = 0;
            if (v563)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1764[3].__m_.__sig + 40))(v1764[3].__m_.__sig, v563, 8 * *(_QWORD *)&v1764[2].__m_.__opaque[48]);
            v429 = 0;
            *(_QWORD *)&v1764[2].__m_.__opaque[48] = 0;
          }
        }
LABEL_711:
        if ((v429 & (v429 - 1)) != 0)
        {
          if (v428 >= v429)
            v401 = v428 % v429;
          else
            v401 = v428;
        }
        else
        {
          v401 = (v429 - 1) & v428;
        }
      }
      v469 = *(_QWORD **)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v401);
      if (v469)
      {
        *v444 = *v469;
        goto LABEL_732;
      }
      *v444 = *(_QWORD *)v1764[3].__m_.__opaque;
      *(_QWORD *)v1764[3].__m_.__opaque = v444;
      *(_QWORD *)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v401) = opaque;
      if (*v444)
      {
        v470 = *(_QWORD *)(*v444 + 8);
        if ((v429 & (v429 - 1)) != 0)
        {
          if (v470 >= v429)
            v470 %= v429;
        }
        else
        {
          v470 &= v429 - 1;
        }
        v469 = (_QWORD *)(*(_QWORD *)&v1764[2].__m_.__opaque[40] + 8 * v470);
LABEL_732:
        *v469 = v444;
      }
      ++*(_QWORD *)&v1764[3].__m_.__opaque[16];
      v1857[25] = 1;
      {
        v575 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v575, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v472 = mdm::Allocator::instance(void)::alloc;
      v473 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 592, 8);
      *(_QWORD *)v473 = &off_1E42DC468;
      *(_QWORD *)(v473 + 8) = 0;
      v474 = v473 + 32;
      *(_QWORD *)(v473 + 16) = 0;
      *(_QWORD *)(v473 + 24) = v472;
      md::LineLabelFeature::LineLabelFeature(v473 + 32, 3, 1);
      *(_QWORD *)(v473 + 32) = &off_1E429A0D0;
      *(_QWORD *)(v473 + 472) = &unk_1E429A388;
      *(_QWORD *)(v473 + 480) = *(_QWORD *)(v384 + 40);
      *(_DWORD *)(v473 + 488) = *(_DWORD *)(v384 + 68);
      v475 = *(float *)(v384 + 164);
      if (v475 == 0.0)
        v475 = 254.0;
      *(float *)(v473 + 492) = v475;
      *(_OWORD *)(v473 + 496) = 0u;
      *(_OWORD *)(v473 + 512) = 0u;
      *(_OWORD *)(v473 + 528) = 0u;
      *(_QWORD *)(v473 + 544) = 0;
      *(_DWORD *)(v473 + 552) = 2139095039;
      *(_WORD *)(v473 + 556) = 0;
      *(_BYTE *)(v473 + 558) = 0;
      *(_QWORD *)(v473 + 560) = &off_1E42B5570;
      *(_QWORD *)(v473 + 568) = 0;
      *(_BYTE *)(v473 + 584) = 0;
      v477 = *(_QWORD *)(v384 + 24);
      v476 = *(_QWORD *)(v384 + 32);
      if (v476)
      {
        v478 = (unint64_t *)(v476 + 8);
        do
          v479 = __ldxr(v478);
        while (__stxr(v479 + 1, v478));
      }
      v429 = *(_QWORD *)(v473 + 456);
      *(_QWORD *)(v473 + 448) = v477;
      *(_QWORD *)(v473 + 456) = v476;
      if (v429)
      {
        v480 = (unint64_t *)(v429 + 8);
        do
          v481 = __ldaxr(v480);
        while (__stlxr(v481 - 1, v480));
        if (!v481)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v429 + 16))(v429);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v429);
        }
      }
      v482 = *(_QWORD *)(v473 + 224);
      *(_BYTE *)(v482 + 122) = 3;
      *(_BYTE *)(v482 + 290) = v1853 != 255;
      md::LabelLineStore::addPhysicalFeature(v482, (uint64_t *)v384, (char **)&__p, (uint64_t)&v1852, v473 + 472);
      v483 = *(unsigned __int8 **)(v473 + 224);
      v484 = atomic_load(v483 + 80);
      if ((v484 & 1) != 0)
        md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v483);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v474 + 32))(v474, v384, v1857[24]);
      if (v1892)
        v485 = v1892 + 1;
      else
        v485 = 0;
      v486 = (std::__shared_weak_count *)v485[2];
      v485[1] = v474;
      v485[2] = v473;
      if (v486)
      {
        v487 = (unint64_t *)&v486->__shared_owners_;
        do
          v488 = __ldaxr(v487);
        while (__stlxr(v488 - 1, v487));
        if (!v488)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v486);
        }
      }
      v489 = *(_QWORD *)&v1764[10].__m_.__opaque[24];
      v490 = v1892;
      v491 = v1892 + 1;
      if (!v1892)
        v491 = 0;
      v492 = v491[1];
      *(_QWORD *)(v492 + 152) = v491;
      v493 = v489 + 1;
      *(_QWORD *)&v1764[10].__m_.__opaque[24] = v493;
      *(_QWORD *)(v492 + 72) = v493;
      *(_BYTE *)(v492 + 147) = v1758;
      goto LABEL_757;
    }
    if (v430.u32[0] < 2uLL)
    {
      while (1)
      {
        v436 = v432[1];
        if (v436 == v428)
        {
          v434 = (_QWORD *)v432[2];
          v437 = v434 + 1;
          if (!v434)
            v437 = 0;
          if (*((unsigned __int8 *)v437 + 88) == (_DWORD)v426 && *(_QWORD *)(v437[7] + 40) == v427)
            goto LABEL_667;
        }
        else if ((v436 & (v429 - 1)) != v401)
        {
          goto LABEL_675;
        }
        v432 = (_QWORD *)*v432;
        if (!v432)
          goto LABEL_675;
      }
    }
    while (2)
    {
      v433 = v432[1];
      if (v433 != v428)
      {
        if (v433 >= v429)
          v433 %= v429;
        if (v433 != v401)
          goto LABEL_675;
LABEL_651:
        v432 = (_QWORD *)*v432;
        if (!v432)
          goto LABEL_675;
        continue;
      }
      break;
    }
    v434 = (_QWORD *)v432[2];
    v435 = v434 + 1;
    if (!v434)
      v435 = 0;
    if (*((unsigned __int8 *)v435 + 88) != (_DWORD)v426 || *(_QWORD *)(v435[7] + 40) != v427)
      goto LABEL_651;
LABEL_667:
    v1857[25] = 0;
    if (v434)
      ++*v434;
    geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1892);
    v438 = (_QWORD *)v432[2];
    v1892 = v438;
    if (v438)
      v439 = v438 + 1;
    else
      v439 = 0;
    v440 = (std::mutex *)(v439[1] + 8);
    std::mutex::lock(v440);
    v441 = *(std::__shared_weak_count **)(v384 + 8);
    if (v441)
    {
      v442 = std::__shared_weak_count::lock(v441);
      if (v442)
      {
        v443 = *(_QWORD *)v384;
        goto LABEL_914;
      }
    }
    else
    {
      v442 = 0;
    }
    v443 = 0;
LABEL_914:
    *(_QWORD *)v1901 = v384;
    *(_QWORD *)&v1901[8] = v443;
    *(_QWORD *)&v1901[16] = v442;
    v1894 = 0;
    v1893 = 0;
    v565 = (uint64_t *)v439[4];
    if ((unint64_t)v565 >= v439[5])
    {
      v566 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>>(v439 + 3, (uint64_t)v1901);
      v442 = *(std::__shared_weak_count **)&v1901[16];
    }
    else
    {
      if (v565)
      {
        *v565 = v384;
        v565[1] = v443;
        v565[2] = (uint64_t)v442;
        *(_QWORD *)&v1901[8] = 0;
        *(_QWORD *)&v1901[16] = 0;
        v442 = 0;
      }
      v566 = (uint64_t)(v565 + 3);
    }
    v439[4] = v566;
    if (v442)
    {
      v567 = (unint64_t *)&v442->__shared_owners_;
      do
        v568 = __ldaxr(v567);
      while (__stlxr(v568 - 1, v567));
      if (!v568)
      {
        ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
        std::__shared_weak_count::__release_weak(v442);
      }
    }
    v569 = v1894;
    if (v1894)
    {
      v570 = &v1894->__shared_owners_;
      do
        v571 = __ldaxr((unint64_t *)v570);
      while (__stlxr(v571 - 1, (unint64_t *)v570));
      if (!v571)
      {
        ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
        std::__shared_weak_count::__release_weak(v569);
      }
    }
    std::mutex::unlock(v440);
    v490 = v1892;
    v572 = v1892 + 1;
    if (!v1892)
      v572 = 0;
    md::LabelLineStore::addPhysicalFeature(*(_QWORD *)(v572[1] + 192), (uint64_t *)v384, (char **)&__p, (uint64_t)&v1852, v572[1] + 440);
LABEL_757:
    if (v490)
      v494 = v490 + 1;
    else
      v494 = 0;
    v495 = (_QWORD *)v494[1];
    v496 = v495[9];
    v497 = v389[18];
    if (v497)
    {
      v498 = (uint8x8_t)vcnt_s8((int8x8_t)v497);
      v498.i16[0] = vaddlv_u8(v498);
      if (v498.u32[0] > 1uLL)
      {
        v429 = v495[9];
        if (v496 >= v497)
          v429 = v496 % v497;
      }
      else
      {
        v429 = (v497 - 1) & v496;
      }
      v499 = *(_QWORD **)(v389[17] + 8 * v429);
      if (v499)
      {
        v500 = (_QWORD *)*v499;
        if (v500)
        {
          if (v498.u32[0] < 2uLL)
          {
            while (1)
            {
              v504 = v500[1];
              if (v504 == v496)
              {
                v505 = v500[2];
                if (v505)
                  v506 = v505 + 8;
                else
                  v506 = 0;
                if (*(_QWORD *)(*(_QWORD *)(v506 + 8) + 72) == v496)
                  goto LABEL_786;
              }
              else if ((v504 & (v497 - 1)) != v429)
              {
                goto LABEL_787;
              }
              v500 = (_QWORD *)*v500;
              if (!v500)
                goto LABEL_787;
            }
          }
          do
          {
            v501 = v500[1];
            if (v501 == v496)
            {
              v502 = v500[2];
              if (v502)
                v503 = v502 + 8;
              else
                v503 = 0;
              if (*(_QWORD *)(*(_QWORD *)(v503 + 8) + 72) == v496)
              {
LABEL_786:
                v382 = v1769;
                goto LABEL_848;
              }
            }
            else
            {
              if (v501 >= v497)
                v501 %= v497;
              if (v501 != v429)
                break;
            }
            v500 = (_QWORD *)*v500;
          }
          while (v500);
        }
      }
    }
LABEL_787:
    v507 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v389[21] + 16))(v389[21], 24, 8);
    *(_QWORD *)v1901 = v507;
    *(_QWORD *)&v1901[8] = v389 + 21;
    *v507 = 0;
    v507[1] = v496;
    v507[2] = v490;
    if (v490)
      ++*v490;
    v1901[16] = 1;
    v508 = (float)(unint64_t)(v389[22] + 1);
    v509 = *((float *)v389 + 46);
    v382 = v1769;
    if (!v497 || (float)(v509 * (float)v497) < v508)
    {
      v510 = (v497 & (v497 - 1)) != 0;
      if (v497 < 3)
        v510 = 1;
      v511 = v510 | (2 * v497);
      v512 = vcvtps_u32_f32(v508 / v509);
      if (v511 <= v512)
        v513 = v512;
      else
        v513 = v511;
      if (v513 == 1)
      {
        v513 = 2;
      }
      else if ((v513 & (v513 - 1)) != 0)
      {
        v513 = std::__next_prime(v513);
      }
      v497 = v389[18];
      if (v513 > v497)
      {
LABEL_801:
        v514 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(*(_QWORD *)v389[19] + 16))(v389[19], 8 * v513, 8);
        v515 = v389[17];
        v389[17] = v514;
        if (v515)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v389[19] + 40))(v389[19], v515, 8 * v389[18]);
        v516 = 0;
        v389[18] = v513;
        do
          *(_QWORD *)(v389[17] + 8 * v516++) = 0;
        while (v513 != v516);
        v517 = (_QWORD *)*v1731;
        if (!*v1731)
          goto LABEL_824;
        v518 = v517[1];
        v519 = v513 - 1;
        if ((v513 & (v513 - 1)) == 0)
        {
          v520 = v518 & v519;
          *(_QWORD *)(v389[17] + 8 * v520) = v1731;
          for (k = (_QWORD *)*v517; *v517; k = (_QWORD *)*v517)
          {
            v522 = k[1] & v519;
            if (v522 == v520)
            {
              v517 = k;
            }
            else
            {
              v523 = v389[17];
              if (*(_QWORD *)(v523 + 8 * v522))
              {
                *v517 = *k;
                v524 = 8 * v522;
                *k = **(_QWORD **)(v389[17] + v524);
                **(_QWORD **)(v389[17] + v524) = k;
              }
              else
              {
                *(_QWORD *)(v523 + 8 * v522) = v517;
                v517 = k;
                v520 = v522;
              }
            }
          }
          goto LABEL_824;
        }
        if (v518 >= v513)
          v518 %= v513;
        *(_QWORD *)(v389[17] + 8 * v518) = v1731;
        v528 = (_QWORD *)*v517;
        if (!*v517)
        {
LABEL_824:
          v497 = v513;
          goto LABEL_825;
        }
        while (2)
        {
          v530 = v528[1];
          if (v530 >= v513)
            v530 %= v513;
          if (v530 != v518)
          {
            v531 = v389[17];
            if (!*(_QWORD *)(v531 + 8 * v530))
            {
              *(_QWORD *)(v531 + 8 * v530) = v517;
LABEL_829:
              v517 = v528;
              v528 = (_QWORD *)*v528;
              v518 = v530;
              if (!v528)
                goto LABEL_824;
              continue;
            }
            *v517 = *v528;
            v529 = 8 * v530;
            *v528 = **(_QWORD **)(v389[17] + v529);
            **(_QWORD **)(v389[17] + v529) = v528;
            v528 = v517;
          }
          break;
        }
        v530 = v518;
        goto LABEL_829;
      }
      if (v513 < v497)
      {
        v525 = vcvtps_u32_f32((float)(unint64_t)v389[22] / *((float *)v389 + 46));
        if (v497 < 3 || (v526 = (uint8x8_t)vcnt_s8((int8x8_t)v497), v526.i16[0] = vaddlv_u8(v526), v526.u32[0] > 1uLL))
        {
          v525 = std::__next_prime(v525);
        }
        else
        {
          v527 = 1 << -(char)__clz(v525 - 1);
          if (v525 >= 2)
            v525 = v527;
        }
        if (v513 <= v525)
          v513 = v525;
        if (v513 >= v497)
        {
          v497 = v389[18];
        }
        else
        {
          if (v513)
            goto LABEL_801;
          v564 = v389[17];
          v389[17] = 0;
          if (v564)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v389[19] + 40))(v389[19], v564, 8 * v389[18]);
          v497 = 0;
          v389[18] = 0;
        }
      }
LABEL_825:
      if ((v497 & (v497 - 1)) != 0)
      {
        if (v496 >= v497)
          v429 = v496 % v497;
        else
          v429 = v496;
      }
      else
      {
        v429 = (v497 - 1) & v496;
      }
    }
    v532 = *(_QWORD **)(v389[17] + 8 * v429);
    if (v532)
    {
      *v507 = *v532;
      goto LABEL_846;
    }
    *v507 = v389[20];
    v389[20] = v507;
    *(_QWORD *)(v389[17] + 8 * v429) = v1731;
    if (*v507)
    {
      v533 = *(_QWORD *)(*v507 + 8);
      if ((v497 & (v497 - 1)) != 0)
      {
        if (v533 >= v497)
          v533 %= v497;
      }
      else
      {
        v533 &= v497 - 1;
      }
      v532 = (_QWORD *)(v389[17] + 8 * v533);
LABEL_846:
      *v532 = v507;
    }
    ++v389[22];
    v495 = (_QWORD *)v494[1];
LABEL_848:
    v534 = (std::__shared_weak_count *)v494[2];
    v1887 = v495;
    v1888 = v534;
    v535 = (uint64_t **)(a1 + 112);
    if (v534)
    {
      v536 = (unint64_t *)&v534->__shared_owners_;
      do
        v537 = __ldxr(v536);
      while (__stxr(v537 + 1, v536));
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1892);
      v538 = (unint64_t *)&v534->__shared_weak_owners_;
      do
        v539 = __ldxr(v538);
      while (__stxr(v539 + 1, v538));
    }
    else
    {
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1892);
    }
    while (1)
    {
      v540 = *v535;
      v541 = v535;
      if (!*v535)
        break;
      while (1)
      {
        v535 = (uint64_t **)v540;
        v542 = v540[5];
        if ((unint64_t)v534 < v542)
          break;
        if (v542 >= (unint64_t)v534)
        {
          if (v534)
            std::__shared_weak_count::__release_weak(v534);
          goto LABEL_863;
        }
        v540 = v535[1];
        if (!v540)
        {
          v541 = v535 + 1;
          goto LABEL_860;
        }
      }
    }
LABEL_860:
    v543 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 15) + 16))(*((_QWORD *)a1 + 15), 48, 8);
    v543[4] = (uint64_t)v495;
    v543[5] = (uint64_t)v534;
    *v543 = 0;
    v543[1] = 0;
    v543[2] = (uint64_t)v535;
    *v541 = v543;
    v544 = (_QWORD *)**v1694;
    if (v544)
    {
      *v1694 = v544;
      v543 = *v541;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 14), v543);
    ++*((_QWORD *)a1 + 16);
LABEL_863:
    if (v1857[25])
    {
      v545 = v1887;
      v546 = v1884[1];
      if (v1884[1] >= v1885[0])
      {
        v548 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3);
        v549 = v548 + 1;
        if (v548 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3) > v549)
          v549 = 0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3);
        v550 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1885[0] - (char *)v1884[0]) >> 3) >= 0x555555555555555
             ? 0xAAAAAAAAAAAAAAALL
             : v549;
        if (v550)
        {
          v551 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v1885[1] + 16))(v1885[1], 24 * v550, 8);
          v552 = (char *)(v551 + 24 * v548);
          v553 = (void *)(v551 + 24 * v550);
          if (v551)
          {
            *(_QWORD *)v552 = v545;
            v554 = v551 + 24 * v548;
            *(_QWORD *)(v554 + 8) = 0;
            *(_QWORD *)(v554 + 16) = 0;
          }
        }
        else
        {
          v553 = 0;
          v552 = (char *)(8 * (((char *)v1884[1] - (char *)v1884[0]) >> 3));
        }
        v555 = (char *)v1884[1];
        v556 = (char *)v1884[0];
        v557 = v552;
        if (v1884[1] != v1884[0])
        {
          do
          {
            v558 = *(_OWORD *)(v555 - 24);
            *((_QWORD *)v557 - 1) = *((_QWORD *)v555 - 1);
            *(_OWORD *)(v557 - 24) = v558;
            v557 -= 24;
            v555 -= 24;
          }
          while (v555 != v556);
          v555 = (char *)v1884[0];
        }
        v547 = v552 + 24;
        v1884[0] = v557;
        v1884[1] = v552 + 24;
        v559 = v1885[0];
        v1885[0] = v553;
        if (v555)
          (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v555, v559 - v555);
      }
      else
      {
        if (v1884[1])
        {
          *((_QWORD *)v1884[1] + 1) = 0;
          v546[2] = 0;
          *v546 = v545;
        }
        v547 = v546 + 3;
      }
      v1884[1] = v547;
      if (v547 != v1884[0]
        && 0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v547 - (unint64_t)v1884[0]) >> 3) >= 0x20)
      {
        md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v1719 + 296), (char **)v1884, 1u, 1, *(_QWORD *)(*(_QWORD *)(v1719 + 152) + 32));
        v1884[1] = v1884[0];
        std::mutex::unlock(v1764);
        if (v1764)
        {
          std::mutex::lock(v1764);
          goto LABEL_889;
        }
LABEL_2539:
        std::__throw_system_error(1, "unique_lock::lock: references null mutex");
        goto LABEL_2540;
      }
    }
LABEL_889:
    v560 = v1888;
    if (v1888)
    {
      v561 = (unint64_t *)&v1888->__shared_owners_;
      do
        v562 = __ldaxr(v561);
      while (__stlxr(v562 - 1, v561));
      if (!v562)
      {
        ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
        std::__shared_weak_count::__release_weak(v560);
      }
    }
LABEL_594:
    v384 += 176;
    __srca = (__srca + 1);
    if (v382 > __srca)
      continue;
    break;
  }
  if (v1884[0] != v1884[1])
  {
    md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v1719 + 296), (char **)v1884, 1u, 1, *(_QWORD *)(*(_QWORD *)(v1719 + 152) + 32));
    v1884[1] = v1884[0];
    std::mutex::unlock(v1764);
    if (!v1764)
      goto LABEL_2539;
    std::mutex::lock(v1764);
  }
  if (__p)
    operator delete(__p);
  std::mutex::unlock(v1764);
  if (v1884[0])
  {
    v1884[1] = v1884[0];
    (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1884[0], (char *)v1885[0] - (char *)v1884[0]);
  }
  v385 = v1859;
  if (!v1859)
  {
LABEL_951:
    if (v1727)
      goto LABEL_952;
    goto LABEL_989;
  }
LABEL_948:
  v576 = (unint64_t *)&v385->__shared_owners_;
  do
    v577 = __ldaxr(v576);
  while (__stlxr(v577 - 1, v576));
  if (v577)
    goto LABEL_951;
  ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
  std::__shared_weak_count::__release_weak(v385);
  if (v1727)
  {
LABEL_952:
    if (*(_QWORD *)(*(_QWORD *)a3 + 3024) != *(_QWORD *)(*(_QWORD *)a3 + 3032))
    {
      v578 = (uint64_t *)(*(_QWORD *)a3 + 3024);
      v1844 = *(_QWORD *)buf;
      v1845 = v1877;
      v1846 = *(_QWORD *)((char *)&v1877 + 4);
      v1847 = v1879;
      v1848 = v1880;
      v1849[0] = *(_OWORD *)v1881;
      *(_OWORD *)((char *)v1849 + 11) = *(_OWORD *)&v1881[11];
      v1850 = v1882;
      v1851 = v1883;
      if (v1883)
      {
        v579 = (unint64_t *)&v1883->__shared_owners_;
        do
          v580 = __ldxr(v579);
        while (__stxr(v580 + 1, v579));
      }
      md::LabelFeaturePool::addContourLineFeatures((uint64_t)v1764, (unint64_t *)a3, v578, (uint64_t)&v1844, v1690);
      v581 = v1851;
      if (v1851)
      {
        v582 = (unint64_t *)&v1851->__shared_owners_;
        do
          v583 = __ldaxr(v582);
        while (__stlxr(v583 - 1, v582));
        if (!v583)
        {
          ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
          std::__shared_weak_count::__release_weak(v581);
        }
      }
    }
    if (*(_QWORD *)(*(_QWORD *)a3 + 3136) != *(_QWORD *)(*(_QWORD *)a3 + 3144))
    {
      v584 = (uint64_t *)(*(_QWORD *)a3 + 3136);
      v1836 = *(_QWORD *)buf;
      v1837 = v1877;
      v1838 = *(_QWORD *)((char *)&v1877 + 4);
      v1839 = v1879;
      v1840 = v1880;
      v1841[0] = *(_OWORD *)v1881;
      *(_OWORD *)((char *)v1841 + 11) = *(_OWORD *)&v1881[11];
      v1842 = v1882;
      v1843 = v1883;
      if (v1883)
      {
        v585 = (unint64_t *)&v1883->__shared_owners_;
        do
          v586 = __ldxr(v585);
        while (__stxr(v586 + 1, v585));
      }
      md::LabelFeaturePool::addContourLineFeatures((uint64_t)v1764, (unint64_t *)a3, v584, (uint64_t)&v1836, v1690);
      v587 = v1843;
      if (v1843)
      {
        v588 = (unint64_t *)&v1843->__shared_owners_;
        do
          v589 = __ldaxr(v588);
        while (__stlxr(v589 - 1, v588));
        if (!v589)
        {
          ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
          std::__shared_weak_count::__release_weak(v587);
        }
      }
    }
    if (*(_QWORD *)(*(_QWORD *)a3 + 3248) != *(_QWORD *)(*(_QWORD *)a3 + 3256))
    {
      v590 = (uint64_t *)(*(_QWORD *)a3 + 3248);
      v1828 = *(_QWORD *)buf;
      v1829 = v1877;
      v1830 = *(_QWORD *)((char *)&v1877 + 4);
      v1831 = v1879;
      v1832 = v1880;
      v1833[0] = *(_OWORD *)v1881;
      *(_OWORD *)((char *)v1833 + 11) = *(_OWORD *)&v1881[11];
      v1834 = v1882;
      v1835 = v1883;
      if (v1883)
      {
        v591 = (unint64_t *)&v1883->__shared_owners_;
        do
          v592 = __ldxr(v591);
        while (__stxr(v592 + 1, v591));
      }
      md::LabelFeaturePool::addContourLineFeatures((uint64_t)v1764, (unint64_t *)a3, v590, (uint64_t)&v1828, v1690);
      v593 = v1835;
      if (v1835)
      {
        v594 = (unint64_t *)&v1835->__shared_owners_;
        do
          v595 = __ldaxr(v594);
        while (__stlxr(v595 - 1, v594));
        if (!v595)
        {
          ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
          std::__shared_weak_count::__release_weak(v593);
        }
      }
    }
    if (*(_QWORD *)(*(_QWORD *)a3 + 3360) != *(_QWORD *)(*(_QWORD *)a3 + 3368))
    {
      v596 = (uint64_t *)(*(_QWORD *)a3 + 3360);
      v1820 = *(_QWORD *)buf;
      v1821 = v1877;
      v1822 = *(_QWORD *)((char *)&v1877 + 4);
      v1823 = v1879;
      v1824 = v1880;
      v1825[0] = *(_OWORD *)v1881;
      *(_OWORD *)((char *)v1825 + 11) = *(_OWORD *)&v1881[11];
      v1826 = v1882;
      v1827 = v1883;
      if (v1883)
      {
        v597 = (unint64_t *)&v1883->__shared_owners_;
        do
          v598 = __ldxr(v597);
        while (__stxr(v598 + 1, v597));
      }
      md::LabelFeaturePool::addContourLineFeatures((uint64_t)v1764, (unint64_t *)a3, v596, (uint64_t)&v1820, v1690);
      v599 = v1827;
      if (v1827)
      {
        v600 = (unint64_t *)&v1827->__shared_owners_;
        do
          v601 = __ldaxr(v600);
        while (__stlxr(v601 - 1, v600));
        if (!v601)
        {
          ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
          std::__shared_weak_count::__release_weak(v599);
        }
      }
    }
  }
LABEL_989:
  if (!v1724)
    goto LABEL_2257;
  v602 = geo::codec::VectorTile::transitNodeCount(*(geo::codec::VectorTile **)a3);
  if (v602)
  {
    v603 = geo::codec::VectorTile::transitNodes(*(geo::codec::VectorTile **)a3);
    v1696 = *(_QWORD *)buf;
    v1812 = *(_QWORD *)buf;
    v1813 = v1877;
    v1814 = *(_QWORD *)((char *)&v1877 + 4);
    v1815 = v1879;
    v1816 = v1880;
    *(_OWORD *)v1817 = *(_OWORD *)v1881;
    *(_OWORD *)&v1817[11] = *(_OWORD *)&v1881[11];
    v1818 = v1882;
    v1819 = v1883;
    if (v1883)
    {
      v604 = (unint64_t *)&v1883->__shared_owners_;
      do
        v605 = __ldxr(v604);
      while (__stxr(v605 + 1, v604));
    }
    memset(v1901, 0, sizeof(v1901));
    {
      v1683 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1683, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v1902 = mdm::Allocator::instance(void)::alloc;
    v607 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v608 = v607 + 768;
    v610 = *(_QWORD *)v1901;
    v609 = *(_QWORD *)&v1901[8];
    if (*(_QWORD *)&v1901[8] != *(_QWORD *)v1901)
    {
      do
      {
        v611 = *(_OWORD *)(v609 - 24);
        *(_QWORD *)(v607 - 8) = *(_QWORD *)(v609 - 8);
        *(_OWORD *)(v607 - 24) = v611;
        v607 -= 24;
        v609 -= 24;
      }
      while (v609 != v610);
      v609 = v610;
    }
    v1702 = v602;
    v612 = *(_QWORD *)&v1901[16];
    *(_QWORD *)v1901 = v607;
    *(_QWORD *)&v1901[16] = v608;
    if (v609)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 40))(v1902, v609, v612 - v609);
    v613 = 0;
    v614 = v1764;
    v1698 = 0;
    while (1)
    {
      *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
      std::mutex::lock(v614);
      v615 = v1702;
      if (!v1698)
      {
        v616 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
        if (!v616)
        {
          std::mutex::unlock(v1764);
LABEL_1461:
          if (*(_QWORD *)v1901)
          {
            *(_QWORD *)&v1901[8] = *(_QWORD *)v1901;
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1902 + 40))(v1902, *(_QWORD *)v1901, *(_QWORD *)&v1901[16] - *(_QWORD *)v1901);
          }
          v979 = v1819;
          if (v1819)
          {
            v980 = (unint64_t *)&v1819->__shared_owners_;
            do
              v981 = __ldaxr(v980);
            while (__stlxr(v981 - 1, v980));
            if (!v981)
            {
              ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
              std::__shared_weak_count::__release_weak(v979);
            }
          }
          break;
        }
        v1698 = v616 + 3;
      }
      v618 = *(_QWORD *)v1901;
      v617 = *(_QWORD *)&v1901[8];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3) <= 0x1F && v613 < v1702)
      {
        while (*(_BYTE *)(v603 + 321) || *(_BYTE *)(v603 + 322))
        {
LABEL_1012:
          ++v613;
          v603 += 344;
          if (0xAAAAAAAAAAAAAAABLL * ((v617 - v618) >> 3) > 0x1F || v613 >= v615)
            goto LABEL_1009;
        }
        v1887 = 0;
        {
          v941 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v941, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v622 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
        v1887 = v622;
        *v622 = 1;
        md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v622 + 1), (uint64_t *)v603, 1);
        v1887 = v622;
        v623 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((float *)&v1764[5].__m_.__opaque[16], (uint64_t)&v1887, &v1887);
        v1817[25] = v624;
        v1703 = v613;
        if (!v624)
        {
          v643 = v623;
          v644 = (_QWORD *)v623[2];
          if (v644)
            ++*v644;
          geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1887);
          v645 = (_QWORD *)v643[2];
          v1887 = v645;
          if (v645)
            v646 = v645 + 1;
          else
            v646 = 0;
          md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v646, (_QWORD *)v603);
          v647 = v1887;
          goto LABEL_1369;
        }
        {
          v942 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v942, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v626 = mdm::Allocator::instance(void)::alloc;
        v627 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 952, 8);
        *(_QWORD *)v627 = &off_1E42DCE08;
        *(_QWORD *)(v627 + 8) = 0;
        *(_QWORD *)(v627 + 16) = 0;
        *(_QWORD *)(v627 + 24) = v626;
        v1700 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v627 + 32), (GeoCodecsPointFeature *)v603, (const md::LabelFeatureCreationParams *)&v1812);
        *(_QWORD *)(v627 + 32) = &off_1E429FD10;
        *(_QWORD *)(v627 + 704) = 0;
        *(_QWORD *)(v627 + 720) = 0;
        *(_QWORD *)(v627 + 712) = 0;
        v1728 = v603;
        v1770 = v627;
        {
          v943 = operator new();
          *(_QWORD *)(v943 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v943 + 24) = "VectorKitLabels";
          *(_OWORD *)(v943 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v943 = &off_1E42B5668;
          *(_QWORD *)(v943 + 8) = "VectorKitLabels";
          *(_OWORD *)(v943 + 72) = 0u;
          *(_OWORD *)(v943 + 88) = 0u;
          *(_OWORD *)(v943 + 104) = 0u;
          *(_OWORD *)(v943 + 120) = 0u;
          *(_OWORD *)(v943 + 136) = 0u;
          *(_OWORD *)(v943 + 152) = 0u;
          *(_OWORD *)(v943 + 168) = 0u;
          *(_OWORD *)(v943 + 184) = 0u;
          *(_OWORD *)(v943 + 200) = 0u;
          *(_OWORD *)(v943 + 216) = 0u;
          *(_OWORD *)(v943 + 232) = 0u;
          *(_QWORD *)(v943 + 248) = 0;
          *(_OWORD *)(v943 + 56) = 0u;
          v944 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v943 + 56), 0);
          if ((_DWORD)v944)
            geo::read_write_lock::logFailure(v944, (uint64_t)"initialization", v945);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v943 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v943 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v943;
        }
        *(_QWORD *)(v627 + 728) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v627 + 736) = 0;
        *(_QWORD *)(v627 + 752) = 0;
        *(_QWORD *)(v627 + 744) = 0;
        {
          v947 = operator new();
          *(_QWORD *)(v947 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v947 + 24) = "VectorKitLabels";
          *(_OWORD *)(v947 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v947 = &off_1E42B5668;
          *(_QWORD *)(v947 + 8) = "VectorKitLabels";
          *(_OWORD *)(v947 + 72) = 0u;
          *(_OWORD *)(v947 + 88) = 0u;
          *(_OWORD *)(v947 + 104) = 0u;
          *(_OWORD *)(v947 + 120) = 0u;
          *(_OWORD *)(v947 + 136) = 0u;
          *(_OWORD *)(v947 + 152) = 0u;
          *(_OWORD *)(v947 + 168) = 0u;
          *(_OWORD *)(v947 + 184) = 0u;
          *(_OWORD *)(v947 + 200) = 0u;
          *(_OWORD *)(v947 + 216) = 0u;
          *(_OWORD *)(v947 + 232) = 0u;
          *(_QWORD *)(v947 + 248) = 0;
          *(_OWORD *)(v947 + 56) = 0u;
          v948 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v947 + 56), 0);
          if ((_DWORD)v948)
            geo::read_write_lock::logFailure(v948, (uint64_t)"initialization", v949);
          v950 = malloc_create_zone(0, 0);
          *(_QWORD *)(v947 + 48) = v950;
          malloc_set_zone_name(v950, "VectorKitLabels");
          *(_QWORD *)(v947 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v947;
        }
        *(_QWORD *)(v627 + 760) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v627 + 768) = 0;
        *(_QWORD *)(v627 + 784) = 0;
        *(_QWORD *)(v627 + 776) = 0;
        {
          v951 = operator new();
          *(_QWORD *)(v951 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v951 + 24) = "VectorKitLabels";
          *(_OWORD *)(v951 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v951 = &off_1E42B5668;
          *(_QWORD *)(v951 + 8) = "VectorKitLabels";
          *(_OWORD *)(v951 + 72) = 0u;
          *(_OWORD *)(v951 + 88) = 0u;
          *(_OWORD *)(v951 + 104) = 0u;
          *(_OWORD *)(v951 + 120) = 0u;
          *(_OWORD *)(v951 + 136) = 0u;
          *(_OWORD *)(v951 + 152) = 0u;
          *(_OWORD *)(v951 + 168) = 0u;
          *(_OWORD *)(v951 + 184) = 0u;
          *(_OWORD *)(v951 + 200) = 0u;
          *(_OWORD *)(v951 + 216) = 0u;
          *(_OWORD *)(v951 + 232) = 0u;
          *(_QWORD *)(v951 + 248) = 0;
          *(_OWORD *)(v951 + 56) = 0u;
          v952 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v951 + 56), 0);
          if ((_DWORD)v952)
            geo::read_write_lock::logFailure(v952, (uint64_t)"initialization", v953);
          v954 = malloc_create_zone(0, 0);
          *(_QWORD *)(v951 + 48) = v954;
          malloc_set_zone_name(v954, "VectorKitLabels");
          *(_QWORD *)(v951 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v951;
        }
        *(_QWORD *)(v627 + 792) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v627 + 800) = 0;
        *(_QWORD *)(v627 + 816) = 0;
        *(_QWORD *)(v627 + 808) = 0;
        {
          v955 = operator new();
          *(_QWORD *)(v955 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v955 + 24) = "VectorKitLabels";
          *(_OWORD *)(v955 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v955 = &off_1E42B5668;
          *(_QWORD *)(v955 + 8) = "VectorKitLabels";
          *(_OWORD *)(v955 + 72) = 0u;
          *(_OWORD *)(v955 + 88) = 0u;
          *(_OWORD *)(v955 + 104) = 0u;
          *(_OWORD *)(v955 + 120) = 0u;
          *(_OWORD *)(v955 + 136) = 0u;
          *(_OWORD *)(v955 + 152) = 0u;
          *(_OWORD *)(v955 + 168) = 0u;
          *(_OWORD *)(v955 + 184) = 0u;
          *(_OWORD *)(v955 + 200) = 0u;
          *(_OWORD *)(v955 + 216) = 0u;
          *(_OWORD *)(v955 + 232) = 0u;
          *(_QWORD *)(v955 + 248) = 0;
          *(_OWORD *)(v955 + 56) = 0u;
          v956 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v955 + 56), 0);
          if ((_DWORD)v956)
            geo::read_write_lock::logFailure(v956, (uint64_t)"initialization", v957);
          v958 = malloc_create_zone(0, 0);
          *(_QWORD *)(v955 + 48) = v958;
          malloc_set_zone_name(v958, "VectorKitLabels");
          *(_QWORD *)(v955 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v955;
        }
        *(_QWORD *)(v627 + 824) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v627 + 832) = 0;
        *(_QWORD *)(v627 + 848) = 0;
        *(_QWORD *)(v627 + 840) = 0;
        {
          v959 = operator new();
          *(_QWORD *)(v959 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v959 + 24) = "VectorKitLabels";
          *(_OWORD *)(v959 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v959 = &off_1E42B5668;
          *(_QWORD *)(v959 + 8) = "VectorKitLabels";
          *(_OWORD *)(v959 + 72) = 0u;
          *(_OWORD *)(v959 + 88) = 0u;
          *(_OWORD *)(v959 + 104) = 0u;
          *(_OWORD *)(v959 + 120) = 0u;
          *(_OWORD *)(v959 + 136) = 0u;
          *(_OWORD *)(v959 + 152) = 0u;
          *(_OWORD *)(v959 + 168) = 0u;
          *(_OWORD *)(v959 + 184) = 0u;
          *(_OWORD *)(v959 + 200) = 0u;
          *(_OWORD *)(v959 + 216) = 0u;
          *(_OWORD *)(v959 + 232) = 0u;
          *(_QWORD *)(v959 + 248) = 0;
          *(_OWORD *)(v959 + 56) = 0u;
          v960 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v959 + 56), 0);
          if ((_DWORD)v960)
            geo::read_write_lock::logFailure(v960, (uint64_t)"initialization", v961);
          v962 = malloc_create_zone(0, 0);
          *(_QWORD *)(v959 + 48) = v962;
          malloc_set_zone_name(v962, "VectorKitLabels");
          *(_QWORD *)(v959 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v959;
        }
        *(_QWORD *)(v627 + 856) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v627 + 864) = 0;
        *(_QWORD *)(v627 + 880) = 0;
        *(_QWORD *)(v627 + 872) = 0;
        {
          v963 = operator new();
          *(_QWORD *)(v963 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v963 + 24) = "VectorKitLabels";
          *(_OWORD *)(v963 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v963 = &off_1E42B5668;
          *(_QWORD *)(v963 + 8) = "VectorKitLabels";
          *(_OWORD *)(v963 + 72) = 0u;
          *(_OWORD *)(v963 + 88) = 0u;
          *(_OWORD *)(v963 + 104) = 0u;
          *(_OWORD *)(v963 + 120) = 0u;
          *(_OWORD *)(v963 + 136) = 0u;
          *(_OWORD *)(v963 + 152) = 0u;
          *(_OWORD *)(v963 + 168) = 0u;
          *(_OWORD *)(v963 + 184) = 0u;
          *(_OWORD *)(v963 + 200) = 0u;
          *(_OWORD *)(v963 + 216) = 0u;
          *(_OWORD *)(v963 + 232) = 0u;
          *(_QWORD *)(v963 + 248) = 0;
          *(_OWORD *)(v963 + 56) = 0u;
          v964 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v963 + 56), 0);
          if ((_DWORD)v964)
            geo::read_write_lock::logFailure(v964, (uint64_t)"initialization", v965);
          v966 = malloc_create_zone(0, 0);
          *(_QWORD *)(v963 + 48) = v966;
          malloc_set_zone_name(v966, "VectorKitLabels");
          *(_QWORD *)(v963 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v963;
        }
        v1711 = (uint64_t *)(v627 + 768);
        v1713 = (uint64_t *)(v627 + 800);
        v1732 = (uint64_t *)(v627 + 832);
        v1706 = (_QWORD *)(v627 + 864);
        v1707 = (uint64_t *)(v627 + 736);
        *(_QWORD *)(v627 + 888) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v627 + 896) = *(_QWORD *)(v603 + 40);
        *(_QWORD *)(v627 + 904) = 0x8FF0000FF000000;
        *(_BYTE *)(v627 + 913) = 5;
        *(_OWORD *)(v627 + 920) = 0u;
        *(_OWORD *)(v627 + 936) = 0u;
        *(_DWORD *)(v627 + 400) = *(_DWORD *)(v603 + 300);
        if (*(_QWORD *)(v603 + 312))
        {
          geo::codec::transitNodeFeatureGetStyleAttributes((_QWORD *)v603, 0, v1884);
          v634 = (const FeatureStyleAttributes *)v1884[0];
          v635 = (char *)operator new(0x40uLL);
          *((_QWORD *)v635 + 2) = 0;
          *(_QWORD *)v635 = &off_1E42DAB40;
          *((_QWORD *)v635 + 1) = 0;
          FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v635 + 24), v634);
          *(_QWORD *)(v627 + 688) = v636;
          v637 = *(std::__shared_weak_count **)(v627 + 696);
          *(_QWORD *)(v627 + 696) = v635;
          if (!v637)
            goto LABEL_1032;
          v638 = (unint64_t *)&v637->__shared_owners_;
          do
            v639 = __ldaxr(v638);
          while (__stlxr(v639 - 1, v638));
          if (!v639)
          {
            ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
            std::__shared_weak_count::__release_weak(v637);
            v640 = (std::__shared_weak_count *)v1884[1];
            if (v1884[1])
            {
LABEL_1033:
              v641 = (unint64_t *)&v640->__shared_owners_;
              do
                v642 = __ldaxr(v641);
              while (__stlxr(v642 - 1, v641));
              if (!v642)
              {
                ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
                std::__shared_weak_count::__release_weak(v640);
              }
            }
          }
          else
          {
LABEL_1032:
            v640 = (std::__shared_weak_count *)v1884[1];
            if (v1884[1])
              goto LABEL_1033;
          }
        }
        v1884[1] = 0;
        {
          v967 = operator new();
          *(_QWORD *)(v967 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v967 + 24) = "VectorKitLabels";
          *(_OWORD *)(v967 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v967 = &off_1E42B5668;
          *(_QWORD *)(v967 + 8) = "VectorKitLabels";
          *(_OWORD *)(v967 + 72) = 0u;
          *(_OWORD *)(v967 + 88) = 0u;
          *(_OWORD *)(v967 + 104) = 0u;
          *(_OWORD *)(v967 + 120) = 0u;
          *(_OWORD *)(v967 + 136) = 0u;
          *(_OWORD *)(v967 + 152) = 0u;
          *(_OWORD *)(v967 + 168) = 0u;
          *(_OWORD *)(v967 + 184) = 0u;
          *(_OWORD *)(v967 + 200) = 0u;
          *(_OWORD *)(v967 + 216) = 0u;
          *(_OWORD *)(v967 + 232) = 0u;
          *(_QWORD *)(v967 + 248) = 0;
          *(_OWORD *)(v967 + 56) = 0u;
          v968 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v967 + 56), 0);
          if ((_DWORD)v968)
            geo::read_write_lock::logFailure(v968, (uint64_t)"initialization", v969);
          v970 = malloc_create_zone(0, 0);
          *(_QWORD *)(v967 + 48) = v970;
          malloc_set_zone_name(v970, "VectorKitLabels");
          *(_QWORD *)(v967 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v967;
        }
        v1885[1] = 0;
        v1885[0] = (void *)mdm::Allocator::instance(void)::alloc;
        v1884[0] = &v1884[1];
        v649 = *(std::__shared_weak_count **)(v603 + 8);
        if (v649)
        {
          v650 = std::__shared_weak_count::lock(v649);
          if (v650)
            v651 = *(geo::codec::VectorTile **)v603;
          else
            v651 = 0;
        }
        else
        {
          v651 = 0;
          v650 = 0;
        }
        v652 = geo::codec::VectorTile::transitLines(v651);
        v653 = geo::codec::VectorTile::transitLineCount(v651);
        v654 = *(unsigned __int16 *)(v603 + 276);
        v655 = *(_QWORD *)(v1770 + 864);
        if (v654 > (*(_QWORD *)(v1770 + 880) - v655) >> 3)
        {
          v656 = *(_QWORD *)(v1770 + 872);
          v657 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v1770 + 888) + 16))(*(_QWORD *)(v1770 + 888), 8 * v654, 8);
          v658 = v656 - v655;
          v659 = v657 + ((v656 - v655) & 0xFFFFFFFFFFFFFFF8);
          v660 = *(_QWORD *)(v1770 + 872);
          v661 = *(_QWORD *)(v1770 + 864);
          v662 = v659;
          if (v660 != v661)
          {
            v663 = v660 - v661 - 8;
            if (v663 < 0x58)
            {
              v662 = v657 + ((v656 - v655) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_1058;
            }
            v662 = v657 + ((v656 - v655) & 0xFFFFFFFFFFFFFFF8);
            if (v660 - (v658 & 0xFFFFFFFFFFFFFFF8) - v657 < 0x20)
              goto LABEL_2545;
            v664 = v658 >> 3;
            v665 = (v663 >> 3) + 1;
            v666 = v660 - 8 * (v665 & 0x3FFFFFFFFFFFFFFCLL);
            v667 = (_OWORD *)(v657 + 8 * v664 - 16);
            v668 = (__int128 *)(v660 - 16);
            v669 = v665 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v670 = *v668;
              *(v667 - 1) = *(v668 - 1);
              *v667 = v670;
              v667 -= 2;
              v668 -= 2;
              v669 -= 4;
            }
            while (v669);
            v662 = v659 - 8 * (v665 & 0x3FFFFFFFFFFFFFFCLL);
            v660 = v666;
            if (v665 != (v665 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_2545:
              do
              {
LABEL_1058:
                v671 = *(_QWORD *)(v660 - 8);
                v660 -= 8;
                *(_QWORD *)(v662 - 8) = v671;
                v662 -= 8;
              }
              while (v660 != v661);
            }
          }
          *(_QWORD *)(v1770 + 864) = v662;
          *(_QWORD *)(v1770 + 872) = v659;
          v672 = *(_QWORD *)(v1770 + 880);
          *(_QWORD *)(v1770 + 880) = v657 + 8 * v654;
          if (v661)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 888) + 40))(*(_QWORD *)(v1770 + 888), v661, v672 - v661);
        }
        if (*(_WORD *)(v603 + 276))
        {
          v673 = 0;
          while (1)
          {
            v674 = *(_QWORD *)(geo::codec::VectorTile::transitNodeLineIndices(v651)
                             + 8 * (v673 + *(unsigned int *)(v603 + 288)));
            if (v674 < v653)
              break;
LABEL_1064:
            if (++v673 >= (unint64_t)*(unsigned __int16 *)(v603 + 276))
              goto LABEL_1101;
          }
          v675 = (unint64_t *)(v652 + 104 * v674 + 40);
          v676 = v1770;
          v677 = *(unint64_t **)(v1770 + 872);
          v678 = *(_QWORD *)(v1770 + 880);
          if ((unint64_t)v677 < v678)
          {
            if (v677)
              *v677 = *v675;
            v679 = v677 + 1;
            goto LABEL_1092;
          }
          v680 = ((uint64_t)v677 - *v1706) >> 3;
          v681 = v680 + 1;
          if ((unint64_t)(v680 + 1) >> 61)
            abort();
          v682 = v678 - *v1706;
          if (v682 >> 2 > v681)
            v681 = v682 >> 2;
          if ((unint64_t)v682 >= 0x7FFFFFFFFFFFFFF8)
            v683 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v683 = v681;
          if (v683)
          {
            v684 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 888) + 16))(*(_QWORD *)(v1770 + 888), 8 * v683, 8);
            v685 = (unint64_t *)(v684 + 8 * v680);
            v686 = v684 + 8 * v683;
            if (v684)
              *v685 = *v675;
            v676 = v1770;
          }
          else
          {
            v686 = 0;
            v685 = (unint64_t *)(8 * v680);
          }
          v687 = *(_QWORD *)(v676 + 872);
          v688 = *(_QWORD *)(v676 + 864);
          v689 = v685;
          if (v687 != v688)
          {
            v690 = v687 - v688 - 8;
            if (v690 < 0x38)
            {
              v689 = v685;
            }
            else
            {
              v689 = v685;
              if ((unint64_t)(v687 - (_QWORD)v685) >= 0x20)
              {
                v691 = (v690 >> 3) + 1;
                v692 = v687 - 8 * (v691 & 0x3FFFFFFFFFFFFFFCLL);
                v693 = v685 - 2;
                v694 = (__int128 *)(v687 - 16);
                v695 = v691 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v696 = *v694;
                  *((_OWORD *)v693 - 1) = *(v694 - 1);
                  *(_OWORD *)v693 = v696;
                  v693 -= 4;
                  v694 -= 2;
                  v695 -= 4;
                }
                while (v695);
                v689 = &v685[-(v691 & 0x3FFFFFFFFFFFFFFCLL)];
                v687 = v692;
                if (v691 == (v691 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_1090;
              }
            }
            do
            {
              v697 = *(_QWORD *)(v687 - 8);
              v687 -= 8;
              *--v689 = v697;
            }
            while (v687 != v688);
          }
LABEL_1090:
          v679 = v685 + 1;
          *(_QWORD *)(v676 + 864) = v689;
          *(_QWORD *)(v676 + 872) = v685 + 1;
          v698 = *(_QWORD *)(v676 + 880);
          *(_QWORD *)(v676 + 880) = v686;
          if (v688)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v676 + 888) + 40))(*(_QWORD *)(v676 + 888), v688, v698 - v688);
LABEL_1092:
          *(_QWORD *)(v676 + 872) = v679;
          v699 = (void **)v1884[1];
          v700 = &v1884[1];
          v701 = &v1884[1];
          if (v1884[1])
          {
            v702 = *v675;
            while (1)
            {
              while (1)
              {
                v700 = v699;
                v703 = v699[4];
                if (v702 >= (unint64_t)v703)
                  break;
                v699 = (void **)*v700;
                v701 = v700;
                if (!*v700)
                  goto LABEL_1099;
              }
              if ((unint64_t)v703 >= v702)
                break;
              v699 = (void **)v700[1];
              if (!v699)
              {
                v701 = v700 + 1;
                goto LABEL_1099;
              }
            }
          }
          else
          {
LABEL_1099:
            v704 = (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v1885[0] + 16))(v1885[0], 40, 8);
            v704[4] = *v675;
            *v704 = 0;
            v704[1] = 0;
            v704[2] = (uint64_t)v700;
            *v701 = v704;
            if (*(_QWORD *)v1884[0])
            {
              v1884[0] = *(void **)v1884[0];
              v704 = (uint64_t *)*v701;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1884[1], v704);
            ++v1885[1];
          }
          goto LABEL_1064;
        }
LABEL_1101:
        if (!v650)
          goto LABEL_1105;
        v705 = (unint64_t *)&v650->__shared_owners_;
        do
          v706 = __ldaxr(v705);
        while (__stlxr(v706 - 1, v705));
        if (v706)
        {
LABEL_1105:
          v707 = *(_QWORD *)(v603 + 232);
          if (v707)
            goto LABEL_1106;
LABEL_1294:
          v844 = *(_DWORD **)(v1770 + 832);
          if (v844 != *(_DWORD **)(v1770 + 840))
            goto LABEL_1328;
          v845 = *(_QWORD *)(v603 + 24);
          if (!v845)
            goto LABEL_1328;
          v846 = *(unsigned __int8 *)(v845 + 33);
          if (!*(_BYTE *)(v845 + 33))
            goto LABEL_1328;
          v847 = *(_DWORD **)v845;
          if (*v847 != 37)
          {
            v848 = 0;
            v852 = v847 + 2;
            while (v846 - 1 != v848)
            {
              v853 = *v852;
              v852 += 2;
              ++v848;
              if (v853 == 37)
              {
                if (v848 < v846)
                  goto LABEL_1299;
                goto LABEL_1328;
              }
            }
            goto LABEL_1328;
          }
          v848 = 0;
LABEL_1299:
          v849 = LOWORD(v847[2 * v848 + 1]);
          v850 = *(_QWORD *)(v1770 + 848);
          if ((unint64_t)v844 < v850)
          {
            if (v844)
              *v844 = v849;
            v851 = v844 + 1;
            goto LABEL_1327;
          }
          v854 = v850 - (_QWORD)v844;
          v855 = v854 >> 1;
          if ((unint64_t)(v854 >> 1) <= 1)
            v855 = 1;
          if ((unint64_t)v854 >= 0x7FFFFFFFFFFFFFFCLL)
            v856 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v856 = v855;
          v857 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 856) + 16))(*(_QWORD *)(v1770 + 856), 4 * v856, 4);
          if (v857)
            *v857 = v849;
          v858 = *(_QWORD *)(v1770 + 840);
          v859 = *(_QWORD *)(v1770 + 832);
          v860 = v858 - v859;
          if (v858 == v859)
          {
            v862 = v857;
            goto LABEL_1325;
          }
          v861 = v860 - 4;
          if ((unint64_t)(v860 - 4) < 0x1C)
          {
            v862 = v857;
          }
          else
          {
            v862 = v857;
            if ((unint64_t)(v858 - (_QWORD)v857) >= 0x20)
            {
              v863 = (v861 >> 2) + 1;
              v864 = v858 - 4 * (v863 & 0x7FFFFFFFFFFFFFF8);
              v865 = v857 - 4;
              v866 = (__int128 *)(v858 - 16);
              v867 = v863 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v868 = *v866;
                *(v865 - 1) = *(v866 - 1);
                *v865 = v868;
                v865 -= 2;
                v866 -= 2;
                v867 -= 8;
              }
              while (v867);
              v862 = &v857[-(v863 & 0x7FFFFFFFFFFFFFF8)];
              v858 = v864;
              if (v863 == (v863 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1325:
                v870 = &v857[v856];
                v851 = v857 + 1;
                *(_QWORD *)(v1770 + 832) = v862;
                *(_QWORD *)(v1770 + 840) = v857 + 1;
                v871 = *(_QWORD *)(v1770 + 848);
                *(_QWORD *)(v1770 + 848) = v870;
                if (v859)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 856) + 40))(*(_QWORD *)(v1770 + 856), v859, v871 - v859);
LABEL_1327:
                *(_QWORD *)(v1770 + 840) = v851;
LABEL_1328:
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v872 = *(char **)(v1770 + 832);
                v873 = *(char **)(v1770 + 840);
                if (v872 != v873)
                {
                  v874 = v872 + 4;
                  while (v874 != v873)
                  {
                    v875 = v874 - 4;
                    v876 = *((_DWORD *)v874 - 1);
                    v877 = *(_DWORD *)v874;
                    v874 += 4;
                    if (v876 == v877)
                    {
                      for (m = v875 + 8; m != v873; m += 4)
                      {
                        v879 = v876;
                        v876 = *(_DWORD *)m;
                        if (v879 != *(_DWORD *)m)
                        {
                          *((_DWORD *)v875 + 1) = v876;
                          v875 += 4;
                        }
                      }
                      v883 = v875 + 4;
                      v884 = v873 - (v875 + 4);
                      if (!v884)
                        break;
                      v880 = v873 - &v883[v884];
                      if (v873 != &v883[v884])
                        memmove(v883, &v883[v884], v873 - &v883[v884]);
                      v881 = &v883[v880];
                      v882 = v1770;
                      *(_QWORD *)(v1770 + 840) = &v883[v880];
                      goto LABEL_1343;
                    }
                  }
                }
                v882 = v1770;
                v881 = *(char **)(v1770 + 840);
LABEL_1343:
                v885 = *(char **)(v882 + 832);
                v886 = (char *)(v881 - v885);
                v887 = (v881 - v885) >> 2;
                if (v887 >= (uint64_t)(*(_QWORD *)(v882 + 848) - (_QWORD)v885) >> 2)
                  goto LABEL_1358;
                if (v881 == v885)
                {
                  v890 = 4 * v887;
                }
                else
                {
                  v888 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v1770 + 856) + 16))(*(_QWORD *)(v1770 + 856), v886, 4);
                  v881 = *(char **)(v1770 + 840);
                  v889 = *(char **)(v1770 + 832);
                  v890 = v888 + 4 * v887;
                  v891 = (char *)(v881 - v889);
                  if (v881 != v889)
                  {
                    v892 = v891 - 4;
                    if ((unint64_t)(v891 - 4) < 0x2C)
                    {
                      v893 = v888 + 4 * v887;
                      goto LABEL_1354;
                    }
                    v893 = v888 + 4 * v887;
                    if ((unint64_t)(v881 - v886 - v888) < 0x20)
                      goto LABEL_2546;
                    v894 = ((unint64_t)v892 >> 2) + 1;
                    v895 = (_OWORD *)(v888 + 4 * v887 - 16);
                    v896 = v881 - 16;
                    v897 = v894 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v898 = *(_OWORD *)v896;
                      *(v895 - 1) = *((_OWORD *)v896 - 1);
                      *v895 = v898;
                      v895 -= 2;
                      v896 -= 32;
                      v897 -= 8;
                    }
                    while (v897);
                    v893 = v890 - 4 * (v894 & 0x7FFFFFFFFFFFFFF8);
                    v881 -= 4 * (v894 & 0x7FFFFFFFFFFFFFF8);
                    if (v894 != (v894 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_2546:
                      do
                      {
LABEL_1354:
                        v899 = *((_DWORD *)v881 - 1);
                        v881 -= 4;
                        *(_DWORD *)(v893 - 4) = v899;
                        v893 -= 4;
                      }
                      while (v881 != v889);
                    }
                    v881 = v889;
LABEL_1356:
                    v882 = v1770;
                    *(_QWORD *)(v1770 + 832) = v893;
                    *(_QWORD *)(v1770 + 840) = v890;
                    v900 = *(_QWORD *)(v1770 + 848);
                    *(_QWORD *)(v1770 + 848) = v890;
                    if (v881)
                      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v1770 + 856) + 40))(*(_QWORD *)(v1770 + 856), v881, v900 - (_QWORD)v881);
LABEL_1358:
                    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)v1884, (_QWORD *)v1884[1]);
                    if (v1887)
                      v901 = v1887 + 1;
                    else
                      v901 = 0;
                    v902 = (std::__shared_weak_count *)v901[2];
                    v901[1] = v1700;
                    v901[2] = v882;
                    if (v902)
                    {
                      v903 = (unint64_t *)&v902->__shared_owners_;
                      do
                        v904 = __ldaxr(v903);
                      while (__stlxr(v904 - 1, v903));
                      if (!v904)
                      {
                        ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
                        std::__shared_weak_count::__release_weak(v902);
                      }
                    }
                    v905 = *(_QWORD *)&v1764[10].__m_.__opaque[24];
                    v647 = v1887;
                    v906 = v1887 + 1;
                    if (!v1887)
                      v906 = 0;
                    v907 = v906[1];
                    *(_QWORD *)(v907 + 152) = v906;
                    v908 = v905 + 1;
                    *(_QWORD *)&v1764[10].__m_.__opaque[24] = v908;
                    *(_QWORD *)(v907 + 72) = v908;
                    *(_BYTE *)(v907 + 147) = 1;
LABEL_1369:
                    if (v647)
                      v909 = v647 + 1;
                    else
                      v909 = 0;
                    md::PointLabelFeature::addPointFeature((md::PointLabelFeature *)v909[1], (GeoCodecsPointFeature *)v603, (const md::LabelFeatureCreationParams *)&v1812);
                    std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((unint64_t)(v1698 + 35), (uint64_t)v1887, &v1887);
                    if (v1887)
                      v910 = v1887 + 1;
                    else
                      v910 = 0;
                    v912 = (void *)v910[1];
                    v911 = (std::__shared_weak_count *)v910[2];
                    __p = v912;
                    v1890 = v911;
                    if (v911)
                    {
                      v913 = (unint64_t *)&v911->__shared_owners_;
                      do
                        v914 = __ldxr(v913);
                      while (__stxr(v914 + 1, v913));
                      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1887);
                      v915 = (unint64_t *)&v911->__shared_weak_owners_;
                      do
                        v916 = __ldxr(v915);
                      while (__stxr(v916 + 1, v915));
                    }
                    else
                    {
                      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1887);
                    }
                    v917 = (uint64_t **)(a1 + 208);
                    v918 = *v1747;
                    v919 = (uint64_t **)(a1 + 208);
                    if (*v1747)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v917 = (uint64_t **)v918;
                          v920 = v918[5];
                          if ((unint64_t)v911 >= v920)
                            break;
                          v918 = *v917;
                          v919 = v917;
                          if (!*v917)
                            goto LABEL_1389;
                        }
                        if (v920 >= (unint64_t)v911)
                          break;
                        v918 = v917[1];
                        if (!v918)
                        {
                          v919 = v917 + 1;
                          goto LABEL_1389;
                        }
                      }
                      v613 = v1703;
                      if (v911)
                        std::__shared_weak_count::__release_weak(v911);
                    }
                    else
                    {
LABEL_1389:
                      v921 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 27)
                                                                                            + 16))(*((_QWORD *)a1 + 27), 48, 8);
                      v921[4] = (uint64_t)v912;
                      v921[5] = (uint64_t)v911;
                      *v921 = 0;
                      v921[1] = 0;
                      v921[2] = (uint64_t)v917;
                      *v919 = v921;
                      v922 = (uint64_t *)**v1723;
                      if (v922)
                      {
                        *v1723 = v922;
                        v921 = *v919;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 26), v921);
                      ++*((_QWORD *)a1 + 28);
                      v613 = v1703;
                    }
                    if (v1817[25])
                    {
                      v923 = __p;
                      v924 = *(_QWORD **)&v1901[8];
                      if (*(_QWORD *)&v1901[8] >= *(_QWORD *)&v1901[16])
                      {
                        v926 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3);
                        v927 = v926 + 1;
                        if (v926 + 1 > 0xAAAAAAAAAAAAAAALL)
                          abort();
                        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) > v927)
                          v927 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1901[16] - *(_QWORD *)v1901) >> 3) >= 0x555555555555555)
                          v928 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v928 = v927;
                        if (v928)
                        {
                          v929 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 16))(v1902, 24 * v928, 8);
                          v930 = (_QWORD *)(v929 + 24 * v926);
                          v931 = v929 + 24 * v928;
                          if (v929)
                          {
                            *v930 = v923;
                            v932 = v929 + 24 * v926;
                            *(_QWORD *)(v932 + 8) = 0;
                            *(_QWORD *)(v932 + 16) = 0;
                          }
                        }
                        else
                        {
                          v931 = 0;
                          v930 = (_QWORD *)(8 * ((uint64_t)(*(_QWORD *)&v1901[8] - *(_QWORD *)v1901) >> 3));
                        }
                        v934 = *(_QWORD *)v1901;
                        v933 = *(_QWORD *)&v1901[8];
                        v613 = v1703;
                        v935 = v930;
                        if (*(_QWORD *)&v1901[8] != *(_QWORD *)v1901)
                        {
                          do
                          {
                            v936 = *(_OWORD *)(v933 - 24);
                            *(v935 - 1) = *(_QWORD *)(v933 - 8);
                            *(_OWORD *)(v935 - 3) = v936;
                            v935 -= 3;
                            v933 -= 24;
                          }
                          while (v933 != v934);
                          v933 = *(_QWORD *)v1901;
                        }
                        v925 = v930 + 3;
                        *(_QWORD *)v1901 = v935;
                        *(_QWORD *)&v1901[8] = v930 + 3;
                        v937 = *(_QWORD *)&v1901[16];
                        *(_QWORD *)&v1901[16] = v931;
                        if (v933)
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1902 + 40))(v1902, v933, v937 - v933);
                      }
                      else
                      {
                        if (*(_QWORD *)&v1901[8])
                        {
                          *(_QWORD *)(*(_QWORD *)&v1901[8] + 8) = 0;
                          v924[2] = 0;
                          *v924 = v923;
                        }
                        v925 = v924 + 3;
                      }
                      *(_QWORD *)&v1901[8] = v925;
                    }
                    v938 = v1890;
                    if (v1890)
                    {
                      v939 = (unint64_t *)&v1890->__shared_owners_;
                      do
                        v940 = __ldaxr(v939);
                      while (__stlxr(v940 - 1, v939));
                      if (!v940)
                      {
                        ((void (*)(std::__shared_weak_count *))v938->__on_zero_shared)(v938);
                        std::__shared_weak_count::__release_weak(v938);
                      }
                    }
                    v618 = *(_QWORD *)v1901;
                    v617 = *(_QWORD *)&v1901[8];
                    v615 = v1702;
                    goto LABEL_1012;
                  }
                }
                v893 = v890;
                goto LABEL_1356;
              }
            }
          }
          do
          {
            v869 = *(_DWORD *)(v858 - 4);
            v858 -= 4;
            *--v862 = v869;
          }
          while (v858 != v859);
          goto LABEL_1325;
        }
        ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
        std::__shared_weak_count::__release_weak(v650);
        v707 = *(_QWORD *)(v603 + 232);
        if (!v707)
          goto LABEL_1294;
LABEL_1106:
        v1720 = v707;
        v708 = *(std::__shared_weak_count **)(v603 + 8);
        if (v708)
        {
          v708 = std::__shared_weak_count::lock(v708);
          v709 = v708;
          if (v708)
            v708 = *(std::__shared_weak_count **)v603;
        }
        else
        {
          v709 = 0;
        }
        v710 = geo::codec::VectorTile::transitLines((geo::codec::VectorTile *)v708);
        v1697 = v709;
        v1743 = v710;
        {
          v971 = operator new();
          *(_QWORD *)(v971 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v971 + 24) = "VectorKitLabels";
          *(_OWORD *)(v971 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v971 = &off_1E42B5668;
          *(_QWORD *)(v971 + 8) = "VectorKitLabels";
          *(_OWORD *)(v971 + 72) = 0u;
          *(_OWORD *)(v971 + 88) = 0u;
          *(_OWORD *)(v971 + 104) = 0u;
          *(_OWORD *)(v971 + 120) = 0u;
          *(_OWORD *)(v971 + 136) = 0u;
          *(_OWORD *)(v971 + 152) = 0u;
          *(_OWORD *)(v971 + 168) = 0u;
          *(_OWORD *)(v971 + 184) = 0u;
          *(_OWORD *)(v971 + 200) = 0u;
          *(_OWORD *)(v971 + 216) = 0u;
          *(_OWORD *)(v971 + 232) = 0u;
          *(_QWORD *)(v971 + 248) = 0;
          *(_OWORD *)(v971 + 56) = 0u;
          v972 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v971 + 56), 0);
          if ((_DWORD)v972)
            geo::read_write_lock::logFailure(v972, (uint64_t)"initialization", v973);
          v974 = malloc_create_zone(0, 0);
          *(_QWORD *)(v971 + 48) = v974;
          malloc_set_zone_name(v974, "VectorKitLabels");
          *(_QWORD *)(v971 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v971;
        }
        v1716 = mdm::Allocator::instance(void)::alloc;
        v713 = v1720;
        {
          v975 = operator new();
          *(_QWORD *)(v975 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v975 + 24) = "VectorKitLabels";
          *(_OWORD *)(v975 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v975 = &off_1E42B5668;
          *(_QWORD *)(v975 + 8) = "VectorKitLabels";
          *(_OWORD *)(v975 + 72) = 0u;
          *(_OWORD *)(v975 + 88) = 0u;
          *(_OWORD *)(v975 + 104) = 0u;
          *(_OWORD *)(v975 + 120) = 0u;
          *(_OWORD *)(v975 + 136) = 0u;
          *(_OWORD *)(v975 + 152) = 0u;
          *(_OWORD *)(v975 + 168) = 0u;
          *(_OWORD *)(v975 + 184) = 0u;
          *(_OWORD *)(v975 + 200) = 0u;
          *(_OWORD *)(v975 + 216) = 0u;
          *(_OWORD *)(v975 + 232) = 0u;
          *(_QWORD *)(v975 + 248) = 0;
          *(_OWORD *)(v975 + 56) = 0u;
          v976 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v975 + 56), 0);
          if ((_DWORD)v976)
            geo::read_write_lock::logFailure(v976, (uint64_t)"initialization", v977);
          v978 = malloc_create_zone(0, 0);
          *(_QWORD *)(v975 + 48) = v978;
          malloc_set_zone_name(v978, "VectorKitLabels");
          *(_QWORD *)(v975 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v975;
          v713 = v1720;
          v710 = v1743;
        }
        v714 = 0;
        v715 = 0;
        v1750 = 0;
        __srcb = 0;
        v1709 = 0;
        v1701 = mdm::Allocator::instance(void)::alloc;
        while (2)
        {
          v1893 = 0;
          geo::codec::transitNodeFeatureGetSystem((_QWORD *)v603, v714, &v1893);
          v719 = v1893;
          if (!v1893)
            goto LABEL_1117;
          v720 = v1893[3];
          if (v720)
          {
            v721 = *(unsigned __int8 *)(v720 + 33);
            if (*(_BYTE *)(v720 + 33))
            {
              v722 = *(_DWORD **)v720;
              if (*v722 == 49)
              {
                v723 = 0;
LABEL_1123:
                v1759 = LOWORD(v722[2 * v723 + 1]);
                if (v1893[1])
                  goto LABEL_1160;
LABEL_1124:
                v724 = __srcb;
                v717 = v715;
LABEL_1125:
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                if (v715 != v717)
                {
                  v725 = v715 + 4;
                  while (v725 != v717)
                  {
                    v726 = v725 - 4;
                    v727 = *((_DWORD *)v725 - 1);
                    v728 = *(_DWORD *)v725;
                    v725 += 4;
                    if (v727 == v728)
                    {
                      for (n = v726 + 8; n != v717; n += 4)
                      {
                        v730 = v727;
                        v727 = *(_DWORD *)n;
                        if (v730 != *(_DWORD *)n)
                        {
                          *((_DWORD *)v726 + 1) = v727;
                          v726 += 4;
                        }
                      }
                      v731 = v726 + 4;
                      v732 = (char *)(v717 - (v726 + 4));
                      if (v732)
                      {
                        v733 = v717 - &v732[(_QWORD)v731];
                        if (v733)
                          memmove(v731, &v732[(_QWORD)v731], v733);
                        v717 = (char *)v731 + v733;
                      }
                      break;
                    }
                  }
                }
                if (!v1759 && __srcb == v724 && v715 == v717)
                {
                  v716 = 0;
                  v717 = v715;
                  v603 = v1728;
                  v718 = (_QWORD *)v1770;
                }
                else
                {
                  v734 = *(_QWORD *)(v1770 + 808) - *(_QWORD *)(v1770 + 800);
                  v735 = v724 - __srcb;
                  v736 = *(_QWORD *)(v1770 + 776) - *(_QWORD *)(v1770 + 768);
                  v1738 = v717 - v715;
                  v737 = *(_QWORD *)(v1770 + 744);
                  v738 = *(_QWORD *)(v1770 + 752);
                  if (v737 >= v738)
                  {
                    v740 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v737 - *v1707) >> 2);
                    v741 = v740 + 1;
                    if (v740 + 1 > 0x1555555555555555)
                      abort();
                    v742 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v738 - *v1707) >> 2);
                    if (2 * v742 > v741)
                      v741 = 2 * v742;
                    if (v742 >= 0xAAAAAAAAAAAAAAALL)
                      v743 = 0x1555555555555555;
                    else
                      v743 = v741;
                    if (v743)
                    {
                      v744 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 760) + 16))(*(_QWORD *)(v1770 + 760), 12 * v743, 4);
                      v745 = v744 + 12 * v740;
                      v746 = v744 + 12 * v743;
                      if (v744)
                      {
                        *(_DWORD *)v745 = v1759;
                        *(_WORD *)(v745 + 4) = v734 >> 2;
                        *(_WORD *)(v745 + 6) = (unint64_t)v735 >> 2;
                        *(_BYTE *)(v745 + 8) = v736 >> 2;
                        *(_BYTE *)(v745 + 9) = (unint64_t)v1738 >> 2;
                      }
                    }
                    else
                    {
                      v746 = 0;
                      v745 = 12 * v740;
                    }
                    v718 = (_QWORD *)v1770;
                    v801 = *(_QWORD *)(v1770 + 744);
                    v802 = *(_QWORD *)(v1770 + 736);
                    v803 = v745;
                    if (v801 != v802)
                    {
                      do
                      {
                        v804 = *(_QWORD *)(v801 - 12);
                        v801 -= 12;
                        v805 = *(_DWORD *)(v801 + 8);
                        *(_QWORD *)(v803 - 12) = v804;
                        v803 -= 12;
                        *(_DWORD *)(v803 + 8) = v805;
                      }
                      while (v801 != v802);
                      v801 = *v1707;
                    }
                    v739 = v745 + 12;
                    *(_QWORD *)(v1770 + 736) = v803;
                    *(_QWORD *)(v1770 + 744) = v745 + 12;
                    v806 = *(_QWORD *)(v1770 + 752);
                    *(_QWORD *)(v1770 + 752) = v746;
                    if (v801)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 760) + 40))(*(_QWORD *)(v1770 + 760), v801, v806 - v801);
                  }
                  else
                  {
                    if (v737)
                    {
                      *(_DWORD *)v737 = v1759;
                      *(_WORD *)(v737 + 4) = v734 >> 2;
                      *(_WORD *)(v737 + 6) = (unint64_t)v735 >> 2;
                      *(_BYTE *)(v737 + 8) = v736 >> 2;
                      *(_BYTE *)(v737 + 9) = (unint64_t)v1738 >> 2;
                    }
                    v739 = v737 + 12;
                    v718 = (_QWORD *)v1770;
                  }
                  v718[93] = v739;
                  std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v1713, v718[101], __srcb, v724, v735 >> 2);
                  v716 = v1738 >> 2;
                  std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v1711, v718[97], v715, v717, v1738 >> 2);
                  v603 = v1728;
                  v710 = v1743;
                }
                std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v1732, v718[105], v715, v717, v716);
LABEL_1117:
                if (++v714 != v713)
                  continue;
                v807 = (_QWORD *)v1770;
                v808 = *(_QWORD *)(v1770 + 800);
                v809 = *(_QWORD *)(v1770 + 808);
                v810 = v809 - v808;
                v811 = (v809 - v808) >> 2;
                if (v811 >= (*(_QWORD *)(v1770 + 816) - v808) >> 2)
                  goto LABEL_1270;
                if (v809 == v808)
                {
                  v814 = 4 * v811;
                }
                else
                {
                  v812 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 824) + 16))(*(_QWORD *)(v1770 + 824), v810, 4);
                  v808 = *(_QWORD *)(v1770 + 808);
                  v813 = *(_QWORD *)(v1770 + 800);
                  v814 = v812 + 4 * v811;
                  v815 = v808 - v813;
                  if (v808 != v813)
                  {
                    v816 = v815 - 4;
                    if ((unint64_t)(v815 - 4) < 0x2C)
                    {
                      v817 = v812 + 4 * v811;
                      goto LABEL_1266;
                    }
                    v817 = v812 + 4 * v811;
                    if ((unint64_t)(v808 - (v810 + v812)) < 0x20)
                      goto LABEL_2547;
                    v818 = (v816 >> 2) + 1;
                    v819 = (_OWORD *)(v812 + 4 * v811 - 16);
                    v820 = (__int128 *)(v808 - 16);
                    v821 = v818 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v822 = *v820;
                      *(v819 - 1) = *(v820 - 1);
                      *v819 = v822;
                      v819 -= 2;
                      v820 -= 2;
                      v821 -= 8;
                    }
                    while (v821);
                    v817 = v814 - 4 * (v818 & 0x7FFFFFFFFFFFFFF8);
                    v808 -= 4 * (v818 & 0x7FFFFFFFFFFFFFF8);
                    if (v818 != (v818 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_2547:
                      do
                      {
LABEL_1266:
                        v823 = *(_DWORD *)(v808 - 4);
                        v808 -= 4;
                        *(_DWORD *)(v817 - 4) = v823;
                        v817 -= 4;
                      }
                      while (v808 != v813);
                    }
                    v808 = v813;
LABEL_1268:
                    v807 = (_QWORD *)v1770;
                    *(_QWORD *)(v1770 + 800) = v817;
                    *(_QWORD *)(v1770 + 808) = v814;
                    v824 = *(_QWORD *)(v1770 + 816);
                    *(_QWORD *)(v1770 + 816) = v814;
                    if (v808)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 824) + 40))(*(_QWORD *)(v1770 + 824), v808, v824 - v808);
LABEL_1270:
                    v825 = v807[96];
                    v826 = v807[97];
                    v827 = v826 - v825;
                    v828 = (v826 - v825) >> 2;
                    if (v828 >= (v807[98] - v825) >> 2)
                      goto LABEL_1285;
                    if (v826 == v825)
                    {
                      v831 = 4 * v828;
                    }
                    else
                    {
                      v829 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 792) + 16))(*(_QWORD *)(v1770 + 792), v827, 4);
                      v825 = *(_QWORD *)(v1770 + 776);
                      v830 = *(_QWORD *)(v1770 + 768);
                      v831 = v829 + 4 * v828;
                      v832 = v825 - v830;
                      if (v825 != v830)
                      {
                        v833 = v832 - 4;
                        if ((unint64_t)(v832 - 4) < 0x2C)
                        {
                          v834 = v829 + 4 * v828;
                          goto LABEL_1281;
                        }
                        v834 = v829 + 4 * v828;
                        if ((unint64_t)(v825 - v827 - v829) < 0x20)
                          goto LABEL_2548;
                        v835 = (v833 >> 2) + 1;
                        v836 = (_OWORD *)(v829 + 4 * v828 - 16);
                        v837 = (__int128 *)(v825 - 16);
                        v838 = v835 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v839 = *v837;
                          *(v836 - 1) = *(v837 - 1);
                          *v836 = v839;
                          v836 -= 2;
                          v837 -= 2;
                          v838 -= 8;
                        }
                        while (v838);
                        v834 = v831 - 4 * (v835 & 0x7FFFFFFFFFFFFFF8);
                        v825 -= 4 * (v835 & 0x7FFFFFFFFFFFFFF8);
                        if (v835 != (v835 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_2548:
                          do
                          {
LABEL_1281:
                            v840 = *(_DWORD *)(v825 - 4);
                            v825 -= 4;
                            *(_DWORD *)(v834 - 4) = v840;
                            v834 -= 4;
                          }
                          while (v825 != v830);
                        }
                        v825 = v830;
LABEL_1283:
                        *(_QWORD *)(v1770 + 768) = v834;
                        *(_QWORD *)(v1770 + 776) = v831;
                        v841 = *(_QWORD *)(v1770 + 784);
                        *(_QWORD *)(v1770 + 784) = v831;
                        if (v825)
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1770 + 792) + 40))(*(_QWORD *)(v1770 + 792), v825, v841 - v825);
LABEL_1285:
                        if (__srcb)
                          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v1701 + 40))(v1701, __srcb, v1709 - (_QWORD)__srcb);
                        if (v715)
                          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v1716 + 40))(v1716, v715, v1750 - (_QWORD)v715);
                        if (v1697)
                        {
                          v842 = (unint64_t *)&v1697->__shared_owners_;
                          do
                            v843 = __ldaxr(v842);
                          while (__stlxr(v843 - 1, v842));
                          if (!v843)
                          {
                            ((void (*)(std::__shared_weak_count *))v1697->__on_zero_shared)(v1697);
                            std::__shared_weak_count::__release_weak(v1697);
                          }
                        }
                        goto LABEL_1294;
                      }
                    }
                    v834 = v831;
                    goto LABEL_1283;
                  }
                }
                v817 = v814;
                goto LABEL_1268;
              }
              v723 = 0;
              v747 = v722 + 2;
              do
              {
                if (v721 - 1 == v723)
                  goto LABEL_1159;
                v748 = *v747;
                v747 += 2;
                ++v723;
              }
              while (v748 != 49);
              if (v723 < v721)
                goto LABEL_1123;
            }
          }
          break;
        }
LABEL_1159:
        v1759 = 0;
        if (!v1893[1])
          goto LABEL_1124;
LABEL_1160:
        v749 = 0;
        v717 = v715;
        v724 = __srcb;
LABEL_1163:
        v750 = v1884[1];
        if (!v1884[1])
          goto LABEL_1162;
        v751 = v710 + 104 * *v719 + 104 * v749;
        v752 = *(_QWORD *)(v751 + 40);
        while (1)
        {
          v753 = v750[4];
          if (v752 >= v753)
          {
            if (v753 >= v752)
            {
              v754 = *(_QWORD *)(v751 + 24);
              if (v754)
              {
                v755 = *(unsigned __int8 *)(v754 + 33);
                if (*(_BYTE *)(v754 + 33))
                {
                  v756 = *(_DWORD **)v754;
                  if (*v756 == 37)
                  {
                    v757 = 0;
LABEL_1173:
                    v758 = LOWORD(v756[2 * v757 + 1]);
                    if ((unint64_t)v717 < v1750)
                    {
                      if (v717)
                        *(_DWORD *)v717 = v758;
                      v717 += 4;
                      goto LABEL_1203;
                    }
                    v761 = (v717 - v715) >> 2;
                    v762 = v761 + 1;
                    if ((unint64_t)(v761 + 1) >> 62)
                      abort();
                    v763 = v1750 - (_QWORD)v715;
                    if ((uint64_t)(v1750 - (_QWORD)v715) >> 1 > v762)
                      v762 = (uint64_t)(v1750 - (_QWORD)v715) >> 1;
                    if (v763 >= 0x7FFFFFFFFFFFFFFCLL)
                      v764 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v764 = v762;
                    if (v764)
                    {
                      v765 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1716 + 16))(v1716, 4 * v764, 4);
                      v766 = (char *)(v765 + 4 * v761);
                      v1750 = v765 + 4 * v764;
                      if (v765)
                        *(_DWORD *)v766 = v758;
                    }
                    else
                    {
                      v1750 = 0;
                      v766 = (char *)(4 * v761);
                    }
                    v713 = v1720;
                    v767 = v766;
                    if (v717 != v715)
                    {
                      v768 = v717 - v715 - 4;
                      if (v768 < 0x9C
                        || &v766[-(v768 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v766 - 4
                        || &v717[-(v768 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v717 - 4
                        || (unint64_t)(v717 - v766) < 0x20)
                      {
                        v769 = v717;
                        v767 = v766;
                      }
                      else
                      {
                        v779 = (v768 >> 2) + 1;
                        v769 = &v717[-4 * (v779 & 0x7FFFFFFFFFFFFFF8)];
                        v780 = v766 - 16;
                        v781 = v717 - 16;
                        v782 = v779 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v783 = *(_OWORD *)v781;
                          *((_OWORD *)v780 - 1) = *((_OWORD *)v781 - 1);
                          *(_OWORD *)v780 = v783;
                          v780 -= 32;
                          v781 -= 32;
                          v782 -= 8;
                        }
                        while (v782);
                        v767 = &v766[-4 * (v779 & 0x7FFFFFFFFFFFFFF8)];
                        if (v779 == (v779 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_1200;
                      }
                      do
                      {
                        v770 = *((_DWORD *)v769 - 1);
                        v769 -= 4;
                        *((_DWORD *)v767 - 1) = v770;
                        v767 -= 4;
                      }
                      while (v769 != v715);
                    }
LABEL_1200:
                    v717 = v766 + 4;
                    if (v715)
                      (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v1716 + 40))(v1716, v715, v763);
                    v715 = v767;
LABEL_1203:
                    v710 = v1743;
                  }
                  else
                  {
                    v757 = 0;
                    v759 = v756 + 2;
                    while (v755 - 1 != v757)
                    {
                      v760 = *v759;
                      v759 += 2;
                      ++v757;
                      if (v760 == 37)
                      {
                        if (v757 < v755)
                          goto LABEL_1173;
                        break;
                      }
                    }
                  }
                }
                v771 = *(_QWORD *)(v751 + 24);
                if (v771)
                {
                  v772 = *(unsigned __int8 *)(v771 + 33);
                  if (*(_BYTE *)(v771 + 33))
                  {
                    v773 = *(_DWORD **)v771;
                    if (*v773 == 50)
                    {
                      v774 = 0;
LABEL_1208:
                      v775 = LOWORD(v773[2 * v774 + 1]);
                      v776 = __srcb;
                      if (__srcb != v724)
                      {
                        while (*(_DWORD *)v776 != v775)
                        {
                          v776 += 4;
                          if (v776 == v724)
                          {
                            v776 = v724;
                            break;
                          }
                        }
                      }
                      if (v776 != v724)
                        goto LABEL_1162;
                      if ((unint64_t)v724 < v1709)
                      {
                        if (v724)
                          *(_DWORD *)v724 = v775;
                        v724 += 4;
                        goto LABEL_1162;
                      }
                      v784 = v724 - __srcb;
                      v785 = (v724 - __srcb) >> 2;
                      v786 = v785 + 1;
                      if ((unint64_t)(v785 + 1) >> 62)
                        abort();
                      v787 = v1709 - (_QWORD)__srcb;
                      if ((uint64_t)(v1709 - (_QWORD)__srcb) >> 1 > v786)
                        v786 = (uint64_t)(v1709 - (_QWORD)__srcb) >> 1;
                      if (v787 >= 0x7FFFFFFFFFFFFFFCLL)
                        v788 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v788 = v786;
                      if (v788)
                      {
                        v789 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1701 + 16))(v1701, 4 * v788, 4);
                        v790 = (char *)(v789 + 4 * v785);
                        v1709 = v789 + 4 * v788;
                        if (v789)
                          *(_DWORD *)v790 = v775;
                      }
                      else
                      {
                        v1709 = 0;
                        v790 = (char *)(4 * v785);
                      }
                      v713 = v1720;
                      v791 = v790;
                      v792 = __srcb;
                      if (__srcb != v724)
                      {
                        v793 = v784 - 4;
                        if ((unint64_t)(v784 - 4) < 0x9C
                          || &v790[-(v793 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v790 - 4
                          || &v724[-(v793 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v724 - 4
                          || (unint64_t)(v724 - v790) < 0x20)
                        {
                          v794 = v724;
                          v791 = v790;
                          v792 = __srcb;
                        }
                        else
                        {
                          v796 = (v793 >> 2) + 1;
                          v794 = &v724[-4 * (v796 & 0x7FFFFFFFFFFFFFF8)];
                          v797 = v790 - 16;
                          v798 = v724 - 16;
                          v799 = v796 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v800 = *(_OWORD *)v798;
                            *((_OWORD *)v797 - 1) = *((_OWORD *)v798 - 1);
                            *(_OWORD *)v797 = v800;
                            v797 -= 32;
                            v798 -= 32;
                            v799 -= 8;
                          }
                          while (v799);
                          v791 = &v790[-4 * (v796 & 0x7FFFFFFFFFFFFFF8)];
                          v792 = __srcb;
                          if (v796 == (v796 & 0x7FFFFFFFFFFFFFF8))
                            goto LABEL_1238;
                        }
                        do
                        {
                          v795 = *((_DWORD *)v794 - 1);
                          v794 -= 4;
                          *((_DWORD *)v791 - 1) = v795;
                          v791 -= 4;
                        }
                        while (v794 != v792);
                      }
LABEL_1238:
                      v724 = v790 + 4;
                      if (v792)
                        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v1701 + 40))(v1701, v792, v787);
                      __srcb = v791;
                      v710 = v1743;
                      goto LABEL_1162;
                    }
                    v774 = 0;
                    v777 = v773 + 2;
                    while (v772 - 1 != v774)
                    {
                      v778 = *v777;
                      v777 += 2;
                      ++v774;
                      if (v778 == 50)
                      {
                        if (v774 >= v772)
                          break;
                        goto LABEL_1208;
                      }
                    }
                  }
                }
              }
LABEL_1162:
              ++v749;
              v719 = v1893;
              if (v749 >= v1893[1])
                goto LABEL_1125;
              goto LABEL_1163;
            }
            ++v750;
          }
          v750 = (_QWORD *)*v750;
          if (!v750)
            goto LABEL_1162;
        }
      }
LABEL_1009:
      md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v1696 + 296), (char **)v1901, 1u, 1, *(_QWORD *)(*(_QWORD *)(v1696 + 152) + 32));
      v614 = v1764;
      std::mutex::unlock(v1764);
      if (v613 >= v1702)
        goto LABEL_1461;
    }
  }
  v1744 = *(_QWORD *)buf;
  v1804 = *(_QWORD *)buf;
  v1805 = v1877;
  v1806 = *(_QWORD *)((char *)&v1877 + 4);
  v1807 = v1879;
  v1808 = v1880;
  *(_OWORD *)v1809 = *(_OWORD *)v1881;
  *(_OWORD *)&v1809[11] = *(_OWORD *)&v1881[11];
  v982 = v1883;
  v1810 = v1882;
  v1811 = v1883;
  if (v1883)
  {
    v983 = (unint64_t *)&v1883->__shared_owners_;
    do
      v984 = __ldxr(v983);
    while (__stxr(v984 + 1, v983));
  }
  __srcc = (void *)geo::codec::VectorTile::transitAccessPointCount(*(geo::codec::VectorTile **)a3);
  if (__srcc)
  {
    v985 = geo::codec::VectorTile::transitAccessPoints(*(geo::codec::VectorTile **)a3);
    v1884[1] = 0;
    v1884[0] = 0;
    v1885[0] = 0;
    {
      v1684 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1684, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v1885[1] = (void *)mdm::Allocator::instance(void)::alloc;
    v987 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v988 = v987 + 768;
    v989 = (char *)v1884[1];
    v990 = (char *)v1884[0];
    if (v1884[1] != v1884[0])
    {
      do
      {
        v991 = *(_OWORD *)(v989 - 24);
        *((_QWORD *)v987 - 1) = *((_QWORD *)v989 - 1);
        *(_OWORD *)(v987 - 24) = v991;
        v987 -= 24;
        v989 -= 24;
      }
      while (v989 != v990);
      v989 = v990;
    }
    v992 = v1885[0];
    v1884[0] = v987;
    v1885[0] = v988;
    if (v989)
      (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v989, v992 - v989);
    v993 = 0;
    v994 = v1764;
    v1751 = 0;
    while (1)
    {
      v1884[1] = v1884[0];
      std::mutex::lock(v994);
      if (!v1751)
      {
        v995 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
        if (!v995)
        {
          std::mutex::unlock(v1764);
LABEL_1633:
          if (v1884[0])
          {
            v1884[1] = v1884[0];
            (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1884[0], (char *)v1885[0] - (char *)v1884[0]);
          }
          v982 = v1811;
          break;
        }
        v1751 = v995 + 3;
      }
      for (;
            0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3) <= 0x1F
         && v993 < (unint64_t)__srcc;
            v985 += 248)
      {
        __p = 0;
        {
          v1088 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1088, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v999 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
        __p = v999;
        *v999 = 1;
        md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v999 + 1), (uint64_t *)v985, 1);
        __p = v999;
        v1000 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((float *)&v1764[5].__m_.__opaque[16], (uint64_t)&__p, (_QWORD **)&__p);
        v1809[25] = v1001;
        if (!v1001)
        {
          v1039 = v1000;
          v1040 = (_QWORD *)v1000[2];
          if (v1040)
            ++*v1040;
          geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&__p);
          v1041 = (_QWORD *)v1039[2];
          __p = v1041;
          if (v1041)
            v1042 = v1041 + 1;
          else
            v1042 = 0;
          md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v1042, (_QWORD *)v985);
          v1035 = (char *)__p;
          goto LABEL_1545;
        }
        {
          v1089 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1089, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v1003 = mdm::Allocator::instance(void)::alloc;
        v1004 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 752, 8);
        *(_QWORD *)v1004 = &off_1E42DDAF0;
        *(_QWORD *)(v1004 + 8) = 0;
        *(_QWORD *)(v1004 + 16) = 0;
        *(_QWORD *)(v1004 + 24) = v1003;
        md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v1004 + 32), (GeoCodecsPointFeature *)v985, (const md::LabelFeatureCreationParams *)&v1804);
        *(_QWORD *)(v1004 + 32) = &off_1E42A7E70;
        *(_QWORD *)(v1004 + 704) = *(_QWORD *)(v985 + 224);
        *(_QWORD *)(v1004 + 720) = 0;
        *(_QWORD *)(v1004 + 728) = 0;
        *(_QWORD *)(v1004 + 712) = 0;
        {
          v1090 = operator new();
          *(_QWORD *)(v1090 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v1090 + 24) = "VectorKitLabels";
          *(_OWORD *)(v1090 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v1090 = &off_1E42B5668;
          *(_QWORD *)(v1090 + 8) = "VectorKitLabels";
          *(_OWORD *)(v1090 + 72) = 0u;
          *(_OWORD *)(v1090 + 88) = 0u;
          *(_OWORD *)(v1090 + 104) = 0u;
          *(_OWORD *)(v1090 + 120) = 0u;
          *(_OWORD *)(v1090 + 136) = 0u;
          *(_OWORD *)(v1090 + 152) = 0u;
          *(_OWORD *)(v1090 + 168) = 0u;
          *(_OWORD *)(v1090 + 184) = 0u;
          *(_OWORD *)(v1090 + 200) = 0u;
          *(_OWORD *)(v1090 + 216) = 0u;
          *(_OWORD *)(v1090 + 232) = 0u;
          *(_QWORD *)(v1090 + 248) = 0;
          *(_OWORD *)(v1090 + 56) = 0u;
          v1091 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1090 + 56), 0);
          if ((_DWORD)v1091)
            geo::read_write_lock::logFailure(v1091, (uint64_t)"initialization", v1092);
          v1093 = malloc_create_zone(0, 0);
          *(_QWORD *)(v1090 + 48) = v1093;
          malloc_set_zone_name(v1093, "VectorKitLabels");
          *(_QWORD *)(v1090 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v1090;
        }
        v1006 = 0;
        v1007 = (_QWORD *)(v1004 + 712);
        *(_QWORD *)(v1004 + 736) = mdm::Allocator::instance(void)::alloc;
        *(_BYTE *)(v1004 + 744) = 0;
        *(_DWORD *)(v1004 + 400) = *(_DWORD *)(v985 + 244);
        if (*(unsigned __int16 *)(v985 + 240) <= 1u)
          v1008 = 1;
        else
          v1008 = *(_WORD *)(v985 + 240);
        do
        {
          if ((v1008 & 1) != 0)
          {
            v1011 = *(_BYTE **)(v1004 + 720);
            v1012 = *(_QWORD *)(v1004 + 728);
            if ((unint64_t)v1011 < v1012)
            {
              if (v1011)
                *v1011 = v1006;
              v1009 = v1011 + 1;
LABEL_1501:
              *(_QWORD *)(v1004 + 720) = v1009;
              goto LABEL_1502;
            }
            v1013 = &v1011[-*v1007];
            v1014 = (unint64_t)(v1013 + 1);
            if ((uint64_t)(v1013 + 1) < 0)
              abort();
            v1015 = v1012 - *v1007;
            if (2 * v1015 > v1014)
              v1014 = 2 * v1015;
            if (v1015 >= 0x3FFFFFFFFFFFFFFFLL)
              v1016 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v1016 = v1014;
            if (v1016)
            {
              v1017 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1004 + 736) + 16))(*(_QWORD *)(v1004 + 736), v1016, 1);
              v1013 += v1017;
              v1018 = v1017 + v1016;
              if (v1017)
                *v1013 = v1006;
            }
            else
            {
              v1018 = 0;
            }
            v1019 = *(_QWORD *)(v1004 + 720);
            v1020 = *(_QWORD *)(v1004 + 712);
            v1021 = v1013;
            v1022 = v1019 - v1020;
            if (v1019 != v1020)
            {
              if (v1022 < 0x20)
              {
                v1021 = v1013;
              }
              else
              {
                v1021 = v1013;
                if ((unint64_t)(v1019 - (_QWORD)v1013) >= 0x20)
                {
                  v1023 = v1019 - (v1022 & 0xFFFFFFFFFFFFFFE0);
                  v1024 = v1013 - 16;
                  v1025 = (__int128 *)(v1019 - 16);
                  v1026 = v1022 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v1027 = *v1025;
                    *(v1024 - 1) = *(v1025 - 1);
                    *v1024 = v1027;
                    v1024 -= 2;
                    v1025 -= 2;
                    v1026 -= 32;
                  }
                  while (v1026);
                  v1021 = &v1013[-(v1022 & 0xFFFFFFFFFFFFFFE0)];
                  v1019 = v1023;
                  if (v1022 == (v1022 & 0xFFFFFFFFFFFFFFE0))
                    goto LABEL_1526;
                }
              }
              do
              {
                v1028 = *(_BYTE *)--v1019;
                *--v1021 = v1028;
              }
              while (v1019 != v1020);
            }
LABEL_1526:
            v1009 = v1013 + 1;
            *(_QWORD *)(v1004 + 712) = v1021;
            *(_QWORD *)(v1004 + 720) = v1013 + 1;
            v1029 = *(_QWORD *)(v1004 + 728);
            *(_QWORD *)(v1004 + 728) = v1018;
            if (v1020)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1004 + 736) + 40))(*(_QWORD *)(v1004 + 736), v1020, v1029 - v1020);
            goto LABEL_1501;
          }
LABEL_1502:
          ++v1006;
          v1010 = v1008;
          v1008 >>= 1;
        }
        while (v1010 > 1);
        if (__p)
          v1030 = (char *)__p + 8;
        else
          v1030 = 0;
        v1031 = (std::__shared_weak_count *)*((_QWORD *)v1030 + 2);
        *((_QWORD *)v1030 + 1) = v1004 + 32;
        *((_QWORD *)v1030 + 2) = v1004;
        if (v1031)
        {
          v1032 = (unint64_t *)&v1031->__shared_owners_;
          do
            v1033 = __ldaxr(v1032);
          while (__stlxr(v1033 - 1, v1032));
          if (!v1033)
          {
            ((void (*)(std::__shared_weak_count *))v1031->__on_zero_shared)(v1031);
            std::__shared_weak_count::__release_weak(v1031);
          }
        }
        v1034 = *(_QWORD *)&v1764[10].__m_.__opaque[24];
        v1035 = (char *)__p;
        v1036 = (char *)__p + 8;
        if (!__p)
          v1036 = 0;
        v1037 = *((_QWORD *)v1036 + 1);
        *(_QWORD *)(v1037 + 152) = v1036;
        v1038 = v1034 + 1;
        *(_QWORD *)&v1764[10].__m_.__opaque[24] = v1038;
        *(_QWORD *)(v1037 + 72) = v1038;
        *(_BYTE *)(v1037 + 147) = 1;
LABEL_1545:
        if (v1035)
          v1043 = (md::PointLabelFeature **)(v1035 + 8);
        else
          v1043 = 0;
        md::PointLabelFeature::addPointFeature(v1043[1], (GeoCodecsPointFeature *)v985, (const md::LabelFeatureCreationParams *)&v1804);
        std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((unint64_t)(v1751 + 35), (uint64_t)__p, (_QWORD **)&__p);
        if (__p)
          v1044 = (char *)__p + 8;
        else
          v1044 = 0;
        v1045 = *((_QWORD *)v1044 + 1);
        v1046 = (std::__shared_weak_count *)*((_QWORD *)v1044 + 2);
        *(_QWORD *)v1901 = v1045;
        *(_QWORD *)&v1901[8] = v1046;
        if (v1046)
        {
          v1047 = (unint64_t *)&v1046->__shared_owners_;
          do
            v1048 = __ldxr(v1047);
          while (__stxr(v1048 + 1, v1047));
          geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&__p);
          v1049 = (unint64_t *)&v1046->__shared_weak_owners_;
          do
            v1050 = __ldxr(v1049);
          while (__stxr(v1050 + 1, v1049));
        }
        else
        {
          geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&__p);
        }
        v1051 = (uint64_t *)(a1 + 208);
        while (1)
        {
          v1052 = (uint64_t *)*v1051;
          v1053 = v1051;
          if (!*v1051)
            break;
          while (1)
          {
            v1051 = v1052;
            v1054 = v1052[5];
            if ((unint64_t)v1046 < v1054)
              break;
            if (v1054 >= (unint64_t)v1046)
            {
              if (v1046)
                std::__shared_weak_count::__release_weak(v1046);
              if (!v1809[25])
                goto LABEL_1619;
              goto LABEL_1584;
            }
            v1052 = (uint64_t *)v1051[1];
            if (!v1052)
            {
              v1053 = v1051 + 1;
              goto LABEL_1564;
            }
          }
        }
LABEL_1564:
        v1055 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 27) + 16))(*((_QWORD *)a1 + 27), 48, 8);
        *(_QWORD *)(v1055 + 32) = v1045;
        *(_QWORD *)(v1055 + 40) = v1046;
        *(_QWORD *)v1055 = 0;
        *(_QWORD *)(v1055 + 8) = 0;
        *(_QWORD *)(v1055 + 16) = v1051;
        *v1053 = v1055;
        v1056 = (uint64_t *)**v1723;
        if (v1056)
        {
          *v1723 = v1056;
          v1055 = *v1053;
        }
        v1057 = *v1747;
        _ZF = v1055 == (_QWORD)*v1747;
        *(_BYTE *)(v1055 + 24) = _ZF;
        if (!_ZF)
        {
          do
          {
            v1058 = *(uint64_t **)(v1055 + 16);
            if (*((_BYTE *)v1058 + 24))
              break;
            v1059 = v1058[2];
            v1060 = *(uint64_t **)v1059;
            if (*(uint64_t **)v1059 == v1058)
            {
              v1063 = *(_QWORD *)(v1059 + 8);
              if (!v1063 || (v1064 = *(unsigned __int8 *)(v1063 + 24), v1061 = (_BYTE *)(v1063 + 24), v1064))
              {
                if (*v1058 == v1055)
                {
                  v1065 = *(uint64_t ***)(v1055 + 16);
                }
                else
                {
                  v1065 = (uint64_t **)v1058[1];
                  v1066 = *v1065;
                  v1058[1] = (uint64_t)*v1065;
                  if (v1066)
                  {
                    v1066[2] = (uint64_t)v1058;
                    v1059 = v1058[2];
                  }
                  v1065[2] = (uint64_t *)v1059;
                  *(_QWORD *)(v1058[2] + 8 * (*(_QWORD *)v1058[2] != (_QWORD)v1058)) = v1065;
                  *v1065 = v1058;
                  v1058[2] = (uint64_t)v1065;
                  v1059 = (uint64_t)v1065[2];
                  v1058 = *(uint64_t **)v1059;
                }
                *((_BYTE *)v1065 + 24) = 1;
                *(_BYTE *)(v1059 + 24) = 0;
                v1085 = v1058[1];
                *(_QWORD *)v1059 = v1085;
                if (v1085)
                  *(_QWORD *)(v1085 + 16) = v1059;
                v1058[2] = *(_QWORD *)(v1059 + 16);
                *(_QWORD *)(*(_QWORD *)(v1059 + 16) + 8 * (**(_QWORD **)(v1059 + 16) != v1059)) = v1058;
                v1058[1] = v1059;
                goto LABEL_1617;
              }
            }
            else if (!v1060 || (v1062 = *((unsigned __int8 *)v1060 + 24), v1061 = v1060 + 3, v1062))
            {
              if (*v1058 == v1055)
              {
                v1083 = *(_QWORD *)(v1055 + 8);
                *v1058 = v1083;
                if (v1083)
                {
                  *(_QWORD *)(v1083 + 16) = v1058;
                  v1059 = v1058[2];
                }
                *(_QWORD *)(v1055 + 16) = v1059;
                *(_QWORD *)(v1058[2] + 8 * (*(_QWORD *)v1058[2] != (_QWORD)v1058)) = v1055;
                *(_QWORD *)(v1055 + 8) = v1058;
                v1058[2] = v1055;
                v1059 = *(_QWORD *)(v1055 + 16);
              }
              else
              {
                v1055 = *(_QWORD *)(v1055 + 16);
              }
              *(_BYTE *)(v1055 + 24) = 1;
              *(_BYTE *)(v1059 + 24) = 0;
              v1058 = *(uint64_t **)(v1059 + 8);
              v1084 = *v1058;
              *(_QWORD *)(v1059 + 8) = *v1058;
              if (v1084)
                *(_QWORD *)(v1084 + 16) = v1059;
              v1058[2] = *(_QWORD *)(v1059 + 16);
              *(_QWORD *)(*(_QWORD *)(v1059 + 16) + 8 * (**(_QWORD **)(v1059 + 16) != v1059)) = v1058;
              *v1058 = v1059;
LABEL_1617:
              *(_QWORD *)(v1059 + 16) = v1058;
              break;
            }
            *((_BYTE *)v1058 + 24) = 1;
            v1055 = v1059;
            *(_BYTE *)(v1059 + 24) = v1059 == (_QWORD)v1057;
            *v1061 = 1;
          }
          while ((uint64_t *)v1059 != v1057);
        }
        ++*((_QWORD *)a1 + 28);
        if (v1809[25])
        {
LABEL_1584:
          v1067 = *(_QWORD *)v1901;
          v1068 = v1884[1];
          if (v1884[1] >= v1885[0])
          {
            v1070 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3);
            v1071 = v1070 + 1;
            if (v1070 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3) > v1071)
              v1071 = 0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1885[0] - (char *)v1884[0]) >> 3) >= 0x555555555555555)
              v1072 = 0xAAAAAAAAAAAAAAALL;
            else
              v1072 = v1071;
            if (v1072)
            {
              v1073 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v1885[1] + 16))(v1885[1], 24 * v1072, 8);
              v1074 = (char *)(v1073 + 24 * v1070);
              v1075 = (void *)(v1073 + 24 * v1072);
              if (v1073)
              {
                *(_QWORD *)v1074 = v1067;
                v1076 = v1073 + 24 * v1070;
                *(_QWORD *)(v1076 + 8) = 0;
                *(_QWORD *)(v1076 + 16) = 0;
              }
            }
            else
            {
              v1075 = 0;
              v1074 = (char *)(8 * (((char *)v1884[1] - (char *)v1884[0]) >> 3));
            }
            v1077 = (char *)v1884[1];
            v1078 = (char *)v1884[0];
            v1079 = v1074;
            if (v1884[1] != v1884[0])
            {
              do
              {
                v1080 = *(_OWORD *)(v1077 - 24);
                *((_QWORD *)v1079 - 1) = *((_QWORD *)v1077 - 1);
                *(_OWORD *)(v1079 - 24) = v1080;
                v1079 -= 24;
                v1077 -= 24;
              }
              while (v1077 != v1078);
              v1077 = (char *)v1884[0];
            }
            v1069 = v1074 + 24;
            v1884[0] = v1079;
            v1884[1] = v1074 + 24;
            v1081 = v1885[0];
            v1885[0] = v1075;
            if (v1077)
              (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1077, v1081 - v1077);
          }
          else
          {
            if (v1884[1])
            {
              *((_QWORD *)v1884[1] + 1) = 0;
              v1068[2] = 0;
              *v1068 = v1067;
            }
            v1069 = v1068 + 3;
          }
          v1884[1] = v1069;
          v1082 = *(std::__shared_weak_count **)&v1901[8];
          if (*(_QWORD *)&v1901[8])
          {
LABEL_1620:
            v1086 = (unint64_t *)&v1082->__shared_owners_;
            do
              v1087 = __ldaxr(v1086);
            while (__stlxr(v1087 - 1, v1086));
            if (!v1087)
            {
              ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
              std::__shared_weak_count::__release_weak(v1082);
            }
          }
        }
        else
        {
LABEL_1619:
          v1082 = *(std::__shared_weak_count **)&v1901[8];
          if (*(_QWORD *)&v1901[8])
            goto LABEL_1620;
        }
        ++v993;
      }
      md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v1744 + 296), (char **)v1884, 1u, 1, *(_QWORD *)(*(_QWORD *)(v1744 + 152) + 32));
      v994 = v1764;
      std::mutex::unlock(v1764);
      if (v993 >= (unint64_t)__srcc)
        goto LABEL_1633;
    }
  }
  if (v982)
  {
    v1094 = (unint64_t *)&v982->__shared_owners_;
    do
      v1095 = __ldaxr(v1094);
    while (__stlxr(v1095 - 1, v1094));
    if (!v1095)
    {
      ((void (*)(std::__shared_weak_count *))v982->__on_zero_shared)(v982);
      std::__shared_weak_count::__release_weak(v982);
    }
  }
  v1708 = *(_QWORD *)buf;
  v1796 = *(_QWORD *)buf;
  v1797 = v1877;
  v1798 = *(_QWORD *)((char *)&v1877 + 4);
  v1799 = v1879;
  v1800 = v1880;
  *(_OWORD *)v1801 = *(_OWORD *)v1881;
  *(_OWORD *)&v1801[11] = *(_OWORD *)&v1881[11];
  v1096 = v1883;
  v1802 = v1882;
  v1803 = v1883;
  if (v1883)
  {
    v1097 = (unint64_t *)&v1883->__shared_owners_;
    do
      v1098 = __ldxr(v1097);
    while (__stxr(v1098 + 1, v1097));
  }
  v1099 = geo::codec::VectorTile::transitLinkCount(*(geo::codec::VectorTile **)a3);
  if (!v1099)
    goto LABEL_2194;
  v1884[1] = 0;
  v1884[0] = 0;
  v1885[0] = 0;
  {
    v1685 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1685, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v1885[1] = (void *)mdm::Allocator::instance(void)::alloc;
  v1101 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
  v1102 = v1101 + 768;
  v1103 = (char *)v1884[1];
  v1104 = (char *)v1884[0];
  if (v1884[1] != v1884[0])
  {
    do
    {
      v1105 = *(_OWORD *)(v1103 - 24);
      *((_QWORD *)v1101 - 1) = *((_QWORD *)v1103 - 1);
      *(_OWORD *)(v1101 - 24) = v1105;
      v1101 -= 24;
      v1103 -= 24;
    }
    while (v1103 != v1104);
    v1103 = v1104;
  }
  v1106 = v1885[0];
  v1884[0] = v1101;
  v1885[0] = v1102;
  if (v1103)
    (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1103, v1106 - v1103);
  v1760 = geo::codec::VectorTile::transitLinks(*(geo::codec::VectorTile **)a3);
  v1107 = 0;
  v1108 = 0;
  v1109 = v1764;
  v1712 = &v1764[6].__m_.__opaque[32];
  v1721 = v1099;
  while (2)
  {
    v1884[1] = v1884[0];
    std::mutex::lock(v1109);
    if (!v1108)
    {
      v1110 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
      if (!v1110)
      {
        std::mutex::unlock(v1764);
        break;
      }
      v1108 = (unint64_t)(v1110 + 3);
    }
    v1111 = v1884[1];
    v1112 = v1884[0];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3) > 0x1F || v1107 >= v1099)
      goto LABEL_1660;
    v1739 = (_QWORD *)(v1108 + 368);
    v1745 = v1108;
    v1714 = (_QWORD *)(v1108 + 360);
    while (2)
    {
      v1115 = v1760 + 184 * v1107;
      v1117 = *(_QWORD *)(v1115 + 32);
      v1116 = (uint64_t *)(v1115 + 32);
      if (!v1117)
        goto LABEL_1663;
      v1733 = v1116;
      v1887 = 0;
      {
        v1323 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1323, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v1119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
      v1887 = (_QWORD *)v1119;
      *(_OWORD *)(v1119 + 16) = 0u;
      *(_QWORD *)v1119 = 1;
      *(_QWORD *)(v1119 + 8) = &off_1E4292B28;
      *(_OWORD *)(v1119 + 32) = 0u;
      v1120 = (_QWORD *)(v1119 + 32);
      *(_QWORD *)(v1119 + 48) = 0;
      {
        v1324 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1324, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v1119 + 56) = mdm::Allocator::instance(void)::alloc;
      __srcd = (uint64_t *)(v1760 + 184 * v1107);
      v1122 = (std::__shared_weak_count *)__srcd[1];
      if (v1122 && (v1122 = std::__shared_weak_count::lock(v1122)) != 0)
      {
        v1123 = v1760 + 184 * v1107;
        v1124 = *__srcd;
      }
      else
      {
        v1124 = 0;
        v1123 = v1760 + 184 * v1107;
      }
      v1725 = v1119 + 64;
      *(_QWORD *)(v1119 + 64) = v1123;
      *(_QWORD *)(v1119 + 72) = v1124;
      *(_QWORD *)(v1119 + 80) = v1122;
      *(_QWORD *)(v1119 + 88) = 0;
      *(_BYTE *)(v1119 + 96) = 1;
      v1125 = *(uint64_t ***)(v1119 + 40);
      v1126 = *(_QWORD *)(v1119 + 48);
      if ((unint64_t)v1125 >= v1126)
      {
        v1130 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v1125 - *v1120) >> 3);
        v1131 = v1130 + 1;
        if (v1130 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v1126 - *v1120) >> 3) > v1131)
          v1131 = 0x5555555555555556 * ((uint64_t)(v1126 - *v1120) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1126 - *v1120) >> 3) >= 0x555555555555555)
          v1132 = 0xAAAAAAAAAAAAAAALL;
        else
          v1132 = v1131;
        if (v1132)
        {
          v1133 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1119 + 56) + 16))(*(_QWORD *)(v1119 + 56), 24 * v1132, 8);
          v1134 = v1133 + 24 * v1130;
          v1135 = v1133 + 24 * v1132;
          if (v1133)
          {
            *(_OWORD *)v1134 = *(_OWORD *)(v1119 + 64);
            v1136 = *(_QWORD *)(v1119 + 80);
            *(_QWORD *)(v1133 + 24 * v1130 + 16) = v1136;
            if (v1136)
            {
              v1137 = (unint64_t *)(v1136 + 8);
              do
                v1138 = __ldxr(v1137);
              while (__stxr(v1138 + 1, v1137));
            }
          }
        }
        else
        {
          v1135 = 0;
          v1134 = 8 * (((uint64_t)v1125 - *v1120) >> 3);
        }
        v1129 = (_QWORD *)(v1134 + 24);
        v1139 = *(_QWORD *)(v1119 + 32);
        v1140 = *(_QWORD *)(v1119 + 40);
        if (v1140 == v1139)
        {
          *(_QWORD *)(v1119 + 32) = v1134;
          *(_QWORD *)(v1119 + 40) = v1129;
          v1144 = *(_QWORD *)(v1119 + 48);
          *(_QWORD *)(v1119 + 48) = v1135;
        }
        else
        {
          v1141 = v1107;
          do
          {
            v1142 = *(_OWORD *)(v1140 - 24);
            v1140 -= 24;
            *(_OWORD *)(v1134 - 24) = v1142;
            v1134 -= 24;
            *(_QWORD *)(v1134 + 16) = *(_QWORD *)(v1140 + 16);
            *(_QWORD *)(v1140 + 8) = 0;
            *(_QWORD *)(v1140 + 16) = 0;
          }
          while (v1140 != v1139);
          v1140 = *(_QWORD *)(v1119 + 32);
          v1143 = *(_QWORD *)(v1119 + 40);
          *(_QWORD *)(v1119 + 32) = v1134;
          *(_QWORD *)(v1119 + 40) = v1129;
          v1144 = *(_QWORD *)(v1119 + 48);
          *(_QWORD *)(v1119 + 48) = v1135;
          while (v1143 != v1140)
          {
            v1145 = *(std::__shared_weak_count **)(v1143 - 8);
            if (v1145)
            {
              v1146 = (unint64_t *)&v1145->__shared_owners_;
              do
                v1147 = __ldaxr(v1146);
              while (__stlxr(v1147 - 1, v1146));
              if (!v1147)
              {
                ((void (*)(std::__shared_weak_count *))v1145->__on_zero_shared)(v1145);
                std::__shared_weak_count::__release_weak(v1145);
              }
            }
            v1143 -= 24;
          }
          v1107 = v1141;
        }
        if (v1140)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1119 + 56) + 40))(*(_QWORD *)(v1119 + 56), v1140, v1144 - v1140);
      }
      else
      {
        if (v1125)
        {
          *v1125 = __srcd;
          v1125[1] = (uint64_t *)v1124;
          v1125[2] = (uint64_t *)v1122;
          if (v1122)
          {
            v1127 = (unint64_t *)&v1122->__shared_owners_;
            do
              v1128 = __ldxr(v1127);
            while (__stxr(v1128 + 1, v1127));
          }
        }
        v1129 = v1125 + 3;
      }
      v1752 = v1107;
      *(_QWORD *)(v1119 + 40) = v1129;
      v1887 = (_QWORD *)v1119;
      v1148 = *(unsigned __int8 *)(v1119 + 96);
      v1149 = *(_QWORD **)(v1119 + 64);
      v1150 = v1149[4];
      if (v1150)
      {
        v1151 = 0;
        v1152 = 0;
        do
        {
          v1153 = geo::codec::vectorTransitLineAlongLink(v1149, v1151);
          v1154 = ((v1152 << 6) - 0x61C8864680B583EBLL + (v1152 >> 2) + *(_QWORD *)(v1153 + 40)) ^ v1152;
          v1152 = (*(unsigned __int8 *)(v1153 + 73) - 0x61C8864680B583EBLL + (v1154 << 6) + (v1154 >> 2)) ^ v1154;
          ++v1151;
        }
        while (v1150 != v1151);
      }
      else
      {
        v1152 = 0;
      }
      v1155 = (v1152 - 0x61C8864680B583EBLL + (v1148 << 6) + (v1148 >> 2)) ^ v1148;
      v1156 = *(_QWORD *)&v1764[6].__m_.__opaque[16];
      v1157 = __srcd;
      if (!v1156)
        goto LABEL_1761;
      v1158 = (uint8x8_t)vcnt_s8((int8x8_t)v1156);
      v1158.i16[0] = vaddlv_u8(v1158);
      if (v1158.u32[0] > 1uLL)
      {
        v1108 = v1155;
        if (v1155 >= v1156)
          v1108 = v1155 % v1156;
      }
      else
      {
        v1108 = v1155 & (v1156 - 1);
      }
      v1159 = *(_QWORD **)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1108);
      if (!v1159 || (v1160 = (_QWORD *)*v1159) == 0)
      {
LABEL_1761:
        v1186 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[6].__m_.__opaque[40]
                                                                              + 16))(*(_QWORD *)&v1764[6].__m_.__opaque[40], 24, 8);
        *(_QWORD *)v1901 = v1186;
        *(_QWORD *)&v1901[8] = (char *)v1764 + 432;
        *v1186 = 0;
        v1186[1] = v1155;
        v1186[2] = v1119;
        ++*(_QWORD *)v1119;
        v1901[16] = 1;
        v1187 = (float)(unint64_t)(*(_QWORD *)&v1764[6].__m_.__opaque[48] + 1);
        v1188 = *(float *)&v1764[7].__m_.__sig;
        if (v1156 && (float)(v1188 * (float)v1156) >= v1187)
        {
LABEL_1810:
          v1211 = *(_QWORD **)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1108);
          if (v1211)
          {
            *v1186 = *v1211;
          }
          else
          {
            *v1186 = *(_QWORD *)&v1764[6].__m_.__opaque[32];
            *(_QWORD *)&v1764[6].__m_.__opaque[32] = v1186;
            *(_QWORD *)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1108) = v1712;
            if (!*v1186)
              goto LABEL_1819;
            v1212 = *(_QWORD *)(*v1186 + 8);
            if ((v1156 & (v1156 - 1)) != 0)
            {
              if (v1212 >= v1156)
                v1212 %= v1156;
            }
            else
            {
              v1212 &= v1156 - 1;
            }
            v1211 = (_QWORD *)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1212);
          }
          *v1211 = v1186;
LABEL_1819:
          ++*(_QWORD *)&v1764[6].__m_.__opaque[48];
          v1801[25] = 1;
          {
            v1325 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1325, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v1214 = mdm::Allocator::instance(void)::alloc;
          v1215 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 744, 8);
          *(_QWORD *)v1215 = &off_1E42DCD98;
          *(_QWORD *)(v1215 + 8) = 0;
          *(_QWORD *)(v1215 + 16) = 0;
          *(_QWORD *)(v1215 + 24) = v1214;
          v1772 = (uint64_t *)(v1215 + 32);
          md::LineLabelFeature::LineLabelFeature(v1215 + 32, 9, 4);
          *(_QWORD *)(v1215 + 32) = &off_1E429FA38;
          *(_QWORD *)(v1215 + 472) = 850045863;
          *(_OWORD *)(v1215 + 480) = 0u;
          *(_OWORD *)(v1215 + 496) = 0u;
          *(_OWORD *)(v1215 + 512) = 0u;
          *(_OWORD *)(v1215 + 528) = 0u;
          *(_OWORD *)(v1215 + 544) = 0u;
          {
            v1326 = operator new();
            *(_QWORD *)(v1326 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v1326 + 24) = "VectorKitLabels";
            *(_OWORD *)(v1326 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v1326 = &off_1E42B5668;
            *(_QWORD *)(v1326 + 8) = "VectorKitLabels";
            *(_OWORD *)(v1326 + 72) = 0u;
            *(_OWORD *)(v1326 + 88) = 0u;
            *(_OWORD *)(v1326 + 104) = 0u;
            *(_OWORD *)(v1326 + 120) = 0u;
            *(_OWORD *)(v1326 + 136) = 0u;
            *(_OWORD *)(v1326 + 152) = 0u;
            *(_OWORD *)(v1326 + 168) = 0u;
            *(_OWORD *)(v1326 + 184) = 0u;
            *(_OWORD *)(v1326 + 200) = 0u;
            *(_OWORD *)(v1326 + 216) = 0u;
            *(_OWORD *)(v1326 + 232) = 0u;
            *(_QWORD *)(v1326 + 248) = 0;
            *(_OWORD *)(v1326 + 56) = 0u;
            v1327 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1326 + 56), 0);
            if ((_DWORD)v1327)
              geo::read_write_lock::logFailure(v1327, (uint64_t)"initialization", v1328);
            v1329 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1326 + 48) = v1329;
            malloc_set_zone_name(v1329, "VectorKitLabels");
            *(_QWORD *)(v1326 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v1326;
            v1157 = __srcd;
          }
          *(_QWORD *)(v1215 + 560) = mdm::Allocator::instance(void)::alloc;
          *(_QWORD *)(v1215 + 568) = 0;
          *(_QWORD *)(v1215 + 584) = 0;
          *(_QWORD *)(v1215 + 576) = 0;
          {
            v1330 = operator new();
            *(_QWORD *)(v1330 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v1330 + 24) = "VectorKitLabels";
            *(_OWORD *)(v1330 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v1330 = &off_1E42B5668;
            *(_QWORD *)(v1330 + 8) = "VectorKitLabels";
            *(_OWORD *)(v1330 + 72) = 0u;
            *(_OWORD *)(v1330 + 88) = 0u;
            *(_OWORD *)(v1330 + 104) = 0u;
            *(_OWORD *)(v1330 + 120) = 0u;
            *(_OWORD *)(v1330 + 136) = 0u;
            *(_OWORD *)(v1330 + 152) = 0u;
            *(_OWORD *)(v1330 + 168) = 0u;
            *(_OWORD *)(v1330 + 184) = 0u;
            *(_OWORD *)(v1330 + 200) = 0u;
            *(_OWORD *)(v1330 + 216) = 0u;
            *(_OWORD *)(v1330 + 232) = 0u;
            *(_QWORD *)(v1330 + 248) = 0;
            *(_OWORD *)(v1330 + 56) = 0u;
            v1331 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1330 + 56), 0);
            if ((_DWORD)v1331)
              geo::read_write_lock::logFailure(v1331, (uint64_t)"initialization", v1332);
            v1333 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1330 + 48) = v1333;
            malloc_set_zone_name(v1333, "VectorKitLabels");
            *(_QWORD *)(v1330 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v1330;
            v1157 = __srcd;
          }
          *(_QWORD *)(v1215 + 592) = mdm::Allocator::instance(void)::alloc;
          *(_QWORD *)(v1215 + 608) = 0;
          {
            v1334 = operator new();
            *(_QWORD *)(v1334 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v1334 + 24) = "VectorKitLabels";
            *(_OWORD *)(v1334 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v1334 = &off_1E42B5668;
            *(_QWORD *)(v1334 + 8) = "VectorKitLabels";
            *(_OWORD *)(v1334 + 72) = 0u;
            *(_OWORD *)(v1334 + 88) = 0u;
            *(_OWORD *)(v1334 + 104) = 0u;
            *(_OWORD *)(v1334 + 120) = 0u;
            *(_OWORD *)(v1334 + 136) = 0u;
            *(_OWORD *)(v1334 + 152) = 0u;
            *(_OWORD *)(v1334 + 168) = 0u;
            *(_OWORD *)(v1334 + 184) = 0u;
            *(_OWORD *)(v1334 + 200) = 0u;
            *(_OWORD *)(v1334 + 216) = 0u;
            *(_OWORD *)(v1334 + 232) = 0u;
            *(_QWORD *)(v1334 + 248) = 0;
            *(_OWORD *)(v1334 + 56) = 0u;
            v1335 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1334 + 56), 0);
            if ((_DWORD)v1335)
              geo::read_write_lock::logFailure(v1335, (uint64_t)"initialization", v1336);
            v1337 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1334 + 48) = v1337;
            malloc_set_zone_name(v1337, "VectorKitLabels");
            *(_QWORD *)(v1334 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v1334;
            v1157 = __srcd;
          }
          *(_QWORD *)(v1215 + 616) = mdm::Allocator::instance(void)::alloc;
          *(_QWORD *)(v1215 + 624) = 0;
          *(_QWORD *)(v1215 + 600) = v1215 + 608;
          *(_WORD *)(v1215 + 632) = 0;
          *(_QWORD *)(v1215 + 640) = 850045863;
          *(_QWORD *)(v1215 + 712) = 0;
          *(_QWORD *)(v1215 + 728) = 0;
          *(_QWORD *)(v1215 + 720) = 0;
          *(_OWORD *)(v1215 + 648) = 0u;
          *(_OWORD *)(v1215 + 664) = 0u;
          *(_OWORD *)(v1215 + 680) = 0u;
          *(_OWORD *)(v1215 + 689) = 0u;
          {
            v1338 = operator new();
            *(_QWORD *)(v1338 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v1338 + 24) = "VectorKitLabels";
            *(_OWORD *)(v1338 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v1338 = &off_1E42B5668;
            *(_QWORD *)(v1338 + 8) = "VectorKitLabels";
            *(_OWORD *)(v1338 + 72) = 0u;
            *(_OWORD *)(v1338 + 88) = 0u;
            *(_OWORD *)(v1338 + 104) = 0u;
            *(_OWORD *)(v1338 + 120) = 0u;
            *(_OWORD *)(v1338 + 136) = 0u;
            *(_OWORD *)(v1338 + 152) = 0u;
            *(_OWORD *)(v1338 + 168) = 0u;
            *(_OWORD *)(v1338 + 184) = 0u;
            *(_OWORD *)(v1338 + 200) = 0u;
            *(_OWORD *)(v1338 + 216) = 0u;
            *(_OWORD *)(v1338 + 232) = 0u;
            *(_QWORD *)(v1338 + 248) = 0;
            *(_OWORD *)(v1338 + 56) = 0u;
            v1339 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1338 + 56), 0);
            if ((_DWORD)v1339)
              geo::read_write_lock::logFailure(v1339, (uint64_t)"initialization", v1340);
            v1341 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1338 + 48) = v1341;
            malloc_set_zone_name(v1341, "VectorKitLabels");
            *(_QWORD *)(v1338 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v1338;
            v1157 = __srcd;
          }
          v1220 = (uint64_t *)(v1215 + 568);
          *(_QWORD *)(v1215 + 736) = mdm::Allocator::instance(void)::alloc;
          md::LabelLineStore::addTransitLineSegment(*(_QWORD *)(v1215 + 224), v1157, (uint64_t)&v1796);
          md::TransitLineLabelFeature::addTransitLink(v1772, (unint64_t)v1157);
          v1221 = *v1733;
          if (*v1733)
          {
            v1222 = 0;
            do
            {
              v1224 = geo::codec::vectorTransitLineAlongLink(v1157, v1222);
              v1225 = *(_QWORD *)(v1224 + 40);
              v1226 = *(_DWORD *)(v1224 + 100);
              v1227 = (std::__shared_weak_count *)__srcd[1];
              if (v1227)
              {
                v1227 = std::__shared_weak_count::lock(v1227);
                v1228 = v1227;
                if (v1227)
                  v1227 = (std::__shared_weak_count *)*__srcd;
              }
              else
              {
                v1228 = 0;
              }
              v1229 = *(_DWORD *)(geo::codec::VectorTile::transitSystemInfoForFeatureID((geo::codec::VectorTile *)v1227, v1225)+ 64);
              if (v1228)
              {
                v1230 = (unint64_t *)&v1228->__shared_owners_;
                do
                  v1231 = __ldaxr(v1230);
                while (__stlxr(v1231 - 1, v1230));
                if (!v1231)
                {
                  ((void (*)(std::__shared_weak_count *))v1228->__on_zero_shared)(v1228);
                  std::__shared_weak_count::__release_weak(v1228);
                }
              }
              v1232 = md::LineLabelFeature::styleIndexForAttributes((uint64_t)v1772, (uint64_t *)(v1224 + 24));
              v1233 = v1232;
              v1234 = *(_QWORD *)(v1215 + 576);
              v1235 = *(_QWORD *)(v1215 + 584);
              if (v1234 >= v1235)
              {
                v1236 = (uint64_t)(v1234 - *v1220) >> 5;
                v1237 = v1236 + 1;
                if ((unint64_t)(v1236 + 1) >> 59)
                  abort();
                v1238 = v1235 - *v1220;
                if (v1238 >> 4 > v1237)
                  v1237 = v1238 >> 4;
                if ((unint64_t)v1238 >= 0x7FFFFFFFFFFFFFE0)
                  v1239 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v1239 = v1237;
                if (v1239)
                {
                  v1240 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1215 + 592) + 16))(*(_QWORD *)(v1215 + 592), 32 * v1239, 8);
                  v1241 = v1240 + 32 * v1236;
                  v1242 = v1240 + 32 * v1239;
                  if (v1240)
                  {
                    *(_QWORD *)v1241 = v1225;
                    *(_WORD *)(v1241 + 8) = -1;
                    *(_WORD *)(v1241 + 14) = 0;
                    *(_DWORD *)(v1241 + 10) = 0xFFFF;
                    *(_DWORD *)(v1241 + 16) = v1226;
                    *(_DWORD *)(v1241 + 20) = v1229;
                    *(_DWORD *)(v1241 + 24) = v1233;
                  }
                }
                else
                {
                  v1242 = 0;
                  v1241 = 32 * v1236;
                }
                v1157 = __srcd;
                v1243 = *(_QWORD *)(v1215 + 576);
                v1244 = *(_QWORD *)(v1215 + 568);
                v1245 = v1241;
                if (v1243 != v1244)
                {
                  do
                  {
                    v1246 = *(_OWORD *)(v1243 - 16);
                    *(_OWORD *)(v1245 - 32) = *(_OWORD *)(v1243 - 32);
                    *(_OWORD *)(v1245 - 16) = v1246;
                    v1245 -= 32;
                    v1243 -= 32;
                  }
                  while (v1243 != v1244);
                  v1243 = *v1220;
                }
                v1223 = v1241 + 32;
                *(_QWORD *)(v1215 + 568) = v1245;
                *(_QWORD *)(v1215 + 576) = v1241 + 32;
                v1247 = *(_QWORD *)(v1215 + 584);
                *(_QWORD *)(v1215 + 584) = v1242;
                if (v1243)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1215 + 592) + 40))(*(_QWORD *)(v1215 + 592), v1243, v1247 - v1243);
              }
              else
              {
                if (v1234)
                {
                  *(_QWORD *)v1234 = v1225;
                  *(_WORD *)(v1234 + 8) = -1;
                  *(_WORD *)(v1234 + 14) = 0;
                  *(_DWORD *)(v1234 + 10) = 0xFFFF;
                  *(_DWORD *)(v1234 + 16) = v1226;
                  *(_DWORD *)(v1234 + 20) = v1229;
                  *(_DWORD *)(v1234 + 24) = v1232;
                }
                v1223 = v1234 + 32;
                v1157 = __srcd;
              }
              *(_QWORD *)(v1215 + 576) = v1223;
              ++v1222;
            }
            while (v1222 != v1221);
          }
          else
          {
            v1223 = *(_QWORD *)(v1215 + 576);
          }
          v1248 = v1760 + 184 * v1752;
          v1249 = *(_QWORD *)(v1248 + 88);
          v1250 = *(_QWORD *)(v1248 + 96);
          v1251 = *v1220;
          v1252 = (std::__shared_weak_count *)v1157[1];
          if (v1252)
          {
            v1253 = std::__shared_weak_count::lock(v1252);
            if (v1253)
              v1254 = *v1157;
            else
              v1254 = 0;
          }
          else
          {
            v1254 = 0;
            v1253 = 0;
          }
          v1255 = v1223 - v1251;
          v1256 = (v1223 - v1251) >> 5;
          if ((_DWORD)v1250)
          {
            v1257 = *(_QWORD *)(v1254 + 1640);
            if (v1257)
            {
              v1258 = (v1250 + v1249);
              v1259 = v1258 > v1249;
              v1260 = v1258 - v1249;
              if (v1259)
              {
                v1261 = 0;
                v1262 = (unsigned int *)(v1257 + 8 * v1249);
                do
                {
                  v1264 = *v1262;
                  v1262 += 2;
                  v1263 = v1264;
                  if (v1264 < v1256)
                    *(_WORD *)(*v1220 + 32 * v1263 + 14) = v1261;
                  ++v1261;
                  --v1260;
                }
                while (v1260);
              }
            }
          }
          {
            v1342 = operator new();
            *(_QWORD *)(v1342 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v1342 + 24) = "VectorKitLabels";
            *(_OWORD *)(v1342 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v1342 = &off_1E42B5668;
            *(_QWORD *)(v1342 + 8) = "VectorKitLabels";
            *(_OWORD *)(v1342 + 72) = 0u;
            *(_OWORD *)(v1342 + 88) = 0u;
            *(_OWORD *)(v1342 + 104) = 0u;
            *(_OWORD *)(v1342 + 120) = 0u;
            *(_OWORD *)(v1342 + 136) = 0u;
            *(_OWORD *)(v1342 + 152) = 0u;
            *(_OWORD *)(v1342 + 168) = 0u;
            *(_OWORD *)(v1342 + 184) = 0u;
            *(_OWORD *)(v1342 + 200) = 0u;
            *(_OWORD *)(v1342 + 216) = 0u;
            *(_OWORD *)(v1342 + 232) = 0u;
            *(_QWORD *)(v1342 + 248) = 0;
            *(_OWORD *)(v1342 + 56) = 0u;
            v1343 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1342 + 56), 0);
            if ((_DWORD)v1343)
              geo::read_write_lock::logFailure(v1343, (uint64_t)"initialization", v1344);
            v1345 = malloc_create_zone(0, 0);
            *(_QWORD *)(v1342 + 48) = v1345;
            malloc_set_zone_name(v1345, "VectorKitLabels");
            *(_QWORD *)(v1342 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v1342;
            v1157 = __srcd;
          }
          v1266 = mdm::Allocator::instance(void)::alloc;
          v1108 = v1745;
          if (v1223 == v1251)
          {
            v1268 = 0;
            v1270 = 0;
          }
          else
          {
            if ((v1255 & 0x8000000000000000) != 0)
              abort();
            v1267 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, v1255 >> 2, 8);
            v1268 = (char *)v1267;
            v1269 = 0;
            v1270 = (uint64_t *)(v1267 + 8 * v1256);
            do
            {
              if (v1267 + v1269)
                *(_QWORD *)(v1267 + v1269) = 0;
              v1269 += 8;
            }
            while (8 * v1256 != v1269);
            if (v1256 <= 1)
              v1271 = 1;
            else
              v1271 = v1256;
            if (v1271 <= 3)
            {
              v1272 = 0;
              goto LABEL_1995;
            }
            v1272 = v1271 & 0xFFFFFFFFFFFFFFFCLL;
            v1273 = (int64x2_t *)(v1267 + 16);
            v1274 = v1271 & 0xFFFFFFFFFFFFFFFCLL;
            v1275 = (int64x2_t)xmmword_19FFB2E40;
            do
            {
              v1273[-1] = v1275;
              *v1273 = vaddq_s64(v1275, vdupq_n_s64(2uLL));
              v1275 = vaddq_s64(v1275, vdupq_n_s64(4uLL));
              v1273 += 2;
              v1274 -= 4;
            }
            while (v1274);
            while (v1271 != v1272)
            {
LABEL_1995:
              *(_QWORD *)(v1267 + 8 * v1272) = v1272;
              ++v1272;
            }
          }
          v1346 = 126 - 2 * __clz(((char *)v1270 - v1268) >> 3);
          v1347 = (char *)v1270 - v1268;
          *(_QWORD *)v1901 = v1215 + 32;
          if (v1270 == (uint64_t *)v1268)
            v1348 = 0;
          else
            v1348 = v1346;
          std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *,false>((unint64_t)v1268, v1270, (uint64_t)v1901, v1348, 1);
          *(_WORD *)(v1215 + 632) = *(_QWORD *)v1268;
          (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v1266 + 40))(v1266, v1268, v1347);
          if (v1253)
          {
            v1349 = (unint64_t *)&v1253->__shared_owners_;
            do
              v1350 = __ldaxr(v1349);
            while (__stlxr(v1350 - 1, v1349));
            if (!v1350)
            {
              ((void (*)(std::__shared_weak_count *))v1253->__on_zero_shared)(v1253);
              std::__shared_weak_count::__release_weak(v1253);
            }
          }
          v1351 = *(unsigned __int8 **)(v1215 + 224);
          v1352 = atomic_load(v1351 + 80);
          if ((v1352 & 1) != 0)
            md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v1351);
          (*(void (**)(uint64_t *, uint64_t *, _QWORD))(*v1772 + 32))(v1772, v1157, v1801[24]);
          if (v1887)
            v1353 = v1887 + 1;
          else
            v1353 = 0;
          v1354 = (std::__shared_weak_count *)v1353[2];
          v1353[1] = v1772;
          v1353[2] = v1215;
          if (v1354)
          {
            v1355 = (unint64_t *)&v1354->__shared_owners_;
            do
              v1356 = __ldaxr(v1355);
            while (__stlxr(v1356 - 1, v1355));
            if (!v1356)
            {
              ((void (*)(std::__shared_weak_count *))v1354->__on_zero_shared)(v1354);
              std::__shared_weak_count::__release_weak(v1354);
            }
          }
          v1357 = *(_QWORD *)&v1764[10].__m_.__opaque[24];
          v1322 = v1887;
          v1358 = v1887 + 1;
          if (!v1887)
            v1358 = 0;
          v1359 = v1358[1];
          *(_QWORD *)(v1359 + 152) = v1358;
          v1360 = v1357 + 1;
          *(_QWORD *)&v1764[10].__m_.__opaque[24] = v1360;
          *(_QWORD *)(v1359 + 72) = v1360;
          *(_BYTE *)(v1359 + 147) = 1;
          goto LABEL_2017;
        }
        v1189 = (v1156 & (v1156 - 1)) != 0;
        if (v1156 < 3)
          v1189 = 1;
        v1190 = v1189 | (2 * v1156);
        v1191 = vcvtps_u32_f32(v1187 / v1188);
        if (v1190 <= v1191)
          v1192 = v1191;
        else
          v1192 = v1190;
        if (v1192 == 1)
        {
          v1192 = 2;
        }
        else if ((v1192 & (v1192 - 1)) != 0)
        {
          v1192 = std::__next_prime(v1192);
        }
        v1156 = *(_QWORD *)&v1764[6].__m_.__opaque[16];
        if (v1192 <= v1156)
        {
          if (v1192 >= v1156)
            goto LABEL_1797;
          v1204 = vcvtps_u32_f32((float)*(unint64_t *)&v1764[6].__m_.__opaque[48] / *(float *)&v1764[7].__m_.__sig);
          if (v1156 < 3
            || (v1205 = (uint8x8_t)vcnt_s8((int8x8_t)v1156), v1205.i16[0] = vaddlv_u8(v1205), v1205.u32[0] > 1uLL))
          {
            v1204 = std::__next_prime(v1204);
          }
          else
          {
            v1206 = 1 << -(char)__clz(v1204 - 1);
            if (v1204 >= 2)
              v1204 = v1206;
          }
          if (v1192 <= v1204)
            v1192 = v1204;
          if (v1192 >= v1156)
          {
            v1156 = *(_QWORD *)&v1764[6].__m_.__opaque[16];
LABEL_1797:
            if ((v1156 & (v1156 - 1)) != 0)
            {
              if (v1155 >= v1156)
                v1108 = v1155 % v1156;
              else
                v1108 = v1155;
            }
            else
            {
              v1108 = (v1156 - 1) & v1155;
            }
            goto LABEL_1810;
          }
          if (!v1192)
          {
            v1276 = *(_QWORD *)&v1764[6].__m_.__opaque[8];
            *(_QWORD *)&v1764[6].__m_.__opaque[8] = 0;
            if (v1276)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[6].__m_.__opaque[24] + 40))(*(_QWORD *)&v1764[6].__m_.__opaque[24], v1276, 8 * *(_QWORD *)&v1764[6].__m_.__opaque[16]);
            v1156 = 0;
            *(_QWORD *)&v1764[6].__m_.__opaque[16] = 0;
            goto LABEL_1797;
          }
        }
        v1193 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)&v1764[6].__m_.__opaque[24] + 16))(*(_QWORD *)&v1764[6].__m_.__opaque[24], 8 * v1192, 8);
        v1194 = *(_QWORD *)&v1764[6].__m_.__opaque[8];
        *(_QWORD *)&v1764[6].__m_.__opaque[8] = v1193;
        if (v1194)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v1764[6].__m_.__opaque[24] + 40))(*(_QWORD *)&v1764[6].__m_.__opaque[24], v1194, 8 * *(_QWORD *)&v1764[6].__m_.__opaque[16]);
        v1195 = 0;
        *(_QWORD *)&v1764[6].__m_.__opaque[16] = v1192;
        do
          *(_QWORD *)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1195++) = 0;
        while (v1192 != v1195);
        v1196 = *(_QWORD **)v1712;
        if (!*(_QWORD *)v1712)
        {
LABEL_1796:
          v1156 = v1192;
          goto LABEL_1797;
        }
        v1197 = v1196[1];
        v1198 = v1192 - 1;
        if ((v1192 & (v1192 - 1)) == 0)
        {
          v1199 = v1197 & v1198;
          *(_QWORD *)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1199) = v1712;
          for (ii = (_QWORD *)*v1196; *v1196; ii = (_QWORD *)*v1196)
          {
            v1201 = ii[1] & v1198;
            if (v1201 == v1199)
            {
              v1196 = ii;
            }
            else
            {
              v1202 = *(_QWORD *)&v1764[6].__m_.__opaque[8];
              if (*(_QWORD *)(v1202 + 8 * v1201))
              {
                *v1196 = *ii;
                v1203 = 8 * v1201;
                *ii = **(_QWORD **)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + v1203);
                **(_QWORD **)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + v1203) = ii;
              }
              else
              {
                *(_QWORD *)(v1202 + 8 * v1201) = v1196;
                v1196 = ii;
                v1199 = v1201;
              }
            }
          }
          goto LABEL_1796;
        }
        if (v1197 >= v1192)
          v1197 %= v1192;
        *(_QWORD *)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + 8 * v1197) = v1712;
        v1207 = (_QWORD *)*v1196;
        if (!*v1196)
          goto LABEL_1796;
        while (1)
        {
          v1209 = v1207[1];
          if (v1209 >= v1192)
            v1209 %= v1192;
          if (v1209 != v1197)
          {
            v1210 = *(_QWORD *)&v1764[6].__m_.__opaque[8];
            if (!*(_QWORD *)(v1210 + 8 * v1209))
            {
              *(_QWORD *)(v1210 + 8 * v1209) = v1196;
              goto LABEL_1801;
            }
            *v1196 = *v1207;
            v1208 = 8 * v1209;
            *v1207 = **(_QWORD **)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + v1208);
            **(_QWORD **)(*(_QWORD *)&v1764[6].__m_.__opaque[8] + v1208) = v1207;
            v1207 = v1196;
          }
          v1209 = v1197;
LABEL_1801:
          v1196 = v1207;
          v1207 = (_QWORD *)*v1207;
          v1197 = v1209;
          if (!v1207)
            goto LABEL_1796;
        }
      }
      v1771 = v1155;
      if (v1158.u32[0] < 2uLL)
      {
        while (1)
        {
          v1170 = v1160[1];
          if (v1170 == v1155)
          {
            v1171 = v1160[2];
            if (v1171)
              v1172 = v1171 + 8;
            else
              v1172 = 0;
            if (*(unsigned __int8 *)(v1172 + 88) == *(unsigned __int8 *)(v1119 + 96))
            {
              v1173 = *(_QWORD **)(v1172 + 56);
              v1174 = *(_QWORD **)v1725;
              v1175 = v1173[4];
              if (v1175 == *(_QWORD *)(*(_QWORD *)v1725 + 32))
              {
                if (!v1175)
                  goto LABEL_1751;
                v1176 = 0;
                while (1)
                {
                  v1177 = geo::codec::vectorTransitLineAlongLink(v1173, v1176);
                  v1178 = geo::codec::vectorTransitLineAlongLink(v1174, v1176);
                  if (*(_QWORD *)(v1177 + 40) != *(_QWORD *)(v1178 + 40)
                    || *(unsigned __int8 *)(v1177 + 73) != *(unsigned __int8 *)(v1178 + 73))
                  {
                    break;
                  }
                  if (v1175 == ++v1176)
                    goto LABEL_1751;
                }
              }
            }
          }
          else if ((v1170 & (v1156 - 1)) != v1108)
          {
            goto LABEL_1760;
          }
          v1160 = (_QWORD *)*v1160;
          v1155 = v1771;
          if (!v1160)
            goto LABEL_1761;
        }
      }
      while (1)
      {
        v1161 = v1160[1];
        if (v1161 == v1155)
          break;
        if (v1161 >= v1156)
          v1161 %= v1156;
        if (v1161 != v1108)
        {
LABEL_1760:
          v1155 = v1771;
          goto LABEL_1761;
        }
LABEL_1723:
        v1160 = (_QWORD *)*v1160;
        v1155 = v1771;
        if (!v1160)
          goto LABEL_1761;
      }
      v1162 = v1160[2];
      if (v1162)
        v1163 = v1162 + 8;
      else
        v1163 = 0;
      if (*(unsigned __int8 *)(v1163 + 88) != *(unsigned __int8 *)(v1119 + 96))
        goto LABEL_1723;
      v1164 = *(_QWORD **)(v1163 + 56);
      v1165 = *(_QWORD **)v1725;
      v1166 = v1164[4];
      if (v1166 != *(_QWORD *)(*(_QWORD *)v1725 + 32))
        goto LABEL_1723;
      if (v1166)
      {
        v1167 = 0;
        do
        {
          v1168 = geo::codec::vectorTransitLineAlongLink(v1164, v1167);
          v1169 = geo::codec::vectorTransitLineAlongLink(v1165, v1167);
          if (*(_QWORD *)(v1168 + 40) != *(_QWORD *)(v1169 + 40)
            || *(unsigned __int8 *)(v1168 + 73) != *(unsigned __int8 *)(v1169 + 73))
          {
            goto LABEL_1723;
          }
        }
        while (v1166 != ++v1167);
      }
LABEL_1751:
      v1801[25] = 0;
      v1179 = (_QWORD *)v1160[2];
      if (v1179)
        ++*v1179;
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1887);
      v1180 = (_QWORD *)v1160[2];
      v1887 = v1180;
      if (v1180)
        v1181 = v1180 + 1;
      else
        v1181 = 0;
      v1182 = (std::mutex *)(v1181[1] + 8);
      std::mutex::lock(v1182);
      v1183 = (std::__shared_weak_count *)__srcd[1];
      if (v1183)
      {
        v1184 = std::__shared_weak_count::lock(v1183);
        if (v1184)
          v1185 = *__srcd;
        else
          v1185 = 0;
      }
      else
      {
        v1184 = 0;
        v1185 = 0;
      }
      *(_QWORD *)v1901 = __srcd;
      *(_QWORD *)&v1901[8] = v1185;
      *(_QWORD *)&v1901[16] = v1184;
      v1890 = 0;
      __p = 0;
      v1277 = (uint64_t **)v1181[4];
      v1278 = v1181[5];
      if ((unint64_t)v1277 < v1278)
      {
        if (v1277)
        {
          *v1277 = __srcd;
          v1277[1] = (uint64_t *)v1185;
          v1277[2] = (uint64_t *)v1184;
          *(_QWORD *)&v1901[8] = 0;
          *(_QWORD *)&v1901[16] = 0;
          v1184 = 0;
        }
        v1181[4] = v1277 + 3;
        if (!v1184)
          goto LABEL_1927;
LABEL_1924:
        v1295 = (unint64_t *)&v1184->__shared_owners_;
        do
          v1296 = __ldaxr(v1295);
        while (__stlxr(v1296 - 1, v1295));
        if (v1296)
          goto LABEL_1927;
        ((void (*)(std::__shared_weak_count *))v1184->__on_zero_shared)(v1184);
        std::__shared_weak_count::__release_weak(v1184);
        v1297 = v1890;
        if (!v1890)
          goto LABEL_1933;
LABEL_1928:
        v1298 = (unint64_t *)&v1297->__shared_owners_;
        do
          v1299 = __ldaxr(v1298);
        while (__stlxr(v1299 - 1, v1298));
        if (!v1299)
        {
          ((void (*)(std::__shared_weak_count *))v1297->__on_zero_shared)(v1297);
          std::__shared_weak_count::__release_weak(v1297);
        }
        goto LABEL_1933;
      }
      v1279 = v1181[3];
      v1280 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v1277 - v1279) >> 3);
      v1281 = v1280 + 1;
      if (v1280 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v1278 - v1279) >> 3) > v1281)
        v1281 = 0x5555555555555556 * ((uint64_t)(v1278 - v1279) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1278 - v1279) >> 3) >= 0x555555555555555)
        v1282 = 0xAAAAAAAAAAAAAAALL;
      else
        v1282 = v1281;
      if (v1282)
      {
        v1283 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1181[6] + 16))(v1181[6], 24 * v1282, 8);
        v1284 = v1283 + 24 * v1280;
        v1285 = v1283 + 24 * v1282;
        if (v1283)
        {
          *(_OWORD *)v1284 = *(_OWORD *)v1901;
          *(_QWORD *)(v1283 + 24 * v1280 + 16) = v1184;
          *(_QWORD *)&v1901[8] = 0;
          *(_QWORD *)&v1901[16] = 0;
        }
      }
      else
      {
        v1285 = 0;
        v1284 = 8 * (((uint64_t)v1277 - v1279) >> 3);
      }
      v1286 = v1284 + 24;
      v1287 = v1181[3];
      v1288 = v1181[4];
      if (v1288 == v1287)
      {
        v1181[3] = v1284;
        v1181[4] = v1286;
        v1291 = v1181[5];
        v1181[5] = v1285;
      }
      else
      {
        do
        {
          v1289 = *(_OWORD *)(v1288 - 24);
          v1288 -= 24;
          *(_OWORD *)(v1284 - 24) = v1289;
          v1284 -= 24;
          *(_QWORD *)(v1284 + 16) = *(_QWORD *)(v1288 + 16);
          *(_QWORD *)(v1288 + 8) = 0;
          *(_QWORD *)(v1288 + 16) = 0;
        }
        while (v1288 != v1287);
        v1288 = v1181[3];
        v1290 = v1181[4];
        v1181[3] = v1284;
        v1181[4] = v1286;
        v1291 = v1181[5];
        v1181[5] = v1285;
        while (v1290 != v1288)
        {
          v1292 = *(std::__shared_weak_count **)(v1290 - 8);
          if (v1292)
          {
            v1293 = (unint64_t *)&v1292->__shared_owners_;
            do
              v1294 = __ldaxr(v1293);
            while (__stlxr(v1294 - 1, v1293));
            if (!v1294)
            {
              ((void (*)(std::__shared_weak_count *))v1292->__on_zero_shared)(v1292);
              std::__shared_weak_count::__release_weak(v1292);
            }
          }
          v1290 -= 24;
        }
      }
      if (v1288)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v1181[6] + 40))(v1181[6], v1288, v1291 - v1288);
      v1184 = *(std::__shared_weak_count **)&v1901[16];
      v1181[4] = v1286;
      if (v1184)
        goto LABEL_1924;
LABEL_1927:
      v1297 = v1890;
      if (v1890)
        goto LABEL_1928;
LABEL_1933:
      std::mutex::unlock(v1182);
      if (v1887)
        v1300 = v1887 + 1;
      else
        v1300 = 0;
      v1301 = v1300[1];
      md::LabelLineStore::addTransitLineSegment(*(_QWORD *)(v1301 + 192), __srcd, (uint64_t)&v1796);
      std::mutex::lock((std::mutex *)(v1301 + 608));
      v1302 = *(_QWORD *)(v1301 + 688);
      v1303 = *(_QWORD *)(v1301 + 696);
      if (v1302 >= v1303)
      {
        v1307 = *(_QWORD *)(v1301 + 680);
        v1308 = (uint64_t)(v1302 - v1307) >> 5;
        if ((unint64_t)(v1308 + 1) >> 59)
          abort();
        v1309 = v1303 - v1307;
        v1310 = v1309 >> 4;
        if (v1309 >> 4 <= (unint64_t)(v1308 + 1))
          v1310 = v1308 + 1;
        if ((unint64_t)v1309 >= 0x7FFFFFFFFFFFFFE0)
          v1311 = 0x7FFFFFFFFFFFFFFLL;
        else
          v1311 = v1310;
        if (v1311)
        {
          v1312 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1301 + 704) + 16))(*(_QWORD *)(v1301 + 704), 32 * v1311, 8);
          v1313 = v1312 + 32 * v1308;
          v1311 = v1312 + 32 * v1311;
          v1108 = v1745;
          if (v1312)
          {
            *(_BYTE *)v1313 = 1;
            *(_QWORD *)(v1313 + 16) = 0;
            v1157 = (uint64_t *)(v1313 + 16);
            *(_QWORD *)(v1313 + 8) = __srcd;
            *(_QWORD *)(v1313 + 24) = 0;
            v1314 = (std::__shared_weak_count *)__srcd[1];
            if (v1314)
            {
              v1315 = std::__shared_weak_count::lock(v1314);
              *(_QWORD *)(v1312 + 32 * v1308 + 24) = v1315;
              if (v1315)
                *v1157 = *__srcd;
            }
          }
        }
        else
        {
          v1313 = 32 * v1308;
          v1108 = v1745;
        }
        v1306 = v1313 + 32;
        v1316 = *(uint64_t **)(v1301 + 688);
        v1317 = *(uint64_t **)(v1301 + 680);
        if (v1316 == v1317)
        {
          *(_QWORD *)(v1301 + 680) = v1313;
          *(_QWORD *)(v1301 + 688) = v1306;
          v1318 = *(_QWORD *)(v1301 + 696);
          *(_QWORD *)(v1301 + 696) = v1311;
        }
        else
        {
          do
          {
            *(_OWORD *)(v1313 - 32) = *((_OWORD *)v1316 - 2);
            *(_OWORD *)(v1313 - 16) = *((_OWORD *)v1316 - 1);
            v1313 -= 32;
            *(v1316 - 2) = 0;
            *(v1316 - 1) = 0;
            v1316 -= 4;
          }
          while (v1316 != v1317);
          v1316 = *(uint64_t **)(v1301 + 680);
          v1157 = *(uint64_t **)(v1301 + 688);
          *(_QWORD *)(v1301 + 680) = v1313;
          *(_QWORD *)(v1301 + 688) = v1306;
          v1318 = *(_QWORD *)(v1301 + 696);
          *(_QWORD *)(v1301 + 696) = v1311;
          while (v1157 != v1316)
          {
            v1319 = (std::__shared_weak_count *)*(v1157 - 1);
            if (v1319)
            {
              v1320 = (unint64_t *)&v1319->__shared_owners_;
              do
                v1321 = __ldaxr(v1320);
              while (__stlxr(v1321 - 1, v1320));
              if (!v1321)
              {
                ((void (*)(std::__shared_weak_count *))v1319->__on_zero_shared)(v1319);
                std::__shared_weak_count::__release_weak(v1319);
              }
            }
            v1157 -= 4;
          }
        }
        if (v1316)
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v1301 + 704) + 40))(*(_QWORD *)(v1301 + 704), v1316, v1318 - (_QWORD)v1316);
      }
      else
      {
        if (v1302)
        {
          *(_BYTE *)v1302 = 1;
          *(_QWORD *)(v1302 + 8) = __srcd;
          *(_QWORD *)(v1302 + 16) = 0;
          *(_QWORD *)(v1302 + 24) = 0;
          v1304 = (std::__shared_weak_count *)__srcd[1];
          if (v1304)
          {
            v1305 = std::__shared_weak_count::lock(v1304);
            *(_QWORD *)(v1302 + 24) = v1305;
            if (v1305)
              *(_QWORD *)(v1302 + 16) = *__srcd;
          }
        }
        v1306 = v1302 + 32;
        v1108 = v1745;
      }
      *(_QWORD *)(v1301 + 688) = v1306;
      atomic_store(1u, (unsigned __int8 *)(v1301 + 672));
      std::mutex::unlock((std::mutex *)(v1301 + 608));
      v1322 = v1887;
LABEL_2017:
      if (v1322)
        v1361 = v1322 + 1;
      else
        v1361 = 0;
      v1362 = (_QWORD *)v1361[1];
      v1363 = v1362[9];
      v1364 = *(_QWORD *)(v1108 + 344);
      if (v1364)
      {
        v1365 = (uint8x8_t)vcnt_s8((int8x8_t)v1364);
        v1365.i16[0] = vaddlv_u8(v1365);
        if (v1365.u32[0] > 1uLL)
        {
          v1157 = (uint64_t *)v1362[9];
          if (v1363 >= v1364)
            v1157 = (uint64_t *)(v1363 % v1364);
        }
        else
        {
          v1157 = (uint64_t *)((v1364 - 1) & v1363);
        }
        v1366 = *(_QWORD **)(*(_QWORD *)(v1108 + 336) + 8 * (_QWORD)v1157);
        if (v1366)
        {
          v1367 = (_QWORD *)*v1366;
          if (v1367)
          {
            if (v1365.u32[0] < 2uLL)
            {
              while (1)
              {
                v1373 = v1367[1];
                if (v1373 == v1363)
                {
                  v1371 = v1367[2];
                  if (v1371)
                    v1372 = v1371 + 8;
                  else
                    v1372 = 0;
                  if (*(_QWORD *)(*(_QWORD *)(v1372 + 8) + 72) == v1363)
                    goto LABEL_2163;
                }
                else if ((uint64_t *)(v1373 & (v1364 - 1)) != v1157)
                {
                  goto LABEL_2046;
                }
                v1367 = (_QWORD *)*v1367;
                if (!v1367)
                  goto LABEL_2046;
              }
            }
            do
            {
              v1368 = v1367[1];
              if (v1368 == v1363)
              {
                v1369 = v1367[2];
                if (v1369)
                  v1370 = v1369 + 8;
                else
                  v1370 = 0;
                if (*(_QWORD *)(*(_QWORD *)(v1370 + 8) + 72) == v1363)
                {
LABEL_2163:
                  v1099 = v1721;
                  goto LABEL_2107;
                }
              }
              else
              {
                if (v1368 >= v1364)
                  v1368 %= v1364;
                if ((uint64_t *)v1368 != v1157)
                  break;
              }
              v1367 = (_QWORD *)*v1367;
            }
            while (v1367);
          }
        }
      }
LABEL_2046:
      v1374 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v1739 + 16))(*v1739, 24, 8);
      *(_QWORD *)v1901 = v1374;
      *(_QWORD *)&v1901[8] = v1739;
      *v1374 = 0;
      v1374[1] = v1363;
      v1374[2] = v1322;
      if (v1322)
        ++*v1322;
      v1901[16] = 1;
      v1108 = v1745;
      v1375 = (float)(unint64_t)(*(_QWORD *)(v1745 + 376) + 1);
      v1376 = *(float *)(v1745 + 384);
      if (!v1364 || (float)(v1376 * (float)v1364) < v1375)
      {
        v1377 = (v1364 & (v1364 - 1)) != 0;
        if (v1364 < 3)
          v1377 = 1;
        v1378 = v1377 | (2 * v1364);
        v1379 = vcvtps_u32_f32(v1375 / v1376);
        if (v1378 <= v1379)
          v1380 = v1379;
        else
          v1380 = v1378;
        if (v1380 == 1)
        {
          v1380 = 2;
        }
        else if ((v1380 & (v1380 - 1)) != 0)
        {
          v1380 = std::__next_prime(v1380);
        }
        v1364 = *(_QWORD *)(v1745 + 344);
        if (v1380 > v1364)
        {
LABEL_2060:
          v1381 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v1745 + 352) + 16))(*(_QWORD *)(v1745 + 352), 8 * v1380, 8);
          v1382 = *(_QWORD *)(v1745 + 336);
          *(_QWORD *)(v1745 + 336) = v1381;
          if (v1382)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1745 + 352) + 40))(*(_QWORD *)(v1745 + 352), v1382, 8 * *(_QWORD *)(v1745 + 344));
          v1383 = 0;
          *(_QWORD *)(v1745 + 344) = v1380;
          do
            *(_QWORD *)(*(_QWORD *)(v1745 + 336) + 8 * v1383++) = 0;
          while (v1380 != v1383);
          v1384 = (_QWORD *)*v1714;
          if (!*v1714)
            goto LABEL_2083;
          v1385 = v1384[1];
          v1386 = v1380 - 1;
          if ((v1380 & (v1380 - 1)) == 0)
          {
            v1387 = v1385 & v1386;
            *(_QWORD *)(*(_QWORD *)(v1745 + 336) + 8 * v1387) = v1714;
            for (jj = (_QWORD *)*v1384; *v1384; jj = (_QWORD *)*v1384)
            {
              v1389 = jj[1] & v1386;
              if (v1389 == v1387)
              {
                v1384 = jj;
              }
              else
              {
                v1390 = *(_QWORD *)(v1745 + 336);
                if (*(_QWORD *)(v1390 + 8 * v1389))
                {
                  *v1384 = *jj;
                  v1391 = 8 * v1389;
                  *jj = **(_QWORD **)(*(_QWORD *)(v1745 + 336) + v1391);
                  **(_QWORD **)(*(_QWORD *)(v1745 + 336) + v1391) = jj;
                }
                else
                {
                  *(_QWORD *)(v1390 + 8 * v1389) = v1384;
                  v1384 = jj;
                  v1387 = v1389;
                }
              }
            }
            goto LABEL_2083;
          }
          if (v1385 >= v1380)
            v1385 %= v1380;
          *(_QWORD *)(*(_QWORD *)(v1745 + 336) + 8 * v1385) = v1714;
          v1395 = (_QWORD *)*v1384;
          if (!*v1384)
          {
LABEL_2083:
            v1364 = v1380;
            goto LABEL_2084;
          }
          while (2)
          {
            v1397 = v1395[1];
            if (v1397 >= v1380)
              v1397 %= v1380;
            if (v1397 != v1385)
            {
              v1398 = *(_QWORD *)(v1745 + 336);
              if (!*(_QWORD *)(v1398 + 8 * v1397))
              {
                *(_QWORD *)(v1398 + 8 * v1397) = v1384;
LABEL_2088:
                v1384 = v1395;
                v1395 = (_QWORD *)*v1395;
                v1385 = v1397;
                if (!v1395)
                  goto LABEL_2083;
                continue;
              }
              *v1384 = *v1395;
              v1396 = 8 * v1397;
              *v1395 = **(_QWORD **)(*(_QWORD *)(v1745 + 336) + v1396);
              **(_QWORD **)(*(_QWORD *)(v1745 + 336) + v1396) = v1395;
              v1395 = v1384;
            }
            break;
          }
          v1397 = v1385;
          goto LABEL_2088;
        }
        if (v1380 < v1364)
        {
          v1392 = vcvtps_u32_f32((float)*(unint64_t *)(v1745 + 376) / *(float *)(v1745 + 384));
          if (v1364 < 3
            || (v1393 = (uint8x8_t)vcnt_s8((int8x8_t)v1364), v1393.i16[0] = vaddlv_u8(v1393), v1393.u32[0] > 1uLL))
          {
            v1392 = std::__next_prime(v1392);
          }
          else
          {
            v1394 = 1 << -(char)__clz(v1392 - 1);
            if (v1392 >= 2)
              v1392 = v1394;
          }
          if (v1380 <= v1392)
            v1380 = v1392;
          if (v1380 >= v1364)
          {
            v1364 = *(_QWORD *)(v1745 + 344);
          }
          else
          {
            if (v1380)
              goto LABEL_2060;
            v1438 = *(_QWORD *)(v1745 + 336);
            *(_QWORD *)(v1745 + 336) = 0;
            if (v1438)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1745 + 352) + 40))(*(_QWORD *)(v1745 + 352), v1438, 8 * *(_QWORD *)(v1745 + 344));
            v1364 = 0;
            *(_QWORD *)(v1745 + 344) = 0;
          }
        }
LABEL_2084:
        if ((v1364 & (v1364 - 1)) != 0)
        {
          if (v1363 >= v1364)
            v1157 = (uint64_t *)(v1363 % v1364);
          else
            v1157 = (uint64_t *)v1363;
        }
        else
        {
          v1157 = (uint64_t *)((v1364 - 1) & v1363);
        }
      }
      v1399 = *(_QWORD **)(*(_QWORD *)(v1745 + 336) + 8 * (_QWORD)v1157);
      if (v1399)
      {
        *v1374 = *v1399;
        v1099 = v1721;
        goto LABEL_2105;
      }
      *v1374 = *(_QWORD *)(v1745 + 360);
      *(_QWORD *)(v1745 + 360) = v1374;
      *(_QWORD *)(*(_QWORD *)(v1745 + 336) + 8 * (_QWORD)v1157) = v1714;
      v1099 = v1721;
      if (*v1374)
      {
        v1400 = *(_QWORD *)(*v1374 + 8);
        if ((v1364 & (v1364 - 1)) != 0)
        {
          if (v1400 >= v1364)
            v1400 %= v1364;
        }
        else
        {
          v1400 &= v1364 - 1;
        }
        v1399 = (_QWORD *)(*(_QWORD *)(v1745 + 336) + 8 * v1400);
LABEL_2105:
        *v1399 = v1374;
      }
      ++*(_QWORD *)(v1745 + 376);
      v1362 = (_QWORD *)v1361[1];
LABEL_2107:
      v1401 = (std::__shared_weak_count *)v1361[2];
      v1893 = v1362;
      v1894 = v1401;
      if (v1401)
      {
        v1402 = (unint64_t *)&v1401->__shared_owners_;
        do
          v1403 = __ldxr(v1402);
        while (__stxr(v1403 + 1, v1402));
        geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1887);
        v1404 = (unint64_t *)&v1401->__shared_weak_owners_;
        do
          v1405 = __ldxr(v1404);
        while (__stxr(v1405 + 1, v1404));
      }
      else
      {
        geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v1887);
      }
      v1406 = (uint64_t *)(a1 + 176);
      while (1)
      {
        v1407 = (uint64_t *)*v1406;
        v1408 = v1406;
        if (!*v1406)
          break;
        while (1)
        {
          v1406 = v1407;
          v1409 = v1407[5];
          if ((unint64_t)v1401 < v1409)
            break;
          if (v1409 >= (unint64_t)v1401)
          {
            v1107 = v1752;
            if (v1401)
              std::__shared_weak_count::__release_weak(v1401);
            if (!v1801[25])
              goto LABEL_2185;
            goto LABEL_2140;
          }
          v1407 = (uint64_t *)v1406[1];
          if (!v1407)
          {
            v1408 = v1406 + 1;
            goto LABEL_2120;
          }
        }
      }
LABEL_2120:
      v1410 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 23) + 16))(*((_QWORD *)a1 + 23), 48, 8);
      *(_QWORD *)(v1410 + 32) = v1362;
      *(_QWORD *)(v1410 + 40) = v1401;
      *(_QWORD *)v1410 = 0;
      *(_QWORD *)(v1410 + 8) = 0;
      *(_QWORD *)(v1410 + 16) = v1406;
      *v1408 = v1410;
      v1411 = (_QWORD *)**v1705;
      if (v1411)
      {
        *v1705 = v1411;
        v1410 = *v1408;
      }
      v1412 = *v1726;
      _ZF = v1410 == *v1726;
      *(_BYTE *)(v1410 + 24) = _ZF;
      v1107 = v1752;
      if (!_ZF)
      {
        do
        {
          v1413 = *(uint64_t **)(v1410 + 16);
          if (*((_BYTE *)v1413 + 24))
            break;
          v1414 = v1413[2];
          v1415 = *(uint64_t **)v1414;
          if (*(uint64_t **)v1414 == v1413)
          {
            v1418 = *(_QWORD *)(v1414 + 8);
            if (!v1418 || (v1419 = *(unsigned __int8 *)(v1418 + 24), v1416 = (_BYTE *)(v1418 + 24), v1419))
            {
              if (*v1413 == v1410)
              {
                v1420 = *(uint64_t ***)(v1410 + 16);
              }
              else
              {
                v1420 = (uint64_t **)v1413[1];
                v1421 = *v1420;
                v1413[1] = (uint64_t)*v1420;
                if (v1421)
                {
                  v1421[2] = (uint64_t)v1413;
                  v1414 = v1413[2];
                }
                v1420[2] = (uint64_t *)v1414;
                *(_QWORD *)(v1413[2] + 8 * (*(_QWORD *)v1413[2] != (_QWORD)v1413)) = v1420;
                *v1420 = v1413;
                v1413[2] = (uint64_t)v1420;
                v1414 = (uint64_t)v1420[2];
                v1413 = *(uint64_t **)v1414;
              }
              *((_BYTE *)v1420 + 24) = 1;
              *(_BYTE *)(v1414 + 24) = 0;
              v1441 = v1413[1];
              *(_QWORD *)v1414 = v1441;
              if (v1441)
                *(_QWORD *)(v1441 + 16) = v1414;
              v1413[2] = *(_QWORD *)(v1414 + 16);
              *(_QWORD *)(*(_QWORD *)(v1414 + 16) + 8 * (**(_QWORD **)(v1414 + 16) != v1414)) = v1413;
              v1413[1] = v1414;
              goto LABEL_2183;
            }
          }
          else if (!v1415 || (v1417 = *((unsigned __int8 *)v1415 + 24), v1416 = v1415 + 3, v1417))
          {
            if (*v1413 == v1410)
            {
              v1439 = *(_QWORD *)(v1410 + 8);
              *v1413 = v1439;
              if (v1439)
              {
                *(_QWORD *)(v1439 + 16) = v1413;
                v1414 = v1413[2];
              }
              *(_QWORD *)(v1410 + 16) = v1414;
              *(_QWORD *)(v1413[2] + 8 * (*(_QWORD *)v1413[2] != (_QWORD)v1413)) = v1410;
              *(_QWORD *)(v1410 + 8) = v1413;
              v1413[2] = v1410;
              v1414 = *(_QWORD *)(v1410 + 16);
            }
            else
            {
              v1410 = *(_QWORD *)(v1410 + 16);
            }
            *(_BYTE *)(v1410 + 24) = 1;
            *(_BYTE *)(v1414 + 24) = 0;
            v1413 = *(uint64_t **)(v1414 + 8);
            v1440 = *v1413;
            *(_QWORD *)(v1414 + 8) = *v1413;
            if (v1440)
              *(_QWORD *)(v1440 + 16) = v1414;
            v1413[2] = *(_QWORD *)(v1414 + 16);
            *(_QWORD *)(*(_QWORD *)(v1414 + 16) + 8 * (**(_QWORD **)(v1414 + 16) != v1414)) = v1413;
            *v1413 = v1414;
LABEL_2183:
            *(_QWORD *)(v1414 + 16) = v1413;
            break;
          }
          *((_BYTE *)v1413 + 24) = 1;
          v1410 = v1414;
          *(_BYTE *)(v1414 + 24) = v1414 == v1412;
          *v1416 = 1;
        }
        while (v1414 != v1412);
      }
      ++*((_QWORD *)a1 + 24);
      if (v1801[25])
      {
LABEL_2140:
        v1422 = v1893;
        v1423 = v1884[1];
        if (v1884[1] >= v1885[0])
        {
          v1425 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3);
          v1426 = v1425 + 1;
          if (v1425 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3) > v1426)
            v1426 = 0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1885[0] - (char *)v1884[0]) >> 3) >= 0x555555555555555)
            v1427 = 0xAAAAAAAAAAAAAAALL;
          else
            v1427 = v1426;
          if (v1427)
          {
            v1428 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v1885[1] + 16))(v1885[1], 24 * v1427, 8);
            v1429 = (char *)(v1428 + 24 * v1425);
            v1430 = (void *)(v1428 + 24 * v1427);
            if (v1428)
            {
              *(_QWORD *)v1429 = v1422;
              v1431 = v1428 + 24 * v1425;
              *(_QWORD *)(v1431 + 8) = 0;
              *(_QWORD *)(v1431 + 16) = 0;
            }
          }
          else
          {
            v1430 = 0;
            v1429 = (char *)(8 * (((char *)v1884[1] - (char *)v1884[0]) >> 3));
          }
          v1432 = (char *)v1884[1];
          v1433 = (char *)v1884[0];
          v1434 = v1429;
          if (v1884[1] != v1884[0])
          {
            do
            {
              v1435 = *(_OWORD *)(v1432 - 24);
              *((_QWORD *)v1434 - 1) = *((_QWORD *)v1432 - 1);
              *(_OWORD *)(v1434 - 24) = v1435;
              v1434 -= 24;
              v1432 -= 24;
            }
            while (v1432 != v1433);
            v1432 = (char *)v1884[0];
          }
          v1424 = v1429 + 24;
          v1884[0] = v1434;
          v1884[1] = v1429 + 24;
          v1436 = v1885[0];
          v1885[0] = v1430;
          if (v1432)
            (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1432, v1436 - v1432);
        }
        else
        {
          if (v1884[1])
          {
            *((_QWORD *)v1884[1] + 1) = 0;
            v1423[2] = 0;
            *v1423 = v1422;
          }
          v1424 = v1423 + 3;
        }
        v1884[1] = v1424;
        v1437 = v1894;
        if (v1894)
        {
LABEL_2186:
          v1442 = (unint64_t *)&v1437->__shared_owners_;
          do
            v1443 = __ldaxr(v1442);
          while (__stlxr(v1443 - 1, v1442));
          if (!v1443)
          {
            ((void (*)(std::__shared_weak_count *))v1437->__on_zero_shared)(v1437);
            std::__shared_weak_count::__release_weak(v1437);
          }
        }
      }
      else
      {
LABEL_2185:
        v1437 = v1894;
        if (v1894)
          goto LABEL_2186;
      }
      v1111 = v1884[1];
      v1112 = v1884[0];
LABEL_1663:
      ++v1107;
      if (0xAAAAAAAAAAAAAAABLL * ((v1111 - v1112) >> 3) <= 0x1F && v1107 < v1099)
        continue;
      break;
    }
LABEL_1660:
    md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v1708 + 296), (char **)v1884, 1u, 1, *(_QWORD *)(*(_QWORD *)(v1708 + 152) + 32));
    v1109 = v1764;
    std::mutex::unlock(v1764);
    if (v1107 < v1099)
      continue;
    break;
  }
  if (v1884[0])
  {
    v1884[1] = v1884[0];
    (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1884[0], (char *)v1885[0] - (char *)v1884[0]);
  }
  v1096 = v1803;
LABEL_2194:
  if (v1096)
  {
    v1444 = (unint64_t *)&v1096->__shared_owners_;
    do
      v1445 = __ldaxr(v1444);
    while (__stlxr(v1445 - 1, v1444));
    if (!v1445)
    {
      ((void (*)(std::__shared_weak_count *))v1096->__on_zero_shared)(v1096);
      std::__shared_weak_count::__release_weak(v1096);
    }
  }
  v1753 = geo::codec::VectorTile::transitLinkCount(*(geo::codec::VectorTile **)a3);
  if (v1753)
  {
    std::mutex::lock(v1764);
    v1446 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
    if (!v1446)
    {
      v1496 = v1764;
      goto LABEL_2256;
    }
    v1447 = v1446;
    if (!v1446[52])
    {
      v1448 = (std::__shared_weak_count *)operator new(0x100uLL);
      v1448->__shared_owners_ = 0;
      v1449 = (unint64_t *)&v1448->__shared_owners_;
      v1448->__shared_weak_owners_ = 0;
      v1448->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA50;
      v1450 = md::LabelTileCollisionInfo::LabelTileCollisionInfo((uint64_t)&v1448[1], v1689);
      do
        v1451 = __ldxr(v1449);
      while (__stxr(v1451 + 1, v1449));
      v1452 = (std::__shared_weak_count *)v1447[53];
      v1447[52] = v1450;
      v1447[53] = v1448;
      if (v1452)
      {
        v1453 = (unint64_t *)&v1452->__shared_owners_;
        do
          v1454 = __ldaxr(v1453);
        while (__stlxr(v1454 - 1, v1453));
        if (!v1454)
        {
          ((void (*)(std::__shared_weak_count *))v1452->__on_zero_shared)(v1452);
          std::__shared_weak_count::__release_weak(v1452);
        }
      }
      do
        v1455 = __ldaxr(v1449);
      while (__stlxr(v1455 - 1, v1449));
      if (!v1455)
      {
        ((void (*)(std::__shared_weak_count *))v1448->__on_zero_shared)(v1448);
        std::__shared_weak_count::__release_weak(v1448);
      }
    }
    v1457 = v1447[52];
    v1456 = v1447[53];
    if (v1456)
    {
      v1458 = (unint64_t *)(v1456 + 16);
      do
        v1459 = __ldxr(v1458);
      while (__stxr(v1459 + 1, v1458));
    }
    v1460 = (std::__shared_weak_count *)*((_QWORD *)a1 + 34);
    *((_QWORD *)a1 + 33) = v1457;
    *((_QWORD *)a1 + 34) = v1456;
    if (v1460)
      std::__shared_weak_count::__release_weak(v1460);
    v1461 = v1447[52];
    std::mutex::unlock(v1764);
    if (v1461)
    {
      std::mutex::lock((std::mutex *)v1461);
      if (*(_BYTE *)(v1461 + 224))
        goto LABEL_2255;
      *(_BYTE *)(v1461 + 224) = 1;
      *(_BYTE *)(v1461 + 225) = *(_BYTE *)(geo::codec::VectorTile::key(*(geo::codec::VectorTile **)a3) + 1) & 0x3F;
      v1462 = geo::codec::VectorTile::transitVertices(*(geo::codec::VectorTile **)a3);
      v1463 = geo::codec::VectorTile::transitLinks(*(geo::codec::VectorTile **)a3);
      v1464 = 0;
      while (1)
      {
        v1761 = v1464;
        v1465 = *(unsigned int *)(v1463 + 20);
        if ((_DWORD)v1465)
          break;
LABEL_2220:
        v1464 = v1761 + 1;
        v1463 += 184;
        if (v1761 + 1 == v1753)
        {
          md::LabelTileCollisionInfo::simplifyPaths((md::LabelTileCollisionInfo *)v1461, 0.00300000003);
LABEL_2255:
          v1496 = (std::mutex *)v1461;
LABEL_2256:
          std::mutex::unlock(v1496);
          goto LABEL_2257;
        }
      }
      v1466 = 0;
      while (2)
      {
        v1467 = *(_QWORD *)(v1462 + 32) + 16 * *(unsigned int *)(v1463 + 16);
        v1468 = *(_QWORD *)(v1467 + 16 * v1466 + 8);
        if (v1468 < 2)
          goto LABEL_2223;
        v1469 = *(_QWORD *)(v1462 + 8);
        v1470 = *(_QWORD *)(v1467 + 16 * v1466);
        v1471 = (*(_QWORD *)(v1461 + 104) - *(_QWORD *)(v1461 + 96)) >> 3;
        v1472 = *(_DWORD **)(v1461 + 200);
        v1473 = *(_QWORD *)(v1461 + 208);
        if ((unint64_t)v1472 < v1473)
        {
          if (v1472)
          {
            *v1472 = v1471;
            v1472[1] = v1468;
          }
          v1474 = v1472 + 2;
          goto LABEL_2252;
        }
        v1475 = *(_QWORD *)(v1461 + 192);
        v1476 = ((uint64_t)v1472 - v1475) >> 3;
        v1477 = v1476 + 1;
        if ((unint64_t)(v1476 + 1) >> 61)
          abort();
        v1478 = v1473 - v1475;
        if (v1478 >> 2 > v1477)
          v1477 = v1478 >> 2;
        if ((unint64_t)v1478 >= 0x7FFFFFFFFFFFFFF8)
          v1479 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1479 = v1477;
        if (v1479)
        {
          v1480 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1461 + 216) + 16))(*(_QWORD *)(v1461 + 216), 8 * v1479, 4);
          v1481 = (_DWORD *)(v1480 + 8 * v1476);
          v1482 = v1480 + 8 * v1479;
          if (v1480)
          {
            *v1481 = v1471;
            v1481[1] = v1468;
          }
        }
        else
        {
          v1482 = 0;
          v1481 = (_DWORD *)(8 * v1476);
        }
        v1484 = *(_QWORD *)(v1461 + 192);
        v1483 = *(_QWORD *)(v1461 + 200);
        v1485 = v1483 - v1484;
        if (v1483 == v1484)
        {
          v1487 = v1481;
          goto LABEL_2250;
        }
        v1486 = v1485 - 8;
        if ((unint64_t)(v1485 - 8) < 0x38)
        {
          v1487 = v1481;
        }
        else
        {
          v1487 = v1481;
          if ((unint64_t)(v1483 - (_QWORD)v1481) >= 0x20)
          {
            v1488 = (v1486 >> 3) + 1;
            v1489 = v1481 - 4;
            v1490 = (__int128 *)(v1483 - 16);
            v1491 = v1488 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1492 = *v1490;
              *(v1489 - 1) = *(v1490 - 1);
              *v1489 = v1492;
              v1489 -= 2;
              v1490 -= 2;
              v1491 -= 4;
            }
            while (v1491);
            v1487 = &v1481[-2 * (v1488 & 0x3FFFFFFFFFFFFFFCLL)];
            v1483 -= 8 * (v1488 & 0x3FFFFFFFFFFFFFFCLL);
            if (v1488 == (v1488 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_2249:
              v1483 = *(_QWORD *)(v1461 + 192);
LABEL_2250:
              v1474 = v1481 + 2;
              *(_QWORD *)(v1461 + 192) = v1487;
              *(_QWORD *)(v1461 + 200) = v1481 + 2;
              v1494 = *(_QWORD *)(v1461 + 208);
              *(_QWORD *)(v1461 + 208) = v1482;
              if (v1483)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1461 + 216) + 40))(*(_QWORD *)(v1461 + 216), v1483, v1494 - v1483);
LABEL_2252:
              *(_QWORD *)(v1461 + 200) = v1474;
              std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t *)(v1461 + 96), *(_QWORD *)(v1461 + 104), v1469 + 8 * v1470, (_QWORD *)(v1469 + 8 * v1470 + 8 * v1468), v1468);
              v1495 = *(_QWORD *)(v1461 + 136);
              LODWORD(v1884[0]) = 0;
              std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::insert((float **)(v1461 + 128), v1495, v1468, (const float *)v1884);
              v1465 = *(unsigned int *)(v1463 + 20);
LABEL_2223:
              if (++v1466 >= v1465)
                goto LABEL_2220;
              continue;
            }
          }
        }
        break;
      }
      do
      {
        v1493 = *(_QWORD *)(v1483 - 8);
        v1483 -= 8;
        *((_QWORD *)v1487 - 1) = v1493;
        v1487 -= 2;
      }
      while (v1483 != v1484);
      goto LABEL_2249;
    }
  }
LABEL_2257:
  if (HIDWORD(v1691))
  {
    v1497 = geo::codec::VectorTile::poisCount(*(geo::codec::VectorTile **)a3);
    if (v1497)
    {
      v1498 = (uint64_t *)geo::codec::VectorTile::pois(*(geo::codec::VectorTile **)a3);
      v1788 = *(_QWORD *)buf;
      v1789 = v1877;
      v1790 = *(_QWORD *)((char *)&v1877 + 4);
      v1791 = v1879;
      v1792 = v1880;
      v1793[0] = *(_OWORD *)v1881;
      *(_OWORD *)((char *)v1793 + 11) = *(_OWORD *)&v1881[11];
      v1794 = v1882;
      v1795 = v1883;
      if (v1883)
      {
        v1499 = (unint64_t *)&v1883->__shared_owners_;
        do
          v1500 = __ldxr(v1499);
        while (__stxr(v1500 + 1, v1499));
      }
      md::LabelFeaturePool::addPointFeatures((uint64_t)v1764, (unint64_t *)a3, v1498, v1497, &v1788, v1723, 17, 0);
      v1501 = v1795;
      if (v1795)
      {
        v1502 = (unint64_t *)&v1795->__shared_owners_;
        do
          v1503 = __ldaxr(v1502);
        while (__stlxr(v1503 - 1, v1502));
        if (!v1503)
        {
          ((void (*)(std::__shared_weak_count *))v1501->__on_zero_shared)(v1501);
          std::__shared_weak_count::__release_weak(v1501);
          if (!(_DWORD)v1691)
            goto LABEL_2472;
LABEL_2267:
          v1504 = geo::codec::VectorTile::poisCount(*(geo::codec::VectorTile **)a3);
          if (!v1504)
            goto LABEL_2472;
          v1505 = geo::codec::VectorTile::pois(*(geo::codec::VectorTile **)a3);
          v1506 = *(_QWORD *)buf;
          v1780 = *(_QWORD *)buf;
          v1781 = v1877;
          v1782 = *(_QWORD *)((char *)&v1877 + 4);
          v1783 = v1879;
          v1784 = v1880;
          *(_OWORD *)v1785 = *(_OWORD *)v1881;
          *(_OWORD *)&v1785[11] = *(_OWORD *)&v1881[11];
          v1786 = v1882;
          v1787 = v1883;
          if (v1883)
          {
            v1507 = (unint64_t *)&v1883->__shared_owners_;
            do
              v1508 = __ldxr(v1507);
            while (__stxr(v1508 + 1, v1507));
          }
          v1734 = geo::codec::VectorTile::poiStorefrontBundleIDs(*(geo::codec::VectorTile **)a3);
          v1884[1] = 0;
          v1884[0] = 0;
          v1885[0] = 0;
          {
            v1686 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1686, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v1885[1] = (void *)mdm::Allocator::instance(void)::alloc;
          v1510 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
          v1511 = v1510 + 768;
          v1512 = (char *)v1884[1];
          v1513 = (char *)v1884[0];
          if (v1884[1] != v1884[0])
          {
            do
            {
              v1514 = *(_OWORD *)(v1512 - 24);
              *((_QWORD *)v1510 - 1) = *((_QWORD *)v1512 - 1);
              *(_OWORD *)(v1510 - 24) = v1514;
              v1510 -= 24;
              v1512 -= 24;
            }
            while (v1512 != v1513);
            v1512 = v1513;
          }
          v1515 = v1885[0];
          v1884[0] = v1510;
          v1885[0] = v1511;
          if (v1512)
            (*(void (**)(void *, char *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1512, v1515 - v1512);
          v1516 = 0;
          v1729 = 0;
          v1517 = v1764;
          __asm { FMOV            V0.2D, #0.5 }
          v1762 = _Q0;
          v1722 = v1506;
          v1710 = v1504;
          while (1)
          {
            v1884[1] = v1884[0];
            std::mutex::lock(v1517);
            v1521 = a8;
            v1522 = v1734;
            if (!v1729)
            {
              v1523 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v1764[7].__m_.__opaque, *(_QWORD *)a3);
              if (!v1523)
              {
                std::mutex::unlock(v1764);
LABEL_2464:
                if (v1884[0])
                {
                  v1884[1] = v1884[0];
                  (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1884[0], (char *)v1885[0] - (char *)v1884[0]);
                }
                v1667 = v1787;
                if (v1787)
                {
                  v1668 = (unint64_t *)&v1787->__shared_owners_;
                  do
                    v1669 = __ldaxr(v1668);
                  while (__stlxr(v1669 - 1, v1668));
                  if (!v1669)
                  {
                    ((void (*)(std::__shared_weak_count *))v1667->__on_zero_shared)(v1667);
                    std::__shared_weak_count::__release_weak(v1667);
                  }
                }
                goto LABEL_2472;
              }
              v1729 = v1523 + 3;
              v1521 = a8;
              v1522 = v1734;
            }
            v1524 = v1884[1];
            v1525 = v1884[0];
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3) <= 0x1F && v1516 < v1504)
              break;
LABEL_2286:
            md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v1506 + 296), (char **)v1884, 1u, 1, *(_QWORD *)(*(_QWORD *)(v1506 + 152) + 32));
            v1517 = v1764;
            std::mutex::unlock(v1764);
            if (v1516 >= v1504)
              goto LABEL_2464;
          }
          while (1)
          {
            if (*(_BYTE *)(v1505 + 206))
            {
              v1528 = 0;
              v1530 = (int8x8_t)v1521[33];
              v1531 = (uint8x8_t)vcnt_s8(v1530);
              v1531.i16[0] = vaddlv_u8(v1531);
              v1532 = *(_QWORD *)&v1530 - 1;
              while (1)
              {
                if (v1530)
                {
                  v1529 = v1522 + 8 * *(unsigned int *)(v1505 + 188);
                  v1534 = *(_QWORD *)(v1529 + 8 * v1528);
                  if (v1531.u32[0] > 1uLL)
                  {
                    v1535 = *(_QWORD *)(v1529 + 8 * v1528);
                    if (*(_QWORD *)&v1530 <= v1534)
                      v1535 = v1534 % *(_QWORD *)&v1530;
                  }
                  else
                  {
                    v1535 = v1532 & v1534;
                  }
                  v1536 = *(uint64_t ****)(v1521[32] + 8 * v1535);
                  if (v1536)
                  {
                    v1537 = *v1536;
                    if (v1537)
                      break;
                  }
                }
LABEL_2296:
                if (++v1528 == *(unsigned __int8 *)(v1505 + 206))
                  goto LABEL_2289;
              }
              if (v1531.u32[0] < 2uLL)
              {
                while (1)
                {
                  v1538 = v1537[1];
                  if (v1538 == (uint64_t *)v1534)
                  {
                    if (v1537[2] == (uint64_t *)v1534)
                      goto LABEL_2295;
                  }
                  else if (((unint64_t)v1538 & v1532) != v1535)
                  {
                    goto LABEL_2296;
                  }
                  v1537 = (uint64_t **)*v1537;
                  if (!v1537)
                    goto LABEL_2296;
                }
              }
              while (1)
              {
                v1539 = (unint64_t)v1537[1];
                if (v1539 == v1534)
                  break;
                if (v1539 >= *(_QWORD *)&v1530)
                  v1539 %= *(_QWORD *)&v1530;
                if (v1539 != v1535)
                  goto LABEL_2296;
LABEL_2312:
                v1537 = (uint64_t **)*v1537;
                if (!v1537)
                  goto LABEL_2296;
              }
              if (v1537[2] != (uint64_t *)v1534)
                goto LABEL_2312;
LABEL_2295:
              v1533 = v1521[29];
              if (!v1533)
                goto LABEL_2296;
              v1540 = *((unsigned __int16 *)v1537 + 12);
              v1541 = v1533 + 168 * *((unsigned __int16 *)v1537 + 12);
              v1543 = *(_QWORD *)(v1541 + 88);
              v1542 = (uint64_t *)(v1541 + 88);
              v1544 = v1542 + 1;
              if (v1542[1] != v1543)
                break;
            }
LABEL_2289:
            ++v1516;
            v1505 += 224;
            if (0xAAAAAAAAAAAAAAABLL * ((v1524 - v1525) >> 3) > 0x1F || v1516 >= v1504)
              goto LABEL_2286;
          }
          __p = 0;
          {
            v1666 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1666, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v1546 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
          __p = v1546;
          *v1546 = 1;
          md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v1546 + 1), (uint64_t *)v1505, 0);
          __p = v1546;
          v1547 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((float *)&v1764[5].__m_.__opaque[16], (uint64_t)&__p, (_QWORD **)&__p);
          v1785[25] = v1548;
          if (v1548)
          {
            v1549 = (char *)operator new(0x328uLL);
            *((_QWORD *)v1549 + 2) = 0;
            *(_QWORD *)v1549 = &off_1E42DD658;
            *((_QWORD *)v1549 + 1) = 0;
            v1746 = v1549;
            v1550 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v1549 + 24), (GeoCodecsPointFeature *)v1505, (const md::LabelFeatureCreationParams *)&v1780);
            *((_QWORD *)v1549 + 3) = &off_1E42A3E68;
            *((_QWORD *)v1549 + 89) = 0;
            v1552 = 0uLL;
            *(_OWORD *)(v1549 + 696) = 0u;
            v1549[720] = 0;
            v1549[760] = 0;
            *((_DWORD *)v1549 + 200) = 0;
            v1553 = *(unsigned __int8 *)(v1533 + 168 * v1540 + 8);
            if (*(_BYTE *)(v1533 + 168 * v1540 + 8))
            {
              v1554 = (__n128 *)(v1533 + 168 * v1540);
              v1552 = v1554[1];
              v1551 = v1554[2];
              *(__n128 *)(v1549 + 728) = v1552;
              *(__n128 *)(v1549 + 744) = v1551;
              v1549[720] = 1;
            }
            if (*(_BYTE *)(v1533 + 168 * v1540 + 48))
            {
              v1555 = v1533 + 168 * v1540;
              v1552 = *(__n128 *)(v1555 + 56);
              v1551 = *(__n128 *)(v1555 + 72);
              *((__n128 *)v1549 + 48) = v1552;
              *((__n128 *)v1549 + 49) = v1551;
              v1549[760] = 1;
            }
            v1717 = v1550;
            if (!v1553)
              goto LABEL_2352;
            v1556 = (int8x8_t)a8[25];
            if (!*(_QWORD *)&v1556)
              goto LABEL_2352;
            v1557 = *((_QWORD *)v1549 + 91);
            v1552.n128_u64[0] = (unint64_t)vcnt_s8(v1556);
            v1552.n128_u16[0] = vaddlv_u8((uint8x8_t)v1552.n128_u64[0]);
            if (v1552.n128_u32[0] > 1uLL)
            {
              v1558 = *((_QWORD *)v1549 + 91);
              if (*(_QWORD *)&v1556 <= v1557)
                v1558 = v1557 % *(_QWORD *)&v1556;
            }
            else
            {
              v1558 = (*(_QWORD *)&v1556 - 1) & v1557;
            }
            v1564 = *(uint64_t ****)(a8[24] + 8 * v1558);
            if (!v1564 || (v1565 = *v1564) == 0)
            {
LABEL_2352:
              v1569 = 0;
              goto LABEL_2353;
            }
            if (v1552.n128_u32[0] < 2uLL)
            {
              v1566 = *(_QWORD *)&v1556 - 1;
              while (1)
              {
                v1568 = v1565[1];
                if (v1568 == (uint64_t *)v1557)
                {
                  if (v1565[2] == (uint64_t *)v1557)
                    goto LABEL_2460;
                }
                else if (((unint64_t)v1568 & v1566) != v1558)
                {
                  goto LABEL_2352;
                }
                v1565 = (uint64_t **)*v1565;
                if (!v1565)
                  goto LABEL_2352;
              }
            }
            while (2)
            {
              v1567 = (unint64_t)v1565[1];
              if (v1567 != v1557)
              {
                if (v1567 >= *(_QWORD *)&v1556)
                  v1567 %= *(_QWORD *)&v1556;
                if (v1567 != v1558)
                  goto LABEL_2352;
                goto LABEL_2342;
              }
              if (v1565[2] != (uint64_t *)v1557)
              {
LABEL_2342:
                v1565 = (uint64_t **)*v1565;
                if (!v1565)
                  goto LABEL_2352;
                continue;
              }
              break;
            }
LABEL_2460:
            v1569 = (float64x2_t *)(a8[21] + 1864 * *((unsigned __int16 *)v1565 + 12));
LABEL_2353:
            v1740 = (__n128 **)(v1549 + 696);
            v1570 = *v1544;
            v1571 = *v1542;
            if (*v1544 != *v1542)
            {
              v1572 = 0xAAAAAAAAAAAAAAABLL * ((*v1544 - *v1542) >> 4);
              if (v1572 >> 60)
                abort();
              v1573 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((*v1544 - *v1542) >> 4));
              *((_QWORD *)v1549 + 87) = v1573;
              *((_QWORD *)v1549 + 88) = v1573;
              *((_QWORD *)v1549 + 89) = &v1573[16 * v1572];
              v1571 = *v1542;
              v1570 = *v1544;
            }
            if (v1571 != v1570)
            {
              v1754 = 3.4028e38;
              v1773 = v1570;
              __srce = v1569;
              while (1)
              {
                v1574 = *(float *)(v1571 + 24);
                v1575 = *(float *)(v1571 + 28);
                v1577 = *(float *)(v1571 + 32);
                v1576 = *(float *)(v1571 + 36);
                v1578 = *(double *)v1571;
                v1579 = *(double *)(v1571 + 8);
                v1580 = *(double *)(v1571 + 16);
                v1581 = *(float32x2_t *)(v1571 + 40);
                v1582 = (char *)operator new(0xB0uLL);
                v1583 = (float *)v1582;
                v1584.f32[0] = (float)((float)(v1574 * -0.5) + (float)(v1576 * 0.5))
                             + (float)((float)(v1575 * 0.5) + (float)(v1577 * 0.5));
                v1584.f32[1] = (float)((float)(v1576 * 0.5) + (float)(v1575 * 0.5))
                             - (float)((float)(v1574 * -0.5) + (float)(v1577 * 0.5));
                v1585.f32[0] = (float)((float)((float)(v1574 * 0.5) + (float)(v1576 * -0.5)) + (float)(v1575 * 0.5))
                             - (float)(v1577 * -0.5);
                v1585.f32[1] = (float)((float)(v1576 * -0.5) - (float)(v1574 * 0.5))
                             + (float)((float)(v1575 * 0.5) + (float)(v1577 * -0.5));
                v1551 = (__n128)vcvtq_f64_f32(v1584);
                v1552 = (__n128)vmulq_f64(vcvtq_f64_f32(v1581), v1762);
                _Q2 = vcvtq_f64_f32(v1585);
                *((_QWORD *)v1582 + 1) = 0;
                v1587 = (unint64_t *)(v1582 + 8);
                *((_QWORD *)v1582 + 2) = 0;
                *((double *)v1582 + 3) = v1578;
                v1588 = v1582 + 24;
                *(_QWORD *)v1582 = &off_1E42DB438;
                *((double *)v1582 + 4) = v1579;
                *((double *)v1582 + 5) = v1580;
                v1589 = vmuld_lane_f64(_Q2.f64[1] + _Q2.f64[1], _Q2, 1);
                v1590 = (v1551.n128_f64[0] + v1551.n128_f64[0]) * v1551.n128_f64[0];
                v1591 = 1.0 - (v1589 + v1590);
                _D16 = _Q2.f64[0] + _Q2.f64[0];
                v1593 = vmuld_lane_f64(_Q2.f64[0] + _Q2.f64[0], _Q2, 1);
                v1594 = vmuld_lane_f64(v1551.n128_f64[0] + v1551.n128_f64[0], (float64x2_t)v1551, 1);
                v1595 = v1593 - v1594;
                v1596 = (_Q2.f64[0] + _Q2.f64[0]) * v1551.n128_f64[0];
                v1597 = vmuld_lane_f64(_Q2.f64[1] + _Q2.f64[1], (float64x2_t)v1551, 1);
                v1598 = v1594 + v1593;
                __asm { FMLS            D17, D16, V2.D[0] }
                _Q2.f64[0] = _D17 - v1590;
                v1600 = (_Q2.f64[1] + _Q2.f64[1]) * v1551.n128_f64[0];
                v1551.n128_f64[0] = vmuld_lane_f64(_D16, (float64x2_t)v1551, 1);
                v1601 = v1600 - v1551.n128_f64[0];
                v1551.n128_f64[0] = v1551.n128_f64[0] + v1600;
                v1602 = _D17 - v1589;
                *(float *)&v1589 = v1591;
                *(float *)&v1598 = v1598;
                *(float *)&v1591 = v1596 - v1597;
                *(float *)&_D16 = v1595;
                *(float *)_Q2.f64 = _Q2.f64[0];
                v1551.n128_f32[0] = v1551.n128_f64[0];
                *(float *)&_D17 = v1597 + v1596;
                *(float *)&v1601 = v1601;
                *(float *)&v1602 = v1602;
                *((_DWORD *)v1582 + 18) = LODWORD(v1589);
                *((_DWORD *)v1582 + 19) = LODWORD(v1598);
                *((_DWORD *)v1582 + 20) = LODWORD(v1591);
                *((_DWORD *)v1582 + 21) = LODWORD(_D16);
                *((_DWORD *)v1582 + 22) = LODWORD(_Q2.f64[0]);
                *((_DWORD *)v1582 + 23) = v1551.n128_u32[0];
                *((_DWORD *)v1582 + 24) = LODWORD(_D17);
                *((_DWORD *)v1582 + 25) = LODWORD(v1601);
                *((_DWORD *)v1582 + 26) = LODWORD(v1602);
                v1551.n128_f64[0] = 1.0 / sqrt(v1578 * v1578 + v1579 * v1579 + v1580 * v1580);
                v1603 = vaddq_f64((float64x2_t)v1552, (float64x2_t)v1552);
                v1604 = vmuld_lane_f64(-0.5, v1603, 1);
                v1552.n128_f64[0] = v1578 + v1604 * (v1551.n128_f64[0] * v1578);
                _Q2.f64[0] = v1579 + v1604 * (v1551.n128_f64[0] * v1579);
                *((_QWORD *)v1582 + 6) = v1552.n128_u64[0];
                *((_QWORD *)v1582 + 7) = *(_QWORD *)&_Q2.f64[0];
                v1551.n128_f64[0] = v1580 + v1604 * (v1551.n128_f64[0] * v1580);
                *((_QWORD *)v1582 + 8) = v1551.n128_u64[0];
                *((_QWORD *)v1582 + 15) = v1552.n128_u64[0];
                *((_QWORD *)v1582 + 16) = *(_QWORD *)&_Q2.f64[0];
                *((_QWORD *)v1582 + 17) = v1551.n128_u64[0];
                *((_QWORD *)v1582 + 18) = 0;
                *((_QWORD *)v1582 + 19) = 0;
                *((_DWORD *)v1582 + 40) = 1065353216;
                *((_WORD *)v1582 + 82) = 1;
                v1582[166] = 1;
                v1551.n128_u64[0] = (unint64_t)vcvt_f32_f64(v1603);
                *(_QWORD *)(v1582 + 108) = v1551.n128_u64[0];
                *((_DWORD *)v1582 + 42) = 0;
                if (v1569)
                {
                  v1605 = vsubq_f64(v1569[1], *(float64x2_t *)(v1582 + 56));
                  v1551 = (__n128)vmulq_f64(v1605, v1605);
                  v1606 = v1551.n128_f64[0] + (v1569->f64[1] - v1552.n128_f64[0]) * (v1569->f64[1] - v1552.n128_f64[0]);
                  v1551.n128_u32[1] = v1551.n128_u32[3];
                  v1552.n128_f64[0] = sqrt(v1606 + v1551.n128_f64[1]);
                  v1552.n128_f32[0] = v1552.n128_f64[0];
                  *((_DWORD *)v1582 + 42) = v1552.n128_u32[0];
                }
                v1607 = (__n128 *)*((_QWORD *)v1549 + 88);
                v1608 = *((_QWORD *)v1549 + 89);
                if ((unint64_t)v1607 < v1608)
                {
                  v1607->n128_u64[0] = (unint64_t)v1588;
                  v1607->n128_u64[1] = (unint64_t)v1582;
                  do
                    v1609 = __ldxr(v1587);
                  while (__stxr(v1609 + 1, v1587));
                  v1610 = v1607 + 1;
                  goto LABEL_2386;
                }
                v1611 = *v1740;
                v1612 = v1607 - *v1740;
                v1613 = v1612 + 1;
                if ((unint64_t)(v1612 + 1) >> 60)
                  abort();
                v1614 = v1608 - (_QWORD)v1611;
                if (v1614 >> 3 > v1613)
                  v1613 = v1614 >> 3;
                if ((unint64_t)v1614 >= 0x7FFFFFFFFFFFFFF0)
                  v1615 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v1615 = v1613;
                if (v1615 >> 60)
                  goto LABEL_2486;
                v1616 = (char *)operator new(16 * v1615);
                v1552.n128_u64[0] = (unint64_t)v1588;
                v1552.n128_u64[1] = (unint64_t)v1583;
                v1617 = (__n128 *)&v1616[16 * v1612];
                v1618 = &v1616[16 * v1615];
                *v1617 = v1552;
                do
                  v1619 = __ldxr(v1587);
                while (__stxr(v1619 + 1, v1587));
                v1610 = v1617 + 1;
                if (v1607 != v1611)
                  break;
                v1549 = v1746;
                *((_QWORD *)v1746 + 87) = v1617;
                *((_QWORD *)v1746 + 88) = v1610;
                *((_QWORD *)v1746 + 89) = v1618;
                if (v1607)
                  goto LABEL_2385;
LABEL_2386:
                *((_QWORD *)v1549 + 88) = v1610;
                v1569 = __srce;
                if (__srce && v1583[42] < v1754)
                  v1754 = v1583[42];
                do
                  v1625 = __ldaxr(v1587);
                while (__stlxr(v1625 - 1, v1587));
                if (!v1625)
                {
                  (*(void (**)(float *))(*(_QWORD *)v1583 + 16))(v1583);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1583);
                }
                v1571 += 48;
                if (v1571 == v1773)
                {
                  v1552.n128_u32[0] = 2139095039;
                  v1551.n128_f32[0] = v1754;
                  if (v1754 != 3.4028e38)
                  {
                    v1552.n128_f32[0] = v1754;
                    *((float *)v1549 + 200) = v1754;
                  }
                  goto LABEL_2396;
                }
              }
              do
              {
                v1620 = v1607[-1];
                --v1607;
                v1552 = v1620;
                v1617[-1] = v1620;
                --v1617;
                v1607->n128_u64[0] = 0;
                v1607->n128_u64[1] = 0;
              }
              while (v1607 != v1611);
              v1607 = (__n128 *)*((_QWORD *)v1746 + 87);
              v1621 = (__n128 *)*((_QWORD *)v1746 + 88);
              *((_QWORD *)v1746 + 87) = v1617;
              *((_QWORD *)v1746 + 88) = v1610;
              *((_QWORD *)v1746 + 89) = v1618;
              while (v1621 != v1607)
              {
                v1622 = (std::__shared_weak_count *)v1621[-1].n128_u64[1];
                if (v1622)
                {
                  v1623 = (unint64_t *)&v1622->__shared_owners_;
                  do
                    v1624 = __ldaxr(v1623);
                  while (__stlxr(v1624 - 1, v1623));
                  if (!v1624)
                  {
                    ((void (*)(std::__shared_weak_count *))v1622->__on_zero_shared)(v1622);
                    std::__shared_weak_count::__release_weak(v1622);
                  }
                }
                --v1621;
              }
              v1549 = v1746;
              if (!v1607)
                goto LABEL_2386;
LABEL_2385:
              operator delete(v1607);
              goto LABEL_2386;
            }
LABEL_2396:
            if (__p)
              v1626 = (char *)__p + 8;
            else
              v1626 = 0;
            v1627 = (std::__shared_weak_count *)*((_QWORD *)v1626 + 2);
            *((_QWORD *)v1626 + 1) = v1717;
            *((_QWORD *)v1626 + 2) = v1549;
            v1506 = v1722;
            if (v1627)
            {
              v1628 = (unint64_t *)&v1627->__shared_owners_;
              do
                v1629 = __ldaxr(v1628);
              while (__stlxr(v1629 - 1, v1628));
              if (!v1629)
              {
                ((void (*)(std::__shared_weak_count *, __n128, __n128))v1627->__on_zero_shared)(v1627, v1552, v1551);
                std::__shared_weak_count::__release_weak(v1627);
              }
            }
            v1630 = *(_QWORD *)&v1764[10].__m_.__opaque[24];
            v1563 = (char *)__p;
            v1631 = (char *)__p + 8;
            if (!__p)
              v1631 = 0;
            v1632 = *((_QWORD *)v1631 + 1);
            *(_QWORD *)(v1632 + 152) = v1631;
            *(_BYTE *)(v1632 + 147) = 0;
            v1633 = v1630 + 1;
            *(_QWORD *)&v1764[10].__m_.__opaque[24] = v1633;
            *(_QWORD *)(v1632 + 72) = v1633;
          }
          else
          {
            v1559 = v1547;
            v1560 = (_QWORD *)v1547[2];
            if (v1560)
              ++*v1560;
            geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&__p);
            v1561 = (_QWORD *)v1559[2];
            __p = v1561;
            if (v1561)
              v1562 = v1561 + 1;
            else
              v1562 = 0;
            md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v1562, (_QWORD *)v1505);
            v1563 = (char *)__p;
          }
          if (v1563)
            v1634 = (md::PointLabelFeature **)(v1563 + 8);
          else
            v1634 = 0;
          md::PointLabelFeature::addPointFeature(v1634[1], (GeoCodecsPointFeature *)v1505, (const md::LabelFeatureCreationParams *)&v1780);
          std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((unint64_t)(v1729 + 35), (uint64_t)__p, (_QWORD **)&__p);
          if (__p)
            v1635 = (char *)__p + 8;
          else
            v1635 = 0;
          v1636 = *((_QWORD *)v1635 + 1);
          v1637 = (std::__shared_weak_count *)*((_QWORD *)v1635 + 2);
          *(_QWORD *)v1901 = v1636;
          *(_QWORD *)&v1901[8] = v1637;
          if (v1637)
          {
            v1638 = (unint64_t *)&v1637->__shared_owners_;
            do
              v1639 = __ldxr(v1638);
            while (__stxr(v1639 + 1, v1638));
            geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&__p);
            v1521 = a8;
            v1522 = v1734;
            if (!v1636)
              goto LABEL_2435;
            v1640 = (unint64_t *)&v1637->__shared_weak_owners_;
            do
              v1641 = __ldxr(v1640);
            while (__stxr(v1641 + 1, v1640));
          }
          else
          {
            geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&__p);
            v1521 = a8;
            v1522 = v1734;
            if (!v1636)
              goto LABEL_2435;
          }
          v1642 = (uint64_t **)(a1 + 208);
          while (1)
          {
            v1643 = *v1642;
            v1644 = v1642;
            if (!*v1642)
              break;
            while (1)
            {
              v1642 = (uint64_t **)v1643;
              v1645 = v1643[5];
              if ((unint64_t)v1637 < v1645)
                break;
              if (v1645 >= (unint64_t)v1637)
              {
                if (v1637)
                {
                  std::__shared_weak_count::__release_weak(v1637);
                  v1522 = v1734;
                  v1521 = a8;
                }
                goto LABEL_2430;
              }
              v1643 = v1642[1];
              if (!v1643)
              {
                v1644 = v1642 + 1;
                goto LABEL_2427;
              }
            }
          }
LABEL_2427:
          v1646 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t))(**((_QWORD **)a1 + 27) + 16))(*((_QWORD *)a1 + 27), 48, 8, v1521, v1522);
          v1646[4] = v1636;
          v1646[5] = (uint64_t)v1637;
          *v1646 = 0;
          v1646[1] = 0;
          v1646[2] = (uint64_t)v1642;
          *v1644 = v1646;
          v1647 = (uint64_t *)**v1723;
          if (v1647)
          {
            *v1723 = v1647;
            v1646 = *v1644;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 26), v1646);
          ++*((_QWORD *)a1 + 28);
          v1521 = a8;
          v1522 = v1734;
LABEL_2430:
          v1506 = v1722;
          if (v1785[25])
          {
            v1648 = *(_QWORD *)v1901;
            v1649 = v1884[1];
            if (v1884[1] >= v1885[0])
            {
              v1653 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1884[1] - (char *)v1884[0]) >> 3);
              v1654 = v1653 + 1;
              if (v1653 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3) > v1654)
                v1654 = 0x5555555555555556 * (((char *)v1885[0] - (char *)v1884[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v1885[0] - (char *)v1884[0]) >> 3) >= 0x555555555555555)
                v1655 = 0xAAAAAAAAAAAAAAALL;
              else
                v1655 = v1654;
              if (v1655)
              {
                v1656 = (*(uint64_t (**)(void *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v1885[1]
                                                                                               + 16))(v1885[1], 24 * v1655, 8, v1521, v1522);
                v1657 = (char *)(v1656 + 24 * v1653);
                v1658 = (void *)(v1656 + 24 * v1655);
                if (v1656)
                {
                  *(_QWORD *)v1657 = v1648;
                  v1659 = v1656 + 24 * v1653;
                  *(_QWORD *)(v1659 + 8) = 0;
                  *(_QWORD *)(v1659 + 16) = 0;
                }
                v1521 = a8;
                v1522 = v1734;
              }
              else
              {
                v1658 = 0;
                v1657 = (char *)(8 * (((char *)v1884[1] - (char *)v1884[0]) >> 3));
              }
              v1660 = (char *)v1884[1];
              v1661 = (char *)v1884[0];
              v1662 = v1657;
              if (v1884[1] != v1884[0])
              {
                do
                {
                  v1663 = *(_OWORD *)(v1660 - 24);
                  *((_QWORD *)v1662 - 1) = *((_QWORD *)v1660 - 1);
                  *(_OWORD *)(v1662 - 24) = v1663;
                  v1662 -= 24;
                  v1660 -= 24;
                }
                while (v1660 != v1661);
                v1660 = (char *)v1884[0];
              }
              v1664 = v1657 + 24;
              v1884[0] = v1662;
              v1884[1] = v1657 + 24;
              v1665 = v1885[0];
              v1885[0] = v1658;
              if (v1660)
              {
                (*(void (**)(void *, char *, int64_t, _QWORD *, uint64_t))(*(_QWORD *)v1885[1] + 40))(v1885[1], v1660, v1665 - v1660, v1521, v1522);
                v1522 = v1734;
                v1521 = a8;
              }
              v1884[1] = v1664;
              v1650 = *(std::__shared_weak_count **)&v1901[8];
              if (!*(_QWORD *)&v1901[8])
                goto LABEL_2288;
              goto LABEL_2436;
            }
            if (v1884[1])
            {
              *((_QWORD *)v1884[1] + 1) = 0;
              v1649[2] = 0;
              *v1649 = v1648;
            }
            v1884[1] = v1649 + 3;
          }
LABEL_2435:
          v1650 = *(std::__shared_weak_count **)&v1901[8];
          if (!*(_QWORD *)&v1901[8])
          {
LABEL_2288:
            v1524 = v1884[1];
            v1525 = v1884[0];
            v1504 = v1710;
            goto LABEL_2289;
          }
LABEL_2436:
          v1651 = (unint64_t *)&v1650->__shared_owners_;
          do
            v1652 = __ldaxr(v1651);
          while (__stlxr(v1652 - 1, v1651));
          if (!v1652)
          {
            ((void (*)(std::__shared_weak_count *))v1650->__on_zero_shared)(v1650);
            std::__shared_weak_count::__release_weak(v1650);
            v1522 = v1734;
            v1521 = a8;
          }
          goto LABEL_2288;
        }
      }
    }
  }
  if ((_DWORD)v1691)
    goto LABEL_2267;
LABEL_2472:
  v1670 = v1883;
  if (v1883)
  {
    v1671 = (unint64_t *)&v1883->__shared_owners_;
    do
      v1672 = __ldaxr(v1671);
    while (__stlxr(v1672 - 1, v1671));
    if (!v1672)
    {
      ((void (*)(std::__shared_weak_count *))v1670->__on_zero_shared)(v1670);
      std::__shared_weak_count::__release_weak(v1670);
    }
  }
  if (!v1900)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_2540;
  }
  (*(void (**)(_QWORD *))(*v1900 + 48))(v1900);
  v1673 = v1900;
  if (v1900 == v1899)
  {
    v1674 = 4;
    v1673 = v1899;
  }
  else
  {
    if (!v1900)
      return;
    v1674 = 5;
  }
  (*(void (**)(void))(*v1673 + 8 * v1674))();
}

void sub_19F2BF328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD **a12, uint64_t a13, uint64_t a14, _QWORD **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD **a22,_QWORD **a23,_QWORD **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,md::PointLabelFeature *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,md::components::Material *a52,_QWORD **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,_QWORD **a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::mutex *v63;
  uint64_t v64;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;

  std::mutex::unlock(v63);
  md::LabelFeatureCreationParams::~LabelFeatureCreationParams((md::LabelFeatureCreationParams *)&STACK[0x710]);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v64 - 240));
  v66 = *(std::__shared_weak_count **)(a63 + 272);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a12 - 1), *a12);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a51, *a59);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a40, *a53);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a16, *a15);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a20, *a24);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a18, *a22);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a19, *a23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  v67 = *(std::__shared_weak_count **)(a63 + 16);
  if (!v67)
    _Unwind_Resume(a1);
  std::__shared_weak_count::__release_weak(v67);
  _Unwind_Resume(a1);
}

void md::PuckLocationAnimationTracingLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3)
{
  int v5;
  void *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int64_t v42;
  char *v43;
  id *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  void *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  char *v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  void *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  id *v112;
  int64x2_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int64_t v123;
  unint64_t v124;
  _BYTE *v125;
  unint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  _OWORD *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  id *v142;
  id *v143;
  uint64_t v144;
  _QWORD *v145;
  char **v147;
  void *v148;
  uint64_t v149;
  uint8_t buf[4];
  uint64_t v151;
  __int16 v152;
  id v153;
  __int16 v154;
  void *v155;
  __int16 v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a1 + 176);
  if (*(_QWORD *)(a1 + 368))
  {
    objc_msgSend(MEMORY[0x1E0D27368], "sharedPlatform");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isInternalInstall");

  }
  else
  {
    v7 = 0;
  }
  if (v5)
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    v9 = *a3;
    v10 = *(id *)(v9 + 40);
    if (v10)
    {
      v11 = v10;
      v12 = *(id *)(v9 + 40);
      objc_msgSend(v12, "routeInfo");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "route");
      v148 = (void *)objc_claimAutoreleasedReturnValue();

      if (*(_QWORD *)(a1 + 280))
      {
        if (v148)
        {
          md::LayoutContext::frameState(a2);
          v141 = objc_msgSend(v148, "closestPointOnRoute:", *(double *)(v14 + 56) * 57.2957795, *(double *)(v14 + 64) * 57.2957795);
          if (*(_QWORD *)(a1 + 280))
          {
            v15 = *(_QWORD *)(a1 + 272);
            v147 = (char **)(a1 + 296);
            while (1)
            {
              v17 = v15 & 0x7F;
              v149 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + ((v15 >> 4) & 0xFFFFFFFFFFFFFF8));
              v18 = v149 + 32 * v17;
              if (*(void **)(v18 + 16) == v148)
                break;
              if (*(_BYTE *)(a1 + 176))
              {
                if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1)
                  dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_38846);
                v19 = GEOGetVectorKitPuckTrackingLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitPuckTrackingLog(void)::log, OS_LOG_TYPE_INFO))
                {
                  v20 = *(_QWORD *)(v149 + 32 * v17 + 24);
                  *(_DWORD *)buf = 138412290;
                  v151 = v20;
                  _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_INFO, "[VK] [%@] Dropped - route no longer valid", buf, 0xCu);
                }
                v21 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + ((*(_QWORD *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8));
                v17 = *(_QWORD *)(a1 + 272) & 0x7FLL;
              }
              else
              {
                v21 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + ((v15 >> 4) & 0xFFFFFFFFFFFFFF8));
              }
              md::PuckLocationAnimationTracingLogic::publishEvent(a1, v21 + 32 * v17, 0);
              v44 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + ((*(_QWORD *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8))
                         + 32 * (*(_QWORD *)(a1 + 272) & 0x7FLL));

              v16 = *(_QWORD *)(a1 + 280) - 1;
              *(_QWORD *)(a1 + 280) = v16;
              v15 = *(_QWORD *)(a1 + 272) + 1;
              *(_QWORD *)(a1 + 272) = v15;
              if (v15 < 0x100)
                goto LABEL_15;
LABEL_13:
              operator delete(**(void ***)(a1 + 248));
              *(_QWORD *)(a1 + 248) += 8;
              v15 = *(_QWORD *)(a1 + 272) - 128;
              *(_QWORD *)(a1 + 272) = v15;
LABEL_14:
              v16 = *(_QWORD *)(a1 + 280);
LABEL_15:
              if (!v16)
                goto LABEL_152;
            }
            v22 = *(_DWORD *)(v18 + 8);
            v145 = (_QWORD *)(v18 + 8);
            if (v22 < v141
              || v22 == (_DWORD)v141 && *(float *)(v149 + 32 * v17 + 12) <= *((float *)&v141 + 1))
            {
              v142 = (id *)v18;
              v143 = (id *)(v18 + 16);
              md::LayoutContext::frameState(a2);
              v144 = *(_QWORD *)(v23 + 96);
              if (*(_BYTE *)(a1 + 176))
              {
                if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1)
                  dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_38846);
                v24 = (id)GEOGetVectorKitPuckTrackingLog(void)::log;
                if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                {
                  v25 = *(_QWORD *)(v149 + 32 * v17 + 24);
                  GEOPolylineCoordinateAsFullString();
                  v26 = (id)objc_claimAutoreleasedReturnValue();
                  GEOPolylineCoordinateAsFullString();
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138413058;
                  v151 = v25;
                  v152 = 2112;
                  v153 = v26;
                  v154 = 2112;
                  v155 = v27;
                  v156 = 2048;
                  v157 = v144;
                  _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_INFO, "[VK] [%@] Animation Reached Location - routeCoordinate:%@ presentationRouteCoordinate:(%@) frameStamp:%lu", buf, 0x2Au);

                }
              }
              md::PuckLocationAnimationTracingLogic::publishEvent(a1, *(_QWORD *)(*(_QWORD *)(a1 + 248) + ((*(_QWORD *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*(_QWORD *)(a1 + 272) & 0x7FLL), 2);
              v28 = *(char **)(a1 + 304);
              v29 = *v147;
              v30 = v28 - *v147;
              v31 = v30 >> 3;
              if (v28 == *v147)
                v32 = 0;
              else
                v32 = 102 * v31 - 1;
              v33 = *(_QWORD *)(a1 + 320);
              v34 = *(_QWORD *)(a1 + 328) + v33;
              if (v32 != v34)
              {
LABEL_122:
                v111 = (_QWORD *)(*(_QWORD *)&v29[8 * (v34 / 0x66)] + 40 * (v34 % 0x66));
                *v111 = v144;
                v111[1] = *v142;
                v111[2] = *v145;
                v111[3] = *v143;
                v111[4] = *(id *)(v149 + 32 * v17 + 24);
                ++*(_QWORD *)(a1 + 328);
                v112 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + ((*(_QWORD *)(a1 + 272) >> 4) & 0xFFFFFFFFFFFFFF8))
                            + 32 * (*(_QWORD *)(a1 + 272) & 0x7FLL));

                v113 = vaddq_s64(*(int64x2_t *)(a1 + 272), (int64x2_t)xmmword_19FFB5EC0);
                *(int64x2_t *)(a1 + 272) = v113;
                v15 = v113.i64[0];
                if (v113.i64[0] < 0x100uLL)
                  goto LABEL_14;
                goto LABEL_13;
              }
              if (v33 >= 0x66)
              {
                *(_QWORD *)(a1 + 320) = v33 - 102;
                v36 = v29 + 8;
                v35 = *(_QWORD *)v29;
                *(_QWORD *)(a1 + 296) = v29 + 8;
                if (*(char **)(a1 + 312) != v28)
                {
LABEL_119:
                  *(_QWORD *)v28 = v35;
                  goto LABEL_120;
                }
                v37 = *(char **)(a1 + 288);
                if (v36 > v37)
                {
                  v38 = (v36 - v37) >> 3;
                  if (v38 >= -1)
                    v39 = v38 + 1;
                  else
                    v39 = v38 + 2;
                  v40 = v39 >> 1;
                  v41 = &v36[-8 * (v39 >> 1)];
                  v42 = v28 - v36;
                  if (v28 == v36)
                  {
                    v43 = v28;
                  }
                  else
                  {
                    memmove(&v36[-8 * (v39 >> 1)], v36, v28 - v36);
                    v43 = *v147;
                  }
                  v28 = &v41[v42];
                  *(_QWORD *)(a1 + 296) = &v43[-8 * v40];
                  *(_QWORD *)(a1 + 304) = &v41[v42];
                  goto LABEL_119;
                }
                if (v28 == v37)
                  v54 = 1;
                else
                  v54 = (v28 - v37) >> 2;
                if (!(v54 >> 61))
                {
                  v55 = operator new(8 * v54);
                  v56 = v54 >> 2;
                  v57 = &v55[8 * (v54 >> 2)];
                  v58 = v28 - v36;
                  v8 = v28 == v36;
                  v28 = v57;
                  if (v8)
                    goto LABEL_117;
                  v28 = &v57[v58 & 0xFFFFFFFFFFFFFFF8];
                  v59 = v58 - 8;
                  if (v59 >= 0x38)
                  {
                    v102 = 8 * v56;
                    v103 = &v55[8 * v56] - v36;
                    v60 = &v55[8 * (v54 >> 2)];
                    if (v103 >= 0x20)
                    {
                      v104 = (v59 >> 3) + 1;
                      v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
                      v60 = &v57[v105];
                      v106 = (__int128 *)(v29 + 24);
                      v107 = &v55[v102 + 16];
                      v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v109 = *v106;
                        *(v107 - 1) = *(v106 - 1);
                        *v107 = v109;
                        v106 += 2;
                        v107 += 2;
                        v108 -= 4;
                      }
                      while (v108);
                      if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_117:
                        *(_QWORD *)(a1 + 288) = v55;
                        *(_QWORD *)(a1 + 296) = v57;
                        *(_QWORD *)(a1 + 304) = v28;
                        *(_QWORD *)(a1 + 312) = &v55[8 * v54];
                        if (v37)
                        {
                          operator delete(v37);
                          v28 = *(char **)(a1 + 304);
                        }
                        goto LABEL_119;
                      }
                      v36 += v105;
                    }
                  }
                  else
                  {
                    v60 = &v55[8 * (v54 >> 2)];
                  }
                  do
                  {
                    v110 = *(_QWORD *)v36;
                    v36 += 8;
                    *(_QWORD *)v60 = v110;
                    v60 += 8;
                  }
                  while (v60 != v28);
                  goto LABEL_117;
                }
LABEL_156:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v45 = *(char **)(a1 + 312);
              v46 = *(char **)(a1 + 288);
              v47 = v45 - v46;
              if (v31 < (unint64_t)((v45 - v46) >> 3))
              {
                if (v45 != v28)
                {
                  *(_QWORD *)v28 = operator new(0xFF0uLL);
LABEL_120:
                  *(_QWORD *)(a1 + 304) += 8;
LABEL_121:
                  v29 = *(char **)(a1 + 296);
                  v34 = *(_QWORD *)(a1 + 328) + *(_QWORD *)(a1 + 320);
                  goto LABEL_122;
                }
                v61 = operator new(0xFF0uLL);
                v62 = v29;
                if (v46 != v29)
                {
LABEL_128:
                  *((_QWORD *)v62 - 1) = v61;
                  v115 = *(char **)(a1 + 296);
                  v116 = *(char **)(a1 + 304);
                  *(_QWORD *)(a1 + 296) = v115 - 8;
                  v117 = *((_QWORD *)v115 - 1);
                  *(_QWORD *)(a1 + 296) = v115;
                  if (v116 != *(char **)(a1 + 312))
                  {
LABEL_129:
                    *(_QWORD *)v116 = v117;
                    goto LABEL_120;
                  }
                  v118 = *(char **)(a1 + 288);
                  if (v115 > v118)
                  {
                    v119 = (v115 - v118) >> 3;
                    if (v119 >= -1)
                      v120 = v119 + 1;
                    else
                      v120 = v119 + 2;
                    v121 = v120 >> 1;
                    v122 = &v115[-8 * (v120 >> 1)];
                    v123 = v116 - v115;
                    if (v116 != v115)
                    {
                      memmove(&v115[-8 * (v120 >> 1)], v115, v116 - v115);
                      v115 = *v147;
                    }
                    *(_QWORD *)(a1 + 296) = &v115[-8 * v121];
                    *(_QWORD *)(a1 + 304) = &v122[v123];
                    *(_QWORD *)&v122[v123] = v117;
                    goto LABEL_120;
                  }
                  if (v116 == v118)
                    v124 = 1;
                  else
                    v124 = (v116 - v118) >> 2;
                  if (v124 >> 61)
                    goto LABEL_156;
                  v125 = operator new(8 * v124);
                  v126 = v124 >> 2;
                  v127 = &v125[8 * (v124 >> 2)];
                  v128 = v116 - v115;
                  v8 = v116 == v115;
                  v116 = v127;
                  if (!v8)
                  {
                    v116 = &v127[v128 & 0xFFFFFFFFFFFFFFF8];
                    v129 = v128 - 8;
                    if (v129 < 0x38)
                    {
                      v130 = &v125[8 * (v124 >> 2)];
                      goto LABEL_149;
                    }
                    v131 = 8 * v126;
                    v132 = &v125[8 * v126] - v115;
                    v130 = &v125[8 * (v124 >> 2)];
                    if (v132 < 0x20)
                    {
                      do
                      {
LABEL_149:
                        v139 = *(_QWORD *)v115;
                        v115 += 8;
                        *(_QWORD *)v130 = v139;
                        v130 += 8;
                      }
                      while (v130 != v116);
                      goto LABEL_150;
                    }
                    v133 = (v129 >> 3) + 1;
                    v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
                    v130 = &v127[v134];
                    v135 = (__int128 *)(v115 + 16);
                    v136 = &v125[v131 + 16];
                    v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v138 = *v135;
                      *(v136 - 1) = *(v135 - 1);
                      *v136 = v138;
                      v135 += 2;
                      v136 += 2;
                      v137 -= 4;
                    }
                    while (v137);
                    if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      v115 += v134;
                      goto LABEL_149;
                    }
                  }
LABEL_150:
                  *(_QWORD *)(a1 + 288) = v125;
                  *(_QWORD *)(a1 + 296) = v127;
                  *(_QWORD *)(a1 + 304) = v116;
                  *(_QWORD *)(a1 + 312) = &v125[8 * v124];
                  if (v118)
                  {
                    operator delete(v118);
                    v116 = *(char **)(a1 + 304);
                  }
                  goto LABEL_129;
                }
                if (v28 == v29)
                  v63 = 1;
                else
                  v63 = v47 >> 2;
                if (v63 >> 61)
                  goto LABEL_156;
                v64 = (char *)operator new(8 * v63);
                v65 = (v63 + 3) >> 2;
                v62 = &v64[8 * v65];
                v66 = &v64[8 * v63];
                v67 = v62;
                if (v28 != v29)
                {
                  v67 = &v62[(v28 - v46) & 0xFFFFFFFFFFFFFFF8];
                  v68 = v28 - v46 - 8;
                  v69 = &v64[8 * v65];
                  v70 = v29;
                  if (v68 > 0x37)
                  {
                    v71 = 8 * v65;
                    v69 = &v64[8 * v65];
                    v70 = v29;
                    if ((unint64_t)(v69 - v46) >= 0x20)
                    {
                      v72 = (v68 >> 3) + 1;
                      v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
                      v69 = &v62[v73];
                      v74 = (__int128 *)(v29 + 16);
                      v75 = &v64[v71 + 16];
                      v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v77 = *v74;
                        *((_OWORD *)v75 - 1) = *(v74 - 1);
                        *(_OWORD *)v75 = v77;
                        v74 += 2;
                        v75 += 32;
                        v76 -= 4;
                      }
                      while (v76);
                      if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        *(_QWORD *)(a1 + 288) = v64;
                        *(_QWORD *)(a1 + 296) = v62;
                        *(_QWORD *)(a1 + 304) = v67;
                        *(_QWORD *)(a1 + 312) = v66;
LABEL_127:
                        operator delete(v29);
                        v62 = *v147;
                        goto LABEL_128;
                      }
                      v70 = &v29[v73];
                    }
                  }
                  do
                  {
                    v114 = *(_QWORD *)v70;
                    v70 += 8;
                    *(_QWORD *)v69 = v114;
                    v69 += 8;
                  }
                  while (v69 != v67);
                }
                *(_QWORD *)(a1 + 288) = v64;
                *(_QWORD *)(a1 + 296) = v62;
                *(_QWORD *)(a1 + 304) = v67;
                *(_QWORD *)(a1 + 312) = v66;
                if (!v29)
                  goto LABEL_128;
                goto LABEL_127;
              }
              if (v45 == v46)
                v48 = 1;
              else
                v48 = v47 >> 2;
              if (v48 >> 61)
                goto LABEL_156;
              v49 = (char *)operator new(8 * v48);
              v50 = operator new(0xFF0uLL);
              v51 = &v49[8 * v31];
              v52 = &v49[8 * v48];
              if (v31 == v48)
              {
                if (v30 < 1)
                {
                  if (v28 == v29)
                    v78 = 1;
                  else
                    v78 = v30 >> 2;
                  if (v78 >> 61)
                    goto LABEL_156;
                  v79 = v50;
                  v51 = (char *)operator new(8 * v78);
                  v52 = &v51[8 * v78];
                  operator delete(v49);
                  v29 = *(char **)(a1 + 296);
                  v28 = *(char **)(a1 + 304);
                  v49 = v51;
                  v50 = v79;
                }
                else
                {
                  v53 = v31 + 2;
                  if (v31 >= -1)
                    v53 = v31 + 1;
                  v51 -= 8 * (v53 >> 1);
                }
              }
              *(_QWORD *)v51 = v50;
              v80 = v51 + 8;
              if (v28 == v29)
              {
LABEL_84:
                v81 = *(void **)(a1 + 288);
                *(_QWORD *)(a1 + 288) = v49;
                *(_QWORD *)(a1 + 296) = v51;
                *(_QWORD *)(a1 + 304) = v80;
                *(_QWORD *)(a1 + 312) = v52;
                if (v81)
                  operator delete(v81);
                goto LABEL_121;
              }
              while (v51 != v49)
              {
                v82 = v51;
                v83 = v80;
LABEL_87:
                v84 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v82 - 1) = v84;
                v51 = v82 - 8;
                v80 = v83;
                if (v28 == *v147)
                  goto LABEL_84;
              }
              if (v80 < v52)
              {
                v85 = (v52 - v80) >> 3;
                if (v85 >= -1)
                  v86 = v85 + 1;
                else
                  v86 = v85 + 2;
                v83 = &v80[8 * (v86 >> 1)];
                v82 = &v51[8 * (v86 >> 1)];
                if (v80 == v51)
                {
                  v49 = v80;
                }
                else
                {
                  memmove(&v51[8 * (v86 >> 1)], v51, v80 - v51);
                  v49 = v51;
                }
                goto LABEL_87;
              }
              if (v52 == v51)
                v87 = 1;
              else
                v87 = (v52 - v51) >> 2;
              if (v87 >> 61)
                goto LABEL_156;
              v88 = (char *)operator new(8 * v87);
              v49 = v88;
              v89 = (v87 + 3) >> 2;
              v82 = &v88[8 * v89];
              v83 = v82;
              v90 = v80 - v51;
              if (v80 != v51)
              {
                v83 = &v82[v90 & 0xFFFFFFFFFFFFFFF8];
                v91 = v90 - 8;
                v92 = &v88[8 * v89];
                v93 = v51;
                if (v91 >= 0x38)
                {
                  v94 = 8 * v89;
                  v92 = &v88[8 * v89];
                  v93 = v51;
                  if ((unint64_t)(v92 - v51) >= 0x20)
                  {
                    v95 = (v91 >> 3) + 1;
                    v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
                    v92 = &v82[v96];
                    v97 = (__int128 *)(v51 + 16);
                    v98 = &v88[v94 + 16];
                    v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v100 = *v97;
                      *((_OWORD *)v98 - 1) = *(v97 - 1);
                      *(_OWORD *)v98 = v100;
                      v97 += 2;
                      v98 += 32;
                      v99 -= 4;
                    }
                    while (v99);
                    if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_107;
                    v93 = &v51[v96];
                  }
                }
                do
                {
                  v101 = *(_QWORD *)v93;
                  v93 += 8;
                  *(_QWORD *)v92 = v101;
                  v92 += 8;
                }
                while (v92 != v83);
              }
LABEL_107:
              v52 = &v88[8 * v87];
              operator delete(v51);
              goto LABEL_87;
            }
          }
        }
      }
LABEL_152:
      v140 = v148;
    }
    else
    {
      v140 = 0;
    }

  }
}

void sub_19F2C0F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  operator delete(v23);
  operator delete(v24);

  _Unwind_Resume(a1);
}

void md::LabelFeaturePool::prepareAddFeaturesForTile(uint64_t a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  float v67;
  _BOOL8 v68;
  unint64_t v69;
  unint64_t v70;
  size_t prime;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  size_t v77;
  size_t v78;
  size_t v79;
  _QWORD *i;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  geo::read_write_lock *v95;
  const char *v96;
  malloc_zone_t *zone;
  uint64_t v98;
  geo::read_write_lock *v99;
  const char *v100;
  malloc_zone_t *v101;
  uint64_t v102;
  geo::read_write_lock *v103;
  const char *v104;
  malloc_zone_t *v105;
  uint64_t v106;
  geo::read_write_lock *v107;
  const char *v108;
  malloc_zone_t *v109;
  uint64_t v110;
  geo::read_write_lock *v111;
  const char *v112;
  malloc_zone_t *v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  malloc_zone_t *v117;
  uint64_t v118;
  geo::read_write_lock *v119;
  const char *v120;
  malloc_zone_t *v121;
  uint64_t v122;
  geo::read_write_lock *v123;
  const char *v124;
  malloc_zone_t *v125;
  uint64_t v126;
  geo::read_write_lock *v127;
  const char *v128;
  malloc_zone_t *v129;
  uint64_t v130;
  geo::read_write_lock *v131;
  const char *v132;
  malloc_zone_t *v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  malloc_zone_t *v137;
  uint64_t v138;
  geo::read_write_lock *v139;
  const char *v140;
  malloc_zone_t *v141;
  uint64_t v142;
  geo::read_write_lock *v143;
  const char *v144;
  malloc_zone_t *v145;
  uint64_t v146;
  geo::read_write_lock *v147;
  const char *v148;
  malloc_zone_t *v149;
  _OWORD v150[3];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _OWORD v155[3];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _OWORD v160[3];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[5];
  uint64_t v166;
  uint64_t v167;
  char v168;

  md::LabelFeaturePool::flushRemovedTiles((md::LabelFeaturePool *)a1);
  v5 = **a2;
  if (!v5)
    v5 = (*a2)[2];
  std::mutex::lock((std::mutex *)a1);
  v164 = 0u;
  memset(v165, 0, sizeof(v165));
  v162 = 0u;
  v163 = 0u;
  v161 = 0u;
  memset(v160, 0, sizeof(v160));
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  memset(v155, 0, sizeof(v155));
  v152 = 0u;
  v153 = 0u;
  v151 = 0u;
  memset(v150, 0, sizeof(v150));
  {
    v94 = operator new();
    *(_QWORD *)(v94 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v94 + 24) = "VectorKitLabels";
    *(_OWORD *)(v94 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v94 = &off_1E42B5668;
    *(_QWORD *)(v94 + 8) = "VectorKitLabels";
    *(_OWORD *)(v94 + 72) = 0u;
    *(_OWORD *)(v94 + 88) = 0u;
    *(_OWORD *)(v94 + 104) = 0u;
    *(_OWORD *)(v94 + 120) = 0u;
    *(_OWORD *)(v94 + 136) = 0u;
    *(_OWORD *)(v94 + 152) = 0u;
    *(_OWORD *)(v94 + 168) = 0u;
    *(_OWORD *)(v94 + 184) = 0u;
    *(_OWORD *)(v94 + 200) = 0u;
    *(_OWORD *)(v94 + 216) = 0u;
    *(_OWORD *)(v94 + 232) = 0u;
    *(_QWORD *)(v94 + 248) = 0;
    *(_OWORD *)(v94 + 56) = 0u;
    v95 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v94 + 56), 0);
    if ((_DWORD)v95)
      geo::read_write_lock::logFailure(v95, (uint64_t)"initialization", v96);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v94 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v94 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v94;
  }
  v150[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    v98 = operator new();
    *(_QWORD *)(v98 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v98 + 24) = "VectorKitLabels";
    *(_OWORD *)(v98 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v98 = &off_1E42B5668;
    *(_QWORD *)(v98 + 8) = "VectorKitLabels";
    *(_OWORD *)(v98 + 72) = 0u;
    *(_OWORD *)(v98 + 88) = 0u;
    *(_OWORD *)(v98 + 104) = 0u;
    *(_OWORD *)(v98 + 120) = 0u;
    *(_OWORD *)(v98 + 136) = 0u;
    *(_OWORD *)(v98 + 152) = 0u;
    *(_OWORD *)(v98 + 168) = 0u;
    *(_OWORD *)(v98 + 184) = 0u;
    *(_OWORD *)(v98 + 200) = 0u;
    *(_OWORD *)(v98 + 216) = 0u;
    *(_OWORD *)(v98 + 232) = 0u;
    *(_QWORD *)(v98 + 248) = 0;
    *(_OWORD *)(v98 + 56) = 0u;
    v99 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v98 + 56), 0);
    if ((_DWORD)v99)
      geo::read_write_lock::logFailure(v99, (uint64_t)"initialization", v100);
    v101 = malloc_create_zone(0, 0);
    *(_QWORD *)(v98 + 48) = v101;
    malloc_set_zone_name(v101, "VectorKitLabels");
    *(_QWORD *)(v98 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v98;
  }
  v150[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v151) = 1065353216;
  *((_QWORD *)&v151 + 1) = 0;
  *(_QWORD *)&v152 = 0;
  {
    v102 = operator new();
    *(_QWORD *)(v102 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v102 + 24) = "VectorKitLabels";
    *(_OWORD *)(v102 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v102 = &off_1E42B5668;
    *(_QWORD *)(v102 + 8) = "VectorKitLabels";
    *(_OWORD *)(v102 + 72) = 0u;
    *(_OWORD *)(v102 + 88) = 0u;
    *(_OWORD *)(v102 + 104) = 0u;
    *(_OWORD *)(v102 + 120) = 0u;
    *(_OWORD *)(v102 + 136) = 0u;
    *(_OWORD *)(v102 + 152) = 0u;
    *(_OWORD *)(v102 + 168) = 0u;
    *(_OWORD *)(v102 + 184) = 0u;
    *(_OWORD *)(v102 + 200) = 0u;
    *(_OWORD *)(v102 + 216) = 0u;
    *(_OWORD *)(v102 + 232) = 0u;
    *(_QWORD *)(v102 + 248) = 0;
    *(_OWORD *)(v102 + 56) = 0u;
    v103 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v102 + 56), 0);
    if ((_DWORD)v103)
      geo::read_write_lock::logFailure(v103, (uint64_t)"initialization", v104);
    v105 = malloc_create_zone(0, 0);
    *(_QWORD *)(v102 + 48) = v105;
    malloc_set_zone_name(v105, "VectorKitLabels");
    *(_QWORD *)(v102 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v102;
  }
  *((_QWORD *)&v152 + 1) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v153 = 0;
  {
    v106 = operator new();
    *(_QWORD *)(v106 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v106 + 24) = "VectorKitLabels";
    *(_OWORD *)(v106 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v106 = &off_1E42B5668;
    *(_QWORD *)(v106 + 8) = "VectorKitLabels";
    *(_OWORD *)(v106 + 72) = 0u;
    *(_OWORD *)(v106 + 88) = 0u;
    *(_OWORD *)(v106 + 104) = 0u;
    *(_OWORD *)(v106 + 120) = 0u;
    *(_OWORD *)(v106 + 136) = 0u;
    *(_OWORD *)(v106 + 152) = 0u;
    *(_OWORD *)(v106 + 168) = 0u;
    *(_OWORD *)(v106 + 184) = 0u;
    *(_OWORD *)(v106 + 200) = 0u;
    *(_OWORD *)(v106 + 216) = 0u;
    *(_OWORD *)(v106 + 232) = 0u;
    *(_QWORD *)(v106 + 248) = 0;
    *(_OWORD *)(v106 + 56) = 0u;
    v107 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v106 + 56), 0);
    if ((_DWORD)v107)
      geo::read_write_lock::logFailure(v107, (uint64_t)"initialization", v108);
    v109 = malloc_create_zone(0, 0);
    *(_QWORD *)(v106 + 48) = v109;
    malloc_set_zone_name(v109, "VectorKitLabels");
    *(_QWORD *)(v106 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v106;
  }
  *((_QWORD *)&v153 + 1) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v154 = 0;
  DWORD2(v154) = 1065353216;
  v155[0] = 0uLL;
  {
    v110 = operator new();
    *(_QWORD *)(v110 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v110 + 24) = "VectorKitLabels";
    *(_OWORD *)(v110 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v110 = &off_1E42B5668;
    *(_QWORD *)(v110 + 8) = "VectorKitLabels";
    *(_OWORD *)(v110 + 72) = 0u;
    *(_OWORD *)(v110 + 88) = 0u;
    *(_OWORD *)(v110 + 104) = 0u;
    *(_OWORD *)(v110 + 120) = 0u;
    *(_OWORD *)(v110 + 136) = 0u;
    *(_OWORD *)(v110 + 152) = 0u;
    *(_OWORD *)(v110 + 168) = 0u;
    *(_OWORD *)(v110 + 184) = 0u;
    *(_OWORD *)(v110 + 200) = 0u;
    *(_OWORD *)(v110 + 216) = 0u;
    *(_OWORD *)(v110 + 232) = 0u;
    *(_QWORD *)(v110 + 248) = 0;
    *(_OWORD *)(v110 + 56) = 0u;
    v111 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v110 + 56), 0);
    if ((_DWORD)v111)
      geo::read_write_lock::logFailure(v111, (uint64_t)"initialization", v112);
    v113 = malloc_create_zone(0, 0);
    *(_QWORD *)(v110 + 48) = v113;
    malloc_set_zone_name(v113, "VectorKitLabels");
    *(_QWORD *)(v110 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v110;
  }
  v155[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    v114 = operator new();
    *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v114 + 24) = "VectorKitLabels";
    *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v114 = &off_1E42B5668;
    *(_QWORD *)(v114 + 8) = "VectorKitLabels";
    *(_OWORD *)(v114 + 72) = 0u;
    *(_OWORD *)(v114 + 88) = 0u;
    *(_OWORD *)(v114 + 104) = 0u;
    *(_OWORD *)(v114 + 120) = 0u;
    *(_OWORD *)(v114 + 136) = 0u;
    *(_OWORD *)(v114 + 152) = 0u;
    *(_OWORD *)(v114 + 168) = 0u;
    *(_OWORD *)(v114 + 184) = 0u;
    *(_OWORD *)(v114 + 200) = 0u;
    *(_OWORD *)(v114 + 216) = 0u;
    *(_OWORD *)(v114 + 232) = 0u;
    *(_QWORD *)(v114 + 248) = 0;
    *(_OWORD *)(v114 + 56) = 0u;
    v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
    if ((_DWORD)v115)
      geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
    v117 = malloc_create_zone(0, 0);
    *(_QWORD *)(v114 + 48) = v117;
    malloc_set_zone_name(v117, "VectorKitLabels");
    *(_QWORD *)(v114 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v114;
  }
  v155[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v156) = 1065353216;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  {
    v118 = operator new();
    *(_QWORD *)(v118 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v118 + 24) = "VectorKitLabels";
    *(_OWORD *)(v118 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v118 = &off_1E42B5668;
    *(_QWORD *)(v118 + 8) = "VectorKitLabels";
    *(_OWORD *)(v118 + 72) = 0u;
    *(_OWORD *)(v118 + 88) = 0u;
    *(_OWORD *)(v118 + 104) = 0u;
    *(_OWORD *)(v118 + 120) = 0u;
    *(_OWORD *)(v118 + 136) = 0u;
    *(_OWORD *)(v118 + 152) = 0u;
    *(_OWORD *)(v118 + 168) = 0u;
    *(_OWORD *)(v118 + 184) = 0u;
    *(_OWORD *)(v118 + 200) = 0u;
    *(_OWORD *)(v118 + 216) = 0u;
    *(_OWORD *)(v118 + 232) = 0u;
    *(_QWORD *)(v118 + 248) = 0;
    *(_OWORD *)(v118 + 56) = 0u;
    v119 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v118 + 56), 0);
    if ((_DWORD)v119)
      geo::read_write_lock::logFailure(v119, (uint64_t)"initialization", v120);
    v121 = malloc_create_zone(0, 0);
    *(_QWORD *)(v118 + 48) = v121;
    malloc_set_zone_name(v121, "VectorKitLabels");
    *(_QWORD *)(v118 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v118;
  }
  *((_QWORD *)&v157 + 1) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v158 = 0;
  {
    v122 = operator new();
    *(_QWORD *)(v122 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v122 + 24) = "VectorKitLabels";
    *(_OWORD *)(v122 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v122 = &off_1E42B5668;
    *(_QWORD *)(v122 + 8) = "VectorKitLabels";
    *(_OWORD *)(v122 + 72) = 0u;
    *(_OWORD *)(v122 + 88) = 0u;
    *(_OWORD *)(v122 + 104) = 0u;
    *(_OWORD *)(v122 + 120) = 0u;
    *(_OWORD *)(v122 + 136) = 0u;
    *(_OWORD *)(v122 + 152) = 0u;
    *(_OWORD *)(v122 + 168) = 0u;
    *(_OWORD *)(v122 + 184) = 0u;
    *(_OWORD *)(v122 + 200) = 0u;
    *(_OWORD *)(v122 + 216) = 0u;
    *(_OWORD *)(v122 + 232) = 0u;
    *(_QWORD *)(v122 + 248) = 0;
    *(_OWORD *)(v122 + 56) = 0u;
    v123 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v122 + 56), 0);
    if ((_DWORD)v123)
      geo::read_write_lock::logFailure(v123, (uint64_t)"initialization", v124);
    v125 = malloc_create_zone(0, 0);
    *(_QWORD *)(v122 + 48) = v125;
    malloc_set_zone_name(v125, "VectorKitLabels");
    *(_QWORD *)(v122 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v122;
  }
  *((_QWORD *)&v158 + 1) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v159 = 0;
  DWORD2(v159) = 1065353216;
  v160[0] = 0uLL;
  {
    v126 = operator new();
    *(_QWORD *)(v126 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v126 + 24) = "VectorKitLabels";
    *(_OWORD *)(v126 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v126 = &off_1E42B5668;
    *(_QWORD *)(v126 + 8) = "VectorKitLabels";
    *(_OWORD *)(v126 + 72) = 0u;
    *(_OWORD *)(v126 + 88) = 0u;
    *(_OWORD *)(v126 + 104) = 0u;
    *(_OWORD *)(v126 + 120) = 0u;
    *(_OWORD *)(v126 + 136) = 0u;
    *(_OWORD *)(v126 + 152) = 0u;
    *(_OWORD *)(v126 + 168) = 0u;
    *(_OWORD *)(v126 + 184) = 0u;
    *(_OWORD *)(v126 + 200) = 0u;
    *(_OWORD *)(v126 + 216) = 0u;
    *(_OWORD *)(v126 + 232) = 0u;
    *(_QWORD *)(v126 + 248) = 0;
    *(_OWORD *)(v126 + 56) = 0u;
    v127 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v126 + 56), 0);
    if ((_DWORD)v127)
      geo::read_write_lock::logFailure(v127, (uint64_t)"initialization", v128);
    v129 = malloc_create_zone(0, 0);
    *(_QWORD *)(v126 + 48) = v129;
    malloc_set_zone_name(v129, "VectorKitLabels");
    *(_QWORD *)(v126 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v126;
  }
  v160[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    v130 = operator new();
    *(_QWORD *)(v130 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v130 + 24) = "VectorKitLabels";
    *(_OWORD *)(v130 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v130 = &off_1E42B5668;
    *(_QWORD *)(v130 + 8) = "VectorKitLabels";
    *(_OWORD *)(v130 + 72) = 0u;
    *(_OWORD *)(v130 + 88) = 0u;
    *(_OWORD *)(v130 + 104) = 0u;
    *(_OWORD *)(v130 + 120) = 0u;
    *(_OWORD *)(v130 + 136) = 0u;
    *(_OWORD *)(v130 + 152) = 0u;
    *(_OWORD *)(v130 + 168) = 0u;
    *(_OWORD *)(v130 + 184) = 0u;
    *(_OWORD *)(v130 + 200) = 0u;
    *(_OWORD *)(v130 + 216) = 0u;
    *(_OWORD *)(v130 + 232) = 0u;
    *(_QWORD *)(v130 + 248) = 0;
    *(_OWORD *)(v130 + 56) = 0u;
    v131 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v130 + 56), 0);
    if ((_DWORD)v131)
      geo::read_write_lock::logFailure(v131, (uint64_t)"initialization", v132);
    v133 = malloc_create_zone(0, 0);
    *(_QWORD *)(v130 + 48) = v133;
    malloc_set_zone_name(v133, "VectorKitLabels");
    *(_QWORD *)(v130 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v130;
  }
  v160[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v161) = 1065353216;
  *((_QWORD *)&v161 + 1) = 0;
  *(_QWORD *)&v162 = 0;
  {
    v134 = operator new();
    *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v134 + 24) = "VectorKitLabels";
    *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v134 = &off_1E42B5668;
    *(_QWORD *)(v134 + 8) = "VectorKitLabels";
    *(_OWORD *)(v134 + 72) = 0u;
    *(_OWORD *)(v134 + 88) = 0u;
    *(_OWORD *)(v134 + 104) = 0u;
    *(_OWORD *)(v134 + 120) = 0u;
    *(_OWORD *)(v134 + 136) = 0u;
    *(_OWORD *)(v134 + 152) = 0u;
    *(_OWORD *)(v134 + 168) = 0u;
    *(_OWORD *)(v134 + 184) = 0u;
    *(_OWORD *)(v134 + 200) = 0u;
    *(_OWORD *)(v134 + 216) = 0u;
    *(_OWORD *)(v134 + 232) = 0u;
    *(_QWORD *)(v134 + 248) = 0;
    *(_OWORD *)(v134 + 56) = 0u;
    v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
    if ((_DWORD)v135)
      geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
    v137 = malloc_create_zone(0, 0);
    *(_QWORD *)(v134 + 48) = v137;
    malloc_set_zone_name(v137, "VectorKitLabels");
    *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v134;
  }
  *((_QWORD *)&v162 + 1) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v163 = 0;
  {
    v138 = operator new();
    *(_QWORD *)(v138 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v138 + 24) = "VectorKitLabels";
    *(_OWORD *)(v138 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v138 = &off_1E42B5668;
    *(_QWORD *)(v138 + 8) = "VectorKitLabels";
    *(_OWORD *)(v138 + 72) = 0u;
    *(_OWORD *)(v138 + 88) = 0u;
    *(_OWORD *)(v138 + 104) = 0u;
    *(_OWORD *)(v138 + 120) = 0u;
    *(_OWORD *)(v138 + 136) = 0u;
    *(_OWORD *)(v138 + 152) = 0u;
    *(_OWORD *)(v138 + 168) = 0u;
    *(_OWORD *)(v138 + 184) = 0u;
    *(_OWORD *)(v138 + 200) = 0u;
    *(_OWORD *)(v138 + 216) = 0u;
    *(_OWORD *)(v138 + 232) = 0u;
    *(_QWORD *)(v138 + 248) = 0;
    *(_OWORD *)(v138 + 56) = 0u;
    v139 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v138 + 56), 0);
    if ((_DWORD)v139)
      geo::read_write_lock::logFailure(v139, (uint64_t)"initialization", v140);
    v141 = malloc_create_zone(0, 0);
    *(_QWORD *)(v138 + 48) = v141;
    malloc_set_zone_name(v141, "VectorKitLabels");
    *(_QWORD *)(v138 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v138;
  }
  *((_QWORD *)&v163 + 1) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)&v164 = 0;
  DWORD2(v164) = 1065353216;
  v165[0] = 0uLL;
  {
    v142 = operator new();
    *(_QWORD *)(v142 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v142 + 24) = "VectorKitLabels";
    *(_OWORD *)(v142 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v142 = &off_1E42B5668;
    *(_QWORD *)(v142 + 8) = "VectorKitLabels";
    *(_OWORD *)(v142 + 72) = 0u;
    *(_OWORD *)(v142 + 88) = 0u;
    *(_OWORD *)(v142 + 104) = 0u;
    *(_OWORD *)(v142 + 120) = 0u;
    *(_OWORD *)(v142 + 136) = 0u;
    *(_OWORD *)(v142 + 152) = 0u;
    *(_OWORD *)(v142 + 168) = 0u;
    *(_OWORD *)(v142 + 184) = 0u;
    *(_OWORD *)(v142 + 200) = 0u;
    *(_OWORD *)(v142 + 216) = 0u;
    *(_OWORD *)(v142 + 232) = 0u;
    *(_QWORD *)(v142 + 248) = 0;
    *(_OWORD *)(v142 + 56) = 0u;
    v143 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v142 + 56), 0);
    if ((_DWORD)v143)
      geo::read_write_lock::logFailure(v143, (uint64_t)"initialization", v144);
    v145 = malloc_create_zone(0, 0);
    *(_QWORD *)(v142 + 48) = v145;
    malloc_set_zone_name(v145, "VectorKitLabels");
    *(_QWORD *)(v142 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v142;
  }
  v165[1] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    v146 = operator new();
    *(_QWORD *)(v146 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v146 + 24) = "VectorKitLabels";
    *(_OWORD *)(v146 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v146 = &off_1E42B5668;
    *(_QWORD *)(v146 + 8) = "VectorKitLabels";
    *(_OWORD *)(v146 + 72) = 0u;
    *(_OWORD *)(v146 + 88) = 0u;
    *(_OWORD *)(v146 + 104) = 0u;
    *(_OWORD *)(v146 + 120) = 0u;
    *(_OWORD *)(v146 + 136) = 0u;
    *(_OWORD *)(v146 + 152) = 0u;
    *(_OWORD *)(v146 + 168) = 0u;
    *(_OWORD *)(v146 + 184) = 0u;
    *(_OWORD *)(v146 + 200) = 0u;
    *(_OWORD *)(v146 + 216) = 0u;
    *(_OWORD *)(v146 + 232) = 0u;
    *(_QWORD *)(v146 + 248) = 0;
    *(_OWORD *)(v146 + 56) = 0u;
    v147 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v146 + 56), 0);
    if ((_DWORD)v147)
      geo::read_write_lock::logFailure(v147, (uint64_t)"initialization", v148);
    v149 = malloc_create_zone(0, 0);
    *(_QWORD *)(v146 + 48) = v149;
    malloc_set_zone_name(v149, "VectorKitLabels");
    *(_QWORD *)(v146 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v146;
  }
  v165[2] = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v165[3]) = 1065353216;
  *((_QWORD *)&v165[3] + 1) = 0;
  *(_QWORD *)&v165[4] = 0;
  DWORD2(v165[4]) = 1;
  BYTE12(v165[4]) = 0;
  v20 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v21 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v20 >> 47) ^ v20);
  v22 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
  v23 = *(_QWORD *)(a1 + 464);
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
      if (v22 >= v23)
        v2 = v22 % v23;
    }
    else
    {
      v2 = v22 & (v23 - 1);
    }
    v25 = *(uint64_t ***)(*(_QWORD *)(a1 + 456) + 8 * v2);
    if (v25)
    {
      v26 = *v25;
      if (*v25)
      {
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            v28 = v26[1];
            if (v28 == v22)
            {
              if (v26[2] == v5)
                goto LABEL_141;
            }
            else if ((v28 & (v23 - 1)) != v2)
            {
              goto LABEL_38;
            }
            v26 = (uint64_t *)*v26;
            if (!v26)
              goto LABEL_38;
          }
        }
        do
        {
          v27 = v26[1];
          if (v27 == v22)
          {
            if (v26[2] == v5)
            {
LABEL_141:
              md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)v150);
              ++*((_DWORD *)v26 + 108);
              goto LABEL_140;
            }
          }
          else
          {
            if (v27 >= v23)
              v27 %= v23;
            if (v27 != v2)
              break;
          }
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
    }
  }
LABEL_38:
  v29 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 488) + 16))(*(_QWORD *)(a1 + 488), 440, 8);
  v30 = v29;
  v166 = v29;
  v167 = a1 + 488;
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = v22;
  v31 = *(_QWORD *)&v150[0];
  *(_QWORD *)(v29 + 16) = v5;
  *(_QWORD *)(v29 + 24) = v31;
  v32 = *(_OWORD *)((char *)v150 + 8);
  v150[0] = 0uLL;
  *(_OWORD *)(v29 + 32) = v32;
  *(_OWORD *)(v29 + 48) = *(_OWORD *)((char *)&v150[1] + 8);
  v33 = *((_QWORD *)&v150[2] + 1);
  *(_QWORD *)(v29 + 64) = *((_QWORD *)&v150[2] + 1);
  *(_DWORD *)(v29 + 72) = v151;
  if (v33)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8);
    v35 = *(_QWORD *)(v29 + 32);
    if ((v35 & (v35 - 1)) != 0)
    {
      if (v34 >= v35)
        v34 %= v35;
    }
    else
    {
      v34 &= v35 - 1;
    }
    *(_QWORD *)(v31 + 8 * v34) = v29 + 48;
    *((_QWORD *)&v150[1] + 1) = 0;
    *((_QWORD *)&v150[2] + 1) = 0;
  }
  v36 = *((_QWORD *)&v151 + 1);
  v37 = v152;
  *((_QWORD *)&v151 + 1) = 0;
  *(_QWORD *)&v152 = 0;
  *(_QWORD *)(v29 + 80) = v36;
  *(_OWORD *)(v29 + 88) = v37;
  *(_OWORD *)(v29 + 104) = v153;
  v38 = v154;
  *(_QWORD *)(v29 + 120) = v154;
  *(_DWORD *)(v29 + 128) = DWORD2(v154);
  if (v38)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(v29 + 104) + 8);
    v40 = *(_QWORD *)(v29 + 88);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v39 >= v40)
        v39 %= v40;
    }
    else
    {
      v39 &= v40 - 1;
    }
    *(_QWORD *)(v36 + 8 * v39) = v29 + 104;
    *(_QWORD *)&v153 = 0;
    *(_QWORD *)&v154 = 0;
  }
  v41 = *(_QWORD *)&v155[0];
  v42 = *(_OWORD *)((char *)v155 + 8);
  v155[0] = 0uLL;
  *(_QWORD *)(v29 + 136) = v41;
  *(_OWORD *)(v29 + 144) = v42;
  *(_OWORD *)(v29 + 160) = *(_OWORD *)((char *)&v155[1] + 8);
  v43 = *((_QWORD *)&v155[2] + 1);
  *(_QWORD *)(v29 + 176) = *((_QWORD *)&v155[2] + 1);
  *(_DWORD *)(v29 + 184) = v156;
  if (v43)
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v29 + 160) + 8);
    v45 = *(_QWORD *)(v29 + 144);
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v44 >= v45)
        v44 %= v45;
    }
    else
    {
      v44 &= v45 - 1;
    }
    *(_QWORD *)(v41 + 8 * v44) = v29 + 160;
    *((_QWORD *)&v155[1] + 1) = 0;
    *((_QWORD *)&v155[2] + 1) = 0;
  }
  v46 = *((_QWORD *)&v156 + 1);
  v47 = v157;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  *(_QWORD *)(v29 + 192) = v46;
  *(_OWORD *)(v29 + 200) = v47;
  *(_OWORD *)(v29 + 216) = v158;
  v48 = v159;
  *(_QWORD *)(v29 + 232) = v159;
  *(_DWORD *)(v29 + 240) = DWORD2(v159);
  if (v48)
  {
    v49 = *(_QWORD *)(*(_QWORD *)(v29 + 216) + 8);
    v50 = *(_QWORD *)(v29 + 200);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v49 >= v50)
        v49 %= v50;
    }
    else
    {
      v49 &= v50 - 1;
    }
    *(_QWORD *)(v46 + 8 * v49) = v29 + 216;
    *(_QWORD *)&v158 = 0;
    *(_QWORD *)&v159 = 0;
  }
  v51 = *(_QWORD *)&v160[0];
  v52 = *(_OWORD *)((char *)v160 + 8);
  v160[0] = 0uLL;
  *(_QWORD *)(v29 + 248) = v51;
  *(_OWORD *)(v29 + 256) = v52;
  *(_OWORD *)(v29 + 272) = *(_OWORD *)((char *)&v160[1] + 8);
  v53 = *((_QWORD *)&v160[2] + 1);
  *(_QWORD *)(v29 + 288) = *((_QWORD *)&v160[2] + 1);
  *(_DWORD *)(v29 + 296) = v161;
  if (v53)
  {
    v54 = *(_QWORD *)(*(_QWORD *)(v29 + 272) + 8);
    v55 = *(_QWORD *)(v29 + 256);
    if ((v55 & (v55 - 1)) != 0)
    {
      if (v54 >= v55)
        v54 %= v55;
    }
    else
    {
      v54 &= v55 - 1;
    }
    *(_QWORD *)(v51 + 8 * v54) = v29 + 272;
    *((_QWORD *)&v160[1] + 1) = 0;
    *((_QWORD *)&v160[2] + 1) = 0;
  }
  v56 = *((_QWORD *)&v161 + 1);
  v57 = v162;
  *((_QWORD *)&v161 + 1) = 0;
  *(_QWORD *)&v162 = 0;
  *(_QWORD *)(v29 + 304) = v56;
  *(_OWORD *)(v29 + 312) = v57;
  *(_OWORD *)(v29 + 328) = v163;
  v58 = v164;
  *(_QWORD *)(v29 + 344) = v164;
  *(_DWORD *)(v29 + 352) = DWORD2(v164);
  if (v58)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v29 + 328) + 8);
    v60 = *(_QWORD *)(v29 + 312);
    if ((v60 & (v60 - 1)) != 0)
    {
      if (v59 >= v60)
        v59 %= v60;
    }
    else
    {
      v59 &= v60 - 1;
    }
    *(_QWORD *)(v56 + 8 * v59) = v29 + 328;
    *(_QWORD *)&v163 = 0;
    *(_QWORD *)&v164 = 0;
  }
  v61 = *(_QWORD *)&v165[0];
  v62 = *(_OWORD *)((char *)v165 + 8);
  v165[0] = 0uLL;
  *(_QWORD *)(v29 + 360) = v61;
  *(_OWORD *)(v29 + 368) = v62;
  *(_OWORD *)(v29 + 384) = *(_OWORD *)((char *)&v165[1] + 8);
  v63 = *((_QWORD *)&v165[2] + 1);
  *(_QWORD *)(v29 + 400) = *((_QWORD *)&v165[2] + 1);
  *(_DWORD *)(v29 + 408) = v165[3];
  if (v63)
  {
    v64 = *(_QWORD *)(*(_QWORD *)(v29 + 384) + 8);
    v65 = *(_QWORD *)(v29 + 368);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v64 >= v65)
        v64 %= v65;
    }
    else
    {
      v64 &= v65 - 1;
    }
    *(_QWORD *)(v61 + 8 * v64) = v29 + 384;
    *((_QWORD *)&v165[1] + 1) = 0;
    *((_QWORD *)&v165[2] + 1) = 0;
  }
  *(_OWORD *)(v29 + 416) = *(_OWORD *)((char *)&v165[3] + 8);
  *((_QWORD *)&v165[3] + 1) = 0;
  *(_QWORD *)&v165[4] = 0;
  *(_BYTE *)(v29 + 436) = BYTE12(v165[4]);
  *(_DWORD *)(v29 + 432) = DWORD2(v165[4]);
  v168 = 1;
  v66 = (float)(unint64_t)(*(_QWORD *)(a1 + 496) + 1);
  v67 = *(float *)(a1 + 504);
  if (!v23 || (float)(v67 * (float)v23) < v66)
  {
    v68 = v23 < 3 || (v23 & (v23 - 1)) != 0;
    v69 = v68 | (2 * v23);
    v70 = vcvtps_u32_f32(v66 / v67);
    if (v69 <= v70)
      prime = v70;
    else
      prime = v69;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(_QWORD *)(a1 + 464);
    if (prime <= v23)
    {
      if (prime >= v23)
        goto LABEL_117;
      v84 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 496) / *(float *)(a1 + 504));
      if (v23 < 3 || (v85 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v85.i16[0] = vaddlv_u8(v85), v85.u32[0] > 1uLL))
      {
        v84 = std::__next_prime(v84);
      }
      else
      {
        v86 = 1 << -(char)__clz(v84 - 1);
        if (v84 >= 2)
          v84 = v86;
      }
      if (prime <= v84)
        prime = v84;
      if (prime >= v23)
      {
        v23 = *(_QWORD *)(a1 + 464);
LABEL_117:
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23)
            v2 = v22 % v23;
          else
            v2 = v22;
        }
        else
        {
          v2 = (v23 - 1) & v22;
        }
        goto LABEL_130;
      }
      if (!prime)
      {
        v93 = *(_QWORD *)(a1 + 456);
        *(_QWORD *)(a1 + 456) = 0;
        if (v93)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 472) + 40))(*(_QWORD *)(a1 + 472), v93, 8 * *(_QWORD *)(a1 + 464));
        v23 = 0;
        *(_QWORD *)(a1 + 464) = 0;
        goto LABEL_117;
      }
    }
    v72 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 472) + 16))(*(_QWORD *)(a1 + 472), 8 * prime, 8);
    v73 = *(_QWORD *)(a1 + 456);
    *(_QWORD *)(a1 + 456) = v72;
    if (v73)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 472) + 40))(*(_QWORD *)(a1 + 472), v73, 8 * *(_QWORD *)(a1 + 464));
    v74 = 0;
    *(_QWORD *)(a1 + 464) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * v74++) = 0;
    while (prime != v74);
    v75 = *(_QWORD **)(a1 + 480);
    if (!v75)
    {
LABEL_116:
      v23 = prime;
      goto LABEL_117;
    }
    v76 = a1 + 480;
    v77 = v75[1];
    v78 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v79 = v77 & v78;
      *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * v79) = v76;
      for (i = (_QWORD *)*v75; *v75; i = (_QWORD *)*v75)
      {
        v81 = i[1] & v78;
        if (v81 == v79)
        {
          v75 = i;
        }
        else
        {
          v82 = *(_QWORD *)(a1 + 456);
          if (*(_QWORD *)(v82 + 8 * v81))
          {
            *v75 = *i;
            v83 = 8 * v81;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 456) + v83);
            **(_QWORD **)(*(_QWORD *)(a1 + 456) + v83) = i;
          }
          else
          {
            *(_QWORD *)(v82 + 8 * v81) = v75;
            v75 = i;
            v79 = v81;
          }
        }
      }
      goto LABEL_116;
    }
    if (v77 >= prime)
      v77 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * v77) = v76;
    v87 = (_QWORD *)*v75;
    if (!*v75)
      goto LABEL_116;
    while (1)
    {
      v89 = v87[1];
      if (v89 >= prime)
        v89 %= prime;
      if (v89 != v77)
      {
        v90 = *(_QWORD *)(a1 + 456);
        if (!*(_QWORD *)(v90 + 8 * v89))
        {
          *(_QWORD *)(v90 + 8 * v89) = v75;
          goto LABEL_121;
        }
        *v75 = *v87;
        v88 = 8 * v89;
        *v87 = **(_QWORD **)(*(_QWORD *)(a1 + 456) + v88);
        **(_QWORD **)(*(_QWORD *)(a1 + 456) + v88) = v87;
        v87 = v75;
      }
      v89 = v77;
LABEL_121:
      v75 = v87;
      v87 = (_QWORD *)*v87;
      v77 = v89;
      if (!v87)
        goto LABEL_116;
    }
  }
LABEL_130:
  v91 = *(uint64_t **)(*(_QWORD *)(a1 + 456) + 8 * v2);
  if (v91)
  {
    *(_QWORD *)v30 = *v91;
LABEL_138:
    *v91 = v30;
    goto LABEL_139;
  }
  *(_QWORD *)v30 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v30;
  *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * v2) = a1 + 480;
  if (*(_QWORD *)v30)
  {
    v92 = *(_QWORD *)(*(_QWORD *)v30 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v92 >= v23)
        v92 %= v23;
    }
    else
    {
      v92 &= v23 - 1;
    }
    v91 = (uint64_t *)(*(_QWORD *)(a1 + 456) + 8 * v92);
    goto LABEL_138;
  }
LABEL_139:
  ++*(_QWORD *)(a1 + 496);
  md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)v150);
LABEL_140:
  std::mutex::unlock((std::mutex *)a1);
}

void sub_19F2C27A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  uint64_t v10;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v10 - 88));
  md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void md::LabelFeaturePool::flushRemovedTiles(md::LabelFeaturePool *this)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  md::LabelFeaturePool *v3;
  unsigned __int8 v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t **v11;
  unint64_t **v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *i;
  _QWORD *j;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  NSObject *v58;
  std::string *p_p;
  NSObject *v60;
  int8x8_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::mutex *v76;
  _QWORD *v77;
  _QWORD *v78;
  geo::codec::VectorTile *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  geo::codec::VectorTile *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int8x8_t v119;
  unint64_t v120;
  uint8x8_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  geo::codec::VectorTile *v126;
  _QWORD *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _BYTE *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD **v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int64x2_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  int8x8_t v167;
  uint8x8_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  int v196;
  _QWORD *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t *p_shared_owners;
  uint64_t v204;
  _QWORD *v205;
  std::mutex *v206;
  geo::codec::VectorTile *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t *v215;
  unint64_t v216;
  _QWORD *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int8x8_t v236;
  unint64_t v237;
  uint8x8_t v238;
  unint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  geo::codec::VectorTile *v242;
  _QWORD *v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD **v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  std::mutex *v266;
  _QWORD *v267;
  _QWORD *v268;
  geo::codec::VectorTile *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int8x8_t v293;
  unint64_t v294;
  uint8x8_t v295;
  unint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  geo::codec::VectorTile *v299;
  _QWORD *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  md::LabelFeaturePool *v321;
  uint64_t v322;
  _QWORD *v323;
  std::mutex *v324;
  geo::codec::VectorTile *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  unint64_t v331;
  _QWORD *v332;
  unint64_t *v333;
  unint64_t v334;
  _QWORD *v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  int8x8_t v361;
  _QWORD *v362;
  _QWORD *v363;
  geo::codec::VectorTile *v364;
  _QWORD *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  uint8x8_t v371;
  uint64_t v372;
  _QWORD **v373;
  _QWORD *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int8x8_t v396;
  uint8x8_t v397;
  uint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  _QWORD *v406;
  std::mutex *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  unint64_t v414;
  _QWORD *v415;
  unint64_t *v416;
  unint64_t v417;
  _QWORD *v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int8x8_t v437;
  unint64_t v438;
  uint8x8_t v439;
  unint64_t v440;
  _QWORD *v441;
  _QWORD *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  _QWORD **v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _QWORD *v459;
  _QWORD *v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t **v465;
  unint64_t **v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  unint64_t **v482;
  unint64_t **v483;
  unint64_t **v484;
  __int128 v485;
  _QWORD *v486;
  md::LabelFeaturePool *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  geo::codec::VectorTile *v490;
  std::__shared_weak_count *v491;
  unint64_t **v492;
  __int128 v493;
  uint64_t v494;
  std::string __p;
  geo::codec::VectorTile *v496;
  std::__shared_weak_count *v497;
  _QWORD v498[3];
  _QWORD *v499;
  _QWORD v500[3];
  _QWORD *v501;
  _QWORD v502[3];
  _QWORD *v503;
  _BYTE buf[24];
  uint64_t v505;
  _QWORD v506[6];

  v506[3] = *MEMORY[0x1E0C80C00];
  v1 = (unsigned __int8 *)this + 632;
  v2 = atomic_load((unsigned __int8 *)this + 632);
  if ((v2 & 1) != 0)
  {
    v3 = this;
    std::mutex::lock((std::mutex *)this);
    v4 = atomic_load(v1);
    if ((v4 & 1) == 0)
      goto LABEL_870;
    v500[0] = &off_1E42CD3D0;
    v501 = v500;
    v498[0] = &off_1E42CD418;
    v499 = v498;
    v503 = v502;
    v502[0] = &off_1E42CD418;
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v487 = v3;
    v5 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsFlushTiles", (const char *)&unk_1A0189141, buf, 2u);
    }

    v6 = v499;
    if (v499 == v498)
    {
      v7 = 4;
      v6 = v498;
    }
    else
    {
      if (!v499)
        goto LABEL_12;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
    v8 = v501;
    if (v501 == v500)
    {
      v9 = 4;
      v8 = v500;
    }
    else
    {
      if (!v501)
        goto LABEL_17;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
    v492 = 0;
    v493 = 0uLL;
    {
      v472 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v472, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v494 = mdm::Allocator::instance(void)::alloc;
    std::mutex::lock((std::mutex *)((char *)v3 + 568));
    v11 = (unint64_t **)*((_QWORD *)v3 + 80);
    v492 = v11;
    v485 = *(_OWORD *)((char *)v3 + 648);
    *((_OWORD *)v3 + 40) = 0u;
    v493 = v485;
    *((_QWORD *)v3 + 82) = 0;
    atomic_store(0, (unsigned __int8 *)v3 + 632);
    std::mutex::unlock((std::mutex *)((char *)v3 + 568));
    v12 = (unint64_t **)v485;
    if (v11 == (unint64_t **)v485)
      goto LABEL_853;
    v13 = (_QWORD *)((char *)v3 + 456);
    v479 = (_QWORD *)((char *)v3 + 120);
    v480 = (_QWORD *)((char *)v3 + 64);
    v474 = (_QWORD *)((char *)v3 + 200);
    v475 = (_QWORD *)((char *)v3 + 256);
    v477 = (_QWORD *)((char *)v3 + 368);
    v478 = (_QWORD *)((char *)v3 + 424);
    v476 = (_QWORD *)((char *)v3 + 536);
    v473 = (_QWORD *)((char *)v3 + 312);
    v481 = (_QWORD *)((char *)v3 + 456);
    v482 = (unint64_t **)v485;
    while (1)
    {
      v14 = *v11;
      v15 = **v11;
      if (v15)
      {
        v16 = v14[1];
        v490 = (geo::codec::VectorTile *)**v11;
        v491 = (std::__shared_weak_count *)v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v13, v15);
        if (!v19)
          goto LABEL_353;
        v20 = *((_DWORD *)v19 + 108);
        v21 = __OFSUB__(v20--, 1);
        *((_DWORD *)v19 + 108) = v20;
        if (!((v20 < 0) ^ v21 | (v20 == 0)))
          goto LABEL_353;
        v483 = v11;
        v486 = v19;
        v22 = (_QWORD *)v19[41];
        if (!v22)
        {
LABEL_29:
          for (i = (_QWORD *)v486[6]; i; i = (_QWORD *)*i)
          {
            v177 = i + 2;
            v176 = i[2];
            if (v176)
              v178 = (_QWORD *)(v176 + 8);
            else
              v178 = 0;
            md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::removeTile(v178, (uint64_t *)&v490);
            if (*v177)
              v179 = *v177 + 8;
            else
              v179 = 0;
            (*(void (**)(_QWORD, geo::codec::VectorTile **))(**(_QWORD **)(v179 + 8) + 632))(*(_QWORD *)(v179 + 8), &v490);
            if (*v177)
              v180 = *v177 + 8;
            else
              v180 = 0;
            if (*(_QWORD *)(v180 + 24) == *(_QWORD *)(v180 + 32))
            {
              v181 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::find<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>(v480, i + 2);
              if (v181)
              {
                std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)buf, v480, v181);
                v182 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                {
                  if (buf[16])
                    geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(*(_QWORD *)buf + 16));
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)&buf[8] + 40))(**(_QWORD **)&buf[8], v182, 24);
                }
              }
            }
          }
          for (j = (_QWORD *)v486[13]; j; j = (_QWORD *)*j)
          {
            v184 = j + 2;
            v183 = j[2];
            if (v183)
              v185 = (_QWORD *)(v183 + 8);
            else
              v185 = 0;
            md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::removeTile(v185, (uint64_t *)&v490);
            if (*v184)
              v186 = *v184 + 8;
            else
              v186 = 0;
            (*(void (**)(_QWORD, geo::codec::VectorTile **))(**(_QWORD **)(v186 + 8) + 632))(*(_QWORD *)(v186 + 8), &v490);
            if (*v184)
              v187 = *v184 + 8;
            else
              v187 = 0;
            if (*(_QWORD *)(v187 + 24) == *(_QWORD *)(v187 + 32))
            {
              v188 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::find<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>(v479, j + 2);
              if (v188)
              {
                std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)buf, v479, v188);
                v189 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                {
                  if (buf[16])
                    geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(*(_QWORD *)buf + 16));
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)&buf[8] + 40))(**(_QWORD **)&buf[8], v189, 24);
                }
              }
            }
          }
          v25 = (_QWORD *)v486[27];
          if (!v25)
          {
LABEL_32:
            v26 = (_QWORD *)v486[20];
            if (!v26)
            {
LABEL_33:
              v27 = (_QWORD *)v486[48];
              if (!v27)
              {
LABEL_34:
                v28 = geo::codec::VectorTile::removedFeatureIDs(v490);
                v29 = *(unint64_t **)v28;
                v30 = *(unint64_t **)(v28 + 8);
                v3 = v487;
                if (*(unint64_t **)v28 != v30)
                {
                  v31 = *(int8x8_t *)((char *)v487 + 520);
                  if (v31)
                  {
LABEL_36:
                    v32 = *v29;
                    v33 = (uint8x8_t)vcnt_s8(v31);
                    v33.i16[0] = vaddlv_u8(v33);
                    if (v33.u32[0] > 1uLL)
                    {
                      v34 = *v29;
                      if (v32 >= *(_QWORD *)&v31)
                        v34 = v32 % *(_QWORD *)&v31;
                    }
                    else
                    {
                      v34 = (*(_QWORD *)&v31 - 1) & v32;
                    }
                    v35 = *(_QWORD ***)(*((_QWORD *)v487 + 64) + 8 * v34);
                    if (v35)
                    {
                      v36 = *v35;
                      if (*v35)
                      {
                        v37 = v29[1];
                        if (v33.u32[0] < 2uLL)
                        {
                          v38 = *(_QWORD *)&v31 - 1;
                          while (1)
                          {
                            v40 = v36[1];
                            if (v40 == v32)
                            {
                              if (v36[2] == v32)
                                goto LABEL_56;
                            }
                            else if ((v40 & v38) != v34)
                            {
                              goto LABEL_134;
                            }
                            v36 = (_QWORD *)*v36;
                            if (!v36)
                              goto LABEL_134;
                          }
                        }
                        do
                        {
                          v39 = v36[1];
                          if (v39 == v32)
                          {
                            if (v36[2] == v32)
                            {
LABEL_56:
                              v41 = (char *)v36[4];
                              v42 = (char *)v36[5];
                              v43 = v41;
                              if (v41 != v42)
                              {
                                v43 = (char *)v36[4];
                                do
                                {
                                  if (*(_QWORD *)v43 == v37)
                                    goto LABEL_61;
                                  v43 += 8;
                                }
                                while (v43 != v42);
                                v43 = (char *)v36[5];
                              }
LABEL_61:
                              if (v43 == v42)
                              {
                                v51 = v36[3];
                              }
                              else
                              {
                                if (v43 + 8 != v42)
                                  memmove(v43, v43 + 8, ((v42 - v43 - 16) & 0xFFFFFFFFFFFFFFF8) + 8);
                                v44 = v42 - 8;
                                v36[5] = v42 - 8;
                                if (v41 == v42 - 8)
                                {
                                  v51 = 0;
                                }
                                else
                                {
                                  v45 = v41 + 8;
                                  if (v41 + 8 != v44)
                                  {
                                    v46 = *(_QWORD *)v41;
                                    v47 = (unint64_t *)(v41 + 8);
                                    do
                                    {
                                      v49 = *v47++;
                                      v48 = v49;
                                      v50 = v46 >= v49;
                                      if (v46 <= v49)
                                        v46 = v48;
                                      if (!v50)
                                        v41 = v45;
                                      v45 = (char *)v47;
                                    }
                                    while (v47 != (unint64_t *)v44);
                                  }
                                  v51 = *(_QWORD *)v41;
                                }
                                if (v51 != v36[3])
                                {
                                  v36[3] = v51;
                                  v52 = v477;
                                  do
                                  {
                                    v52 = (_QWORD *)*v52;
                                    if (!v52)
                                      goto LABEL_86;
                                    v53 = v52[2];
                                    if (v53)
                                      v54 = v53 + 8;
                                    else
                                      v54 = 0;
                                  }
                                  while ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v54 + 8) + 160))(*(_QWORD *)(v54 + 8)) != v32);
                                  v55 = v52[2];
                                  if (v55)
                                    v56 = v55 + 8;
                                  else
                                    v56 = 0;
                                  md::PointLabelFeature::setPOIUpdateRemoveVersion(*(int64x2_t **)(v56 + 8), v51);
                                }
                              }
LABEL_86:
                              if (md::DebugStreamingPOIFeatureID)
                                v57 = md::DebugStreamingPOIFeatureID == v32;
                              else
                                v57 = 0;
                              if (v57)
                              {
                                if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
                                  dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
                                v58 = (id)GEOGetVectorKitStreamingPOILog_log;
                                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
                                {
                                  md::HighlightHelper::debugTileToString(&__p, (uint64_t)v490 + 4);
                                  p_p = &__p;
                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                  *(_DWORD *)buf = 136315906;
                                  *(_QWORD *)&buf[4] = p_p;
                                  *(_WORD *)&buf[12] = 2048;
                                  *(_QWORD *)&buf[14] = v32;
                                  *(_WORD *)&buf[22] = 2048;
                                  v505 = v37;
                                  LOWORD(v506[0]) = 2048;
                                  *(_QWORD *)((char *)v506 + 2) = v51;
                                  _os_log_impl(&dword_19F029000, v58, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::removeFeatureID, tile:%s featureID:%llu, removeVersion:%llu -> newVersion:%llu", buf, 0x2Au);
                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                }

                                if (v36[4] == v36[5])
                                {
                                  if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
                                    dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
                                  v60 = (id)GEOGetVectorKitStreamingPOILog_log;
                                  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                                  {
                                    *(_WORD *)buf = 0;
                                    _os_log_impl(&dword_19F029000, v60, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::clear removeFeatureID", buf, 2u);
                                  }

                                }
                              }
                              if (v36[4] == v36[5])
                              {
                                v61 = *(int8x8_t *)((char *)v487 + 520);
                                v62 = v36[1];
                                v63 = (uint8x8_t)vcnt_s8(v61);
                                v63.i16[0] = vaddlv_u8(v63);
                                if (v63.u32[0] > 1uLL)
                                {
                                  if (v62 >= *(_QWORD *)&v61)
                                    v62 %= *(_QWORD *)&v61;
                                }
                                else
                                {
                                  v62 &= *(_QWORD *)&v61 - 1;
                                }
                                v64 = *((_QWORD *)v487 + 64);
                                v65 = *(_QWORD **)(v64 + 8 * v62);
                                do
                                {
                                  v66 = v65;
                                  v65 = (_QWORD *)*v65;
                                }
                                while (v65 != v36);
                                if (v66 == v476)
                                  goto LABEL_122;
                                v67 = v66[1];
                                if (v63.u32[0] > 1uLL)
                                {
                                  if (v67 >= *(_QWORD *)&v61)
                                    v67 %= *(_QWORD *)&v61;
                                }
                                else
                                {
                                  v67 &= *(_QWORD *)&v61 - 1;
                                }
                                if (v67 != v62)
                                {
LABEL_122:
                                  if (!*v36)
                                    goto LABEL_123;
                                  v68 = *(_QWORD *)(*v36 + 8);
                                  if (v63.u32[0] > 1uLL)
                                  {
                                    if (v68 >= *(_QWORD *)&v61)
                                      v68 %= *(_QWORD *)&v61;
                                  }
                                  else
                                  {
                                    v68 &= *(_QWORD *)&v61 - 1;
                                  }
                                  if (v68 != v62)
LABEL_123:
                                    *(_QWORD *)(v64 + 8 * v62) = 0;
                                }
                                v69 = *v36;
                                if (*v36)
                                {
                                  v70 = *(_QWORD *)(v69 + 8);
                                  if (v63.u32[0] > 1uLL)
                                  {
                                    if (v70 >= *(_QWORD *)&v61)
                                      v70 %= *(_QWORD *)&v61;
                                  }
                                  else
                                  {
                                    v70 &= *(_QWORD *)&v61 - 1;
                                  }
                                  if (v70 != v62)
                                  {
                                    *(_QWORD *)(*((_QWORD *)v487 + 64) + 8 * v70) = v66;
                                    v69 = *v36;
                                  }
                                }
                                *v66 = v69;
                                *v36 = 0;
                                --*((_QWORD *)v487 + 69);
                                v71 = (void *)v36[4];
                                if (v71 != (void *)v36[6])
                                  free(v71);
                                (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v487 + 68) + 40))(*((_QWORD *)v487 + 68), v36, 80);
                              }
                              break;
                            }
                          }
                          else
                          {
                            if (v39 >= *(_QWORD *)&v31)
                              v39 %= *(_QWORD *)&v31;
                            if (v39 != v34)
                              break;
                          }
                          v36 = (_QWORD *)*v36;
                        }
                        while (v36);
                      }
                    }
LABEL_134:
                    while (1)
                    {
                      v29 += 2;
                      v3 = v487;
                      if (v29 == v30)
                        break;
                      v31 = *(int8x8_t *)((char *)v487 + 520);
                      if (v31)
                        goto LABEL_36;
                    }
                  }
                }
                v13 = v481;
                std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)buf, v481, v486);
                v202 = *(_QWORD *)buf;
                v12 = v482;
                v11 = v483;
                if (*(_QWORD *)buf)
                {
                  if (buf[16])
                    md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)(*(_QWORD *)buf + 24));
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)&buf[8] + 40))(**(_QWORD **)&buf[8], v202, 440);
                }
LABEL_353:
                v199 = v491;
                if (v491)
                {
                  p_shared_owners = (unint64_t *)&v491->__shared_owners_;
                  do
                    v201 = __ldaxr(p_shared_owners);
                  while (__stlxr(v201 - 1, p_shared_owners));
                  goto LABEL_356;
                }
                goto LABEL_20;
              }
              while (1)
              {
                v322 = v27[2];
                v323 = v322 ? (_QWORD *)(v322 + 8) : 0;
                v324 = (std::mutex *)(v323[1] + 8);
                std::mutex::lock(v324);
                v325 = v490;
                v326 = v491;
                if (!v491)
                  break;
                v327 = (unint64_t *)&v491->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = (_QWORD *)v323[3];
                v330 = (_QWORD *)v323[4];
                do
                  v331 = __ldxr(v327);
                while (__stxr(v331 + 1, v327));
                if (v329 == v330)
                  goto LABEL_604;
LABEL_602:
                while ((geo::codec::VectorTile *)v329[1] != v325)
                {
                  v329 += 3;
                  if (v329 == v330)
                    goto LABEL_604;
                }
                if (v329 == v330 || (v362 = v329 + 3, v329 + 3 == v330))
                {
                  v332 = v329;
                }
                else
                {
                  v332 = v329;
                  do
                  {
                    v363 = v362;
                    v365 = v329 + 4;
                    v364 = (geo::codec::VectorTile *)v329[4];
                    if (v364 != v325)
                    {
                      *v332 = *v363;
                      v366 = v329[5];
                      *v365 = 0;
                      v365[1] = 0;
                      v367 = (std::__shared_weak_count *)v332[2];
                      v332[1] = v364;
                      v332[2] = v366;
                      if (v367)
                      {
                        v368 = (unint64_t *)&v367->__shared_owners_;
                        do
                          v369 = __ldaxr(v368);
                        while (__stlxr(v369 - 1, v368));
                        if (!v369)
                        {
                          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                          std::__shared_weak_count::__release_weak(v367);
                        }
                      }
                      v332 += 3;
                    }
                    v362 = v363 + 3;
                    v329 = v363;
                  }
                  while (v363 + 3 != v330);
                }
LABEL_605:
                if (v326)
                {
                  v333 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v334 = __ldaxr(v333);
                  while (__stlxr(v334 - 1, v333));
                  if (!v334)
                  {
                    ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                    std::__shared_weak_count::__release_weak(v326);
                  }
                }
                v335 = (_QWORD *)v323[4];
                if (v332 != v335)
                {
                  while (v335 != v332)
                  {
                    v336 = (std::__shared_weak_count *)*(v335 - 1);
                    if (v336)
                    {
                      v337 = (unint64_t *)&v336->__shared_owners_;
                      do
                        v338 = __ldaxr(v337);
                      while (__stlxr(v338 - 1, v337));
                      if (!v338)
                      {
                        ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                        std::__shared_weak_count::__release_weak(v336);
                      }
                    }
                    v335 -= 3;
                  }
                  v323[4] = v332;
                }
                if ((geo::codec::VectorTile *)v323[8] == v325)
                {
                  v339 = (_QWORD *)v323[3];
                  if (v339 != v332)
                  {
                    v323[7] = *v339;
                    v341 = v339[1];
                    v340 = v339[2];
                    if (v340)
                    {
                      v342 = (unint64_t *)(v340 + 8);
                      do
                        v343 = __ldxr(v342);
                      while (__stxr(v343 + 1, v342));
                    }
                    v344 = (std::__shared_weak_count *)v323[9];
                    v323[8] = v341;
                    v323[9] = v340;
                    if (v344)
                    {
                      v345 = (unint64_t *)&v344->__shared_owners_;
                      do
                        v346 = __ldaxr(v345);
                      while (__stlxr(v346 - 1, v345));
                      if (!v346)
                      {
                        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                        std::__shared_weak_count::__release_weak(v344);
                      }
                    }
                  }
                }
                if (v323[3] == v323[4])
                {
                  v347 = v323[1];
                  *(_QWORD *)(v347 + 152) = 0;
                  atomic_store(1u, (unsigned __int8 *)(v347 + 145));
                  if (!v326)
                    goto LABEL_640;
                }
                else if (!v326)
                {
                  goto LABEL_640;
                }
                v348 = (unint64_t *)&v326->__shared_owners_;
                do
                  v349 = __ldaxr(v348);
                while (__stlxr(v349 - 1, v348));
                if (!v349)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
LABEL_640:
                std::mutex::unlock(v324);
                v350 = v27[2];
                if (v350)
                  v351 = v350 + 8;
                else
                  v351 = 0;
                (*(void (**)(_QWORD, geo::codec::VectorTile **))(**(_QWORD **)(v351 + 8) + 632))(*(_QWORD *)(v351 + 8), &v490);
                v352 = v27[2];
                if (v352)
                  v353 = v352 + 8;
                else
                  v353 = 0;
                if (*(_QWORD *)(v353 + 24) == *(_QWORD *)(v353 + 32))
                {
                  v354 = *(unsigned __int8 *)(v353 + 88);
                  v355 = *(_QWORD **)(v353 + 56);
                  v356 = v355[4];
                  if (v356)
                  {
                    v357 = 0;
                    v358 = 0;
                    do
                    {
                      v359 = geo::codec::vectorTransitLineAlongLink(v355, v357);
                      v360 = ((v358 << 6) - 0x61C8864680B583EBLL + (v358 >> 2) + *(_QWORD *)(v359 + 40)) ^ v358;
                      v358 = (*(unsigned __int8 *)(v359 + 73) - 0x61C8864680B583EBLL + (v360 << 6) + (v360 >> 2)) ^ v360;
                      ++v357;
                    }
                    while (v356 != v357);
                    v361 = *(int8x8_t *)((char *)v487 + 408);
                    if (!*(_QWORD *)&v361)
                      goto LABEL_592;
                  }
                  else
                  {
                    v358 = 0;
                    v361 = *(int8x8_t *)((char *)v487 + 408);
                    if (!*(_QWORD *)&v361)
                      goto LABEL_592;
                  }
                  v370 = (v358 - 0x61C8864680B583EBLL + (v354 << 6) + (v354 >> 2)) ^ v354;
                  v371 = (uint8x8_t)vcnt_s8(v361);
                  v371.i16[0] = vaddlv_u8(v371);
                  if (v371.u32[0] > 1uLL)
                  {
                    v372 = (v358 - 0x61C8864680B583EBLL + (v354 << 6) + (v354 >> 2)) ^ v354;
                    if (v370 >= *(_QWORD *)&v361)
                      v372 = v370 % *(_QWORD *)&v361;
                  }
                  else
                  {
                    v372 = v370 & (*(_QWORD *)&v361 - 1);
                  }
                  v373 = *(_QWORD ***)(*((_QWORD *)v487 + 50) + 8 * v372);
                  if (v373)
                  {
                    v374 = *v373;
                    if (*v373)
                    {
                      if (v371.u32[0] < 2uLL)
                      {
                        v375 = *(_QWORD *)&v361 - 1;
                        while (1)
                        {
                          v386 = v374[1];
                          if (v386 == v370)
                          {
                            v387 = v374[2];
                            if (v387)
                              v388 = v387 + 8;
                            else
                              v388 = 0;
                            v389 = v27[2];
                            if (*(unsigned __int8 *)(v388 + 88) == *(unsigned __int8 *)(v389 + 96))
                            {
                              v390 = *(_QWORD **)(v388 + 56);
                              v391 = *(_QWORD **)(v389 + 64);
                              v392 = v390[4];
                              if (v392 == v391[4])
                              {
                                if (!v392)
                                  goto LABEL_704;
                                v393 = 0;
                                while (1)
                                {
                                  v394 = geo::codec::vectorTransitLineAlongLink(v390, v393);
                                  v395 = geo::codec::vectorTransitLineAlongLink(v391, v393);
                                  if (*(_QWORD *)(v394 + 40) != *(_QWORD *)(v395 + 40)
                                    || *(unsigned __int8 *)(v394 + 73) != *(unsigned __int8 *)(v395 + 73))
                                  {
                                    break;
                                  }
                                  if (v392 == ++v393)
                                    goto LABEL_702;
                                }
                              }
                            }
                          }
                          else if ((v386 & v375) != v372)
                          {
                            goto LABEL_592;
                          }
                          v374 = (_QWORD *)*v374;
                          if (!v374)
                            goto LABEL_592;
                        }
                      }
                      do
                      {
                        v376 = v374[1];
                        if (v376 == v370)
                        {
                          v377 = v374[2];
                          if (v377)
                            v378 = v377 + 8;
                          else
                            v378 = 0;
                          v379 = v27[2];
                          if (*(unsigned __int8 *)(v378 + 88) == *(unsigned __int8 *)(v379 + 96))
                          {
                            v380 = *(_QWORD **)(v378 + 56);
                            v381 = *(_QWORD **)(v379 + 64);
                            v382 = v380[4];
                            if (v382 == v381[4])
                            {
                              if (!v382)
                              {
LABEL_704:
                                v396 = *(int8x8_t *)((char *)v487 + 408);
                                v397 = (uint8x8_t)vcnt_s8(v396);
                                v397.i16[0] = vaddlv_u8(v397);
                                if (v397.u32[0] > 1uLL)
                                {
                                  if (v370 >= *(_QWORD *)&v396)
                                    v370 %= *(_QWORD *)&v396;
                                }
                                else
                                {
                                  v370 &= *(_QWORD *)&v396 - 1;
                                }
                                v398 = *((_QWORD *)v487 + 50);
                                v399 = *(_QWORD **)(v398 + 8 * v370);
                                do
                                {
                                  v400 = v399;
                                  v399 = (_QWORD *)*v399;
                                }
                                while (v399 != v374);
                                if (v400 == v478)
                                  goto LABEL_721;
                                v401 = v400[1];
                                if (v397.u32[0] > 1uLL)
                                {
                                  if (v401 >= *(_QWORD *)&v396)
                                    v401 %= *(_QWORD *)&v396;
                                }
                                else
                                {
                                  v401 &= *(_QWORD *)&v396 - 1;
                                }
                                if (v401 != v370)
                                {
LABEL_721:
                                  if (!*v374)
                                    goto LABEL_722;
                                  v402 = *(_QWORD *)(*v374 + 8);
                                  if (v397.u32[0] > 1uLL)
                                  {
                                    if (v402 >= *(_QWORD *)&v396)
                                      v402 %= *(_QWORD *)&v396;
                                  }
                                  else
                                  {
                                    v402 &= *(_QWORD *)&v396 - 1;
                                  }
                                  if (v402 != v370)
LABEL_722:
                                    *(_QWORD *)(v398 + 8 * v370) = 0;
                                }
                                v403 = *v374;
                                if (*v374)
                                {
                                  v404 = *(_QWORD *)(v403 + 8);
                                  if (v397.u32[0] > 1uLL)
                                  {
                                    if (v404 >= *(_QWORD *)&v396)
                                      v404 %= *(_QWORD *)&v396;
                                  }
                                  else
                                  {
                                    v404 &= *(_QWORD *)&v396 - 1;
                                  }
                                  v321 = v487;
                                  if (v404 != v370)
                                  {
                                    *(_QWORD *)(*((_QWORD *)v487 + 50) + 8 * v404) = v400;
                                    v403 = *v374;
                                  }
                                }
                                else
                                {
                                  v321 = v487;
                                }
                                *v400 = v403;
                                *v374 = 0;
                                --*((_QWORD *)v321 + 55);
                                geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release(v374 + 2);
                                (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v321 + 54) + 40))(*((_QWORD *)v321 + 54), v374, 24);
                                break;
                              }
                              v383 = 0;
                              while (1)
                              {
                                v384 = geo::codec::vectorTransitLineAlongLink(v380, v383);
                                v385 = geo::codec::vectorTransitLineAlongLink(v381, v383);
                                if (*(_QWORD *)(v384 + 40) != *(_QWORD *)(v385 + 40)
                                  || *(unsigned __int8 *)(v384 + 73) != *(unsigned __int8 *)(v385 + 73))
                                {
                                  break;
                                }
                                if (v382 == ++v383)
                                {
LABEL_702:
                                  if (!v374)
                                    goto LABEL_592;
                                  v370 = v374[1];
                                  goto LABEL_704;
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          if (v376 >= *(_QWORD *)&v361)
                            v376 %= *(_QWORD *)&v361;
                          if (v376 != v372)
                            break;
                        }
                        v374 = (_QWORD *)*v374;
                      }
                      while (v374);
                    }
                  }
                }
LABEL_592:
                v27 = (_QWORD *)*v27;
                if (!v27)
                  goto LABEL_34;
              }
              v329 = (_QWORD *)v323[3];
              v330 = (_QWORD *)v323[4];
              if (v329 != v330)
                goto LABEL_602;
LABEL_604:
              v332 = v330;
              goto LABEL_605;
            }
            while (1)
            {
              v264 = v26[2];
              if (v264)
                v265 = (_QWORD *)(v264 + 8);
              else
                v265 = 0;
              v266 = (std::mutex *)(v265[1] + 8);
              std::mutex::lock(v266);
              v267 = (_QWORD *)v265[3];
              v268 = (_QWORD *)v265[4];
              v269 = v490;
              v270 = v491;
              *(_QWORD *)buf = v490;
              *(_QWORD *)&buf[8] = v491;
              if (v491)
              {
                v271 = (unint64_t *)&v491->__shared_owners_;
                do
                  v272 = __ldxr(v271);
                while (__stxr(v272 + 1, v271));
                v267 = (_QWORD *)v265[3];
                v268 = (_QWORD *)v265[4];
                do
                  v273 = __ldxr(v271);
                while (__stxr(v273 + 1, v271));
              }
              if (v267 == v268)
              {
LABEL_493:
                v274 = v268;
              }
              else
              {
                while ((geo::codec::VectorTile *)v267[1] != v269)
                {
                  v267 += 3;
                  if (v267 == v268)
                    goto LABEL_493;
                }
                if (v267 == v268 || (v297 = v267 + 3, v267 + 3 == v268))
                {
                  v274 = v267;
                }
                else
                {
                  v274 = v267;
                  do
                  {
                    v298 = v297;
                    v300 = v267 + 4;
                    v299 = (geo::codec::VectorTile *)v267[4];
                    if (v299 != v269)
                    {
                      *v274 = *v298;
                      v301 = v267[5];
                      *v300 = 0;
                      v300[1] = 0;
                      v302 = (std::__shared_weak_count *)v274[2];
                      v274[1] = v299;
                      v274[2] = v301;
                      if (v302)
                      {
                        v303 = (unint64_t *)&v302->__shared_owners_;
                        do
                          v304 = __ldaxr(v303);
                        while (__stlxr(v304 - 1, v303));
                        if (!v304)
                        {
                          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                          std::__shared_weak_count::__release_weak(v302);
                        }
                      }
                      v274 += 3;
                    }
                    v297 = v298 + 3;
                    v267 = v298;
                  }
                  while (v298 + 3 != v268);
                }
              }
              if (v270)
              {
                v275 = (unint64_t *)&v270->__shared_owners_;
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                  std::__shared_weak_count::__release_weak(v270);
                }
              }
              std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase((uint64_t)(v265 + 3), (uint64_t)v274, v265[4]);
              if (v265[8] == *(_QWORD *)buf)
              {
                v278 = (_QWORD *)v265[3];
                if (v278 != (_QWORD *)v265[4])
                {
                  v265[7] = *v278;
                  v280 = v278[1];
                  v279 = v278[2];
                  if (v279)
                  {
                    v281 = (unint64_t *)(v279 + 8);
                    do
                      v282 = __ldxr(v281);
                    while (__stxr(v282 + 1, v281));
                  }
                  v283 = (std::__shared_weak_count *)v265[9];
                  v265[8] = v280;
                  v265[9] = v279;
                  if (v283)
                  {
                    v284 = (unint64_t *)&v283->__shared_owners_;
                    do
                      v285 = __ldaxr(v284);
                    while (__stlxr(v285 - 1, v284));
                    if (!v285)
                    {
                      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                      std::__shared_weak_count::__release_weak(v283);
                    }
                  }
                }
              }
              if (v265[3] == v265[4])
              {
                v286 = v265[1];
                *(_QWORD *)(v286 + 152) = 0;
                atomic_store(1u, (unsigned __int8 *)(v286 + 145));
                v277 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
LABEL_513:
                  v287 = (unint64_t *)&v277->__shared_owners_;
                  do
                    v288 = __ldaxr(v287);
                  while (__stlxr(v288 - 1, v287));
                  if (!v288)
                  {
                    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                    std::__shared_weak_count::__release_weak(v277);
                  }
                }
              }
              else
              {
                v277 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                  goto LABEL_513;
              }
              std::mutex::unlock(v266);
              v289 = v26[2];
              if (v289)
                v290 = v289 + 8;
              else
                v290 = 0;
              (*(void (**)(_QWORD, geo::codec::VectorTile **))(**(_QWORD **)(v290 + 8) + 632))(*(_QWORD *)(v290 + 8), &v490);
              v291 = v26[2];
              if (v291)
                v292 = v291 + 8;
              else
                v292 = 0;
              if (*(_QWORD *)(v292 + 24) == *(_QWORD *)(v292 + 32))
              {
                v293 = *(int8x8_t *)((char *)v487 + 184);
                if (v293)
                {
                  v294 = (*(_QWORD *)(*(_QWORD *)(v292 + 56) + 40)
                        - 0x61C8864680B583EBLL
                        + ((unint64_t)*(unsigned __int8 *)(v292 + 88) << 6)
                        + ((unint64_t)*(unsigned __int8 *)(v292 + 88) >> 2)) ^ *(unsigned __int8 *)(v292 + 88);
                  v295 = (uint8x8_t)vcnt_s8(v293);
                  v295.i16[0] = vaddlv_u8(v295);
                  if (v295.u32[0] > 1uLL)
                  {
                    v296 = v294;
                    if (v294 >= *(_QWORD *)&v293)
                      v296 = v294 % *(_QWORD *)&v293;
                  }
                  else
                  {
                    v296 = v294 & (*(_QWORD *)&v293 - 1);
                  }
                  v305 = *((_QWORD *)v487 + 22);
                  v306 = *(_QWORD ***)(v305 + 8 * v296);
                  if (v306)
                  {
                    v307 = *v306;
                    if (*v306)
                    {
                      v308 = *(_QWORD *)&v293 - 1;
                      if (v295.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v309 = v307[1];
                          if (v309 == v294)
                          {
                            v310 = v307[2];
                            if (v310)
                              v311 = v310 + 8;
                            else
                              v311 = 0;
                            if (*(unsigned __int8 *)(v311 + 88) == *(unsigned __int8 *)(v291 + 96)
                              && *(_QWORD *)(*(_QWORD *)(v311 + 56) + 40) == *(_QWORD *)(*(_QWORD *)(v291 + 64) + 40))
                            {
                              goto LABEL_553;
                            }
                          }
                          else if ((v309 & v308) != v296)
                          {
                            goto LABEL_481;
                          }
                          v307 = (_QWORD *)*v307;
                          if (!v307)
                            goto LABEL_481;
                        }
                      }
                      do
                      {
                        v312 = v307[1];
                        if (v312 == v294)
                        {
                          v313 = v307[2];
                          if (v313)
                            v314 = v313 + 8;
                          else
                            v314 = 0;
                          if (*(unsigned __int8 *)(v314 + 88) == *(unsigned __int8 *)(v291 + 96)
                            && *(_QWORD *)(*(_QWORD *)(v314 + 56) + 40) == *(_QWORD *)(*(_QWORD *)(v291 + 64) + 40))
                          {
LABEL_553:
                            if (v295.u32[0] > 1uLL)
                            {
                              if (v294 >= *(_QWORD *)&v293)
                                v294 %= *(_QWORD *)&v293;
                            }
                            else
                            {
                              v294 &= v308;
                            }
                            v315 = *(_QWORD **)(v305 + 8 * v294);
                            do
                            {
                              v316 = v315;
                              v315 = (_QWORD *)*v315;
                            }
                            while (v315 != v307);
                            if (v316 == v474)
                              goto LABEL_581;
                            v317 = v316[1];
                            if (v295.u32[0] > 1uLL)
                            {
                              if (v317 >= *(_QWORD *)&v293)
                                v317 %= *(_QWORD *)&v293;
                            }
                            else
                            {
                              v317 &= v308;
                            }
                            if (v317 != v294)
                            {
LABEL_581:
                              if (!*v307)
                                goto LABEL_582;
                              v318 = *(_QWORD *)(*v307 + 8);
                              if (v295.u32[0] > 1uLL)
                              {
                                if (v318 >= *(_QWORD *)&v293)
                                  v318 %= *(_QWORD *)&v293;
                              }
                              else
                              {
                                v318 &= v308;
                              }
                              if (v318 != v294)
LABEL_582:
                                *(_QWORD *)(v305 + 8 * v294) = 0;
                            }
                            v319 = *v307;
                            if (*v307)
                            {
                              v320 = *(_QWORD *)(v319 + 8);
                              if (v295.u32[0] > 1uLL)
                              {
                                if (v320 >= *(_QWORD *)&v293)
                                  v320 %= *(_QWORD *)&v293;
                              }
                              else
                              {
                                v320 &= v308;
                              }
                              if (v320 != v294)
                              {
                                *(_QWORD *)(*((_QWORD *)v487 + 22) + 8 * v320) = v316;
                                v319 = *v307;
                              }
                            }
                            *v316 = v319;
                            *v307 = 0;
                            --*((_QWORD *)v487 + 27);
                            geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v307 + 2);
                            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v487 + 26) + 40))(*((_QWORD *)v487 + 26), v307, 24);
                            break;
                          }
                        }
                        else
                        {
                          if (v312 >= *(_QWORD *)&v293)
                            v312 %= *(_QWORD *)&v293;
                          if (v312 != v296)
                            break;
                        }
                        v307 = (_QWORD *)*v307;
                      }
                      while (v307);
                    }
                  }
                }
              }
LABEL_481:
              v26 = (_QWORD *)*v26;
              if (!v26)
                goto LABEL_33;
            }
          }
          while (1)
          {
            v204 = v25[2];
            v205 = v204 ? (_QWORD *)(v204 + 8) : 0;
            v206 = (std::mutex *)(v205[1] + 8);
            std::mutex::lock(v206);
            v207 = v490;
            v208 = v491;
            if (!v491)
              break;
            v209 = (unint64_t *)&v491->__shared_owners_;
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
            v211 = (_QWORD *)v205[3];
            v212 = (_QWORD *)v205[4];
            do
              v213 = __ldxr(v209);
            while (__stxr(v213 + 1, v209));
            if (v211 == v212)
              goto LABEL_371;
LABEL_369:
            while ((geo::codec::VectorTile *)v211[1] != v207)
            {
              v211 += 3;
              if (v211 == v212)
                goto LABEL_371;
            }
            if (v211 == v212 || (v240 = v211 + 3, v211 + 3 == v212))
            {
              v214 = v211;
            }
            else
            {
              v214 = v211;
              do
              {
                v241 = v240;
                v243 = v211 + 4;
                v242 = (geo::codec::VectorTile *)v211[4];
                if (v242 != v207)
                {
                  *v214 = *v241;
                  v244 = v211[5];
                  *v243 = 0;
                  v243[1] = 0;
                  v245 = (std::__shared_weak_count *)v214[2];
                  v214[1] = v242;
                  v214[2] = v244;
                  if (v245)
                  {
                    v246 = (unint64_t *)&v245->__shared_owners_;
                    do
                      v247 = __ldaxr(v246);
                    while (__stlxr(v247 - 1, v246));
                    if (!v247)
                    {
                      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                      std::__shared_weak_count::__release_weak(v245);
                    }
                  }
                  v214 += 3;
                }
                v240 = v241 + 3;
                v211 = v241;
              }
              while (v241 + 3 != v212);
            }
LABEL_372:
            if (v208)
            {
              v215 = (unint64_t *)&v208->__shared_owners_;
              do
                v216 = __ldaxr(v215);
              while (__stlxr(v216 - 1, v215));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
            }
            v217 = (_QWORD *)v205[4];
            if (v214 != v217)
            {
              while (v217 != v214)
              {
                v218 = (std::__shared_weak_count *)*(v217 - 1);
                if (v218)
                {
                  v219 = (unint64_t *)&v218->__shared_owners_;
                  do
                    v220 = __ldaxr(v219);
                  while (__stlxr(v220 - 1, v219));
                  if (!v220)
                  {
                    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                    std::__shared_weak_count::__release_weak(v218);
                  }
                }
                v217 -= 3;
              }
              v205[4] = v214;
            }
            if ((geo::codec::VectorTile *)v205[8] == v207)
            {
              v221 = (_QWORD *)v205[3];
              if (v221 != v214)
              {
                v205[7] = *v221;
                v223 = v221[1];
                v222 = v221[2];
                if (v222)
                {
                  v224 = (unint64_t *)(v222 + 8);
                  do
                    v225 = __ldxr(v224);
                  while (__stxr(v225 + 1, v224));
                }
                v226 = (std::__shared_weak_count *)v205[9];
                v205[8] = v223;
                v205[9] = v222;
                if (v226)
                {
                  v227 = (unint64_t *)&v226->__shared_owners_;
                  do
                    v228 = __ldaxr(v227);
                  while (__stlxr(v228 - 1, v227));
                  if (!v228)
                  {
                    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                    std::__shared_weak_count::__release_weak(v226);
                  }
                }
              }
            }
            if (v205[3] == v205[4])
            {
              v229 = v205[1];
              *(_QWORD *)(v229 + 152) = 0;
              atomic_store(1u, (unsigned __int8 *)(v229 + 145));
              if (v208)
              {
LABEL_403:
                v230 = (unint64_t *)&v208->__shared_owners_;
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
            }
            else if (v208)
            {
              goto LABEL_403;
            }
            std::mutex::unlock(v206);
            v232 = v25[2];
            if (v232)
              v233 = v232 + 8;
            else
              v233 = 0;
            (*(void (**)(_QWORD, geo::codec::VectorTile **))(**(_QWORD **)(v233 + 8) + 632))(*(_QWORD *)(v233 + 8), &v490);
            v234 = v25[2];
            if (v234)
              v235 = v234 + 8;
            else
              v235 = 0;
            if (*(_QWORD *)(v235 + 24) == *(_QWORD *)(v235 + 32))
            {
              v236 = *(int8x8_t *)((char *)v487 + 240);
              if (v236)
              {
                v237 = (((unint64_t)*(unsigned __int8 *)(v235 + 88) << 6)
                      - 0x61C8864680B583EBLL
                      + ((unint64_t)*(unsigned __int8 *)(v235 + 88) >> 2)
                      + *(int *)(*(_QWORD *)(v235 + 56) + 24)) ^ *(unsigned __int8 *)(v235 + 88);
                v238 = (uint8x8_t)vcnt_s8(v236);
                v238.i16[0] = vaddlv_u8(v238);
                if (v238.u32[0] > 1uLL)
                {
                  v239 = v237;
                  if (v237 >= *(_QWORD *)&v236)
                    v239 = v237 % *(_QWORD *)&v236;
                }
                else
                {
                  v239 = v237 & (*(_QWORD *)&v236 - 1);
                }
                v248 = *((_QWORD *)v487 + 29);
                v249 = *(_QWORD ***)(v248 + 8 * v239);
                if (v249)
                {
                  v250 = *v249;
                  if (*v249)
                  {
                    v251 = *(_QWORD *)&v236 - 1;
                    if (v238.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v252 = v250[1];
                        if (v252 == v237)
                        {
                          v253 = v250[2];
                          if (v253)
                            v254 = v253 + 8;
                          else
                            v254 = 0;
                          if (*(unsigned __int8 *)(v254 + 88) == *(unsigned __int8 *)(v234 + 96)
                            && *(_DWORD *)(*(_QWORD *)(v254 + 56) + 24) == *(_DWORD *)(*(_QWORD *)(v234 + 64) + 24))
                          {
                            goto LABEL_443;
                          }
                        }
                        else if ((v252 & v251) != v239)
                        {
                          goto LABEL_359;
                        }
                        v250 = (_QWORD *)*v250;
                        if (!v250)
                          goto LABEL_359;
                      }
                    }
                    do
                    {
                      v255 = v250[1];
                      if (v255 == v237)
                      {
                        v256 = v250[2];
                        if (v256)
                          v257 = v256 + 8;
                        else
                          v257 = 0;
                        if (*(unsigned __int8 *)(v257 + 88) == *(unsigned __int8 *)(v234 + 96)
                          && *(_DWORD *)(*(_QWORD *)(v257 + 56) + 24) == *(_DWORD *)(*(_QWORD *)(v234 + 64) + 24))
                        {
LABEL_443:
                          if (v238.u32[0] > 1uLL)
                          {
                            if (v237 >= *(_QWORD *)&v236)
                              v237 %= *(_QWORD *)&v236;
                          }
                          else
                          {
                            v237 &= v251;
                          }
                          v258 = *(_QWORD **)(v248 + 8 * v237);
                          do
                          {
                            v259 = v258;
                            v258 = (_QWORD *)*v258;
                          }
                          while (v258 != v250);
                          if (v259 == v475)
                            goto LABEL_471;
                          v260 = v259[1];
                          if (v238.u32[0] > 1uLL)
                          {
                            if (v260 >= *(_QWORD *)&v236)
                              v260 %= *(_QWORD *)&v236;
                          }
                          else
                          {
                            v260 &= v251;
                          }
                          if (v260 != v237)
                          {
LABEL_471:
                            if (!*v250)
                              goto LABEL_472;
                            v261 = *(_QWORD *)(*v250 + 8);
                            if (v238.u32[0] > 1uLL)
                            {
                              if (v261 >= *(_QWORD *)&v236)
                                v261 %= *(_QWORD *)&v236;
                            }
                            else
                            {
                              v261 &= v251;
                            }
                            if (v261 != v237)
LABEL_472:
                              *(_QWORD *)(v248 + 8 * v237) = 0;
                          }
                          v262 = *v250;
                          if (*v250)
                          {
                            v263 = *(_QWORD *)(v262 + 8);
                            if (v238.u32[0] > 1uLL)
                            {
                              if (v263 >= *(_QWORD *)&v236)
                                v263 %= *(_QWORD *)&v236;
                            }
                            else
                            {
                              v263 &= v251;
                            }
                            if (v263 != v237)
                            {
                              *(_QWORD *)(*((_QWORD *)v487 + 29) + 8 * v263) = v259;
                              v262 = *v250;
                            }
                          }
                          *v259 = v262;
                          *v250 = 0;
                          --*((_QWORD *)v487 + 34);
                          geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v250 + 2);
                          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v487 + 33) + 40))(*((_QWORD *)v487 + 33), v250, 24);
                          break;
                        }
                      }
                      else
                      {
                        if (v255 >= *(_QWORD *)&v236)
                          v255 %= *(_QWORD *)&v236;
                        if (v255 != v239)
                          break;
                      }
                      v250 = (_QWORD *)*v250;
                    }
                    while (v250);
                  }
                }
              }
            }
LABEL_359:
            v25 = (_QWORD *)*v25;
            if (!v25)
              goto LABEL_32;
          }
          v211 = (_QWORD *)v205[3];
          v212 = (_QWORD *)v205[4];
          if (v211 != v212)
            goto LABEL_369;
LABEL_371:
          v214 = v212;
          goto LABEL_372;
        }
LABEL_142:
        v74 = v22[2];
        if (v74)
          v75 = (_QWORD *)(v74 + 8);
        else
          v75 = 0;
        v76 = (std::mutex *)(v75[1] + 8);
        std::mutex::lock(v76);
        v77 = (_QWORD *)v75[3];
        v78 = (_QWORD *)v75[4];
        v79 = v490;
        v80 = v491;
        *(_QWORD *)buf = v490;
        *(_QWORD *)&buf[8] = v491;
        if (v491)
        {
          v81 = (unint64_t *)&v491->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
          v77 = (_QWORD *)v75[3];
          v78 = (_QWORD *)v75[4];
          do
            v83 = __ldxr(v81);
          while (__stxr(v83 + 1, v81));
        }
        if (v77 == v78)
        {
LABEL_153:
          v84 = v78;
        }
        else
        {
          while ((geo::codec::VectorTile *)v77[1] != v79)
          {
            v77 += 3;
            if (v77 == v78)
              goto LABEL_153;
          }
          if (v77 == v78 || (v124 = v77 + 3, v77 + 3 == v78))
          {
            v84 = v77;
          }
          else
          {
            v84 = v77;
            do
            {
              v125 = v124;
              v127 = v77 + 4;
              v126 = (geo::codec::VectorTile *)v77[4];
              if (v126 != v79)
              {
                *v84 = *v125;
                v128 = v77[5];
                *v127 = 0;
                v127[1] = 0;
                v129 = (std::__shared_weak_count *)v84[2];
                v84[1] = v126;
                v84[2] = v128;
                if (v129)
                {
                  v130 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                v84 += 3;
              }
              v124 = v125 + 3;
              v77 = v125;
            }
            while (v125 + 3 != v78);
          }
        }
        if (v80)
        {
          v85 = (unint64_t *)&v80->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase((uint64_t)(v75 + 3), (uint64_t)v84, v75[4]);
        if (v75[8] == *(_QWORD *)buf)
        {
          v88 = (_QWORD *)v75[3];
          if (v88 != (_QWORD *)v75[4])
          {
            v75[7] = *v88;
            v90 = v88[1];
            v89 = v88[2];
            if (v89)
            {
              v91 = (unint64_t *)(v89 + 8);
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            v93 = (std::__shared_weak_count *)v75[9];
            v75[8] = v90;
            v75[9] = v89;
            if (v93)
            {
              v94 = (unint64_t *)&v93->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
          }
        }
        if (v75[3] == v75[4])
        {
          v96 = v75[1];
          *(_QWORD *)(v96 + 152) = 0;
          atomic_store(1u, (unsigned __int8 *)(v96 + 145));
          v87 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_177;
        }
        else
        {
          v87 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_177;
        }
        v97 = (unint64_t *)&v87->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
LABEL_177:
        std::mutex::unlock(v76);
        v99 = v22[2];
        if (v99)
          v100 = v99 + 8;
        else
          v100 = 0;
        v101 = *(_QWORD *)(v100 + 8);
        v102 = v490;
        v103 = v491;
        v496 = v490;
        v497 = v491;
        if (v491)
        {
          v104 = (unint64_t *)&v491->__shared_owners_;
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        std::mutex::lock((std::mutex *)(v101 + 248));
        v107 = *(_QWORD *)(v101 + 328);
        v106 = *(_QWORD *)(v101 + 336);
        if (v107 >= v106)
        {
          v112 = *(_QWORD *)(v101 + 320);
          v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v112) >> 4);
          v114 = v113 + 1;
          if (v113 + 1 > 0x555555555555555)
            abort();
          v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v112) >> 4);
          if (2 * v115 > v114)
            v114 = 2 * v115;
          if (v115 >= 0x2AAAAAAAAAAAAAALL)
            v116 = 0x555555555555555;
          else
            v116 = v114;
          v506[0] = v101 + 344;
          if (v116)
            v117 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v101 + 344) + 16))(*(_QWORD *)(v101 + 344), 48 * v116, 8);
          else
            v117 = 0;
          v132 = (_BYTE *)(v117 + 48 * v113);
          *(_QWORD *)buf = v117;
          *(_QWORD *)&buf[8] = v132;
          *(_QWORD *)&buf[16] = v132;
          v505 = v117 + 48 * v116;
          if (v117)
          {
            if (v103)
            {
              v133 = (unint64_t *)&v103->__shared_owners_;
              do
                v134 = __ldxr(v133);
              while (__stxr(v134 + 1, v133));
              *v132 = 1;
              v135 = (_QWORD *)(v117 + 48 * v113);
              v135[1] = 0;
              v135[2] = v102;
              v135[3] = v103;
              do
                v136 = __ldxr(v133);
              while (__stxr(v136 + 1, v133));
              v137 = v117 + 48 * v113;
              *(_BYTE *)(v137 + 32) = 0;
              *(_QWORD *)(v137 + 40) = 0;
              do
                v138 = __ldaxr(v133);
              while (__stlxr(v138 - 1, v133));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            else
            {
              *v132 = 1;
              v153 = v117 + 48 * v113;
              *(_QWORD *)(v153 + 8) = 0;
              *(_QWORD *)(v153 + 16) = v102;
              *(_QWORD *)(v153 + 24) = 0;
              *(_BYTE *)(v153 + 32) = 0;
              *(_QWORD *)(v153 + 40) = 0;
            }
          }
          v155 = *(_QWORD *)(v101 + 320);
          v154 = *(_QWORD *)(v101 + 328);
          v156 = *(_QWORD *)&buf[8];
          v157 = *(_QWORD *)&buf[16];
          if (v154 == v155)
          {
            v161 = vdupq_n_s64(v154);
          }
          else
          {
            v158 = 0;
            do
            {
              v159 = v156 + v158;
              v160 = v154 + v158;
              *(_BYTE *)(v159 - 48) = *(_BYTE *)(v154 + v158 - 48);
              *(_QWORD *)(v159 - 40) = 0;
              *(_OWORD *)(v159 - 40) = *(_OWORD *)(v154 + v158 - 40);
              *(_QWORD *)(v160 - 40) = 0;
              *(_QWORD *)(v159 - 24) = *(_QWORD *)(v154 + v158 - 24);
              *(_QWORD *)(v160 - 32) = 0;
              *(_QWORD *)(v160 - 24) = 0;
              *(_OWORD *)(v159 - 16) = *(_OWORD *)(v154 + v158 - 16);
              v158 -= 48;
            }
            while (v154 + v158 != v155);
            v156 += v158;
            v161 = *(int64x2_t *)(v101 + 320);
          }
          v139 = v157 + 48;
          *(_QWORD *)(v101 + 320) = v156;
          *(_QWORD *)(v101 + 328) = v157 + 48;
          *(int64x2_t *)&buf[8] = v161;
          v162 = *(_QWORD *)(v101 + 336);
          *(_QWORD *)(v101 + 336) = v505;
          v505 = v162;
          *(_QWORD *)buf = v161.i64[0];
          std::__split_buffer<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator> &>::__destruct_at_end[abi:nn180100]((uint64_t)buf, v161.i64[0]);
          if (*(_QWORD *)buf)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)v506[0] + 40))(*(_QWORD *)v506[0], *(_QWORD *)buf, v505 - *(_QWORD *)buf);
        }
        else
        {
          if (v107)
          {
            if (v103)
            {
              v108 = (unint64_t *)&v103->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
              *(_BYTE *)v107 = 1;
              *(_QWORD *)(v107 + 8) = 0;
              *(_QWORD *)(v107 + 16) = v102;
              *(_QWORD *)(v107 + 24) = v103;
              do
                v110 = __ldxr(v108);
              while (__stxr(v110 + 1, v108));
              *(_BYTE *)(v107 + 32) = 0;
              *(_QWORD *)(v107 + 40) = 0;
              do
                v111 = __ldaxr(v108);
              while (__stlxr(v111 - 1, v108));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            else
            {
              *(_BYTE *)v107 = 1;
              *(_QWORD *)(v107 + 8) = 0;
              *(_QWORD *)(v107 + 16) = v102;
              *(_QWORD *)(v107 + 24) = 0;
              *(_BYTE *)(v107 + 32) = 0;
              *(_QWORD *)(v107 + 40) = 0;
            }
          }
          v139 = v107 + 48;
        }
        *(_QWORD *)(v101 + 328) = v139;
        atomic_store(1u, (unsigned __int8 *)(v101 + 312));
        std::mutex::unlock((std::mutex *)(v101 + 248));
        v163 = v497;
        if (v497)
        {
          v164 = (unint64_t *)&v497->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        v72 = v22[2];
        if (v72)
          v73 = v72 + 8;
        else
          v73 = 0;
        if (*(_QWORD *)(v73 + 24) != *(_QWORD *)(v73 + 32))
          goto LABEL_141;
        v118 = md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(*(_QWORD **)(v73 + 56), *(_BYTE *)(v73 + 88));
        v119 = *(int8x8_t *)((char *)v487 + 352);
        if (!*(_QWORD *)&v119)
          goto LABEL_141;
        v120 = v118;
        v121 = (uint8x8_t)vcnt_s8(v119);
        v121.i16[0] = vaddlv_u8(v121);
        v122 = v121.u32[0];
        if (v121.u32[0] > 1uLL)
        {
          v123 = v118;
          if (v118 >= *(_QWORD *)&v119)
            v123 = v118 % *(_QWORD *)&v119;
        }
        else
        {
          v123 = (*(_QWORD *)&v119 - 1) & v118;
        }
        v140 = *(_QWORD ***)(*((_QWORD *)v487 + 43) + 8 * v123);
        if (!v140)
          goto LABEL_141;
        v141 = *v140;
        if (!*v140)
          goto LABEL_141;
        while (1)
        {
          v142 = v141[1];
          if (v142 == v120)
          {
            v143 = v141[2];
            if (v143)
              v144 = v143 + 8;
            else
              v144 = 0;
            v145 = v22[2];
            v146 = *(unsigned __int8 *)(v144 + 88);
            v147 = *(unsigned __int8 *)(v145 + 96);
            v148 = v146 - v147;
            if (v146 == v147)
            {
              v149 = *(uint64_t **)(v144 + 56);
              v150 = v149[5];
              if (!v150)
                v150 = v149[6];
              v151 = *(uint64_t **)(v145 + 64);
              v152 = v151[5];
              if (v152)
              {
                if (v150 != v152)
                  goto LABEL_236;
              }
              else if (v150 != v151[6])
              {
                goto LABEL_236;
              }
              if (v149[15] != v151[15] || v149[16] != v151[16] || v149[17] != v151[17] || v149[18] != v151[18])
                goto LABEL_236;
              if (v150)
              {
                v166 = v141 + 2;
LABEL_274:
                v167 = *(int8x8_t *)((char *)v487 + 352);
                v168 = (uint8x8_t)vcnt_s8(v167);
                v168.i16[0] = vaddlv_u8(v168);
                if (v168.u32[0] > 1uLL)
                {
                  if (v120 >= *(_QWORD *)&v167)
                    v120 %= *(_QWORD *)&v167;
                }
                else
                {
                  v120 &= *(_QWORD *)&v167 - 1;
                }
                v169 = *((_QWORD *)v487 + 43);
                v170 = *(_QWORD **)(v169 + 8 * v120);
                do
                {
                  v171 = v170;
                  v170 = (_QWORD *)*v170;
                }
                while (v170 != v141);
                if (v171 == v477)
                  goto LABEL_291;
                v172 = v171[1];
                if (v168.u32[0] > 1uLL)
                {
                  if (v172 >= *(_QWORD *)&v167)
                    v172 %= *(_QWORD *)&v167;
                }
                else
                {
                  v172 &= *(_QWORD *)&v167 - 1;
                }
                if (v172 != v120)
                {
LABEL_291:
                  if (!*v141)
                    goto LABEL_292;
                  v173 = *(_QWORD *)(*v141 + 8);
                  if (v168.u32[0] > 1uLL)
                  {
                    if (v173 >= *(_QWORD *)&v167)
                      v173 %= *(_QWORD *)&v167;
                  }
                  else
                  {
                    v173 &= *(_QWORD *)&v167 - 1;
                  }
                  if (v173 != v120)
LABEL_292:
                    *(_QWORD *)(v169 + 8 * v120) = 0;
                }
                v174 = *v141;
                if (*v141)
                {
                  v175 = *(_QWORD *)(v174 + 8);
                  if (v168.u32[0] > 1uLL)
                  {
                    if (v175 >= *(_QWORD *)&v167)
                      v175 %= *(_QWORD *)&v167;
                  }
                  else
                  {
                    v175 &= *(_QWORD *)&v167 - 1;
                  }
                  if (v175 != v120)
                  {
                    *(_QWORD *)(*((_QWORD *)v487 + 43) + 8 * v175) = v171;
                    v174 = *v141;
                  }
                }
                *v171 = v174;
                *v141 = 0;
                --*((_QWORD *)v487 + 48);
                geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v166);
                (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v487 + 47) + 40))(*((_QWORD *)v487 + 47), v141, 24);
LABEL_141:
                v22 = (_QWORD *)*v22;
                if (!v22)
                  goto LABEL_29;
                goto LABEL_142;
              }
              v148 = geo::codec::featureStyleAttributesCompare(v149 + 3, v151 + 3);
            }
            if (!v148)
            {
              v166 = v141 + 2;
              v120 = v141[1];
              goto LABEL_274;
            }
          }
          else
          {
            if (v122 > 1)
            {
              if (v142 >= *(_QWORD *)&v119)
                v142 %= *(_QWORD *)&v119;
            }
            else
            {
              v142 &= *(_QWORD *)&v119 - 1;
            }
            if (v142 != v123)
              goto LABEL_141;
          }
LABEL_236:
          v141 = (_QWORD *)*v141;
          if (!v141)
            goto LABEL_141;
        }
      }
      v190 = v14[2];
      v191 = v14[3];
      v488 = v190;
      v489 = (std::__shared_weak_count *)v191;
      if (v191)
      {
        v192 = (unint64_t *)(v191 + 8);
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
      }
      v194 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v13, v190);
      if (v194)
      {
        v195 = v194;
        v196 = *((_DWORD *)v194 + 108);
        v21 = __OFSUB__(v196--, 1);
        *((_DWORD *)v194 + 108) = v196;
        if ((v196 < 0) ^ v21 | (v196 == 0))
          break;
      }
LABEL_345:
      v199 = v489;
      if (v489)
      {
        v200 = (unint64_t *)&v489->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
LABEL_356:
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
LABEL_20:
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v492;
LABEL_853:
        if (v11)
        {
          v465 = (unint64_t **)v493;
          v466 = v11;
          if ((unint64_t **)v493 != v11)
          {
            do
            {
              v467 = (std::__shared_weak_count *)*(v465 - 1);
              if (v467)
              {
                v468 = (unint64_t *)&v467->__shared_owners_;
                do
                  v469 = __ldaxr(v468);
                while (__stlxr(v469 - 1, v468));
                if (!v469)
                {
                  ((void (*)(std::__shared_weak_count *, unint64_t **))v467->__on_zero_shared)(v467, v466);
                  std::__shared_weak_count::__release_weak(v467);
                }
              }
              v465 -= 2;
            }
            while (v465 != v11);
            v466 = v492;
          }
          *(_QWORD *)&v493 = v11;
          (*(void (**)(uint64_t, unint64_t **, _QWORD))(*(_QWORD *)v494 + 40))(v494, v466, *((_QWORD *)&v493 + 1) - (_QWORD)v466);
        }
        if (!v503)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        (*(void (**)(_QWORD *))(*v503 + 48))(v503);
        v470 = v503;
        if (v503 == v502)
        {
          v471 = 4;
          v470 = v502;
          goto LABEL_869;
        }
        if (v503)
        {
          v471 = 5;
LABEL_869:
          (*(void (**)(void))(*v470 + 8 * v471))();
        }
LABEL_870:
        std::mutex::unlock((std::mutex *)v3);
        return;
      }
    }
    v484 = v11;
    v197 = (_QWORD *)v194[34];
    if (!v197)
    {
LABEL_341:
      v13 = v481;
      std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)buf, v481, v195);
      v198 = *(_QWORD *)buf;
      v12 = v482;
      v11 = v484;
      if (*(_QWORD *)buf)
      {
        if (buf[16])
          md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)(*(_QWORD *)buf + 24));
        (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)&buf[8] + 40))(**(_QWORD **)&buf[8], v198, 440);
      }
      goto LABEL_345;
    }
    while (1)
    {
      v405 = v197[2];
      v406 = v405 ? (_QWORD *)(v405 + 8) : 0;
      v407 = (std::mutex *)(v406[1] + 8);
      std::mutex::lock(v407);
      v408 = v488;
      v409 = v489;
      if (!v489)
        break;
      v410 = (unint64_t *)&v489->__shared_owners_;
      do
        v411 = __ldxr(v410);
      while (__stxr(v411 + 1, v410));
      v412 = (_QWORD *)v406[3];
      v413 = (_QWORD *)v406[4];
      do
        v414 = __ldxr(v410);
      while (__stxr(v414 + 1, v410));
      if (v412 == v413)
        goto LABEL_743;
LABEL_741:
      while (v412[1] != v408)
      {
        v412 += 3;
        if (v412 == v413)
          goto LABEL_743;
      }
      if (v412 == v413 || (v441 = v412 + 3, v412 + 3 == v413))
      {
        v415 = v412;
      }
      else
      {
        v415 = v412;
        do
        {
          v442 = v441;
          v444 = v412 + 4;
          v443 = v412[4];
          if (v443 != v408)
          {
            *v415 = *v442;
            v445 = v412[5];
            *v444 = 0;
            v444[1] = 0;
            v446 = (std::__shared_weak_count *)v415[2];
            v415[1] = v443;
            v415[2] = v445;
            if (v446)
            {
              v447 = (unint64_t *)&v446->__shared_owners_;
              do
                v448 = __ldaxr(v447);
              while (__stlxr(v448 - 1, v447));
              if (!v448)
              {
                ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                std::__shared_weak_count::__release_weak(v446);
              }
            }
            v415 += 3;
          }
          v441 = v442 + 3;
          v412 = v442;
        }
        while (v442 + 3 != v413);
      }
LABEL_744:
      if (v409)
      {
        v416 = (unint64_t *)&v409->__shared_owners_;
        do
          v417 = __ldaxr(v416);
        while (__stlxr(v417 - 1, v416));
        if (!v417)
        {
          ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
          std::__shared_weak_count::__release_weak(v409);
        }
      }
      v418 = (_QWORD *)v406[4];
      if (v415 != v418)
      {
        while (v418 != v415)
        {
          v419 = (std::__shared_weak_count *)*(v418 - 1);
          if (v419)
          {
            v420 = (unint64_t *)&v419->__shared_owners_;
            do
              v421 = __ldaxr(v420);
            while (__stlxr(v421 - 1, v420));
            if (!v421)
            {
              ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
              std::__shared_weak_count::__release_weak(v419);
            }
          }
          v418 -= 3;
        }
        v406[4] = v415;
      }
      if (v406[8] == v408)
      {
        v422 = (_QWORD *)v406[3];
        if (v422 != v415)
        {
          v406[7] = *v422;
          v424 = v422[1];
          v423 = v422[2];
          if (v423)
          {
            v425 = (unint64_t *)(v423 + 8);
            do
              v426 = __ldxr(v425);
            while (__stxr(v426 + 1, v425));
          }
          v427 = (std::__shared_weak_count *)v406[9];
          v406[8] = v424;
          v406[9] = v423;
          if (v427)
          {
            v428 = (unint64_t *)&v427->__shared_owners_;
            do
              v429 = __ldaxr(v428);
            while (__stlxr(v429 - 1, v428));
            if (!v429)
            {
              ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
              std::__shared_weak_count::__release_weak(v427);
            }
          }
        }
      }
      if (v406[3] == v406[4])
      {
        v430 = v406[1];
        *(_QWORD *)(v430 + 152) = 0;
        atomic_store(1u, (unsigned __int8 *)(v430 + 145));
        if (v409)
        {
LABEL_775:
          v431 = (unint64_t *)&v409->__shared_owners_;
          do
            v432 = __ldaxr(v431);
          while (__stlxr(v432 - 1, v431));
          if (!v432)
          {
            ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
            std::__shared_weak_count::__release_weak(v409);
          }
        }
      }
      else if (v409)
      {
        goto LABEL_775;
      }
      std::mutex::unlock(v407);
      v433 = v197[2];
      if (v433)
        v434 = v433 + 8;
      else
        v434 = 0;
      (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(v434 + 8) + 640))(*(_QWORD *)(v434 + 8), &v488);
      v435 = v197[2];
      if (v435)
        v436 = v435 + 8;
      else
        v436 = 0;
      v3 = v487;
      if (*(_QWORD *)(v436 + 24) == *(_QWORD *)(v436 + 32))
      {
        v437 = *(int8x8_t *)((char *)v487 + 296);
        if (v437)
        {
          v438 = (*(_QWORD *)(*(_QWORD *)(v436 + 56) + 16)
                - 0x61C8864680B583EBLL
                + ((unint64_t)*(unsigned __int8 *)(v436 + 88) << 6)
                + ((unint64_t)*(unsigned __int8 *)(v436 + 88) >> 2)) ^ *(unsigned __int8 *)(v436 + 88);
          v439 = (uint8x8_t)vcnt_s8(v437);
          v439.i16[0] = vaddlv_u8(v439);
          if (v439.u32[0] > 1uLL)
          {
            v440 = v438;
            if (v438 >= *(_QWORD *)&v437)
              v440 = v438 % *(_QWORD *)&v437;
          }
          else
          {
            v440 = v438 & (*(_QWORD *)&v437 - 1);
          }
          v449 = *((_QWORD *)v487 + 36);
          v450 = *(_QWORD ***)(v449 + 8 * v440);
          if (v450)
          {
            v451 = *v450;
            if (*v450)
            {
              v452 = *(_QWORD *)&v437 - 1;
              if (v439.u32[0] < 2uLL)
              {
                while (1)
                {
                  v453 = v451[1];
                  if (v453 == v438)
                  {
                    v454 = v451[2];
                    if (v454)
                      v455 = v454 + 8;
                    else
                      v455 = 0;
                    if (*(unsigned __int8 *)(v455 + 88) == *(unsigned __int8 *)(v435 + 96)
                      && *(_QWORD *)(*(_QWORD *)(v455 + 56) + 16) == *(_QWORD *)(*(_QWORD *)(v435 + 64) + 16))
                    {
                      goto LABEL_815;
                    }
                  }
                  else if ((v453 & v452) != v440)
                  {
                    goto LABEL_731;
                  }
                  v451 = (_QWORD *)*v451;
                  if (!v451)
                    goto LABEL_731;
                }
              }
              do
              {
                v456 = v451[1];
                if (v456 == v438)
                {
                  v457 = v451[2];
                  if (v457)
                    v458 = v457 + 8;
                  else
                    v458 = 0;
                  if (*(unsigned __int8 *)(v458 + 88) == *(unsigned __int8 *)(v435 + 96)
                    && *(_QWORD *)(*(_QWORD *)(v458 + 56) + 16) == *(_QWORD *)(*(_QWORD *)(v435 + 64) + 16))
                  {
LABEL_815:
                    if (v439.u32[0] > 1uLL)
                    {
                      if (v438 >= *(_QWORD *)&v437)
                        v438 %= *(_QWORD *)&v437;
                    }
                    else
                    {
                      v438 &= v452;
                    }
                    v459 = *(_QWORD **)(v449 + 8 * v438);
                    do
                    {
                      v460 = v459;
                      v459 = (_QWORD *)*v459;
                    }
                    while (v459 != v451);
                    if (v460 == v473)
                      goto LABEL_843;
                    v461 = v460[1];
                    if (v439.u32[0] > 1uLL)
                    {
                      if (v461 >= *(_QWORD *)&v437)
                        v461 %= *(_QWORD *)&v437;
                    }
                    else
                    {
                      v461 &= v452;
                    }
                    if (v461 != v438)
                    {
LABEL_843:
                      if (!*v451)
                        goto LABEL_844;
                      v462 = *(_QWORD *)(*v451 + 8);
                      if (v439.u32[0] > 1uLL)
                      {
                        if (v462 >= *(_QWORD *)&v437)
                          v462 %= *(_QWORD *)&v437;
                      }
                      else
                      {
                        v462 &= v452;
                      }
                      if (v462 != v438)
LABEL_844:
                        *(_QWORD *)(v449 + 8 * v438) = 0;
                    }
                    v463 = *v451;
                    if (*v451)
                    {
                      v464 = *(_QWORD *)(v463 + 8);
                      if (v439.u32[0] > 1uLL)
                      {
                        if (v464 >= *(_QWORD *)&v437)
                          v464 %= *(_QWORD *)&v437;
                      }
                      else
                      {
                        v464 &= v452;
                      }
                      if (v464 != v438)
                      {
                        *(_QWORD *)(*((_QWORD *)v487 + 36) + 8 * v464) = v460;
                        v463 = *v451;
                      }
                    }
                    *v460 = v463;
                    *v451 = 0;
                    --*((_QWORD *)v487 + 41);
                    geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(v451 + 2);
                    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v487 + 40) + 40))(*((_QWORD *)v487 + 40), v451, 24);
                    break;
                  }
                }
                else
                {
                  if (v456 >= *(_QWORD *)&v437)
                    v456 %= *(_QWORD *)&v437;
                  if (v456 != v440)
                    break;
                }
                v451 = (_QWORD *)*v451;
              }
              while (v451);
            }
          }
        }
      }
LABEL_731:
      v197 = (_QWORD *)*v197;
      if (!v197)
        goto LABEL_341;
    }
    v412 = (_QWORD *)v406[3];
    v413 = (_QWORD *)v406[4];
    if (v412 != v413)
      goto LABEL_741;
LABEL_743:
    v415 = v413;
    goto LABEL_744;
  }
}

void sub_19F2C53A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::mutex *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a30);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v30 - 192));
  std::mutex::unlock(a25);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo,gdc::ManagedObjectHolder<md::MapDataType> *>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x30uLL);
  *v16 = 0;
  v16[1] = v7;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v16[4] = *(_QWORD *)(a3 + 16);
  v16[5] = a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v7 = v4;
  }
  else
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v9)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v26 + 8 * v7) = v15;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F2C581C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A4FB8;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::OverlayTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2C5984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::MercatorCameraContext::MercatorCameraContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  v10 = *(_OWORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 240);
  v12 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  v13 = *(_OWORD *)(a2 + 288);
  v14 = *(_OWORD *)(a2 + 304);
  v15 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 304) = v14;
  *(_OWORD *)(a1 + 320) = v15;
  *(_OWORD *)(a1 + 288) = v13;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_BYTE *)(a1 + 344) = 1;
  }
  *(_BYTE *)(a1 + 360) = 0;
  if (*(_BYTE *)(a2 + 360))
  {
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_BYTE *)(a1 + 360) = 1;
  }
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  v16 = *(_OWORD *)(a2 + 408);
  v17 = *(_OWORD *)(a2 + 424);
  v18 = *(_OWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 424) = v17;
  *(_OWORD *)(a1 + 440) = v18;
  *(_OWORD *)(a1 + 408) = v16;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  geo::View<double>::View(a1 + 504, (__int128 *)(a2 + 504), (double *)(a2 + 560), (__int128 *)(a2 + 688), (_WORD *)(a2 + 960), *(_DWORD *)(a2 + 964), *(double *)(a2 + 944));
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  memcpy((void *)(a1 + 992), (const void *)(a2 + 992), 0x1A0uLL);
  v19 = *(_OWORD *)(a2 + 1472);
  v20 = *(_OWORD *)(a2 + 1488);
  v21 = *(_OWORD *)(a2 + 1504);
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  *(_OWORD *)(a1 + 1504) = v21;
  *(_OWORD *)(a1 + 1488) = v20;
  *(_OWORD *)(a1 + 1472) = v19;
  v22 = *(_OWORD *)(a2 + 1408);
  v23 = *(_OWORD *)(a2 + 1424);
  v24 = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(_OWORD *)(a1 + 1440) = v24;
  *(_OWORD *)(a1 + 1424) = v23;
  *(_OWORD *)(a1 + 1408) = v22;
  v25 = *(_OWORD *)(a2 + 1552);
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1552) = v25;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1576) = 0;
  if (a1 != a2)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1568, *(_QWORD *)(a2 + 1568), *(char **)(a2 + 1576), (uint64_t)(*(_QWORD *)(a2 + 1576) - *(_QWORD *)(a2 + 1568)) >> 4);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  v26 = *(_OWORD *)(a2 + 1600);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a2 + 1616);
  *(_OWORD *)(a1 + 1600) = v26;
  v27 = *(_OWORD *)(a2 + 1624);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a2 + 1640);
  *(_OWORD *)(a1 + 1624) = v27;
  *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
  *(_BYTE *)(a1 + 1664) = *(_BYTE *)(a2 + 1664);
  return a1;
}

void sub_19F2C5C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 1576) = v4;
    operator delete(v4);
    if (!*(_BYTE *)(v1 + 360))
    {
LABEL_3:
      if (!*(_BYTE *)(v1 + 344))
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!*(_BYTE *)(v1 + 360))
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v1 + 360) = 0;
  if (!*(_BYTE *)(v1 + 344))
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_BYTE *)(v1 + 344) = 0;
  _Unwind_Resume(exception_object);
}

void md::VenueLayerDataSource::createLayerData(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  std::__sp_mut *sp_mut;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  geo::codec::VectorTile **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  geo::codec::VectorTile **v30;
  void *v31;
  void *v32;
  unsigned int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  char **v44;
  int v45;
  gss::Allocator *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  uint64_t **v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  id v68;
  VKVenueGroup *v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  id *v81;
  id *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  void *v86;
  char *v87;
  char *v88;
  void **v89;
  void *v90;
  void *v91;
  id *v92;
  id *v93;
  void (**v94)(id *);
  int64_t v95;
  unint64_t v96;
  unsigned __int16 *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  uint64_t **v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t *v115;
  float v116;
  _BOOL8 v117;
  unint64_t v118;
  unint64_t v119;
  size_t prime;
  void *v121;
  unint64_t v122;
  uint8x8_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  id v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 *v134;
  uint64_t v135;
  void *v136;
  void *v137;
  char *v138;
  void *v139;
  char *v140;
  void (***v141)(char *);
  void (**v142)(char *);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  char *v150;
  void (***v151)(char *);
  void (**v152)(char *);
  uint64_t v153;
  uint64_t v154;
  uint64_t i;
  void *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  int *v169;
  char *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  int64x2_t v182;
  void *v183;
  char *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  float v192;
  double v193;
  double v194;
  char *v195;
  double v196;
  double v197;
  uint64_t v198;
  unint64_t v199;
  double *v200;
  double *v201;
  char *v202;
  _QWORD *v203;
  uint64_t v204;
  void *v205;
  unint64_t v206;
  char *v207;
  double *v208;
  double *v209;
  double *v210;
  unint64_t j;
  float *v212;
  double v213;
  double v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  double *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  const char **v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  const char **v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float v232;
  float v233;
  int64_t v234;
  char *v235;
  char *v236;
  size_t v237;
  float64x2_t v238;
  char *v239;
  double v240;
  double v241;
  double v242;
  const char *v243;
  const char *v244;
  const char *v245;
  void **v246;
  char *v247;
  size_t v248;
  void *v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  size_t v253;
  void *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  void **v258;
  size_t v259;
  void *v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  void **v264;
  size_t v265;
  void *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  void **v270;
  _QWORD *v271;
  _QWORD *v272;
  int64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  void *v279;
  char *v280;
  _QWORD *v281;
  __int128 v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  void *v290;
  double v291;
  double v292;
  geo::codec::VectorTile **v293;
  char *v294;
  uint64_t v295;
  float64x2_t v296;
  char *v297;
  unint64_t v298;
  char *v299;
  _QWORD *v300;
  char *v301;
  uint64_t v302;
  void *v303;
  unint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  unint64_t v309;
  float *v310;
  double v311;
  double v312;
  char *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  void *v321;
  char *v322;
  char *v323;
  void **v324;
  uint64_t v325;
  NSObject *v326;
  char *v327;
  void *v328;
  char *v329;
  unint64_t v330;
  uint64_t v331;
  int v332;
  int v333;
  unint64_t v334;
  unsigned int v335;
  uint64_t v336;
  char *v337;
  float v338;
  float v339;
  char *v340;
  double v341;
  double v342;
  __int128 *v343;
  uint64_t *v344;
  char *v345;
  __int16 *v346;
  char *v347;
  float *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  __int16 v352;
  char v353;
  double v354;
  __int128 v355;
  char *v356;
  void *v357;
  size_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  char *v366;
  uint64_t v367;
  __int16 v368;
  char *v369;
  char v370;
  double v371;
  __int128 v372;
  void *v373;
  char *v374;
  size_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  char *v384;
  int64x2_t v385;
  char *v386;
  char *v387;
  void **v388;
  uint64_t v389;
  void *v390;
  void *v391;
  void **v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  void *v398;
  unint64_t v399;
  char *v400;
  uint64_t v401;
  _QWORD *v402;
  char *v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  _BYTE *v414;
  char *v415;
  unint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  _OWORD *v420;
  char *v421;
  uint64_t v422;
  __int128 v423;
  uint64_t v424;
  char *v425;
  md::VenueLevel *v426;
  unint64_t v427;
  _QWORD *v428;
  md::VenueLevel **v429;
  const char **v430;
  const char **v431;
  __int16 *v432;
  char *v433;
  float *v434;
  md::VenueLevel *v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  char *v441;
  md::VenueLevel *v442;
  md::VenueLevel *v443;
  md::VenueLevel *v444;
  md::VenueLevel *v445;
  md::VenueLevel *v446;
  md::VenueLevel *v447;
  uint64_t v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  uint64_t v453;
  __int128 v454;
  char *v455;
  char *v456;
  __int128 v457;
  char *v458;
  char *v459;
  __int128 v460;
  char *v461;
  char *v462;
  __int128 v463;
  md::VenueLevel *v464;
  md::VenueLevel *v465;
  char *v466;
  uint64_t v467;
  char *v468;
  char *v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  _QWORD *v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  _BYTE *v478;
  char *v479;
  unint64_t v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  _OWORD *v484;
  __int128 *v485;
  uint64_t v486;
  __int128 v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  _QWORD *v495;
  unint64_t v496;
  _QWORD *v497;
  _QWORD *v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  uint64_t v505;
  char *v506;
  _QWORD *v507;
  _QWORD *v508;
  void *v509;
  char *v510;
  uint64_t v511;
  char *v512;
  char *v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  _QWORD *v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  _BYTE *v522;
  char *v523;
  unint64_t v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  _OWORD *v528;
  __int128 *v529;
  uint64_t v530;
  __int128 v531;
  uint64_t v532;
  uint64_t v533;
  char *v534;
  uint64_t v535;
  _QWORD *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  unint64_t v540;
  char *v541;
  char *v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  _BYTE *v548;
  _QWORD *v549;
  unint64_t v550;
  uint64_t v551;
  _OWORD *v552;
  char *v553;
  uint64_t v554;
  __int128 v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  void **v559;
  void **v560;
  int64_t v561;
  unint64_t v562;
  char *v563;
  void **v564;
  char *v565;
  uint64_t v566;
  _BYTE *v567;
  int64_t v568;
  unint64_t v569;
  char *v570;
  _QWORD *v571;
  char *v572;
  unint64_t *v573;
  unint64_t v574;
  char *v575;
  unint64_t *v576;
  unint64_t v577;
  _QWORD *v578;
  _QWORD *v579;
  int64_t v580;
  _QWORD *v581;
  _QWORD *v582;
  uint64_t v583;
  unint64_t *v584;
  unint64_t v585;
  int v586;
  double v587;
  long double v588;
  long double v589;
  long double v590;
  long double v591;
  long double v592;
  long double v593;
  long double v594;
  double v595;
  long double v596;
  long double v597;
  _QWORD *v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  char *v602;
  char *v603;
  void (***v604)(char *);
  void (**v605)(char *);
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  unint64_t *v609;
  unint64_t v610;
  void *v613;
  uint64_t v614;
  unint64_t v615;
  id v616;
  unint64_t v617;
  uint64_t v618;
  id v619;
  uint64_t v620;
  char *__s;
  char *__sa;
  unint64_t __sb;
  uint64_t v624;
  float64x2_t v625;
  int64x2_t *v626;
  uint64_t v627;
  uint64_t v628;
  void *v629;
  id v630;
  char *v631;
  void *v632;
  char *v633;
  char *v634;
  char *v635;
  unsigned int *v636;
  void **v637;
  geo::codec::VectorTile **v638;
  __int128 v639;
  char *v640;
  char *v641[2];
  char *v642;
  __int128 v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  int v649;
  void *v650;
  void *v651;
  uint64_t v652;
  char *v653;
  std::__shared_weak_count *v654;
  void *v655[2];
  uint64_t v656;
  void *v657[2];
  char *v658;
  void *v659[3];
  uint64_t v660;
  std::__shared_weak_count *v661;
  int v662[2];
  std::__shared_weak_count *v663;
  uint64_t v664;
  char *v665;
  std::__shared_weak_count *v666;
  unint64_t v667;
  std::__shared_weak_count *v668;
  void *v669[2];
  __int128 v670;
  float v671;
  void *__dst[3];
  char *v673;
  char **v674;
  void *v675[5];
  void *__p;
  void *v677;
  char **v678;
  __int128 v679;
  char v680;
  __int128 *v681;
  uint64_t v682;

  v682 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 3))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  sp_mut = std::__get_sp_mut(a1 + 194);
  std::__sp_mut::lock(sp_mut);
  v7 = *((_QWORD *)a1 + 97);
  v636 = a1;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 98);
  *(_QWORD *)v662 = v7;
  v663 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  if (!v7)
  {
    *a4 = 0;
    a4[1] = 0;
    if (v8)
      goto LABEL_776;
    return;
  }
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v12 = (unsigned __int16 *)*a3;
  v13 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 == v13)
  {
    v14 = v636;
  }
  else
  {
    v14 = v636;
    while (*v12 != *((unsigned __int16 *)v636 + 292))
    {
      v12 += 24;
      if (v12 == v13)
        goto LABEL_25;
    }
  }
  if (v12 == v13 || *((_QWORD *)v12 + 4) != 1)
  {
LABEL_25:
    v16 = 0;
  }
  else
  {
    v15 = *((_QWORD *)v12 + 3);
    v16 = *(_QWORD *)(v15 + 112);
    v17 = *(std::__shared_weak_count **)(v15 + 120);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v660 = v16;
      v661 = v17;
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      goto LABEL_27;
    }
  }
  v660 = v16;
  v661 = 0;
LABEL_27:
  memset(v659, 0, sizeof(v659));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v659);
  v23 = (geo::codec::VectorTile **)(v660 + 144);
  v24 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v660 + 144));
  v25 = geo::codec::VectorTile::totalBuildingFootprintsCount(*v23);
  v638 = v23;
  v26 = geo::codec::VectorTile::coastlinesCount(*v23);
  v657[0] = 0;
  v657[1] = 0;
  v658 = 0;
  v655[0] = 0;
  v655[1] = 0;
  v656 = 0;
  if (!(v26 + v24 + v25))
    goto LABEL_282;
  v27 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = &off_1E42DB160;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 136) = 0u;
  *(_OWORD *)(v27 + 152) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *(_OWORD *)(v27 + 120) = 0u;
  *(_OWORD *)(v27 + 168) = 0u;
  *((_QWORD *)v27 + 23) = 0;
  *((_QWORD *)v27 + 24) = 0;
  *(_OWORD *)(v27 + 24) = 0u;
  *((_QWORD *)v27 + 5) = v27 + 48;
  *((_QWORD *)v27 + 18) = 0;
  *((_QWORD *)v27 + 19) = 0;
  *((_QWORD *)v27 + 20) = 0;
  v653 = v27 + 24;
  v654 = (std::__shared_weak_count *)v27;
  v641[1] = 0;
  v642 = 0;
  v641[0] = (char *)&v641[1];
  v643 = xmmword_19FFB5070;
  v648 = 0;
  v645 = 0;
  v646 = 0;
  v644 = 0;
  v647 = 0;
  v649 = 4;
  v651 = 0;
  v652 = 0;
  v650 = 0;
  v616 = *((id *)v14 + 95);
  v28 = objc_msgSend(v616, "gglDevice");
  v29 = atomic_load(v14 + 198);
  v619 = *((id *)v14 + 95);
  v640 = 0;
  v639 = 0uLL;
  v30 = v23;
  v31 = (void *)geo::codec::VectorTile::polygonsCount(*v23);
  if (!v31)
    goto LABEL_235;
  v614 = v28;
  v32 = 0;
  v33 = v29;
  *(_QWORD *)&v639 = operator new(0xF0uLL);
  *((_QWORD *)&v639 + 1) = v639;
  v640 = (char *)(v639 + 240);
  *(_OWORD *)v669 = 0u;
  v670 = 0u;
  v671 = 1.0;
  v34 = (float)v11;
  v629 = v31;
  do
  {
    v35 = geo::codec::VectorTile::polygons(*v30);
    v36 = v35 + ((_QWORD)v32 << 7);
    if (!*(_DWORD *)(v36 + 100))
      goto LABEL_30;
    v37 = *(unsigned __int8 *)(v36 + 127);
    if (v37 == 3)
    {
      v40 = geo::codec::VectorTile::venueLevels(*v30)
          + ((unint64_t)*(unsigned int *)(v35 + ((_QWORD)v32 << 7) + 120) << 6);
      if (!v40)
        goto LABEL_30;
    }
    else
    {
      if (v37 != 2)
        goto LABEL_30;
      v38 = geo::codec::VectorTile::venueComponents(*v30);
      v39 = *(_DWORD *)(v35 + ((_QWORD)v32 << 7) + 120);
      v40 = geo::codec::VectorTile::venueLevels(*v30) + (*(_QWORD *)(v38 + 56 * v39 + 48) << 6);
      if (!v40)
        goto LABEL_30;
    }
    v41 = geo::codec::VectorTile::venueBuildings(*v30) + 152 * *(_QWORD *)(v40 + 56);
    v44 = *(char ***)(v41 + 104);
    v42 = (uint64_t *)(v41 + 104);
    v43 = (unint64_t)v44;
    v45 = *(_DWORD *)(v40 + 8);
    md::createFeatureAttributeSet((gss::Allocator *)__dst, (uint64_t *)(v36 + 24));
    v674 = v44;
    LODWORD(v675[0]) = v45;
    *(_QWORD *)((char *)&v679 + 7) = 0;
    *(_QWORD *)&v679 = 0;
    HIBYTE(v679) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v667, *(uint64_t *)v662, (gss::FeatureAttributeSet *)__dst, (gss::QueryOverrides *)&v679);
    if (!BYTE14(v679) && (_QWORD)v679)
    {
      v47 = gss::Allocator::instance(v46);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 40))(v47, v679, WORD6(v679));
    }
    v48 = (char *)__dst[1] - (char *)__dst[0];
    v49 = ((char *)__dst[1] - (char *)__dst[0]) >> 3;
    if (__dst[1] != __dst[0])
    {
      v50 = (unsigned __int16 *)__dst[0];
      do
      {
        v51 = ((v49 << 6) - 0x61C8864680B583EBLL + (v49 >> 2) + *(unsigned int *)v50) ^ v49;
        v49 = (v50[2] - 0x61C8864680B583EBLL + (v51 << 6) + (v51 >> 2)) ^ v51;
        v50 += 4;
      }
      while (v50 != __dst[1]);
    }
    if (v669[1])
    {
      v52 = ((v49 << 6) - 0x61C8864680B583EBLL + (v49 >> 2) + SLODWORD(v675[0])) ^ v49;
      v53 = ((unint64_t)&v674[8 * v52 - 0xC3910C8D016B07DLL] + (v52 >> 2) - 3) ^ v52;
      v54 = (uint8x8_t)vcnt_s8((int8x8_t)v669[1]);
      v54.i16[0] = vaddlv_u8(v54);
      if (v54.u32[0] > 1uLL)
      {
        v55 = v53;
        if ((void *)v53 >= v669[1])
          v55 = v53 % (unint64_t)v669[1];
      }
      else
      {
        v55 = v53 & ((unint64_t)v669[1] - 1);
      }
      v56 = (uint64_t **)*((_QWORD *)v669[0] + v55);
      if (v56)
      {
        v57 = *v56;
        if (v57)
        {
          if (v54.u32[0] < 2uLL)
          {
            while (1)
            {
              v63 = v57[1];
              if (v63 == v53)
              {
                v65 = v57[2];
                v64 = v57[3];
                if (v64 - v65 == v48)
                {
                  if (v65 == v64)
                  {
LABEL_81:
                    if ((char **)v57[6] == v674 && *((_DWORD *)v57 + 14) == LODWORD(v675[0]))
                      goto LABEL_83;
                  }
                  else
                  {
                    v66 = __dst[0];
                    while (*(_DWORD *)v65 == *v66 && *(unsigned __int16 *)(v65 + 4) == *((unsigned __int16 *)v66 + 2))
                    {
                      v65 += 8;
                      v66 += 2;
                      if (v65 == v64)
                        goto LABEL_81;
                    }
                  }
                }
              }
              else if ((v63 & ((uint64_t)v669[1] - 1)) != v55)
              {
                goto LABEL_84;
              }
              v57 = (uint64_t *)*v57;
              if (!v57)
                goto LABEL_84;
            }
          }
          do
          {
            v58 = v57[1];
            if (v58 == v53)
            {
              v60 = v57[2];
              v59 = v57[3];
              if (v59 - v60 == v48)
              {
                if (v60 == v59)
                {
LABEL_64:
                  if ((char **)v57[6] == v674 && *((_DWORD *)v57 + 14) == LODWORD(v675[0]))
                  {
LABEL_83:
                    v68 = (id)v57[9];
                    goto LABEL_105;
                  }
                }
                else
                {
                  v61 = __dst[0];
                  while (1)
                  {
                    v62 = *(_DWORD *)v60 == *v61 && *(unsigned __int16 *)(v60 + 4) == *((unsigned __int16 *)v61 + 2);
                    if (!v62)
                      break;
                    v60 += 8;
                    v61 += 2;
                    if (v60 == v59)
                      goto LABEL_64;
                  }
                }
              }
            }
            else
            {
              if ((void *)v58 >= v669[1])
                v58 %= (unint64_t)v669[1];
              if (v58 != v55)
                break;
            }
            v57 = (uint64_t *)*v57;
          }
          while (v57);
        }
      }
    }
LABEL_84:
    v69 = [VKVenueGroup alloc];
    v72 = *(unsigned int *)(v40 + 8);
    v73 = *v42;
    v665 = v653;
    v666 = v654;
    if (v654)
    {
      v74 = (unint64_t *)&v654->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    *(float *)&v70 = v34;
    LODWORD(v71) = v33;
    v76 = -[VKVenueGroup initWithStyleQuery:tileZoom:layer:buildingId:contentScale:storage:](v69, "initWithStyleQuery:tileZoom:layer:buildingId:contentScale:storage:", &v667, v72, v73, &v665, v70, v71);
    v77 = (void *)v76;
    v78 = v666;
    if (!v666)
      goto LABEL_91;
    v79 = (unint64_t *)&v666->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      if (!v77)
      {
LABEL_104:
        v68 = 0;
LABEL_105:
        v86 = 0;
        goto LABEL_200;
      }
    }
    else
    {
LABEL_91:
      if (!v76)
        goto LABEL_104;
    }
    v68 = v77;

    v81 = (id *)*((_QWORD *)&v639 + 1);
    if (*((_QWORD *)&v639 + 1) >= (unint64_t)v640)
    {
      v43 = v639;
      v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v639 + 1) - v639) >> 3) + 1;
      if (v83 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)&v640[-v639] >> 3) > v83)
        v83 = 0x5555555555555556 * ((uint64_t)&v640[-v639] >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v640[-v639] >> 3) >= 0x555555555555555)
        v84 = 0xAAAAAAAAAAAAAAALL;
      else
        v84 = v83;
      if (v84)
      {
        if (v84 > 0xAAAAAAAAAAAAAAALL)
LABEL_781:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v85 = (char *)operator new(24 * v84);
      }
      else
      {
        v85 = 0;
      }
      v87 = &v85[8 * ((uint64_t)(*((_QWORD *)&v639 + 1) - v639) >> 3)];
      *(_QWORD *)v87 = &off_1E42B4AF0;
      *((_QWORD *)v87 + 1) = 0;
      objc_storeStrong((id *)v87 + 1, v77);
      v88 = &v85[24 * v84];
      v82 = (id *)(v87 + 24);
      if (v81 == (id *)v43)
      {
        *(_QWORD *)&v639 = v87;
        *((_QWORD *)&v639 + 1) = v87 + 24;
        v640 = v88;
        if (!v81)
          goto LABEL_115;
      }
      else
      {
        do
        {
          *((_QWORD *)v87 - 3) = &off_1E42B4AF0;
          v87 -= 24;
          *((_QWORD *)v87 + 1) = 0;
          v90 = *(v81 - 2);
          v89 = v81 - 2;
          objc_storeStrong((id *)v87 + 1, v90);
          v91 = *v89;
          *v89 = 0;

          v81 = v89 - 1;
        }
        while (v81 != (id *)v43);
        v92 = (id *)*((_QWORD *)&v639 + 1);
        v81 = (id *)v639;
        *(_QWORD *)&v639 = v87;
        *((_QWORD *)&v639 + 1) = v82;
        v640 = v88;
        if (v92 != v81)
        {
          v93 = v92 - 3;
          v43 = (unint64_t)(v92 - 3);
          do
          {
            v94 = *(void (***)(id *))v43;
            v43 -= 24;
            (*v94)(v93);
            v62 = v93 == v81;
            v93 = (id *)v43;
          }
          while (!v62);
        }
        if (!v81)
          goto LABEL_115;
      }
      operator delete(v81);
    }
    else
    {
      **((_QWORD **)&v639 + 1) = &off_1E42B4AF0;
      v81[1] = 0;
      objc_storeStrong(v81 + 1, v77);
      v82 = v81 + 3;
    }
LABEL_115:
    *((_QWORD *)&v639 + 1) = v82;
    v95 = (char *)__dst[1] - (char *)__dst[0];
    v96 = ((char *)__dst[1] - (char *)__dst[0]) >> 3;
    if (__dst[1] != __dst[0])
    {
      v97 = (unsigned __int16 *)__dst[0];
      do
      {
        v98 = ((v96 << 6) - 0x61C8864680B583EBLL + (v96 >> 2) + *(unsigned int *)v97) ^ v96;
        v96 = (v97[2] - 0x61C8864680B583EBLL + (v98 << 6) + (v98 >> 2)) ^ v98;
        v97 += 4;
      }
      while (v97 != __dst[1]);
    }
    v99 = ((v96 << 6) - 0x61C8864680B583EBLL + (v96 >> 2) + SLODWORD(v675[0])) ^ v96;
    v100 = ((unint64_t)&v674[8 * v99 - 0xC3910C8D016B07DLL] + (v99 >> 2) - 3) ^ v99;
    v101 = (unint64_t)v669[1];
    if (v669[1])
    {
      v102 = (uint8x8_t)vcnt_s8((int8x8_t)v669[1]);
      v102.i16[0] = vaddlv_u8(v102);
      if (v102.u32[0] > 1uLL)
      {
        v43 = ((unint64_t)&v674[8 * v99 - 0xC3910C8D016B07DLL] + (v99 >> 2) - 3) ^ v99;
        if ((void *)v100 >= v669[1])
          v43 = v100 % (unint64_t)v669[1];
      }
      else
      {
        v43 = v100 & ((unint64_t)v669[1] - 1);
      }
      v103 = (uint64_t **)*((_QWORD *)v669[0] + v43);
      if (v103)
      {
        v104 = *v103;
        if (v104)
        {
          if (v102.u32[0] < 2uLL)
          {
            while (1)
            {
              v110 = v104[1];
              if (v110 == v100)
              {
                v112 = v104[2];
                v111 = v104[3];
                if (v111 - v112 == v95)
                {
                  if (v112 == v111)
                  {
LABEL_156:
                    if ((char **)v104[6] == v674 && *((_DWORD *)v104 + 14) == LODWORD(v675[0]))
                      goto LABEL_199;
                  }
                  else
                  {
                    v113 = __dst[0];
                    while (*(_DWORD *)v112 == *v113
                         && *(unsigned __int16 *)(v112 + 4) == *((unsigned __int16 *)v113 + 2))
                    {
                      v112 += 8;
                      v113 += 2;
                      if (v112 == v111)
                        goto LABEL_156;
                    }
                  }
                }
              }
              else if ((v110 & ((uint64_t)v669[1] - 1)) != v43)
              {
                goto LABEL_159;
              }
              v104 = (uint64_t *)*v104;
              if (!v104)
                goto LABEL_159;
            }
          }
          do
          {
            v105 = v104[1];
            if (v105 == v100)
            {
              v107 = v104[2];
              v106 = v104[3];
              if (v106 - v107 == v95)
              {
                if (v107 == v106)
                {
LABEL_139:
                  if ((char **)v104[6] == v674 && *((_DWORD *)v104 + 14) == LODWORD(v675[0]))
                    goto LABEL_199;
                }
                else
                {
                  v108 = __dst[0];
                  while (*(_DWORD *)v107 == *v108 && *(unsigned __int16 *)(v107 + 4) == *((unsigned __int16 *)v108 + 2))
                  {
                    v107 += 8;
                    v108 += 2;
                    if (v107 == v106)
                      goto LABEL_139;
                  }
                }
              }
            }
            else
            {
              if ((void *)v105 >= v669[1])
                v105 %= (unint64_t)v669[1];
              if (v105 != v43)
                break;
            }
            v104 = (uint64_t *)*v104;
          }
          while (v104);
        }
      }
    }
LABEL_159:
    v115 = (uint64_t *)operator new(0x58uLL);
    *(_QWORD *)&v679 = v115;
    *((_QWORD *)&v679 + 1) = &v670;
    v680 = 0;
    *v115 = 0;
    v115[1] = v100;
    v115[3] = 0;
    v115[4] = 0;
    v115[2] = 0;
    v115[5] = gss::Allocator::instance((gss::Allocator *)v115);
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v115 + 2, (uint64_t)__dst[0], (_QWORD *)__dst[1], ((char *)__dst[1] - (char *)__dst[0]) >> 3);
    v115[6] = (uint64_t)v674;
    *((_DWORD *)v115 + 14) = v675[0];
    v115[8] = (uint64_t)&off_1E42B4AF0;
    v115[9] = 0;
    v680 = 1;
    v116 = (float)(unint64_t)(*((_QWORD *)&v670 + 1) + 1);
    if (!v101 || (float)(v671 * (float)v101) < v116)
    {
      v117 = v101 < 3 || (v101 & (v101 - 1)) != 0;
      v118 = v117 | (2 * v101);
      v119 = vcvtps_u32_f32(v116 / v671);
      if (v118 <= v119)
        prime = v119;
      else
        prime = v118;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v121 = v669[1];
      if ((void *)prime > v669[1])
        goto LABEL_172;
      if ((void *)prime < v669[1])
      {
        v122 = vcvtps_u32_f32((float)*((unint64_t *)&v670 + 1) / v671);
        if (v669[1] < (void *)3
          || (v123 = (uint8x8_t)vcnt_s8((int8x8_t)v669[1]), v123.i16[0] = vaddlv_u8(v123), v123.u32[0] > 1uLL))
        {
          v122 = std::__next_prime(v122);
        }
        else
        {
          v124 = 1 << -(char)__clz(v122 - 1);
          if (v122 >= 2)
            v122 = v124;
        }
        if (prime <= v122)
          prime = v122;
        if (prime < (unint64_t)v121)
LABEL_172:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v669, prime);
      }
      v101 = (unint64_t)v669[1];
      if (((unint64_t)v669[1] & ((unint64_t)v669[1] - 1)) != 0)
      {
        if ((void *)v100 >= v669[1])
          v43 = v100 % (unint64_t)v669[1];
        else
          v43 = v100;
      }
      else
      {
        v43 = ((unint64_t)v669[1] - 1) & v100;
      }
    }
    v125 = (_QWORD *)*((_QWORD *)v669[0] + v43);
    if (v125)
    {
      *(_QWORD *)v679 = *v125;
      *v125 = v679;
    }
    else
    {
      *(_QWORD *)v679 = v670;
      *(_QWORD *)&v670 = v679;
      *((_QWORD *)v669[0] + v43) = &v670;
      if (*(_QWORD *)v679)
      {
        v126 = *(_QWORD *)(*(_QWORD *)v679 + 8);
        if ((v101 & (v101 - 1)) != 0)
        {
          if (v126 >= v101)
            v126 %= v101;
        }
        else
        {
          v126 &= v101 - 1;
        }
        *((_QWORD *)v669[0] + v126) = v679;
      }
    }
    v104 = (uint64_t *)v679;
    ++*((_QWORD *)&v670 + 1);
LABEL_199:
    objc_storeStrong((id *)v104 + 9, v77);
    v86 = v68;
LABEL_200:

    v127 = v68;
    objc_msgSend(v127, "prepareForPolygon:withRounder:", v36, 0);

    v128 = v668;
    v31 = v629;
    if (v668)
    {
      v129 = (unint64_t *)&v668->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v30 = v638;
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      (*(void (**)(char *, void *, int64_t))(*(_QWORD *)v673 + 40))(v673, __dst[0], (char *)__dst[2] - (char *)__dst[0]);
    }
LABEL_30:
    v32 = (char *)v32 + 1;
  }
  while (v32 != v31);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v614 + 24))(&v664);
  __dst[0] = (void *)MEMORY[0x1E0C809B0];
  __dst[1] = (void *)3321888768;
  __dst[2] = ___Z16buildVenueMeshesRKN3geo8QuadTileERKNSt3__110shared_ptrINS_5codec10VectorTileEEEPN3ggl6DeviceERN2md12TriangulatorIfEERKNS4_IN3gss17StylesheetManagerINSH_10PropertyIDEEEEEfP17VKSharedResourcesRKNS4_INSD_14MeshSetStorageEEE_block_invoke;
  v673 = (char *)&__block_descriptor_128_ea8_40c168_ZTSNSt3__16vectorIN3geo11_retain_ptrIU8__strongP12VKVenueGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS_9allocatorISA_EEEE80c243_ZTSNSt3__113unordered_mapIN2md13VenueGroupKeyEN3geo11_retain_ptrIU8__strongP12VKVenueGroupNS3_16_retain_objc_arcENS3_17_release_objc_arcENS3_10_hash_objcENS3_11_equal_objcEEENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_SC_EEEEEE_e30_v16__0__ResourceAccessor_____8l;
  v674 = &v653;
  memset(v675, 0, 24);
  std::vector<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(v675, v639, *((uint64_t *)&v639 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v639 + 1) - v639) >> 3));
  v675[3] = v31;
  v675[4] = v30;
  std::unordered_map<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::unordered_map((uint64_t)&__p, (uint64_t)v669);
  v678 = v641;
  v681 = 0;
  *(_QWORD *)&v679 = &off_1E42C7118;
  *((_QWORD *)&v679 + 1) = MEMORY[0x1A1AF5730](__dst);
  v681 = &v679;
  v667 = 0;
  v668 = 0;
  (*(void (**)(uint64_t, __int128 *, unint64_t *))(*(_QWORD *)v664 + 16))(v664, &v679, &v667);
  v131 = v668;
  if (v668)
  {
    v132 = (unint64_t *)&v668->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v681;
  if (v681 == &v679)
  {
    v135 = 4;
    v134 = &v679;
LABEL_216:
    (*(void (**)(void))(*(_QWORD *)v134 + 8 * v135))();
  }
  else if (v681)
  {
    v135 = 5;
    goto LABEL_216;
  }
  v136 = v677;
  if (v677)
  {
    do
    {
      v156 = *(void **)v136;
      *((_QWORD *)v136 + 8) = &off_1E42B4AF0;

      v157 = *((_QWORD *)v136 + 2);
      if (v157)
      {
        *((_QWORD *)v136 + 3) = v157;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v136 + 5) + 40))(*((_QWORD *)v136 + 5), v157, *((_QWORD *)v136 + 4) - v157);
      }
      operator delete(v136);
      v136 = v156;
    }
    while (v156);
  }
  v137 = __p;
  __p = 0;
  if (v137)
    operator delete(v137);
  v138 = (char *)v675[0];
  if (v675[0])
  {
    v139 = v675[0];
    if (v675[1] != v675[0])
    {
      v140 = (char *)v675[1] - 24;
      v141 = (void (***)(char *))((char *)v675[1] - 24);
      do
      {
        v142 = *v141;
        v141 -= 3;
        (*v142)(v140);
        v62 = v140 == v138;
        v140 = (char *)v141;
      }
      while (!v62);
      v139 = v675[0];
    }
    v675[1] = v138;
    operator delete(v139);
  }
  if (v664)
  {
    v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v664 + 24))(v664);
    v144 = v664;
    v664 = 0;
    *(_QWORD *)&v679 = v144;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v143 + 48))(v143, &v679);
    v145 = v679;
    *(_QWORD *)&v679 = 0;
    if (v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
    v146 = v664;
    v664 = 0;
    if (v146)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  }
  v147 = (void *)v670;
  if ((_QWORD)v670)
  {
    do
    {
      v158 = *(void **)v147;
      *((_QWORD *)v147 + 8) = &off_1E42B4AF0;

      v159 = *((_QWORD *)v147 + 2);
      if (v159)
      {
        *((_QWORD *)v147 + 3) = v159;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v147 + 5) + 40))(*((_QWORD *)v147 + 5), v159, *((_QWORD *)v147 + 4) - v159);
      }
      operator delete(v147);
      v147 = v158;
    }
    while (v158);
  }
  v148 = v669[0];
  v669[0] = 0;
  if (v148)
    operator delete(v148);
LABEL_235:

  v149 = (char *)v657[0];
  if (v657[0])
  {
    if (v657[1] != v657[0])
    {
      v150 = (char *)v657[1] - 24;
      v151 = (void (***)(char *))((char *)v657[1] - 24);
      do
      {
        v152 = *v151;
        v151 -= 3;
        (*v152)(v150);
        v62 = v150 == v149;
        v150 = (char *)v151;
      }
      while (!v62);
      v149 = (char *)v657[0];
    }
    operator delete(v149);
  }
  *(_OWORD *)v657 = v639;
  v658 = v640;

  v630 = *((id *)v636 + 95);
  v153 = objc_msgSend(v630, "gglDevice");
  v669[0] = 0;
  v669[1] = 0;
  *(_QWORD *)&v670 = 0;
  v154 = geo::codec::VectorTile::venueLevelsCount(*v638);
  if (v154)
  {
    for (i = 0; i != v154; ++i)
    {
      v160 = geo::codec::VectorTile::venueLevels(*v638);
      v161 = geo::codec::VectorTile::venueBuildings(*v638);
      v162 = v160 + (i << 6);
      if (*(_BYTE *)(v162 + 12) && !*(_BYTE *)(v162 + 13))
      {
        v163 = v161;
        v164 = *(_QWORD *)(v162 + 56);
        v165 = geo::codec::VectorTile::polygons(*v638);
        v166 = v160 + (i << 6);
        v167 = v165 + (*(_QWORD *)(v166 + 16) << 7);
        v168 = (uint64_t *)(v163 + 152 * v164 + 104);
        v169 = (int *)(v166 + 8);
        v170 = (char *)v669[1];
        if (v669[1] >= (void *)v670)
        {
          v171 = 0x8E38E38E38E38E39 * (((char *)v669[1] - (char *)v669[0]) >> 3);
          v172 = v171 + 1;
          if (v171 + 1 > 0x38E38E38E38E38ELL)
            abort();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v670 - (unint64_t)v669[0]) >> 3) > v172)
            v172 = 0x1C71C71C71C71C72 * ((uint64_t)(v670 - (unint64_t)v669[0]) >> 3);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v670 - (unint64_t)v669[0]) >> 3) >= 0x1C71C71C71C71C7)
            v173 = 0x38E38E38E38E38ELL;
          else
            v173 = v172;
          v674 = (char **)&v670;
          if (v173)
          {
            if (v173 > 0x38E38E38E38E38ELL)
              goto LABEL_781;
            v174 = (char *)operator new(72 * v173);
          }
          else
          {
            v174 = 0;
          }
          __dst[0] = v174;
          __dst[1] = &v174[72 * v171];
          __dst[2] = __dst[1];
          v673 = &v174[72 * v173];
          md::VenueFloorGroup::VenueFloorGroup((uint64_t)__dst[1], v153, (uint64_t *)v662, v167, *v168, *v169);
          v176 = (char *)v669[0];
          v175 = (char *)v669[1];
          v177 = (char *)__dst[1];
          v178 = (char *)__dst[2];
          if (v669[1] == v669[0])
          {
            v182 = vdupq_n_s64((unint64_t)v669[1]);
          }
          else
          {
            v179 = 0;
            do
            {
              v180 = &v177[v179];
              v181 = &v175[v179];
              *((_QWORD *)v180 - 9) = 0;
              *((_QWORD *)v180 - 8) = 0;
              *((_QWORD *)v180 - 7) = 0;
              *(_OWORD *)(v180 - 72) = *(_OWORD *)&v175[v179 - 72];
              *((_QWORD *)v180 - 7) = *(_QWORD *)&v175[v179 - 56];
              *((_QWORD *)v181 - 9) = 0;
              *((_QWORD *)v181 - 8) = 0;
              *((_QWORD *)v181 - 7) = 0;
              *((_OWORD *)v180 - 3) = *(_OWORD *)&v175[v179 - 48];
              *((_QWORD *)v181 - 6) = 0;
              *((_QWORD *)v181 - 5) = 0;
              *((_OWORD *)v180 - 2) = *(_OWORD *)&v175[v179 - 32];
              *((_QWORD *)v181 - 4) = 0;
              *((_QWORD *)v181 - 3) = 0;
              *((_OWORD *)v180 - 1) = *(_OWORD *)&v175[v179 - 16];
              v179 -= 72;
            }
            while (&v175[v179] != v176);
            v177 += v179;
            v182 = *(int64x2_t *)v669;
          }
          v183 = v178 + 72;
          v669[0] = v177;
          v669[1] = v178 + 72;
          *(int64x2_t *)&__dst[1] = v182;
          v184 = (char *)v670;
          *(_QWORD *)&v670 = v673;
          v673 = v184;
          __dst[0] = (void *)v182.i64[0];
          std::__split_buffer<md::VenueFloorGroup>::__destruct_at_end[abi:nn180100]((uint64_t)__dst, v182.i64[0]);
          if (__dst[0])
            operator delete(__dst[0]);
          v669[1] = v183;
        }
        else
        {
          md::VenueFloorGroup::VenueFloorGroup((uint64_t)v669[1], v153, (uint64_t *)v662, v167, *v168, *v169);
          v669[1] = v170 + 72;
        }
      }
    }
  }
  if (v655[0])
  {
    std::vector<md::VenueFloorGroup>::__base_destruct_at_end[abi:nn180100]((uint64_t)v655, (void **)v655[0]);
    operator delete(v655[0]);
  }
  *(_OWORD *)v655 = *(_OWORD *)v669;
  v656 = v670;
  v669[1] = 0;
  *(_QWORD *)&v670 = 0;
  v669[0] = 0;

  if (v650)
  {
    v651 = v650;
    operator delete(v650);
  }
  geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)v641);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)v641[1]);
  v185 = v654;
  v14 = v636;
  if (v654)
  {
    v186 = (unint64_t *)&v654->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
LABEL_282:
  v669[0] = 0;
  v669[1] = 0;
  *(_QWORD *)&v670 = 0;
  v188 = *(_DWORD *)geo::codec::VectorTile::key(*v638);
  v189 = *(_QWORD *)geo::codec::VectorTile::key(*v638);
  v190 = *(_DWORD *)(geo::codec::VectorTile::key(*v638) + 5);
  v191 = geo::codec::VectorTile::venuesCount(*v638);
  v192 = 1.0 / (double)(1 << SBYTE1(v188));
  v193 = (double)((v189 >> 14) & 0x3FFFFFF);
  v194 = (double)(v190 & 0x3FFFFFF);
  if (v191)
  {
    v195 = 0;
    v196 = v194 + 1.0;
    v197 = v192;
    v617 = v191;
    while (1)
    {
      v631 = v195;
      v624 = geo::codec::VectorTile::venues(*v638);
      v198 = v624 + 144 * (_QWORD)v195;
      if (*(_DWORD *)(v198 + 100))
      {
        v199 = 0;
        v200 = 0;
        v201 = 0;
        v202 = 0;
        do
        {
          __dst[0] = 0;
          v203 = geo::codec::multiSectionFeaturePoints((_QWORD *)v198, v199, __dst);
          v204 = ((char *)v201 - (char *)v200) >> 4;
          v205 = __dst[0];
          v206 = (unint64_t)__dst[0] + v204;
          if ((char *)__dst[0] + v204 <= (void *)((v202 - (char *)v200) >> 4))
          {
            v208 = v201;
            v209 = v200;
          }
          else
          {
            if (v206 >> 60)
              abort();
            v207 = (char *)operator new(16 * v206);
            v208 = (double *)&v207[16 * v204];
            v209 = v208;
            if (v201 != v200)
            {
              v210 = v208;
              do
              {
                v209 = v210 - 2;
                *((_OWORD *)v210 - 1) = *((_OWORD *)v201 - 1);
                v201 -= 2;
                v210 -= 2;
              }
              while (v201 != v200);
            }
            v202 = &v207[16 * v206];
            if (v200)
            {
              operator delete(v200);
              v205 = __dst[0];
            }
          }
          if (v205)
          {
            for (j = 0; j < (unint64_t)v205; ++j)
            {
              v212 = (float *)&v203[j];
              v213 = (*v212 + v193) * v197;
              v214 = (v212[1] - v196) * v197 + 1.0;
              if (v208 < (double *)v202)
              {
                *v208 = v213;
                v208[1] = v214;
                v208 += 2;
              }
              else
              {
                v215 = ((char *)v208 - (char *)v209) >> 4;
                v216 = v215 + 1;
                if ((unint64_t)(v215 + 1) >> 60)
                  abort();
                if ((v202 - (char *)v209) >> 3 > v216)
                  v216 = (v202 - (char *)v209) >> 3;
                if ((unint64_t)(v202 - (char *)v209) >= 0x7FFFFFFFFFFFFFF0)
                  v217 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v217 = v216;
                if (v217)
                {
                  if (v217 >> 60)
                    goto LABEL_781;
                  v218 = (char *)operator new(16 * v217);
                }
                else
                {
                  v218 = 0;
                }
                v219 = (double *)&v218[16 * v215];
                *v219 = v213;
                v219[1] = v214;
                if (v208 == v209)
                {
                  v221 = &v218[16 * v215];
                }
                else
                {
                  v220 = &v218[16 * v215];
                  do
                  {
                    v221 = v220 - 16;
                    *((_OWORD *)v220 - 1) = *((_OWORD *)v208 - 1);
                    v208 -= 2;
                    v220 -= 16;
                  }
                  while (v208 != v209);
                }
                v202 = &v218[16 * v217];
                v208 = v219 + 2;
                if (v209)
                {
                  operator delete(v209);
                  v205 = __dst[0];
                }
                v209 = (double *)v221;
              }
            }
          }
          ++v199;
          v200 = v209;
          v201 = v208;
        }
        while (v199 < *(unsigned int *)(v198 + 100));
      }
      else
      {
        v208 = 0;
        v209 = 0;
      }
      *(_QWORD *)&v679 = 0;
      *(_QWORD *)&v639 = 0;
      v667 = 0;
      v222 = v624 + 144 * (_QWORD)v631;
      v225 = *(_QWORD *)(v222 + 128);
      v224 = (const char **)(v222 + 128);
      v223 = v225;
      if (v225)
        geo::codec::vectorTileGetLocalizedLabelForNativeLabel(v638, v223, &v679, &v667);
      v226 = v624 + 144 * (_QWORD)v631;
      v229 = *(_QWORD *)(v226 + 136);
      v228 = (const char **)(v226 + 136);
      v227 = v229;
      if (v229)
        geo::codec::vectorTileGetLocalizedLabelForNativeLabel(v638, v227, &v639, &v667);
      v230 = *(_BYTE *)(v198 + 75) ? *(_QWORD *)(v198 + 48) : 0;
      v231 = v624 + 144 * (_QWORD)v631;
      v233 = *(float *)(v231 + 112);
      v232 = *(float *)(v231 + 116);
      v234 = (char *)v208 - (char *)v209;
      if (v234)
      {
        if (v234 < 0)
          abort();
        v235 = (char *)operator new(v234);
        v236 = &v235[16 * (v234 >> 4)];
        v237 = v234 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v235, v209, v237);
        *(_QWORD *)&v238.f64[0] = v235;
        *(_QWORD *)&v238.f64[1] = &v235[v237];
      }
      else
      {
        v236 = 0;
        v238 = 0uLL;
      }
      v625 = v238;
      v239 = (char *)operator new(0xF0uLL);
      v240 = v232 - v196;
      v241 = (v233 + v193) * v197;
      *((_QWORD *)v239 + 1) = 0;
      *((_QWORD *)v239 + 2) = 0;
      *(_QWORD *)v239 = &off_1E42DDEA8;
      *((_QWORD *)v239 + 3) = *(_QWORD *)(v231 + 104);
      v242 = v240 * v197 + 1.0;
      v243 = *v224;
      v244 = *v228;
      v245 = (const char *)v679;
      __s = (char *)v639;
      *((_QWORD *)v239 + 4) = v230;
      *((_QWORD *)v239 + 5) = 0;
      *((_QWORD *)v239 + 6) = 0;
      *((_QWORD *)v239 + 7) = 0;
      *((float64x2_t *)v239 + 4) = v625;
      *((_QWORD *)v239 + 10) = v236;
      *((_QWORD *)v239 + 12) = 0;
      *((_QWORD *)v239 + 13) = 0;
      *((_QWORD *)v239 + 11) = 0;
      geo::ConvexHull2<double>::getConvexHullPoints((double **)v239 + 8, (_QWORD *)v239 + 11, v625);
      *((_OWORD *)v239 + 8) = 0u;
      v246 = (void **)(v239 + 128);
      *((double *)v239 + 14) = v241;
      *((double *)v239 + 15) = v242;
      v239[208] = 0;
      *((_OWORD *)v239 + 9) = 0u;
      *((_OWORD *)v239 + 10) = 0u;
      v239[176] = 0;
      v247 = v631;
      v14 = v636;
      if (v243)
        break;
LABEL_345:
      if (!v244)
        goto LABEL_357;
      v253 = strlen(v244);
      if (v253 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_786;
      v254 = (void *)v253;
      if (v253 >= 0x17)
      {
        v256 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v253 | 7) != 0x17)
          v256 = v253 | 7;
        v257 = v256 + 1;
        v255 = operator new(v256 + 1);
        __dst[1] = v254;
        __dst[2] = (void *)(v257 | 0x8000000000000000);
        __dst[0] = v255;
      }
      else
      {
        HIBYTE(__dst[2]) = v253;
        v255 = __dst;
        if (!v253)
          goto LABEL_354;
      }
      memcpy(v255, v244, (size_t)v254);
LABEL_354:
      *((_BYTE *)v254 + (_QWORD)v255) = 0;
      v258 = (void **)(v239 + 152);
      if (v239[175] < 0)
        operator delete(*v258);
      *(_OWORD *)v258 = *(_OWORD *)__dst;
      *((void **)v239 + 21) = __dst[2];
LABEL_357:
      if (!v245)
        goto LABEL_370;
      v259 = strlen(v245);
      if (v259 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_786;
      v260 = (void *)v259;
      if (v259 >= 0x17)
      {
        v262 = (v259 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v259 | 7) != 0x17)
          v262 = v259 | 7;
        v263 = v262 + 1;
        v261 = operator new(v262 + 1);
        __dst[1] = v260;
        __dst[2] = (void *)(v263 | 0x8000000000000000);
        __dst[0] = v261;
LABEL_365:
        memcpy(v261, v245, (size_t)v260);
        goto LABEL_366;
      }
      HIBYTE(__dst[2]) = v259;
      v261 = __dst;
      if (v259)
        goto LABEL_365;
LABEL_366:
      *((_BYTE *)v260 + (_QWORD)v261) = 0;
      v264 = (void **)(v239 + 184);
      if (v239[176])
      {
        if (v239[207] < 0)
          operator delete(*v264);
        *(_OWORD *)v264 = *(_OWORD *)__dst;
        *((void **)v239 + 25) = __dst[2];
LABEL_370:
        if (!__s)
          goto LABEL_386;
        goto LABEL_371;
      }
      *(_OWORD *)v264 = *(_OWORD *)__dst;
      *((void **)v239 + 25) = __dst[2];
      v239[176] = 1;
      if (!__s)
        goto LABEL_386;
LABEL_371:
      v265 = strlen(__s);
      if (v265 > 0x7FFFFFFFFFFFFFF7)
LABEL_786:
        abort();
      v266 = (void *)v265;
      if (v265 >= 0x17)
      {
        v268 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v265 | 7) != 0x17)
          v268 = v265 | 7;
        v269 = v268 + 1;
        v267 = operator new(v268 + 1);
        __dst[1] = v266;
        __dst[2] = (void *)(v269 | 0x8000000000000000);
        __dst[0] = v267;
LABEL_378:
        memcpy(v267, __s, (size_t)v266);
        goto LABEL_379;
      }
      HIBYTE(__dst[2]) = v265;
      v267 = __dst;
      if (v265)
        goto LABEL_378;
LABEL_379:
      *((_BYTE *)v266 + (_QWORD)v267) = 0;
      v270 = (void **)(v239 + 216);
      if (v239[208])
      {
        if (v239[239] < 0)
          operator delete(*v270);
        *(_OWORD *)v270 = *(_OWORD *)__dst;
        *((void **)v239 + 29) = __dst[2];
      }
      else
      {
        *(_OWORD *)v270 = *(_OWORD *)__dst;
        *((void **)v239 + 29) = __dst[2];
        v239[208] = 1;
      }
LABEL_386:
      v641[0] = v239 + 24;
      v641[1] = v239;
      v271 = v669[1];
      if (v669[1] < (void *)v670)
      {
        *(_QWORD *)v669[1] = v239 + 24;
        v271[1] = v239;
        v669[1] = v271 + 2;
        if (!v209)
          goto LABEL_286;
        goto LABEL_285;
      }
      v272 = v669[0];
      v273 = ((char *)v669[1] - (char *)v669[0]) >> 4;
      v274 = v273 + 1;
      if ((unint64_t)(v273 + 1) >> 60)
        abort();
      v275 = v670 - (unint64_t)v669[0];
      if ((uint64_t)(v670 - (unint64_t)v669[0]) >> 3 > v274)
        v274 = v275 >> 3;
      if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF0)
        v276 = 0xFFFFFFFFFFFFFFFLL;
      else
        v276 = v274;
      if (v276 >> 60)
        goto LABEL_781;
      v277 = (char *)operator new(16 * v276);
      v278 = &v277[16 * v273];
      *(_OWORD *)v278 = *(_OWORD *)v641;
      v279 = v278 + 16;
      v280 = &v277[16 * v276];
      v641[0] = 0;
      v641[1] = 0;
      if (v271 == v272)
      {
        v669[0] = &v277[16 * v273];
        *(_QWORD *)&v670 = &v277[16 * v276];
        v14 = v636;
        if (!v271)
          goto LABEL_408;
LABEL_407:
        operator delete(v271);
        goto LABEL_408;
      }
      v281 = v271;
      v14 = v636;
      do
      {
        v282 = *((_OWORD *)v281 - 1);
        v281 -= 2;
        *((_OWORD *)v278 - 1) = v282;
        v278 -= 16;
        *v281 = 0;
        v281[1] = 0;
      }
      while (v281 != v272);
      v669[0] = v278;
      v669[1] = v279;
      *(_QWORD *)&v670 = v280;
      do
      {
        v283 = (std::__shared_weak_count *)*(v271 - 1);
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        v271 -= 2;
      }
      while (v271 != v272);
      v271 = v272;
      if (v272)
        goto LABEL_407;
LABEL_408:
      v286 = (std::__shared_weak_count *)v641[1];
      v669[1] = v279;
      if (v641[1])
      {
        v287 = (unint64_t *)(v641[1] + 8);
        do
          v288 = __ldaxr(v287);
        while (__stlxr(v288 - 1, v287));
        if (!v288)
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
          if (!v209)
            goto LABEL_286;
LABEL_285:
          operator delete(v209);
          goto LABEL_286;
        }
      }
      if (v209)
        goto LABEL_285;
LABEL_286:
      v195 = v247 + 1;
      if (v195 == (char *)v617)
        goto LABEL_416;
    }
    v248 = strlen(v243);
    if (v248 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_786;
    v249 = (void *)v248;
    if (v248 >= 0x17)
    {
      v251 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v248 | 7) != 0x17)
        v251 = v248 | 7;
      v252 = v251 + 1;
      v250 = operator new(v251 + 1);
      __dst[1] = v249;
      __dst[2] = (void *)(v252 | 0x8000000000000000);
      __dst[0] = v250;
    }
    else
    {
      HIBYTE(__dst[2]) = v248;
      v250 = __dst;
      if (!v248)
        goto LABEL_342;
    }
    memcpy(v250, v243, (size_t)v249);
LABEL_342:
    *((_BYTE *)v249 + (_QWORD)v250) = 0;
    if (v239[151] < 0)
      operator delete(*v246);
    *(_OWORD *)v246 = *(_OWORD *)__dst;
    *((void **)v239 + 18) = __dst[2];
    v247 = v631;
    goto LABEL_345;
  }
LABEL_416:
  v289 = geo::codec::VectorTile::venueBuildingsCount(*v638);
  if (!v289)
    goto LABEL_722;
  v615 = v289;
  v290 = 0;
  v291 = v194 + 1.0;
  v292 = v192;
  v293 = v638;
  while (2)
  {
    v632 = v290;
    __sa = (char *)geo::codec::VectorTile::venueBuildings(*v293);
    v294 = &__sa[152 * (_QWORD)v290];
    v295 = *((_QWORD *)v294 + 18);
    v620 = geo::codec::VectorTile::venues(*v293);
    v618 = v295;
    v626 = (int64x2_t *)*((_QWORD *)v669[0] + 2 * v295);
    v641[0] = 0;
    v641[1] = 0;
    v642 = 0;
    if (*((_DWORD *)v294 + 25))
    {
      v297 = 0;
      v298 = 0;
      do
      {
        __dst[0] = 0;
        v299 = v294;
        v300 = geo::codec::multiSectionFeaturePoints(v294, v298, __dst);
        v301 = v641[0];
        v302 = (v297 - v641[0]) >> 4;
        v303 = __dst[0];
        v304 = (unint64_t)__dst[0] + v302;
        if ((char *)__dst[0] + v302 <= (void *)((v642 - v641[0]) >> 4))
        {
          v306 = v297;
        }
        else
        {
          if (v304 >> 60)
            abort();
          v305 = (char *)operator new(16 * v304);
          v306 = &v305[16 * v302];
          v307 = v306;
          if (v297 != v301)
          {
            v308 = v306;
            do
            {
              v307 = v308 - 16;
              v296 = *((float64x2_t *)v297 - 1);
              *((float64x2_t *)v308 - 1) = v296;
              v297 -= 16;
              v308 -= 16;
            }
            while (v297 != v301);
          }
          v641[0] = v307;
          v641[1] = v306;
          v642 = &v305[16 * v304];
          if (v301)
          {
            operator delete(v301);
            v303 = __dst[0];
          }
        }
        if (v303)
        {
          v309 = 0;
          while (1)
          {
            v310 = (float *)&v300[v309];
            v296.f64[0] = *v310 + v193;
            v311 = v296.f64[0] * v292;
            v312 = (v310[1] - v291) * v292 + 1.0;
            if (v306 < v642)
            {
              *(double *)v306 = v311;
              *((double *)v306 + 1) = v312;
              v297 = v306 + 16;
            }
            else
            {
              v313 = v641[0];
              v314 = (v306 - v641[0]) >> 4;
              v315 = v314 + 1;
              if ((unint64_t)(v314 + 1) >> 60)
                abort();
              v316 = v642 - v641[0];
              if ((v642 - v641[0]) >> 3 > v315)
                v315 = v316 >> 3;
              if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF0)
                v317 = 0xFFFFFFFFFFFFFFFLL;
              else
                v317 = v315;
              if (v317)
              {
                if (v317 >> 60)
                  goto LABEL_781;
                v318 = (char *)operator new(16 * v317);
              }
              else
              {
                v318 = 0;
              }
              v319 = &v318[16 * v314];
              *(double *)v319 = v311;
              *((double *)v319 + 1) = v312;
              v320 = v319;
              if (v306 != v313)
              {
                do
                {
                  v296 = *((float64x2_t *)v306 - 1);
                  *((float64x2_t *)v320 - 1) = v296;
                  v320 -= 16;
                  v306 -= 16;
                }
                while (v306 != v313);
                v306 = v641[0];
              }
              v297 = v319 + 16;
              v641[0] = v320;
              v641[1] = v319 + 16;
              v642 = &v318[16 * v317];
              if (v306)
              {
                operator delete(v306);
                v303 = __dst[0];
              }
            }
            v641[1] = v297;
            ++v309;
            v306 = v297;
            if (v309 >= (unint64_t)v303)
              goto LABEL_422;
          }
        }
        v297 = v306;
LABEL_422:
        ++v298;
        v294 = v299;
      }
      while (v298 < *((unsigned int *)v299 + 25));
    }
    v321 = v632;
    v322 = __sa;
    v323 = &__sa[152 * (_QWORD)v632];
    v325 = *((_QWORD *)v323 + 14);
    v324 = (void **)(v323 + 112);
    if (!v325)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v326 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v326, OS_LOG_TYPE_ERROR))
      {
        v327 = v294;
        v613 = *v324;
        v328 = *(void **)(v620 + 144 * v618 + 104);
        v329 = *(char **)&__sa[152 * (_QWORD)v632 + 104];
        v330 = *(_QWORD *)geo::codec::VectorTile::key(*v638);
        v331 = geo::codec::VectorTile::key(*v638);
        v332 = *(unsigned __int8 *)(v331 + 10);
        v333 = *(unsigned __int16 *)(v331 + 8);
        v334 = *(_QWORD *)v331;
        v335 = *(_DWORD *)geo::codec::VectorTile::key(*v638);
        LODWORD(__dst[0]) = 134219264;
        *(void **)((char *)__dst + 4) = v613;
        WORD2(__dst[1]) = 2048;
        *(void **)((char *)&__dst[1] + 6) = v328;
        HIWORD(__dst[2]) = 2048;
        v673 = v329;
        LOWORD(v674) = 1024;
        *(_DWORD *)((char *)&v674 + 2) = (v330 >> 14) & 0x3FFFFFF;
        HIWORD(v674) = 1024;
        LODWORD(v675[0]) = ((v334 >> 40) | ((v333 | (v332 << 16)) << 24)) & 0x3FFFFFF;
        WORD2(v675[0]) = 1024;
        *(_DWORD *)((char *)v675 + 6) = (v335 >> 8) & 0x3F;
        _os_log_impl(&dword_19F029000, v326, OS_LOG_TYPE_ERROR, "Invalid venue building feature id (%llu). Venue id: %llu, building id: %llu, tile key (%u.%u.%u)", (uint8_t *)__dst, 0x32u);
        v321 = v632;
        v322 = __sa;
        v294 = v327;
      }

    }
    if (v294[75])
      v336 = *((_QWORD *)v294 + 6);
    else
      v336 = 0;
    v337 = &v322[152 * (_QWORD)v321];
    v339 = *((float *)v337 + 31);
    v338 = *((float *)v337 + 32);
    memset(__dst, 0, sizeof(__dst));
    geo::ConvexHull2<double>::getConvexHullPoints((double **)v641, __dst, v296);
    v340 = v322;
    v341 = (v339 + v193) * v292;
    v342 = (v338 - v291) * v292 + 1.0;
    v343 = (__int128 *)(v337 + 104);
    v344 = (uint64_t *)(v620 + 144 * v618 + 104);
    v345 = &v340[152 * (_QWORD)v321];
    v346 = (__int16 *)(v345 + 120);
    v347 = v345 + 132;
    v348 = (float *)(v345 + 136);
    v350 = v626[1].u64[1];
    v349 = v626[2].u64[0];
    if (v350 >= v349)
    {
      v361 = v626[1].i64[0];
      v362 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v350 - v361) >> 3);
      v363 = v362 + 1;
      if (v362 + 1 > 0x222222222222222)
        abort();
      v364 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v349 - v361) >> 3);
      if (2 * v364 > v363)
        v363 = 2 * v364;
      if (v364 >= 0x111111111111111)
        v365 = 0x222222222222222;
      else
        v365 = v363;
      if (v365)
      {
        if (v365 > 0x222222222222222)
          goto LABEL_781;
        v366 = (char *)operator new(120 * v365);
      }
      else
      {
        v366 = 0;
      }
      v367 = *v344;
      v368 = *v346;
      v369 = &v366[120 * v362];
      v370 = *v347;
      v371 = *v348;
      v372 = *v343;
      *(_QWORD *)v369 = 0;
      *((_QWORD *)v369 + 1) = 0;
      *((_QWORD *)v369 + 2) = 0;
      *(_OWORD *)(v369 + 24) = v372;
      *((_QWORD *)v369 + 5) = v367;
      *((_QWORD *)v369 + 6) = v336;
      *((_WORD *)v369 + 28) = v368;
      *((double *)v369 + 8) = v341;
      *((double *)v369 + 9) = v342;
      *((_QWORD *)v369 + 11) = 0;
      *((_QWORD *)v369 + 12) = 0;
      v373 = __dst[0];
      v374 = (char *)__dst[1];
      v375 = ((char *)__dst[1] - (char *)__dst[0]) >> 4;
      *((_QWORD *)v369 + 10) = 0;
      std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v369 + 80), (unint64_t)v373, v374, v375);
      v369[104] = v370;
      *((double *)v369 + 14) = v371;
      v377 = v626[1].i64[0];
      v376 = v626[1].u64[1];
      if (v376 == v377)
      {
        v385 = vdupq_n_s64(v376);
        v384 = v369;
      }
      else
      {
        v378 = 0;
        do
        {
          v379 = &v369[v378];
          v380 = v376 + v378;
          *((_QWORD *)v379 - 15) = 0;
          *((_QWORD *)v379 - 14) = 0;
          *((_QWORD *)v379 - 13) = 0;
          *(_OWORD *)(v379 - 120) = *(_OWORD *)(v376 + v378 - 120);
          *((_QWORD *)v379 - 13) = *(_QWORD *)(v376 + v378 - 104);
          *(_QWORD *)(v380 - 120) = 0;
          *(_QWORD *)(v380 - 112) = 0;
          *(_QWORD *)(v380 - 104) = 0;
          v381 = *(_OWORD *)(v376 + v378 - 96);
          v382 = *(_OWORD *)(v376 + v378 - 64);
          v383 = *(_QWORD *)(v376 + v378 - 48);
          *((_OWORD *)v379 - 5) = *(_OWORD *)(v376 + v378 - 80);
          *((_OWORD *)v379 - 4) = v382;
          *((_OWORD *)v379 - 6) = v381;
          *((_QWORD *)v379 - 6) = v383;
          *((_QWORD *)v379 - 5) = 0;
          *((_QWORD *)v379 - 4) = 0;
          *((_QWORD *)v379 - 3) = 0;
          *(_OWORD *)(v379 - 40) = *(_OWORD *)(v376 + v378 - 40);
          *((_QWORD *)v379 - 3) = *(_QWORD *)(v376 + v378 - 24);
          *(_QWORD *)(v380 - 40) = 0;
          *(_QWORD *)(v380 - 32) = 0;
          *(_QWORD *)(v380 - 24) = 0;
          *((_OWORD *)v379 - 1) = *(_OWORD *)(v376 + v378 - 16);
          v378 -= 120;
        }
        while (v376 + v378 != v377);
        v384 = &v369[v378];
        v385 = v626[1];
      }
      v386 = &v366[120 * v365];
      v387 = v369 + 120;
      v626[1].i64[0] = (uint64_t)v384;
      v626[1].i64[1] = (uint64_t)(v369 + 120);
      v626[2].i64[0] = (uint64_t)v386;
      v389 = v385.i64[1];
      v388 = (void **)v385.i64[0];
      v293 = v638;
      if (v385.i64[1] != v385.i64[0])
      {
        do
        {
          v391 = *(void **)(v389 - 40);
          if (v391)
          {
            *(_QWORD *)(v389 - 32) = v391;
            operator delete(v391);
          }
          v392 = (void **)(v389 - 120);
          v393 = *(_QWORD *)(v389 - 120);
          if (v393)
          {
            v394 = *(_QWORD *)(v389 - 112);
            v390 = *(void **)(v389 - 120);
            if (v394 != v393)
            {
              do
              {
                v395 = *(_QWORD *)(v394 - 40);
                if (v395)
                {
                  v396 = *(_QWORD *)(v394 - 32);
                  v397 = *(void **)(v394 - 40);
                  if (v396 != v395)
                  {
                    do
                    {
                      v398 = *(void **)(v396 - 24);
                      if (v398)
                      {
                        *(_QWORD *)(v396 - 16) = v398;
                        operator delete(v398);
                      }
                      v396 -= 40;
                    }
                    while (v396 != v395);
                    v397 = *(void **)(v394 - 40);
                  }
                  *(_QWORD *)(v394 - 32) = v395;
                  operator delete(v397);
                }
                v293 = v638;
                if (*(_BYTE *)(v394 - 72))
                {
                  if (*(char *)(v394 - 41) < 0)
                    operator delete(*(void **)(v394 - 64));
                  *(_BYTE *)(v394 - 72) = 0;
                }
                if (*(_BYTE *)(v394 - 104))
                {
                  if (*(char *)(v394 - 73) < 0)
                    operator delete(*(void **)(v394 - 96));
                  *(_BYTE *)(v394 - 104) = 0;
                }
                if (*(_BYTE *)(v394 - 136))
                {
                  if (*(char *)(v394 - 105) < 0)
                    operator delete(*(void **)(v394 - 128));
                  *(_BYTE *)(v394 - 136) = 0;
                }
                if (*(_BYTE *)(v394 - 168))
                {
                  if (*(char *)(v394 - 137) < 0)
                    operator delete(*(void **)(v394 - 160));
                  *(_BYTE *)(v394 - 168) = 0;
                }
                v394 -= 184;
              }
              while (v394 != v393);
              v390 = *v392;
            }
            *(_QWORD *)(v389 - 112) = v393;
            operator delete(v390);
          }
          v389 -= 120;
        }
        while (v392 != v388);
      }
      if (v388)
        operator delete(v388);
      v357 = __dst[0];
      v360 = (char *)v632;
      v626[1].i64[1] = (uint64_t)v387;
      if (v357)
LABEL_462:
        operator delete(v357);
    }
    else
    {
      v351 = *v344;
      v352 = *v346;
      v353 = *v347;
      v354 = *v348;
      v355 = *v343;
      *(_QWORD *)v350 = 0;
      *(_QWORD *)(v350 + 8) = 0;
      *(_QWORD *)(v350 + 16) = 0;
      *(_OWORD *)(v350 + 24) = v355;
      *(_QWORD *)(v350 + 40) = v351;
      *(_QWORD *)(v350 + 48) = v336;
      *(_WORD *)(v350 + 56) = v352;
      *(double *)(v350 + 64) = v341;
      *(double *)(v350 + 72) = v342;
      *(_QWORD *)(v350 + 88) = 0;
      *(_QWORD *)(v350 + 96) = 0;
      v357 = __dst[0];
      v356 = (char *)__dst[1];
      v358 = ((char *)__dst[1] - (char *)__dst[0]) >> 4;
      *(_QWORD *)(v350 + 80) = 0;
      std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(v350 + 80, (unint64_t)v357, v356, v358);
      *(_BYTE *)(v350 + 104) = v353;
      *(double *)(v350 + 112) = v354;
      v359 = v350 + 120;
      v626[1].i64[1] = v359;
      v293 = v638;
      v360 = (char *)v632;
      v626[1].i64[1] = v359;
      if (v357)
        goto LABEL_462;
    }
    if (v641[0])
      operator delete(v641[0]);
    v290 = v360 + 1;
    if (v290 != (void *)v615)
      continue;
    break;
  }
  v399 = v615;
  if (v615 >> 61)
    abort();
  v400 = (char *)operator new(8 * v615);
  v401 = 0;
  v402 = v669[0];
  v403 = v400;
  v404 = &v400[8 * v615];
  while (2)
  {
    v406 = geo::codec::VectorTile::venueBuildings(*v638);
    v407 = v402[2 * *(_QWORD *)(v406 + 152 * v401 + 144)];
    v409 = *(_QWORD *)(v407 + 16);
    v408 = *(_QWORD *)(v407 + 24);
    if (v409 != v408)
    {
      while (*(_QWORD *)(v409 + 24) != *(_QWORD *)(v406 + 152 * v401 + 104))
      {
        v409 += 120;
        if (v409 == v408)
        {
          v409 = v408;
          break;
        }
      }
    }
    if (v403 < v404)
    {
      *(_QWORD *)v403 = v409;
      v405 = v403 + 8;
      v14 = v636;
      goto LABEL_521;
    }
    v410 = v403 - v400;
    v411 = (v403 - v400) >> 3;
    v412 = v411 + 1;
    v633 = v400;
    if ((unint64_t)(v411 + 1) >> 61)
      abort();
    if ((v404 - v400) >> 2 > v412)
      v412 = (v404 - v400) >> 2;
    if ((unint64_t)(v404 - v400) >= 0x7FFFFFFFFFFFFFF8)
      v413 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v413 = v412;
    if (v413)
    {
      if (v413 >> 61)
        goto LABEL_781;
      v414 = operator new(8 * v413);
    }
    else
    {
      v414 = 0;
    }
    v415 = &v414[8 * v411];
    v404 = &v414[8 * v413];
    *(_QWORD *)v415 = v409;
    v405 = v415 + 8;
    if (v403 == v633)
    {
      v14 = v636;
      v399 = v615;
      goto LABEL_544;
    }
    v416 = v403 - 8 - v633;
    v14 = v636;
    if (v416 < 0x168
      || &v414[v410 - 8 - (v416 & 0xFFFFFFFFFFFFFFF8)] > &v414[v410 - 8]
      || &v403[-(v416 & 0xFFFFFFFFFFFFFFF8) - 8] > v403 - 8
      || (unint64_t)(v403 - &v414[v410]) < 0x20)
    {
      v417 = v403;
      v399 = v615;
      do
      {
LABEL_540:
        v418 = *((_QWORD *)v417 - 1);
        v417 -= 8;
        *((_QWORD *)v415 - 1) = v418;
        v415 -= 8;
      }
      while (v417 != v633);
      goto LABEL_541;
    }
    v419 = (v416 >> 3) + 1;
    v417 = &v403[-8 * (v419 & 0x3FFFFFFFFFFFFFFCLL)];
    v420 = &v414[8 * v411 - 16];
    v421 = v403 - 16;
    v422 = v419 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v423 = *(_OWORD *)v421;
      *(v420 - 1) = *((_OWORD *)v421 - 1);
      *v420 = v423;
      v420 -= 2;
      v421 -= 32;
      v422 -= 4;
    }
    while (v422);
    v415 -= 8 * (v419 & 0x3FFFFFFFFFFFFFFCLL);
    v399 = v615;
    if (v419 != (v419 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_540;
LABEL_541:
    if (v633)
LABEL_544:
      operator delete(v633);
    v400 = v415;
LABEL_521:
    ++v401;
    v403 = v405;
    if (v401 != v399)
      continue;
    break;
  }
  v424 = geo::codec::VectorTile::venueLevelsCount(*v638);
  if (v424)
  {
    v425 = 0;
    __sb = v424;
    while (1)
    {
      v634 = v400;
      v428 = (_QWORD *)(geo::codec::VectorTile::venueLevels(*v638) + ((_QWORD)v425 << 6));
      v429 = *(md::VenueLevel ***)&v400[8 * v428[7]];
      __dst[0] = 0;
      v641[0] = 0;
      *(_QWORD *)&v679 = 0;
      v430 = (const char **)(v428 + 3);
      geo::codec::vectorTileGetLocalizedLabelForNativeLabel(v638, v428[3], __dst, &v679);
      v431 = (const char **)(v428 + 4);
      geo::codec::vectorTileGetLocalizedLabelForNativeLabel(v638, v428[4], v641, &v679);
      v432 = (__int16 *)(v428 + 1);
      v433 = (char *)(v428 + 5);
      v434 = (float *)v428 + 11;
      v435 = v429[1];
      v436 = (unint64_t)v429[2];
      if ((unint64_t)v435 < v436)
      {
        v426 = (md::VenueLevel *)((char *)md::VenueLevel::VenueLevel(v435, *v428, *v432, *v430, *v431, (const char *)__dst[0], v641[0], *v433, *v434)+ 184);
        v429[1] = v426;
        v14 = v636;
      }
      else
      {
        v437 = 0xD37A6F4DE9BD37A7 * ((v435 - *v429) >> 3);
        v438 = v437 + 1;
        if (v437 + 1 > 0x1642C8590B21642)
          abort();
        v439 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v436 - (_QWORD)*v429) >> 3);
        if (2 * v439 > v438)
          v438 = 2 * v439;
        if (v439 >= 0xB21642C8590B21)
          v440 = 0x1642C8590B21642;
        else
          v440 = v438;
        if (v440)
        {
          if (v440 > 0x1642C8590B21642)
            goto LABEL_781;
          v441 = (char *)operator new(184 * v440);
          v432 = (__int16 *)(v428 + 1);
        }
        else
        {
          v441 = 0;
        }
        v442 = (md::VenueLevel *)&v441[184 * v437];
        v443 = (md::VenueLevel *)&v441[184 * v440];
        v444 = md::VenueLevel::VenueLevel(v442, *v428, *v432, *v430, *v431, (const char *)__dst[0], v641[0], *v433, *v434);
        v426 = (md::VenueLevel *)((char *)v444 + 184);
        v445 = *v429;
        v446 = v429[1];
        if (v446 != *v429)
        {
          v447 = v443;
          v448 = 0;
          v400 = v634;
          do
          {
            v451 = (char *)v444 + v448;
            v452 = (char *)v446 + v448;
            v453 = *(_QWORD *)((char *)v446 + v448 - 184);
            *((_WORD *)v451 - 88) = *(_WORD *)((char *)v446 + v448 - 176);
            *((_QWORD *)v451 - 23) = v453;
            *(v451 - 168) = 0;
            if (*((_BYTE *)v446 + v448 - 168))
            {
              v454 = *((_OWORD *)v452 - 10);
              *((_QWORD *)v451 - 18) = *((_QWORD *)v452 - 18);
              *((_OWORD *)v451 - 10) = v454;
              *((_QWORD *)v452 - 19) = 0;
              *((_QWORD *)v452 - 18) = 0;
              *((_QWORD *)v452 - 20) = 0;
              *(v451 - 168) = 1;
            }
            *(v451 - 136) = 0;
            if (*(v452 - 136))
            {
              v455 = (char *)v444 + v448;
              v456 = (char *)v446 + v448;
              v457 = *(_OWORD *)((char *)v446 + v448 - 128);
              *((_QWORD *)v455 - 14) = *(_QWORD *)((char *)v446 + v448 - 112);
              *((_OWORD *)v455 - 8) = v457;
              *((_QWORD *)v456 - 15) = 0;
              *((_QWORD *)v456 - 14) = 0;
              *((_QWORD *)v456 - 16) = 0;
              *(v451 - 136) = 1;
            }
            v458 = (char *)v444 + v448;
            v459 = (char *)v446 + v448;
            *((_BYTE *)v444 + v448 - 104) = 0;
            if (*((_BYTE *)v446 + v448 - 104))
            {
              v460 = *((_OWORD *)v459 - 6);
              *((_QWORD *)v458 - 10) = *((_QWORD *)v459 - 10);
              *((_OWORD *)v458 - 6) = v460;
              *((_QWORD *)v459 - 11) = 0;
              *((_QWORD *)v459 - 10) = 0;
              *((_QWORD *)v459 - 12) = 0;
              *(v458 - 104) = 1;
            }
            *(v458 - 72) = 0;
            if (*(v459 - 72))
            {
              v461 = (char *)v444 + v448;
              v462 = (char *)v446 + v448;
              v463 = *(_OWORD *)((char *)v446 + v448 - 64);
              *((_QWORD *)v461 - 6) = *(_QWORD *)((char *)v446 + v448 - 48);
              *((_OWORD *)v461 - 4) = v463;
              *((_QWORD *)v462 - 7) = 0;
              *((_QWORD *)v462 - 6) = 0;
              *((_QWORD *)v462 - 8) = 0;
              *(v458 - 72) = 1;
            }
            v449 = (char *)v444 + v448;
            v450 = (char *)v446 + v448;
            *((_QWORD *)v449 - 5) = 0;
            *((_QWORD *)v449 - 4) = 0;
            *((_QWORD *)v449 - 3) = 0;
            *(_OWORD *)(v449 - 40) = *(_OWORD *)((char *)v446 + v448 - 40);
            *((_QWORD *)v449 - 3) = *(_QWORD *)((char *)v446 + v448 - 24);
            *((_QWORD *)v450 - 5) = 0;
            *((_QWORD *)v450 - 4) = 0;
            *((_QWORD *)v450 - 3) = 0;
            *((_OWORD *)v449 - 1) = *(_OWORD *)((char *)v446 + v448 - 16);
            v448 -= 184;
          }
          while ((md::VenueLevel *)((char *)v446 + v448) != v445);
          v464 = (md::VenueLevel *)((char *)v444 + v448);
          v446 = *v429;
          v465 = v429[1];
          *v429 = v464;
          v429[1] = v426;
          v429[2] = v447;
          v14 = v636;
          while (v465 != v446)
            md::VenueLevel::~VenueLevel((md::VenueLevel *)((char *)v465 - 184));
          if (!v446)
            goto LABEL_556;
LABEL_584:
          operator delete(v446);
          goto LABEL_556;
        }
        *v429 = v444;
        v429[1] = v426;
        v429[2] = v443;
        v400 = v634;
        v14 = v636;
        if (v446)
          goto LABEL_584;
      }
LABEL_556:
      v429[1] = v426;
      ++v425;
      v427 = __sb;
      if (v425 == (char *)__sb)
      {
        if (__sb >> 61)
          abort();
        v466 = (char *)operator new(8 * __sb);
        v467 = 0;
        v468 = v466;
        v469 = &v466[8 * __sb];
        while (1)
        {
          v471 = geo::codec::VectorTile::venueLevels(*v638);
          v472 = *(_QWORD *)&v400[8 * *(_QWORD *)(v471 + (v467 << 6) + 56)];
          v474 = *(_QWORD **)v472;
          v473 = *(_QWORD **)(v472 + 8);
          if (v474 != v473)
          {
            while (*v474 != *(_QWORD *)(v471 + (v467 << 6)))
            {
              v474 += 23;
              if (v474 == v473)
              {
                v474 = v473;
                break;
              }
            }
          }
          if (v466 >= v469)
            break;
          *(_QWORD *)v466 = v474;
          v470 = v466 + 8;
LABEL_588:
          ++v467;
          v466 = v470;
          if (v467 == v427)
            goto LABEL_621;
        }
        v475 = (v466 - v468) >> 3;
        v476 = v475 + 1;
        if ((unint64_t)(v475 + 1) >> 61)
          abort();
        if ((v469 - v468) >> 2 > v476)
          v476 = (v469 - v468) >> 2;
        if ((unint64_t)(v469 - v468) >= 0x7FFFFFFFFFFFFFF8)
          v477 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v477 = v476;
        if (v477)
        {
          if (v477 >> 61)
            goto LABEL_781;
          v478 = operator new(8 * v477);
        }
        else
        {
          v478 = 0;
        }
        v479 = &v478[8 * v475];
        v469 = &v478[8 * v477];
        *(_QWORD *)v479 = v474;
        v470 = v479 + 8;
        if (v466 != v468)
        {
          v480 = v466 - 8 - v468;
          v400 = v634;
          if (v480 < 0x168
            || &v478[v466 - v468 - 8 - (v480 & 0xFFFFFFFFFFFFFFF8)] > &v478[v466 - v468 - 8]
            || &v466[-(v480 & 0xFFFFFFFFFFFFFFF8) - 8] > v466 - 8
            || (unint64_t)(v468 - v478) < 0x20)
          {
            v481 = v466;
            v14 = v636;
          }
          else
          {
            v483 = (v480 >> 3) + 1;
            v481 = &v466[-8 * (v483 & 0x3FFFFFFFFFFFFFFCLL)];
            v484 = &v478[8 * v475 - 16];
            v485 = (__int128 *)(v466 - 16);
            v486 = v483 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v487 = *v485;
              *(v484 - 1) = *(v485 - 1);
              *v484 = v487;
              v484 -= 2;
              v485 -= 2;
              v486 -= 4;
            }
            while (v486);
            v479 -= 8 * (v483 & 0x3FFFFFFFFFFFFFFCLL);
            v14 = v636;
            if (v483 == (v483 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_608:
              if (!v468)
                goto LABEL_612;
              goto LABEL_611;
            }
          }
          do
          {
            v482 = *((_QWORD *)v481 - 1);
            v481 -= 8;
            *((_QWORD *)v479 - 1) = v482;
            v479 -= 8;
          }
          while (v481 != v468);
          goto LABEL_608;
        }
        v468 = v466;
        v400 = v634;
        v14 = v636;
LABEL_611:
        operator delete(v468);
LABEL_612:
        v468 = v479;
        v427 = __sb;
        goto LABEL_588;
      }
    }
  }
  v468 = 0;
LABEL_621:
  v635 = v400;
  v488 = geo::codec::VectorTile::venueComponentsCount(*v638);
  v489 = v488;
  if (v488)
  {
    v490 = 0;
    v627 = v488;
    while (1)
    {
      v492 = geo::codec::VectorTile::venueComponents(*v638);
      v493 = v492 + 56 * v490;
      v494 = *(_BYTE *)(v493 + 32)
           ? *(_QWORD *)(geo::codec::VectorTile::pois(*v638) + 224 * *(_QWORD *)(v492 + 56 * v490 + 40) + 40)
           : 0;
      v495 = *(_QWORD **)&v468[8 * *(_QWORD *)(v492 + 56 * v490 + 48)];
      v497 = (_QWORD *)v495[19];
      v496 = v495[20];
      if ((unint64_t)v497 >= v496)
        break;
      *v497 = *(_QWORD *)v493;
      v497[1] = v494;
      v497[3] = 0;
      v497[4] = 0;
      v497[2] = 0;
      v491 = v497 + 5;
LABEL_624:
      v495[19] = v491;
      if (++v490 == v489)
      {
        if (v489 >> 61)
          abort();
        v14 = v636;
        v510 = (char *)operator new(8 * v489);
        v511 = 0;
        v512 = v510;
        v513 = &v510[8 * v489];
        while (1)
        {
          v515 = geo::codec::VectorTile::venueComponents(*v638);
          v516 = *(_QWORD *)&v468[8 * *(_QWORD *)(v515 + 56 * v511 + 48)];
          v518 = *(_QWORD **)(v516 + 144);
          v517 = *(_QWORD **)(v516 + 152);
          if (v518 != v517)
          {
            while (*v518 != *(_QWORD *)(v515 + 56 * v511))
            {
              v518 += 5;
              if (v518 == v517)
              {
                v518 = v517;
                break;
              }
            }
          }
          if (v510 >= v513)
            break;
          *(_QWORD *)v510 = v518;
          v514 = v510 + 8;
LABEL_654:
          ++v511;
          v510 = v514;
          if (v511 == v489)
            goto LABEL_687;
        }
        v519 = (v510 - v512) >> 3;
        v520 = v519 + 1;
        if ((unint64_t)(v519 + 1) >> 61)
          abort();
        if ((v513 - v512) >> 2 > v520)
          v520 = (v513 - v512) >> 2;
        if ((unint64_t)(v513 - v512) >= 0x7FFFFFFFFFFFFFF8)
          v521 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v521 = v520;
        if (v521)
        {
          if (v521 >> 61)
            goto LABEL_781;
          v522 = operator new(8 * v521);
        }
        else
        {
          v522 = 0;
        }
        v523 = &v522[8 * v519];
        v513 = &v522[8 * v521];
        *(_QWORD *)v523 = v518;
        v514 = v523 + 8;
        if (v510 != v512)
        {
          v524 = v510 - 8 - v512;
          if (v524 < 0x168
            || &v522[v510 - v512 - 8 - (v524 & 0xFFFFFFFFFFFFFFF8)] > &v522[v510 - v512 - 8]
            || &v510[-(v524 & 0xFFFFFFFFFFFFFFF8) - 8] > v510 - 8
            || (unint64_t)(v512 - v522) < 0x20)
          {
            v525 = v510;
            v489 = v627;
          }
          else
          {
            v527 = (v524 >> 3) + 1;
            v525 = &v510[-8 * (v527 & 0x3FFFFFFFFFFFFFFCLL)];
            v528 = &v522[8 * v519 - 16];
            v529 = (__int128 *)(v510 - 16);
            v530 = v527 & 0x3FFFFFFFFFFFFFFCLL;
            v489 = v627;
            do
            {
              v531 = *v529;
              *(v528 - 1) = *(v529 - 1);
              *v528 = v531;
              v528 -= 2;
              v529 -= 2;
              v530 -= 4;
            }
            while (v530);
            v523 -= 8 * (v527 & 0x3FFFFFFFFFFFFFFCLL);
            if (v527 == (v527 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_674:
              if (!v512)
                goto LABEL_678;
              goto LABEL_677;
            }
          }
          do
          {
            v526 = *((_QWORD *)v525 - 1);
            v525 -= 8;
            *((_QWORD *)v523 - 1) = v526;
            v523 -= 8;
          }
          while (v525 != v512);
          goto LABEL_674;
        }
        v512 = v510;
        v489 = v627;
LABEL_677:
        operator delete(v512);
LABEL_678:
        v512 = v523;
        v14 = v636;
        goto LABEL_654;
      }
    }
    v498 = (_QWORD *)v495[18];
    v499 = 0xCCCCCCCCCCCCCCCDLL * (v497 - v498) + 1;
    if (v499 > 0x666666666666666)
      abort();
    v500 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v496 - (_QWORD)v498) >> 3);
    if (2 * v500 > v499)
      v499 = 2 * v500;
    if (v500 >= 0x333333333333333)
      v501 = 0x666666666666666;
    else
      v501 = v499;
    if (v501)
    {
      if (v501 > 0x666666666666666)
        goto LABEL_781;
      v502 = (char *)operator new(40 * v501);
    }
    else
    {
      v502 = 0;
    }
    v503 = &v502[8 * (v497 - v498)];
    *(_QWORD *)v503 = *(_QWORD *)v493;
    *((_QWORD *)v503 + 1) = v494;
    *((_QWORD *)v503 + 3) = 0;
    *((_QWORD *)v503 + 4) = 0;
    v504 = &v502[40 * v501];
    *((_QWORD *)v503 + 2) = 0;
    v491 = v503 + 40;
    if (v497 == v498)
    {
      v495[18] = v503;
      v495[19] = v491;
      v495[20] = v504;
    }
    else
    {
      v505 = 0;
      do
      {
        v506 = &v503[v505 * 8];
        v507 = &v497[v505];
        *(_OWORD *)(v506 - 40) = *(_OWORD *)&v497[v505 - 5];
        *((_QWORD *)v506 - 2) = 0;
        *((_QWORD *)v506 - 1) = 0;
        *(_OWORD *)(v506 - 24) = *(_OWORD *)&v497[v505 - 3];
        *((_QWORD *)v506 - 1) = v497[v505 - 1];
        *(v507 - 3) = 0;
        *(v507 - 2) = 0;
        *(v507 - 1) = 0;
        v505 -= 5;
      }
      while (&v497[v505] != v498);
      v497 = (_QWORD *)v495[18];
      v508 = (_QWORD *)v495[19];
      v495[18] = &v503[v505 * 8];
      v495[19] = v491;
      v495[20] = v504;
      if (v508 != v497)
      {
        v489 = v627;
        do
        {
          v509 = (void *)*(v508 - 3);
          if (v509)
          {
            *(v508 - 2) = v509;
            operator delete(v509);
          }
          v508 -= 5;
        }
        while (v508 != v497);
        goto LABEL_649;
      }
    }
    v489 = v627;
LABEL_649:
    if (v497)
      operator delete(v497);
    goto LABEL_624;
  }
  v512 = 0;
LABEL_687:
  v532 = geo::codec::VectorTile::polygonsCount(*v638);
  v533 = v532;
  v534 = v635;
  if (v532)
  {
    v535 = 0;
    v628 = v532;
    while (2)
    {
      v537 = geo::codec::VectorTile::polygons(*v638) + (v535 << 7);
      if (*(_BYTE *)(v537 + 127) != 2)
        goto LABEL_691;
      v538 = *(_QWORD **)&v512[8 * *(unsigned int *)(v537 + 120)];
      v539 = *(_QWORD *)(v537 + 40);
      v541 = (char *)v538[3];
      v540 = v538[4];
      if ((unint64_t)v541 < v540)
      {
        *(_QWORD *)v541 = v539;
        v536 = v541 + 8;
        v14 = v636;
      }
      else
      {
        v542 = (char *)v538[2];
        v543 = (v541 - v542) >> 3;
        v544 = v543 + 1;
        if ((unint64_t)(v543 + 1) >> 61)
          abort();
        v545 = v540 - (_QWORD)v542;
        if (v545 >> 2 > v544)
          v544 = v545 >> 2;
        if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFF8)
          v546 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v546 = v544;
        if (v546)
        {
          if (v546 >> 61)
            goto LABEL_781;
          v547 = v546;
          v548 = operator new(8 * v546);
          v546 = v547;
        }
        else
        {
          v548 = 0;
        }
        v549 = &v548[8 * v543];
        *v549 = v539;
        v536 = v549 + 1;
        if (v541 == v542)
        {
          v534 = v635;
        }
        else
        {
          v550 = v541 - v542 - 8;
          if (v550 < 0x58)
          {
            v534 = v635;
            goto LABEL_712;
          }
          v534 = v635;
          if ((unint64_t)(v542 - v548) < 0x20)
            goto LABEL_806;
          v551 = (v550 >> 3) + 1;
          v552 = &v548[8 * v543 - 16];
          v553 = v541 - 16;
          v554 = v551 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v555 = *(_OWORD *)v553;
            *(v552 - 1) = *((_OWORD *)v553 - 1);
            *v552 = v555;
            v552 -= 2;
            v553 -= 32;
            v554 -= 4;
          }
          while (v554);
          v549 -= v551 & 0x3FFFFFFFFFFFFFFCLL;
          v541 -= 8 * (v551 & 0x3FFFFFFFFFFFFFFCLL);
          if (v551 != (v551 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_806:
            do
            {
LABEL_712:
              v556 = *((_QWORD *)v541 - 1);
              v541 -= 8;
              *--v549 = v556;
            }
            while (v541 != v542);
          }
        }
        v538[2] = v549;
        v538[3] = v536;
        v538[4] = &v548[8 * v546];
        if (v542)
          operator delete(v542);
        v14 = v636;
        v533 = v628;
      }
      v538[3] = v536;
LABEL_691:
      if (++v535 == v533)
        break;
      continue;
    }
  }
  if (v512)
    operator delete(v512);
  if (v468)
    operator delete(v468);
  if (v534)
    operator delete(v534);
LABEL_722:
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v14 + 3) + 32))(__dst, *((_QWORD *)v14 + 3), *((unsigned __int16 *)v14 + 292));
  v557 = HIDWORD(__dst[0]);
  v558 = operator new();
  md::MapTileData::MapTileData(v558, a2, (uint64_t)v659, (uint64_t)v638, 1);
  *(_QWORD *)(v558 + 720) = 0;
  *(_QWORD *)(v558 + 736) = 0;
  *(_QWORD *)(v558 + 728) = 0;
  *(_DWORD *)(v558 + 744) = v557;
  *(_QWORD *)v558 = &off_1E428EC70;
  *(_QWORD *)(v558 + 632) = &unk_1E428ECB8;
  *(_QWORD *)(v558 + 752) = 0;
  *(_QWORD *)(v558 + 768) = 0;
  *(_QWORD *)(v558 + 760) = 0;
  std::vector<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>((_QWORD *)(v558 + 752), (uint64_t)v657[0], (uint64_t)v657[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v657[1] - (char *)v657[0]) >> 3));
  *(_QWORD *)(v558 + 792) = 0;
  *(_OWORD *)(v558 + 776) = 0u;
  v559 = (void **)v655[0];
  v560 = (void **)v655[1];
  v561 = (char *)v655[1] - (char *)v655[0];
  if (v655[1] != v655[0])
  {
    v562 = 0x8E38E38E38E38E39 * (v561 >> 3);
    if (v562 > 0x38E38E38E38E38ELL)
      abort();
    v563 = (char *)operator new(v561);
    *(_QWORD *)(v558 + 776) = v563;
    *(_QWORD *)(v558 + 784) = v563;
    v637 = v559;
    *(_QWORD *)(v558 + 792) = &v563[72 * v562];
    v564 = v559;
    v565 = v563;
    do
    {
      *(_QWORD *)v565 = 0;
      *((_QWORD *)v565 + 1) = 0;
      *((_QWORD *)v565 + 2) = 0;
      v566 = (uint64_t)*v564;
      v567 = v564[1];
      v568 = v567 - (_BYTE *)*v564;
      if (v567 != *v564)
      {
        v569 = 0x8E38E38E38E38E39 * (v568 >> 4);
        if (v569 > 0x1C71C71C71C71C7)
          abort();
        v570 = (char *)operator new(v568);
        *(_QWORD *)v565 = v570;
        *((_QWORD *)v565 + 1) = v570;
        *((_QWORD *)v565 + 2) = &v570[144 * v569];
        do
        {
          v571 = (_QWORD *)ggl::Mesh::Mesh((uint64_t)v570, v566);
          *v571 = &off_1E42B5CC8;
          v571[2] = &unk_1E42B5CE8;
          v566 += 144;
          v570 = (char *)(v571 + 18);
        }
        while ((_BYTE *)v566 != v567);
        *((_QWORD *)v565 + 1) = v570;
      }
      *((_QWORD *)v565 + 3) = v564[3];
      v572 = (char *)v564[4];
      *((_QWORD *)v565 + 4) = v572;
      if (v572)
      {
        v573 = (unint64_t *)(v572 + 8);
        do
          v574 = __ldxr(v573);
        while (__stxr(v574 + 1, v573));
      }
      *((_QWORD *)v565 + 5) = v564[5];
      v575 = (char *)v564[6];
      *((_QWORD *)v565 + 6) = v575;
      if (v575)
      {
        v576 = (unint64_t *)(v575 + 8);
        do
          v577 = __ldxr(v576);
        while (__stxr(v577 + 1, v576));
      }
      *(_OWORD *)(v565 + 56) = *(_OWORD *)(v564 + 7);
      v564 += 9;
      v565 += 72;
    }
    while (v564 != v560);
    v559 = v637;
    *(_QWORD *)(v558 + 784) = v565;
  }
  *(_QWORD *)(v558 + 816) = 0;
  *(_OWORD *)(v558 + 800) = 0u;
  v578 = v669[0];
  v579 = v669[1];
  v580 = (char *)v669[1] - (char *)v669[0];
  if (v669[1] != v669[0])
  {
    if (v580 < 0)
      abort();
    v581 = operator new((char *)v669[1] - (char *)v669[0]);
    *(_QWORD *)(v558 + 800) = v581;
    *(_QWORD *)(v558 + 808) = v581;
    *(_QWORD *)(v558 + 816) = &v581[2 * (v580 >> 4)];
    v582 = v578;
    do
    {
      *v581 = *v582;
      v583 = v582[1];
      v581[1] = v583;
      if (v583)
      {
        v584 = (unint64_t *)(v583 + 8);
        do
          v585 = __ldxr(v584);
        while (__stxr(v585 + 1, v584));
      }
      v582 += 2;
      v581 += 2;
    }
    while (v582 != v579);
    *(_QWORD *)(v558 + 808) = v581;
  }
  v586 = 1 << *(_BYTE *)(v558 + 169);
  v587 = 1.0 / (double)v586;
  v588 = exp(v587 * 6.28318531 * ((double)(v586 + ~*(_DWORD *)(v558 + 172)) + 0.5) + -3.14159265);
  v589 = atan(v588) * 114.591559 + -90.0;
  v590 = cos(v589 * 0.034906585) * -559.82 + 111132.92;
  v591 = v590 + cos(v589 * 0.0698131701) * 1.175;
  v592 = v591 + cos(v589 * 0.104719755) * -0.0023;
  v593 = v589 * 0.00872664626;
  v594 = tan(v589 * 0.00872664626 + 0.78103484);
  v595 = log(v594);
  v596 = tan(v593 + 0.789761487);
  v597 = log(v596);
  __dst[0] = 0;
  *(double *)v641 = v592 * v587 / fabs((v597 - v595) * 0.159154943);
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)(v558 + 168), (double *)__dst, (double *)v641);
  v598 = (_QWORD *)operator new();
  *v598 = &off_1E42E6C30;
  v598[1] = 0;
  v598[2] = 0;
  v598[3] = v558;
  *a4 = v558;
  a4[1] = (uint64_t)v598;
  if (v578)
  {
    if (v579 != v578)
    {
      do
      {
        v599 = (std::__shared_weak_count *)*(v579 - 1);
        if (v599)
        {
          v600 = (unint64_t *)&v599->__shared_owners_;
          do
            v601 = __ldaxr(v600);
          while (__stlxr(v601 - 1, v600));
          if (!v601)
          {
            ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
            std::__shared_weak_count::__release_weak(v599);
          }
        }
        v579 -= 2;
      }
      while (v579 != v578);
      v578 = v669[0];
      v559 = (void **)v655[0];
    }
    operator delete(v578);
  }
  if (v559)
  {
    std::vector<md::VenueFloorGroup>::__base_destruct_at_end[abi:nn180100]((uint64_t)v655, v559);
    operator delete(v655[0]);
  }
  v602 = (char *)v657[0];
  if (v657[0])
  {
    if (v657[1] != v657[0])
    {
      v603 = (char *)v657[1] - 24;
      v604 = (void (***)(char *))((char *)v657[1] - 24);
      do
      {
        v605 = *v604;
        v604 -= 3;
        (*v605)(v603);
        v62 = v603 == v602;
        v603 = (char *)v604;
      }
      while (!v62);
      v602 = (char *)v657[0];
    }
    operator delete(v602);
  }
  if (v659[0])
    operator delete(v659[0]);
  v606 = v661;
  if (v661)
  {
    v607 = (unint64_t *)&v661->__shared_owners_;
    do
      v608 = __ldaxr(v607);
    while (__stlxr(v608 - 1, v607));
    if (!v608)
    {
      ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
      std::__shared_weak_count::__release_weak(v606);
    }
  }
  v8 = v663;
  if (v663)
  {
LABEL_776:
    v609 = (unint64_t *)&v8->__shared_owners_;
    do
      v610 = __ldaxr(v609);
    while (__stlxr(v610 - 1, v609));
    if (!v610)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19F2C91DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void **v65;

  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](v65);
  ggl::Loader::~Loader((ggl::Loader *)&a60);
  std::unordered_map<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100]((uint64_t)&a65);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a25);

  md::Triangulator<float>::~Triangulator((uint64_t)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::vector<md::VenueFloorGroup>::~vector[abi:nn180100](&a45);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a49);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  md::PolygonRenderResources *v6;

  *a1 = &off_1E4295B98;
  v2 = (std::__shared_weak_count *)a1[59];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  a1[47] = off_1E42A5CF8;
  v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  v6 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v6)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciTrafficRenderLayer::~DaVinciTrafficRenderLayer(md::DaVinciTrafficRenderLayer *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42A1CA0;
  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C4049ECCB0CLL);
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42A1CA0;
  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C4049ECCB0CLL);
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(this);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9D98;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A5258;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2C9B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::~BuildingRenderLayer(md::BuildingRenderLayer *this)
{
  md::BuildingRenderLayer::~BuildingRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  md::LandmarkRenderResources *v6;
  md::BuildingRenderResources *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)this = &off_1E4296910;
  *((_QWORD *)this + 46) = &unk_1E4296A00;
  v2 = *((_QWORD *)this + 57);
  if (*(_QWORD *)(v2 + 40))
    *(_QWORD *)(v2 + 40) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 54);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v5)
    operator delete(v5);
  v6 = (md::LandmarkRenderResources *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v6)
  {
    md::LandmarkRenderResources::~LandmarkRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  v7 = (md::BuildingRenderResources *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v7)
  {
    md::BuildingRenderResources::~BuildingRenderResources(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledVectorRenderLayer(this);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42AA138;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A56B8;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::BuildingTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2C9DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::LegacyTrafficRenderLayer::~LegacyTrafficRenderLayer(md::LegacyTrafficRenderLayer *this)
{
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9CB0;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A5178;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::TrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2CA128(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::~DaVinciGroundRenderLayer(md::DaVinciGroundRenderLayer *this)
{
  md::DaVinciGroundRenderLayer::~DaVinciGroundRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;

  *(_QWORD *)this = &off_1E42A05C0;
  v2 = (void *)*((_QWORD *)this + 455);
  if (v2)
  {
    *((_QWORD *)this + 456) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v5)
  {
    *v5 = 3131955885;
    MEMORY[0x1A1AF4E00]();
  }
  v6 = (_QWORD *)*((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v6)
  {
    *v6 = 3131955885;
    MEMORY[0x1A1AF4E00]();
  }
  v7 = (_QWORD *)*((_QWORD *)this + 442);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v9)
    operator delete(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 437);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v12)
    operator delete(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 432);
  if (v13)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  v15 = (void *)*((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v15)
    operator delete(v15);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 429);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 426));
  if (*((_BYTE *)this + 3382))
    *((_BYTE *)this + 3382) = 0;
  if (*((_BYTE *)this + 3379))
    *((_BYTE *)this + 3379) = 0;
  if (*((_BYTE *)this + 3376))
    *((_BYTE *)this + 3376) = 0;
  if (*((_BYTE *)this + 3373))
    *((_BYTE *)this + 3373) = 0;
  if (*((_BYTE *)this + 3370))
    *((_BYTE *)this + 3370) = 0;
  if (*((_BYTE *)this + 3367))
    *((_BYTE *)this + 3367) = 0;
  if (*((_BYTE *)this + 3364))
    *((_BYTE *)this + 3364) = 0;
  if (*((_BYTE *)this + 3361))
    *((_BYTE *)this + 3361) = 0;
  if (*((_BYTE *)this + 3358))
    *((_BYTE *)this + 3358) = 0;
  v19 = (void *)*((_QWORD *)this + 416);
  if (v19)
  {
    *((_QWORD *)this + 417) = v19;
    operator delete(v19);
  }
  md::DaVinciGroundRenderResources::~DaVinciGroundRenderResources((md::DaVinciGroundRenderLayer *)((char *)this + 568));
  v20 = (_QWORD *)*((_QWORD *)this + 68);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = (void *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v22)
    operator delete(v22);
  v23 = (_QWORD *)*((_QWORD *)this + 63);
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      operator delete(v23);
      v23 = v24;
    }
    while (v24);
  }
  v25 = (void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v25)
    operator delete(v25);
  v26 = (_QWORD *)*((_QWORD *)this + 58);
  if (v26)
  {
    do
    {
      v27 = (_QWORD *)*v26;
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v28 = (void *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v28)
    operator delete(v28);
  v29 = (_QWORD *)*((_QWORD *)this + 53);
  if (v29)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v31 = (void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v31)
    operator delete(v31);
  v32 = (_QWORD *)*((_QWORD *)this + 48);
  if (v32)
  {
    do
    {
      v33 = (_QWORD *)*v32;
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
  v34 = (void *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v34)
    operator delete(v34);
  md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledVectorRenderLayer(this);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9F68;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A5418;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::DaVinciGroundRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2CA3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::ClientDrapedPolygonRenderLayer::~ClientDrapedPolygonRenderLayer(md::ClientDrapedPolygonRenderLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A78B0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 58));
  *(_QWORD *)this = off_1E429D7B8;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 54));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 51));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 48));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 45));
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A78B0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 58));
  *(_QWORD *)this = off_1E429D7B8;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 54));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 51));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 48));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 45));
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer((uint64_t)this);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A54F8;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::ElevatedPolygonRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2CA870(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::HikingRenderLayer::~HikingRenderLayer(md::HikingRenderLayer *this)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E4292530;
  v2 = (uint64_t *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v2[15]);
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1A1AF4E00](v2, 0x1020C40455D1DCFLL);
  }
  md::RoadRenderLayer::~RoadRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E4292530;
  v2 = (uint64_t *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v2[15]);
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1A1AF4E00](v2, 0x1020C40455D1DCFLL);
  }
  md::RoadRenderLayer::~RoadRenderLayer(this);
}

void md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(md::DaVinciCenterLineRoadsRenderLayer *this)
{
  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void **v3;
  md::RoadSharedResources *v4;
  md::RoadSharedResources *v5;
  md::PatternedSharedResources *v6;

  *(_QWORD *)this = &off_1E42A9418;
  v2 = (void *)*((_QWORD *)this + 51);
  if (v2)
  {
    *((_QWORD *)this + 52) = v2;
    operator delete(v2);
  }
  v3 = (void **)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
    std::default_delete<md::RoadStyling>::operator()[abi:nn180100](v3);
  v4 = (md::RoadSharedResources *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v4)
  {
    md::RoadSharedResources::~RoadSharedResources(v4);
    MEMORY[0x1A1AF4E00]();
  }
  v5 = (md::RoadSharedResources *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
  {
    md::RoadSharedResources::~RoadSharedResources(v5);
    MEMORY[0x1A1AF4E00]();
  }
  v6 = (md::PatternedSharedResources *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v6)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(this);
}

void md::RoadRenderLayer::~RoadRenderLayer(md::RoadRenderLayer *this)
{
  md::RoadRenderLayer::~RoadRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  md::PatternedSharedResources *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  md::RoadSharedResources *v17;
  void *v18;
  void *v19;
  void *v20;

  *(_QWORD *)this = &off_1E4290AC0;
  v2 = (void **)*((_QWORD *)this + 60);
  if (v2)
  {
    v3 = (char *)*v2;
    if (!*v2)
    {
LABEL_19:
      MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
      goto LABEL_20;
    }
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_18:
      v2[1] = v3;
      operator delete(v5);
      goto LABEL_19;
    }
    while (1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (!v6)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 4);
        if (v9)
        {
LABEL_11:
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_10:
        v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 4);
        if (v9)
          goto LABEL_11;
      }
      v4 -= 48;
      if (v4 == v3)
      {
        v5 = *v2;
        goto LABEL_18;
      }
    }
  }
LABEL_20:
  v12 = (void *)*((_QWORD *)this + 61);
  if (v12)
  {
    *((_QWORD *)this + 62) = v12;
    operator delete(v12);
  }
  v13 = (md::PatternedSharedResources *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v13)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v13);
    MEMORY[0x1A1AF4E00]();
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (md::RoadSharedResources *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v17)
  {
    md::RoadSharedResources::~RoadSharedResources(v17);
    MEMORY[0x1A1AF4E00]();
  }
  v18 = (void *)*((_QWORD *)this + 52);
  if (v18)
  {
    *((_QWORD *)this + 53) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 49);
  if (v19)
  {
    *((_QWORD *)this + 50) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 46);
  if (v20)
  {
    *((_QWORD *)this + 47) = v20;
    operator delete(v20);
  }
  md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(this);
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A5338;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::RoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2CAC90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9BC8;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9E80;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;

}

void md::MercatorTerrainAnchor::~MercatorTerrainAnchor(md::MercatorTerrainAnchor *this)
{
  int8x8_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *__p;

  *(_QWORD *)this = &off_1E429B250;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3
      && (v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)&v2[3], (unint64_t)this)) != 0)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v4);
      if (__p)
        operator delete(__p);
      v2 = (int8x8_t *)*((_QWORD *)this + 1);
      *(_QWORD *)this = off_1E42AEF50;
      if (!v2)
      {
LABEL_11:
        objc_destroyWeak((id *)this + 8);
        JUMPOUT(0x1A1AF4E00);
      }
    }
    else
    {
      *(_QWORD *)this = off_1E42AEF50;
    }
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
    goto LABEL_11;
  }
  *(_QWORD *)this = off_1E42AEF50;
  goto LABEL_11;
}

{
  int8x8_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *__p;

  *(_QWORD *)this = &off_1E429B250;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (!v2)
  {
    *(_QWORD *)this = off_1E42AEF50;
    goto LABEL_11;
  }
  v3 = (_QWORD *)v2[3];
  if (!v3
    || (v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)&v2[3], (unint64_t)this)) == 0)
  {
    *(_QWORD *)this = off_1E42AEF50;
LABEL_10:
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
    goto LABEL_11;
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v4);
  if (__p)
    operator delete(__p);
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E42AEF50;
  if (v2)
    goto LABEL_10;
LABEL_11:
  objc_destroyWeak((id *)this + 8);
}

void md::TiledGEOResourceFetcher::cancelResource(id *this, const gdc::ResourceKey *a2)
{
  NSObject *v4;
  std::string *v5;
  void *v6;
  std::string::size_type v7;
  id v8;
  id v9;
  std::string __p;
  uint8_t buf[4];
  std::string *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v4 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v12 = v5;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher canceling resource: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  md::TiledGEOResourceFetcher::getTileLoader(this);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  __p.__r_.__value_.__r.__words[0] = (*((uint64_t (**)(id *, id, const gdc::ResourceKey *))*this + 18))(this, this[76], a2);
  __p.__r_.__value_.__l.__size_ = v7;
  if (*(_BYTE *)a2)
    v8 = this[61];
  else
    v8 = this[58];
  v9 = v8;
  objc_msgSend(v6, "cancelKey:forClient:", &__p, v9);

}

void sub_19F2CB1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *md::RegistryLogic::runBeforeLayoutAtVariableRate(uint64_t a1, os_signpost_id_t *a2, uint64_t **a3, _QWORD *a4)
{
  os_signpost_id_t *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  double v23;
  double *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t *v51;
  void *v52;
  _QWORD *result;
  uint64_t v54;
  os_signpost_id_t *v55;
  unsigned __int16 *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t v63;

  v6 = a2;
  v63 = *MEMORY[0x1E0C80C00];
  v59[0] = &off_1E42CB9A8;
  v59[1] = a2;
  v60 = v59;
  v57[0] = &off_1E42CB9F0;
  v57[1] = a2;
  v58 = v57;
  v62 = v61;
  v61[0] = &off_1E42CB9F0;
  v61[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v59);
  v8 = v58;
  if (v58 == v57)
  {
    v9 = 4;
    v8 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v60;
  if (v60 == v59)
  {
    v11 = 4;
    v10 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  md::RegistryManager::update(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 120) + 696, *a3, v6[10]);
  *a4 = *(_QWORD *)(a1 + 120);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isLogicConsoleEnabled:", 0xDEBD99099DA2C65BLL);

  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 120);
    v15 = *(unsigned __int16 **)(v14 + 456);
    v56 = *(unsigned __int16 **)(v14 + 464);
    if (v15 != v56)
    {
      v55 = v6;
      do
      {
        v17 = *v15;
        md::LayoutContext::frameState((md::LayoutContext *)v6);
        v19 = *(double *)(v18 + 88);
        v20 = (uint64_t **)(a1 + 144);
        while (1)
        {
          v21 = *v20;
          v22 = v20;
          if (!*v20)
            break;
          while (1)
          {
            v20 = (uint64_t **)v21;
            v23 = *((double *)v21 + 4);
            if (v19 < v23)
              break;
            if (v23 >= v19)
            {
              v24 = (double *)v21;
              goto LABEL_26;
            }
            v21 = (uint64_t *)v21[1];
            if (!v21)
            {
              v22 = v20 + 1;
              goto LABEL_22;
            }
          }
        }
LABEL_22:
        v24 = (double *)operator new(0x40uLL);
        v24[4] = v19;
        v24[6] = 0.0;
        v24[7] = 0.0;
        v24[5] = 0.0;
        *v24 = 0.0;
        v24[1] = 0.0;
        *((_QWORD *)v24 + 2) = v20;
        *v22 = (uint64_t *)v24;
        v25 = **(_QWORD **)(a1 + 136);
        v26 = (uint64_t *)v24;
        if (v25)
        {
          *(_QWORD *)(a1 + 136) = v25;
          v26 = *v22;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 144), v26);
        ++*(_QWORD *)(a1 + 152);
LABEL_26:
        v28 = (char *)*((_QWORD *)v24 + 6);
        v27 = *((_QWORD *)v24 + 7);
        if ((unint64_t)v28 < v27)
        {
          *(_QWORD *)v28 = v17;
          v16 = v28 + 8;
        }
        else
        {
          v29 = (char *)*((_QWORD *)v24 + 5);
          v30 = (v28 - v29) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            abort();
          v32 = v27 - (_QWORD)v29;
          if (v32 >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v34 = operator new(8 * v33);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[8 * v30];
          *v35 = v17;
          v16 = v35 + 1;
          if (v28 != v29)
          {
            v36 = v28 - 8 - v29;
            if (v36 < 0x58)
              goto LABEL_79;
            if ((unint64_t)(v29 - v34) < 0x20)
              goto LABEL_79;
            v37 = (v36 >> 3) + 1;
            v38 = &v34[8 * v30 - 16];
            v39 = v28 - 16;
            v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              *v38 = v41;
              v38 -= 2;
              v39 -= 32;
              v40 -= 4;
            }
            while (v40);
            v35 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
            v28 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_79:
              do
              {
                v42 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *--v35 = v42;
              }
              while (v28 != v29);
            }
          }
          *((_QWORD *)v24 + 5) = v35;
          *((_QWORD *)v24 + 6) = v16;
          *((_QWORD *)v24 + 7) = &v34[8 * v33];
          if (v29)
            operator delete(v29);
        }
        *((_QWORD *)v24 + 6) = v16;
        ++v15;
        v6 = v55;
      }
      while (v15 != v56);
    }
    v45 = *(_QWORD **)(a1 + 136);
    if (v45 != (_QWORD *)(a1 + 144))
    {
      do
      {
        md::LayoutContext::frameState((md::LayoutContext *)v6);
        v47 = (_QWORD *)v45[1];
        if (*(double *)(v46 + 88) - *((double *)v45 + 4) <= 30.0)
        {
          if (v47)
          {
            do
            {
              v49 = v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v49 = (_QWORD *)v45[2];
              v50 = *v49 == (_QWORD)v45;
              v45 = v49;
            }
            while (!v50);
          }
        }
        else
        {
          v48 = v45;
          if (v47)
          {
            do
            {
              v49 = v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v49 = (_QWORD *)v48[2];
              v50 = *v49 == (_QWORD)v48;
              v48 = v49;
            }
            while (!v50);
          }
          if (*(_QWORD **)(a1 + 136) == v45)
            *(_QWORD *)(a1 + 136) = v49;
          v51 = *(uint64_t **)(a1 + 144);
          --*(_QWORD *)(a1 + 152);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v51, v45);
          v52 = (void *)v45[5];
          if (v52)
          {
            v45[6] = v52;
            operator delete(v52);
          }
          operator delete(v45);
        }
        v45 = v49;
      }
      while (v49 != (_QWORD *)(a1 + 144));
    }
  }
  else
  {
    v44 = *(_QWORD **)(a1 + 144);
    v43 = (_QWORD *)(a1 + 144);
    std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(v44);
    *(v43 - 1) = v43;
    *v43 = 0;
    v43[1] = 0;
  }
  if (!v62)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v62 + 48))(v62);
  result = v62;
  if (v62 == v61)
  {
    v54 = 4;
    result = v61;
  }
  else
  {
    if (!v62)
      return result;
    v54 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v54))();
}

void sub_19F2CB688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void md::PendingSceneLogic::reset(md::PendingSceneLogic *this)
{
  geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::clear(*((_QWORD **)this + 27));
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "GPUStartTime");
  atomic_store(v3, *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));

}

void sub_19F2CB7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::HillshadeRenderLayer::~HillshadeRenderLayer(md::HillshadeRenderLayer *this)
{
  md::HillshadeRenderResources *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4298F18;
  v2 = (md::HillshadeRenderResources *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
  {
    md::HillshadeRenderResources::~HillshadeRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C4049ECCB0CLL);
  md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  md::HillshadeRenderResources *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4298F18;
  v2 = (md::HillshadeRenderResources *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
  {
    md::HillshadeRenderResources::~HillshadeRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C4049ECCB0CLL);
  md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::~CartographicTiledVectorRenderLayer(this);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9Hillshade20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7D30;
}

void std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Hillshade::Pos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D2128;
}

void ggl::HillshadeShader::typedReflection(ggl::HillshadeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::HillshadeShader::typedReflection(void)::ref = (uint64_t)"HillshadeShader";
      ggl::hillshadeShaderVertexFunctionDescriptor(v2);
      qword_1ECE2FFF0 = (uint64_t)&ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("HillshadeShaderVertex");
      dword_1ECE2FFF8 = (int)v3;
      ggl::hillshadeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30000 = (uint64_t)&ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30008 = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
      qword_1ECE30010 = (uint64_t)ggl::hillshadeShaderShaderConstants(void)::ref;
      unk_1ECE30018 = 3;
      qword_1ECE30020 = (uint64_t)ggl::hillshadeShaderShaderTextures(void)::ref;
      unk_1ECE30028 = 1;
      qword_1ECE30030 = (uint64_t)&ggl::hillshadeShaderShaderSamplers(void)::ref;
      unk_1ECE30038 = 1;
    }
  }
}

void ggl::hillshadeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
      *(_DWORD *)algn_1ECE304D4 = 1;
      qword_1ECE304D8 = (uint64_t)"HillshadeShader";
      unk_1ECE304E0 = 0;
      qword_1ECE304E8 = 0;
      unk_1ECE304F0 = &ggl::hillshadeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE304F8 = 1;
      unk_1ECE30500 = &ggl::hillshadeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30508 = 0;
      unk_1ECE30510 = &ggl::hillshadeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30518 = 1;
      unk_1ECE30520 = &ggl::hillshadeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30530 = 0;
      unk_1ECE30538 = 0;
      qword_1ECE30528 = 1;
    }
  }
}

void ggl::hillshadeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("HillshadeShaderVertex");
      *(_DWORD *)algn_1ECE303EC = 0;
      qword_1ECE303F0 = (uint64_t)"HillshadeShader";
      unk_1ECE303F8 = ggl::hillshadeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30400 = 1;
      unk_1ECE30408 = &ggl::hillshadeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30410 = 2;
      unk_1ECE30418 = &ggl::hillshadeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30420 = 0;
      unk_1ECE30428 = &ggl::hillshadeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30430 = 0;
      unk_1ECE30438 = &ggl::hillshadeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30448 = 0;
      unk_1ECE30450 = 0;
      qword_1ECE30440 = 0;
    }
  }
}

uint64_t md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9910;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<HillshadeRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A4C38;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<HillshadeRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2CBD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::LabelRenderLayer::updateMapDataUsed(md::LabelRenderLayer *this)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  _BYTE *v12;
  _WORD *v13;
  _BYTE *v14;
  _WORD *v15;
  _BYTE *v16;
  _WORD *v17;
  _BYTE *v18;
  _WORD *v19;
  _WORD *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  _BYTE *v24;
  _WORD *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  _BYTE *v28;
  _WORD *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE *v35;
  _WORD *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int16 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v47 = 0xC001B0019000DLL;
  v48 = 69;
  v50 = 0;
  v49 = 0uLL;
  std::vector<md::MapDataType>::insert((void **)&v49, 0, (char *)&v47);
  v2 = (unsigned __int16 *)*((_QWORD *)&v49 + 1);
  v3 = (unsigned __int16 *)v49;
  if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
  {
    v4 = (_BYTE *)v49;
LABEL_12:
    std::vector<md::MapDataType>::insert((void **)&v49, v4, (char *)&v47 + 2);
    v2 = (unsigned __int16 *)*((_QWORD *)&v49 + 1);
    v3 = (unsigned __int16 *)v49;
    if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
      goto LABEL_21;
  }
  else
  {
    v4 = (_BYTE *)v49;
    while (1)
    {
      v5 = *(unsigned __int16 *)v4;
      if (v5 >= WORD1(v47))
        break;
      v4 += 2;
      if (v4 == *((_BYTE **)&v49 + 1))
        goto LABEL_11;
    }
    if (v4 == *((_BYTE **)&v49 + 1))
    {
LABEL_11:
      v4 = (_BYTE *)*((_QWORD *)&v49 + 1);
      goto LABEL_12;
    }
    if (WORD1(v47) != v5)
      goto LABEL_12;
    if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
      goto LABEL_21;
  }
  v6 = v3;
  while (1)
  {
    v7 = *v6;
    if (v7 >= WORD2(v47))
      break;
    if (++v6 == v2)
      goto LABEL_21;
  }
  if (v6 == v2)
  {
LABEL_21:
    v6 = v2;
LABEL_22:
    std::vector<md::MapDataType>::insert((void **)&v49, v6, (char *)&v47 + 4);
    v2 = (unsigned __int16 *)*((_QWORD *)&v49 + 1);
    v3 = (unsigned __int16 *)v49;
    if ((_QWORD)v49 != *((_QWORD *)&v49 + 1))
      goto LABEL_23;
LABEL_31:
    v8 = v2;
    goto LABEL_32;
  }
  if (WORD2(v47) != v7)
    goto LABEL_22;
  if (v3 == v2)
    goto LABEL_31;
LABEL_23:
  v8 = v3;
  while (1)
  {
    v9 = *v8;
    if (v9 >= HIWORD(v47))
      break;
    if (++v8 == v2)
      goto LABEL_31;
  }
  if (v8 == v2)
    goto LABEL_31;
  if (HIWORD(v47) == v9)
  {
    if (v3 != v2)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_32:
  std::vector<md::MapDataType>::insert((void **)&v49, v8, (char *)&v47 + 6);
  v2 = (unsigned __int16 *)*((_QWORD *)&v49 + 1);
  v3 = (unsigned __int16 *)v49;
  if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
  {
LABEL_38:
    std::vector<md::MapDataType>::insert((void **)&v49, v2, (char *)&v48);
    goto LABEL_39;
  }
LABEL_33:
  while (1)
  {
    v10 = *v3;
    if (v10 >= v48)
      break;
    if (++v3 == v2)
      goto LABEL_38;
  }
  if (v3 == v2)
    goto LABEL_38;
  v2 = v3;
  if (v48 != v10)
    goto LABEL_38;
LABEL_39:
  v11 = (void *)*((_QWORD *)this + 35);
  *(_OWORD *)((char *)this + 280) = v49;
  *((_QWORD *)this + 37) = v50;
  if (v11)
    operator delete(v11);
  if (*((_BYTE *)this + 274))
  {
    LOWORD(v49) = 66;
    v13 = (_WORD *)*((_QWORD *)this + 35);
    v12 = (_BYTE *)*((_QWORD *)this + 36);
    if (v13 != (_WORD *)v12)
    {
      while ((unsigned __int16)*v13 <= 0x41u)
      {
        if (++v13 == (_WORD *)v12)
          goto LABEL_48;
      }
    }
    if (v13 == (_WORD *)v12 || (v12 = v13, *v13 != 66))
LABEL_48:
      std::vector<md::MapDataType>::insert((void **)this + 35, v12, (char *)&v49);
  }
  if (*((_BYTE *)this + 273))
  {
    LOWORD(v49) = 26;
    v15 = (_WORD *)*((_QWORD *)this + 35);
    v14 = (_BYTE *)*((_QWORD *)this + 36);
    if (v15 != (_WORD *)v14)
    {
      while ((unsigned __int16)*v15 <= 0x19u)
      {
        if (++v15 == (_WORD *)v14)
          goto LABEL_56;
      }
    }
    if (v15 == (_WORD *)v14 || (v14 = v15, *v15 != 26))
LABEL_56:
      std::vector<md::MapDataType>::insert((void **)this + 35, v14, (char *)&v49);
  }
  if (*((_BYTE *)this + 271))
  {
    LOWORD(v49) = 24;
    v17 = (_WORD *)*((_QWORD *)this + 35);
    v16 = (_BYTE *)*((_QWORD *)this + 36);
    if (v17 != (_WORD *)v16)
    {
      while ((unsigned __int16)*v17 <= 0x17u)
      {
        if (++v17 == (_WORD *)v16)
          goto LABEL_64;
      }
    }
    if (v17 == (_WORD *)v16 || (v16 = v17, *v17 != 24))
LABEL_64:
      std::vector<md::MapDataType>::insert((void **)this + 35, v16, (char *)&v49);
    if (*((_BYTE *)this + 272))
    {
      LOWORD(v49) = 74;
      v19 = (_WORD *)*((_QWORD *)this + 35);
      v18 = (_BYTE *)*((_QWORD *)this + 36);
      if (v19 != (_WORD *)v18)
      {
        while ((unsigned __int16)*v19 <= 0x49u)
        {
          if (++v19 == (_WORD *)v18)
            goto LABEL_79;
        }
      }
      if (v19 == (_WORD *)v18 || (v18 = v19, *v19 != 74))
LABEL_79:
        std::vector<md::MapDataType>::insert((void **)this + 35, v18, (char *)&v49);
    }
  }
  else
  {
    LOWORD(v49) = 20;
    v20 = (_WORD *)*((_QWORD *)this + 35);
    v18 = (_BYTE *)*((_QWORD *)this + 36);
    if (v20 != (_WORD *)v18)
    {
      while ((unsigned __int16)*v20 <= 0x13u)
      {
        if (++v20 == (_WORD *)v18)
          goto LABEL_79;
      }
    }
    if (v20 == (_WORD *)v18)
      goto LABEL_79;
    v18 = v20;
    if (*v20 != 20)
      goto LABEL_79;
  }
  if (*((_BYTE *)this + 270))
  {
    *(_QWORD *)&v49 = 0x2B001500170016;
    WORD4(v49) = 52;
    v22 = (unsigned __int16 *)*((_QWORD *)this + 35);
    v21 = (unsigned __int16 *)*((_QWORD *)this + 36);
    v23 = v22;
    if (v22 != v21)
    {
      v23 = (unsigned __int16 *)*((_QWORD *)this + 35);
      while (*v23 <= 0x15u)
      {
        if (++v23 == v21)
          goto LABEL_93;
      }
    }
    if (v23 == v21)
    {
LABEL_93:
      v23 = (unsigned __int16 *)*((_QWORD *)this + 36);
    }
    else if (*v23 == 22)
    {
LABEL_95:
      if (v22 == v21)
        goto LABEL_112;
      v26 = v22;
      while (1)
      {
        v27 = *v26;
        if (v27 >= WORD1(v49))
          break;
        if (++v26 == v21)
          goto LABEL_112;
      }
      if (v26 == v21)
      {
LABEL_112:
        v26 = v21;
      }
      else if (WORD1(v49) == v27)
      {
        if (v22 == v21)
          goto LABEL_122;
LABEL_114:
        v30 = v22;
        while (1)
        {
          v31 = *v30;
          if (v31 >= WORD2(v49))
            break;
          if (++v30 == v21)
            goto LABEL_122;
        }
        if (v30 != v21)
        {
          if (WORD2(v49) == v31)
          {
            if (v22 == v21)
              goto LABEL_132;
LABEL_124:
            v32 = v22;
            while (1)
            {
              v33 = *v32;
              if (v33 >= WORD3(v49))
                break;
              if (++v32 == v21)
                goto LABEL_132;
            }
            if (v32 != v21)
            {
              if (WORD3(v49) == v33)
              {
                if (v22 != v21)
                  goto LABEL_134;
                goto LABEL_139;
              }
LABEL_133:
              std::vector<md::MapDataType>::insert((void **)this + 35, v32, (char *)&v49 + 6);
              v22 = (unsigned __int16 *)*((_QWORD *)this + 35);
              v21 = (unsigned __int16 *)*((_QWORD *)this + 36);
              if (v22 != v21)
              {
LABEL_134:
                while (1)
                {
                  v34 = *v22;
                  if (v34 >= WORD4(v49))
                    break;
                  if (++v22 == v21)
                    goto LABEL_139;
                }
                if (v22 != v21)
                {
                  v21 = v22;
                  if (WORD4(v49) == v34)
                    goto LABEL_140;
                }
              }
LABEL_139:
              std::vector<md::MapDataType>::insert((void **)this + 35, v21, (char *)&v49 + 8);
LABEL_140:
              if (*((_BYTE *)this + 275))
              {
                LOWORD(v49) = 80;
                v36 = (_WORD *)*((_QWORD *)this + 35);
                v35 = (_BYTE *)*((_QWORD *)this + 36);
                if (v36 != (_WORD *)v35)
                {
                  while ((unsigned __int16)*v36 <= 0x4Fu)
                  {
                    if (++v36 == (_WORD *)v35)
                      goto LABEL_147;
                  }
                }
                if (v36 == (_WORD *)v35 || (v35 = v36, *v36 != 80))
LABEL_147:
                  std::vector<md::MapDataType>::insert((void **)this + 35, v35, (char *)&v49);
              }
              return;
            }
LABEL_132:
            v32 = v21;
            goto LABEL_133;
          }
LABEL_123:
          std::vector<md::MapDataType>::insert((void **)this + 35, v30, (char *)&v49 + 4);
          v22 = (unsigned __int16 *)*((_QWORD *)this + 35);
          v21 = (unsigned __int16 *)*((_QWORD *)this + 36);
          if (v22 == v21)
            goto LABEL_132;
          goto LABEL_124;
        }
LABEL_122:
        v30 = v21;
        goto LABEL_123;
      }
      std::vector<md::MapDataType>::insert((void **)this + 35, v26, (char *)&v49 + 2);
      v22 = (unsigned __int16 *)*((_QWORD *)this + 35);
      v21 = (unsigned __int16 *)*((_QWORD *)this + 36);
      if (v22 == v21)
        goto LABEL_122;
      goto LABEL_114;
    }
    std::vector<md::MapDataType>::insert((void **)this + 35, v23, (char *)&v49);
    v22 = (unsigned __int16 *)*((_QWORD *)this + 35);
    v21 = (unsigned __int16 *)*((_QWORD *)this + 36);
    goto LABEL_95;
  }
  LOWORD(v49) = 19;
  v25 = (_WORD *)*((_QWORD *)this + 35);
  v24 = (_BYTE *)*((_QWORD *)this + 36);
  if (v25 != (_WORD *)v24)
  {
    while ((unsigned __int16)*v25 <= 0x12u)
    {
      if (++v25 == (_WORD *)v24)
        goto LABEL_102;
    }
  }
  if (v25 == (_WORD *)v24 || (v24 = v25, *v25 != 19))
LABEL_102:
    std::vector<md::MapDataType>::insert((void **)this + 35, v24, (char *)&v49);
  if (*((_BYTE *)this + 275))
  {
    LOWORD(v49) = 73;
    v29 = (_WORD *)*((_QWORD *)this + 35);
    v28 = (_BYTE *)*((_QWORD *)this + 36);
    if (v29 != (_WORD *)v28)
    {
      while ((unsigned __int16)*v29 <= 0x48u)
      {
        if (++v29 == (_WORD *)v28)
          goto LABEL_150;
      }
    }
    if (v29 == (_WORD *)v28 || (v28 = v29, *v29 != 73))
LABEL_150:
      std::vector<md::MapDataType>::insert((void **)this + 35, v28, (char *)&v49);
  }
  if (*((_BYTE *)this + 277))
  {
    WORD2(v49) = 21;
    LODWORD(v49) = 3473485;
    v38 = (unsigned __int16 *)*((_QWORD *)this + 35);
    v37 = (unsigned __int16 *)*((_QWORD *)this + 36);
    v39 = v38;
    if (v38 != v37)
    {
      v39 = (unsigned __int16 *)*((_QWORD *)this + 35);
      while (*v39 <= 0x4Cu)
      {
        if (++v39 == v37)
          goto LABEL_165;
      }
    }
    if (v39 == v37)
    {
LABEL_165:
      v39 = (unsigned __int16 *)*((_QWORD *)this + 36);
    }
    else if (*v39 == 77)
    {
LABEL_167:
      if (v38 == v37)
        goto LABEL_184;
      v43 = v38;
      while (1)
      {
        v44 = *v43;
        if (v44 >= WORD1(v49))
          break;
        if (++v43 == v37)
          goto LABEL_184;
      }
      if (v43 == v37)
      {
LABEL_184:
        v43 = v37;
      }
      else if (WORD1(v49) == v44)
      {
LABEL_186:
        if (v38 == v37)
          goto LABEL_192;
        while (1)
        {
          v46 = *v38;
          if (v46 >= WORD2(v49))
            break;
          if (++v38 == v37)
            goto LABEL_192;
        }
        if (v38 == v37 || (v37 = v38, WORD2(v49) != v46))
LABEL_192:
          std::vector<md::MapDataType>::insert((void **)this + 35, v37, (char *)&v49 + 4);
        return;
      }
      std::vector<md::MapDataType>::insert((void **)this + 35, v43, (char *)&v49 + 2);
      v38 = (unsigned __int16 *)*((_QWORD *)this + 35);
      v37 = (unsigned __int16 *)*((_QWORD *)this + 36);
      goto LABEL_186;
    }
    std::vector<md::MapDataType>::insert((void **)this + 35, v39, (char *)&v49);
    v38 = (unsigned __int16 *)*((_QWORD *)this + 35);
    v37 = (unsigned __int16 *)*((_QWORD *)this + 36);
    goto LABEL_167;
  }
  LODWORD(v49) = 1179650;
  v41 = (unsigned __int16 *)*((_QWORD *)this + 35);
  v40 = (unsigned __int16 *)*((_QWORD *)this + 36);
  v42 = v41;
  if (v41 != v40)
  {
    v42 = (unsigned __int16 *)*((_QWORD *)this + 35);
    while (*v42 <= 1u)
    {
      if (++v42 == v40)
        goto LABEL_176;
    }
  }
  if (v42 == v40)
  {
LABEL_176:
    v42 = (unsigned __int16 *)*((_QWORD *)this + 36);
  }
  else if (*v42 == 2)
  {
    if (v41 != v40)
      goto LABEL_178;
    goto LABEL_195;
  }
  std::vector<md::MapDataType>::insert((void **)this + 35, v42, (char *)&v49);
  v41 = (unsigned __int16 *)*((_QWORD *)this + 35);
  v40 = (unsigned __int16 *)*((_QWORD *)this + 36);
  if (v41 == v40)
  {
LABEL_195:
    std::vector<md::MapDataType>::insert((void **)this + 35, v40, (char *)&v49 + 2);
    return;
  }
LABEL_178:
  while (1)
  {
    v45 = *v41;
    if (v45 >= WORD1(v49))
      break;
    if (++v41 == v40)
      goto LABEL_195;
  }
  if (v41 == v40)
    goto LABEL_195;
  v40 = v41;
  if (WORD1(v49) != v45)
    goto LABEL_195;
}

void sub_19F2CC5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<md::MapDataType>::insert(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  __int16 *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _WORD *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int16 v49;
  char *v50;
  int64_t v51;
  char *v52;
  size_t v53;
  char *v54;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 1;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)v9 = *(_WORD *)a3;
      a1[1] = v9 + 2;
    }
    else
    {
      v11 = v5 - (_QWORD)(v9 + 2);
      v12 = v11 >> 1;
      v13 = (__int16 *)(v5 - 2);
      if (v5 < 2)
      {
        v20 = a1[1];
      }
      else
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
        v15 = (char *)(v14 + v6);
        v16 = v14 + v6 + 2;
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~v6 - v14;
        v18 = v5 - (_QWORD)v15;
        v19 = v17 >= 0x1E && v18 > 0x1F;
        v20 = a1[1];
        if (!v19)
          goto LABEL_65;
        v21 = (v17 >> 1) + 1;
        v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
        v13 = (__int16 *)((char *)v13 + v22);
        v23 = (_OWORD *)(v5 + 16);
        v24 = (__int128 *)(2 * v12 + 2 * v8 + v6 + 16);
        v25 = v21 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        v20 = (_WORD *)(v5 + v22);
        if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_65:
          do
          {
            v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = v20;
      if ((char *)v5 != v9 + 2)
        memmove((void *)(v5 - 2 * v12), v9, v11);
      if (v9 <= v3)
        v3 += 2 * (a1[1] > v3);
      *(_WORD *)v9 = *(_WORD *)v3;
    }
    return;
  }
  v28 = v5 - v6;
  if (v28 <= -3)
    abort();
  v30 = v28 >> 1;
  v31 = v10 - v6;
  if (v31 <= v30 + 1)
    v32 = v30 + 1;
  else
    v32 = v31;
  if (v31 >= 0x7FFFFFFFFFFFFFFELL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v32;
  if (v33)
  {
    if (v33 < 0)
      goto LABEL_62;
    v34 = (char *)operator new(2 * v33);
  }
  else
  {
    v34 = 0;
  }
  v35 = &v34[2 * v8];
  v36 = &v34[2 * v33];
  if (v8 != v33)
  {
LABEL_33:
    v38 = (char *)v6;
    goto LABEL_34;
  }
  if (v7 >= 1)
  {
    v37 = v8 + 2;
    if (v8 >= -1)
      v37 = v8 + 1;
    v35 -= v37 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  if ((_BYTE *)v6 == a2)
    v48 = 1;
  else
    v48 = v7;
  if (v48 < 0)
LABEL_62:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v35 = (char *)operator new(2 * v48);
  v36 = &v35[2 * v48];
  if (!v34)
    goto LABEL_33;
  operator delete(v34);
  v36 = &v35[2 * v48];
  v38 = (char *)*a1;
LABEL_34:
  *(_WORD *)v35 = *(_WORD *)v3;
  v39 = v35 + 2;
  if (v38 != v9)
  {
    v40 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    v41 = v40 - v38 - 2;
    if (v41 < 0x1E)
    {
      v43 = v9;
    }
    else if ((unint64_t)(v40 - v35) < 0x20)
    {
      v43 = v9;
    }
    else
    {
      v42 = (v41 >> 1) + 1;
      v43 = &v9[-2 * (v42 & 0xFFFFFFFFFFFFFFF0)];
      v44 = v35 - 16;
      v45 = (__int128 *)(v6 + 2 * v8 - 16);
      v46 = v42 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v47 = *v45;
        *((_OWORD *)v44 - 1) = *(v45 - 1);
        *(_OWORD *)v44 = v47;
        v44 -= 32;
        v45 -= 2;
        v46 -= 16;
      }
      while (v46);
      v35 -= 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
      if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_56;
    }
    do
    {
      v49 = *((_WORD *)v43 - 1);
      v43 -= 2;
      *((_WORD *)v35 - 1) = v49;
      v35 -= 2;
    }
    while (v43 != v38);
  }
LABEL_56:
  v50 = (char *)a1[1];
  v51 = v50 - v9;
  if (v50 != v9)
  {
    v52 = v9;
    v53 = v50 - v9;
    v54 = v36;
    memmove(v39, v52, v53);
    v36 = v54;
    v38 = (char *)*a1;
  }
  *a1 = v35;
  a1[1] = &v39[v51];
  a1[2] = v36;
  if (v38)
    operator delete(v38);
}

void sub_19F2CC934(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19F2CFCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);

  _Unwind_Resume(a1);
}

void md::CommandBufferSelector::init(md::CommandBufferSelector *this, unint64_t *a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  __int16 v52;

  v4 = *a2;
  v5 = (_BYTE *)*((_QWORD *)this + 1);
  v6 = (_BYTE *)*((_QWORD *)this + 2);
  v7 = (v6 - v5) >> 1;
  v8 = *a2 - v7;
  if (*a2 > v7)
  {
    v9 = *((_QWORD *)this + 3);
    if (v8 <= (v9 - (uint64_t)v6) >> 1)
    {
      bzero(*((void **)this + 2), 2 * v8);
      *((_QWORD *)this + 2) = &v6[2 * v8];
LABEL_25:
      v4 = *a2;
      goto LABEL_26;
    }
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_60;
    v10 = v9 - (_QWORD)v5;
    if (v10 <= v4)
      v11 = *a2;
    else
      v11 = v10;
    v12 = v10 >= 0x7FFFFFFFFFFFFFFELL;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 < 0)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = 2 * v13;
    v15 = operator new(2 * v13);
    v16 = &v15[2 * v7];
    bzero(v16, 2 * v8);
    v17 = &v16[2 * v8];
    if (v6 == v5)
    {
      v5 = v6;
      v19 = &v15[v14];
      goto LABEL_23;
    }
    v18 = v6 - v5 - 2;
    if (v18 >= 0x1E)
    {
      v19 = &v15[v14];
      if ((unint64_t)(v5 - v15) >= 0x20)
      {
        v20 = (v18 >> 1) + 1;
        v21 = &v15[2 * v7 - 16];
        v22 = (__int128 *)(v6 - 16);
        v23 = v20 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 16;
        }
        while (v23);
        v16 -= 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
        v6 -= 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_23;
      }
    }
    else
    {
      v19 = &v15[v14];
    }
    do
    {
      v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v25;
      v16 -= 2;
    }
    while (v6 != v5);
    v5 = (_BYTE *)*((_QWORD *)this + 1);
LABEL_23:
    *((_QWORD *)this + 1) = v16;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v19;
    if (v5)
      operator delete(v5);
    goto LABEL_25;
  }
  if (*a2 < v7)
    *((_QWORD *)this + 2) = &v5[2 * v4];
LABEL_26:
  v27 = (char *)*((_QWORD *)this + 4);
  v26 = (char *)*((_QWORD *)this + 5);
  v28 = v26 - v27;
  v29 = v4 - (v26 - v27);
  if (v4 > v26 - v27)
  {
    v30 = *((_QWORD *)this + 6);
    if (v30 - (uint64_t)v26 >= v29)
    {
      bzero(*((void **)this + 5), v4 - (v26 - v27));
      *((_QWORD *)this + 5) = &v27[v4];
      goto LABEL_56;
    }
    if ((v4 & 0x8000000000000000) == 0)
    {
      v31 = v30 - (_QWORD)v27;
      v32 = 2 * v31;
      if (2 * v31 <= v4)
        v32 = v4;
      if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
        v33 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      v34 = (char *)operator new(v33);
      v35 = &v34[v28];
      v36 = &v34[v33];
      v37 = &v34[v4];
      bzero(&v34[v28], v29);
      if (v26 == v27)
        goto LABEL_54;
      if (v28 < 8 || (unint64_t)(v27 - v34) < 0x20)
        goto LABEL_51;
      if (v28 >= 0x20)
      {
        v38 = v28 & 0xFFFFFFFFFFFFFFE0;
        v39 = v26 - 16;
        v40 = &v34[v26 - 16 - v27];
        v41 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v42 = *(_OWORD *)v39;
          *((_OWORD *)v40 - 1) = *((_OWORD *)v39 - 1);
          *(_OWORD *)v40 = v42;
          v40 -= 32;
          v39 -= 32;
          v41 -= 32;
        }
        while (v41);
        if (v28 == v38)
          goto LABEL_53;
        if ((v28 & 0x18) == 0)
        {
          v35 -= v38;
          v26 -= v38;
          goto LABEL_51;
        }
      }
      else
      {
        v38 = 0;
      }
      v43 = v38 - (v28 & 0xFFFFFFFFFFFFFFF8);
      v44 = &v26[-v38 - 8];
      v45 = (char *)(v44 - v27);
      do
      {
        v46 = *(_QWORD *)v44;
        v44 -= 8;
        *(_QWORD *)&v45[(_QWORD)v34] = v46;
        v45 -= 8;
        v43 += 8;
      }
      while (v43);
      if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_53;
      v35 -= v28 & 0xFFFFFFFFFFFFFFF8;
      v26 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_51:
      v47 = v35 - 1;
      do
      {
        v48 = *--v26;
        *v47-- = v48;
      }
      while (v26 != v27);
LABEL_53:
      v26 = v27;
      v35 = v34;
LABEL_54:
      *((_QWORD *)this + 4) = v35;
      *((_QWORD *)this + 5) = v37;
      *((_QWORD *)this + 6) = v36;
      if (v26)
        operator delete(v26);
      goto LABEL_56;
    }
LABEL_60:
    abort();
  }
  if (v4 < v26 - v27)
    *((_QWORD *)this + 5) = &v27[v4];
LABEL_56:
  if (*a2)
  {
    v49 = 0;
    v50 = 0;
    do
    {
      v51 = (*(uint64_t (**)(md::CommandBufferSelector *, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, *((unsigned __int8 *)this + 56), v50);
      v52 = (*(uint64_t (**)(md::CommandBufferSelector *, _QWORD, _QWORD))(*(_QWORD *)this + 24))(this, *((unsigned __int8 *)this + 56), v50);
      *(_BYTE *)(*((_QWORD *)this + 4) + v49) = v52;
      *(_WORD *)(*((_QWORD *)this + 1) + 2 * v49) = v51 | (v52 << 8);
      v49 = ++v50;
    }
    while (*a2 > v50);
  }
}

uint64_t md::StandardCommandBufferSelector::_getCommandBufferID(md::StandardCommandBufferSelector *this, char a2, uint64_t a3)
{
  uint64_t result;

  result = a3;
  if ((a2 & 1) == 0)
  {
    if ((a3 - 1) > 0x7B)
      return 0;
    else
      return byte_1A007BFA8[(a3 - 1)];
  }
  return result;
}

uint64_t md::StandardCommandBufferSelector::_getPassID(md::StandardCommandBufferSelector *this, char a2, int a3)
{
  if ((a2 & 1) != 0)
    return 9;
  if ((a3 - 100) > 0x18)
    return 10;
  return byte_1A007C024[(a3 - 100)];
}

uint64_t md::RealisticCommandBufferSelector::_getCommandBufferID(md::RealisticCommandBufferSelector *this, char a2, uint64_t a3)
{
  uint64_t result;

  result = a3;
  if ((a2 & 1) == 0)
  {
    if ((a3 - 1) > 0x13)
      return 0;
    else
      return byte_1A001A38C[(a3 - 1)];
  }
  return result;
}

uint64_t md::RealisticCommandBufferSelector::_getPassID(md::RealisticCommandBufferSelector *this, char a2, int a3)
{
  unint64_t v3;

  v3 = 0x4040404030201uLL >> (8 * (a3 - 14));
  if ((a3 - 14) > 6)
    LOBYTE(v3) = 0;
  if ((a2 & 1) != 0)
    LOBYTE(v3) = 0;
  return v3;
}

void grl::IconManager::setConfigPackLocationCacheSize(grl::IconManager *this, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  *((_QWORD *)this + 60) = a2;
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = (std::mutex *)(v5 + 304);
    std::mutex::lock((std::mutex *)(v5 + 304));
    v7 = *((_QWORD *)this + 12);
    v8 = v7 + 152;
    for (i = *(_QWORD *)(v7 + 160); i != v8; i = *(_QWORD *)(i + 8))
      grl::codec::IconConfigPack::setLocationCacheSize(*(grl::codec::IconConfigPack **)(i + 48), a2);
    std::mutex::unlock(v6);
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

void grl::IconManager::setDataPackImageAtlasSize(grl::IconManager *this, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  *((_QWORD *)this + 59) = a2;
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = (std::mutex *)(v5 + 240);
    std::mutex::lock((std::mutex *)(v5 + 240));
    v7 = *((_QWORD *)this + 12);
    v8 = v7 + 80;
    for (i = *(_QWORD *)(v7 + 88); i != v8; i = *(_QWORD *)(i + 8))
      grl::codec::IconDataPack::setImageAtlasSize(*(grl::codec::IconDataPack **)(i + 48), a2);
    std::mutex::unlock(v6);
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

void grl::IconManager::setPackCacheSize(grl::IconManager *this, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;

  v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  *((_QWORD *)this + 61) = a2;
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = (std::mutex *)(v5 + 240);
    std::mutex::lock((std::mutex *)(v5 + 240));
    v7 = *((_QWORD *)this + 12);
    *(_QWORD *)(v7 + 32) = a2;
    while (*(_QWORD *)(v7 + 96) > *(_QWORD *)(v7 + 32))
      geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop((_QWORD *)(v7 + 32));
    std::mutex::unlock(v6);
    v8 = (std::mutex *)(*((_QWORD *)this + 12) + 304);
    std::mutex::lock(v8);
    v9 = *((_QWORD *)this + 12);
    *(_QWORD *)(v9 + 104) = a2;
    while (*(_QWORD *)(v9 + 168) > *(_QWORD *)(v9 + 104))
      geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop((_QWORD *)(v9 + 104));
    std::mutex::unlock(v8);
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

double grl::FontManager::FontManager(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v4 = *a2;
  v3 = a2[1];
  *(_QWORD *)a1 = &unk_1E42C2580;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)a1 = &off_1E42C2508;
  *(_QWORD *)(a1 + 96) = a3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 144) = a1 + 144;
  *(_QWORD *)(a1 + 152) = a1 + 144;
  *(_OWORD *)(a1 + 160) = xmmword_19FFB2DD0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  return result;
}

void grl::ResourceProvider::addObserver(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__emplace_unique_key_args<grl::ResourceObserver *,grl::ResourceObserver *&>((float *)(a1 + 8), &v4, &v4);
  std::mutex::unlock(v3);
}

_QWORD *std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__emplace_unique_key_args<grl::ResourceObserver *,grl::ResourceObserver *&>(float *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

grl::IconManager::PackInfo *grl::IconManager::PackInfo::PackInfo(grl::IconManager::PackInfo *this, uint64_t a2)
{
  char *v4;

  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 4) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_QWORD *)this + 10) = (char *)this + 80;
  *((_QWORD *)this + 11) = (char *)this + 80;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = a2;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  *((_QWORD *)this + 19) = (char *)this + 152;
  *((_QWORD *)this + 20) = (char *)this + 152;
  *(_OWORD *)((char *)this + 168) = xmmword_19FFB2DD0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 30) = 850045863;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 850045863;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  return this;
}

void md::StylesheetVendor::setupTileGroupObservationProxy(md::StylesheetVendor *this)
{
  VKStylesheetVendorResourceManifestTileGroupObserverProxy *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _Unwind_Exception *v9;
  _Unwind_Exception *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = [VKStylesheetVendorResourceManifestTileGroupObserverProxy alloc];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v11 = *(_QWORD *)this;
  if (!v3 || (v12 = std::__shared_weak_count::lock(v3)) == 0)
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    v10 = v9;
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v11);
    _Unwind_Resume(v10);
  }
  v4 = -[VKStylesheetVendorResourceManifestTileGroupObserverProxy initWithStylesheetVendor:](v2, "initWithStylesheetVendor:", &v11);
  v5 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4;

  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void parseUnnamedRow(std::string **a1, _QWORD *a2)
{
  std::string **v3;
  std::string *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string::value_type v8;
  char v9;
  char v10;
  char v11;
  std::string *v12;
  _BYTE *v13;
  char v14;
  char v16;
  size_t size;
  std::string *v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  _QWORD *v23;
  __int128 v24;
  char v25;
  char v26;
  _QWORD *v27;
  std::string *v28;
  int v30;
  std::string v31;

  v3 = a1;
  v4 = 0;
  v30 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = a2 + 4;
  v6 = (_QWORD *)MEMORY[0x1E0DE4A60];
  do
  {
    if (std::istream::peek() != 34)
    {
      *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
      v31.__r_.__value_.__s.__data_[0] = 0;
      if (*(_DWORD *)((char *)v5 + *(_QWORD *)(*a2 - 24)))
        goto LABEL_53;
      while (1)
      {
        v14 = std::istream::peek();
        if (v14 <= 0x2C && ((1 << v14) & 0x100000002400) != 0)
        {
LABEL_51:
          v4 = v3[1];
          goto LABEL_53;
        }
        v16 = v14;
        std::istream::get();
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x80) != 0)
          break;
        if (HIBYTE(v31.__r_.__value_.__r.__words[2]) == 22)
        {
          v18 = &v31;
          size = 22;
          goto LABEL_36;
        }
        *((_BYTE *)&v31.__r_.__value_.__s + 23) = (*((_BYTE *)&v31.__r_.__value_.__s + 23) + 1) & 0x7F;
        v12 = &v31;
LABEL_24:
        v13 = (char *)v12 + size;
        *v13 = v16;
        v13[1] = 0;
        if (*(_DWORD *)((char *)v5 + *(_QWORD *)(*a2 - 24)))
          goto LABEL_51;
      }
      size = (v31.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v31.__r_.__value_.__l.__size_ == size)
      {
        if ((v31.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          abort();
        v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
        if (size > 0x3FFFFFFFFFFFFFF2)
        {
          v21 = 0x7FFFFFFFFFFFFFF7;
        }
        else
        {
LABEL_36:
          if (size + 1 > 2 * size)
            v19 = size + 1;
          else
            v19 = 2 * size;
          v20 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v20 = v19 | 7;
          if (v19 >= 0x17)
            v21 = v20 + 1;
          else
            v21 = 23;
        }
        v22 = (std::string *)operator new(v21);
        v12 = v22;
        if (!size || (memmove(v22, v18, size), size != 22))
          operator delete(v18);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        v31.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
        v3 = a1;
      }
      else
      {
        size = v31.__r_.__value_.__l.__size_;
        v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      v31.__r_.__value_.__l.__size_ = size + 1;
      goto LABEL_24;
    }
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
    v31.__r_.__value_.__s.__data_[0] = 0;
    if (std::istream::get() != 34)
      goto LABEL_53;
    while (1)
    {
      if (*(_DWORD *)((char *)v5 + *(_QWORD *)(*a2 - 24)))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: ", 7);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)": Parse error in CSV file\n", 26);
      }
      v8 = std::istream::get();
      if (v8 == 92)
        break;
      if (v8 == 34)
        goto LABEL_53;
LABEL_7:
      std::string::push_back(&v31, v8);
    }
    v9 = std::istream::get();
    if (!*(_DWORD *)((char *)v5 + *(_QWORD *)(*a2 - 24)))
    {
      if (v9 == 114)
        v10 = 13;
      else
        v10 = v9;
      if (v9 == 116)
        v11 = 9;
      else
        v11 = v10;
      if (v9 == 110)
        v8 = 10;
      else
        v8 = v11;
      goto LABEL_7;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: ", 7);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)": Parse error in CSV file\n", 26);
LABEL_53:
    if (v4 >= v3[2])
    {
      v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)v3, (uint64_t)&v31);
    }
    else
    {
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v4, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      }
      else
      {
        v24 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        v4->__r_.__value_.__r.__words[2] = v31.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v24;
      }
      ++v4;
    }
    v3[1] = v4;
    v25 = std::istream::get();
    if (*(_DWORD *)((char *)v5 + *(_QWORD *)(*a2 - 24)) || v25 == 10)
    {
LABEL_60:
      v26 = 0;
      v30 = 1;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_61;
    }
    else
    {
      if (v25 != 44)
      {
        if (v25 == 13)
        {
          if (std::istream::peek() == 10)
            std::istream::get();
        }
        else
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: ", 7);
          v27 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)": Parse error in CSV file\n", 26);
        }
        goto LABEL_60;
      }
      v26 = 1;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
LABEL_61:
        operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  while ((v26 & 1) != 0);
  if ((v30 & 1) == 0)
  {
    v28 = *v3;
    if (*v3)
    {
      if (v4 != v28)
      {
        do
        {
          if (SHIBYTE(v4[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v4[-1].__r_.__value_.__l.__data_);
          --v4;
        }
        while (v4 != v28);
        v4 = v28;
      }
      v3[1] = v28;
      operator delete(v4);
    }
  }
}

void sub_19F2D134C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::LightingLogic::reset(md::LightingLogic *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;

  *((_QWORD *)this + 21) = 0x7FFFFFFFFFFFFFFFLL;
  *((_BYTE *)this + 288) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = (char *)this + 272;
}

void sub_19F2D1488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::OverlayableFallback>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x974739D36332BF1ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x974739D36332BF1ELL;
      if (*(_QWORD *)&v3 <= 0x974739D36332BF1ELL)
        v5 = 0x974739D36332BF1ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x974739D36332BF1ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x974739D36332BF1ELL)
            {
              if (v7[2] == 0x974739D36332BF1ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x974739D36332BF1ELL)
          {
            if (v7[2] == 0x974739D36332BF1ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::OverlayableFallback]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3948;
  *(_QWORD *)(v11 + 8) = 0x974739D36332BF1ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x974739D36332BF1ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x974739D36332BF1ELL;
  v15[1] = "md::overlayComponents::OverlayableFallback]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x974739D36332BF1ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F2D16AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::Overlayable>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x41A3BFA74D47A0E8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x41A3BFA74D47A0E8;
      if (*(_QWORD *)&v3 <= 0x41A3BFA74D47A0E8uLL)
        v5 = 0x41A3BFA74D47A0E8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x41A3BFA74D47A0E8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x41A3BFA74D47A0E8)
            {
              if (v7[2] == 0x41A3BFA74D47A0E8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x41A3BFA74D47A0E8)
          {
            if (v7[2] == 0x41A3BFA74D47A0E8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::Overlayable]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3678;
  *(_QWORD *)(v11 + 8) = 0x41A3BFA74D47A0E8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x41A3BFA74D47A0E8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x41A3BFA74D47A0E8;
  v15[1] = "md::overlayComponents::Overlayable]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x41A3BFA74D47A0E8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F2D18D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::OverlaysLogic::reset(md::OverlaysLogic *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24[2];
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 93);
  if (v2)
  {
    v28[0] = &off_1E42CB888;
    v29 = v28;
    geo::TaskQueue::barrierSync(v2, v28);
    v3 = v29;
    if (v29 == v28)
    {
      v4 = 4;
      v3 = v28;
      goto LABEL_6;
    }
    if (v29)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  v26[0] = &off_1E42CB8D0;
  v26[1] = this;
  v27 = v26;
  v24[0] = 0;
  v25 = 0;
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*((_QWORD **)this + 80));
  v24[0] = 0;
  v25 = 1;
  if (!v27
    || ((*(void (**)(_QWORD *, void ***, uint64_t *))(*v27 + 48))(v27, v24, &v25),
        v24[0] = (void **)1,
        v25 = 0,
        !v27)
    || ((*(void (**)(_QWORD *, void ***, uint64_t *))(*v27 + 48))(v27, v24, &v25),
        v24[0] = (void **)1,
        v25 = 1,
        !v27))
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *, void ***, uint64_t *))(*v27 + 48))(v27, v24, &v25);
  v5 = v27;
  if (v27 == v26)
  {
    v6 = 4;
    v5 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  if (*((_QWORD *)this + 87))
  {
    v7 = (char *)*((_QWORD *)this + 86);
    if (v7)
    {
      do
      {
        v8 = *(char **)v7;
        v24[0] = (void **)(v7 + 24);
        std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100](v24);
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 86) = 0;
    v9 = *((_QWORD *)this + 85);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*((_QWORD *)this + 84) + 8 * i) = 0;
    }
    *((_QWORD *)this + 87) = 0;
  }
  if (*((_QWORD *)this + 78))
  {
    v11 = (_QWORD *)*((_QWORD *)this + 77);
    while (v11)
    {
      v18 = v11;
      v11 = (_QWORD *)*v11;
      v19 = (std::__shared_weak_count *)v18[4];
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      operator delete(v18);
    }
    *((_QWORD *)this + 77) = 0;
    v12 = *((_QWORD *)this + 76);
    if (v12)
    {
      for (j = 0; j != v12; ++j)
        *(_QWORD *)(*((_QWORD *)this + 75) + 8 * j) = 0;
    }
    *((_QWORD *)this + 78) = 0;
  }
  *((_DWORD *)this + 182) = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v24[0]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 922) = objc_msgSend(v14, "daVinciUseCollisionMesh");

  v15 = *((_QWORD *)this + 94);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 40);
  if (v16 != v17)
  {
    while (*(_WORD *)v16 != 6)
    {
      v16 += 16;
      if (v16 == v17)
        goto LABEL_41;
    }
  }
  if (v16 == v17)
  {
LABEL_41:
    LOBYTE(v24[0]) = 0;
  }
  else
  {
    (*(void (**)(void ***__return_ptr))(**(_QWORD **)(v16 + 8) + 64))(v24);
    if (LOBYTE(v24[0]))
      *((_BYTE *)this + 924) = BYTE4(v24[0]);
  }
  v23 = (_QWORD *)*((_QWORD *)this + 21);
  v22 = (_QWORD *)((char *)this + 168);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v23);
  *(v22 - 1) = v22;
  *v22 = 0;
  v22[1] = 0;
}

void sub_19F2D1BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      _Unwind_Resume(exception_object);
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  _Unwind_Resume(exception_object);
}

void md::ClearRenderLayer::~ClearRenderLayer(md::ClearRenderLayer *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E4291810;
  v2 = (char *)this + 80;
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 0;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C4049ECCB0CLL);
  *(_QWORD *)this = off_1E428C468;
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E4291810;
  v2 = (char *)this + 80;
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 0;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C4049ECCB0CLL);
  *(_QWORD *)this = off_1E428C468;
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

void md::DrapingLogic::runBeforeLayoutAtVariableRate(uint64_t a1, const md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  double v8;
  int v9;
  int v10;
  BOOL v11;
  char v12;
  _QWORD *j;
  _QWORD *v14;
  unsigned __int8 v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t **v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int8x8_t *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  int8x8_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint8x8_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  int8x8_t *v97;
  unsigned __int16 *v98;
  uint64_t *v99;
  uint64_t v100;
  unsigned __int8 v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  char *v115;
  char *v116;
  char *v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  uint64_t v122;
  char v123;
  int v127;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  char *v144;
  _QWORD *v145;
  unint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  unsigned __int8 *v149;
  int v150;
  int v151;
  int v152;
  int v153;
  _QWORD *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  char *v177;
  NSObject *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  int8x8_t *v187;
  uint64_t v188;
  unsigned __int8 v189;
  unsigned __int8 v190;
  int v191;
  int8x8_t v192;
  unint64_t v193;
  uint8x8_t v194;
  int8x8_t *v195;
  int8x8_t v196;
  int8x8_t *v197;
  int8x8_t *v198;
  unint64_t v199;
  int8x8_t *v200;
  unint64_t v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  int8x8_t *v206;
  int8x8_t v207;
  unint64_t v208;
  uint8x8_t v209;
  int8x8_t v210;
  int8x8_t *v211;
  int8x8_t *v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  void *v218;
  _QWORD *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t **v225;
  int v226;
  int v227;
  uint64_t *v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  uint64_t *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  std::__shared_weak_count *v234;
  unint64_t v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  uint8x8_t v239;
  uint64_t ***v240;
  uint64_t **v241;
  int v242;
  int v243;
  uint64_t *v244;
  void *v245;
  size_t v246;
  unint64_t v247;
  uint64_t *v248;
  size_t v249;
  int v250;
  uint64_t *v251;
  int v252;
  uint64_t *v253;
  uint64_t *v254;
  int v255;
  uint64_t *v256;
  int v257;
  _QWORD *v258;
  float v259;
  _BOOL8 v260;
  unint64_t v261;
  unint64_t v262;
  size_t prime;
  void *v264;
  void *v265;
  uint64_t v266;
  _QWORD **v267;
  size_t v268;
  size_t v269;
  size_t v270;
  _QWORD *v271;
  size_t v272;
  uint64_t v273;
  unint64_t v274;
  uint8x8_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  size_t v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  void *v288;
  uint64_t *v289;
  _QWORD *v290;
  _QWORD *i;
  uint64_t v292;
  unsigned __int8 v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  __int32 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  unsigned __int8 v303;
  _BYTE *v304;
  void *v305;
  void *v306;
  int v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  _BYTE *v311;
  void *v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t **v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t **v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  gdc::Registry **v336;
  gdc::Registry *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _OWORD *v343;
  char *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  uint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  int8x8_t v351;
  uint8x8_t v352;
  uint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  char *v373;
  _OWORD *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  int8x8_t v379;
  uint8x8_t v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int8x8_t v392;
  uint8x8_t v393;
  uint64_t v394;
  _QWORD *v395;
  _QWORD *v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  _QWORD *v403;
  char v404;
  char *v405;
  __int128 v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int8x8_t v416;
  uint8x8_t v417;
  unint64_t v418;
  _QWORD *v419;
  _QWORD *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  char v428;
  _BYTE *v429;
  uint64_t v430;
  unint64_t v431;
  _BYTE *v432;
  uint64_t v433;
  _BYTE *v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  size_t v438;
  size_t v439;
  char *v440;
  char *v441;
  unint64_t v442;
  char *v443;
  __int128 *v444;
  unint64_t v445;
  __int128 v446;
  unint64_t v447;
  _BYTE *v448;
  char *v449;
  uint64_t *v450;
  uint64_t v451;
  char *v452;
  char v453;
  uint64_t v454;
  int8x8_t v455;
  uint8x8_t v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  _QWORD *v466;
  char v467;
  uint64_t v468;
  unint64_t v469;
  _BYTE *v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  size_t v476;
  char *v477;
  char *v478;
  char *v479;
  uint64_t v480;
  int8x8_t v481;
  uint8x8_t v482;
  unint64_t v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  char v493;
  _BYTE *v494;
  uint64_t v495;
  unint64_t v496;
  _BYTE *v497;
  uint64_t v498;
  _BYTE *v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  size_t v503;
  char *v504;
  char *v505;
  unint64_t v506;
  char *v507;
  __int128 *v508;
  unint64_t v509;
  __int128 v510;
  unint64_t v511;
  _BYTE *v512;
  char *v513;
  uint64_t *v514;
  uint64_t v515;
  char *v516;
  char v517;
  uint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  _OWORD *v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v534;
  _OWORD *v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  BOOL v551;
  _QWORD *v552;
  uint64_t v553;
  char *v554;
  uint64_t v555;
  __int128 *v556;
  uint64_t v557;
  _QWORD *v558;
  unsigned __int8 *v559;
  int v560;
  int v561;
  _QWORD *v562;
  std::__shared_weak_count *v563;
  unint64_t v564;
  unint64_t *p_shared_weak_owners;
  unint64_t v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  int v571;
  std::__shared_weak_count *v572;
  std::__shared_weak_count *v573;
  int v574;
  std::__shared_weak_count *v575;
  std::__shared_weak_count *v576;
  uint64_t v577;
  unsigned __int8 v578;
  _WORD *v579;
  _WORD *v580;
  _WORD *v581;
  uint64_t *v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t v586;
  int v587;
  unint64_t v588;
  BOOL v589;
  _BOOL4 v590;
  _BOOL4 v591;
  uint64_t v592;
  unsigned __int8 v593;
  unsigned __int16 *v594;
  unsigned __int16 *v595;
  unsigned __int16 *v596;
  uint64_t *v597;
  unint64_t *v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  int v602;
  unint64_t v603;
  BOOL v604;
  _BOOL4 v605;
  _BOOL4 v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  int8x8_t v621;
  unint64_t v622;
  unsigned __int8 *v623;
  uint8x8_t v624;
  uint64_t v625;
  unsigned __int8 *v626;
  _QWORD *v627;
  unint64_t v628;
  unsigned __int8 *v629;
  unint64_t v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  int v636;
  std::__shared_weak_count *v637;
  int v638;
  uint64_t v639;
  unint64_t **v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  BOOL v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t **v673;
  unint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  BOOL v700;
  uint64_t *v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t v709;
  unint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  unint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  BOOL v733;
  uint64_t *v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v737;
  unint64_t **v739;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v751;
  unint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  unint64_t v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  BOOL v766;
  uint64_t *v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t v772;
  unint64_t v773;
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  unint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  BOOL v799;
  uint64_t *v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  char **v805;
  unsigned __int16 *v807;
  uint64_t *v808;
  unsigned __int16 *v809;
  uint64_t *v810;
  uint64_t *v811;
  const void *__s2;
  uint64_t v813;
  size_t __na;
  int v816;
  uint64_t *v817;
  uint64_t v818;
  int v819;
  unsigned int v820;
  int v821;
  _OWORD *v822;
  uint64_t *v824;
  uint64_t *v825;
  uint64_t *v826;
  _OWORD *v827;
  char *v828;
  int v829;
  int v830;
  std::__shared_weak_count *v831;
  char *__p;
  void *__pa;
  void *__pb;
  std::__shared_weak_count *__pc;
  int v836;
  unint64_t v837;
  int v838;
  uint64_t *v839;
  int v840;
  gdc::Registry *v841;
  uint64_t v842;
  uint64_t v843;
  char v844;
  char v845;
  char *v846;
  std::__shared_weak_count *v847;
  uint64_t v848;
  __int128 v849;
  _OWORD *v850;
  _OWORD *v851;
  uint64_t v852;
  gdc::Registry *v853;
  _QWORD v854[3];
  _QWORD *v855;
  char v856;
  unint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  std::__shared_weak_count *v863;
  _BYTE v864[24];
  _BYTE *v865;
  _QWORD *v866;
  gdc::Registry **v867;
  char v868;
  int v869;
  char *v870;
  _QWORD v871[3];
  _QWORD *v872;
  _BYTE buf[32];
  __int128 v874;
  __int128 v875;
  __int128 v876;
  _BYTE v877[32];
  unsigned __int8 v878;
  unsigned __int16 v879;
  void *v880;
  uint64_t v881;
  void *v882;
  uint64_t *v883;
  unsigned __int8 v884;
  int v885;
  unint64_t v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  uint64_t v890;

  v890 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v7 = (uint64_t *)a3[2];
  v6 = (unsigned __int8 *)a3[3];
  v813 = a3[1];
  v8 = fabs(*(double *)(v813 + 40));
  v9 = v6[1];
  v10 = *v6;
  if (v9)
    v11 = 1;
  else
    v11 = v10 == 0;
  v12 = v11;
  if (v8 <= 0.0001)
    v12 = 1;
  v856 = v12;
  v818 = v5;
  j = *(_QWORD **)(v5 + 168);
  v855 = j;
  v808 = v7;
  v14 = (_QWORD *)*v7;
  if ((v15 & 1) == 0)
    goto LABEL_1310;
  while (1)
  {
    v16 = (_WORD *)v14[6];
    v17 = (_WORD *)v14[7];
    if (v16 == v17)
    {
      v824 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      v19 = a1;
    }
    else
    {
      v824 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      v18 = (_WORD *)v14[6];
      v19 = a1;
      while (*v18 != 33)
      {
        v18 += 16;
        if (v18 == v17)
          goto LABEL_23;
      }
      if (v18 == v17)
      {
        v20 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v16 != 33)
        {
          v16 += 16;
          if (v16 == v17)
          {
            v16 = (_WORD *)v14[7];
            break;
          }
        }
        v20 = (uint64_t *)(v16 + 4);
      }
      v824 = v20;
    }
LABEL_23:
    v854[0] = &v855;
    v854[1] = &v856;
    v854[2] = v19;
    v21 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>((uint64_t)j);
    v22 = (_QWORD *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>((uint64_t)j);
    v23 = gdc::Registry::storage<std::vector<gdc::Registry*>>((uint64_t)j);
    v24 = (_QWORD *)v23;
    v25 = v23 + 32;
    v27 = v21[7];
    v26 = v21[8];
    if (v22[8] - v22[7] >= (unint64_t)(v26 - v27))
      v28 = v21 + 4;
    else
      v28 = v22 + 4;
    if (*(_QWORD *)(v23 + 64) - *(_QWORD *)(v23 + 56) >= v28[4] - v28[3])
      v29 = v28;
    else
      v29 = (_QWORD *)(v23 + 32);
    if (v26 != v27 && v21 + 4 == v29)
    {
      v30 = (uint64_t *)v21[10];
      v4 = 24;
      do
      {
        v32 = *(unsigned int *)(v27 + 4);
        v33 = v32 >> 7;
        v34 = v22[4];
        v35 = (v22[5] - v34) >> 3;
        if (v32 >> 7 >= v35)
          goto LABEL_34;
        v36 = *(_QWORD *)(v34 + 8 * v33);
        if (!v36)
          goto LABEL_34;
        v37 = *(unsigned __int16 *)(v36 + 2 * (v32 & 0x7F));
        v39 = v22[7];
        v38 = v22[8];
        v40 = (v38 - v39) >> 3;
        if (v40 <= v37)
          goto LABEL_34;
        v41 = v39 + 8 * v37;
        if (v41 == v38 || *(_DWORD *)(v41 + 4) != (_DWORD)v32)
          goto LABEL_34;
        v43 = v24[4];
        v44 = (v24[5] - v43) >> 3;
        if (v33 >= v44)
          goto LABEL_34;
        v45 = *(_QWORD *)(v43 + 8 * v33);
        if (!v45)
          goto LABEL_34;
        v46 = *(unsigned __int16 *)(v45 + 2 * (v32 & 0x7F));
        v48 = v24[7];
        v47 = v24[8];
        v49 = (v47 - v48) >> 3;
        if (v49 <= v46)
          goto LABEL_34;
        v50 = v48 + 8 * v46;
        if (v50 == v47 || *(_DWORD *)(v50 + 4) != (_DWORD)v32)
          goto LABEL_34;
        v52 = *(_QWORD *)v27;
        v53 = HIDWORD(*(_QWORD *)v27);
        v54 = *(_QWORD *)v27 >> 39;
        if (v54 < v35
          && (v55 = *(_QWORD *)(v34 + 8 * v54)) != 0
          && (v56 = *(unsigned __int16 *)(v55 + 2 * (HIDWORD(v52) & 0x7F)), v40 > v56)
          && ((v57 = v39 + 8 * v56, v57 != v38) ? (v58 = *(_DWORD *)(v57 + 4) == (_DWORD)v53) : (v58 = 0), v58))
        {
          v59 = v22[10] + 40 * v56;
          if (v54 >= v44)
            goto LABEL_32;
        }
        else
        {
          v59 = v22[11];
          if (v54 >= v44)
            goto LABEL_32;
        }
        v60 = *(_QWORD *)(v43 + 8 * v54);
        if (v60)
        {
          v61 = *(unsigned __int16 *)(v60 + 2 * (HIDWORD(v52) & 0x7F));
          if (v49 > v61)
          {
            v62 = v48 + 8 * v61;
            if (v62 != v47 && *(_DWORD *)(v62 + 4) == (_DWORD)v53)
            {
              v31 = (unint64_t **)(v24[10] + 24 * v61);
              goto LABEL_33;
            }
          }
        }
LABEL_32:
        v31 = (unint64_t **)v24[11];
LABEL_33:
        _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__1clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource10RasterTileEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE((uint64_t)v854, v52, v30, v59, v31);
LABEL_34:
        ++v30;
        v27 += 8;
      }
      while (v27 != v26);
    }
    if (v22 + 4 == v29)
    {
      v314 = v22[7];
      v315 = v22[8];
      if (v314 != v315)
      {
        v316 = v22[10];
        do
        {
          v674 = *(unsigned int *)(v314 + 4);
          v675 = v674 >> 7;
          v676 = v21[4];
          v677 = (v21[5] - v676) >> 3;
          if (v674 >> 7 >= v677)
            goto LABEL_1159;
          v678 = *(_QWORD *)(v676 + 8 * v675);
          if (!v678)
            goto LABEL_1159;
          v679 = *(unsigned __int16 *)(v678 + 2 * (v674 & 0x7F));
          v681 = v21[7];
          v680 = v21[8];
          v682 = (v680 - v681) >> 3;
          if (v682 <= v679)
            goto LABEL_1159;
          v683 = v681 + 8 * v679;
          if (v683 == v680 || *(_DWORD *)(v683 + 4) != (_DWORD)v674)
            goto LABEL_1159;
          v685 = v24[4];
          v686 = (v24[5] - v685) >> 3;
          if (v675 >= v686)
            goto LABEL_1159;
          v687 = *(_QWORD *)(v685 + 8 * v675);
          if (!v687)
            goto LABEL_1159;
          v688 = *(unsigned __int16 *)(v687 + 2 * (v674 & 0x7F));
          v690 = v24[7];
          v689 = v24[8];
          v691 = (v689 - v690) >> 3;
          if (v691 <= v688)
            goto LABEL_1159;
          v692 = v690 + 8 * v688;
          if (v692 == v689 || *(_DWORD *)(v692 + 4) != (_DWORD)v674)
            goto LABEL_1159;
          v694 = *(_QWORD *)v314;
          v695 = HIDWORD(*(_QWORD *)v314);
          v696 = *(_QWORD *)v314 >> 39;
          if (v696 < v677
            && (v697 = *(_QWORD *)(v676 + 8 * v696)) != 0
            && (v698 = *(unsigned __int16 *)(v697 + 2 * (HIDWORD(v694) & 0x7F)), v682 > v698)
            && ((v699 = v681 + 8 * v698, v699 != v680) ? (v700 = *(_DWORD *)(v699 + 4) == (_DWORD)v695) : (v700 = 0),
                v700))
          {
            v701 = (uint64_t *)(v21[10] + 8 * v698);
            if (v696 >= v686)
              goto LABEL_1157;
          }
          else
          {
            v701 = (uint64_t *)v21[11];
            if (v696 >= v686)
              goto LABEL_1157;
          }
          v702 = *(_QWORD *)(v685 + 8 * v696);
          if (v702)
          {
            v703 = *(unsigned __int16 *)(v702 + 2 * (HIDWORD(v694) & 0x7F));
            if (v691 > v703)
            {
              v704 = v690 + 8 * v703;
              if (v704 != v689 && *(_DWORD *)(v704 + 4) == (_DWORD)v695)
              {
                v673 = (unint64_t **)(v24[10] + 24 * v703);
                goto LABEL_1158;
              }
            }
          }
LABEL_1157:
          v673 = (unint64_t **)v24[11];
LABEL_1158:
          _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__1clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource10RasterTileEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE((uint64_t)v854, v694, v701, v316, v673);
LABEL_1159:
          v316 += 40;
          v314 += 8;
        }
        while (v314 != v315);
      }
    }
    if ((_QWORD *)v25 == v29)
    {
      v317 = v24[7];
      v318 = v24[8];
      if (v317 != v318)
      {
        v319 = (unint64_t **)v24[10];
        do
        {
          v707 = *(unsigned int *)(v317 + 4);
          v708 = v707 >> 7;
          v709 = v21[4];
          v710 = (v21[5] - v709) >> 3;
          if (v707 >> 7 >= v710)
            goto LABEL_1196;
          v711 = *(_QWORD *)(v709 + 8 * v708);
          if (!v711)
            goto LABEL_1196;
          v712 = *(unsigned __int16 *)(v711 + 2 * (v707 & 0x7F));
          v714 = v21[7];
          v713 = v21[8];
          v715 = (v713 - v714) >> 3;
          if (v715 <= v712)
            goto LABEL_1196;
          v716 = v714 + 8 * v712;
          if (v716 == v713 || *(_DWORD *)(v716 + 4) != (_DWORD)v707)
            goto LABEL_1196;
          v718 = v22[4];
          v719 = (v22[5] - v718) >> 3;
          if (v708 >= v719)
            goto LABEL_1196;
          v720 = *(_QWORD *)(v718 + 8 * v708);
          if (!v720)
            goto LABEL_1196;
          v721 = *(unsigned __int16 *)(v720 + 2 * (v707 & 0x7F));
          v723 = v22[7];
          v722 = v22[8];
          v724 = (v722 - v723) >> 3;
          if (v724 <= v721)
            goto LABEL_1196;
          v725 = v723 + 8 * v721;
          if (v725 == v722 || *(_DWORD *)(v725 + 4) != (_DWORD)v707)
            goto LABEL_1196;
          v727 = *(_QWORD *)v317;
          v728 = HIDWORD(*(_QWORD *)v317);
          v729 = *(_QWORD *)v317 >> 39;
          if (v729 < v710
            && (v730 = *(_QWORD *)(v709 + 8 * v729)) != 0
            && (v731 = *(unsigned __int16 *)(v730 + 2 * (HIDWORD(v727) & 0x7F)), v715 > v731)
            && ((v732 = v714 + 8 * v731, v732 != v713) ? (v733 = *(_DWORD *)(v732 + 4) == (_DWORD)v728) : (v733 = 0),
                v733))
          {
            v734 = (uint64_t *)(v21[10] + 8 * v731);
            if (v729 >= v719)
              goto LABEL_1194;
          }
          else
          {
            v734 = (uint64_t *)v21[11];
            if (v729 >= v719)
              goto LABEL_1194;
          }
          v735 = *(_QWORD *)(v718 + 8 * v729);
          if (v735)
          {
            v736 = *(unsigned __int16 *)(v735 + 2 * (HIDWORD(v727) & 0x7F));
            if (v724 > v736)
            {
              v737 = v723 + 8 * v736;
              if (v737 != v722 && *(_DWORD *)(v737 + 4) == (_DWORD)v728)
              {
                v706 = v22[10] + 40 * v736;
                goto LABEL_1195;
              }
            }
          }
LABEL_1194:
          v706 = v22[11];
LABEL_1195:
          _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__1clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource10RasterTileEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE((uint64_t)v854, v727, v734, v706, v319);
LABEL_1196:
          v319 += 3;
          v317 += 8;
        }
        while (v317 != v318);
      }
    }
    v64 = (uint64_t)v855;
    v65 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>((uint64_t)v855);
    v66 = (_QWORD *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(v64);
    v67 = gdc::Registry::storage<std::vector<gdc::Registry*>>(v64);
    v68 = (_QWORD *)v67;
    v69 = v67 + 32;
    v71 = v65[7];
    v70 = v65[8];
    if (v66[8] - v66[7] >= (unint64_t)(v70 - v71))
      v72 = v65 + 4;
    else
      v72 = v66 + 4;
    if (*(_QWORD *)(v67 + 64) - *(_QWORD *)(v67 + 56) >= v72[4] - v72[3])
      v73 = v72;
    else
      v73 = (_QWORD *)(v67 + 32);
    if (v70 != v71 && v65 + 4 == v73)
    {
      v289 = (uint64_t *)v65[10];
      v4 = 24;
      do
      {
        v641 = *(unsigned int *)(v71 + 4);
        v642 = v641 >> 7;
        v643 = v66[4];
        v644 = (v66[5] - v643) >> 3;
        if (v641 >> 7 >= v644)
          goto LABEL_1122;
        v645 = *(_QWORD *)(v643 + 8 * v642);
        if (!v645)
          goto LABEL_1122;
        v646 = *(unsigned __int16 *)(v645 + 2 * (v641 & 0x7F));
        v648 = v66[7];
        v647 = v66[8];
        v649 = (v647 - v648) >> 3;
        if (v649 <= v646)
          goto LABEL_1122;
        v650 = v648 + 8 * v646;
        if (v650 == v647 || *(_DWORD *)(v650 + 4) != (_DWORD)v641)
          goto LABEL_1122;
        v652 = v68[4];
        v653 = (v68[5] - v652) >> 3;
        if (v642 >= v653)
          goto LABEL_1122;
        v654 = *(_QWORD *)(v652 + 8 * v642);
        if (!v654)
          goto LABEL_1122;
        v655 = *(unsigned __int16 *)(v654 + 2 * (v641 & 0x7F));
        v657 = v68[7];
        v656 = v68[8];
        v658 = (v656 - v657) >> 3;
        if (v658 <= v655)
          goto LABEL_1122;
        v659 = v657 + 8 * v655;
        if (v659 == v656 || *(_DWORD *)(v659 + 4) != (_DWORD)v641)
          goto LABEL_1122;
        v661 = *(_QWORD *)v71;
        v662 = HIDWORD(*(_QWORD *)v71);
        v663 = *(_QWORD *)v71 >> 39;
        if (v663 < v644
          && (v664 = *(_QWORD *)(v643 + 8 * v663)) != 0
          && (v665 = *(unsigned __int16 *)(v664 + 2 * (HIDWORD(v661) & 0x7F)), v649 > v665)
          && ((v666 = v648 + 8 * v665, v666 != v647) ? (v667 = *(_DWORD *)(v666 + 4) == (_DWORD)v662) : (v667 = 0), v667))
        {
          v668 = v66[10] + 40 * v665;
          if (v663 >= v653)
            goto LABEL_1120;
        }
        else
        {
          v668 = v66[11];
          if (v663 >= v653)
            goto LABEL_1120;
        }
        v669 = *(_QWORD *)(v652 + 8 * v663);
        if (v669)
        {
          v670 = *(unsigned __int16 *)(v669 + 2 * (HIDWORD(v661) & 0x7F));
          if (v658 > v670)
          {
            v671 = v657 + 8 * v670;
            if (v671 != v656 && *(_DWORD *)(v671 + 4) == (_DWORD)v662)
            {
              v640 = (unint64_t **)(v68[10] + 24 * v670);
              goto LABEL_1121;
            }
          }
        }
LABEL_1120:
        v640 = (unint64_t **)v68[11];
LABEL_1121:
        _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__2clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource7TextureEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE((uint64_t)v854, v661, v289, v668, v640);
LABEL_1122:
        ++v289;
        v71 += 8;
      }
      while (v71 != v70);
    }
    if (v66 + 4 == v73)
    {
      v320 = v66[7];
      v321 = v66[8];
      if (v320 != v321)
      {
        v322 = v66[10];
        do
        {
          v740 = *(unsigned int *)(v320 + 4);
          v741 = v740 >> 7;
          v742 = v65[4];
          v743 = (v65[5] - v742) >> 3;
          if (v740 >> 7 >= v743)
            goto LABEL_1233;
          v744 = *(_QWORD *)(v742 + 8 * v741);
          if (!v744)
            goto LABEL_1233;
          v745 = *(unsigned __int16 *)(v744 + 2 * (v740 & 0x7F));
          v747 = v65[7];
          v746 = v65[8];
          v748 = (v746 - v747) >> 3;
          if (v748 <= v745)
            goto LABEL_1233;
          v749 = v747 + 8 * v745;
          if (v749 == v746 || *(_DWORD *)(v749 + 4) != (_DWORD)v740)
            goto LABEL_1233;
          v751 = v68[4];
          v752 = (v68[5] - v751) >> 3;
          if (v741 >= v752)
            goto LABEL_1233;
          v753 = *(_QWORD *)(v751 + 8 * v741);
          if (!v753)
            goto LABEL_1233;
          v754 = *(unsigned __int16 *)(v753 + 2 * (v740 & 0x7F));
          v756 = v68[7];
          v755 = v68[8];
          v757 = (v755 - v756) >> 3;
          if (v757 <= v754)
            goto LABEL_1233;
          v758 = v756 + 8 * v754;
          if (v758 == v755 || *(_DWORD *)(v758 + 4) != (_DWORD)v740)
            goto LABEL_1233;
          v760 = *(_QWORD *)v320;
          v761 = HIDWORD(*(_QWORD *)v320);
          v762 = *(_QWORD *)v320 >> 39;
          if (v762 < v743
            && (v763 = *(_QWORD *)(v742 + 8 * v762)) != 0
            && (v764 = *(unsigned __int16 *)(v763 + 2 * (HIDWORD(v760) & 0x7F)), v748 > v764)
            && ((v765 = v747 + 8 * v764, v765 != v746) ? (v766 = *(_DWORD *)(v765 + 4) == (_DWORD)v761) : (v766 = 0),
                v766))
          {
            v767 = (uint64_t *)(v65[10] + 8 * v764);
            if (v762 >= v752)
              goto LABEL_1231;
          }
          else
          {
            v767 = (uint64_t *)v65[11];
            if (v762 >= v752)
              goto LABEL_1231;
          }
          v768 = *(_QWORD *)(v751 + 8 * v762);
          if (v768)
          {
            v769 = *(unsigned __int16 *)(v768 + 2 * (HIDWORD(v760) & 0x7F));
            if (v757 > v769)
            {
              v770 = v756 + 8 * v769;
              if (v770 != v755 && *(_DWORD *)(v770 + 4) == (_DWORD)v761)
              {
                v739 = (unint64_t **)(v68[10] + 24 * v769);
                goto LABEL_1232;
              }
            }
          }
LABEL_1231:
          v739 = (unint64_t **)v68[11];
LABEL_1232:
          _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__2clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource7TextureEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE((uint64_t)v854, v760, v767, v322, v739);
LABEL_1233:
          v322 += 40;
          v320 += 8;
        }
        while (v320 != v321);
      }
    }
    if ((_QWORD *)v69 == v73)
    {
      v323 = v68[7];
      v324 = v68[8];
      if (v323 != v324)
      {
        v325 = (unint64_t **)v68[10];
        do
        {
          v773 = *(unsigned int *)(v323 + 4);
          v774 = v773 >> 7;
          v775 = v65[4];
          v776 = (v65[5] - v775) >> 3;
          if (v773 >> 7 >= v776)
            goto LABEL_1270;
          v777 = *(_QWORD *)(v775 + 8 * v774);
          if (!v777)
            goto LABEL_1270;
          v778 = *(unsigned __int16 *)(v777 + 2 * (v773 & 0x7F));
          v780 = v65[7];
          v779 = v65[8];
          v781 = (v779 - v780) >> 3;
          if (v781 <= v778)
            goto LABEL_1270;
          v782 = v780 + 8 * v778;
          if (v782 == v779 || *(_DWORD *)(v782 + 4) != (_DWORD)v773)
            goto LABEL_1270;
          v784 = v66[4];
          v785 = (v66[5] - v784) >> 3;
          if (v774 >= v785)
            goto LABEL_1270;
          v786 = *(_QWORD *)(v784 + 8 * v774);
          if (!v786)
            goto LABEL_1270;
          v787 = *(unsigned __int16 *)(v786 + 2 * (v773 & 0x7F));
          v789 = v66[7];
          v788 = v66[8];
          v790 = (v788 - v789) >> 3;
          if (v790 <= v787)
            goto LABEL_1270;
          v791 = v789 + 8 * v787;
          if (v791 == v788 || *(_DWORD *)(v791 + 4) != (_DWORD)v773)
            goto LABEL_1270;
          v793 = *(_QWORD *)v323;
          v794 = HIDWORD(*(_QWORD *)v323);
          v795 = *(_QWORD *)v323 >> 39;
          if (v795 < v776
            && (v796 = *(_QWORD *)(v775 + 8 * v795)) != 0
            && (v797 = *(unsigned __int16 *)(v796 + 2 * (HIDWORD(v793) & 0x7F)), v781 > v797)
            && ((v798 = v780 + 8 * v797, v798 != v779) ? (v799 = *(_DWORD *)(v798 + 4) == (_DWORD)v794) : (v799 = 0),
                v799))
          {
            v800 = (uint64_t *)(v65[10] + 8 * v797);
            if (v795 >= v785)
              goto LABEL_1268;
          }
          else
          {
            v800 = (uint64_t *)v65[11];
            if (v795 >= v785)
              goto LABEL_1268;
          }
          v801 = *(_QWORD *)(v784 + 8 * v795);
          if (v801)
          {
            v802 = *(unsigned __int16 *)(v801 + 2 * (HIDWORD(v793) & 0x7F));
            if (v790 > v802)
            {
              v803 = v789 + 8 * v802;
              if (v803 != v788 && *(_DWORD *)(v803 + 4) == (_DWORD)v794)
              {
                v772 = v66[10] + 40 * v802;
                goto LABEL_1269;
              }
            }
          }
LABEL_1268:
          v772 = v66[11];
LABEL_1269:
          _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__2clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource7TextureEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE((uint64_t)v854, v793, v800, v772, v325);
LABEL_1270:
          v325 += 3;
          v323 += 8;
        }
        while (v323 != v324);
      }
    }
    v75 = *(int8x8_t **)(a1 + 168);
    v76 = (_QWORD *)v75[3];
    if (!v76)
      goto LABEL_133;
    do
    {
      v77 = (_QWORD *)v76[8];
      if (v77)
      {
        while (1)
        {
          v78 = v77[8];
          v79 = *(_QWORD *)(v78 + 32);
          if (v79)
          {
            v80 = *(_QWORD *)(v79 + 8) == -1;
            v81 = *(_QWORD *)(v78 + 48);
            if (!v81)
              goto LABEL_96;
          }
          else
          {
            v80 = 1;
            v81 = *(_QWORD *)(v78 + 48);
            if (!v81)
              goto LABEL_96;
          }
          if (*(_QWORD *)(v81 + 8) == -1)
            v80 = 1;
          if (v80)
          {
LABEL_96:
            if (!atomic_load((unsigned __int8 *)v78))
            {
              atomic_store(3u, (unsigned __int8 *)v77[8]);
              atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v77[8] + 8) + 32));
            }
            v83 = (int8x8_t)v76[7];
            v85 = (_QWORD *)*v77;
            v84 = v77[1];
            v86 = (uint8x8_t)vcnt_s8(v83);
            v86.i16[0] = vaddlv_u8(v86);
            if (v86.u32[0] > 1uLL)
            {
              if (v84 >= *(_QWORD *)&v83)
                v84 %= *(_QWORD *)&v83;
            }
            else
            {
              v84 &= *(_QWORD *)&v83 - 1;
            }
            v87 = v76[6];
            v88 = *(_QWORD **)(v87 + 8 * v84);
            do
            {
              v89 = v88;
              v88 = (_QWORD *)*v88;
            }
            while (v88 != v77);
            if (v89 == v76 + 8)
              goto LABEL_1314;
            v90 = v89[1];
            if (v86.u32[0] > 1uLL)
            {
              if (v90 >= *(_QWORD *)&v83)
                v90 %= *(_QWORD *)&v83;
            }
            else
            {
              v90 &= *(_QWORD *)&v83 - 1;
            }
            v91 = (_QWORD *)*v77;
            if (v90 != v84)
            {
LABEL_1314:
              if (v85)
              {
                v92 = v85[1];
                if (v86.u32[0] > 1uLL)
                {
                  v93 = v85[1];
                  if (v92 >= *(_QWORD *)&v83)
                    v93 = v92 % *(_QWORD *)&v83;
                }
                else
                {
                  v93 = v92 & (*(_QWORD *)&v83 - 1);
                }
                v91 = (_QWORD *)*v77;
                if (v93 == v84)
                  goto LABEL_121;
              }
              *(_QWORD *)(v87 + 8 * v84) = 0;
              v91 = (_QWORD *)*v77;
            }
            if (v91)
            {
              v92 = v91[1];
LABEL_121:
              if (v86.u32[0] > 1uLL)
              {
                if (v92 >= *(_QWORD *)&v83)
                  v92 %= *(_QWORD *)&v83;
              }
              else
              {
                v92 &= *(_QWORD *)&v83 - 1;
              }
              if (v92 != v84)
              {
                *(_QWORD *)(v76[6] + 8 * v92) = v89;
                v91 = (_QWORD *)*v77;
              }
            }
            *v89 = v91;
            *v77 = 0;
            --v76[9];
            v94 = (std::__shared_weak_count *)v77[9];
            if (v94)
            {
              p_shared_owners = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(p_shared_owners);
              while (__stlxr(v96 - 1, p_shared_owners));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            operator delete(v77);
            v77 = v85;
            if (!v85)
              break;
          }
          else
          {
            v77 = (_QWORD *)*v77;
            if (!v77)
              break;
          }
        }
      }
      v76 = (_QWORD *)*v76;
    }
    while (v76);
    v97 = (int8x8_t *)v75[3];
    if (!v97)
    {
LABEL_133:
      v75[6] = 0;
      goto LABEL_134;
    }
    do
    {
      v187 = (int8x8_t *)v97[8];
      if (v187)
      {
        do
        {
          while (1)
          {
            v188 = *(_QWORD *)(*(_QWORD *)&v187[8] + 8);
            if (v188)
            {
              v189 = atomic_load((unsigned __int8 *)(v188 + 32));
              if ((v189 & 1) != 0)
              {
                v190 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v187[8] + 8) + 33));
                if ((v190 & 1) != 0)
                  break;
                v191 = atomic_load(*(unsigned __int8 **)&v187[8]);
                if (v191 != 1)
                  break;
              }
            }
            v187 = (int8x8_t *)*v187;
            if (!v187)
              goto LABEL_335;
          }
          v192 = v97[7];
          v193 = (unint64_t)v187[1];
          v194 = (uint8x8_t)vcnt_s8(v192);
          v194.i16[0] = vaddlv_u8(v194);
          if (v194.u32[0] > 1uLL)
          {
            if (v193 >= *(_QWORD *)&v192)
              v193 %= *(_QWORD *)&v192;
          }
          else
          {
            v193 &= *(_QWORD *)&v192 - 1;
          }
          v195 = (int8x8_t *)*v187;
          v196 = v97[6];
          v197 = *(int8x8_t **)(*(_QWORD *)&v196 + 8 * v193);
          do
          {
            v198 = v197;
            v197 = (int8x8_t *)*v197;
          }
          while (v197 != v187);
          if (v198 == &v97[8])
            goto LABEL_1315;
          v199 = (unint64_t)v198[1];
          if (v194.u32[0] > 1uLL)
          {
            if (v199 >= *(_QWORD *)&v192)
              v199 %= *(_QWORD *)&v192;
          }
          else
          {
            v199 &= *(_QWORD *)&v192 - 1;
          }
          v200 = (int8x8_t *)*v187;
          if (v199 != v193)
          {
LABEL_1315:
            if (v195)
            {
              v201 = (unint64_t)v195[1];
              if (v194.u32[0] > 1uLL)
              {
                v202 = (unint64_t)v195[1];
                if (v201 >= *(_QWORD *)&v192)
                  v202 = v201 % *(_QWORD *)&v192;
              }
              else
              {
                v202 = v201 & (*(_QWORD *)&v192 - 1);
              }
              v200 = (int8x8_t *)*v187;
              if (v202 == v193)
                goto LABEL_323;
            }
            *(_QWORD *)(*(_QWORD *)&v196 + 8 * v193) = 0;
            v200 = (int8x8_t *)*v187;
          }
          if (v200)
          {
            v201 = (unint64_t)v200[1];
LABEL_323:
            if (v194.u32[0] > 1uLL)
            {
              if (v201 >= *(_QWORD *)&v192)
                v201 %= *(_QWORD *)&v192;
            }
            else
            {
              v201 &= *(_QWORD *)&v192 - 1;
            }
            if (v201 != v193)
            {
              *(_QWORD *)(*(_QWORD *)&v97[6] + 8 * v201) = v198;
              v200 = (int8x8_t *)*v187;
            }
          }
          *v198 = (int8x8_t)v200;
          *v187 = 0;
          --*(_QWORD *)&v97[9];
          v203 = (std::__shared_weak_count *)v187[9];
          if (v203)
          {
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
          operator delete(v187);
          v187 = v195;
        }
        while (v195);
      }
LABEL_335:
      v206 = (int8x8_t *)*v97;
      if (v97[9])
        goto LABEL_294;
      v207 = v75[2];
      v208 = (unint64_t)v97[1];
      v209 = (uint8x8_t)vcnt_s8(v207);
      v209.i16[0] = vaddlv_u8(v209);
      if (v209.u32[0] > 1uLL)
      {
        if (v208 >= *(_QWORD *)&v207)
          v208 %= *(_QWORD *)&v207;
      }
      else
      {
        v208 &= *(_QWORD *)&v207 - 1;
      }
      v210 = v75[1];
      v211 = *(int8x8_t **)(*(_QWORD *)&v210 + 8 * v208);
      do
      {
        v212 = v211;
        v211 = (int8x8_t *)*v211;
      }
      while (v211 != v97);
      if (v212 == &v75[3])
        goto LABEL_1316;
      v213 = (unint64_t)v212[1];
      if (v209.u32[0] > 1uLL)
      {
        if (v213 >= *(_QWORD *)&v207)
          v213 %= *(_QWORD *)&v207;
      }
      else
      {
        v213 &= *(_QWORD *)&v207 - 1;
      }
      v214 = (_QWORD *)*v97;
      if (v213 != v208)
      {
LABEL_1316:
        if (v206)
        {
          v215 = (unint64_t)v206[1];
          if (v209.u32[0] > 1uLL)
          {
            if (v215 >= *(_QWORD *)&v207)
              v215 %= *(_QWORD *)&v207;
          }
          else
          {
            v215 &= *(_QWORD *)&v207 - 1;
          }
          v214 = (_QWORD *)*v97;
          if (v215 == v208)
          {
LABEL_356:
            v216 = v214[1];
            if (v209.u32[0] > 1uLL)
            {
              if (v216 >= *(_QWORD *)&v207)
                v216 %= *(_QWORD *)&v207;
            }
            else
            {
              v216 &= *(_QWORD *)&v207 - 1;
            }
            if (v216 != v208)
            {
              *(_QWORD *)(*(_QWORD *)&v75[1] + 8 * v216) = v212;
              v214 = (_QWORD *)*v97;
            }
            goto LABEL_362;
          }
        }
        *(_QWORD *)(*(_QWORD *)&v210 + 8 * v208) = 0;
        v214 = (_QWORD *)*v97;
      }
      if (v214)
        goto LABEL_356;
LABEL_362:
      *v212 = (int8x8_t)v214;
      *v97 = 0;
      --*(_QWORD *)&v75[4];
      v217 = (_QWORD *)v97[8];
      while (v217)
      {
        v219 = v217;
        v217 = (_QWORD *)*v217;
        v220 = (std::__shared_weak_count *)v219[9];
        if (v220)
        {
          v221 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
          }
        }
        operator delete(v219);
      }
      v218 = (void *)v97[6];
      v97[6] = 0;
      if (v218)
        operator delete(v218);
      operator delete(v97);
LABEL_294:
      v97 = v206;
    }
    while (v206);
    v290 = (_QWORD *)v75[3];
    for (v75[6] = 0; v290; v290 = (_QWORD *)*v290)
    {
      for (i = (_QWORD *)v290[8]; i; i = (_QWORD *)*i)
      {
        v292 = *(_QWORD *)(i[8] + 8);
        if (v292)
        {
          v293 = atomic_load((unsigned __int8 *)(v292 + 33));
          v294 = i[8];
          if ((v293 & 1) != 0)
          {
            v295 = atomic_load((unsigned __int8 *)v294);
            v294 = i[8];
            if (v295 == 2)
            {
              v296 = *(_QWORD *)(v294 + 112);
              v297 = *(_QWORD *)(v294 + 120);
              if (v296 != v297)
              {
                v298 = v75[6].i32[0];
                do
                {
                  v299 = *(_QWORD *)(v296 + 64);
                  if (v299)
                    v299 = (*(_QWORD *)(**(_QWORD **)(v299 + 64) + 48) - *(_QWORD *)(**(_QWORD **)(v299 + 64) + 40))
                         / *(_QWORD *)(**(_QWORD **)(v299 + 64) + 8);
                  LODWORD(v300) = *(unsigned __int8 *)(v296 + 24);
                  if (*(_BYTE *)(v296 + 24))
                    v300 = (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)v296 + 64) + 48)
                          - *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v296 + 64) + 40))
                         / *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v296 + 64) + 8);
                  LODWORD(v301) = *(unsigned __int8 *)(v296 + 56);
                  if (*(_BYTE *)(v296 + 56))
                  {
                    v302 = **(_QWORD ***)(*(_QWORD *)(v296 + 32) + 64);
                    v301 = (v302[6] - v302[5]) / v302[1];
                  }
                  v298 += v300 + v299 + v301;
                  v296 += 80;
                }
                while (v296 != v297);
                v75[6].i32[0] = v298;
              }
            }
          }
          v303 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v294 + 8) + 33));
          if ((v303 & 1) == 0)
            ++v75[6].i32[1];
        }
      }
    }
LABEL_134:
    v98 = *(unsigned __int16 **)(v818 + 216);
    v805 = (char **)(v818 + 216);
    v807 = *(unsigned __int16 **)(v818 + 224);
    if (v98 != v807)
    {
      v4 = 0x64A448A5CD5D38DBLL;
      v99 = v824 + 1;
      while (1)
      {
        v809 = v98;
        v816 = *v98;
        v100 = *v808;
        if ((v101 & 1) == 0
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
        }
        v102 = *(unsigned __int16 **)(v100 + 48);
        v103 = *(unsigned __int16 **)(v100 + 56);
        if (v102 == v103)
          goto LABEL_148;
        v104 = *(unsigned __int16 **)(v100 + 48);
        while (*v104 != v816)
        {
          v104 += 16;
          if (v104 == v103)
            goto LABEL_148;
        }
        if (v104 == v103)
        {
LABEL_148:
          v105 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
        }
        else
        {
          while (*v102 != v816)
          {
            v102 += 16;
            if (v102 == v103)
            {
              v102 = *(unsigned __int16 **)(v100 + 56);
              break;
            }
          }
          v105 = (uint64_t *)(v102 + 4);
        }
        v108 = (uint64_t *)*v105;
        v106 = v105 + 1;
        v107 = v108;
        if (v108 != v106)
          break;
LABEL_136:
        v98 = v809 + 1;
        if (v809 + 1 == v807)
          goto LABEL_371;
      }
      v810 = v106;
LABEL_152:
      v109 = v107[4];
      v110 = (std::__shared_weak_count *)v107[5];
      v862 = v109;
      v863 = v110;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      v113 = *(unsigned __int8 **)(v818 + 184);
      v114 = *(unsigned __int8 **)(v818 + 192);
      if (v113 == v114)
        goto LABEL_280;
      v811 = v107;
      v115 = 0;
      v116 = 0;
      __p = 0;
      v117 = 0;
      v118 = *(unsigned __int8 *)(v109 + 169);
      v838 = *(_DWORD *)(v109 + 172);
      v836 = *(_DWORD *)(v109 + 176);
      v840 = *(unsigned __int8 *)(v109 + 168);
      v820 = v118;
      while (1)
      {
        if (*v113 != v840)
          goto LABEL_158;
        v119 = v113[1];
        v121 = *((_DWORD *)v113 + 1);
        v120 = *((_DWORD *)v113 + 2);
        v122 = *((_QWORD *)v113 + 3);
        v123 = v119 - v118;
        if (v119 >= v118)
        {
          if (v119 != v118 || v121 != v838 || v120 != v836)
          {
LABEL_174:
            if (v118 >= v119)
            {
              if (v118 != v119 || v838 != v121 || v836 != v120)
                goto LABEL_158;
            }
            else
            {
              v127 = v120 >> v123;
              if (v838 != v121 >> v123 || v836 != v127)
                goto LABEL_158;
            }
          }
        }
        else if (v121 != v838 >> (v118 - v119) || v120 != v836 >> (v118 - v119))
        {
          goto LABEL_174;
        }
        if (v117 >= v115)
        {
          v129 = (v117 - __p) >> 3;
          v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 61)
            abort();
          if ((v115 - __p) >> 2 > v130)
            v130 = (v115 - __p) >> 2;
          if ((unint64_t)(v115 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v131 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v131 = v130;
          if (v131)
          {
            if (v131 >> 61)
LABEL_1307:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v132 = operator new(8 * v131);
          }
          else
          {
            v132 = 0;
          }
          v133 = &v132[8 * v129];
          *(_QWORD *)v133 = v122;
          v134 = v133 + 8;
          v135 = __p;
          if (v117 == __p)
            goto LABEL_199;
          v136 = v117 - 8 - __p;
          if (v136 < 0x168
            || &v132[v117 - __p - 8 - (v136 & 0xFFFFFFFFFFFFFFF8)] > &v132[v117 - __p - 8]
            || &v117[-(v136 & 0xFFFFFFFFFFFFFFF8) - 8] > v117 - 8
            || (unint64_t)(__p - v132) < 0x20)
          {
            v137 = v117;
            v135 = __p;
          }
          else
          {
            v139 = (v136 >> 3) + 1;
            v137 = &v117[-8 * (v139 & 0x3FFFFFFFFFFFFFFCLL)];
            v140 = &v132[8 * v129 - 16];
            v141 = v117 - 16;
            v142 = v139 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v143 = *(_OWORD *)v141;
              *(v140 - 1) = *((_OWORD *)v141 - 1);
              *v140 = v143;
              v140 -= 2;
              v141 -= 32;
              v142 -= 4;
            }
            while (v142);
            v133 -= 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
            v135 = __p;
            if (v139 == (v139 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_199;
          }
          do
          {
            v138 = *((_QWORD *)v137 - 1);
            v137 -= 8;
            *((_QWORD *)v133 - 1) = v138;
            v133 -= 8;
          }
          while (v137 != v135);
LABEL_199:
          v115 = &v132[8 * v131];
          if (v135)
            operator delete(v135);
          __p = v133;
          v116 = v134;
          v117 = v134;
          v118 = v820;
          goto LABEL_158;
        }
        *(_QWORD *)v117 = v122;
        v117 += 8;
        v116 = v117;
LABEL_158:
        v113 += 32;
        if (v113 == v114)
        {
          v144 = __p;
          if (__p == v116)
            goto LABEL_278;
          v828 = v116;
          while (2)
          {
            v145 = *(_QWORD **)v144;
            v146 = *(_QWORD *)(*(_QWORD *)v144 + 8);
            if ((v146 & (v146 - 1)) != 0)
            {
              v148 = 0x64A448A5CD5D38DBLL;
              if (v146 <= 0x64A448A5CD5D38DBLL)
                v148 = 0x64A448A5CD5D38DBLL % v146;
              v147 = *(_QWORD **)(*v145 + 8 * v148);
              do
              {
                do
                  v147 = (_QWORD *)*v147;
                while (v147[1] != 0x64A448A5CD5D38DBLL);
              }
              while (v147[2] != 0x64A448A5CD5D38DBLL);
            }
            else
            {
              v147 = *(_QWORD **)(*v145 + 8 * ((v146 - 1) & 0x64A448A5CD5D38DBLL));
              do
              {
                do
                  v147 = (_QWORD *)*v147;
                while (v147[1] != 0x64A448A5CD5D38DBLL);
              }
              while (v147[2] != 0x64A448A5CD5D38DBLL);
            }
            v149 = *(unsigned __int8 **)(v147[5] + 32);
            v150 = v149[1];
            v152 = *((_DWORD *)v149 + 1);
            v151 = *((_DWORD *)v149 + 2);
            v153 = *v149;
            v857 = 0;
            v858 = 0;
            v154 = (_QWORD *)*v824;
            if ((uint64_t *)*v824 == v99)
            {
LABEL_267:
              if (GEOGetVectorKitDrapingLogicLog(void)::onceToken != -1)
                dispatch_once(&GEOGetVectorKitDrapingLogicLog(void)::onceToken, &__block_literal_global_0);
              v177 = v828;
              v178 = (id)GEOGetVectorKitDrapingLogicLog(void)::log;
              if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "false";
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/DrapingLogic.mm";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 374;
                _os_log_impl(&dword_19F029000, v178, OS_LOG_TYPE_ERROR, "No backing data for foundation mesh. Check DaVinciGroundTileData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
              }

              goto LABEL_272;
            }
            while (2)
            {
              v155 = v154[4];
              v156 = (std::__shared_weak_count *)v154[5];
              if (v156)
              {
                v157 = (unint64_t *)&v156->__shared_owners_;
                do
                  v158 = __ldxr(v157);
                while (__stxr(v158 + 1, v157));
              }
              if (*(unsigned __int8 *)(v155 + 168) != v153
                || *(unsigned __int8 *)(v155 + 169) != v150
                || *(_DWORD *)(v155 + 172) != v152
                || *(_DWORD *)(v155 + 176) != v151)
              {
                if (!v156)
                  goto LABEL_242;
                v162 = (unint64_t *)&v156->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                  v164 = (uint64_t *)v154[1];
                  if (v164)
                    goto LABEL_243;
                }
                else
                {
LABEL_242:
                  v164 = (uint64_t *)v154[1];
                  if (v164)
                  {
                    do
                    {
LABEL_243:
                      v165 = v164;
                      v164 = (uint64_t *)*v164;
                    }
                    while (v164);
                    goto LABEL_224;
                  }
                }
                do
                {
                  v165 = (uint64_t *)v154[2];
                  v11 = *v165 == (_QWORD)v154;
                  v154 = v165;
                }
                while (!v11);
LABEL_224:
                v154 = v165;
                if (v165 == v99)
                  goto LABEL_262;
                continue;
              }
              break;
            }
            if (v156)
            {
              v166 = (unint64_t *)&v156->__shared_owners_;
              do
                v167 = __ldxr(v166);
              while (__stxr(v167 + 1, v166));
            }
            v168 = (std::__shared_weak_count *)v858;
            v857 = v155;
            v858 = (uint64_t)v156;
            if (!v168)
              goto LABEL_256;
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
              if (v156)
              {
LABEL_257:
                v171 = (unint64_t *)&v156->__shared_owners_;
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
            }
            else
            {
LABEL_256:
              if (v156)
                goto LABEL_257;
            }
LABEL_262:
            if (!v857)
              goto LABEL_267;
            v173 = *(_DWORD *)(v857 + 8);
            LOBYTE(v866) = v153;
            BYTE1(v866) = v150;
            HIDWORD(v866) = v152;
            LODWORD(v867) = v151;
            v869 = v173;
            v174 = v862;
            v175 = *(_DWORD *)(v862 + 8);
            buf[0] = v840;
            buf[1] = v820;
            *(_DWORD *)&buf[4] = v838;
            *(_DWORD *)&buf[8] = v836;
            *(_WORD *)&buf[24] = v816;
            *(_DWORD *)&buf[28] = v175;
            v874 = 0uLL;
            md::DrapingLogic::_drapeKeyPair(a1, (unsigned __int8 *)&v866, buf, (uint8_t **)&v857, &v862, v818, v813, a2, (uint64_t)v145);
            if (*(_BYTE *)(a1 + 224)
              && md::ElevatedStrokeTileData::groupContainingFeature(*(int8x8_t **)(v174 + 752), *(int8x8_t **)(v174 + 760), *(_QWORD *)(a1 + 216)))
            {
              v176 = *(_DWORD *)(v174 + 8);
              LOBYTE(v887) = v840;
              BYTE1(v887) = v820;
              *(_QWORD *)((char *)&v887 + 4) = __PAIR64__(v836, v838);
              WORD4(v888) = v816;
              HIDWORD(v888) = v176;
              v889 = *(_OWORD *)(a1 + 216);
              md::DrapingLogic::_drapeKeyPair(a1, (unsigned __int8 *)&v866, (unsigned __int8 *)&v887, (uint8_t **)&v857, &v862, v818, v813, a2, (uint64_t)v145);
            }
            v177 = v828;
LABEL_272:
            v179 = (std::__shared_weak_count *)v858;
            if (v858)
            {
              v180 = (unint64_t *)(v858 + 8);
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v144 += 8;
            if (v144 != v177)
              continue;
            break;
          }
          v116 = __p;
LABEL_278:
          v106 = v810;
          v107 = v811;
          if (v116)
            operator delete(v116);
LABEL_280:
          v182 = v863;
          if (!v863)
            goto LABEL_284;
          v183 = (unint64_t *)&v863->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
            v185 = (uint64_t *)v107[1];
            if (v185)
              goto LABEL_285;
          }
          else
          {
LABEL_284:
            v185 = (uint64_t *)v107[1];
            if (v185)
            {
              do
              {
LABEL_285:
                v186 = v185;
                v185 = (uint64_t *)*v185;
              }
              while (v185);
              goto LABEL_151;
            }
          }
          do
          {
            v186 = (uint64_t *)v107[2];
            v11 = *v186 == (_QWORD)v107;
            v107 = v186;
          }
          while (!v11);
LABEL_151:
          v107 = v186;
          if (v186 == v106)
            goto LABEL_136;
          goto LABEL_152;
        }
      }
    }
LABEL_371:
    v223 = *(_QWORD *)(a1 + 168);
    if (*(_BYTE *)(a1 + 400))
    {
      v887 = 0u;
      v888 = 0u;
      LODWORD(v889) = 1065353216;
      v224 = *(_QWORD **)(v223 + 24);
      if (!v224)
      {
LABEL_547:
        v304 = (_BYTE *)v888;
        if ((_QWORD)v888)
        {
          do
          {
            if (v304[224])
              v304[224] = 0;
            v311 = *(_BYTE **)v304;
            v312 = (void *)*((_QWORD *)v304 + 18);
            if (v312 != *((void **)v304 + 20))
              free(v312);
            if (v304[112])
              v304[112] = 0;
            v313 = (void *)*((_QWORD *)v304 + 4);
            if (v313 != *((void **)v304 + 6))
              free(v313);
            operator delete(v304);
            v304 = v311;
          }
          while (v311);
        }
        v305 = (void *)v887;
        *(_QWORD *)&v887 = 0;
        if (v305)
          operator delete(v305);
        v223 = *(_QWORD *)(a1 + 168);
        goto LABEL_551;
      }
      while (1)
      {
        v225 = (uint64_t **)v224[8];
        if (v225)
          break;
LABEL_374:
        v224 = (_QWORD *)*v224;
        if (!v224)
        {
          if (*((_QWORD *)&v888 + 1))
            md::DrapingLogic::_fixUpHoles(a1, (_QWORD *)v888, v808, v805);
          goto LABEL_547;
        }
      }
      while (1)
      {
        v226 = atomic_load((unsigned __int8 *)v225[8]);
        if (v226 == 2)
          goto LABEL_377;
        v227 = atomic_load((unsigned __int8 *)v225[8]);
        if (v227 == 3)
          goto LABEL_377;
        v228 = v225[8];
        if (!(*((_DWORD *)v228 + 15) * *((_DWORD *)v228 + 14)))
          goto LABEL_377;
        v862 = 0;
        v863 = 0;
        v229 = (std::__shared_weak_count *)v228[4];
        if (v229 && (v863 = std::__shared_weak_count::lock(v229)) != 0)
        {
          v230 = v228[3];
          v862 = v230;
        }
        else
        {
          v230 = 0;
        }
        v231 = v225[8];
        v232 = (std::__shared_weak_count *)v231[6];
        if (!v232 || (v233 = std::__shared_weak_count::lock(v232), (v858 = (uint64_t)v233) == 0))
        {
LABEL_507:
          v285 = v863;
          if (v863)
            goto LABEL_508;
          goto LABEL_377;
        }
        v234 = v233;
        v235 = v231[5];
        v857 = v235;
        if (v230)
        {
          if (v235)
            break;
        }
LABEL_504:
        v283 = (unint64_t *)&v234->__shared_owners_;
        do
          v284 = __ldaxr(v283);
        while (__stlxr(v284 - 1, v283));
        if (v284)
          goto LABEL_507;
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
        v285 = v863;
        if (v863)
        {
LABEL_508:
          v286 = (unint64_t *)&v285->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
LABEL_377:
        v225 = (uint64_t **)*v225;
        if (!v225)
          goto LABEL_374;
      }
      buf[0] = *(_BYTE *)(v230 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], v230 + 24);
      v877[16] = 0;
      if (*(_BYTE *)(v230 + 112))
      {
        *(_DWORD *)&v877[20] = *(_DWORD *)(v230 + 116);
        v877[16] = 1;
      }
      *(_QWORD *)&v877[24] = *(_QWORD *)(v230 + 120);
      v878 = *(_BYTE *)(v235 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v879, v235 + 24);
      v884 = 0;
      if (*(_BYTE *)(v235 + 112))
      {
        v885 = *(_DWORD *)(v235 + 116);
        v236 = 1;
        v884 = 1;
      }
      else
      {
        v236 = 0;
      }
      v886 = *(_QWORD *)(v235 + 120);
      v237 = (*(_QWORD *)&v877[24] + (v886 << 6) + (v886 >> 2) - 0x61C8864680B583EBLL) ^ v886;
      v238 = *((_QWORD *)&v887 + 1);
      if (*((_QWORD *)&v887 + 1))
      {
        v239 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v887 + 8));
        v239.i16[0] = vaddlv_u8(v239);
        if (v239.u32[0] > 1uLL)
        {
          v4 = (*(_QWORD *)&v877[24] + (v886 << 6) + (v886 >> 2) - 0x61C8864680B583EBLL) ^ v886;
          if (v237 >= *((_QWORD *)&v887 + 1))
            v4 = v237 % *((_QWORD *)&v887 + 1);
        }
        else
        {
          v4 = v237 & (*((_QWORD *)&v887 + 1) - 1);
        }
        v240 = *(uint64_t ****)(v887 + 8 * v4);
        if (v240)
        {
          v241 = *v240;
          if (*v240)
          {
            v242 = buf[0];
            v243 = *(unsigned __int16 *)&buf[8];
            v244 = *(uint64_t **)v877;
            v245 = *(void **)&buf[16];
            v246 = *(_QWORD *)&buf[24] - *(_QWORD *)&buf[16];
            v821 = v878;
            v819 = v879;
            v817 = v883;
            __s2 = v880;
            __na = v881 - (_QWORD)v880;
            if (v239.u32[0] < 2uLL)
            {
              while (1)
              {
                v253 = v241[1];
                if (v253 == (uint64_t *)v237)
                {
                  if (*((unsigned __int8 *)v241 + 16) == v242
                    && *((unsigned __int16 *)v241 + 12) == v243
                    && v241[12] == v244)
                  {
                    v254 = v241[4];
                    if ((char *)v241[5] - (char *)v254 == v246)
                    {
                      __pb = v245;
                      v813 = v246;
                      v830 = v243;
                      v826 = v244;
                      v255 = memcmp(v254, v245, v246);
                      v246 = v813;
                      v245 = __pb;
                      v244 = v826;
                      v243 = v830;
                      if (!v255
                        && *((unsigned __int8 *)v241 + 128) == v821
                        && *((unsigned __int16 *)v241 + 68) == v819
                        && v241[26] == v817)
                      {
                        v256 = v241[18];
                        if ((char *)v241[19] - (char *)v256 == __na)
                        {
                          v257 = memcmp(v256, __s2, __na);
                          v246 = v813;
                          v245 = __pb;
                          v244 = v826;
                          v243 = v830;
                          if (!v257)
                            goto LABEL_496;
                        }
                      }
                    }
                  }
                }
                else if (((unint64_t)v253 & (v238 - 1)) != v4)
                {
                  goto LABEL_433;
                }
                v241 = (uint64_t **)*v241;
                if (!v241)
                  goto LABEL_433;
              }
            }
            do
            {
              v247 = (unint64_t)v241[1];
              if (v247 == v237)
              {
                if (*((unsigned __int8 *)v241 + 16) == v242
                  && *((unsigned __int16 *)v241 + 12) == v243
                  && v241[12] == v244)
                {
                  v248 = v241[4];
                  if ((char *)v241[5] - (char *)v248 == v246)
                  {
                    __pa = v245;
                    v249 = v246;
                    v829 = v243;
                    v825 = v244;
                    v250 = memcmp(v248, v245, v246);
                    v246 = v249;
                    v245 = __pa;
                    v244 = v825;
                    v243 = v829;
                    if (!v250
                      && *((unsigned __int8 *)v241 + 128) == v821
                      && *((unsigned __int16 *)v241 + 68) == v819
                      && v241[26] == v817)
                    {
                      v251 = v241[18];
                      if ((char *)v241[19] - (char *)v251 == __na)
                      {
                        v252 = memcmp(v251, __s2, __na);
                        v246 = v249;
                        v245 = __pa;
                        v244 = v825;
                        v243 = v829;
                        if (!v252)
                          goto LABEL_496;
                      }
                    }
                  }
                }
              }
              else
              {
                if (v247 >= v238)
                  v247 %= v238;
                if (v247 != v4)
                  break;
              }
              v241 = (uint64_t **)*v241;
            }
            while (v241);
          }
        }
      }
LABEL_433:
      v258 = operator new(0xF0uLL);
      v866 = v258;
      v867 = (gdc::Registry **)&v888;
      v868 = 0;
      *v258 = 0;
      v258[1] = v237;
      *((_BYTE *)v258 + 16) = buf[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v258 + 3), (uint64_t)&buf[8]);
      *((_BYTE *)v258 + 112) = 0;
      if (v877[16])
      {
        *((_DWORD *)v258 + 29) = *(_DWORD *)&v877[20];
        *((_BYTE *)v258 + 112) = 1;
      }
      v258[15] = *(_QWORD *)&v877[24];
      *((_BYTE *)v258 + 128) = v878;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v258 + 17), (uint64_t)&v879);
      *((_BYTE *)v258 + 224) = 0;
      if (v884)
      {
        *((_DWORD *)v258 + 57) = v885;
        *((_BYTE *)v258 + 224) = 1;
      }
      v258[29] = v886;
      v868 = 1;
      v259 = (float)(unint64_t)(*((_QWORD *)&v888 + 1) + 1);
      if (v238 && (float)(*(float *)&v889 * (float)v238) >= v259)
      {
LABEL_486:
        v280 = *(_QWORD **)(v887 + 8 * v4);
        v281 = v866;
        if (v280)
        {
          *v866 = *v280;
        }
        else
        {
          *v866 = v888;
          *(_QWORD *)&v888 = v281;
          *(_QWORD *)(v887 + 8 * v4) = &v888;
          if (!*v281)
            goto LABEL_495;
          v282 = *(_QWORD *)(*v281 + 8);
          if ((v238 & (v238 - 1)) != 0)
          {
            if (v282 >= v238)
              v282 %= v238;
          }
          else
          {
            v282 &= v238 - 1;
          }
          v280 = (_QWORD *)(v887 + 8 * v282);
        }
        *v280 = v281;
LABEL_495:
        ++*((_QWORD *)&v888 + 1);
        v236 = v884;
LABEL_496:
        if (v236)
          v884 = 0;
        if (v880 != v882)
          free(v880);
        if (v877[16])
          v877[16] = 0;
        if (*(_QWORD *)&buf[16] != (_QWORD)v874)
          free(*(void **)&buf[16]);
        goto LABEL_504;
      }
      v260 = (v238 & (v238 - 1)) != 0;
      if (v238 < 3)
        v260 = 1;
      v261 = v260 | (2 * v238);
      v262 = vcvtps_u32_f32(v259 / *(float *)&v889);
      if (v261 <= v262)
        prime = v262;
      else
        prime = v261;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v238 = *((_QWORD *)&v887 + 1);
      if (prime <= *((_QWORD *)&v887 + 1))
      {
        if (prime >= *((_QWORD *)&v887 + 1))
          goto LABEL_473;
        v274 = vcvtps_u32_f32((float)*((unint64_t *)&v888 + 1) / *(float *)&v889);
        if (*((_QWORD *)&v887 + 1) < 3uLL
          || (v275 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v887 + 8)),
              v275.i16[0] = vaddlv_u8(v275),
              v275.u32[0] > 1uLL))
        {
          v274 = std::__next_prime(v274);
        }
        else
        {
          v276 = 1 << -(char)__clz(v274 - 1);
          if (v274 >= 2)
            v274 = v276;
        }
        if (prime <= v274)
          prime = v274;
        if (prime >= v238)
        {
          v238 = *((_QWORD *)&v887 + 1);
LABEL_473:
          if ((v238 & (v238 - 1)) != 0)
          {
            if (v237 >= v238)
              v4 = v237 % v238;
            else
              v4 = v237;
          }
          else
          {
            v4 = (v238 - 1) & v237;
          }
          goto LABEL_486;
        }
        if (!prime)
        {
          v288 = (void *)v887;
          *(_QWORD *)&v887 = 0;
          if (v288)
            operator delete(v288);
          v238 = 0;
          *((_QWORD *)&v887 + 1) = 0;
          goto LABEL_473;
        }
      }
      if (prime >> 61)
        goto LABEL_1307;
      v264 = operator new(8 * prime);
      v265 = (void *)v887;
      *(_QWORD *)&v887 = v264;
      if (v265)
        operator delete(v265);
      v266 = 0;
      *((_QWORD *)&v887 + 1) = prime;
      do
        *(_QWORD *)(v887 + 8 * v266++) = 0;
      while (prime != v266);
      v267 = (_QWORD **)v888;
      if (!(_QWORD)v888)
      {
LABEL_472:
        v238 = prime;
        goto LABEL_473;
      }
      v268 = *(_QWORD *)(v888 + 8);
      v269 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v270 = v268 & v269;
        *(_QWORD *)(v887 + 8 * v270) = &v888;
        while (1)
        {
          v271 = *v267;
          if (!*v267)
            break;
          v272 = v271[1] & v269;
          if (v272 == v270)
          {
            v267 = (_QWORD **)*v267;
          }
          else if (*(_QWORD *)(v887 + 8 * v272))
          {
            *v267 = (_QWORD *)*v271;
            v273 = 8 * v272;
            *v271 = **(_QWORD **)(v887 + v273);
            **(_QWORD **)(v887 + v273) = v271;
          }
          else
          {
            *(_QWORD *)(v887 + 8 * v272) = v267;
            v267 = (_QWORD **)v271;
            v270 = v272;
          }
        }
        goto LABEL_472;
      }
      if (v268 >= prime)
        v268 %= prime;
      *(_QWORD *)(v887 + 8 * v268) = &v888;
      v277 = *v267;
      if (!*v267)
        goto LABEL_472;
      while (1)
      {
        v279 = v277[1];
        if (v279 >= prime)
          v279 %= prime;
        if (v279 != v268)
        {
          if (!*(_QWORD *)(v887 + 8 * v279))
          {
            *(_QWORD *)(v887 + 8 * v279) = v267;
            goto LABEL_477;
          }
          *v267 = (_QWORD *)*v277;
          v278 = 8 * v279;
          *v277 = **(_QWORD **)(v887 + v278);
          **(_QWORD **)(v887 + v278) = v277;
          v277 = v267;
        }
        v279 = v268;
LABEL_477:
        v267 = (_QWORD **)v277;
        v277 = (_QWORD *)*v277;
        v268 = v279;
        if (!v277)
          goto LABEL_472;
      }
    }
LABEL_551:
    *(_QWORD *)(a4 + 16) = v223 + 8;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v306 = (void *)objc_claimAutoreleasedReturnValue();
    v307 = objc_msgSend(v306, "daVinciDrawCollisionMesh");

    if (!v307)
      goto LABEL_977;
    v308 = *(_QWORD *)(a1 + 120);
    v871[0] = &off_1E42C91B8;
    v872 = v871;
    *(_QWORD *)&buf[24] = buf;
    *(_QWORD *)buf = &off_1E42C91B8;
    md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v887, v308 + 432, (uint64_t)buf, *(_QWORD *)(v308 + 432));
    v309 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v310 = 4;
      v309 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_574;
      v310 = 5;
    }
    (*(void (**)(void))(*v309 + 8 * v310))();
LABEL_574:
    v326 = v872;
    if (v872 == v871)
    {
      v327 = 4;
      v326 = v871;
    }
    else
    {
      if (!v872)
        goto LABEL_579;
      v327 = 5;
    }
    (*(void (**)(void))(*v326 + 8 * v327))();
LABEL_579:
    v328 = v887;
    v329 = *((_QWORD *)&v889 + 1);
    if (!*((_QWORD *)&v889 + 1))
    {
LABEL_582:
      *(_QWORD *)&buf[24] = v329;
      goto LABEL_584;
    }
    if (*((__int128 **)&v889 + 1) != &v888)
    {
      v329 = (*(uint64_t (**)(void))(**((_QWORD **)&v889 + 1) + 16))();
      goto LABEL_582;
    }
    *(_QWORD *)&buf[24] = buf;
    (*(void (**)(void))(**((_QWORD **)&v889 + 1) + 24))();
LABEL_584:
    md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v866, v328, (uint64_t)buf, *(_QWORD *)v887);
    v330 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v331 = 4;
      v330 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_589;
      v331 = 5;
    }
    (*(void (**)(void))(*v330 + 8 * v331))();
LABEL_589:
    v332 = v887;
    v333 = *((_QWORD *)&v889 + 1);
    if (!*((_QWORD *)&v889 + 1))
    {
LABEL_592:
      *(_QWORD *)&buf[24] = v333;
      goto LABEL_594;
    }
    if (*((__int128 **)&v889 + 1) != &v888)
    {
      v333 = (*(uint64_t (**)(void))(**((_QWORD **)&v889 + 1) + 16))();
      goto LABEL_592;
    }
    *(_QWORD *)&buf[24] = buf;
    (*(void (**)(__int128 *, _BYTE *))(v888 + 24))(&v888, buf);
LABEL_594:
    md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v862, v332, (uint64_t)buf, *(_QWORD *)(v887 + 8));
    v334 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v335 = 4;
      v334 = buf;
      goto LABEL_598;
    }
    if (*(_QWORD *)&buf[24])
    {
      v335 = 5;
LABEL_598:
      (*(void (**)(void))(*v334 + 8 * v335))();
    }
    v336 = v867;
    if (v863 == (std::__shared_weak_count *)v867)
      goto LABEL_962;
    a2 = (const md::LayoutContext *)&v849;
    v818 = 1065353216;
    v4 = (uint64_t)&v861;
LABEL_602:
    v853 = 0;
    v337 = *v336;
    v853 = v337;
    v14 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v337);
    v338 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>((uint64_t)v337);
    j = (_QWORD *)v338;
    v850 = 0;
    v851 = 0;
    v852 = 0;
    v339 = v338 + 32;
    v341 = v14[7];
    v340 = v14[8];
    if (*(_QWORD *)(v338 + 64) - *(_QWORD *)(v338 + 56) >= (unint64_t)(v340 - v341))
      v342 = v14 + 4;
    else
      v342 = (_QWORD *)(v338 + 32);
    if (v14 + 4 == v342)
    {
      *(_QWORD *)buf = &v853;
      *(_QWORD *)&buf[8] = &v850;
      if (v341 != v340)
      {
        v525 = (_OWORD *)v14[10];
        do
        {
          v526 = *(unsigned int *)(v341 + 4);
          v527 = j[4];
          if (v526 >> 7 < (j[5] - v527) >> 3)
          {
            v528 = *(_QWORD *)(v527 + 8 * (v526 >> 7));
            if (v528)
            {
              v529 = *(unsigned __int16 *)(v528 + 2 * (v526 & 0x7F));
              v531 = j[7];
              v530 = j[8];
              if (v529 < (v530 - v531) >> 3)
              {
                v532 = v531 + 8 * v529;
                if (v532 != v530 && *(_DWORD *)(v532 + 4) == (_DWORD)v526)
                  _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__4clENS5_6EntityERNS_10components12MeshInstanceE((uint64_t)buf, *(_QWORD *)v341, v525);
              }
            }
          }
          v525 += 7;
          v341 += 8;
        }
        while (v341 != v340);
      }
    }
    if ((_QWORD *)v339 == v342)
    {
      *(_QWORD *)buf = &v853;
      *(_QWORD *)&buf[8] = &v850;
      v534 = j[7];
      j = (_QWORD *)j[8];
      while ((_QWORD *)v534 != j)
      {
        v536 = *(unsigned int *)(v534 + 4);
        v537 = v14[4];
        v538 = (v14[5] - v537) >> 3;
        if (v536 >> 7 < v538)
        {
          v539 = *(_QWORD *)(v537 + 8 * (v536 >> 7));
          if (v539)
          {
            v540 = *(unsigned __int16 *)(v539 + 2 * (v536 & 0x7F));
            v542 = v14[7];
            v541 = v14[8];
            v543 = (v541 - v542) >> 3;
            if (v543 > v540)
            {
              v544 = v542 + 8 * v540;
              if (v544 != v541 && *(_DWORD *)(v544 + 4) == (_DWORD)v536)
              {
                v546 = *(_QWORD *)v534;
                v547 = *(_QWORD *)v534 >> 39;
                if (v547 < v538
                  && (v548 = *(_QWORD *)(v537 + 8 * v547)) != 0
                  && (v549 = *(unsigned __int16 *)(v548 + 2 * (HIDWORD(v546) & 0x7F)), v543 > v549)
                  && ((v550 = v542 + 8 * v549, v550 != v541)
                    ? (v551 = *(_DWORD *)(v550 + 4) == HIDWORD(v546))
                    : (v551 = 0),
                      v551))
                {
                  v535 = (_OWORD *)(v14[10] + 112 * v549);
                }
                else
                {
                  v535 = (_OWORD *)v14[11];
                }
                _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__4clENS5_6EntityERNS_10components12MeshInstanceE((uint64_t)buf, v546, v535);
              }
            }
          }
        }
        v534 += 8;
      }
    }
    v343 = v850;
    v822 = v851;
    if (v850 == v851)
    {
      if (!v850)
        goto LABEL_610;
LABEL_609:
      v851 = v343;
      operator delete(v343);
      goto LABEL_610;
    }
LABEL_615:
    v344 = (char *)operator new(0x60uLL);
    v345 = (std::__shared_weak_count *)v344;
    *((_QWORD *)v344 + 1) = 0;
    v346 = (unint64_t *)(v344 + 8);
    *((_QWORD *)v344 + 2) = 0;
    *(_QWORD *)v344 = &off_1E42DC900;
    *((_QWORD *)v344 + 3) = &off_1E429C170;
    v344[32] = 1;
    *(_OWORD *)(v344 + 40) = 0u;
    *(_OWORD *)(v344 + 56) = 0u;
    *((_QWORD *)v344 + 9) = &md::ZeroBlendFactor;
    *((_OWORD *)v344 + 5) = xmmword_19FFB2D90;
    v347 = (uint64_t *)v853;
    v875 = v343[3];
    v876 = v343[4];
    *(_OWORD *)v877 = v343[5];
    *(_OWORD *)&v877[12] = *(_OWORD *)((char *)v343 + 92);
    *(_OWORD *)buf = *v343;
    *(_OWORD *)&buf[16] = v343[1];
    v874 = v343[2];
    v846 = v344 + 24;
    v847 = (std::__shared_weak_count *)v344;
    do
      v348 = __ldxr(v346);
    while (__stxr(v348 + 1, v346));
    v848 = 0;
    *(_QWORD *)&v849 = v344 + 24;
    *((_QWORD *)&v849 + 1) = v344;
    do
      v349 = __ldxr(v346);
    while (__stxr(v349 + 1, v346));
    LOBYTE(v860) = 1;
    v845 = 4;
    v842 = 0;
    v843 = 0;
    v844 = 1;
    v350 = gdc::Registry::create((gdc::Registry *)v347);
    v861 = 0x6307588E3A87BAE2;
    v351 = (int8x8_t)v347[16];
    if (v351)
    {
      v352 = (uint8x8_t)vcnt_s8(v351);
      v352.i16[0] = vaddlv_u8(v352);
      if (v352.u32[0] > 1uLL)
      {
        v353 = 0x6307588E3A87BAE2;
        if (*(_QWORD *)&v351 <= 0x6307588E3A87BAE2uLL)
          v353 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v351;
      }
      else
      {
        v353 = (*(_QWORD *)&v351 - 1) & 0x6307588E3A87BAE2;
      }
      v354 = *(_QWORD **)(v347[15] + 8 * v353);
      if (v354)
      {
        v355 = (_QWORD *)*v354;
        if (v355)
        {
          if (v352.u32[0] < 2uLL)
          {
            v356 = *(_QWORD *)&v351 - 1;
            while (1)
            {
              v358 = v355[1];
              if (v358 == 0x6307588E3A87BAE2)
              {
                if (v355[2] == 0x6307588E3A87BAE2)
                  goto LABEL_776;
              }
              else if ((v358 & v356) != v353)
              {
                goto LABEL_639;
              }
              v355 = (_QWORD *)*v355;
              if (!v355)
                goto LABEL_639;
            }
          }
          do
          {
            v357 = v355[1];
            if (v357 == 0x6307588E3A87BAE2)
            {
              if (v355[2] == 0x6307588E3A87BAE2)
              {
LABEL_776:
                v359 = v355[3];
                goto LABEL_642;
              }
            }
            else
            {
              if (v357 >= *(_QWORD *)&v351)
                v357 %= *(_QWORD *)&v351;
              if (v357 != v353)
                break;
            }
            v355 = (_QWORD *)*v355;
          }
          while (v355);
        }
      }
    }
LABEL_639:
    v359 = operator new();
    *(_QWORD *)(v359 + 16) = "md::components::MeshInstance]";
    *(_QWORD *)(v359 + 24) = 28;
    *(_OWORD *)(v359 + 32) = 0u;
    *(_OWORD *)(v359 + 48) = 0u;
    *(_OWORD *)(v359 + 64) = 0u;
    *(_OWORD *)(v359 + 80) = 0u;
    *(_OWORD *)(v359 + 96) = 0u;
    *(_OWORD *)(v359 + 112) = 0u;
    *(_OWORD *)(v359 + 128) = 0u;
    *(_DWORD *)(v359 + 144) = 1065353216;
    *(_OWORD *)(v359 + 152) = 0u;
    *(_OWORD *)(v359 + 168) = 0u;
    *(_QWORD *)(v359 + 184) = 0;
    *(_DWORD *)(v359 + 192) = 1065353216;
    *(_OWORD *)(v359 + 200) = 0u;
    *(_OWORD *)(v359 + 216) = 0u;
    *(_QWORD *)(v359 + 232) = 0;
    *(_DWORD *)(v359 + 240) = 1065353216;
    *(_QWORD *)v359 = &off_1E42B2F58;
    *(_QWORD *)(v359 + 8) = 0x6307588E3A87BAE2;
    *(_QWORD *)(v359 + 248) = v347;
    v360 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v347 + 15, 0x6307588E3A87BAE2uLL, &v861);
    v361 = v360[3];
    v360[3] = v359;
    if (v361)
      (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
    v857 = 0x6307588E3A87BAE2;
    v858 = (uint64_t)"md::components::MeshInstance]";
    v859 = 28;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v347, 0x6307588E3A87BAE2, (uint64_t)&v857, (uint64_t *)(v359 + 104));
LABEL_642:
    gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace((uint64_t *)v359, v350, (__int128 *)buf);
    v362 = gdc::Registry::storage<md::components::Material>((uint64_t)v347);
    gdc::ComponentStorageWrapper<md::components::Material>::emplace(v362, v350, &v848);
    v363 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>((uint64_t)v347);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v363, v350, &v860);
    v364 = (uint64_t *)gdc::Registry::storage<md::components::Collapsible>((uint64_t)v347);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v364, v350);
    v365 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>((uint64_t)v347);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v365, v350, &v845);
    v366 = (uint64_t *)gdc::Registry::storage<md::components::CustomRenderState>((uint64_t)v347);
    gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(v366, v350, &v842);
    v367 = (std::__shared_weak_count *)*((_QWORD *)&v849 + 1);
    if (*((_QWORD *)&v849 + 1))
    {
      v368 = (unint64_t *)(*((_QWORD *)&v849 + 1) + 8);
      do
        v369 = __ldaxr(v368);
      while (__stlxr(v369 - 1, v368));
      if (!v369)
      {
        ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
        std::__shared_weak_count::__release_weak(v367);
      }
    }
    v831 = v345;
    v370 = v847;
    if (v847)
    {
      v371 = (unint64_t *)&v847->__shared_owners_;
      do
        v372 = __ldaxr(v371);
      while (__stlxr(v372 - 1, v371));
      if (!v372)
      {
        ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
        std::__shared_weak_count::__release_weak(v370);
      }
    }
    v373 = (char *)operator new(0x60uLL);
    v374 = v343;
    *((_QWORD *)v373 + 1) = 0;
    v375 = (unint64_t *)(v373 + 8);
    *((_QWORD *)v373 + 2) = 0;
    *(_QWORD *)v373 = &off_1E42DC900;
    *((_QWORD *)v373 + 3) = &off_1E429C170;
    v373[32] = 1;
    *(_OWORD *)(v373 + 40) = 0u;
    *(_OWORD *)(v373 + 56) = 0u;
    *((_QWORD *)v373 + 9) = &md::ZeroBlendFactor;
    __pc = (std::__shared_weak_count *)v373;
    *((_OWORD *)v373 + 5) = xmmword_19FFB2DA0;
    v841 = v853;
    v875 = v374[3];
    v876 = v374[4];
    *(_OWORD *)v877 = v374[5];
    *(_OWORD *)&v877[12] = *(_OWORD *)((char *)v374 + 92);
    *(_OWORD *)buf = *v374;
    *(_OWORD *)&buf[16] = v374[1];
    v827 = v374;
    v874 = v374[2];
    do
      v376 = __ldxr(v375);
    while (__stxr(v376 + 1, v375));
    v848 = 0;
    *(_QWORD *)&v849 = v373 + 24;
    *((_QWORD *)&v849 + 1) = v373;
    do
      v377 = __ldxr(v375);
    while (__stxr(v377 + 1, v375));
    v378 = gdc::Registry::create(v841);
    v842 = 0x6307588E3A87BAE2;
    v837 = v378;
    v839 = (uint64_t *)((char *)v841 + 120);
    v379 = *(int8x8_t *)((char *)v841 + 128);
    if (v379)
    {
      v380 = (uint8x8_t)vcnt_s8(v379);
      v380.i16[0] = vaddlv_u8(v380);
      if (v380.u32[0] > 1uLL)
      {
        v381 = 0x6307588E3A87BAE2;
        if (*(_QWORD *)&v379 <= 0x6307588E3A87BAE2uLL)
          v381 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v379;
      }
      else
      {
        v381 = (*(_QWORD *)&v379 - 1) & 0x6307588E3A87BAE2;
      }
      v382 = *(_QWORD **)(*v839 + 8 * v381);
      if (v382)
      {
        v383 = (_QWORD *)*v382;
        if (v383)
        {
          if (v380.u32[0] < 2uLL)
          {
            v384 = *(_QWORD *)&v379 - 1;
            while (1)
            {
              v386 = v383[1];
              if (v386 == 0x6307588E3A87BAE2)
              {
                if (v383[2] == 0x6307588E3A87BAE2)
                  goto LABEL_777;
              }
              else if ((v386 & v384) != v381)
              {
                goto LABEL_676;
              }
              v383 = (_QWORD *)*v383;
              if (!v383)
                goto LABEL_676;
            }
          }
          do
          {
            v385 = v383[1];
            if (v385 == 0x6307588E3A87BAE2)
            {
              if (v383[2] == 0x6307588E3A87BAE2)
              {
LABEL_777:
                v387 = v383[3];
                goto LABEL_679;
              }
            }
            else
            {
              if (v385 >= *(_QWORD *)&v379)
                v385 %= *(_QWORD *)&v379;
              if (v385 != v381)
                break;
            }
            v383 = (_QWORD *)*v383;
          }
          while (v383);
        }
      }
    }
LABEL_676:
    v387 = operator new();
    *(_QWORD *)(v387 + 16) = "md::components::MeshInstance]";
    *(_QWORD *)(v387 + 24) = 28;
    *(_OWORD *)(v387 + 32) = 0u;
    *(_OWORD *)(v387 + 48) = 0u;
    *(_OWORD *)(v387 + 64) = 0u;
    *(_OWORD *)(v387 + 80) = 0u;
    *(_OWORD *)(v387 + 96) = 0u;
    *(_OWORD *)(v387 + 112) = 0u;
    *(_OWORD *)(v387 + 128) = 0u;
    *(_DWORD *)(v387 + 144) = 1065353216;
    *(_OWORD *)(v387 + 152) = 0u;
    *(_OWORD *)(v387 + 168) = 0u;
    *(_QWORD *)(v387 + 184) = 0;
    *(_DWORD *)(v387 + 192) = 1065353216;
    *(_OWORD *)(v387 + 200) = 0u;
    *(_OWORD *)(v387 + 216) = 0u;
    *(_QWORD *)(v387 + 232) = 0;
    *(_DWORD *)(v387 + 240) = 1065353216;
    *(_QWORD *)v387 = &off_1E42B2F58;
    *(_QWORD *)(v387 + 8) = 0x6307588E3A87BAE2;
    *(_QWORD *)(v387 + 248) = v841;
    v388 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v839, 0x6307588E3A87BAE2uLL, &v842);
    v389 = v388[3];
    v388[3] = v387;
    if (v389)
      (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
    v857 = 0x6307588E3A87BAE2;
    v858 = (uint64_t)"md::components::MeshInstance]";
    v859 = 28;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v841, 0x6307588E3A87BAE2, (uint64_t)&v857, (uint64_t *)(v387 + 104));
LABEL_679:
    v860 = v837;
    geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign((uint64_t)&v857, (uint64_t *)(v387 + 32), (uint64_t)&v860, (__int128 *)buf);
    v14 = *(_QWORD **)(v387 + 248);
    if (v858 == *(_QWORD *)(v387 + 88))
    {
      for (j = *(_QWORD **)(v387 + 176); j; j = (_QWORD *)*j)
      {
        v842 = (uint64_t)&v860;
        v843 = 1;
        v861 = (uint64_t)v14;
        v391 = j[6];
        if (!v391)
          goto LABEL_1308;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v391 + 48))(v391, &v861, &v842);
      }
    }
    else
    {
      for (j = *(_QWORD **)(v387 + 128); j; j = (_QWORD *)*j)
      {
        v842 = (uint64_t)&v860;
        v843 = 1;
        v861 = (uint64_t)v14;
        v390 = j[6];
        if (!v390)
          goto LABEL_1308;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v390 + 48))(v390, &v861, &v842);
      }
    }
    v842 = 0x299DE7A80C80C439;
    v392 = *(int8x8_t *)((char *)v841 + 128);
    if (v392)
    {
      v393 = (uint8x8_t)vcnt_s8(v392);
      v393.i16[0] = vaddlv_u8(v393);
      if (v393.u32[0] > 1uLL)
      {
        v394 = 0x299DE7A80C80C439;
        if (*(_QWORD *)&v392 <= 0x299DE7A80C80C439uLL)
          v394 = 0x299DE7A80C80C439uLL % *(_QWORD *)&v392;
      }
      else
      {
        v394 = (*(_QWORD *)&v392 - 1) & 0x299DE7A80C80C439;
      }
      v395 = *(_QWORD **)(*v839 + 8 * v394);
      if (v395)
      {
        v396 = (_QWORD *)*v395;
        if (v396)
        {
          if (v393.u32[0] < 2uLL)
          {
            v397 = *(_QWORD *)&v392 - 1;
            while (1)
            {
              v399 = v396[1];
              if (v399 == 0x299DE7A80C80C439)
              {
                if (v396[2] == 0x299DE7A80C80C439)
                  goto LABEL_778;
              }
              else if ((v399 & v397) != v394)
              {
                goto LABEL_707;
              }
              v396 = (_QWORD *)*v396;
              if (!v396)
                goto LABEL_707;
            }
          }
          do
          {
            v398 = v396[1];
            if (v398 == 0x299DE7A80C80C439)
            {
              if (v396[2] == 0x299DE7A80C80C439)
              {
LABEL_778:
                v400 = v396[3];
                goto LABEL_710;
              }
            }
            else
            {
              if (v398 >= *(_QWORD *)&v392)
                v398 %= *(_QWORD *)&v392;
              if (v398 != v394)
                break;
            }
            v396 = (_QWORD *)*v396;
          }
          while (v396);
        }
      }
    }
LABEL_707:
    v400 = operator new();
    *(_QWORD *)(v400 + 16) = "md::components::Material]";
    *(_QWORD *)(v400 + 24) = 24;
    *(_OWORD *)(v400 + 32) = 0u;
    *(_OWORD *)(v400 + 48) = 0u;
    *(_OWORD *)(v400 + 64) = 0u;
    *(_OWORD *)(v400 + 80) = 0u;
    *(_OWORD *)(v400 + 96) = 0u;
    *(_OWORD *)(v400 + 112) = 0u;
    *(_OWORD *)(v400 + 128) = 0u;
    *(_DWORD *)(v400 + 144) = 1065353216;
    *(_OWORD *)(v400 + 152) = 0u;
    *(_OWORD *)(v400 + 168) = 0u;
    *(_QWORD *)(v400 + 184) = 0;
    *(_DWORD *)(v400 + 192) = 1065353216;
    *(_OWORD *)(v400 + 200) = 0u;
    *(_OWORD *)(v400 + 216) = 0u;
    *(_QWORD *)(v400 + 232) = 0;
    *(_DWORD *)(v400 + 240) = 1065353216;
    *(_QWORD *)v400 = &off_1E42B34C8;
    *(_QWORD *)(v400 + 8) = 0x299DE7A80C80C439;
    *(_QWORD *)(v400 + 248) = v841;
    v401 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v839, 0x299DE7A80C80C439uLL, &v842);
    v402 = v401[3];
    v401[3] = v400;
    if (v402)
      (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
    v857 = 0x299DE7A80C80C439;
    v858 = (uint64_t)"md::components::Material]";
    v859 = 24;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v841, 0x299DE7A80C80C439, (uint64_t)&v857, (uint64_t *)(v400 + 104));
LABEL_710:
    v861 = v837;
    v403 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v400 + 32), (uint64_t)&v861);
    if ((v404 & 1) != 0)
    {
      v410 = *(_QWORD **)(v400 + 88);
      if ((unint64_t)v410 >= *(_QWORD *)(v400 + 96))
      {
        v405 = std::vector<md::components::Material>::__emplace_back_slow_path<md::components::Material&>((char **)(v400 + 80), &v848);
      }
      else
      {
        *v410 = v848;
        v410[1] = v849;
        v411 = *((_QWORD *)&v849 + 1);
        v410[2] = *((_QWORD *)&v849 + 1);
        if (v411)
        {
          v412 = (unint64_t *)(v411 + 8);
          do
            v413 = __ldxr(v412);
          while (__stxr(v413 + 1, v412));
        }
        v405 = (char *)(v410 + 3);
      }
      *(_QWORD *)(v400 + 88) = v405;
    }
    else
    {
      v405 = (char *)(*(_QWORD *)(v400 + 80) + 24 * (((uint64_t)v403 - *(_QWORD *)(v400 + 56)) >> 3));
      *(_QWORD *)v405 = v848;
      v406 = v849;
      v849 = 0uLL;
      v407 = (std::__shared_weak_count *)*((_QWORD *)v405 + 2);
      *(_OWORD *)(v405 + 8) = v406;
      if (v407)
      {
        v408 = (unint64_t *)&v407->__shared_owners_;
        do
          v409 = __ldaxr(v408);
        while (__stlxr(v409 - 1, v408));
        if (!v409)
        {
          ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
          std::__shared_weak_count::__release_weak(v407);
        }
      }
    }
    v14 = *(_QWORD **)(v400 + 248);
    if (v405 == *(char **)(v400 + 88))
    {
      for (j = *(_QWORD **)(v400 + 176); j; j = (_QWORD *)*j)
      {
        v857 = (unint64_t)&v861;
        v858 = 1;
        v842 = (uint64_t)v14;
        v415 = j[6];
        if (!v415)
          goto LABEL_1308;
        (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v415 + 48))(v415, &v842, &v857);
      }
    }
    else
    {
      for (j = *(_QWORD **)(v400 + 128); j; j = (_QWORD *)*j)
      {
        v857 = (unint64_t)&v861;
        v858 = 1;
        v842 = (uint64_t)v14;
        v414 = j[6];
        if (!v414)
          goto LABEL_1308;
        (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v414 + 48))(v414, &v842, &v857);
      }
    }
    v842 = 0xF44C196EC679B51CLL;
    v416 = *(int8x8_t *)((char *)v841 + 128);
    if (v416)
    {
      v417 = (uint8x8_t)vcnt_s8(v416);
      v417.i16[0] = vaddlv_u8(v417);
      if (v417.u32[0] > 1uLL)
      {
        v418 = 0xF44C196EC679B51CLL;
        if (*(_QWORD *)&v416 <= 0xF44C196EC679B51CLL)
          v418 = 0xF44C196EC679B51CLL % *(_QWORD *)&v416;
      }
      else
      {
        v418 = (*(_QWORD *)&v416 - 1) & 0xF44C196EC679B51CLL;
      }
      v419 = *(_QWORD **)(*v839 + 8 * v418);
      if (v419)
      {
        v420 = (_QWORD *)*v419;
        if (v420)
        {
          if (v417.u32[0] < 2uLL)
          {
            v421 = *(_QWORD *)&v416 - 1;
            while (1)
            {
              v423 = v420[1];
              if (v423 == 0xF44C196EC679B51CLL)
              {
                if (v420[2] == 0xF44C196EC679B51CLL)
                  goto LABEL_779;
              }
              else if ((v423 & v421) != v418)
              {
                goto LABEL_751;
              }
              v420 = (_QWORD *)*v420;
              if (!v420)
                goto LABEL_751;
            }
          }
          do
          {
            v422 = v420[1];
            if (v422 == 0xF44C196EC679B51CLL)
            {
              if (v420[2] == 0xF44C196EC679B51CLL)
              {
LABEL_779:
                v424 = v420[3];
                goto LABEL_754;
              }
            }
            else
            {
              if (v422 >= *(_QWORD *)&v416)
                v422 %= *(_QWORD *)&v416;
              if (v422 != v418)
                break;
            }
            v420 = (_QWORD *)*v420;
          }
          while (v420);
        }
      }
    }
LABEL_751:
    v424 = operator new();
    *(_QWORD *)(v424 + 16) = "md::components::Visibility]";
    *(_QWORD *)(v424 + 24) = 26;
    *(_OWORD *)(v424 + 32) = 0u;
    *(_OWORD *)(v424 + 48) = 0u;
    *(_OWORD *)(v424 + 64) = 0u;
    *(_OWORD *)(v424 + 80) = 0u;
    *(_OWORD *)(v424 + 96) = 0u;
    *(_OWORD *)(v424 + 112) = 0u;
    *(_OWORD *)(v424 + 128) = 0u;
    *(_DWORD *)(v424 + 144) = 1065353216;
    *(_OWORD *)(v424 + 152) = 0u;
    *(_OWORD *)(v424 + 168) = 0u;
    *(_QWORD *)(v424 + 184) = 0;
    *(_DWORD *)(v424 + 192) = 1065353216;
    *(_OWORD *)(v424 + 200) = 0u;
    *(_OWORD *)(v424 + 216) = 0u;
    *(_QWORD *)(v424 + 232) = 0;
    *(_DWORD *)(v424 + 240) = 1065353216;
    *(_QWORD *)v424 = &off_1E42B2E68;
    *(_QWORD *)(v424 + 8) = 0xF44C196EC679B51CLL;
    *(_QWORD *)(v424 + 248) = v841;
    v425 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v839, 0xF44C196EC679B51CLL, &v842);
    v426 = v425[3];
    v425[3] = v424;
    if (v426)
      (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
    v857 = 0xF44C196EC679B51CLL;
    v858 = (uint64_t)"md::components::Visibility]";
    v859 = 26;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v841, 0xF44C196EC679B51CLL, (uint64_t)&v857, (uint64_t *)(v424 + 104));
LABEL_754:
    v861 = v837;
    v427 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v424 + 32), (uint64_t)&v861);
    if ((v428 & 1) != 0)
    {
      v432 = *(_BYTE **)(v424 + 88);
      v431 = *(_QWORD *)(v424 + 96);
      if ((unint64_t)v432 < v431)
      {
        *v432 = 1;
        v433 = (uint64_t)(v432 + 1);
LABEL_794:
        *(_QWORD *)(v424 + 88) = v433;
        v14 = *(_QWORD **)(v424 + 248);
LABEL_795:
        j = *(_QWORD **)(v424 + 176);
        if (j)
        {
          while (1)
          {
            v857 = (unint64_t)&v861;
            v858 = 1;
            v842 = (uint64_t)v14;
            v454 = j[6];
            if (!v454)
              goto LABEL_1308;
            (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v454 + 48))(v454, &v842, &v857);
            j = (_QWORD *)*j;
            if (!j)
              goto LABEL_798;
          }
        }
        goto LABEL_798;
      }
      v434 = *(_BYTE **)(v424 + 80);
      v435 = v432 - v434;
      v436 = v432 - v434 + 1;
      if (v436 < 0)
        goto LABEL_1309;
      v437 = v431 - (_QWORD)v434;
      if (2 * v437 > v436)
        v436 = 2 * v437;
      if (v437 >= 0x3FFFFFFFFFFFFFFFLL)
        v438 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v438 = v436;
      if (v438)
      {
        v439 = v438;
        v440 = (char *)operator new(v438);
        v438 = v439;
      }
      else
      {
        v440 = 0;
      }
      v441 = &v440[v435];
      v440[v435] = 1;
      v433 = (uint64_t)&v440[v435 + 1];
      if (v432 == v434)
      {
LABEL_792:
        *(_QWORD *)(v424 + 80) = v441;
        *(_QWORD *)(v424 + 88) = v433;
        *(_QWORD *)(v424 + 96) = &v440[v438];
        if (v434)
          operator delete(v434);
        goto LABEL_794;
      }
      if (v435 < 8 || (unint64_t)(v434 - v440) < 0x20)
        goto LABEL_789;
      if (v435 >= 0x20)
      {
        v442 = v435 & 0xFFFFFFFFFFFFFFE0;
        v443 = &v440[v435 - 16];
        v444 = (__int128 *)(v432 - 16);
        v445 = v435 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v446 = *v444;
          *((_OWORD *)v443 - 1) = *(v444 - 1);
          *(_OWORD *)v443 = v446;
          v443 -= 32;
          v444 -= 2;
          v445 -= 32;
        }
        while (v445);
        if (v435 == v442)
          goto LABEL_791;
        if ((v435 & 0x18) == 0)
        {
          v441 -= v442;
          v432 -= v442;
          goto LABEL_789;
        }
      }
      else
      {
        v442 = 0;
      }
      v447 = v442 - (v435 & 0xFFFFFFFFFFFFFFF8);
      v448 = &v432[-v442];
      v449 = &v440[&v432[-v442] - v434 - 8];
      v450 = (uint64_t *)(v448 - 8);
      do
      {
        v451 = *v450--;
        *(_QWORD *)v449 = v451;
        v449 -= 8;
        v447 += 8;
      }
      while (v447);
      if (v435 == (v435 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_791;
      v441 -= v435 & 0xFFFFFFFFFFFFFFF8;
      v432 -= v435 & 0xFFFFFFFFFFFFFFF8;
LABEL_789:
      v452 = v441 - 1;
      do
      {
        v453 = *--v432;
        *v452-- = v453;
      }
      while (v432 != v434);
LABEL_791:
      v441 = v440;
      goto LABEL_792;
    }
    v429 = (_BYTE *)(*(_QWORD *)(v424 + 80) + (((uint64_t)v427 - *(_QWORD *)(v424 + 56)) >> 3));
    *v429 = 1;
    v14 = *(_QWORD **)(v424 + 248);
    if (v429 == *(_BYTE **)(v424 + 88))
      goto LABEL_795;
    for (j = *(_QWORD **)(v424 + 128); j; j = (_QWORD *)*j)
    {
      v857 = (unint64_t)&v861;
      v858 = 1;
      v842 = (uint64_t)v14;
      v430 = j[6];
      if (!v430)
        goto LABEL_1308;
      (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v430 + 48))(v430, &v842, &v857);
    }
LABEL_798:
    v842 = 0x3FD9D9EF0A6A9A58;
    v455 = *(int8x8_t *)((char *)v841 + 128);
    if (v455)
    {
      v456 = (uint8x8_t)vcnt_s8(v455);
      v456.i16[0] = vaddlv_u8(v456);
      if (v456.u32[0] > 1uLL)
      {
        v457 = 0x3FD9D9EF0A6A9A58;
        if (*(_QWORD *)&v455 <= 0x3FD9D9EF0A6A9A58uLL)
          v457 = 0x3FD9D9EF0A6A9A58uLL % *(_QWORD *)&v455;
      }
      else
      {
        v457 = (*(_QWORD *)&v455 - 1) & 0x3FD9D9EF0A6A9A58;
      }
      v458 = *(_QWORD **)(*v839 + 8 * v457);
      if (v458)
      {
        v459 = (_QWORD *)*v458;
        if (v459)
        {
          if (v456.u32[0] < 2uLL)
          {
            v460 = *(_QWORD *)&v455 - 1;
            while (1)
            {
              v462 = v459[1];
              if (v462 == 0x3FD9D9EF0A6A9A58)
              {
                if (v459[2] == 0x3FD9D9EF0A6A9A58)
                  goto LABEL_891;
              }
              else if ((v462 & v460) != v457)
              {
                goto LABEL_818;
              }
              v459 = (_QWORD *)*v459;
              if (!v459)
                goto LABEL_818;
            }
          }
          do
          {
            v461 = v459[1];
            if (v461 == 0x3FD9D9EF0A6A9A58)
            {
              if (v459[2] == 0x3FD9D9EF0A6A9A58)
              {
LABEL_891:
                v463 = v459[3];
                goto LABEL_821;
              }
            }
            else
            {
              if (v461 >= *(_QWORD *)&v455)
                v461 %= *(_QWORD *)&v455;
              if (v461 != v457)
                break;
            }
            v459 = (_QWORD *)*v459;
          }
          while (v459);
        }
      }
    }
LABEL_818:
    v463 = operator new();
    *(_QWORD *)(v463 + 16) = "md::components::Collapsible]";
    *(_QWORD *)(v463 + 24) = 27;
    *(_OWORD *)(v463 + 32) = 0u;
    *(_OWORD *)(v463 + 48) = 0u;
    *(_OWORD *)(v463 + 64) = 0u;
    *(_OWORD *)(v463 + 80) = 0u;
    *(_OWORD *)(v463 + 96) = 0u;
    *(_OWORD *)(v463 + 112) = 0u;
    *(_OWORD *)(v463 + 128) = 0u;
    *(_DWORD *)(v463 + 144) = 1065353216;
    *(_OWORD *)(v463 + 152) = 0u;
    *(_OWORD *)(v463 + 168) = 0u;
    *(_QWORD *)(v463 + 184) = 0;
    *(_DWORD *)(v463 + 192) = 1065353216;
    *(_OWORD *)(v463 + 200) = 0u;
    *(_OWORD *)(v463 + 216) = 0u;
    *(_QWORD *)(v463 + 232) = 0;
    *(_DWORD *)(v463 + 240) = 1065353216;
    *(_QWORD *)v463 = &off_1E42B2EC8;
    *(_QWORD *)(v463 + 8) = 0x3FD9D9EF0A6A9A58;
    *(_QWORD *)(v463 + 248) = v841;
    v464 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v839, 0x3FD9D9EF0A6A9A58uLL, &v842);
    v465 = v464[3];
    v464[3] = v463;
    if (v465)
      (*(void (**)(uint64_t))(*(_QWORD *)v465 + 8))(v465);
    v857 = 0x3FD9D9EF0A6A9A58;
    v858 = (uint64_t)"md::components::Collapsible]";
    v859 = 27;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v841, 0x3FD9D9EF0A6A9A58, (uint64_t)&v857, (uint64_t *)(v463 + 104));
LABEL_821:
    v861 = v837;
    v466 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v463 + 32), (uint64_t)&v861);
    if ((v467 & 1) != 0)
    {
      v470 = *(_BYTE **)(v463 + 88);
      v469 = *(_QWORD *)(v463 + 96);
      if ((unint64_t)v470 >= v469)
      {
        v472 = *(char **)(v463 + 80);
        v473 = v470 - v472;
        v474 = v470 - v472 + 1;
        if (v474 < 0)
          goto LABEL_1309;
        v475 = v469 - (_QWORD)v472;
        if (2 * v475 > v474)
          v474 = 2 * v475;
        if (v475 >= 0x3FFFFFFFFFFFFFFFLL)
          v476 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v476 = v474;
        if (v476)
          v477 = (char *)operator new(v476);
        else
          v477 = 0;
        v478 = &v477[v476];
        v471 = (uint64_t)&v477[v473 + 1];
        v479 = (char *)(v472 - v470);
        if (v472 == v470)
          v479 = 0;
        *(_QWORD *)(v463 + 80) = &v477[v473 + (_QWORD)v479];
        *(_QWORD *)(v463 + 88) = v471;
        *(_QWORD *)(v463 + 96) = v478;
        if (v472)
          operator delete(v472);
      }
      else
      {
        v471 = (uint64_t)(v470 + 1);
      }
      *(_QWORD *)(v463 + 88) = v471;
      v14 = *(_QWORD **)(v463 + 248);
LABEL_843:
      j = *(_QWORD **)(v463 + 176);
      if (j)
      {
        while (1)
        {
          v857 = (unint64_t)&v861;
          v858 = 1;
          v842 = (uint64_t)v14;
          v480 = j[6];
          if (!v480)
            goto LABEL_1308;
          (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v480 + 48))(v480, &v842, &v857);
          j = (_QWORD *)*j;
          if (!j)
            goto LABEL_846;
        }
      }
      goto LABEL_846;
    }
    v14 = *(_QWORD **)(v463 + 248);
    if (*(_QWORD *)(v463 + 80) + (((uint64_t)v466 - *(_QWORD *)(v463 + 56)) >> 3) == *(_QWORD *)(v463 + 88))
      goto LABEL_843;
    for (j = *(_QWORD **)(v463 + 128); j; j = (_QWORD *)*j)
    {
      v857 = (unint64_t)&v861;
      v858 = 1;
      v842 = (uint64_t)v14;
      v468 = j[6];
      if (!v468)
        goto LABEL_1308;
      (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v468 + 48))(v468, &v842, &v857);
    }
LABEL_846:
    v842 = 0x8217BEFF5E3814C6;
    v481 = *(int8x8_t *)((char *)v841 + 128);
    if (v481)
    {
      v482 = (uint8x8_t)vcnt_s8(v481);
      v482.i16[0] = vaddlv_u8(v482);
      if (v482.u32[0] > 1uLL)
      {
        v483 = 0x8217BEFF5E3814C6;
        if (*(_QWORD *)&v481 <= 0x8217BEFF5E3814C6)
          v483 = 0x8217BEFF5E3814C6 % *(_QWORD *)&v481;
      }
      else
      {
        v483 = (*(_QWORD *)&v481 - 1) & 0x8217BEFF5E3814C6;
      }
      v484 = *(_QWORD **)(*v839 + 8 * v483);
      if (v484)
      {
        v485 = (_QWORD *)*v484;
        if (v485)
        {
          if (v482.u32[0] < 2uLL)
          {
            v486 = *(_QWORD *)&v481 - 1;
            while (1)
            {
              v488 = v485[1];
              if (v488 == 0x8217BEFF5E3814C6)
              {
                if (v485[2] == 0x8217BEFF5E3814C6)
                  goto LABEL_892;
              }
              else if ((v488 & v486) != v483)
              {
                goto LABEL_866;
              }
              v485 = (_QWORD *)*v485;
              if (!v485)
                goto LABEL_866;
            }
          }
          do
          {
            v487 = v485[1];
            if (v487 == 0x8217BEFF5E3814C6)
            {
              if (v485[2] == 0x8217BEFF5E3814C6)
              {
LABEL_892:
                v489 = v485[3];
                goto LABEL_869;
              }
            }
            else
            {
              if (v487 >= *(_QWORD *)&v481)
                v487 %= *(_QWORD *)&v481;
              if (v487 != v483)
                break;
            }
            v485 = (_QWORD *)*v485;
          }
          while (v485);
        }
      }
    }
LABEL_866:
    v489 = operator new();
    *(_QWORD *)(v489 + 16) = "md::components::IntendedSceneLayer]";
    *(_QWORD *)(v489 + 24) = 34;
    *(_OWORD *)(v489 + 32) = 0u;
    *(_OWORD *)(v489 + 48) = 0u;
    *(_OWORD *)(v489 + 64) = 0u;
    *(_OWORD *)(v489 + 80) = 0u;
    *(_OWORD *)(v489 + 96) = 0u;
    *(_OWORD *)(v489 + 112) = 0u;
    *(_OWORD *)(v489 + 128) = 0u;
    *(_DWORD *)(v489 + 144) = 1065353216;
    *(_OWORD *)(v489 + 152) = 0u;
    *(_OWORD *)(v489 + 168) = 0u;
    *(_QWORD *)(v489 + 184) = 0;
    *(_DWORD *)(v489 + 192) = 1065353216;
    *(_OWORD *)(v489 + 200) = 0u;
    *(_OWORD *)(v489 + 216) = 0u;
    *(_QWORD *)(v489 + 232) = 0;
    *(_DWORD *)(v489 + 240) = 1065353216;
    *(_QWORD *)(v489 + 8) = 0x8217BEFF5E3814C6;
    *(_QWORD *)v489 = &off_1E42B3168;
    *(_QWORD *)(v489 + 248) = v841;
    v490 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v839, 0x8217BEFF5E3814C6, &v842);
    v491 = v490[3];
    v490[3] = v489;
    if (v491)
      (*(void (**)(uint64_t))(*(_QWORD *)v491 + 8))(v491);
    v857 = 0x8217BEFF5E3814C6;
    v858 = (uint64_t)"md::components::IntendedSceneLayer]";
    v859 = 34;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v841, 0x8217BEFF5E3814C6, (uint64_t)&v857, (uint64_t *)(v489 + 104));
LABEL_869:
    v861 = v837;
    v492 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v489 + 32), (uint64_t)&v861);
    if ((v493 & 1) != 0)
      break;
    v494 = (_BYTE *)(*(_QWORD *)(v489 + 80) + (((uint64_t)v492 - *(_QWORD *)(v489 + 56)) >> 3));
    *v494 = 4;
    v14 = *(_QWORD **)(v489 + 248);
    if (v494 == *(_BYTE **)(v489 + 88))
      goto LABEL_908;
    j = *(_QWORD **)(v489 + 128);
    if (!j)
      goto LABEL_911;
    while (1)
    {
      v857 = (unint64_t)&v861;
      v858 = 1;
      v842 = (uint64_t)v14;
      v495 = j[6];
      if (!v495)
        break;
      (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v495 + 48))(v495, &v842, &v857);
      j = (_QWORD *)*j;
      if (!j)
        goto LABEL_911;
    }
LABEL_1308:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
LABEL_1310:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v497 = *(_BYTE **)(v489 + 88);
  v496 = *(_QWORD *)(v489 + 96);
  if ((unint64_t)v497 >= v496)
  {
    v499 = *(_BYTE **)(v489 + 80);
    v500 = v497 - v499;
    v501 = v497 - v499 + 1;
    if (v501 < 0)
LABEL_1309:
      abort();
    v502 = v496 - (_QWORD)v499;
    if (2 * v502 > v501)
      v501 = 2 * v502;
    if (v502 >= 0x3FFFFFFFFFFFFFFFLL)
      v503 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v503 = v501;
    if (v503)
      v504 = (char *)operator new(v503);
    else
      v504 = 0;
    v505 = &v504[v500];
    v504[v500] = 4;
    v498 = (uint64_t)&v504[v500 + 1];
    if (v497 == v499)
      goto LABEL_905;
    if (v500 < 8 || (unint64_t)(v499 - v504) < 0x20)
      goto LABEL_902;
    if (v500 >= 0x20)
    {
      v506 = v500 & 0xFFFFFFFFFFFFFFE0;
      v507 = &v504[v500 - 16];
      v508 = (__int128 *)(v497 - 16);
      v509 = v500 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v510 = *v508;
        *((_OWORD *)v507 - 1) = *(v508 - 1);
        *(_OWORD *)v507 = v510;
        v507 -= 32;
        v508 -= 2;
        v509 -= 32;
      }
      while (v509);
      if (v500 == v506)
        goto LABEL_904;
      if ((v500 & 0x18) == 0)
      {
        v505 -= v506;
        v497 -= v506;
        goto LABEL_902;
      }
    }
    else
    {
      v506 = 0;
    }
    v511 = v506 - (v500 & 0xFFFFFFFFFFFFFFF8);
    v512 = &v497[-v506];
    v513 = &v504[&v497[-v506] - v499 - 8];
    v514 = (uint64_t *)(v512 - 8);
    do
    {
      v515 = *v514--;
      *(_QWORD *)v513 = v515;
      v513 -= 8;
      v511 += 8;
    }
    while (v511);
    if (v500 == (v500 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_904;
    v505 -= v500 & 0xFFFFFFFFFFFFFFF8;
    v497 -= v500 & 0xFFFFFFFFFFFFFFF8;
LABEL_902:
    v516 = v505 - 1;
    do
    {
      v517 = *--v497;
      *v516-- = v517;
    }
    while (v497 != v499);
LABEL_904:
    v505 = v504;
LABEL_905:
    *(_QWORD *)(v489 + 80) = v505;
    *(_QWORD *)(v489 + 88) = v498;
    *(_QWORD *)(v489 + 96) = &v504[v503];
    if (v499)
      operator delete(v499);
    goto LABEL_907;
  }
  *v497 = 4;
  v498 = (uint64_t)(v497 + 1);
LABEL_907:
  *(_QWORD *)(v489 + 88) = v498;
  v14 = *(_QWORD **)(v489 + 248);
LABEL_908:
  for (j = *(_QWORD **)(v489 + 176); j; j = (_QWORD *)*j)
  {
    v857 = (unint64_t)&v861;
    v858 = 1;
    v842 = (uint64_t)v14;
    v518 = j[6];
    if (!v518)
      goto LABEL_1308;
    (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v518 + 48))(v518, &v842, &v857);
  }
LABEL_911:
  v519 = (std::__shared_weak_count *)*((_QWORD *)&v849 + 1);
  if (*((_QWORD *)&v849 + 1))
  {
    v520 = (unint64_t *)(*((_QWORD *)&v849 + 1) + 8);
    do
      v521 = __ldaxr(v520);
    while (__stlxr(v521 - 1, v520));
    if (!v521)
    {
      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
      std::__shared_weak_count::__release_weak(v519);
    }
  }
  do
    v522 = __ldaxr(v375);
  while (__stlxr(v522 - 1, v375));
  if (!v522)
  {
    ((void (*)(std::__shared_weak_count *))__pc->__on_zero_shared)(__pc);
    std::__shared_weak_count::__release_weak(__pc);
  }
  do
    v523 = __ldaxr(v375);
  while (__stlxr(v523 - 1, v375));
  if (!v523)
  {
    ((void (*)(std::__shared_weak_count *))__pc->__on_zero_shared)(__pc);
    std::__shared_weak_count::__release_weak(__pc);
  }
  v14 = &v831->__vftable;
  do
    v524 = __ldaxr(v346);
  while (__stlxr(v524 - 1, v346));
  if (!v524)
  {
    ((void (*)(std::__shared_weak_count *))v831->__on_zero_shared)(v831);
    std::__shared_weak_count::__release_weak(v831);
  }
  v343 = v827 + 7;
  if (v827 + 7 != v822)
    goto LABEL_615;
  v343 = v850;
  if (v850)
    goto LABEL_609;
LABEL_610:
  while (1)
  {
    v336 = v867 + 1;
    v867 = v336;
    if (v336 == (gdc::Registry **)v866[1])
      break;
    if (!v870)
      goto LABEL_1308;
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v870 + 48))(v870))
    {
      v336 = v867;
      break;
    }
  }
  if (v863 != (std::__shared_weak_count *)v336)
    goto LABEL_602;
LABEL_962:
  v552 = v865;
  if (v865 == v864)
  {
    v553 = 4;
    v552 = v864;
LABEL_966:
    (*(void (**)(void))(*v552 + 8 * v553))();
  }
  else if (v865)
  {
    v553 = 5;
    goto LABEL_966;
  }
  v554 = v870;
  if (v870 == &v868)
  {
    v555 = 4;
    v554 = &v868;
LABEL_971:
    (*(void (**)(void))(*(_QWORD *)v554 + 8 * v555))();
  }
  else if (v870)
  {
    v555 = 5;
    goto LABEL_971;
  }
  v556 = (__int128 *)*((_QWORD *)&v889 + 1);
  if (*((__int128 **)&v889 + 1) == &v888)
  {
    v557 = 4;
    v556 = &v888;
LABEL_976:
    (*(void (**)(void))(*(_QWORD *)v556 + 8 * v557))();
  }
  else if (*((_QWORD *)&v889 + 1))
  {
    v557 = 5;
    goto LABEL_976;
  }
LABEL_977:
  v558 = *(_QWORD **)(*(_QWORD *)(a1 + 168) + 24);
  if (v558)
  {
LABEL_980:
    v559 = (unsigned __int8 *)v558[8];
    if (!v559)
      goto LABEL_979;
    while (1)
    {
      v560 = atomic_load(*((unsigned __int8 **)v559 + 8));
      if (v560 == 1 || (v561 = atomic_load(*((unsigned __int8 **)v559 + 8)), v561 == 2))
      {
LABEL_982:
        v559 = *(unsigned __int8 **)v559;
        if (!v559)
          goto LABEL_979;
        continue;
      }
      v562 = (_QWORD *)*((_QWORD *)v559 + 8);
      v564 = v562[3];
      v563 = (std::__shared_weak_count *)v562[4];
      if (v563)
      {
        p_shared_weak_owners = (unint64_t *)&v563->__shared_weak_owners_;
        do
          v566 = __ldxr(p_shared_weak_owners);
        while (__stxr(v566 + 1, p_shared_weak_owners));
        v562 = (_QWORD *)*((_QWORD *)v559 + 8);
      }
      v567 = v562[5];
      v568 = (std::__shared_weak_count *)v562[6];
      if (v568)
      {
        v569 = (unint64_t *)&v568->__shared_weak_owners_;
        do
          v570 = __ldxr(v569);
        while (__stxr(v570 + 1, v569));
      }
      if (!v563 || (v571 = *((unsigned __int16 *)v559 + 20), (v572 = std::__shared_weak_count::lock(v563)) == 0))
      {
        v574 = 1;
        if (v568)
          goto LABEL_1072;
        goto LABEL_1073;
      }
      v573 = v572;
      v574 = 1;
      if (!v564)
        goto LABEL_1068;
      if (!v568)
        goto LABEL_1068;
      v575 = std::__shared_weak_count::lock(v568);
      if (!v575)
        goto LABEL_1068;
      v576 = v575;
      if (!v567)
        goto LABEL_1064;
      v577 = *v808;
      if ((v578 & 1) == 0)
      {
        v635 = v575;
        v576 = v635;
        if (v636)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v576 = v635;
        }
      }
      v579 = *(_WORD **)(v577 + 48);
      v580 = *(_WORD **)(v577 + 56);
      if (v579 == v580)
        goto LABEL_1011;
      v581 = *(_WORD **)(v577 + 48);
      while (*v581 != 33)
      {
        v581 += 16;
        if (v581 == v580)
          goto LABEL_1011;
      }
      if (v581 == v580)
      {
LABEL_1011:
        v582 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v579 != 33)
        {
          v579 += 16;
          if (v579 == v580)
          {
            v579 = *(_WORD **)(v577 + 56);
            break;
          }
        }
        v582 = (uint64_t *)(v579 + 4);
      }
      v583 = (unint64_t *)&v573->__shared_owners_;
      do
        v584 = __ldxr(v583);
      while (__stxr(v584 + 1, v583));
      do
        v585 = __ldxr(v583);
      while (__stxr(v585 + 1, v583));
      v586 = v582[1];
      if (!v586)
      {
        v574 = 1;
        goto LABEL_1058;
      }
      while (1)
      {
        v587 = *(char *)(v586 + 48);
        v588 = *(_QWORD *)(v586 + 32);
        v589 = v564 < v588;
        if (*(_BYTE *)(v586 + 48))
          v589 = v587 > 0;
        if (v589)
          goto LABEL_1017;
        v590 = v588 < v564;
        v11 = v587 == 0;
        v591 = v587 < 0;
        if (v11)
          v591 = v590;
        if (!v591)
          break;
        v586 += 8;
LABEL_1017:
        v586 = *(_QWORD *)v586;
        if (!v586)
        {
          v574 = 1;
          goto LABEL_1058;
        }
      }
      v592 = *v808;
      if ((v593 & 1) == 0)
      {
        v637 = v576;
        v576 = v637;
        if (v638)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v576 = v637;
        }
      }
      v594 = *(unsigned __int16 **)(v592 + 48);
      v595 = *(unsigned __int16 **)(v592 + 56);
      if (v594 == v595)
        goto LABEL_1037;
      v596 = *(unsigned __int16 **)(v592 + 48);
      while (*v596 != v571)
      {
        v596 += 16;
        if (v596 == v595)
          goto LABEL_1037;
      }
      if (v596 == v595)
      {
LABEL_1037:
        v597 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v594 != v571)
        {
          v594 += 16;
          if (v594 == v595)
          {
            v594 = *(unsigned __int16 **)(v592 + 56);
            break;
          }
        }
        v597 = (uint64_t *)(v594 + 4);
      }
      v598 = (unint64_t *)&v576->__shared_owners_;
      do
        v599 = __ldxr(v598);
      while (__stxr(v599 + 1, v598));
      do
        v600 = __ldxr(v598);
      while (__stxr(v600 + 1, v598));
      v601 = v597[1];
      if (!v601)
      {
LABEL_1042:
        v574 = 1;
        goto LABEL_1052;
      }
      while (2)
      {
        v602 = *(char *)(v601 + 48);
        v603 = *(_QWORD *)(v601 + 32);
        v604 = v567 < v603;
        if (*(_BYTE *)(v601 + 48))
          v604 = v602 > 0;
        if (v604)
          goto LABEL_1044;
        v605 = v603 < v567;
        v11 = v602 == 0;
        v606 = v602 < 0;
        if (v11)
          v606 = v605;
        if (v606)
        {
          v601 += 8;
LABEL_1044:
          v601 = *(_QWORD *)v601;
          if (!v601)
            goto LABEL_1042;
          continue;
        }
        break;
      }
      v574 = 0;
      do
LABEL_1052:
        v607 = __ldaxr(v598);
      while (__stlxr(v607 - 1, v598));
      if (!v607)
      {
        v608 = v576;
        ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
        std::__shared_weak_count::__release_weak(v608);
        v576 = v608;
      }
      do
        v609 = __ldaxr(v598);
      while (__stlxr(v609 - 1, v598));
      if (!v609)
      {
        v610 = v576;
        ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
        std::__shared_weak_count::__release_weak(v610);
        v576 = v610;
      }
      do
LABEL_1058:
        v611 = __ldaxr(v583);
      while (__stlxr(v611 - 1, v583));
      if (!v611)
      {
        v612 = v576;
        ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
        std::__shared_weak_count::__release_weak(v573);
        v576 = v612;
      }
      do
        v613 = __ldaxr(v583);
      while (__stlxr(v613 - 1, v583));
      if (!v613)
      {
        v614 = v576;
        ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
        std::__shared_weak_count::__release_weak(v573);
        v576 = v614;
      }
LABEL_1064:
      v615 = (unint64_t *)&v576->__shared_owners_;
      do
        v616 = __ldaxr(v615);
      while (__stlxr(v616 - 1, v615));
      if (!v616)
      {
        v617 = v576;
        ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
        std::__shared_weak_count::__release_weak(v617);
      }
LABEL_1068:
      v618 = (unint64_t *)&v573->__shared_owners_;
      do
        v619 = __ldaxr(v618);
      while (__stlxr(v619 - 1, v618));
      if (v619)
      {
        if (v568)
          goto LABEL_1072;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
        std::__shared_weak_count::__release_weak(v573);
        if (v568)
LABEL_1072:
          std::__shared_weak_count::__release_weak(v568);
      }
LABEL_1073:
      if (!v563)
      {
        if (v574)
          goto LABEL_1077;
        goto LABEL_982;
      }
      std::__shared_weak_count::__release_weak(v563);
      if ((v574 & 1) == 0)
        goto LABEL_982;
LABEL_1077:
      if (!atomic_load(*((unsigned __int8 **)v559 + 8)))
      {
        atomic_store(3u, *((unsigned __int8 **)v559 + 8));
        atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v559 + 8) + 8) + 32));
      }
      v621 = (int8x8_t)v558[7];
      v623 = *(unsigned __int8 **)v559;
      v622 = *((_QWORD *)v559 + 1);
      v624 = (uint8x8_t)vcnt_s8(v621);
      v624.i16[0] = vaddlv_u8(v624);
      if (v624.u32[0] > 1uLL)
      {
        if (v622 >= *(_QWORD *)&v621)
          v622 %= *(_QWORD *)&v621;
      }
      else
      {
        v622 &= *(_QWORD *)&v621 - 1;
      }
      v625 = v558[6];
      v626 = *(unsigned __int8 **)(v625 + 8 * v622);
      do
      {
        v627 = v626;
        v626 = *(unsigned __int8 **)v626;
      }
      while (v626 != v559);
      if (v627 == v558 + 8)
        goto LABEL_1317;
      v628 = v627[1];
      if (v624.u32[0] > 1uLL)
      {
        if (v628 >= *(_QWORD *)&v621)
          v628 %= *(_QWORD *)&v621;
      }
      else
      {
        v628 &= *(_QWORD *)&v621 - 1;
      }
      v629 = *(unsigned __int8 **)v559;
      if (v628 == v622)
      {
LABEL_1100:
        if (v629)
        {
          v630 = *((_QWORD *)v629 + 1);
          goto LABEL_1102;
        }
      }
      else
      {
LABEL_1317:
        if (!v623)
          goto LABEL_1099;
        v630 = *((_QWORD *)v623 + 1);
        if (v624.u32[0] > 1uLL)
        {
          v631 = *((_QWORD *)v623 + 1);
          if (v630 >= *(_QWORD *)&v621)
            v631 = v630 % *(_QWORD *)&v621;
        }
        else
        {
          v631 = v630 & (*(_QWORD *)&v621 - 1);
        }
        v629 = *(unsigned __int8 **)v559;
        if (v631 != v622)
        {
LABEL_1099:
          *(_QWORD *)(v625 + 8 * v622) = 0;
          v629 = *(unsigned __int8 **)v559;
          goto LABEL_1100;
        }
LABEL_1102:
        if (v624.u32[0] > 1uLL)
        {
          if (v630 >= *(_QWORD *)&v621)
            v630 %= *(_QWORD *)&v621;
        }
        else
        {
          v630 &= *(_QWORD *)&v621 - 1;
        }
        if (v630 != v622)
        {
          *(_QWORD *)(v558[6] + 8 * v630) = v627;
          v629 = *(unsigned __int8 **)v559;
        }
      }
      *v627 = v629;
      *(_QWORD *)v559 = 0;
      --v558[9];
      v632 = (std::__shared_weak_count *)*((_QWORD *)v559 + 9);
      if (v632)
      {
        v633 = (unint64_t *)&v632->__shared_owners_;
        do
          v634 = __ldaxr(v633);
        while (__stlxr(v634 - 1, v633));
        if (!v634)
        {
          ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
          std::__shared_weak_count::__release_weak(v632);
        }
      }
      operator delete(v559);
      v559 = v623;
      if (!v623)
      {
LABEL_979:
        v558 = (_QWORD *)*v558;
        if (!v558)
          break;
        goto LABEL_980;
      }
    }
  }
  v639 = *(_QWORD *)(a1 + 216);
  *(_BYTE *)(a4 + 8) = *(_BYTE *)(a1 + 224);
  *(_QWORD *)a4 = v639;
}

void sub_19F2D64B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::FoundationOverlayPair,md::FoundationOverlayPairHash,std::equal_to<md::FoundationOverlayPair>,std::allocator<md::FoundationOverlayPair>>::~unordered_set[abi:nn180100](v1 - 160);
  _Unwind_Resume(a1);
}

void sub_19F2D65AC()
{
  JUMPOUT(0x19F2D6800);
}

void sub_19F2D65B4()
{
  JUMPOUT(0x19F2D6800);
}

void sub_19F2D65BC()
{
  JUMPOUT(0x19F2D6800);
}

void sub_19F2D65C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,std::__shared_weak_count *__p,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,std::__shared_weak_count *a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a66;
  uint64_t a69;
  uint64_t *a72;
  uint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  if (a44)
  {
    p_shared_owners = (unint64_t *)&a44->__shared_owners_;
    do
      v78 = __ldaxr(p_shared_owners);
    while (__stlxr(v78 - 1, p_shared_owners));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))a44->__on_zero_shared)(a44);
      std::__shared_weak_count::__release_weak(a44);
    }
  }
  do
    v79 = __ldaxr(v74);
  while (__stlxr(v79 - 1, v74));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))__p->__on_zero_shared)(__p);
    std::__shared_weak_count::__release_weak(__p);
  }
  do
    v80 = __ldaxr(v74);
  while (__stlxr(v80 - 1, v74));
  if (!v80)
  {
    ((void (*)(std::__shared_weak_count *))__p->__on_zero_shared)(__p);
    std::__shared_weak_count::__release_weak(__p);
  }
  do
    v81 = __ldaxr(v73);
  while (__stlxr(v81 - 1, v73));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
    std::__shared_weak_count::__release_weak(a31);
  }
  if (a45)
    operator delete(a45);
  v82 = a66;
  if (a66 == &a63)
  {
    v83 = 4;
    v82 = &a63;
  }
  else
  {
    if (!a66)
      goto LABEL_22;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_22:
  v84 = a72;
  if (a72 == &a69)
  {
    v85 = 4;
    v84 = &a69;
  }
  else
  {
    if (!a72)
      goto LABEL_27;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_27:
  v86 = *(_QWORD **)(v75 - 120);
  if (v86 == (_QWORD *)(v75 - 144))
  {
    v87 = 4;
    v86 = (_QWORD *)(v75 - 144);
  }
  else
  {
    if (!v86)
      _Unwind_Resume(a1);
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<std::vector<gdc::Registry*>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9256643C7714E8FELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9256643C7714E8FELL;
      if (*(_QWORD *)&v3 <= 0x9256643C7714E8FELL)
        v5 = 0x9256643C7714E8FELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9256643C7714E8FELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9256643C7714E8FELL)
            {
              if (v7[2] == 0x9256643C7714E8FELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9256643C7714E8FELL)
          {
            if (v7[2] == 0x9256643C7714E8FELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "std::vector<gdc::Registry *>]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B4548;
  *(_QWORD *)(v11 + 8) = 0x9256643C7714E8FELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9256643C7714E8FELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9256643C7714E8FELL;
  v15[1] = "std::vector<gdc::Registry *>]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9256643C7714E8FELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F2D6AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1A70CFEE213578E3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1A70CFEE213578E3;
      if (*(_QWORD *)&v3 <= 0x1A70CFEE213578E3uLL)
        v5 = 0x1A70CFEE213578E3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1A70CFEE213578E3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1A70CFEE213578E3)
            {
              if (v7[2] == 0x1A70CFEE213578E3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1A70CFEE213578E3)
          {
            if (v7[2] == 0x1A70CFEE213578E3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "std::unordered_map<gdc::Registry *, std::vector<gdc::Entity>>]";
  *(_QWORD *)(v11 + 24) = 61;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B4488;
  *(_QWORD *)(v11 + 8) = 0x1A70CFEE213578E3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1A70CFEE213578E3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1A70CFEE213578E3;
  v15[1] = "std::unordered_map<gdc::Registry *, std::vector<gdc::Entity>>]";
  v15[2] = 61;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1A70CFEE213578E3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F2D6CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(uint64_t a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  gss::Allocator *v53;
  uint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  int8x8_t v108;
  uint8x8_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  ggl::CommandBuffer *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int v125;
  ggl::CommandBuffer *v126;
  uint64_t v127;
  uint64_t v128;
  float32x4_t *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *result;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  ggl::CommandBuffer *v149;
  ggl::CommandBuffer *v150;
  char *v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  char v155;
  _QWORD v156[2];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  float32x4_t *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  uint64_t (**v165)();
  uint64_t **v166;
  uint64_t (***v167)();
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v165 = &off_1E42CF1A0;
  v166 = a2;
  v167 = &v165;
  v163[0] = &off_1E42CF158;
  v163[1] = a2;
  v164 = v163;
  v169 = v168;
  v168[0] = &off_1E42CF158;
  v168[1] = a2;
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>((uint64_t)&v166);
  v4 = v164;
  if (v164 == v163)
  {
    v5 = 4;
    v4 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v167;
  if (v167 == &v165)
  {
    v7 = 4;
    v6 = &v165;
    goto LABEL_10;
  }
  if (v167)
  {
    v7 = 5;
LABEL_10:
    (*v6)[v7]();
  }
  v8 = mach_absolute_time();
  v9 = *(_QWORD *)(a1 + 272);
  v10 = *(_QWORD *)(a1 + 280);
  v156[0] = v9;
  v156[1] = v10;
  v11 = a2[1];
  v12 = (int8x8_t)v11[1];
  if (!*(_QWORD *)&v12)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_97;
  }
  v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v12 <= 0xE42D19AFCA302E68)
      v14 = 0xE42D19AFCA302E68 % *(_QWORD *)&v12;
  }
  else
  {
    v14 = (*(_QWORD *)&v12 - 1) & 0xE42D19AFCA302E68;
  }
  v17 = *v11;
  v18 = *(_QWORD **)(v17 + 8 * v14);
  if (!v18)
    goto LABEL_35;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_35;
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0xE42D19AFCA302E68)
      {
        if (v19[2] == 0xE42D19AFCA302E68)
          goto LABEL_33;
      }
      else if ((v21 & (*(_QWORD *)&v12 - 1)) != v14)
      {
        goto LABEL_35;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == 0xE42D19AFCA302E68)
      break;
    if (v20 >= *(_QWORD *)&v12)
      v20 %= *(_QWORD *)&v12;
    if (v20 != v14)
      goto LABEL_35;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_35;
  }
  if (v19[2] != 0xE42D19AFCA302E68)
    goto LABEL_22;
LABEL_33:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) == 0xE42D19AFCA302E68)
  {
    v16 = *(uint64_t **)(v22 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v16 = 0;
LABEL_36:
  if (v13.u32[0] > 1uLL)
  {
    v23 = 0xFD5D5EC7C4E1E43ELL;
    if (*(_QWORD *)&v12 <= 0xFD5D5EC7C4E1E43ELL)
      v23 = 0xFD5D5EC7C4E1E43ELL % *(_QWORD *)&v12;
  }
  else
  {
    v23 = (*(_QWORD *)&v12 - 1) & 0xFD5D5EC7C4E1E43ELL;
  }
  v24 = *(_QWORD **)(v17 + 8 * v23);
  if (!v24)
    goto LABEL_58;
  v25 = (_QWORD *)*v24;
  if (!v25)
    goto LABEL_58;
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v25[1];
      if (v27 == 0xFD5D5EC7C4E1E43ELL)
      {
        if (v25[2] == 0xFD5D5EC7C4E1E43ELL)
          goto LABEL_56;
      }
      else if ((v27 & (*(_QWORD *)&v12 - 1)) != v23)
      {
        goto LABEL_58;
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_58;
    }
  }
  while (2)
  {
    v26 = v25[1];
    if (v26 != 0xFD5D5EC7C4E1E43ELL)
    {
      if (v26 >= *(_QWORD *)&v12)
        v26 %= *(_QWORD *)&v12;
      if (v26 != v23)
        goto LABEL_58;
      goto LABEL_45;
    }
    if (v25[2] != 0xFD5D5EC7C4E1E43ELL)
    {
LABEL_45:
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_58;
      continue;
    }
    break;
  }
LABEL_56:
  v28 = v25[5];
  if (*(_QWORD *)(v28 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v29 = *(_QWORD *)(v28 + 32);
    goto LABEL_59;
  }
LABEL_58:
  v29 = 0;
LABEL_59:
  if (v13.u32[0] > 1uLL)
  {
    v30 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v12 <= 0x401D4CCE847AB1D1uLL)
      v30 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v12;
  }
  else
  {
    v30 = (*(_QWORD *)&v12 - 1) & 0x401D4CCE847AB1D1;
  }
  v31 = *(_QWORD **)(v17 + 8 * v30);
  if (!v31)
    goto LABEL_82;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_82;
  if (v13.u32[0] < 2uLL)
  {
    v33 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      v35 = v32[1];
      if (v35 == 0x401D4CCE847AB1D1)
      {
        if (v32[2] == 0x401D4CCE847AB1D1)
          goto LABEL_79;
      }
      else if ((v35 & v33) != v30)
      {
        goto LABEL_82;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_82;
    }
  }
  while (2)
  {
    v34 = v32[1];
    if (v34 != 0x401D4CCE847AB1D1)
    {
      if (v34 >= *(_QWORD *)&v12)
        v34 %= *(_QWORD *)&v12;
      if (v34 != v30)
        goto LABEL_82;
      goto LABEL_68;
    }
    if (v32[2] != 0x401D4CCE847AB1D1)
    {
LABEL_68:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_82;
      continue;
    }
    break;
  }
LABEL_79:
  v36 = v32[5];
  if (*(_QWORD *)(v36 + 8) == 0x401D4CCE847AB1D1)
  {
    v15 = *(_QWORD *)(v36 + 32);
    if (!v29)
      goto LABEL_97;
    goto LABEL_83;
  }
LABEL_82:
  v15 = 0;
  if (!v29)
    goto LABEL_97;
LABEL_83:
  if (*(_BYTE *)(v29 + 312))
  {
    for (; v9 != v10; v9 += 8)
      md::updatePolyonGroupsTransitNodeRouteAttributes(*(int8x8_t **)(*(_QWORD *)v9 + 384), *(_QWORD **)(v29 + 288), v29 + 232);
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) + 1120);
    v38 = *(_QWORD *)(v37 + 16);
    if ((v38 & (v38 - 1)) != 0)
    {
      v40 = 0x1BCA10CB9934FB1BLL;
      if (v38 <= 0x1BCA10CB9934FB1BLL)
        v40 = 0x1BCA10CB9934FB1BLL % v38;
      v39 = *(_QWORD **)(*(_QWORD *)(v37 + 8) + 8 * v40);
      do
      {
        do
          v39 = (_QWORD *)*v39;
        while (v39[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v39[2] != 0x1BCA10CB9934FB1BLL);
    }
    else
    {
      v39 = *(_QWORD **)(*(_QWORD *)(v37 + 8) + 8 * ((v38 - 1) & 0x1BCA10CB9934FB1BLL));
      do
      {
        do
          v39 = (_QWORD *)*v39;
        while (v39[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v39[2] != 0x1BCA10CB9934FB1BLL);
    }
    *(_BYTE *)(v39[5] + 544) = 0;
  }
LABEL_97:
  v155 = 0;
  v41 = operator new(0x20uLL);
  *v41 = &off_1E42CF110;
  v41[1] = &v155;
  v41[2] = v156;
  v41[3] = a1;
  v162 = v41;
  v42 = (_BYTE *)v16[6];
  v43 = (_BYTE *)v16[7];
  if (v42 == v43)
  {
LABEL_102:
    v44 = 5;
LABEL_104:
    v41 = (_QWORD *)(*(uint64_t (**)(void))(*v41 + 8 * v44))();
    goto LABEL_105;
  }
  do
  {
    LOBYTE(v149) = *v42;
    if (!v162)
      goto LABEL_241;
    (*(void (**)(_BYTE *, ggl::CommandBuffer **))(*(_QWORD *)v162 + 48))(v162, &v149);
    ++v42;
  }
  while (v42 != v43);
  v41 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v41 = v161;
    goto LABEL_104;
  }
  if (v162)
    goto LABEL_102;
LABEL_105:
  if (v155 || !*(_QWORD *)(a1 + 464))
  {
    v45 = *(std::__shared_weak_count **)(a1 + 472);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    if (!v45)
      goto LABEL_244;
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (*v16)
      {
LABEL_111:
        v48 = gss::Allocator::instance((gss::Allocator *)v41);
        v49 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 16, 4);
        v50 = v49;
        if (v49)
          *v49 = 0x200000005;
        v49[1] = 0x1B00000003;
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v152 = v48;
        v51 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 16, 4);
        v149 = (ggl::CommandBuffer *)v51;
        v151 = v51 + 16;
        if (v51)
          *(_QWORD *)v51 = *v50;
        *((_QWORD *)v51 + 1) = v50[1];
        v150 = (ggl::CommandBuffer *)(v51 + 16);
        gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v149);
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v48 + 40))(v48, v50, 16);
        v52 = *v16;
        *(_QWORD *)((char *)&v158 + 7) = 0;
        *(_QWORD *)&v158 = 0;
        HIBYTE(v158) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v157, v52, (gss::FeatureAttributeSet *)&v149, (gss::QueryOverrides *)&v158);
        if (!BYTE14(v158) && (_QWORD)v158)
        {
          v54 = gss::Allocator::instance(v53);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 40))(v54, v158, WORD6(v158));
        }
        v55 = v157;
        v157 = 0uLL;
        v56 = *(std::__shared_weak_count **)(a1 + 472);
        *(_OWORD *)(a1 + 464) = v55;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (*((_QWORD *)&v157 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (v149)
        {
          v150 = v149;
          (*(void (**)(uint64_t, ggl::CommandBuffer *, int64_t))(*(_QWORD *)v152 + 40))(v152, v149, v151 - (char *)v149);
        }
      }
    }
    else
    {
LABEL_244:
      if (*v16)
        goto LABEL_111;
    }
  }
  v62 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(v62 + 112) = 0;
  *(_QWORD *)(v62 + 120) = 0;
  md::PolygonRenderResources::resetPools(*(md::PolygonRenderResources **)(a1 + 368));
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  *(_BYTE *)(a1 + 384) = *(unsigned __int8 *)(v63 + 128) - 1 < 3;
  if (v15)
  {
    *(_DWORD *)(a1 + 444) = *(_DWORD *)v15;
    *(_WORD *)(a1 + 428) = *(_WORD *)(v15 + 4);
    if (*(_BYTE *)(v15 + 16))
    {
      v64 = *(_QWORD *)(v15 + 8);
      v65 = (char *)operator new(8uLL);
      *(_QWORD *)v65 = v64;
      v66 = *(_BYTE **)(a1 + 392);
      *(_QWORD *)(a1 + 400) = v66;
      std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(a1 + 392), v66, v65, v65 + 8, 1);
      operator delete(v65);
    }
    else
    {
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 392);
    }
  }
  v67 = *(_QWORD *)(a1 + 368);
  v68 = *(_QWORD *)(v67 + 872);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v69 = v158;
  v70 = *(__int16 *)(v67 + 896);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v158, v70, 0, &v149);
  if (v68)
    *(_QWORD *)(v69 + 32) = v68;
  v71 = *(_QWORD *)(a1 + 368);
  v72 = *(_QWORD *)(v71 + 880);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v73 = *((_QWORD *)&v158 + 1);
  v74 = *(__int16 *)(v71 + 898);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, *((uint64_t *)&v158 + 1), v74, 0, &v149);
  if (v72)
    *(_QWORD *)(v73 + 32) = v72;
  v75 = *(_QWORD *)(a1 + 368);
  v76 = *(_QWORD *)(v75 + 888);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v77 = v159;
  v78 = *(__int16 *)(v75 + 900);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v159, v78, 0, &v149);
  if (v76)
    *(_QWORD *)(v77 + 32) = v76;
  if (*(_BYTE *)(a1 + 424))
  {
    v79 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
    v80 = v79[3];
    v81 = v79[4];
    v82 = v81 - v80;
    if (v81 == v80)
      goto LABEL_153;
    v83 = 0;
    v84 = v82 >> 3;
    while (1)
    {
      v85 = *(unsigned __int8 **)(v80 + 8 * v83);
      if (*v85 == *(unsigned __int8 *)(a1 + 422))
      {
        v86 = *((_QWORD *)v85 + 1);
        v87 = v79[15];
        if (v86 < (v79[16] - v87) >> 3)
          break;
      }
      if (++v83 >= v84)
        goto LABEL_153;
    }
    v88 = *(_QWORD *)(v87 + 8 * v86);
    if (!v88
      || (v89 = *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * *(unsigned __int8 *)(a1 + 423))) == 0
      || !*(_BYTE *)(a1 + 428)
      || (v90 = *(char *)(*(_QWORD *)(a1 + 368) + 912),
          LOBYTE(v149) = 0,
          md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v89, v90, 0, &v149), *(_QWORD *)(v89 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 920), *(_BYTE *)(a1 + 424)))
    {
LABEL_153:
      v91 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
      v92 = v91[3];
      v93 = v91[4] - v92;
      if (v93)
      {
        v94 = 0;
        v95 = v93 >> 3;
        while (1)
        {
          v96 = *(unsigned __int8 **)(v92 + 8 * v94);
          if (*v96 == *(unsigned __int8 *)(a1 + 422))
          {
            v97 = *((_QWORD *)v96 + 1);
            v98 = v91[15];
            v99 = (v91[16] - v98) >> 3;
            if (v97 < v99)
              break;
          }
          if (++v94 >= v95)
            goto LABEL_168;
        }
        v100 = *(_QWORD *)(v98 + 8 * v97);
        if (v100)
        {
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8 * *(unsigned __int8 *)(a1 + 423));
          if (v101)
          {
            if (*(_BYTE *)(a1 + 427))
            {
              v102 = 0;
              while (1)
              {
                v103 = *(unsigned __int8 **)(v92 + 8 * v102);
                if (*v103 == *(unsigned __int8 *)(a1 + 425))
                {
                  v104 = *((_QWORD *)v103 + 1);
                  if (v104 < v99)
                    break;
                }
                if (++v102 >= v95)
                  goto LABEL_168;
              }
              v105 = *(_QWORD *)(v98 + 8 * v104);
              if (v105 && *(_QWORD *)(*(_QWORD *)(v105 + 24) + 8 * *(unsigned __int8 *)(a1 + 426)))
              {
                v106 = *(char *)(*(_QWORD *)(a1 + 368) + 936);
                LOBYTE(v149) = 0;
                md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v101, v106, 0, &v149);
                *(_QWORD *)(v101 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 944);
              }
            }
          }
        }
      }
    }
  }
LABEL_168:
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 264) = 0;
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a1 + 360);
  *(_BYTE *)(a1 + 386) = *(_BYTE *)(a1 + 480);
  if (*(_BYTE *)(a1 + 361))
  {
    v107 = a2[1];
    v108 = (int8x8_t)v107[1];
    if (v108)
    {
      v109 = (uint8x8_t)vcnt_s8(v108);
      v109.i16[0] = vaddlv_u8(v109);
      if (v109.u32[0] > 1uLL)
      {
        v110 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v108 <= 0x1AF456233693CD46uLL)
          v110 = 0x1AF456233693CD46uLL % *(_QWORD *)&v108;
      }
      else
      {
        v110 = (*(_QWORD *)&v108 - 1) & 0x1AF456233693CD46;
      }
      v111 = *(_QWORD **)(*v107 + 8 * v110);
      if (v111)
      {
        v112 = (_QWORD *)*v111;
        if (v112)
        {
          if (v109.u32[0] < 2uLL)
          {
            v113 = *(_QWORD *)&v108 - 1;
            while (1)
            {
              v115 = v112[1];
              if (v115 == 0x1AF456233693CD46)
              {
                if (v112[2] == 0x1AF456233693CD46)
                  goto LABEL_190;
              }
              else if ((v115 & v113) != v110)
              {
                goto LABEL_216;
              }
              v112 = (_QWORD *)*v112;
              if (!v112)
                goto LABEL_216;
            }
          }
          do
          {
            v114 = v112[1];
            if (v114 == 0x1AF456233693CD46)
            {
              if (v112[2] == 0x1AF456233693CD46)
              {
LABEL_190:
                v116 = v112[5];
                if (*(_QWORD *)(v116 + 8) == 0x1AF456233693CD46)
                {
                  v117 = *(_QWORD *)(v116 + 32);
                  if (v117)
                  {
                    v118 = *(ggl::CommandBuffer **)(a1 + 464);
                    v119 = *(std::__shared_weak_count **)(a1 + 472);
                    *(_QWORD *)&v158 = v118;
                    *((_QWORD *)&v158 + 1) = v119;
                    if (v119)
                    {
                      v120 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v121 = __ldxr(v120);
                      while (__stxr(v121 + 1, v120));
                      v150 = (ggl::CommandBuffer *)v119;
                      do
                        v122 = __ldxr(v120);
                      while (__stxr(v122 + 1, v120));
                    }
                    else
                    {
                      v150 = 0;
                    }
                    v151 = 0;
                    v152 = 0;
                    v149 = v118;
                    LOBYTE(v153) = 0;
                    if (v118)
                      LODWORD(v118) = (*(uint64_t (**)(ggl::CommandBuffer *, char **))(*(_QWORD *)v118 + 48))(v118, &v151);
                    LOBYTE(v153) = (_BYTE)v118;
                    if (v119)
                    {
                      v123 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                      LODWORD(v118) = v153;
                    }
                    if ((_DWORD)v118)
                    {
                      if ((int)*(float *)(v117 + 3072) >= 0x17)
                        v125 = 23;
                      else
                        v125 = (int)*(float *)(v117 + 3072);
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v158, *((_QWORD *)v149 + 3), 0x5Cu, v125, 2u, 0);
                      v148 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v158)), (float32x4_t)vdupq_n_s32(0x37800080u));
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v149);
                      v126 = *(ggl::CommandBuffer **)(*(_QWORD *)(a1 + 368) + 968);
                      v160 = 0;
                      v158 = 0uLL;
                      v127 = *((_QWORD *)v126 + 1);
                      v149 = 0;
                      v150 = v126;
                      v151 = 0;
                      v152 = v127;
                      v153 = 1;
                      if (v127)
                        v128 = *((_QWORD *)v126 + 9);
                      else
                        v128 = 0;
                      v154 = v128;
                      ggl::BufferMemory::operator=((uint64_t *)&v158, (uint64_t)&v149);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v149);
                      v129 = v160;
                      v160[4] = v148;
                      *(float32x4_t *)((char *)&v129[5] + 8) = (float32x4_t)xmmword_19FFB3480;
                      v129[5].i32[0] = 1065353216;
                      v129->i32[0] = 1065353216;
                      *(uint64_t *)((char *)&v129->i64[1] + 4) = 0;
                      *(uint64_t *)((char *)v129->i64 + 4) = 0;
                      v129[1].i32[1] = 1065353216;
                      v129[1].i64[1] = 0;
                      v129[2].i64[0] = 0;
                      v129[2].i32[2] = 1065353216;
                      *(uint64_t *)((char *)v129[3].i64 + 4) = 0;
                      *(uint64_t *)((char *)&v129[2].i64[1] + 4) = 0;
                      v129[3].i32[3] = 1065353216;
                      v149 = 0;
                      v150 = 0;
                      v151 = 0;
                      md::PolygonLayoutCharacteristics::commandBufferInfo(&v149, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
                      md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(a1, a2[1], v149);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v158);
                    }
                    else
                    {
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v149);
                    }
                  }
                }
                break;
              }
            }
            else
            {
              if (v114 >= *(_QWORD *)&v108)
                v114 %= *(_QWORD *)&v108;
              if (v114 != v110)
                break;
            }
            v112 = (_QWORD *)*v112;
          }
          while (v112);
        }
      }
    }
  }
LABEL_216:
  md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>((uint64_t **)(a1 + 272), a2[1], a1 + 376);
  md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(a1 + 272, (uint64_t)a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 368), a1 + 376, *(_BYTE *)(a1 + 448));
  (*(void (**)(ggl::CommandBuffer **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)a1 + 32))(&v149, a1, a2);
  v130 = (unsigned __int8 *)v149;
  v131 = (unsigned __int8 *)v150;
  if (v149 == v150)
  {
    if (v149)
      goto LABEL_218;
  }
  else
  {
    do
    {
      v137 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
      v138 = v137[3];
      v139 = v137[4];
      v140 = v139 - v138;
      if (v139 != v138)
      {
        v141 = 0;
        v142 = v140 >> 3;
        while (1)
        {
          v143 = *(unsigned __int8 **)(v138 + 8 * v141);
          if (*v143 == *v130)
          {
            v144 = *((_QWORD *)v143 + 1);
            v145 = v137[15];
            if (v144 < (v137[16] - v145) >> 3)
              break;
          }
          if (++v141 >= v142)
            goto LABEL_227;
        }
        v146 = *(_QWORD *)(v145 + 8 * v144);
        if (v146)
        {
          v147 = *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v130[1]);
          if (v147)
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v147 + 72), *(char **)(v147 + 80));
        }
      }
LABEL_227:
      v130 += 2;
    }
    while (v130 != v131);
    v130 = (unsigned __int8 *)v149;
    if (v149)
    {
LABEL_218:
      v150 = (ggl::CommandBuffer *)v130;
      operator delete(v130);
    }
  }
  v132 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v133 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120);
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 + v132 - v8, v133));
  if (!v169)
  {
LABEL_241:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v169 + 48))(v169);
  result = v169;
  if (v169 == v168)
  {
    v136 = 4;
    result = v168;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v136))();
  }
  else if (v169)
  {
    v136 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v136))();
  }
  return result;
}

void sub_19F2D7C40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v5 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + v4 - v1, v5));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 120));
  _Unwind_Resume(a1);
}

void md::PolygonRenderResources::resetPools(md::PolygonRenderResources *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  void (***v166)(void);
  void (**v167)(void);

  v2 = (uint64_t *)*((_QWORD *)this + 22);
  v3 = (uint64_t *)v2[4];
  v4 = (uint64_t *)v2[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (_QWORD *)v2[1];
  do
  {
    v6 = *v3;
    v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = v6;
      ++v5;
      goto LABEL_4;
    }
    v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_207:
      abort();
    v9 = v7 - *v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = 8 * v11;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v14 = (_QWORD *)(v13 + 8 * v8);
      v11 = v13 + v12;
      if (v13)
        *v14 = v6;
    }
    else
    {
      v14 = (_QWORD *)(8 * v8);
    }
    v16 = *v2;
    v15 = v2[1];
    v17 = v15 - *v2;
    if (v15 == *v2)
    {
      v19 = v14;
      goto LABEL_29;
    }
    v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      v19 = v14;
    }
    else
    {
      v19 = v14;
      if ((unint64_t)(v15 - (_QWORD)v14) >= 0x20)
      {
        v20 = (v18 >> 3) + 1;
        v21 = v14 - 2;
        v22 = (__int128 *)(v15 - 16);
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v25 = *(_QWORD *)(v15 - 8);
      v15 -= 8;
      *--v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    v15 = *v2;
LABEL_29:
    v5 = v14 + 1;
    *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    v26 = v2[2];
    v2[2] = v11;
    if (v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v15, v26 - v15);
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  v27 = v2[4];
  if (v27 != v2[5])
    v2[5] = v27;
LABEL_33:
  v28 = (uint64_t *)*((_QWORD *)this + 23);
  v29 = (uint64_t *)v28[4];
  v30 = (uint64_t *)v28[5];
  if (v29 == v30)
    goto LABEL_65;
  v31 = (_QWORD *)v28[1];
  while (2)
  {
    v32 = *v29;
    v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31)
        *v31 = v32;
      ++v31;
      goto LABEL_36;
    }
    v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_207;
    v35 = v33 - *v28;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      v38 = 8 * v37;
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 16))(v28[3], 8 * v37, 8);
      v40 = (_QWORD *)(v39 + 8 * v34);
      v37 = v39 + v38;
      if (v39)
        *v40 = v32;
    }
    else
    {
      v40 = (_QWORD *)(8 * v34);
    }
    v42 = *v28;
    v41 = v28[1];
    v43 = v41 - *v28;
    if (v41 == *v28)
    {
      v45 = v40;
      goto LABEL_61;
    }
    v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      v45 = v40;
      do
      {
LABEL_59:
        v51 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        *--v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    v45 = v40;
    if ((unint64_t)(v41 - (_QWORD)v40) < 0x20)
      goto LABEL_59;
    v46 = (v44 >> 3) + 1;
    v47 = v40 - 2;
    v48 = (__int128 *)(v41 - 16);
    v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v41 = *v28;
LABEL_61:
    v31 = v40 + 1;
    *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    v52 = v28[2];
    v28[2] = v37;
    if (v41)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 40))(v28[3], v41, v52 - v41);
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30)
      continue;
    break;
  }
  v53 = v28[4];
  if (v53 != v28[5])
    v28[5] = v53;
LABEL_65:
  v54 = (uint64_t *)*((_QWORD *)this + 24);
  v55 = (uint64_t *)v54[4];
  v56 = (uint64_t *)v54[5];
  if (v55 == v56)
    goto LABEL_97;
  v57 = (_QWORD *)v54[1];
  while (2)
  {
    v58 = *v55;
    v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57)
        *v57 = v58;
      ++v57;
      goto LABEL_68;
    }
    v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_207;
    v61 = v59 - *v54;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
    {
      v64 = 8 * v63;
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 16))(v54[3], 8 * v63, 8);
      v66 = (_QWORD *)(v65 + 8 * v60);
      v63 = v65 + v64;
      if (v65)
        *v66 = v58;
    }
    else
    {
      v66 = (_QWORD *)(8 * v60);
    }
    v68 = *v54;
    v67 = v54[1];
    v69 = v67 - *v54;
    if (v67 == *v54)
    {
      v71 = v66;
      goto LABEL_93;
    }
    v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      v71 = v66;
      do
      {
LABEL_91:
        v77 = *(_QWORD *)(v67 - 8);
        v67 -= 8;
        *--v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    v71 = v66;
    if ((unint64_t)(v67 - (_QWORD)v66) < 0x20)
      goto LABEL_91;
    v72 = (v70 >> 3) + 1;
    v73 = v66 - 2;
    v74 = (__int128 *)(v67 - 16);
    v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
LABEL_92:
    v67 = *v54;
LABEL_93:
    v57 = v66 + 1;
    *v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    v78 = v54[2];
    v54[2] = v63;
    if (v67)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 40))(v54[3], v67, v78 - v67);
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56)
      continue;
    break;
  }
  v79 = v54[4];
  if (v79 != v54[5])
    v54[5] = v79;
LABEL_97:
  v80 = (uint64_t *)*((_QWORD *)this + 25);
  v81 = (uint64_t *)v80[4];
  v82 = (uint64_t *)v80[5];
  if (v81 == v82)
    goto LABEL_129;
  v83 = (_QWORD *)v80[1];
  while (2)
  {
    v84 = *v81;
    v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83)
        *v83 = v84;
      ++v83;
      goto LABEL_100;
    }
    v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_207;
    v87 = v85 - *v80;
    v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1))
      v88 = v86 + 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
    {
      v90 = 8 * v89;
      v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v89, 8);
      v92 = (_QWORD *)(v91 + 8 * v86);
      v89 = v91 + v90;
      if (v91)
        *v92 = v84;
    }
    else
    {
      v92 = (_QWORD *)(8 * v86);
    }
    v94 = *v80;
    v93 = v80[1];
    v95 = v93 - *v80;
    if (v93 == *v80)
    {
      v97 = v92;
      goto LABEL_125;
    }
    v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      v97 = v92;
      do
      {
LABEL_123:
        v103 = *(_QWORD *)(v93 - 8);
        v93 -= 8;
        *--v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    v97 = v92;
    if ((unint64_t)(v93 - (_QWORD)v92) < 0x20)
      goto LABEL_123;
    v98 = (v96 >> 3) + 1;
    v99 = v92 - 2;
    v100 = (__int128 *)(v93 - 16);
    v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_123;
LABEL_124:
    v93 = *v80;
LABEL_125:
    v83 = v92 + 1;
    *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    v104 = v80[2];
    v80[2] = v89;
    if (v93)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v93, v104 - v93);
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82)
      continue;
    break;
  }
  v105 = v80[4];
  if (v105 != v80[5])
    v80[5] = v105;
LABEL_129:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 26));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 27));
  v106 = (uint64_t *)*((_QWORD *)this + 28);
  v107 = (uint64_t *)v106[4];
  v108 = (uint64_t *)v106[5];
  if (v107 == v108)
    goto LABEL_161;
  v109 = (_QWORD *)v106[1];
  while (2)
  {
    v110 = *v107;
    v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109)
        *v109 = v110;
      ++v109;
      goto LABEL_132;
    }
    v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61)
      goto LABEL_207;
    v113 = v111 - *v106;
    v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1))
      v114 = v112 + 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
    {
      v116 = 8 * v115;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v118 = (_QWORD *)(v117 + 8 * v112);
      v115 = v117 + v116;
      if (v117)
        *v118 = v110;
    }
    else
    {
      v118 = (_QWORD *)(8 * v112);
    }
    v120 = *v106;
    v119 = v106[1];
    v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v118;
      goto LABEL_157;
    }
    v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v118;
      do
      {
LABEL_155:
        v129 = *(_QWORD *)(v119 - 8);
        v119 -= 8;
        *--v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    v123 = v118;
    if ((unint64_t)(v119 - (_QWORD)v118) < 0x20)
      goto LABEL_155;
    v124 = (v122 >> 3) + 1;
    v125 = v118 - 2;
    v126 = (__int128 *)(v119 - 16);
    v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_155;
LABEL_156:
    v119 = *v106;
LABEL_157:
    v109 = v118 + 1;
    *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    v130 = v106[2];
    v106[2] = v115;
    if (v119)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v119, v130 - v119);
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108)
      continue;
    break;
  }
  v131 = v106[4];
  if (v131 != v106[5])
    v106[5] = v131;
LABEL_161:
  v132 = (uint64_t *)*((_QWORD *)this + 29);
  v133 = (uint64_t *)v132[4];
  v134 = (uint64_t *)v132[5];
  if (v133 == v134)
    goto LABEL_193;
  v135 = (_QWORD *)v132[1];
  while (2)
  {
    v136 = *v133;
    v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135)
        *v135 = v136;
      ++v135;
      goto LABEL_164;
    }
    v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61)
      goto LABEL_207;
    v139 = v137 - *v132;
    v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1))
      v140 = v138 + 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
    {
      v142 = 8 * v141;
      v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 16))(v132[3], 8 * v141, 8);
      v144 = (_QWORD *)(v143 + 8 * v138);
      v141 = v143 + v142;
      if (v143)
        *v144 = v136;
    }
    else
    {
      v144 = (_QWORD *)(8 * v138);
    }
    v146 = *v132;
    v145 = v132[1];
    v147 = v145 - *v132;
    if (v145 == *v132)
    {
      v149 = v144;
      goto LABEL_189;
    }
    v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      v149 = v144;
      do
      {
LABEL_187:
        v155 = *(_QWORD *)(v145 - 8);
        v145 -= 8;
        *--v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    v149 = v144;
    if ((unint64_t)(v145 - (_QWORD)v144) < 0x20)
      goto LABEL_187;
    v150 = (v148 >> 3) + 1;
    v151 = v144 - 2;
    v152 = (__int128 *)(v145 - 16);
    v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_187;
LABEL_188:
    v145 = *v132;
LABEL_189:
    v135 = v144 + 1;
    *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    v156 = v132[2];
    v132[2] = v141;
    if (v145)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 40))(v132[3], v145, v156 - v145);
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134)
      continue;
    break;
  }
  v157 = v132[4];
  if (v157 != v132[5])
    v132[5] = v157;
LABEL_193:
  v158 = *((_QWORD *)this + 127);
  v159 = *((_QWORD *)this + 126);
  if (v158 != v159)
  {
    v160 = *((_QWORD *)this + 127);
    do
    {
      v162 = *(void **)(v160 - 24);
      v160 -= 24;
      v161 = v162;
      if (v162)
      {
        *(_QWORD *)(v158 - 16) = v161;
        operator delete(v161);
      }
      v158 = v160;
    }
    while (v160 != v159);
  }
  *((_QWORD *)this + 127) = v159;
  *((_QWORD *)this + 124) = *((_QWORD *)this + 123);
  v163 = (_QWORD *)*((_QWORD *)this + 133);
  if (v163)
  {
    do
    {
      if (v163[1])
      {
        v165 = 0;
        v166 = (void (***)(void))(v163 + 2);
        do
        {
          v167 = *v166;
          v166 += 15;
          (*v167)();
          ++v165;
        }
        while (v165 < v163[1]);
      }
      v163[1] = 0;
      v163 = (_QWORD *)*v163;
    }
    while (v163);
    v164 = *((_QWORD *)this + 133);
  }
  else
  {
    v164 = 0;
  }
  *((_QWORD *)this + 134) = v164;
}

void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  int v45;
  double v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _OWORD v60[4];
  char v61;
  char **v62;
  char *v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = (int8x8_t)a2[1];
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1DCE255EA309B4ADLL;
    if (*(_QWORD *)&v5 <= 0x1DCE255EA309B4ADuLL)
      v7 = 0x1DCE255EA309B4ADuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1DCE255EA309B4ADLL;
  }
  v8 = *a2;
  v9 = *(_QWORD **)(*a2 + 8 * v7);
  if (v9)
  {
    v10 = (_QWORD *)*v9;
    if (v10)
    {
      if (v6.u32[0] < 2uLL)
      {
        while (1)
        {
          v12 = v10[1];
          if (v12 == 0x1DCE255EA309B4ADLL)
          {
            if (v10[2] == 0x1DCE255EA309B4ADLL)
              goto LABEL_20;
          }
          else if ((v12 & (*(_QWORD *)&v5 - 1)) != v7)
          {
            goto LABEL_20;
          }
          v10 = (_QWORD *)*v10;
          if (!v10)
            goto LABEL_20;
        }
      }
      do
      {
        v11 = v10[1];
        if (v11 == 0x1DCE255EA309B4ADLL)
        {
          if (v10[2] == 0x1DCE255EA309B4ADLL)
            break;
        }
        else
        {
          if (v11 >= *(_QWORD *)&v5)
            v11 %= *(_QWORD *)&v5;
          if (v11 != v7)
            break;
        }
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
  }
LABEL_20:
  if (v6.u32[0] > 1uLL)
  {
    v13 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v5 <= 0xA60DDA5A69582425)
      v13 = 0xA60DDA5A69582425 % *(_QWORD *)&v5;
  }
  else
  {
    v13 = (*(_QWORD *)&v5 - 1) & 0xA60DDA5A69582425;
  }
  v14 = *(_QWORD **)(v8 + 8 * v13);
  if (!v14)
    goto LABEL_42;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_42;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xA60DDA5A69582425)
      {
        if (v15[2] == 0xA60DDA5A69582425)
          goto LABEL_40;
      }
      else if ((v17 & (*(_QWORD *)&v5 - 1)) != v13)
      {
        goto LABEL_42;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0xA60DDA5A69582425)
      break;
    if (v16 >= *(_QWORD *)&v5)
      v16 %= *(_QWORD *)&v5;
    if (v16 != v13)
      goto LABEL_42;
LABEL_29:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_42;
  }
  if (v15[2] != 0xA60DDA5A69582425)
    goto LABEL_29;
LABEL_40:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0xA60DDA5A69582425)
  {
    v19 = *(id **)(v18 + 32);
    goto LABEL_43;
  }
LABEL_42:
  v19 = 0;
LABEL_43:
  if (v6.u32[0] > 1uLL)
  {
    v20 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v20 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v20 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v21 = *(_QWORD **)(v8 + 8 * v20);
  if (!v21)
    goto LABEL_65;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_65;
  if (v6.u32[0] < 2uLL)
  {
    v23 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v25 = v22[1];
      if (v25 == 0x1AF456233693CD46)
      {
        if (v22[2] == 0x1AF456233693CD46)
          goto LABEL_63;
      }
      else if ((v25 & v23) != v20)
      {
        goto LABEL_65;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_65;
    }
  }
  while (2)
  {
    v24 = v22[1];
    if (v24 != 0x1AF456233693CD46)
    {
      if (v24 >= *(_QWORD *)&v5)
        v24 %= *(_QWORD *)&v5;
      if (v24 != v20)
        goto LABEL_65;
      goto LABEL_52;
    }
    if (v22[2] != 0x1AF456233693CD46)
    {
LABEL_52:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_65;
      continue;
    }
    break;
  }
LABEL_63:
  v26 = v22[5];
  if (*(_QWORD *)(v26 + 8) == 0x1AF456233693CD46)
  {
    v27 = *(_QWORD *)(v26 + 32);
    goto LABEL_66;
  }
LABEL_65:
  v27 = 0;
LABEL_66:
  v28 = *v19;
  v29 = v28;
  if (v28)
  {
    objc_msgSend(v28, "textureManager");
  }
  else
  {
    v58 = 0;
    v59 = 0;
  }

  v64[0] = &off_1E42D0478;
  v65 = v64;
  v56 = v58;
  v57 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  v32 = *a1;
  v55 = a1[1];
  if (*a1 != v55)
  {
    v33 = fmaxf(*(float *)(v27 + 3080) + *(float *)(v27 + 3076), 1.0);
    while (1)
    {
      v34 = *v32;
      if (!v65)
        break;
      *(_QWORD *)&v60[0] = *v32;
      if ((*(unsigned int (**)(_QWORD *, _OWORD *))(*v65 + 48))(v65, v60))
        break;
LABEL_74:
      if (++v32 == v55)
        goto LABEL_87;
    }
    v35 = *(_QWORD *)(v34 + 384);
    v36 = *(_QWORD *)(v34 + 216);
    if ((*(_BYTE *)(v36 + 16) & 2) == 0)
    {
      v37 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v37 != -1)
      {
        v63 = &v61;
        v62 = &v63;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v62, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v38 = *(_OWORD **)(v36 + 72);
    v60[0] = *v38;
    v60[1] = v38[1];
    v60[2] = v38[2];
    v60[3] = v38[3];
    v39 = ggl::CullingGrid::intersectedCellsForView((float *)v60, 0.0);
    v40 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
    v42 = *v40;
    v41 = v40[1];
    while (2)
    {
      if (v42 == v41)
        goto LABEL_74;
      v43 = *(id *)(v42 + 8);
      if (((*(uint64_t (**)(uint64_t, uint64_t, id, uint64_t))(*(_QWORD *)a3 + 56))(a3, v34, v43, v39) & 1) != 0)
      {
LABEL_81:

      }
      else
      {
        v44 = *(id *)(v42 + 8);
        v45 = (*(uint64_t (**)(uint64_t, id, uint64_t))(*(_QWORD *)a3 + 64))(a3, v44, 1);

        if (v45)
        {
          v43 = *(id *)(v42 + 8);
          *(float *)&v46 = v33;
          objc_msgSend(v43, "updateTexturesIfNecessary:textureManager:", &v56, v46);
          goto LABEL_81;
        }
      }
      v42 += 24;
      continue;
    }
  }
LABEL_87:
  v47 = v57;
  if (v57)
  {
    v48 = (unint64_t *)&v57->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v65;
  if (v65 == v64)
  {
    v51 = 4;
    v50 = v64;
LABEL_96:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  else if (v65)
  {
    v51 = 5;
    goto LABEL_96;
  }
  v52 = v59;
  if (v59)
  {
    v53 = (unint64_t *)&v59->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_19F2D8EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int64_t v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t *v71;
  int8x8_t v72;
  uint8x8_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  int8x8_t *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t i;
  uint64_t v115;
  int v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  __int128 *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  id v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  __n128 v155;
  uint64_t v156;
  id v157;
  id v158;
  id v159;
  char v160;
  id v161;
  char v162;
  id v163;
  id v164;
  id v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int16 v182;
  __int16 v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  void *v187;
  void *__src;
  uint64_t v189;
  uint64_t v190;
  id *v191;
  uint64_t v192;
  id v194;
  unsigned __int8 *v195;
  uint64_t v196;
  __n128 v197;
  _QWORD v198[3];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  char v202;
  float v203;
  float v204;
  char v205;
  float v206;
  double v207;
  uint64_t (**v208)();
  id v209;
  char v210;
  unsigned int v211;
  _QWORD v212[2];
  char v213;
  __n128 v214;
  unint64_t v215;
  unint64_t v216;
  __int16 v217;
  uint64_t v218;
  float v219[17];
  char v220;
  char **v221;
  char *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _QWORD v225[3];
  _QWORD *v226;
  _QWORD v227[3];
  _QWORD *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  _QWORD v233[3];
  _QWORD *v234;
  _QWORD v235[3];
  _QWORD *v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v11 = *(id *)(a3 + 104);
  v202 = 0;
  v201 = 0u;
  v200 = 0u;
  v208 = &off_1E42B4B50;
  v209 = 0;
  v210 = a6;
  objc_msgSend(v11, "size");
  v212[0] = v12;
  v212[1] = v13;
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
  v203 = v14;
  v213 = objc_msgSend(v11, "multiSample");
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD **)(v15 + 8);
  v17 = v16[3];
  v18 = v16[4];
  if (v18 == v17)
  {
    v30 = 0;
    v198[0] = 0;
  }
  else
  {
    v19 = 0;
    while (1)
    {
      v20 = *(unsigned __int8 **)(v17 + 8 * v19);
      if (*v20 == *(unsigned __int8 *)(a5 + 40))
      {
        v21 = *((_QWORD *)v20 + 1);
        v22 = v16[15];
        if (v21 < (v16[16] - v22) >> 3)
          break;
      }
      if (++v19 >= (unint64_t)((v18 - v17) >> 3))
      {
        v23 = 0;
        goto LABEL_9;
      }
    }
    v23 = *(_QWORD *)(v22 + 8 * v21);
    if (v23)
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * *(unsigned __int8 *)(a5 + 41));
LABEL_9:
    v198[0] = v23;
    v24 = v18 - v17;
    if (v18 == v17)
    {
LABEL_16:
      v30 = 0;
    }
    else
    {
      v25 = 0;
      v26 = v24 >> 3;
      while (1)
      {
        v27 = *(unsigned __int8 **)(v17 + 8 * v25);
        if (*v27 == *(unsigned __int8 *)(a5 + 42))
        {
          v28 = *((_QWORD *)v27 + 1);
          v29 = v16[15];
          if (v28 < (v16[16] - v29) >> 3)
            break;
        }
        if (++v25 >= v26)
          goto LABEL_16;
      }
      v30 = *(_QWORD *)(v29 + 8 * v28);
      if (v30)
        v30 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * *(unsigned __int8 *)(a5 + 43));
    }
  }
  v198[1] = v30;
  v31 = *(_QWORD **)(v15 + 8);
  v32 = v31[3];
  v33 = v31[4];
  v34 = v33 - v32;
  if (v33 == v32)
  {
LABEL_25:
    v40 = 0;
  }
  else
  {
    v35 = 0;
    v36 = v34 >> 3;
    while (1)
    {
      v37 = *(unsigned __int8 **)(v32 + 8 * v35);
      if (*v37 == *(unsigned __int8 *)(a5 + 44))
      {
        v38 = *((_QWORD *)v37 + 1);
        v39 = v31[15];
        if (v38 < (v31[16] - v39) >> 3)
          break;
      }
      if (++v35 >= v36)
        goto LABEL_25;
    }
    v40 = *(_QWORD *)(v39 + 8 * v38);
    if (v40)
      v40 = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8 * *(unsigned __int8 *)(a5 + 45));
  }
  v198[2] = v40;
  if (!*(_BYTE *)(a5 + 48))
    goto LABEL_35;
  v41 = *(_QWORD **)(v15 + 8);
  v42 = v41[3];
  v43 = v41[4];
  v44 = v43 - v42;
  if (v43 == v42)
    goto LABEL_35;
  v45 = 0;
  v46 = v44 >> 3;
  while (1)
  {
    v47 = *(unsigned __int8 **)(v42 + 8 * v45);
    if (*v47 == *(unsigned __int8 *)(a5 + 46))
    {
      v48 = *((_QWORD *)v47 + 1);
      v49 = v41[15];
      if (v48 < (v41[16] - v49) >> 3)
        break;
    }
    if (++v45 >= v46)
      goto LABEL_35;
  }
  v50 = *(_QWORD *)(v49 + 8 * v48);
  if (v50)
  {
    v190 = *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * *(unsigned __int8 *)(a5 + 47));
    if (!*(_BYTE *)(a5 + 51))
      goto LABEL_43;
  }
  else
  {
LABEL_35:
    v190 = 0;
    if (!*(_BYTE *)(a5 + 51))
      goto LABEL_43;
  }
  v51 = *(_QWORD **)(v15 + 8);
  v52 = v51[3];
  v53 = v51[4];
  v54 = v53 - v52;
  if (v53 != v52)
  {
    v55 = 0;
    v56 = v54 >> 3;
    while (1)
    {
      v57 = *(unsigned __int8 **)(v52 + 8 * v55);
      if (*v57 == *(unsigned __int8 *)(a5 + 49))
      {
        v58 = *((_QWORD *)v57 + 1);
        v59 = v51[15];
        if (v58 < (v51[16] - v59) >> 3)
          break;
      }
      if (++v55 >= v56)
        goto LABEL_43;
    }
    v60 = *(_QWORD *)(v59 + 8 * v58);
    if (v60)
    {
      v189 = *(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * *(unsigned __int8 *)(a5 + 50));
      goto LABEL_44;
    }
  }
LABEL_43:
  v189 = 0;
LABEL_44:
  v223[0] = &off_1E42CF938;
  v224 = v223;
  v236 = v235;
  v233[0] = &off_1E42D2830;
  v234 = v233;
  v235[0] = &off_1E42D2830;
  v62 = *(void **)(a5 + 16);
  v61 = *(void **)(a5 + 24);
  v194 = v11;
  v195 = (unsigned __int8 *)a5;
  v187 = v61;
  __src = v62;
  v63 = (_BYTE *)v61 - (_BYTE *)v62;
  if (v61 == v62)
    goto LABEL_52;
  if ((_BYTE *)v61 - (_BYTE *)v62 < 0)
    abort();
  v64 = operator new((_BYTE *)v61 - (_BYTE *)v62);
  memcpy(v64, __src, v63);
  v65 = operator new(v63);
  memcpy(v65, v64, v63);
  v66 = operator new(0x20uLL);
  *v66 = &off_1E42D03E8;
  v66[1] = 0;
  v66[2] = 0;
  v66[3] = 0;
  v67 = (char *)operator new(v63);
  v66[1] = v67;
  v68 = &v67[8 * (v63 >> 3)];
  v66[3] = v68;
  memcpy(v67, v65, v63);
  v66[2] = v68;
  *((_QWORD *)&v230 + 1) = v66;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v229, v233);
  v69 = (__int128 *)*((_QWORD *)&v230 + 1);
  if (*((__int128 **)&v230 + 1) == &v229)
  {
    v70 = 4;
    v69 = &v229;
    goto LABEL_50;
  }
  if (*((_QWORD *)&v230 + 1))
  {
    v70 = 5;
LABEL_50:
    (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
  }
  operator delete(v65);
  operator delete(v64);
LABEL_52:
  v71 = *(uint64_t **)(a2 + 8);
  v72 = (int8x8_t)v71[1];
  if (v72)
  {
    v73 = (uint8x8_t)vcnt_s8(v72);
    v73.i16[0] = vaddlv_u8(v73);
    v74 = (unsigned __int8 *)a5;
    if (v73.u32[0] > 1uLL)
    {
      v75 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v72 <= 0x1AF456233693CD46uLL)
        v75 = 0x1AF456233693CD46uLL % *(_QWORD *)&v72;
    }
    else
    {
      v75 = (*(_QWORD *)&v72 - 1) & 0x1AF456233693CD46;
    }
    v76 = *v71;
    v77 = *(_QWORD **)(v76 + 8 * v75);
    if (!v77)
      goto LABEL_76;
    v78 = (_QWORD *)*v77;
    if (!v78)
      goto LABEL_76;
    if (v73.u32[0] < 2uLL)
    {
      while (1)
      {
        v80 = v78[1];
        if (v80 == 0x1AF456233693CD46)
        {
          if (v78[2] == 0x1AF456233693CD46)
            goto LABEL_74;
        }
        else if ((v80 & (*(_QWORD *)&v72 - 1)) != v75)
        {
          goto LABEL_76;
        }
        v78 = (_QWORD *)*v78;
        if (!v78)
          goto LABEL_76;
      }
    }
    while (1)
    {
      v79 = v78[1];
      if (v79 == 0x1AF456233693CD46)
      {
        if (v78[2] == 0x1AF456233693CD46)
        {
LABEL_74:
          v81 = v78[5];
          if (*(_QWORD *)(v81 + 8) == 0x1AF456233693CD46)
          {
            v184 = *(_QWORD *)(v81 + 32);
LABEL_77:
            if (v73.u32[0] > 1uLL)
            {
              v82 = 0xA60DDA5A69582425;
              if (*(_QWORD *)&v72 <= 0xA60DDA5A69582425)
                v82 = 0xA60DDA5A69582425 % *(_QWORD *)&v72;
            }
            else
            {
              v82 = (*(_QWORD *)&v72 - 1) & 0xA60DDA5A69582425;
            }
            v83 = *(_QWORD **)(v76 + 8 * v82);
            if (!v83)
              goto LABEL_99;
            v84 = (_QWORD *)*v83;
            if (!v84)
              goto LABEL_99;
            if (v73.u32[0] < 2uLL)
            {
              while (1)
              {
                v86 = v84[1];
                if (v86 == 0xA60DDA5A69582425)
                {
                  if (v84[2] == 0xA60DDA5A69582425)
                    goto LABEL_97;
                }
                else if ((v86 & (*(_QWORD *)&v72 - 1)) != v82)
                {
                  goto LABEL_99;
                }
                v84 = (_QWORD *)*v84;
                if (!v84)
                  goto LABEL_99;
              }
            }
            while (1)
            {
              v85 = v84[1];
              if (v85 == 0xA60DDA5A69582425)
              {
                if (v84[2] == 0xA60DDA5A69582425)
                {
LABEL_97:
                  v87 = v84[5];
                  if (*(_QWORD *)(v87 + 8) == 0xA60DDA5A69582425)
                  {
                    v191 = *(id **)(v87 + 32);
LABEL_100:
                    v88 = 0xE42D19AFCA302E68 % *(_QWORD *)&v72;
                    if (*(_QWORD *)&v72 > 0xE42D19AFCA302E68)
                      v88 = 0xE42D19AFCA302E68;
                    v89 = *(_QWORD *)&v72 - 1;
                    if (v73.u32[0] <= 1uLL)
                      v88 = (*(_QWORD *)&v72 - 1) & 0xE42D19AFCA302E68;
                    v90 = *(_QWORD **)(v76 + 8 * v88);
                    if (!v90)
                      goto LABEL_122;
                    v91 = (_QWORD *)*v90;
                    if (!v91)
                      goto LABEL_122;
                    if (v73.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v92 = v91[1];
                        if (v92 == 0xE42D19AFCA302E68)
                        {
                          if (v91[2] == 0xE42D19AFCA302E68)
                            goto LABEL_120;
                        }
                        else if ((v92 & v89) != v88)
                        {
                          goto LABEL_122;
                        }
                        v91 = (_QWORD *)*v91;
                        if (!v91)
                          goto LABEL_122;
                      }
                    }
                    while (1)
                    {
                      v93 = v91[1];
                      if (v93 == 0xE42D19AFCA302E68)
                      {
                        if (v91[2] == 0xE42D19AFCA302E68)
                        {
LABEL_120:
                          v94 = (int8x8_t *)v91[5];
                          if (*(_QWORD *)&v94[1] == 0xE42D19AFCA302E68)
                          {
                            v72 = v94[4];
                            goto LABEL_123;
                          }
LABEL_122:
                          v72 = 0;
                          goto LABEL_123;
                        }
                      }
                      else
                      {
                        if (v93 >= *(_QWORD *)&v72)
                          v93 %= *(_QWORD *)&v72;
                        if (v93 != v88)
                          goto LABEL_122;
                      }
                      v91 = (_QWORD *)*v91;
                      if (!v91)
                        goto LABEL_122;
                    }
                  }
LABEL_99:
                  v191 = 0;
                  goto LABEL_100;
                }
              }
              else
              {
                if (v85 >= *(_QWORD *)&v72)
                  v85 %= *(_QWORD *)&v72;
                if (v85 != v82)
                  goto LABEL_99;
              }
              v84 = (_QWORD *)*v84;
              if (!v84)
                goto LABEL_99;
            }
          }
LABEL_76:
          v184 = 0;
          goto LABEL_77;
        }
      }
      else
      {
        if (v79 >= *(_QWORD *)&v72)
          v79 %= *(_QWORD *)&v72;
        if (v79 != v75)
          goto LABEL_76;
      }
      v78 = (_QWORD *)*v78;
      if (!v78)
        goto LABEL_76;
    }
  }
  v191 = 0;
  v184 = 0;
  v74 = (unsigned __int8 *)a5;
LABEL_123:
  v192 = (uint64_t)v72;
  v95 = **(_QWORD **)&v72;
  v96 = *(_QWORD *)(v95 + 520);
  v97 = *(std::__shared_weak_count **)(v95 + 528);
  if (!v97)
    goto LABEL_128;
  p_shared_owners = (unint64_t *)&v97->__shared_owners_;
  do
    v99 = __ldxr(p_shared_owners);
  while (__stxr(v99 + 1, p_shared_owners));
  do
    v100 = __ldaxr(p_shared_owners);
  while (__stlxr(v100 - 1, p_shared_owners));
  if (!v100)
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
    if (!v96)
      goto LABEL_232;
  }
  else
  {
LABEL_128:
    if (!v96)
      goto LABEL_232;
  }
  v101 = *(_QWORD *)(*(_QWORD *)v192 + 520);
  v102 = *(std::__shared_weak_count **)(*(_QWORD *)v192 + 528);
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    v105 = *(_DWORD *)(v101 + 256);
    do
      v106 = __ldaxr(v103);
    while (__stlxr(v106 - 1, v103));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  else
  {
    v105 = *(_DWORD *)(v101 + 256);
  }
  v107 = *(_QWORD *)(a4 + 952);
  v108 = *(_QWORD *)(v107 + 8);
  **(_DWORD **)(v107 + 72) = v105;
  if (*(_QWORD *)(v107 + 64) > v108)
    v108 = *(_QWORD *)(v107 + 64);
  *(_QWORD *)(v107 + 56) = 0;
  *(_QWORD *)(v107 + 64) = v108;
  v109 = *(_QWORD **)a1;
  v185 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v185)
  {
    do
    {
      v110 = *v109;
      if (v224)
      {
        *(_QWORD *)&v229 = *v109;
        if (((*(uint64_t (**)(_QWORD *, __int128 *))(*v224 + 48))(v224, &v229) & 1) == 0)
          goto LABEL_144;
      }
      v199 = v110;
      v111 = *(_QWORD *)(v110 + 384);
      v112 = *(unsigned int *)(v111 + 744);
      if ((_DWORD)v112)
      {
        if (v112 < 0x201)
        {
          v113 = 0;
          i = 512;
        }
        else
        {
          v113 = 0;
          for (i = 512; i < v112; i *= 2)
            ++v113;
        }
        v115 = *(unsigned int *)(v111 + 744);
        if (i > v112)
        {
          do
          {
            --v113;
            v115 *= 2;
          }
          while (i > v115);
        }
      }
      else
      {
        v113 = 0;
      }
      v186 = v109;
      v116 = *(unsigned __int8 *)(v111 + 169);
      v117 = exp2((float)(ceilf(v203) - (float)(v113 + v116))) * (float)(v112 >> 7);
      v118 = fmaxf(*(float *)(v184 + 3080) + *(float *)(v184 + 3076), 1.0);
      v206 = v117;
      v204 = v118;
      v207 = *(double *)(v184 + 3768) / (*(double *)(v184 + 1368) * (*(double *)(v110 + 72) - *(double *)(v110 + 56)));
      v120 = *(_QWORD *)(v110 + 216);
      v119 = *(_QWORD *)(v110 + 224);
      if (v119)
      {
        v121 = (unint64_t *)(v119 + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      *(_QWORD *)&v200 = v120;
      *((_QWORD *)&v200 + 1) = v119;
      if (!v123)
        goto LABEL_163;
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
        v127 = *(_QWORD *)(v110 + 232);
        v126 = *(_QWORD *)(v110 + 240);
        if (!v126)
          goto LABEL_166;
      }
      else
      {
LABEL_163:
        v127 = *(_QWORD *)(v110 + 232);
        v126 = *(_QWORD *)(v110 + 240);
        if (!v126)
          goto LABEL_166;
      }
      v128 = (unint64_t *)(v126 + 8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
LABEL_166:
      v130 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
      *(_QWORD *)&v201 = v127;
      *((_QWORD *)&v201 + 1) = v126;
      if (v130)
      {
        v131 = (unint64_t *)&v130->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v133 = v200;
      if ((*(_BYTE *)(v200 + 16) & 2) == 0)
      {
        v134 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v134 != -1)
        {
          *(_QWORD *)v219 = &v222;
          v214.n128_u64[0] = (unint64_t)v219;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      v135 = *(__int128 **)(v133 + 72);
      v229 = *v135;
      v230 = v135[1];
      v231 = v135[2];
      v232 = v135[3];
      v211 = ggl::CullingGrid::intersectedCellsForView((float *)&v229, 0.0);
      v205 = v116;
      v136 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 48))(v111);
      v138 = *v136;
      v137 = v136[1];
      v196 = v137;
      if (*v136 != v137)
      {
        while (1)
        {
          v141 = v209;
          v142 = (*(uint64_t (**)(unsigned __int8 *, id))(*(_QWORD *)v74 + 40))(v74, v141);

          if (v142)
          {
            v143 = v200;
            v218 = 0;
            v214 = 0uLL;
            v144 = *(_QWORD *)(v200 + 8);
            if ((*(_BYTE *)(v200 + 16) & 2) == 0)
            {
              v145 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
              if (v145 != -1)
              {
                v222 = &v220;
                v221 = &v222;
                std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v221, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              }
            }
            if (v144)
              v146 = *(_QWORD *)(v143 + 72);
            else
              v146 = 0;
            v147 = v110;
            if (v218)
            {
              v148 = v215;
              v149 = v216;
              if (v216 != v215)
              {
                v150 = (_QWORD *)v214.n128_u64[1];
                v151 = v217;
                v152 = HIBYTE(v217);
                if (v214.n128_u64[0] && *(_BYTE *)(v214.n128_u64[1] + 17) != 2)
                  (*(void (**)(void))(*(_QWORD *)v214.n128_u64[0] + 64))();
                if (v151 && !v152)
                {
                  v153 = v150[7];
                  v154 = v150[8];
                  if (v154 == v153)
                    v153 = v150[10] - v150[9];
                  if (v148 < v153)
                    v153 = v148;
                  if (v154 <= v149)
                    v154 = v149;
                  if (v154 == v153)
                    v154 = v153 + v150[10] - v150[9];
                  v150[7] = v153;
                  v150[8] = v154;
                }
              }
            }
            v155.n128_u64[0] = 0;
            v155.n128_u64[1] = v143;
            v197 = v155;
            v214 = v155;
            v215 = 0;
            v216 = v144;
            v218 = v146;
            v217 = 0;
            v156 = v199 + 88;
            v157 = *(id *)(v138 + 8);
            v74 = v195;
            (*(void (**)(float *__return_ptr, unsigned __int8 *, __int128 *, uint64_t, uint64_t, id, _QWORD *, float))(*(_QWORD *)v195 + 48))(v219, v195, &v201, v146, v156, v157, v212, v203);

            v11 = v194;
            v110 = v147;
            v137 = v196;
            if (v146 && v144 && v197.n128_u64[0] && *(_BYTE *)(v197.n128_u64[1] + 17) != 2)
              (*(void (**)(__n128))(*(_QWORD *)v197.n128_u64[0] + 64))(v197);
            v211 = ggl::CullingGrid::intersectedCellsForView(v219, 0.0);
          }
          v158 = *(id *)(v138 + 8);
          if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, id, _QWORD))(*(_QWORD *)v74 + 56))(v74, v110, v158, v211) & 1) != 0)goto LABEL_178;
          v159 = *(id *)(v138 + 8);
          v160 = (*(uint64_t (**)(unsigned __int8 *, id, _QWORD))(*(_QWORD *)v74 + 64))(v74, v159, 0);

          if ((v160 & 1) == 0)
            goto LABEL_179;
          v161 = *(id *)(v138 + 8);
          v162 = (*(uint64_t (**)(unsigned __int8 *, id))(*(_QWORD *)v74 + 72))(v74, v161);

          v163 = *(id *)(v138 + 8);
          v164 = v209;
          v209 = v163;

          v165 = *v191;
          v166 = (uint64_t)v236;
          if (!v236)
            goto LABEL_214;
          if (v236 != v235)
            break;
          v228 = v227;
          (*(void (**)(_QWORD *, _QWORD *))(v235[0] + 24))(v235, v227);
LABEL_216:
          HIBYTE(v182) = v162;
          LOBYTE(v182) = 0;
          md::_layoutPolygonGroup<md::PolygonTileData>(v165, v192, a4, (uint64_t)v198, v190, v189, v74, (uint64_t)&v199, v182, v227);
          v167 = v228;
          if (v228 == v227)
          {
            v167 = v227;
            v168 = 4;
          }
          else
          {
            if (!v228)
              goto LABEL_221;
            v168 = 5;
          }
          (*(void (**)(void))(*v167 + 8 * v168))();
LABEL_221:

          if (v187 == __src)
            goto LABEL_179;
          v158 = *v191;
          v169 = (uint64_t)v234;
          if (!v234)
            goto LABEL_225;
          if (v234 != v233)
          {
            v169 = (*(uint64_t (**)(void))(*v234 + 16))();
LABEL_225:
            v226 = (_QWORD *)v169;
            goto LABEL_227;
          }
          v226 = v225;
          (*(void (**)(uint64_t, _QWORD *))(v233[0] + 24))((uint64_t)v233, v225);
LABEL_227:
          HIBYTE(v183) = v162;
          LOBYTE(v183) = 1;
          md::_layoutPolygonGroup<md::PolygonTileData>(v158, v192, a4, (uint64_t)v198, v190, v189, v74, (uint64_t)&v199, v183, v225);
          v139 = v226;
          if (v226 == v225)
          {
            v139 = v225;
            v140 = 4;
          }
          else
          {
            if (!v226)
              goto LABEL_178;
            v140 = 5;
          }
          (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_178:

LABEL_179:
          v138 += 24;
          if (v138 == v137)
            goto LABEL_143;
        }
        v166 = (*(uint64_t (**)(void))(*v236 + 16))();
LABEL_214:
        v228 = (_QWORD *)v166;
        goto LABEL_216;
      }
LABEL_143:
      v109 = v186;
LABEL_144:
      ++v109;
    }
    while (v109 != v185);
  }
LABEL_232:
  v170 = v234;
  if (v234 == v233)
  {
    v171 = 4;
    v170 = v233;
  }
  else
  {
    if (!v234)
      goto LABEL_237;
    v171 = 5;
  }
  (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_237:
  v172 = v236;
  if (v236 == v235)
  {
    v173 = 4;
    v172 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_242;
    v173 = 5;
  }
  (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_242:
  v174 = v224;
  if (v224 == v223)
  {
    v175 = 4;
    v174 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_247;
    v175 = 5;
  }
  (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_247:
  v208 = &off_1E42B4B50;

  if (v202)
    v202 = 0;
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
  if (*((_QWORD *)&v201 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }

}

void sub_19F2D9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t a70;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;

  operator delete(v71);
  operator delete(v72);
  operator delete(v70);
  v75 = *(_QWORD **)(v73 - 160);
  if (v75 == (_QWORD *)(v73 - 184))
  {
    v76 = 4;
    v75 = (_QWORD *)(v73 - 184);
  }
  else
  {
    if (!v75)
      goto LABEL_6;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_6:
  v77 = *(_QWORD **)(v73 - 128);
  if (v77 == (_QWORD *)(v73 - 152))
  {
    v78 = 4;
    v77 = (_QWORD *)(v73 - 152);
  }
  else
  {
    if (!v77)
      goto LABEL_11;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_11:
  v79 = (_QWORD *)a70;
  if ((char *)a70 == &a67)
  {
    v80 = 4;
    v79 = &a67;
  }
  else
  {
    if (!a70)
      goto LABEL_16;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_16:
  md::PolygonGroupLayoutInfo<md::PolygonTileData>::~PolygonGroupLayoutInfo((uint64_t)&a33);

  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::setCurrentLocationText(id *this, NSString *a2)
{
  return objc_msgSend(this[6], "setCurrentLocationText:", a2);
}

void sub_19F2DA1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::VenueRenderLayer::~VenueRenderLayer(md::VenueRenderLayer *this)
{
  void *v2;
  md::CVenueRenderResources *v3;
  md::PolygonRenderResources *v4;

  *(_QWORD *)this = &off_1E4292290;
  *((_QWORD *)this + 57) = &off_1E42B4C90;

  *((_QWORD *)this + 48) = off_1E42A5CF8;
  v2 = (void *)*((_QWORD *)this + 50);
  if (v2)
  {
    *((_QWORD *)this + 51) = v2;
    operator delete(v2);
  }
  v3 = (md::CVenueRenderResources *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
  {
    md::CVenueRenderResources::~CVenueRenderResources(v3);
    MEMORY[0x1A1AF4E00]();
  }
  v4 = (md::PolygonRenderResources *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v4)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v4);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  md::CVenueRenderResources *v3;
  md::PolygonRenderResources *v4;

  *(_QWORD *)this = &off_1E4292290;
  *((_QWORD *)this + 57) = &off_1E42B4C90;

  *((_QWORD *)this + 48) = off_1E42A5CF8;
  v2 = (void *)*((_QWORD *)this + 50);
  if (v2)
  {
    *((_QWORD *)this + 51) = v2;
    operator delete(v2);
  }
  v3 = (md::CVenueRenderResources *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
  {
    md::CVenueRenderResources::~CVenueRenderResources(v3);
    MEMORY[0x1A1AF4E00]();
  }
  v4 = (md::PolygonRenderResources *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v4)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v4);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledVectorRenderLayer(this);
}

void md::VenueDimmingOverlayRenderResources::~VenueDimmingOverlayRenderResources(md::VenueDimmingOverlayRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v2 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 36) = &off_1E42B8A10;
  v4 = *((_QWORD *)this + 37);
  if (v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, *((_QWORD *)this + 39));
    *((_QWORD *)this + 39) = 3735927469;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((_QWORD *)this + 9) = &off_1E42B8A10;
  v8 = *((_QWORD *)this + 10);
  if (v8)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, *((_QWORD *)this + 12));
    *((_QWORD *)this + 12) = 3735927469;
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v13)
    goto LABEL_25;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v16)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v16)
      goto LABEL_31;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_31:
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v19)
    goto LABEL_35;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v22)
      return;
  }
  else
  {
LABEL_35:
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v22)
      return;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A9AE0;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void md::VenueOpenToBelowRenderResources::~VenueOpenToBelowRenderResources(md::VenueOpenToBelowRenderResources *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  *((_QWORD *)this + 63) = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 64);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 66));
    *((_QWORD *)this + 66) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 65);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v6)
  {
    v7 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v6);
    MEMORY[0x1A1AF4E00](v7, 0x10A0C40D234DDC7);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_QWORD *)this + 33) = &off_1E42B8A10;
  v11 = *((_QWORD *)this + 34);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 36));
    *((_QWORD *)this + 36) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v15)
  {
    v16 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v15);
    MEMORY[0x1A1AF4E00](v16, 0x10A0C40D234DDC7);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *((_QWORD *)this + 3) = &off_1E42B8A10;
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, *((_QWORD *)this + 6));
    *((_QWORD *)this + 6) = 3735927469;
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v24)
  {
    v25 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v24);
    MEMORY[0x1A1AF4E00](v25, 0x10A0C40D234DDC7);
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A4DF8;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::VenueTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2DA988(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::VenueWallRenderResources::~VenueWallRenderResources(md::VenueWallRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;

  v2 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v2)
  {
    v3 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40D234DDC7);
  }
  *((_QWORD *)this + 156) = &off_1E42B8A10;
  v4 = *((_QWORD *)this + 157);
  if (v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, *((_QWORD *)this + 159));
    *((_QWORD *)this + 159) = 3735927469;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 158);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v8)
  {
    v9 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C40D234DDC7);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 154);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_QWORD *)this + 126) = &off_1E42B8A10;
  v13 = *((_QWORD *)this + 127);
  if (v13)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *((_QWORD *)this + 129));
    *((_QWORD *)this + 129) = 3735927469;
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 128);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v17)
  {
    v18 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v17);
    MEMORY[0x1A1AF4E00](v18, 0x10A0C40D234DDC7);
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 124);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *((_QWORD *)this + 96) = &off_1E42B8A10;
  v22 = *((_QWORD *)this + 97);
  if (v22)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *((_QWORD *)this + 99));
    *((_QWORD *)this + 99) = 3735927469;
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v26)
  {
    v27 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v26);
    MEMORY[0x1A1AF4E00](v27, 0x10A0C40D234DDC7);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v31)
  {
    v32 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v31);
    MEMORY[0x1A1AF4E00](v32, 0x10A0C40D234DDC7);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v36)
  {
    v37 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v36);
    MEMORY[0x1A1AF4E00](v37, 0x10A0C40D234DDC7);
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *((_QWORD *)this + 60) = &off_1E42B8A10;
  v41 = *((_QWORD *)this + 61);
  if (v41)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 16))(v41, *((_QWORD *)this + 63));
    *((_QWORD *)this + 63) = 3735927469;
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 62);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v45)
  {
    v46 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v45);
    MEMORY[0x1A1AF4E00](v46, 0x10A0C40D234DDC7);
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *((_QWORD *)this + 30) = &off_1E42B8A10;
  v50 = *((_QWORD *)this + 31);
  if (v50)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 16))(v50, *((_QWORD *)this + 33));
    *((_QWORD *)this + 33) = 3735927469;
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  *((_QWORD *)this + 3) = &off_1E42B8A10;
  v54 = *((_QWORD *)this + 4);
  if (v54)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 16))(v54, *((_QWORD *)this + 6));
    *((_QWORD *)this + 6) = 3735927469;
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v58)
  {
    v59 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v58);
    MEMORY[0x1A1AF4E00](v59, 0x10A0C40D234DDC7);
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,geo::StdAllocator<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 240);
}

unint64_t *ggl::FragmentedPool<ggl::CommonMesh::Pos4Mesh>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F2DBF9C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10CommonMesh8Pos4MeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6080;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D29E0;
}

unint64_t *ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F2DC464(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17BasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7550;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Debug::BasePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2908;
  a2[1] = v2;
  return result;
}

void sub_19F2DC614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2DC698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F2DCB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F2DCC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F2DCD6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2DD0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F2DD12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F2DD18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F2DD230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F2DE2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  void *v46;
  void *v47;

  _Unwind_Resume(a1);
}

void sub_19F2DE630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F2DE6CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F2DE958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void sub_19F2DEAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2DF1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
  void *v10;
  id *v11;
  id *v12;
  id *v13;
  id *v14;
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v17 - 112));
  _Unwind_Resume(a1);
}

void md::MapEngine::updateDaVinciPOILabelsAvailable(md::MapEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)this + 112);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  if (v3 != v4)
  {
    while (*(_WORD *)v3 != 24)
    {
      v3 += 16;
      if (v3 == v4)
        goto LABEL_8;
    }
  }
  if (v3 == v4 || (v5 = *(_QWORD *)(v3 + 8)) == 0)
  {
LABEL_8:
    v6 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 24))(&v14, *(_QWORD *)(v5 + 8), 40);
    v6 = (_BYTE)v14 != 0;
  }
  v7 = *((_QWORD *)this + 141);
  LOBYTE(v14) = 28;
  md::MapEngineSettings::set(v7, &v14, (_QWORD *)v6);
  v8 = *((_QWORD *)this + 112);
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *(_QWORD *)(v8 + 64);
  if (v9 != v10)
  {
    while (*(_WORD *)v9 != 74)
    {
      v9 += 16;
      if (v9 == v10)
        goto LABEL_18;
    }
  }
  if (v9 == v10 || (v11 = *(_QWORD *)(v9 + 8)) == 0)
  {
LABEL_18:
    v12 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 24))(&v14, *(_QWORD *)(v11 + 8), 47);
    if ((_BYTE)v14)
      v12 = (_QWORD *)v6;
    else
      v12 = 0;
  }
  v13 = *((_QWORD *)this + 141);
  LOBYTE(v14) = 39;
  md::MapEngineSettings::set(v13, &v14, v12);
}

void md::MapEngineSettings::set(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  char *v6;
  unsigned __int8 *v7;
  char *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  float v34;
  float v35;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _Unwind_Exception *v49;
  _Unwind_Exception *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;

  v6 = *(char **)a1;
  v7 = *(unsigned __int8 **)(a1 + 8);
  v8 = v6;
  if (v6 != (char *)v7)
  {
    v8 = v6;
    while (*a2 != *v8)
    {
      v8 += 16;
      if (v8 == (char *)v7)
        goto LABEL_8;
    }
  }
  if (v8 != (char *)v7 && *((_QWORD **)v8 + 1) == a3)
    return;
LABEL_8:
  v9 = *a2;
  if (v6 != (char *)v7)
  {
    while (v9 != *v6)
    {
      v6 += 16;
      if (v6 == (char *)v7)
        goto LABEL_13;
    }
  }
  if (v6 == (char *)v7)
  {
LABEL_13:
    LOBYTE(v51) = *a2;
    v52 = 0;
    v6 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(a1, (unsigned __int8 *)&v51);
    v9 = *a2;
  }
  *((_QWORD *)v6 + 1) = a3;
  v11 = (uint64_t **)(a1 + 32);
  v10 = *(uint64_t **)(a1 + 32);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v10;
        v13 = *((unsigned __int8 *)v10 + 25);
        if (v9 >= v13)
          break;
        v10 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_21;
      }
      if (v13 >= v9)
        break;
      v10 = v12[1];
      if (!v10)
      {
        v11 = v12 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(a1 + 32);
LABEL_21:
    v14 = operator new(0x20uLL);
    v14[25] = v9;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v12;
    *v11 = (uint64_t *)v14;
    v15 = **(_QWORD **)(a1 + 24);
    if (v15)
    {
      *(_QWORD *)(a1 + 24) = v15;
      v16 = *v11;
    }
    else
    {
      v16 = (uint64_t *)v14;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v16);
    ++*(_QWORD *)(a1 + 40);
    v9 = *a2;
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (!v17)
    goto LABEL_108;
  v18 = (uint64_t *)(a1 + 56);
  v19 = v9;
  v20 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v20.i16[0] = vaddlv_u8(v20);
  v21 = v20.u32[0];
  if (v20.u32[0] > 1uLL)
  {
    v22 = v9;
    if (v17 <= v9)
      v22 = v9 % v17;
  }
  else
  {
    v22 = ((_DWORD)v17 - 1) & v9;
  }
  v23 = *(uint64_t ****)(*v18 + 8 * v22);
  if (!v23)
    goto LABEL_108;
  v24 = *v23;
  if (!*v23)
    goto LABEL_108;
  v25 = v17 - 1;
  if (v20.u32[0] < 2uLL)
  {
    while (1)
    {
      v26 = v24[1];
      if (v26 == (uint64_t *)v9)
      {
        if (*((unsigned __int8 *)v24 + 16) == v9)
          goto LABEL_46;
      }
      else if (((unint64_t)v26 & v25) != v22)
      {
        goto LABEL_108;
      }
      v24 = (uint64_t **)*v24;
      if (!v24)
        goto LABEL_108;
    }
  }
  while (1)
  {
    v27 = (unint64_t)v24[1];
    if (v27 == v9)
      break;
    if (v27 >= v17)
      v27 %= v17;
    if (v27 != v22)
      goto LABEL_108;
LABEL_40:
    v24 = (uint64_t **)*v24;
    if (!v24)
      goto LABEL_108;
  }
  if (*((unsigned __int8 *)v24 + 16) != v9)
    goto LABEL_40;
LABEL_46:
  if (v20.u32[0] > 1uLL)
  {
    v28 = v9;
    if (v17 <= v9)
      v28 = v9 % v17;
  }
  else
  {
    v28 = ((_DWORD)v17 - 1) & v9;
  }
  v29 = *(void ***)(*v18 + 8 * v28);
  if (v29)
  {
    v30 = *v29;
    if (*v29)
    {
      if (v20.u32[0] < 2uLL)
      {
        while (1)
        {
          v31 = v30[1];
          if (v31 == v19)
          {
            if (*((unsigned __int8 *)v30 + 16) == (_DWORD)v19)
              goto LABEL_106;
          }
          else if ((v31 & v25) != v28)
          {
            goto LABEL_65;
          }
          v30 = (_QWORD *)*v30;
          if (!v30)
            goto LABEL_65;
        }
      }
      do
      {
        v32 = v30[1];
        if (v32 == v19)
        {
          if (*((unsigned __int8 *)v30 + 16) == (_DWORD)v19)
            goto LABEL_106;
        }
        else
        {
          if (v32 >= v17)
            v32 %= v17;
          if (v32 != v28)
            break;
        }
        v30 = (_QWORD *)*v30;
      }
      while (v30);
    }
  }
LABEL_65:
  v33 = (_QWORD *)(a1 + 72);
  v30 = operator new(0x38uLL);
  v51 = v30;
  v52 = a1 + 72;
  *v30 = 0;
  v30[1] = v19;
  *((_BYTE *)v30 + 16) = *a2;
  v30[6] = 0;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 80) + 1);
  v53 = 1;
  v35 = *(float *)(a1 + 88);
  if ((float)(v35 * (float)v17) >= v34)
  {
    v19 = v28;
  }
  else
  {
    v37 = v17 < 3 || v21 > 1;
    v38 = v37 | (2 * v17);
    v39 = vcvtps_u32_f32(v34 / v35);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v17 = *(_QWORD *)(a1 + 64);
    }
    if (prime > v17)
      goto LABEL_81;
    if (prime < v17)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 80) / *(float *)(a1 + 88));
      if (v17 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < v17)
LABEL_81:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 56, prime);
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v17 <= v19)
        v19 %= v17;
    }
    else
    {
      v19 = ((_DWORD)v17 - 1) & v19;
    }
  }
  v44 = *v18;
  v45 = *(_QWORD **)(*v18 + 8 * v19);
  if (v45)
  {
    *v30 = *v45;
    goto LABEL_104;
  }
  *v30 = *v33;
  *v33 = v30;
  *(_QWORD *)(v44 + 8 * v19) = v33;
  if (*v30)
  {
    v46 = *(_QWORD *)(*v30 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v46 >= v17)
        v46 %= v17;
    }
    else
    {
      v46 &= v17 - 1;
    }
    v45 = (_QWORD *)(*v18 + 8 * v46);
LABEL_104:
    *v45 = v30;
  }
  ++*(_QWORD *)(a1 + 80);
LABEL_106:
  v51 = a3;
  v47 = v30[6];
  if (!v47)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    v50 = v49;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&v51);
    _Unwind_Resume(v50);
  }
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v47 + 48))(v47, &v51);
LABEL_108:
  v48 = **(_QWORD **)(a1 + 48);
  if (v48)
  {
    LOBYTE(v51) = 5;
    md::MapEngine::setNeedsTick(v48, &v51);
  }
}

void sub_19F2DFB8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2DFDB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2DFE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::World::setEnableGlobe(uint64_t this, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = this;
  if (this != a2)
  {
    v3 = this;
    while (*(_WORD *)v3 != 44)
    {
      v3 += 16;
      if (v3 == a2)
        goto LABEL_9;
    }
  }
  if (v3 != a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      *(_BYTE *)(v4 + 776) = a3;
  }
LABEL_9:
  if (this != a2)
  {
    v5 = this;
    while (*(_WORD *)v5 != 45)
    {
      v5 += 16;
      if (v5 == a2)
        goto LABEL_17;
    }
    if (v5 != a2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        *(_BYTE *)(v6 + 776) = a3;
    }
LABEL_17:
    if (this != a2)
    {
      v7 = this;
      while (*(_WORD *)v7 != 46)
      {
        v7 += 16;
        if (v7 == a2)
          goto LABEL_31;
      }
      if (v7 != a2)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          *(_BYTE *)(v8 + 776) = a3;
          v9 = this;
          while (*(_WORD *)v9 != 48)
          {
            v9 += 16;
            if (v9 == a2)
              goto LABEL_31;
          }
          if (v9 != a2)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
              *(_BYTE *)(v10 + 776) = a3;
          }
        }
      }
LABEL_31:
      if (this != a2)
      {
        v11 = this;
        while (*(_WORD *)v11 != 47)
        {
          v11 += 16;
          if (v11 == a2)
            goto LABEL_39;
        }
        if (v11 != a2)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
            *(_BYTE *)(v12 + 776) = a3;
        }
LABEL_39:
        if (this != a2)
        {
          v13 = this;
          while (*(_WORD *)v13 != 49)
          {
            v13 += 16;
            if (v13 == a2)
              goto LABEL_49;
          }
          if (v13 != a2)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
              *(_BYTE *)(v14 + 776) = a3;
          }
LABEL_49:
          while (this != a2)
          {
            if (*(_WORD *)this == 52)
            {
              if (this != a2)
              {
                v15 = *(_QWORD *)(this + 8);
                if (v15)
                  *(_BYTE *)(v15 + 784) = a3;
              }
              return this;
            }
            this += 16;
          }
        }
      }
    }
  }
  return this;
}

void sub_19F2E02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19F2E038C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2E0454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2E0644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void sub_19F2E06F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F2E0800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void sub_19F2E08AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F2E0930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F2E0A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::EntityDebugHighlightLogic::runBeforeLayout(float32x2_t *a1, uint64_t a2, _QWORD *a3, md::DebugDrawContext *this)
{
  _QWORD *v4;
  double v5;
  double v6;
  double v7;
  md::DebugDrawContext *v8;
  void *v11;
  float32x2_t *v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float32x2_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  float64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  double v37;
  long double v38;
  long double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  __double2 v44;
  double v45;
  __double2 v46;
  long double v47;
  long double v48;
  uint64_t v49;
  float v50;
  long double v51;
  long double v52;
  long double v53;
  double v54;
  double v55;
  __double2 v56;
  __double2 v57;
  long double v58;
  long double v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  _QWORD *v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  char v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  double v81;
  char *v82;
  __int128 v83;
  _QWORD *v84;
  int8x8_t v85;
  uint8x8_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  int v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  float32x2_t v135;
  int v136;
  int v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  __n128 v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  __int128 v153;
  float32x2_t v154;
  md::DebugDrawContext *v155;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  float v161;
  double v162;
  float v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _QWORD v171[2];
  long double v172;
  double v173;
  double v174;
  double v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  _BYTE v179[48];
  _BYTE v180[24];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  uint64_t v192;
  _QWORD v193[3];
  _QWORD *v194;
  uint64_t v195;

  v8 = this;
  v195 = *MEMORY[0x1E0C80C00];
  md::DebugDrawContext::clearDebugDrawContext(this);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = a1;
  a1[35].i8[1] = objc_msgSend(v11, "daVinciEntityDebugHighlighting");

  if (!a1[35].i8[1])
  {
    if (a1[34].i8[0])
      a1[34].i8[0] = 0;
    if (a1[18].i8[0])
      a1[18].i8[0] = 0;
    return;
  }
  if (a1[18].i8[0])
  {
    v155 = v8;
    v157 = (uint64_t *)a3[2];
    v158 = *a3;
    v13 = vcvtq_f64_f32(a1[17]);
    v14 = *(_QWORD *)(*a3 + 5584);
    if (!v14)
      v14 = *a3;
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 16);
    v16 = vsubq_f64(v13, vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(v15 + 368), vcvtq_f64_f32(*(float32x2_t *)(v15 + 488))))));
    v17 = vdivq_f64(vaddq_f64(v16, v16), *(float64x2_t *)(v15 + 368));
    gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint((uint64_t)v171, v15, (double *)(v14 + 8), v17.f64[0] + -1.0, 1.0 - v17.f64[1]);
    v18 = a1[15];
    v19 = *(uint64_t **)(*(_QWORD *)&v18 + 384);
    v20 = *(uint64_t **)(*(_QWORD *)&v18 + 392);
    if (v19 != v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      *(_QWORD *)&v169 = 0x3E5ACB157F7410BCLL;
      *(_QWORD *)&v168 = 0x3FEFE488A57B0C1FLL;
      *(_QWORD *)&v167 = 0x40E4EB29F7EAC4C2;
      *(_QWORD *)&v166 = 0x40E4D93586D13538;
      *(_QWORD *)&v164 = 0x415854A640000000;
      __asm { FMOV            V0.2S, #1.0 }
      v159 = _D0;
      while (1)
      {
        v4 = (_QWORD *)*v19;
        v30 = gdc::Registry::storage<md::components::SupportsDebugHighlight>(*v19);
        if (*(_QWORD *)(v30 + 88) != *(_QWORD *)(v30 + 80))
        {
          v31 = v4[1];
          if ((v31 & (v31 - 1)) != 0)
          {
            v33 = 0x64A448A5CD5D38DBLL;
            if (v31 <= 0x64A448A5CD5D38DBLL)
              v33 = 0x64A448A5CD5D38DBLL % v31;
            v32 = *(_QWORD **)(*v4 + 8 * v33);
            do
            {
              do
                v32 = (_QWORD *)*v32;
              while (v32[1] != 0x64A448A5CD5D38DBLL);
            }
            while (v32[2] != 0x64A448A5CD5D38DBLL);
          }
          else
          {
            v32 = *(_QWORD **)(*v4 + 8 * ((v31 - 1) & 0x64A448A5CD5D38DBLL));
            do
            {
              do
                v32 = (_QWORD *)*v32;
              while (v32[1] != 0x64A448A5CD5D38DBLL);
            }
            while (v32[2] != 0x64A448A5CD5D38DBLL);
          }
          v34 = *(_QWORD *)(v32[5] + 32);
          v35 = *(_BYTE *)(v34 + 1);
          v36 = (double)(1 << v35);
          v162 = (double)((1 << v35) + ~*(_DWORD *)(v34 + 4));
          __powidf2();
          *(double *)&v170 = v37 * 0.0000000249532021;
          v38 = *(double *)v171;
          v39 = *(double *)&v171[1];
          v40 = v172;
          v41 = sqrt(v38 * v38 + v39 * v39);
          v42 = atan2(v172, v41 * 0.996647189);
          v43 = atan2(v39, v38);
          v44 = __sincos_stret(v42);
          v45 = atan2(v40 + v44.__sinval * v44.__sinval * 42841.3115 * v44.__sinval, v41 - v44.__cosval * v44.__cosval * 42697.6727 * v44.__cosval);
          v46 = __sincos_stret(v45);
          v47 = tan(v45 * 0.5 + 0.785398163);
          v48 = log(v47);
          v49 = *(int *)(v34 + 8);
          v50 = (v43 * 0.159154943 + 0.5 - 1.0 / v36 * (double)v49) * v36;
          v163 = v50;
          v160 = 0.5 - 1.0 / v36 * v162;
          *(float *)&v48 = (v160 + v48 * 0.159154943) * v36;
          LODWORD(v162) = LODWORD(v48);
          *(float *)&v48 = v41 / v46.__cosval - 6378137.0 / sqrt(1.0 - v46.__sinval * v46.__sinval * 0.00669437999);
          *(float *)&v48 = *(double *)&v170 * *(float *)&v48;
          v161 = *(float *)&v48;
          v51 = v38 + v173 * 100.0;
          v52 = v39 + v174 * 100.0;
          v53 = v40 + v175 * 100.0;
          v54 = sqrt(v51 * v51 + v52 * v52);
          v55 = atan2(v53, v54 * 0.996647189);
          v5 = atan2(v52, v51);
          v56 = __sincos_stret(v55);
          v6 = atan2(v53 + v56.__sinval * v56.__sinval * 42841.3115 * v56.__sinval, v54 - v56.__cosval * v56.__cosval * 42697.6727 * v56.__cosval);
          v57 = __sincos_stret(v6);
          v7 = v54 / v57.__cosval - 6378137.0 / sqrt(1.0 - v57.__sinval * v57.__sinval * 0.00669437999);
          v58 = tan(v6 * 0.5 + 0.785398163);
          v59 = log(v58);
          v60 = (0.5 - 1.0 / v36 * (double)v49 + v5 * 0.159154943) * v36;
          *(float *)&v59 = (v160 + v59 * 0.159154943) * v36;
          v61 = v7;
          v62 = *(double *)&v170 * v61;
          v63 = v60 - v163;
          *(float *)&v59 = *(float *)&v59 - *(float *)&v162;
          v64 = v62 - v161;
          v65 = 1.0 / sqrtf((float)((float)(v63 * v63) + (float)(*(float *)&v59 * *(float *)&v59)) + (float)(v64 * v64));
          *(float *)v180 = v163;
          *(_DWORD *)&v180[4] = LODWORD(v162);
          *(float *)&v180[8] = v161;
          *(float *)&v180[12] = v65 * v63;
          *(float *)&v180[16] = v65 * *(float *)&v59;
          *(float *)&v180[20] = v65 * v64;
          v66 = *(double *)(v34 + 440) * 0.0000000249532021;
          *(float *)&v59 = *(double *)(v34 + 432) * 0.0000000249532021;
          *(_QWORD *)v179 = 0;
          *(_DWORD *)&v179[8] = LODWORD(v59);
          *(_QWORD *)&v179[12] = v159;
          *(float *)&v59 = v66;
          *(_DWORD *)&v179[20] = LODWORD(v59);
          LODWORD(v193[0]) = 0;
          LODWORD(v191) = 0;
          if (gm::Ray<float,3>::segmentIntersectsBox((float *)v180, (float *)v179, (float *)v193, (float *)&v191))
          {
            v5 = *(float *)v193;
            v176 = *(float64x2_t *)v180;
            v177.f64[0] = *(float64_t *)&v180[16];
            if (v22 < (unint64_t)v21)
            {
              *(double *)v22 = v5;
              v29 = v177.f64[0];
              *(float64x2_t *)(v22 + 8) = v176;
              *(float64_t *)(v22 + 24) = v29;
              *(_QWORD *)(v22 + 32) = v4;
              v22 += 40;
            }
            else
            {
              v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v24) >> 3) + 1;
              if (v67 > 0x666666666666666)
                goto LABEL_183;
              if (0x999999999999999ALL * ((v21 - v24) >> 3) > v67)
                v67 = 0x999999999999999ALL * ((v21 - v24) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((v21 - v24) >> 3) >= 0x333333333333333)
                v68 = 0x666666666666666;
              else
                v68 = v67;
              if (v68)
              {
                if (v68 > 0x666666666666666)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v69 = (char *)operator new(40 * v68);
              }
              else
              {
                v69 = 0;
              }
              v70 = &v69[8 * ((uint64_t)(v22 - (_QWORD)v24) >> 3)];
              *(double *)v70 = v5;
              *(_OWORD *)(v70 + 8) = *(_OWORD *)v180;
              *((_QWORD *)v70 + 3) = *(_QWORD *)&v180[16];
              *((_QWORD *)v70 + 4) = v4;
              if ((char *)v22 == v24)
              {
                v23 = &v69[8 * ((uint64_t)(v22 - (_QWORD)v24) >> 3)];
              }
              else
              {
                v71 = &v69[8 * ((uint64_t)(v22 - (_QWORD)v24) >> 3)];
                do
                {
                  v23 = v71 - 40;
                  v72 = *(_OWORD *)(v22 - 40);
                  v73 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v71 - 1) = *(_QWORD *)(v22 - 8);
                  *(_OWORD *)(v71 - 24) = v73;
                  *(_OWORD *)(v71 - 40) = v72;
                  v22 -= 40;
                  v71 -= 40;
                }
                while ((char *)v22 != v24);
              }
              v21 = &v69[40 * v68];
              v22 = (unint64_t)(v70 + 40);
              if (v24)
                operator delete(v24);
              v24 = v23;
            }
          }
        }
        if (++v19 == v20)
          goto LABEL_53;
      }
    }
    v22 = 0;
    v23 = 0;
LABEL_53:
    v79 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v23) >> 3));
    if ((char *)v22 == v23)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,false>((uint64_t)v23, v22, v80, 1);
    if ((char *)v22 == v23)
    {
LABEL_147:
      v135 = 0;
      v136 = 0;
      v12 = a1;
      if (!v23)
        goto LABEL_149;
      goto LABEL_148;
    }
    v81 = 0.0;
    v82 = v23;
    while (1)
    {
      v83 = *(_OWORD *)(v82 + 8);
      v84 = (_QWORD *)*((_QWORD *)v82 + 4);
      v192 = *((_QWORD *)v82 + 3);
      v191 = v83;
      v85 = (int8x8_t)v84[1];
      if (!*(_QWORD *)&v85)
        goto LABEL_82;
      v86 = (uint8x8_t)vcnt_s8(v85);
      v86.i16[0] = vaddlv_u8(v86);
      if (v86.u32[0] > 1uLL)
      {
        v87 = 0x64A448A5CD5D38DBLL;
        if (*(_QWORD *)&v85 <= 0x64A448A5CD5D38DBuLL)
          v87 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v85;
      }
      else
      {
        v87 = (*(_QWORD *)&v85 - 1) & 0x64A448A5CD5D38DBLL;
      }
      v88 = *(_QWORD **)(*v84 + 8 * v87);
      if (!v88)
        goto LABEL_82;
      v89 = (_QWORD *)*v88;
      if (!v89)
        goto LABEL_82;
      if (v86.u32[0] < 2uLL)
      {
        v90 = *(_QWORD *)&v85 - 1;
        while (1)
        {
          v91 = v89[1];
          if (v91 == 0x64A448A5CD5D38DBLL)
          {
            if (v89[2] == 0x64A448A5CD5D38DBLL)
              goto LABEL_80;
          }
          else if ((v91 & v90) != v87)
          {
            goto LABEL_82;
          }
          v89 = (_QWORD *)*v89;
          if (!v89)
            goto LABEL_82;
        }
      }
      while (1)
      {
        v92 = v89[1];
        if (v92 == 0x64A448A5CD5D38DBLL)
          break;
        if (v92 >= *(_QWORD *)&v85)
          v92 %= *(_QWORD *)&v85;
        if (v92 != v87)
          goto LABEL_82;
LABEL_74:
        v89 = (_QWORD *)*v89;
        if (!v89)
          goto LABEL_82;
      }
      if (v89[2] != 0x64A448A5CD5D38DBLL)
        goto LABEL_74;
LABEL_80:
      v93 = v89[5];
      if (*(_QWORD *)(v93 + 8) == 0x64A448A5CD5D38DBLL)
      {
        v94 = *(_QWORD *)(v93 + 32);
        goto LABEL_83;
      }
LABEL_82:
      v94 = 0;
LABEL_83:
      md::GeometryContext::transformConstantData((double *)&v189, v157, (unsigned __int8 *)v94, *(unsigned __int8 *)(v158 + 3776), *(double *)(v94 + 432), *(double *)(v94 + 440));
      v95 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v84);
      v96 = gdc::Registry::storage<md::components::SupportsDebugHighlight>((uint64_t)v84);
      v97 = (_QWORD *)v96;
      v165 = v94;
      *(_QWORD *)&v166 = v84;
      *(_QWORD *)&v167 = v82;
      v99 = v95[7];
      v98 = v95[8];
      *(_QWORD *)&v169 = v96 + 32;
      if (*(_QWORD *)(v96 + 64) - *(_QWORD *)(v96 + 56) >= (unint64_t)(v98 - v99))
        v100 = v95 + 4;
      else
        v100 = (_QWORD *)(v96 + 32);
      *(_QWORD *)&v168 = v100;
      if (v95 + 4 == v100 && v99 != v98)
      {
        LODWORD(v170) = 0;
        v106 = v95[10] + 36;
        while (1)
        {
          v110 = *(unsigned int *)(v99 + 4);
          v111 = v97[4];
          if (v110 >> 7 >= (v97[5] - v111) >> 3)
            goto LABEL_105;
          v112 = *(_QWORD *)(v111 + 8 * (v110 >> 7));
          if (!v112)
            goto LABEL_105;
          v113 = *(unsigned __int16 *)(v112 + 2 * (v110 & 0x7F));
          v115 = v97[7];
          v114 = v97[8];
          if (v113 >= (v114 - v115) >> 3)
            goto LABEL_105;
          v116 = v115 + 8 * v113;
          if (v116 == v114 || *(_DWORD *)(v116 + 4) != (_DWORD)v110)
            goto LABEL_105;
          v109 = *(_QWORD **)v99;
          *(_DWORD *)v179 = 0;
          LODWORD(v176.f64[0]) = 0;
          md::GeometryLogic::adjustedMeshBounds((uint64_t)v180, v106, v189);
          if (gm::Ray<float,3>::segmentIntersectsBox((float *)&v191, (float *)v180, (float *)v179, (float *)&v176))
          {
            if (!(_DWORD)v170)
            {
              v6 = *(double *)&v180[8];
              v5 = *(double *)v180;
              v81 = *(float *)v179;
              LODWORD(v170) = 1;
              goto LABEL_119;
            }
            if (v81 > *(float *)v179)
            {
              v6 = *(double *)&v180[8];
              v5 = *(double *)v180;
              LODWORD(v170) = 1;
              v81 = *(float *)v179;
LABEL_119:
              v7 = *(double *)&v180[16];
              goto LABEL_104;
            }
            LODWORD(v170) = 1;
          }
          v109 = v4;
LABEL_104:
          v4 = v109;
LABEL_105:
          v99 += 8;
          v106 += 112;
          if (v99 == v98)
            goto LABEL_92;
        }
      }
      LODWORD(v170) = 0;
LABEL_92:
      if ((_QWORD)v169 != (_QWORD)v168)
      {
        v102 = v170;
        goto LABEL_94;
      }
      v108 = v97[7];
      v107 = v97[8];
      v102 = v170;
      if (v108 != v107)
        break;
LABEL_94:
      if (v102)
      {
        v138 = *(double *)(v165 + 80);
        v139 = *(double *)(v165 + 88);
        v140 = *(double *)(v165 + 96);
        v141 = *(double *)(v165 + 104);
        v142 = *(double *)(v165 + 112);
        v143 = *(double *)(v165 + 120);
        v182 = 0u;
        *(_QWORD *)&v184 = 0;
        *(_OWORD *)&v180[8] = 0u;
        v181 = 0u;
        v183 = 0u;
        *(_QWORD *)&v185 = 0;
        v188 = 0x3FF0000000000000;
        *(double *)v180 = v141 - v138;
        *(double *)&v182 = v142 - v139;
        *((double *)&v184 + 1) = v143 - v140;
        *((double *)&v185 + 1) = v138;
        v186 = v139;
        v187 = v140;
        v176 = vcvtq_f64_f32(*(float32x2_t *)&v5);
        v177 = vcvtq_f64_f32(*(float32x2_t *)&v6);
        v178 = vcvtq_f64_f32(*(float32x2_t *)&v7);
        *(int64x2_t *)v179 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        *(_OWORD *)&v179[16] = xmmword_19FFB2E00;
        *(int64x2_t *)&v179[32] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v193[0] = &off_1E42D8A68;
        v193[1] = v179;
        v193[2] = v180;
        v194 = v193;
        v144.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)&v176, (uint64_t)v193);
        v145 = v194;
        if (v194 == v193)
        {
          v146 = 4;
          v145 = v193;
          v12 = a1;
          v135 = (float32x2_t)v166;
        }
        else
        {
          v12 = a1;
          v135 = (float32x2_t)v166;
          if (!v194)
          {
LABEL_171:
            *(_QWORD *)&v149 = *(_QWORD *)(v165 + 72);
            v169 = *(_OWORD *)&v179[8];
            v170 = *(_OWORD *)&v179[24];
            v5 = *(double *)&v179[40];
            v164 = *(_OWORD *)(v165 + 24);
            v166 = *(_OWORD *)(v165 + 40);
            v167 = *(_OWORD *)(v165 + 56);
            *((_QWORD *)&v149 + 1) = *(_QWORD *)v179;
            v168 = v149;
            v150 = v190;
            if (v190)
            {
              p_shared_owners = (unint64_t *)&v190->__shared_owners_;
              do
                v152 = __ldaxr(p_shared_owners);
              while (__stlxr(v152 - 1, p_shared_owners));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            v136 = 1;
            if (!v23)
            {
LABEL_149:
              v137 = v12[34].u8[0];
              if (v137 == v136)
              {
                v8 = v155;
                if (v12[34].i8[0])
                {
                  LOBYTE(v137) = 0;
                  v12[19] = v135;
                  v12[20] = (float32x2_t)v4;
                  *(_OWORD *)v12[25].f32 = v167;
                  *(_OWORD *)v12[21].f32 = v164;
                  *(_OWORD *)v12[23].f32 = v166;
                  *(_OWORD *)v12[27].f32 = v168;
                  *(_OWORD *)v12[29].f32 = v169;
                  *(_OWORD *)v12[31].f32 = v170;
                  *(double *)&v12[33] = v5;
                  if (!v12[18].i8[0])
                    goto LABEL_157;
                  goto LABEL_156;
                }
              }
              else
              {
                v8 = v155;
                if (!v12[34].i8[0])
                {
                  v12[19] = v135;
                  v12[20] = (float32x2_t)v4;
                  *(_OWORD *)v12[21].f32 = v164;
                  *(_OWORD *)v12[23].f32 = v166;
                  *(_OWORD *)v12[25].f32 = v167;
                  *(_OWORD *)v12[27].f32 = v168;
                  *(_OWORD *)v12[29].f32 = v169;
                  *(_OWORD *)v12[31].f32 = v170;
                  *(double *)&v12[33] = v5;
                  v12[34].i8[0] = 1;
                  if (!v12[18].i8[0])
                    goto LABEL_157;
                  goto LABEL_156;
                }
                v12[34].i8[0] = 0;
              }
              LOBYTE(v137) = 1;
              if (!v12[18].i8[0])
              {
LABEL_157:
                if ((v137 & 1) == 0 && !v12[35].i8[0])
                {
LABEL_179:
                  *(_OWORD *)v180 = *(_OWORD *)v12[21].f32;
                  v181 = *(_OWORD *)v12[24].f32;
                  *((float32x2_t *)&v182 + 1) = v12[27];
                  v153 = *(_OWORD *)v12[30].f32;
                  v183 = *(_OWORD *)v12[28].f32;
                  v154 = v12[26];
                  *(float32x2_t *)&v180[16] = v12[23];
                  *(float32x2_t *)&v182 = v154;
                  v184 = v153;
                  v185 = *(_OWORD *)v12[32].f32;
                  LODWORD(v186) = 2;
                  *(_DWORD *)v179 = -16776961;
                  v179[4] = 0;
                  v179[8] = 0;
                  v179[12] = 0;
                  md::DebugDrawContext::addWorldDebugShape(v8, (uint64_t)v180, (int *)v179);
                  if (LODWORD(v186) != -1)
                    ((void (*)(_BYTE *, _BYTE *))off_1E42F6900[LODWORD(v186)])(v179, v180);
                  return;
                }
                return;
              }
LABEL_156:
              v12[18].i8[0] = 0;
              goto LABEL_157;
            }
LABEL_148:
            operator delete(v23);
            goto LABEL_149;
          }
          v146 = 5;
        }
        (*(void (**)(__n128))(*v145 + 8 * v146))(v144);
        goto LABEL_171;
      }
      v103 = v190;
      if (v190)
      {
        v104 = (unint64_t *)&v190->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v82 = (char *)(v167 + 40);
      if ((_QWORD)v167 + 40 == v22)
        goto LABEL_147;
    }
    while (1)
    {
      v119 = *(unsigned int *)(v108 + 4);
      v120 = v95[4];
      v121 = (v95[5] - v120) >> 3;
      if (v119 >> 7 >= v121)
        goto LABEL_123;
      v122 = *(_QWORD *)(v120 + 8 * (v119 >> 7));
      if (!v122)
        goto LABEL_123;
      v123 = *(unsigned __int16 *)(v122 + 2 * (v119 & 0x7F));
      v125 = v95[7];
      v124 = v95[8];
      v126 = (v124 - v125) >> 3;
      if (v126 <= v123)
        goto LABEL_123;
      v127 = v125 + 8 * v123;
      if (v127 == v124 || *(_DWORD *)(v127 + 4) != (_DWORD)v119)
        goto LABEL_123;
      v118 = *(_QWORD *)v108;
      v129 = *(_QWORD *)v108 >> 39;
      if (v129 < v121
        && (v130 = *(_QWORD *)(v120 + 8 * v129)) != 0
        && (v131 = *(unsigned __int16 *)(v130 + 2 * (HIDWORD(v118) & 0x7F)), v126 > v131)
        && ((v132 = v125 + 8 * v131, v132 != v124) ? (v133 = *(_DWORD *)(v132 + 4) == HIDWORD(v118)) : (v133 = 0), v133))
      {
        v134 = v95[10] + 112 * v131;
      }
      else
      {
        v134 = v95[11];
      }
      *(_DWORD *)v179 = 0;
      LODWORD(v176.f64[0]) = 0;
      md::GeometryLogic::adjustedMeshBounds((uint64_t)v180, v134 + 36, v189);
      if (gm::Ray<float,3>::segmentIntersectsBox((float *)&v191, (float *)v180, (float *)v179, (float *)&v176))
      {
        if (!v102)
        {
          v6 = *(double *)&v180[8];
          v5 = *(double *)v180;
          v81 = *(float *)v179;
          v102 = 1;
          goto LABEL_145;
        }
        if (v81 > *(float *)v179)
        {
          v6 = *(double *)&v180[8];
          v5 = *(double *)v180;
          v102 = 1;
          v81 = *(float *)v179;
LABEL_145:
          v7 = *(double *)&v180[16];
          goto LABEL_122;
        }
        v102 = 1;
      }
      v118 = (unint64_t)v4;
LABEL_122:
      v4 = (_QWORD *)v118;
LABEL_123:
      v108 += 8;
      if (v108 == v107)
        goto LABEL_94;
    }
  }
  if (!a1[34].i8[0])
    return;
  v74 = (_QWORD *)a1[15];
  v75 = (unsigned __int16 *)v74[57];
  v76 = (unsigned __int16 *)v74[58];
  if (v75 == v76)
  {
LABEL_163:
    a1[35].i8[0] = 1;
    v148 = (_QWORD *)v74[48];
    v147 = (_QWORD *)v74[49];
    if (v148 == v147)
      return;
    while (*(_QWORD *)&a1[19] != *v148)
    {
      if (++v148 == v147)
        return;
    }
    a1[35].i8[0] = 0;
    goto LABEL_179;
  }
  v77 = 0;
  v78 = *(unsigned __int16 *)(*(_QWORD *)&a1[19] + 40);
  do
  {
    while (1)
    {
      if ((v77 & 1) != 0)
      {
        std::__throw_bad_optional_access[abi:nn180100]();
LABEL_183:
        abort();
      }
      if (v78 == *v75)
        break;
      v77 = 0;
      if (++v75 == v76)
        goto LABEL_163;
    }
    v77 = 1;
    a1[35].i8[0] = 1;
    a1[34].i8[0] = 0;
    ++v75;
  }
  while (v75 != v76);
}

void sub_19F2E191C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a66;

  if (a66 != -1)
  {
    ((void (*)(char *, char *))off_1E42F6900[a66])(&a47, &a53);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::LabelsLogic::setWorldType(uint64_t a1, unsigned int a2)
{
  char *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  md::LabelManager *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  md::LabelManager *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  md::LabelManager *v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t v24;
  md::LabelManager *v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t v28;
  md::LabelManager *v29;
  uint64_t (***v30)();
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  md::LabelManager *v38;
  uint64_t (***v39)();
  uint64_t v40;
  id v41;
  NSArray *v42;
  uint64_t v43;
  md::LabelManager *v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t v47;
  md::LabelManager *v48;
  uint64_t (***v49)();
  uint64_t v50;
  uint64_t v51;
  md::LabelManager *v52;
  uint64_t (***v53)();
  uint64_t v54;
  uint64_t v55;
  md::LabelManager *v56;
  uint64_t (***v57)();
  uint64_t v58;
  uint64_t v59;
  md::LabelManager *v60;
  uint64_t (***v61)();
  uint64_t v62;
  uint64_t v63;
  md::LabelManager *v64;
  uint64_t (***v65)();
  uint64_t v66;
  uint64_t v67;
  md::LabelManager *v68;
  uint64_t (***v69)();
  uint64_t v70;
  uint64_t v71;
  md::LabelManager *v72;
  uint64_t (***v73)();
  uint64_t v74;
  uint64_t v75;
  md::LabelManager *v76;
  uint64_t (***v77)();
  uint64_t v78;
  uint64_t v79;
  md::LabelManager *v80;
  uint64_t (***v81)();
  uint64_t v82;
  uint64_t v83;
  md::LabelManager *v84;
  uint64_t (***v85)();
  uint64_t v86;
  uint64_t v87;
  md::LabelManager *v88;
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  md::LabelManager *v98;
  uint64_t (***v99)();
  uint64_t v100;
  id v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  md::LabelManager *v108;
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t v111;
  md::LabelManager *v112;
  uint64_t v113;
  uint64_t (***v114)();
  uint64_t v115;
  VKPolylineOverlay *v116;
  VKRouteContext *v117;
  NSString *v118;
  uint64_t v119;
  uint64_t v120;
  md::LabelManager *v121;
  uint64_t (***v122)();
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  md::LabelManager *v139;
  int8x8_t v140;
  unint64_t v141;
  uint8x8_t v142;
  md::LabelManager *v143;
  uint64_t v144;
  md::LabelManager *v145;
  _QWORD *v146;
  unint64_t v147;
  md::LabelManager *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  md::LabelManager *v158;
  std::__shared_weak_count *v159;
  uint64_t (**v160)();
  md::LabelManager *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(a1 + 216) == a2)
    return;
  *(_BYTE *)(a1 + 216) = a2;
  v4 = md::LabelsLogic::labelManagerForWorldType(a1, a2);
  v7 = *(md::LabelManager **)v4;
  v6 = (std::__shared_weak_count *)*((_QWORD *)v4 + 1);
  v156 = *(_QWORD *)v4;
  v157 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(md::LabelManager **)(a1 + 160);
  if (v10 != v7)
  {
    md::LabelManager::synchWithHomeQueue(v10, 0);
    v11 = *(_QWORD *)(a1 + 144);
    if (*(md::LabelManager **)(v11 + 24) == v7)
      goto LABEL_146;
    v12 = *(std::__shared_weak_count **)(v11 + 32);
    v158 = *(md::LabelManager **)(v11 + 24);
    v159 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    if (v6)
    {
      v15 = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(std::__shared_weak_count **)(v11 + 32);
    *(_QWORD *)(v11 + 24) = v7;
    *(_QWORD *)(v11 + 32) = v6;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = **(unsigned __int8 **)(v11 + 40);
    v21 = *(md::LabelManager **)(v11 + 24);
    v160 = &off_1E42C9830;
    v161 = v21;
    v162 = v20;
    v163 = (uint64_t *)&v160;
    md::LabelManager::queueCommand(v21, 13, 1, &v160);
    v22 = (uint64_t (***)())v163;
    if (v163 == (uint64_t *)&v160)
    {
      v23 = 4;
      v22 = &v160;
    }
    else
    {
      if (!v163)
        goto LABEL_23;
      v23 = 5;
    }
    (*v22)[v23]();
LABEL_23:
    v24 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 40) + 25);
    v25 = *(md::LabelManager **)(v11 + 24);
    *((_BYTE *)v25 + 3568) = v24;
    v160 = &off_1E42C9998;
    v161 = v25;
    v162 = v24;
    v163 = (uint64_t *)&v160;
    md::LabelManager::queueCommand(v25, 14, 1, &v160);
    v26 = (uint64_t (***)())v163;
    if (v163 == (uint64_t *)&v160)
    {
      v27 = 4;
      v26 = &v160;
    }
    else
    {
      if (!v163)
        goto LABEL_28;
      v27 = 5;
    }
    (*v26)[v27]();
LABEL_28:
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 40) + 26);
    v29 = *(md::LabelManager **)(v11 + 24);
    *((_BYTE *)v29 + 3569) = v28;
    v160 = &off_1E42CA328;
    v161 = v29;
    v162 = v28;
    v163 = (uint64_t *)&v160;
    md::LabelManager::queueCommand(v29, 15, 1, &v160);
    v30 = (uint64_t (***)())v163;
    if (v163 == (uint64_t *)&v160)
    {
      v31 = 4;
      v30 = &v160;
    }
    else
    {
      if (!v163)
        goto LABEL_33;
      v31 = 5;
    }
    (*v30)[v31]();
LABEL_33:
    md::LabelSettings::setExternalTrafficFeatures(v11, *(void **)(*(_QWORD *)(v11 + 40) + 64), *(unsigned __int8 *)(*(_QWORD *)(v11 + 40) + 264));
    md::LabelSettings::setHiddenTrafficIncidentFeatures(v11, *(void **)(*(_QWORD *)(v11 + 40) + 88));
    md::LabelSettings::setARWalkingFeatures((md::LabelSettings *)v11, *(VKARWalkingFeatureSet **)(*(_QWORD *)(v11 + 40) + 144), 1);
    md::LabelSettings::setClientLocalizedStrings((md::LabelSettings *)v11, *(VKClientLocalizedStrings **)(*(_QWORD *)(v11 + 40) + 280));
    md::LabelSettings::setLabelExclusionRegions(v11, *(void **)(*(_QWORD *)(v11 + 40) + 112));
    v32 = *(id *)(*(_QWORD *)(v11 + 40) + 128);
    v33 = *(_QWORD *)(v11 + 40);
    v34 = *(void **)(v33 + 128);
    *(_QWORD *)(v33 + 128) = v32;
    v35 = v32;

    md::LabelManager::setScreenLabelFeatures(*(md::LabelManager **)(v11 + 24), v35);
    v36 = *(_QWORD *)(v11 + 40);
    v37 = *(_QWORD *)(v36 + 320);
    v38 = *(md::LabelManager **)(v11 + 24);
    if (*((_QWORD *)v38 + 432) == v37)
      goto LABEL_40;
    v160 = &off_1E42CA400;
    v161 = v38;
    v162 = v37;
    v163 = (uint64_t *)&v160;
    md::LabelManager::queueCommand(v38, 70, 1, &v160);
    v39 = (uint64_t (***)())v163;
    if (v163 == (uint64_t *)&v160)
    {
      v40 = 4;
      v39 = &v160;
    }
    else
    {
      if (!v163)
      {
LABEL_39:
        v36 = *(_QWORD *)(v11 + 40);
LABEL_40:
        v41 = *(id *)(v36 + 168);
        objc_msgSend(v41, "allObjects");
        v42 = (NSArray *)(id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(*(_QWORD *)(v11 + 40) + 168), "removeAllObjects");
        objc_msgSend(*(id *)(*(_QWORD *)(v11 + 40) + 168), "addObjectsFromArray:", v42);
        md::LabelManager::setCustomFeatureDataSources(*(md::LabelManager **)(v11 + 24), v42);

        md::LabelManager::setCustomFeatureDataSources(v158, 0);
        (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v158 + 21) + 72) + 8))(*(_QWORD *)(*((_QWORD *)v158 + 21) + 72));
        v43 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 1);
        v44 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C95F0;
        v161 = v44;
        v162 = v43;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v44, 10, 1, &v160);
        v45 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v46 = 4;
          v45 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_45;
          v46 = 5;
        }
        (*v45)[v46]();
LABEL_45:
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 8);
        v48 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9680;
        v161 = v48;
        v162 = v47;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v48, 12, 1, &v160);
        v49 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v50 = 4;
          v49 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_50;
          v50 = 5;
        }
        (*v49)[v50]();
LABEL_50:
        v51 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 16);
        v52 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9638;
        v161 = v52;
        v162 = v51;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v52, 49, 1, &v160);
        v53 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v54 = 4;
          v53 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_55;
          v54 = 5;
        }
        (*v53)[v54]();
LABEL_55:
        v55 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 24);
        v56 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9950;
        v161 = v56;
        v162 = v55;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v56, 5, 1, &v160);
        v57 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v58 = 4;
          v57 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_60;
          v58 = 5;
        }
        (*v57)[v58]();
LABEL_60:
        v59 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 48);
        v60 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9C68;
        v161 = v60;
        v162 = v59;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v60, 4, 1, &v160);
        v61 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v62 = 4;
          v61 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_65;
          v62 = 5;
        }
        (*v61)[v62]();
LABEL_65:
        v63 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 17);
        v64 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42CA1C0;
        v161 = v64;
        v162 = v63;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v64, 18, 1, &v160);
        v65 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v66 = 4;
          v65 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_70;
          v66 = 5;
        }
        (*v65)[v66]();
LABEL_70:
        v67 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 18);
        v68 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9CB0;
        v161 = v68;
        v162 = v67;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v68, 52, 1, &v160);
        v69 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v70 = 4;
          v69 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_75;
          v70 = 5;
        }
        (*v69)[v70]();
LABEL_75:
        v71 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 19);
        v72 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9AB8;
        v161 = v72;
        v162 = v71;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v72, 53, 1, &v160);
        v73 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v74 = 4;
          v73 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_80;
          v74 = 5;
        }
        (*v73)[v74]();
LABEL_80:
        v75 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 20);
        v76 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42C9CF8;
        v161 = v76;
        v162 = v75;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v76, 54, 1, &v160);
        v77 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v78 = 4;
          v77 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_85;
          v78 = 5;
        }
        (*v77)[v78]();
LABEL_85:
        v79 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 21);
        v80 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E4279840;
        v161 = v80;
        v162 = v79;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v80, 55, 1, &v160);
        v81 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v82 = 4;
          v81 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_90;
          v82 = 5;
        }
        (*v81)[v82]();
LABEL_90:
        v83 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 22);
        v84 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E4279888;
        v161 = v84;
        v162 = v83;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v84, 56, 1, &v160);
        v85 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v86 = 4;
          v85 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_95;
          v86 = 5;
        }
        (*v85)[v86]();
LABEL_95:
        v87 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 23);
        v88 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42797F8;
        v161 = v88;
        v162 = v87;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v88, 57, 1, &v160);
        v89 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v90 = 4;
          v89 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_100;
          v90 = 5;
        }
        (*v89)[v90]();
LABEL_100:
        v91 = *(_QWORD *)(*(_QWORD *)v11 + 40);
        v92 = *(std::__shared_weak_count **)(v91 + 304);
        v160 = *(uint64_t (***)())(v91 + 296);
        v161 = (md::LabelManager *)v92;
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        md::LabelSettings_Presentation::setPointsOfInterestFilter(v11, (uint64_t *)&v160);
        if (v92)
        {
          v95 = (unint64_t *)&v92->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v97 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 27);
        v98 = *(md::LabelManager **)(*(_QWORD *)v11 + 24);
        v160 = &off_1E42CA4D8;
        v161 = v98;
        v162 = v97;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v98, 67, 1, &v160);
        v99 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v100 = 4;
          v99 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_113;
          v100 = 5;
        }
        (*v99)[v100]();
LABEL_113:
        v101 = *(id *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 312);
        v102 = *(_QWORD *)(*(_QWORD *)v11 + 40);
        v103 = *(void **)(v102 + 312);
        *(_QWORD *)(v102 + 312) = v101;
        v104 = v101;

        v106 = v11 + 8;
        v105 = *(_QWORD *)(v11 + 8);
        v107 = *(unsigned __int8 *)(*(_QWORD *)(v105 + 40) + 2);
        v108 = *(md::LabelManager **)(v105 + 24);
        v160 = &off_1E42CA058;
        v161 = v108;
        v162 = v107;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v108, 11, 1, &v160);
        v109 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v110 = 4;
          v109 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_118;
          v110 = 5;
        }
        (*v109)[v110]();
LABEL_118:
        v111 = *(_QWORD *)(*(_QWORD *)v106 + 40);
        v112 = *(md::LabelManager **)(*(_QWORD *)v106 + 24);
        *((_QWORD *)v112 + 445) = *(_QWORD *)(v111 + 184);
        v113 = *(_QWORD *)(v111 + 184);
        v160 = &off_1E42C9A70;
        v161 = v112;
        v162 = v113;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v112, 25, 1, &v160);
        v114 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v115 = 4;
          v114 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_123;
          v115 = 5;
        }
        (*v114)[v115]();
LABEL_123:
        v116 = (VKPolylineOverlay *)*(id *)(*(_QWORD *)(*(_QWORD *)v106 + 40) + 200);
        md::LabelSettings_Navigation::setFocusedPolyline((md::LabelSettings_Navigation *)(v11 + 8), v116);

        md::LabelManager::setFocusedPolyline(v158, 0);
        v117 = (VKRouteContext *)*(id *)(*(_QWORD *)(*(_QWORD *)v106 + 40) + 224);
        md::LabelSettings_Navigation::setRouteContext((md::LabelSettings_Navigation *)(v11 + 8), v117);

        v118 = (NSString *)*(id *)(*(_QWORD *)(*(_QWORD *)v106 + 40) + 248);
        md::LabelSettings_Navigation::setCurrentLocationText((md::LabelSettings_Navigation *)(v11 + 8), v118);

        v119 = *(_QWORD *)(v11 + 16);
        v120 = *(unsigned __int8 *)(*(_QWORD *)(v119 + 40) + 28);
        v121 = *(md::LabelManager **)(v119 + 24);
        v160 = &off_1E42CA490;
        v161 = v121;
        v162 = v120;
        v163 = (uint64_t *)&v160;
        md::LabelManager::queueCommand(v121, 16, 1, &v160);
        v122 = (uint64_t (***)())v163;
        if (v163 == (uint64_t *)&v160)
        {
          v123 = 4;
          v122 = &v160;
        }
        else
        {
          if (!v163)
            goto LABEL_128;
          v123 = 5;
        }
        (*v122)[v123]();
LABEL_128:
        v124 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 40);
        v125 = *(_QWORD *)(v124 + 32);
        v5 = (uint64_t *)(v124 + 32);
        if (v125)
        {
          md::LabelManager::adoptSelectedLabelMarker(v156, v5);
          if (*((_QWORD *)v158 + 425))
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v158 + 30) + 192))(*((_QWORD *)v158 + 30));
            v126 = (std::__shared_weak_count *)*((_QWORD *)v158 + 439);
            *((_QWORD *)v158 + 438) = 0;
            *((_QWORD *)v158 + 439) = 0;
            if (v126)
            {
              v127 = (unint64_t *)&v126->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            v129 = (std::__shared_weak_count *)*((_QWORD *)v158 + 426);
            *((_QWORD *)v158 + 425) = 0;
            *((_QWORD *)v158 + 426) = 0;
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
          }
        }
        *(_BYTE *)(*(_QWORD *)(v11 + 24) + 3055) = 1;
        *((_BYTE *)v158 + 3055) = 0;
        if (v159)
        {
          v132 = (unint64_t *)&v159->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t *))v159->__on_zero_shared)(v159, v5);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        v7 = (md::LabelManager *)v156;
        v6 = v157;
LABEL_146:
        if (v6)
        {
          v134 = (unint64_t *)&v6->__shared_owners_;
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
        }
        v136 = *(std::__shared_weak_count **)(a1 + 168);
        *(_QWORD *)(a1 + 160) = v7;
        *(_QWORD *)(a1 + 168) = v6;
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t *))v136->__on_zero_shared)(v136, v5);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        if ((a2 & 0xFE) != 2)
          goto LABEL_191;
        v139 = *(md::LabelManager **)(a1 + 192);
        if (!v139)
          goto LABEL_191;
        while (1)
        {
          while (*((unsigned __int8 *)v139 + 16) == a2)
          {
            v139 = *(md::LabelManager **)v139;
            if (!v139)
              goto LABEL_191;
          }
          md::LabelManager::willShutdown(*((md::LabelManager **)v139 + 3));
          v140 = *(int8x8_t *)(a1 + 184);
          v141 = *((_QWORD *)v139 + 1);
          v142 = (uint8x8_t)vcnt_s8(v140);
          v142.i16[0] = vaddlv_u8(v142);
          if (v142.u32[0] > 1uLL)
          {
            if (v141 >= *(_QWORD *)&v140)
              v141 %= *(_QWORD *)&v140;
          }
          else
          {
            v141 &= *(_QWORD *)&v140 - 1;
          }
          v143 = *(md::LabelManager **)v139;
          v144 = *(_QWORD *)(a1 + 176);
          v145 = *(md::LabelManager **)(v144 + 8 * v141);
          do
          {
            v146 = v145;
            v145 = *(md::LabelManager **)v145;
          }
          while (v145 != v139);
          if (v146 == (_QWORD *)(a1 + 192))
            goto LABEL_198;
          v147 = v146[1];
          if (v142.u32[0] > 1uLL)
          {
            if (v147 >= *(_QWORD *)&v140)
              v147 %= *(_QWORD *)&v140;
          }
          else
          {
            v147 &= *(_QWORD *)&v140 - 1;
          }
          v148 = *(md::LabelManager **)v139;
          if (v147 != v141)
          {
LABEL_198:
            if (v143)
            {
              v149 = *((_QWORD *)v143 + 1);
              if (v142.u32[0] > 1uLL)
              {
                if (v149 >= *(_QWORD *)&v140)
                  v149 %= *(_QWORD *)&v140;
              }
              else
              {
                v149 &= *(_QWORD *)&v140 - 1;
              }
              v148 = *(md::LabelManager **)v139;
              if (v149 == v141)
              {
LABEL_179:
                v150 = *((_QWORD *)v148 + 1);
                if (v142.u32[0] > 1uLL)
                {
                  if (v150 >= *(_QWORD *)&v140)
                    v150 %= *(_QWORD *)&v140;
                }
                else
                {
                  v150 &= *(_QWORD *)&v140 - 1;
                }
                if (v150 != v141)
                {
                  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v150) = v146;
                  v148 = *(md::LabelManager **)v139;
                }
                goto LABEL_185;
              }
            }
            *(_QWORD *)(v144 + 8 * v141) = 0;
            v148 = *(md::LabelManager **)v139;
          }
          if (v148)
            goto LABEL_179;
LABEL_185:
          *v146 = v148;
          *(_QWORD *)v139 = 0;
          --*(_QWORD *)(a1 + 200);
          v151 = (std::__shared_weak_count *)*((_QWORD *)v139 + 4);
          if (v151)
          {
            v152 = (unint64_t *)&v151->__shared_owners_;
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
          }
          operator delete(v139);
          v139 = v143;
          if (!v143)
            goto LABEL_191;
        }
      }
      v40 = 5;
    }
    (*v39)[v40]();
    goto LABEL_39;
  }
LABEL_191:
  if (v157)
  {
    v154 = (unint64_t *)&v157->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *))v157->__on_zero_shared)(v157, v5);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
}

void sub_19F2E27CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  uint64_t v18;
  char *v20;

  v20 = a17;
  if (a17 == v17)
  {
    v18 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_7;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v18))();
LABEL_7:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void md::LabelManager::setCustomFeatureDataSources(md::LabelManager *this, NSArray *a2)
{
  _QWORD *v3;
  NSArray *v4;
  NSArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  NSArray *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 21) + 64) + 32))(*(_QWORD *)(*((_QWORD *)this + 21) + 64));
  if (v3)
  {
    v4 = v14;
    while (v3[12])
      md::LabelCustomFeatureSupport::removeDataSourceInternal((uint64_t)v3, *(void **)(v3[9] + 32));
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = v4;
    v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v16;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v16 != v7)
            objc_enumerationMutation(v5);
          v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
          md::LabelCustomFeatureSupport::addDataSourceInternal((uint64_t)v3, v9);

          ++v8;
        }
        while (v6 != v8);
        v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      }
      while (v6);
    }

    v10 = v3[2];
    *(_BYTE *)(v10 + 3041) = 1;
    v11 = atomic_load((unsigned __int8 *)(v10 + 3058));
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 56);
        if (v13)
        {
          v20 = v10;
          v19 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v13 + 48))(v13, &v20, &v19);
        }
      }
    }

  }
}

void sub_19F2E2AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::StandardLabeler::customFeatureSupport(md::StandardLabeler *this)
{
  return *((_QWORD *)this + 2);
}

void md::LabelCustomFeatureSupport::addDataSourceInternal(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  id v5;
  id v6;
  md::LabelCustomFeatureProvider *v7;
  id v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  VKCustomFeatureDataSourceObserverThunk *v13;
  void *v14;
  int v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  md::LabelCustomFeatureProvider *v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  md::LabelClusterProvider *v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  int v44;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  md::LabelMapTile **v55;
  md::LabelMapTile **v56;
  char v57;
  md::LabelMapTile *v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  geo::read_write_lock *v70;
  const char *v71;
  malloc_zone_t *zone;
  uint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  malloc_zone_t *v76;
  uint64_t v77;
  geo::read_write_lock *v78;
  const char *v79;
  malloc_zone_t *v80;
  id v81;
  __int128 v82;
  void *v83;
  id v84;
  _QWORD v85[2];
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v84 = a2;
  v3 = (_QWORD *)(a1 + 88);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), 288, 8);
  v85[0] = v4;
  v85[1] = a1 + 88;
  v86 = 0;
  v5 = v84;
  *(_QWORD *)(v4 + 32) = v5;
  v6 = v5;
  *(_QWORD *)(v4 + 40) = a1;
  v7 = (md::LabelCustomFeatureProvider *)(v4 + 40);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 56) = &off_1E42B52B0;
  *(_QWORD *)(v4 + 64) = 0;
  v8 = v6;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 80) = &off_1E42B5590;
  *(_QWORD *)(v4 + 88) = v8;
  {
    v69 = operator new();
    *(_QWORD *)(v69 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v69 + 24) = "VectorKitLabels";
    *(_OWORD *)(v69 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v69 = &off_1E42B5668;
    *(_QWORD *)(v69 + 8) = "VectorKitLabels";
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_OWORD *)(v69 + 104) = 0u;
    *(_OWORD *)(v69 + 120) = 0u;
    *(_OWORD *)(v69 + 136) = 0u;
    *(_OWORD *)(v69 + 152) = 0u;
    *(_OWORD *)(v69 + 168) = 0u;
    *(_OWORD *)(v69 + 184) = 0u;
    *(_OWORD *)(v69 + 200) = 0u;
    *(_OWORD *)(v69 + 216) = 0u;
    *(_OWORD *)(v69 + 232) = 0u;
    *(_QWORD *)(v69 + 248) = 0;
    *(_OWORD *)(v69 + 56) = 0u;
    v70 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v69 + 56), 0);
    if ((_DWORD)v70)
      geo::read_write_lock::logFailure(v70, (uint64_t)"initialization", v71);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v69 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v69 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v69;
  }
  *(_QWORD *)(v4 + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 104) = v4 + 112;
  *(_QWORD *)(v4 + 136) = &off_1E42B53D0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_BYTE *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = &off_1E42B5570;
  *(_QWORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_QWORD *)(v4 + 224) = 0;
  {
    v73 = operator new();
    *(_QWORD *)(v73 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v73 + 24) = "VectorKitLabels";
    *(_OWORD *)(v73 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v73 = &off_1E42B5668;
    *(_QWORD *)(v73 + 8) = "VectorKitLabels";
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 88) = 0u;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *(_OWORD *)(v73 + 184) = 0u;
    *(_OWORD *)(v73 + 200) = 0u;
    *(_OWORD *)(v73 + 216) = 0u;
    *(_OWORD *)(v73 + 232) = 0u;
    *(_QWORD *)(v73 + 248) = 0;
    *(_OWORD *)(v73 + 56) = 0u;
    v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v73 + 56), 0);
    if ((_DWORD)v74)
      geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
    v76 = malloc_create_zone(0, 0);
    *(_QWORD *)(v73 + 48) = v76;
    malloc_set_zone_name(v76, "VectorKitLabels");
    *(_QWORD *)(v73 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v73;
  }
  v11 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 232) = v11;
  {
    v77 = operator new();
    *(_QWORD *)(v77 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v77 + 24) = "VectorKitLabels";
    *(_OWORD *)(v77 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v77 = &off_1E42B5668;
    *(_QWORD *)(v77 + 8) = "VectorKitLabels";
    *(_OWORD *)(v77 + 72) = 0u;
    *(_OWORD *)(v77 + 88) = 0u;
    *(_OWORD *)(v77 + 104) = 0u;
    *(_OWORD *)(v77 + 120) = 0u;
    *(_OWORD *)(v77 + 136) = 0u;
    *(_OWORD *)(v77 + 152) = 0u;
    *(_OWORD *)(v77 + 168) = 0u;
    *(_OWORD *)(v77 + 184) = 0u;
    *(_OWORD *)(v77 + 200) = 0u;
    *(_OWORD *)(v77 + 216) = 0u;
    *(_OWORD *)(v77 + 232) = 0u;
    *(_QWORD *)(v77 + 248) = 0;
    *(_OWORD *)(v77 + 56) = 0u;
    v78 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v77 + 56), 0);
    if ((_DWORD)v78)
      geo::read_write_lock::logFailure(v78, (uint64_t)"initialization", v79);
    v80 = malloc_create_zone(0, 0);
    *(_QWORD *)(v77 + 48) = v80;
    malloc_set_zone_name(v80, "VectorKitLabels");
    *(_QWORD *)(v77 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v77;
  }
  v12 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 256) = v12;
  *(_QWORD *)(v4 + 240) = v4 + 248;
  *(_DWORD *)(v4 + 279) = 0;
  v13 = -[VKCustomFeatureDataSourceObserverThunk initWithDataSource:observer:]([VKCustomFeatureDataSourceObserverThunk alloc], "initWithDataSource:observer:", v8, v4 + 40);
  v14 = *(void **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = v13;

  v15 = objc_msgSend(v8, "isClusteringEnabled");
  *(_BYTE *)(v4 + 280) = v15;
  if (v15)
  {
    v16 = operator new();
    v82 = *(_OWORD *)v7;
    v17 = v8;
    *(_QWORD *)v16 = &off_1E4299070;
    *(_OWORD *)(v16 + 8) = v82;
    v18 = v17;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_QWORD *)(v16 + 24) = &off_1E42B5590;
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 48) = &off_1E42B53F0;
    *(_QWORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 72) = &off_1E42B53F0;
    *(_QWORD *)(v16 + 80) = 0;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_DWORD *)(v16 + 127) = 0;
    v83 = v18;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      *(_BYTE *)(v16 + 130) = objc_msgSend(v18, "featureType");
    v81 = *(id *)(v16 + 32);
    objc_msgSend(v81, "clusterStyleAttributes");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v19)
    {
      objc_msgSend(v19, "featureStyleAttributesPtr");
      v21 = (md::LabelCustomFeatureProvider *)(v4 + 40);
      v22 = v87;
    }
    else
    {
      v21 = (md::LabelCustomFeatureProvider *)(v4 + 40);
      v22 = 0uLL;
    }
    v88 = v22;
    v87 = 0uLL;
    geo::codec::copyFeatureStyleAttributes((uint64_t *)&v88, &v89);
    v23 = v89;
    v89 = 0uLL;
    v24 = *(std::__shared_weak_count **)(v16 + 104);
    *(_OWORD *)(v16 + 96) = v23;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
    if (*((_QWORD *)&v89 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (*((_QWORD *)&v87 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
      }
    }

    v3 = (_QWORD *)(a1 + 88);
    v7 = v21;
    if (!*(_QWORD *)(v16 + 96))
    {
      v63 = (char *)operator new(0x40uLL);
      *((_QWORD *)v63 + 1) = 0;
      *((_QWORD *)v63 + 2) = 0;
      *(_QWORD *)v63 = &off_1E42DAB40;
      *(_OWORD *)(v63 + 24) = 0u;
      *(_OWORD *)(v63 + 40) = 0u;
      *(_DWORD *)(v63 + 55) = 0;
      v64 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      *((_QWORD *)v63 + 3) = v64;
      if (v64)
      {
        *(_QWORD *)&v65 = -1;
        *((_QWORD *)&v65 + 1) = -1;
        v64[14] = v65;
        v64[15] = v65;
        v64[12] = v65;
        v64[13] = v65;
        v64[10] = v65;
        v64[11] = v65;
        v64[8] = v65;
        v64[9] = v65;
        v64[6] = v65;
        v64[7] = v65;
        v64[4] = v65;
        v64[5] = v65;
        v64[2] = v65;
        v64[3] = v65;
        *v64 = v65;
        v64[1] = v65;
      }
      v66 = *(std::__shared_weak_count **)(v16 + 104);
      *(_QWORD *)(v16 + 96) = v63 + 24;
      *(_QWORD *)(v16 + 104) = v63;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
    }

    v35 = *(md::LabelClusterProvider **)(v4 + 272);
    *(_QWORD *)(v4 + 272) = v16;
    if (v35)
    {
      md::LabelClusterProvider::~LabelClusterProvider(v35);
      MEMORY[0x1A1AF4E00]();
    }
  }
  *(_BYTE *)(v4 + 282) = objc_msgSend(v8, "sceneState");
  v36 = objc_msgSend(v8, "sceneID");
  *(_BYTE *)(v4 + 281) = v36;
  v37 = (char *)operator new(0x88uLL);
  v38 = v37;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = 0;
  *(_QWORD *)v37 = &off_1E42DAC58;
  *((_QWORD *)v37 + 3) = *(_QWORD *)(v4 + 48);
  v39 = v37 + 24;
  v40 = *(unsigned __int8 *)(v4 + 282);
  v41 = *(_BYTE *)(v4 + 280);
  v37[32] = 0;
  *(_OWORD *)(v37 + 40) = xmmword_19FFB3480;
  *((_QWORD *)v37 + 7) = EaseLinear;
  *((_QWORD *)v37 + 8) = EaseLinear;
  *((_DWORD *)v37 + 18) = 0;
  v37[76] = 0;
  v37[77] = v41;
  *(_QWORD *)(v37 + 78) = 0;
  *(_QWORD *)(v37 + 94) = 0;
  *(_QWORD *)(v37 + 86) = 0;
  *(_DWORD *)(v37 + 101) = 0;
  *(_QWORD *)(v37 + 108) = 0;
  *(_QWORD *)(v37 + 124) = 0;
  *(_QWORD *)(v37 + 116) = 0;
  *((_DWORD *)v37 + 33) = 0;
  do
  {
    v42 = __ldaxr(md::LabelScene::LabelScene(md::LabelManager *,VKLabelSceneID,VKLabelSceneState,BOOL)::nextSceneTag);
    v43 = v42 + 1;
  }
  while (__stlxr(v43, md::LabelScene::LabelScene(md::LabelManager *,VKLabelSceneID,VKLabelSceneState,BOOL)::nextSceneTag));
  v37[78] = v43;
  md::LabelScene::setSceneID((uint64_t)(v37 + 24), v36, 1);
  if (v40)
  {
    *((_DWORD *)v38 + 10) = 1065353216;
    (*((void (**)(float))v38 + 7))(1.0);
    v45 = 2;
  }
  else
  {
    *((_DWORD *)v38 + 10) = 0;
    (*((void (**)(float))v38 + 8))(0.0);
    v45 = 0;
  }
  *((_DWORD *)v38 + 11) = v44;
  v38[76] = v45;
  atomic_store(v40 != 0, (unsigned __int8 *)v38 + 79);
  v46 = *(std::__shared_weak_count **)(v4 + 200);
  *(_QWORD *)(v4 + 192) = v39;
  *(_QWORD *)(v4 + 200) = v38;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  v49 = (uint64_t *)(a1 + 80);
  v50 = *(uint64_t **)(a1 + 80);
  if (v50)
  {
    v51 = *(_QWORD *)(v4 + 32);
    while (1)
    {
      while (1)
      {
        v52 = v50;
        v53 = v50[4];
        if (v51 >= v53)
          break;
        v50 = (uint64_t *)*v50;
        v49 = v52;
        if (!*v52)
          goto LABEL_51;
      }
      if (v53 >= v51)
        break;
      v50 = (uint64_t *)v50[1];
      if (!v50)
      {
        v49 = v52 + 1;
        goto LABEL_51;
      }
    }
    if (v4)
    {
      md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider(v7);

      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 40))(*v3, v4, 288);
    }
  }
  else
  {
    v52 = (uint64_t *)(a1 + 80);
LABEL_51:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = v52;
    *v49 = v4;
    v54 = **(_QWORD **)(a1 + 72);
    if (v54)
    {
      *(_QWORD *)(a1 + 72) = v54;
      v4 = *v49;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), (uint64_t *)v4);
    v55 = *(md::LabelMapTile ***)(a1 + 104);
    ++*(_QWORD *)(a1 + 96);
    v56 = *(md::LabelMapTile ***)(a1 + 112);
    if (v55 != v56)
    {
      v57 = 0;
      do
      {
        v58 = *v55;
        md::LabelCustomFeatureProvider::addTile((uint64_t *)(v85[0] + 40), *v55);
        md::LabelCustomFeatureSupport::populateLabelFeaturesInTile((md::LabelCustomFeatureSupport *)a1, *((md::LabelMapTile **)v58 + 9), *((std::__shared_weak_count **)v58 + 10));
        v57 |= *((_BYTE *)v58 + 120) != 0;
        ++v55;
      }
      while (v55 != v56);
      if ((v57 & 1) != 0)
      {
        v59 = *(_QWORD *)(a1 + 16);
        v60 = atomic_load((unsigned __int8 *)(v59 + 3058));
        if ((v60 & 1) != 0)
        {
          v61 = *(_QWORD *)(v59 + 136);
          if (v61)
          {
            v62 = *(_QWORD *)(v61 + 56);
            if (v62)
            {
              v85[0] = *(_QWORD *)(a1 + 16);
              LOBYTE(v89) = 9;
              (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v62 + 48))(v62, v85, &v89);
            }
          }
        }
      }
    }
    *(_BYTE *)(a1 + 232) = 1;
  }

}

void sub_19F2E34CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

float md::LabelScene::setSceneID(uint64_t a1, int a2, int a3)
{
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  float v53;
  float result;

  if (*(unsigned __int8 *)(a1 + 8) != a2 || a3 != 0)
  {
    *(_BYTE *)(a1 + 8) = a2;
    *(_BYTE *)(a1 + 80) = 0;
    v5 = *(char **)(a1 + 56);
    *(_QWORD *)(a1 + 64) = v5;
    if (a2 == 4)
    {
      *(_BYTE *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 48) = 1067869798;
      v10 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v5 >= v10)
      {
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v5) >> 2);
        v28 = 0x999999999999999ALL * ((uint64_t)(v10 - (_QWORD)v5) >> 2);
        if (v28 <= 1)
          v28 = 1;
        if (v27 >= 0x666666666666666)
          v29 = 0xCCCCCCCCCCCCCCCLL;
        else
          v29 = v28;
        if (v29 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_85;
        v30 = 5 * v29;
        v31 = operator new(20 * v29);
        v32 = (char *)&v31[v30];
        *(_QWORD *)v31 = 0;
        v31[2] = 1053609165;
        *((_BYTE *)v31 + 12) = 1;
        *((_BYTE *)v31 + 16) = 0;
        v9 = (char *)(v31 + 5);
        *(_QWORD *)(a1 + 56) = v31;
        *(_QWORD *)(a1 + 64) = v31 + 5;
        *(_QWORD *)(a1 + 72) = v32;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 1053609165;
        v5[12] = 1;
        v9 = v5 + 20;
        v5[16] = 0;
      }
      *(_QWORD *)(a1 + 64) = v9;
      v18 = *(_DWORD *)(a1 + 48);
      v33 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v33)
      {
        v20 = 1061997773;
        goto LABEL_43;
      }
      v44 = *(char **)(a1 + 56);
      v45 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v44) >> 2) + 1;
      if (v45 <= 0xCCCCCCCCCCCCCCCLL)
      {
        v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (_QWORD)v44) >> 2);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x666666666666666)
          v47 = 0xCCCCCCCCCCCCCCCLL;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_85;
          v48 = (char *)operator new(20 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[4 * ((v9 - v44) >> 2)];
        v50 = &v48[20 * v47];
        *(_DWORD *)v49 = 1061997773;
        *((_DWORD *)v49 + 1) = v18;
        v49[8] = 0;
        v49[12] = 0;
        v49[16] = 1;
        v7 = v49 + 20;
        if (v9 != v44)
        {
          do
          {
            v52 = *(_OWORD *)(v9 - 20);
            *(v49 - 4) = *(v9 - 4);
            *(_OWORD *)(v49 - 20) = v52;
            v49 -= 20;
            v9 -= 20;
          }
          while (v9 != v44);
LABEL_78:
          v9 = *(char **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v49;
          *(_QWORD *)(a1 + 64) = v7;
          *(_QWORD *)(a1 + 72) = v50;
          if (!v9)
            goto LABEL_83;
          goto LABEL_81;
        }
LABEL_80:
        *(_QWORD *)(a1 + 56) = v49;
        *(_QWORD *)(a1 + 64) = v7;
        *(_QWORD *)(a1 + 72) = v50;
LABEL_81:
        v38 = v9;
        goto LABEL_82;
      }
    }
    else
    {
      if (a2 != 3)
      {
        if (a2 == 1)
        {
          *(_DWORD *)(a1 + 48) = 1061997773;
          *(_BYTE *)(a1 + 80) = 1;
          v6 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v5 < v6)
          {
            *(_QWORD *)v5 = 0x3F4CCCCD00000000;
            v5[8] = 0;
            v5[12] = 0;
            v5[16] = 1;
            v7 = v5 + 20;
LABEL_83:
            *(_QWORD *)(a1 + 64) = v7;
            v53 = *(float *)(a1 + 48);
            *(_DWORD *)(a1 + 28) = 897988541;
            result = fmaxf(v53, 0.000001);
            *(float *)(a1 + 24) = result;
            *(_QWORD *)(a1 + 32) = EaseLinear;
            *(_QWORD *)(a1 + 40) = EaseConstantOne;
            return result;
          }
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v5) >> 2);
          v22 = 0x999999999999999ALL * ((uint64_t)(v6 - (_QWORD)v5) >> 2);
          if (v22 <= 1)
            v22 = 1;
          if (v21 >= 0x666666666666666)
            v23 = 0xCCCCCCCCCCCCCCCLL;
          else
            v23 = v22;
          if (v23 <= 0xCCCCCCCCCCCCCCCLL)
          {
            v24 = 20 * v23;
            v25 = (char *)operator new(20 * v23);
            v26 = &v25[v24];
            *(_QWORD *)v25 = 0x3F4CCCCD00000000;
            v25[8] = 0;
            v25[12] = 0;
            v25[16] = 1;
LABEL_51:
            v7 = v25 + 20;
            *(_QWORD *)(a1 + 56) = v25;
            *(_QWORD *)(a1 + 64) = v25 + 20;
            *(_QWORD *)(a1 + 72) = v26;
            if (!v5)
              goto LABEL_83;
            v38 = v5;
LABEL_82:
            operator delete(v38);
            goto LABEL_83;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 48) = 1036831949;
          v11 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v5 < v11)
          {
            v5[8] = 0;
            *(_QWORD *)v5 = 0;
            v5[12] = 0;
            v7 = v5 + 20;
            v5[16] = 0;
            goto LABEL_83;
          }
          v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v5) >> 2);
          v35 = 2 * v34;
          if (2 * v34 <= 1)
            v35 = 1;
          if (v34 >= 0x666666666666666)
            v36 = 0xCCCCCCCCCCCCCCCLL;
          else
            v36 = v35;
          if (v36 <= 0xCCCCCCCCCCCCCCCLL)
          {
            v37 = 20 * v36;
            v25 = (char *)operator new(20 * v36);
            *(_QWORD *)v25 = 0;
            v26 = &v25[v37];
            v25[8] = 0;
            v25[12] = 0;
            v25[16] = 0;
            goto LABEL_51;
          }
        }
LABEL_85:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      *(_BYTE *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 48) = 1065353216;
      v8 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v5 >= v8)
      {
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v5) >> 2);
        v13 = 2 * v12;
        if (2 * v12 <= 1)
          v13 = 1;
        if (v12 >= 0x666666666666666)
          v14 = 0xCCCCCCCCCCCCCCCLL;
        else
          v14 = v13;
        if (v14 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_85;
        v15 = 20 * v14;
        v16 = (char *)operator new(20 * v14);
        *(_QWORD *)v16 = 0;
        v17 = &v16[v15];
        v16[8] = 0;
        v16[12] = 0;
        v16[16] = 0;
        v9 = v16 + 20;
        *(_QWORD *)(a1 + 56) = v16;
        *(_QWORD *)(a1 + 64) = v16 + 20;
        *(_QWORD *)(a1 + 72) = v17;
        if (v5)
          operator delete(v5);
      }
      else
      {
        v5[8] = 0;
        *(_QWORD *)v5 = 0;
        v5[12] = 0;
        v9 = v5 + 20;
        v5[16] = 0;
      }
      *(_QWORD *)(a1 + 64) = v9;
      v18 = *(_DWORD *)(a1 + 48);
      v19 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v19)
      {
        v20 = 1056964608;
LABEL_43:
        *(_DWORD *)v9 = v20;
        *((_DWORD *)v9 + 1) = v18;
        v9[8] = 0;
        v9[12] = 0;
        v7 = v9 + 20;
        v9[16] = 1;
        goto LABEL_83;
      }
      v39 = *(char **)(a1 + 56);
      v40 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v39) >> 2) + 1;
      if (v40 <= 0xCCCCCCCCCCCCCCCLL)
      {
        v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (_QWORD)v39) >> 2);
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x666666666666666)
          v42 = 0xCCCCCCCCCCCCCCCLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_85;
          v43 = (char *)operator new(20 * v42);
        }
        else
        {
          v43 = 0;
        }
        v49 = &v43[4 * ((v9 - v39) >> 2)];
        v50 = &v43[20 * v42];
        *(_DWORD *)v49 = 1056964608;
        *((_DWORD *)v49 + 1) = v18;
        v49[8] = 0;
        v49[12] = 0;
        v49[16] = 1;
        v7 = v49 + 20;
        if (v9 != v39)
        {
          do
          {
            v51 = *(_OWORD *)(v9 - 20);
            *(v49 - 4) = *(v9 - 4);
            *(_OWORD *)(v49 - 20) = v51;
            v49 -= 20;
            v9 -= 20;
          }
          while (v9 != v39);
          goto LABEL_78;
        }
        goto LABEL_80;
      }
    }
    abort();
  }
  return result;
}

void sub_19F2E3E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void `non-virtual thunk to'md::LabelCustomFeatureSupport::localizeLabelsDidChange(md::LabelCustomFeatureSupport *this)
{
  md::LabelCustomFeatureSupport::localizeLabelsDidChange((md::LabelCustomFeatureSupport *)((char *)this - 8));
}

void `non-virtual thunk to'md::LabelTransitSupport::localizeLabelsDidChange(md::LabelTransitSupport *this)
{
  uint64_t **v2;
  unsigned int *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t **)((char *)this + 120);
  if (*((_QWORD *)this + 15) != *((_QWORD *)this + 16))
  {
    v3 = *(unsigned int **)(*((_QWORD *)this + 1) + 296);
    v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)v3 + 3392));
    v5 = (uint64_t *)*((_QWORD *)this + 15);
    v6 = (uint64_t *)*((_QWORD *)this + 16);
    if (v5 != v6)
    {
      v7 = v4 & 1;
      do
      {
        v8 = *v5;
        v5 += 2;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 32))(v8, 0, v7);
      }
      while (v5 != v6);
    }
    md::LabelFeatureStyler::styleExternalFeatures(v3, v2);
  }
  if (*((_QWORD *)this + 29) != *((_QWORD *)this + 30))
  {
    v9 = *(unsigned int **)(*((_QWORD *)this + 1) + 296);
    v10 = atomic_load((unsigned __int8 *)(*(_QWORD *)v9 + 3392));
    v11 = *((_QWORD *)this + 30) - *((_QWORD *)this + 29);
    if (v11)
    {
      v12 = 0;
      v13 = v11 >> 4;
      if (v13 <= 1)
        v14 = 1;
      else
        v14 = v13;
      v15 = v10 & 1;
      do
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 29) + v12) + 40))(*(_QWORD *)(*((_QWORD *)this + 29) + v12), *((_QWORD *)this + 26) + v12, v15);
        v12 += 16;
        --v14;
      }
      while (v14);
    }
    md::LabelFeatureStyler::styleExternalFeatures(v9, (uint64_t **)this + 29);
  }
}

void md::LabelSettings_Presentation::setPointsOfInterestFilter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  md::LabelManager *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(v4 + 304);
  *(_QWORD *)(v4 + 296) = v6;
  *(_QWORD *)(v4 + 304) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(md::LabelManager **)(*(_QWORD *)a1 + 24);
  v14 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v25 = 0;
  v17 = operator new(0x20uLL);
  *v17 = &off_1E42C98C0;
  v17[1] = v12;
  v17[2] = v14;
  v17[3] = v13;
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v25 = v17;
  md::LabelManager::queueCommand(v12, 58, 1, v24);
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_20;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_20:
  if (v13)
  {
    v22 = (unint64_t *)&v13->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19F2E411C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::LabelSettings_Navigation::setCurrentLocationText(md::LabelSettings_Navigation *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  NSString *v5;
  NSString *v6;
  NSString *v7;
  void *v8;
  md::LabelManager *v9;
  NSString *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  NSString *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)this + 40);
  v5 = v3;
  v6 = v5;
  if (v5)
    v7 = v5;
  v8 = *(void **)(v4 + 248);
  *(_QWORD *)(v4 + 248) = v6;

  v9 = *(md::LabelManager **)(*(_QWORD *)this + 24);
  v14 = v6;
  if (v6)
    v10 = v14;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E42C9EA8;
  v11[1] = v9;
  v11[2] = &off_1E42B5490;
  v11[3] = v14;
  v16 = v11;
  md::LabelManager::queueCommand(v9, 37, 1, v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_9;
  }
  if (v16)
  {
    v13 = 5;
LABEL_9:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }

}

void sub_19F2E42B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LabelSettings_Navigation::setFocusedPolyline(md::LabelSettings_Navigation *this, VKPolylineOverlay *a2)
{
  VKPolylineOverlay *v3;
  uint64_t v4;
  VKPolylineOverlay *v5;
  void *v6;
  VKPolylineOverlay *v7;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)this + 40);
  v7 = v3;
  if (v7)
    v5 = v7;
  v6 = *(void **)(v4 + 200);
  *(_QWORD *)(v4 + 200) = v7;

  md::LabelManager::setFocusedPolyline(*(md::LabelManager **)(*(_QWORD *)this + 24), v7);
}

void sub_19F2E4398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::LabelManager::setFocusedPolyline(md::LabelManager *this, VKPolylineOverlay *a2)
{
  VKPolylineOverlay *v3;
  VKPolylineOverlay *v4;
  VKPolylineOverlay *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
    v5 = v3;
  v6 = operator new(0x28uLL);
  *v6 = &off_1E42C99E0;
  v6[1] = this;
  v6[2] = &off_1E42B4CF0;
  v6[3] = v4;
  v10 = v6;
  md::LabelManager::queueCommand(this, 38, 1, v9);
  v7 = v10;
  if (v10 == v9)
  {
    v8 = 4;
    v7 = v9;
    goto LABEL_7;
  }
  if (v10)
  {
    v8 = 5;
LABEL_7:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

}

void sub_19F2E448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LabelSettings_Navigation::setRouteContext(md::LabelSettings_Navigation *this, VKRouteContext *a2)
{
  VKRouteContext *v3;
  uint64_t v4;
  VKRouteContext *v5;
  VKRouteContext *v6;
  VKRouteContext *v7;
  void *v8;
  md::LabelManager *v9;
  VKRouteContext *v10;
  void *v11;
  int v12;
  VKRouteContext *v13;
  char v14;
  VKRouteContext *v15;
  char v16;
  VKRouteContext *v17;
  VKRouteContext *v18;
  VKRouteContext *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  VKRouteContext *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  VKRouteContext *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)this + 40);
  v5 = v3;
  v6 = v5;
  if (v5)
    v7 = v5;
  v8 = *(void **)(v4 + 224);
  *(_QWORD *)(v4 + 224) = v6;

  v9 = *(md::LabelManager **)(*(_QWORD *)this + 24);
  v10 = v6;
  v11 = (void *)*((_QWORD *)v9 + 441);
  v27 = v10;
  if (v6)
  {
    *((_QWORD *)v9 + 441) = v10;

    v12 = -[VKRouteContext useType](v27, "useType");
    if (v12 == 1)
      v13 = v27;
    else
      v13 = 0;
    if (v12 == 1)
      v14 = 2;
    else
      v14 = 0;
    if (v12)
      v15 = 0;
    else
      v15 = v27;
    if (v12)
      v6 = v13;
    else
      v6 = 0;
    if (v12)
      v16 = v14;
    else
      v16 = 1;
  }
  else
  {
    *((_QWORD *)v9 + 441) = 0;

    v15 = 0;
    v16 = 0;
  }
  v17 = v15;
  v18 = v6;
  v19 = v17;
  v20 = operator new(0x20uLL);
  *v20 = &off_1E42C9710;
  v20[1] = v9;
  *((_BYTE *)v20 + 16) = v16;
  v20[3] = v19;
  v29 = v20;
  md::LabelManager::queueCommand(v9, 23, 1, v28);
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_25;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
  v23 = v18;
  v24 = operator new(0x20uLL);
  *v24 = &off_1E42C9758;
  v24[1] = v9;
  *((_BYTE *)v24 + 16) = v16;
  v24[3] = v23;
  v29 = v24;
  md::LabelManager::queueCommand(v9, 24, 1, v28);
  v25 = v29;
  if (v29 == v28)
  {
    v26 = 4;
    v25 = v28;
    goto LABEL_29;
  }
  if (v29)
  {
    v26 = 5;
LABEL_29:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }

}

void sub_19F2E46DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{

  _Unwind_Resume(a1);
}

void md::LabelTransitSupport::localizeLabelsDidChange(md::LabelTransitSupport *this)
{
  uint64_t **v2;
  unsigned int *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t **)((char *)this + 128);
  if (*((_QWORD *)this + 16) != *((_QWORD *)this + 17))
  {
    v3 = *(unsigned int **)(*((_QWORD *)this + 2) + 296);
    v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)v3 + 3392));
    v5 = (uint64_t *)*((_QWORD *)this + 16);
    v6 = (uint64_t *)*((_QWORD *)this + 17);
    if (v5 != v6)
    {
      v7 = v4 & 1;
      do
      {
        v8 = *v5;
        v5 += 2;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 32))(v8, 0, v7);
      }
      while (v5 != v6);
    }
    md::LabelFeatureStyler::styleExternalFeatures(v3, v2);
  }
  if (*((_QWORD *)this + 30) != *((_QWORD *)this + 31))
  {
    v9 = *(unsigned int **)(*((_QWORD *)this + 2) + 296);
    v10 = atomic_load((unsigned __int8 *)(*(_QWORD *)v9 + 3392));
    v11 = *((_QWORD *)this + 31) - *((_QWORD *)this + 30);
    if (v11)
    {
      v12 = 0;
      v13 = v11 >> 4;
      if (v13 <= 1)
        v14 = 1;
      else
        v14 = v13;
      v15 = v10 & 1;
      do
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 30) + v12) + 40))(*(_QWORD *)(*((_QWORD *)this + 30) + v12), *((_QWORD *)this + 27) + v12, v15);
        v12 += 16;
        --v14;
      }
      while (v14);
    }
    md::LabelFeatureStyler::styleExternalFeatures(v9, (uint64_t **)this + 30);
  }
}

uint64_t gss::ClientStyleState<gss::PropertyID>::ClientStyleState(uint64_t a1)
{
  geo::read_write_lock *v2;
  const char *v3;
  _QWORD *v4;
  gss::Allocator *v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int16 v8;
  uint64_t v9;
  gss::Allocator *v10;
  gss::Allocator *v11;
  uint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v2 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(a1 + 16), 0);
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"initialization", v3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 223) = 0;
  *(_BYTE *)(a1 + 231) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  v4 = (_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 239) = 0;
  *(_BYTE *)(a1 + 247) = 1;
  *(_DWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 251) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 248));
  atomic_store(0, (unsigned int *)(a1 + 256));
  atomic_store(0, (unsigned __int8 *)(a1 + 254));
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10000u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10001u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x1000Du) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10004u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10002u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10015u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x1000Eu) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10018u) = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10019u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10006u) = -1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10033u) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x1003Cu) = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x1003Du) = 0;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10045u) = 1;
  v5 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), 0x10046u);
  *(_WORD *)v5 = 0;
  if (*(_BYTE *)(a1 + 230) || *(_BYTE *)(a1 + 231))
  {
    if (*(_BYTE *)(a1 + 246))
      goto LABEL_11;
    goto LABEL_6;
  }
  v7 = *(_WORD *)(a1 + 228);
  v8 = (4 * v7) | 2;
  v9 = gss::Allocator::instance(v5);
  v5 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, (unsigned __int16)(v8 + 2 * v7) & 0xFFFE, 1);
  v10 = v5;
  if (*(_QWORD *)(a1 + 216))
  {
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 216, v5, (gss::Allocator *)((char *)v5 + v8), 1);
    v12 = gss::Allocator::instance(v11);
    v5 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(a1 + 216), *(unsigned __int16 *)(a1 + 228));
  }
  *(_WORD *)(a1 + 228) = v7;
  *(_QWORD *)(a1 + 216) = v10;
  *(_WORD *)(a1 + 224) = v8;
  if (!*(_BYTE *)(a1 + 246))
  {
LABEL_6:
    if (*v4)
    {
      v6 = gss::Allocator::instance(v5);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
    }
  }
LABEL_11:
  *(_QWORD *)(a1 + 239) = 0;
  *v4 = 0;
  *(_BYTE *)(a1 + 247) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)(a1 + 232), a1 + 216);
  return a1;
}

void sub_19F2E4B40(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_rwlock_t *v2;
  gss::QueryOverrides *v3;
  gss::QueryOverrides *v4;
  std::__shared_weak_count *v6;

  gss::QueryOverrides::~QueryOverrides(v4);
  gss::QueryOverrides::~QueryOverrides(v3);
  geo::read_write_lock::~read_write_lock(v2);
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

void md::LabelSettings::setHiddenTrafficIncidentFeatures(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  md::LabelManager *v10;
  id v11;
  void *v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v17);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isEqualToSet:", v4) & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = v17;
    v7 = v6;
    if (v6)
      v8 = v6;
    v9 = *(void **)(v5 + 88);
    *(_QWORD *)(v5 + 88) = v7;

    v10 = *(md::LabelManager **)(a1 + 24);
    v11 = v7;
    v12 = v11;
    if (v7)
      v13 = v11;
    v14 = operator new(0x28uLL);
    *v14 = &off_1E42CA5B0;
    v14[1] = v10;
    v14[2] = &off_1E42B53F0;
    v14[3] = v12;
    v19 = v14;
    md::LabelManager::queueCommand(v10, 64, 1, v18);
    v15 = v19;
    if (v19 == v18)
    {
      v16 = 4;
      v15 = v18;
    }
    else
    {
      if (!v19)
      {
LABEL_11:

        goto LABEL_12;
      }
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_11;
  }
LABEL_12:

}

void sub_19F2E4D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LabelSettings::setExternalTrafficFeatures(uint64_t a1, void *a2, int a3)
{
  id v5;
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  md::LabelManager *v14;
  id v15;
  void *v16;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(id *)(*(_QWORD *)(a1 + 40) + 64);
  v7 = v5;
  if (v6 == v7)
    v8 = 1;
  else
    v8 = objc_msgSend(v6, "isEqual:", v7);

  v9 = *(_QWORD *)(a1 + 40);
  if (!v8 || *(unsigned __int8 *)(v9 + 264) != a3)
  {
    v10 = v7;
    v11 = v10;
    if (v10)
      v12 = v10;
    v13 = *(void **)(v9 + 64);
    *(_QWORD *)(v9 + 64) = v11;

    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 264) = a3;
  }
  v14 = *(md::LabelManager **)(a1 + 24);
  v15 = v7;
  v16 = v15;
  if (v15)
    v17 = v15;
  v18 = operator new(0x30uLL);
  *v18 = &off_1E42CA370;
  v18[1] = v14;
  v18[2] = &off_1E42B53F0;
  v18[3] = v16;
  *((_BYTE *)v18 + 40) = a3;
  v22 = v18;
  md::LabelManager::queueCommand(v14, 35, 1, v21);
  v19 = v22;
  if (v22 == v21)
  {
    v20 = 4;
    v19 = v21;
    goto LABEL_15;
  }
  if (v22)
  {
    v20 = 5;
LABEL_15:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }

}

void sub_19F2E4F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::LabelSettings::setClientLocalizedStrings(md::LabelSettings *this, VKClientLocalizedStrings *a2)
{
  VKClientLocalizedStrings *v3;
  uint64_t v4;
  VKClientLocalizedStrings *v5;
  VKClientLocalizedStrings *v6;
  VKClientLocalizedStrings *v7;
  void *v8;
  md::LabelManager *v9;
  VKClientLocalizedStrings *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  VKClientLocalizedStrings *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *((_QWORD *)this + 5);
  v5 = v3;
  v6 = v5;
  if (v5)
    v7 = v5;
  v8 = *(void **)(v4 + 280);
  *(_QWORD *)(v4 + 280) = v6;

  v9 = (md::LabelManager *)*((_QWORD *)this + 3);
  v14 = v6;
  if (v6)
    v10 = v14;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E42CA2E0;
  v11[1] = v9;
  v11[2] = &off_1E42B5110;
  v11[3] = v14;
  v16 = v11;
  md::LabelManager::queueCommand(v9, 46, 1, v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_9;
  }
  if (v16)
  {
    v13 = 5;
LABEL_9:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }

}

void sub_19F2E50BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LabelSettings::setLabelExclusionRegions(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  md::LabelManager *v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v3;
  v6 = v5;
  if (v5)
    v7 = v5;
  v8 = *(void **)(v4 + 112);
  *(_QWORD *)(v4 + 112) = v6;

  v9 = *(md::LabelManager **)(a1 + 24);
  v14 = v6;
  if (v6)
    v10 = v14;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E42CA178;
  v11[1] = v9;
  v11[2] = &off_1E42B5390;
  v11[3] = v14;
  v16 = v11;
  md::LabelManager::queueCommand(v9, 60, 1, v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_9;
  }
  if (v16)
  {
    v13 = 5;
LABEL_9:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }

}

void sub_19F2E524C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LabelSettings::setARWalkingFeatures(md::LabelSettings *this, VKARWalkingFeatureSet *a2, int a3)
{
  VKARWalkingFeatureSet *v5;
  VKARWalkingFeatureSet *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  VKARWalkingFeatureSet *v10;
  VKARWalkingFeatureSet *v11;
  VKARWalkingFeatureSet *v12;
  void *v13;
  md::LabelManager *v14;
  VKARWalkingFeatureSet *v15;
  VKARWalkingFeatureSet *v16;
  VKARWalkingFeatureSet *v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  VKARWalkingFeatureSet *v24;
  int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if ((a3 & 1) != 0 || *(VKARWalkingFeatureSet **)(*((_QWORD *)this + 5) + 144) != v5)
  {
    if (GEOGetVectorKitLabelSettingsLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelSettingsLog(void)::onceToken, &__block_literal_global_30722);
    v7 = GEOGetVectorKitLabelSettingsLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelSettingsLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v8 = "NO";
      if (a3)
        v8 = "YES";
      v21 = 136315394;
      v22 = v8;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "setARWalkingFeatures(force:%s):%@", (uint8_t *)&v21, 0x16u);
    }
    v9 = *((_QWORD *)this + 5);
    v10 = v6;
    v11 = v10;
    if (v10)
      v12 = v10;
    v13 = *(void **)(v9 + 144);
    *(_QWORD *)(v9 + 144) = v11;

    v14 = (md::LabelManager *)*((_QWORD *)this + 3);
    v15 = v11;
    v16 = v15;
    if (v11)
      v17 = v15;
    v25 = 0;
    v18 = (int *)operator new(0x28uLL);
    *(_QWORD *)v18 = &off_1E42C9DD0;
    *((_QWORD *)v18 + 1) = v14;
    *((_QWORD *)v18 + 2) = &off_1E42B4F50;
    *((_QWORD *)v18 + 3) = v16;
    v25 = v18;
    md::LabelManager::queueCommand(v14, 63, 1, &v21);
    v19 = v25;
    if (v25 == &v21)
    {
      v20 = 4;
      v19 = &v21;
    }
    else
    {
      if (!v25)
      {
LABEL_18:

        goto LABEL_19;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
    goto LABEL_18;
  }
LABEL_19:

}

void sub_19F2E5490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LabelManager::setScreenLabelFeatures(md::LabelManager *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v6[0] = &off_1E42C9F80;
  v6[1] = a1;
  v6[2] = v3;
  v7 = v6;
  md::LabelManager::queueCommand(a1, 69, 1, v6);
  v4 = v7;
  if (v7 == v6)
  {
    v5 = 4;
    v4 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

}

void sub_19F2E55B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F2E61AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, id a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

id GEOGetVectorKitVKMapSnapshotLog(void)
{
  if (GEOGetVectorKitVKMapSnapshotLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKMapSnapshotLog(void)::onceToken, &__block_literal_global_16513);
  return (id)GEOGetVectorKitVKMapSnapshotLog(void)::log;
}

uint64_t md::Device::Device(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  NSObject *v14;
  dispatch_queue_t v15;
  void *shared_weak_owners;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  int64x2_t v34;
  id v35;
  int v36;
  void *v37;
  char *v38;
  const char *v39;
  NSObject *v40;
  NSObject *v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  ggl::Data *v61;
  id v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unsigned __int8 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unsigned __int8 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unsigned __int8 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  md::SharedDeviceResources *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v107;
  geo::read_write_lock *v108;
  const char *v109;
  malloc_zone_t *zone;
  uint64_t v111;
  geo::read_write_lock *v112;
  const char *v113;
  malloc_zone_t *v114;
  uint64_t v115;
  geo::read_write_lock *v116;
  const char *v117;
  malloc_zone_t *v118;
  uint64_t v119;
  geo::read_write_lock *v120;
  const char *v121;
  malloc_zone_t *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  md::SharedDeviceResources **v126;
  uint64_t *v127;
  _QWORD *v128;
  std::__shared_weak_count *v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  int64x2_t v136;
  uint64_t v137;
  _BYTE buf[12];
  uint64_t v139;

  v1 = a1;
  v139 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v127 = (uint64_t *)(a1 + 8);
  v128 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v126 = (md::SharedDeviceResources **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  v134 = 0;
  v135 = 0;
  v132 = 0;
  v133 = 0;
  v130 = 0;
  v131 = 0;
  v129 = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 36) = xmmword_19FFB3350;
  *(_QWORD *)(v2 + 56) = 0xF0000000ELL;
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0x100000000;
  *(_QWORD *)v2 = &off_1E42B5C50;
  *(_QWORD *)(v2 + 144) = 850045863;
  *(_OWORD *)(v2 + 104) = 0u;
  v3 = (id *)(v2 + 104);
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  v4 = MTLCreateSystemDefaultDevice();
  v5 = *(void **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = v4;

  if (!*(_QWORD *)(v2 + 104))
    goto LABEL_64;
  v125 = v1;
  {
    v107 = operator new();
    *(_QWORD *)(v107 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v107 + 24) = "GeoGL";
    *(_OWORD *)(v107 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v107 = &off_1E42B5668;
    *(_QWORD *)(v107 + 8) = "GeoGL";
    *(_OWORD *)(v107 + 72) = 0u;
    *(_OWORD *)(v107 + 88) = 0u;
    *(_OWORD *)(v107 + 104) = 0u;
    *(_OWORD *)(v107 + 120) = 0u;
    *(_OWORD *)(v107 + 136) = 0u;
    *(_OWORD *)(v107 + 152) = 0u;
    *(_OWORD *)(v107 + 168) = 0u;
    *(_OWORD *)(v107 + 184) = 0u;
    *(_OWORD *)(v107 + 200) = 0u;
    *(_OWORD *)(v107 + 216) = 0u;
    *(_OWORD *)(v107 + 232) = 0u;
    *(_QWORD *)(v107 + 248) = 0;
    *(_OWORD *)(v107 + 56) = 0u;
    v108 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v107 + 56), 0);
    if ((_DWORD)v108)
      geo::read_write_lock::logFailure(v108, (uint64_t)"initialization", v109);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v107 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v107 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v107;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  v8 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                                        + 16))(ggl::Allocator::instance(void)::alloc, 352, 8);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3900;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v8[1].__shared_owners_ = (uint64_t)&off_1E42B7378;
  v10 = &v8[1].__shared_owners_;
  v8[1].__shared_weak_owners_ = 0;
  v8[2].__vftable = 0;
  v8[2].__shared_weak_owners_ = 0;
  v8[3].__vftable = 0;
  v8[2].__shared_owners_ = 0;
  {
    v111 = operator new();
    *(_QWORD *)(v111 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v111 + 24) = "GeoGL";
    *(_OWORD *)(v111 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v111 = &off_1E42B5668;
    *(_QWORD *)(v111 + 8) = "GeoGL";
    *(_OWORD *)(v111 + 72) = 0u;
    *(_OWORD *)(v111 + 88) = 0u;
    *(_OWORD *)(v111 + 104) = 0u;
    *(_OWORD *)(v111 + 120) = 0u;
    *(_OWORD *)(v111 + 136) = 0u;
    *(_OWORD *)(v111 + 152) = 0u;
    *(_OWORD *)(v111 + 168) = 0u;
    *(_OWORD *)(v111 + 184) = 0u;
    *(_OWORD *)(v111 + 200) = 0u;
    *(_OWORD *)(v111 + 216) = 0u;
    *(_OWORD *)(v111 + 232) = 0u;
    *(_QWORD *)(v111 + 248) = 0;
    *(_OWORD *)(v111 + 56) = 0u;
    v112 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v111 + 56), 0);
    if ((_DWORD)v112)
      geo::read_write_lock::logFailure(v112, (uint64_t)"initialization", v113);
    v114 = malloc_create_zone(0, 0);
    *(_QWORD *)(v111 + 48) = v114;
    malloc_set_zone_name(v114, "GeoGL");
    *(_QWORD *)(v111 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v111;
  }
  v8[3].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
  v8[3].__shared_weak_owners_ = 0;
  v8[4].__vftable = 0;
  v8[4].__shared_owners_ = 0;
  {
    v115 = operator new();
    *(_QWORD *)(v115 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v115 + 24) = "GeoGL";
    *(_OWORD *)(v115 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v115 = &off_1E42B5668;
    *(_QWORD *)(v115 + 8) = "GeoGL";
    *(_OWORD *)(v115 + 72) = 0u;
    *(_OWORD *)(v115 + 88) = 0u;
    *(_OWORD *)(v115 + 104) = 0u;
    *(_OWORD *)(v115 + 120) = 0u;
    *(_OWORD *)(v115 + 136) = 0u;
    *(_OWORD *)(v115 + 152) = 0u;
    *(_OWORD *)(v115 + 168) = 0u;
    *(_OWORD *)(v115 + 184) = 0u;
    *(_OWORD *)(v115 + 200) = 0u;
    *(_OWORD *)(v115 + 216) = 0u;
    *(_OWORD *)(v115 + 232) = 0u;
    *(_QWORD *)(v115 + 248) = 0;
    *(_OWORD *)(v115 + 56) = 0u;
    v116 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v115 + 56), 0);
    if ((_DWORD)v116)
      geo::read_write_lock::logFailure(v116, (uint64_t)"initialization", v117);
    v118 = malloc_create_zone(0, 0);
    *(_QWORD *)(v115 + 48) = v118;
    malloc_set_zone_name(v118, "GeoGL");
    *(_QWORD *)(v115 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v115;
  }
  v8[4].__shared_weak_owners_ = ggl::Allocator::instance(void)::alloc;
  v8[5].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v8[5].__shared_owners_ = 0u;
  v8[6].std::__shared_count = 0u;
  *(_OWORD *)&v8[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[7].__shared_owners_ = 0u;
  v8[8].std::__shared_count = 0u;
  v8[8].__shared_weak_owners_ = 0;
  LODWORD(v8[9].__vftable) = 1065353216;
  v8[9].__shared_owners_ = 850045863;
  *(_OWORD *)&v8[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[10].__shared_owners_ = 0u;
  v8[11].std::__shared_count = 0u;
  v8[1].__shared_owners_ = (uint64_t)&off_1E42BAB90;
  v8[11].__shared_weak_owners_ = 0;
  v8[12].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v8[13].__shared_weak_owners_ = 0;
  *(_OWORD *)&v8[12].__shared_owners_ = 0u;
  v8[13].std::__shared_count = 0u;
  {
    v119 = operator new();
    *(_QWORD *)(v119 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v119 + 24) = "GeoGL";
    *(_OWORD *)(v119 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v119 = &off_1E42B5668;
    *(_QWORD *)(v119 + 8) = "GeoGL";
    *(_OWORD *)(v119 + 72) = 0u;
    *(_OWORD *)(v119 + 88) = 0u;
    *(_OWORD *)(v119 + 104) = 0u;
    *(_OWORD *)(v119 + 120) = 0u;
    *(_OWORD *)(v119 + 136) = 0u;
    *(_OWORD *)(v119 + 152) = 0u;
    *(_OWORD *)(v119 + 168) = 0u;
    *(_OWORD *)(v119 + 184) = 0u;
    *(_OWORD *)(v119 + 200) = 0u;
    *(_OWORD *)(v119 + 216) = 0u;
    *(_OWORD *)(v119 + 232) = 0u;
    *(_QWORD *)(v119 + 248) = 0;
    *(_OWORD *)(v119 + 56) = 0u;
    v120 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v119 + 56), 0);
    if ((_DWORD)v120)
      geo::read_write_lock::logFailure(v120, (uint64_t)"initialization", v121);
    v122 = malloc_create_zone(0, 0);
    *(_QWORD *)(v119 + 48) = v122;
    malloc_set_zone_name(v122, "GeoGL");
    *(_QWORD *)(v119 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v119;
  }
  v8[14].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  LODWORD(v8[14].__shared_owners_) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = dispatch_queue_create("Resource Destruction Queue", v14);
  shared_weak_owners = (void *)v8[12].__shared_weak_owners_;
  v8[12].__shared_weak_owners_ = (uint64_t)v15;

  *(_QWORD *)&v17 = (char *)v8 + 32;
  *((_QWORD *)&v17 + 1) = v8;
  v18 = (std::__shared_weak_count *)v8[2].__vftable;
  if (v18)
  {
    if (v18->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v123 = v17;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v8[1].__shared_weak_owners_ = (uint64_t)v10;
    v8[2].__vftable = (std::__shared_weak_count_vtbl *)v8;
    std::__shared_weak_count::__release_weak(v18);
    v17 = v123;
  }
  else
  {
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v23 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v8[1].__shared_weak_owners_ = (uint64_t)v10;
    v8[2].__vftable = (std::__shared_weak_count_vtbl *)v8;
  }
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    v124 = v17;
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v124;
  }
LABEL_19:
  v26 = *(std::__shared_weak_count **)(v2 + 88);
  *(_OWORD *)(v2 + 80) = v17;
  v1 = v125;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = objc_msgSend(*v3, "newCommandQueue");
  v30 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v29;

  v31 = *(void **)(v2 + 112);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.MapKit");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setLabel:", v32);

  if ((objc_msgSend(*v3, "supportsFamily:", 1001) & 1) != 0)
  {
    v33 = 0x2000;
LABEL_28:
    *(_BYTE *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = v33;
    *(_DWORD *)(v2 + 28) = v33;
    *(_QWORD *)(v2 + 32) = 0x100000010;
    goto LABEL_29;
  }
  if (objc_msgSend(*v3, "supportsFamily:", 1003))
  {
    v33 = 0x4000;
    goto LABEL_28;
  }
LABEL_29:
  v137 = 0;
  v34 = 0uLL;
  v136 = 0u;
  v35 = *v3;
  if (*v3)
  {
    objc_msgSend(v35, "maxThreadsPerThreadgroup");
    v34 = v136;
    v36 = v137;
    v35 = *v3;
  }
  else
  {
    v36 = 0;
  }
  *(int32x2_t *)(v2 + 40) = vmovn_s64(v34);
  *(_DWORD *)(v2 + 48) = v36;
  *(_BYTE *)(v2 + 17) = 1;
  *(_BYTE *)(v2 + 18) = objc_msgSend(v35, "supportsMemorylessRenderTargets");
  objc_msgSend(MEMORY[0x1E0CC6A48], "sharedCaptureManager");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(v2 + 19) = objc_msgSend(v37, "supportsDestination:", 2);

  *(_QWORD *)(v2 + 56) = 0xF0000000ELL;
  *(_QWORD *)(v2 + 64) = 0;
  if (objc_msgSend(*(id *)(v2 + 104), "supportsFamily:", 1001))
    *(_BYTE *)(v2 + 20) = 1;
  v38 = getenv("GGL_DISABLE_FBF");
  if (v38)
  {
    v39 = v38;
    if (GEOGetGeoGLDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
    v40 = (id)GEOGetGeoGLDefaultLog_log;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v39;
      _os_log_impl(&dword_19F029000, v40, OS_LOG_TYPE_INFO, "GGL_DISABLE_FBF=%s", buf, 0xCu);
    }

    if (atoi(v39))
      *(_BYTE *)(v2 + 20) = 0;
  }
  if (GEOGetGeoGLDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
  v41 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    v42 = *(unsigned __int8 *)(v2 + 20);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v42;
    _os_log_impl(&dword_19F029000, v41, OS_LOG_TYPE_INFO, "SupportsFramebufferFetch=%d", buf, 8u);
  }

  if (objc_msgSend(*v3, "supportsFamily:", 1006))
    *(_BYTE *)(v2 + 22) = 1;
  if (objc_msgSend(*v3, "supportsFamily:", 1005))
    *(_DWORD *)(v2 + 36) = 16;
  if (objc_msgSend(*v3, "supportsFamily:", 1004))
    *(_BYTE *)(v2 + 21) = 1;
  if (objc_msgSend(*v3, "supportsFamily:", 1002))
    *(_BYTE *)(v2 + 16) = 1;
  if (objc_msgSend(*v3, "supportsFamily:", 1005))
    *(_BYTE *)(v2 + 23) = objc_msgSend(*v3, "supportsUnalignedVertexFetch");
  v43 = (_QWORD *)operator new();
  *v43 = &off_1E42B5C98;
  v43[1] = v2;
  v44 = (_QWORD *)operator new();
  *v44 = &off_1E42BACA8;
  v44[1] = v2;
  v43[2] = v44;
  v45 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = v43;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *v3;
  if (objc_msgSend(v46, "supportsBinaryArchives"))
  {
    v47 = objc_opt_new();
    v48 = *(void **)(v2 + 120);
    *(_QWORD *)(v2 + 120) = v47;

    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VectorKit"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "pathForResource:ofType:inDirectory:", CFSTR("binary"), CFSTR("metallib"), CFSTR("metal_libraries"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (v50)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v2 + 120), "setUrl:", v51);
      objc_msgSend(*(id *)(v2 + 120), "setOptions:", objc_msgSend(*(id *)(v2 + 120), "options") | 0x20);

    }
    v52 = *(void **)(v2 + 104);
    v53 = *(_QWORD *)(v2 + 120);
    *(_QWORD *)buf = 0;
    v54 = objc_msgSend(v52, "newBinaryArchiveWithDescriptor:error:", v53, buf);
    v55 = *(id *)buf;
    v56 = *(void **)(v2 + 128);
    *(_QWORD *)(v2 + 128) = v54;

    if (v55)
    {
      objc_msgSend(v55, "localizedDescription");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog((NSString *)CFSTR("binary archive error: %@"), v57);

    }
  }

LABEL_64:
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VectorKit"));
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "pathForResource:ofType:inDirectory:", CFSTR("AlloyCommonLibrary"), CFSTR("metallib"), CFSTR("metal_libraries"));
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  if (v59)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = (ggl::Data *)operator new();
    v62 = objc_retainAutorelease(v60);
    ggl::Data::Data(v61, (const unsigned __int8 *)objc_msgSend(v62, "bytes"), objc_msgSend(v62, "length"));
    v136.i64[0] = (uint64_t)v61;
    v63 = (std::__shared_weak_count *)operator new(0x78uLL);
    v63->__shared_owners_ = 0;
    v63->__shared_weak_owners_ = 0;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E38C8;
    v64 = v135;
    v134 = ggl::CommonLibraryMTLData::CommonLibraryMTLData(&v63[1].__vftable, v136.i64);
    v135 = v63;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v136.i64[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v136.i64[0] + 8))(v136.i64[0]);

  }
  else
  {
    v67 = (_QWORD *)operator new();
    v67[1] = 0;
    v67[2] = 0;
    *v67 = off_1E42BB980;
    v136.i64[0] = (uint64_t)v67;
    v68 = (std::__shared_weak_count *)operator new(0x78uLL);
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E38C8;
    v69 = v135;
    v134 = ggl::CommonLibraryMTLData::CommonLibraryMTLData(&v68[1].__vftable, v136.i64);
    v135 = v68;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (v136.i64[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v136.i64[0] + 8))(v136.i64[0]);
  }
  v72 = (std::__shared_weak_count *)operator new(0x80uLL);
  v72->__shared_owners_ = 0;
  v72->__shared_weak_owners_ = 0;
  v72->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4038;
  {
    standardLibraryFunctionIds(void)::ids = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
    dword_1EE57A3D4 = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
    dword_1EE57A3D8 = ggl::crc32::compute<19ul>("ARMeshShaderVertex");
    dword_1EE57A3DC = ggl::crc32::compute<21ul>("ARMeshShaderFragment");
    dword_1EE57A3E0 = ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
    dword_1EE57A3E4 = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
    dword_1EE57A3E8 = ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
    dword_1EE57A3EC = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
    dword_1EE57A3F0 = ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
    dword_1EE57A3F4 = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
    dword_1EE57A3F8 = ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
    dword_1EE57A3FC = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
    dword_1EE57A400 = ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
    dword_1EE57A404 = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
    dword_1EE57A408 = ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
    dword_1EE57A40C = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
    dword_1EE57A410 = ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
    dword_1EE57A414 = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
    dword_1EE57A418 = ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
    dword_1EE57A41C = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
    dword_1EE57A420 = ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
    dword_1EE57A424 = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
    dword_1EE57A428 = ggl::crc32::compute<19ul>("CircleShaderVertex");
    dword_1EE57A42C = ggl::crc32::compute<21ul>("CircleShaderFragment");
    dword_1EE57A430 = ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
    dword_1EE57A434 = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
    dword_1EE57A438 = ggl::crc32::compute<17ul>("ClutShaderVertex");
    dword_1EE57A43C = ggl::crc32::compute<19ul>("ClutShaderFragment");
    dword_1EE57A440 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
    unk_1EE57A444 = 20471526;
    dword_1EE57A448 = ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
    dword_1EE57A44C = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
    dword_1EE57A450 = ggl::crc32::compute<18ul>("DebugShaderVertex");
    dword_1EE57A454 = ggl::crc32::compute<20ul>("DebugShaderFragment");
    dword_1EE57A458 = ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
    dword_1EE57A45C = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
    dword_1EE57A460 = ggl::crc32::compute<22ul>("DebugLineShaderVertex");
    dword_1EE57A464 = ggl::crc32::compute<24ul>("DebugLineShaderFragment");
    dword_1EE57A468 = ggl::crc32::compute<22ul>("HillshadeShaderVertex");
    dword_1EE57A46C = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
    dword_1EE57A470 = ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
    dword_1EE57A474 = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
    dword_1EE57A478 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
    unk_1EE57A47C = -1618896539;
    dword_1EE57A480 = ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
    dword_1EE57A484 = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
    dword_1EE57A488 = ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
    dword_1EE57A48C = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
    dword_1EE57A490 = ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
    dword_1EE57A494 = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
    qword_1EE57A498 = 0x38D1A78590EBD58DLL;
    dword_1EE57A4A0 = ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
    dword_1EE57A4A4 = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
    qword_1EE57A4A8 = 0xF73A1BC06737D9BCLL;
    dword_1EE57A4B0 = ggl::crc32::compute<16ul>("FogShaderVertex");
    dword_1EE57A4B4 = ggl::crc32::compute<18ul>("FogShaderFragment");
    dword_1EE57A4B8 = ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
    dword_1EE57A4BC = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
    dword_1EE57A4C0 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
    unk_1EE57A4C4 = -1408204360;
    dword_1EE57A4C8 = ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
    dword_1EE57A4CC = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
    dword_1EE57A4D0 = ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
    dword_1EE57A4D4 = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
    dword_1EE57A4D8 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
    dword_1EE57A4DC = 330896332;
    dword_1EE57A4E0 = ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
    dword_1EE57A4E4 = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
    dword_1EE57A4E8 = ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
    dword_1EE57A4EC = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
    dword_1EE57A4F0 = ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
    dword_1EE57A4F4 = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
    dword_1EE57A4F8 = ggl::crc32::compute<17ul>("GlowShaderVertex");
    dword_1EE57A4FC = ggl::crc32::compute<19ul>("GlowShaderFragment");
    dword_1EE57A500 = ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
    dword_1EE57A504 = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
    dword_1EE57A508 = ggl::crc32::compute<20ul>("Glyph3dShaderVertex");
    dword_1EE57A50C = ggl::crc32::compute<22ul>("Glyph3dShaderFragment");
    dword_1EE57A510 = ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
    dword_1EE57A514 = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
    dword_1EE57A518 = ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
    dword_1EE57A51C = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
    dword_1EE57A520 = ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
    dword_1EE57A524 = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
    dword_1EE57A528 = ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
    dword_1EE57A52C = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
    xmmword_1EE57A530 = xmmword_19FFB3360;
    qword_1EE57A540 = 0xA41F7BC1E07B22ALL;
    dword_1EE57A548 = ggl::crc32::compute<17ul>("GridShaderVertex");
    dword_1EE57A54C = ggl::crc32::compute<19ul>("GridShaderFragment");
    dword_1EE57A550 = ggl::crc32::compute<19ul>("GridUVShaderVertex");
    dword_1EE57A554 = ggl::crc32::compute<21ul>("GridUVShaderFragment");
    dword_1EE57A558 = ggl::crc32::compute<17ul>("IconShaderVertex");
    dword_1EE57A55C = ggl::crc32::compute<19ul>("IconShaderFragment");
    dword_1EE57A560 = ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
    dword_1EE57A564 = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
    dword_1EE57A568 = ggl::crc32::compute<21ul>("WaypointShaderVertex");
    dword_1EE57A56C = ggl::crc32::compute<23ul>("WaypointShaderFragment");
    dword_1EE57A570 = ggl::crc32::compute<19ul>("ShadowShaderVertex");
    dword_1EE57A574 = ggl::crc32::compute<21ul>("ShadowShaderFragment");
    dword_1EE57A578 = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
    dword_1EE57A57C = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
    dword_1EE57A580 = ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
    dword_1EE57A584 = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
    dword_1EE57A588 = ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
    dword_1EE57A58C = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
    dword_1EE57A590 = ggl::crc32::compute<17ul>("LineShaderVertex");
    dword_1EE57A594 = ggl::crc32::compute<19ul>("LineShaderFragment");
    dword_1EE57A598 = ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
    dword_1EE57A59C = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
    dword_1EE57A5A0 = ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
    dword_1EE57A5A4 = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
    dword_1EE57A5A8 = ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
    dword_1EE57A5AC = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
    dword_1EE57A5B0 = ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
    dword_1EE57A5B4 = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
    dword_1EE57A5B8 = ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
    dword_1EE57A5BC = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
    dword_1EE57A5C0 = ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
    dword_1EE57A5C4 = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
    dword_1EE57A5C8 = ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
    dword_1EE57A5CC = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
    dword_1EE57A5D0 = ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
    dword_1EE57A5D4 = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
    dword_1EE57A5D8 = ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
    dword_1EE57A5DC = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
    qword_1EE57A5E0 = 0x1CF0EFDFC45DA445;
    dword_1EE57A5E8 = ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
    dword_1EE57A5EC = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
    dword_1EE57A5F0 = ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
    dword_1EE57A5F4 = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
    dword_1EE57A5F8 = ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
    dword_1EE57A5FC = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
    dword_1EE57A600 = ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
    dword_1EE57A604 = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
    dword_1EE57A608 = ggl::crc32::compute<29ul>("PolygonSolidFillShaderVertex");
    dword_1EE57A60C = ggl::crc32::compute<31ul>("PolygonSolidFillShaderFragment");
    dword_1EE57A610 = ggl::crc32::compute<31ul>("PolygonSolidFillS2ShaderVertex");
    dword_1EE57A614 = ggl::crc32::compute<33ul>("PolygonSolidFillS2ShaderFragment");
    dword_1EE57A618 = ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
    dword_1EE57A61C = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
    dword_1EE57A620 = ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
    dword_1EE57A624 = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
    dword_1EE57A628 = ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
    dword_1EE57A62C = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
    dword_1EE57A630 = ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
    dword_1EE57A634 = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
    dword_1EE57A638 = ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
    dword_1EE57A63C = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
    dword_1EE57A640 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
    dword_1EE57A644 = 2117257512;
    dword_1EE57A648 = ggl::crc32::compute<18ul>("PointShaderVertex");
    dword_1EE57A64C = ggl::crc32::compute<20ul>("PointShaderFragment");
    dword_1EE57A650 = ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
    dword_1EE57A654 = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
    dword_1EE57A658 = ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
    dword_1EE57A65C = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
    dword_1EE57A660 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
    dword_1EE57A664 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
    dword_1EE57A668 = ggl::crc32::compute<22ul>("RouteLineShaderVertex");
    dword_1EE57A66C = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
    dword_1EE57A670 = ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
    dword_1EE57A674 = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
    dword_1EE57A678 = ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
    dword_1EE57A67C = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
    dword_1EE57A680 = ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
    dword_1EE57A684 = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
    dword_1EE57A688 = ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
    dword_1EE57A68C = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
    dword_1EE57A690 = ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
    dword_1EE57A694 = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
    dword_1EE57A698 = ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
    dword_1EE57A69C = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
    dword_1EE57A6A0 = ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
    dword_1EE57A6A4 = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
    dword_1EE57A6A8 = ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
    dword_1EE57A6AC = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
    dword_1EE57A6B0 = ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
    dword_1EE57A6B4 = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
    dword_1EE57A6B8 = ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
    dword_1EE57A6BC = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
    dword_1EE57A6C0 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
    dword_1EE57A6C4 = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
    dword_1EE57A6C8 = ggl::crc32::compute<16ul>("SkyShaderVertex");
    dword_1EE57A6CC = ggl::crc32::compute<18ul>("SkyShaderFragment");
    dword_1EE57A6D0 = ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
    dword_1EE57A6D4 = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
    dword_1EE57A6D8 = ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
    dword_1EE57A6DC = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
    dword_1EE57A6E0 = ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
    dword_1EE57A6E4 = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
    dword_1EE57A6E8 = ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
    dword_1EE57A6EC = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
    qword_1EE57A6F0 = 0x62DEDA402183DDLL;
    dword_1EE57A6F8 = ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
    dword_1EE57A6FC = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
    dword_1EE57A700 = ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
    dword_1EE57A704 = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
    xmmword_1EE57A708 = xmmword_19FFB3370;
    qword_1EE57A718 = 0xC1D81A17228E6BF7;
    dword_1EE57A720 = ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
    dword_1EE57A724 = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
    dword_1EE57A728 = ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
    dword_1EE57A72C = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
    dword_1EE57A730 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
    dword_1EE57A73C = 940636506;
    qword_1EE57A734 = 0xAF297EB31C5A8EEELL;
    dword_1EE57A740 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
    dword_1EE57A74C = -674054788;
    qword_1EE57A744 = 0x4C9B7E2DAAC07444;
    dword_1EE57A750 = ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
    dword_1EE57A754 = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
    dword_1EE57A758 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
    dword_1EE57A75C = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
    dword_1EE57A760 = ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
    dword_1EE57A764 = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
    dword_1EE57A768 = ggl::crc32::compute<21ul>("TexturedShaderVertex");
    dword_1EE57A76C = ggl::crc32::compute<23ul>("TexturedShaderFragment");
    dword_1EE57A770 = ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
    dword_1EE57A774 = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
    dword_1EE57A778 = ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
    dword_1EE57A77C = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
    qword_1EE57A780 = 0xF407266D062EB1E6;
    dword_1EE57A788 = ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
    dword_1EE57A78C = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
    dword_1EE57A790 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
    dword_1EE57A794 = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
    dword_1EE57A798 = ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
    dword_1EE57A79C = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
    dword_1EE57A7A0 = ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
    dword_1EE57A7A4 = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
    dword_1EE57A7A8 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
    dword_1EE57A7AC = 2087883320;
    dword_1EE57A7B0 = ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
    dword_1EE57A7B4 = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
    dword_1EE57A7B8 = ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
    dword_1EE57A7BC = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
    dword_1EE57A7C0 = ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
    dword_1EE57A7C4 = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
    dword_1EE57A7C8 = ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
    dword_1EE57A7CC = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
    qword_1EE57A7D0 = 0xEFDD56E6681732CCLL;
    dword_1EE57A7D8 = ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
    dword_1EE57A7DC = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
    dword_1EE57A7E0 = ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
    dword_1EE57A7E4 = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
    dword_1EE57A7E8 = ggl::crc32::compute<22ul>("VenueWallShaderVertex");
    dword_1EE57A7EC = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
    dword_1EE57A7F0 = ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
    dword_1EE57A7F4 = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
    dword_1EE57A7F8 = ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
    dword_1EE57A7FC = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
    dword_1EE57A800 = ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
    dword_1EE57A804 = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
    dword_1EE57A808 = ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
    dword_1EE57A80C = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
    dword_1EE57A810 = ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
    dword_1EE57A814 = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
    qword_1EE57A818 = 0x9B3262D45046BFB4;
    dword_1EE57A820 = ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
    dword_1EE57A824 = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
    dword_1EE57A828 = ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
    dword_1EE57A82C = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
    dword_1EE57A830 = ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
    dword_1EE57A834 = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
    dword_1EE57A838 = ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
    dword_1EE57A83C = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
    qword_1EE57A840 = 0x6213AD6A92B79FF6;
    dword_1EE57A848 = ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
    dword_1EE57A84C = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
    dword_1EE57A850 = ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
    dword_1EE57A854 = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
    dword_1EE57A858 = ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
    dword_1EE57A85C = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
    dword_1EE57A860 = ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
    dword_1EE57A864 = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
    dword_1EE57A868 = ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
    dword_1EE57A86C = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
    dword_1EE57A870 = ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
    dword_1EE57A874 = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
    dword_1EE57A878 = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
    dword_1EE57A87C = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
    dword_1EE57A880 = ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
    dword_1EE57A884 = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
    dword_1EE57A888 = ggl::crc32::compute<32ul>("ClearTextureComputeShaderKernel");
    dword_1EE57A88C = ggl::crc32::compute<36ul>("DownscaleTextureComputeShaderKernel");
    dword_1EE57A890 = ggl::crc32::compute<22ul>("ResetTileShaderKernel");
  }
  v136.i64[0] = 0;
  ggl::MTLShaderLibraryData::MTLShaderLibraryData((uint64_t)&v72[1], 1, v136.i64, (uint64_t)&standardLibraryFunctionIds(void)::ids, (uint64_t)standardLibraryMTLFunctionSignatures(void)::signatures, 0x131uLL);
  if (v136.i64[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v136.i64[0] + 8))(v136.i64[0]);
  v72[5].__vftable = (std::__shared_weak_count_vtbl *)"com.apple.VectorKit";
  v72[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BB610;
  v74 = v133;
  v132 = &v72[1].__vftable;
  v133 = v72;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)operator new(0x80uLL);
  v77->__shared_owners_ = 0;
  v77->__shared_weak_owners_ = 0;
  v77->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F90;
  {
    flyoverLibraryFunctionIds(void)::ids = ggl::crc32::compute<24ul>("EarthCoronaShaderVertex");
    dword_1ECE30D54 = ggl::crc32::compute<26ul>("EarthCoronaShaderFragment");
    dword_1ECE30D58 = ggl::crc32::compute<23ul>("EndOfWorldShaderVertex");
    dword_1ECE30D5C = ggl::crc32::compute<25ul>("EndOfWorldShaderFragment");
    dword_1ECE30D60 = ggl::crc32::compute<20ul>("FlyoverShaderVertex");
    dword_1ECE30D64 = ggl::crc32::compute<22ul>("FlyoverShaderFragment");
    dword_1ECE30D68 = ggl::crc32::compute<25ul>("FlyoverPolarShaderVertex");
    dword_1ECE30D6C = ggl::crc32::compute<27ul>("FlyoverPolarShaderFragment");
    dword_1ECE30D70 = ggl::crc32::compute<26ul>("FlyoverBorderShaderVertex");
    dword_1ECE30D74 = ggl::crc32::compute<28ul>("FlyoverBorderShaderFragment");
    dword_1ECE30D78 = ggl::crc32::compute<32ul>("FlyoverBorderRibbonShaderVertex");
    dword_1ECE30D7C = ggl::crc32::compute<34ul>("FlyoverBorderRibbonShaderFragment");
    dword_1ECE30D80 = ggl::crc32::compute<28ul>("FlyoverManeuverShaderVertex");
    dword_1ECE30D84 = ggl::crc32::compute<30ul>("FlyoverManeuverShaderFragment");
    dword_1ECE30D88 = ggl::crc32::compute<26ul>("FlyoverMaskedShaderVertex");
    dword_1ECE30D8C = ggl::crc32::compute<28ul>("FlyoverMaskedShaderFragment");
    dword_1ECE30D90 = ggl::crc32::compute<25ul>("FlyoverMorphShaderVertex");
    dword_1ECE30D94 = ggl::crc32::compute<27ul>("FlyoverMorphShaderFragment");
    dword_1ECE30D98 = ggl::crc32::compute<31ul>("FlyoverMorphBorderShaderVertex");
    dword_1ECE30D9C = ggl::crc32::compute<33ul>("FlyoverMorphBorderShaderFragment");
    dword_1ECE30DA0 = ggl::crc32::compute<30ul>("FlyoverMorphNightShaderVertex");
    dword_1ECE30DA4 = ggl::crc32::compute<32ul>("FlyoverMorphNightShaderFragment");
    dword_1ECE30DA8 = ggl::crc32::compute<25ul>("FlyoverNightShaderVertex");
    dword_1ECE30DAC = ggl::crc32::compute<27ul>("FlyoverNightShaderFragment");
    dword_1ECE30DB0 = ggl::crc32::compute<30ul>("FlyoverNightPolarShaderVertex");
    dword_1ECE30DB4 = ggl::crc32::compute<32ul>("FlyoverNightPolarShaderFragment");
    dword_1ECE30DB8 = ggl::crc32::compute<28ul>("FlyoverNightDimShaderVertex");
    dword_1ECE30DBC = ggl::crc32::compute<30ul>("FlyoverNightDimShaderFragment");
    dword_1ECE30DC0 = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
    dword_1ECE30DC4 = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
    dword_1ECE30DC8 = ggl::crc32::compute<38ul>("FlyoverPostchainCompositeShaderVertex");
    unk_1ECE30DCC = xmmword_19FFB3380;
    dword_1ECE30DDC = -525293759;
    dword_1ECE30DE0 = ggl::crc32::compute<35ul>("FlyoverPostchainBGBlurShaderVertex");
    dword_1ECE30DE4 = ggl::crc32::compute<37ul>("FlyoverPostchainBGBlurShaderFragment");
    dword_1ECE30DE8 = ggl::crc32::compute<35ul>("FlyoverPostchainFGBlurShaderVertex");
    dword_1ECE30DEC = ggl::crc32::compute<37ul>("FlyoverPostchainFGBlurShaderFragment");
    dword_1ECE30DF0 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
    unk_1ECE30DF4 = -163900208;
    dword_1ECE30DF8 = ggl::crc32::compute<38ul>("FlyoverRoadFillProceduralShaderVertex");
    unk_1ECE30DFC = -1095845613;
    dword_1ECE30E00 = ggl::crc32::compute<36ul>("FlyoverRoadFillTexturedShaderVertex");
    dword_1ECE30E04 = ggl::crc32::compute<38ul>("FlyoverRoadFillTexturedShaderFragment");
    qword_1ECE30E08 = 0x391D3DD7CC01D713;
    dword_1ECE30E10 = ggl::crc32::compute<38ul>("FlyoverRoadStrokeTexturedShaderVertex");
    unk_1ECE30E14 = -1316602910;
    dword_1ECE30E18 = ggl::crc32::compute<25ul>("FlyoverRouteShaderVertex");
    dword_1ECE30E1C = ggl::crc32::compute<27ul>("FlyoverRouteShaderFragment");
    dword_1ECE30E20 = ggl::crc32::compute<27ul>("FlyoverTrafficShaderVertex");
    dword_1ECE30E24 = ggl::crc32::compute<29ul>("FlyoverTrafficShaderFragment");
    dword_1ECE30E28 = ggl::crc32::compute<22ul>("SolidLineShaderVertex");
    dword_1ECE30E2C = ggl::crc32::compute<24ul>("SolidLineShaderFragment");
    dword_1ECE30E30 = ggl::crc32::compute<18ul>("StarsShaderVertex");
    dword_1ECE30E34 = ggl::crc32::compute<20ul>("StarsShaderFragment");
    dword_1ECE30E38 = ggl::crc32::compute<32ul>("StenciledAlphaClearShaderVertex");
    dword_1ECE30E3C = ggl::crc32::compute<34ul>("StenciledAlphaClearShaderFragment");
    dword_1ECE30E40 = ggl::crc32::compute<28ul>("TileBaseSurfaceShaderVertex");
    dword_1ECE30E44 = ggl::crc32::compute<30ul>("TileBaseSurfaceShaderFragment");
    dword_1ECE30E48 = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
    dword_1ECE30E4C = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
  }
  v136.i64[0] = 0;
  ggl::MTLShaderLibraryData::MTLShaderLibraryData((uint64_t)&v77[1], 1, v136.i64, (uint64_t)&flyoverLibraryFunctionIds(void)::ids, (uint64_t)flyoverLibraryMTLFunctionSignatures(void)::signatures, 0x40uLL);
  if (v136.i64[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v136.i64[0] + 8))(v136.i64[0]);
  v77[5].__vftable = (std::__shared_weak_count_vtbl *)"com.apple.VectorKit";
  v77[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BB550;
  v79 = v131;
  v130 = &v77[1].__vftable;
  v131 = v77;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)operator new(0x80uLL);
  v82->__shared_owners_ = 0;
  v82->__shared_weak_owners_ = 0;
  v82->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C10;
  {
    vSLibraryFunctionIds(void)::ids = ggl::crc32::compute<17ul>("ViewShaderVertex");
    dword_1ECE44E24 = ggl::crc32::compute<19ul>("ViewShaderFragment");
    dword_1ECE44E28 = ggl::crc32::compute<29ul>("ViewStretchAlphaShaderVertex");
    dword_1ECE44E2C = ggl::crc32::compute<31ul>("ViewStretchAlphaShaderFragment");
    dword_1ECE44E30 = ggl::crc32::compute<18ul>("BlurXShaderVertex");
    dword_1ECE44E34 = ggl::crc32::compute<20ul>("BlurXShaderFragment");
    dword_1ECE44E38 = ggl::crc32::compute<18ul>("BlurYShaderVertex");
    dword_1ECE44E3C = ggl::crc32::compute<20ul>("BlurYShaderFragment");
    dword_1ECE44E40 = ggl::crc32::compute<25ul>("ShrinkBlur4XShaderVertex");
    dword_1ECE44E44 = ggl::crc32::compute<27ul>("ShrinkBlur4XShaderFragment");
    dword_1ECE44E48 = ggl::crc32::compute<26ul>("VSCompositingShaderVertex");
    dword_1ECE44E4C = ggl::crc32::compute<28ul>("VSCompositingShaderFragment");
    dword_1ECE44E50 = ggl::crc32::compute<26ul>("VSPassthroughShaderVertex");
    dword_1ECE44E54 = ggl::crc32::compute<28ul>("VSPassthroughShaderFragment");
    dword_1ECE44E58 = ggl::crc32::compute<21ul>("VSSpriteShaderVertex");
    dword_1ECE44E5C = ggl::crc32::compute<23ul>("VSSpriteShaderFragment");
  }
  v136.i64[0] = 0;
  ggl::MTLShaderLibraryData::MTLShaderLibraryData((uint64_t)&v82[1], 1, v136.i64, (uint64_t)&vSLibraryFunctionIds(void)::ids, (uint64_t)vSLibraryMTLFunctionSignatures(void)::signatures, 0x10uLL);
  if (v136.i64[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v136.i64[0] + 8))(v136.i64[0]);
  v82[5].__vftable = (std::__shared_weak_count_vtbl *)"com.apple.VectorKit";
  v82[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BB090;
  v84 = v129;
  v128 = &v82[1].__vftable;
  v129 = v82;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v2 = operator new();
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    *(_OWORD *)(v2 + 36) = xmmword_19FFB3350;
    *(_QWORD *)(v2 + 56) = 0xF0000000ELL;
    *(_QWORD *)(v2 + 64) = 0;
    *(_BYTE *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 96) = 1;
    *(_QWORD *)v2 = &off_1E42B5938;
    *(_DWORD *)v1 = 1;
  }
  v87 = (_QWORD *)operator new();
  *v87 = &off_1E42E7C98;
  v87[1] = 0;
  v87[2] = 0;
  v87[3] = v2;
  v88 = *(std::__shared_weak_count **)(v1 + 16);
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v87;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = operator new();
  v92 = md::SharedDeviceResources::SharedDeviceResources(v91, v127, &v134, (uint64_t *)&v132, (uint64_t *)&v130, (uint64_t *)&v128);
  v93 = *v126;
  *v126 = (md::SharedDeviceResources *)v92;
  if (v93)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v93);
    MEMORY[0x1A1AF4E00]();
  }
  v94 = v129;
  if (v129)
  {
    v95 = (unint64_t *)&v129->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v131;
  if (v131)
  {
    v98 = (unint64_t *)&v131->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v133;
  if (v133)
  {
    v101 = (unint64_t *)&v133->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v135;
  if (v135)
  {
    v104 = (unint64_t *)&v135->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  return v1;
}

void sub_19F2E8C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, md::SharedDeviceResources **a10, uint64_t a11, ...)
{
  uint64_t v11;
  std::mutex *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  va_list va;
  uint64_t v25;
  uint64_t v26;
  va_list va1;
  uint64_t v28;
  uint64_t v29;
  va_list va2;
  uint64_t v31;
  va_list va3;

  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v23 = va_arg(va1, _QWORD);
  v25 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v26 = va_arg(va2, _QWORD);
  v28 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v29 = va_arg(va3, _QWORD);
  v31 = va_arg(va3, _QWORD);

  std::mutex::~mutex(v12);
  v19 = *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v11 + 136) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);

  *(_QWORD *)v11 = off_1E42BC1A8;
  v20 = *(std::__shared_weak_count **)(v11 + 88);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  MEMORY[0x1A1AF4E00](v11, 0x10A1C405B3935E5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::unique_ptr<md::SharedDeviceResources>::~unique_ptr[abi:nn180100](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

BOOL ggl::MetalDevice::isDeviceValid(ggl::MetalDevice *this)
{
  return *((_QWORD *)this + 13) != 0;
}

uint64_t ggl::ShaderLibrary::ShaderLibrary(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  geo::read_write_lock *v116;
  const char *v117;
  malloc_zone_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  geo::read_write_lock *v155;
  const char *v156;
  malloc_zone_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _DWORD *v162;
  int *v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  _DWORD *v167;
  int *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _DWORD *v174;
  int *v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  _DWORD *v179;
  int *v180;
  int v181;
  uint64_t v183;
  geo::read_write_lock *v184;
  const char *v185;
  malloc_zone_t *zone;
  uint64_t v187;
  geo::read_write_lock *v188;
  const char *v189;
  malloc_zone_t *v190;
  uint64_t v191;
  geo::read_write_lock *v192;
  const char *v193;
  malloc_zone_t *v194;
  uint64_t v195;
  geo::read_write_lock *v196;
  const char *v197;
  malloc_zone_t *v198;
  uint64_t v199;
  geo::read_write_lock *v200;
  const char *v201;
  malloc_zone_t *v202;
  uint64_t v203;
  uint64_t *v204;

  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B67D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  {
    v183 = operator new();
    *(_QWORD *)(v183 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v183 + 24) = "GeoGL";
    *(_OWORD *)(v183 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v183 = &off_1E42B5668;
    *(_QWORD *)(v183 + 8) = "GeoGL";
    *(_OWORD *)(v183 + 72) = 0u;
    *(_OWORD *)(v183 + 88) = 0u;
    *(_OWORD *)(v183 + 104) = 0u;
    *(_OWORD *)(v183 + 120) = 0u;
    *(_OWORD *)(v183 + 136) = 0u;
    *(_OWORD *)(v183 + 152) = 0u;
    *(_OWORD *)(v183 + 168) = 0u;
    *(_OWORD *)(v183 + 184) = 0u;
    *(_OWORD *)(v183 + 200) = 0u;
    *(_OWORD *)(v183 + 216) = 0u;
    *(_OWORD *)(v183 + 232) = 0u;
    *(_QWORD *)(v183 + 248) = 0;
    *(_OWORD *)(v183 + 56) = 0u;
    v184 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v183 + 56), 0);
    if ((_DWORD)v184)
      geo::read_write_lock::logFailure(v184, (uint64_t)"initialization", v185);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v183 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v183 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v183;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  {
    v187 = operator new();
    *(_QWORD *)(v187 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v187 + 24) = "GeoGL";
    *(_OWORD *)(v187 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v187 = &off_1E42B5668;
    *(_QWORD *)(v187 + 8) = "GeoGL";
    *(_OWORD *)(v187 + 72) = 0u;
    *(_OWORD *)(v187 + 88) = 0u;
    *(_OWORD *)(v187 + 104) = 0u;
    *(_OWORD *)(v187 + 120) = 0u;
    *(_OWORD *)(v187 + 136) = 0u;
    *(_OWORD *)(v187 + 152) = 0u;
    *(_OWORD *)(v187 + 168) = 0u;
    *(_OWORD *)(v187 + 184) = 0u;
    *(_OWORD *)(v187 + 200) = 0u;
    *(_OWORD *)(v187 + 216) = 0u;
    *(_OWORD *)(v187 + 232) = 0u;
    *(_QWORD *)(v187 + 248) = 0;
    *(_OWORD *)(v187 + 56) = 0u;
    v188 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v187 + 56), 0);
    if ((_DWORD)v188)
      geo::read_write_lock::logFailure(v188, (uint64_t)"initialization", v189);
    v190 = malloc_create_zone(0, 0);
    *(_QWORD *)(v187 + 48) = v190;
    malloc_set_zone_name(v190, "GeoGL");
    *(_QWORD *)(v187 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v187;
  }
  v9 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 112) = 0;
  v10 = a1 + 112;
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  {
    v191 = operator new();
    *(_QWORD *)(v191 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v191 + 24) = "GeoGL";
    *(_OWORD *)(v191 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v191 = &off_1E42B5668;
    *(_QWORD *)(v191 + 8) = "GeoGL";
    *(_OWORD *)(v191 + 72) = 0u;
    *(_OWORD *)(v191 + 88) = 0u;
    *(_OWORD *)(v191 + 104) = 0u;
    *(_OWORD *)(v191 + 120) = 0u;
    *(_OWORD *)(v191 + 136) = 0u;
    *(_OWORD *)(v191 + 152) = 0u;
    *(_OWORD *)(v191 + 168) = 0u;
    *(_OWORD *)(v191 + 184) = 0u;
    *(_OWORD *)(v191 + 200) = 0u;
    *(_OWORD *)(v191 + 216) = 0u;
    *(_OWORD *)(v191 + 232) = 0u;
    *(_QWORD *)(v191 + 248) = 0;
    *(_OWORD *)(v191 + 56) = 0u;
    v192 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v191 + 56), 0);
    if ((_DWORD)v192)
      geo::read_write_lock::logFailure(v192, (uint64_t)"initialization", v193);
    v194 = malloc_create_zone(0, 0);
    *(_QWORD *)(v191 + 48) = v194;
    malloc_set_zone_name(v194, "GeoGL");
    *(_QWORD *)(v191 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v191;
    v10 = a1 + 112;
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v204 = (uint64_t *)(a1 + 144);
  {
    v195 = operator new();
    *(_QWORD *)(v195 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v195 + 24) = "GeoGL";
    *(_OWORD *)(v195 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v195 = &off_1E42B5668;
    *(_QWORD *)(v195 + 8) = "GeoGL";
    *(_OWORD *)(v195 + 72) = 0u;
    *(_OWORD *)(v195 + 88) = 0u;
    *(_OWORD *)(v195 + 104) = 0u;
    *(_OWORD *)(v195 + 120) = 0u;
    *(_OWORD *)(v195 + 136) = 0u;
    *(_OWORD *)(v195 + 152) = 0u;
    *(_OWORD *)(v195 + 168) = 0u;
    *(_OWORD *)(v195 + 184) = 0u;
    *(_OWORD *)(v195 + 200) = 0u;
    *(_OWORD *)(v195 + 216) = 0u;
    *(_OWORD *)(v195 + 232) = 0u;
    *(_QWORD *)(v195 + 248) = 0;
    *(_OWORD *)(v195 + 56) = 0u;
    v196 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v195 + 56), 0);
    if ((_DWORD)v196)
      geo::read_write_lock::logFailure(v196, (uint64_t)"initialization", v197);
    v198 = malloc_create_zone(0, 0);
    *(_QWORD *)(v195 + 48) = v198;
    malloc_set_zone_name(v198, "GeoGL");
    *(_QWORD *)(v195 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v195;
    v10 = a1 + 112;
  }
  v12 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  {
    v199 = operator new();
    *(_QWORD *)(v199 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v199 + 24) = "GeoGL";
    *(_OWORD *)(v199 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v199 = &off_1E42B5668;
    *(_QWORD *)(v199 + 8) = "GeoGL";
    *(_OWORD *)(v199 + 72) = 0u;
    *(_OWORD *)(v199 + 88) = 0u;
    *(_OWORD *)(v199 + 104) = 0u;
    *(_OWORD *)(v199 + 120) = 0u;
    *(_OWORD *)(v199 + 136) = 0u;
    *(_OWORD *)(v199 + 152) = 0u;
    *(_OWORD *)(v199 + 168) = 0u;
    *(_OWORD *)(v199 + 184) = 0u;
    *(_OWORD *)(v199 + 200) = 0u;
    *(_OWORD *)(v199 + 216) = 0u;
    *(_OWORD *)(v199 + 232) = 0u;
    *(_QWORD *)(v199 + 248) = 0;
    *(_OWORD *)(v199 + 56) = 0u;
    v200 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v199 + 56), 0);
    if ((_DWORD)v200)
      geo::read_write_lock::logFailure(v200, (uint64_t)"initialization", v201);
    v202 = malloc_create_zone(0, 0);
    *(_QWORD *)(v199 + 48) = v202;
    malloc_set_zone_name(v202, "GeoGL");
    *(_QWORD *)(v199 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v199;
    v10 = a1 + 112;
  }
  v14 = *a3;
  v13 = a3[1];
  *(_QWORD *)(a1 + 200) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 208) = v14;
  *(_QWORD *)(a1 + 216) = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 40) = a2;
  v17 = a2[3];
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD **)(a1 + 56);
  v20 = ((uint64_t)v19 - v18) >> 4;
  v21 = v17 - v20;
  if (v17 <= v20)
  {
    if (v17 < v20)
    {
      v31 = (_QWORD *)(v18 + 16 * v17);
      while (v19 != v31)
      {
        v32 = *(v19 - 1);
        *(v19 - 1) = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v19 -= 2;
      }
      *(_QWORD *)(a1 + 56) = v31;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 64);
    if (v21 <= (v22 - (uint64_t)v19) >> 4)
    {
      v33 = &v19[2 * v21];
      v34 = 16 * v17 - 16 * v20;
      do
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
        }
        v19 += 2;
        v34 -= 16;
      }
      while (v34);
      *(_QWORD *)(a1 + 56) = v33;
    }
    else
    {
      if (v17 >> 60)
        goto LABEL_220;
      v23 = v22 - v18;
      v24 = v23 >> 3;
      if (v23 >> 3 <= v17)
        v24 = a2[3];
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 16 * v25, 8);
      v27 = (_QWORD *)(v26 + 16 * v20);
      v28 = v26 + 16 * v17;
      v29 = 16 * v17 - 16 * v20;
      v30 = v27;
      do
      {
        if (v30)
        {
          *v30 = 0;
          v30[1] = 0;
        }
        v30 += 2;
        v29 -= 16;
      }
      while (v29);
      v35 = v26 + 16 * v25;
      v36 = *(_QWORD *)(a1 + 48);
      v37 = *(_QWORD *)(a1 + 56);
      if (v37 == v36)
      {
        *(_QWORD *)(a1 + 48) = v27;
        *(_QWORD *)(a1 + 56) = v28;
        v41 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v35;
      }
      else
      {
        do
        {
          v38 = *(_DWORD *)(v37 - 16);
          v37 -= 16;
          *((_DWORD *)v27 - 4) = v38;
          v27 -= 2;
          v39 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v27[1] = v39;
        }
        while (v37 != v36);
        v37 = *(_QWORD *)(a1 + 48);
        v40 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = v27;
        *(_QWORD *)(a1 + 56) = v28;
        v41 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v35;
        while (v40 != v37)
        {
          v42 = *(_QWORD *)(v40 - 8);
          *(_QWORD *)(v40 - 8) = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v40 -= 16;
        }
      }
      if (v37)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v37, v41 - v37);
    }
  }
  v43 = a2[5];
  v44 = *(_QWORD *)(a1 + 80);
  v45 = *(_QWORD **)(a1 + 88);
  v46 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v45 - v44) >> 3);
  v47 = v43 - v46;
  if (v43 <= v46)
  {
    if (v43 < v46)
    {
      v57 = (_QWORD *)(v44 + 24 * v43);
      while (v45 != v57)
      {
        v58 = (std::__shared_weak_count *)*(v45 - 1);
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(p_shared_owners);
          while (__stlxr(v60 - 1, p_shared_owners));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v45 -= 3;
      }
      *(_QWORD *)(a1 + 88) = v57;
    }
  }
  else
  {
    v48 = *(_QWORD *)(a1 + 96);
    if (0xAAAAAAAAAAAAAAABLL * ((v48 - (uint64_t)v45) >> 3) >= v47)
    {
      v61 = &v45[3 * v47];
      v62 = 24 * v43 - 24 * v46;
      do
      {
        if (v45)
        {
          *v45 = 0;
          v45[1] = 0;
          v45[2] = 0;
        }
        v45 += 3;
        v62 -= 24;
      }
      while (v62);
      *(_QWORD *)(a1 + 88) = v61;
    }
    else
    {
      if (v43 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_220;
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v44) >> 3);
      v50 = 2 * v49;
      if (2 * v49 <= v43)
        v50 = a2[5];
      if (v49 >= 0x555555555555555)
        v51 = 0xAAAAAAAAAAAAAAALL;
      else
        v51 = v50;
      v52 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), 24 * v51, 8);
      v53 = v52 + 24 * v46;
      v54 = v52 + 24 * v43;
      v55 = 24 * v43 - 24 * v46;
      v56 = (_QWORD *)v53;
      do
      {
        if (v56)
        {
          *v56 = 0;
          v56[1] = 0;
          v56[2] = 0;
        }
        v56 += 3;
        v55 -= 24;
      }
      while (v55);
      v63 = v52 + 24 * v51;
      v64 = *(_QWORD *)(a1 + 80);
      v65 = *(_QWORD *)(a1 + 88);
      if (v65 == v64)
      {
        *(_QWORD *)(a1 + 80) = v53;
        *(_QWORD *)(a1 + 88) = v54;
        v68 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v63;
      }
      else
      {
        do
        {
          v66 = *(_QWORD *)(v65 - 24);
          v65 -= 24;
          *(_QWORD *)(v53 - 24) = v66;
          v53 -= 24;
          *(_OWORD *)(v53 + 8) = *(_OWORD *)(v65 + 8);
          *(_QWORD *)(v65 + 8) = 0;
          *(_QWORD *)(v65 + 16) = 0;
        }
        while (v65 != v64);
        v65 = *(_QWORD *)(a1 + 80);
        v67 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 80) = v53;
        *(_QWORD *)(a1 + 88) = v54;
        v68 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v63;
        while (v67 != v65)
        {
          v69 = *(std::__shared_weak_count **)(v67 - 8);
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v67 -= 24;
        }
      }
      if (v65)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), v65, v68 - v65);
    }
  }
  v72 = a2[5];
  v73 = *(_QWORD *)(a1 + 176);
  v74 = *(_QWORD **)(a1 + 184);
  v75 = ((uint64_t)v74 - v73) >> 4;
  v76 = v72 - v75;
  if (v72 <= v75)
  {
    if (v72 < v75)
    {
      v86 = (_QWORD *)(v73 + 16 * v72);
      while (v74 != v86)
      {
        v87 = (std::__shared_weak_count *)*(v74 - 1);
        if (v87)
        {
          v88 = (unint64_t *)&v87->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v74 -= 2;
      }
      *(_QWORD *)(a1 + 184) = v86;
    }
  }
  else
  {
    v77 = *(_QWORD *)(a1 + 192);
    if (v76 > (v77 - (uint64_t)v74) >> 4)
    {
      if (!(v72 >> 60))
      {
        v78 = v77 - v73;
        v79 = v78 >> 3;
        if (v78 >> 3 <= v72)
          v79 = a2[5];
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
          v80 = 0xFFFFFFFFFFFFFFFLL;
        else
          v80 = v79;
        v81 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), 16 * v80, 8);
        v82 = (_QWORD *)(v81 + 16 * v75);
        v83 = v81 + 16 * v72;
        v84 = 16 * v72 - 16 * v75;
        v85 = v82;
        do
        {
          if (v85)
          {
            *v85 = 0;
            v85[1] = 0;
          }
          v85 += 2;
          v84 -= 16;
        }
        while (v84);
        v92 = v81 + 16 * v80;
        v93 = *(_QWORD **)(a1 + 176);
        v94 = *(_QWORD **)(a1 + 184);
        if (v94 == v93)
        {
          *(_QWORD *)(a1 + 176) = v82;
          *(_QWORD *)(a1 + 184) = v83;
          v97 = *(_QWORD *)(a1 + 192);
          *(_QWORD *)(a1 + 192) = v92;
        }
        else
        {
          do
          {
            v95 = *((_OWORD *)v94 - 1);
            v94 -= 2;
            *((_OWORD *)v82 - 1) = v95;
            v82 -= 2;
            *v94 = 0;
            v94[1] = 0;
          }
          while (v94 != v93);
          v94 = *(_QWORD **)(a1 + 176);
          v96 = *(_QWORD **)(a1 + 184);
          *(_QWORD *)(a1 + 176) = v82;
          *(_QWORD *)(a1 + 184) = v83;
          v97 = *(_QWORD *)(a1 + 192);
          *(_QWORD *)(a1 + 192) = v92;
          while (v96 != v94)
          {
            v98 = (std::__shared_weak_count *)*(v96 - 1);
            if (v98)
            {
              v99 = (unint64_t *)&v98->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            v96 -= 2;
          }
        }
        if (v94)
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 200) + 40))(*(_QWORD *)(a1 + 200), v94, v97 - (_QWORD)v94);
        goto LABEL_123;
      }
LABEL_220:
      abort();
    }
    v90 = &v74[2 * v76];
    v91 = 16 * v72 - 16 * v75;
    do
    {
      if (v74)
      {
        *v74 = 0;
        v74[1] = 0;
      }
      v74 += 2;
      v91 -= 16;
    }
    while (v91);
    *(_QWORD *)(a1 + 184) = v90;
  }
LABEL_123:
  v101 = a2[7];
  v102 = *(_QWORD *)(a1 + 112);
  v103 = (*(_QWORD *)(a1 + 120) - v102) >> 4;
  if (v101 <= v103)
  {
    if (v101 < v103)
      *(_QWORD *)(a1 + 120) = v102 + 16 * v101;
  }
  else
  {
    std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append(v10, v101 - v103);
  }
  v104 = a2[9];
  v105 = *(_QWORD *)(a1 + 144);
  v106 = (*(_QWORD *)(a1 + 152) - v105) >> 4;
  if (v104 <= v106)
  {
    if (v104 < v106)
      *(_QWORD *)(a1 + 152) = v105 + 16 * v104;
  }
  else
  {
    std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append((uint64_t)v204, v104 - v106);
  }
  if (a2[3])
  {
    v107 = 0;
    v108 = 0;
    do
    {
      v109 = *(_DWORD **)(a2[2] + 8 * v108);
      if (v109)
        LODWORD(v109) = *v109;
      v110 = *(_QWORD *)(a1 + 48) + v107;
      *(_DWORD *)v110 = (_DWORD)v109;
      {
        v115 = operator new();
        *(_QWORD *)(v115 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v115 + 24) = "GeoGL";
        *(_OWORD *)(v115 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v115 = &off_1E42B5668;
        *(_QWORD *)(v115 + 8) = "GeoGL";
        *(_OWORD *)(v115 + 72) = 0u;
        *(_OWORD *)(v115 + 88) = 0u;
        *(_OWORD *)(v115 + 104) = 0u;
        *(_OWORD *)(v115 + 120) = 0u;
        *(_OWORD *)(v115 + 136) = 0u;
        *(_OWORD *)(v115 + 152) = 0u;
        *(_OWORD *)(v115 + 168) = 0u;
        *(_OWORD *)(v115 + 184) = 0u;
        *(_OWORD *)(v115 + 200) = 0u;
        *(_OWORD *)(v115 + 216) = 0u;
        *(_OWORD *)(v115 + 232) = 0u;
        *(_QWORD *)(v115 + 248) = 0;
        v203 = v115;
        *(_OWORD *)(v115 + 56) = 0u;
        v116 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v115 + 56), 0);
        if ((_DWORD)v116)
          geo::read_write_lock::logFailure(v116, (uint64_t)"initialization", v117);
        v118 = malloc_create_zone(0, 0);
        *(_QWORD *)(v203 + 48) = v118;
        malloc_set_zone_name(v118, "GeoGL");
        *(_QWORD *)(v203 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v203;
      }
      v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                  + 16))(ggl::Allocator::instance(void)::alloc, 56, 8);
      v113 = *(_QWORD *)(a2[2] + 8 * v108);
      *(_DWORD *)(v112 + 32) = 0;
      *(_QWORD *)(v112 + 16) = 0;
      *(_QWORD *)(v112 + 24) = 0;
      *(_QWORD *)v112 = off_1E42B6E18;
      *(_QWORD *)(v112 + 8) = 0;
      *(_QWORD *)(v112 + 40) = v113;
      *(_QWORD *)(v112 + 48) = a1;
      v114 = *(_QWORD *)(v110 + 8);
      *(_QWORD *)(v110 + 8) = v112;
      if (v114)
        (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
      ++v108;
      v107 += 16;
    }
    while (v108 != a2[3]);
  }
  if (a2[5])
  {
    v119 = 0;
    while (1)
    {
      v120 = *(_QWORD *)(a2[4] + 8 * v119);
      if (v120)
        break;
      v136 = (_QWORD *)(*v8 + 24 * v119);
      *v136 = 0;
      v136[1] = 0;
      v137 = (std::__shared_weak_count *)v136[2];
      v136[2] = 0;
      if (v137)
      {
        v138 = (unint64_t *)&v137->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
LABEL_169:
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
LABEL_171:
      v144 = *v8 + 24 * v119;
      v145 = *(_QWORD *)(a1 + 176);
      v147 = *(_QWORD *)(v144 + 8);
      v146 = *(_QWORD *)(v144 + 16);
      if (v146)
      {
        v148 = (unint64_t *)(v146 + 8);
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      v150 = (_QWORD *)(v145 + 16 * v119);
      v151 = (std::__shared_weak_count *)v150[1];
      *v150 = v147;
      v150[1] = v146;
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      if (++v119 == a2[5])
        goto LABEL_183;
    }
    v121 = **(_DWORD **)(v120 + 8);
    v122 = *v8;
    v123 = *v8 + 24 * v119;
    v124 = **(_DWORD **)(v120 + 24);
    *(_DWORD *)v123 = v121;
    *(_DWORD *)(v123 + 4) = v124;
    {
      v154 = operator new();
      *(_QWORD *)(v154 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v154 + 24) = "GeoGL";
      *(_OWORD *)(v154 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v154 = &off_1E42B5668;
      *(_QWORD *)(v154 + 8) = "GeoGL";
      *(_OWORD *)(v154 + 72) = 0u;
      *(_OWORD *)(v154 + 88) = 0u;
      *(_OWORD *)(v154 + 104) = 0u;
      *(_OWORD *)(v154 + 120) = 0u;
      *(_OWORD *)(v154 + 136) = 0u;
      *(_OWORD *)(v154 + 152) = 0u;
      *(_OWORD *)(v154 + 168) = 0u;
      *(_OWORD *)(v154 + 184) = 0u;
      *(_OWORD *)(v154 + 200) = 0u;
      *(_OWORD *)(v154 + 216) = 0u;
      *(_OWORD *)(v154 + 232) = 0u;
      *(_QWORD *)(v154 + 248) = 0;
      *(_OWORD *)(v154 + 56) = 0u;
      v155 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v154 + 56), 0);
      if ((_DWORD)v155)
        geo::read_write_lock::logFailure(v155, (uint64_t)"initialization", v156);
      v157 = malloc_create_zone(0, 0);
      *(_QWORD *)(v154 + 48) = v157;
      malloc_set_zone_name(v157, "GeoGL");
      *(_QWORD *)(v154 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v154;
    }
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 96, 8);
    v126 = v125;
    v127 = *(uint64_t **)(a2[4] + 8 * v119);
    v128 = *v127;
    *(_DWORD *)(v125 + 48) = 0;
    *(_QWORD *)(v125 + 32) = 0;
    *(_QWORD *)(v125 + 40) = 0;
    *(_QWORD *)v125 = off_1E42BC230;
    *(_QWORD *)(v125 + 8) = v128;
    *(_QWORD *)(v125 + 16) = &unk_1E42BC250;
    *(_QWORD *)(v125 + 24) = 0;
    *(_QWORD *)(v125 + 56) = 0;
    *(_QWORD *)(v125 + 64) = 0;
    *(_QWORD *)(v125 + 72) = v127;
    *(_QWORD *)(v125 + 80) = 0;
    v129 = (_QWORD *)(v125 + 80);
    *(_QWORD *)(v125 + 88) = 0;
    v130 = *((unsigned int *)v127 + 4);
    v131 = *((unsigned int *)v127 + 8);
    *(_QWORD *)(v125 + 56) = a1;
    *(_QWORD *)(v125 + 64) = v130 | (v131 << 32);
    v132 = *(_QWORD *)(a1 + 48);
    v133 = *(_QWORD *)(a1 + 56);
    if (v132 == v133)
    {
      v140 = 0;
      *v129 = 0;
    }
    else
    {
      v134 = *(_QWORD *)(a1 + 48);
      while (1)
      {
        if (*(_DWORD *)v134 == (_DWORD)v130)
        {
          v135 = *(_QWORD *)(v134 + 8);
          if (v135)
            break;
        }
        v134 += 16;
        if (v134 == v133)
        {
          v135 = 0;
          break;
        }
      }
      *v129 = v135;
      if (v132 == v133)
      {
LABEL_160:
        v140 = 0;
      }
      else
      {
        while (1)
        {
          if (*(_DWORD *)v132 == (_DWORD)v131)
          {
            v140 = *(_QWORD *)(v132 + 8);
            if (v140)
              break;
          }
          v132 += 16;
          if (v132 == v133)
            goto LABEL_160;
        }
      }
    }
    *(_QWORD *)(v125 + 88) = v140;
    v141 = (_QWORD *)operator new();
    *v141 = &off_1E42E7CD0;
    v141[1] = 0;
    v141[2] = 0;
    v141[3] = v126;
    *(_QWORD *)(v123 + 8) = v126;
    v142 = v122 + 24 * v119;
    v137 = *(std::__shared_weak_count **)(v142 + 16);
    *(_QWORD *)(v142 + 16) = v141;
    if (!v137)
      goto LABEL_171;
    v143 = (unint64_t *)&v137->__shared_owners_;
    do
      v139 = __ldaxr(v143);
    while (__stlxr(v139 - 1, v143));
    goto LABEL_169;
  }
LABEL_183:
  v158 = a2[7];
  if (v158)
  {
    v159 = a2[6];
    v160 = *(_QWORD *)(a1 + 112);
    if (v158 == 1)
    {
      v161 = 0;
LABEL_189:
      v166 = v158 - v161;
      v167 = (_DWORD *)(v160 + 16 * v161);
      v168 = (int *)(v159 + 4 * v161);
      do
      {
        v169 = *v168++;
        *v167 = v169;
        v167 += 4;
        --v166;
      }
      while (v166);
      goto LABEL_191;
    }
    v161 = v158 & 0xFFFFFFFFFFFFFFFELL;
    v162 = (_DWORD *)(v160 + 16);
    v163 = (int *)(v159 + 4);
    v164 = v158 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v165 = *v163;
      *(v162 - 4) = *(v163 - 1);
      *v162 = v165;
      v162 += 8;
      v163 += 2;
      v164 -= 2;
    }
    while (v164);
    if (v158 != v161)
      goto LABEL_189;
  }
LABEL_191:
  v170 = a2[9];
  if (!v170)
    return a1;
  v171 = a2[8];
  v172 = *v204;
  if (v170 == 1)
  {
    v173 = 0;
LABEL_197:
    v178 = v170 - v173;
    v179 = (_DWORD *)(v172 + 16 * v173);
    v180 = (int *)(v171 + 4 * v173);
    do
    {
      v181 = *v180++;
      *v179 = v181;
      v179 += 4;
      --v178;
    }
    while (v178);
    return a1;
  }
  v173 = v170 & 0xFFFFFFFFFFFFFFFELL;
  v174 = (_DWORD *)(v172 + 16);
  v175 = (int *)(v171 + 4);
  v176 = v170 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v177 = *v175;
    *(v174 - 4) = *(v175 - 1);
    *v174 = v177;
    v174 += 8;
    v175 += 2;
    v176 -= 2;
  }
  while (v176);
  if (v170 != v173)
    goto LABEL_197;
  return a1;
}

void sub_19F2EA0C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2EA164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void md::StyleLogic::setEmphasis(uint64_t a1, int a2, float a3)
{
  void *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;

  if (*(unsigned __int8 *)(a1 + 164) != a2)
  {
    v6 = *(void **)(a1 + 1184);
    if (v6)
      objc_msgSend(v6, "stop");
    *(_BYTE *)(a1 + 164) = a2;
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10045u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10045u, *(unsigned __int8 *)(a1 + 164));
    if (*(_BYTE *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), a3);
    }
    else
    {
      *(_BYTE *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = a3;
      v10 = 4;
      v7 = *(char **)(a1 + 1128);
      v8 = *(char **)(a1 + 1136);
      if (v7 != v8)
      {
        while (*v7 <= 3u)
        {
          if (++v7 == v8)
            goto LABEL_12;
        }
      }
      if (v7 == v8 || (v8 = v7, *v7 != 4))
LABEL_12:
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v8, &v10);
      v9 = **(_QWORD **)(a1 + 1240);
      if (v9)
      {
        v11 = 12;
        md::MapEngine::setNeedsTick(v9, &v11);
      }
    }
  }
}

void gss::ClientStyleState<gss::ScenePropertyID>::setTargetClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int v21;
  gss::Allocator *v22;
  __int16 v23;
  unsigned __int16 v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  gss::Allocator *v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  geo::read_write_lock *v44;
  const char *v45;
  pthread_rwlock_t *v46;

  v6 = (pthread_rwlock_t *)(a1 + 16);
  v46 = (pthread_rwlock_t *)(a1 + 16);
  v7 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"write lock", v8);
  v9 = *(unsigned __int16 *)(a1 + 242);
  if (!*(_WORD *)(a1 + 242))
    goto LABEL_31;
  v10 = *(_QWORD *)(a1 + 232);
  if (*(_BYTE *)(a1 + 247))
  {
    if (v9 >= 0x1E)
    {
      v16 = *(_DWORD **)(a1 + 232);
      v17 = *(unsigned __int16 *)(a1 + 242);
      do
      {
        v18 = v17 >> 1;
        v19 = &v16[v17 >> 1];
        v21 = *v19;
        v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2)
          v16 = v20;
        else
          v17 = v18;
      }
      while (v17);
      if (v16 != (_DWORD *)(v10 + 4 * v9) && *v16 == a2)
      {
        v15 = ((unint64_t)v16 - v10) >> 2;
        if ((_DWORD)v9 != (unsigned __int16)v15)
          goto LABEL_30;
      }
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v12 = *(_DWORD *)(v10 + 4 * v11);
        if (v12 >= a2)
          break;
        if (v9 == ++v11)
          goto LABEL_31;
      }
      if (v12 == a2)
        LOWORD(v15) = v11;
      else
        LOWORD(v15) = *(_WORD *)(a1 + 242);
      if ((_DWORD)v9 != (unsigned __int16)v15)
        goto LABEL_30;
    }
LABEL_31:
    v22 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 232), a2);
    *(_WORD *)v22 = a3;
    if (!*(_BYTE *)(a1 + 246) && !*(_BYTE *)(a1 + 247))
    {
      v23 = *(_WORD *)(a1 + 244);
      v24 = (4 * v23) | 2;
      v25 = gss::Allocator::instance(v22);
      v26 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 16))(v25, (unsigned __int16)(v24 + 2 * v23) & 0xFFFE, 1);
      v27 = v26;
      if (*(_QWORD *)(a1 + 232))
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 232, v26, (_DWORD *)((char *)v26 + v24), 1);
        v29 = gss::Allocator::instance(v28);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
      }
      *(_WORD *)(a1 + 244) = v23;
      *(_QWORD *)(a1 + 232) = v27;
      *(_WORD *)(a1 + 240) = v24;
    }
    v30 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    if (v30 <= 0.0)
    {
      v31 = *(unsigned __int16 *)(a1 + 242);
      if ((_DWORD)v31 == *(unsigned __int16 *)(a1 + 226))
      {
        if (!*(_WORD *)(a1 + 242))
          goto LABEL_47;
        v32 = *(_DWORD **)(a1 + 232);
        v33 = *(_DWORD **)(a1 + 216);
        if (*v32 == *v33)
        {
          v34 = *(unsigned __int16 *)(a1 + 224);
          v35 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v32 + v35) == *(unsigned __int16 *)((char *)v33 + v34))
          {
            v36 = 0;
            v37 = v32 + 1;
            v38 = v33 + 1;
            v39 = (uint64_t)v32 + v35 + 2;
            v40 = (uint64_t)v33 + v34 + 2;
            while (v31 - 1 != v36)
            {
              v41 = v36++;
              if (v37[v41] != v38[v41])
                goto LABEL_54;
              if (*(unsigned __int16 *)(v39 + 2 * v41) != *(unsigned __int16 *)(v40 + 2 * v41))
              {
                v36 = v41 + 1;
                goto LABEL_54;
              }
            }
            v36 = *(unsigned __int16 *)(a1 + 242);
LABEL_54:
            LOBYTE(v31) = v36 < v31;
            goto LABEL_47;
          }
        }
      }
    }
    LOBYTE(v31) = 1;
LABEL_47:
    atomic_store(v31, (unsigned __int8 *)(a1 + 254));
    v42 = (unsigned int *)(a1 + 248);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    v6 = v46;
    goto LABEL_50;
  }
  v13 = 4 * v9;
  v14 = *(_DWORD **)(a1 + 232);
  while (*v14 != a2)
  {
    ++v14;
    v13 -= 4;
    if (!v13)
    {
      v14 = (_DWORD *)(v10 + 4 * v9);
      break;
    }
  }
  v15 = ((unint64_t)v14 - v10) >> 2;
  if ((_DWORD)v9 == (unsigned __int16)v15)
    goto LABEL_31;
LABEL_30:
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 232) + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v15) != a3)
    goto LABEL_31;
LABEL_50:
  v44 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v44)
    geo::read_write_lock::logFailure(v44, (uint64_t)"unlock", v45);
}

void sub_19F2EA6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void md::StyleLogic::setDisplayStyle(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = *(_BYTE *)(a1 + 164);
  *(_BYTE *)(a1 + 176) = BYTE2(a2);
  v4 = a2 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v3 << 48);
  gss::ClientStyleState<gss::PropertyID>::setSourceMapDisplayStyle(*(_QWORD *)(a1 + 208), v4);
  gss::ClientStyleState<gss::PropertyID>::setTargetMapDisplayStyle(*(_QWORD *)(a1 + 208), v4);
  gss::ClientStyleState<gss::ScenePropertyID>::setSourceMapDisplayStyle(*(_QWORD *)(a1 + 224), v4);
  gss::ClientStyleState<gss::ScenePropertyID>::setTargetMapDisplayStyle(*(_QWORD *)(a1 + 224), v4);
  v8 = 4;
  v5 = *(char **)(a1 + 1128);
  v6 = *(char **)(a1 + 1136);
  if (v5 != v6)
  {
    while (*v5 <= 3u)
    {
      if (++v5 == v6)
        goto LABEL_7;
    }
  }
  if (v5 == v6 || (v6 = v5, *v5 != 4))
LABEL_7:
    std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v6, &v8);
  v7 = **(_QWORD **)(a1 + 1240);
  if (v7)
  {
    v9 = 8;
    md::MapEngine::setNeedsTick(v7, &v9);
  }
}

void gss::ClientStyleState<gss::ScenePropertyID>::setSourceMapDisplayStyle(uint64_t a1, uint64_t a2)
{
  geo::read_write_lock *v3;
  const char *v4;
  gss::Allocator *v5;
  __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  gss::Allocator *v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  geo::read_write_lock *v27;
  const char *v28;
  pthread_rwlock_t *v29;
  uint64_t v30;

  v29 = (pthread_rwlock_t *)(a1 + 16);
  v30 = a2;
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  v5 = (gss::Allocator *)gss::DisplayStyle::applyDisplayStyle((unsigned __int8 *)&v30, (_QWORD *)(a1 + 216));
  if (!*(_BYTE *)(a1 + 230) && !*(_BYTE *)(a1 + 231))
  {
    v6 = *(_WORD *)(a1 + 228);
    v7 = (4 * v6) | 2;
    v8 = gss::Allocator::instance(v5);
    v9 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v7 + 2 * v6) & 0xFFFE, 1);
    v10 = v9;
    if (*(_QWORD *)(a1 + 216))
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 216, v9, (_DWORD *)((char *)v9 + v7), 1);
      v12 = gss::Allocator::instance(v11);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(a1 + 216), *(unsigned __int16 *)(a1 + 228));
    }
    *(_WORD *)(a1 + 228) = v6;
    *(_QWORD *)(a1 + 216) = v10;
    *(_WORD *)(a1 + 224) = v7;
  }
  v13 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  if (v13 > 0.0)
    goto LABEL_18;
  v14 = *(unsigned __int16 *)(a1 + 242);
  if ((_DWORD)v14 != *(unsigned __int16 *)(a1 + 226))
    goto LABEL_18;
  if (!*(_WORD *)(a1 + 242))
    goto LABEL_19;
  v15 = *(_DWORD **)(a1 + 232);
  v16 = *(_DWORD **)(a1 + 216);
  if (*v15 != *v16
    || (v17 = *(unsigned __int16 *)(a1 + 224),
        v18 = *(unsigned __int16 *)(a1 + 240),
        *(unsigned __int16 *)((char *)v15 + v18) != *(unsigned __int16 *)((char *)v16 + v17)))
  {
LABEL_18:
    LOBYTE(v14) = 1;
    goto LABEL_19;
  }
  v19 = 0;
  v20 = v15 + 1;
  v21 = v16 + 1;
  v22 = (uint64_t)v15 + v18 + 2;
  v23 = (uint64_t)v16 + v17 + 2;
  while (v14 - 1 != v19)
  {
    v24 = v19++;
    if (v20[v24] != v21[v24])
      goto LABEL_25;
    if (*(unsigned __int16 *)(v22 + 2 * v24) != *(unsigned __int16 *)(v23 + 2 * v24))
    {
      v19 = v24 + 1;
      goto LABEL_25;
    }
  }
  v19 = *(unsigned __int16 *)(a1 + 242);
LABEL_25:
  LOBYTE(v14) = v19 < v14;
LABEL_19:
  atomic_store(v14, (unsigned __int8 *)(a1 + 254));
  v25 = (unsigned int *)(a1 + 248);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v27 = (geo::read_write_lock *)pthread_rwlock_unlock(v29);
  if ((_DWORD)v27)
    geo::read_write_lock::logFailure(v27, (uint64_t)"unlock", v28);
}

void sub_19F2EA98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
  geo::write_lock_guard::~write_lock_guard(&a9);
  _Unwind_Resume(a1);
}

void sub_19F2EAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  void *v19;
  void *v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19F2EAEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ggl::DaVinciGroundDepthShader::typedReflection(ggl::DaVinciGroundDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DaVinciGroundDepthShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundDepthShader";
      ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE32940 = (uint64_t)&ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
      dword_1ECE32948 = (int)v3;
      ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE32950 = (uint64_t)&ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE32958 = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
      qword_1ECE32960 = (uint64_t)ggl::daVinciGroundDepthShaderShaderConstants(void)::ref;
      unk_1ECE32968 = 4;
      qword_1ECE32970 = (uint64_t)&ggl::daVinciGroundDepthShaderShaderTextures(void)::ref;
      unk_1ECE32978 = 0;
      qword_1ECE32980 = (uint64_t)&ggl::daVinciGroundDepthShaderShaderSamplers(void)::ref;
      unk_1ECE32988 = 0;
    }
  }
}

void ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
      *(_DWORD *)algn_1ECE331E4 = 1;
      qword_1ECE331E8 = (uint64_t)"DaVinciGroundDepthShader";
      unk_1ECE331F0 = 0;
      qword_1ECE331F8 = 0;
      unk_1ECE33200 = &ggl::daVinciGroundDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33208 = 1;
      unk_1ECE33210 = &ggl::daVinciGroundDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE33218 = 0;
      unk_1ECE33220 = &ggl::daVinciGroundDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33228 = 0;
      unk_1ECE33230 = &ggl::daVinciGroundDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33240 = 0;
      unk_1ECE33248 = 0;
      qword_1ECE33238 = 0;
    }
  }
}

void ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
      *(_DWORD *)algn_1ECE3301C = 0;
      qword_1ECE33020 = (uint64_t)"DaVinciGroundDepthShader";
      unk_1ECE33028 = ggl::daVinciGroundDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE33030 = 3;
      unk_1ECE33038 = &ggl::daVinciGroundDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33040 = 4;
      unk_1ECE33048 = &ggl::daVinciGroundDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE33050 = 2;
      unk_1ECE33058 = &ggl::daVinciGroundDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33060 = 0;
      unk_1ECE33068 = &ggl::daVinciGroundDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33078 = 0;
      unk_1ECE33080 = 0;
      qword_1ECE33070 = 0;
    }
  }
}

void md::FrameGraphPhysicalResourceOwner<ggl::Texture>::~FrameGraphPhysicalResourceOwner(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42A89F8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RenderBuffer::~RenderBuffer(ggl::RenderBuffer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void __destroy_helper_block_ea8_40c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    *(_BYTE *)(result + 40) = 0;
  return result;
}

void md::MultipleShieldLabelPart::setPosition(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = a1 + 632;
  v4 = 664;
  if (a2)
    v3 = a1 + 664;
  else
    v4 = 632;
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + v4) = v6;
  v9 = *(std::__shared_weak_count **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t md::CurvedTextLabelPart::setUseExternalLayoutOptions(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 960;
  if (a2)
    v3 = result + 1152;
  *(_BYTE *)(v3 + 184) = a3;
  return result;
}

void md::CurvedTextLabelPart::setPosition(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = a1 + 960;
  if (a2)
    v3 = a1 + 1152;
  v5 = *a3;
  v4 = a3[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(v3 + 120);
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void md::VenueFootprintRenderResources::~VenueFootprintRenderResources(md::VenueFootprintRenderResources *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  *((_QWORD *)this + 93) = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 94);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 96));
    *((_QWORD *)this + 96) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v6)
  {
    v7 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v6);
    MEMORY[0x1A1AF4E00](v7, 0x10A0C40D234DDC7);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_QWORD *)this + 63) = &off_1E42B8A10;
  v11 = *((_QWORD *)this + 64);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 66));
    *((_QWORD *)this + 66) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 65);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v15)
  {
    v16 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v15);
    MEMORY[0x1A1AF4E00](v16, 0x10A0C40D234DDC7);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *((_QWORD *)this + 33) = &off_1E42B8A10;
  v20 = *((_QWORD *)this + 34);
  if (v20)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, *((_QWORD *)this + 36));
    *((_QWORD *)this + 36) = 3735927469;
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v24)
  {
    v25 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v24);
    MEMORY[0x1A1AF4E00](v25, 0x10A0C40D234DDC7);
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *((_QWORD *)this + 3) = &off_1E42B8A10;
  v29 = *((_QWORD *)this + 4);
  if (v29)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, *((_QWORD *)this + 6));
    *((_QWORD *)this + 6) = 3735927469;
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v33)
  {
    v34 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v33);
    MEMORY[0x1A1AF4E00](v34, 0x10A0C40D234DDC7);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

md::CVenueRenderResources *md::CVenueRenderResources::CVenueRenderResources(md::CVenueRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  _QWORD *v5;
  VKSharedResources *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t (**v10)();
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  VKSharedResources *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (**v93)();
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t (***v110)();
  uint64_t v111;
  uint64_t v112;
  uint64_t (**v113)();
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t (**v126)();
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  uint64_t *v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  __int128 *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  __int128 *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (***v179)();
  uint64_t v180;
  __int128 *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (**v184)();
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  char *v188;
  __int128 v189;
  unsigned __int8 v190;
  uint64_t (**v191)();
  std::__shared_weak_count *v192;
  uint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  __int128 v196;
  unint64_t *v202;
  unint64_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int16x8_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int16x8_t v210;
  int32x4_t v211;
  int8x16_t v212;
  int32x4_t v213;
  int8x16_t v214;
  int32x4_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int16x8_t v225;
  int32x4_t v226;
  int8x16_t v227;
  int16x8_t v228;
  int32x4_t v229;
  int8x16_t v230;
  int32x4_t v231;
  int8x16_t v232;
  int32x4_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int16x8_t v248;
  int32x4_t v249;
  int8x16_t v250;
  int16x8_t v251;
  int32x4_t v252;
  int8x16_t v253;
  int32x4_t v254;
  int8x16_t v255;
  int32x4_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int16x8_t v263;
  int32x4_t v264;
  int8x16_t v265;
  int16x8_t v266;
  int32x4_t v267;
  int8x16_t v268;
  int32x4_t v269;
  int8x16_t v270;
  int32x4_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t *v279;
  unint64_t v280;
  uint64_t *v281;
  unsigned __int8 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  __int128 *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _OWORD *v316;
  __int128 *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t (***v324)();
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  VKSharedResources *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  _QWORD *v336;
  __int128 v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t (***v349)();
  uint64_t v350;
  uint64_t v351;
  uint64_t (**v352)();
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  _QWORD *v356;
  __int128 v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t (***v367)();
  uint64_t v368;
  uint64_t (***v369)();
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  _QWORD *v376;
  __int128 v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  __int128 *v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  __int128 v391;
  unsigned __int8 v392;
  _QWORD *v393;
  uint64_t v395;
  uint64_t v396;
  ggl::VenueOpenToBelowShadowShader *v397;
  unsigned __int8 v398;
  unsigned __int8 v399;
  unsigned __int8 v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  unsigned __int8 v405;
  unsigned __int8 v406;
  unsigned __int8 v407;
  uint64_t *v408;
  uint64_t *v409;
  uint64_t *v410;
  VKSharedResources *v411;
  uint64_t *v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  uint64_t (**v415)();
  std::__shared_weak_count *v416;
  uint64_t (***v417)();
  uint64_t (**v418)();
  std::__shared_weak_count *v419;
  uint64_t (***v420)();
  _QWORD v421[3];
  _QWORD *v422;
  uint64_t (**v423)();
  std::__shared_weak_count *v424;
  uint64_t (***v425)();
  _BYTE v426[44];
  char v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;

  v430 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)((char *)this + 324);
  v6 = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 9) = &off_1E42B5DE8;
  v7 = (char *)this + 72;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 108) = 65537;
  *((_DWORD *)this + 29) = 0;
  *((_QWORD *)this + 15) = 1;
  *((_WORD *)this + 64) = 0;
  *((_BYTE *)this + 130) = 3;
  *(_QWORD *)((char *)this + 139) = 0;
  *(_QWORD *)((char *)this + 131) = 0;
  *((_BYTE *)this + 147) = 0;
  *(_QWORD *)((char *)this + 204) = 0;
  *(_QWORD *)((char *)this + 196) = 0;
  *((_WORD *)this + 130) = 257;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_BYTE *)this + 280) = 0;
  v8 = (char *)this + 288;
  *((_DWORD *)this + 80) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 36) = &off_1E42B5DE8;
  *((_QWORD *)this + 37) = 0;
  *v5 = 65537;
  *((_DWORD *)this + 83) = 0;
  *((_QWORD *)this + 42) = 0xFF00FF0000000400;
  *((_WORD *)this + 172) = 0;
  *((_BYTE *)this + 346) = 3;
  *(_QWORD *)((char *)this + 347) = 0;
  *(_QWORD *)((char *)this + 355) = 0;
  *((_BYTE *)this + 363) = 0;
  *(_QWORD *)((char *)this + 420) = 0;
  *(_QWORD *)((char *)this + 412) = 0;
  *((_WORD *)this + 238) = 257;
  *((_BYTE *)this + 496) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  v9 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v6, "shaderLibrary") + 80);
  v10 = *(uint64_t (***)())(v9 + 1664);
  v11 = *(std::__shared_weak_count **)(v9 + 1672);
  v423 = v10;
  v424 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v426[24], 0, 20);
  v426[0] = 1;
  *(_OWORD *)&v426[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v426[20] = 7;
  v427 = 15;
  v14 = operator new(0x198uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E42DE928;
  v15 = *(_OWORD *)&a3->colorFormatsCount;
  v428 = *(_OWORD *)a3->colorFormats;
  v429 = v15;
  v16 = ggl::PolygonFill::MeshPipelineState::MeshPipelineState((uint64_t)(v14 + 3), &v423, (uint64_t)v426, &v428);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = v16;
  *((_QWORD *)this + 5) = v14;
  if (!v17)
    goto LABEL_8;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = v424;
    if (!v424)
      goto LABEL_12;
  }
  else
  {
LABEL_8:
    v20 = v424;
    if (!v424)
      goto LABEL_12;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v6)
      goto LABEL_13;
LABEL_21:
    v24 = 0;
    goto LABEL_22;
  }
LABEL_12:
  if (!v6)
    goto LABEL_21;
LABEL_13:
  -[VKSharedResources textureManager](v6, "textureManager");
  v23 = *(std::__shared_weak_count **)&v426[8];
  v24 = *(uint64_t **)v426;
  if (*(_QWORD *)&v426[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v426[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_22:
  v27 = (_QWORD *)operator new();
  v28 = v27;
  v29 = *v24;
  v30 = *((_QWORD *)this + 4);
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    ggl::PipelineSetup::PipelineSetup(v27, v30, (uint64_t)v31);
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v27, v30, 0);
  }
  *v28 = &off_1E42B5D48;
  v36 = (_QWORD *)v28[8];
  v36[1] = 0;
  v37 = *(_QWORD *)this;
  *v36 = *(_QWORD *)this;
  v38 = (_QWORD *)v28[20];
  v39 = *((_QWORD *)this + 1);
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (std::__shared_weak_count *)v38[1];
  *v38 = v37;
  v38[1] = v39;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v28[8];
  *(_QWORD *)(v45 + 16) = 0;
  *(_QWORD *)(v45 + 24) = 0;
  v46 = v28[20];
  v47 = *(std::__shared_weak_count **)(v46 + 24);
  *(_QWORD *)(v46 + 16) = 0;
  *(_QWORD *)(v46 + 24) = 0;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v28[8];
  *(_QWORD *)(v50 + 40) = 0;
  v51 = *((_QWORD *)this + 2);
  *(_QWORD *)(v50 + 32) = v51;
  v52 = v28[20];
  v53 = *((_QWORD *)this + 3);
  if (v53)
  {
    v54 = (unint64_t *)(v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = *(std::__shared_weak_count **)(v52 + 40);
  *(_QWORD *)(v52 + 32) = v51;
  *(_QWORD *)(v52 + 40) = v53;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  *(_QWORD *)v28[12] = v29;
  v59 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v28;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  *((_BYTE *)this + 130) = 3;
  *((_BYTE *)this + 128) = 0;
  v60 = operator new();
  v61 = *((_QWORD *)this + 8);
  *(_QWORD *)v60 = &off_1E42B59B0;
  *(_QWORD *)(v60 + 16) = "";
  *(_QWORD *)(v60 + 24) = v7;
  *(_QWORD *)(v60 + 32) = v61;
  *(_DWORD *)(v60 + 40) = 0;
  *(_QWORD *)(v60 + 48) = 0;
  *(_DWORD *)(v60 + 56) = 1065353216;
  *(_OWORD *)(v60 + 64) = 0u;
  *(_OWORD *)(v60 + 80) = 0u;
  *(int64x2_t *)(v60 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v60 + 112) = 0;
  v62 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = v60;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  *((_BYTE *)this + 346) = 3;
  *((_BYTE *)this + 344) = 0;
  v63 = operator new();
  v64 = *((_QWORD *)this + 8);
  *(_QWORD *)v63 = &off_1E42B59B0;
  *(_QWORD *)(v63 + 16) = "";
  *(_QWORD *)(v63 + 24) = v8;
  *(_QWORD *)(v63 + 32) = v64;
  *(_DWORD *)(v63 + 40) = 0;
  *(_QWORD *)(v63 + 48) = 0;
  *(_DWORD *)(v63 + 56) = 1065353216;
  *(_OWORD *)(v63 + 64) = 0u;
  *(_OWORD *)(v63 + 80) = 0u;
  *(int64x2_t *)(v63 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v63 + 112) = 0;
  v65 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = v63;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = operator new(0xE8uLL);
  v66[1] = 0;
  v66[2] = 0;
  *v66 = &off_1E42E0FE0;
  v67 = ggl::BufferData::BufferData((uint64_t)(v66 + 3), qword_1EE571CC8, 2, 1, 6, 1);
  v66[28] = ggl::PolygonFill::Fill::reflection(void)::reflection;
  v66[3] = &off_1E42B8C90;
  v68 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v67;
  *((_QWORD *)this + 3) = v66;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (_QWORD *)*((_QWORD *)this + 2);
  v72 = v71[1];
  v73 = v71[9];
  *(_DWORD *)v73 = 1065353216;
  *(_QWORD *)(v73 + 12) = 0;
  *(_QWORD *)(v73 + 4) = 0;
  *(_DWORD *)(v73 + 20) = 1065353216;
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_DWORD *)(v73 + 40) = 1065353216;
  *(_QWORD *)(v73 + 52) = 0;
  *(_QWORD *)(v73 + 44) = 0;
  *(_OWORD *)(v73 + 60) = xmmword_19FFB3590;
  *(_DWORD *)(v73 + 76) = 1050253722;
  *(_OWORD *)(v73 + 88) = xmmword_19FFB3480;
  if (v71[8] > v72)
    v72 = v71[8];
  v71[7] = 0;
  v71[8] = v72;
  v74 = *((_QWORD *)this + 8);
  v75 = *(_QWORD *)(v74 + 64);
  *(_QWORD *)(v75 + 40) = 0;
  v76 = *((_QWORD *)this + 2);
  *(_QWORD *)(v75 + 32) = v76;
  v77 = *(_QWORD *)(v74 + 160);
  v78 = *((_QWORD *)this + 3);
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  v81 = *(std::__shared_weak_count **)(v77 + 40);
  *(_QWORD *)(v77 + 32) = v76;
  *(_QWORD *)(v77 + 40) = v78;
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = operator new(0xE8uLL);
  v84[1] = 0;
  v84[2] = 0;
  *v84 = &off_1E42E2278;
  v85 = ggl::BufferData::BufferData((uint64_t)(v84 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
  v84[28] = ggl::Tile::View::reflection(void)::reflection;
  v84[3] = &off_1E42B97B0;
  v86 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v85;
  *((_QWORD *)this + 1) = v84;
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 63) + 24) = v7;
  *(_QWORD *)(*((_QWORD *)this + 63) + 48) = 0;
  *(_QWORD *)(*((_QWORD *)this + 64) + 24) = v8;
  *(_QWORD *)(*((_QWORD *)this + 64) + 48) = 0;

  md::VenueWallRenderResources::VenueWallRenderResources((md::CVenueRenderResources *)((char *)this + 520), v6, a3);
  v89 = v6;
  *((_QWORD *)this + 249) = 0;
  v90 = (uint64_t *)((char *)this + 2008);
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 250) = 0;
  *((_QWORD *)this + 253) = 0;
  *((_QWORD *)this + 255) = 0;
  *((_QWORD *)this + 254) = 0;
  *((_DWORD *)this + 512) = 0;
  *((_QWORD *)this + 252) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 2052) = 65792;
  *((_DWORD *)this + 515) = 0;
  *((_QWORD *)this + 258) = 0xFFFF000202020100;
  *((_WORD *)this + 1036) = 0;
  *((_BYTE *)this + 2074) = 3;
  *(_QWORD *)((char *)this + 2083) = 0;
  *(_QWORD *)((char *)this + 2075) = 0;
  *((_BYTE *)this + 2091) = 0;
  *(_QWORD *)((char *)this + 2148) = 0;
  *(_QWORD *)((char *)this + 2140) = 0;
  *((_WORD *)this + 1102) = 257;
  *((_QWORD *)this + 276) = 0;
  *((_QWORD *)this + 277) = 0;
  *((_BYTE *)this + 2224) = 0;
  v409 = (uint64_t *)((char *)this + 2248);
  *((_QWORD *)this + 281) = 0;
  *((_QWORD *)this + 279) = 0;
  *((_QWORD *)this + 280) = 0;
  *((_QWORD *)this + 285) = 0;
  *((_DWORD *)this + 572) = 0;
  *((_QWORD *)this + 283) = 0;
  *((_QWORD *)this + 284) = 0;
  *((_QWORD *)this + 282) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 2292) = 65792;
  *((_DWORD *)this + 575) = 0;
  *((_QWORD *)this + 288) = 0xFF00FF0000000400;
  *((_WORD *)this + 1156) = 0;
  *((_BYTE *)this + 2314) = 3;
  *((_BYTE *)this + 2331) = 0;
  *(_QWORD *)((char *)this + 2323) = 0;
  *(_QWORD *)((char *)this + 2315) = 0;
  *(_QWORD *)((char *)this + 2388) = 0;
  *(_QWORD *)((char *)this + 2380) = 0;
  *((_WORD *)this + 1222) = 257;
  *((_BYTE *)this + 2464) = 0;
  *((_QWORD *)this + 307) = 0;
  *((_QWORD *)this + 306) = 0;
  v408 = (uint64_t *)((char *)this + 2488);
  *((_QWORD *)this + 310) = 0;
  *((_QWORD *)this + 309) = 0;
  *((_QWORD *)this + 311) = 0;
  *((_QWORD *)this + 314) = 0;
  *((_QWORD *)this + 313) = 0;
  *((_DWORD *)this + 632) = 0;
  *((_QWORD *)this + 315) = 0;
  *((_QWORD *)this + 312) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 2532) = 65792;
  *((_DWORD *)this + 635) = 0;
  *((_QWORD *)this + 318) = 0xFF00FF0000000400;
  *((_WORD *)this + 1276) = 0;
  *((_BYTE *)this + 2554) = 3;
  *(_QWORD *)((char *)this + 2563) = 0;
  *(_QWORD *)((char *)this + 2555) = 0;
  *((_BYTE *)this + 2571) = 0;
  *(_QWORD *)((char *)this + 2628) = 0;
  *(_QWORD *)((char *)this + 2620) = 0;
  *((_WORD *)this + 1342) = 257;
  *((_QWORD *)this + 337) = 0;
  *((_QWORD *)this + 336) = 0;
  *((_BYTE *)this + 2704) = 0;
  v411 = v89;
  v91 = -[VKSharedResources shaderLibrary](v89, "shaderLibrary");
  v92 = *(_QWORD *)(v91 + 80);
  v93 = *(uint64_t (***)())(v92 + 1712);
  v94 = *(std::__shared_weak_count **)(v92 + 1720);
  v423 = v93;
  v424 = v94;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  memset(&v426[20], 0, 24);
  v426[0] = 0;
  *(_OWORD *)&v426[4] = xmmword_19FFB3060;
  v427 = 0;
  v97 = operator new(0x198uLL);
  v97[1] = 0;
  v97[2] = 0;
  *v97 = &off_1E42E0C98;
  v98 = *(_OWORD *)&a3->colorFormatsCount;
  v428 = *(_OWORD *)a3->colorFormats;
  v429 = v98;
  *((_QWORD *)this + 249) = ggl::PolygonSolidFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v97 + 3), &v423, (uint64_t)v426, &v428);
  v99 = (std::__shared_weak_count *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = v97;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v424;
  if (v424)
  {
    v103 = (unint64_t *)&v424->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (unint64_t *)operator new();
  v423 = &off_1E42D3AC0;
  v424 = (std::__shared_weak_count *)((char *)this + 1992);
  v425 = &v423;
  v421[0] = &off_1E42D6620;
  v422 = v421;
  ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::FragmentedPool(v105, (uint64_t)&v423, (uint64_t)v421);
  v106 = *v90;
  *v90 = (uint64_t)v105;
  if (v106)
  {
    v107 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v106);
    MEMORY[0x1A1AF4E00](v107, 0x10A0C40D234DDC7);
  }
  v108 = v422;
  if (v422 == v421)
  {
    v109 = 4;
    v108 = v421;
  }
  else
  {
    if (!v422)
      goto LABEL_97;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_97:
  v110 = v425;
  if (v425 == &v423)
  {
    v111 = 4;
    v110 = &v423;
  }
  else
  {
    if (!v425)
      goto LABEL_102;
    v111 = 5;
  }
  (*v110)[v111]();
LABEL_102:
  *((_BYTE *)this + 2072) = 0;
  *((_BYTE *)this + 2224) = 1;
  if (*(_BYTE *)(-[VKSharedResources gglDevice](v89, "gglDevice") + 20))
  {
    v112 = *(_QWORD *)(v91 + 80);
    v113 = *(uint64_t (***)())(v112 + 3296);
    v114 = *(std::__shared_weak_count **)(v112 + 3304);
    v418 = v113;
    v419 = v114;
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    memset(&v426[20], 0, 24);
    v426[0] = 0;
    *(_OWORD *)&v426[4] = xmmword_19FFB3060;
    v427 = 15;
    v117 = operator new(0x198uLL);
    v117[1] = 0;
    v117[2] = 0;
    *v117 = &off_1E42E4000;
    v118 = *(_OWORD *)&a3->colorFormatsCount;
    v428 = *(_OWORD *)a3->colorFormats;
    v429 = v118;
    *((_QWORD *)this + 279) = ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::MeshPipelineState((uint64_t)(v117 + 3), &v418, (uint64_t)v426, &v428, 1);
    v119 = (std::__shared_weak_count *)*((_QWORD *)this + 280);
    *((_QWORD *)this + 280) = v117;
    if (v119)
    {
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v419;
    if (v419)
    {
      v123 = (unint64_t *)&v419->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      goto LABEL_126;
    }
  }
  else
  {
    v125 = *(_QWORD *)(v91 + 80);
    v126 = *(uint64_t (***)())(v125 + 3296);
    v127 = *(std::__shared_weak_count **)(v125 + 3304);
    v418 = v126;
    v419 = v127;
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
    v426[0] = 1;
    *(_OWORD *)&v426[4] = xmmword_19FFB4DF0;
    *(_QWORD *)&v426[20] = 0x300000008;
    *(_OWORD *)&v426[28] = 0uLL;
    v427 = 15;
    v130 = operator new(0x198uLL);
    v130[1] = 0;
    v130[2] = 0;
    *v130 = &off_1E42E4000;
    v131 = *(_OWORD *)&a3->colorFormatsCount;
    v428 = *(_OWORD *)a3->colorFormats;
    v429 = v131;
    *((_QWORD *)this + 279) = ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::MeshPipelineState((uint64_t)(v130 + 3), &v418, (uint64_t)v426, &v428, 0);
    v132 = (std::__shared_weak_count *)*((_QWORD *)this + 280);
    *((_QWORD *)this + 280) = v130;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v122 = v419;
    if (v419)
    {
      v135 = (unint64_t *)&v419->__shared_owners_;
      do
        v124 = __ldaxr(v135);
      while (__stlxr(v124 - 1, v135));
LABEL_126:
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
  }
  v136 = (uint64_t *)operator new();
  *(_QWORD *)&v428 = &off_1E42D3B08;
  *((_QWORD *)&v428 + 1) = (char *)this + 1992;
  *((_QWORD *)&v429 + 1) = &v428;
  v418 = &off_1E42D7280;
  v420 = &v418;
  v136[1] = 0;
  v136[2] = 0;
  *v136 = 0;
  {
    v395 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v395, "GeoGL", 0xA3D02C1100000005);
  }
  v138 = ggl::Allocator::instance(void)::alloc;
  v136[4] = 0;
  v136[3] = v138;
  v136[5] = 0;
  v136[6] = 0;
  {
    v396 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v396, "GeoGL", 0xA3D02C1100000005);
  }
  v136[7] = ggl::Allocator::instance(void)::alloc;
  v139 = *((_QWORD *)&v429 + 1);
  if (!*((_QWORD *)&v429 + 1))
    goto LABEL_133;
  if (*((__int128 **)&v429 + 1) != &v428)
  {
    v139 = (*(uint64_t (**)(void))(**((_QWORD **)&v429 + 1) + 16))();
LABEL_133:
    v136[11] = v139;
    goto LABEL_135;
  }
  v136[11] = (uint64_t)(v136 + 8);
  (*(void (**)(__int128 *, uint64_t *))(v428 + 24))(&v428, v136 + 8);
LABEL_135:
  v140 = (uint64_t)v420;
  if (!v420)
  {
LABEL_138:
    v136[15] = v140;
    goto LABEL_140;
  }
  if (v420 != &v418)
  {
    v140 = (*v420)[2]();
    goto LABEL_138;
  }
  v136[15] = (uint64_t)(v136 + 12);
  ((void (*)(uint64_t, _QWORD *))v418[3])((uint64_t)&v418, v136 + 12);
LABEL_140:
  v136[16] = 2000;
  v141 = *v136;
  if ((unint64_t)(v136[2] - *v136) > 0x31F)
    goto LABEL_153;
  v142 = v136[1];
  v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136[3] + 16))(v136[3], 800, 8);
  v144 = v142 - v141;
  v145 = v143 + ((v142 - v141) & 0xFFFFFFFFFFFFFFF8);
  v147 = *v136;
  v146 = v136[1];
  v148 = v146 - *v136;
  if (v146 == *v136)
  {
    v150 = v143 + ((v142 - v141) & 0xFFFFFFFFFFFFFFF8);
    v89 = v411;
    goto LABEL_151;
  }
  v149 = v148 - 8;
  v89 = v411;
  if ((unint64_t)(v148 - 8) >= 0x58)
  {
    v150 = v145;
    if (v146 - (v144 & 0xFFFFFFFFFFFFFFF8) - v143 >= 0x20)
    {
      v151 = v144 >> 3;
      v152 = (v149 >> 3) + 1;
      v153 = (_OWORD *)(v143 + 8 * v151 - 16);
      v154 = (__int128 *)(v146 - 16);
      v155 = v152 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v156 = *v154;
        *(v153 - 1) = *(v154 - 1);
        *v153 = v156;
        v153 -= 2;
        v154 -= 2;
        v155 -= 4;
      }
      while (v155);
      v150 = v145 - 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
      v146 -= 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
      if (v152 == (v152 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_150;
    }
  }
  else
  {
    v150 = v145;
  }
  do
  {
    v157 = *(_QWORD *)(v146 - 8);
    v146 -= 8;
    *(_QWORD *)(v150 - 8) = v157;
    v150 -= 8;
  }
  while (v146 != v147);
LABEL_150:
  v146 = *v136;
LABEL_151:
  *v136 = v150;
  v136[1] = v145;
  v158 = v136[2];
  v136[2] = v143 + 800;
  if (v146)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136[3] + 40))(v136[3], v146, v158 - v146);
LABEL_153:
  v159 = v136[4];
  if ((unint64_t)(v136[6] - v159) > 0x31F)
    goto LABEL_166;
  v160 = v136[5];
  v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136[7] + 16))(v136[7], 800, 8);
  v162 = v160 - v159;
  v163 = v161 + ((v160 - v159) & 0xFFFFFFFFFFFFFFF8);
  v165 = v136[4];
  v164 = v136[5];
  v166 = v164 - v165;
  if (v164 == v165)
  {
    v168 = v161 + ((v160 - v159) & 0xFFFFFFFFFFFFFFF8);
    v89 = v411;
    goto LABEL_164;
  }
  v167 = v166 - 8;
  v89 = v411;
  if ((unint64_t)(v166 - 8) >= 0x58)
  {
    v168 = v163;
    if (v164 - (v162 & 0xFFFFFFFFFFFFFFF8) - v161 >= 0x20)
    {
      v169 = v162 >> 3;
      v170 = (v167 >> 3) + 1;
      v171 = (_OWORD *)(v161 + 8 * v169 - 16);
      v172 = (__int128 *)(v164 - 16);
      v173 = v170 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v174 = *v172;
        *(v171 - 1) = *(v172 - 1);
        *v171 = v174;
        v171 -= 2;
        v172 -= 2;
        v173 -= 4;
      }
      while (v173);
      v168 = v163 - 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
      v164 -= 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
      if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_163;
    }
  }
  else
  {
    v168 = v163;
  }
  do
  {
    v175 = *(_QWORD *)(v164 - 8);
    v164 -= 8;
    *(_QWORD *)(v168 - 8) = v175;
    v168 -= 8;
  }
  while (v164 != v165);
LABEL_163:
  v164 = v136[4];
LABEL_164:
  v136[4] = v168;
  v136[5] = v163;
  v176 = v136[6];
  v136[6] = v161 + 800;
  if (v164)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136[7] + 40))(v136[7], v164, v176 - v164);
LABEL_166:
  v177 = *v409;
  *v409 = (uint64_t)v136;
  if (v177)
  {
    v178 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v177);
    MEMORY[0x1A1AF4E00](v178, 0x10A0C40D234DDC7);
  }
  v179 = v420;
  if (v420 == &v418)
  {
    v180 = 4;
    v179 = &v418;
  }
  else
  {
    if (!v420)
      goto LABEL_173;
    v180 = 5;
  }
  (*v179)[v180]();
LABEL_173:
  v181 = (__int128 *)*((_QWORD *)&v429 + 1);
  if (*((__int128 **)&v429 + 1) == &v428)
  {
    v182 = 4;
    v181 = &v428;
  }
  else
  {
    if (!*((_QWORD *)&v429 + 1))
      goto LABEL_178;
    v182 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v181 + 8 * v182))();
LABEL_178:
  *((_BYTE *)this + 2312) = 0;
  *((_BYTE *)this + 2464) = 1;
  v183 = *(_QWORD *)(v91 + 80);
  v184 = *(uint64_t (***)())(v183 + 3320);
  v185 = *(std::__shared_weak_count **)(v183 + 3328);
  v415 = v184;
  v416 = v185;
  if (v185)
  {
    v186 = (unint64_t *)&v185->__shared_owners_;
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  v188 = (char *)operator new(0x198uLL);
  *((_QWORD *)v188 + 1) = 0;
  *((_QWORD *)v188 + 2) = 0;
  *(_QWORD *)v188 = &off_1E42E3C48;
  v189 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v426 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v426[16] = v189;
  if ((v190 & 1) == 0)
  {
    if ((_DWORD)v397)
    {
      if ((v398 & 1) == 0)
      {
        if ((_DWORD)v397)
        {
          if ((v405 & 1) == 0
          {
            if ((v407 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D00 = 1;
          }
          ggl::VenueOpenToBelowShadow::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57F718 = &ggl::VenueOpenToBelowShadow::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57F720 = 0;
          if ((v406 & 1) == 0
          {
            ggl::VenueOpenToBelowShadow::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57F748 = ggl::VenueOpenToBelowShadow::Style::reflection(void)::reflection;
          }
          qword_1EE57F728 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineDataMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57F730 = xmmword_19FFB35C0;
        }
      }
      ggl::VenueOpenToBelowShadow::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueOpenToBelowShadow::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueOpenToBelowShadowShader::typedReflection(v397);
      qword_1ECE2F440 = (uint64_t)&ggl::VenueOpenToBelowShadowShader::typedReflection(void)::ref;
      if ((v399 & 1) == 0
      {
        ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57F7B8 = 0;
        qword_1EE57F7C0 = (uint64_t)"";
        dword_1EE57F7C8 = 0;
        qword_1EE57F7D0 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57F7D8 = 3;
      }
      qword_1ECE2F448 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F450 = 1;
      qword_1ECE2F458 = 0;
      unk_1ECE2F460 = 0;
      qword_1ECE2F468 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F470 = 0;
      if ((v400 & 1) == 0
      {
        ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57F758 = 0;
        qword_1EE57F760 = (uint64_t)"view";
        dword_1EE57F768 = 3;
        qword_1EE57F770 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57F778 = xmmword_19FFB35A0;
        qword_1EE57F788 = 1;
        unk_1EE57F790 = "style";
        dword_1EE57F798 = 3;
        qword_1EE57F7A0 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57F7A8 = 2;
      }
      qword_1ECE2F478 = (uint64_t)&ggl::VenueOpenToBelowShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F480 = 2;
      v89 = v411;
    }
  }
  v191 = v415;
  v192 = v416;
  if (v416)
  {
    v193 = &v416->__shared_owners_;
    do
      v194 = __ldxr((unint64_t *)v193);
    while (__stxr(v194 + 1, (unint64_t *)v193));
    *((_DWORD *)v188 + 14) = 0;
    *((_QWORD *)v188 + 5) = 0;
    *((_QWORD *)v188 + 6) = 0;
    *((_QWORD *)v188 + 3) = &off_1E42B6760;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 8) = &ggl::VenueOpenToBelowShadow::MeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v188 + 9) = v191;
    *((_QWORD *)v188 + 10) = v192;
    do
      v195 = __ldxr((unint64_t *)v193);
    while (__stxr(v195 + 1, (unint64_t *)v193));
  }
  else
  {
    *((_DWORD *)v188 + 14) = 0;
    *((_QWORD *)v188 + 5) = 0;
    *((_QWORD *)v188 + 6) = 0;
    *((_QWORD *)v188 + 3) = &off_1E42B6760;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 8) = &ggl::VenueOpenToBelowShadow::MeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v188 + 9) = v191;
    *((_QWORD *)v188 + 10) = 0;
  }
  v188[136] = 0;
  *(_OWORD *)(v188 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 156) = 0;
  *(_QWORD *)(v188 + 172) = 0;
  *(_QWORD *)(v188 + 164) = 0;
  v188[184] = 0;
  *(_OWORD *)(v188 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 204) = 0;
  *(_QWORD *)(v188 + 220) = 0;
  *(_QWORD *)(v188 + 212) = 0;
  v188[232] = 0;
  *(_OWORD *)(v188 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 252) = 0;
  *(_QWORD *)(v188 + 268) = 0;
  *(_QWORD *)(v188 + 260) = 0;
  v196 = *(_OWORD *)&v426[16];
  *(_OWORD *)(v188 + 280) = *(_OWORD *)v426;
  *(_OWORD *)(v188 + 296) = v196;
  v188[312] = 0;
  *((_QWORD *)v188 + 48) = 0;
  *((_OWORD *)v188 + 22) = 0u;
  *((_OWORD *)v188 + 23) = 0u;
  *((_OWORD *)v188 + 20) = 0u;
  *((_OWORD *)v188 + 21) = 0u;
  *((_QWORD *)v188 + 49) = 0x100000001;
  v188[400] = 0;
  v188[88] = 1;
  *(_WORD *)(v188 + 89) = v413;
  v188[91] = BYTE2(v413);
  *(_OWORD *)(v188 + 92) = xmmword_19FFB5860;
  *(_QWORD *)(v188 + 108) = 12;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v188 + 116) = _Q0;
  v188[132] = 15;
  if (v192)
  {
    v202 = (unint64_t *)&v192->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  *((_WORD *)v188 + 164) = 0;
  v204 = *(int8x16_t *)(v188 + 344);
  v205 = vceqzq_s8(*(int8x16_t *)(v188 + 328));
  v206 = vmovl_high_s8(v205);
  v207 = vmovl_s16(*(int16x4_t *)v206.i8);
  v208.i64[0] = v207.u32[0];
  v208.i64[1] = v207.u32[1];
  v209 = v208;
  v210 = vmovl_s8(*(int8x8_t *)v205.i8);
  v211 = vmovl_s16(*(int16x4_t *)v210.i8);
  *((_QWORD *)v188 + 3) = &off_1E42BB0E0;
  v208.i64[0] = v211.u32[0];
  v208.i64[1] = v211.u32[1];
  v212 = v208;
  v213 = vmovl_high_s16(v206);
  v208.i64[0] = v213.u32[0];
  v208.i64[1] = v213.u32[1];
  v214 = v208;
  v215 = vmovl_high_s16(v210);
  v208.i64[0] = v215.u32[0];
  v208.i64[1] = v215.u32[1];
  v216 = v208;
  v208.i64[0] = v207.u32[2];
  v208.i64[1] = v207.u32[3];
  v217 = v208;
  v208.i64[0] = v211.u32[2];
  v208.i64[1] = v211.u32[3];
  v218 = v208;
  v208.i64[0] = v213.u32[2];
  v208.i64[1] = v213.u32[3];
  v219 = v208;
  v208.i64[0] = v215.u32[2];
  v208.i64[1] = v215.u32[3];
  v220 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v208);
  v221 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v219);
  v222 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v218);
  v223 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v214);
  v224 = vceqzq_s8(v204);
  v225 = vmovl_high_s8(v224);
  v226 = vmovl_s16(*(int16x4_t *)v225.i8);
  v208.i64[0] = v226.u32[0];
  v208.i64[1] = v226.u32[1];
  v227 = v208;
  v228 = vmovl_s8(*(int8x8_t *)v224.i8);
  v229 = vmovl_s16(*(int16x4_t *)v228.i8);
  v208.i64[0] = v229.u32[0];
  v208.i64[1] = v229.u32[1];
  v230 = v208;
  v231 = vmovl_high_s16(v225);
  v208.i64[0] = v231.u32[0];
  v208.i64[1] = v231.u32[1];
  v232 = v208;
  v233 = vmovl_high_s16(v228);
  v208.i64[0] = v233.u32[0];
  v208.i64[1] = v233.u32[1];
  v234 = v208;
  v208.i64[0] = v226.u32[2];
  v208.i64[1] = v226.u32[3];
  v235 = v208;
  v208.i64[0] = v229.u32[2];
  v208.i64[1] = v229.u32[3];
  v236 = v208;
  v208.i64[0] = v231.u32[2];
  v208.i64[1] = v231.u32[3];
  v237 = v208;
  v208.i64[0] = v233.u32[2];
  v208.i64[1] = v233.u32[3];
  v238 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v237);
  v239 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v227), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v209));
  v240 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v230), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v212));
  v241 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v232), v223);
  v242 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v234), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v216));
  v243 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v235), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v217));
  v244 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v236), v222);
  v245 = vorrq_s8(v238, v221);
  v246 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v208), v220);
  v247 = vceqzq_s8(*(int8x16_t *)(v188 + 360));
  v248 = vmovl_s8(*(int8x8_t *)v247.i8);
  v249 = vmovl_high_s16(v248);
  v208.i64[0] = v249.i32[2];
  v208.i64[1] = v249.i32[3];
  v250 = v208;
  v251 = vmovl_high_s8(v247);
  v252 = vmovl_high_s16(v251);
  v208.i64[0] = v252.i32[2];
  v208.i64[1] = v252.i32[3];
  v253 = v208;
  v254 = vmovl_s16(*(int16x4_t *)v248.i8);
  v208.i64[0] = v254.i32[2];
  v208.i64[1] = v254.i32[3];
  v255 = v208;
  v256 = vmovl_s16(*(int16x4_t *)v251.i8);
  v208.i64[0] = v256.i32[2];
  v208.i64[1] = v256.i32[3];
  v257 = v208;
  v208.i64[0] = v249.i32[0];
  v208.i64[1] = v249.i32[1];
  v258 = v208;
  v208.i64[0] = v252.i32[0];
  v208.i64[1] = v252.i32[1];
  v259 = v208;
  v208.i64[0] = v254.i32[0];
  v208.i64[1] = v254.i32[1];
  v260 = v208;
  v208.i64[0] = v256.i32[0];
  v208.i64[1] = v256.i32[1];
  v261 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v208);
  v262 = vceqzq_s8(*(int8x16_t *)(v188 + 376));
  v263 = vmovl_high_s8(v262);
  v264 = vmovl_s16(*(int16x4_t *)v263.i8);
  v208.i64[0] = v264.i32[0];
  v208.i64[1] = v264.i32[1];
  v265 = v208;
  v266 = vmovl_s8(*(int8x8_t *)v262.i8);
  v267 = vmovl_s16(*(int16x4_t *)v266.i8);
  v208.i64[0] = v267.i32[0];
  v208.i64[1] = v267.i32[1];
  v268 = v208;
  v269 = vmovl_high_s16(v263);
  v208.i64[0] = v269.i32[0];
  v208.i64[1] = v269.i32[1];
  v270 = v208;
  v271 = vmovl_high_s16(v266);
  v208.i64[0] = v271.i32[0];
  v208.i64[1] = v271.i32[1];
  v272 = v208;
  v208.i64[0] = v264.i32[2];
  v208.i64[1] = v264.i32[3];
  v273 = v208;
  v208.i64[0] = v267.i32[2];
  v208.i64[1] = v267.i32[3];
  v274 = v208;
  v208.i64[0] = v269.i32[2];
  v208.i64[1] = v269.i32[3];
  v275 = v208;
  v208.i64[0] = v271.i32[2];
  v208.i64[1] = v271.i32[3];
  *((_QWORD *)v188 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v268), vbicq_s8((int8x16_t)xmmword_19FFB3170, v260)), v240), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v265), v261), v239)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v272), vbicq_s8((int8x16_t)xmmword_19FFB3190, v258)), v242), vorrq_s8(vorrq_s8(
                                                  vbicq_s8((int8x16_t)xmmword_19FFB3230, v270),
                                                  vbicq_s8((int8x16_t)xmmword_19FFB3180, v259)),
                                                v241))),
                               (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v274), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v255)), v244), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v273), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v257)), v243)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v208), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v250)), v246), vorrq_s8(vorrq_s8(
                                                  vbicq_s8((int8x16_t)xmmword_19FFB31F0, v275),
                                                  vbicq_s8((int8x16_t)xmmword_19FFB31C0, v253)),
                                                v245)))));
  v188[312] = 1;
  *((_QWORD *)this + 309) = v188 + 24;
  v276 = (std::__shared_weak_count *)*((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = v188;
  if (v276)
  {
    v277 = (unint64_t *)&v276->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  if (v416)
  {
    v279 = &v416->__shared_owners_;
    do
      v280 = __ldaxr((unint64_t *)v279);
    while (__stlxr(v280 - 1, (unint64_t *)v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
      std::__shared_weak_count::__release_weak(v416);
    }
  }
  v281 = (uint64_t *)operator new();
  *(_QWORD *)v426 = &off_1E42D3B50;
  *(_QWORD *)&v426[8] = (char *)this + 1992;
  *(_QWORD *)&v426[24] = v426;
  v415 = &off_1E42D6FF8;
  v417 = &v415;
  v281[1] = 0;
  v281[2] = 0;
  *v281 = 0;
  {
    v401 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v401, "GeoGL", 0xA3D02C1100000005);
  }
  v283 = ggl::Allocator::instance(void)::alloc;
  v281[4] = 0;
  v281[3] = v283;
  v281[5] = 0;
  v281[6] = 0;
  {
    v402 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v402, "GeoGL", 0xA3D02C1100000005);
  }
  v281[7] = ggl::Allocator::instance(void)::alloc;
  v284 = *(_QWORD *)&v426[24];
  if (!*(_QWORD *)&v426[24])
    goto LABEL_209;
  if (*(_BYTE **)&v426[24] != v426)
  {
    v284 = (*(uint64_t (**)(void))(**(_QWORD **)&v426[24] + 16))();
LABEL_209:
    v281[11] = v284;
    goto LABEL_211;
  }
  v281[11] = (uint64_t)(v281 + 8);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v426 + 24))(v426, v281 + 8);
LABEL_211:
  v285 = (uint64_t)v417;
  if (!v417)
  {
LABEL_214:
    v281[15] = v285;
    goto LABEL_216;
  }
  if (v417 != &v415)
  {
    v285 = (*v417)[2]();
    goto LABEL_214;
  }
  v281[15] = (uint64_t)(v281 + 12);
  ((void (*)(uint64_t, _QWORD *))v415[3])((uint64_t)&v415, v281 + 12);
LABEL_216:
  v281[16] = 2000;
  v286 = *v281;
  if ((unint64_t)(v281[2] - *v281) > 0x31F)
    goto LABEL_229;
  v287 = v281[1];
  v288 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v281[3] + 16))(v281[3], 800, 8);
  v289 = v287 - v286;
  v290 = v288 + ((v287 - v286) & 0xFFFFFFFFFFFFFFF8);
  v292 = *v281;
  v291 = v281[1];
  v293 = v291 - *v281;
  if (v291 == *v281)
  {
    v295 = v288 + ((v287 - v286) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_227;
  }
  v294 = v293 - 8;
  if ((unint64_t)(v293 - 8) >= 0x58)
  {
    v295 = v288 + ((v287 - v286) & 0xFFFFFFFFFFFFFFF8);
    if (v291 - (v289 & 0xFFFFFFFFFFFFFFF8) - v288 >= 0x20)
    {
      v296 = v289 >> 3;
      v297 = (v294 >> 3) + 1;
      v298 = (_OWORD *)(v288 + 8 * v296 - 16);
      v299 = (__int128 *)(v291 - 16);
      v300 = v297 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v301 = *v299;
        *(v298 - 1) = *(v299 - 1);
        *v298 = v301;
        v298 -= 2;
        v299 -= 2;
        v300 -= 4;
      }
      while (v300);
      v295 = v290 - 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
      v291 -= 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
      if (v297 == (v297 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_226;
    }
  }
  else
  {
    v295 = v288 + ((v287 - v286) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v302 = *(_QWORD *)(v291 - 8);
    v291 -= 8;
    *(_QWORD *)(v295 - 8) = v302;
    v295 -= 8;
  }
  while (v291 != v292);
LABEL_226:
  v291 = *v281;
LABEL_227:
  *v281 = v295;
  v281[1] = v290;
  v303 = v281[2];
  v281[2] = v288 + 800;
  if (v291)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v281[3] + 40))(v281[3], v291, v303 - v291);
LABEL_229:
  v304 = v281[4];
  if ((unint64_t)(v281[6] - v304) > 0x31F)
    goto LABEL_242;
  v305 = v281[5];
  v306 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v281[7] + 16))(v281[7], 800, 8);
  v307 = v305 - v304;
  v308 = v306 + ((v305 - v304) & 0xFFFFFFFFFFFFFFF8);
  v310 = v281[4];
  v309 = v281[5];
  v311 = v309 - v310;
  if (v309 == v310)
  {
    v313 = v306 + ((v305 - v304) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_240;
  }
  v312 = v311 - 8;
  if ((unint64_t)(v311 - 8) >= 0x58)
  {
    v313 = v306 + ((v305 - v304) & 0xFFFFFFFFFFFFFFF8);
    if (v309 - (v307 & 0xFFFFFFFFFFFFFFF8) - v306 >= 0x20)
    {
      v314 = v307 >> 3;
      v315 = (v312 >> 3) + 1;
      v316 = (_OWORD *)(v306 + 8 * v314 - 16);
      v317 = (__int128 *)(v309 - 16);
      v318 = v315 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v319 = *v317;
        *(v316 - 1) = *(v317 - 1);
        *v316 = v319;
        v316 -= 2;
        v317 -= 2;
        v318 -= 4;
      }
      while (v318);
      v313 = v308 - 8 * (v315 & 0x3FFFFFFFFFFFFFFCLL);
      v309 -= 8 * (v315 & 0x3FFFFFFFFFFFFFFCLL);
      if (v315 == (v315 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_239;
    }
  }
  else
  {
    v313 = v306 + ((v305 - v304) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v320 = *(_QWORD *)(v309 - 8);
    v309 -= 8;
    *(_QWORD *)(v313 - 8) = v320;
    v313 -= 8;
  }
  while (v309 != v310);
LABEL_239:
  v309 = v281[4];
LABEL_240:
  v281[4] = v313;
  v281[5] = v308;
  v321 = v281[6];
  v281[6] = v306 + 800;
  if (v309)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v281[7] + 40))(v281[7], v309, v321 - v309);
LABEL_242:
  v322 = *v408;
  *v408 = (uint64_t)v281;
  if (v322)
  {
    v323 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v322);
    MEMORY[0x1A1AF4E00](v323, 0x10A0C40D234DDC7);
  }
  v324 = v417;
  if (v417 == &v415)
  {
    v325 = 4;
    v324 = &v415;
  }
  else
  {
    if (!v417)
      goto LABEL_249;
    v325 = 5;
  }
  (*v324)[v325]();
LABEL_249:
  v326 = *(_QWORD **)&v426[24];
  if (*(_BYTE **)&v426[24] == v426)
  {
    v327 = 4;
    v326 = v426;
  }
  else
  {
    if (!*(_QWORD *)&v426[24])
      goto LABEL_254;
    v327 = 5;
  }
  (*(void (**)(void))(*v326 + 8 * v327))();
LABEL_254:
  *((_BYTE *)this + 2552) = 0;
  *((_BYTE *)this + 2704) = 1;

  v328 = v89;
  *((_QWORD *)this + 339) = 0;
  v412 = (uint64_t *)((char *)this + 2728);
  *((_OWORD *)this + 170) = 0u;
  *((_QWORD *)this + 343) = 0;
  *((_OWORD *)this + 172) = 0u;
  *((_DWORD *)this + 692) = 0;
  *((_QWORD *)this + 342) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 2772) = 65537;
  *((_DWORD *)this + 695) = 0;
  *((_QWORD *)this + 348) = 0xFFFF000202020100;
  *((_WORD *)this + 1396) = 0;
  *((_BYTE *)this + 2794) = 3;
  *(_OWORD *)((char *)this + 2795) = 0u;
  *((_BYTE *)this + 2811) = 0;
  *(_OWORD *)((char *)this + 2860) = 0u;
  *((_WORD *)this + 1462) = 257;
  *((_OWORD *)this + 183) = 0u;
  *((_BYTE *)this + 2944) = 0;
  *(_OWORD *)((char *)this + 2952) = 0u;
  *((_QWORD *)this + 371) = 0;
  *((_QWORD *)this + 375) = 0;
  *((_DWORD *)this + 752) = 0;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *((_QWORD *)this + 372) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 3012) = 65537;
  *((_DWORD *)this + 755) = 0;
  *((_QWORD *)this + 378) = 0xFFFF000202020100;
  *((_WORD *)this + 1516) = 0;
  *((_BYTE *)this + 3034) = 3;
  *(_OWORD *)((char *)this + 3035) = 0u;
  *((_BYTE *)this + 3051) = 0;
  *(_OWORD *)((char *)this + 3100) = 0u;
  *((_WORD *)this + 1582) = 257;
  *((_OWORD *)this + 198) = 0u;
  *((_BYTE *)this + 3184) = 0;
  v410 = (uint64_t *)((char *)this + 3208);
  *((_QWORD *)this + 401) = 0;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *((_DWORD *)this + 812) = 0;
  *((_QWORD *)this + 405) = 0;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *((_QWORD *)this + 402) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 3252) = 65537;
  *((_DWORD *)this + 815) = 0;
  *((_QWORD *)this + 408) = 0xFF00FF0000000400;
  *((_WORD *)this + 1636) = 0;
  *((_BYTE *)this + 3274) = 3;
  *((_BYTE *)this + 3291) = 0;
  *(_OWORD *)((char *)this + 3275) = 0u;
  *(_OWORD *)((char *)this + 3340) = 0u;
  *((_WORD *)this + 1702) = 257;
  *((_BYTE *)this + 3424) = 0;
  *((_OWORD *)this + 213) = 0u;
  v329 = (uint64_t *)((char *)this + 3448);
  *((_QWORD *)this + 431) = 0;
  *(_OWORD *)((char *)this + 3432) = 0u;
  *((_QWORD *)this + 435) = 0;
  *((_DWORD *)this + 872) = 0;
  *((_QWORD *)this + 433) = 0;
  *((_QWORD *)this + 434) = 0;
  *((_QWORD *)this + 432) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 3492) = 768;
  *((_DWORD *)this + 875) = 0;
  *((_QWORD *)this + 438) = 1;
  *((_WORD *)this + 1756) = 0;
  *((_BYTE *)this + 3514) = 3;
  *(_QWORD *)((char *)this + 3523) = 0;
  *(_QWORD *)((char *)this + 3515) = 0;
  *((_BYTE *)this + 3531) = 0;
  *(_QWORD *)((char *)this + 3588) = 0;
  *(_QWORD *)((char *)this + 3580) = 0;
  *((_WORD *)this + 1822) = 257;
  *((_QWORD *)this + 457) = 0;
  *((_QWORD *)this + 456) = 0;
  *((_BYTE *)this + 3664) = 0;
  v330 = -[VKSharedResources shaderLibrary](v328, "shaderLibrary");
  v331 = *(_QWORD *)(v330 + 80);
  v332 = *(uint64_t (***)())(v331 + 1712);
  v333 = *(std::__shared_weak_count **)(v331 + 1720);
  v423 = v332;
  v424 = v333;
  if (v333)
  {
    v334 = (unint64_t *)&v333->__shared_owners_;
    do
      v335 = __ldxr(v334);
    while (__stxr(v335 + 1, v334));
  }
  memset(&v426[20], 0, 24);
  v426[0] = 0;
  *(_OWORD *)&v426[4] = xmmword_19FFB3060;
  v427 = 0;
  v336 = operator new(0x198uLL);
  v336[1] = 0;
  v336[2] = 0;
  *v336 = &off_1E42E0C98;
  v337 = *(_OWORD *)&a3->colorFormatsCount;
  v428 = *(_OWORD *)a3->colorFormats;
  v429 = v337;
  *((_QWORD *)this + 339) = ggl::PolygonSolidFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v336 + 3), &v423, (uint64_t)v426, &v428);
  v338 = (std::__shared_weak_count *)*((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = v336;
  if (v338)
  {
    v339 = (unint64_t *)&v338->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  v341 = v424;
  if (v424)
  {
    v342 = (unint64_t *)&v424->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = (unint64_t *)operator new();
  v423 = &off_1E42D36D0;
  v424 = (std::__shared_weak_count *)((char *)this + 2712);
  v425 = &v423;
  v421[0] = &off_1E42D6620;
  v422 = v421;
  ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::FragmentedPool(v344, (uint64_t)&v423, (uint64_t)v421);
  v345 = *v412;
  *v412 = (uint64_t)v344;
  if (v345)
  {
    v346 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v345);
    MEMORY[0x1A1AF4E00](v346, 0x10A0C40D234DDC7);
  }
  v347 = v422;
  if (v422 == v421)
  {
    v348 = 4;
    v347 = v421;
  }
  else
  {
    if (!v422)
      goto LABEL_274;
    v348 = 5;
  }
  (*(void (**)(void))(*v347 + 8 * v348))();
LABEL_274:
  v349 = v425;
  if (v425 == &v423)
  {
    v350 = 4;
    v349 = &v423;
  }
  else
  {
    if (!v425)
      goto LABEL_279;
    v350 = 5;
  }
  (*v349)[v350]();
LABEL_279:
  *((_BYTE *)this + 3032) = 0;
  *((_BYTE *)this + 3184) = 1;
  *((_BYTE *)this + 2792) = 0;
  *((_BYTE *)this + 2944) = 1;
  v351 = *(_QWORD *)(v330 + 80);
  v352 = *(uint64_t (***)())(v351 + 1712);
  v353 = *(std::__shared_weak_count **)(v351 + 1720);
  v418 = v352;
  v419 = v353;
  if (v353)
  {
    v354 = (unint64_t *)&v353->__shared_owners_;
    do
      v355 = __ldxr(v354);
    while (__stxr(v355 + 1, v354));
  }
  memset(&v426[24], 0, 20);
  v426[0] = 1;
  *(_OWORD *)&v426[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v426[20] = 7;
  v427 = 15;
  v356 = operator new(0x198uLL);
  v356[1] = 0;
  v356[2] = 0;
  *v356 = &off_1E42E0C98;
  v357 = *(_OWORD *)&a3->colorFormatsCount;
  v428 = *(_OWORD *)a3->colorFormats;
  v429 = v357;
  *((_QWORD *)this + 399) = ggl::PolygonSolidFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v356 + 3), &v418, (uint64_t)v426, &v428);
  v358 = (std::__shared_weak_count *)*((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = v356;
  if (v358)
  {
    v359 = (unint64_t *)&v358->__shared_owners_;
    do
      v360 = __ldaxr(v359);
    while (__stlxr(v360 - 1, v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  v361 = v419;
  if (v419)
  {
    v362 = (unint64_t *)&v419->__shared_owners_;
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
    }
  }
  v364 = (unint64_t *)operator new();
  v418 = &off_1E42D3718;
  v419 = (std::__shared_weak_count *)((char *)this + 2712);
  v420 = &v418;
  v415 = &off_1E42D6620;
  v417 = &v415;
  ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::FragmentedPool(v364, (uint64_t)&v418, (uint64_t)&v415);
  v365 = *v410;
  *v410 = (uint64_t)v364;
  if (v365)
  {
    v366 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v365);
    MEMORY[0x1A1AF4E00](v366, 0x10A0C40D234DDC7);
  }
  v367 = v417;
  if (v417 == &v415)
  {
    v368 = 4;
    v367 = &v415;
  }
  else
  {
    if (!v417)
      goto LABEL_299;
    v368 = 5;
  }
  (*v367)[v368]();
LABEL_299:
  v369 = v420;
  if (v420 == &v418)
  {
    v370 = 4;
    v369 = &v418;
  }
  else
  {
    if (!v420)
      goto LABEL_304;
    v370 = 5;
  }
  (*v369)[v370]();
LABEL_304:
  *((_BYTE *)this + 3272) = 0;
  *((_BYTE *)this + 3424) = 1;
  v371 = *(_QWORD *)(v330 + 80);
  v372 = *(_QWORD *)(v371 + 1712);
  v373 = *(std::__shared_weak_count **)(v371 + 1720);
  v413 = v372;
  v414 = v373;
  if (v373)
  {
    v374 = (unint64_t *)&v373->__shared_owners_;
    do
      v375 = __ldxr(v374);
    while (__stxr(v375 + 1, v374));
  }
  memset(&v426[24], 0, 20);
  v426[0] = 1;
  *(_OWORD *)&v426[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v426[20] = 7;
  v427 = 15;
  v376 = operator new(0x198uLL);
  v376[1] = 0;
  v376[2] = 0;
  *v376 = &off_1E42E0C98;
  v377 = *(_OWORD *)&a3->colorFormatsCount;
  v428 = *(_OWORD *)a3->colorFormats;
  v429 = v377;
  *((_QWORD *)this + 429) = ggl::PolygonSolidFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v376 + 3), &v413, (uint64_t)v426, &v428);
  v378 = (std::__shared_weak_count *)*((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = v376;
  if (v378)
  {
    v379 = (unint64_t *)&v378->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v381 = v414;
  if (v414)
  {
    v382 = (unint64_t *)&v414->__shared_owners_;
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  v384 = (unint64_t *)operator new();
  *(_QWORD *)v426 = &off_1E42D3760;
  *(_QWORD *)&v426[8] = (char *)this + 2712;
  *(_QWORD *)&v426[24] = v426;
  *(_QWORD *)&v428 = &off_1E42D6620;
  *((_QWORD *)&v429 + 1) = &v428;
  ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::FragmentedPool(v384, (uint64_t)v426, (uint64_t)&v428);
  v385 = *v329;
  *v329 = (uint64_t)v384;
  if (v385)
  {
    v386 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v385);
    MEMORY[0x1A1AF4E00](v386, 0x10A0C40D234DDC7);
  }
  v387 = (__int128 *)*((_QWORD *)&v429 + 1);
  if (*((__int128 **)&v429 + 1) == &v428)
  {
    v388 = 4;
    v387 = &v428;
  }
  else
  {
    if (!*((_QWORD *)&v429 + 1))
      goto LABEL_324;
    v388 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v387 + 8 * v388))();
LABEL_324:
  v389 = *(_QWORD **)&v426[24];
  if (*(_BYTE **)&v426[24] == v426)
  {
    v390 = 4;
    v389 = v426;
    goto LABEL_328;
  }
  if (*(_QWORD *)&v426[24])
  {
    v390 = 5;
LABEL_328:
    (*(void (**)(void))(*v389 + 8 * v390))();
  }

  *((_WORD *)this + 1836) = -1;
  *((_BYTE *)this + 3674) = 100;
  *((_BYTE *)this + 3676) = 0;
  *((_QWORD *)this + 461) = 0;
  *((_QWORD *)this + 460) = 0;
  *((_BYTE *)this + 3696) = 0;
  *((_DWORD *)this + 925) = 1065353216;
  *((_BYTE *)this + 3704) = 0;
  v391 = 0uLL;
  *(_OWORD *)((char *)this + 3708) = 0u;
  *(_OWORD *)((char *)this + 3724) = 0u;
  *(_OWORD *)((char *)this + 3740) = 0u;
  *((_DWORD *)this + 939) = 0;
  if ((v392 & 1) == 0)
  {
    v391 = 0uLL;
    if (v403)
    {
      v404 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v404, "GeoGL", 0xA3D02C1100000005);
      v391 = 0uLL;
    }
  }
  *((_QWORD *)this + 470) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 475) = 0;
  *(_OWORD *)((char *)this + 3768) = v391;
  *(_OWORD *)((char *)this + 3784) = v391;
  *((_QWORD *)this + 476) = 32;
  v393 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v393 = 0;
  v393[1] = 0;
  *((_QWORD *)this + 474) = v393;
  *((_QWORD *)this + 475) = v393;

  return this;
}

void sub_19F2EDD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::VenueWallRenderResources *a10, ggl::Texture *a11, uint64_t *a12, void *a13, ggl::Texture *a14, uint64_t *a15, uint64_t *a16, void *a17, md::VenueOpenToBelowRenderResources *a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  ggl::Texture *v41;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  ggl::Texture::~Texture(v41);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v40 + 2472);
  ggl::Texture::~Texture(a11);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v40 + 2232);
  ggl::Texture::~Texture((ggl::Texture *)(v40 + 2016));
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)a18);

  md::VenueWallRenderResources::~VenueWallRenderResources(a10);
  md::VenueDimmingOverlayRenderResources::~VenueDimmingOverlayRenderResources((md::VenueDimmingOverlayRenderResources *)v40);

  _Unwind_Resume(a1);
}

void sub_19F2EE36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_27VenueOpenToBelowShadowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7280;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22VenueOpenToBelowShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6FF8;
}

unint64_t *ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F2EE76C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6620;
}

void md::DebugRenderLayer::~DebugRenderLayer(md::DebugRenderLayer *this)
{
  char *v2;
  md::DebugLayerRenderResources *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42919D0;
  v2 = (char *)this + 56;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)v2);
  v3 = (md::DebugLayerRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    md::DebugLayerRenderResources::~DebugLayerRenderResources(v3);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  md::DebugLayerRenderResources *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42919D0;
  v2 = (char *)this + 56;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)v2);
  v3 = (md::DebugLayerRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    md::DebugLayerRenderResources::~DebugLayerRenderResources(v3);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_11:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_10:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_11;
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void gdc::ManagedObjectHolder<md::HillshadeContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0E10;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ManagedObjectHolder<md::PolygonContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0C58;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C4004CED998);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ManagedObjectHolder<md::HikingContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0B90;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C4096AF022DLL);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ManagedObjectHolder<md::EntityDebugHighlightContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::DebugDrawContext *v1;

  *a1 = &off_1E42B1388;
  v1 = (md::DebugDrawContext *)a1[4];
  if (v1)
  {
    md::DebugDrawContext::~DebugDrawContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v16, a1);
  v5 = operator new();
  v6 = v16;
  v7 = v17;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v18;
  v8 = v19;
  *(_QWORD *)(v5 + 16) = v18;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v20;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v6 + 8 * v10) = v5 + 16;
    v18 = 0;
    v19 = 0;
  }
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  *(_QWORD *)(v5 + 56) = v23;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v25;
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 56;
    v23 = 0;
    v24 = 0;
  }
  *(_OWORD *)(v5 + 80) = v26;
  *(_QWORD *)(v5 + 96) = v27;
  v26 = 0uLL;
  *(_OWORD *)(v5 + 104) = v28;
  *(_QWORD *)(v5 + 120) = v29;
  v27 = 0;
  v28 = 0uLL;
  v29 = 0;
  v4[2] = "md::DebugDrawContext]";
  v4[3] = 20;
  v4[4] = v5;
  *v4 = &off_1E42B0DC0;
  v4[1] = 0x3619066E3FB5F2CLL;
  *a2 = v4;
  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&v16);
}

void sub_19F2EECC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v16, a1);
  v5 = operator new();
  v6 = v16;
  v7 = v17;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v18;
  v8 = v19;
  *(_QWORD *)(v5 + 16) = v18;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v20;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v6 + 8 * v10) = v5 + 16;
    v18 = 0;
    v19 = 0;
  }
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  *(_QWORD *)(v5 + 56) = v23;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v25;
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 56;
    v23 = 0;
    v24 = 0;
  }
  *(_OWORD *)(v5 + 80) = v26;
  *(_QWORD *)(v5 + 96) = v27;
  v26 = 0uLL;
  *(_OWORD *)(v5 + 104) = v28;
  *(_QWORD *)(v5 + 120) = v29;
  v27 = 0;
  v28 = 0uLL;
  v29 = 0;
  v4[2] = "md::EntityDebugHighlightContext]";
  v4[3] = 31;
  v4[4] = v5;
  *v4 = &off_1E42B1388;
  v4[1] = 0xE75FAB3171C16149;
  *a2 = v4;
  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&v16);
}

void sub_19F2EEE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

double md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

void gdc::ManagedObjectHolder<md::ElevatedOverlayContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1180;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F2EF000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZZ40__VKSceneConfiguration_setStyleManager__ENK3__0clENSt3__110shared_ptrIN3gss17StylesheetManagerINS2_10PropertyIDEEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  float *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 16);
      v4 = atomic_load((unsigned __int8 *)(v3 + 2784));
      if ((v4 & 1) == 0)
        std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v3 + 2808));
      v5 = *(float **)(v3 + 120);
      v6 = *(std::__shared_weak_count **)(v3 + 128);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 152) = v5[65];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 160) = v5[66];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 168) = v5[67];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 176) = v5[68];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 184) = v5[69];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 192) = v5[70];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 200) = v5[71];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 208) = v5[80];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 216) = v5[81];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 224) = v5[82];
      *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 232) = v5[83];
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void md::DrapingTaskScheduler::reset(md::DrapingTaskScheduler *this)
{
  _QWORD *v2;
  unsigned __int8 *i;
  uint64_t *v4;
  uint64_t j;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t k;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 8);
  for (i = (unsigned __int8 *)*((_QWORD *)this + 3); i; i = *(unsigned __int8 **)i)
  {
    v4 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>(v2, i + 16);
    if (v4)
    {
      for (j = v4[8]; j; j = *(_QWORD *)j)
      {
        if (!atomic_load(*(unsigned __int8 **)(j + 64)))
        {
          atomic_store(3u, *(unsigned __int8 **)(j + 64));
          atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(j + 64) + 8) + 32));
        }
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)this + 128);
  v20[0] = &off_1E42D0598;
  v21 = v20;
  geo::TaskQueue::barrierSync(v7, v20);
  v8 = v21;
  if (v21 == v20)
  {
    v9 = 4;
    v8 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  if (*((_QWORD *)this + 4))
  {
    v10 = (_QWORD *)*((_QWORD *)this + 3);
    if (v10)
    {
      do
      {
        v13 = (_QWORD *)*v10;
        v14 = (_QWORD *)v10[8];
        while (v14)
        {
          v16 = v14;
          v14 = (_QWORD *)*v14;
          v17 = (std::__shared_weak_count *)v16[9];
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          operator delete(v16);
        }
        v15 = (void *)v10[6];
        v10[6] = 0;
        if (v15)
          operator delete(v15);
        operator delete(v10);
        v10 = v13;
      }
      while (v13);
    }
    *((_QWORD *)this + 3) = 0;
    v11 = *((_QWORD *)this + 2);
    if (v11)
    {
      for (k = 0; k != v11; ++k)
        *(_QWORD *)(*v2 + 8 * k) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
}

void sub_19F2EF398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

md::LabelMapTile *md::LabelMapTile::LabelMapTile(md::LabelMapTile *this, const QuadTile *a2)
{
  unsigned __int8 level;
  int v4;
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  unsigned __int8 v15;
  unsigned __int8 v16;
  char *v17;
  unsigned __int8 v18;
  long double v19;
  long double v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  double v26;
  long double v27;
  long double v28;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  uint64_t v36;
  geo::read_write_lock *v37;
  const char *v38;
  malloc_zone_t *v39;
  int v40;
  uint64_t v41;
  geo::read_write_lock *v42;
  const char *v43;
  malloc_zone_t *v44;
  const QuadTile *v45;
  const QuadTile *v46;
  const QuadTile *v47;

  level = a2->_level;
  v4 = 1 << level;
  v5 = (a2->_yIdx % v4 + v4) % v4;
  v6 = (a2->_xIdx % v4 + v4) % v4;
  *((_BYTE *)this + 8) = a2->_type;
  *((_BYTE *)this + 9) = level;
  *((_DWORD *)this + 3) = v5;
  *((_DWORD *)this + 4) = v6;
  *((_DWORD *)this + 8) = vcvtmd_s64_f64((double)a2->_xIdx / (double)(1 << a2->_level));
  v7 = 1.0 / (double)(1 << level);
  v8 = v7 * (double)v6;
  v9 = v7 * (double)((1 << level) + ~v5);
  *((double *)this + 5) = v8;
  *((double *)this + 6) = v9;
  *((double *)this + 7) = v8 + v7;
  *((double *)this + 8) = v9 + v7;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_1E428CEB0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 11) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 104) = _Q0;
  *((_DWORD *)this + 32) = 0x10000;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  if ((v15 & 1) == 0)
  {
    v45 = a2;
    a2 = v45;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v31 + 24) = "VectorKitLabels";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "VectorKitLabels";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v31;
      a2 = v45;
    }
  }
  *((_QWORD *)this + 46) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  if ((v16 & 1) == 0)
  {
    v46 = a2;
    a2 = v46;
    if (v35)
    {
      v36 = operator new();
      *(_QWORD *)(v36 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v36 + 24) = "VectorKitLabels";
      *(_OWORD *)(v36 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v36 = &off_1E42B5668;
      *(_QWORD *)(v36 + 8) = "VectorKitLabels";
      *(_OWORD *)(v36 + 72) = 0u;
      *(_OWORD *)(v36 + 88) = 0u;
      *(_OWORD *)(v36 + 104) = 0u;
      *(_OWORD *)(v36 + 120) = 0u;
      *(_OWORD *)(v36 + 136) = 0u;
      *(_OWORD *)(v36 + 152) = 0u;
      *(_OWORD *)(v36 + 168) = 0u;
      *(_OWORD *)(v36 + 184) = 0u;
      *(_OWORD *)(v36 + 200) = 0u;
      *(_OWORD *)(v36 + 216) = 0u;
      *(_OWORD *)(v36 + 232) = 0u;
      *(_QWORD *)(v36 + 248) = 0;
      *(_OWORD *)(v36 + 56) = 0u;
      v37 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v36 + 56), 0);
      if ((_DWORD)v37)
        geo::read_write_lock::logFailure(v37, (uint64_t)"initialization", v38);
      v39 = malloc_create_zone(0, 0);
      *(_QWORD *)(v36 + 48) = v39;
      malloc_set_zone_name(v39, "VectorKitLabels");
      *(_QWORD *)(v36 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v36;
      a2 = v46;
    }
  }
  *((_QWORD *)this + 50) = mdm::Allocator::instance(void)::alloc;
  v17 = (char *)this + 416;
  *((_QWORD *)this + 52) = 0;
  if ((v18 & 1) == 0)
  {
    v47 = a2;
    v17 = (char *)this + 416;
    a2 = v47;
    if (v40)
    {
      v41 = operator new();
      *(_QWORD *)(v41 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v41 + 24) = "VectorKitLabels";
      *(_OWORD *)(v41 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v41 = &off_1E42B5668;
      *(_QWORD *)(v41 + 8) = "VectorKitLabels";
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *(_OWORD *)(v41 + 120) = 0u;
      *(_OWORD *)(v41 + 136) = 0u;
      *(_OWORD *)(v41 + 152) = 0u;
      *(_OWORD *)(v41 + 168) = 0u;
      *(_OWORD *)(v41 + 184) = 0u;
      *(_OWORD *)(v41 + 200) = 0u;
      *(_OWORD *)(v41 + 216) = 0u;
      *(_OWORD *)(v41 + 232) = 0u;
      *(_QWORD *)(v41 + 248) = 0;
      *(_OWORD *)(v41 + 56) = 0u;
      v42 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v41 + 56), 0);
      if ((_DWORD)v42)
        geo::read_write_lock::logFailure(v42, (uint64_t)"initialization", v43);
      v44 = malloc_create_zone(0, 0);
      *(_QWORD *)(v41 + 48) = v44;
      malloc_set_zone_name(v44, "VectorKitLabels");
      *(_QWORD *)(v41 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v41;
      v17 = (char *)this + 416;
      a2 = v47;
    }
  }
  *((_QWORD *)this + 53) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 51) = v17;
  *((_DWORD *)this + 122) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_BYTE *)this + 492) = -1;
  if (a2->_type == 255)
  {
    v19 = exp((*((double *)this + 6) + (*((double *)this + 8) - *((double *)this + 6)) * 0.5) * 6.28318531 + -3.14159265);
    v20 = atan(v19) * 114.591559 + -90.0;
    v21 = cos(v20 * 0.034906585) * -559.82 + 111132.92;
    v22 = v21 + cos(v20 * 0.0698131701) * 1.175;
    v23 = v22 + cos(v20 * 0.104719755) * -0.0023;
    v24 = v20 * 0.00872664626;
    v25 = tan(v20 * 0.00872664626 + 0.78103484);
    v26 = log(v25);
    v27 = tan(v24 + 0.789761487);
    v28 = fabs((log(v27) - v26) * 0.159154943) / v23;
    *((long double *)this + 13) = v28;
    *((long double *)this + 14) = 1.0 / (v28 * v28);
  }
  return this;
}

void md::AssetInjectionLogic::reset(md::AssetInjectionLogic *this)
{
  void *v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t m;
  void *v62;
  void *v63;
  int v64;
  void *v65;
  int v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  float v71;
  float v72;
  void *v73;
  float v74;
  float v75;
  void *v76;
  float v77;
  float v78;
  void *v79;
  void *v80;
  int v81;
  void *v82;
  int v83;
  void *v84;
  int v85;
  int v86;
  void *v87;
  float v88;
  float v89;
  void *v90;
  float v91;
  float v92;
  void *v93;
  float v94;
  float v95;
  void *v96;
  float v97;
  float v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  char *v101;
  void *v102;
  int v103;
  uint64_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  unint64_t v116;
  void *v117;
  void *v118;
  id obj;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t k;
  id v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  size_t __sz;
  void *v129;
  int v130;
  int v131;
  int v132;
  char *v133;
  char *__src;
  void *v135;
  void *v136;
  id v137;
  id v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  std::__shared_weak_count_vtbl *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  _BYTE v155[128];
  _BYTE v156[128];
  _BYTE v157[128];
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "enableInjectedAssets");

  if ((v3 & 1) == 0)
    return;
  v125 = (uint64_t *)((char *)this + 120);
  if (*((_QWORD *)this + 18))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 17);
    while (v4)
    {
      v19 = v4;
      v4 = (_QWORD *)*v4;
      v20 = (std::__shared_weak_count *)v19[3];
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      operator delete(v19);
    }
    *((_QWORD *)this + 17) = 0;
    v5 = *((_QWORD *)this + 16);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v125 + 8 * i) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  if (*((_QWORD *)this + 23))
  {
    v7 = (_QWORD *)*((_QWORD *)this + 22);
    if (v7)
    {
      do
      {
        v24 = (_QWORD *)*v7;
        v25 = v7[3];
        if (v25)
        {
          v26 = v7[4];
          v23 = (void *)v7[3];
          if (v26 != v25)
          {
            do
            {
              v27 = *(std::__shared_weak_count **)(v26 - 8);
              if (v27)
              {
                v28 = (unint64_t *)&v27->__shared_owners_;
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              v26 -= 16;
            }
            while (v26 != v25);
            v23 = (void *)v7[3];
          }
          v7[4] = v25;
          operator delete(v23);
        }
        operator delete(v7);
        v7 = v24;
      }
      while (v24);
    }
    *((_QWORD *)this + 22) = 0;
    v8 = *((_QWORD *)this + 21);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*((_QWORD *)this + 20) + 8 * j) = 0;
    }
    *((_QWORD *)this + 23) = 0;
  }
  v10 = objc_alloc(MEMORY[0x1E0C99E98]);
  GEOResourceDevResourcesPath();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initFileURLWithPath:isDirectory:", v11, 1);

  objc_msgSend(v12, "URLByAppendingPathComponent:", CFSTR("InjectedAssets.json"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v120 = v13;
  objc_msgSend(v13, "path");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v13) = objc_msgSend(v14, "fileExistsAtPath:", v15);

  if (!(_DWORD)v13)
    goto LABEL_18;
  v154 = 0;
  v117 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfURL:", v120);
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  if (v16)
  {
    v17 = v117;
    v18 = v118;
    v117 = v16;
    v118 = v17;
    goto LABEL_17;
  }
  objc_msgSend(v118, "objectForKey:", CFSTR("Assets"));
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v122 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v157, 16);
  if (!v122)
    goto LABEL_102;
  v121 = *(_QWORD *)v151;
  do
  {
    for (k = 0; k != v122; ++k)
    {
      if (*(_QWORD *)v151 != v121)
        objc_enumerationMutation(obj);
      v30 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * k);
      v148 = 0;
      v149 = 0;
      v135 = v30;
      objc_msgSend(v30, "objectForKey:", CFSTR("ModelID"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "scanUnsignedLongLong:", &v148);

      objc_msgSend(v135, "objectForKey:", CFSTR("MaterialMapID"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "scanUnsignedLongLong:", &v149);

      objc_msgSend(v135, "objectForKey:", CFSTR("MaterialID"));
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v35;
      if (!v35)
      {
        v133 = 0;
        __src = 0;
        goto LABEL_84;
      }
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v137 = v35;
      v37 = objc_msgSend(v137, "countByEnumeratingWithState:objects:count:", &v144, v156, 16);
      if (!v37)
      {
        v133 = 0;
        __src = 0;
        goto LABEL_83;
      }
      v133 = 0;
      __src = 0;
      v38 = 0;
      v39 = *(_QWORD *)v145;
      v40 = v36;
      do
      {
        v41 = 0;
        do
        {
          if (*(_QWORD *)v145 != v39)
            objc_enumerationMutation(v137);
          objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", *(_QWORD *)(*((_QWORD *)&v144 + 1) + 8 * v41));
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v143 = 0;
          objc_msgSend(v42, "scanUnsignedLongLong:", &v143);
          if (v133 < v38)
          {
            *(_QWORD *)v133 = v143;
            v133 += 8;
            goto LABEL_73;
          }
          v43 = (v133 - __src) >> 3;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 61)
            abort();
          if ((v38 - __src) >> 2 > v44)
            v44 = (v38 - __src) >> 2;
          if ((unint64_t)(v38 - __src) >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
          {
            if (v45 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v46 = operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[8 * v43];
          *(_QWORD *)v47 = v143;
          v48 = v47 + 8;
          v49 = __src;
          if (v133 != __src)
          {
            v50 = v133 - 8 - __src;
            if (v50 >= 0x168)
            {
              if (&v46[v133 - __src - 8 - (v50 & 0xFFFFFFFFFFFFFFF8)] <= &v46[v133 - __src - 8]
                && &v133[-(v50 & 0xFFFFFFFFFFFFFFF8) - 8] <= v133 - 8
                && (unint64_t)(__src - v46) >= 0x20)
              {
                v53 = (v50 >> 3) + 1;
                v51 = &v133[-8 * (v53 & 0x3FFFFFFFFFFFFFFCLL)];
                v54 = &v46[8 * v43 - 16];
                v55 = v133 - 16;
                v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v57 = *(_OWORD *)v55;
                  *(v54 - 1) = *((_OWORD *)v55 - 1);
                  *v54 = v57;
                  v54 -= 2;
                  v55 -= 32;
                  v56 -= 4;
                }
                while (v56);
                v47 -= 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
                v49 = __src;
                if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_70;
              }
              else
              {
                v51 = v133;
                v49 = __src;
              }
            }
            else
            {
              v51 = v133;
              v49 = __src;
            }
            do
            {
              v52 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *((_QWORD *)v47 - 1) = v52;
              v47 -= 8;
            }
            while (v51 != v49);
          }
LABEL_70:
          v38 = &v46[8 * v45];
          if (v49)
            operator delete(v49);
          v133 = v48;
          __src = v47;
          v36 = v40;
LABEL_73:

          ++v41;
        }
        while (v41 != v37);
        v58 = objc_msgSend(v137, "countByEnumeratingWithState:objects:count:", &v144, v156, 16);
        v37 = v58;
      }
      while (v58);
LABEL_83:

LABEL_84:
      objc_msgSend(v135, "objectForKey:", CFSTR("Transforms"));
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v124 = v59;
      v60 = objc_msgSend(v124, "countByEnumeratingWithState:objects:count:", &v139, v155, 16);
      if (v60)
      {
        __sz = v133 - __src;
        v126 = *(_QWORD *)v140;
        do
        {
          v127 = v60;
          for (m = 0; m != v127; ++m)
          {
            if (*(_QWORD *)v140 != v126)
              objc_enumerationMutation(v124);
            v62 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * m);
            objc_msgSend(v62, "objectForKey:", CFSTR("TileKey"));
            v136 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v136, "objectAtIndexedSubscript:", 0);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            v64 = objc_msgSend(v63, "intValue");

            objc_msgSend(v136, "objectAtIndexedSubscript:", 1);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            v66 = objc_msgSend(v65, "intValue");

            objc_msgSend(v136, "objectAtIndexedSubscript:", 2);
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            v132 = objc_msgSend(v67, "intValue");

            objc_msgSend(v62, "objectForKey:", CFSTR("Transform"));
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "objectForKey:", CFSTR("Scale"));
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v69, "objectAtIndexedSubscript:", 0);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "floatValue");
            v72 = v71;

            objc_msgSend(v69, "objectAtIndexedSubscript:", 1);
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "floatValue");
            v75 = v74;

            objc_msgSend(v69, "objectAtIndexedSubscript:", 2);
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v76, "floatValue");
            v78 = v77;

            objc_msgSend(v68, "objectForKey:", CFSTR("Translation"));
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v79, "objectAtIndexedSubscript:", 0);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v80, "floatValue");
            v131 = v81;

            objc_msgSend(v79, "objectAtIndexedSubscript:", 1);
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v82, "floatValue");
            v130 = v83;

            objc_msgSend(v79, "objectAtIndexedSubscript:", 2);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v84, "floatValue");
            v86 = v85;

            objc_msgSend(v68, "objectForKey:", CFSTR("Rotation"));
            v138 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v138, "objectAtIndexedSubscript:", 0);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "floatValue");
            v89 = v88;
            objc_msgSend(v138, "objectAtIndexedSubscript:", 1);
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v90, "floatValue");
            v92 = v91;
            objc_msgSend(v138, "objectAtIndexedSubscript:", 2);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v93, "floatValue");
            v95 = v94;
            objc_msgSend(v138, "objectAtIndexedSubscript:", 3);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v96, "floatValue");
            v98 = v97;

            v99 = (std::__shared_weak_count *)operator new(0x80uLL);
            v99->__shared_owners_ = 0;
            v100 = (unint64_t *)&v99->__shared_owners_;
            v99->__shared_weak_owners_ = 0;
            v99->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAFD8;
            v99[1].__vftable = v148;
            *(_OWORD *)&v99[1].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v99[2].__shared_owners_ = 0u;
            v99[3].std::__shared_count = 0u;
            *(_OWORD *)&v99[3].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v99[4].__shared_owners_ = 0u;
            v99[5].__vftable = 0;
            v99[1].__shared_owners_ = v149;
            v129 = v79;
            if (v133 == __src)
            {
              v102 = v68;
              v103 = v64;
              v101 = 0;
              v104 = (v133 - __src) >> 3;
            }
            else
            {
              if ((__sz & 0x8000000000000000) != 0)
                abort();
              v101 = (char *)operator new(__sz);
              v102 = v68;
              v103 = v64;
              v99[4].__shared_owners_ = (uint64_t)v101;
              v99[4].__shared_weak_owners_ = (uint64_t)v101;
              v104 = (v133 - __src) >> 3;
              v99[5].__vftable = (std::__shared_weak_count_vtbl *)&v101[8 * v104];
              memcpy(v101, __src, __sz);
            }
            v105 = (float)(v92 + v92) * v92;
            v106 = (float)(v95 + v95) * v95;
            v107 = v92 * (float)(v89 + v89);
            v108 = v98 * (float)(v95 + v95);
            v109 = v107 - v108;
            v110 = v95 * (float)(v89 + v89);
            v111 = v98 * (float)(v92 + v92);
            v112 = v108 + v107;
            v113 = 1.0 - (float)((float)(v89 + v89) * v89);
            v114 = v95 * (float)(v92 + v92);
            v115 = v98 * (float)(v89 + v89);
            v99[4].__shared_weak_owners_ = (uint64_t)&v101[8 * v104];
            *(float *)&v99[1].__shared_weak_owners_ = v72 - (float)((float)(v105 + v106) * v72);
            *((float *)&v99[1].__shared_weak_owners_ + 1) = v112 * v72;
            *(float *)&v99[2].__vftable = (float)(v110 - v111) * v72;
            *((float *)&v99[2].__vftable + 1) = v109 * v75;
            *(float *)&v99[2].__shared_owners_ = (float)(v113 - v106) * v75;
            *((float *)&v99[2].__shared_owners_ + 1) = (float)(v115 + v114) * v75;
            *(float *)&v99[2].__shared_weak_owners_ = (float)(v111 + v110) * v78;
            *((float *)&v99[2].__shared_weak_owners_ + 1) = (float)(v114 - v115) * v78;
            *(float *)&v99[3].__vftable = (float)(v113 - v105) * v78;
            HIDWORD(v99[3].__vftable) = v131;
            LODWORD(v99[3].__shared_owners_) = v130;
            HIDWORD(v99[3].__shared_owners_) = v86;
            LODWORD(v99[3].__shared_weak_owners_) = v103;
            HIDWORD(v99[3].__shared_weak_owners_) = v66;
            LODWORD(v99[4].__vftable) = v132;
            std::__hash_table<std::shared_ptr<md::InjectedAsset>,std::hash<std::shared_ptr<md::InjectedAsset>>,std::equal_to<std::shared_ptr<md::InjectedAsset>>,std::allocator<std::shared_ptr<md::InjectedAsset>>>::__emplace_unique_key_args<std::shared_ptr<md::InjectedAsset>,std::shared_ptr<md::InjectedAsset> const&>(v125, (unint64_t)&v99[1], (uint64_t)&v99[1], (uint64_t)v99);
            do
              v116 = __ldaxr(v100);
            while (__stlxr(v116 - 1, v100));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }

          }
          v60 = objc_msgSend(v124, "countByEnumeratingWithState:objects:count:", &v139, v155, 16);
        }
        while (v60);
      }

      if (__src)
        operator delete(__src);
    }
    v122 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v157, 16);
  }
  while (v122);
LABEL_102:

  v18 = obj;
LABEL_17:

LABEL_18:
}

void sub_19F2F0534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28)
{

  _Unwind_Resume(a1);
}

void md::AssetInjectionLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD *a4)
{
  void *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  int8x8_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t ***v27;
  uint64_t **v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 **v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  _WORD *v61;
  _WORD *v62;
  uint64_t *v63;
  _WORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  __n128 *v69;
  __n128 *v70;
  _DWORD *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v81;
  gdc::Registry *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint8x8_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  float v95;
  float v96;
  _BOOL8 v97;
  unint64_t v98;
  unint64_t v99;
  size_t prime;
  unint64_t v101;
  uint8x8_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  int8x16_t v107;
  int8x16_t v108;
  unint64_t v109;
  uint64_t *v110;
  _QWORD *v111;
  _QWORD *v112;
  __n128 *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  __n128 *v117;
  __n128 *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  __n128 *v122;
  __n128 *v123;
  __n128 *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  int8x8_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint8x8_t v134;
  unint64_t v135;
  uint64_t v136;
  __n128 **v137;
  __n128 *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 **v143;
  unint64_t v144;
  unint64_t v145;
  __n128 *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  BOOL v153;
  _QWORD *v154;
  uint64_t *v155;
  __n128 **v156;
  _QWORD *v157;
  uint64_t v158;
  void *__p;
  __n128 *v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  void *v164;
  void *v165;
  int v166;
  int8x16_t v167[4];
  uint64_t v168;
  _QWORD v169[2];
  unsigned int v170;
  char v171;
  _QWORD v172[3];

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "enableInjectedAssets");

  if ((v8 & 1) != 0)
  {
    if (a4[3])
    {
      v9 = (_QWORD *)a4[2];
      if (v9)
      {
        do
        {
          v10 = (_QWORD *)*v9;
          operator delete(v9);
          v9 = v10;
        }
        while (v10);
      }
      a4[2] = 0;
      v11 = a4[1];
      if (v11)
      {
        for (i = 0; i != v11; ++i)
          *(_QWORD *)(*a4 + 8 * i) = 0;
      }
      a4[3] = 0;
    }
    v13 = a4 + 5;
    if (a4[8])
    {
      v14 = (_QWORD *)a4[7];
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      a4[7] = 0;
      v16 = a4[6];
      if (v16)
      {
        for (j = 0; j != v16; ++j)
          *(_QWORD *)(*v13 + 8 * j) = 0;
      }
      a4[8] = 0;
    }
    v157 = (_QWORD *)a1;
    v158 = (uint64_t)a4;
    v18 = *(_QWORD *)(a1 + 200);
    v19 = *(_WORD **)(v18 + 456);
    v20 = *(_WORD **)(v18 + 464);
    if (v19 == v20)
      goto LABEL_103;
    v21 = *(int8x8_t *)(a1 + 168);
    if (!*(_QWORD *)&v21)
      goto LABEL_103;
    v22 = (uint64_t *)(a1 + 160);
    v23 = (uint64_t *)(a1 + 120);
    while (2)
    {
      v24 = (unsigned __int16)*v19;
      LOWORD(v166) = *v19;
      if (!*(_QWORD *)&v21)
        goto LABEL_101;
      v25 = (uint8x8_t)vcnt_s8(v21);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = v24;
        if (*(_QWORD *)&v21 <= v24)
          v26 = v24 % *(_QWORD *)&v21;
      }
      else
      {
        v26 = (v21.i32[0] - 1) & v24;
      }
      v27 = *(uint64_t ****)(*v22 + 8 * v26);
      if (!v27)
        goto LABEL_101;
      v28 = *v27;
      if (!v28)
        goto LABEL_101;
      if (v25.u32[0] < 2uLL)
      {
        v29 = *(_QWORD *)&v21 - 1;
        while (1)
        {
          v31 = v28[1];
          if (v31 == (uint64_t *)v24)
          {
            if (*((unsigned __int16 *)v28 + 8) == (_DWORD)v24)
              goto LABEL_40;
          }
          else if (((unint64_t)v31 & v29) != v26)
          {
            goto LABEL_101;
          }
          v28 = (uint64_t **)*v28;
          if (!v28)
            goto LABEL_101;
        }
      }
      while (1)
      {
        v30 = (unint64_t)v28[1];
        if (v30 == v24)
          break;
        if (v30 >= *(_QWORD *)&v21)
          v30 %= *(_QWORD *)&v21;
        if (v30 != v26)
          goto LABEL_101;
LABEL_29:
        v28 = (uint64_t **)*v28;
        if (!v28)
          goto LABEL_101;
      }
      if (*((unsigned __int16 *)v28 + 8) != (_DWORD)v24)
        goto LABEL_29;
LABEL_40:
      v32 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v22, v24, &v166);
      v33 = (unint64_t *)v32[3];
      v34 = (unint64_t *)v32[4];
      while (v33 != v34)
      {
        v35 = *v33;
        v36 = v33[1];
        v33 += 2;
        std::__hash_table<std::shared_ptr<md::InjectedAsset>,std::hash<std::shared_ptr<md::InjectedAsset>>,std::equal_to<std::shared_ptr<md::InjectedAsset>>,std::allocator<std::shared_ptr<md::InjectedAsset>>>::__emplace_unique_key_args<std::shared_ptr<md::InjectedAsset>,std::shared_ptr<md::InjectedAsset> const&>(v23, v35, v35, v36);
      }
      v37 = (int8x8_t)v157[21];
      if (v37)
      {
        v38 = (uint8x8_t)vcnt_s8(v37);
        v38.i16[0] = vaddlv_u8(v38);
        if (v38.u32[0] > 1uLL)
        {
          v39 = v24;
          if (*(_QWORD *)&v37 <= v24)
            v39 = v24 % *(_QWORD *)&v37;
        }
        else
        {
          v39 = (v37.i32[0] - 1) & v24;
        }
        v40 = *v22;
        v41 = *(unsigned __int16 ***)(*v22 + 8 * v39);
        if (v41)
        {
          v42 = *v41;
          if (*v41)
          {
            v43 = *(_QWORD *)&v37 - 1;
            if (v38.u32[0] < 2uLL)
            {
              while (1)
              {
                v44 = *((_QWORD *)v42 + 1);
                if (v44 == v24)
                {
                  if (v42[8] == (_DWORD)v24)
                    goto LABEL_63;
                }
                else if ((v44 & v43) != v39)
                {
                  goto LABEL_101;
                }
                v42 = *(unsigned __int16 **)v42;
                if (!v42)
                  goto LABEL_101;
              }
            }
            do
            {
              v45 = *((_QWORD *)v42 + 1);
              if (v45 == v24)
              {
                if (v42[8] == (_DWORD)v24)
                {
LABEL_63:
                  if (v38.u32[0] > 1uLL)
                  {
                    if (*(_QWORD *)&v37 <= v24)
                      v24 %= *(_QWORD *)&v37;
                  }
                  else
                  {
                    v24 &= v43;
                  }
                  v46 = *(unsigned __int16 **)(v40 + 8 * v24);
                  do
                  {
                    v47 = v46;
                    v46 = *(unsigned __int16 **)v46;
                  }
                  while (v46 != v42);
                  if (v47 == v157 + 22)
                    goto LABEL_80;
                  v48 = v47[1];
                  if (v38.u32[0] > 1uLL)
                  {
                    if (v48 >= *(_QWORD *)&v37)
                      v48 %= *(_QWORD *)&v37;
                  }
                  else
                  {
                    v48 &= v43;
                  }
                  if (v48 != v24)
                  {
LABEL_80:
                    if (!*(_QWORD *)v42)
                      goto LABEL_81;
                    v49 = *(_QWORD *)(*(_QWORD *)v42 + 8);
                    if (v38.u32[0] > 1uLL)
                    {
                      if (v49 >= *(_QWORD *)&v37)
                        v49 %= *(_QWORD *)&v37;
                    }
                    else
                    {
                      v49 &= v43;
                    }
                    if (v49 != v24)
LABEL_81:
                      *(_QWORD *)(v40 + 8 * v24) = 0;
                  }
                  v50 = *(unsigned __int16 **)v42;
                  if (*(_QWORD *)v42)
                  {
                    v51 = *((_QWORD *)v50 + 1);
                    if (v38.u32[0] > 1uLL)
                    {
                      if (v51 >= *(_QWORD *)&v37)
                        v51 %= *(_QWORD *)&v37;
                    }
                    else
                    {
                      v51 &= v43;
                    }
                    if (v51 != v24)
                    {
                      *(_QWORD *)(*v22 + 8 * v51) = v47;
                      v50 = *(unsigned __int16 **)v42;
                    }
                  }
                  *v47 = v50;
                  *(_QWORD *)v42 = 0;
                  --v157[23];
                  v52 = *((_QWORD *)v42 + 3);
                  if (v52)
                  {
                    v53 = *((_QWORD *)v42 + 4);
                    v54 = (void *)*((_QWORD *)v42 + 3);
                    if (v53 != v52)
                    {
                      do
                      {
                        v55 = *(std::__shared_weak_count **)(v53 - 8);
                        if (v55)
                        {
                          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
                          do
                            v57 = __ldaxr(p_shared_owners);
                          while (__stlxr(v57 - 1, p_shared_owners));
                          if (!v57)
                          {
                            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                            std::__shared_weak_count::__release_weak(v55);
                          }
                        }
                        v53 -= 16;
                      }
                      while (v53 != v52);
                      v54 = (void *)*((_QWORD *)v42 + 3);
                    }
                    *((_QWORD *)v42 + 4) = v52;
                    operator delete(v54);
                  }
                  operator delete(v42);
                  break;
                }
              }
              else
              {
                if (v45 >= *(_QWORD *)&v37)
                  v45 %= *(_QWORD *)&v37;
                if (v45 != v39)
                  break;
              }
              v42 = *(unsigned __int16 **)v42;
            }
            while (v42);
          }
        }
      }
LABEL_101:
      if (++v19 != v20)
      {
        v21 = (int8x8_t)v157[21];
        continue;
      }
      break;
    }
LABEL_103:
    v58 = v157;
    if (v157[18])
    {
      v59 = **a3;
      if ((v60 & 1) == 0
      {
        qword_1ECE2F300 = 0;
        qword_1ECE2F2F8 = 0;
        md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
        __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      }
      v61 = *(_WORD **)(v59 + 48);
      v62 = *(_WORD **)(v59 + 56);
      v63 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      if (v61 != v62)
      {
        v64 = *(_WORD **)(v59 + 48);
        while (*v64 != 33)
        {
          v64 += 16;
          if (v64 == v62)
            goto LABEL_116;
        }
        if (v64 == v62)
        {
          v63 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
        }
        else
        {
          while (*v61 != 33)
          {
            v61 += 16;
            if (v61 == v62)
            {
              v61 = *(_WORD **)(v59 + 56);
              break;
            }
          }
          v63 = (uint64_t *)(v61 + 4);
        }
      }
LABEL_116:
      v67 = (uint64_t *)*v63;
      v66 = v63 + 1;
      v65 = v67;
      if (v67 != v66)
      {
        v156 = (__n128 **)(v157 + 17);
        v154 = (_QWORD *)(v158 + 16);
        v155 = v66;
        do
        {
          v68 = v65[4];
          __p = 0;
          v160 = 0;
          v161 = 0;
          v69 = *v156;
          if (!*v156)
            goto LABEL_297;
          while (2)
          {
            v71 = *(_DWORD **)(v68 + 32);
            v72 = (_DWORD *)v69[1].n128_u64[0];
            if (v72[16] != *v71 || v72[17] != v71[1] || v72[18] != v71[2])
              goto LABEL_123;
            v73 = v58[25];
            v74 = v65[4];
            v162 = *(_DWORD *)(v74 + 8);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v163, v74 + 24);
            v166 = v162;
            gdc::LayerDataKey::LayerDataKey((uint64_t)v167, (uint64_t)&v163);
            v170 = 0;
            v75 = *(uint64_t **)(v73 + 312);
            if (!v75)
            {
              v82 = 0;
              v83 = 0;
              goto LABEL_154;
            }
            v76 = 0;
            v77 = (uint64_t *)(v73 + 312);
            v78 = (uint64_t *)(v73 + 312);
            while (1)
            {
              v79 = *((unsigned int *)v75 + 32);
              if ((_DWORD)v79 == -1 || v79 < v76)
              {
                v75 = (uint64_t *)v75[1];
                if (!v75)
                  break;
                goto LABEL_140;
              }
              if (v79 > v76)
                goto LABEL_141;
              v172[0] = &v171;
              if (((unsigned int (*)(_QWORD *, uint64_t *, int *))off_1E42EEDE0[v79])(v172, v75 + 4, &v166))
                ++v75;
              else
                v78 = v75;
              v75 = (uint64_t *)*v75;
              if (!v75)
                break;
LABEL_140:
              while (1)
              {
                v76 = v170;
                if (v170 != -1)
                  break;
LABEL_141:
                v78 = v75;
                v75 = (uint64_t *)*v75;
                if (!v75)
                  goto LABEL_142;
              }
            }
LABEL_142:
            if (v78 == v77)
              goto LABEL_152;
            v81 = *((unsigned int *)v78 + 32);
            if ((_DWORD)v81 == -1)
              goto LABEL_144;
            v83 = v170;
            if (v170 == -1)
            {
              v82 = 0;
              goto LABEL_155;
            }
            if (v170 < v81)
            {
              v82 = 0;
              goto LABEL_154;
            }
            if (v170 <= v81
              && (v172[0] = &v171,
                  (((uint64_t (*)(_QWORD *, int *, uint64_t *))off_1E42EEDE0[v170])(v172, &v166, v78 + 4) & 1) != 0))
            {
LABEL_152:
              v82 = 0;
            }
            else
            {
LABEL_144:
              v82 = (gdc::Registry *)v78[17];
            }
            v83 = v170;
            if (v170 != -1)
LABEL_154:
              ((void (*)(_QWORD *, int *))off_1E42FA3C0[v83])(v172, &v166);
LABEL_155:
            v170 = -1;
            if (v164 != v165)
              free(v164);
            if (v82)
            {
              v84 = v69[1].n128_u64[0];
              v85 = *(unint64_t **)(v84 + 80);
              v86 = *(_QWORD *)(v84 + 88);
              if (v85 != (unint64_t *)v86)
              {
                do
                {
                  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v13, *v85, *v85);
                  ++v85;
                }
                while (v85 != (unint64_t *)v86);
                v84 = v69[1].n128_u64[0];
              }
              v87 = *(_QWORD *)v84;
              v88 = *(_QWORD *)(v158 + 8);
              if (v88)
              {
                v89 = (uint8x8_t)vcnt_s8((int8x8_t)v88);
                v89.i16[0] = vaddlv_u8(v89);
                if (v89.u32[0] > 1uLL)
                {
                  v86 = *(_QWORD *)v84;
                  if (v87 >= v88)
                    v86 = v87 % v88;
                }
                else
                {
                  v86 = (v88 - 1) & v87;
                }
                v90 = *(_QWORD **)(*(_QWORD *)v158 + 8 * v86);
                if (v90)
                {
                  v91 = (_QWORD *)*v90;
                  if (v91)
                  {
                    if (v89.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v93 = v91[1];
                        if (v93 == v87)
                        {
                          if (v91[2] == v87)
                            goto LABEL_181;
                        }
                        else if ((v93 & (v88 - 1)) != v86)
                        {
                          goto LABEL_182;
                        }
                        v91 = (_QWORD *)*v91;
                        if (!v91)
                          goto LABEL_182;
                      }
                    }
                    do
                    {
                      v92 = v91[1];
                      if (v92 == v87)
                      {
                        if (v91[2] == v87)
                        {
LABEL_181:
                          v58 = v157;
                          goto LABEL_221;
                        }
                      }
                      else
                      {
                        if (v92 >= v88)
                          v92 %= v88;
                        if (v92 != v86)
                          break;
                      }
                      v91 = (_QWORD *)*v91;
                    }
                    while (v91);
                  }
                }
              }
LABEL_182:
              v94 = operator new(0x18uLL);
              *v94 = 0;
              v94[1] = v87;
              v94[2] = *(_QWORD *)v84;
              v95 = (float)(unint64_t)(*(_QWORD *)(v158 + 24) + 1);
              v96 = *(float *)(v158 + 32);
              if (!v88 || (float)(v96 * (float)v88) < v95)
              {
                v97 = v88 < 3 || (v88 & (v88 - 1)) != 0;
                v98 = v97 | (2 * v88);
                v99 = vcvtps_u32_f32(v95 / v96);
                if (v98 <= v99)
                  prime = v99;
                else
                  prime = v98;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v88 = *(_QWORD *)(v158 + 8);
                }
                if (prime > v88)
                  goto LABEL_195;
                if (prime < v88)
                {
                  v101 = vcvtps_u32_f32((float)*(unint64_t *)(v158 + 24) / *(float *)(v158 + 32));
                  if (v88 < 3
                    || (v102 = (uint8x8_t)vcnt_s8((int8x8_t)v88), v102.i16[0] = vaddlv_u8(v102), v102.u32[0] > 1uLL))
                  {
                    v101 = std::__next_prime(v101);
                  }
                  else
                  {
                    v103 = 1 << -(char)__clz(v101 - 1);
                    if (v101 >= 2)
                      v101 = v103;
                  }
                  if (prime <= v101)
                    prime = v101;
                  if (prime < v88)
LABEL_195:
                    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v158, prime);
                }
                v88 = *(_QWORD *)(v158 + 8);
                if ((v88 & (v88 - 1)) != 0)
                {
                  if (v87 >= v88)
                    v86 = v87 % v88;
                  else
                    v86 = v87;
                }
                else
                {
                  v86 = (v88 - 1) & v87;
                }
              }
              v58 = v157;
              v104 = *(_QWORD *)v158;
              v105 = *(_QWORD **)(*(_QWORD *)v158 + 8 * v86);
              if (v105)
              {
                *v94 = *v105;
                goto LABEL_219;
              }
              *v94 = *v154;
              *v154 = v94;
              *(_QWORD *)(v104 + 8 * v86) = v154;
              if (*v94)
              {
                v106 = *(_QWORD *)(*v94 + 8);
                if ((v88 & (v88 - 1)) != 0)
                {
                  if (v106 >= v88)
                    v106 %= v88;
                }
                else
                {
                  v106 &= v88 - 1;
                }
                v105 = (_QWORD *)(*(_QWORD *)v158 + 8 * v106);
LABEL_219:
                *v105 = v94;
              }
              ++*(_QWORD *)(v158 + 24);
              v84 = v69[1].n128_u64[0];
LABEL_221:
              LOWORD(v166) = 0;
              v167[0] = vextq_s8(*(int8x16_t *)v84, *(int8x16_t *)v84, 8uLL);
              v107 = *(int8x16_t *)(v84 + 16);
              v108 = *(int8x16_t *)(v84 + 48);
              v167[2] = *(int8x16_t *)(v84 + 32);
              v167[3] = v108;
              v167[1] = v107;
              *(_QWORD *)((char *)v169 + 5) = 0;
              v168 = 0;
              v169[0] = 0;
              v109 = gdc::Registry::create(v82);
              v110 = (uint64_t *)gdc::Registry::storage<md::components::ReferencedAssetInstance>((uint64_t)v82);
              gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::emplace(v110, v109, (__int128 *)&v166);
              LOWORD(v166) = *((_WORD *)v82 + 20);
              v111 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v157 + 20, v166, &v166);
              v112 = v111;
              v113 = (__n128 *)v111[4];
              if ((unint64_t)v113 >= v111[5])
              {
                v117 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)(v111 + 3), v69[1]);
              }
              else
              {
                v113->n128_u64[0] = v69[1].n128_u64[0];
                v114 = v69[1].n128_u64[1];
                v113->n128_u64[1] = v114;
                if (v114)
                {
                  v115 = (unint64_t *)(v114 + 8);
                  do
                    v116 = __ldxr(v115);
                  while (__stxr(v116 + 1, v115));
                }
                v117 = v113 + 1;
              }
              v112[4] = v117;
              v118 = v160;
              if ((unint64_t)v160 >= v161)
              {
                v70 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&__p, v69[1]);
              }
              else
              {
                v160->n128_u64[0] = v69[1].n128_u64[0];
                v119 = v69[1].n128_u64[1];
                v118->n128_u64[1] = v119;
                if (v119)
                {
                  v120 = (unint64_t *)(v119 + 8);
                  do
                    v121 = __ldxr(v120);
                  while (__stxr(v121 + 1, v120));
                }
                v70 = v118 + 1;
              }
              v160 = v70;
            }
LABEL_123:
            v69 = (__n128 *)v69->n128_u64[0];
            if (v69)
              continue;
            break;
          }
          v123 = (__n128 *)__p;
          v122 = v160;
          if (v160 == __p)
          {
            v66 = v155;
            if (v160)
              goto LABEL_234;
LABEL_297:
            v151 = (uint64_t *)v65[1];
            if (!v151)
              goto LABEL_303;
            do
            {
LABEL_301:
              v152 = v151;
              v151 = (uint64_t *)*v151;
            }
            while (v151);
          }
          else
          {
            do
            {
              v129 = (int8x8_t)v58[16];
              if (v129)
              {
                v130 = v123->n128_u64[0];
                v131 = HIDWORD(v123->n128_u64[0]);
                v132 = 0x9DDFEA08EB382D69 * ((8 * v123->n128_u64[0] + 8) ^ v131);
                v133 = 0x9DDFEA08EB382D69
                     * ((0x9DDFEA08EB382D69 * (v131 ^ (v132 >> 47) ^ v132)) ^ ((0x9DDFEA08EB382D69
                                                                                * (v131 ^ (v132 >> 47) ^ v132)) >> 47));
                v134 = (uint8x8_t)vcnt_s8(v129);
                v134.i16[0] = vaddlv_u8(v134);
                if (v134.u32[0] > 1uLL)
                {
                  v135 = v133;
                  if (v133 >= *(_QWORD *)&v129)
                    v135 = v133 % *(_QWORD *)&v129;
                }
                else
                {
                  v135 = v133 & (*(_QWORD *)&v129 - 1);
                }
                v136 = v58[15];
                v137 = *(__n128 ***)(v136 + 8 * v135);
                if (v137)
                {
                  v138 = *v137;
                  if (*v137)
                  {
                    v139 = *(_QWORD *)&v129 - 1;
                    if (v134.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v140 = v138->n128_i64[1];
                        if (v140 == v133)
                        {
                          if (v138[1].n128_u64[0] == v130)
                            goto LABEL_265;
                        }
                        else if ((v140 & v139) != v135)
                        {
                          goto LABEL_243;
                        }
                        v138 = (__n128 *)v138->n128_u64[0];
                        if (!v138)
                          goto LABEL_243;
                      }
                    }
                    do
                    {
                      v141 = v138->n128_u64[1];
                      if (v141 == v133)
                      {
                        if (v138[1].n128_u64[0] == v130)
                        {
LABEL_265:
                          if (v134.u32[0] > 1uLL)
                          {
                            if (v133 >= *(_QWORD *)&v129)
                              v133 %= *(_QWORD *)&v129;
                          }
                          else
                          {
                            v133 &= v139;
                          }
                          v142 = *(__n128 **)(v136 + 8 * v133);
                          do
                          {
                            v143 = (__n128 **)v142;
                            v142 = (__n128 *)v142->n128_u64[0];
                          }
                          while (v142 != v138);
                          if (v143 == v156)
                            goto LABEL_282;
                          v144 = (unint64_t)v143[1];
                          if (v134.u32[0] > 1uLL)
                          {
                            if (v144 >= *(_QWORD *)&v129)
                              v144 %= *(_QWORD *)&v129;
                          }
                          else
                          {
                            v144 &= v139;
                          }
                          if (v144 != v133)
                          {
LABEL_282:
                            if (!v138->n128_u64[0])
                              goto LABEL_283;
                            v145 = *(_QWORD *)(v138->n128_u64[0] + 8);
                            if (v134.u32[0] > 1uLL)
                            {
                              if (v145 >= *(_QWORD *)&v129)
                                v145 %= *(_QWORD *)&v129;
                            }
                            else
                            {
                              v145 &= v139;
                            }
                            if (v145 != v133)
LABEL_283:
                              *(_QWORD *)(v136 + 8 * v133) = 0;
                          }
                          v146 = (__n128 *)v138->n128_u64[0];
                          if (v138->n128_u64[0])
                          {
                            v147 = v146->n128_u64[1];
                            if (v134.u32[0] > 1uLL)
                            {
                              if (v147 >= *(_QWORD *)&v129)
                                v147 %= *(_QWORD *)&v129;
                            }
                            else
                            {
                              v147 &= v139;
                            }
                            if (v147 != v133)
                            {
                              *(_QWORD *)(v58[15] + 8 * v147) = v143;
                              v146 = (__n128 *)v138->n128_u64[0];
                            }
                          }
                          *v143 = v146;
                          v138->n128_u64[0] = 0;
                          --v58[18];
                          v148 = (std::__shared_weak_count *)v138[1].n128_u64[1];
                          if (v148)
                          {
                            v149 = (unint64_t *)&v148->__shared_owners_;
                            do
                              v150 = __ldaxr(v149);
                            while (__stlxr(v150 - 1, v149));
                            if (!v150)
                            {
                              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                              std::__shared_weak_count::__release_weak(v148);
                            }
                          }
                          operator delete(v138);
                          break;
                        }
                      }
                      else
                      {
                        if (v141 >= *(_QWORD *)&v129)
                          v141 %= *(_QWORD *)&v129;
                        if (v141 != v135)
                          break;
                      }
                      v138 = (__n128 *)v138->n128_u64[0];
                    }
                    while (v138);
                  }
                }
              }
LABEL_243:
              ++v123;
            }
            while (v123 != v122);
            v122 = (__n128 *)__p;
            v66 = v155;
            if (!__p)
              goto LABEL_297;
LABEL_234:
            v124 = v160;
            v125 = v122;
            if (v160 != v122)
            {
              do
              {
                v126 = (std::__shared_weak_count *)v124[-1].n128_u64[1];
                if (v126)
                {
                  v127 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                --v124;
              }
              while (v124 != v122);
              v125 = __p;
              v66 = v155;
            }
            v160 = v122;
            operator delete(v125);
            v151 = (uint64_t *)v65[1];
            if (v151)
              goto LABEL_301;
            do
            {
LABEL_303:
              v152 = (uint64_t *)v65[2];
              v153 = *v152 == (_QWORD)v65;
              v65 = v152;
            }
            while (!v153);
          }
          v65 = v152;
        }
        while (v152 != v66);
      }
    }
  }
}

void sub_19F2F16C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  uint64_t v46;

  if (a46 != -1)
    ((void (*)(uint64_t, char *))off_1E42FA3C0[a46])(v46 - 89, &a34);
  a46 = -1;
  if (a24 != a26)
    free(a24);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a19);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::synchronizedUpdate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v4 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2, a3, a4))
  {
    v9 = *v4++;
  }
  return result;
}

void md::MapStandardLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  char v29;
  unint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  id v74;
  void *v75;
  int64x2_t *v76;
  VKRouteWaypointInfo *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  void (***v88)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t);
  uint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t i;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _BYTE *v106;
  int8x8_t v107;
  unint64_t v108;
  uint8x8_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  double v121;
  uint64_t v122;
  float v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v136;
  float v137;
  float32x2_t *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  _QWORD *v145;
  char *v146;
  char *v147;
  char *v148;
  id v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  char v166;
  char v167;
  char v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  int v177;
  char v178;
  char v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  _DWORD *v186;
  char v187;
  int v188;
  char v189;
  int v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  geo::read_write_lock *v195;
  const char *v196;
  malloc_zone_t *zone;
  uint64_t v198;
  geo::read_write_lock *v199;
  const char *v200;
  malloc_zone_t *v201;
  int v202;
  float64x2_t v203;
  id v204;
  __int128 v205;
  double v206;
  int64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  float64x2_t v217;
  double v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  _BYTE v223[9];

  md::StandardLabeler::synchronizedUpdate((_QWORD *)a1, a2, a3, a4);
  if (a4)
  {
    v6 = *(_QWORD *)(a1 + 432);
    std::mutex::lock((std::mutex *)v6);
    v7 = *(uint64_t **)(v6 + 64);
    v8 = *(uint64_t **)(v6 + 72);
    if (v7 != v8)
    {
      while (1)
      {
        v9 = v7[1];
        if (!v9 || *(_QWORD *)(v9 + 8) == -1)
          break;
        v7 += 2;
        if (v7 == v8)
          goto LABEL_24;
      }
      if (v7 != v8)
      {
        v10 = v7 + 2;
        if (v7 + 2 != v8)
        {
          do
          {
            v11 = v10[1];
            if (v11 && *(_QWORD *)(v11 + 8) != -1)
            {
              v12 = *v10;
              *v10 = 0;
              v10[1] = 0;
              v13 = (std::__shared_weak_count *)v7[1];
              *v7 = v12;
              v7[1] = v11;
              if (v13)
                std::__shared_weak_count::__release_weak(v13);
              v7 += 2;
            }
            v10 += 2;
          }
          while (v10 != v8);
          v8 = *(uint64_t **)(v6 + 72);
        }
      }
      if (v7 != v8)
      {
        while (v8 != v7)
        {
          v14 = (std::__shared_weak_count *)*(v8 - 1);
          if (v14)
            std::__shared_weak_count::__release_weak(v14);
          v8 -= 2;
        }
        *(_QWORD *)(v6 + 72) = v7;
      }
    }
LABEL_24:
    std::mutex::unlock((std::mutex *)v6);
  }
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_DWORD *)(v15 + 748);
  if (v16 != *(_DWORD *)(a1 + 448))
  {
    *(_DWORD *)(a1 + 448) = v16;
    v219 = 0uLL;
    v220 = 0;
    {
      v194 = operator new();
      *(_QWORD *)(v194 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v194 + 24) = "VectorKitLabels";
      *(_OWORD *)(v194 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v194 = &off_1E42B5668;
      *(_QWORD *)(v194 + 8) = "VectorKitLabels";
      *(_OWORD *)(v194 + 72) = 0u;
      *(_OWORD *)(v194 + 88) = 0u;
      *(_OWORD *)(v194 + 104) = 0u;
      *(_OWORD *)(v194 + 120) = 0u;
      *(_OWORD *)(v194 + 136) = 0u;
      *(_OWORD *)(v194 + 152) = 0u;
      *(_OWORD *)(v194 + 168) = 0u;
      *(_OWORD *)(v194 + 184) = 0u;
      *(_OWORD *)(v194 + 200) = 0u;
      *(_OWORD *)(v194 + 216) = 0u;
      *(_OWORD *)(v194 + 232) = 0u;
      *(_QWORD *)(v194 + 248) = 0;
      *(_OWORD *)(v194 + 56) = 0u;
      v195 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v194 + 56), 0);
      if ((_DWORD)v195)
        geo::read_write_lock::logFailure(v195, (uint64_t)"initialization", v196);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v194 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v194 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v194;
    }
    v221 = mdm::Allocator::instance(void)::alloc;
    v18 = *(_QWORD *)(v15 + 584) - *(_QWORD *)(v15 + 576);
    if (v18)
    {
      if ((unint64_t)v18 >= 0x5555555555555551)
        abort();
      v19 = v18 >> 4;
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 48 * (v18 >> 4), 8);
      v21 = v20 + 48 * v19;
      *(_QWORD *)&v219 = v20;
      *((_QWORD *)&v219 + 1) = v20;
      v220 = v21;
      v22 = *(uint64_t **)(v15 + 576);
      v23 = *(uint64_t **)(v15 + 584);
      if (v22 != v23)
      {
        while (1)
        {
          v24 = *v22;
          *(_BYTE *)(v24 + 1286) = 0;
          if (!*(_BYTE *)(v24 + 1264))
            goto LABEL_44;
          v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 72))(*(_QWORD *)(v24 + 8));
          if (!v25)
            goto LABEL_44;
          v26 = *(_QWORD *)(v25 + 32);
          if (!v26)
            goto LABEL_44;
          v27 = *(unsigned __int8 *)(v26 + 33);
          if (!*(_BYTE *)(v26 + 33))
            goto LABEL_44;
          v28 = *(_DWORD **)v26;
          if (**(_DWORD **)v26 != 65571)
            break;
LABEL_39:
          v29 = 1;
LABEL_45:
          v33 = *v22;
          v34 = *(_QWORD *)(*v22 + 272);
          if (!v34)
            goto LABEL_33;
          v35 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 248))(v34);
          if (v35[2] < *v35 || v35[3] < v35[1])
            goto LABEL_33;
          v36 = *(_QWORD *)(v33 + 128);
          v205 = *(_OWORD *)(v33 + 136);
          v37 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v33 + 272) + 248))(*(_QWORD *)(v33 + 272));
          v38 = v37[2];
          if (v38 >= *v37 && (v39 = v37[3], v40 = v37[1], v39 >= v40))
          {
            v45 = *(float *)(v33 + 664);
            v44 = *v37 - v45;
            v46 = *(float *)(v33 + 668);
            v41 = v40 - v46;
            v43 = v38 - v45;
            v42 = v39 - v46;
            if (v20 >= v21)
            {
LABEL_54:
              v47 = v219;
              v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v219) >> 4);
              v49 = v48 + 1;
              if (v48 + 1 > 0x555555555555555)
                abort();
              if (0x5555555555555556 * ((uint64_t)(v21 - v219) >> 4) > v49)
                v49 = 0x5555555555555556 * ((uint64_t)(v21 - v219) >> 4);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v219) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v50 = 0x555555555555555;
              else
                v50 = v49;
              if (v50)
              {
                v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v221 + 16))(v221, 48 * v50, 8);
                v52 = v51 + 16 * ((uint64_t)(v20 - v219) >> 4);
                v50 = v51 + 48 * v50;
                if (v51)
                {
                  *(_QWORD *)v52 = v36;
                  *(_OWORD *)(v52 + 8) = v205;
                  v53 = v51 + 48 * v48;
                  *(float *)(v53 + 24) = v44;
                  *(float *)(v53 + 28) = v41;
                  *(float *)(v53 + 32) = v43;
                  *(float *)(v53 + 36) = v42;
                  *(_BYTE *)(v53 + 40) = v29;
                }
                if (v20 != v47)
                {
LABEL_64:
                  v54 = 0;
                  do
                  {
                    v55 = v52 + v54;
                    *(_QWORD *)(v55 - 48) = *(_QWORD *)(v20 + v54 - 48);
                    *(_OWORD *)(v55 - 40) = *(_OWORD *)(v20 + v54 - 40);
                    v56 = *(_OWORD *)(v20 + v54 - 24);
                    *(_BYTE *)(v55 - 8) = *(_BYTE *)(v20 + v54 - 8);
                    *(_OWORD *)(v55 - 24) = v56;
                    v54 -= 48;
                  }
                  while (v20 + v54 != v47);
                  v57 = v52 + v54;
                  goto LABEL_69;
                }
              }
              else
              {
                v52 = 16 * ((uint64_t)(v20 - v219) >> 4);
                if (v20 != (_QWORD)v219)
                  goto LABEL_64;
              }
              v47 = v20;
              v57 = v52;
LABEL_69:
              v20 = v52 + 48;
              *(_QWORD *)&v219 = v57;
              v220 = v50;
              if (v47)
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v221 + 40))(v221, v47, v21 - v47);
              v21 = v50;
              goto LABEL_32;
            }
          }
          else
          {
            v41 = 3.4028e38;
            v42 = -3.4028e38;
            v43 = -3.4028e38;
            v44 = 3.4028e38;
            if (v20 >= v21)
              goto LABEL_54;
          }
          if (v20)
          {
            *(_QWORD *)v20 = v36;
            *(_OWORD *)(v20 + 8) = v205;
            *(float *)(v20 + 24) = v44;
            *(float *)(v20 + 28) = v41;
            *(float *)(v20 + 32) = v43;
            *(float *)(v20 + 36) = v42;
            *(_BYTE *)(v20 + 40) = v29;
          }
          v20 += 48;
LABEL_32:
          *((_QWORD *)&v219 + 1) = v20;
LABEL_33:
          v22 += 2;
          if (v22 == v23)
            goto LABEL_72;
        }
        v30 = 0;
        v31 = v28 + 2;
        while (v27 - 1 != v30)
        {
          v32 = *v31;
          v31 += 2;
          ++v30;
          if (v32 == 65571)
          {
            if (v30 < v27)
              goto LABEL_39;
            break;
          }
        }
LABEL_44:
        v29 = 0;
        goto LABEL_45;
      }
    }
LABEL_72:
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 168) + 32);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v58 + 160))(v58, &v219);
    if ((_QWORD)v219)
    {
      *((_QWORD *)&v219 + 1) = v219;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v221 + 40))(v221, v219, v220 - v219);
    }
  }
  v59 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 3391));
  if ((v59 & 1) != 0)
  {
    v60 = *(_QWORD *)(a1 + 400);
    v61 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v60 + 433))
    {
      *(_BYTE *)(v60 + 433) = 0;
      v62 = v60 + 136;
      std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(v60 + 128, *(_QWORD **)(v60 + 136));
      v63 = *(_QWORD *)(v60 + 168);
      *(_QWORD *)(v60 + 128) = *(_QWORD *)(v60 + 160);
      *(_QWORD *)(v60 + 136) = v63;
      v64 = *(_QWORD *)(v60 + 184);
      *(_QWORD *)(v60 + 152) = v64;
      if (v64)
      {
        *(_QWORD *)(v63 + 16) = v62;
        *(_QWORD *)(v60 + 160) = v60 + 168;
        *(_QWORD *)(v60 + 168) = 0;
        *(_QWORD *)(v60 + 184) = 0;
      }
      else
      {
        *(_QWORD *)(v60 + 128) = v62;
      }
      *(_BYTE *)(v61 + 3045) = 1;
      *(_BYTE *)(v61 + 3047) = 1;
      v65 = atomic_load((unsigned __int8 *)(v61 + 3058));
      if ((v65 & 1) != 0)
      {
        v66 = *(_QWORD *)(v61 + 136);
        if (v66)
        {
          v67 = *(_QWORD *)(v66 + 56);
          if (v67)
          {
            *(_QWORD *)&v219 = v61;
            LOBYTE(v208) = 9;
            (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v67 + 48))(v67, &v219, &v208);
          }
        }
      }
    }
    if (*(_BYTE *)(v60 + 432) || !*(_QWORD *)(v60 + 32))
      goto LABEL_84;
    v85 = *(uint64_t **)(v60 + 40);
    v86 = *(uint64_t **)(v60 + 48);
    if (v85 != v86)
    {
      do
      {
        v88 = *(void (****)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t))(v60 + 32);
        if (v88)
        {
          (**v88)(&v219, v88, *(unsigned __int8 *)(*v85 + 56), *v85 + 16);
          v89 = *v85;
          v90 = v219;
          v219 = 0uLL;
          v91 = *(std::__shared_weak_count **)(v89 + 8);
          *(_OWORD *)v89 = v90;
          if (v91)
          {
            p_shared_owners = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldaxr(p_shared_owners);
            while (__stlxr(v93 - 1, p_shared_owners));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
          if (*((_QWORD *)&v219 + 1))
          {
            v95 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
        }
        v87 = *v85;
        v85 += 2;
        *(_BYTE *)(v87 + 57) = 1;
      }
      while (v85 != v86);
      v97 = *(_QWORD *)(v60 + 40);
      for (i = *(_QWORD *)(v60 + 48); i != v97; i -= 16)
      {
        v99 = *(std::__shared_weak_count **)(i - 8);
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
      *(_QWORD *)(v60 + 48) = v97;
      v102 = atomic_load((unsigned __int8 *)(v61 + 3058));
      if ((v102 & 1) != 0)
      {
        v103 = *(_QWORD *)(v61 + 136);
        if (v103)
        {
          v104 = *(_QWORD *)(v103 + 56);
          if (v104)
          {
            *(_QWORD *)&v219 = v61;
            LOBYTE(v208) = 9;
            (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v219, &v208);
          }
        }
      }
    }
    v105 = *(_QWORD **)(v60 + 96);
    if (!v105)
    {
LABEL_84:
      v68 = *(_QWORD *)(a1 + 392);
      if (*(_BYTE *)(v68 + 112))
      {
        v69 = *(_QWORD **)(v68 + 328);
        if (v69)
        {
          *(_BYTE *)(v68 + 112) = 0;
          if (*(_QWORD *)(v68 + 48))
          {
            objc_msgSend(*(id *)(v68 + 48), "resetNotificationsForObserverType:", 0);
            v69 = *(_QWORD **)(v68 + 328);
          }
          md::LabelTransitRoute::updateTransitNodesRouteState(v69);
        }
      }
      v70 = *(_QWORD *)(v68 + 328);
      if (v70)
      {
        v71 = *(_QWORD **)(v70 + 312);
        v72 = *(_QWORD **)(v70 + 320);
        if (v71 != v72)
        {
          v73 = *(_QWORD *)(v68 + 16);
          do
          {
            if (*(_BYTE *)(*v71 + 697) != 2)
            {
              v74 = *(id *)(*v71 + 680);
              v75 = v74;
              if (v74 && objc_msgSend(v74, "needsTextUpdate"))
              {
                objc_msgSend(v75, "setNeedsTextUpdate:", 0);
                v76 = (int64x2_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v71 + 72))(*v71);
                md::WaypointStore::updateExternalFeatureText(v76, (md::LabelExternalPointFeature *)v75, v77);
                (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v71 + 32))(*v71, 0, 0);
                (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v71 + 536))(*v71, v73);
              }

            }
            v71 += 2;
          }
          while (v71 != v72);
        }
      }
      v78 = *(_QWORD *)(a1 + 48);
      if (*(_BYTE *)(v78 + 759) && *(_BYTE *)(v78 + 760))
      {
        v79 = *(_QWORD *)(a1 + 392);
        if (*(_BYTE *)(v79 + 114))
        {
          *(_BYTE *)(v79 + 114) = 0;
          if (*(_QWORD *)(v79 + 48))
          {
            *(_WORD *)(*(_QWORD *)(v79 + 16) + 3328) = 257;
            *(_BYTE *)(v79 + 115) = 1;
            objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
            *(double *)(v79 + 120) = v80 + 0.200000003;
            v81 = *(_QWORD *)(v79 + 16);
            *(_BYTE *)(v81 + 3045) = 1;
            *(_BYTE *)(v81 + 3047) = 1;
            v82 = atomic_load((unsigned __int8 *)(v81 + 3058));
            if ((v82 & 1) != 0)
            {
              v83 = *(_QWORD *)(v81 + 136);
              if (v83)
              {
                v84 = *(_QWORD *)(v83 + 56);
                if (v84)
                {
                  *(_QWORD *)&v219 = v81;
                  LOBYTE(v208) = 9;
                  (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v219, &v208);
                }
              }
            }
          }
        }
        else if (*(_BYTE *)(v79 + 115))
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
          if (v121 >= *(double *)(v79 + 120))
          {
            *(_BYTE *)(v79 + 115) = 0;
            if (*(_QWORD *)(v79 + 48))
              *(_WORD *)(*(_QWORD *)(v79 + 16) + 3328) = 0;
          }
        }
      }
      goto LABEL_176;
    }
    while (1)
    {
      while (1)
      {
        v106 = (_BYTE *)v105[2];
        if (v106[67])
          break;
        if (v106[68])
          (*(void (**)(_BYTE *))(*(_QWORD *)v106 + 24))(v106);
        v105 = (_QWORD *)*v105;
        if (!v105)
          goto LABEL_84;
      }
      v107 = *(int8x8_t *)(v60 + 80);
      v108 = v105[1];
      v109 = (uint8x8_t)vcnt_s8(v107);
      v109.i16[0] = vaddlv_u8(v109);
      if (v109.u32[0] > 1uLL)
      {
        if (v108 >= *(_QWORD *)&v107)
          v108 %= *(_QWORD *)&v107;
      }
      else
      {
        v108 &= *(_QWORD *)&v107 - 1;
      }
      v110 = (_QWORD *)*v105;
      v111 = *(_QWORD *)(v60 + 72);
      v112 = *(_QWORD **)(v111 + 8 * v108);
      do
      {
        v113 = v112;
        v112 = (_QWORD *)*v112;
      }
      while (v112 != v105);
      if (v113 == (_QWORD *)(v60 + 96))
        goto LABEL_284;
      v114 = v113[1];
      if (v109.u32[0] > 1uLL)
      {
        if (v114 >= *(_QWORD *)&v107)
          v114 %= *(_QWORD *)&v107;
      }
      else
      {
        v114 &= *(_QWORD *)&v107 - 1;
      }
      v115 = (_QWORD *)*v105;
      if (v114 != v108)
      {
LABEL_284:
        if (v110)
        {
          v116 = v110[1];
          if (v109.u32[0] > 1uLL)
          {
            if (v116 >= *(_QWORD *)&v107)
              v116 %= *(_QWORD *)&v107;
          }
          else
          {
            v116 &= *(_QWORD *)&v107 - 1;
          }
          v115 = (_QWORD *)*v105;
          if (v116 == v108)
          {
LABEL_161:
            v117 = v115[1];
            if (v109.u32[0] > 1uLL)
            {
              if (v117 >= *(_QWORD *)&v107)
                v117 %= *(_QWORD *)&v107;
            }
            else
            {
              v117 &= *(_QWORD *)&v107 - 1;
            }
            if (v117 != v108)
            {
              *(_QWORD *)(*(_QWORD *)(v60 + 72) + 8 * v117) = v113;
              v115 = (_QWORD *)*v105;
            }
            goto LABEL_167;
          }
        }
        *(_QWORD *)(v111 + 8 * v108) = 0;
        v115 = (_QWORD *)*v105;
      }
      if (v115)
        goto LABEL_161;
LABEL_167:
      *v113 = v115;
      *v105 = 0;
      --*(_QWORD *)(v60 + 112);
      v118 = (std::__shared_weak_count *)v105[3];
      if (v118)
      {
        v119 = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v60 + 104) + 40))(*(_QWORD *)(v60 + 104), v105, 32);
      v105 = v110;
      if (!v110)
        goto LABEL_84;
    }
  }
LABEL_176:
  v122 = *(_QWORD *)(a1 + 24);
  v123 = *(float *)(v122 + 1680);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v122 + 168) + 32) + 8))(*(_QWORD *)(*(_QWORD *)(v122 + 168) + 32)) & 1) != 0)
  {
    v124 = 1;
    if (v123 != 0.0)
      goto LABEL_178;
  }
  else
  {
    v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 168) + 32);
    v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 16))(v128);
    if (v123 != 0.0)
    {
LABEL_178:
      v219 = xmmword_19FFB34C0;
      v220 = 0;
      v222 = 0;
      v125 = *(_QWORD *)(a1 + 24);
      v203 = *(float64x2_t *)(v125 + 1688);
      v206 = *(double *)(v125 + 1704);
      v217 = v203;
      v218 = v206;
      v126 = *(_QWORD *)(v125 + 432);
      LOBYTE(v208) = 0;
      BYTE4(v209) = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v126, (uint64_t)&v217, (uint64_t)&v208, 1u, 0, (uint64_t)&v219, 1.0);
      if ((_BYTE)v222)
      {
        v127 = *(_QWORD *)(a1 + 440);
        *(_QWORD *)(a1 + 440) = 0;
        if (v127)
          goto LABEL_183;
      }
      else
      {
        _D1 = *(_QWORD *)(v126 + 920);
        _V5.D[1] = v203.f64[1];
        __asm { FMLA            D2, D1, V5.D[1] }
        v136 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v126 + 960), *(float64x2_t *)(v126 + 864), v203.f64[0]), *(float64x2_t *)(v126 + 896), v203, 1), *(float64x2_t *)(v126 + 928), v206), 1.0 / (_D2 + *(double *)(v126 + 952) * v206)));
        v137 = (float)(v123 * 0.5) * (float)(*(float *)(v125 + 176) * 0.5);
        v138 = *(float32x2_t **)(a1 + 440);
        if (v138)
        {
          v138[1].f32[0] = v137;
          v138[1].f32[1] = v137;
          v138[2] = v136;
          v138[3] = (float32x2_t)1065353216;
        }
        else
        {
          v139 = operator new();
          *(_BYTE *)(v139 + 52) = 5;
          *(_QWORD *)v139 = &off_1E428B7D0;
          *(float *)(v139 + 8) = v137;
          *(float *)(v139 + 12) = v137;
          *(float32x2_t *)(v139 + 16) = v136;
          *(_QWORD *)(v139 + 24) = 1065353216;
          *(_QWORD *)(v139 + 32) = 0x800000008;
          *(_QWORD *)(v139 + 44) = 1;
          v140 = *(_QWORD *)(a1 + 440);
          *(_QWORD *)(a1 + 440) = v139;
          if (v140)
            (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
        }
        {
          v198 = operator new();
          *(_QWORD *)(v198 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v198 + 24) = "VectorKitLabels";
          *(_OWORD *)(v198 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v198 = &off_1E42B5668;
          *(_QWORD *)(v198 + 8) = "VectorKitLabels";
          *(_OWORD *)(v198 + 72) = 0u;
          *(_OWORD *)(v198 + 88) = 0u;
          *(_OWORD *)(v198 + 104) = 0u;
          *(_OWORD *)(v198 + 120) = 0u;
          *(_OWORD *)(v198 + 136) = 0u;
          *(_OWORD *)(v198 + 152) = 0u;
          *(_OWORD *)(v198 + 168) = 0u;
          *(_OWORD *)(v198 + 184) = 0u;
          *(_OWORD *)(v198 + 200) = 0u;
          *(_OWORD *)(v198 + 216) = 0u;
          *(_OWORD *)(v198 + 232) = 0u;
          *(_QWORD *)(v198 + 248) = 0;
          *(_OWORD *)(v198 + 56) = 0u;
          v199 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v198 + 56), 0);
          if ((_DWORD)v199)
            geo::read_write_lock::logFailure(v199, (uint64_t)"initialization", v200);
          v201 = malloc_create_zone(0, 0);
          *(_QWORD *)(v198 + 48) = v201;
          malloc_set_zone_name(v201, "VectorKitLabels");
          *(_QWORD *)(v198 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v198;
        }
        v142 = mdm::Allocator::instance(void)::alloc;
        v143 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 1712);
        v144 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
        v145 = v144;
        v146 = (char *)(v144 + 1);
        if (v143 == 1)
        {
          if (v144)
          {
            *v144 = 0xE00000005;
            v147 = (char *)v144;
          }
          else
          {
            v147 = 0;
          }
        }
        else
        {
          if (v144)
            *v144 = 0xD00000005;
          v148 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v142 + 16))(v142, 16, 4);
          v147 = v148;
          v146 = v148 + 16;
          if (v148)
            *((_QWORD *)v148 + 1) = 0x100010003;
          *(_QWORD *)v148 = *v145;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v142 + 40))(v142, v145, 8);
        }
        v149 = objc_alloc_init(MEMORY[0x1E0D270A8]);
        v207 = v146 - v147;
        objc_msgSend(v149, "replaceAttributes:count:", v147, (unint64_t)(v146 - v147) >> 3);
        v150 = *(_QWORD *)(a1 + 24);
        if (v149)
        {
          objc_msgSend(v149, "featureStyleAttributesPtr");
          v151 = v213;
        }
        else
        {
          v151 = 0uLL;
        }
        v214 = v151;
        v213 = 0uLL;
        v152 = *(_QWORD *)(v150 + 336);
        v153 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
        md::createFeatureAttributeSet((gss::Allocator *)&v208, (uint64_t *)&v214);
        md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v215, (uint64_t *)(v152 + 184), &v208, 0);
        if (v208)
        {
          v209 = v208;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v211 + 40))(v211, v208, v210 - v208);
        }
        if (v153)
        {
          v154 = (unint64_t *)&v153->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        v156 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
        if (*((_QWORD *)&v213 + 1))
        {
          v157 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v159 = v215;
        v160 = v216;
        if (v216)
        {
          v161 = (unint64_t *)&v216->__shared_owners_;
          do
            v162 = __ldxr(v161);
          while (__stxr(v162 + 1, v161));
          v209 = (uint64_t)v160;
          do
            v163 = __ldxr(v161);
          while (__stxr(v163 + 1, v161));
        }
        else
        {
          v209 = 0;
        }
        v210 = 0;
        v211 = 0;
        v208 = v159;
        v212 = 0;
        if (v159)
          LODWORD(v159) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v159 + 48))(v159, &v210);
        v212 = v159;
        if (v160)
        {
          v164 = (unint64_t *)&v160->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
          LODWORD(v159) = v212;
        }
        if ((_DWORD)v159)
        {
          LOBYTE(v214) = 1;
          v204 = v149;
          v166 = gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(*(_QWORD *)(v208 + 24), 0xEDu, 1u, (BOOL *)&v214);
          if ((_BYTE)v214)
          {
            v167 = v166;
          }
          else
          {
            LOBYTE(v214) = 1;
            v168 = gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<int>(*(_QWORD *)(v208 + 24), 0x84u, 1u, (BOOL *)&v214);
            if ((_BYTE)v214)
              v167 = v168;
            else
              v167 = 0;
          }
          v223[0] = 1;
          v169 = *(_QWORD *)(v208 + 24);
          if ((int)*(float *)&v219 >= 0x17)
            v170 = 23;
          else
            v170 = (int)*(float *)&v219;
          v171 = *(unsigned __int8 *)(v169 + 12);
          if (v171 == 2)
          {
            LOBYTE(v214) = 1;
            LOBYTE(v213) = 1;
            v172 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v169, 0xECu, v170, 0, &v214);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v169, 0xECu, v170, 1u, &v213);
            v173 = (v214 | v213) != 0;
          }
          else
          {
            v172 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v208 + 24), 0xECu, v170, v171, v223);
            v173 = v223[0];
          }
          v202 = v173;
          v223[0] = 1;
          v174 = *(_QWORD *)(v208 + 24);
          v175 = *(unsigned __int8 *)(v174 + 12);
          if (v175 == 2)
          {
            LOBYTE(v214) = 1;
            LOBYTE(v213) = 1;
            v176 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v174, 0x1D5u, v170, 0, &v214);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v174, 0x1D5u, v170, 1, &v213);
            v177 = (v214 | v213) != 0;
          }
          else
          {
            v176 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(v208 + 24), 0x1D5u, v170, v175, v223);
            v177 = v223[0];
          }
          if (v176 >= 0x1F)
            v178 = 31;
          else
            v178 = v176;
          if (v177)
            v179 = v178;
          else
            v179 = 0;
          v223[0] = 1;
          v180 = *(_QWORD *)(v208 + 24);
          v181 = *(unsigned __int8 *)(v180 + 12);
          if (v181 == 2)
          {
            LOBYTE(v214) = 1;
            LOBYTE(v213) = 1;
            v182 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v180, 0x1D6u, v170, 0, &v214);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v180, 0x1D6u, v170, 1u, &v213);
            v183 = (v214 | v213) != 0;
          }
          else
          {
            v182 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v208 + 24), 0x1D6u, v170, v181, v223);
            v183 = v223[0];
          }
          v184 = v172;
          if (v183)
            v185 = v182;
          else
            v185 = v124 - 1;
          v186 = *(_DWORD **)(a1 + 440);
          v187 = v167 + 3;
          v188 = v167;
          if (v167 >= 7)
            v188 = 7;
          if (v188 <= -3)
            LOBYTE(v188) = -3;
          v189 = v188 + 3;
          if ((v167 + 3) >= 0xBu)
            v187 = v189;
          v190 = 1 << v187;
          v186[8] = v190;
          if (!v202)
            v184 = 0;
          v186[9] = LabelCollisionOverlayGroupToLayersCollided[v184] | v190;
          v186[11] = 1 << v179;
          v186[12] = v185;
          v149 = v204;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v208);
        v191 = v216;
        if (v216)
        {
          v192 = (unint64_t *)&v216->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }

        if (v147)
          (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v142 + 40))(v142, v147, v207);
      }
      return;
    }
  }
  v127 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v127)
LABEL_183:
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
}

void sub_19F2F2BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a16);
  v29 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  if (v27)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(v26, v27, a9 - v27);
  _Unwind_Resume(a1);
}

BOOL `non-virtual thunk to'md::MapNavLabeler::isEtaActive(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 12) && *(_QWORD *)(*((_QWORD *)this + 85) + 24) != 0;
}

void md::MapNavLabeler::synchronizedUpdate(uint64_t a1, const md::LayoutContext *a2, uint64_t a3, int a4)
{
  int v7;
  uint64_t *v8;
  int *v9;
  gss::Allocator *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  unsigned int *v39;
  gss::Allocator *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  int8x8_t v57;
  uint8x8_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  float v70;
  id v71;
  VKRouteInfo *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 *v102;
  __int128 *v103;
  _QWORD *v104;
  uint64_t v105;
  _OWORD *v106;
  unint64_t v107;
  unint64_t v108;
  __int128 v109;
  unint64_t *v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  unint64_t *v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  float64x2_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  float *v156;
  uint64_t *v157;
  float *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  double v168;
  double v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float32x2_t v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  __int128 v194;
  uint64_t v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  int v204;
  id v205;
  _QWORD *v206;
  _QWORD *v207;
  double v208;
  double v209;
  double v210;
  char v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  _QWORD *v218;
  float64x2_t *v219;
  uint64_t v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1) & 1) == 0
    && (!*(_QWORD *)(a1 + 104) || !*(_QWORD *)(*(_QWORD *)(a1 + 688) + 24))
    && (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 336) + 163) << 16 != 393216
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1))
  {
    return;
  }
  if (!*(_BYTE *)(a1 + 827))
  {
    v8 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 336) + 200);
    v9 = (int *)v8[5];
    if (v9)
    {
LABEL_44:
      v7 = *v9;
      goto LABEL_45;
    }
    v10 = (gss::Allocator *)operator new();
    *(_DWORD *)v10 = 0;
    v11 = v8[5];
    v8[5] = (uint64_t)v10;
    if (v11)
    {
      MEMORY[0x1A1AF4E00](v11, 0x1000C4052888210);
      v10 = (gss::Allocator *)v8[5];
    }
    *(_DWORD *)v10 = 50;
    v12 = gss::Allocator::instance(v10);
    v219 = (float64x2_t *)v12;
    v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 8, 4);
    v14 = v13;
    *(_QWORD *)&v217 = v13;
    v218 = v13 + 1;
    if (v13)
      *v13 = 0x50001004BLL;
    *((_QWORD *)&v217 + 1) = v13 + 1;
    md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&v212, *v8, (uint64_t)&v217);
    if (v14)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v12 + 40))(v12, v14, 8);
    v15 = v212;
    if (!(_QWORD)v212)
    {
LABEL_38:
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
      if (*((_QWORD *)&v212 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v9 = (int *)v8[5];
      goto LABEL_44;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
    if (*((_QWORD *)&v212 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      *((_QWORD *)&v217 + 1) = v16;
      do
        v19 = __ldxr(v17);
      while (__stxr(v19 + 1, v17));
    }
    else
    {
      *((_QWORD *)&v217 + 1) = 0;
    }
    v218 = 0;
    v219 = 0;
    *(_QWORD *)&v217 = v15;
    LOBYTE(v220) = 0;
    v20 = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v15 + 48))(v15, &v218);
    LOBYTE(v220) = v20;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v20 = v220;
    }
    if (v20)
    {
      v23 = *(_QWORD *)(v217 + 24);
      v24 = *(unsigned __int8 *)(v23 + 12);
      if (v24 == 2)
      {
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v23, 0x15Au, 0) & 1) == 0
          && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v23, 0x15Au, 1u) & 1) == 0)
        {
          goto LABEL_37;
        }
        LOBYTE(v216) = 1;
        v211 = 1;
        v25 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v23, 0x15Au, 0, &v216);
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v23, 0x15Au, 1u, &v211);
        v26 = *v25;
        goto LABEL_36;
      }
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v23, 0x15Au, *(unsigned __int8 *)(v23 + 12)))
      {
        v26 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v23, 0x15Au, v24, 0);
LABEL_36:
        *(_DWORD *)v8[5] = v26;
      }
    }
LABEL_37:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v217);
    goto LABEL_38;
  }
  v7 = -1;
LABEL_45:
  v30 = *(_QWORD **)(a1 + 72);
  v31 = v30[4];
  v32 = *(unsigned __int8 *)(v31 + 84);
  if (*(_BYTE *)(v31 + 84))
    v32 = *(_DWORD *)(v31 + 80);
  if (v32 != v7)
  {
    *(_DWORD *)(v31 + 80) = v7;
    *(_BYTE *)(v31 + 84) = 1;
    v33 = *v30;
    v34 = atomic_load((unsigned __int8 *)(*v30 + 3058));
    if ((v34 & 1) != 0)
    {
      v35 = *(_QWORD *)(v33 + 136);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 56);
        if (v36)
        {
          *(_QWORD *)&v217 = v33;
          LOBYTE(v212) = 9;
          (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v36 + 48))(v36, &v217, &v212);
        }
      }
    }
  }
  v37 = *(void **)(a1 + 56);
  v38 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 336) + 200);
  v39 = (unsigned int *)v38[6];
  if (!v39)
  {
    v40 = (gss::Allocator *)operator new();
    *(_DWORD *)v40 = 0;
    v41 = v38[6];
    v38[6] = (uint64_t)v40;
    if (v41)
    {
      MEMORY[0x1A1AF4E00](v41, 0x1000C4052888210);
      v40 = (gss::Allocator *)v38[6];
    }
    *(_DWORD *)v40 = 6;
    v42 = gss::Allocator::instance(v40);
    v219 = (float64x2_t *)v42;
    v43 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, 8, 4);
    v44 = v43;
    *(_QWORD *)&v217 = v43;
    v218 = v43 + 1;
    if (v43)
      *v43 = 0x60001004BLL;
    *((_QWORD *)&v217 + 1) = v43 + 1;
    md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&v212, *v38, (uint64_t)&v217);
    if (v44)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v42 + 40))(v42, v44, 8);
    v45 = v212;
    if ((_QWORD)v212)
    {
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
      if (*((_QWORD *)&v212 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        *((_QWORD *)&v217 + 1) = v46;
        do
          v49 = __ldxr(v47);
        while (__stxr(v49 + 1, v47));
      }
      else
      {
        *((_QWORD *)&v217 + 1) = 0;
      }
      v218 = 0;
      v219 = 0;
      *(_QWORD *)&v217 = v45;
      LOBYTE(v220) = 0;
      v50 = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v45 + 48))(v45, &v218);
      LOBYTE(v220) = v50;
      if (v46)
      {
        v51 = (unint64_t *)&v46->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        v50 = v220;
      }
      if (v50)
        overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(*(_QWORD *)(v217 + 24), (_DWORD *)v38[6]);
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v217);
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
    if (*((_QWORD *)&v212 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v39 = (unsigned int *)v38[6];
  }
  objc_msgSend(v37, "setMaxVisibleRoadsigns:", *v39);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1))
  {
    v56 = (_QWORD *)*((_QWORD *)a2 + 1);
    v57 = (int8x8_t)v56[1];
    if (v57)
    {
      v58 = (uint8x8_t)vcnt_s8(v57);
      v58.i16[0] = vaddlv_u8(v58);
      if (v58.u32[0] > 1uLL)
      {
        v59 = 0x99BED48DEFBBD82BLL;
        if (*(_QWORD *)&v57 <= 0x99BED48DEFBBD82BLL)
          v59 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v57;
      }
      else
      {
        v59 = (*(_QWORD *)&v57 - 1) & 0x99BED48DEFBBD82BLL;
      }
      v60 = *(_QWORD **)(*v56 + 8 * v59);
      if (v60)
      {
        v61 = (_QWORD *)*v60;
        if (v61)
        {
          if (v58.u32[0] < 2uLL)
          {
            v62 = *(_QWORD *)&v57 - 1;
            while (1)
            {
              v64 = v61[1];
              if (v64 == 0x99BED48DEFBBD82BLL)
              {
                if (v61[2] == 0x99BED48DEFBBD82BLL)
                  goto LABEL_104;
              }
              else if ((v64 & v62) != v59)
              {
                goto LABEL_110;
              }
              v61 = (_QWORD *)*v61;
              if (!v61)
                goto LABEL_110;
            }
          }
          do
          {
            v63 = v61[1];
            if (v63 == 0x99BED48DEFBBD82BLL)
            {
              if (v61[2] == 0x99BED48DEFBBD82BLL)
              {
LABEL_104:
                v65 = v61[5];
                if (*(_QWORD *)(v65 + 8) == 0x99BED48DEFBBD82BLL)
                {
                  v66 = !*(_QWORD *)(v65 + 32) || a4 == 0;
                  if (!v66)
                    objc_msgSend(*(id *)(a1 + 56), "grabTilesFromScene:");
                }
                break;
              }
            }
            else
            {
              if (v63 >= *(_QWORD *)&v57)
                v63 %= *(_QWORD *)&v57;
              if (v63 != v59)
                break;
            }
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
      }
    }
  }
LABEL_110:
  v67 = *(_QWORD *)(a1 + 688);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 432) + 12))
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  else
    v68 = 0;
  if (*(unsigned __int8 *)(v67 + 704) != v68)
    *(_BYTE *)(v67 + 704) = v68;
  v69 = *(_QWORD *)(a1 + 688);
  v70 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 432) + 32);
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy(v69 + 416, *(_QWORD *)(v69 + 424));
  *(_QWORD *)(v69 + 440) = 0;
  *(_QWORD *)(v69 + 416) = v69 + 424;
  *(_QWORD *)(v69 + 424) = 0;
  if (*(_QWORD *)(v69 + 104))
  {
    v71 = *(id *)(v69 + 24);
    objc_msgSend(v71, "routeInfo");
    v72 = (VKRouteInfo *)objc_claimAutoreleasedReturnValue();
    md::LabelNavEtaLabeler::extractPolylineOverlayInfo((md::LabelNavEtaLabeler *)v69, v72, v70);

    v214 = 0u;
    v215 = 0u;
    v212 = 0u;
    v213 = 0u;
    objc_msgSend(*(id *)(v69 + 24), "alternateRoutes");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v212, &v217, 16);
    if (v74)
    {
      v75 = *(_QWORD *)v213;
      do
      {
        for (i = 0; i != v74; ++i)
        {
          if (*(_QWORD *)v213 != v75)
            objc_enumerationMutation(v73);
          md::LabelNavEtaLabeler::extractPolylineOverlayInfo((md::LabelNavEtaLabeler *)v69, *(VKRouteInfo **)(*((_QWORD *)&v212 + 1) + 8 * i), v70);
        }
        v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v212, &v217, 16);
      }
      while (v74);
    }

  }
  v77 = *(_QWORD *)(a1 + 688);
  v78 = *(unsigned __int8 *)(v77 + 253);
  *(_BYTE *)(a1 + 681) = v78;
  if (v78)
    *(_BYTE *)(v77 + 253) = 0;
  if (*(_BYTE *)(a1 + 826))
  {
    *(_BYTE *)(v77 + 707) = 1;
    *(_BYTE *)(a1 + 826) = 0;
  }
  v79 = a1 + 136;
  md::LabelNavLayoutContext::grabStateFromContext((md::LabelNavLayoutContext *)(a1 + 136), *(md::LabelManager **)(a1 + 24), *(const md::LabelLayoutContext **)(*(_QWORD *)(a1 + 24) + 432), a2);
  if (*(_BYTE *)(a1 + 768))
  {
    *(_BYTE *)(a1 + 768) = 0;
    v80 = *(uint64_t **)(a1 + 280);
    v81 = *(_QWORD *)(a1 + 744);
    v82 = *(_QWORD *)(a1 + 736);
    if (v81 != v82)
    {
      do
      {
        v83 = *(std::__shared_weak_count **)(v81 - 32);
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v81 -= 40;
      }
      while (v81 != v82);
      v81 = *(_QWORD *)(a1 + 736);
    }
    *(_QWORD *)(a1 + 744) = v82;
    v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 712) - *(_QWORD *)(a1 + 704)) >> 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 752) - v81) >> 3) < v86)
    {
      if (v86 > 0x666666666666666)
        abort();
      v88 = 0xAAAAAAAAAAAAAAB8 * ((uint64_t)(*(_QWORD *)(a1 + 712) - *(_QWORD *)(a1 + 704)) >> 4);
      v89 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 760) + 16))(*(_QWORD *)(a1 + 760), v88, 8);
      v87 = v82 - v81;
      v90 = v89 + v87;
      v91 = v89 + v88;
      v92 = *(_QWORD *)(a1 + 744);
      v93 = *(_QWORD *)(a1 + 736);
      if (v92 == v93)
      {
        *(_QWORD *)(a1 + 736) = v90;
        *(_QWORD *)(a1 + 744) = v90;
        v98 = *(_QWORD *)(a1 + 752);
        *(_QWORD *)(a1 + 752) = v91;
      }
      else
      {
        v94 = v89 + v87;
        do
        {
          v95 = *(_OWORD *)(v92 - 40);
          v92 -= 40;
          *(_OWORD *)(v94 - 40) = v95;
          v94 -= 40;
          *(_QWORD *)v92 = 0;
          *(_QWORD *)(v92 + 8) = 0;
          v96 = *(_OWORD *)(v92 + 16);
          *(_BYTE *)(v94 + 32) = *(_BYTE *)(v92 + 32);
          *(_OWORD *)(v94 + 16) = v96;
        }
        while (v92 != v93);
        v92 = *(_QWORD *)(a1 + 736);
        v97 = *(_QWORD *)(a1 + 744);
        *(_QWORD *)(a1 + 736) = v94;
        *(_QWORD *)(a1 + 744) = v90;
        v98 = *(_QWORD *)(a1 + 752);
        *(_QWORD *)(a1 + 752) = v91;
        while (v97 != v92)
        {
          v99 = *(std::__shared_weak_count **)(v97 - 32);
          if (v99)
          {
            v100 = (unint64_t *)&v99->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          v97 -= 40;
        }
      }
      if (v92)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 760) + 40))(*(_QWORD *)(a1 + 760), v92, v98 - v92);
    }
    v102 = *(__int128 **)(a1 + 704);
    v103 = *(__int128 **)(a1 + 712);
    if (v102 != v103)
    {
      while (1)
      {
        v104 = *(_BYTE *)(a1 + 353) ? (_QWORD *)*((_QWORD *)v102 + 2) : 0;
        v105 = *v80;
        v217 = *v102;
        v218 = v104;
        md::AnchorManager::newAnchorAtCoordinate((unint64_t *)&v212, v105, (uint64_t)&v217, 0);
        v106 = (__int128 *)((char *)v102 + 24);
        v107 = *(_QWORD *)(a1 + 744);
        v108 = *(_QWORD *)(a1 + 752);
        if (v107 >= v108)
          break;
        if (!v107)
          goto LABEL_171;
        v109 = v212;
        if (*((_QWORD *)&v212 + 1))
        {
          v110 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
          v112 = *((_BYTE *)v102 + 40);
          *(_OWORD *)v107 = v109;
          do
            v113 = __ldxr(v110);
          while (__stxr(v113 + 1, v110));
          *(_OWORD *)(v107 + 16) = *v106;
          *(_BYTE *)(v107 + 32) = v112;
          do
            v114 = __ldaxr(v110);
          while (__stlxr(v114 - 1, v110));
          if (!v114)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v109 + 1) + 16))(*((_QWORD *)&v109 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v109 + 1));
          }
LABEL_171:
          v115 = v107 + 40;
          goto LABEL_207;
        }
        v131 = *((_BYTE *)v102 + 40);
        *(_OWORD *)v107 = (unint64_t)v212;
        *(_OWORD *)(v107 + 16) = *v106;
        *(_BYTE *)(v107 + 32) = v131;
        v115 = v107 + 40;
LABEL_207:
        *(_QWORD *)(a1 + 744) = v115;
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
        if (*((_QWORD *)&v212 + 1))
        {
          v144 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v102 += 3;
        if (v102 == v103)
          goto LABEL_212;
      }
      v116 = *(_QWORD *)(a1 + 736);
      v117 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v107 - v116) >> 3);
      v118 = v117 + 1;
      if (v117 + 1 > 0x666666666666666)
        abort();
      v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v108 - v116) >> 3);
      if (2 * v119 > v118)
        v118 = 2 * v119;
      if (v119 >= 0x333333333333333)
        v120 = 0x666666666666666;
      else
        v120 = v118;
      if (v120)
      {
        v121 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 760) + 16))(*(_QWORD *)(a1 + 760), 40 * v120, 8);
        v122 = v121 + 40 * v117;
        v123 = v121 + 40 * v120;
        if (v121)
        {
          v124 = v212;
          if (*((_QWORD *)&v212 + 1))
          {
            v125 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
            v127 = *((_BYTE *)v102 + 40);
            *(_OWORD *)v122 = v124;
            do
              v128 = __ldxr(v125);
            while (__stxr(v128 + 1, v125));
            v129 = v121 + 40 * v117;
            *(_OWORD *)(v129 + 16) = *v106;
            *(_BYTE *)(v129 + 32) = v127;
            do
              v130 = __ldaxr(v125);
            while (__stlxr(v130 - 1, v125));
            if (!v130)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v124 + 1) + 16))(*((_QWORD *)&v124 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v124 + 1));
            }
          }
          else
          {
            v132 = *((_BYTE *)v102 + 40);
            *(_OWORD *)v122 = (unint64_t)v212;
            v133 = v121 + 40 * v117;
            *(_OWORD *)(v133 + 16) = *v106;
            *(_BYTE *)(v133 + 32) = v132;
          }
        }
      }
      else
      {
        v123 = 0;
        v122 = 40 * v117;
      }
      v115 = v122 + 40;
      v134 = *(_QWORD *)(a1 + 744);
      v135 = *(_QWORD *)(a1 + 736);
      if (v134 == v135)
      {
        *(_QWORD *)(a1 + 736) = v122;
        *(_QWORD *)(a1 + 744) = v115;
        v139 = *(_QWORD *)(a1 + 752);
        *(_QWORD *)(a1 + 752) = v123;
      }
      else
      {
        do
        {
          v136 = *(_OWORD *)(v134 - 40);
          v134 -= 40;
          *(_OWORD *)(v122 - 40) = v136;
          v122 -= 40;
          *(_QWORD *)v134 = 0;
          *(_QWORD *)(v134 + 8) = 0;
          v137 = *(_OWORD *)(v134 + 16);
          *(_BYTE *)(v122 + 32) = *(_BYTE *)(v134 + 32);
          *(_OWORD *)(v122 + 16) = v137;
        }
        while (v134 != v135);
        v134 = *(_QWORD *)(a1 + 736);
        v138 = *(_QWORD *)(a1 + 744);
        *(_QWORD *)(a1 + 736) = v122;
        *(_QWORD *)(a1 + 744) = v115;
        v139 = *(_QWORD *)(a1 + 752);
        *(_QWORD *)(a1 + 752) = v123;
        if (v138 != v134)
        {
          do
          {
            v140 = *(std::__shared_weak_count **)(v138 - 32);
            if (v140)
            {
              v141 = (unint64_t *)&v140->__shared_owners_;
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
              }
            }
            v138 -= 40;
          }
          while (v138 != v134);
          if (!v134)
            goto LABEL_207;
LABEL_206:
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 760) + 40))(*(_QWORD *)(a1 + 760), v134, v139 - v134);
          goto LABEL_207;
        }
      }
      if (!v134)
        goto LABEL_207;
      goto LABEL_206;
    }
LABEL_212:
    v79 = a1 + 136;
  }
  v146 = *(_QWORD *)(a1 + 24);
  v147 = *(float64x2_t **)(v146 + 432);
  *(_QWORD *)&v217 = &off_1E428BBF8;
  *((_QWORD *)&v217 + 1) = v146;
  v218 = (_QWORD *)a1;
  v219 = v147;
  v220 = v79;
  v148 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 784) = v148;
  v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 712) - *(_QWORD *)(a1 + 704)) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 792) - v148) >> 3) < v149)
  {
    if (v149 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v150 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 16))(*(_QWORD *)(a1 + 800), 8 * ((uint64_t)(*(_QWORD *)(a1 + 712) - *(_QWORD *)(a1 + 704)) >> 4), 4);
    v151 = *(_QWORD *)(a1 + 784);
    v152 = *(_QWORD *)(a1 + 776);
    v153 = v150;
    if (v151 != v152)
    {
      do
      {
        v154 = *(_OWORD *)(v151 - 24);
        *(_QWORD *)(v153 - 8) = *(_QWORD *)(v151 - 8);
        *(_OWORD *)(v153 - 24) = v154;
        v153 -= 24;
        v151 -= 24;
      }
      while (v151 != v152);
      v151 = *(_QWORD *)(a1 + 776);
    }
    *(_QWORD *)(a1 + 776) = v153;
    *(_QWORD *)(a1 + 784) = v150;
    v155 = *(_QWORD *)(a1 + 792);
    *(_QWORD *)(a1 + 792) = v150 + 24 * v149;
    if (v151)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 40))(*(_QWORD *)(a1 + 800), v151, v155 - v151);
  }
  v156 = *(float **)(a1 + 736);
  v157 = *(uint64_t **)(a1 + 744);
  if (v156 != (float *)v157)
  {
    while (1)
    {
      v159 = *(_QWORD *)v156;
      if (!*(_QWORD *)(*(_QWORD *)v156 + 8))
        break;
LABEL_237:
      v208 = (*(double (**)(uint64_t))(*(_QWORD *)v159 + 48))(v159);
      v209 = v168;
      *(double *)&v212 = v208;
      *((double *)&v212 + 1) = v168;
      v210 = v169;
      *(double *)&v213 = v169;
      if (!md::LabelLayoutContext::isDistanceClipped((uint64_t)v147, (uint64_t)&v212))
      {
        v170 = v156[6];
        v171 = v156[4];
        if (v170 >= v171 && (v172 = v156[7], v173 = v156[5], v172 >= v173))
        {
          v178 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v147[60], v147[54], v208), v147[56], v209), v147[58], v210), 1.0 / (v147[61].f64[1] + v147[55].f64[1] * v208 + v147[57].f64[1] * v209 + v147[59].f64[1] * v210)));
          v177 = v178.f32[0] + v171;
          v174 = v178.f32[1] + v173;
          v176 = v178.f32[0] + v170;
          v175 = v178.f32[1] + v172;
        }
        else
        {
          v174 = 3.4028e38;
          v175 = -3.4028e38;
          v176 = -3.4028e38;
          v177 = 3.4028e38;
        }
        v179 = *((_BYTE *)v156 + 32);
        v180 = *(_QWORD *)(a1 + 784);
        v181 = *(_QWORD *)(a1 + 792);
        if (v180 >= v181)
        {
          v182 = *(_QWORD *)(a1 + 776);
          v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v180 - v182) >> 3);
          v184 = v183 + 1;
          if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v185 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v181 - v182) >> 3);
          if (2 * v185 > v184)
            v184 = 2 * v185;
          if (v185 >= 0x555555555555555)
            v186 = 0xAAAAAAAAAAAAAAALL;
          else
            v186 = v184;
          if (v186)
          {
            v187 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 16))(*(_QWORD *)(a1 + 800), 24 * v186, 4);
            v188 = v187 + 24 * v183;
            v189 = v187 + 24 * v186;
            if (v187)
            {
              *(float *)v188 = v177;
              *(float *)(v188 + 4) = v174;
              *(float *)(v188 + 8) = v176;
              *(float *)(v188 + 12) = v175;
              v190 = v187 + 24 * v183;
              *(_DWORD *)(v190 + 16) = 1065353216;
              *(_BYTE *)(v190 + 20) = v179;
            }
          }
          else
          {
            v189 = 0;
            v188 = 24 * v183;
          }
          v191 = *(_QWORD *)(a1 + 784);
          v192 = *(_QWORD *)(a1 + 776);
          v193 = v188;
          if (v191 != v192)
          {
            do
            {
              v194 = *(_OWORD *)(v191 - 24);
              *(_QWORD *)(v193 - 8) = *(_QWORD *)(v191 - 8);
              *(_OWORD *)(v193 - 24) = v194;
              v193 -= 24;
              v191 -= 24;
            }
            while (v191 != v192);
            v191 = *(_QWORD *)(a1 + 776);
          }
          v158 = (float *)(v188 + 24);
          *(_QWORD *)(a1 + 776) = v193;
          *(_QWORD *)(a1 + 784) = v188 + 24;
          v195 = *(_QWORD *)(a1 + 792);
          *(_QWORD *)(a1 + 792) = v189;
          if (v191)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 40))(*(_QWORD *)(a1 + 800), v191, v195 - v191);
        }
        else
        {
          if (v180)
          {
            *(float *)v180 = v177;
            *(float *)(v180 + 4) = v174;
            *(float *)(v180 + 8) = v176;
            *(float *)(v180 + 12) = v175;
            *(_DWORD *)(v180 + 16) = 1065353216;
            *(_BYTE *)(v180 + 20) = v179;
          }
          v158 = (float *)(v180 + 24);
        }
        *(_QWORD *)(a1 + 784) = v158;
      }
      v156 += 10;
      if (v156 == (float *)v157)
        goto LABEL_260;
    }
    v160 = **(_QWORD **)(v220 + 144);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v159 + 64))(&v212);
    md::AnchorManager::newAnchorAtCoordinate((unint64_t *)&v216, v160, (uint64_t)&v212, 0);
    v161 = v216;
    v216 = 0uLL;
    v162 = (std::__shared_weak_count *)*((_QWORD *)v156 + 1);
    *(_OWORD *)v156 = v161;
    if (!v162)
      goto LABEL_230;
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
      v165 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
      if (*((_QWORD *)&v216 + 1))
        goto LABEL_231;
    }
    else
    {
LABEL_230:
      v165 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
      if (*((_QWORD *)&v216 + 1))
      {
LABEL_231:
        v166 = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
    }
    v159 = *(_QWORD *)v156;
    v147 = v219;
    goto LABEL_237;
  }
LABEL_260:
  if (*(_QWORD *)(a1 + 104))
  {
    v196 = *(_QWORD **)(a1 + 688);
    v197 = (void *)v196[3];
    if (v197)
    {
      objc_msgSend(v197, "routeInfo");
      v198 = (void *)objc_claimAutoreleasedReturnValue();
      if (v198)
      {
        v199 = (_QWORD *)v196[32];
        v200 = v196 + 33;
        if (v199 != v196 + 33)
        {
          do
          {
            v201 = v199[5];
            v202 = v199[6];
            while (v201 != v202)
            {
              v203 = *(id *)(v201 + 56);
              v204 = objc_msgSend(v203, "hasLabel");

              if (v204)
              {
                v205 = *(id *)(v201 + 56);
                objc_msgSend(v205, "updateAnchorWithContext:", &v217);

              }
              v201 += 72;
            }
            v206 = (_QWORD *)v199[1];
            if (v206)
            {
              do
              {
                v207 = v206;
                v206 = (_QWORD *)*v206;
              }
              while (v206);
            }
            else
            {
              do
              {
                v207 = (_QWORD *)v199[2];
                v66 = *v207 == (_QWORD)v199;
                v199 = v207;
              }
              while (!v66);
            }
            v199 = v207;
          }
          while (v207 != v200);
        }
      }

    }
  }
}

void sub_19F2F4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unint64_t *p_shared_owners;
  unint64_t v29;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a27);
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t md::TaskContext::TaskContext(uint64_t a1, void *a2)
{
  geo::TaskQueue **v4;
  geo::TaskQueue **v5;
  geo::TaskQueue **v6;
  geo::TaskQueue **v7;
  geo::TaskQueue **v8;
  geo::TaskQueue **v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  geo::TaskQueue *v13;
  uint64_t v14;
  uint64_t v15;
  geo::TaskQueue *v16;
  uint64_t v17;
  uint64_t v18;
  geo::TaskQueue *v19;
  uint64_t v20;
  uint64_t v21;
  geo::TaskQueue *v22;
  uint64_t v23;
  uint64_t v24;
  geo::TaskQueue *v25;
  uint64_t v26;
  uint64_t v27;
  geo::TaskQueue *v28;
  uint64_t v29;
  uint64_t v30;
  geo::TaskQueue *v31;
  uint64_t v32;
  uint64_t v33;
  geo::TaskQueue *v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  geo::TaskQueue *v38;
  uint64_t v39;
  uint64_t v40;
  geo::TaskQueue *v41;
  uint64_t v42;
  uint64_t v43;
  geo::TaskQueue *v44;
  uint64_t v45;
  uint64_t v46;
  geo::TaskQueue *v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  geo::TaskQueue *v52;
  uint64_t v53;
  uint64_t v54;
  geo::TaskQueue *v55;
  uint64_t v56;
  uint64_t v57;
  geo::TaskQueue *v58;
  uint64_t v59;
  uint64_t v60;
  geo::TaskQueue *v61;
  uint64_t v62;
  uint64_t v63;
  geo::TaskQueue *v64;
  geo::TaskQueue **v66;
  geo::TaskQueue **v67;
  geo::TaskQueue **v68;
  geo::TaskQueue **v69;
  geo::TaskQueue **v70;
  geo::TaskQueue **v71;
  geo::TaskQueue **v72;
  geo::TaskQueue **v73;
  geo::TaskQueue **v74;
  geo::TaskQueue **v75;
  geo::TaskQueue **v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t buf[16];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v77 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (geo::TaskQueue **)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v70 = (geo::TaskQueue **)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = (geo::TaskQueue **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  v6 = (geo::TaskQueue **)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  v69 = (geo::TaskQueue **)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  v68 = (geo::TaskQueue **)(a1 + 96);
  *(_OWORD *)(a1 + 112) = 0u;
  v7 = (geo::TaskQueue **)(a1 + 112);
  *(_OWORD *)(a1 + 128) = 0u;
  v8 = (geo::TaskQueue **)(a1 + 128);
  *(_OWORD *)a1 = 0u;
  v9 = (geo::TaskQueue **)(a1 + 136);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v10 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "Create TaskContext:%p", buf, 0xCu);
  }

  objc_storeStrong((id *)a1, a2);
  v74 = (geo::TaskQueue **)(a1 + 24);
  v75 = (geo::TaskQueue **)(a1 + 8);
  v71 = (geo::TaskQueue **)(a1 + 56);
  v72 = (geo::TaskQueue **)(a1 + 40);
  v73 = (geo::TaskQueue **)(a1 + 72);
  v66 = (geo::TaskQueue **)(a1 + 104);
  v67 = (geo::TaskQueue **)(a1 + 88);
  v76 = (geo::TaskQueue **)(a1 + 120);
  *(_QWORD *)buf = 0x10000000003;
  v81 = 3;
  if (v77 == (id)MEMORY[0x1E0C80D38])
  {
    buf[4] = 1;
    BYTE4(v81) = 1;
    v11 = operator new();
    v80 = 0x20000000003;
    v12 = geo::TaskQueue::TaskQueue(v11, "com.apple.vectorkit.dispatch.layoutbackgroundqueue", 1, 0, (uint64_t)&v80);
    v13 = *v69;
    *v69 = (geo::TaskQueue *)v12;
    if (v13)
    {
      geo::TaskQueue::~TaskQueue(v13);
      MEMORY[0x1A1AF4E00]();
    }
    v14 = operator new();
    v80 = 0x10000000003;
    v15 = geo::TaskQueue::TaskQueue(v14, "com.apple.vectorkit.dispatch.glyphrenderqueue", 1, 0, (uint64_t)&v80);
    v16 = *v67;
    *v67 = (geo::TaskQueue *)v15;
    if (v16)
    {
      geo::TaskQueue::~TaskQueue(v16);
      MEMORY[0x1A1AF4E00]();
    }
    v17 = operator new();
    v80 = 0x100000002;
    v18 = geo::TaskQueue::TaskQueue(v17, "com.apple.vectorkit.dispatch.textDataLoaderQueue", 1, 0, (uint64_t)&v80);
    v19 = *v66;
    *v66 = (geo::TaskQueue *)v18;
    if (v19)
    {
      geo::TaskQueue::~TaskQueue(v19);
      MEMORY[0x1A1AF4E00]();
    }
    v20 = operator new();
    v80 = 0x100000002;
    v21 = geo::TaskQueue::TaskQueue(v20, "com.apple.vectorkit.dispatch.imageLoaderQueue", 4, 1, (uint64_t)&v80);
    v22 = *v68;
    *v68 = (geo::TaskQueue *)v21;
    if (v22)
    {
      geo::TaskQueue::~TaskQueue(v22);
      MEMORY[0x1A1AF4E00]();
    }
    v23 = operator new();
    v80 = 0x20000000003;
    v24 = geo::TaskQueue::TaskQueue(v23, "com.apple.vectorkit.dispatch.labelsCompletionQueue", 1, 0, (uint64_t)&v80);
    v25 = *v9;
    *v9 = (geo::TaskQueue *)v24;
    if (v25)
    {
      geo::TaskQueue::~TaskQueue(v25);
      MEMORY[0x1A1AF4E00]();
    }
  }
  v26 = operator new();
  v80 = 0x100000003;
  v27 = geo::TaskQueue::TaskQueue(v26, "com.apple.mapdisplay.dispatch.parallelfor", 4, 0, (uint64_t)&v80);
  v28 = *v76;
  *v76 = (geo::TaskQueue *)v27;
  if (v28)
  {
    geo::TaskQueue::~TaskQueue(v28);
    MEMORY[0x1A1AF4E00]();
  }
  v29 = operator new();
  v30 = geo::TaskQueue::TaskQueue(v29, "com.apple.vectorkit.dispatch.layoutqueue", 1, 0, (uint64_t)buf);
  v31 = *v75;
  *v75 = (geo::TaskQueue *)v30;
  if (v31)
  {
    geo::TaskQueue::~TaskQueue(v31);
    MEMORY[0x1A1AF4E00]();
  }
  v32 = operator new();
  v33 = geo::TaskQueue::TaskQueue(v32, "com.apple.vectorkit.dispatch.renderqueue", 1, 0, (uint64_t)&v81);
  v34 = *v4;
  *v4 = (geo::TaskQueue *)v33;
  if (v34)
  {
    geo::TaskQueue::~TaskQueue(v34);
    MEMORY[0x1A1AF4E00]();
  }
  v80 = 2;
  v35 = operator new();
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v36, "tileDecodeQueueWidth");
  geo::TaskQueue::TaskQueue(v35, "com.apple.mapdisplay.dispatch.tiledecodequeue", v37, v37 > 1, (uint64_t)&v80);
  v38 = *v74;
  *v74 = (geo::TaskQueue *)v35;
  if (v38)
  {
    geo::TaskQueue::~TaskQueue(v38);
    MEMORY[0x1A1AF4E00]();
  }

  v39 = operator new();
  v79 = 2;
  v40 = geo::TaskQueue::TaskQueue(v39, "com.apple.mapdisplay.dispatch.layoutworkerqueue", 0, 0, (uint64_t)&v79);
  v41 = *v6;
  *v6 = (geo::TaskQueue *)v40;
  if (v41)
  {
    geo::TaskQueue::~TaskQueue(v41);
    MEMORY[0x1A1AF4E00]();
  }
  v42 = operator new();
  v79 = 2;
  v43 = geo::TaskQueue::TaskQueue(v42, "com.apple.mapdisplay.dispatch.muninLayoutworkerqueue", 0, 0, (uint64_t)&v79);
  v44 = *v73;
  *v73 = (geo::TaskQueue *)v43;
  if (v44)
  {
    geo::TaskQueue::~TaskQueue(v44);
    MEMORY[0x1A1AF4E00]();
  }
  v45 = operator new();
  v79 = 0x100000002;
  v46 = geo::TaskQueue::TaskQueue(v45, "com.apple.mapdisplay.dispatch.labelTileDecodeQueue", 1, 0, (uint64_t)&v79);
  v47 = *v7;
  *v7 = (geo::TaskQueue *)v46;
  if (v47)
  {
    geo::TaskQueue::~TaskQueue(v47);
    MEMORY[0x1A1AF4E00]();
  }
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform", v66);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "shouldStyleLabelsInParallel");

  if (v49)
  {
    v50 = operator new();
    v79 = 0x10000000002;
    v51 = geo::TaskQueue::TaskQueue(v50, "com.apple.mapdisplay.dispatch.tiledecodestylingqueue", 0, 0, (uint64_t)&v79);
    v52 = *v70;
    *v70 = (geo::TaskQueue *)v51;
    if (v52)
    {
      geo::TaskQueue::~TaskQueue(v52);
      MEMORY[0x1A1AF4E00]();
    }
  }
  v79 = 2;
  v53 = operator new();
  v78 = 2;
  v54 = geo::TaskQueue::TaskQueue(v53, "com.apple.mapdisplay.dispatch.overlaylayoutqueue", 1, 0, (uint64_t)&v78);
  v55 = *v5;
  *v5 = (geo::TaskQueue *)v54;
  if (v55)
  {
    geo::TaskQueue::~TaskQueue(v55);
    MEMORY[0x1A1AF4E00]();
  }
  v56 = operator new();
  v57 = geo::TaskQueue::TaskQueue(v56, "com.apple.mapdisplay.dispatch.overlaytiledecodequeue", 1, 0, (uint64_t)&v79);
  v58 = *v72;
  *v72 = (geo::TaskQueue *)v57;
  if (v58)
  {
    geo::TaskQueue::~TaskQueue(v58);
    MEMORY[0x1A1AF4E00]();
  }
  v59 = operator new();
  v78 = 2;
  v60 = geo::TaskQueue::TaskQueue(v59, "com.apple.mapdisplay.dispatch.overlayupdatequeue", 1, 0, (uint64_t)&v78);
  v61 = *v71;
  *v71 = (geo::TaskQueue *)v60;
  if (v61)
  {
    geo::TaskQueue::~TaskQueue(v61);
    MEMORY[0x1A1AF4E00]();
  }
  v62 = operator new();
  v78 = 0x100000002;
  v63 = geo::TaskQueue::TaskQueue(v62, "com.apple.mapdisplay.dispatch.drapingQueue", 4, 0, (uint64_t)&v78);
  v64 = *v8;
  *v8 = (geo::TaskQueue *)v63;
  if (v64)
  {
    geo::TaskQueue::~TaskQueue(v64);
    MEMORY[0x1A1AF4E00]();
  }

  return a1;
}

void sub_19F2F4B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, geo::TaskQueue **a9, geo::TaskQueue **a10, geo::TaskQueue **a11, geo::TaskQueue **a12, geo::TaskQueue **a13, geo::TaskQueue **a14, geo::TaskQueue **a15, geo::TaskQueue **a16, geo::TaskQueue **a17, geo::TaskQueue **a18, geo::TaskQueue **a19, void *a20)
{
  id *v20;
  geo::TaskQueue **v21;
  geo::TaskQueue **v22;
  geo::TaskQueue **v23;
  geo::TaskQueue **v24;
  void *v25;
  geo::TaskQueue **v26;
  geo::TaskQueue **v27;

  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v21);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v26);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a19);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v27);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a9);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a11);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a10);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a12);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a16);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v24);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a14);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v23);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a15);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a13);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a17);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](v22);
  std::unique_ptr<geo::TaskQueue>::~unique_ptr[abi:nn180100](a18);

  _Unwind_Resume(a1);
}

uint64_t geo::TaskQueue::TaskQueue(uint64_t a1, const char *a2, char a3, char a4, uint64_t a5)
{
  id *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *inactive;
  NSObject *v13;
  NSObject *v14;
  unsigned int v15;
  dispatch_qos_class_t v16;
  NSObject *v17;
  dispatch_queue_t v18;
  id v19;
  NSObject *v20;
  unsigned int v21;
  dispatch_qos_class_t v22;
  unint64_t v23;
  dispatch_semaphore_t v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  unsigned int v28;
  dispatch_qos_class_t v29;
  NSObject *v30;
  dispatch_queue_t v31;
  void *v32;
  NSObject *v33;
  char __str[256];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = &off_1E42B5530;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (id *)(a1 + 16);
  *(_QWORD *)(a1 + 32) = &off_1E42B5530;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 56) = a4;
  *(_WORD *)(a1 + 57) = 0;
  *(_QWORD *)(a1 + 64) = &off_1E42B5550;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 88) = a3;
  if (a3 == 1)
    v9 = 0;
  else
    v9 = (void *)MEMORY[0x1E0C80D50];
  v10 = v9;
  v11 = v10;
  if (*(_BYTE *)(a5 + 4) && *(_BYTE *)(a1 + 88) == 1)
  {
    *(_BYTE *)(a1 + 57) = 1;
    snprintf(__str, 0x100uLL, "%s.workloop", a2);
    inactive = dispatch_workloop_create_inactive(__str);
    dispatch_workloop_set_qos_class_floor();
    dispatch_activate(inactive);
    v13 = dispatch_queue_create(a2, 0);
    dispatch_set_target_queue(v13, inactive);

    objc_storeStrong(v8, v13);
  }
  else
  {
    dispatch_queue_attr_make_with_autorelease_frequency(v10, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v14 = objc_claimAutoreleasedReturnValue();

    v15 = *(_DWORD *)a5 - 1;
    if (v15 >= 3)
      v16 = QOS_CLASS_BACKGROUND;
    else
      v16 = 8 * v15 + 17;
    dispatch_queue_attr_make_with_qos_class(v14, v16, -*(unsigned __int8 *)(a5 + 5));
    v17 = objc_claimAutoreleasedReturnValue();

    dispatch_queue_attr_make_initially_inactive(v17);
    v11 = objc_claimAutoreleasedReturnValue();

    v18 = dispatch_queue_create(a2, v11);
    v19 = *v8;
    *v8 = v18;
    v20 = v18;

    if (*(_BYTE *)(a5 + 4))
    {
      v21 = *(_DWORD *)a5 - 1;
      if (v21 >= 3)
        v22 = QOS_CLASS_BACKGROUND;
      else
        v22 = 8 * v21 + 17;
      dispatch_set_qos_class_floor((dispatch_object_t)*v8, v22, -*(unsigned __int8 *)(a5 + 5));
    }
    dispatch_activate((dispatch_object_t)*v8);
  }
  v23 = *(unsigned __int8 *)(a1 + 88);
  if (v23 < 2)
  {
    *(_BYTE *)(a1 + 58) = 0;
  }
  else
  {
    v24 = dispatch_semaphore_create(v23);
    v25 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v24;
    v26 = v24;

    v27 = *(_QWORD *)(a1 + 72);
    *(_BYTE *)(a1 + 58) = v27 != 0;
    if (v27 && *(_BYTE *)(a1 + 56))
    {
      v28 = *(_DWORD *)a5 - 1;
      if (v28 >= 3)
        v29 = QOS_CLASS_BACKGROUND;
      else
        v29 = 8 * v28 + 17;
      dispatch_queue_attr_make_with_qos_class(0, v29, -*(unsigned __int8 *)(a5 + 5));
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = dispatch_queue_create(a2, v30);
      v32 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v31;
      v33 = v31;

    }
    *(_BYTE *)(a1 + 56) = *(_QWORD *)(a1 + 40) != 0;
  }

  return a1;
}

md::CoastLineRenderResources *md::CoastLineRenderResources::CoastLineRenderResources(md::CoastLineRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3, char a4)
{
  VKSharedResources *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  unsigned __int8 v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  unsigned __int8 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _OWORD *v181;
  __int128 *v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  unsigned __int8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _OWORD *v210;
  __int128 *v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _OWORD *v228;
  __int128 *v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t *v240;
  unsigned __int8 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _OWORD *v257;
  __int128 *v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _OWORD *v275;
  __int128 *v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  _QWORD *v292;
  __int128 v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  _QWORD *v306;
  __int128 v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t *v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  unint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  char *v357;
  __int128 v358;
  unsigned __int8 v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  __int128 v363;
  unint64_t *v369;
  unint64_t v370;
  int8x16_t v371;
  int16x8_t v372;
  int32x4_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int16x8_t v376;
  int32x4_t v377;
  int8x16_t v378;
  int32x4_t v379;
  int8x16_t v380;
  int32x4_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int16x8_t v388;
  int32x4_t v389;
  int8x16_t v390;
  int16x8_t v391;
  int32x4_t v392;
  int8x16_t v393;
  int32x4_t v394;
  int8x16_t v395;
  int32x4_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int16x8_t v410;
  int32x4_t v411;
  int16x8_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int16x8_t v425;
  int32x4_t v426;
  int16x8_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  __int128 v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  ggl::PolygonShadowedStrokeShader *v495;
  unsigned __int8 v496;
  unsigned __int8 v497;
  unsigned __int8 v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  ggl::GlowShader *v505;
  unsigned __int8 v506;
  unsigned __int8 v507;
  unsigned __int8 v508;
  unsigned __int8 v509;
  unsigned __int8 v510;
  unsigned __int8 v511;
  unsigned __int8 v512;
  unsigned __int8 v513;
  unsigned __int8 v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t *v517;
  uint64_t *v518;
  uint64_t *v519;
  uint64_t *v520;
  VKSharedResources *v521;
  __int16 v522;
  char v523;
  uint64_t v524;
  std::__shared_weak_count *v525;
  std::__shared_weak_count *v526;
  _BYTE v527[36];
  uint64_t v528;
  char v529;
  uint64_t v530;
  std::__shared_weak_count *v531;
  __int128 v532;
  __int128 v533;
  _QWORD v534[3];
  _QWORD *v535;
  _QWORD v536[3];
  _QWORD *v537;
  _QWORD v538[3];
  _QWORD *v539;
  _QWORD v540[3];
  _QWORD *v541;
  _QWORD v542[3];
  _QWORD *v543;
  _QWORD v544[3];
  _QWORD *v545;
  _QWORD v546[3];
  _QWORD *v547;
  _QWORD v548[3];
  _QWORD *v549;
  _QWORD v550[3];
  _QWORD *v551;
  _QWORD v552[3];
  _QWORD *v553;
  _QWORD v554[3];
  _QWORD *v555;
  _QWORD v556[3];
  _QWORD *v557;
  uint64_t v558;

  v558 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  *((_OWORD *)this + 1) = 0u;
  v520 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 7) = 0u;
  v516 = (uint64_t *)((char *)this + 112);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 72) = 0;
  v518 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)this = 0u;
  v519 = (uint64_t *)((char *)this + 24);
  v517 = (uint64_t *)((char *)this + 104);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 34) = 0;
  v521 = v7;
  v8 = -[VKSharedResources shaderLibrary](v7, "shaderLibrary");
  -[VKSharedResources textureManager](v521, "textureManager");
  v10 = **(_QWORD **)v527;
  v9 = *(_QWORD *)(*(_QWORD *)v527 + 8);
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 28) = v10;
  *((_QWORD *)this + 29) = v9;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*(_QWORD *)&v527[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v527[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v527[8] + 16))(*(_QWORD *)&v527[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v527[8]);
    }
  }
  v18 = *(_QWORD *)(v8 + 80);
  v19 = *(_QWORD *)(v18 + 1664);
  v20 = *(std::__shared_weak_count **)(v18 + 1672);
  v530 = v19;
  v531 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_OWORD *)&v527[20] = 0uLL;
  v528 = 0;
  v527[0] = 0;
  *(_OWORD *)&v527[4] = xmmword_19FFB3060;
  v529 = 0;
  v23 = operator new(0x198uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E42DE928;
  v24 = *(_OWORD *)&a3->colorFormatsCount;
  v532 = *(_OWORD *)a3->colorFormats;
  v533 = v24;
  v25 = ggl::PolygonFill::MeshPipelineState::MeshPipelineState((uint64_t)(v23 + 3), &v530, (uint64_t)v527, &v532);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 20) = v25;
  *((_QWORD *)this + 21) = v23;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v531;
  if (v531)
  {
    v30 = (unint64_t *)&v531->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(_QWORD *)(v8 + 80);
  v33 = *(_QWORD *)(v32 + 1664);
  v34 = *(std::__shared_weak_count **)(v32 + 1672);
  v530 = v33;
  v531 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  *(_QWORD *)&v527[28] = 0;
  *(_QWORD *)&v527[20] = 0;
  v528 = 0;
  v527[0] = 0;
  *(_OWORD *)&v527[4] = xmmword_19FFB3060;
  v529 = 0;
  v37 = operator new(0x198uLL);
  v37[1] = 0;
  v37[2] = 0;
  *v37 = &off_1E42DE960;
  v38 = *(_OWORD *)&a3->colorFormatsCount;
  v532 = *(_OWORD *)a3->colorFormats;
  v533 = v38;
  v39 = ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v37 + 3), &v530, (uint64_t)v527, &v532);
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = v39;
  *((_QWORD *)this + 23) = v37;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v531;
  if (v531)
  {
    v44 = (unint64_t *)&v531->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(_QWORD *)(v8 + 80);
  v47 = *(_QWORD *)(v46 + 1688);
  v48 = *(_QWORD *)(v46 + 1696);
  *(_QWORD *)&v532 = v47;
  *((_QWORD *)&v532 + 1) = v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = (char *)operator new(0x198uLL);
  *((_QWORD *)v51 + 1) = 0;
  *((_QWORD *)v51 + 2) = 0;
  *(_QWORD *)v51 = &off_1E42E3A18;
  v52 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v527 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v527[16] = v52;
  v515 = v8;
  if ((v53 & 1) == 0)
  {
    if ((_DWORD)v495)
    {
      if ((v496 & 1) == 0)
      {
        if ((_DWORD)v495)
        {
          if ((v509 & 1) == 0
          {
            if ((v513 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonShadowedStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D20 = 1;
          }
          ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57F0F8 = &ggl::PolygonShadowedStroke::pipelineDataShadowPathPipelineDeviceStructs(void)::ref;
          qword_1EE57F100 = 0;
          if ((v510 & 1) == 0
          {
            ggl::PolygonShadowedStroke::pipelineDataShadowPathPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57F130 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57F138 = (uint64_t)ggl::PolygonShadowedStroke::ShadowPath::reflection(void)::reflection;
          }
          qword_1EE57F108 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineDataShadowPathPipelineConstantStructs(void)::ref;
          unk_1EE57F110 = xmmword_19FFB3410;
        }
      }
      ggl::PolygonShadowedStroke::ShadowPathPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonShadowedStrokeShader::typedReflection(v495);
      qword_1ECE2F9D0 = (uint64_t)&ggl::PolygonShadowedStrokeShader::typedReflection(void)::ref;
      if ((v497 & 1) == 0
      {
        ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57F1E0 = 0;
        qword_1EE57F1E8 = (uint64_t)"";
        dword_1EE57F1F0 = 0;
        qword_1EE57F1F8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineAttributeBinding_0(void)::attr;
        unk_1EE57F200 = 2;
      }
      qword_1ECE2F9D8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F9E0 = 1;
      qword_1ECE2F9E8 = 0;
      unk_1ECE2F9F0 = 0;
      qword_1ECE2F9F8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FA00 = 0;
      if ((v498 & 1) == 0
      {
        ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57F150 = 0;
        qword_1EE57F158 = (uint64_t)"view";
        dword_1EE57F160 = 3;
        qword_1EE57F168 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57F170 = xmmword_19FFB35A0;
        qword_1EE57F180 = 1;
        unk_1EE57F188 = "transform";
        dword_1EE57F190 = 3;
        qword_1EE57F198 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57F1A0 = xmmword_19FFB3660;
        qword_1EE57F1B0 = 2;
        unk_1EE57F1B8 = "shadowPath";
        dword_1EE57F1C0 = 3;
        qword_1EE57F1C8 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantShadowPathBinding(void)::reflection;
        unk_1EE57F1D0 = 4;
      }
      qword_1ECE2FA08 = (uint64_t)&ggl::PolygonShadowedStroke::pipelineStateShadowPathPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE2FA10 = 3;
    }
  }
  v54 = v532;
  if (*((_QWORD *)&v532 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v532 + 1) + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    *((_DWORD *)v51 + 14) = 0;
    *((_QWORD *)v51 + 5) = 0;
    *((_QWORD *)v51 + 6) = 0;
    *((_QWORD *)v51 + 3) = &off_1E42B6760;
    *((_QWORD *)v51 + 4) = 0;
    *((_QWORD *)v51 + 8) = &ggl::PolygonShadowedStroke::ShadowPathPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v51 + 72) = v54;
    do
      v57 = __ldxr(v55);
    while (__stxr(v57 + 1, v55));
  }
  else
  {
    *((_DWORD *)v51 + 14) = 0;
    *((_QWORD *)v51 + 5) = 0;
    *((_QWORD *)v51 + 6) = 0;
    *((_QWORD *)v51 + 3) = &off_1E42B6760;
    *((_QWORD *)v51 + 4) = 0;
    *((_QWORD *)v51 + 8) = &ggl::PolygonShadowedStroke::ShadowPathPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v51 + 72) = v54;
  }
  v51[136] = 0;
  *(_OWORD *)(v51 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v51 + 156) = 0;
  *(_QWORD *)(v51 + 172) = 0;
  *(_QWORD *)(v51 + 164) = 0;
  v51[184] = 0;
  *(_OWORD *)(v51 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v51 + 204) = 0;
  *(_QWORD *)(v51 + 220) = 0;
  *(_QWORD *)(v51 + 212) = 0;
  v51[232] = 0;
  *(_OWORD *)(v51 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v51 + 252) = 0;
  *(_QWORD *)(v51 + 268) = 0;
  *(_QWORD *)(v51 + 260) = 0;
  v58 = *(_OWORD *)&v527[16];
  *(_OWORD *)(v51 + 280) = *(_OWORD *)v527;
  *(_OWORD *)(v51 + 296) = v58;
  v51[312] = 0;
  *((_QWORD *)v51 + 48) = 0;
  *((_OWORD *)v51 + 22) = 0u;
  *((_OWORD *)v51 + 23) = 0u;
  *((_OWORD *)v51 + 20) = 0u;
  *((_OWORD *)v51 + 21) = 0u;
  *((_QWORD *)v51 + 49) = 0x100000001;
  v51[400] = 0;
  v51[88] = 1;
  *(_WORD *)(v51 + 89) = v530;
  v51[91] = BYTE2(v530);
  *(_OWORD *)(v51 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v51 + 27) = 7;
  *((_QWORD *)v51 + 14) = 0;
  *((_QWORD *)v51 + 15) = 0;
  *((_DWORD *)v51 + 32) = 0;
  v51[132] = 15;
  if (*((_QWORD *)&v54 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
    }
  }
  v51[328] = a4;
  v51[329] = 0;
  v61 = vceqzq_s8(*(int8x16_t *)(v51 + 328));
  v62 = vmovl_high_s8(v61);
  v63 = vmovl_s16(*(int16x4_t *)v62.i8);
  v64.i64[0] = v63.u32[0];
  v64.i64[1] = v63.u32[1];
  v65 = v64;
  v66 = vmovl_s8(*(int8x8_t *)v61.i8);
  v67 = vmovl_s16(*(int16x4_t *)v66.i8);
  v64.i64[0] = v67.u32[0];
  v64.i64[1] = v67.u32[1];
  v68 = v64;
  v69 = vmovl_high_s16(v62);
  v64.i64[0] = v69.u32[0];
  v64.i64[1] = v69.u32[1];
  v70 = v64;
  v71 = vmovl_high_s16(v66);
  v64.i64[0] = v71.u32[0];
  v64.i64[1] = v71.u32[1];
  v72 = v64;
  v64.i64[0] = v63.u32[2];
  v64.i64[1] = v63.u32[3];
  v73 = v64;
  v64.i64[0] = v67.u32[2];
  v64.i64[1] = v67.u32[3];
  v74 = v64;
  v64.i64[0] = v69.u32[2];
  v64.i64[1] = v69.u32[3];
  v75 = v64;
  v64.i64[0] = v71.u32[2];
  v64.i64[1] = v71.u32[3];
  v76 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v64);
  v77 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v75);
  v78 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v74);
  v79 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v70);
  v80 = vceqzq_s8(*(int8x16_t *)(v51 + 344));
  v81 = vmovl_high_s8(v80);
  v82 = vmovl_s16(*(int16x4_t *)v81.i8);
  v64.i64[0] = v82.u32[0];
  v64.i64[1] = v82.u32[1];
  v83 = v64;
  v84 = vmovl_s8(*(int8x8_t *)v80.i8);
  v85 = vmovl_s16(*(int16x4_t *)v84.i8);
  v64.i64[0] = v85.u32[0];
  v64.i64[1] = v85.u32[1];
  v86 = v64;
  v87 = vmovl_high_s16(v81);
  v64.i64[0] = v87.u32[0];
  v64.i64[1] = v87.u32[1];
  v88 = v64;
  v89 = vmovl_high_s16(v84);
  v64.i64[0] = v89.u32[0];
  v64.i64[1] = v89.u32[1];
  v90 = v64;
  v64.i64[0] = v82.u32[2];
  v64.i64[1] = v82.u32[3];
  v91 = v64;
  v64.i64[0] = v85.u32[2];
  v64.i64[1] = v85.u32[3];
  v92 = v64;
  v64.i64[0] = v87.u32[2];
  v64.i64[1] = v87.u32[3];
  v93 = v64;
  v64.i64[0] = v89.u32[2];
  v64.i64[1] = v89.u32[3];
  v94 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v93);
  v95 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v83), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v65));
  v96 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v86), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v68));
  v97 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v88), v79);
  v98 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v90), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v72));
  v99 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v91), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v73));
  v100 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v92), v78);
  v101 = vorrq_s8(v94, v77);
  v102 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v64), v76);
  v103 = vceqzq_s8(*(int8x16_t *)(v51 + 360));
  v104 = vmovl_high_s8(v103);
  v105 = vmovl_s16(*(int16x4_t *)v104.i8);
  v64.i64[0] = v105.i32[0];
  v64.i64[1] = v105.i32[1];
  v106 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v64);
  v107 = vceqzq_s8(*(int8x16_t *)(v51 + 376));
  v108 = vmovl_high_s8(v107);
  v109 = vmovl_s16(*(int16x4_t *)v108.i8);
  v64.i64[0] = v109.i32[0];
  v64.i64[1] = v109.i32[1];
  v110 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v64), v106), v95);
  v111 = vmovl_s8(*(int8x8_t *)v103.i8);
  v112 = vmovl_s16(*(int16x4_t *)v111.i8);
  v64.i64[0] = v112.i32[0];
  v64.i64[1] = v112.i32[1];
  v113 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v64);
  v114 = vmovl_s8(*(int8x8_t *)v107.i8);
  v115 = vmovl_s16(*(int16x4_t *)v114.i8);
  v64.i64[0] = v115.i32[0];
  v64.i64[1] = v115.i32[1];
  v116 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v64), v113), v96);
  v117 = vmovl_high_s16(v104);
  v64.i64[0] = v117.i32[0];
  v64.i64[1] = v117.i32[1];
  v118 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v64);
  v119 = vmovl_high_s16(v108);
  v64.i64[0] = v119.i32[0];
  v64.i64[1] = v119.i32[1];
  v120 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v64), v118), v97);
  v121 = vmovl_high_s16(v111);
  v64.i64[0] = v121.i32[0];
  v64.i64[1] = v121.i32[1];
  v122 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v64);
  v123 = vmovl_high_s16(v114);
  v64.i64[0] = v123.i32[0];
  v64.i64[1] = v123.i32[1];
  v124 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v64), v122), v98);
  v64.i64[0] = v105.i32[2];
  v64.i64[1] = v105.i32[3];
  v125 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v64);
  v64.i64[0] = v109.i32[2];
  v64.i64[1] = v109.i32[3];
  v126 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v64), v125), v99);
  v64.i64[0] = v112.i32[2];
  v64.i64[1] = v112.i32[3];
  v127 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v64);
  v64.i64[0] = v115.i32[2];
  v64.i64[1] = v115.i32[3];
  v128 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v64), v127), v100);
  v64.i64[0] = v117.i32[2];
  v64.i64[1] = v117.i32[3];
  v129 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v64);
  v64.i64[0] = v119.i32[2];
  v64.i64[1] = v119.i32[3];
  v130 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v64), v129), v101);
  v64.i64[0] = v121.i32[2];
  v64.i64[1] = v121.i32[3];
  v131 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64);
  v64.i64[0] = v123.i32[2];
  v64.i64[1] = v123.i32[3];
  *((_QWORD *)v51 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v116, v110), vorrq_s8(v124, v120)), (int64x2_t)vorrq_s8(vorrq_s8(v128, v126), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v64), v131), v102), v130))));
  *((_QWORD *)v51 + 3) = &off_1E42BADC0;
  v51[312] = 1;
  v132 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 24) = v51 + 24;
  *((_QWORD *)this + 25) = v51;
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v532 + 1);
  if (*((_QWORD *)&v532 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v532 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (unint64_t *)operator new();
  v556[0] = &off_1E42D1E58;
  v556[1] = this;
  v557 = v556;
  v554[0] = &off_1E42D6158;
  v555 = v554;
  ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::FragmentedPool(v138, (uint64_t)v556, (uint64_t)v554);
  v139 = *v520;
  *v520 = (uint64_t)v138;
  if (v139)
  {
    v140 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v139);
    MEMORY[0x1A1AF4E00](v140, 0x10A0C40D234DDC7);
  }
  v141 = v555;
  if (v555 == v554)
  {
    v142 = 4;
    v141 = v554;
  }
  else
  {
    if (!v555)
      goto LABEL_73;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_73:
  v143 = v557;
  if (v557 == v556)
  {
    v144 = 4;
    v143 = v556;
    goto LABEL_77;
  }
  if (v557)
  {
    v144 = 5;
LABEL_77:
    (*(void (**)(void))(*v143 + 8 * v144))();
  }
  v145 = (uint64_t *)operator new();
  v552[0] = &off_1E42D1EA0;
  v552[1] = this;
  v553 = v552;
  v550[0] = &off_1E42D6E90;
  v551 = v550;
  v145[1] = 0;
  v145[2] = 0;
  *v145 = 0;
  v146 = &unk_1ECE44000;
  {
    v499 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v499, "GeoGL", 0xA3D02C1100000005);
  }
  v148 = ggl::Allocator::instance(void)::alloc;
  v145[4] = 0;
  v145[3] = v148;
  v145[5] = 0;
  v145[6] = 0;
  {
    v500 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v500, "GeoGL", 0xA3D02C1100000005);
  }
  v145[7] = ggl::Allocator::instance(void)::alloc;
  v149 = (uint64_t)v553;
  if (!v553)
    goto LABEL_83;
  if (v553 != v552)
  {
    v149 = (*(uint64_t (**)(void))(*v553 + 16))();
LABEL_83:
    v145[11] = v149;
    goto LABEL_85;
  }
  v145[11] = (uint64_t)(v145 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v552[0] + 24))(v552, v145 + 8);
LABEL_85:
  v150 = (uint64_t)v551;
  if (!v551)
  {
LABEL_88:
    v145[15] = v150;
    goto LABEL_90;
  }
  if (v551 != v550)
  {
    v150 = (*(uint64_t (**)(void))(*v551 + 16))();
    goto LABEL_88;
  }
  v145[15] = (uint64_t)(v145 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v550[0] + 24))(v550, v145 + 12);
LABEL_90:
  v145[16] = 2000;
  v151 = *v145;
  if ((unint64_t)(v145[2] - *v145) > 0x31F)
    goto LABEL_103;
  v152 = v145[1];
  v153 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145[3] + 16))(v145[3], 800, 8);
  v154 = v152 - v151;
  v155 = v153 + ((v152 - v151) & 0xFFFFFFFFFFFFFFF8);
  v157 = *v145;
  v156 = v145[1];
  v158 = v156 - *v145;
  if (v156 == *v145)
  {
    v160 = v153 + ((v152 - v151) & 0xFFFFFFFFFFFFFFF8);
    v146 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_101;
  }
  v159 = v158 - 8;
  v146 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v158 - 8) >= 0x58)
  {
    v160 = v155;
    if (v156 - ((v154 & 0xFFFFFFFFFFFFFFF8) + v153) >= 0x20)
    {
      v161 = v154 >> 3;
      v162 = (v159 >> 3) + 1;
      v163 = (_OWORD *)(v153 + 8 * v161 - 16);
      v164 = (__int128 *)(v156 - 16);
      v165 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v164;
        *(v163 - 1) = *(v164 - 1);
        *v163 = v166;
        v163 -= 2;
        v164 -= 2;
        v165 -= 4;
      }
      while (v165);
      v160 = v155 - 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      v156 -= 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_100;
    }
  }
  else
  {
    v160 = v155;
  }
  do
  {
    v167 = *(_QWORD *)(v156 - 8);
    v156 -= 8;
    *(_QWORD *)(v160 - 8) = v167;
    v160 -= 8;
  }
  while (v156 != v157);
LABEL_100:
  v156 = *v145;
LABEL_101:
  *v145 = v160;
  v145[1] = v155;
  v168 = v145[2];
  v145[2] = v153 + 800;
  if (v156)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145[3] + 40))(v145[3], v156, v168 - v156);
LABEL_103:
  v169 = v145[4];
  if ((unint64_t)(v145[6] - v169) > 0x31F)
    goto LABEL_116;
  v170 = v145[5];
  v171 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145[7] + 16))(v145[7], 800, 8);
  v172 = v170 - v169;
  v173 = v171 + ((v170 - v169) & 0xFFFFFFFFFFFFFFF8);
  v175 = v145[4];
  v174 = v145[5];
  v176 = v174 - v175;
  if (v174 == v175)
  {
    v178 = v171 + ((v170 - v169) & 0xFFFFFFFFFFFFFFF8);
    v146 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_114;
  }
  v177 = v176 - 8;
  v146 = &unk_1ECE44000;
  if ((unint64_t)(v176 - 8) >= 0x58)
  {
    v178 = v173;
    if (v174 - (v172 & 0xFFFFFFFFFFFFFFF8) - v171 >= 0x20)
    {
      v179 = v172 >> 3;
      v180 = (v177 >> 3) + 1;
      v181 = (_OWORD *)(v171 + 8 * v179 - 16);
      v182 = (__int128 *)(v174 - 16);
      v183 = v180 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v184 = *v182;
        *(v181 - 1) = *(v182 - 1);
        *v181 = v184;
        v181 -= 2;
        v182 -= 2;
        v183 -= 4;
      }
      while (v183);
      v178 = v173 - 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
      v174 -= 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
      if (v180 == (v180 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_113;
    }
  }
  else
  {
    v178 = v173;
  }
  do
  {
    v185 = *(_QWORD *)(v174 - 8);
    v174 -= 8;
    *(_QWORD *)(v178 - 8) = v185;
    v178 -= 8;
  }
  while (v174 != v175);
LABEL_113:
  v174 = v145[4];
LABEL_114:
  v145[4] = v178;
  v145[5] = v173;
  v186 = v145[6];
  v145[6] = v171 + 800;
  if (v174)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145[7] + 40))(v145[7], v174, v186 - v174);
LABEL_116:
  v187 = *v519;
  *v519 = (uint64_t)v145;
  if (v187)
  {
    v188 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v187);
    MEMORY[0x1A1AF4E00](v188, 0x10A0C40D234DDC7);
  }
  v189 = v551;
  if (v551 == v550)
  {
    v190 = 4;
    v189 = v550;
  }
  else
  {
    if (!v551)
      goto LABEL_123;
    v190 = 5;
  }
  (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_123:
  v191 = v553;
  if (v553 == v552)
  {
    v192 = 4;
    v191 = v552;
    goto LABEL_127;
  }
  if (v553)
  {
    v192 = 5;
LABEL_127:
    (*(void (**)(void))(*v191 + 8 * v192))();
  }
  v193 = (uint64_t *)operator new();
  v548[0] = &off_1E42D1EE8;
  v548[1] = this;
  v549 = v548;
  v546[0] = &off_1E42D7CE8;
  v547 = v546;
  v193[1] = 0;
  v193[2] = 0;
  *v193 = 0;
  {
    v501 = operator new();
    v146[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v501, "GeoGL", 0xA3D02C1100000005);
  }
  v195 = v146[495];
  v193[4] = 0;
  v193[3] = v195;
  v193[5] = 0;
  v193[6] = 0;
  {
    v502 = operator new();
    v146[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v502, "GeoGL", 0xA3D02C1100000005);
  }
  v193[7] = v146[495];
  v196 = (uint64_t)v549;
  if (!v549)
    goto LABEL_133;
  if (v549 != v548)
  {
    v196 = (*(uint64_t (**)(void))(*v549 + 16))();
LABEL_133:
    v193[11] = v196;
    goto LABEL_135;
  }
  v193[11] = (uint64_t)(v193 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v548[0] + 24))(v548, v193 + 8);
LABEL_135:
  v197 = (uint64_t)v547;
  if (!v547)
  {
LABEL_138:
    v193[15] = v197;
    goto LABEL_140;
  }
  if (v547 != v546)
  {
    v197 = (*(uint64_t (**)(void))(*v547 + 16))();
    goto LABEL_138;
  }
  v193[15] = (uint64_t)(v193 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v546[0] + 24))(v546, v193 + 12);
LABEL_140:
  v193[16] = 2000;
  v198 = *v193;
  if ((unint64_t)(v193[2] - *v193) > 0x31F)
    goto LABEL_153;
  v199 = v193[1];
  v200 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v193[3] + 16))(v193[3], 800, 8);
  v201 = v199 - v198;
  v202 = v200 + ((v199 - v198) & 0xFFFFFFFFFFFFFFF8);
  v204 = *v193;
  v203 = v193[1];
  v205 = v203 - *v193;
  if (v203 == *v193)
  {
    v207 = v200 + ((v199 - v198) & 0xFFFFFFFFFFFFFFF8);
    v146 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_151;
  }
  v206 = v205 - 8;
  v146 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v205 - 8) >= 0x58)
  {
    v207 = v202;
    if (v203 - (v201 & 0xFFFFFFFFFFFFFFF8) - v200 >= 0x20)
    {
      v208 = v201 >> 3;
      v209 = (v206 >> 3) + 1;
      v210 = (_OWORD *)(v200 + 8 * v208 - 16);
      v211 = (__int128 *)(v203 - 16);
      v212 = v209 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v213 = *v211;
        *(v210 - 1) = *(v211 - 1);
        *v210 = v213;
        v210 -= 2;
        v211 -= 2;
        v212 -= 4;
      }
      while (v212);
      v207 = v202 - 8 * (v209 & 0x3FFFFFFFFFFFFFFCLL);
      v203 -= 8 * (v209 & 0x3FFFFFFFFFFFFFFCLL);
      if (v209 == (v209 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_150;
    }
  }
  else
  {
    v207 = v202;
  }
  do
  {
    v214 = *(_QWORD *)(v203 - 8);
    v203 -= 8;
    *(_QWORD *)(v207 - 8) = v214;
    v207 -= 8;
  }
  while (v203 != v204);
LABEL_150:
  v203 = *v193;
LABEL_151:
  *v193 = v207;
  v193[1] = v202;
  v215 = v193[2];
  v193[2] = v200 + 800;
  if (v203)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v193[3] + 40))(v193[3], v203, v215 - v203);
LABEL_153:
  v216 = v193[4];
  if ((unint64_t)(v193[6] - v216) > 0x31F)
    goto LABEL_166;
  v217 = v193[5];
  v218 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v193[7] + 16))(v193[7], 800, 8);
  v219 = v217 - v216;
  v220 = v218 + ((v217 - v216) & 0xFFFFFFFFFFFFFFF8);
  v222 = v193[4];
  v221 = v193[5];
  v223 = v221 - v222;
  if (v221 == v222)
  {
    v225 = v218 + ((v217 - v216) & 0xFFFFFFFFFFFFFFF8);
    v146 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_164;
  }
  v224 = v223 - 8;
  v146 = &unk_1ECE44000;
  if ((unint64_t)(v223 - 8) >= 0x58)
  {
    v225 = v220;
    if (v221 - (v219 & 0xFFFFFFFFFFFFFFF8) - v218 >= 0x20)
    {
      v226 = v219 >> 3;
      v227 = (v224 >> 3) + 1;
      v228 = (_OWORD *)(v218 + 8 * v226 - 16);
      v229 = (__int128 *)(v221 - 16);
      v230 = v227 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v231 = *v229;
        *(v228 - 1) = *(v229 - 1);
        *v228 = v231;
        v228 -= 2;
        v229 -= 2;
        v230 -= 4;
      }
      while (v230);
      v225 = v220 - 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
      v221 -= 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
      if (v227 == (v227 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_163;
    }
  }
  else
  {
    v225 = v220;
  }
  do
  {
    v232 = *(_QWORD *)(v221 - 8);
    v221 -= 8;
    *(_QWORD *)(v225 - 8) = v232;
    v225 -= 8;
  }
  while (v221 != v222);
LABEL_163:
  v221 = v193[4];
LABEL_164:
  v193[4] = v225;
  v193[5] = v220;
  v233 = v193[6];
  v193[6] = v218 + 800;
  if (v221)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v193[7] + 40))(v193[7], v221, v233 - v221);
LABEL_166:
  v234 = *(_QWORD *)this;
  *(_QWORD *)this = v193;
  if (v234)
  {
    v235 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v234);
    MEMORY[0x1A1AF4E00](v235, 0x10A0C40D234DDC7);
  }
  v236 = v547;
  if (v547 == v546)
  {
    v237 = 4;
    v236 = v546;
  }
  else
  {
    if (!v547)
      goto LABEL_173;
    v237 = 5;
  }
  (*(void (**)(void))(*v236 + 8 * v237))();
LABEL_173:
  v238 = v549;
  if (v549 == v548)
  {
    v239 = 4;
    v238 = v548;
    goto LABEL_177;
  }
  if (v549)
  {
    v239 = 5;
LABEL_177:
    (*(void (**)(void))(*v238 + 8 * v239))();
  }
  v240 = (uint64_t *)operator new();
  v544[0] = &off_1E42D1F30;
  v544[1] = this;
  v545 = v544;
  v542[0] = &off_1E42D73E8;
  v543 = v542;
  v240[1] = 0;
  v240[2] = 0;
  *v240 = 0;
  {
    v503 = operator new();
    v146[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v503, "GeoGL", 0xA3D02C1100000005);
  }
  v242 = v146[495];
  v240[4] = 0;
  v240[3] = v242;
  v240[5] = 0;
  v240[6] = 0;
  {
    v504 = operator new();
    v146[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v504, "GeoGL", 0xA3D02C1100000005);
  }
  v240[7] = v146[495];
  v243 = (uint64_t)v545;
  if (!v545)
    goto LABEL_183;
  if (v545 != v544)
  {
    v243 = (*(uint64_t (**)(void))(*v545 + 16))();
LABEL_183:
    v240[11] = v243;
    goto LABEL_185;
  }
  v240[11] = (uint64_t)(v240 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v544[0] + 24))(v544, v240 + 8);
LABEL_185:
  v244 = (uint64_t)v543;
  if (!v543)
  {
LABEL_188:
    v240[15] = v244;
    goto LABEL_190;
  }
  if (v543 != v542)
  {
    v244 = (*(uint64_t (**)(void))(*v543 + 16))();
    goto LABEL_188;
  }
  v240[15] = (uint64_t)(v240 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v542[0] + 24))(v542, v240 + 12);
LABEL_190:
  v240[16] = 2000;
  v245 = *v240;
  if ((unint64_t)(v240[2] - *v240) > 0x31F)
    goto LABEL_203;
  v246 = v240[1];
  v247 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v240[3] + 16))(v240[3], 800, 8);
  v248 = v246 - v245;
  v249 = v247 + ((v246 - v245) & 0xFFFFFFFFFFFFFFF8);
  v251 = *v240;
  v250 = v240[1];
  v252 = v250 - *v240;
  if (v250 == *v240)
  {
    v254 = v247 + ((v246 - v245) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_201;
  }
  v253 = v252 - 8;
  if ((unint64_t)(v252 - 8) >= 0x58)
  {
    v254 = v247 + ((v246 - v245) & 0xFFFFFFFFFFFFFFF8);
    if (v250 - (v248 & 0xFFFFFFFFFFFFFFF8) - v247 >= 0x20)
    {
      v255 = v248 >> 3;
      v256 = (v253 >> 3) + 1;
      v257 = (_OWORD *)(v247 + 8 * v255 - 16);
      v258 = (__int128 *)(v250 - 16);
      v259 = v256 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v260 = *v258;
        *(v257 - 1) = *(v258 - 1);
        *v257 = v260;
        v257 -= 2;
        v258 -= 2;
        v259 -= 4;
      }
      while (v259);
      v254 = v249 - 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
      v250 -= 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
      if (v256 == (v256 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_200;
    }
  }
  else
  {
    v254 = v247 + ((v246 - v245) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v261 = *(_QWORD *)(v250 - 8);
    v250 -= 8;
    *(_QWORD *)(v254 - 8) = v261;
    v254 -= 8;
  }
  while (v250 != v251);
LABEL_200:
  v250 = *v240;
LABEL_201:
  *v240 = v254;
  v240[1] = v249;
  v262 = v240[2];
  v240[2] = v247 + 800;
  if (v250)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v240[3] + 40))(v240[3], v250, v262 - v250);
LABEL_203:
  v263 = v240[4];
  if ((unint64_t)(v240[6] - v263) > 0x31F)
    goto LABEL_216;
  v264 = v240[5];
  v265 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v240[7] + 16))(v240[7], 800, 8);
  v266 = v264 - v263;
  v267 = v265 + ((v264 - v263) & 0xFFFFFFFFFFFFFFF8);
  v269 = v240[4];
  v268 = v240[5];
  v270 = v268 - v269;
  if (v268 == v269)
  {
    v272 = v265 + ((v264 - v263) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_214;
  }
  v271 = v270 - 8;
  if ((unint64_t)(v270 - 8) >= 0x58)
  {
    v272 = v265 + ((v264 - v263) & 0xFFFFFFFFFFFFFFF8);
    if (v268 - (v266 & 0xFFFFFFFFFFFFFFF8) - v265 >= 0x20)
    {
      v273 = v266 >> 3;
      v274 = (v271 >> 3) + 1;
      v275 = (_OWORD *)(v265 + 8 * v273 - 16);
      v276 = (__int128 *)(v268 - 16);
      v277 = v274 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v278 = *v276;
        *(v275 - 1) = *(v276 - 1);
        *v275 = v278;
        v275 -= 2;
        v276 -= 2;
        v277 -= 4;
      }
      while (v277);
      v272 = v267 - 8 * (v274 & 0x3FFFFFFFFFFFFFFCLL);
      v268 -= 8 * (v274 & 0x3FFFFFFFFFFFFFFCLL);
      if (v274 == (v274 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_213;
    }
  }
  else
  {
    v272 = v265 + ((v264 - v263) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v279 = *(_QWORD *)(v268 - 8);
    v268 -= 8;
    *(_QWORD *)(v272 - 8) = v279;
    v272 -= 8;
  }
  while (v268 != v269);
LABEL_213:
  v268 = v240[4];
LABEL_214:
  v240[4] = v272;
  v240[5] = v267;
  v280 = v240[6];
  v240[6] = v265 + 800;
  if (v268)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v240[7] + 40))(v240[7], v268, v280 - v268);
LABEL_216:
  v281 = *v518;
  *v518 = (uint64_t)v240;
  if (v281)
  {
    v282 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v281);
    MEMORY[0x1A1AF4E00](v282, 0x10A0C40D234DDC7);
  }
  v283 = v543;
  if (v543 == v542)
  {
    v284 = 4;
    v283 = v542;
  }
  else
  {
    if (!v543)
      goto LABEL_223;
    v284 = 5;
  }
  (*(void (**)(void))(*v283 + 8 * v284))();
LABEL_223:
  v285 = v545;
  if (v545 == v544)
  {
    v286 = 4;
    v285 = v544;
  }
  else
  {
    if (!v545)
      goto LABEL_228;
    v286 = 5;
  }
  (*(void (**)(void))(*v285 + 8 * v286))();
LABEL_228:
  if (*(_BYTE *)(-[VKSharedResources gglDevice](v521, "gglDevice") + 20))
  {
    v287 = *(_QWORD *)(v515 + 80);
    v288 = *(_QWORD *)(v287 + 920);
    v289 = *(std::__shared_weak_count **)(v287 + 928);
    v530 = v288;
    v531 = v289;
    if (v289)
    {
      v290 = (unint64_t *)&v289->__shared_owners_;
      do
        v291 = __ldxr(v290);
      while (__stxr(v291 + 1, v290));
    }
    *(_QWORD *)&v527[28] = 0;
    *(_QWORD *)&v527[20] = 0;
    v528 = 0;
    v527[0] = 0;
    *(_OWORD *)&v527[4] = xmmword_19FFB3060;
    v529 = 15;
    v292 = operator new(0x198uLL);
    v292[1] = 0;
    v292[2] = 0;
    *v292 = &off_1E42E5180;
    v293 = *(_OWORD *)&a3->colorFormatsCount;
    v532 = *(_OWORD *)a3->colorFormats;
    v533 = v293;
    v294 = ggl::GlowAlpha::MeshPipelineState::MeshPipelineState((uint64_t)(v292 + 3), &v530, (uint64_t)v527, &v532, 1);
    v295 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 16) = v294;
    *((_QWORD *)this + 17) = v292;
    if (v295)
    {
      v296 = (unint64_t *)&v295->__shared_owners_;
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
    }
    v298 = v531;
    if (v531)
    {
      v299 = (unint64_t *)&v531->__shared_owners_;
      do
        v300 = __ldaxr(v299);
      while (__stlxr(v300 - 1, v299));
      goto LABEL_252;
    }
  }
  else
  {
    v301 = *(_QWORD *)(v515 + 80);
    v302 = *(_QWORD *)(v301 + 920);
    v303 = *(std::__shared_weak_count **)(v301 + 928);
    v530 = v302;
    v531 = v303;
    if (v303)
    {
      v304 = (unint64_t *)&v303->__shared_owners_;
      do
        v305 = __ldxr(v304);
      while (__stxr(v305 + 1, v304));
    }
    v528 = 0;
    *(_QWORD *)&v527[28] = 0;
    v527[0] = 1;
    *(_OWORD *)&v527[4] = xmmword_19FFB4DF0;
    *(_QWORD *)&v527[20] = 0x300000008;
    v529 = 15;
    v306 = operator new(0x198uLL);
    v306[1] = 0;
    v306[2] = 0;
    *v306 = &off_1E42E5180;
    v307 = *(_OWORD *)&a3->colorFormatsCount;
    v532 = *(_OWORD *)a3->colorFormats;
    v533 = v307;
    v308 = ggl::GlowAlpha::MeshPipelineState::MeshPipelineState((uint64_t)(v306 + 3), &v530, (uint64_t)v527, &v532, 0);
    v309 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 16) = v308;
    *((_QWORD *)this + 17) = v306;
    if (v309)
    {
      v310 = (unint64_t *)&v309->__shared_owners_;
      do
        v311 = __ldaxr(v310);
      while (__stlxr(v311 - 1, v310));
      if (!v311)
      {
        ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
        std::__shared_weak_count::__release_weak(v309);
      }
    }
    v298 = v531;
    if (v531)
    {
      v312 = (unint64_t *)&v531->__shared_owners_;
      do
        v300 = __ldaxr(v312);
      while (__stlxr(v300 - 1, v312));
LABEL_252:
      if (!v300)
      {
        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
        std::__shared_weak_count::__release_weak(v298);
      }
    }
  }
  v313 = (_QWORD *)operator new();
  v314 = v313;
  v315 = *((_QWORD *)this + 20);
  v316 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v316)
  {
    v317 = (unint64_t *)&v316->__shared_owners_;
    do
      v318 = __ldxr(v317);
    while (__stxr(v318 + 1, v317));
    ggl::PipelineSetup::PipelineSetup(v313, v315, (uint64_t)v316);
    v319 = (unint64_t *)&v316->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v313, v315, 0);
  }
  *v314 = &off_1E42B5D48;
  v321 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v314;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = operator new(0xE8uLL);
  v322[1] = 0;
  v323 = v322 + 1;
  v322[2] = 0;
  *v322 = &off_1E42E2278;
  v324 = ggl::BufferData::BufferData((uint64_t)(v322 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
  v322[28] = ggl::Tile::View::reflection(void)::reflection;
  v322[3] = &off_1E42B97B0;
  *(_QWORD *)&v532 = v324;
  *((_QWORD *)&v532 + 1) = v322;
  v325 = *((_QWORD *)this + 15);
  v326 = *(uint64_t **)(v325 + 64);
  *v326 = v324;
  v326[1] = 0;
  v327 = *(uint64_t **)(v325 + 160);
  do
    v328 = __ldxr(v323);
  while (__stxr(v328 + 1, v323));
  v329 = (std::__shared_weak_count *)v327[1];
  *v327 = v324;
  v327[1] = (uint64_t)v322;
  if (v329)
  {
    v330 = (unint64_t *)&v329->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v332->__shared_owners_ = 0;
  v333 = (unint64_t *)&v332->__shared_owners_;
  v332->__shared_weak_owners_ = 0;
  v332->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v334 = ggl::BufferData::BufferData((uint64_t)&v332[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v332[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v332[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v530 = v334;
  v531 = v332;
  v335 = *((_QWORD *)this + 15);
  v336 = *(_QWORD *)(v335 + 64);
  *(_QWORD *)(v336 + 16) = v334;
  *(_QWORD *)(v336 + 24) = 0;
  v337 = *(_QWORD *)(v335 + 160);
  do
    v338 = __ldxr(v333);
  while (__stxr(v338 + 1, v333));
  v339 = *(std::__shared_weak_count **)(v337 + 24);
  *(_QWORD *)(v337 + 16) = v334;
  *(_QWORD *)(v337 + 24) = v332;
  if (v339)
  {
    v340 = (unint64_t *)&v339->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  v342 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v342->__shared_owners_ = 0;
  v343 = (unint64_t *)&v342->__shared_owners_;
  v342->__shared_weak_owners_ = 0;
  v342->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FE0;
  v344 = ggl::BufferData::BufferData((uint64_t)&v342[1], qword_1EE571CC8, 2, 1, 6, 1);
  v342[9].__shared_owners_ = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
  v342[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C90;
  v526 = v342;
  v345 = *((_QWORD *)this + 15);
  v346 = *(_QWORD *)(v345 + 64);
  *(_QWORD *)(v346 + 32) = v344;
  *(_QWORD *)(v346 + 40) = 0;
  v347 = *(_QWORD *)(v345 + 160);
  do
    v348 = __ldxr(v343);
  while (__stxr(v348 + 1, v343));
  v349 = *(std::__shared_weak_count **)(v347 + 40);
  *(_QWORD *)(v347 + 32) = v344;
  *(_QWORD *)(v347 + 40) = v342;
  if (v349)
  {
    v350 = (unint64_t *)&v349->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  **(_QWORD **)(*((_QWORD *)this + 15) + 96) = *((_QWORD *)this + 28);
  v352 = *(_QWORD *)(v515 + 80);
  v353 = *(_QWORD *)(v352 + 896);
  v354 = *(std::__shared_weak_count **)(v352 + 904);
  v524 = v353;
  v525 = v354;
  if (v354)
  {
    v355 = (unint64_t *)&v354->__shared_owners_;
    do
      v356 = __ldxr(v355);
    while (__stxr(v356 + 1, v355));
  }
  v357 = (char *)operator new(0x198uLL);
  *((_QWORD *)v357 + 1) = 0;
  *((_QWORD *)v357 + 2) = 0;
  *(_QWORD *)v357 = &off_1E42E4310;
  v358 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v527 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v527[16] = v358;
  if ((v359 & 1) == 0)
  {
    if ((_DWORD)v505)
    {
      if ((v506 & 1) == 0)
      {
        if ((_DWORD)v505)
        {
          if ((v511 & 1) == 0
          {
            if ((v514 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glow::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glow::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glow::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glow::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D40 = 1;
          }
          ggl::Glow::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glow::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE5808E8 = &ggl::Glow::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE5808F0 = 0;
          if ((v512 & 1) == 0
          {
            ggl::Glow::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE580920 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE580928 = (uint64_t)ggl::Glow::Style::reflection(void)::reflection;
          }
          qword_1EE5808F8 = (uint64_t)&ggl::Glow::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE580900 = xmmword_19FFB3410;
        }
      }
      ggl::Glow::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Glow::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::GlowShader::typedReflection(v505);
      qword_1ECE36050 = (uint64_t)&ggl::GlowShader::typedReflection(void)::ref;
      if ((v507 & 1) == 0
      {
        ggl::Glow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5809D0 = 0;
        qword_1EE5809D8 = (uint64_t)"";
        dword_1EE5809E0 = 0;
        qword_1EE5809E8 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE5809F0 = 2;
      }
      qword_1ECE36058 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE36060 = 1;
      qword_1ECE36068 = 0;
      unk_1ECE36070 = 0;
      qword_1ECE36078 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE36080 = 0;
      if ((v508 & 1) == 0
      {
        ggl::Glow::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580940 = 0;
        qword_1EE580948 = (uint64_t)"view";
        dword_1EE580950 = 3;
        qword_1EE580958 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE580960 = xmmword_19FFB35A0;
        qword_1EE580970 = 1;
        unk_1EE580978 = "transform";
        dword_1EE580980 = 3;
        qword_1EE580988 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE580990 = xmmword_19FFB3660;
        qword_1EE5809A0 = 2;
        unk_1EE5809A8 = "style";
        dword_1EE5809B0 = 3;
        qword_1EE5809B8 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5809C0 = 2;
      }
      qword_1ECE36088 = (uint64_t)&ggl::Glow::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE36090 = 3;
    }
  }
  if (v525)
  {
    v360 = (unint64_t *)&v525->__shared_owners_;
    do
      v361 = __ldxr(v360);
    while (__stxr(v361 + 1, v360));
    *((_DWORD *)v357 + 14) = 0;
    *((_QWORD *)v357 + 5) = 0;
    *((_QWORD *)v357 + 6) = 0;
    *((_QWORD *)v357 + 3) = &off_1E42B6760;
    *((_QWORD *)v357 + 4) = 0;
    *((_QWORD *)v357 + 8) = &ggl::Glow::MeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v357 + 9) = v524;
    *((_QWORD *)v357 + 10) = v525;
    do
      v362 = __ldxr(v360);
    while (__stxr(v362 + 1, v360));
  }
  else
  {
    *((_DWORD *)v357 + 14) = 0;
    *((_QWORD *)v357 + 5) = 0;
    *((_QWORD *)v357 + 6) = 0;
    *((_QWORD *)v357 + 3) = &off_1E42B6760;
    *((_QWORD *)v357 + 4) = 0;
    *((_QWORD *)v357 + 8) = &ggl::Glow::MeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v357 + 9) = v524;
    *((_QWORD *)v357 + 10) = 0;
  }
  v357[136] = 0;
  *(_OWORD *)(v357 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v357 + 156) = 0;
  *(_QWORD *)(v357 + 172) = 0;
  *(_QWORD *)(v357 + 164) = 0;
  v357[184] = 0;
  *(_OWORD *)(v357 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v357 + 204) = 0;
  *(_QWORD *)(v357 + 220) = 0;
  *(_QWORD *)(v357 + 212) = 0;
  v357[232] = 0;
  *(_OWORD *)(v357 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v357 + 252) = 0;
  *(_QWORD *)(v357 + 268) = 0;
  *(_QWORD *)(v357 + 260) = 0;
  v363 = *(_OWORD *)&v527[16];
  *(_OWORD *)(v357 + 280) = *(_OWORD *)v527;
  *(_OWORD *)(v357 + 296) = v363;
  v357[312] = 0;
  *((_QWORD *)v357 + 48) = 0;
  *((_OWORD *)v357 + 22) = 0u;
  *((_OWORD *)v357 + 23) = 0u;
  *((_OWORD *)v357 + 20) = 0u;
  *((_OWORD *)v357 + 21) = 0u;
  *((_QWORD *)v357 + 49) = 0x100000001;
  v357[400] = 0;
  v357[88] = 1;
  *(_WORD *)(v357 + 89) = v522;
  v357[91] = v523;
  *(_OWORD *)(v357 + 92) = xmmword_19FFB5860;
  *(_QWORD *)(v357 + 108) = 12;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v357 + 116) = _Q0;
  v357[132] = 15;
  if (v525)
  {
    v369 = (unint64_t *)&v525->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
      std::__shared_weak_count::__release_weak(v525);
    }
  }
  v357[329] = 0;
  v371 = vceqzq_s8(*(int8x16_t *)(v357 + 328));
  v372 = vmovl_s8(*(int8x8_t *)v371.i8);
  v373 = vmovl_high_s16(v372);
  v374.i64[0] = v373.u32[2];
  v374.i64[1] = v373.u32[3];
  v375 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v374);
  v376 = vmovl_high_s8(v371);
  v377 = vmovl_high_s16(v376);
  v374.i64[0] = v377.u32[2];
  v374.i64[1] = v377.u32[3];
  v378 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v374);
  v379 = vmovl_s16(*(int16x4_t *)v372.i8);
  v374.i64[0] = v379.u32[2];
  v374.i64[1] = v379.u32[3];
  v380 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v374);
  v381 = vmovl_s16(*(int16x4_t *)v376.i8);
  v374.i64[0] = v381.u32[2];
  v374.i64[1] = v381.u32[3];
  v382 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v374);
  v374.i64[0] = v373.u32[0];
  v374.i64[1] = v373.u32[1];
  v383 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v374);
  v374.i64[0] = v377.u32[0];
  v374.i64[1] = v377.u32[1];
  v384 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v374);
  v374.i64[0] = v379.u32[0];
  v374.i64[1] = v379.u32[1];
  v385 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v374);
  v374.i64[0] = v381.u32[0];
  v374.i64[1] = v381.u32[1];
  v386 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v374);
  v387 = vceqzq_s8(*(int8x16_t *)(v357 + 344));
  v388 = vmovl_s8(*(int8x8_t *)v387.i8);
  v389 = vmovl_high_s16(v388);
  v374.i64[0] = v389.u32[2];
  v374.i64[1] = v389.u32[3];
  v390 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v374);
  v391 = vmovl_high_s8(v387);
  v392 = vmovl_high_s16(v391);
  v374.i64[0] = v392.u32[2];
  v374.i64[1] = v392.u32[3];
  v393 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v374);
  v394 = vmovl_s16(*(int16x4_t *)v388.i8);
  v374.i64[0] = v394.u32[2];
  v374.i64[1] = v394.u32[3];
  v395 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v374);
  v396 = vmovl_s16(*(int16x4_t *)v391.i8);
  v374.i64[0] = v396.u32[2];
  v374.i64[1] = v396.u32[3];
  v397 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v374);
  v374.i64[0] = v389.u32[0];
  v374.i64[1] = v389.u32[1];
  v398 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v374);
  v374.i64[0] = v392.u32[0];
  v374.i64[1] = v392.u32[1];
  v399 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v374);
  v374.i64[0] = v394.u32[0];
  v374.i64[1] = v394.u32[1];
  v400 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v374);
  v374.i64[0] = v396.u32[0];
  v374.i64[1] = v396.u32[1];
  v401 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v374), v386);
  v402 = vorrq_s8(v400, v385);
  v403 = vorrq_s8(v399, v384);
  v404 = vorrq_s8(v398, v383);
  v405 = vorrq_s8(v397, v382);
  v406 = vorrq_s8(v395, v380);
  v407 = vorrq_s8(v393, v378);
  v408 = vorrq_s8(v390, v375);
  v409 = vceqzq_s8(*(int8x16_t *)(v357 + 360));
  v410 = vmovl_s8(*(int8x8_t *)v409.i8);
  v411 = vmovl_high_s16(v410);
  v412 = vmovl_high_s8(v409);
  v413 = vmovl_high_s16(v412);
  v414 = vmovl_s16(*(int16x4_t *)v410.i8);
  v415 = vmovl_s16(*(int16x4_t *)v412.i8);
  v374.i64[0] = v415.i32[0];
  v374.i64[1] = v415.i32[1];
  v416 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v374);
  v374.i64[0] = v414.i32[0];
  v374.i64[1] = v414.i32[1];
  v417 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v374);
  v374.i64[0] = v413.i32[0];
  v374.i64[1] = v413.i32[1];
  v418 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v374);
  v374.i64[0] = v411.i32[0];
  v374.i64[1] = v411.i32[1];
  v419 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v374);
  v374.i64[0] = v411.i32[2];
  v374.i64[1] = v411.i32[3];
  v420 = v374;
  v374.i64[0] = v413.i32[2];
  v374.i64[1] = v413.i32[3];
  v421 = v374;
  v374.i64[0] = v414.i32[2];
  v374.i64[1] = v414.i32[3];
  v422 = v374;
  v374.i64[0] = v415.i32[2];
  v374.i64[1] = v415.i32[3];
  v423 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v374);
  v424 = vceqzq_s8(*(int8x16_t *)(v357 + 376));
  v425 = vmovl_high_s8(v424);
  v426 = vmovl_s16(*(int16x4_t *)v425.i8);
  v427 = vmovl_s8(*(int8x8_t *)v424.i8);
  v428 = vmovl_s16(*(int16x4_t *)v427.i8);
  v429 = vmovl_high_s16(v425);
  v430 = vmovl_high_s16(v427);
  v374.i64[0] = v430.i32[2];
  v374.i64[1] = v430.i32[3];
  v431 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v374);
  v374.i64[0] = v429.i32[2];
  v374.i64[1] = v429.i32[3];
  v432 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v374);
  v374.i64[0] = v428.i32[2];
  v374.i64[1] = v428.i32[3];
  v433 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v374);
  v374.i64[0] = v426.i32[2];
  v374.i64[1] = v426.i32[3];
  v434 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v374);
  v374.i64[0] = v430.i32[0];
  v374.i64[1] = v430.i32[1];
  v435 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v374);
  v374.i64[0] = v429.i32[0];
  v374.i64[1] = v429.i32[1];
  v436 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v374);
  v374.i64[0] = v428.i32[0];
  v374.i64[1] = v428.i32[1];
  v437 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v374);
  v374.i64[0] = v426.i32[0];
  v374.i64[1] = v426.i32[1];
  *((_QWORD *)v357 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v437, v417), v402), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v374), v416), v401)), vorrq_s8(vorrq_s8(vorrq_s8(v435, v419), v404), vorrq_s8(vorrq_s8(v436, v418), v403))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v433, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v422)), v406), vorrq_s8(vorrq_s8(v434, v423), v405)), vorrq_s8(vorrq_s8(vorrq_s8(v431, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v420)),
                                                v408),
                                              vorrq_s8(vorrq_s8(v432, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v421)), v407)))));
  *((_QWORD *)v357 + 3) = &off_1E42BB9D8;
  v357[312] = 1;
  v438 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = v357 + 24;
  *((_QWORD *)this + 19) = v357;
  if (v438)
  {
    v439 = (unint64_t *)&v438->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
  if (v525)
  {
    v441 = (unint64_t *)&v525->__shared_owners_;
    do
      v442 = __ldaxr(v441);
    while (__stlxr(v442 - 1, v441));
    if (!v442)
    {
      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
      std::__shared_weak_count::__release_weak(v525);
    }
  }
  v443 = operator new();
  *(_DWORD *)(v443 + 32) = 0;
  *(_QWORD *)(v443 + 16) = 0;
  *(_QWORD *)(v443 + 24) = 0;
  *(_QWORD *)v443 = &off_1E42B5DE8;
  *(_QWORD *)(v443 + 8) = 0;
  *(_QWORD *)(v443 + 36) = 65537;
  *(_DWORD *)(v443 + 44) = 0;
  *(_QWORD *)(v443 + 48) = 0x403F0200000600;
  *(_WORD *)(v443 + 56) = 0;
  *(_BYTE *)(v443 + 58) = 3;
  *(_QWORD *)(v443 + 67) = 0;
  *(_QWORD *)(v443 + 59) = 0;
  *(_BYTE *)(v443 + 75) = 0;
  *(_QWORD *)(v443 + 132) = 0;
  *(_QWORD *)(v443 + 124) = 0;
  *(_WORD *)(v443 + 188) = 257;
  *(_QWORD *)(v443 + 192) = 0;
  *(_QWORD *)(v443 + 200) = 0;
  *(_BYTE *)(v443 + 208) = 0;
  v444 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v443;
  if (v444)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
    v443 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v443 + 208) = 1;
  *(_BYTE *)(v443 + 58) = 3;
  *(_BYTE *)(v443 + 56) = 1;
  v445 = operator new();
  *(_DWORD *)(v445 + 32) = 0;
  *(_QWORD *)(v445 + 16) = 0;
  *(_QWORD *)(v445 + 24) = 0;
  *(_QWORD *)v445 = &off_1E42B5DE8;
  *(_QWORD *)(v445 + 8) = 0;
  *(_QWORD *)(v445 + 36) = 65537;
  *(_DWORD *)(v445 + 44) = 0;
  *(_QWORD *)(v445 + 48) = 0x403F0300000100;
  *(_WORD *)(v445 + 56) = 0;
  *(_BYTE *)(v445 + 58) = 3;
  *(_QWORD *)(v445 + 67) = 0;
  *(_QWORD *)(v445 + 59) = 0;
  *(_BYTE *)(v445 + 75) = 0;
  *(_QWORD *)(v445 + 132) = 0;
  *(_QWORD *)(v445 + 124) = 0;
  *(_WORD *)(v445 + 188) = 257;
  *(_QWORD *)(v445 + 192) = 0;
  *(_QWORD *)(v445 + 200) = 0;
  *(_BYTE *)(v445 + 208) = 0;
  v446 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v445;
  if (v446)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v446 + 8))(v446);
    v445 = *((_QWORD *)this + 5);
  }
  *(_BYTE *)(v445 + 208) = 1;
  *(_BYTE *)(v445 + 58) = 3;
  *(_BYTE *)(v445 + 56) = 1;
  v447 = operator new();
  *(_DWORD *)(v447 + 32) = 0;
  *(_QWORD *)(v447 + 16) = 0;
  *(_QWORD *)(v447 + 24) = 0;
  *(_QWORD *)v447 = &off_1E42B5DE8;
  *(_QWORD *)(v447 + 8) = 0;
  *(_QWORD *)(v447 + 36) = 65537;
  *(_DWORD *)(v447 + 44) = 0;
  *(_QWORD *)(v447 + 48) = 0x40000202020100;
  *(_WORD *)(v447 + 56) = 0;
  *(_BYTE *)(v447 + 58) = 3;
  *(_QWORD *)(v447 + 67) = 0;
  *(_QWORD *)(v447 + 59) = 0;
  *(_BYTE *)(v447 + 75) = 0;
  *(_QWORD *)(v447 + 132) = 0;
  *(_QWORD *)(v447 + 124) = 0;
  *(_WORD *)(v447 + 188) = 257;
  *(_QWORD *)(v447 + 192) = 0;
  *(_QWORD *)(v447 + 200) = 0;
  *(_BYTE *)(v447 + 208) = 0;
  v448 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v447;
  if (v448)
    (*(void (**)(uint64_t))(*(_QWORD *)v448 + 8))(v448);
  v449 = operator new();
  *(_DWORD *)(v449 + 32) = 0;
  *(_QWORD *)(v449 + 16) = 0;
  *(_QWORD *)(v449 + 24) = 0;
  *(_QWORD *)v449 = &off_1E42B5DE8;
  *(_QWORD *)(v449 + 8) = 0;
  *(_QWORD *)(v449 + 36) = 65792;
  *(_DWORD *)(v449 + 44) = 0;
  *(_QWORD *)(v449 + 48) = 0xFF0000000600;
  *(_WORD *)(v449 + 56) = 0;
  *(_BYTE *)(v449 + 58) = 3;
  *(_QWORD *)(v449 + 67) = 0;
  *(_QWORD *)(v449 + 59) = 0;
  *(_BYTE *)(v449 + 75) = 0;
  *(_QWORD *)(v449 + 132) = 0;
  *(_QWORD *)(v449 + 124) = 0;
  *(_WORD *)(v449 + 188) = 257;
  *(_QWORD *)(v449 + 192) = 0;
  *(_QWORD *)(v449 + 200) = 0;
  *(_BYTE *)(v449 + 208) = 0;
  v450 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v449;
  if (v450)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
    v449 = *((_QWORD *)this + 8);
  }
  *(_BYTE *)(v449 + 208) = 1;
  *(_BYTE *)(v449 + 58) = 3;
  *(_BYTE *)(v449 + 56) = 1;
  v451 = operator new();
  *(_DWORD *)(v451 + 32) = 0;
  *(_QWORD *)(v451 + 16) = 0;
  *(_QWORD *)(v451 + 24) = 0;
  *(_QWORD *)v451 = &off_1E42B5DE8;
  *(_QWORD *)(v451 + 8) = 0;
  *(_QWORD *)(v451 + 36) = 65792;
  *(_DWORD *)(v451 + 44) = 0;
  *(_QWORD *)(v451 + 48) = 1;
  *(_WORD *)(v451 + 56) = 0;
  *(_BYTE *)(v451 + 58) = 3;
  *(_QWORD *)(v451 + 67) = 0;
  *(_QWORD *)(v451 + 59) = 0;
  *(_BYTE *)(v451 + 75) = 0;
  *(_QWORD *)(v451 + 132) = 0;
  *(_QWORD *)(v451 + 124) = 0;
  *(_WORD *)(v451 + 188) = 257;
  *(_QWORD *)(v451 + 192) = 0;
  *(_QWORD *)(v451 + 200) = 0;
  *(_BYTE *)(v451 + 208) = 0;
  v452 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v451;
  if (v452)
    (*(void (**)(uint64_t))(*(_QWORD *)v452 + 8))(v452);
  v453 = operator new();
  *(_DWORD *)(v453 + 32) = 0;
  *(_QWORD *)(v453 + 16) = 0;
  *(_QWORD *)(v453 + 24) = 0;
  *(_QWORD *)v453 = &off_1E42B5DE8;
  *(_QWORD *)(v453 + 8) = 0;
  *(_QWORD *)(v453 + 36) = 65792;
  *(_DWORD *)(v453 + 44) = 0;
  *(_QWORD *)(v453 + 48) = 0xFF0000000600;
  *(_WORD *)(v453 + 56) = 0;
  *(_BYTE *)(v453 + 58) = 3;
  *(_QWORD *)(v453 + 67) = 0;
  *(_QWORD *)(v453 + 59) = 0;
  *(_BYTE *)(v453 + 75) = 0;
  *(_QWORD *)(v453 + 132) = 0;
  *(_QWORD *)(v453 + 124) = 0;
  *(_WORD *)(v453 + 188) = 257;
  *(_QWORD *)(v453 + 192) = 0;
  *(_QWORD *)(v453 + 200) = 0;
  *(_BYTE *)(v453 + 208) = 0;
  v454 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v453;
  if (v454)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v454 + 8))(v454);
    v453 = *((_QWORD *)this + 9);
  }
  *(_BYTE *)(v453 + 208) = 1;
  *(_BYTE *)(v453 + 56) = 1;
  v455 = operator new();
  *(_DWORD *)(v455 + 32) = 0;
  *(_QWORD *)(v455 + 16) = 0;
  *(_QWORD *)(v455 + 24) = 0;
  *(_QWORD *)v455 = &off_1E42B5DE8;
  *(_QWORD *)(v455 + 8) = 0;
  *(_QWORD *)(v455 + 36) = 65792;
  *(_DWORD *)(v455 + 44) = 0;
  *(_QWORD *)(v455 + 48) = 0xFF0000000600;
  *(_WORD *)(v455 + 56) = 0;
  *(_BYTE *)(v455 + 58) = 3;
  *(_QWORD *)(v455 + 67) = 0;
  *(_QWORD *)(v455 + 59) = 0;
  *(_BYTE *)(v455 + 75) = 0;
  *(_QWORD *)(v455 + 132) = 0;
  *(_QWORD *)(v455 + 124) = 0;
  *(_WORD *)(v455 + 188) = 257;
  *(_QWORD *)(v455 + 192) = 0;
  *(_QWORD *)(v455 + 200) = 0;
  *(_BYTE *)(v455 + 208) = 0;
  v456 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v455;
  if (v456)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v456 + 8))(v456);
    v455 = *((_QWORD *)this + 11);
  }
  *(_BYTE *)(v455 + 208) = 1;
  v457 = operator new();
  *(_DWORD *)(v457 + 32) = 0;
  *(_QWORD *)(v457 + 16) = 0;
  *(_QWORD *)(v457 + 24) = 0;
  *(_QWORD *)v457 = &off_1E42B5DE8;
  *(_QWORD *)(v457 + 8) = 0;
  *(_QWORD *)(v457 + 36) = 65792;
  *(_DWORD *)(v457 + 44) = 0;
  *(_QWORD *)(v457 + 48) = 0xFF0000000600;
  *(_WORD *)(v457 + 56) = 0;
  *(_BYTE *)(v457 + 58) = 3;
  *(_QWORD *)(v457 + 67) = 0;
  *(_QWORD *)(v457 + 59) = 0;
  *(_BYTE *)(v457 + 75) = 0;
  *(_QWORD *)(v457 + 132) = 0;
  *(_QWORD *)(v457 + 124) = 0;
  *(_WORD *)(v457 + 188) = 257;
  *(_QWORD *)(v457 + 192) = 0;
  *(_QWORD *)(v457 + 200) = 0;
  *(_BYTE *)(v457 + 208) = 0;
  v458 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v457;
  if (v458)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v458 + 8))(v458);
    v457 = *((_QWORD *)this + 10);
  }
  *(_BYTE *)(v457 + 208) = 1;
  *(_BYTE *)(v457 + 56) = 1;
  v459 = operator new();
  *(_DWORD *)(v459 + 32) = 0;
  *(_QWORD *)(v459 + 16) = 0;
  *(_QWORD *)(v459 + 24) = 0;
  *(_QWORD *)v459 = &off_1E42B5DE8;
  *(_QWORD *)(v459 + 8) = 0;
  *(_QWORD *)(v459 + 36) = 65792;
  *(_DWORD *)(v459 + 44) = 0;
  *(_QWORD *)(v459 + 48) = 0xFF0000000600;
  *(_WORD *)(v459 + 56) = 0;
  *(_BYTE *)(v459 + 58) = 3;
  *(_QWORD *)(v459 + 67) = 0;
  *(_QWORD *)(v459 + 59) = 0;
  *(_BYTE *)(v459 + 75) = 0;
  *(_QWORD *)(v459 + 132) = 0;
  *(_QWORD *)(v459 + 124) = 0;
  *(_WORD *)(v459 + 188) = 257;
  *(_QWORD *)(v459 + 192) = 0;
  *(_QWORD *)(v459 + 200) = 0;
  *(_BYTE *)(v459 + 208) = 0;
  v460 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v459;
  if (v460)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v460 + 8))(v460);
    v459 = *((_QWORD *)this + 12);
  }
  *(_BYTE *)(v459 + 208) = 1;
  v461 = (unint64_t *)operator new();
  v541 = v540;
  v538[0] = &off_1E42D60C8;
  v539 = v538;
  v540[0] = &off_1E42D1F78;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v461, (uint64_t)v540, (uint64_t)v538);
  v462 = *v517;
  *v517 = (uint64_t)v461;
  if (v462)
  {
    v463 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v462);
    MEMORY[0x1A1AF4E00](v463, 0x10A0C40D234DDC7);
  }
  v464 = v539;
  if (v539 == v538)
  {
    v465 = 4;
    v464 = v538;
  }
  else
  {
    if (!v539)
      goto LABEL_336;
    v465 = 5;
  }
  (*(void (**)(void))(*v464 + 8 * v465))();
LABEL_336:
  v466 = v541;
  if (v541 == v540)
  {
    v467 = 4;
    v466 = v540;
  }
  else
  {
    if (!v541)
      goto LABEL_341;
    v467 = 5;
  }
  (*(void (**)(void))(*v466 + 8 * v467))();
LABEL_341:
  v468 = operator new();
  *(_QWORD *)v468 = &off_1E42B59B0;
  *(_QWORD *)(v468 + 48) = 0;
  *(_QWORD *)(v468 + 24) = 0;
  *(_QWORD *)(v468 + 32) = 0;
  *(_QWORD *)(v468 + 16) = "Stencil Invert";
  *(_DWORD *)(v468 + 40) = 0;
  *(_DWORD *)(v468 + 56) = 1065353216;
  *(_OWORD *)(v468 + 64) = 0u;
  *(_OWORD *)(v468 + 80) = 0u;
  *(int64x2_t *)(v468 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v468 + 112) = 0;
  v469 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v468;
  if (v469)
    (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
  v470 = operator new();
  *(_QWORD *)v470 = &off_1E42B59B0;
  *(_QWORD *)(v470 + 48) = 0;
  *(_QWORD *)(v470 + 24) = 0;
  *(_QWORD *)(v470 + 32) = 0;
  *(_QWORD *)(v470 + 16) = "Stencil Erase Water";
  *(_DWORD *)(v470 + 40) = 0;
  *(_DWORD *)(v470 + 56) = 1065353216;
  *(_OWORD *)(v470 + 64) = 0u;
  *(_OWORD *)(v470 + 80) = 0u;
  *(int64x2_t *)(v470 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v470 + 112) = 0;
  v471 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v470;
  if (v471)
    (*(void (**)(uint64_t))(*(_QWORD *)v471 + 8))(v471);
  v472 = (unint64_t *)operator new();
  v537 = v536;
  v534[0] = &off_1E42D60C8;
  v535 = v534;
  v536[0] = &off_1E42D1FC0;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v472, (uint64_t)v536, (uint64_t)v534);
  v473 = *v516;
  *v516 = (uint64_t)v472;
  if (v473)
  {
    v474 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v473);
    MEMORY[0x1A1AF4E00](v474, 0x10A0C40D234DDC7);
  }
  v475 = v535;
  if (v535 == v534)
  {
    v476 = 4;
    v475 = v534;
  }
  else
  {
    if (!v535)
      goto LABEL_352;
    v476 = 5;
  }
  (*(void (**)(void))(*v475 + 8 * v476))();
LABEL_352:
  v477 = v537;
  if (v537 == v536)
  {
    v478 = 4;
    v477 = v536;
    goto LABEL_356;
  }
  if (v537)
  {
    v478 = 5;
LABEL_356:
    (*(void (**)(void))(*v477 + 8 * v478))();
  }
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v527);
  v479 = *(_OWORD *)v527;
  *(_OWORD *)v527 = 0uLL;
  v480 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_OWORD *)this + 15) = v479;
  if (v480)
  {
    v481 = (unint64_t *)&v480->__shared_owners_;
    do
      v482 = __ldaxr(v481);
    while (__stlxr(v482 - 1, v481));
    if (!v482)
    {
      ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
      std::__shared_weak_count::__release_weak(v480);
    }
  }
  v483 = *(std::__shared_weak_count **)&v527[8];
  if (*(_QWORD *)&v527[8])
  {
    v484 = (unint64_t *)(*(_QWORD *)&v527[8] + 8);
    do
      v485 = __ldaxr(v484);
    while (__stlxr(v485 - 1, v484));
    if (!v485)
    {
      ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
      std::__shared_weak_count::__release_weak(v483);
    }
  }
  *((_QWORD *)this + 35) = 0;
  if (v526)
  {
    v486 = (unint64_t *)&v526->__shared_owners_;
    do
      v487 = __ldaxr(v486);
    while (__stlxr(v487 - 1, v486));
    if (!v487)
    {
      ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
      std::__shared_weak_count::__release_weak(v526);
    }
  }
  v488 = v531;
  if (v531)
  {
    v489 = (unint64_t *)&v531->__shared_owners_;
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
      std::__shared_weak_count::__release_weak(v488);
    }
  }
  v491 = (std::__shared_weak_count *)*((_QWORD *)&v532 + 1);
  if (*((_QWORD *)&v532 + 1))
  {
    v492 = (unint64_t *)(*((_QWORD *)&v532 + 1) + 8);
    do
      v493 = __ldaxr(v492);
    while (__stlxr(v493 - 1, v492));
    if (!v493)
    {
      ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
      std::__shared_weak_count::__release_weak(v491);
    }
  }

  return this;
}

void sub_19F2F7F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::vector<std::pair<std::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup>,std::unique_ptr<ggl::RenderItem>>>::~vector[abi:nn180100]((void **)(v16 + 256));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  v18 = *(_QWORD *)(v16 + 216);
  *(_QWORD *)(v16 + 216) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(v16 + 208);
  *(_QWORD *)(v16 + 208) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
  v20 = *(_QWORD *)(v16 + 120);
  *(_QWORD *)(v16 + 120) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x250]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x258]);
  v21 = *(_QWORD *)(v16 + 96);
  *(_QWORD *)(v16 + 96) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(v16 + 88);
  *(_QWORD *)(v16 + 88) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(v16 + 80);
  *(_QWORD *)(v16 + 80) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(v16 + 72);
  *(_QWORD *)(v16 + 72) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v16 + 64) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v16 + 56) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(_QWORD *)(v16 + 48);
  *(_QWORD *)(v16 + 48) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v16 + 32) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x268]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x270]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x260]);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)v16);

  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9GlowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7CE8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Glow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D73E8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonShadowedStroke23ShadowPathPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6E90;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1F30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1EE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1EA0;
  a2[1] = v2;
  return result;
}

void ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  if (a4)
  {
    v4 = (unint64_t *)(a4 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = a3;
  *(_QWORD *)(a2 + 24) = a4;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *a1 = a3;
  a1[1] = 0;
  if (a4)
  {
    v4 = (unint64_t *)(a4 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = a3;
  a2[1] = a4;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ggl::PolygonFill::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonFill::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ComputeSetup::~ComputeSetup(ggl::ComputeSetup *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E42B6098;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *((_QWORD *)this + 17);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *((_QWORD *)this + 17);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *((_QWORD *)this + 18);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = *((_QWORD *)this + 17);
  }
  *((_QWORD *)this + 18) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), v7, *((_QWORD *)this + 19) - v7);
LABEL_16:
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
    v12 = *((_QWORD *)this + 14);
    v13 = *((_QWORD *)this + 13);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v14->__on_zero_shared)(v14, v13);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = *((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v13, *((_QWORD *)this + 15) - v13);
  }
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    *((_QWORD *)this + 10) = v17;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v17, *((_QWORD *)this + 11) - v17);
  }
  v18 = *((_QWORD *)this + 5);
  if (v18)
  {
    *((_QWORD *)this + 6) = v18;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v18, *((_QWORD *)this + 7) - v18);
  }
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *((_QWORD *)this + 2) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v19, *((_QWORD *)this + 3) - v19);
  }
}

{
  ggl::ComputeSetup::~ComputeSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PipelineSetup::~PipelineSetup(ggl::PipelineSetup *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *(_QWORD *)this = off_1E42B6730;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_QWORD *)this + 25);
    v4 = *((_QWORD *)this + 24);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 25) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 27) + 40))(*((_QWORD *)this + 27), v4, *((_QWORD *)this + 26) - v4);
  }
  v8 = *((_QWORD *)this + 20);
  if (v8)
  {
    v9 = *((_QWORD *)this + 21);
    v10 = *((_QWORD *)this + 20);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v10, *((_QWORD *)this + 22) - v10);
  }
  v14 = *((_QWORD *)this + 16);
  if (v14)
  {
    v15 = *((_QWORD *)this + 17);
    v16 = *((_QWORD *)this + 16);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v17->__on_zero_shared)(v17, v16);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v16, *((_QWORD *)this + 18) - v16);
  }
  v20 = *((_QWORD *)this + 12);
  if (v20)
  {
    *((_QWORD *)this + 13) = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v20, *((_QWORD *)this + 14) - v20);
  }
  v21 = *((_QWORD *)this + 8);
  if (v21)
  {
    *((_QWORD *)this + 9) = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v21, *((_QWORD *)this + 10) - v21);
  }
  v22 = *((_QWORD *)this + 4);
  if (v22)
  {
    *((_QWORD *)this + 5) = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v22, *((_QWORD *)this + 6) - v22);
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

_QWORD *md::LabelManager::startStylesheetLabelAnimations(md::LabelManager *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *result;
  uint64_t v18;
  uint8_t v19[8];
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = v22;
  v20[0] = &off_1E42CA568;
  v21 = v20;
  v22[0] = &off_1E42CA520;
  v25 = v24;
  v24[0] = &off_1E42CA568;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)v19 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetLabelAnimations", (const char *)&unk_1A0189141, v19, 2u);
  }

  v3 = v21;
  if (v21 == v20)
  {
    v4 = 4;
    v3 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = v23;
  if (v23 == v22)
  {
    v6 = 4;
    v5 = v22;
    goto LABEL_14;
  }
  if (v23)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *((_BYTE *)this + 3376) = 0;
  v7 = *((_QWORD *)this + 34);
  v8 = *(_QWORD *)(v7 + 24);
  for (i = *(_QWORD *)(v7 + 32); i != v8; i -= 16)
  {
    v10 = *(std::__shared_weak_count **)(i - 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  *(_QWORD *)(v7 + 32) = v8;
  *(_BYTE *)(v7 + 60) = 1;
  v13 = *((_QWORD *)this + 37);
  v14 = *(_DWORD *)(v13 + 12);
  v15 = __CFADD__(v14, 1);
  v16 = v14 + 1;
  *(_DWORD *)(v13 + 12) = v16;
  if (v15)
  {
    *(_QWORD *)(v13 + 12) = 0x100000002;
    v16 = 2;
  }
  atomic_store(v16, (unsigned int *)(v13 + 8));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 144))(*((_QWORD *)this + 30));
  md::LabelTextDataLoader::finishBatch(*((md::LabelTextDataLoader **)this + 34));
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 21) + 72) + 8))(*(_QWORD *)(*((_QWORD *)this + 21)
                                                                                                  + 72));
  if (!v25)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v25 + 48))(v25);
  result = v25;
  if (v25 == v24)
  {
    v18 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

void sub_19F2F8E54(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F2F8E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      _Unwind_Resume(exception_object);
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  _Unwind_Resume(exception_object);
}

void sub_19F2F8EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void md::LabelClusterProvider::initializeSourceAnnotations(md::LabelClusterProvider *this)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t *v9;
  float *v10;
  _QWORD *v11;
  gss::Allocator *v12;
  _QWORD *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int *v24;
  int v25;
  int v26;
  int *v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  long double v62;
  long double v63;
  float v64;
  double v65;
  float v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  _QWORD v78[2];
  unsigned __int8 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 129))
  {
    v2 = *((_QWORD *)this + 1);
    v3 = *((id *)this + 4);
    objc_msgSend(v3, "annotationsInMapRect:", *MEMORY[0x1E0D266E8], *(double *)(MEMORY[0x1E0D266E8] + 8), *(double *)(MEMORY[0x1E0D266E8] + 16), *(double *)(MEMORY[0x1E0D266E8] + 24));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    md::LabelCustomFeatureSupport::filterAnnotations(v2, v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
      v7 = v5;
    v8 = (void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v6;

    *((_BYTE *)this + 129) = 1;
    if (*((_BYTE *)this + 130) == 1)
    {
      v9 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 2) + 336) + 200);
      v10 = (float *)v9[8];
      if (!v10)
      {
        v11 = (_QWORD *)operator new();
        *v11 = 0;
        v12 = (gss::Allocator *)v9[8];
        v9[8] = (uint64_t)v11;
        if (v12)
          v12 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v12, 0x1000C4000313F17);
        *((_QWORD *)&v68 + 1) = gss::Allocator::instance(v12);
        v13 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1), 16, 4);
        *(_QWORD *)&v67 = v13;
        *(_QWORD *)&v68 = v13 + 2;
        if (v13)
          *v13 = 0x200000005;
        v13[1] = 0x7600000003;
        *((_QWORD *)&v67 + 1) = v13 + 2;
        md::LabelSettingsStyleCache::styleQueryForAttributes(&v71, *v9, (uint64_t)&v67);
        v14 = v71;
        if (v71)
        {
          v15 = v72;
          if (v72)
          {
            p_shared_owners = (unint64_t *)&v72->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
            v77 = v15;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
          }
          else
          {
            v77 = 0;
          }
          v78[0] = 0;
          v78[1] = 0;
          v76 = v14;
          v79 = 0;
          v19 = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v78);
          v79 = v19;
          if (v15)
          {
            v20 = (unint64_t *)&v15->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            v19 = v79;
          }
          if (v19)
          {
            v73 = 1;
            v22 = *(_QWORD *)(v76 + 24);
            v23 = *(unsigned __int8 *)(v22 + 12);
            if (v23 == 2)
            {
              v75 = 1;
              v74 = 1;
              v24 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v22, 0x1D7u, 0, &v75);
              gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v22, 0x1D7u, 1u, &v74);
              v25 = (v75 | v74) != 0;
              v26 = *v24;
            }
            else
            {
              v26 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(v76 + 24), 0x1D7u, v23, &v73);
              v25 = v73;
            }
            v27 = (int *)v9[8];
            if (!v25)
              v26 = *v27;
            *v27 = v26;
            v73 = 1;
            v28 = *(_QWORD *)(v76 + 24);
            v29 = *(unsigned __int8 *)(v28 + 12);
            if (v29 == 2)
            {
              v75 = 1;
              v74 = 1;
              v30 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v28, 0x1D9u, 0, &v75);
              gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v28, 0x1D9u, 1u, &v74);
              v31 = (v75 | v74) != 0;
              v32 = *v30;
            }
            else
            {
              v32 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(v76 + 24), 0x1D9u, v29, &v73);
              v31 = v73;
            }
            v33 = v9[8];
            if (!v31)
              v32 = *(_DWORD *)(v33 + 4);
            *(_DWORD *)(v33 + 4) = v32;
          }
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v76);
        }
        v34 = v72;
        if (v72)
        {
          v35 = (unint64_t *)&v72->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if ((_QWORD)v67)
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)&v68 + 1) + 40))(*((_QWORD *)&v68 + 1), v67, v68 - v67);
        v10 = (float *)v9[8];
      }
      v37 = *v10;
      if (*v10 >= 0.01)
      {
        v66 = v10[1];
        v38 = *(float **)(*((_QWORD *)this + 2) + 432);
        v39 = v38[270];
        v40 = v38[268];
        v41 = v38[271];
        v42 = v38[269];
        v43 = v38[10];
        v67 = 0u;
        v68 = 0u;
        v69 = 0u;
        v70 = 0u;
        v44 = *((id *)this + 7);
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v67, &v76, 16);
        if (v45)
        {
          v46 = *(_QWORD *)v68;
          v65 = (float)(fminf(v41 - v42, v39 - v40) / v43) * v37;
          do
          {
            for (i = 0; i != v45; ++i)
            {
              if (*(_QWORD *)v68 != v46)
                objc_enumerationMutation(v44);
              objc_msgSend(*(id *)(*((_QWORD *)&v67 + 1) + 8 * i), "feature", *(_QWORD *)&v65);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = objc_msgSend(v48, "pointFeature");

              v50 = *(id *)(v49 + 240);
              v51 = v50;
              if (v50)
              {
                objc_msgSend(v50, "southLat");
                v53 = v52;
                objc_msgSend(v51, "westLng");
                v55 = v54;
                v56 = tan(v53 * 0.00872664626 + 0.785398163);
                v57 = log(v56);
                objc_msgSend(v51, "northLat");
                v59 = v58;
                objc_msgSend(v51, "eastLng");
                v61 = v60;
                v62 = tan(v59 * 0.00872664626 + 0.785398163);
                v63 = log(v62);
                v64 = log2(v65 / (fmax((v61 - v55) * 0.00277777778, (v63 - v57) * 0.159154943) * 512.0));
                *(float *)(v49 + 80) = fmaxf(fminf(v66 + v64, 252.0), 0.0);
              }

            }
            v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v67, &v76, 16);
          }
          while (v45);
        }

      }
    }
  }
}

void sub_19F2F946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  va_list va;

  va_start(va, a14);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a4)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 40))(a7, a4, a6 - a4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::restyleActiveLabels(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3))
    v3 = *v1++;
  return this;
}

void md::RouteLineSupport::restyleFeatures(md::RouteLineSupport *this)
{
  char *v2;
  char *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)*((_QWORD *)this + 12);
  v71 = 0;
  v72 = 0;
  v70 = 0;
  {
    v69 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = mdm::Allocator::instance(void)::alloc;
  v73 = mdm::Allocator::instance(void)::alloc;
  v6 = v3 - v2;
  if (v3 == v2)
  {
    v9 = 0;
    v8 = v70;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = v6 >> 4;
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc);
    v70 = v8;
    v72 = &v8[2 * v7];
    v9 = v8;
    do
    {
      if (v9)
      {
        *v9 = *(_QWORD *)v2;
        v10 = *((_QWORD *)v2 + 1);
        v9[1] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
      }
      v2 += 16;
      v9 += 2;
    }
    while (v2 != v3);
    v71 = v9;
  }
  v14 = (char *)*((_QWORD *)this + 36);
  v13 = (char *)*((_QWORD *)this + 37);
  if (v13 - v14 >= 1)
  {
    v15 = (v13 - v14) >> 4;
    v16 = (char *)v9 - (char *)v8;
    v17 = (uint64_t *)((char *)v8 + (((char *)v9 - (char *)v8) & 0xFFFFFFFFFFFFFFF0));
    v18 = v71;
    if (v15 > ((char *)v72 - (char *)v71) >> 4)
    {
      v19 = v15 + (((char *)v71 - (char *)v8) >> 4);
      if (v19 >> 60)
        abort();
      if (v72 - v8 > v19)
        v19 = v72 - v8;
      if ((unint64_t)((char *)v72 - (char *)v8) >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 16 * v20, 8);
      else
        v21 = 0;
      v30 = (uint64_t *)(v21 + 16 * (v16 >> 4));
      v31 = &v30[2 * v15];
      v32 = v30;
      do
      {
        if (v32)
        {
          *v32 = *(_QWORD *)v14;
          v33 = *((_QWORD *)v14 + 1);
          v32[1] = v33;
          if (v33)
          {
            v34 = (unint64_t *)(v33 + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
        }
        v32 += 2;
        v14 += 16;
      }
      while (v32 != v31);
      if ((unint64_t)v16 >= 0x10)
      {
        v36 = 2 * (v16 >> 4);
        v37 = v8 - 2;
        do
        {
          v38 = &v37[v36];
          *(_OWORD *)(v21 + v36 * 8 - 16) = *(_OWORD *)&v37[v36];
          *v38 = 0;
          v38[1] = 0;
          v36 -= 2;
        }
        while (v36 * 8);
        v30 = (uint64_t *)v21;
      }
      v39 = v71;
      if (v71 != v17)
      {
        do
        {
          *(_OWORD *)v31 = *(_OWORD *)v17;
          v31 += 2;
          *v17 = 0;
          v17[1] = 0;
          v17 += 2;
        }
        while (v17 != v39);
        v17 = v39;
      }
      v40 = v70;
      v41 = v72;
      v70 = v30;
      v71 = v31;
      v72 = (uint64_t *)(v21 + 16 * v20);
      while (v17 != v40)
      {
        v42 = (std::__shared_weak_count *)*(v17 - 1);
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v17 -= 2;
      }
      if (v40)
        (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v73 + 40))(v73, v40, (char *)v41 - (char *)v40);
      goto LABEL_67;
    }
    v22 = (char *)v71 - (char *)v17;
    v23 = ((char *)v71 - (char *)v17) >> 4;
    if (v23 >= v15)
    {
      v24 = &v14[16 * v15];
      v26 = v71;
LABEL_60:
      v45 = &v17[2 * v15];
      v46 = &v26[-2 * v15];
      v47 = v26;
      if (v46 < v18)
      {
        v48 = v46;
        v47 = v26;
        do
        {
          if (v47)
          {
            *(_OWORD *)v47 = *(_OWORD *)v48;
            *v48 = 0;
            v48[1] = 0;
          }
          v48 += 2;
          v47 += 2;
        }
        while (v48 < v18);
      }
      v71 = v47;
      if (v26 != v45)
      {
        do
        {
          v58 = *((_OWORD *)v46 - 1);
          v46 -= 2;
          *v46 = 0;
          v46[1] = 0;
          v59 = (std::__shared_weak_count *)*(v26 - 1);
          *((_OWORD *)v26 - 1) = v58;
          v26 -= 2;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
        while (v46 != v17);
      }
      for (; v14 != v24; v17 += 2)
      {
        v63 = *(_QWORD *)v14;
        v62 = *((_QWORD *)v14 + 1);
        if (v62)
        {
          v64 = (unint64_t *)(v62 + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        v66 = (std::__shared_weak_count *)v17[1];
        *v17 = v63;
        v17[1] = v62;
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v14 += 16;
      }
      goto LABEL_67;
    }
    v24 = &v14[16 * v23];
    if (v24 == v13)
    {
      v26 = v71;
    }
    else
    {
      v25 = (uint64_t *)&v14[16 * v23];
      v26 = v71;
      do
      {
        if (v26)
        {
          *v26 = *v25;
          v27 = v25[1];
          v26[1] = v27;
          if (v27)
          {
            v28 = (unint64_t *)(v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
        }
        v25 += 2;
        v26 += 2;
      }
      while (v25 != (uint64_t *)v13);
    }
    v71 = v26;
    if (v22 >= 1)
      goto LABEL_60;
  }
LABEL_67:
  md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*((_QWORD *)this + 1) + 296), &v70);
  v49 = *((_QWORD *)this + 1);
  *(_BYTE *)(v49 + 3041) = 1;
  v50 = atomic_load((unsigned __int8 *)(v49 + 3058));
  if ((v50 & 1) != 0)
  {
    v51 = *(_QWORD *)(v49 + 136);
    if (v51)
    {
      v52 = *(_QWORD *)(v51 + 56);
      if (v52)
      {
        v75 = v49;
        v74 = 9;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v52 + 48))(v52, &v75, &v74);
      }
    }
  }
  v53 = v70;
  if (v70)
  {
    v54 = v71;
    if (v71 != v70)
    {
      do
      {
        v55 = (std::__shared_weak_count *)*(v54 - 1);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v54 -= 2;
      }
      while (v54 != v53);
      v53 = v70;
    }
    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v73 + 40))(v73, v53, (char *)v72 - (char *)v53);
  }
}

void sub_19F2F9B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void md::LabelFeatureStyler::styleExternalFeatures(unsigned int *a1, uint64_t **a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;

  if (*a2 != a2[1])
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    {
      v25 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v5 = mdm::Allocator::instance(void)::alloc;
    v29 = mdm::Allocator::instance(void)::alloc;
    v6 = (char *)a2[1] - (char *)*a2;
    if (!v6)
    {
      v12 = 0;
      goto LABEL_33;
    }
    if (v6 < 0)
      abort();
    v7 = v6 >> 4;
    v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 24 * (v6 >> 4), 8);
    v9 = v8;
    v26 = v8;
    v27 = v8;
    v28 = &v8[24 * v7];
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      v12 = v8;
      do
      {
        v13 = *v10;
        if (*(_DWORD *)(*v10 + 128) != a1[3])
        {
          v14 = v28;
          if (v12 >= v28)
          {
            v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3);
            v16 = v15 + 1;
            if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((v28 - v9) >> 3) > v16)
              v16 = 0x5555555555555556 * ((v28 - v9) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v28 - v9) >> 3) >= 0x555555555555555)
              v17 = 0xAAAAAAAAAAAAAAALL;
            else
              v17 = v16;
            if (v17)
            {
              v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 24 * v17, 8);
              v19 = v18 + 24 * v15;
              v20 = v18 + 24 * v17;
              if (v18)
              {
                *(_QWORD *)v19 = v13;
                v21 = v18 + 24 * v15;
                *(_QWORD *)(v21 + 8) = 0;
                *(_QWORD *)(v21 + 16) = 0;
              }
            }
            else
            {
              v20 = 0;
              v19 = 24 * v15;
            }
            v23 = v26;
            v22 = v27;
            v9 = (char *)v19;
            if (v27 != v26)
            {
              do
              {
                v24 = *(_OWORD *)(v22 - 24);
                *((_QWORD *)v9 - 1) = *((_QWORD *)v22 - 1);
                *(_OWORD *)(v9 - 24) = v24;
                v9 -= 24;
                v22 -= 24;
              }
              while (v22 != v23);
              v22 = v23;
            }
            v12 = (char *)(v19 + 24);
            v26 = v9;
            v28 = (char *)v20;
            if (v22)
              (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v5 + 40))(v5, v22, v14 - v22);
          }
          else
          {
            if (v12)
            {
              *((_QWORD *)v12 + 1) = 0;
              *((_QWORD *)v12 + 2) = 0;
              *(_QWORD *)v12 = v13;
            }
            v12 += 24;
          }
          v27 = v12;
        }
        v10 += 2;
      }
      while (v10 != v11);
      if (v26 != v12)
      {
        md::LabelFeatureStyler::styleLabelFeatures(a1, &v26, 1u, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 64));
        v12 = v26;
        if (!v26)
          return;
        goto LABEL_34;
      }
LABEL_33:
      if (!v12)
        return;
      goto LABEL_34;
    }
    v12 = v8;
    if (v8)
    {
LABEL_34:
      v27 = v12;
      (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v29 + 40))(v29, v12, v28 - v12);
    }
  }
}

void sub_19F2F9E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
  _Unwind_Resume(exception_object);
}

void md::StandardLabeler::restyleActiveLabels(md::StandardLabeler *this)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unsigned __int8 v60;
  uint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  md::Label **v71;
  md::Label **v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 6);
  v3 = (_QWORD **)(v2 + 192);
  v4 = (uint64_t *)(v2 + 200);
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy(v2 + 192, *(_QWORD **)(v2 + 200));
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 192) = v2 + 200;
  *(_QWORD *)(v2 + 200) = 0;
  v5 = *(_QWORD **)(v2 + 224);
  if (v5 != (_QWORD *)(v2 + 232))
  {
    do
    {
      v12 = *v4;
      v13 = (uint64_t *)(v2 + 200);
      v14 = v2 + 200;
      if (*v4)
      {
        v15 = v5[4];
        v16 = *((_DWORD *)v5 + 10);
        while (1)
        {
          while (1)
          {
            v14 = v12;
            v17 = *(_QWORD *)(v12 + 32);
            v18 = *(_DWORD *)(v14 + 40);
            v19 = v16 < v18;
            if (v15 != v17)
              v19 = v15 < v17;
            if (!v19)
              break;
            v12 = *(_QWORD *)v14;
            v13 = (uint64_t *)v14;
            if (!*(_QWORD *)v14)
              goto LABEL_22;
          }
          v20 = v18 < v16;
          v21 = v15 == v17 ? v20 : v17 < v15;
          if (v21 != 1)
            break;
          v12 = *(_QWORD *)(v14 + 8);
          if (!v12)
          {
            v13 = (uint64_t *)(v14 + 8);
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 208) + 16))(*(_QWORD *)(v2 + 208), 64, 8);
        v23 = (uint64_t *)v22;
        *(_OWORD *)(v22 + 32) = *((_OWORD *)v5 + 2);
        *(_QWORD *)(v22 + 48) = v5[6];
        v24 = v5[7];
        *(_QWORD *)(v22 + 56) = v24;
        if (v24)
        {
          v25 = (unint64_t *)(v24 + 16);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = v14;
        *v13 = v22;
        v27 = (_QWORD *)**v3;
        if (v27)
        {
          *v3 = v27;
          v23 = (uint64_t *)*v13;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 200), v23);
        ++*(_QWORD *)(v2 + 216);
      }
      v28 = (_QWORD *)v5[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v5[2];
          v30 = *v29 == (_QWORD)v5;
          v5 = v29;
        }
        while (!v30);
      }
      v5 = v29;
    }
    while (v29 != (_QWORD *)(v2 + 232));
  }
  (*(void (**)(md::StandardLabeler *))(*(_QWORD *)this + 432))(this);
  md::LabelCustomFeatureSupport::updateStylesForFeatures(*((md::LabelCustomFeatureSupport **)this + 4));
  v6 = *((_QWORD *)this + 5);
  if (*(_QWORD *)(v6 + 8) != *(_QWORD *)(v6 + 16))
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)v6 + 296), (uint64_t **)(v6 + 8));
  v7 = (_QWORD *)*((_QWORD *)this + 6);
  if (v7[31])
  {
    v8 = *((_QWORD *)this + 3);
    v86 = 0;
    v87 = 0;
    v88 = 0;
    {
      v82 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v89 = mdm::Allocator::instance(void)::alloc;
    v10 = v7[31];
    v85 = v8;
    if (v10)
    {
      if (v10 >> 61)
        abort();
      v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 8 * v10, 8);
      v86 = v11;
      v87 = v11;
      v88 = &v11[v10];
    }
    else
    {
      v11 = 0;
    }
    v31 = (_QWORD *)v7[28];
    v84 = v7;
    v32 = v7 + 29;
    if (v31 != v7 + 29)
    {
      while (1)
      {
        v33 = *(_QWORD *)(v31[6] + 8);
        v34 = v88;
        if (v11 >= v88)
          break;
        if (v11)
          *v11 = v33;
        ++v11;
LABEL_65:
        v87 = v11;
        v53 = (_QWORD *)v31[1];
        if (v53)
        {
          do
          {
            v54 = v53;
            v53 = (_QWORD *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (_QWORD *)v31[2];
            v30 = *v54 == (_QWORD)v31;
            v31 = v54;
          }
          while (!v30);
        }
        v31 = v54;
        if (v54 == v32)
          goto LABEL_71;
      }
      v35 = v86;
      v36 = v11 - v86;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        abort();
      if (((char *)v88 - (char *)v86) >> 2 > v37)
        v37 = ((char *)v88 - (char *)v86) >> 2;
      if ((unint64_t)((char *)v88 - (char *)v86) >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
      {
        v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, 8 * v38, 8);
        v40 = (uint64_t *)(v39 + 8 * v36);
        v41 = v39 + 8 * v38;
        if (v39)
          *v40 = v33;
      }
      else
      {
        v41 = 0;
        v40 = (uint64_t *)(8 * v36);
      }
      v42 = v87;
      v43 = (char *)v87 - (char *)v35;
      if (v87 == v35)
      {
        v45 = v40;
        goto LABEL_63;
      }
      v44 = v43 - 8;
      if ((unint64_t)(v43 - 8) < 0x38)
      {
        v45 = v40;
      }
      else
      {
        v45 = v40;
        if ((unint64_t)((char *)v87 - (char *)v40) >= 0x20)
        {
          v46 = (v44 >> 3) + 1;
          v47 = &v87[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
          v48 = v40 - 2;
          v49 = v87 - 2;
          v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *(_OWORD *)v49;
            *((_OWORD *)v48 - 1) = *((_OWORD *)v49 - 1);
            *(_OWORD *)v48 = v51;
            v48 -= 4;
            v49 -= 4;
            v50 -= 4;
          }
          while (v50);
          v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
          v42 = v47;
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_63;
        }
      }
      do
      {
        v52 = *--v42;
        *--v45 = v52;
      }
      while (v42 != v35);
      v35 = v86;
      v34 = v88;
LABEL_63:
      v11 = v40 + 1;
      v86 = v45;
      v88 = (uint64_t *)v41;
      if (v35)
        (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v89 + 40))(v89, v35, (char *)v34 - (char *)v35);
      goto LABEL_65;
    }
LABEL_71:
    md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(v85 + 296), (uint64_t)&v86);
    v7 = v84;
    if (v86)
    {
      v87 = v86;
      (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v89 + 40))(v89, v86, (char *)v88 - (char *)v86);
    }
  }
  v55 = v7[88];
  if (v55)
  {
    v57 = *(_QWORD *)(v55 + 8);
    v56 = *(std::__shared_weak_count **)(v55 + 16);
    v90 = v57;
    v91 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v59 = __ldxr(p_shared_owners);
      while (__stxr(v59 + 1, p_shared_owners));
    }
    v87 = 0;
    {
      v83 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v83, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v89 = mdm::Allocator::instance(void)::alloc;
    v61 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 16, 8);
    v86 = v61;
    v88 = v61 + 2;
    if (v61)
    {
      *v61 = v57;
      v61[1] = (uint64_t)v56;
      if (v56)
      {
        v62 = (unint64_t *)&v56->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        v87 = v61 + 2;
LABEL_84:
        v64 = (unint64_t *)&v56->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        goto LABEL_89;
      }
      v87 = v61 + 2;
    }
    else
    {
      v87 = (uint64_t *)16;
      if (v56)
        goto LABEL_84;
    }
LABEL_89:
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v7[1] + 296), &v86);
    v66 = v86;
    if (v86)
    {
      v67 = v87;
      if (v87 != v86)
      {
        do
        {
          v68 = (std::__shared_weak_count *)*(v67 - 1);
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v67 -= 2;
        }
        while (v67 != v66);
        v66 = v86;
      }
      (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v89 + 40))(v89, v66, (char *)v88 - (char *)v66);
    }
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 3375))
  {
    v73 = (char *)*((_QWORD *)this + 9);
    v74 = (char *)*((_QWORD *)this + 10);
    if (v73 == v74)
      return;
    v75 = v74 - v73 - 16;
    if (v75 >= 0x10)
    {
      v76 = (v75 >> 4) + 1;
      v77 = (uint64_t *)(v73 + 16);
      v78 = v76 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v79 = *(v77 - 2);
        v80 = *v77;
        v77 += 4;
        *(_DWORD *)(v79 + 52) = 0;
        *(_DWORD *)(v80 + 52) = 0;
        v78 -= 2;
      }
      while (v78);
      if (v76 == (v76 & 0x1FFFFFFFFFFFFFFELL))
        return;
      v73 += 16 * (v76 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      v81 = *(_QWORD *)v73;
      v73 += 16;
      *(_DWORD *)(v81 + 52) = 0;
    }
    while (v73 != v74);
    return;
  }
  LOWORD(v86) = 257;
  BYTE2(v86) = 1;
  v71 = (md::Label **)*((_QWORD *)this + 9);
  v72 = (md::Label **)*((_QWORD *)this + 10);
  while (v71 != v72)
  {
    if (*((_BYTE *)*v71 + 820) == 2)
      md::Label::layoutForStaging(*v71, *((_QWORD *)this + 3), *((md::LabelPool **)this + 6), &v86);
    v71 += 2;
  }
}

void sub_19F2FA6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19F2FA6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F2FA6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a15 + 40))(a15, a12, a14 - a12);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

void md::MapStandardLabeler::updateStylesForFeatures(md::MapStandardLabeler *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 49);
  if (*(_QWORD *)(v1 + 128) != *(_QWORD *)(v1 + 136))
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)(v1 + 16) + 296), (uint64_t **)(v1 + 128));
  if (*(_QWORD *)(v1 + 240) != *(_QWORD *)(v1 + 248))
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)(v1 + 16) + 296), (uint64_t **)(v1 + 240));
}

void md::MapNavLabeler::restyleActiveLabels(md::MapNavLabeler *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  objc_msgSend(*((id *)this + 7), "styleManagerDidChange:", *(unsigned __int8 *)(*((_QWORD *)this + 3) + 3375));
  v2 = (uint64_t *)*((_QWORD *)this + 9);
  md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(*v2 + 296), (uint64_t)(v2 + 18));
  v3 = *v2;
  *(_BYTE *)(v3 + 3041) = 1;
  v4 = atomic_load((unsigned __int8 *)(v3 + 3058));
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 + 136);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 56);
      if (v6)
      {
        v8 = v3;
        v7 = 9;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v6 + 48))(v6, &v8, &v7);
      }
    }
  }
  md::RouteLineSupport::restyleFeatures(*((md::RouteLineSupport **)this + 8));
}

void md::LabelFeatureStyler::restyleFeatures(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t j;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  if ((v3 & 1) == 0)
  {
    v32 = a2;
    a2 = v32;
    if (v33)
    {
      v34 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a2 = v32;
    }
  }
  v53 = mdm::Allocator::instance(void)::alloc;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if ((v4 & 1) == 0)
  {
    v35 = a2;
    a2 = v35;
    if (v36)
    {
      v37 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a2 = v35;
    }
  }
  v49 = mdm::Allocator::instance(void)::alloc;
  v5 = atomic_load((unsigned __int8 *)(*(_QWORD *)a1 + 3394));
  v42 = 0;
  v43 = 0;
  v44 = 0;
  if ((v6 & 1) == 0)
  {
    v38 = a2;
    a2 = v38;
    if (v39)
    {
      v40 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v40, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a2 = v38;
    }
  }
  v45 = mdm::Allocator::instance(void)::alloc;
  v7 = *(_DWORD ***)a2;
  v8 = *(_DWORD ***)(a2 + 8);
  if (*(_DWORD ***)a2 != v8)
  {
    do
    {
      v9 = *v7;
      v41 = v9;
      if (v9[32] != a1[3])
      {
        if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v9 + 264))(v9) == 7)
        {
          (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v41 + 536))(v41, *(_QWORD *)a1);
        }
        else
        {
          v10 = v50;
          for (i = v51; i != v10; i -= 2)
          {
            v12 = (std::__shared_weak_count *)*(i - 1);
            if (v12)
            {
              p_shared_owners = (unint64_t *)&v12->__shared_owners_;
              do
                v14 = __ldaxr(p_shared_owners);
              while (__stlxr(v14 - 1, p_shared_owners));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
          }
          v51 = v10;
          if (!(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v41 + 64))(v41))
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v41 + 528))(v41, v5);
          (*(void (**)(_DWORD *, uint64_t **, uint64_t))(*(_QWORD *)v41 + 568))(v41, &v50, *(_QWORD *)(*(_QWORD *)a1 + 336) + 184);
          if (v50 != v51)
          {
            std::vector<md::LabelFeature *,geo::StdAllocator<md::LabelFeature *,mdm::Allocator>>::assign((uint64_t)&v42, ((char *)v51 - (char *)v50) >> 4, (const double *)&v41);
            v15 = v46;
            for (j = v47; j != v15; j -= 16)
            {
              v17 = *(std::__shared_weak_count **)(j - 8);
              if (v17)
              {
                v18 = (unint64_t *)&v17->__shared_owners_;
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
            }
            v47 = v15;
            md::LabelStyleCache::requestStyles(*(_QWORD *)(*(_QWORD *)a1 + 336), &v50, (uint64_t)&v46, &v42);
            (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 576))(v41);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    if (v42)
    {
      v43 = v42;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 40))(v45, v42, v44 - v42);
    }
  }
  v20 = v46;
  if (v46)
  {
    v21 = v47;
    v22 = v46;
    if (v47 != v46)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v23->__on_zero_shared)(v23, v22);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = v46;
    }
    v47 = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 40))(v49, v22, v48 - v22);
  }
  v26 = v50;
  if (v50)
  {
    v27 = v51;
    v28 = v50;
    if (v51 != v50)
    {
      do
      {
        v29 = (std::__shared_weak_count *)*(v27 - 1);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t *))v29->__on_zero_shared)(v29, v28);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 2;
      }
      while (v27 != v26);
      v28 = v50;
    }
    v51 = v26;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v53 + 40))(v53, v28, v52 - (_QWORD)v28);
  }
}

void sub_19F2FAD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  if (a4)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 40))(a7, a4, a6 - a4);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureSupport::localizeLabelsDidChange(md::LabelCustomFeatureSupport *this)
{
  unsigned __int8 v2;
  md::LabelCustomFeatureSupport *v3;
  md::LabelCustomFeatureSupport *v4;
  md::LabelCustomFeatureSupport *v5;
  BOOL v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  {
    v16 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v20 = mdm::Allocator::instance(void)::alloc;
  v3 = (md::LabelCustomFeatureSupport *)*((_QWORD *)this + 9);
  if (v3 != (md::LabelCustomFeatureSupport *)((char *)this + 80))
  {
    do
    {
      md::LabelCustomFeatureProvider::populateAllLabelFeatures((_QWORD *)v3 + 5, &v17);
      v4 = (md::LabelCustomFeatureSupport *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(md::LabelCustomFeatureSupport **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (md::LabelCustomFeatureSupport *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != (md::LabelCustomFeatureSupport *)((char *)this + 80));
    v7 = v17;
    if (v17 == v18)
    {
      v10 = v17;
      if (!v17)
        return;
    }
    else
    {
      v8 = *(unsigned int **)(*((_QWORD *)this + 2) + 296);
      v9 = atomic_load((unsigned __int8 *)(*(_QWORD *)v8 + 3392));
      v10 = v17;
      v7 = v18;
      v11 = v9 & 1;
      v12 = v17;
      do
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v12 + 32))(*v12, 0, v11);
        v12 += 2;
      }
      while (v12 != v7);
      md::LabelFeatureStyler::styleExternalFeatures(v8, &v17);
      if (!v10)
        return;
    }
    if (v7 != v10)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*(v7 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v7 -= 2;
      }
      while (v7 != v10);
      v7 = v17;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v20 + 40))(v20, v7, v19 - (_QWORD)v7);
  }
}

void sub_19F2FAF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureSupport::updateStylesForFeatures(md::LabelCustomFeatureSupport *this)
{
  unsigned __int8 v2;
  md::LabelCustomFeatureSupport *v3;
  md::LabelCustomFeatureSupport *v4;
  md::LabelCustomFeatureSupport *v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  {
    v12 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v12, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v16 = mdm::Allocator::instance(void)::alloc;
  v3 = (md::LabelCustomFeatureSupport *)*((_QWORD *)this + 9);
  if (v3 != (md::LabelCustomFeatureSupport *)((char *)this + 80))
  {
    do
    {
      md::LabelCustomFeatureProvider::populateAllLabelFeatures((_QWORD *)v3 + 5, &v13);
      v4 = (md::LabelCustomFeatureSupport *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(md::LabelCustomFeatureSupport **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (md::LabelCustomFeatureSupport *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != (md::LabelCustomFeatureSupport *)((char *)this + 80));
    v7 = v13;
    v8 = v14;
    if (v13 == v14)
    {
      if (!v13)
        return;
    }
    else
    {
      md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*((_QWORD *)this + 2) + 296), &v13);
      if (!v7)
        return;
      do
      {
        v9 = (std::__shared_weak_count *)*(v8 - 1);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v8 -= 2;
      }
      while (v8 != v7);
      v7 = v13;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v16 + 40))(v16, v7, v15 - (_QWORD)v7);
  }
}

void sub_19F2FB11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureProvider::populateAllLabelFeatures(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v2 = a1[28];
  if (v2)
  {
    std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve((uint64_t)a2, v2 + ((uint64_t)(a2[1] - *a2) >> 4));
    v5 = (_QWORD *)a1[25];
    v6 = a1 + 26;
    if (v5 != v6)
    {
      v7 = (_QWORD *)a2[1];
      do
      {
        if ((unint64_t)v7 >= a2[2])
        {
          v7 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)a2, (__int128 *)(v5 + 5));
        }
        else
        {
          if (v7)
          {
            v8 = v5[6];
            *v7 = v5[5];
            v7[1] = v8;
            if (v8)
            {
              v9 = (unint64_t *)(v8 + 8);
              do
                v10 = __ldxr(v9);
              while (__stxr(v10 + 1, v9));
            }
          }
          v7 += 2;
        }
        a2[1] = v7;
        v11 = (_QWORD *)v5[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v5[2];
            v13 = *v12 == (_QWORD)v5;
            v5 = v12;
          }
          while (!v13);
        }
        v5 = v12;
      }
      while (v12 != v6);
    }
  }
}

void md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap(md::LabelCustomFeatureProvider *this, NSArray *a2, int a3)
{
  NSArray *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t i;
  id v10;
  void *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  md::LabelManager *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v5 = a2;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v25;
    v8 = (char *)this + 208;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v25 != v7)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v24 + 1) + 8 * i);
        v11 = v10;
        v12 = *(_QWORD **)v8;
        if (*(_QWORD *)v8)
        {
          v13 = (char *)this + 208;
          do
          {
            v14 = v12[4];
            v15 = v14 >= (unint64_t)v10;
            if (v14 >= (unint64_t)v10)
              v16 = v12;
            else
              v16 = v12 + 1;
            if (v15)
              v13 = (char *)v12;
            v12 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v13 != v8 && (unint64_t)v10 >= *((_QWORD *)v13 + 4))
          {
            v17 = *((_DWORD *)v13 + 15);
            if (a3)
              *((_DWORD *)v13 + 15) = --v17;
            v18 = *((_DWORD *)v13 + 14) - 1;
            *((_DWORD *)v13 + 14) = v18;
            if (v18 == v17)
            {
              v19 = *((_QWORD *)v13 + 5);
              *(_BYTE *)(v19 + 144) = 0;
              v20 = *(unsigned __int8 *)(v19 + 141);
              v18 = v17;
              if (v20)
              {
                v21 = (md::LabelManager *)*((_QWORD *)this + 1);
                v29[0] = &off_1E42CA640;
                v29[1] = v21;
                v30 = v29;
                md::LabelManager::queueCommand(v21, 61, 1, v29);
                v22 = v30;
                if (v30 == v29)
                {
                  v22 = v29;
                  v23 = 4;
LABEL_25:
                  (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
                }
                else if (v30)
                {
                  v23 = 5;
                  goto LABEL_25;
                }
                v18 = *((_DWORD *)v13 + 14);
              }
            }
            if (!v18)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v13 + 5) + 88))(*((_QWORD *)v13 + 5));
              std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::erase((uint64_t)this + 200, (uint64_t)v13);
            }
          }
        }

      }
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v6);
  }

}

void sub_19F2FB418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap(md::LabelCustomFeatureProvider *this, NSArray *a2, int a3)
{
  NSArray *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t **v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  md::PointLabelFeatureBase *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  void **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  size_t v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  int v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  id v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  __double2 v85;
  double v86;
  __double2 v87;
  int v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  md::LabelExternalPointFeature *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  md::LabelLineStore::WorkUnit *v97;
  uint64_t v98;
  char v99;
  long double v100;
  long double v101;
  float64x2_t v102;
  float v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned __int8 v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  md::LabelLineStore::WorkUnit **v118;
  md::LabelLineStore::WorkUnit *v119;
  _QWORD *v120;
  md::LabelLineStore::WorkUnit *v121;
  unsigned __int8 v122;
  unsigned __int8 *v123;
  unsigned __int8 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  unsigned __int8 v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t *v166;
  __int128 v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t **v172;
  uint64_t **v173;
  unint64_t v174;
  uint64_t **v175;
  uint64_t *v176;
  std::__shared_weak_count *v177;
  char *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  malloc_zone_t *zone;
  uint64_t v190;
  geo::read_write_lock *v191;
  const char *v192;
  malloc_zone_t *v193;
  uint64_t v194;
  geo::read_write_lock *v195;
  const char *v196;
  malloc_zone_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  __int128 v204;
  float64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  uint64_t v208;
  id v209;
  float64_t v210;
  id v211;
  NSArray *obj;
  uint64_t v214;
  uint64_t v215;
  md::LabelExternalPointFeature *v217;
  std::__shared_weak_count *v218;
  char *v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t *v225;
  uint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  uint64_t v233;
  uint64_t v234;
  md::LabelLineStore::WorkUnit *v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  _BYTE v238[128];
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v225 = 0;
  v226 = 0;
  v227 = 0;
  {
    v203 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v203, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v228 = mdm::Allocator::instance(void)::alloc;
  v221 = 0u;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  obj = v3;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v221, v238, 16);
  if (v5)
  {
    v6 = (uint64_t **)((char *)this + 208);
    v214 = *(_QWORD *)v222;
    v204 = xmmword_19FFB2E80;
    v206 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v207 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    __asm { FMOV            V0.2D, #0.5 }
    v205 = _Q0;
    do
    {
      v215 = v5;
      for (i = 0; i != v215; ++i)
      {
        if (*(_QWORD *)v222 != v214)
          objc_enumerationMutation(obj);
        v12 = *(id *)(*((_QWORD *)&v221 + 1) + 8 * i);
        v13 = v12;
        v14 = *v6;
        if (*v6)
        {
          v15 = (char *)this + 208;
          do
          {
            v16 = v14[4];
            _CF = v16 >= (unint64_t)v12;
            if (v16 >= (unint64_t)v12)
              v18 = (uint64_t **)v14;
            else
              v18 = (uint64_t **)(v14 + 1);
            if (_CF)
              v15 = (char *)v14;
            v14 = *v18;
          }
          while (*v18);
          if (v15 != (char *)v6 && (unint64_t)v12 >= *((_QWORD *)v15 + 4))
          {
            v33 = v15 + 40;
            ++*((_DWORD *)v15 + 14);
            if ((a3 & 1) == 0)
            {
              *(_BYTE *)(*(_QWORD *)v33 + 144) = 1;
              goto LABEL_210;
            }
LABEL_209:
            ++v33[5];
            goto LABEL_210;
          }
        }
        v219 = 0;
        v220 = 0;
        objc_msgSend(v12, "feature", v204);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v19;
        if (!v19 || !*(_QWORD *)objc_msgSend(v19, "feature"))
          goto LABEL_188;
        v21 = *((id *)this + 6);
        objc_msgSend(v20, "setDataSource:", v21);

        v22 = *(_QWORD *)objc_msgSend(v20, "feature");
        v23 = *((_QWORD *)this + 19);
        v24 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        v28 = *(std::__shared_weak_count **)(v22 + 104);
        *(_QWORD *)(v22 + 96) = v23;
        *(_QWORD *)(v22 + 104) = v24;
        if (!v28)
          goto LABEL_28;
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (!v24)
            goto LABEL_36;
        }
        else
        {
LABEL_28:
          if (!v24)
            goto LABEL_36;
        }
        v31 = (unint64_t *)&v24->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
LABEL_36:
        if (objc_msgSend(v20, "isPointFeature"))
        {
          v34 = objc_msgSend(v20, "feature");
          v35 = *(std::__shared_weak_count **)(v34 + 8);
          v217 = *(md::LabelExternalPointFeature **)v34;
          v218 = v35;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = (char *)operator new(0x2B8uLL);
          *((_QWORD *)v38 + 1) = 0;
          *((_QWORD *)v38 + 2) = 0;
          *(_QWORD *)v38 = &off_1E42DB940;
          v39 = *((_QWORD *)this + 1);
          v209 = v13;
          v40 = v39;
          v41 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v38 + 24), (uint64_t *)&v217, 0, v39);
          v234 = geo::codec::Allocator::instance(v41);
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v234 + 16))(v234, 48, 4);
          v231 = v42;
          v233 = v42 + 48;
          if (v42)
            *(_QWORD *)v42 = 0x100010024;
          *(_OWORD *)(v42 + 8) = xmmword_19FFB5AD0;
          *(_OWORD *)(v42 + 24) = xmmword_19FFB5AE0;
          *(_QWORD *)(v42 + 40) = 65581;
          v232 = (std::__shared_weak_count *)(v42 + 48);
          v43 = (std::__shared_weak_count *)operator new(0x40uLL);
          v43->__shared_owners_ = 0;
          v44 = (unint64_t *)&v43->__shared_owners_;
          v43->__shared_weak_owners_ = 0;
          v43->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
          v45 = (void **)&v43[1].__vftable;
          FeatureStyleAttributes::FeatureStyleAttributes((uint64_t)&v43[1], &v231);
          v229 = v43 + 1;
          v230 = v43;
          v46 = (uint64_t *)*((_QWORD *)v38 + 85);
          v47 = *((unsigned __int8 *)v46 + 33);
          if (*((_BYTE *)v46 + 33))
          {
            v48 = 0;
            v49 = 0;
            v50 = *v46;
            v51 = BYTE1(v43[2].__shared_owners_);
            while (1)
            {
              v52 = v51;
              v53 = *v45;
              if (v51)
                break;
LABEL_44:
              v53[v52] = *(_QWORD *)(v50 + 8 * v48);
              v51 = BYTE1(v43[2].__shared_owners_) + 1;
              BYTE1(v43[2].__shared_owners_) = v51;
              ++v48;
              v49 = 1;
              if (v48 == v47)
              {
                v53 = *v45;
                v52 = v51;
LABEL_81:
                qsort(v53, v52, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                goto LABEL_82;
              }
            }
            if (v51 > 0x1Fu)
            {
              do
              {
                v57 = 0;
                v58 = (int *)v53;
                while (1)
                {
                  v59 = *v58;
                  v58 += 2;
                  if (v59 == *(_DWORD *)(v50 + 8 * v48))
                    break;
                  if (v52 == ++v57)
                    goto LABEL_55;
                }
                HIDWORD(v53[v57]) = *(_DWORD *)(v50 + 8 * v48 + 4);
LABEL_55:
                ++v48;
              }
              while (v48 != v47);
            }
            else
            {
              do
              {
                v54 = 0;
                v55 = (int *)v53;
                while (1)
                {
                  v56 = *v55;
                  v55 += 2;
                  if (v56 == *(_DWORD *)(v50 + 8 * v48))
                    break;
                  if (v52 == ++v54)
                    goto LABEL_44;
                }
                HIDWORD(v53[v54]) = *(_DWORD *)(v50 + 8 * v48++ + 4);
              }
              while (v48 != v47);
            }
            if ((v49 & 1) != 0)
              goto LABEL_81;
          }
          do
LABEL_82:
            v89 = __ldxr(v44);
          while (__stxr(v89 + 1, v44));
          *((_QWORD *)v38 + 85) = v45;
          v90 = (std::__shared_weak_count *)*((_QWORD *)v38 + 86);
          *((_QWORD *)v38 + 86) = v43;
          if (v90)
          {
            v91 = (unint64_t *)&v90->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          v93 = v217;
          v235 = 0;
          v236 = 0;
          v237 = 0;
          v94 = (std::__shared_weak_count *)*((_QWORD *)v217 + 38);
          if (!v94 || v94->__shared_owners_ == -1)
          {
            v99 = 0;
            goto LABEL_136;
          }
          v95 = std::__shared_weak_count::lock(v94);
          v96 = v95;
          v97 = (md::LabelLineStore::WorkUnit *)*((_QWORD *)v93 + 37);
          if (!v95)
            v97 = 0;
          v235 = v97;
          v236 = v95;
          if (v97 && (v98 = *((_QWORD *)v93 + 36), (v237 = v98) != 0))
          {
            v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            if (!v96)
              goto LABEL_136;
          }
          else
          {
            v99 = 0;
            if (!v96)
              goto LABEL_136;
          }
          v131 = (unint64_t *)&v96->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
LABEL_136:
          v38[417] = v99;
          v38[418] = md::LabelExternalPointFeature::isLeafClusterChild(v217);
          v38[264] = 1;
          v38[265] = *(_QWORD *)(v40 + 184) != 0;
          v133 = v209;
          v134 = v133;
          if (v133)
            v135 = v133;
          v136 = (void *)*((_QWORD *)v38 + 69);
          *((_QWORD *)v38 + 69) = v134;

          atomic_store(v134 != 0, (unsigned __int8 *)v38 + 419);
          v137 = atomic_load((unsigned __int8 *)v38 + 419);
          v38[167] = v137 & 1;
          v138 = v230;
          if (!v230)
            goto LABEL_142;
          v139 = (unint64_t *)&v230->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
            v141 = v231;
            if (v231)
LABEL_143:
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v234 + 40))(v234, v141, v233 - v141);
          }
          else
          {
LABEL_142:
            v141 = v231;
            if (v231)
              goto LABEL_143;
          }

          v142 = v220;
          v219 = v38 + 24;
          v220 = (std::__shared_weak_count *)v38;
          if (!v142)
            goto LABEL_148;
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
            v128 = v218;
            if (!v218)
              goto LABEL_153;
          }
          else
          {
LABEL_148:
            v128 = v218;
            if (!v218)
              goto LABEL_153;
          }
          v145 = (unint64_t *)&v128->__shared_owners_;
          do
            v130 = __ldaxr(v145);
          while (__stlxr(v130 - 1, v145));
          goto LABEL_151;
        }
        if (!objc_msgSend(v20, "isLineFeature"))
        {
          v33 = 0;
          v88 = 1;
          goto LABEL_203;
        }
        v60 = (uint64_t *)objc_msgSend(v20, "feature");
        v62 = *v60;
        v61 = (std::__shared_weak_count *)v60[1];
        v231 = *v60;
        v232 = v61;
        if (v61)
        {
          v63 = (unint64_t *)&v61->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v65 = (char *)operator new(0x248uLL);
        *((_QWORD *)v65 + 1) = 0;
        *((_QWORD *)v65 + 2) = 0;
        *(_QWORD *)v65 = &off_1E42DC4A0;
        v66 = v13;
        md::LineLabelFeature::LineLabelFeature((uint64_t)(v65 + 24), 3, 6);
        *((_QWORD *)v65 + 3) = &off_1E429A0D0;
        *((_QWORD *)v65 + 58) = &unk_1E429A388;
        *((_QWORD *)v65 + 59) = *(_QWORD *)(v62 + 16);
        v67 = 76;
        if (!*(_BYTE *)(v62 + 112))
          v67 = 72;
        *((_DWORD *)v65 + 120) = *(_DWORD *)(v62 + v67);
        *((_DWORD *)v65 + 121) = *(_DWORD *)(v62 + 80);
        *((_QWORD *)v65 + 61) = v62;
        *((_QWORD *)v65 + 62) = v61;
        if (v61)
        {
          v68 = (unint64_t *)&v61->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        *((_QWORD *)v65 + 67) = 0;
        *(_OWORD *)(v65 + 504) = 0u;
        *(_OWORD *)(v65 + 520) = 0u;
        *((_DWORD *)v65 + 136) = 2139095039;
        *((_WORD *)v65 + 274) = 0;
        v65[550] = 0;
        v70 = v66;
        *((_QWORD *)v65 + 69) = &off_1E42B5570;
        *((_QWORD *)v65 + 70) = v70;
        v65[576] = v70 != 0;
        v71 = atomic_load((unsigned __int8 *)v65 + 576);
        v65[167] = v71 & 1;
        v73 = *(_QWORD *)(v231 + 32);
        v72 = *(_QWORD *)(v231 + 40);
        if (v72)
        {
          v74 = (unint64_t *)(v72 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v76 = (std::__shared_weak_count *)*((_QWORD *)v65 + 56);
        *((_QWORD *)v65 + 55) = v73;
        *((_QWORD *)v65 + 56) = v72;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = v231;
        GEOLocationCoordinate3DLerp();
        v83 = v82;
        if (fabs(v80) <= 85.0511169)
        {
          v210 = v81;
          v100 = tan(v80 * 0.00872664626 + 0.785398163);
          v101 = log(v100);
          v102.f64[0] = v210;
          v102.f64[1] = v101;
          *((float64x2_t *)v65 + 33) = vmlaq_f64(v205, (float64x2_t)xmmword_19FFB32D0, v102);
          *(_WORD *)(v65 + 549) = 257;
        }
        else
        {
          v84 = v81 * 0.0174532925;
          v85 = __sincos_stret(v80 * 0.0174532925);
          v86 = 6378137.0 / sqrt(v85.__sinval * v85.__sinval * -0.00669437999 + 1.0);
          v87 = __sincos_stret(v84);
          *((double *)v65 + 63) = v86 * v85.__cosval * v87.__cosval;
          *((double *)v65 + 64) = v86 * v85.__cosval * v87.__sinval;
          *((double *)v65 + 65) = v85.__sinval * 0.99330562 * v86;
          v65[548] = 1;
        }
        if (v83 != 1.79769313e308)
        {
          v103 = v83;
          *((float *)v65 + 136) = v103;
        }
        v104 = *((_QWORD *)v65 + 27);
        *(_BYTE *)(v104 + 122) = 3;
        *(_BYTE *)(v104 + 290) = *(_BYTE *)(v79 + 177) ^ 1;
        {
          v186 = operator new();
          *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v186 + 24) = "VectorKitLabels";
          *(_OWORD *)(v186 + 32) = v204;
          *(_QWORD *)v186 = &off_1E42B5668;
          *(_QWORD *)(v186 + 8) = "VectorKitLabels";
          *(_OWORD *)(v186 + 72) = 0u;
          *(_OWORD *)(v186 + 88) = 0u;
          *(_OWORD *)(v186 + 104) = 0u;
          *(_OWORD *)(v186 + 120) = 0u;
          *(_OWORD *)(v186 + 136) = 0u;
          *(_OWORD *)(v186 + 152) = 0u;
          *(_OWORD *)(v186 + 168) = 0u;
          *(_OWORD *)(v186 + 184) = 0u;
          *(_OWORD *)(v186 + 200) = 0u;
          *(_OWORD *)(v186 + 216) = 0u;
          *(_OWORD *)(v186 + 232) = 0u;
          *(_QWORD *)(v186 + 248) = 0;
          *(_OWORD *)(v186 + 56) = 0u;
          v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
          if ((_DWORD)v187)
            geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v186 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v186;
        }
        v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
        v107 = v106;
        v211 = v70;
        v109 = v231;
        v108 = v232;
        if (v232)
        {
          v110 = (unint64_t *)&v232->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        *(_DWORD *)v106 = 7;
        *(_OWORD *)(v106 + 8) = 0u;
        *(_OWORD *)(v106 + 24) = 0u;
        *(_OWORD *)(v106 + 40) = 0u;
        *(_OWORD *)(v106 + 56) = 0u;
        *(_OWORD *)(v106 + 72) = 0u;
        *(_QWORD *)(v106 + 88) = 0;
        {
          v190 = operator new();
          *(_QWORD *)(v190 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v190 + 24) = "VectorKitLabels";
          *(_OWORD *)(v190 + 32) = v204;
          *(_QWORD *)v190 = &off_1E42B5668;
          *(_QWORD *)(v190 + 8) = "VectorKitLabels";
          *(_OWORD *)(v190 + 72) = 0u;
          *(_OWORD *)(v190 + 88) = 0u;
          *(_OWORD *)(v190 + 104) = 0u;
          *(_OWORD *)(v190 + 120) = 0u;
          *(_OWORD *)(v190 + 136) = 0u;
          *(_OWORD *)(v190 + 152) = 0u;
          *(_OWORD *)(v190 + 168) = 0u;
          *(_OWORD *)(v190 + 184) = 0u;
          *(_OWORD *)(v190 + 200) = 0u;
          *(_OWORD *)(v190 + 216) = 0u;
          *(_OWORD *)(v190 + 232) = 0u;
          *(_QWORD *)(v190 + 248) = 0;
          v208 = v190;
          *(_OWORD *)(v190 + 56) = 0u;
          v191 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v190 + 56), 0);
          if ((_DWORD)v191)
            geo::read_write_lock::logFailure(v191, (uint64_t)"initialization", v192);
          v193 = malloc_create_zone(0, 0);
          *(_QWORD *)(v208 + 48) = v193;
          malloc_set_zone_name(v193, "VectorKitLabels");
          *(_QWORD *)(v208 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v208;
        }
        *(_QWORD *)(v107 + 96) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v107 + 104) = 0;
        *(_QWORD *)(v107 + 112) = v109;
        *(_QWORD *)(v107 + 120) = v108;
        if (v108)
        {
          v113 = (unint64_t *)&v108->__shared_owners_;
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
        }
        *(_QWORD *)(v107 + 128) = v65 + 464;
        *(_QWORD *)(v107 + 136) = 0;
        *(_WORD *)(v107 + 144) = 255;
        *(_DWORD *)(v107 + 148) = 0;
        *(_DWORD *)(v107 + 152) = 0;
        *(_QWORD *)(v107 + 168) = 0;
        *(_QWORD *)(v107 + 176) = 0;
        *(int64x2_t *)(v107 + 184) = v207;
        *(int64x2_t *)(v107 + 200) = v206;
        *(_BYTE *)(v107 + 216) = 0;
        *(_DWORD *)(v107 + 220) = 0;
        *(_WORD *)(v107 + 224) = 256;
        *(_BYTE *)(v107 + 226) = 0;
        *(_QWORD *)(v107 + 232) = 0;
        *(_QWORD *)(v107 + 240) = 0;
        v235 = (md::LabelLineStore::WorkUnit *)v107;
        v115 = v211;
        if (v108)
        {
          v116 = (unint64_t *)&v108->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        std::mutex::lock((std::mutex *)(v104 + 16));
        v118 = *(md::LabelLineStore::WorkUnit ***)(v104 + 96);
        if ((unint64_t)v118 >= *(_QWORD *)(v104 + 104))
        {
          v120 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(v104 + 88, (uint64_t *)&v235);
        }
        else
        {
          if (v118)
          {
            v119 = v235;
            v235 = 0;
            *v118 = v119;
          }
          v120 = v118 + 1;
        }
        *(_QWORD *)(v104 + 96) = v120;
        atomic_store(1u, (unsigned __int8 *)(v104 + 80));
        std::mutex::unlock((std::mutex *)(v104 + 16));
        v121 = v235;
        v235 = 0;
        if (v121)
        {
          md::LabelLineStore::WorkUnit::~WorkUnit(v121);
          {
            v194 = operator new();
            *(_QWORD *)(v194 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v194 + 24) = "VectorKitLabels";
            *(_OWORD *)(v194 + 32) = v204;
            *(_QWORD *)v194 = &off_1E42B5668;
            *(_QWORD *)(v194 + 8) = "VectorKitLabels";
            *(_OWORD *)(v194 + 72) = 0u;
            *(_OWORD *)(v194 + 88) = 0u;
            *(_OWORD *)(v194 + 104) = 0u;
            *(_OWORD *)(v194 + 120) = 0u;
            *(_OWORD *)(v194 + 136) = 0u;
            *(_OWORD *)(v194 + 152) = 0u;
            *(_OWORD *)(v194 + 168) = 0u;
            *(_OWORD *)(v194 + 184) = 0u;
            *(_OWORD *)(v194 + 200) = 0u;
            *(_OWORD *)(v194 + 216) = 0u;
            *(_OWORD *)(v194 + 232) = 0u;
            *(_QWORD *)(v194 + 248) = 0;
            *(_OWORD *)(v194 + 56) = 0u;
            v195 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v194 + 56), 0);
            if ((_DWORD)v195)
              geo::read_write_lock::logFailure(v195, (uint64_t)"initialization", v196);
            v197 = malloc_create_zone(0, 0);
            *(_QWORD *)(v194 + 48) = v197;
            malloc_set_zone_name(v197, "VectorKitLabels");
            *(_QWORD *)(v194 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v194;
            v115 = v211;
          }
          (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v121, 248);
        }
        v123 = (unsigned __int8 *)*((_QWORD *)v65 + 27);
        v124 = atomic_load(v123 + 80);
        if ((v124 & 1) != 0)
          md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v123);
        (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)v65 + 3) + 32))(v65 + 24, 0, 1);

        v125 = v220;
        v219 = v65 + 24;
        v220 = (std::__shared_weak_count *)v65;
        if (!v125)
          goto LABEL_127;
        v126 = (unint64_t *)&v125->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
          v128 = v232;
          if (!v232)
            goto LABEL_153;
        }
        else
        {
LABEL_127:
          v128 = v232;
          if (!v232)
            goto LABEL_153;
        }
        v129 = (unint64_t *)&v128->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
LABEL_151:
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
LABEL_153:
        v146 = (uint64_t)v219;
        v147 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 1) + 288) + 680);
        do
        {
          v148 = __ldaxr(v147);
          v149 = v148 + 1;
        }
        while (__stlxr(v149, v147));
        *(_QWORD *)(v146 + 72) = v149;
        v150 = v226;
        v151 = v227;
        if ((unint64_t)v226 < v227)
        {
          if (v226)
          {
            *v226 = v146;
            v152 = v220;
            v150[1] = (uint64_t)v220;
            if (v152)
            {
              v153 = (unint64_t *)&v152->__shared_owners_;
              do
                v154 = __ldxr(v153);
              while (__stxr(v154 + 1, v153));
            }
          }
          v155 = v150 + 2;
          goto LABEL_186;
        }
        v156 = v225;
        v157 = ((char *)v226 - (char *)v225) >> 4;
        v158 = v157 + 1;
        if ((unint64_t)(v157 + 1) >> 60)
          abort();
        if ((uint64_t)(v227 - (_QWORD)v225) >> 3 > v158)
          v158 = (uint64_t)(v227 - (_QWORD)v225) >> 3;
        if (v227 - (unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0)
          v159 = 0xFFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v228 + 16))(v228, 16 * v159, 8);
          v161 = (uint64_t *)(v160 + 16 * v157);
          v162 = v160 + 16 * v159;
          if (v160)
          {
            *v161 = v146;
            v163 = v220;
            v161[1] = (uint64_t)v220;
            if (v163)
            {
              v164 = (unint64_t *)&v163->__shared_owners_;
              do
                v165 = __ldxr(v164);
              while (__stxr(v165 + 1, v164));
            }
          }
        }
        else
        {
          v162 = 0;
          v161 = (uint64_t *)(16 * v157);
        }
        v155 = v161 + 2;
        if (v150 != v156)
        {
          v166 = v150;
          do
          {
            v167 = *((_OWORD *)v166 - 1);
            v166 -= 2;
            *((_OWORD *)v161 - 1) = v167;
            v161 -= 2;
            *v166 = 0;
            v166[1] = 0;
          }
          while (v166 != v156);
          v225 = v161;
          v226 = v155;
          v227 = v162;
          do
          {
            v168 = (std::__shared_weak_count *)*(v150 - 1);
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            v150 -= 2;
          }
          while (v150 != v156);
          v150 = v156;
          if (!v156)
            goto LABEL_186;
LABEL_185:
          (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v228 + 40))(v228, v150, v151 - (_QWORD)v150);
          goto LABEL_186;
        }
        v225 = v161;
        v227 = v162;
        if (v150)
          goto LABEL_185;
LABEL_186:
        v226 = v155;
        if ((a3 & 1) == 0)
          v219[144] = 1;
LABEL_188:
        v171 = *v6;
        v172 = (uint64_t **)((char *)this + 208);
        v173 = (uint64_t **)((char *)this + 208);
        if (*v6)
        {
          while (1)
          {
            while (1)
            {
              v173 = (uint64_t **)v171;
              v174 = v171[4];
              if ((unint64_t)v13 >= v174)
                break;
              v171 = *v173;
              v172 = v173;
              if (!*v173)
                goto LABEL_195;
            }
            if (v174 >= (unint64_t)v13)
              break;
            v171 = v173[1];
            if (!v171)
            {
              v172 = v173 + 1;
              goto LABEL_195;
            }
          }
          v175 = v173;
        }
        else
        {
LABEL_195:
          v175 = (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 27) + 16))(*((_QWORD *)this + 27), 64, 8);
          v176 = v13;
          v178 = v219;
          v177 = v220;
          v175[4] = v176;
          v175[5] = (uint64_t *)v178;
          v175[6] = (uint64_t *)v177;
          if (v177)
          {
            v179 = (unint64_t *)&v177->__shared_owners_;
            do
              v180 = __ldxr(v179);
            while (__stxr(v180 + 1, v179));
          }
          v175[7] = (uint64_t *)1;
          *v175 = 0;
          v175[1] = 0;
          v175[2] = (uint64_t *)v173;
          *v172 = (uint64_t *)v175;
          v181 = **((_QWORD **)this + 25);
          v182 = (uint64_t *)v175;
          if (v181)
          {
            *((_QWORD *)this + 25) = v181;
            v182 = *v172;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 26), v182);
          ++*((_QWORD *)this + 28);
        }
        v88 = 0;
        v33 = v175 + 5;
LABEL_203:

        v183 = v220;
        if (v220)
        {
          v184 = (unint64_t *)&v220->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        if (((v88 | a3 ^ 1) & 1) == 0)
          goto LABEL_209;
LABEL_210:

      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v221, v238, 16);
    }
    while (v5);
  }

  v198 = v225;
  v199 = v226;
  if (v225 != v226 && (a3 & 1) == 0)
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*((_QWORD *)this + 1) + 296), &v225);
  if (v198)
  {
    if (v198 != v199)
    {
      do
      {
        v200 = (std::__shared_weak_count *)*(v199 - 1);
        if (v200)
        {
          v201 = (unint64_t *)&v200->__shared_owners_;
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        v199 -= 2;
      }
      while (v199 != v198);
      v198 = v225;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v228 + 40))(v228, v198, v227 - (_QWORD)v198);
  }

}

void sub_19F2FC7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,md::PointLabelFeature *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a52);

  _Unwind_Resume(a1);
}

id md::LabelCustomFeatureSupport::filterAnnotations(uint64_t a1, void *a2)
{
  md::VenueLogicContext *v3;
  BOOL v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t j;
  void *v17;
  void *v18;
  id v20;
  md::VenueLogicContext *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v20, "count"));
  v22 = (id)objc_claimAutoreleasedReturnValue();
  v3 = *(md::VenueLogicContext **)(*(_QWORD *)(a1 + 16) + 1672);
  v21 = v3;
  if (v3)
    v4 = *((_QWORD *)v3 + 34) != 0;
  else
    v4 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = v20;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v24;
    if (v4)
    {
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v24 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
          objc_msgSend(v9, "feature");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v10, "isPointFeature"))
          {
            v11 = objc_msgSend(v10, "venueID");
            v12 = objc_msgSend(v10, "venueBuildingID");
            v13 = objc_msgSend(v10, "venueLevelID");
            v14 = objc_msgSend(v10, "venueFloorOrdinal");
            if (v11)
              v15 = v13 == 0;
            else
              v15 = 1;
            if (v15
              || md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId((int8x8_t *)v21, v12) == v14)
            {
              objc_msgSend(v22, "addObject:", v9);
            }
          }

        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v6);
    }
    else
    {
      do
      {
        for (j = 0; j != v6; ++j)
        {
          if (*(_QWORD *)v24 != v7)
            objc_enumerationMutation(v5);
          v17 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
          objc_msgSend(v17, "feature");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v18, "isPointFeature") & 1) != 0)
            objc_msgSend(v22, "addObject:", v17);

        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v6);
    }
  }

  return v22;
}

void sub_19F2FCC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

_QWORD *md::LabelManager::startStylesheetAnimation(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  char v19;
  uint8_t buf[8];
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = v23;
  v21[0] = &off_1E42CA250;
  v22 = v21;
  v23[0] = &off_1E42CA208;
  v26 = v25;
  v25[0] = &off_1E42CA250;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v4 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetAnimation", (const char *)&unk_1A0189141, buf, 2u);
  }

  v5 = v22;
  if (v22 == v21)
  {
    v6 = 4;
    v5 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = v24;
  if (v24 == v23)
  {
    v8 = 4;
    v7 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  *(_WORD *)(a1 + 3373) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 136))(*(_QWORD *)(a1 + 240));
  *(_WORD *)(a1 + 3375) = 257;
  v9 = *(_DWORD *)(a1 + 3312);
  if ((v9 + 1) > 1)
    v10 = v9 + 1;
  else
    v10 = 1;
  *(_DWORD *)(a1 + 3312) = v10;
  if (md::LabelStyleCache::setVariantStyleType(*(_QWORD *)(a1 + 336), a2))
  {
    v11 = *(_QWORD *)(a1 + 168);
    v12 = *(_QWORD **)v11;
    v13 = *(_QWORD **)(v11 + 8);
    if (*(_QWORD **)v11 != v13)
    {
      do
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 8))(*v12);
        ++v12;
      }
      while (v12 != v13);
    }
  }
  v14 = atomic_load((unsigned __int8 *)(a1 + 3058));
  if ((v14 & 1) != 0)
  {
    v15 = *(_QWORD *)(a1 + 136);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 56);
      if (v16)
      {
        *(_QWORD *)buf = a1;
        v19 = 9;
        (*(void (**)(uint64_t, uint8_t *, char *))(*(_QWORD *)v16 + 48))(v16, buf, &v19);
      }
    }
  }
  if (!v26)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v26 + 48))(v26);
  result = v26;
  if (v26 == v25)
  {
    v18 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

void sub_19F2FCEE8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F2FCEF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 48);
  if (v3 == (_QWORD *)(v1 - 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 72);
  }
  else
  {
    if (!v3)
      _Unwind_Resume(exception_object);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  _Unwind_Resume(exception_object);
}

void sub_19F2FCF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::stylesheetAnimationDidStart(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::MapNavLabeler::stylesheetAnimationDidStart(id *this)
{
  return objc_msgSend(this[7], "styleManagerDidStartAnimating");
}

uint64_t md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::PairedMapTileDataRenderable(uint64_t a1, uint64_t *a2, char a3, char a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;

  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(a1, v9, (uint64_t)v10, a3, a4, a5);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_1E426F3E0;
  *(_QWORD *)(a1 + 384) = *a2;
  v15 = a2[1];
  *(_QWORD *)(a1 + 392) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)a1 = &off_1E426F8E8;
  *(_QWORD *)(a1 + 400) = *a6;
  v18 = a6[1];
  *(_QWORD *)(a1 + 408) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(a1 + 416) = v21;
  *(_QWORD *)(a1 + 424) = 1;
  *v21 = 1;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 448) = 1;
  *(_BYTE *)(a1 + 456) = 1;
  md::BaseMapTileDataRenderable::_setupLocalBasisForTiled(a1, *(const md::MapTileData **)(a1 + 400));
  return a1;
}

void sub_19F2FD110(_Unwind_Exception *a1)
{
  md::BaseMapTileDataRenderable *v1;
  void **v2;

  if (*v2)
    operator delete(*v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 400);
  md::MapTileDataRenderable<md::ElevatedStrokeTileData>::~MapTileDataRenderable(v1);
  _Unwind_Resume(a1);
}

void sub_19F2FD140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::~TransitRenderLayer(md::TransitRenderLayer *this)
{
  md::TransitRenderLayer::~TransitRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  md::CTransitRenderResources *v5;

  *(_QWORD *)this = &off_1E4296680;
  *((_BYTE *)this + 32) = 0;
  md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::clearScene((uint64_t)this);
  *((_BYTE *)this + 32) = 0;
  (*(void (**)(md::TransitRenderLayer *))(*(_QWORD *)this + 48))(this);
  md::TransitRenderLayer::updateActiveTileDatas(this);
  objc_msgSend(*(id *)(*((_QWORD *)this + 47) + 112), "stop");
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 63));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 60));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 57));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 54));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (md::CTransitRenderResources *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
  {
    md::CTransitRenderResources::~CTransitRenderResources(v5);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer(this);
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A55D8;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::TransitTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F2FD2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::updateActiveTileDatas(md::TransitRenderLayer *this)
{
  uint64_t **v2;
  _QWORD *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  const void *v23;
  size_t v24;
  const void *v25;
  const void *v26;
  size_t v27;
  const void *v28;
  const void *v29;
  size_t v30;
  const void *v31;
  unsigned int v32;
  const void *v33;
  size_t v34;
  const void *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  _QWORD *v47;
  signed int v48;
  signed int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  int v53;
  _DWORD *v54;
  _QWORD *v55;
  _BOOL4 v56;
  BOOL v57;
  _QWORD *v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  int64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t *v74;
  void *v75;
  int8x8_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  int8x8_t *k;
  uint64_t v80;
  int8x8_t v81;
  unint64_t v82;
  uint8x8_t v83;
  unint64_t v84;
  _QWORD **v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  unsigned __int8 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  const void *v133;
  size_t v134;
  const void *v135;
  const void *v136;
  size_t v137;
  const void *v138;
  const void *v139;
  size_t v140;
  const void *v141;
  unsigned int v142;
  const void *v143;
  size_t v144;
  const void *v145;
  uint64_t v146;
  signed int v147;
  signed int v148;
  unsigned int v149;
  int v150;
  int v151;
  _DWORD *v152;
  uint64_t **v153;
  _QWORD *v154;
  int v155;
  int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t *v160;
  char v161;
  unint64_t v162;
  char *v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  __int128 *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *p_shared_owners;
  unint64_t v186;
  unint64_t *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  _QWORD *v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  __int128 v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  __int128 v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint8x8_t v214;
  _QWORD **v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  float v219;
  float v220;
  _BOOL8 v221;
  unint64_t v222;
  unint64_t v223;
  size_t prime;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  size_t v230;
  size_t v231;
  size_t v232;
  _QWORD *i;
  size_t v234;
  uint64_t v235;
  unint64_t v236;
  uint8x8_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  size_t v241;
  _QWORD *v242;
  std::mutex *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int8x8_t v258;
  uint8x8_t v259;
  unint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  int8x8_t v266;
  uint8x8_t v267;
  unint64_t v268;
  _QWORD **v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  _QWORD *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  _QWORD *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  _QWORD *v286;
  unint64_t *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  char *v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  __int128 v313;
  unint64_t *v314;
  unint64_t v315;
  char *v316;
  __int128 v317;
  char *v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unsigned __int8 v328;
  unint64_t *v329;
  unint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  unint64_t *v338;
  md::TransitRenderLayer *v339;
  _QWORD *v340;
  char *v341;
  std::mutex *v342;
  _QWORD *v343;
  __int128 v344;
  void *__p;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  _QWORD *v352;
  std::__shared_weak_count *v353;

  v2 = (uint64_t **)((char *)this + 472);
  v3 = (_QWORD *)((char *)this + 496);
  v4 = (char *)this + 480;
  v5 = *(_OWORD *)((char *)this + 472);
  v6 = *((_QWORD *)this + 61);
  v7 = *((_QWORD *)this + 63);
  v8 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 59) = *((_QWORD *)this + 62);
  *((_QWORD *)this + 60) = v7;
  *((_OWORD *)this + 31) = v5;
  *((_QWORD *)this + 61) = v8;
  *((_QWORD *)this + 64) = v6;
  v9 = (_QWORD *)(v7 + 16);
  if (!v8)
    v9 = (_QWORD *)((char *)this + 472);
  *v9 = v4;
  if (v6)
    v3 = (_QWORD *)(*((_QWORD *)this + 63) + 16);
  v334 = (_QWORD *)((char *)this + 504);
  *v3 = (char *)this + 504;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 60));
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  v335 = v4;
  *((_QWORD *)this + 59) = v4;
  v339 = this;
  v10 = (uint64_t *)*((_QWORD *)this + 34);
  v11 = (uint64_t *)*((_QWORD *)this + 35);
  while (v10 != v11)
  {
    v12 = *v10++;
    std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(v2, *(_QWORD *)(v12 + 384), *(_QWORD *)(v12 + 384), *(_QWORD *)(v12 + 392));
  }
  v13 = (_QWORD *)*((_QWORD *)v339 + 53);
  v336 = (_QWORD *)((char *)v339 + 432);
  if (v13 != (_QWORD *)((char *)v339 + 432))
  {
    do
    {
      v125 = (_QWORD *)*v334;
      v337 = v13;
      v126 = v13[4];
      if (*v334)
      {
        v127 = *(unsigned __int8 *)(v126 + 16);
        v128 = *(unsigned __int16 *)(v126 + 24);
        while (1)
        {
          v129 = v125[4];
          v130 = *(unsigned __int8 *)(v129 + 16);
          v131 = *(unsigned __int16 *)(v129 + 24);
          if (v127 != v130 || v128 != v131)
            break;
          if (*(_QWORD *)(v126 + 96) != *(_QWORD *)(v129 + 96))
            goto LABEL_216;
          v133 = *(const void **)(v126 + 32);
          v134 = *(_QWORD *)(v126 + 40) - (_QWORD)v133;
          v135 = *(const void **)(v129 + 32);
          if (v134 != *(_QWORD *)(v129 + 40) - (_QWORD)v135 || memcmp(v133, v135, v134))
            goto LABEL_216;
          v131 = v128;
          if (*(_QWORD *)(v126 + 136) < *(_QWORD *)(v129 + 136))
            goto LABEL_205;
LABEL_220:
          if (v130 == *(unsigned __int8 *)(v126 + 16)
            && v131 == *(unsigned __int16 *)(v126 + 24)
            && *(_QWORD *)(v129 + 96) == *(_QWORD *)(v126 + 96)
            && (v139 = *(const void **)(v129 + 32),
                v140 = *(_QWORD *)(v129 + 40) - (_QWORD)v139,
                v141 = *(const void **)(v126 + 32),
                v140 == *(_QWORD *)(v126 + 40) - (_QWORD)v141)
            && !memcmp(v139, v141, v140))
          {
            if (*(_QWORD *)(v129 + 136) >= *(_QWORD *)(v126 + 136))
              goto LABEL_532;
          }
          else
          {
            v142 = *(unsigned __int16 *)(v126 + 24);
            if (v131 == v142)
            {
              if (*(_QWORD *)(v129 + 96) == *(_QWORD *)(v126 + 96)
                && (v143 = *(const void **)(v129 + 32),
                    v144 = *(_QWORD *)(v129 + 40) - (_QWORD)v143,
                    v145 = *(const void **)(v126 + 32),
                    v144 == *(_QWORD *)(v126 + 40) - (_QWORD)v145)
                && !memcmp(v143, v145, v144))
              {
                if (v130 >= *(unsigned __int8 *)(v126 + 16))
                  goto LABEL_532;
              }
              else if (!gdc::GenericKey::operator<(*(_QWORD *)(v129 + 32), *(_QWORD *)(v129 + 40), *(_QWORD *)(v126 + 32), *(_QWORD *)(v126 + 40)))
              {
                goto LABEL_532;
              }
            }
            else if (v131 >= v142)
            {
              goto LABEL_532;
            }
          }
          ++v125;
LABEL_205:
          v125 = (_QWORD *)*v125;
          if (!v125)
            goto LABEL_239;
        }
        if (v128 != v131)
        {
          if (v128 < v131)
            goto LABEL_205;
          goto LABEL_220;
        }
LABEL_216:
        if (*(_QWORD *)(v126 + 96) == *(_QWORD *)(v129 + 96)
          && (v136 = *(const void **)(v126 + 32),
              v137 = *(_QWORD *)(v126 + 40) - (_QWORD)v136,
              v138 = *(const void **)(v129 + 32),
              v137 == *(_QWORD *)(v129 + 40) - (_QWORD)v138)
          && !memcmp(v136, v138, v137))
        {
          v131 = v128;
          if (v127 < v130)
            goto LABEL_205;
        }
        else
        {
          v131 = v128;
          if (gdc::GenericKey::operator<(*(_QWORD *)(v126 + 32), *(_QWORD *)(v126 + 40), *(_QWORD *)(v129 + 32), *(_QWORD *)(v129 + 40)))
          {
            goto LABEL_205;
          }
        }
        goto LABEL_220;
      }
LABEL_239:
      v146 = *(_QWORD *)(*((_QWORD *)v339 + 47) + 80);
      v147 = *(_DWORD *)(v126 + 172);
      v148 = *(_DWORD *)(v126 + 176);
      __p = (void *)__PAIR64__(v147, v148);
      v149 = *(unsigned __int8 *)(v126 + 169);
      LODWORD(v346) = v149;
      v150 = 1 << v149;
      if (v148 < 0)
      {
        v148 += v150;
      }
      else
      {
        v52 = __OFSUB__(v148, v150);
        v151 = v148 - v150;
        if (v151 < 0 != v52)
          goto LABEL_244;
        v148 = v151;
      }
      LODWORD(__p) = v148;
LABEL_244:
      v153 = (uint64_t **)(v146 + 8);
      v152 = *(_DWORD **)(v146 + 8);
      if (v152)
      {
        while (1)
        {
          while (1)
          {
            v154 = v152;
            v155 = v152[8];
            if (v148 == v155)
              break;
            if (v148 < v155)
              goto LABEL_246;
            if (v155 >= v148)
              goto LABEL_262;
LABEL_257:
            v152 = (_DWORD *)v154[1];
            if (!v152)
            {
              v153 = (uint64_t **)(v154 + 1);
              goto LABEL_259;
            }
          }
          v156 = *((_DWORD *)v154 + 9);
          if (v147 != v156)
          {
            if (v147 < v156)
              goto LABEL_246;
            if (v156 >= v147)
            {
LABEL_262:
              v161 = 1;
              goto LABEL_263;
            }
            goto LABEL_257;
          }
          v157 = *((_DWORD *)v154 + 10);
          if (v157 <= v149)
          {
            if (v157 >= v149)
              goto LABEL_262;
            goto LABEL_257;
          }
LABEL_246:
          v152 = (_DWORD *)*v154;
          v153 = (uint64_t **)v154;
          if (!*v154)
            goto LABEL_259;
        }
      }
      v154 = (_QWORD *)(v146 + 8);
LABEL_259:
      v158 = v154;
      v154 = operator new(0x50uLL);
      *((_DWORD *)v154 + 8) = v148;
      *((_DWORD *)v154 + 9) = v147;
      *((_DWORD *)v154 + 10) = v149;
      *((_DWORD *)v154 + 12) = 0;
      *v154 = 0;
      v154[1] = 0;
      v154[8] = 0;
      v154[9] = 0;
      v154[7] = 0;
      v154[2] = v158;
      *v153 = v154;
      v159 = **(_QWORD **)v146;
      v160 = v154;
      if (v159)
      {
        *(_QWORD *)v146 = v159;
        v160 = *v153;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v146 + 8), v160);
      v161 = 0;
      ++*(_QWORD *)(v146 + 16);
LABEL_263:
      v163 = (char *)v154[8];
      v162 = v154[9];
      if ((unint64_t)v163 >= v162)
      {
        v165 = (char *)v154[7];
        v166 = (v163 - v165) >> 3;
        v167 = v166 + 1;
        if ((unint64_t)(v166 + 1) >> 61)
          abort();
        v168 = v162 - (_QWORD)v165;
        if (v168 >> 2 > v167)
          v167 = v168 >> 2;
        if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
          v169 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v169 = v167;
        if (v169)
        {
          if (v169 >> 61)
LABEL_538:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v170 = (char *)operator new(8 * v169);
        }
        else
        {
          v170 = 0;
        }
        v171 = &v170[8 * v166];
        *(_QWORD *)v171 = v126;
        v164 = v171 + 8;
        if (v163 != v165)
        {
          v172 = v163 - v165 - 8;
          if (v172 < 0x58)
            goto LABEL_543;
          if ((unint64_t)(v165 - v170) < 0x20)
            goto LABEL_543;
          v173 = (v172 >> 3) + 1;
          v174 = &v170[8 * v166 - 16];
          v175 = (__int128 *)(v163 - 16);
          v176 = v173 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v177 = *v175;
            *((_OWORD *)v174 - 1) = *(v175 - 1);
            *(_OWORD *)v174 = v177;
            v174 -= 32;
            v175 -= 2;
            v176 -= 4;
          }
          while (v176);
          v171 -= 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
          v163 -= 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
          if (v173 != (v173 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_543:
            do
            {
              v178 = *((_QWORD *)v163 - 1);
              v163 -= 8;
              *((_QWORD *)v171 - 1) = v178;
              v171 -= 8;
            }
            while (v163 != v165);
          }
          v163 = (char *)v154[7];
        }
        v154[7] = v171;
        v154[8] = v164;
        v154[9] = &v170[8 * v169];
        if (v163)
          operator delete(v163);
      }
      else
      {
        *(_QWORD *)v163 = v126;
        v164 = v163 + 8;
      }
      v154[8] = v164;
      if ((v161 & 1) == 0)
        md::TransitInterTileMediator::updateTileInfos(v146, (int *)&__p, (uint64_t)(v154 + 6));
      v179 = *((_QWORD *)v339 + 47);
      v181 = *(_QWORD *)(v179 + 80);
      v180 = *(_QWORD *)(v179 + 88);
      if (v180)
      {
        v182 = (unint64_t *)(v180 + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      *(_QWORD *)(v126 + 1232) = v181;
      v184 = *(std::__shared_weak_count **)(v126 + 1240);
      *(_QWORD *)(v126 + 1240) = v180;
      if (v184)
      {
        p_shared_owners = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldaxr(p_shared_owners);
        while (__stlxr(v186 - 1, p_shared_owners));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      *(_BYTE *)(v126 + 1371) = 1;
      *(_BYTE *)(v126 + 1369) = 1;
      if (*(_QWORD *)(v126 + 784))
      {
        v187 = *(unint64_t **)(v126 + 888);
        v188 = *(unint64_t **)(v126 + 896);
        if (v187 != v188)
        {
          v338 = *(unint64_t **)(v126 + 896);
          while (1)
          {
            v189 = v187[3];
            if (!v189)
              break;
LABEL_299:
            atomic_store(1u, (unsigned __int8 *)(v189 + 104));
            v187 += 31;
            if (v187 == v188)
              goto LABEL_414;
          }
          v190 = *(_QWORD *)(v126 + 784);
          v191 = *v187;
          v192 = v190 + 304;
          std::mutex::lock((std::mutex *)(v190 + 304));
          v193 = (uint64_t *)(v190 + 192);
          v194 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v190 + 192), v191);
          if (v194
            && (v195 = v194, (v196 = (std::__shared_weak_count *)v194[4]) != 0)
            && (v197 = std::__shared_weak_count::lock(v196), (*((_QWORD *)&v198 + 1) = v197) != 0))
          {
            v199 = v197;
            v200 = v195[3];
            *(_QWORD *)&v198 = v200;
            v344 = v198;
            std::mutex::unlock((std::mutex *)(v190 + 304));
            if (v200)
            {
LABEL_399:
              v248 = (std::__shared_weak_count *)v187[4];
              *(_OWORD *)(v187 + 3) = v344;
              if (v248)
              {
                v249 = (unint64_t *)&v248->__shared_owners_;
                do
                  v250 = __ldaxr(v249);
                while (__stlxr(v250 - 1, v249));
                if (!v250)
                {
                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                  std::__shared_weak_count::__release_weak(v248);
                }
              }
              v189 = v187[3];
              goto LABEL_299;
            }
          }
          else
          {
            std::mutex::unlock((std::mutex *)(v190 + 304));
            v199 = 0;
          }
          v201 = (char *)operator new(0x88uLL);
          v202 = v201;
          *((_QWORD *)v201 + 1) = 0;
          *((_QWORD *)v201 + 2) = 0;
          *(_QWORD *)v201 = &off_1E42DCFC8;
          *((_QWORD *)v201 + 3) = v191;
          v203 = v201 + 24;
          *((_QWORD *)v201 + 4) = *(_QWORD *)(v190 + 16);
          v204 = *(_QWORD *)(v190 + 24);
          *((_QWORD *)v201 + 5) = v204;
          if (v204)
          {
            v205 = (unint64_t *)(v204 + 8);
            do
              v206 = __ldxr(v205);
            while (__stxr(v206 + 1, v205));
          }
          *((_QWORD *)v201 + 6) = 0;
          *((_QWORD *)v201 + 7) = 0;
          *((_QWORD *)v201 + 8) = 850045863;
          *(_OWORD *)(v201 + 72) = 0u;
          *(_OWORD *)(v201 + 88) = 0u;
          *(_OWORD *)(v201 + 104) = 0u;
          *(_OWORD *)(v201 + 114) = 0u;
          if (v199)
          {
            v207 = (unint64_t *)&v199->__shared_owners_;
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          v341 = v203;
          *(_QWORD *)&v209 = v203;
          *((_QWORD *)&v209 + 1) = v202;
          v344 = v209;
          std::mutex::lock((std::mutex *)(v190 + 304));
          v210 = 0x9DDFEA08EB382D69 * (((8 * v191) + 8) ^ HIDWORD(v191));
          v211 = 0x9DDFEA08EB382D69 * (HIDWORD(v191) ^ (v210 >> 47) ^ v210);
          v212 = 0x9DDFEA08EB382D69 * (v211 ^ (v211 >> 47));
          v213 = *(_QWORD *)(v190 + 200);
          if (v213)
          {
            v214 = (uint8x8_t)vcnt_s8((int8x8_t)v213);
            v214.i16[0] = vaddlv_u8(v214);
            if (v214.u32[0] > 1uLL)
            {
              v192 = 0x9DDFEA08EB382D69 * (v211 ^ (v211 >> 47));
              if (v212 >= v213)
                v192 = v212 % v213;
            }
            else
            {
              v192 = v212 & (v213 - 1);
            }
            v215 = *(_QWORD ***)(*v193 + 8 * v192);
            if (v215)
            {
              v216 = *v215;
              if (*v215)
              {
                if (v214.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v218 = v216[1];
                    if (v218 == v212)
                    {
                      if (v216[2] == v191)
                        goto LABEL_404;
                    }
                    else if ((v218 & (v213 - 1)) != v192)
                    {
                      goto LABEL_335;
                    }
                    v216 = (_QWORD *)*v216;
                    if (!v216)
                      goto LABEL_335;
                  }
                }
                do
                {
                  v217 = v216[1];
                  if (v217 == v212)
                  {
                    if (v216[2] == v191)
                    {
LABEL_404:
                      v188 = v338;
                      v243 = (std::mutex *)(v190 + 304);
                      goto LABEL_394;
                    }
                  }
                  else
                  {
                    if (v217 >= v213)
                      v217 %= v213;
                    if (v217 != v192)
                      break;
                  }
                  v216 = (_QWORD *)*v216;
                }
                while (v216);
              }
            }
          }
LABEL_335:
          v216 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 224) + 16))(*(_QWORD *)(v190 + 224), 40, 8);
          *v216 = 0;
          v216[1] = v212;
          v216[3] = 0;
          v216[4] = 0;
          v216[2] = v191;
          v219 = (float)(unint64_t)(*(_QWORD *)(v190 + 232) + 1);
          v220 = *(float *)(v190 + 240);
          if (v213 && (float)(v220 * (float)v213) >= v219)
          {
LABEL_384:
            v242 = *(_QWORD **)(*v193 + 8 * v192);
            if (v242)
            {
              *v216 = *v242;
              v188 = v338;
              v243 = (std::mutex *)(v190 + 304);
            }
            else
            {
              *v216 = *(_QWORD *)(v190 + 216);
              *(_QWORD *)(v190 + 216) = v216;
              *(_QWORD *)(*(_QWORD *)(v190 + 192) + 8 * v192) = v190 + 216;
              v188 = v338;
              v243 = (std::mutex *)(v190 + 304);
              if (!*v216)
                goto LABEL_393;
              v244 = *(_QWORD *)(*v216 + 8);
              if ((v213 & (v213 - 1)) != 0)
              {
                if (v244 >= v213)
                  v244 %= v213;
              }
              else
              {
                v244 &= v213 - 1;
              }
              v242 = (_QWORD *)(*v193 + 8 * v244);
            }
            *v242 = v216;
LABEL_393:
            ++*(_QWORD *)(v190 + 232);
LABEL_394:
            v245 = (unint64_t *)(v202 + 16);
            do
              v246 = __ldxr(v245);
            while (__stxr(v246 + 1, v245));
            v247 = (std::__shared_weak_count *)v216[4];
            v216[3] = v341;
            v216[4] = v202;
            if (v247)
              std::__shared_weak_count::__release_weak(v247);
            std::mutex::unlock(v243);
            goto LABEL_399;
          }
          v221 = (v213 & (v213 - 1)) != 0;
          if (v213 < 3)
            v221 = 1;
          v222 = v221 | (2 * v213);
          v223 = vcvtps_u32_f32(v219 / v220);
          if (v222 <= v223)
            prime = v223;
          else
            prime = v222;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v213 = *(_QWORD *)(v190 + 200);
          if (prime <= v213)
          {
            if (prime >= v213)
              goto LABEL_371;
            v236 = vcvtps_u32_f32((float)*(unint64_t *)(v190 + 232) / *(float *)(v190 + 240));
            if (v213 < 3
              || (v237 = (uint8x8_t)vcnt_s8((int8x8_t)v213), v237.i16[0] = vaddlv_u8(v237), v237.u32[0] > 1uLL))
            {
              v236 = std::__next_prime(v236);
            }
            else
            {
              v238 = 1 << -(char)__clz(v236 - 1);
              if (v236 >= 2)
                v236 = v238;
            }
            if (prime <= v236)
              prime = v236;
            if (prime >= v213)
            {
              v213 = *(_QWORD *)(v190 + 200);
LABEL_371:
              if ((v213 & (v213 - 1)) != 0)
              {
                if (v212 >= v213)
                  v192 = v212 % v213;
                else
                  v192 = v212;
              }
              else
              {
                v192 = (v213 - 1) & v212;
              }
              goto LABEL_384;
            }
            if (!prime)
            {
              v251 = *v193;
              *v193 = 0;
              if (v251)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 208) + 40))(*(_QWORD *)(v190 + 208), v251, 8 * *(_QWORD *)(v190 + 200));
              v213 = 0;
              *(_QWORD *)(v190 + 200) = 0;
              goto LABEL_371;
            }
          }
          v225 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v190 + 208) + 16))(*(_QWORD *)(v190 + 208), 8 * prime, 8);
          v226 = *v193;
          *v193 = v225;
          if (v226)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 208) + 40))(*(_QWORD *)(v190 + 208), v226, 8 * *(_QWORD *)(v190 + 200));
          v227 = 0;
          *(_QWORD *)(v190 + 200) = prime;
          do
            *(_QWORD *)(*v193 + 8 * v227++) = 0;
          while (prime != v227);
          v229 = v190 + 216;
          v228 = *(_QWORD **)(v190 + 216);
          if (!v228)
          {
LABEL_370:
            v213 = prime;
            goto LABEL_371;
          }
          v230 = v228[1];
          v231 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v232 = v230 & v231;
            *(_QWORD *)(*v193 + 8 * v232) = v229;
            for (i = (_QWORD *)*v228; *v228; i = (_QWORD *)*v228)
            {
              v234 = i[1] & v231;
              if (v234 == v232)
              {
                v228 = i;
              }
              else if (*(_QWORD *)(*v193 + 8 * v234))
              {
                *v228 = *i;
                v235 = 8 * v234;
                *i = **(_QWORD **)(*v193 + v235);
                **(_QWORD **)(*v193 + v235) = i;
              }
              else
              {
                *(_QWORD *)(*v193 + 8 * v234) = v228;
                v228 = i;
                v232 = v234;
              }
            }
            goto LABEL_370;
          }
          if (v230 >= prime)
            v230 %= prime;
          *(_QWORD *)(*v193 + 8 * v230) = v229;
          v239 = (_QWORD *)*v228;
          if (!*v228)
            goto LABEL_370;
          while (1)
          {
            v241 = v239[1];
            if (v241 >= prime)
              v241 %= prime;
            if (v241 != v230)
            {
              if (!*(_QWORD *)(*v193 + 8 * v241))
              {
                *(_QWORD *)(*v193 + 8 * v241) = v228;
                goto LABEL_375;
              }
              *v228 = *v239;
              v240 = 8 * v241;
              *v239 = **(_QWORD **)(*v193 + v240);
              **(_QWORD **)(*v193 + v240) = v239;
              v239 = v228;
            }
            v241 = v230;
LABEL_375:
            v228 = v239;
            v239 = (_QWORD *)*v239;
            v230 = v241;
            if (!v239)
              goto LABEL_370;
          }
        }
      }
LABEL_414:
      v252 = *(_QWORD *)(*((_QWORD *)v339 + 47) + 96);
      if (v252)
      {
        *(_QWORD *)(v126 + 1224) = v252;
        v253 = *(_QWORD **)(v126 + 944);
        v254 = *(_QWORD **)(v126 + 952);
        if (v253 != v254)
        {
LABEL_418:
          v255 = *v253;
          *(_BYTE *)(v255 + 64) = 1;
          v256 = *(_QWORD *)(v255 + 8);
          v257 = *(_QWORD *)(v256 + 40);
          v258 = *(int8x8_t *)(v252 + 40);
          if (!*(_QWORD *)&v258)
            goto LABEL_438;
          v259 = (uint8x8_t)vcnt_s8(v258);
          v259.i16[0] = vaddlv_u8(v259);
          if (v259.u32[0] > 1uLL)
          {
            v260 = *(_QWORD *)(v256 + 40);
            if (v257 >= *(_QWORD *)&v258)
              v260 = v257 % *(_QWORD *)&v258;
          }
          else
          {
            v260 = (*(_QWORD *)&v258 - 1) & v257;
          }
          v261 = *(_QWORD **)(*(_QWORD *)(v252 + 32) + 8 * v260);
          if (!v261 || (v262 = (_QWORD *)*v261) == 0)
          {
LABEL_438:
            v352 = 0;
            v353 = 0;
            v266 = *(int8x8_t *)(v252 + 80);
            if (!*(_QWORD *)&v266)
              goto LABEL_458;
            v267 = (uint8x8_t)vcnt_s8(v266);
            v267.i16[0] = vaddlv_u8(v267);
            if (v267.u32[0] > 1uLL)
            {
              v268 = v257;
              if (v257 >= *(_QWORD *)&v266)
                v268 = v257 % *(_QWORD *)&v266;
            }
            else
            {
              v268 = (*(_QWORD *)&v266 - 1) & v257;
            }
            v269 = *(_QWORD ***)(*(_QWORD *)(v252 + 72) + 8 * v268);
            if (!v269 || (v270 = *v269) == 0)
            {
LABEL_458:
              v274 = (std::__shared_weak_count *)operator new(0x50uLL);
              v274->__shared_owners_ = 0;
              v275 = (unint64_t *)&v274->__shared_owners_;
              v274->__shared_weak_owners_ = 0;
              v274->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE80;
              md::TransitNodeFeature::TransitNodeFeature((md::TransitNodeFeature *)&v274[1], v257, *(md::LabelExternalObjectsModerator **)(v252 + 24));
              v352 = &v274[1].__vftable;
              v353 = v274;
              __p = *(void **)(*(_QWORD *)(*v253 + 8) + 40);
              v276 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v252 + 32, (unint64_t)__p, (uint64_t *)&__p);
              do
                v277 = __ldxr(v275);
              while (__stxr(v277 + 1, v275));
              v278 = (std::__shared_weak_count *)v276[4];
              v276[3] = v274 + 1;
              v276[4] = v274;
              if (v278)
              {
                v279 = (unint64_t *)&v278->__shared_owners_;
                do
                  v280 = __ldaxr(v279);
                while (__stlxr(v280 - 1, v279));
                if (!v280)
                {
                  ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                  std::__shared_weak_count::__release_weak(v278);
                }
              }
              goto LABEL_489;
            }
            if (v267.u32[0] < 2uLL)
            {
              v271 = *(_QWORD *)&v266 - 1;
              while (1)
              {
                v273 = v270[1];
                if (v273 == v257)
                {
                  if (v270[2] == v257)
                    goto LABEL_469;
                }
                else if ((v273 & v271) != v268)
                {
                  goto LABEL_458;
                }
                v270 = (_QWORD *)*v270;
                if (!v270)
                  goto LABEL_458;
              }
            }
            while (1)
            {
              v272 = v270[1];
              if (v272 == v257)
              {
                if (v270[2] == v257)
                {
LABEL_469:
                  v286 = (_QWORD *)v270[3];
                  v285 = (std::__shared_weak_count *)v270[4];
                  if (v285)
                  {
                    v287 = (unint64_t *)&v285->__shared_owners_;
                    do
                      v288 = __ldxr(v287);
                    while (__stxr(v288 + 1, v287));
                    v257 = *(_QWORD *)(*(_QWORD *)(*v253 + 8) + 40);
                  }
                  v352 = v286;
                  v353 = v285;
                  __p = (void *)v257;
                  v289 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v252 + 32, v257, (uint64_t *)&__p);
                  if (v285)
                  {
                    v290 = (unint64_t *)&v285->__shared_owners_;
                    do
                      v291 = __ldxr(v290);
                    while (__stxr(v291 + 1, v290));
                  }
                  v292 = (std::__shared_weak_count *)v289[4];
                  v289[3] = v286;
                  v289[4] = v285;
                  if (v292)
                  {
                    v293 = (unint64_t *)&v292->__shared_owners_;
                    do
                      v294 = __ldaxr(v293);
                    while (__stlxr(v294 - 1, v293));
                    if (!v294)
                    {
                      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                      std::__shared_weak_count::__release_weak(v292);
                    }
                  }
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)(v252 + 72), v270);
                  v295 = __p;
                  __p = 0;
                  if (v295)
                  {
                    if ((_BYTE)v347)
                    {
                      v296 = (std::__shared_weak_count *)v295[4];
                      if (v296)
                      {
                        v297 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v298 = __ldaxr(v297);
                        while (__stlxr(v298 - 1, v297));
                        if (!v298)
                        {
                          ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                          std::__shared_weak_count::__release_weak(v296);
                        }
                      }
                    }
                    operator delete(v295);
                  }
                  goto LABEL_489;
                }
              }
              else
              {
                if (v272 >= *(_QWORD *)&v266)
                  v272 %= *(_QWORD *)&v266;
                if (v272 != v268)
                  goto LABEL_458;
              }
              v270 = (_QWORD *)*v270;
              if (!v270)
                goto LABEL_458;
            }
          }
          if (v259.u32[0] < 2uLL)
          {
            v263 = *(_QWORD *)&v258 - 1;
            while (1)
            {
              v265 = v262[1];
              if (v265 == v257)
              {
                if (v262[2] == v257)
                  goto LABEL_465;
              }
              else if ((v265 & v263) != v260)
              {
                goto LABEL_438;
              }
              v262 = (_QWORD *)*v262;
              if (!v262)
                goto LABEL_438;
            }
          }
          while (1)
          {
            v264 = v262[1];
            if (v264 == v257)
            {
              if (v262[2] == v257)
              {
LABEL_465:
                v282 = (_QWORD *)v262[3];
                v281 = (std::__shared_weak_count *)v262[4];
                if (v281)
                {
                  v283 = (unint64_t *)&v281->__shared_owners_;
                  do
                    v284 = __ldxr(v283);
                  while (__stxr(v284 + 1, v283));
                }
                v352 = v282;
                v353 = v281;
LABEL_489:
                v299 = v352;
                v301 = (char *)v352[5];
                v300 = v352[6];
                if ((unint64_t)v301 < v300)
                {
                  *(_QWORD *)v301 = *v253;
                  v302 = v253[1];
                  *((_QWORD *)v301 + 1) = v302;
                  if (v302)
                  {
                    v303 = (unint64_t *)(v302 + 8);
                    do
                      v304 = __ldxr(v303);
                    while (__stxr(v304 + 1, v303));
                  }
                  v305 = (uint64_t *)(v301 + 16);
                  goto LABEL_518;
                }
                v306 = (char *)v352[4];
                v307 = (v301 - v306) >> 4;
                v308 = v307 + 1;
                if ((unint64_t)(v307 + 1) >> 60)
                  abort();
                v309 = v300 - (_QWORD)v306;
                if (v309 >> 3 > v308)
                  v308 = v309 >> 3;
                if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFF0)
                  v310 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v310 = v308;
                if (v310 >> 60)
                  goto LABEL_538;
                v311 = (char *)operator new(16 * v310);
                v312 = &v311[16 * v307];
                v313 = *(_OWORD *)v253;
                *(_OWORD *)v312 = *(_OWORD *)v253;
                if (*((_QWORD *)&v313 + 1))
                {
                  v314 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
                  do
                    v315 = __ldxr(v314);
                  while (__stxr(v315 + 1, v314));
                  v306 = (char *)v299[4];
                  v301 = (char *)v299[5];
                }
                v316 = &v311[16 * v310];
                v305 = (uint64_t *)(v312 + 16);
                if (v301 == v306)
                {
                  v299[4] = v312;
                  v299[5] = v305;
                  v299[6] = v316;
                }
                else
                {
                  do
                  {
                    v317 = *((_OWORD *)v301 - 1);
                    v301 -= 16;
                    *((_OWORD *)v312 - 1) = v317;
                    v312 -= 16;
                    *(_QWORD *)v301 = 0;
                    *((_QWORD *)v301 + 1) = 0;
                  }
                  while (v301 != v306);
                  v306 = (char *)v299[4];
                  v318 = (char *)v299[5];
                  v299[4] = v312;
                  v299[5] = v305;
                  v299[6] = v316;
                  while (v318 != v306)
                  {
                    v319 = (std::__shared_weak_count *)*((_QWORD *)v318 - 1);
                    if (v319)
                    {
                      v320 = (unint64_t *)&v319->__shared_owners_;
                      do
                        v321 = __ldaxr(v320);
                      while (__stlxr(v321 - 1, v320));
                      if (!v321)
                      {
                        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                        std::__shared_weak_count::__release_weak(v319);
                      }
                    }
                    v318 -= 16;
                  }
                }
                if (v306)
                  operator delete(v306);
LABEL_518:
                v322 = (uint64_t *)v299[4];
                v323 = 126 - 2 * __clz(((char *)v305 - (char *)v322) >> 4);
                v299[5] = v305;
                if (v305 == v322)
                  v324 = 0;
                else
                  v324 = v323;
                std::__introsort<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*,false>(v322, v305, v324, 1);
                v325 = v299[5];
                v326 = *(_QWORD *)(v325 - 16);
                if (v326 == *v253)
                {
                  if (v299[4] == v325)
                    v328 = 5;
                  else
                    v328 = *(_BYTE *)(v326 + 61);
                  atomic_store(v328, (unsigned __int8 *)(v299[2] + 25));
                  atomic_store(v299[4] != v299[5], (unsigned __int8 *)(v299[2] + 24));
                  v327 = v353;
                  if (v353)
                    goto LABEL_528;
                }
                else
                {
                  v327 = v353;
                  if (!v353)
                    goto LABEL_417;
LABEL_528:
                  v329 = (unint64_t *)&v327->__shared_owners_;
                  do
                    v330 = __ldaxr(v329);
                  while (__stlxr(v330 - 1, v329));
                  if (!v330)
                  {
                    ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                    std::__shared_weak_count::__release_weak(v327);
                  }
                }
LABEL_417:
                v253 += 2;
                if (v253 == v254)
                  break;
                goto LABEL_418;
              }
            }
            else
            {
              if (v264 >= *(_QWORD *)&v258)
                v264 %= *(_QWORD *)&v258;
              if (v264 != v260)
                goto LABEL_438;
            }
            v262 = (_QWORD *)*v262;
            if (!v262)
              goto LABEL_438;
          }
        }
      }
LABEL_532:
      v331 = v337;
      v332 = (_QWORD *)v337[1];
      if (v332)
      {
        do
        {
          v333 = v332;
          v332 = (_QWORD *)*v332;
        }
        while (v332);
      }
      else
      {
        do
        {
          v333 = (_QWORD *)v331[2];
          v22 = *v333 == (_QWORD)v331;
          v331 = v333;
        }
        while (!v22);
      }
      v13 = v333;
    }
    while (v333 != v336);
  }
  v14 = (_QWORD *)*((_QWORD *)v339 + 56);
  v340 = (_QWORD *)((char *)v339 + 456);
  if (v14 != (_QWORD *)((char *)v339 + 456))
  {
    while (1)
    {
      v15 = (_QWORD *)*v335;
      v16 = v14[4];
      if (*v335)
      {
        v17 = *(unsigned __int8 *)(v16 + 16);
        v18 = *(unsigned __int16 *)(v16 + 24);
        while (1)
        {
          v19 = v15[4];
          v20 = *(unsigned __int8 *)(v19 + 16);
          v21 = *(unsigned __int16 *)(v19 + 24);
          v22 = v17 == v20 && v18 == v21;
          if (!v22)
            break;
          if (*(_QWORD *)(v16 + 96) != *(_QWORD *)(v19 + 96))
            goto LABEL_26;
          v23 = *(const void **)(v16 + 32);
          v24 = *(_QWORD *)(v16 + 40) - (_QWORD)v23;
          v25 = *(const void **)(v19 + 32);
          if (v24 != *(_QWORD *)(v19 + 40) - (_QWORD)v25 || memcmp(v23, v25, v24))
            goto LABEL_26;
          v21 = v18;
          if (*(_QWORD *)(v16 + 136) >= *(_QWORD *)(v19 + 136))
          {
LABEL_30:
            if (v20 == *(unsigned __int8 *)(v16 + 16)
              && v21 == *(unsigned __int16 *)(v16 + 24)
              && *(_QWORD *)(v19 + 96) == *(_QWORD *)(v16 + 96)
              && (v29 = *(const void **)(v19 + 32),
                  v30 = *(_QWORD *)(v19 + 40) - (_QWORD)v29,
                  v31 = *(const void **)(v16 + 32),
                  v30 == *(_QWORD *)(v16 + 40) - (_QWORD)v31)
              && !memcmp(v29, v31, v30))
            {
              if (*(_QWORD *)(v19 + 136) >= *(_QWORD *)(v16 + 136))
                goto LABEL_186;
            }
            else
            {
              v32 = *(unsigned __int16 *)(v16 + 24);
              if (v21 == v32)
              {
                if (*(_QWORD *)(v19 + 96) == *(_QWORD *)(v16 + 96)
                  && (v33 = *(const void **)(v19 + 32),
                      v34 = *(_QWORD *)(v19 + 40) - (_QWORD)v33,
                      v35 = *(const void **)(v16 + 32),
                      v34 == *(_QWORD *)(v16 + 40) - (_QWORD)v35)
                  && !memcmp(v33, v35, v34))
                {
                  if (v20 >= *(unsigned __int8 *)(v16 + 16))
                    goto LABEL_186;
                }
                else if (!gdc::GenericKey::operator<(*(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40), *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40)))
                {
                  goto LABEL_186;
                }
              }
              else if (v21 >= v32)
              {
                goto LABEL_186;
              }
            }
            ++v15;
          }
LABEL_15:
          v15 = (_QWORD *)*v15;
          if (!v15)
            goto LABEL_49;
        }
        if (v18 != v21)
        {
          if (v18 >= v21)
            goto LABEL_30;
          goto LABEL_15;
        }
LABEL_26:
        if (*(_QWORD *)(v16 + 96) == *(_QWORD *)(v19 + 96)
          && (v26 = *(const void **)(v16 + 32),
              v27 = *(_QWORD *)(v16 + 40) - (_QWORD)v26,
              v28 = *(const void **)(v19 + 32),
              v27 == *(_QWORD *)(v19 + 40) - (_QWORD)v28)
          && !memcmp(v26, v28, v27))
        {
          v21 = v18;
          if (v17 >= v20)
            goto LABEL_30;
        }
        else
        {
          v21 = v18;
          if (!gdc::GenericKey::operator<(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40)))goto LABEL_30;
        }
        goto LABEL_15;
      }
LABEL_49:
      __p = 0;
      v346 = 0;
      {
        v121 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v121, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v347 = mdm::Allocator::instance(void)::alloc;
      v348 = 0;
      {
        v122 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v122, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v38 = mdm::Allocator::instance(void)::alloc;
      v349 = mdm::Allocator::instance(void)::alloc;
      v350 = 0;
      v351 = 1065353216;
      md::TransitTileData::setSelectedLines(v16, &__p);
      v39 = v348;
      if (v348)
      {
        do
        {
          v40 = (_QWORD *)*v39;
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
          v39 = v40;
        }
        while (v40);
      }
      if (__p)
        (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v347 + 40))(v347, __p, 8 * v346);
      {
        v123 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v123, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      {
        v124 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v124, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      md::TransitTileData::setSelectedNodes(*(uint64_t **)(v16 + 968), *(uint64_t **)(v16 + 976), 0, 0);
      v43 = *(_QWORD *)(v16 + 784);
      *(_BYTE *)(v16 + 1371) = 0;
      if (v43)
      {
        v44 = *(_QWORD *)(v16 + 888);
        for (j = *(_QWORD *)(v16 + 896); v44 != j; v44 += 248)
        {
          v46 = *(_QWORD *)(v44 + 24);
          atomic_store(0, (unsigned __int8 *)(v46 + 104));
          atomic_store(0, (unsigned __int8 *)(v46 + 105));
        }
      }
      v47 = *(_QWORD **)(*((_QWORD *)v339 + 47) + 80);
      v48 = *(_DWORD *)(v16 + 172);
      v49 = *(_DWORD *)(v16 + 176);
      __p = (void *)__PAIR64__(v48, v49);
      v50 = *(unsigned __int8 *)(v16 + 169);
      LODWORD(v346) = v50;
      v51 = 1 << v50;
      if (v49 < 0)
        break;
      v52 = __OFSUB__(v49, v51);
      v53 = v49 - v51;
      if (v53 < 0 == v52)
      {
        v49 = v53;
LABEL_64:
        LODWORD(__p) = v49;
      }
      v54 = (_DWORD *)v47[1];
      if (v54)
      {
        v55 = v47 + 1;
        do
        {
          v59 = v54[8];
          v60 = v59 < v49;
          if (v59 == v49 && (v61 = v54[9], v60 = v61 < v48, v61 == v48))
            v56 = v54[10] < v50;
          else
            v56 = v60;
          v57 = !v56;
          if (v56)
            v58 = v54 + 2;
          else
            v58 = v54;
          if (v57)
            v55 = v54;
          v54 = (_DWORD *)*v58;
        }
        while (*v58);
        if (v55 != v47 + 1)
        {
          v62 = *((_DWORD *)v55 + 8);
          v63 = v49 < v62;
          if (v49 == v62 && (v64 = *((_DWORD *)v55 + 9), v63 = v48 < v64, v48 == v64))
          {
            if (*((_DWORD *)v55 + 10) <= v50)
              goto LABEL_86;
          }
          else if (!v63)
          {
LABEL_86:
            v66 = (char *)v55[7];
            v65 = (char *)v55[8];
            v67 = v66;
            if (v66 != v65)
            {
              while (*(_QWORD *)v67 != v16)
              {
                v67 += 8;
                if (v67 == v65)
                {
                  v67 = (char *)v55[8];
                  break;
                }
              }
            }
            if (v67 != v65)
            {
              v68 = v67 + 8;
              if (v67 + 8 != v65)
              {
                do
                {
                  if (*(_QWORD *)v68 != v16)
                  {
                    *(_QWORD *)v67 = *(_QWORD *)v68;
                    v67 += 8;
                  }
                  v68 += 8;
                }
                while (v68 != v65);
                v66 = (char *)v55[7];
                v65 = (char *)v55[8];
              }
            }
            v69 = v67;
            v70 = v65 - (v67 + 8);
            if (v65 != v67 + 8)
            {
              memmove(v67, v67 + 8, v65 - (v67 + 8));
              v66 = (char *)v55[7];
            }
            v55[8] = (char *)v69 + v70;
            if (v66 == (char *)v69 + v70)
            {
              md::TransitInterTileMediator::updateTileInfos((uint64_t)v47, (int *)&__p, (uint64_t)(v55 + 6));
              v71 = (_QWORD *)v55[1];
              v72 = v55;
              if (v71)
              {
                do
                {
                  v73 = v71;
                  v71 = (_QWORD *)*v71;
                }
                while (v71);
              }
              else
              {
                do
                {
                  v73 = (_QWORD *)v72[2];
                  v22 = *v73 == (_QWORD)v72;
                  v72 = v73;
                }
                while (!v22);
              }
              if ((_QWORD *)*v47 == v55)
                *v47 = v73;
              v74 = (uint64_t *)v47[1];
              --v47[2];
              std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v74, v55);
              v75 = (void *)v55[7];
              if (v75)
              {
                v55[8] = v75;
                operator delete(v75);
              }
              operator delete(v55);
            }
          }
        }
      }
      v76 = *(int8x8_t **)(*((_QWORD *)v339 + 47) + 96);
      if (!v76)
        goto LABEL_186;
      *(_QWORD *)(v16 + 1224) = 0;
      v77 = *(uint64_t **)(v16 + 944);
      v78 = *(uint64_t **)(v16 + 952);
      if (v77 == v78)
        goto LABEL_186;
      k = v76 + 4;
      while (2)
      {
        v80 = *v77;
        *(_BYTE *)(*v77 + 64) = 0;
        v81 = v76[5];
        if (!*(_QWORD *)&v81)
          goto LABEL_114;
        v82 = *(_QWORD *)(*(_QWORD *)(v80 + 8) + 40);
        v83 = (uint8x8_t)vcnt_s8(v81);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          v84 = *(_QWORD *)(*(_QWORD *)(v80 + 8) + 40);
          if (v82 >= *(_QWORD *)&v81)
            v84 = v82 % *(_QWORD *)&v81;
        }
        else
        {
          v84 = (*(_QWORD *)&v81 - 1) & v82;
        }
        v85 = *(_QWORD ***)(*(_QWORD *)k + 8 * v84);
        if (!v85)
          goto LABEL_114;
        v86 = *v85;
        if (!*v85)
          goto LABEL_114;
        if (v83.u32[0] < 2uLL)
        {
          v87 = *(_QWORD *)&v81 - 1;
          while (1)
          {
            v89 = v86[1];
            if (v89 == v82)
            {
              if (v86[2] == v82)
                goto LABEL_136;
            }
            else if ((v89 & v87) != v84)
            {
              goto LABEL_114;
            }
            v86 = (_QWORD *)*v86;
            if (!v86)
              goto LABEL_114;
          }
        }
        while (1)
        {
          v88 = v86[1];
          if (v88 == v82)
            break;
          if (v88 >= *(_QWORD *)&v81)
            v88 %= *(_QWORD *)&v81;
          if (v88 != v84)
            goto LABEL_114;
LABEL_125:
          v86 = (_QWORD *)*v86;
          if (!v86)
            goto LABEL_114;
        }
        if (v86[2] != v82)
          goto LABEL_125;
LABEL_136:
        v343 = (_QWORD *)v86[3];
        v90 = (_QWORD *)v343[5];
        v91 = v90;
        if ((_QWORD *)v343[4] != v90)
        {
          v91 = (_QWORD *)v343[4];
          while (*v91 != v80)
          {
            v91 += 2;
            if (v91 == v90)
            {
              v91 = (_QWORD *)v343[5];
              break;
            }
          }
        }
        v342 = (std::mutex *)*(v90 - 2);
        if (v91 == v90 || (v92 = v91 + 2, v91 + 2 == v90))
        {
          v93 = v91;
          if (v91 == v90)
            goto LABEL_155;
        }
        else
        {
          v93 = v91;
          do
          {
            v94 = v92;
            v95 = v91[2];
            if (v95 != *v77)
            {
              v96 = v91[3];
              *v92 = 0;
              v92[1] = 0;
              v97 = (std::__shared_weak_count *)v93[1];
              *v93 = v95;
              v93[1] = v96;
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              v93 += 2;
            }
            v92 = v94 + 2;
            v91 = v94;
          }
          while (v94 + 2 != v90);
          v90 = (_QWORD *)v343[5];
          if (v93 == v90)
          {
LABEL_155:
            k = v76 + 4;
            goto LABEL_158;
          }
        }
        v100 = v93;
        for (k = v76 + 4; v90 != v100; v90 -= 2)
        {
          v102 = (std::__shared_weak_count *)*(v90 - 1);
          if (v102)
          {
            v103 = (unint64_t *)&v102->__shared_owners_;
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
        }
        v343[5] = v100;
        v90 = v100;
LABEL_158:
        if (v342 == (std::mutex *)v80)
        {
          if ((_QWORD *)v343[4] == v90)
            v101 = 5;
          else
            v101 = *(_BYTE *)(*(v90 - 2) + 61);
          v105 = v343;
          atomic_store(v101, (unsigned __int8 *)(v343[2] + 25));
          atomic_store(v105[4] != v105[5], (unsigned __int8 *)(v105[2] + 24));
        }
        v106 = (_QWORD *)v86[3];
        if (v106[5] == v106[4])
        {
          if ((*(unsigned int (**)(_QWORD *))(*v106 + 16))(v106))
          {
            __p = *(void **)(*(_QWORD *)(*v77 + 8) + 40);
            v107 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)&v76[9], (unint64_t)__p, (uint64_t *)&__p);
            v109 = v86[3];
            v108 = v86[4];
            if (v108)
            {
              v110 = (unint64_t *)(v108 + 8);
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
            v112 = (std::__shared_weak_count *)v107[4];
            v107[3] = v109;
            v107[4] = v108;
            if (v112)
            {
              v113 = (unint64_t *)&v112->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
          }
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, k, v86);
          v115 = __p;
          __p = 0;
          if (v115)
          {
            if ((_BYTE)v347)
            {
              v116 = (std::__shared_weak_count *)v115[4];
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
            }
            operator delete(v115);
          }
        }
LABEL_114:
        v77 += 2;
        if (v77 != v78)
          continue;
        break;
      }
LABEL_186:
      v119 = (_QWORD *)v14[1];
      if (v119)
      {
        do
        {
          v120 = v119;
          v119 = (_QWORD *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (_QWORD *)v14[2];
          v22 = *v120 == (_QWORD)v14;
          v14 = v120;
        }
        while (!v22);
      }
      v14 = v120;
      if (v120 == v340)
        goto LABEL_9;
    }
    v49 += v51;
    goto LABEL_64;
  }
LABEL_9:
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v339 + 54));
  *((_QWORD *)v339 + 54) = 0;
  *((_QWORD *)v339 + 55) = 0;
  *((_QWORD *)v339 + 53) = v336;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v339 + 57));
  *((_QWORD *)v339 + 57) = 0;
  *((_QWORD *)v339 + 58) = 0;
  *((_QWORD *)v339 + 56) = v340;
}

void sub_19F2FEF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, __int128 a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v18 - 104);
  _Unwind_Resume(a1);
}

void sub_19F2FF0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  md::TransitRenderLayer::{unnamed type#1}::~TransitRenderLayer((_QWORD **)(v1 + 424));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 384);
  std::unique_ptr<md::CTransitRenderResources>::~unique_ptr[abi:nn180100]((md::CTransitRenderResources **)(v1 + 376));
  md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t md::TransitRenderLayer::TransitRenderLayer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  unsigned __int8 v11;
  __int16 v12;
  const RenderTargetFormat *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _WORD *v22;
  VKSharedResources *v23;
  _WORD *v24;
  _WORD *v25;
  __int128 v26;
  _WORD *v27;
  md::CartographicTiledRenderResources *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  const RenderTargetFormat *v37;
  VKSharedResources *v38;
  uint64_t *v39;
  const ggl::StandardLibrary *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  md::TransitLineSharedResources *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  md::CTransitRenderResources *v63;
  md::CTransitRenderResources *v64;
  uint64_t v65;
  double v66;
  double v67;
  __int128 *v68;
  VKSharedResources *v69;
  uint64_t *v70;
  float v71;
  VKSharedResources *v72;
  VKSharedResources *v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  VKSharedResources *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  __int128 v90;
  unsigned __int8 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  __int128 v96;
  unsigned __int8 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unsigned __int8 v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unsigned __int8 v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  __int128 v186;
  unsigned __int8 v187;
  _QWORD *v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  std::__shared_count v197;
  unsigned __int8 v198;
  _QWORD *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 v209;
  uint64_t v210;
  geo::read_write_lock *v211;
  const char *v212;
  malloc_zone_t *v213;
  uint64_t v214;
  geo::read_write_lock *v215;
  const char *v216;
  malloc_zone_t *v217;
  uint64_t v218;
  geo::read_write_lock *v219;
  const char *v220;
  malloc_zone_t *v221;
  int v222;
  uint64_t v223;
  geo::read_write_lock *v224;
  const char *v225;
  malloc_zone_t *v226;
  int v227;
  uint64_t v228;
  geo::read_write_lock *v229;
  const char *v230;
  malloc_zone_t *v231;
  md::TransitNodeFeaturePool *v232;
  __int128 v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  int v238;
  uint64_t v239;
  geo::read_write_lock *v240;
  const char *v241;
  malloc_zone_t *zone;
  int v243;
  uint64_t v244;
  geo::read_write_lock *v245;
  const char *v246;
  malloc_zone_t *v247;
  ggl::TransitNodeColorizedShader *v248;
  unsigned __int8 v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  ggl::TransitNodeRGBShader *v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  unsigned __int8 v255;
  unsigned __int8 v256;
  unsigned __int8 v257;
  unsigned __int8 v258;
  unsigned __int8 v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  md::CTransitRenderResources *v262;
  id v263;
  id v264;
  VKSharedResources *v265;
  md::CTransitRenderResources **v266;
  void *v267;
  VKSharedResources *v268;
  __int128 v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  id v274;
  id v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;

  v10 = a3;
  if (a4 == 1)
    v11 = 20;
  else
    v11 = 19;
  if (a4 == 1)
    v12 = 17;
  else
    v12 = 16;
  v267 = v10;
  v274 = *(id *)(a2 + 104);
  v13 = (const RenderTargetFormat *)objc_msgSend(v274, "format");
  v272 = a6;
  if (v10)
  {
    objc_msgSend(v10, "standardCommandBufferSelector");
    v14 = a5;
    v15 = *(_WORD *)(*(_QWORD *)(v280 + 8) + 2 * v11);
    objc_msgSend(v10, "standardCommandBufferSelector");
    v16 = 188;
    if (a4 == 1)
      v16 = 190;
    v17 = *(_WORD *)(*(_QWORD *)(v278 + 8) + v16);
    objc_msgSend(v10, "standardCommandBufferSelector");
    v18 = *(_QWORD *)(v276 + 8);
  }
  else
  {
    v14 = a5;
    v280 = 0uLL;
    v18 = MEMORY[8];
    v15 = *(_WORD *)(MEMORY[8] + 2 * v11);
    LODWORD(v278) = 0;
    v279 = 0;
    v19 = 188;
    if (a4 == 1)
      v19 = 190;
    v17 = *(_WORD *)(MEMORY[8] + v19);
    v277 = 0;
  }
  v20 = 154;
  if (a4 == 1)
    v20 = 156;
  v21 = *(_WORD *)(v18 + v20);
  v22 = operator new(6uLL);
  *v22 = v15;
  v22[1] = v17;
  v22[2] = v21;
  v23 = v267;
  v24 = operator new(2uLL);
  *v24 = v12;
  v25 = v24 + 1;
  *(_QWORD *)&v26 = v24;
  *((_QWORD *)&v26 + 1) = v24 + 1;
  v270 = v26;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v27 = operator new(6uLL);
  *(_DWORD *)v27 = *(_DWORD *)v22;
  v27[2] = v22[2];
  *(_QWORD *)(a1 + 16) = v27 + 3;
  *(_QWORD *)(a1 + 24) = v27 + 3;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = v11;
  *(_QWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB5DF0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v270;
  *(_QWORD *)(a1 + 336) = v25;
  *(_DWORD *)(a1 + 344) = 1;
  *(_QWORD *)a1 = off_1E42AA050;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 352) = 0;
  v28 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v28, v23, v13);
  v29 = v14;
  *(_QWORD *)(a1 + 352) = v28;

  operator delete(v22);
  if (v277)
  {
    p_shared_owners = (unint64_t *)&v277->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  if (v279)
  {
    v32 = (unint64_t *)&v279->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  if (*((_QWORD *)&v280 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v280 + 1) + 16))(*((_QWORD *)&v280 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v280 + 1));
    }
  }

  *(_QWORD *)a1 = &off_1E4296680;
  v266 = (md::CTransitRenderResources **)(a1 + 376);
  *(_QWORD *)(a1 + 368) = a4;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = v272;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 412) = 0;
  *(_WORD *)(a1 + 420) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  *(_QWORD *)(a1 + 472) = a1 + 480;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  v36 = operator new();
  v275 = *(id *)(a2 + 104);
  v37 = (const RenderTargetFormat *)objc_msgSend(v275, "format");
  v38 = v23;
  *(_DWORD *)v36 = -1;
  *(_OWORD *)(v36 + 8) = 0u;
  v39 = (uint64_t *)(v36 + 8);
  *(_BYTE *)(v36 + 4) = 0;
  *(_OWORD *)(v36 + 24) = 0u;
  *(_OWORD *)(v36 + 40) = 0u;
  *(_DWORD *)(v36 + 72) = -1;
  *(_QWORD *)(v36 + 64) = -1;
  *(_BYTE *)(v36 + 296) = 0;
  *(_QWORD *)(v36 + 88) = 0;
  *(_QWORD *)(v36 + 96) = 0;
  *(_QWORD *)(v36 + 80) = 0;
  *(_BYTE *)(v36 + 104) = 0;
  *(_OWORD *)(v36 + 112) = 0u;
  *(_OWORD *)(v36 + 128) = 0u;
  *(_OWORD *)(v36 + 144) = 0u;
  *(_QWORD *)(v36 + 304) = 0;
  *(_QWORD *)(v36 + 312) = 0;
  *(_DWORD *)(v36 + 320) = 0;
  *(_BYTE *)(v36 + 324) = 1;
  *(_OWORD *)(v36 + 328) = 0u;
  *(_OWORD *)(v36 + 344) = 0u;
  *(_DWORD *)(v36 + 360) = 1065353216;
  v268 = v38;
  v40 = -[VKSharedResources shaderLibrary](v38, "shaderLibrary");
  *(_BYTE *)(v36 + 4) = a4 == 0;
  *(_BYTE *)(v36 + 104) = a4 == 0;
  *(_DWORD *)v36 = -1;
  v41 = operator new(0x30uLL);
  v41[1] = 0;
  v41[2] = 0;
  *v41 = &off_1E42DD118;
  v41[5] = 0;
  v41[4] = 0;
  v41[3] = v41 + 4;
  v42 = *(std::__shared_weak_count **)(v36 + 88);
  *(_QWORD *)(v36 + 80) = v41 + 3;
  *(_QWORD *)(v36 + 88) = v41;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = operator new(0x48uLL);
  v45[1] = 0;
  v45[2] = 0;
  *v45 = &off_1E42DD4D0;
  v46 = md::TransitLineSharedResources::TransitLineSharedResources((md::TransitLineSharedResources *)(v45 + 3), v40, v37);
  v47 = *(std::__shared_weak_count **)(v36 + 128);
  *(_QWORD *)(v36 + 120) = v46;
  *(_QWORD *)(v36 + 128) = v45;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = operator new();
  *(_DWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)v50 = &off_1E42B5DE8;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 36) = 65537;
  *(_DWORD *)(v50 + 44) = 0;
  *(_QWORD *)(v50 + 48) = 1;
  *(_WORD *)(v50 + 56) = 0;
  *(_BYTE *)(v50 + 58) = 3;
  *(_QWORD *)(v50 + 67) = 0;
  *(_QWORD *)(v50 + 59) = 0;
  *(_BYTE *)(v50 + 75) = 0;
  *(_QWORD *)(v50 + 132) = 0;
  *(_QWORD *)(v50 + 124) = 0;
  *(_WORD *)(v50 + 188) = 257;
  *(_QWORD *)(v50 + 192) = 0;
  *(_QWORD *)(v50 + 200) = 0;
  *(_BYTE *)(v50 + 208) = 0;
  v51 = *v39;
  *v39 = v50;
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v50 = *v39;
  }
  *(_BYTE *)(v50 + 56) = 0;
  v52 = operator new();
  *(_DWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  *(_QWORD *)v52 = &off_1E42B5DE8;
  *(_QWORD *)(v52 + 8) = 0;
  *(_QWORD *)(v52 + 36) = 66304;
  *(_DWORD *)(v52 + 44) = 0;
  *(_QWORD *)(v52 + 48) = 1;
  *(_WORD *)(v52 + 56) = 0;
  *(_BYTE *)(v52 + 58) = 3;
  *(_QWORD *)(v52 + 67) = 0;
  *(_QWORD *)(v52 + 59) = 0;
  *(_BYTE *)(v52 + 75) = 0;
  *(_QWORD *)(v52 + 132) = 0;
  *(_QWORD *)(v52 + 124) = 0;
  *(_WORD *)(v52 + 188) = 257;
  *(_QWORD *)(v52 + 192) = 0;
  *(_QWORD *)(v52 + 200) = 0;
  *(_BYTE *)(v52 + 208) = 0;
  v53 = *(_QWORD *)(v36 + 16);
  *(_QWORD *)(v36 + 16) = v52;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v52 = *(_QWORD *)(v36 + 16);
  }
  *(_BYTE *)(v52 + 56) = 0;
  v54 = operator new();
  *(_DWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)v54 = &off_1E42B5DE8;
  *(_QWORD *)(v54 + 8) = 0;
  *(_QWORD *)(v54 + 36) = 66560;
  *(_DWORD *)(v54 + 44) = 0;
  *(_QWORD *)(v54 + 48) = 1;
  *(_WORD *)(v54 + 56) = 0;
  *(_BYTE *)(v54 + 58) = 3;
  *(_QWORD *)(v54 + 67) = 0;
  *(_QWORD *)(v54 + 59) = 0;
  *(_BYTE *)(v54 + 75) = 0;
  *(_QWORD *)(v54 + 132) = 0;
  *(_QWORD *)(v54 + 124) = 0;
  *(_WORD *)(v54 + 188) = 257;
  *(_QWORD *)(v54 + 192) = 0;
  *(_QWORD *)(v54 + 200) = 0;
  *(_BYTE *)(v54 + 208) = 0;
  v55 = *(_QWORD *)(v36 + 24);
  *(_QWORD *)(v36 + 24) = v54;
  if (v55)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v54 = *(_QWORD *)(v36 + 24);
  }
  *(_BYTE *)(v54 + 56) = 0;
  v56 = operator new();
  *(_DWORD *)(v56 + 32) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  *(_QWORD *)(v56 + 24) = 0;
  *(_QWORD *)v56 = &off_1E42B5DE8;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 36) = 65537;
  *(_DWORD *)(v56 + 44) = 0;
  *(_QWORD *)(v56 + 48) = 0xFF0000000400;
  *(_WORD *)(v56 + 56) = 0;
  *(_BYTE *)(v56 + 58) = 3;
  *(_QWORD *)(v56 + 67) = 0;
  *(_QWORD *)(v56 + 59) = 0;
  *(_BYTE *)(v56 + 75) = 0;
  *(_QWORD *)(v56 + 132) = 0;
  *(_QWORD *)(v56 + 124) = 0;
  *(_WORD *)(v56 + 188) = 257;
  *(_QWORD *)(v56 + 192) = 0;
  *(_QWORD *)(v56 + 200) = 0;
  *(_BYTE *)(v56 + 208) = 0;
  v57 = *(_QWORD *)(v36 + 32);
  *(_QWORD *)(v36 + 32) = v56;
  if (v57)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v56 = *(_QWORD *)(v36 + 32);
  }
  *(_BYTE *)(v56 + 208) = 1;
  *(_BYTE *)(v56 + 56) = 0;
  v58 = operator new();
  *(_DWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  *(_QWORD *)(v58 + 24) = 0;
  *(_QWORD *)v58 = &off_1E42B5DE8;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 36) = 66304;
  *(_DWORD *)(v58 + 44) = 0;
  *(_QWORD *)(v58 + 48) = 0xFF0000000400;
  *(_WORD *)(v58 + 56) = 0;
  *(_BYTE *)(v58 + 58) = 3;
  *(_QWORD *)(v58 + 67) = 0;
  *(_QWORD *)(v58 + 59) = 0;
  *(_BYTE *)(v58 + 75) = 0;
  *(_QWORD *)(v58 + 132) = 0;
  *(_QWORD *)(v58 + 124) = 0;
  *(_WORD *)(v58 + 188) = 257;
  *(_QWORD *)(v58 + 192) = 0;
  *(_QWORD *)(v58 + 200) = 0;
  *(_BYTE *)(v58 + 208) = 0;
  v59 = *(_QWORD *)(v36 + 48);
  *(_QWORD *)(v36 + 48) = v58;
  if (v59)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    v58 = *(_QWORD *)(v36 + 48);
  }
  *(_BYTE *)(v58 + 208) = 1;
  *(_BYTE *)(v58 + 56) = 0;
  v60 = operator new();
  *(_DWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 16) = 0;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)v60 = &off_1E42B5DE8;
  *(_QWORD *)(v60 + 8) = 0;
  *(_QWORD *)(v60 + 36) = 66560;
  *(_DWORD *)(v60 + 44) = 0;
  *(_QWORD *)(v60 + 48) = 0xFF0000000400;
  *(_WORD *)(v60 + 56) = 0;
  *(_BYTE *)(v60 + 58) = 3;
  *(_QWORD *)(v60 + 67) = 0;
  *(_QWORD *)(v60 + 59) = 0;
  *(_BYTE *)(v60 + 75) = 0;
  *(_QWORD *)(v60 + 132) = 0;
  *(_QWORD *)(v60 + 124) = 0;
  *(_WORD *)(v60 + 188) = 257;
  *(_QWORD *)(v60 + 192) = 0;
  *(_QWORD *)(v60 + 200) = 0;
  *(_BYTE *)(v60 + 208) = 0;
  v61 = *(_QWORD *)(v36 + 40);
  *(_QWORD *)(v36 + 40) = v60;
  v62 = v267;
  if (v61)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    v60 = *(_QWORD *)(v36 + 40);
  }
  *(_BYTE *)(v60 + 208) = 1;
  *(_BYTE *)(v60 + 56) = 0;

  v63 = *v266;
  *v266 = (md::CTransitRenderResources *)v36;
  if (v63)
  {
    md::CTransitRenderResources::~CTransitRenderResources(v63);
    MEMORY[0x1A1AF4E00]();
  }

  *((_QWORD *)*v266 + 7) = v29;
  if (v29)
  {
    v64 = *v266;
    if (*((_BYTE *)*v266 + 4))
    {
      v65 = operator new();
      v264 = *(id *)(a2 + 104);
      v273 = v65;
      objc_msgSend(v264, "contentScale");
      v67 = v66;
      v262 = v64;
      v263 = *(id *)(a2 + 104);
      v68 = (__int128 *)objc_msgSend(v263, "format");
      v69 = v268;
      *(_QWORD *)v65 = off_1E429E038;
      *(_QWORD *)(v65 + 8) = &unk_1E429E078;
      *(_QWORD *)(v65 + 16) = 0;
      *(_QWORD *)(v65 + 24) = v29;
      *(_OWORD *)(v65 + 32) = 0u;
      *(_OWORD *)(v65 + 48) = 0u;
      *(_DWORD *)(v65 + 64) = 1065353216;
      *(_OWORD *)(v65 + 72) = 0u;
      *(_DWORD *)(v65 + 104) = 1065353216;
      *(_OWORD *)(v65 + 112) = 0u;
      v70 = (uint64_t *)(v65 + 112);
      *(_OWORD *)(v65 + 88) = 0u;
      v71 = v67;
      *(_OWORD *)(v65 + 128) = 0u;
      *(_OWORD *)(v65 + 144) = 0u;
      *(_OWORD *)(v65 + 160) = 0u;
      *(_OWORD *)(v65 + 176) = 0u;
      *(_OWORD *)(v65 + 192) = 0u;
      *(_OWORD *)(v65 + 208) = 0u;
      *(_OWORD *)(v65 + 224) = 0u;
      *(_OWORD *)(v65 + 240) = 0u;
      *(_QWORD *)(v65 + 256) = 0;
      *(float *)(v65 + 264) = v71;
      v72 = v69;
      v73 = v72;
      *(_QWORD *)(v65 + 272) = &off_1E42B4D50;
      v74 = (_QWORD *)(v65 + 296);
      v271 = (_QWORD *)(v65 + 112);
      if (v267)
      {
        *(_QWORD *)(v65 + 280) = v72;
        *v74 = 0;
        *(_QWORD *)(v65 + 304) = 0;
        -[VKSharedResources standardCommandBufferSelector](v72, "standardCommandBufferSelector");
        v75 = *(std::__shared_weak_count **)(v65 + 304);
        v76 = v280;
        v281 = 0uLL;
        *(_OWORD *)v74 = v76;
        if (v75)
        {
          v77 = (unint64_t *)&v75->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
      }
      else
      {
        *(_QWORD *)(v65 + 280) = 0;
        v281 = 0uLL;
        *v74 = 0;
        *(_QWORD *)(v65 + 304) = 0;
      }
      if (*((_QWORD *)&v281 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v281 + 1) + 16))(*((_QWORD *)&v281 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v281 + 1));
        }
      }
      v81 = operator new(0x10uLL);
      *v81 = 1;
      v81[1] = v65;
      v82 = *(_QWORD **)(v65 + 16);
      if (v82)
      {
        if ((*v82)-- == 1)
        {
          operator delete(v82);
          *(_QWORD *)(v65 + 16) = 0;
        }
      }
      *(_QWORD *)(v65 + 16) = v81;
      *(_QWORD *)(*(_QWORD *)(v65 + 24) + 32) = v65;
      v84 = operator new();
      v85 = v73;
      *(_QWORD *)v84 = &off_1E42B4D50;
      *(_QWORD *)(v84 + 8) = v85;
      v265 = v85;
      *(double *)(v84 + 24) = v67;
      *(_QWORD *)(v84 + 72) = 0;
      *(_QWORD *)(v84 + 32) = 4;
      *(_QWORD *)(v84 + 40) = 0;
      *(_BYTE *)(v84 + 48) = 0;
      *(_QWORD *)(v84 + 56) = 0;
      *(_QWORD *)(v84 + 64) = v84 + 72;
      *(_QWORD *)(v84 + 104) = 0;
      *(_QWORD *)(v84 + 112) = 0;
      *(_QWORD *)(v84 + 96) = 0;
      *(_QWORD *)(v84 + 80) = 0;
      *(_QWORD *)(v84 + 88) = v84 + 96;
      *(_QWORD *)(v84 + 120) = 0;
      *(_QWORD *)(v84 + 128) = 0;
      v86 = *(_QWORD *)(v65 + 120);
      *(_QWORD *)(v65 + 120) = v84;
      if (v86)
        std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v86);
      v87 = operator new();
      *(_DWORD *)(v87 + 32) = 0;
      *(_QWORD *)(v87 + 16) = 0;
      *(_QWORD *)(v87 + 24) = 0;
      *(_QWORD *)v87 = &off_1E42B5DE8;
      *(_QWORD *)(v87 + 8) = 0;
      *(_QWORD *)(v87 + 36) = 65537;
      *(_DWORD *)(v87 + 44) = 0;
      *(_QWORD *)(v87 + 48) = 1;
      *(_WORD *)(v87 + 56) = 0;
      *(_BYTE *)(v87 + 58) = 3;
      *(_QWORD *)(v87 + 67) = 0;
      *(_QWORD *)(v87 + 59) = 0;
      *(_BYTE *)(v87 + 75) = 0;
      *(_QWORD *)(v87 + 132) = 0;
      *(_QWORD *)(v87 + 124) = 0;
      *(_WORD *)(v87 + 188) = 257;
      *(_QWORD *)(v87 + 192) = 0;
      *(_QWORD *)(v87 + 200) = 0;
      *(_BYTE *)(v87 + 208) = 0;
      v88 = *v70;
      *v70 = v87;
      if (v88)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
        v87 = *v70;
      }
      *(_BYTE *)(v87 + 56) = 0;
      v89 = operator new(0xF8uLL);
      v89[1] = 0;
      v89[2] = 0;
      *v89 = &off_1E42DF1E8;
      v89[3] = &off_1E42B5748;
      v89[4] = 2;
      *((_DWORD *)v89 + 10) = 262;
      v90 = 0uLL;
      *((_OWORD *)v89 + 3) = 0u;
      *((_OWORD *)v89 + 4) = 0u;
      *((_OWORD *)v89 + 5) = 0u;
      *((_OWORD *)v89 + 6) = 0u;
      v89[14] = 0;
      if ((v91 & 1) == 0)
      {
        v90 = 0uLL;
        if (v238)
        {
          v239 = operator new();
          *(_QWORD *)(v239 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v239 + 24) = "GeoGL";
          *(_OWORD *)(v239 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v239 = &off_1E42B5668;
          *(_QWORD *)(v239 + 8) = "GeoGL";
          *(_OWORD *)(v239 + 72) = 0u;
          *(_OWORD *)(v239 + 88) = 0u;
          *(_OWORD *)(v239 + 104) = 0u;
          *(_OWORD *)(v239 + 120) = 0u;
          *(_OWORD *)(v239 + 136) = 0u;
          *(_OWORD *)(v239 + 152) = 0u;
          *(_OWORD *)(v239 + 168) = 0u;
          *(_OWORD *)(v239 + 184) = 0u;
          *(_OWORD *)(v239 + 200) = 0u;
          *(_OWORD *)(v239 + 216) = 0u;
          *(_OWORD *)(v239 + 232) = 0u;
          *(_QWORD *)(v239 + 248) = 0;
          *(_OWORD *)(v239 + 56) = 0u;
          v240 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v239 + 56), 0);
          if ((_DWORD)v240)
            geo::read_write_lock::logFailure(v240, (uint64_t)"initialization", v241);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v239 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v239 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v239;
          v90 = 0uLL;
        }
      }
      v89[15] = ggl::Allocator::instance(void)::alloc;
      v89[16] = 0;
      *((_OWORD *)v89 + 11) = v90;
      *((_OWORD *)v89 + 12) = v90;
      v89[26] = 0;
      v89[27] = -1;
      *((_OWORD *)v89 + 9) = xmmword_19FFB2DD0;
      *((_OWORD *)v89 + 10) = v90;
      *((_DWORD *)v89 + 34) = 0;
      *((_DWORD *)v89 + 60) = 0;
      v89[3] = &off_1E42B6B88;
      v89[4] = 2;
      v89[28] = &unk_1E42B6BA8;
      v89[29] = "TransitNodeQuadIndexData";
      v92 = *(std::__shared_weak_count **)(v65 + 240);
      *(_QWORD *)(v65 + 232) = v89 + 3;
      *(_QWORD *)(v65 + 240) = v89;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = operator new(0xF8uLL);
      v95[1] = 0;
      v95[2] = 0;
      *v95 = &off_1E42DF1E8;
      v95[3] = &off_1E42B5748;
      v95[4] = 2;
      *((_DWORD *)v95 + 10) = 262;
      v96 = 0uLL;
      *((_OWORD *)v95 + 3) = 0u;
      *((_OWORD *)v95 + 4) = 0u;
      *((_OWORD *)v95 + 5) = 0u;
      *((_OWORD *)v95 + 6) = 0u;
      v95[14] = 0;
      if ((v97 & 1) == 0)
      {
        v96 = 0uLL;
        if (v243)
        {
          v244 = operator new();
          *(_QWORD *)(v244 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v244 + 24) = "GeoGL";
          *(_OWORD *)(v244 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v244 = &off_1E42B5668;
          *(_QWORD *)(v244 + 8) = "GeoGL";
          *(_OWORD *)(v244 + 72) = 0u;
          *(_OWORD *)(v244 + 88) = 0u;
          *(_OWORD *)(v244 + 104) = 0u;
          *(_OWORD *)(v244 + 120) = 0u;
          *(_OWORD *)(v244 + 136) = 0u;
          *(_OWORD *)(v244 + 152) = 0u;
          *(_OWORD *)(v244 + 168) = 0u;
          *(_OWORD *)(v244 + 184) = 0u;
          *(_OWORD *)(v244 + 200) = 0u;
          *(_OWORD *)(v244 + 216) = 0u;
          *(_OWORD *)(v244 + 232) = 0u;
          *(_QWORD *)(v244 + 248) = 0;
          *(_OWORD *)(v244 + 56) = 0u;
          v245 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v244 + 56), 0);
          if ((_DWORD)v245)
            geo::read_write_lock::logFailure(v245, (uint64_t)"initialization", v246);
          v247 = malloc_create_zone(0, 0);
          *(_QWORD *)(v244 + 48) = v247;
          malloc_set_zone_name(v247, "GeoGL");
          *(_QWORD *)(v244 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v244;
          v96 = 0uLL;
        }
      }
      v95[15] = ggl::Allocator::instance(void)::alloc;
      v95[16] = 0;
      *((_OWORD *)v95 + 11) = v96;
      *((_OWORD *)v95 + 12) = v96;
      v95[26] = 0;
      v95[27] = -1;
      *((_OWORD *)v95 + 10) = v96;
      *((_OWORD *)v95 + 9) = xmmword_19FFB2DD0;
      *((_DWORD *)v95 + 34) = 0;
      *((_DWORD *)v95 + 60) = 0;
      v95[3] = &off_1E42B6B88;
      v95[4] = 2;
      v95[28] = &unk_1E42B6BA8;
      v95[29] = "TransitNodePillIndexData";
      v98 = *(std::__shared_weak_count **)(v65 + 256);
      *(_QWORD *)(v65 + 248) = v95 + 3;
      *(_QWORD *)(v65 + 256) = v95;
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = operator new(0xE8uLL);
      v101[1] = 0;
      v101[2] = 0;
      *v101 = &off_1E42E10F8;
      v102 = ggl::BufferData::BufferData((uint64_t)(v101 + 3), qword_1EE574948, 2, 1, 6, 1);
      v101[28] = ggl::TransitNode::Settings::reflection(void)::reflection;
      v101[3] = &off_1E42B8D30;
      v103 = *(std::__shared_weak_count **)(v65 + 208);
      *(_QWORD *)(v65 + 200) = v102;
      *(_QWORD *)(v65 + 208) = v101;
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (_QWORD *)operator new();
      v107 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v265, "shaderLibrary") + 80);
      v108 = *(std::__shared_weak_count_vtbl **)(v107 + 3104);
      v109 = *(std::__shared_weak_count **)(v107 + 3112);
      if (v109)
      {
        v110 = (unint64_t *)&v109->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v112 = (std::__shared_weak_count *)operator new(0x198uLL);
      v112->__shared_owners_ = 0;
      v113 = (unint64_t *)&v112->__shared_owners_;
      v112->__shared_weak_owners_ = 0;
      v112->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3938;
      v282 = *v68;
      v283 = v68[1];
      if ((v114 & 1) == 0)
      {
        if ((_DWORD)v248)
        {
          if ((v249 & 1) == 0)
          {
            if ((_DWORD)v248)
            {
              if ((v256 & 1) == 0
              {
                if ((v260 & 1) == 0
                {
                  ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitNode::defaultVboReflection;
                }
                ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::attributesReflection(void)::r;
                unk_1ECE43B68 = 1;
              }
              ggl::TransitNodeColorized::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::typedReflection(void)::r;
              unk_1EE57ED10 = &ggl::TransitNodeColorized::pipelineDataBasePipelineDeviceStructs(void)::ref;
              qword_1EE57ED18 = 0;
              if ((v257 & 1) == 0
              {
                ggl::TransitNodeColorized::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::TransitNode::Settings::reflection(void)::reflection;
              }
              qword_1EE57ED20 = (uint64_t)&ggl::TransitNodeColorized::pipelineDataBasePipelineConstantStructs(void)::ref;
              *(int64x2_t *)algn_1EE57ED28 = vdupq_n_s64(1uLL);
            }
          }
          ggl::TransitNodeColorized::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TransitNodeColorized::BasePipelineSetup::typedReflection(void)::ref;
          ggl::TransitNodeColorizedShader::typedReflection(v248);
          qword_1ECE318C8 = (uint64_t)&ggl::TransitNodeColorizedShader::typedReflection(void)::ref;
          if ((v250 & 1) == 0
          {
            ggl::TransitNodeColorized::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
            *(_QWORD *)algn_1EE57ED88 = 0;
            qword_1EE57ED90 = (uint64_t)"";
            dword_1EE57ED98 = 0;
            qword_1EE57EDA0 = (uint64_t)&ggl::TransitNodeColorized::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
            unk_1EE57EDA8 = 5;
          }
          qword_1ECE318D0 = (uint64_t)&ggl::TransitNodeColorized::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
          *(_QWORD *)algn_1ECE318D8 = 1;
          qword_1ECE318E0 = 0;
          unk_1ECE318E8 = 1;
          qword_1ECE318F0 = (uint64_t)&ggl::TransitNodeColorized::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
          unk_1ECE318F8 = 0;
          if ((v251 & 1) == 0
          {
            ggl::TransitNodeColorized::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
            *(_QWORD *)algn_1EE57ED58 = 0;
            qword_1EE57ED60 = (uint64_t)"settings";
            dword_1EE57ED68 = 3;
            qword_1EE57ED70 = (uint64_t)&ggl::TransitNodeColorized::pipelineStateBasePipelineConstantSettingsBinding(void)::reflection;
            unk_1EE57ED78 = 2;
          }
          qword_1ECE31900 = (uint64_t)&ggl::TransitNodeColorized::pipelineStateBasePipelineConstantStructBinding(void)::ref;
          unk_1ECE31908 = 1;
        }
      }
      if (v109)
      {
        v115 = (unint64_t *)&v109->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
        LODWORD(v112[2].__shared_owners_) = 0;
        v112[1].__shared_weak_owners_ = 0;
        v112[2].__vftable = 0;
        v112[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
        v112[1].__shared_owners_ = 0;
        v112[2].__shared_weak_owners_ = (uint64_t)&ggl::TransitNodeColorized::BasePipelineState::typedReflection(void)::ref;
        v112[3].__vftable = v108;
        v112[3].__shared_owners_ = (uint64_t)v109;
        do
          v117 = __ldxr(v115);
        while (__stxr(v117 + 1, v115));
      }
      else
      {
        LODWORD(v112[2].__shared_owners_) = 0;
        v112[1].__shared_weak_owners_ = 0;
        v112[2].__vftable = 0;
        v112[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
        v112[1].__shared_owners_ = 0;
        v112[2].__shared_weak_owners_ = (uint64_t)&ggl::TransitNodeColorized::BasePipelineState::typedReflection(void)::ref;
        v112[3].__vftable = v108;
        v112[3].__shared_owners_ = 0;
      }
      LOBYTE(v112[5].__shared_weak_owners_) = 0;
      *(_OWORD *)((char *)&v112[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
      *(uint64_t *)((char *)&v112[6].__shared_owners_ + 4) = 0;
      *(std::__shared_weak_count_vtbl **)((char *)&v112[7].__vftable + 4) = 0;
      *(uint64_t *)((char *)&v112[6].__shared_weak_owners_ + 4) = 0;
      LOBYTE(v112[7].__shared_weak_owners_) = 0;
      *(_OWORD *)((char *)&v112[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
      *(uint64_t *)((char *)&v112[8].__shared_owners_ + 4) = 0;
      *(std::__shared_weak_count_vtbl **)((char *)&v112[9].__vftable + 4) = 0;
      *(uint64_t *)((char *)&v112[8].__shared_weak_owners_ + 4) = 0;
      LOBYTE(v112[9].__shared_weak_owners_) = 0;
      *(_OWORD *)((char *)&v112[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
      *(uint64_t *)((char *)&v112[10].__shared_owners_ + 4) = 0;
      *(std::__shared_weak_count_vtbl **)((char *)&v112[11].__vftable + 4) = 0;
      *(uint64_t *)((char *)&v112[10].__shared_weak_owners_ + 4) = 0;
      *(_OWORD *)&v112[11].__shared_weak_owners_ = v282;
      *(_OWORD *)&v112[12].__shared_owners_ = v283;
      LOBYTE(v112[13].__vftable) = 0;
      v112[16].__vftable = 0;
      *(_OWORD *)&v112[14].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v112[15].__shared_owners_ = 0u;
      *(_OWORD *)&v112[13].__shared_owners_ = 0u;
      v112[14].std::__shared_count = 0u;
      v112[16].__shared_owners_ = 0x100000001;
      LOBYTE(v112[16].__shared_weak_owners_) = 0;
      LOBYTE(v112[3].__shared_weak_owners_) = 1;
      *(_WORD *)((char *)&v112[3].__shared_weak_owners_ + 1) = v278;
      BYTE3(v112[3].__shared_weak_owners_) = BYTE2(v278);
      *(_OWORD *)((char *)&v112[3].__shared_weak_owners_ + 4) = xmmword_19FFB35D0;
      HIDWORD(v112[4].__shared_owners_) = 7;
      v112[4].__shared_weak_owners_ = 0;
      v112[5].__vftable = 0;
      LODWORD(v112[5].__shared_owners_) = 0;
      BYTE4(v112[5].__shared_owners_) = 15;
      if (v109)
      {
        v118 = (unint64_t *)&v109->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v112[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BABE8;
      do
        v120 = __ldxr(v113);
      while (__stxr(v120 + 1, v113));
      ggl::PipelineSetup::PipelineSetup(v106, (uint64_t)&v112[1], (uint64_t)v112);
      do
        v121 = __ldaxr(v113);
      while (__stlxr(v121 - 1, v113));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
      *v106 = &off_1E42BABB8;
      v122 = *(_QWORD *)(v65 + 216);
      *(_QWORD *)(v65 + 216) = v106;
      if (v122)
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
      do
        v123 = __ldaxr(v113);
      while (__stlxr(v123 - 1, v113));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
      if (v109)
      {
        v124 = (unint64_t *)&v109->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v126 = *(_QWORD *)(v65 + 216);
      v127 = *(_QWORD **)(v126 + 64);
      v127[1] = 0;
      v128 = *(_QWORD *)(v65 + 200);
      *v127 = v128;
      v129 = *(_QWORD **)(v126 + 160);
      v130 = *(_QWORD *)(v65 + 208);
      if (v130)
      {
        v131 = (unint64_t *)(v130 + 8);
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
      }
      v133 = (std::__shared_weak_count *)v129[1];
      *v129 = v128;
      v129[1] = v130;
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v136 = (_QWORD *)operator new();
      v137 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v265, "shaderLibrary") + 80);
      v138 = *(std::__shared_weak_count_vtbl **)(v137 + 3128);
      v139 = *(std::__shared_weak_count **)(v137 + 3136);
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldxr(v140);
        while (__stxr(v141 + 1, v140));
      }
      v142 = (std::__shared_weak_count *)operator new(0x198uLL);
      v142->__shared_owners_ = 0;
      v143 = (unint64_t *)&v142->__shared_owners_;
      v142->__shared_weak_owners_ = 0;
      v142->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF370;
      v280 = *v68;
      v284 = v68[1];
      if ((v144 & 1) == 0)
      {
        if ((_DWORD)v252)
        {
          if ((v253 & 1) == 0)
          {
            if ((_DWORD)v252)
            {
              if ((v258 & 1) == 0
              {
                if ((v261 & 1) == 0
                {
                  ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitNode::defaultVboReflection;
                }
                ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::attributesReflection(void)::r;
                unk_1ECE43B68 = 1;
              }
              ggl::TransitNodeRGB::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::typedReflection(void)::r;
              *(_QWORD *)algn_1EE57C1F8 = &ggl::TransitNodeRGB::pipelineDataBasePipelineDeviceStructs(void)::ref;
              qword_1EE57C200 = 0;
              if ((v259 & 1) == 0
              {
                ggl::TransitNodeRGB::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::TransitNode::Settings::reflection(void)::reflection;
              }
              qword_1EE57C208 = (uint64_t)&ggl::TransitNodeRGB::pipelineDataBasePipelineConstantStructs(void)::ref;
              unk_1EE57C210 = vdupq_n_s64(1uLL);
            }
          }
          ggl::TransitNodeRGB::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TransitNodeRGB::BasePipelineSetup::typedReflection(void)::ref;
          ggl::TransitNodeRGBShader::typedReflection(v252);
          qword_1ECE31240 = (uint64_t)&ggl::TransitNodeRGBShader::typedReflection(void)::ref;
          if ((v254 & 1) == 0
          {
            ggl::TransitNodeRGB::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
            unk_1EE57C270 = 0;
            qword_1EE57C278 = (uint64_t)"";
            dword_1EE57C280 = 0;
            qword_1EE57C288 = (uint64_t)&ggl::TransitNodeRGB::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
            unk_1EE57C290 = 5;
          }
          qword_1ECE31248 = (uint64_t)&ggl::TransitNodeRGB::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
          unk_1ECE31250 = 1;
          qword_1ECE31258 = 0;
          unk_1ECE31260 = 1;
          qword_1ECE31268 = (uint64_t)&ggl::TransitNodeRGB::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
          unk_1ECE31270 = 0;
          if ((v255 & 1) == 0
          {
            ggl::TransitNodeRGB::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
            unk_1EE57C240 = 0;
            qword_1EE57C248 = (uint64_t)"settings";
            dword_1EE57C250 = 3;
            qword_1EE57C258 = (uint64_t)&ggl::TransitNodeRGB::pipelineStateBasePipelineConstantSettingsBinding(void)::reflection;
            unk_1EE57C260 = 2;
          }
          qword_1ECE31278 = (uint64_t)&ggl::TransitNodeRGB::pipelineStateBasePipelineConstantStructBinding(void)::ref;
          unk_1ECE31280 = 1;
        }
      }
      if (v139)
      {
        v145 = (unint64_t *)&v139->__shared_owners_;
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
        LODWORD(v142[2].__shared_owners_) = 0;
        v142[1].__shared_weak_owners_ = 0;
        v142[2].__vftable = 0;
        v142[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
        v142[1].__shared_owners_ = 0;
        v142[2].__shared_weak_owners_ = (uint64_t)&ggl::TransitNodeRGB::BasePipelineState::typedReflection(void)::ref;
        v142[3].__vftable = v138;
        v142[3].__shared_owners_ = (uint64_t)v139;
        do
          v147 = __ldxr(v145);
        while (__stxr(v147 + 1, v145));
      }
      else
      {
        LODWORD(v142[2].__shared_owners_) = 0;
        v142[1].__shared_weak_owners_ = 0;
        v142[2].__vftable = 0;
        v142[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
        v142[1].__shared_owners_ = 0;
        v142[2].__shared_weak_owners_ = (uint64_t)&ggl::TransitNodeRGB::BasePipelineState::typedReflection(void)::ref;
        v142[3].__vftable = v138;
        v142[3].__shared_owners_ = 0;
      }
      LOBYTE(v142[5].__shared_weak_owners_) = 0;
      *(_OWORD *)((char *)&v142[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
      *(uint64_t *)((char *)&v142[6].__shared_owners_ + 4) = 0;
      *(std::__shared_weak_count_vtbl **)((char *)&v142[7].__vftable + 4) = 0;
      *(uint64_t *)((char *)&v142[6].__shared_weak_owners_ + 4) = 0;
      LOBYTE(v142[7].__shared_weak_owners_) = 0;
      *(_OWORD *)((char *)&v142[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
      *(uint64_t *)((char *)&v142[8].__shared_owners_ + 4) = 0;
      *(std::__shared_weak_count_vtbl **)((char *)&v142[9].__vftable + 4) = 0;
      *(uint64_t *)((char *)&v142[8].__shared_weak_owners_ + 4) = 0;
      LOBYTE(v142[9].__shared_weak_owners_) = 0;
      *(_OWORD *)((char *)&v142[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
      *(uint64_t *)((char *)&v142[10].__shared_owners_ + 4) = 0;
      *(std::__shared_weak_count_vtbl **)((char *)&v142[11].__vftable + 4) = 0;
      *(uint64_t *)((char *)&v142[10].__shared_weak_owners_ + 4) = 0;
      *(_OWORD *)&v142[11].__shared_weak_owners_ = v280;
      *(_OWORD *)&v142[12].__shared_owners_ = v284;
      LOBYTE(v142[13].__vftable) = 0;
      v142[16].__vftable = 0;
      *(_OWORD *)&v142[14].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v142[15].__shared_owners_ = 0u;
      *(_OWORD *)&v142[13].__shared_owners_ = 0u;
      v142[14].std::__shared_count = 0u;
      v142[16].__shared_owners_ = 0x100000001;
      LOBYTE(v142[16].__shared_weak_owners_) = 0;
      LOBYTE(v142[3].__shared_weak_owners_) = 1;
      *(_WORD *)((char *)&v142[3].__shared_weak_owners_ + 1) = v278;
      BYTE3(v142[3].__shared_weak_owners_) = BYTE2(v278);
      *(_OWORD *)((char *)&v142[3].__shared_weak_owners_ + 4) = xmmword_19FFB35D0;
      HIDWORD(v142[4].__shared_owners_) = 7;
      v142[4].__shared_weak_owners_ = 0;
      v142[5].__vftable = 0;
      LODWORD(v142[5].__shared_owners_) = 0;
      BYTE4(v142[5].__shared_owners_) = 15;
      if (v139)
      {
        v148 = (unint64_t *)&v139->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6E68;
      do
        v150 = __ldxr(v143);
      while (__stxr(v150 + 1, v143));
      ggl::PipelineSetup::PipelineSetup(v136, (uint64_t)&v142[1], (uint64_t)v142);
      do
        v151 = __ldaxr(v143);
      while (__stlxr(v151 - 1, v143));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
      *v136 = &off_1E42B6E38;
      v152 = *(_QWORD *)(v65 + 224);
      *(_QWORD *)(v65 + 224) = v136;
      if (v152)
        (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
      do
        v153 = __ldaxr(v143);
      while (__stlxr(v153 - 1, v143));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
      if (v139)
      {
        v154 = (unint64_t *)&v139->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v156 = *(_QWORD *)(v65 + 224);
      v157 = *(_QWORD **)(v156 + 64);
      v157[1] = 0;
      v158 = *(_QWORD *)(v65 + 200);
      *v157 = v158;
      v159 = *(_QWORD **)(v156 + 160);
      v160 = *(_QWORD *)(v65 + 208);
      if (v160)
      {
        v161 = (unint64_t *)(v160 + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      v163 = (std::__shared_weak_count *)v159[1];
      *v159 = v158;
      v159[1] = v160;
      if (v163)
      {
        v164 = (unint64_t *)&v163->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = 0;
      v167 = &unk_1ECE44000;
      while (1)
      {
        v168 = operator new();
        if ((v169 & 1) == 0
        {
          if ((v209 & 1) == 0
          {
            ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TransitNode::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43B68 = 1;
          v167 = (_QWORD *)&unk_1ECE44000;
        }
        *(_QWORD *)(v168 + 32) = 0;
        *(_QWORD *)(v168 + 40) = 0;
        *(_DWORD *)(v168 + 48) = 0;
        *(_QWORD *)v168 = &off_1E42BBC08;
        *(_QWORD *)(v168 + 8) = "TransitNodeMesh";
        *(_QWORD *)(v168 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v168 + 24) = 0;
        *(_QWORD *)(v168 + 56) = &ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v168 + 64) = 0;
        v170 = v168 + 64;
        *(_QWORD *)(v168 + 72) = 0;
        *(_QWORD *)(v168 + 80) = 0;
        {
          v210 = operator new();
          *(_QWORD *)(v210 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v210 + 24) = "GeoGL";
          *(_OWORD *)(v210 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v210 = &off_1E42B5668;
          *(_QWORD *)(v210 + 8) = "GeoGL";
          *(_OWORD *)(v210 + 72) = 0u;
          *(_OWORD *)(v210 + 88) = 0u;
          *(_OWORD *)(v210 + 104) = 0u;
          *(_OWORD *)(v210 + 120) = 0u;
          *(_OWORD *)(v210 + 136) = 0u;
          *(_OWORD *)(v210 + 152) = 0u;
          *(_OWORD *)(v210 + 168) = 0u;
          *(_OWORD *)(v210 + 184) = 0u;
          *(_OWORD *)(v210 + 200) = 0u;
          *(_OWORD *)(v210 + 216) = 0u;
          *(_OWORD *)(v210 + 232) = 0u;
          *(_QWORD *)(v210 + 248) = 0;
          *(_OWORD *)(v210 + 56) = 0u;
          v211 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v210 + 56), 0);
          if ((_DWORD)v211)
            geo::read_write_lock::logFailure(v211, (uint64_t)"initialization", v212);
          v213 = malloc_create_zone(0, 0);
          *(_QWORD *)(v210 + 48) = v213;
          malloc_set_zone_name(v213, "GeoGL");
          *(_QWORD *)(v210 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v210;
          v167 = &unk_1ECE44000;
        }
        v172 = v167[495];
        *(_QWORD *)(v168 + 120) = 0;
        *(_QWORD *)(v168 + 96) = 0;
        *(_QWORD *)(v168 + 104) = 0;
        *(_QWORD *)(v168 + 88) = v172;
        {
          v214 = operator new();
          *(_QWORD *)(v214 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v214 + 24) = "GeoGL";
          *(_OWORD *)(v214 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v214 = &off_1E42B5668;
          *(_QWORD *)(v214 + 8) = "GeoGL";
          *(_OWORD *)(v214 + 72) = 0u;
          *(_OWORD *)(v214 + 88) = 0u;
          *(_OWORD *)(v214 + 104) = 0u;
          *(_OWORD *)(v214 + 120) = 0u;
          *(_OWORD *)(v214 + 136) = 0u;
          *(_OWORD *)(v214 + 152) = 0u;
          *(_OWORD *)(v214 + 168) = 0u;
          *(_OWORD *)(v214 + 184) = 0u;
          *(_OWORD *)(v214 + 200) = 0u;
          *(_OWORD *)(v214 + 216) = 0u;
          *(_OWORD *)(v214 + 232) = 0u;
          *(_QWORD *)(v214 + 248) = 0;
          *(_OWORD *)(v214 + 56) = 0u;
          v215 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v214 + 56), 0);
          if ((_DWORD)v215)
            geo::read_write_lock::logFailure(v215, (uint64_t)"initialization", v216);
          v217 = malloc_create_zone(0, 0);
          *(_QWORD *)(v214 + 48) = v217;
          malloc_set_zone_name(v217, "GeoGL");
          *(_QWORD *)(v214 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v214;
          v167 = &unk_1ECE44000;
        }
        *(_QWORD *)(v168 + 128) = v167[495];
        *(_QWORD *)(v168 + 136) = 0;
        *(_QWORD *)(v168 + 112) = v168 + 120;
        *(_QWORD *)v168 = &off_1E42BD478;
        *(_QWORD *)(v168 + 16) = &unk_1E42BD498;
        v173 = *(_QWORD *)(v168 + 64);
        v174 = *(_QWORD *)(*(_QWORD *)(v168 + 56) + 8);
        v175 = *(_QWORD *)(v168 + 72);
        v176 = (v175 - v173) >> 4;
        v177 = v174 - v176;
        if (v174 <= v176)
        {
          if (v174 < v176)
          {
            v178 = v173 + 16 * v174;
            while (v175 != v178)
            {
              v179 = *(std::__shared_weak_count **)(v175 - 8);
              if (v179)
              {
                v180 = (unint64_t *)&v179->__shared_owners_;
                do
                  v181 = __ldaxr(v180);
                while (__stlxr(v181 - 1, v180));
                if (!v181)
                {
                  ((void (*)(std::__shared_weak_count *, unint64_t))v179->__on_zero_shared)(v179, v177);
                  std::__shared_weak_count::__release_weak(v179);
                }
              }
              v175 -= 16;
            }
            *(_QWORD *)(v168 + 72) = v178;
            v167 = &unk_1ECE44000;
          }
        }
        else
        {
          std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v168 + 64, v177);
        }
        *(_QWORD *)v168 = &off_1E42B6008;
        *(_QWORD *)(v168 + 16) = &unk_1E42B6028;
        {
          v218 = operator new();
          *(_QWORD *)(v218 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v218 + 24) = "GeoGL";
          *(_OWORD *)(v218 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v218 = &off_1E42B5668;
          *(_QWORD *)(v218 + 8) = "GeoGL";
          *(_OWORD *)(v218 + 72) = 0u;
          *(_OWORD *)(v218 + 88) = 0u;
          *(_OWORD *)(v218 + 104) = 0u;
          *(_OWORD *)(v218 + 120) = 0u;
          *(_OWORD *)(v218 + 136) = 0u;
          *(_OWORD *)(v218 + 152) = 0u;
          *(_OWORD *)(v218 + 168) = 0u;
          *(_OWORD *)(v218 + 184) = 0u;
          *(_OWORD *)(v218 + 200) = 0u;
          *(_OWORD *)(v218 + 216) = 0u;
          *(_OWORD *)(v218 + 232) = 0u;
          *(_QWORD *)(v218 + 248) = 0;
          *(_OWORD *)(v218 + 56) = 0u;
          v219 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v218 + 56), 0);
          if ((_DWORD)v219)
            geo::read_write_lock::logFailure(v219, (uint64_t)"initialization", v220);
          v221 = malloc_create_zone(0, 0);
          *(_QWORD *)(v218 + 48) = v221;
          malloc_set_zone_name(v221, "GeoGL");
          *(_QWORD *)(v218 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v218;
          v167 = &unk_1ECE44000;
        }
        v183 = v167[495];
        v184 = v167;
        v185 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v183 + 16))(v183, 256, 8);
        *(_QWORD *)v185 = &off_1E42DFB88;
        *(_QWORD *)(v185 + 8) = 0;
        *(_QWORD *)(v185 + 16) = 0;
        *(_QWORD *)(v185 + 24) = v183;
        *(_QWORD *)(v185 + 32) = &off_1E42B5748;
        *(_QWORD *)(v185 + 40) = 24;
        *(_DWORD *)(v185 + 48) = 6;
        v186 = 0uLL;
        *(_OWORD *)(v185 + 56) = 0u;
        *(_OWORD *)(v185 + 72) = 0u;
        *(_OWORD *)(v185 + 88) = 0u;
        *(_OWORD *)(v185 + 104) = 0u;
        *(_QWORD *)(v185 + 120) = 0;
        if ((v187 & 1) == 0)
        {
          v186 = 0uLL;
          if (v222)
          {
            v223 = operator new();
            *(_QWORD *)(v223 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v223 + 24) = "GeoGL";
            *(_OWORD *)(v223 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v223 = &off_1E42B5668;
            *(_QWORD *)(v223 + 8) = "GeoGL";
            *(_OWORD *)(v223 + 72) = 0u;
            *(_OWORD *)(v223 + 88) = 0u;
            *(_OWORD *)(v223 + 104) = 0u;
            *(_OWORD *)(v223 + 120) = 0u;
            *(_OWORD *)(v223 + 136) = 0u;
            *(_OWORD *)(v223 + 152) = 0u;
            *(_OWORD *)(v223 + 168) = 0u;
            *(_OWORD *)(v223 + 184) = 0u;
            *(_OWORD *)(v223 + 200) = 0u;
            *(_OWORD *)(v223 + 216) = 0u;
            *(_OWORD *)(v223 + 232) = 0u;
            *(_QWORD *)(v223 + 248) = 0;
            *(_OWORD *)(v223 + 56) = 0u;
            v224 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v223 + 56), 0);
            if ((_DWORD)v224)
              geo::read_write_lock::logFailure(v224, (uint64_t)"initialization", v225);
            v226 = malloc_create_zone(0, 0);
            *(_QWORD *)(v223 + 48) = v226;
            malloc_set_zone_name(v226, "GeoGL");
            *(_QWORD *)(v223 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v184 = &unk_1ECE44000;
            ggl::Allocator::instance(void)::alloc = v223;
            v186 = 0uLL;
          }
        }
        *(_QWORD *)(v185 + 128) = v184[495];
        *(_QWORD *)(v185 + 136) = 0;
        *(_OWORD *)(v185 + 200) = v186;
        *(_OWORD *)(v185 + 184) = v186;
        *(_OWORD *)(v185 + 168) = v186;
        *(_QWORD *)(v185 + 216) = 0;
        *(_QWORD *)(v185 + 224) = -1;
        *(_OWORD *)(v185 + 152) = xmmword_19FFB2DD0;
        *(_DWORD *)(v185 + 144) = 0;
        *(_QWORD *)(v185 + 240) = "TransitNodeMesh";
        *(_QWORD *)(v185 + 248) = &ggl::TransitNode::defaultVboReflection;
        *(_QWORD *)(v185 + 32) = &off_1E42B77E0;
        *(_QWORD *)(v185 + 232) = &unk_1E42B7800;
        v188 = *(_QWORD **)v170;
        v189 = *(std::__shared_weak_count **)(*(_QWORD *)v170 + 8);
        *v188 = v185 + 32;
        v188[1] = v185;
        v190 = v273;
        if (v189)
        {
          v191 = (unint64_t *)&v189->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        v193 = (uint64_t *)(v273 + 8 * v166 + 168);
        v194 = *v193;
        *v193 = v168;
        if (v194)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
          v168 = *v193;
        }
        v195 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v195->__shared_owners_ = 0;
        v196 = (unint64_t *)&v195->__shared_owners_;
        v195->__shared_weak_owners_ = 0;
        v195->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFBC0;
        v195[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v195[1].__shared_owners_ = 24;
        LODWORD(v195[1].__shared_weak_owners_) = 65542;
        v197 = (std::__shared_count)0;
        v195[2].std::__shared_count = 0u;
        *(_OWORD *)&v195[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v195[3].__shared_owners_ = 0u;
        v195[4].std::__shared_count = 0u;
        v195[4].__shared_weak_owners_ = 0;
        if ((v198 & 1) == 0)
        {
          v197 = (std::__shared_count)0;
          if (v227)
          {
            v228 = operator new();
            *(_QWORD *)(v228 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v228 + 24) = "GeoGL";
            *(_OWORD *)(v228 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v228 = &off_1E42B5668;
            *(_QWORD *)(v228 + 8) = "GeoGL";
            *(_OWORD *)(v228 + 72) = 0u;
            *(_OWORD *)(v228 + 88) = 0u;
            *(_OWORD *)(v228 + 104) = 0u;
            *(_OWORD *)(v228 + 120) = 0u;
            *(_OWORD *)(v228 + 136) = 0u;
            *(_OWORD *)(v228 + 152) = 0u;
            *(_OWORD *)(v228 + 168) = 0u;
            *(_OWORD *)(v228 + 184) = 0u;
            *(_OWORD *)(v228 + 200) = 0u;
            *(_OWORD *)(v228 + 216) = 0u;
            *(_OWORD *)(v228 + 232) = 0u;
            *(_QWORD *)(v228 + 248) = 0;
            *(_OWORD *)(v228 + 56) = 0u;
            v229 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v228 + 56), 0);
            if ((_DWORD)v229)
              geo::read_write_lock::logFailure(v229, (uint64_t)"initialization", v230);
            v231 = malloc_create_zone(0, 0);
            *(_QWORD *)(v228 + 48) = v231;
            malloc_set_zone_name(v231, "GeoGL");
            *(_QWORD *)(v228 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v228;
            v190 = v273;
            v197 = (std::__shared_count)0;
          }
        }
        v195[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v195[5].__shared_owners_ = 0;
        *((std::__shared_count *)v195 + 11) = v197;
        v195[8].std::__shared_count = v197;
        v195[8].__shared_weak_owners_ = 0;
        v195[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v195 + 10) = v197;
        v195[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v195[5].__shared_weak_owners_) = 0;
        v195[9].__shared_weak_owners_ = (uint64_t)"TransitNodeMesh";
        v195[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::TransitNode::defaultVboReflection;
        v195[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B77E0;
        v195[9].__shared_owners_ = (uint64_t)&unk_1E42B7800;
        v199 = *(_QWORD **)(v168 + 64);
        do
          v200 = __ldxr(v196);
        while (__stxr(v200 + 1, v196));
        v201 = (std::__shared_weak_count *)v199[1];
        *v199 = v195 + 1;
        v199[1] = v195;
        if (v201)
        {
          v202 = (unint64_t *)&v201->__shared_owners_;
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
        do
          v204 = __ldaxr(v196);
        while (__stlxr(v204 - 1, v196));
        v167 = (_QWORD *)&unk_1ECE44000;
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
        v205 = operator new();
        v206 = v190 + 8 * v166 + 136;
        *(_QWORD *)v205 = &off_1E42B59B0;
        *(_QWORD *)(v205 + 48) = 0;
        *(_QWORD *)(v205 + 24) = 0;
        *(_QWORD *)(v205 + 32) = 0;
        *(_QWORD *)(v205 + 16) = "";
        *(_DWORD *)(v205 + 40) = 0;
        *(_DWORD *)(v205 + 56) = 1065353216;
        *(_OWORD *)(v205 + 64) = 0u;
        *(_OWORD *)(v205 + 80) = 0u;
        *(int64x2_t *)(v205 + 96) = vdupq_n_s64(1uLL);
        *(_QWORD *)(v205 + 112) = 0;
        v207 = *(_QWORD *)v206;
        *(_QWORD *)v206 = v205;
        if (v207)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
          v205 = *(_QWORD *)v206;
        }
        *(_QWORD *)(v205 + 64) = *v193;
        *(_QWORD *)(*(_QWORD *)v206 + 24) = *v271;
        v208 = *(_QWORD *)v206;
        *(_QWORD *)(*(_QWORD *)v206 + 48) = v166;
        if (v166 == 3)
          break;
        *(_QWORD *)(v208 + 32) = *(_QWORD *)(v190 + 224);
        ++v166;
      }
      *(_QWORD *)(v208 + 32) = *(_QWORD *)(v190 + 216);

      v232 = (md::TransitNodeFeaturePool *)*((_QWORD *)v262 + 12);
      *((_QWORD *)v262 + 12) = v190;
      v62 = v267;
      if (v232)
      {
        md::TransitNodeFeaturePool::~TransitNodeFeaturePool(v232);
        MEMORY[0x1A1AF4E00]();
      }

    }
  }
  if (v62)
  {
    -[VKSharedResources standardCommandBufferSelector](v268, "standardCommandBufferSelector");
    v233 = v280;
  }
  else
  {
    v233 = 0uLL;
  }
  v234 = *(std::__shared_weak_count **)(a1 + 392);
  *(_OWORD *)(a1 + 384) = v233;
  if (v234)
  {
    v235 = (unint64_t *)&v234->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }

  return a1;
}

void sub_19F3016D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,md::CTransitRenderResources **a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;

  v31 = *(std::__shared_weak_count **)(a10 + 8);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  *(_QWORD *)(a30 + 272) = &off_1E42B4D50;

  v34 = *(std::__shared_weak_count **)(a30 + 256);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(std::__shared_weak_count **)(a30 + 240);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(_QWORD *)(a30 + 224);
  *(_QWORD *)(a30 + 224) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *(_QWORD *)(a30 + 216);
  *(_QWORD *)(a30 + 216) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(std::__shared_weak_count **)(a30 + 208);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(_QWORD *)(a30 + 192);
  *(_QWORD *)(a30 + 192) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(a30 + 184);
  *(_QWORD *)(a30 + 184) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(a30 + 176);
  *(_QWORD *)(a30 + 176) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(a30 + 168);
  *(_QWORD *)(a30 + 168) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *(_QWORD *)(a30 + 160);
  *(_QWORD *)(a30 + 160) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(a30 + 152);
  *(_QWORD *)(a30 + 152) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(_QWORD *)(a30 + 144);
  *(_QWORD *)(a30 + 144) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD *)(a30 + 136);
  *(_QWORD *)(a30 + 136) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *(_QWORD *)(a30 + 128);
  *(_QWORD *)(a30 + 128) = 0;
  if (v53)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v53);
  v54 = *(_QWORD *)(a30 + 120);
  *(_QWORD *)(a30 + 120) = 0;
  if (v54)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v54);
  v55 = *a27;
  *a27 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *(_QWORD **)(a30 + 88);
  while (v56)
  {
    v62 = v56;
    v56 = (_QWORD *)*v56;
    v63 = (std::__shared_weak_count *)v62[4];
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    operator delete(v62);
  }
  v57 = *a11;
  *a11 = 0;
  if (v57)
    operator delete(v57);
  v58 = *(_QWORD **)(a30 + 48);
  while (v58)
  {
    v66 = v58;
    v58 = (_QWORD *)*v58;
    v67 = (std::__shared_weak_count *)v66[4];
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    operator delete(v66);
  }
  v59 = *a12;
  *a12 = 0;
  if (v59)
    operator delete(v59);
  v60 = *(_QWORD **)(a30 + 16);
  if (v60)
  {
    if ((*v60)-- == 1)
    {
      operator delete(v60);
      *(_QWORD *)(a30 + 16) = 0;
    }
  }

  MEMORY[0x1A1AF4E00](a30, 0x10A1C404E04FB85);
  md::TransitRenderLayer::{unnamed type#1}::~TransitRenderLayer((_QWORD **)(a24 + 424));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a24 + 384);
  std::unique_ptr<md::CTransitRenderResources>::~unique_ptr[abi:nn180100](a21);
  md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer((_QWORD *)a24);

  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42AA050;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void ggl::TransitLineRibbonShader::typedReflection(ggl::TransitLineRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TransitLineRibbonShader::typedReflection(void)::ref = (uint64_t)"TransitLineRibbonShader";
      ggl::transitLineRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE3ACA8 = (uint64_t)&ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
      dword_1ECE3ACB0 = (int)v3;
      ggl::transitLineRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3ACB8 = (uint64_t)&ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3ACC0 = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
      qword_1ECE3ACC8 = (uint64_t)ggl::transitLineRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3ACD0 = 5;
      qword_1ECE3ACD8 = (uint64_t)ggl::transitLineRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3ACE0 = 2;
      qword_1ECE3ACE8 = (uint64_t)ggl::transitLineRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3ACF0 = 2;
    }
  }
}

void ggl::transitLineRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
      *(_DWORD *)algn_1ECE403A4 = 0;
      qword_1ECE403A8 = (uint64_t)"TransitLineRibbonShader";
      unk_1ECE403B0 = ggl::transitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE403B8 = 1;
      unk_1ECE403C0 = &ggl::transitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE403C8 = 5;
      unk_1ECE403D0 = &ggl::transitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE403D8 = 0;
      unk_1ECE403E0 = &ggl::transitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE403E8 = 1;
      unk_1ECE403F0 = &ggl::transitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40400 = 0;
      unk_1ECE40408 = 0;
      qword_1ECE403F8 = 1;
    }
  }
}

void ggl::SolidRibbonShader::typedReflection(ggl::SolidRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SolidRibbonShader::typedReflection(void)::ref = (uint64_t)"SolidRibbonShader";
      ggl::solidRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE398D0 = (uint64_t)&ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
      dword_1ECE398D8 = (int)v3;
      ggl::solidRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE398E0 = (uint64_t)&ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE398E8 = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
      qword_1ECE398F0 = (uint64_t)ggl::solidRibbonShaderShaderConstants(void)::ref;
      unk_1ECE398F8 = 4;
      qword_1ECE39900 = (uint64_t)ggl::solidRibbonShaderShaderTextures(void)::ref;
      unk_1ECE39908 = 2;
      qword_1ECE39910 = (uint64_t)ggl::solidRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE39918 = 2;
    }
  }
}

void ggl::solidRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
      *(_DWORD *)algn_1ECE3E5F4 = 1;
      qword_1ECE3E5F8 = (uint64_t)"SolidRibbonShader";
      unk_1ECE3E600 = 0;
      qword_1ECE3E608 = 0;
      unk_1ECE3E610 = &ggl::solidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E618 = 2;
      unk_1ECE3E620 = &ggl::solidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E628 = 0;
      unk_1ECE3E630 = &ggl::solidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E638 = 2;
      unk_1ECE3E640 = &ggl::solidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E650 = 0;
      unk_1ECE3E658 = 0;
      qword_1ECE3E648 = 2;
    }
  }
}

void ggl::solidRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
      *(_DWORD *)algn_1ECE3DB2C = 0;
      qword_1ECE3DB30 = (uint64_t)"SolidRibbonShader";
      unk_1ECE3DB38 = ggl::solidRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DB40 = 1;
      unk_1ECE3DB48 = &ggl::solidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DB50 = 4;
      unk_1ECE3DB58 = &ggl::solidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DB60 = 0;
      unk_1ECE3DB68 = &ggl::solidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DB70 = 0;
      unk_1ECE3DB78 = &ggl::solidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DB88 = 0;
      unk_1ECE3DB90 = 0;
      qword_1ECE3DB80 = 0;
    }
  }
}

void ggl::TransitNode::BaseMesh::~BaseMesh(ggl::TransitNode::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Mesh::~Mesh(ggl::Mesh *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = &off_1E42BBC08;
  *((_QWORD *)this + 2) = &unk_1E42BBC28;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy((uint64_t)this + 112, *((_QWORD **)this + 15));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *((_QWORD *)this + 9);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = *((_QWORD *)this + 8);
  }
  *((_QWORD *)this + 9) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v7, *((_QWORD *)this + 10) - v7);
LABEL_16:
  *((_QWORD *)this + 2) = &off_1E42B8A10;
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 5));
    *((_QWORD *)this + 5) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 56);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::TransitNodeColorized::BasePipelineSetup::~BasePipelineSetup(ggl::TransitNodeColorized::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitNodeRGB::BasePipelineSetup::~BasePipelineSetup(ggl::TransitNodeRGB::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void grl::TextLayerRenderer::~TextLayerRenderer(grl::TextLayerRenderer *this)
{
  grl::TextLayerRenderer::~TextLayerRenderer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42C2648;
  *((_QWORD *)this + 42) = &off_1E42B4990;
  v2 = (const void *)*((_QWORD *)this + 43);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 39) = &off_1E42B4990;
  v3 = (const void *)*((_QWORD *)this + 40);
  if (v3)
    CFRelease(v3);
  if (*((_BYTE *)this + 200))
  {
    (**((void (***)(char *))this + 26))((char *)this + 208);
    *((_BYTE *)this + 200) = 0;
  }
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v4, *((_QWORD *)this + 4) - v4);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__erase_unique<unsigned short>(uint64_t *a1, unsigned __int16 a2)
{
  unint64_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 **v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  void *v18;

  v2 = a1[1];
  if (v2)
  {
    v3 = a2;
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *a1;
    v7 = *(unsigned __int16 ***)(*a1 + 8 * v5);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        v9 = v2 - 1;
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            v10 = *((_QWORD *)v8 + 1);
            if (v10 == a2)
            {
              if (v8[8] == a2)
                goto LABEL_22;
            }
            else if ((v10 & v9) != v5)
            {
              return;
            }
            v8 = *(unsigned __int16 **)v8;
            if (!v8)
              return;
          }
        }
        do
        {
          v11 = *((_QWORD *)v8 + 1);
          if (v11 == a2)
          {
            if (v8[8] == a2)
            {
LABEL_22:
              if (v4.u32[0] > 1uLL)
              {
                if (v2 <= a2)
                  v3 = a2 % v2;
              }
              else
              {
                v3 = v9 & a2;
              }
              v12 = *(unsigned __int16 **)(v6 + 8 * v3);
              do
              {
                v13 = (uint64_t *)v12;
                v12 = *(unsigned __int16 **)v12;
              }
              while (v12 != v8);
              if (v13 == a1 + 2)
                goto LABEL_39;
              v14 = v13[1];
              if (v4.u32[0] > 1uLL)
              {
                if (v14 >= v2)
                  v14 %= v2;
              }
              else
              {
                v14 &= v9;
              }
              if (v14 != v3)
              {
LABEL_39:
                if (!*(_QWORD *)v8)
                  goto LABEL_40;
                v15 = *(_QWORD *)(*(_QWORD *)v8 + 8);
                if (v4.u32[0] > 1uLL)
                {
                  if (v15 >= v2)
                    v15 %= v2;
                }
                else
                {
                  v15 &= v9;
                }
                if (v15 != v3)
LABEL_40:
                  *(_QWORD *)(v6 + 8 * v3) = 0;
              }
              v16 = *(unsigned __int16 **)v8;
              if (*(_QWORD *)v8)
              {
                v17 = *((_QWORD *)v16 + 1);
                if (v4.u32[0] > 1uLL)
                {
                  if (v17 >= v2)
                    v17 %= v2;
                }
                else
                {
                  v17 &= v9;
                }
                if (v17 != v3)
                {
                  *(_QWORD *)(*a1 + 8 * v17) = v13;
                  v16 = *(unsigned __int16 **)v8;
                }
              }
              *v13 = (uint64_t)v16;
              *(_QWORD *)v8 = 0;
              --a1[3];
              v18 = (void *)*((_QWORD *)v8 + 3);
              if (v18)
              {
                *((_QWORD *)v8 + 4) = v18;
                operator delete(v18);
              }
              operator delete(v8);
              return;
            }
          }
          else
          {
            if (v11 >= v2)
              v11 %= v2;
            if (v11 != v5)
              return;
          }
          v8 = *(unsigned __int16 **)v8;
        }
        while (v8);
      }
    }
  }
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = operator new(0x48uLL);
  *v2 = &off_1E42CFD70;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v3 = a1[4];
  v2[4] = v3;
  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      abort();
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5 - v4, 8);
    v2[1] = v7;
    v2[2] = v7;
    v2[3] = &v7[2 * (v6 >> 4)];
    do
    {
      if (v7)
      {
        v8 = *((_QWORD *)v4 + 1);
        *v7 = *(_QWORD *)v4;
        v7[1] = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      v4 += 16;
      v7 += 2;
    }
    while (v4 != v5);
    v2[2] = v7;
  }
  v11 = a1[6];
  v2[5] = a1[5];
  v2[6] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a1[8];
  v2[7] = a1[7];
  v2[8] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return v2;
}

void sub_19F30339C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::LabelNavTrafficSupport::setExternalTrafficFeatures(md::LabelNavTrafficSupport *this, NSArray *a2, char a3)
{
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;
  uint64_t **v11;
  unsigned __int8 v12;
  NSArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  id v23;
  void *v24;
  md::LabelNavTrafficSupport *v25;
  unint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  md::LabelNavTrafficSupport *v37;
  void **v38;
  void **v39;
  char *v40;
  void **v41;
  void *v42;
  void *v43;
  void **v44;
  uint64_t v45;
  void **v46;
  void **v47;
  void (**v48)(void **);
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  unsigned __int8 v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  _BOOL4 v61;
  _BOOL4 v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _OWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  _OWORD *v82;
  _QWORD *v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t v88;
  uint64_t **v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD **v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *j;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  _OWORD *v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  _OWORD *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t *v128;
  void *v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  NSArray *v142;
  _QWORD *v143;
  NSArray *v144;
  _QWORD *v145;
  md::LabelNavTrafficSupport *v146;
  __int128 v147;
  uint64_t *v148;
  __int128 v149;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[128];
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v142 = a2;
  *((_BYTE *)this + 152) = a3;
  v6 = (void (***)(_QWORD))*((_QWORD *)this + 5);
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 6);
  if (v5 != v6)
  {
    v7 = v5 - 3;
    v8 = v5 - 3;
    do
    {
      v9 = *v8;
      v8 -= 3;
      (*v9)(v7);
      v10 = v7 == v6;
      v7 = v8;
    }
    while (!v10);
  }
  *((_QWORD *)this + 6) = v6;
  v11 = &v157;
  v157 = 0;
  {
    v139 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v139, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v158 = mdm::Allocator::instance(void)::alloc;
  v159 = 0;
  v156 = &v157;
  v146 = this;
  if (!-[NSArray count](v142, "count"))
    goto LABEL_55;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v13 = v142;
  v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v152, v160, 16);
  if (!v14)
    goto LABEL_54;
  v15 = *(_QWORD *)v153;
  v144 = v13;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v153 != v15)
        objc_enumerationMutation(v13);
      v18 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * i);
      if (!objc_msgSend(v18, "trafficFeatureType") && (objc_msgSend(v18, "isNotForDisplay") & 1) == 0)
      {
        v19 = v18;
        v20 = v157;
        v21 = &v157;
        if (v157)
        {
          v21 = &v157;
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v20;
              if (!VKTrafficIncidentFeatureSetLessThan::operator()(v19, (void *)v20[4]))
                break;
              v20 = *v11;
              v21 = v11;
              if (!*v11)
                goto LABEL_26;
            }
            if (!VKTrafficIncidentFeatureSetLessThan::operator()(v11[4], v19))
              break;
            v21 = v11 + 1;
            v20 = v11[1];
            if (!v20)
              goto LABEL_26;
          }
          if (*v21)
            goto LABEL_12;
        }
LABEL_26:
        v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158 + 16))(v158, 40, 8);
        v22[4] = (uint64_t)v19;
        *v22 = 0;
        v22[1] = 0;
        v22[2] = (uint64_t)v11;
        *v21 = v22;
        if (*v156)
        {
          v156 = (uint64_t **)*v156;
          v22 = *v21;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v157, v22);
        ++v159;
        v23 = v19;
        v24 = v23;
        v25 = v146;
        v27 = (_QWORD *)*((_QWORD *)v146 + 6);
        v26 = *((_QWORD *)v146 + 7);
        if ((unint64_t)v27 < v26)
        {
          if (v27)
          {
            v28 = v23;
            *v27 = &off_1E42B5130;
            v27[1] = v28;
          }
          v17 = v27 + 3;
          goto LABEL_11;
        }
        v29 = *((_QWORD *)v146 + 5);
        v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - v29) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v29) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v146 + 8) + 16))(*((_QWORD *)v146 + 8), 24 * v33, 8);
          v35 = v34 + 24 * v30;
          v33 = v34 + 24 * v33;
          if (v34)
          {
            v36 = v24;
            *(_QWORD *)v35 = &off_1E42B5130;
            *(_QWORD *)(v34 + 24 * v30 + 8) = v36;
          }
          v25 = v146;
        }
        else
        {
          v35 = 8 * (((uint64_t)v27 - v29) >> 3);
        }
        v17 = (_QWORD *)(v35 + 24);
        v37 = v25;
        v40 = (char *)v25 + 40;
        v39 = (void **)*((_QWORD *)v25 + 5);
        v38 = (void **)*((_QWORD *)v40 + 1);
        if (v38 == v39)
        {
          *((_QWORD *)v37 + 5) = v35;
          *((_QWORD *)v37 + 6) = v17;
          v45 = *((_QWORD *)v37 + 7);
          *((_QWORD *)v37 + 7) = v33;
          v25 = v37;
          if (!v38)
            goto LABEL_11;
        }
        else
        {
          do
          {
            *(_QWORD *)(v35 - 24) = &off_1E42B5130;
            v35 -= 24;
            *(_QWORD *)(v35 + 8) = 0;
            v42 = *(v38 - 2);
            v41 = v38 - 2;
            objc_storeStrong((id *)(v35 + 8), v42);
            v43 = *v41;
            *v41 = 0;

            v38 = v41 - 1;
          }
          while (v38 != v39);
          v25 = v146;
          v38 = (void **)*((_QWORD *)v146 + 5);
          v44 = (void **)*((_QWORD *)v146 + 6);
          *((_QWORD *)v146 + 5) = v35;
          *((_QWORD *)v146 + 6) = v17;
          v45 = *((_QWORD *)v146 + 7);
          *((_QWORD *)v146 + 7) = v33;
          if (v44 != v38)
          {
            v46 = v44 - 3;
            v47 = v44 - 3;
            do
            {
              v48 = (void (**)(void **))*v47;
              v47 -= 3;
              (*v48)(v46);
              v10 = v46 == v38;
              v46 = v47;
            }
            while (!v10);
            v25 = v146;
          }
          if (!v38)
          {
LABEL_11:
            *((_QWORD *)v25 + 6) = v17;
LABEL_12:

            v11 = &v157;
            v13 = v144;
            continue;
          }
        }
        (*(void (**)(_QWORD, void **, uint64_t))(**((_QWORD **)v25 + 8) + 40))(*((_QWORD *)v25 + 8), v38, v45 - (_QWORD)v38);
        goto LABEL_11;
      }
    }
    v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v152, v160, 16);
  }
  while (v14);
LABEL_54:

  this = v146;
LABEL_55:
  v49 = (void *)*((_QWORD *)this + 4);
  if (v49)
  {
    objc_msgSend(v49, "removeAllObjects");
  }
  else
  {
    v50 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v51 = objc_msgSend(v50, "initWithCapacity:", v159);
    v52 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v51;

    this = v146;
  }
  v149 = 0uLL;
  v150 = 0;
  {
    v140 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v140, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v151 = mdm::Allocator::instance(void)::alloc;
  v54 = (_QWORD *)*((_QWORD *)this + 9);
  v143 = (_QWORD *)((char *)this + 72);
  v145 = (_QWORD *)*((_QWORD *)this + 10);
  if (v54 == v145)
  {
    v55 = (_QWORD *)*((_QWORD *)this + 9);
    goto LABEL_129;
  }
  while (2)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v54 + 200))(*v54);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = v157;
    if (!v157)
      goto LABEL_61;
    v58 = (uint64_t *)&v157;
    do
    {
      v59 = v57;
      v60 = v58;
      v61 = VKTrafficIncidentFeatureSetLessThan::operator()((void *)v57[4], v56);
      v62 = v61;
      v63 = (uint64_t **)(v59 + 1);
      if (v61)
        v64 = (uint64_t **)(v59 + 1);
      else
        v64 = (uint64_t **)v59;
      if (!v61)
        v58 = v59;
      v57 = *v64;
    }
    while (v57);
    if (v58 == (uint64_t *)&v157
      || (!v61 ? (v65 = v59) : (v65 = v60), VKTrafficIncidentFeatureSetLessThan::operator()(v56, (void *)v65[4])))
    {
LABEL_61:

    }
    else
    {

      v66 = (_QWORD *)*((_QWORD *)&v149 + 1);
      if (*((_QWORD *)&v149 + 1) < v150)
      {
        if (*((_QWORD *)&v149 + 1))
        {
          **((_QWORD **)&v149 + 1) = *v54;
          v67 = v54[1];
          v66[1] = v67;
          if (v67)
          {
            v68 = (unint64_t *)(v67 + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
        }
        v70 = v66 + 2;
        goto LABEL_107;
      }
      v71 = (_QWORD *)v149;
      v72 = (uint64_t)(*((_QWORD *)&v149 + 1) - v149) >> 4;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 60)
        abort();
      v74 = v150 - v149;
      if ((uint64_t)(v150 - v149) >> 3 > v73)
        v73 = v74 >> 3;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
        v75 = 0xFFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
      {
        v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, 16 * v75, 8);
        v77 = (_OWORD *)(v76 + 16 * v72);
        v78 = v76 + 16 * v75;
        if (v76)
        {
          v79 = *(_OWORD *)v54;
          *v77 = *(_OWORD *)v54;
          if (*((_QWORD *)&v79 + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
            v66 = (_QWORD *)*((_QWORD *)&v149 + 1);
          }
        }
      }
      else
      {
        v78 = 0;
        v77 = (_OWORD *)(16 * v72);
      }
      v82 = v77 + 1;
      if (v66 == v71)
      {
        v70 = v77 + 1;
        v88 = v150;
        *(_QWORD *)&v149 = v77;
        v150 = v78;
        if (!v71)
          goto LABEL_107;
LABEL_106:
        (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v151 + 40))(v151, v71, v88 - (_QWORD)v71);
        goto LABEL_107;
      }
      v83 = v66;
      do
      {
        v84 = *((_OWORD *)v83 - 1);
        v83 -= 2;
        *--v77 = v84;
        *v83 = 0;
        v83[1] = 0;
      }
      while (v83 != v71);
      *(_QWORD *)&v149 = v77;
      *((_QWORD *)&v149 + 1) = v82;
      v70 = v82;
      v141 = v150;
      v150 = v78;
      do
      {
        v85 = (std::__shared_weak_count *)*(v66 - 1);
        if (v85)
        {
          p_shared_owners = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(p_shared_owners);
          while (__stlxr(v87 - 1, p_shared_owners));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v66 -= 2;
      }
      while (v66 != v71);
      v88 = v141;
      if (v71)
        goto LABEL_106;
LABEL_107:
      *((_QWORD *)&v149 + 1) = v70;
      v89 = (uint64_t **)(v60 + 1);
      if (!v62)
        v89 = v63;
      v90 = *v89;
      v91 = v58;
      if (*v89)
      {
        do
        {
          v92 = (uint64_t **)v90;
          v90 = (uint64_t *)*v90;
        }
        while (v90);
      }
      else
      {
        do
        {
          v92 = (uint64_t **)v91[2];
          v10 = *v92 == v91;
          v91 = (uint64_t *)v92;
        }
        while (!v10);
      }
      if (v156 == (uint64_t **)v58)
        v156 = v92;
      --v159;
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v157, v58);

      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v158 + 40))(v158, v58, 40);
    }
    v54 += 2;
    if (v54 != v145)
      continue;
    break;
  }
  this = v146;
  v54 = (_QWORD *)*((_QWORD *)v146 + 9);
  v55 = (_QWORD *)*((_QWORD *)v146 + 10);
  if (v55 == v54)
  {
    v54 = (_QWORD *)*((_QWORD *)v146 + 10);
  }
  else
  {
    do
    {
      v93 = (std::__shared_weak_count *)*(v55 - 1);
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v55 -= 2;
    }
    while (v55 != v54);
    v55 = (_QWORD *)*v143;
  }
LABEL_129:
  v96 = (_QWORD **)((char *)this + 104);
  v97 = (uint64_t *)*((_QWORD *)this + 13);
  *(_OWORD *)((char *)this + 72) = v149;
  *(_QWORD *)&v149 = v55;
  *((_QWORD *)&v149 + 1) = v54;
  v98 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v150;
  v150 = v98;
  for (j = (uint64_t *)*((_QWORD *)this + 14); j != v97; j -= 2)
  {
    v100 = (std::__shared_weak_count *)*(j - 1);
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
  }
  *((_QWORD *)this + 14) = v97;
  v103 = v156;
  if (v156 != &v157)
  {
    do
    {
      v104 = v103[4];
      v148 = v104;
      if (objc_msgSend(v104, "routeRelevance") == 3 || objc_msgSend(v104, "routeRelevance") == 2)
      {
        if (objc_msgSend(v104, "isOnSelectedRoute")
          && ((v105 = objc_msgSend(v104, "routeOffset"), v106 = *((_DWORD *)this + 34), v106 > v105)
           || v106 == (_DWORD)v105 && *((float *)this + 35) > *((float *)&v105 + 1)))
        {
          v107 = 2;
        }
        else
        {
          v107 = 3;
        }
        objc_msgSend(v104, "setRouteRelevance:", v107);
      }
      v108 = operator new(0x1A0uLL);
      std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::__shared_ptr_emplace[abi:nn180100]<VKTrafficIncidentFeature * {__strong}&,std::shared_ptr<md::RouteAnnotationDedupingGroup> &,std::allocator<md::TrafficIncidentLabelFeature>,0>(v108, (void **)&v148, *((_QWORD *)this + 2), *((std::__shared_weak_count **)this + 3));
      *(_QWORD *)&v147 = v108 + 3;
      *((_QWORD *)&v147 + 1) = v108;
      v109 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 1) + 288) + 680);
      do
      {
        v110 = __ldaxr(v109);
        v111 = v110 + 1;
      }
      while (__stlxr(v111, v109));
      v108[12] = v111;
      v112 = (_QWORD *)*((_QWORD *)this + 10);
      if ((unint64_t)v112 >= *((_QWORD *)this + 11))
      {
        v116 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v143, &v147);
      }
      else
      {
        if (v112)
        {
          *v112 = v147;
          v113 = *((_QWORD *)&v147 + 1);
          v112[1] = *((_QWORD *)&v147 + 1);
          if (v113)
          {
            v114 = (unint64_t *)(v113 + 8);
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
        }
        v116 = v112 + 2;
      }
      *((_QWORD *)this + 10) = v116;
      v117 = v148;
      if (objc_msgSend(v148, "isOnSelectedRoute") && objc_msgSend(v117, "routeRelevance") == 3)
      {
        v118 = (_QWORD *)*((_QWORD *)this + 14);
        if ((unint64_t)v118 >= *((_QWORD *)this + 15))
        {
          v122 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v96, &v147);
        }
        else
        {
          if (v118)
          {
            *v118 = v147;
            v119 = *((_QWORD *)&v147 + 1);
            v118[1] = *((_QWORD *)&v147 + 1);
            if (v119)
            {
              v120 = (unint64_t *)(v119 + 8);
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
            }
          }
          v122 = v118 + 2;
        }
        *((_QWORD *)this + 14) = v122;
      }
      objc_msgSend(*((id *)this + 4), "addObject:", v117);
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
      if (*((_QWORD *)&v147 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }

      v126 = v103[1];
      if (v126)
      {
        do
        {
          v127 = (uint64_t **)v126;
          v126 = (uint64_t *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          v127 = (uint64_t **)v103[2];
          v10 = *v127 == (uint64_t *)v103;
          v103 = v127;
        }
        while (!v10);
      }
      v103 = v127;
      this = v146;
    }
    while (v127 != &v157);
    v97 = (uint64_t *)*((_QWORD *)v146 + 14);
  }
  *((_QWORD *)this + 18) = 0xFFFFFFFFLL;
  v128 = (uint64_t *)*((_QWORD *)this + 13);
  if (v128 != v97)
  {
    std::__introsort<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,false>(v128, v97, 126 - 2 * __clz(((char *)v97 - (char *)v128) >> 4), 1);
    (*(void (**)(_QWORD))(*(_QWORD *)**v96 + 200))(**v96);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    *((_QWORD *)this + 18) = objc_msgSend(v129, "routeOffset");

    this = v146;
  }
  v130 = *((_QWORD *)this + 1);
  *(_BYTE *)(v130 + 3041) = 1;
  v131 = atomic_load((unsigned __int8 *)(v130 + 3058));
  if ((v131 & 1) != 0)
  {
    v132 = *(_QWORD *)(v130 + 136);
    if (v132)
    {
      v133 = *(_QWORD *)(v132 + 56);
      if (v133)
      {
        *(_QWORD *)&v147 = v130;
        LOBYTE(v148) = 9;
        (*(void (**)(uint64_t, __int128 *, uint64_t **))(*(_QWORD *)v133 + 48))(v133, &v147, &v148);
      }
    }
  }
  v134 = v149;
  if ((_QWORD)v149)
  {
    v135 = *((_QWORD *)&v149 + 1);
    if (*((_QWORD *)&v149 + 1) != (_QWORD)v149)
    {
      do
      {
        v136 = *(std::__shared_weak_count **)(v135 - 8);
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        v135 -= 16;
      }
      while (v135 != v134);
      v134 = v149;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v151 + 40))(v151, v134, v150 - v134);
  }
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v156, (uint64_t)v157);

}

